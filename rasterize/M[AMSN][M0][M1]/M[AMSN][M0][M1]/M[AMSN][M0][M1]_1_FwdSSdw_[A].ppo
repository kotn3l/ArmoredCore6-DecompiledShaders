#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _855;
float _3249;
float _3250;
float _3251;
float _3252;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    vec4 _235 = texture(sampler2D(M_AMSN_M0_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _241 = _235.x * cbMtdParam._m0[9u].x;
    float _242 = _235.y * cbMtdParam._m0[9u].y;
    float _243 = _235.z * cbMtdParam._m0[9u].z;
    vec4 _255 = texture(sampler2D(M_AMSN_M0_M1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _259 = _255.z;
    float _263 = (_255.x * 2.0) + (-1.0);
    float _265 = (_255.y * 2.0) + (-1.0);
    float _266 = dot(vec2(_263, _265), vec2(_263, _265));
    float _3261 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _272 = sqrt(1.0 - (isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0))));
    float _275 = fma(_272, _213, fma(_265, _205 * TANGENT.x, (_191 * _184) * _263));
    float _278 = fma(_272, _214, fma(_265, _205 * TANGENT.y, (_191 * _185) * _263));
    float _281 = fma(_272, _215, fma(_265, _205 * TANGENT.z, (_191 * _186) * _263));
    float _285 = inversesqrt(dot(vec3(_275, _278, _281), vec3(_275, _278, _281)));
    float _286 = _285 * _275;
    float _287 = _285 * _278;
    float _288 = _285 * _281;
    float _3272 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _289 = isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0));
    float _3283 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3294 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3305 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _308 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _350 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _360 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _350);
    float _361 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _350);
    float _362 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _350);
    float _366 = inversesqrt(dot(vec3(_360, _361, _362), vec3(_360, _361, _362)));
    float _367 = _360 * _366;
    float _368 = _361 * _366;
    float _369 = _362 * _366;
    vec4 _374 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _376 = _374.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _534 = sqrt(((_360 * _360) + (_361 * _361)) + (_362 * _362));
        float _540 = (cbMatDynParam._m0[5u].x * _534) + cbMatDynParam._m0[5u].y;
        float _3316 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
        float _541 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
        float _545 = (cbMatDynParam._m0[5u].z * _534) + cbMatDynParam._m0[5u].w;
        float _3327 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0))) - _541)) + _541) < ((_376 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _388 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _389 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _409 = fma(_288, cbSceneParam._m0[5u].z, fma(_287, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _286));
    float _412 = fma(_288, cbSceneParam._m0[6u].z, fma(_287, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _286));
    float _415 = fma(_288, cbSceneParam._m0[7u].z, fma(_287, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _286));
    uint _428 = uint(roundEven(NORMAL.w)) * 13u;
    uint _430 = _428 + 9u;
    uint _431 = _430 + uint(cbMatDynParam._m0[0u].w);
    float _437 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0)))) * cbInstanceData._m0[_431].x;
    float _438 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0)))) * cbInstanceData._m0[_431].y;
    float _439 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0)))) * cbInstanceData._m0[_431].z;
    float _3338 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _440 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
    float _3349 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _441 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
    float _3360 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _442 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
    vec4 _451 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _388, cbSceneParam._m0[86u].y * _389));
    float _454 = _451.x * TEXCOORD.z;
    float _455 = dot(vec3(_286, _287, _288), vec3(_367, _368, _369));
    float _458 = _455 * 2.0;
    float _462 = (_458 * _286) - _367;
    float _463 = (_458 * _287) - _368;
    float _464 = (_458 * _288) - _369;
    float _468 = abs(dot(vec3(_367, _368, _369), vec3(_286, _287, _288)));
    float _3371 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _470 = sqrt(_289);
    float _483 = exp2((_470 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_470 * 3.0));
    float _515 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _519 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _523 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _854;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _579 = fma(_523, cbModelParam._m0[26u].z, fma(_519, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _515));
        float _583 = fma(_523, cbModelParam._m0[27u].z, fma(_519, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _515));
        float _587 = fma(_523, cbModelParam._m0[28u].z, fma(_519, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _515));
        float _612 = _515 + _286;
        float _613 = _519 + _287;
        float _614 = _523 + _288;
        float _624 = fma(_614, cbModelParam._m0[26u].z, fma(_613, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _612)) - _579;
        float _625 = fma(_614, cbModelParam._m0[27u].z, fma(_613, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _612)) - _583;
        float _626 = fma(_614, cbModelParam._m0[28u].z, fma(_613, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _612)) - _587;
        float _630 = inversesqrt(dot(vec3(_624, _625, _626), vec3(_624, _625, _626)));
        float _643 = ((_630 * _624) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_579 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _644 = ((_630 * _625) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_583 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _645 = ((_630 * _626) / cbModelParam._m0[34u].z) + ((((((_587 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _648 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_643, _644, _645), 0.0);
        vec4 _655 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_643, _644, _645), 0.0);
        vec4 _662 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_643, _644, _645), 0.0);
        vec4 _669 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_643, _644, _645), 0.0);
        float _682 = exp2((_648.w + (-0.5)) * 20.0) * 2.0;
        float _683 = _682 * (_648.x + (-0.5));
        float _684 = _682 * (_648.y + (-0.5));
        float _685 = _682 * (_648.z + (-0.5));
        float _692 = exp2((_655.w + (-0.5)) * 20.0) * 2.0;
        float _693 = _692 * (_655.x + (-0.5));
        float _694 = _692 * (_655.y + (-0.5));
        float _695 = _692 * (_655.z + (-0.5));
        float _702 = exp2((_662.w + (-0.5)) * 20.0) * 2.0;
        float _703 = _702 * (_662.x + (-0.5));
        float _704 = _702 * (_662.y + (-0.5));
        float _705 = _702 * (_662.z + (-0.5));
        float _712 = exp2((_669.w + (-0.5)) * 20.0) * 2.0;
        float _713 = _712 * (_669.x + (-0.5));
        float _714 = _712 * (_669.y + (-0.5));
        float _715 = _712 * (_669.z + (-0.5));
        float _716 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _717 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _718 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _719 = _683 * 0.5;
        float _720 = _693 * 0.5;
        float _721 = _703 * 0.5;
        float _722 = dot(vec3(_719, _720, _721), vec3(_719, _720, _721));
        float _727 = (_722 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_722);
        float _736 = (dot(vec3(_286, _287, _288), vec3(_727 * _719, _727 * _720, _727 * _721)) + 1.0) * 0.5;
        float _3397 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _746 = sqrt(((_720 * _720) + (_719 * _719)) + (_721 * _721)) / (_716 + 9.9999997473787516355514526367188e-06);
        float _3408 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _747 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
        float _748 = _747 * 2.0;
        float _752 = (1.0 - _747) / (_747 + 1.0);
        float _3419 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
        float _762 = ((((1.0 - _753) * (_748 + 2.0)) * exp2(log2(isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0))) * (_748 + 1.0))) + _753) * _716;
        float _763 = _684 * 0.5;
        float _764 = _694 * 0.5;
        float _765 = _704 * 0.5;
        float _766 = dot(vec3(_763, _764, _765), vec3(_763, _764, _765));
        float _771 = (_766 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_766);
        float _779 = (dot(vec3(_286, _287, _288), vec3(_771 * _763, _771 * _764, _771 * _765)) + 1.0) * 0.5;
        float _3430 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _788 = sqrt(((_764 * _764) + (_763 * _763)) + (_765 * _765)) / (_717 + 9.9999997473787516355514526367188e-06);
        float _3441 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
        float _790 = _789 * 2.0;
        float _794 = (1.0 - _789) / (_789 + 1.0);
        float _3452 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _795 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
        float _804 = ((((1.0 - _795) * (_790 + 2.0)) * exp2(log2(isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0))) * (_790 + 1.0))) + _795) * _717;
        float _805 = _685 * 0.5;
        float _806 = _695 * 0.5;
        float _807 = _705 * 0.5;
        float _808 = dot(vec3(_805, _806, _807), vec3(_805, _806, _807));
        float _813 = (_808 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_808);
        float _821 = (dot(vec3(_286, _287, _288), vec3(_813 * _805, _813 * _806, _813 * _807)) + 1.0) * 0.5;
        float _3463 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _830 = sqrt(((_806 * _806) + (_805 * _805)) + (_807 * _807)) / (_718 + 9.9999997473787516355514526367188e-06);
        float _3474 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _832 = _831 * 2.0;
        float _836 = (1.0 - _831) / (_831 + 1.0);
        float _3485 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _837 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _846 = ((((1.0 - _837) * (_832 + 2.0)) * exp2(log2(isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0))) * (_832 + 1.0))) + _837) * _718;
        _854 = _685;
        _856 = _684;
        _857 = _683;
        _858 = _695;
        _859 = _694;
        _860 = _693;
        _861 = _705;
        _862 = _704;
        _863 = _703;
        _864 = _718;
        _865 = _717;
        _866 = _716;
        _867 = cbModelParam._m0[36u].z * (isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0)));
        _868 = cbModelParam._m0[36u].z * (isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0)));
        _869 = cbModelParam._m0[36u].z * (isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0)));
    }
    else
    {
        _854 = _855;
        _856 = _855;
        _857 = _855;
        _858 = _855;
        _859 = _855;
        _860 = _855;
        _861 = _855;
        _862 = _855;
        _863 = _855;
        _864 = _855;
        _865 = _855;
        _866 = _855;
        _867 = 0.0;
        _868 = 0.0;
        _869 = 0.0;
    }
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _898 = fma(_523, cbModelParam._m0[30u].z, fma(_519, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _515));
        float _902 = fma(_523, cbModelParam._m0[31u].z, fma(_519, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _515));
        float _906 = fma(_523, cbModelParam._m0[32u].z, fma(_519, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _515));
        float _929 = _515 + _286;
        float _930 = _519 + _287;
        float _931 = _523 + _288;
        float _941 = fma(_931, cbModelParam._m0[30u].z, fma(_930, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _929)) - _898;
        float _942 = fma(_931, cbModelParam._m0[31u].z, fma(_930, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _929)) - _902;
        float _943 = fma(_931, cbModelParam._m0[32u].z, fma(_930, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _929)) - _906;
        float _947 = inversesqrt(dot(vec3(_941, _942, _943), vec3(_941, _942, _943)));
        float _960 = ((_947 * _941) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_898 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _961 = ((_947 * _942) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_902 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _962 = ((_947 * _943) / cbModelParam._m0[35u].z) + ((((((_906 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        float _997 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_964.x + (-0.5));
        float _999 = _997 * (_964.y + (-0.5));
        float _1000 = _997 * (_964.z + (-0.5));
        float _1007 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_971.x + (-0.5));
        float _1009 = _1007 * (_971.y + (-0.5));
        float _1010 = _1007 * (_971.z + (-0.5));
        float _1017 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_978.x + (-0.5));
        float _1019 = _1017 * (_978.y + (-0.5));
        float _1020 = _1017 * (_978.z + (-0.5));
        float _1027 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1028 = _1027 * (_985.x + (-0.5));
        float _1029 = _1027 * (_985.y + (-0.5));
        float _1030 = _1027 * (_985.z + (-0.5));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = _998 * 0.5;
        float _1035 = _1008 * 0.5;
        float _1036 = _1018 * 0.5;
        float _1037 = dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036));
        float _1042 = (_1037 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1037);
        float _1050 = (dot(vec3(_286, _287, _288), vec3(_1042 * _1034, _1042 * _1035, _1042 * _1036)) + 1.0) * 0.5;
        float _3526 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1059 = sqrt(((_1035 * _1035) + (_1034 * _1034)) + (_1036 * _1036)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3537 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _1061 = _1060 * 2.0;
        float _1065 = (1.0 - _1060) / (_1060 + 1.0);
        float _3548 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _1075 = ((((1.0 - _1066) * (_1061 + 2.0)) * exp2(log2(isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) * (_1061 + 1.0))) + _1066) * _1031;
        float _1076 = _999 * 0.5;
        float _1077 = _1009 * 0.5;
        float _1078 = _1019 * 0.5;
        float _1079 = dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078));
        float _1084 = (_1079 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1079);
        float _1092 = (dot(vec3(_286, _287, _288), vec3(_1084 * _1076, _1084 * _1077, _1084 * _1078)) + 1.0) * 0.5;
        float _3559 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1101 = sqrt(((_1077 * _1077) + (_1076 * _1076)) + (_1078 * _1078)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3570 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _1103 = _1102 * 2.0;
        float _1107 = (1.0 - _1102) / (_1102 + 1.0);
        float _3581 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _1117 = ((((1.0 - _1108) * (_1103 + 2.0)) * exp2(log2(isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))) * (_1103 + 1.0))) + _1108) * _1032;
        float _1118 = _1000 * 0.5;
        float _1119 = _1010 * 0.5;
        float _1120 = _1020 * 0.5;
        float _1121 = dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120));
        float _1126 = (_1121 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1121);
        float _1134 = (dot(vec3(_286, _287, _288), vec3(_1126 * _1118, _1126 * _1119, _1126 * _1120)) + 1.0) * 0.5;
        float _3592 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1143 = sqrt(((_1119 * _1119) + (_1118 * _1118)) + (_1120 * _1120)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3603 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _1145 = _1144 * 2.0;
        float _1149 = (1.0 - _1144) / (_1144 + 1.0);
        float _3614 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _1159 = ((((1.0 - _1150) * (_1145 + 2.0)) * exp2(log2(isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0))) * (_1145 + 1.0))) + _1150) * _1033;
        _1167 = _1000;
        _1168 = _999;
        _1169 = _998;
        _1170 = _1010;
        _1171 = _1009;
        _1172 = _1008;
        _1173 = _1020;
        _1174 = _1019;
        _1175 = _1018;
        _1176 = _1033;
        _1177 = _1032;
        _1178 = _1031;
        _1179 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)));
        _1180 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)));
        _1181 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)));
    }
    else
    {
        _1167 = _855;
        _1168 = _855;
        _1169 = _855;
        _1170 = _855;
        _1171 = _855;
        _1172 = _855;
        _1173 = _855;
        _1174 = _855;
        _1175 = _855;
        _1176 = _855;
        _1177 = _855;
        _1178 = _855;
        _1179 = 0.0;
        _1180 = 0.0;
        _1181 = 0.0;
    }
    float _1191 = (cbModelParam._m0[1u].x * (_1179 - _867)) + _867;
    float _1192 = (cbModelParam._m0[1u].x * (_1180 - _868)) + _868;
    float _1193 = (cbModelParam._m0[1u].x * (_1181 - _869)) + _869;
    float _1214 = fma(_1193, cbSceneParam._m0[89u].z, fma(_1192, cbSceneParam._m0[89u].y, _1191 * cbSceneParam._m0[89u].x));
    float _1217 = fma(_1193, cbSceneParam._m0[90u].z, fma(_1192, cbSceneParam._m0[90u].y, _1191 * cbSceneParam._m0[90u].x));
    float _1220 = fma(_1193, cbSceneParam._m0[91u].z, fma(_1192, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1191));
    float _1235 = _462 * 0.5;
    float _1236 = _463 * 0.5;
    float _1237 = _464 * 0.5;
    float _1238 = dot(vec4(_1235, _1236, _1237, 1.0), vec4(_1169, _1172, _1175, _1178));
    float _1241 = dot(vec4(_1235, _1236, _1237, 1.0), vec4(_1168, _1171, _1174, _1177));
    float _1244 = dot(vec4(_1235, _1236, _1237, 1.0), vec4(_1167, _1170, _1173, _1176));
    float _1278;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1251 = dot(vec4(_1235, _1236, _1237, 1.0), vec4(_854, _858, _861, _864));
        float _1255 = dot(vec4(_1235, _1236, _1237, 1.0), vec4(_856, _859, _862, _865));
        float _1259 = dot(vec4(_1235, _1236, _1237, 1.0), vec4(_857, _860, _863, _866));
        float _1266 = dot(vec4(cbModelParam._m0[39u]), vec4(_1235, _1236, _1237, 1.0));
        _1278 = dot(vec3(isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)), isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)), isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1266) ? 0.0 : (isnan(0.0) ? _1266 : max(0.0, _1266))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1278 = 1.0;
    }
    float _1289;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1280 = dot(vec4(cbModelParam._m0[40u]), vec4(_1235, _1236, _1237, 1.0));
        _1289 = dot(vec3(isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)), isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)), isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1280) ? 0.0 : (isnan(0.0) ? _1280 : max(0.0, _1280))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1289 = 1.0;
    }
    float _1293 = (_1289 * cbModelParam._m0[1u].x) + (_1278 * (1.0 - cbModelParam._m0[1u].x));
    float _1303 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _289);
    float _1304 = isnan(_1303) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1303 : min(cbModelParam._m0[25u].z, _1303));
    float _1386;
    float _1388;
    float _1390;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1353 = fma(_523, cbModelParam._m0[13u].z, fma(_519, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _515)) + cbModelParam._m0[13u].w;
        float _1357 = fma(_523, cbModelParam._m0[14u].z, fma(_519, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _515)) + cbModelParam._m0[14u].w;
        float _1361 = fma(_523, cbModelParam._m0[15u].z, fma(_519, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _515)) + cbModelParam._m0[15u].w;
        float _1364 = fma(_464, cbModelParam._m0[13u].z, fma(_463, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _462));
        float _1367 = fma(_464, cbModelParam._m0[14u].z, fma(_463, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _462));
        float _1370 = fma(_464, cbModelParam._m0[15u].z, fma(_463, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _462));
        float _1398;
        if (_1364 > 0.0)
        {
            _1398 = abs((1.0 - _1353) / _1364);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1364 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1353 + 1.0) / _1364);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1398 = frontier_phi_19_17_ladder;
        }
        float _1625;
        if (_1367 > 0.0)
        {
            _1625 = abs((1.0 - _1357) / _1367);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1367 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1357 + 1.0) / _1367);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1625 = frontier_phi_28_24_ladder;
        }
        float _1871;
        if (_1370 > 0.0)
        {
            _1871 = abs((1.0 - _1361) / _1370);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1370 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1361 + 1.0) / _1370);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1871 = frontier_phi_40_35_ladder;
        }
        float _1873 = isnan(_1625) ? _1398 : (isnan(_1398) ? _1625 : min(_1398, _1625));
        float _1874 = isnan(_1871) ? _1873 : (isnan(_1873) ? _1871 : min(_1873, _1871));
        float _1878 = (_1874 * _1364) + _1353;
        float _1879 = (_1874 * _1367) + _1357;
        float _1880 = (_1874 * _1370) + _1361;
        float _1881 = _1874 * 9.9999997473787516355514526367188e-05;
        float _1883 = (-1.0) - _1881;
        float _1885 = _1881 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1880 > _1885) || ((_1880 < _1883) || ((_1879 > _1885) || ((_1879 < _1883) || ((_1878 < _1883) || (_1878 > _1885))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2004 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1880, cbModelParam._m0[9u].z, fma(_1879, cbModelParam._m0[9u].y, _1878 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1880, cbModelParam._m0[10u].z, fma(_1879, cbModelParam._m0[10u].y, _1878 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1880, cbModelParam._m0[11u].z, fma(_1879, cbModelParam._m0[11u].y, _1878 * cbModelParam._m0[11u].x))), _1304);
            frontier_phi_18_40_ladder = _2004.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2004.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2004.x * cbModelParam._m0[1u].y;
        }
        _1386 = frontier_phi_18_40_ladder_2;
        _1388 = frontier_phi_18_40_ladder_1;
        _1390 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1374 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_462, _463, _464), _1304);
        _1386 = _1374.x * cbModelParam._m0[1u].y;
        _1388 = _1374.y * cbModelParam._m0[1u].y;
        _1390 = _1374.z * cbModelParam._m0[1u].y;
    }
    float _1394 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _289);
    float _1395 = isnan(_1394) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1394 : min(cbModelParam._m0[25u].w, _1394));
    float _1488;
    float _1490;
    float _1492;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1452 = fma(_523, cbModelParam._m0[21u].z, fma(_519, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _515)) + cbModelParam._m0[21u].w;
        float _1456 = fma(_523, cbModelParam._m0[22u].z, fma(_519, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _515)) + cbModelParam._m0[22u].w;
        float _1460 = fma(_523, cbModelParam._m0[23u].z, fma(_519, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _515)) + cbModelParam._m0[23u].w;
        float _1463 = fma(_464, cbModelParam._m0[21u].z, fma(_463, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _462));
        float _1466 = fma(_464, cbModelParam._m0[22u].z, fma(_463, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _462));
        float _1469 = fma(_464, cbModelParam._m0[23u].z, fma(_463, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _462));
        float _1630;
        if (_1463 > 0.0)
        {
            _1630 = abs((1.0 - _1452) / _1463);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1463 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1452 + 1.0) / _1463);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1630 = frontier_phi_30_26_ladder;
        }
        float _1898;
        if (_1466 > 0.0)
        {
            _1898 = abs((1.0 - _1456) / _1466);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1456 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1898 = frontier_phi_42_37_ladder;
        }
        float _2103;
        if (_1469 > 0.0)
        {
            _2103 = abs((1.0 - _1460) / _1469);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1469 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1460 + 1.0) / _1469);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2103 = frontier_phi_51_48_ladder;
        }
        float _2105 = isnan(_1898) ? _1630 : (isnan(_1630) ? _1898 : min(_1630, _1898));
        float _2106 = isnan(_2103) ? _2105 : (isnan(_2105) ? _2103 : min(_2105, _2103));
        float _2110 = (_2106 * _1463) + _1452;
        float _2111 = (_2106 * _1466) + _1456;
        float _2112 = (_2106 * _1469) + _1460;
        float _2113 = _2106 * 9.9999997473787516355514526367188e-05;
        float _2114 = (-1.0) - _2113;
        float _2116 = _2113 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2112 > _2116) || ((_2112 < _2114) || ((_2111 > _2116) || ((_2111 < _2114) || ((_2110 < _2114) || (_2110 > _2116))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2310 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2112, cbModelParam._m0[17u].z, fma(_2111, cbModelParam._m0[17u].y, _2110 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2112, cbModelParam._m0[18u].z, fma(_2111, cbModelParam._m0[18u].y, _2110 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2112, cbModelParam._m0[19u].z, fma(_2111, cbModelParam._m0[19u].y, _2110 * cbModelParam._m0[19u].x))), _1395);
            frontier_phi_27_51_ladder = _2310.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2310.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2310.x * cbModelParam._m0[1u].z;
        }
        _1488 = frontier_phi_27_51_ladder_2;
        _1490 = frontier_phi_27_51_ladder_1;
        _1492 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1472 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_462, _463, _464), _1395);
        _1488 = _1472.x * cbModelParam._m0[1u].z;
        _1490 = _1472.y * cbModelParam._m0[1u].z;
        _1492 = _1472.z * cbModelParam._m0[1u].z;
    }
    float _1504 = ((((1.0 - _483) * ((_470 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_483 * _470)) * _454;
    float _1505 = _1504 * ((cbModelParam._m0[1u].w * (_1488 - _1386)) + _1386);
    float _1506 = _1504 * ((cbModelParam._m0[1u].w * (_1490 - _1388)) + _1388);
    float _1507 = _1504 * ((cbModelParam._m0[1u].w * (_1492 - _1390)) + _1390);
    float _1510 = fma(_1507, cbSceneParam._m0[89u].z, fma(_1506, cbSceneParam._m0[89u].y, _1505 * cbSceneParam._m0[89u].x));
    float _1513 = fma(_1507, cbSceneParam._m0[90u].z, fma(_1506, cbSceneParam._m0[90u].y, _1505 * cbSceneParam._m0[90u].x));
    float _1516 = fma(_1507, cbSceneParam._m0[91u].z, fma(_1506, cbSceneParam._m0[91u].y, _1505 * cbSceneParam._m0[91u].x));
    vec4 _1524 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_388, _389));
    float _1526 = _1524.w;
    float _1538 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1526);
    float _1539 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1526);
    float _1540 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1526);
    uvec4 _1544 = floatBitsToUint(cbInstanceData._m0[_428 + 5u]);
    uint _1546 = _1544.x * 14u;
    uint _1547 = _1546 + 13u;
    float _1554 = _454 + (-1.0);
    float _1559 = (cbLight._m0[_1547].x * _1554) + 1.0;
    float _1560 = (cbLight._m0[_1547].y * _1554) + 1.0;
    float _1561 = (cbLight._m0[_1547].z * _1554) + 1.0;
    float _1562 = (cbLight._m0[_1547].w * _1554) + 1.0;
    uint _1563 = _1546 + 5u;
    float _1569 = isnan(1.0) ? _1560 : (isnan(_1560) ? 1.0 : min(_1560, 1.0));
    uint _1573 = _1546 + 4u;
    float _1583 = isnan(1.0) ? _1559 : (isnan(_1559) ? 1.0 : min(_1559, 1.0));
    uint _1587 = _1546 | 1u;
    float _1598 = dot(vec3(cbLight._m0[_1546].xyz), vec3(_286, _287, _288));
    float _1601 = dot(vec3(cbLight._m0[_1587].xyz), vec3(_286, _287, _288));
    float _3750 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
    float _3761 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
    float _1606 = (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * 0.3183098733425140380859375;
    float _1608 = (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * 0.3183098733425140380859375;
    float _1615 = ((cbLight._m0[_1563].x * _1569) * _1608) + (((cbLight._m0[_1573].x * _1538) * _1583) * _1606);
    float _1616 = ((_1569 * cbLight._m0[_1563].y) * _1608) + (((cbLight._m0[_1573].y * _1539) * _1583) * _1606);
    float _1617 = ((_1569 * cbLight._m0[_1563].z) * _1608) + (((cbLight._m0[_1573].z * _1540) * _1583) * _1606);
    uvec4 _1622 = floatBitsToUint(cbLight._m0[_1546 + 12u]);
    bool _1624 = _1622.x == 0u;
    float _1635;
    float _1637;
    float _1639;
    if (_1624)
    {
        _1635 = _1615;
        _1637 = _1616;
        _1639 = _1617;
    }
    else
    {
        uint _1643 = _1546 + 6u;
        float _1659 = (dot(vec3(cbLight._m0[_1546 + 2u].xyz), vec3(_286, _287, _288)) * 0.5) + 0.5;
        float _1660 = _1659 * _1659;
        float _3772 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1662 = isnan(1.0) ? _1561 : (isnan(_1561) ? 1.0 : min(_1561, 1.0));
        _1635 = (((cbLight._m0[_1643].x * 0.3183098733425140380859375) * _1661) * _1662) + _1615;
        _1637 = (((cbLight._m0[_1643].y * 0.3183098733425140380859375) * _1661) * _1662) + _1616;
        _1639 = (((cbLight._m0[_1643].z * 0.3183098733425140380859375) * _1661) * _1662) + _1617;
    }
    bool _1642 = _1622.y == 0u;
    float _1680;
    float _1682;
    float _1684;
    if (_1642)
    {
        _1680 = _1635;
        _1682 = _1637;
        _1684 = _1639;
    }
    else
    {
        uint _1842 = _1546 + 7u;
        float _1858 = (dot(vec3(cbLight._m0[_1546 + 3u].xyz), vec3(_286, _287, _288)) * 0.5) + 0.5;
        float _1859 = _1858 * _1858;
        float _3788 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
        float _1860 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1861 = isnan(1.0) ? _1562 : (isnan(_1562) ? 1.0 : min(_1562, 1.0));
        _1680 = (((cbLight._m0[_1842].x * 0.3183098733425140380859375) * _1860) * _1861) + _1635;
        _1682 = (((cbLight._m0[_1842].y * 0.3183098733425140380859375) * _1860) * _1861) + _1637;
        _1684 = (((cbLight._m0[_1842].z * 0.3183098733425140380859375) * _1860) * _1861) + _1639;
    }
    uint _1687 = _1546 + 8u;
    float _1700 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1546].w)) * _289) * 0.949999988079071044921875);
    float _1701 = _1700 * _1700;
    float _1702 = cbLight._m0[_1546].x + _367;
    float _1703 = cbLight._m0[_1546].y + _368;
    float _1704 = cbLight._m0[_1546].z + _369;
    float _1708 = inversesqrt(dot(vec3(_1702, _1703, _1704), vec3(_1702, _1703, _1704)));
    float _1709 = _1708 * _1702;
    float _1710 = _1708 * _1703;
    float _1711 = _1708 * _1704;
    float _1712 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_1546].xyz));
    float _3804 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
    float _1715 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _3815 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _1716 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _1717 = dot(vec3(_286, _287, _288), vec3(_1709, _1710, _1711));
    float _3826 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
    float _1720 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _1721 = dot(vec3(cbLight._m0[_1546].xyz), vec3(_1709, _1710, _1711));
    float _3837 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
    float _1725 = _1701 * _1701;
    float _1729 = ((_1720 * _1720) * (_1725 + (-1.0))) + 1.0;
    float _1740 = (exp2(log2(1.0 - (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1741 = 1.0 - _1701;
    float _1752 = (0.5 / (((_1716 * ((_1715 * _1741) + _1701)) + 9.9999999392252902907785028219223e-09) + (((_1716 * _1741) + _1701) * _1715))) * _1715;
    float _3848 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1754 = (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * (_1725 / ((_1729 * _1729) * 3.141590118408203125));
    uint _1768 = _1546 + 9u;
    float _1779 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1587].w)) * _289) * 0.949999988079071044921875);
    float _1780 = _1779 * _1779;
    float _1781 = cbLight._m0[_1587].x + _367;
    float _1782 = cbLight._m0[_1587].y + _368;
    float _1783 = cbLight._m0[_1587].z + _369;
    float _1787 = inversesqrt(dot(vec3(_1781, _1782, _1783), vec3(_1781, _1782, _1783)));
    float _1788 = _1787 * _1781;
    float _1789 = _1787 * _1782;
    float _1790 = _1787 * _1783;
    float _1791 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_1587].xyz));
    float _3859 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1794 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _1795 = dot(vec3(_286, _287, _288), vec3(_1788, _1789, _1790));
    float _3870 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _1798 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _1799 = dot(vec3(cbLight._m0[_1587].xyz), vec3(_1788, _1789, _1790));
    float _3881 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _1803 = _1780 * _1780;
    float _1807 = ((_1798 * _1798) * (_1803 + (-1.0))) + 1.0;
    float _1816 = (exp2(log2(1.0 - (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1817 = 1.0 - _1780;
    float _1827 = (0.5 / (((_1716 * ((_1794 * _1817) + _1780)) + 9.9999999392252902907785028219223e-09) + (((_1716 * _1817) + _1780) * _1794))) * _1794;
    float _3892 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1829 = (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * (_1803 / ((_1807 * _1807) * 3.141590118408203125));
    float _1839 = (((_1816 * cbLight._m0[_1768].x) * _1829) * _1569) + ((((cbLight._m0[_1687].x * _1538) * _1740) * _1754) * _1583);
    float _1840 = (((_1816 * cbLight._m0[_1768].y) * _1829) * _1569) + ((((cbLight._m0[_1687].y * _1539) * _1740) * _1754) * _1583);
    float _1841 = (((_1816 * cbLight._m0[_1768].z) * _1829) * _1569) + ((((cbLight._m0[_1687].z * _1540) * _1740) * _1754) * _1583);
    float _1903;
    float _1905;
    float _1907;
    if (_1624)
    {
        _1903 = _1839;
        _1905 = _1840;
        _1907 = _1841;
    }
    else
    {
        uint _1909 = _1546 + 2u;
        uint _1913 = _1546 + 10u;
        float _1927 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1909].w)) * _289) * 0.949999988079071044921875);
        float _1928 = _1927 * _1927;
        float _1929 = cbLight._m0[_1909].x + _367;
        float _1930 = cbLight._m0[_1909].y + _368;
        float _1931 = cbLight._m0[_1909].z + _369;
        float _1935 = inversesqrt(dot(vec3(_1929, _1930, _1931), vec3(_1929, _1930, _1931)));
        float _1936 = _1935 * _1929;
        float _1937 = _1935 * _1930;
        float _1938 = _1935 * _1931;
        float _1939 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_1909].xyz));
        float _3903 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1942 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1943 = dot(vec3(_286, _287, _288), vec3(_1936, _1937, _1938));
        float _3914 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1946 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1947 = dot(vec3(cbLight._m0[_1909].xyz), vec3(_1936, _1937, _1938));
        float _3925 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
        float _1951 = _1928 * _1928;
        float _1955 = ((_1946 * _1946) * (_1951 + (-1.0))) + 1.0;
        float _1964 = (exp2(log2(1.0 - (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1965 = 1.0 - _1928;
        float _1975 = (0.5 / (((_1716 * ((_1942 * _1965) + _1928)) + 9.9999999392252902907785028219223e-09) + (((_1716 * _1965) + _1928) * _1942))) * _1942;
        float _3936 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
        float _1977 = (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_1951 / ((_1955 * _1955) * 3.141590118408203125));
        float _1978 = isnan(1.0) ? _1561 : (isnan(_1561) ? 1.0 : min(_1561, 1.0));
        _1903 = (((_1964 * cbLight._m0[_1913].x) * _1977) * _1978) + _1839;
        _1905 = (((_1964 * cbLight._m0[_1913].y) * _1977) * _1978) + _1840;
        _1907 = (((_1964 * cbLight._m0[_1913].z) * _1977) * _1978) + _1841;
    }
    float _2013;
    float _2015;
    float _2017;
    if (_1642)
    {
        _2013 = _1903;
        _2015 = _1905;
        _2017 = _1907;
    }
    else
    {
        uint _2024 = _1546 + 3u;
        uint _2028 = _1546 + 11u;
        float _2042 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2024].w)) * _289) * 0.949999988079071044921875);
        float _2043 = _2042 * _2042;
        float _2044 = cbLight._m0[_2024].x + _367;
        float _2045 = cbLight._m0[_2024].y + _368;
        float _2046 = cbLight._m0[_2024].z + _369;
        float _2050 = inversesqrt(dot(vec3(_2044, _2045, _2046), vec3(_2044, _2045, _2046)));
        float _2051 = _2050 * _2044;
        float _2052 = _2050 * _2045;
        float _2053 = _2050 * _2046;
        float _2054 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_2024].xyz));
        float _3952 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2057 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _2058 = dot(vec3(_286, _287, _288), vec3(_2051, _2052, _2053));
        float _3963 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2061 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _2062 = dot(vec3(cbLight._m0[_2024].xyz), vec3(_2051, _2052, _2053));
        float _3974 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2066 = _2043 * _2043;
        float _2070 = ((_2061 * _2061) * (_2066 + (-1.0))) + 1.0;
        float _2079 = (exp2(log2(1.0 - (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2080 = 1.0 - _2043;
        float _2090 = (0.5 / (((_1716 * ((_2057 * _2080) + _2043)) + 9.9999999392252902907785028219223e-09) + (((_1716 * _2080) + _2043) * _2057))) * _2057;
        float _3985 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
        float _2092 = (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_2066 / ((_2070 * _2070) * 3.141590118408203125));
        float _2093 = isnan(1.0) ? _1562 : (isnan(_1562) ? 1.0 : min(_1562, 1.0));
        _2013 = (((_2079 * cbLight._m0[_2028].x) * _2092) * _2093) + _1903;
        _2015 = (((_2079 * cbLight._m0[_2028].y) * _2092) * _2093) + _1905;
        _2017 = (((_2079 * cbLight._m0[_2028].z) * _2092) * _2093) + _1907;
    }
    float _2227;
    float _2229;
    float _2231;
    float _2233;
    float _2235;
    float _2237;
    if (_1544.y == 0u)
    {
        float _2168 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2169 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2168;
        float _2170 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2168;
        float _2171 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2168;
        uvec4 _2183 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2184 = _2183.x;
        uint _2195 = uint((float(_2183.y) * floor(float(uint(cbSceneParam._m0[85u].y * _389) / _2184))) + floor(float(uint(cbSceneParam._m0[85u].x * _388) / _2184)));
        float _2205 = (log2(_2171 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2206 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
        uint _2209 = uint(isnan(14.0) ? _2206 : (isnan(_2206) ? 14.0 : min(_2206, 14.0)));
        uvec4 _2214 = texelFetch(g_lightClusterGridBuffer, int(((_2209 << 2u) + (_2195 << 6u)) >> 2u));
        uint _2215 = _2214.x;
        uint _2216 = _2183.z;
        float _2315;
        float _2317;
        float _2319;
        float _2321;
        float _2323;
        float _2325;
        if (((((1u << ((_2216 >> 4u) & 15u)) + 4294967295u) & _2215) == 0u) || ((_2216 & 240u) == 0u))
        {
            _2315 = 0.0;
            _2317 = 0.0;
            _2319 = 0.0;
            _2321 = 0.0;
            _2323 = 0.0;
            _2325 = 0.0;
        }
        else
        {
            float _2316;
            float _2318;
            float _2320;
            float _2322;
            float _2324;
            float _2326;
            float _2467 = 0.0;
            float _2468 = 0.0;
            float _2469 = 0.0;
            float _2470 = 0.0;
            float _2471 = 0.0;
            float _2472 = 0.0;
            uint _2473 = 0u;
            uint _2482;
            bool _2483;
            for (;;)
            {
                _2482 = texelFetch(g_lightClassification, int((((_2209 << 5u) + (_2195 << 9u)) + (_2473 << 2u)) >> 2u)).x;
                _2483 = _2482 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2483)
                {
                    frontier_phi_68_pred = _2469;
                    frontier_phi_68_pred_1 = _2472;
                    frontier_phi_68_pred_2 = _2471;
                    frontier_phi_68_pred_3 = _2470;
                    frontier_phi_68_pred_4 = _2468;
                    frontier_phi_68_pred_5 = _2467;
                }
                else
                {
                    float _2612;
                    float _2613;
                    float _2614;
                    float _2615;
                    float _2616;
                    float _2617;
                    uint _2618;
                    _2612 = _2467;
                    _2613 = _2468;
                    _2614 = _2469;
                    _2615 = _2470;
                    _2616 = _2471;
                    _2617 = _2472;
                    _2618 = _2482;
                    float _2539;
                    float _2540;
                    float _2541;
                    float _2542;
                    float _2543;
                    float _2544;
                    for (;;)
                    {
                        uint _2622 = uint(findLSB(_2618)) + (_2473 << 5u);
                        uint _2619 = (_2618 + 4294967295u) & _2618;
                        uint _2624 = _2622 * 48u;
                        vec4 _2638 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2624)).x, texelFetch(g_PointLightRenderingBuffer, int(_2624 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2624 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2624 + 3u)).x));
                        uint _2644 = (_2622 * 48u) + 4u;
                        vec4 _2657 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2644)).x, texelFetch(g_PointLightRenderingBuffer, int(_2644 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2644 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2644 + 3u)).x));
                        uint _2663 = (_2622 * 48u) + 8u;
                        vec3 _2674 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2663)).x, texelFetch(g_PointLightRenderingBuffer, int(_2663 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2663 + 2u)).x));
                        float _2678 = _2638.x - _2169;
                        float _2679 = _2638.y - _2170;
                        float _2680 = _2638.z - _2171;
                        float _2681 = dot(vec3(_2678, _2679, _2680), vec3(_2678, _2679, _2680));
                        float _2684 = inversesqrt(_2681);
                        float _2685 = _2684 * _2678;
                        float _2686 = _2684 * _2679;
                        float _2687 = _2684 * _2680;
                        float _2688 = dot(vec3(_409, _412, _415), vec3(_2685, _2686, _2687));
                        float _2693 = 1.0 - (_2681 * _2638.w);
                        float _4011 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
                        float _2694 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
                        float _2695 = sqrt(_2681) * _2657.w;
                        float _2698 = 1.39999997615814208984375 / (_2695 + 1.39999997615814208984375);
                        float _2699 = _2698 * _2698;
                        float _2702 = ((1.0 - _2699) * _2688) + _2699;
                        float _2705 = _2695 * _2695;
                        float _2709 = ((isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0))) * _2694) / ((_2705 * 0.699999988079071044921875) + 1.0);
                        float _2713 = (-0.0) - _2169;
                        float _2714 = (-0.0) - _2170;
                        float _2715 = (-0.0) - _2171;
                        float _2719 = inversesqrt(dot(vec3(_2713, _2714, _2715), vec3(_2713, _2714, _2715)));
                        float _2720 = _2719 * _2713;
                        float _2721 = _2719 * _2714;
                        float _2722 = _2719 * _2715;
                        float _2730 = exp2(log2(1.0 / ((_2705 * 3.5) + 5.0)) * 0.25);
                        float _2731 = 1.0 - _470;
                        float _2738 = sqrt(1.0 - ((1.0 - (_2731 * _2731)) * (1.0 - (_2730 * _2730))));
                        float _2739 = _2738 * _2738;
                        float _2740 = _2739 * _2739;
                        float _2741 = _2720 + _2685;
                        float _2742 = _2721 + _2686;
                        float _2743 = _2722 + _2687;
                        float _2747 = inversesqrt(dot(vec3(_2741, _2742, _2743), vec3(_2741, _2742, _2743)));
                        float _2751 = dot(vec3(_409, _412, _415), vec3(_2720, _2721, _2722));
                        float _4027 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
                        float _2754 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
                        float _2755 = dot(vec3(_409, _412, _415), vec3(_2747 * _2741, _2747 * _2742, _2747 * _2743));
                        float _4038 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
                        float _2758 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
                        float _2762 = ((_2758 * _2758) * (_2740 + (-1.0))) + 1.0;
                        float _2763 = _2698 * _2739;
                        float _2764 = _2763 * _2763;
                        float _2767 = ((1.0 - _2764) * _2688) + _2764;
                        float _4049 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
                        float _2768 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
                        float _2769 = 1.0 - _2739;
                        float _2779 = (0.5 / (((_2768 * ((_2754 * _2769) + _2739)) + 9.9999999392252902907785028219223e-09) + (((_2768 * _2769) + _2739) * _2754))) * _2768;
                        float _4060 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
                        float _2790 = (((_2740 * 3.1415927410125732421875) * (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0)))) / ((_2762 * _2762) * ((_2705 * 2.1991131305694580078125) + 3.141590118408203125))) * _2694;
                        _2542 = (_2709 * _2657.x) + _2615;
                        _2543 = (_2709 * _2657.y) + _2616;
                        _2544 = (_2709 * _2657.z) + _2617;
                        _2539 = (_2790 * _2674.x) + _2612;
                        _2540 = (_2790 * _2674.y) + _2613;
                        _2541 = (_2790 * _2674.z) + _2614;
                        if (_2619 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2612 = _2539;
                            _2613 = _2540;
                            _2614 = _2541;
                            _2615 = _2542;
                            _2616 = _2543;
                            _2617 = _2544;
                            _2618 = _2619;
                        }
                    }
                    frontier_phi_68_pred = _2541;
                    frontier_phi_68_pred_1 = _2544;
                    frontier_phi_68_pred_2 = _2543;
                    frontier_phi_68_pred_3 = _2542;
                    frontier_phi_68_pred_4 = _2540;
                    frontier_phi_68_pred_5 = _2539;
                }
                _2320 = frontier_phi_68_pred;
                _2326 = frontier_phi_68_pred_1;
                _2324 = frontier_phi_68_pred_2;
                _2322 = frontier_phi_68_pred_3;
                _2318 = frontier_phi_68_pred_4;
                _2316 = frontier_phi_68_pred_5;
                uint _2474 = _2473 + 1u;
                if (_2474 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2467 = _2316;
                    _2468 = _2318;
                    _2469 = _2320;
                    _2470 = _2322;
                    _2471 = _2324;
                    _2472 = _2326;
                    _2473 = _2474;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2315 = _2316;
            _2317 = _2318;
            _2319 = _2320;
            _2321 = _2322;
            _2323 = _2324;
            _2325 = _2326;
        }
        uvec4 _2329 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2330 = _2329.z;
        uint _2332 = (_2330 >> 8u) & 15u;
        float _2435;
        float _2437;
        float _2439;
        float _2441;
        float _2443;
        float _2445;
        if (((4294967295u << _2332) & _2215) == 0u)
        {
            _2435 = _2315;
            _2437 = _2317;
            _2439 = _2319;
            _2441 = _2321;
            _2443 = _2323;
            _2445 = _2325;
        }
        else
        {
            float _2460 = inversesqrt(dot(vec3(_2169, _2170, _2171), vec3(_2169, _2170, _2171)));
            float _2461 = _2460 * _2169;
            float _2462 = _2460 * _2170;
            float _2463 = _2460 * _2171;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2332 < ((_2330 >> 12u) & 15u))
            {
                float _2436;
                float _2438;
                float _2440;
                float _2442;
                float _2444;
                float _2446;
                float _2595 = _2315;
                float _2596 = _2317;
                float _2597 = _2319;
                float _2598 = _2321;
                float _2599 = _2323;
                float _2600 = _2325;
                uint _2601 = _2332;
                uint _2610;
                bool _2611;
                for (;;)
                {
                    _2610 = texelFetch(g_lightClassification, int((((_2209 << 5u) + (_2195 << 9u)) + (_2601 << 2u)) >> 2u)).x;
                    _2611 = _2610 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2611)
                    {
                        frontier_phi_79_pred = _2600;
                        frontier_phi_79_pred_1 = _2599;
                        frontier_phi_79_pred_2 = _2598;
                        frontier_phi_79_pred_3 = _2597;
                        frontier_phi_79_pred_4 = _2596;
                        frontier_phi_79_pred_5 = _2595;
                    }
                    else
                    {
                        float _2804;
                        float _2805;
                        float _2806;
                        float _2807;
                        float _2808;
                        float _2809;
                        float _3100;
                        float _3101;
                        float _3102;
                        float _3103;
                        float _3104;
                        float _3105;
                        float _2817 = _2595;
                        float _2818 = _2596;
                        float _2819 = _2597;
                        float _2820 = _2598;
                        float _2821 = _2599;
                        float _2822 = _2600;
                        uint _2823 = _2610;
                        uint _2824;
                        vec4 _2849;
                        float _2850;
                        vec4 _2865;
                        vec3 _2877;
                        vec4 _2893;
                        vec4 _2909;
                        float _2956;
                        bool _2957;
                        for (;;)
                        {
                            uint _2834 = ((_2601 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2823));
                            _2824 = (_2823 + 4294967295u) & _2823;
                            uint _2836 = _2834 * 40u;
                            _2849 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2836)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 3u)).x));
                            _2850 = _2849.w;
                            uint _2852 = (_2834 * 40u) + 4u;
                            _2865 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2852)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 3u)).x));
                            uint _2867 = (_2834 * 40u) + 8u;
                            _2877 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2867)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 2u)).x));
                            uint _2880 = (_2834 * 40u) + 16u;
                            _2893 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2880)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 3u)).x));
                            uint _2896 = (_2834 * 40u) + 20u;
                            _2909 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2896)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 3u)).x));
                            uint _2912 = (_2834 * 40u) + 24u;
                            vec4 _2925 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2912)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 3u)).x));
                            uint _2931 = (_2834 * 40u) + 28u;
                            vec4 _2944 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2931)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 3u)).x));
                            _2956 = fma(_2171, _2944.z, fma(_2170, _2944.y, _2944.x * _2169)) + _2944.w;
                            _2957 = !((fma(_2171, _2925.z, fma(_2170, _2925.y, _2925.x * _2169)) + _2925.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2957)
                            {
                                float _2984 = _2849.x - _2169;
                                float _2985 = _2849.y - _2170;
                                float _2986 = _2849.z - _2171;
                                float _2987 = dot(vec3(_2984, _2985, _2986), vec3(_2984, _2985, _2986));
                                float _2990 = inversesqrt(_2987);
                                float _2991 = _2990 * _2984;
                                float _2992 = _2990 * _2985;
                                float _2993 = _2990 * _2986;
                                float _2997 = 1.0 - (_2987 / (_2850 * _2850));
                                float _4071 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                                float _2998 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
                                float _3002 = sqrt(_2987) * _2865.w;
                                float _3004 = 1.39999997615814208984375 / (_3002 + 1.39999997615814208984375);
                                float _3005 = _3004 * _3004;
                                float _3008 = ((1.0 - _3005) * dot(vec3(_2991, _2992, _2993), vec3(_409, _412, _415))) + _3005;
                                float _3011 = _3002 * _3002;
                                float _3015 = (fma(_2171, _2893.z, fma(_2170, _2893.y, _2893.x * _2169)) + _2893.w) / _2956;
                                float _3016 = (fma(_2171, _2909.z, fma(_2170, _2909.y, _2909.x * _2169)) + _2909.w) / _2956;
                                float _3020 = 1.0 - dot(vec2(_3015, _3016), vec2(_3015, _3016));
                                float _4087 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                                float _3021 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
                                float _3022 = _3021 * (((isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0))) * _2998) / ((_3011 * 0.699999988079071044921875) + 1.0));
                                float _3034 = exp2(log2(1.0 / ((_3011 * 3.5) + 5.0)) * 0.25);
                                float _3035 = 1.0 - _470;
                                float _3042 = sqrt(1.0 - ((1.0 - (_3035 * _3035)) * (1.0 - (_3034 * _3034))));
                                float _3043 = _3042 * _3042;
                                float _3044 = _3043 * _3043;
                                float _3045 = _2991 - _2461;
                                float _3046 = _2992 - _2462;
                                float _3047 = _2993 - _2463;
                                float _3051 = inversesqrt(dot(vec3(_3045, _3046, _3047), vec3(_3045, _3046, _3047)));
                                float _3055 = dot(vec3(_409, _412, _415), vec3((-0.0) - _2461, (-0.0) - _2462, (-0.0) - _2463));
                                float _4098 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                                float _3058 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
                                float _3059 = dot(vec3(_409, _412, _415), vec3(_3051 * _3045, _3051 * _3046, _3051 * _3047));
                                float _4109 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                                float _3062 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
                                float _3066 = ((_3062 * _3062) * (_3044 + (-1.0))) + 1.0;
                                float _3067 = _3004 * _3043;
                                float _3068 = _3067 * _3067;
                                float _3074 = ((1.0 - _3068) * dot(vec3(_409, _412, _415), vec3(_2991, _2992, _2993))) + _3068;
                                float _4120 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                                float _3075 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
                                float _3076 = 1.0 - _3043;
                                float _3086 = (0.5 / (((_3075 * ((_3058 * _3076) + _3043)) + 9.9999999392252902907785028219223e-09) + (((_3075 * _3076) + _3043) * _3058))) * _3075;
                                float _4131 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                                float _3096 = (_3021 * _2998) * (((_3044 * 3.1415927410125732421875) * (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0)))) / ((_3066 * _3066) * ((_3011 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3022 * _2865.z;
                                frontier_phi_85_pred_1 = _3022 * _2865.y;
                                frontier_phi_85_pred_2 = _3022 * _2865.x;
                                frontier_phi_85_pred_3 = _3096 * _2877.z;
                                frontier_phi_85_pred_4 = _3096 * _2877.y;
                                frontier_phi_85_pred_5 = _3096 * _2877.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3105 = frontier_phi_85_pred;
                            _3104 = frontier_phi_85_pred_1;
                            _3103 = frontier_phi_85_pred_2;
                            _3102 = frontier_phi_85_pred_3;
                            _3101 = frontier_phi_85_pred_4;
                            _3100 = frontier_phi_85_pred_5;
                            _2807 = _3103 + _2820;
                            _2808 = _3104 + _2821;
                            _2809 = _3105 + _2822;
                            _2804 = _3100 + _2817;
                            _2805 = _3101 + _2818;
                            _2806 = _3102 + _2819;
                            if (_2824 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2817 = _2804;
                                _2818 = _2805;
                                _2819 = _2806;
                                _2820 = _2807;
                                _2821 = _2808;
                                _2822 = _2809;
                                _2823 = _2824;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2809;
                        frontier_phi_79_pred_1 = _2808;
                        frontier_phi_79_pred_2 = _2807;
                        frontier_phi_79_pred_3 = _2806;
                        frontier_phi_79_pred_4 = _2805;
                        frontier_phi_79_pred_5 = _2804;
                    }
                    _2446 = frontier_phi_79_pred;
                    _2444 = frontier_phi_79_pred_1;
                    _2442 = frontier_phi_79_pred_2;
                    _2440 = frontier_phi_79_pred_3;
                    _2438 = frontier_phi_79_pred_4;
                    _2436 = frontier_phi_79_pred_5;
                    uint _2602 = _2601 + 1u;
                    if (_2602 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2595 = _2436;
                        _2596 = _2438;
                        _2597 = _2440;
                        _2598 = _2442;
                        _2599 = _2444;
                        _2600 = _2446;
                        _2601 = _2602;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2442;
                frontier_phi_60_61_ladder_1 = _2446;
                frontier_phi_60_61_ladder_2 = _2444;
                frontier_phi_60_61_ladder_3 = _2440;
                frontier_phi_60_61_ladder_4 = _2438;
                frontier_phi_60_61_ladder_5 = _2436;
            }
            else
            {
                frontier_phi_60_61_ladder = _2321;
                frontier_phi_60_61_ladder_1 = _2325;
                frontier_phi_60_61_ladder_2 = _2323;
                frontier_phi_60_61_ladder_3 = _2319;
                frontier_phi_60_61_ladder_4 = _2317;
                frontier_phi_60_61_ladder_5 = _2315;
            }
            _2435 = frontier_phi_60_61_ladder_5;
            _2437 = frontier_phi_60_61_ladder_4;
            _2439 = frontier_phi_60_61_ladder_3;
            _2441 = frontier_phi_60_61_ladder;
            _2443 = frontier_phi_60_61_ladder_2;
            _2445 = frontier_phi_60_61_ladder_1;
        }
        float _2450 = isnan(1.0) ? _454 : (isnan(_454) ? 1.0 : min(_454, 1.0));
        _2227 = (_2450 * _2441) + _1680;
        _2229 = (_2450 * _2443) + _1682;
        _2231 = (_2450 * _2445) + _1684;
        _2233 = ((_2435 * 0.039999999105930328369140625) * _2450) + _2013;
        _2235 = ((_2437 * 0.039999999105930328369140625) * _2450) + _2015;
        _2237 = ((_2439 * 0.039999999105930328369140625) * _2450) + _2017;
    }
    else
    {
        _2227 = _1680;
        _2229 = _1682;
        _2231 = _1684;
        _2233 = _2013;
        _2235 = _2015;
        _2237 = _2017;
    }
    float _4147 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _4158 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _4169 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _2254 = ((isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_2227 + ((isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0))) * _454))) + ((_2233 + ((isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))) * _1293)) * cbPerFrame._m0[3u].x);
    float _2255 = ((isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_2229 + ((isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0))) * _454))) + ((_2235 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _1293)) * cbPerFrame._m0[3u].x);
    float _2256 = ((isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_2231 + ((isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0))) * _454))) + ((_2237 + ((isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))) * _1293)) * cbPerFrame._m0[3u].x);
    uint _2257 = _428 + 6u;
    float _2265 = _388 / cbSceneParam._m0[86u].x;
    float _2266 = _389 / cbSceneParam._m0[86u].y;
    vec4 _2280 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2265, _2266, (log2((isnan(cbSceneParam._m0[77u].w) ? _308 : (isnan(_308) ? cbSceneParam._m0[77u].w : min(_308, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2282 = _2280.x;
    float _2283 = _2280.y;
    float _2284 = _2280.z;
    float _2285 = _2280.w;
    float _2377;
    float _2379;
    float _2381;
    float _2383;
    if (_308 > cbSceneParam._m0[78u].w)
    {
        float _2340 = isnan(_308) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _308 : min(cbSceneParam._m0[80u].w, _308));
        float _2341 = _2340 / _308;
        float _2352 = _2341 * _360;
        float _2353 = _361 * _2341;
        float _2354 = (-0.0) - _2353;
        float _2355 = _2341 * _362;
        float _2357 = (cbSceneParam._m0[77u].w * _2354) / _2340;
        float _2358 = _2357 + cbSceneParam._m0[79u].w;
        float _2359 = cbSceneParam._m0[79u].w - _2353;
        float _2365 = sqrt(((_2352 * _2352) + (_2353 * _2353)) + (_2355 * _2355));
        float _2368 = (1.0 - (cbSceneParam._m0[77u].w / _2340)) * _2365;
        float _2373 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2375 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2552;
        if (abs((_2354 - _2357) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2552 = ((((_2358 > 0.0) ? exp2(_2373 * _2358) : (2.0 - exp2(_2375 * _2358))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2368;
        }
        else
        {
            float _2496 = 1.0 / cbSceneParam._m0[80u].x;
            float _2497 = isnan(_2359) ? _2358 : (isnan(_2358) ? _2359 : max(_2358, _2359));
            float _2498 = isnan(_2359) ? _2358 : (isnan(_2358) ? _2359 : min(_2358, _2359));
            float _2507 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : min(_2497, 0.0));
            float _2508 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : min(_2498, 0.0));
            _2552 = ((abs(_2365 / _2354) * cbSceneParam._m0[80u].y) * ((((_2507 - _2508) * 2.0) - ((exp2(_2373 * (isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0)))) - exp2(_2373 * (isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0))))) * _2496)) - ((exp2(_2375 * _2507) - exp2(_2375 * _2508)) * _2496))) + (_2368 * cbSceneParam._m0[80u].z);
        }
        vec4 _2554 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2265, _2266, 1.0), 0.0);
        float _2563 = exp2((_2552 * (-1.44269502162933349609375)) * (1.0 - _2554.w));
        float _2564 = log2(_2563);
        float _2580 = log2(_2285);
        _2377 = (exp2(_2580 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2564 * cbSceneParam._m0[78u].x)) * _2554.x) / cbSceneParam._m0[78u].x)) + _2282;
        _2379 = (exp2(_2580 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2564 * cbSceneParam._m0[78u].y)) * _2554.y) / cbSceneParam._m0[78u].y)) + _2283;
        _2381 = (exp2(_2580 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2564 * cbSceneParam._m0[78u].z)) * _2554.z) / cbSceneParam._m0[78u].z)) + _2284;
        _2383 = _2563 * _2285;
    }
    else
    {
        _2377 = _2282;
        _2379 = _2283;
        _2381 = _2284;
        _2383 = _2285;
    }
    bool _2590;
    vec4 _2393;
    vec4 _2415;
    float _2417;
    float _2421;
    float _2422;
    float _2423;
    float _2424;
    bool _2434;
    for (;;)
    {
        _2393 = cbMatDynParam._m0[0u];
        float _2395 = roundEven(_2393.y);
        bool _2396 = _2395 == 3.0;
        float _2397 = log2(_2383);
        float _2404 = exp2(_2397 * cbSceneParam._m0[78u].x) * _2254;
        float _2405 = exp2(_2397 * cbSceneParam._m0[78u].y) * _2255;
        float _2406 = exp2(_2397 * cbSceneParam._m0[78u].z) * _2256;
        float _2413 = _376 + (-0.5);
        _2415 = cbMtdParam._m0[1u];
        _2417 = _2415.y * _2413;
        float _2420 = (_2395 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2421 = _2420 * (_2396 ? _2404 : (_2404 + (cbSceneParam._m0[72u].w * _2377)));
        _2422 = _2420 * (_2396 ? _2405 : (_2405 + (cbSceneParam._m0[72u].w * _2379)));
        _2423 = _2420 * (_2396 ? _2406 : (_2406 + (cbSceneParam._m0[72u].w * _2381)));
        _2424 = _2413 * 0.999000012874603271484375;
        _2434 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2434)
        {
            if ((cbInstanceData._m0[_428 + 7u].x + _2424) < 0.5)
            {
                _2590 = true;
                break;
            }
        }
        uint _2531 = _430 + uint(_2393.w);
        if ((cbInstanceData._m0[_2531].w < 1.0) && ((cbInstanceData._m0[_2531].w + _2424) < 0.5))
        {
            _2590 = true;
            break;
        }
        if ((_2417 + 1.0) < _2415.x)
        {
            _2590 = true;
            break;
        }
        _2590 = false;
        break;
    }
    float _2795;
    if (_2590)
    {
        discard_state = true;
        _2795 = 0.0;
    }
    else
    {
        _2795 = cbInstanceData._m0[_2257].w;
    }
    SV_Target.x = _2421;
    SV_Target.y = _2422;
    SV_Target.z = _2423;
    SV_Target.w = _2795;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2257].w;
    discard_exit();
}


