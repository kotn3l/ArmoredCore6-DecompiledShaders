#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _890;
float _3305;
float _3306;
float _3307;
float _3308;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    vec4 _237 = texture(sampler2D(M_AMSN_M0_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _243 = _237.x * cbMtdParam._m0[9u].x;
    float _244 = _237.y * cbMtdParam._m0[9u].y;
    float _245 = _237.z * cbMtdParam._m0[9u].z;
    vec4 _257 = texture(sampler2D(M_AMSN_M0_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _259 = _257.x;
    vec4 _271 = texture(sampler2D(M_AMSN_M0_M1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _275 = _271.z;
    float _279 = (_271.x * 2.0) + (-1.0);
    float _281 = (_271.y * 2.0) + (-1.0);
    float _282 = dot(vec2(_279, _281), vec2(_279, _281));
    float _3317 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _288 = sqrt(1.0 - (isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0))));
    float _291 = fma(_288, _215, fma(_281, _207 * TANGENT.x, (_193 * _186) * _279));
    float _294 = fma(_288, _216, fma(_281, _207 * TANGENT.y, (_193 * _187) * _279));
    float _297 = fma(_288, _217, fma(_281, _207 * TANGENT.z, (_193 * _188) * _279));
    float _301 = inversesqrt(dot(vec3(_291, _294, _297), vec3(_291, _294, _297)));
    float _302 = _301 * _291;
    float _303 = _301 * _294;
    float _304 = _301 * _297;
    float _3328 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _305 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
    float _3339 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3350 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3361 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3372 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _309 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
    float _325 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _367 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _377 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _367);
    float _378 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _367);
    float _379 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _367);
    float _383 = inversesqrt(dot(vec3(_377, _378, _379), vec3(_377, _378, _379)));
    float _384 = _377 * _383;
    float _385 = _378 * _383;
    float _386 = _379 * _383;
    vec4 _391 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _393 = _391.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _569 = sqrt(((_377 * _377) + (_378 * _378)) + (_379 * _379));
        float _575 = (cbMatDynParam._m0[5u].x * _569) + cbMatDynParam._m0[5u].y;
        float _3383 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
        float _576 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
        float _580 = (cbMatDynParam._m0[5u].z * _569) + cbMatDynParam._m0[5u].w;
        float _3394 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0))) - _576)) + _576) < ((_393 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _405 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _406 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _426 = fma(_304, cbSceneParam._m0[5u].z, fma(_303, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _302));
    float _429 = fma(_304, cbSceneParam._m0[6u].z, fma(_303, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _302));
    float _432 = fma(_304, cbSceneParam._m0[7u].z, fma(_303, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _302));
    uint _445 = uint(roundEven(NORMAL.w)) * 13u;
    uint _447 = _445 + 9u;
    uint _448 = _447 + uint(cbMatDynParam._m0[0u].w);
    float _454 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0)))) * cbInstanceData._m0[_448].x;
    float _455 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0)))) * cbInstanceData._m0[_448].y;
    float _456 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0)))) * cbInstanceData._m0[_448].z;
    float _3405 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _457 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
    float _3416 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
    float _3427 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _459 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
    float _460 = 1.0 - _309;
    float _461 = _457 * _460;
    float _462 = _458 * _460;
    float _463 = _459 * _460;
    float _468 = (_457 + (-0.039999999105930328369140625)) * _309;
    float _469 = (_458 + (-0.039999999105930328369140625)) * _309;
    float _470 = (_459 + (-0.039999999105930328369140625)) * _309;
    float _471 = _468 + 0.039999999105930328369140625;
    float _473 = _469 + 0.039999999105930328369140625;
    float _474 = _470 + 0.039999999105930328369140625;
    vec4 _483 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _405, cbSceneParam._m0[86u].y * _406));
    float _486 = _483.x * TEXCOORD.z;
    float _487 = dot(vec3(_302, _303, _304), vec3(_384, _385, _386));
    float _490 = _487 * 2.0;
    float _494 = (_490 * _302) - _384;
    float _495 = (_490 * _303) - _385;
    float _496 = (_490 * _304) - _386;
    float _500 = abs(dot(vec3(_384, _385, _386), vec3(_302, _303, _304)));
    float _3438 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _502 = sqrt(_305);
    float _515 = exp2((_502 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_502 * 3.0));
    float _521 = (1.0 - _515) * ((_502 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _522 = _515 * _502;
    float _550 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _554 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _558 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _889;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _614 = fma(_558, cbModelParam._m0[26u].z, fma(_554, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _550));
        float _618 = fma(_558, cbModelParam._m0[27u].z, fma(_554, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _550));
        float _622 = fma(_558, cbModelParam._m0[28u].z, fma(_554, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _550));
        float _647 = _550 + _302;
        float _648 = _554 + _303;
        float _649 = _558 + _304;
        float _659 = fma(_649, cbModelParam._m0[26u].z, fma(_648, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _647)) - _614;
        float _660 = fma(_649, cbModelParam._m0[27u].z, fma(_648, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _647)) - _618;
        float _661 = fma(_649, cbModelParam._m0[28u].z, fma(_648, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _647)) - _622;
        float _665 = inversesqrt(dot(vec3(_659, _660, _661), vec3(_659, _660, _661)));
        float _678 = ((_665 * _659) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_614 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _679 = ((_665 * _660) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_618 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _680 = ((_665 * _661) / cbModelParam._m0[34u].z) + ((((((_622 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _683 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_678, _679, _680), 0.0);
        vec4 _690 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_678, _679, _680), 0.0);
        vec4 _697 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_678, _679, _680), 0.0);
        vec4 _704 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_678, _679, _680), 0.0);
        float _717 = exp2((_683.w + (-0.5)) * 20.0) * 2.0;
        float _718 = _717 * (_683.x + (-0.5));
        float _719 = _717 * (_683.y + (-0.5));
        float _720 = _717 * (_683.z + (-0.5));
        float _727 = exp2((_690.w + (-0.5)) * 20.0) * 2.0;
        float _728 = _727 * (_690.x + (-0.5));
        float _729 = _727 * (_690.y + (-0.5));
        float _730 = _727 * (_690.z + (-0.5));
        float _737 = exp2((_697.w + (-0.5)) * 20.0) * 2.0;
        float _738 = _737 * (_697.x + (-0.5));
        float _739 = _737 * (_697.y + (-0.5));
        float _740 = _737 * (_697.z + (-0.5));
        float _747 = exp2((_704.w + (-0.5)) * 20.0) * 2.0;
        float _748 = _747 * (_704.x + (-0.5));
        float _749 = _747 * (_704.y + (-0.5));
        float _750 = _747 * (_704.z + (-0.5));
        float _751 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _752 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _753 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _754 = _718 * 0.5;
        float _755 = _728 * 0.5;
        float _756 = _738 * 0.5;
        float _757 = dot(vec3(_754, _755, _756), vec3(_754, _755, _756));
        float _762 = (_757 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_757);
        float _771 = (dot(vec3(_302, _303, _304), vec3(_762 * _754, _762 * _755, _762 * _756)) + 1.0) * 0.5;
        float _3464 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _781 = sqrt(((_755 * _755) + (_754 * _754)) + (_756 * _756)) / (_751 + 9.9999997473787516355514526367188e-06);
        float _3475 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _782 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
        float _783 = _782 * 2.0;
        float _787 = (1.0 - _782) / (_782 + 1.0);
        float _3486 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _788 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _797 = ((((1.0 - _788) * (_783 + 2.0)) * exp2(log2(isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))) * (_783 + 1.0))) + _788) * _751;
        float _798 = _719 * 0.5;
        float _799 = _729 * 0.5;
        float _800 = _739 * 0.5;
        float _801 = dot(vec3(_798, _799, _800), vec3(_798, _799, _800));
        float _806 = (_801 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_801);
        float _814 = (dot(vec3(_302, _303, _304), vec3(_806 * _798, _806 * _799, _806 * _800)) + 1.0) * 0.5;
        float _3497 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _823 = sqrt(((_799 * _799) + (_798 * _798)) + (_800 * _800)) / (_752 + 9.9999997473787516355514526367188e-06);
        float _3508 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
        float _825 = _824 * 2.0;
        float _829 = (1.0 - _824) / (_824 + 1.0);
        float _3519 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _839 = ((((1.0 - _830) * (_825 + 2.0)) * exp2(log2(isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))) * (_825 + 1.0))) + _830) * _752;
        float _840 = _720 * 0.5;
        float _841 = _730 * 0.5;
        float _842 = _740 * 0.5;
        float _843 = dot(vec3(_840, _841, _842), vec3(_840, _841, _842));
        float _848 = (_843 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_843);
        float _856 = (dot(vec3(_302, _303, _304), vec3(_848 * _840, _848 * _841, _848 * _842)) + 1.0) * 0.5;
        float _3530 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _865 = sqrt(((_841 * _841) + (_840 * _840)) + (_842 * _842)) / (_753 + 9.9999997473787516355514526367188e-06);
        float _3541 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _866 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
        float _867 = _866 * 2.0;
        float _871 = (1.0 - _866) / (_866 + 1.0);
        float _3552 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _881 = ((((1.0 - _872) * (_867 + 2.0)) * exp2(log2(isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) * (_867 + 1.0))) + _872) * _753;
        _889 = _720;
        _891 = _719;
        _892 = _718;
        _893 = _730;
        _894 = _729;
        _895 = _728;
        _896 = _740;
        _897 = _739;
        _898 = _738;
        _899 = _753;
        _900 = _752;
        _901 = _751;
        _902 = cbModelParam._m0[36u].z * (isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0)));
        _903 = cbModelParam._m0[36u].z * (isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0)));
        _904 = cbModelParam._m0[36u].z * (isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0)));
    }
    else
    {
        _889 = _890;
        _891 = _890;
        _892 = _890;
        _893 = _890;
        _894 = _890;
        _895 = _890;
        _896 = _890;
        _897 = _890;
        _898 = _890;
        _899 = _890;
        _900 = _890;
        _901 = _890;
        _902 = 0.0;
        _903 = 0.0;
        _904 = 0.0;
    }
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _933 = fma(_558, cbModelParam._m0[30u].z, fma(_554, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _550));
        float _937 = fma(_558, cbModelParam._m0[31u].z, fma(_554, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _550));
        float _941 = fma(_558, cbModelParam._m0[32u].z, fma(_554, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _550));
        float _964 = _550 + _302;
        float _965 = _554 + _303;
        float _966 = _558 + _304;
        float _976 = fma(_966, cbModelParam._m0[30u].z, fma(_965, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _964)) - _933;
        float _977 = fma(_966, cbModelParam._m0[31u].z, fma(_965, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _964)) - _937;
        float _978 = fma(_966, cbModelParam._m0[32u].z, fma(_965, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _964)) - _941;
        float _982 = inversesqrt(dot(vec3(_976, _977, _978), vec3(_976, _977, _978)));
        float _995 = ((_982 * _976) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_933 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _996 = ((_982 * _977) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_937 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _997 = ((_982 * _978) / cbModelParam._m0[35u].z) + ((((((_941 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        float _1032 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_999.x + (-0.5));
        float _1034 = _1032 * (_999.y + (-0.5));
        float _1035 = _1032 * (_999.z + (-0.5));
        float _1042 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_1006.x + (-0.5));
        float _1044 = _1042 * (_1006.y + (-0.5));
        float _1045 = _1042 * (_1006.z + (-0.5));
        float _1052 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1013.x + (-0.5));
        float _1054 = _1052 * (_1013.y + (-0.5));
        float _1055 = _1052 * (_1013.z + (-0.5));
        float _1062 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1020.x + (-0.5));
        float _1064 = _1062 * (_1020.y + (-0.5));
        float _1065 = _1062 * (_1020.z + (-0.5));
        float _1066 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1067 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1068 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1069 = _1033 * 0.5;
        float _1070 = _1043 * 0.5;
        float _1071 = _1053 * 0.5;
        float _1072 = dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071));
        float _1077 = (_1072 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1072);
        float _1085 = (dot(vec3(_302, _303, _304), vec3(_1077 * _1069, _1077 * _1070, _1077 * _1071)) + 1.0) * 0.5;
        float _3593 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1094 = sqrt(((_1070 * _1070) + (_1069 * _1069)) + (_1071 * _1071)) / (_1066 + 9.9999997473787516355514526367188e-06);
        float _3604 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _1096 = _1095 * 2.0;
        float _1100 = (1.0 - _1095) / (_1095 + 1.0);
        float _3615 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _1110 = ((((1.0 - _1101) * (_1096 + 2.0)) * exp2(log2(isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))) * (_1096 + 1.0))) + _1101) * _1066;
        float _1111 = _1034 * 0.5;
        float _1112 = _1044 * 0.5;
        float _1113 = _1054 * 0.5;
        float _1114 = dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1127 = (dot(vec3(_302, _303, _304), vec3(_1119 * _1111, _1119 * _1112, _1119 * _1113)) + 1.0) * 0.5;
        float _3626 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1136 = sqrt(((_1112 * _1112) + (_1111 * _1111)) + (_1113 * _1113)) / (_1067 + 9.9999997473787516355514526367188e-06);
        float _3637 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _1138 = _1137 * 2.0;
        float _1142 = (1.0 - _1137) / (_1137 + 1.0);
        float _3648 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _1152 = ((((1.0 - _1143) * (_1138 + 2.0)) * exp2(log2(isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * (_1138 + 1.0))) + _1143) * _1067;
        float _1153 = _1035 * 0.5;
        float _1154 = _1045 * 0.5;
        float _1155 = _1055 * 0.5;
        float _1156 = dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155));
        float _1161 = (_1156 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1156);
        float _1169 = (dot(vec3(_302, _303, _304), vec3(_1161 * _1153, _1161 * _1154, _1161 * _1155)) + 1.0) * 0.5;
        float _3659 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1178 = sqrt(((_1154 * _1154) + (_1153 * _1153)) + (_1155 * _1155)) / (_1068 + 9.9999997473787516355514526367188e-06);
        float _3670 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _1180 = _1179 * 2.0;
        float _1184 = (1.0 - _1179) / (_1179 + 1.0);
        float _3681 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1194 = ((((1.0 - _1185) * (_1180 + 2.0)) * exp2(log2(isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * (_1180 + 1.0))) + _1185) * _1068;
        _1202 = _1035;
        _1203 = _1034;
        _1204 = _1033;
        _1205 = _1045;
        _1206 = _1044;
        _1207 = _1043;
        _1208 = _1055;
        _1209 = _1054;
        _1210 = _1053;
        _1211 = _1068;
        _1212 = _1067;
        _1213 = _1066;
        _1214 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0)));
        _1215 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)));
        _1216 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)));
    }
    else
    {
        _1202 = _890;
        _1203 = _890;
        _1204 = _890;
        _1205 = _890;
        _1206 = _890;
        _1207 = _890;
        _1208 = _890;
        _1209 = _890;
        _1210 = _890;
        _1211 = _890;
        _1212 = _890;
        _1213 = _890;
        _1214 = 0.0;
        _1215 = 0.0;
        _1216 = 0.0;
    }
    float _1226 = (cbModelParam._m0[1u].x * (_1214 - _902)) + _902;
    float _1227 = (cbModelParam._m0[1u].x * (_1215 - _903)) + _903;
    float _1228 = (cbModelParam._m0[1u].x * (_1216 - _904)) + _904;
    float _1249 = fma(_1228, cbSceneParam._m0[89u].z, fma(_1227, cbSceneParam._m0[89u].y, _1226 * cbSceneParam._m0[89u].x));
    float _1252 = fma(_1228, cbSceneParam._m0[90u].z, fma(_1227, cbSceneParam._m0[90u].y, _1226 * cbSceneParam._m0[90u].x));
    float _1255 = fma(_1228, cbSceneParam._m0[91u].z, fma(_1227, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1226));
    float _1270 = _494 * 0.5;
    float _1271 = _495 * 0.5;
    float _1272 = _496 * 0.5;
    float _1273 = dot(vec4(_1270, _1271, _1272, 1.0), vec4(_1204, _1207, _1210, _1213));
    float _1276 = dot(vec4(_1270, _1271, _1272, 1.0), vec4(_1203, _1206, _1209, _1212));
    float _1279 = dot(vec4(_1270, _1271, _1272, 1.0), vec4(_1202, _1205, _1208, _1211));
    float _1313;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1286 = dot(vec4(_1270, _1271, _1272, 1.0), vec4(_889, _893, _896, _899));
        float _1290 = dot(vec4(_1270, _1271, _1272, 1.0), vec4(_891, _894, _897, _900));
        float _1294 = dot(vec4(_1270, _1271, _1272, 1.0), vec4(_892, _895, _898, _901));
        float _1301 = dot(vec4(cbModelParam._m0[39u]), vec4(_1270, _1271, _1272, 1.0));
        _1313 = dot(vec3(isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)), isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)), isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1301) ? 0.0 : (isnan(0.0) ? _1301 : max(0.0, _1301))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1313 = 1.0;
    }
    float _1324;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1315 = dot(vec4(cbModelParam._m0[40u]), vec4(_1270, _1271, _1272, 1.0));
        _1324 = dot(vec3(isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)), isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)), isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1315) ? 0.0 : (isnan(0.0) ? _1315 : max(0.0, _1315))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1324 = 1.0;
    }
    float _1328 = (_1324 * cbModelParam._m0[1u].x) + (_1313 * (1.0 - cbModelParam._m0[1u].x));
    float _1338 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _305);
    float _1339 = isnan(_1338) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1338 : min(cbModelParam._m0[25u].z, _1338));
    float _1421;
    float _1423;
    float _1425;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1388 = fma(_558, cbModelParam._m0[13u].z, fma(_554, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _550)) + cbModelParam._m0[13u].w;
        float _1392 = fma(_558, cbModelParam._m0[14u].z, fma(_554, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _550)) + cbModelParam._m0[14u].w;
        float _1396 = fma(_558, cbModelParam._m0[15u].z, fma(_554, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _550)) + cbModelParam._m0[15u].w;
        float _1399 = fma(_496, cbModelParam._m0[13u].z, fma(_495, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _494));
        float _1402 = fma(_496, cbModelParam._m0[14u].z, fma(_495, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _494));
        float _1405 = fma(_496, cbModelParam._m0[15u].z, fma(_495, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _494));
        float _1433;
        if (_1399 > 0.0)
        {
            _1433 = abs((1.0 - _1388) / _1399);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1399 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1388 + 1.0) / _1399);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1433 = frontier_phi_19_17_ladder;
        }
        float _1662;
        if (_1402 > 0.0)
        {
            _1662 = abs((1.0 - _1392) / _1402);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1402 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1392 + 1.0) / _1402);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1662 = frontier_phi_28_24_ladder;
        }
        float _1919;
        if (_1405 > 0.0)
        {
            _1919 = abs((1.0 - _1396) / _1405);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1405 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1396 + 1.0) / _1405);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1919 = frontier_phi_40_35_ladder;
        }
        float _1921 = isnan(_1662) ? _1433 : (isnan(_1433) ? _1662 : min(_1433, _1662));
        float _1922 = isnan(_1919) ? _1921 : (isnan(_1921) ? _1919 : min(_1921, _1919));
        float _1926 = (_1922 * _1399) + _1388;
        float _1927 = (_1922 * _1402) + _1392;
        float _1928 = (_1922 * _1405) + _1396;
        float _1929 = _1922 * 9.9999997473787516355514526367188e-05;
        float _1931 = (-1.0) - _1929;
        float _1933 = _1929 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1928 > _1933) || ((_1928 < _1931) || ((_1927 > _1933) || ((_1927 < _1931) || ((_1926 < _1931) || (_1926 > _1933))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2056 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1928, cbModelParam._m0[9u].z, fma(_1927, cbModelParam._m0[9u].y, _1926 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1928, cbModelParam._m0[10u].z, fma(_1927, cbModelParam._m0[10u].y, _1926 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1928, cbModelParam._m0[11u].z, fma(_1927, cbModelParam._m0[11u].y, _1926 * cbModelParam._m0[11u].x))), _1339);
            frontier_phi_18_40_ladder = _2056.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2056.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2056.x * cbModelParam._m0[1u].y;
        }
        _1421 = frontier_phi_18_40_ladder_2;
        _1423 = frontier_phi_18_40_ladder_1;
        _1425 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1409 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_494, _495, _496), _1339);
        _1421 = _1409.x * cbModelParam._m0[1u].y;
        _1423 = _1409.y * cbModelParam._m0[1u].y;
        _1425 = _1409.z * cbModelParam._m0[1u].y;
    }
    float _1429 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _305);
    float _1430 = isnan(_1429) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1429 : min(cbModelParam._m0[25u].w, _1429));
    float _1523;
    float _1525;
    float _1527;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1487 = fma(_558, cbModelParam._m0[21u].z, fma(_554, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _550)) + cbModelParam._m0[21u].w;
        float _1491 = fma(_558, cbModelParam._m0[22u].z, fma(_554, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _550)) + cbModelParam._m0[22u].w;
        float _1495 = fma(_558, cbModelParam._m0[23u].z, fma(_554, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _550)) + cbModelParam._m0[23u].w;
        float _1498 = fma(_496, cbModelParam._m0[21u].z, fma(_495, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _494));
        float _1501 = fma(_496, cbModelParam._m0[22u].z, fma(_495, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _494));
        float _1504 = fma(_496, cbModelParam._m0[23u].z, fma(_495, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _494));
        float _1667;
        if (_1498 > 0.0)
        {
            _1667 = abs((1.0 - _1487) / _1498);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1498 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1487 + 1.0) / _1498);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1667 = frontier_phi_30_26_ladder;
        }
        float _1946;
        if (_1501 > 0.0)
        {
            _1946 = abs((1.0 - _1491) / _1501);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1501 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1491 + 1.0) / _1501);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1946 = frontier_phi_42_37_ladder;
        }
        float _2159;
        if (_1504 > 0.0)
        {
            _2159 = abs((1.0 - _1495) / _1504);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1504 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1495 + 1.0) / _1504);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2159 = frontier_phi_51_48_ladder;
        }
        float _2161 = isnan(_1946) ? _1667 : (isnan(_1667) ? _1946 : min(_1667, _1946));
        float _2162 = isnan(_2159) ? _2161 : (isnan(_2161) ? _2159 : min(_2161, _2159));
        float _2166 = (_2162 * _1498) + _1487;
        float _2167 = (_2162 * _1501) + _1491;
        float _2168 = (_2162 * _1504) + _1495;
        float _2169 = _2162 * 9.9999997473787516355514526367188e-05;
        float _2170 = (-1.0) - _2169;
        float _2172 = _2169 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2168 > _2172) || ((_2168 < _2170) || ((_2167 > _2172) || ((_2167 < _2170) || ((_2166 < _2170) || (_2166 > _2172))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2366 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2168, cbModelParam._m0[17u].z, fma(_2167, cbModelParam._m0[17u].y, _2166 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2168, cbModelParam._m0[18u].z, fma(_2167, cbModelParam._m0[18u].y, _2166 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2168, cbModelParam._m0[19u].z, fma(_2167, cbModelParam._m0[19u].y, _2166 * cbModelParam._m0[19u].x))), _1430);
            frontier_phi_27_51_ladder = _2366.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2366.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2366.x * cbModelParam._m0[1u].z;
        }
        _1523 = frontier_phi_27_51_ladder_2;
        _1525 = frontier_phi_27_51_ladder_1;
        _1527 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1507 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_494, _495, _496), _1430);
        _1523 = _1507.x * cbModelParam._m0[1u].z;
        _1525 = _1507.y * cbModelParam._m0[1u].z;
        _1527 = _1507.z * cbModelParam._m0[1u].z;
    }
    float _1540 = (((_521 * _471) + _522) * _486) * ((cbModelParam._m0[1u].w * (_1523 - _1421)) + _1421);
    float _1542 = (((_521 * _473) + _522) * _486) * ((cbModelParam._m0[1u].w * (_1525 - _1423)) + _1423);
    float _1544 = (((_521 * _474) + _522) * _486) * ((cbModelParam._m0[1u].w * (_1527 - _1425)) + _1425);
    float _1547 = fma(_1544, cbSceneParam._m0[89u].z, fma(_1542, cbSceneParam._m0[89u].y, _1540 * cbSceneParam._m0[89u].x));
    float _1550 = fma(_1544, cbSceneParam._m0[90u].z, fma(_1542, cbSceneParam._m0[90u].y, _1540 * cbSceneParam._m0[90u].x));
    float _1553 = fma(_1544, cbSceneParam._m0[91u].z, fma(_1542, cbSceneParam._m0[91u].y, _1540 * cbSceneParam._m0[91u].x));
    vec4 _1561 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_405, _406));
    float _1563 = _1561.w;
    float _1575 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1563);
    float _1576 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1563);
    float _1577 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1563);
    uvec4 _1581 = floatBitsToUint(cbInstanceData._m0[_445 + 5u]);
    uint _1583 = _1581.x * 14u;
    uint _1584 = _1583 + 13u;
    float _1591 = _486 + (-1.0);
    float _1596 = (cbLight._m0[_1584].x * _1591) + 1.0;
    float _1597 = (cbLight._m0[_1584].y * _1591) + 1.0;
    float _1598 = (cbLight._m0[_1584].z * _1591) + 1.0;
    float _1599 = (cbLight._m0[_1584].w * _1591) + 1.0;
    uint _1600 = _1583 + 5u;
    float _1606 = isnan(1.0) ? _1597 : (isnan(_1597) ? 1.0 : min(_1597, 1.0));
    uint _1610 = _1583 + 4u;
    float _1620 = isnan(1.0) ? _1596 : (isnan(_1596) ? 1.0 : min(_1596, 1.0));
    uint _1624 = _1583 | 1u;
    float _1635 = dot(vec3(cbLight._m0[_1583].xyz), vec3(_302, _303, _304));
    float _1638 = dot(vec3(cbLight._m0[_1624].xyz), vec3(_302, _303, _304));
    float _3817 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
    float _3828 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
    float _1643 = (isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * 0.3183098733425140380859375;
    float _1645 = (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * 0.3183098733425140380859375;
    float _1652 = ((cbLight._m0[_1600].x * _1606) * _1645) + (((cbLight._m0[_1610].x * _1575) * _1620) * _1643);
    float _1653 = ((_1606 * cbLight._m0[_1600].y) * _1645) + (((cbLight._m0[_1610].y * _1576) * _1620) * _1643);
    float _1654 = ((_1606 * cbLight._m0[_1600].z) * _1645) + (((cbLight._m0[_1610].z * _1577) * _1620) * _1643);
    uvec4 _1659 = floatBitsToUint(cbLight._m0[_1583 + 12u]);
    bool _1661 = _1659.x == 0u;
    float _1672;
    float _1674;
    float _1676;
    if (_1661)
    {
        _1672 = _1652;
        _1674 = _1653;
        _1676 = _1654;
    }
    else
    {
        uint _1680 = _1583 + 6u;
        float _1696 = (dot(vec3(cbLight._m0[_1583 + 2u].xyz), vec3(_302, _303, _304)) * 0.5) + 0.5;
        float _1697 = _1696 * _1696;
        float _3839 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1698 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1699 = isnan(1.0) ? _1598 : (isnan(_1598) ? 1.0 : min(_1598, 1.0));
        _1672 = (((cbLight._m0[_1680].x * 0.3183098733425140380859375) * _1698) * _1699) + _1652;
        _1674 = (((cbLight._m0[_1680].y * 0.3183098733425140380859375) * _1698) * _1699) + _1653;
        _1676 = (((cbLight._m0[_1680].z * 0.3183098733425140380859375) * _1698) * _1699) + _1654;
    }
    bool _1679 = _1659.y == 0u;
    float _1717;
    float _1719;
    float _1721;
    if (_1679)
    {
        _1717 = _1672;
        _1719 = _1674;
        _1721 = _1676;
    }
    else
    {
        uint _1890 = _1583 + 7u;
        float _1906 = (dot(vec3(cbLight._m0[_1583 + 3u].xyz), vec3(_302, _303, _304)) * 0.5) + 0.5;
        float _1907 = _1906 * _1906;
        float _3855 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
        float _1908 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1909 = isnan(1.0) ? _1599 : (isnan(_1599) ? 1.0 : min(_1599, 1.0));
        _1717 = (((cbLight._m0[_1890].x * 0.3183098733425140380859375) * _1908) * _1909) + _1672;
        _1719 = (((cbLight._m0[_1890].y * 0.3183098733425140380859375) * _1908) * _1909) + _1674;
        _1721 = (((cbLight._m0[_1890].z * 0.3183098733425140380859375) * _1908) * _1909) + _1676;
    }
    uint _1724 = _1583 + 8u;
    float _1737 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1583].w)) * _305) * 0.949999988079071044921875);
    float _1738 = _1737 * _1737;
    float _1739 = cbLight._m0[_1583].x + _384;
    float _1740 = cbLight._m0[_1583].y + _385;
    float _1741 = cbLight._m0[_1583].z + _386;
    float _1745 = inversesqrt(dot(vec3(_1739, _1740, _1741), vec3(_1739, _1740, _1741)));
    float _1746 = _1745 * _1739;
    float _1747 = _1745 * _1740;
    float _1748 = _1745 * _1741;
    float _1749 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1583].xyz));
    float _3871 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
    float _1752 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _3882 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _1753 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _1754 = dot(vec3(_302, _303, _304), vec3(_1746, _1747, _1748));
    float _3893 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _1757 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _1758 = dot(vec3(cbLight._m0[_1583].xyz), vec3(_1746, _1747, _1748));
    float _3904 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
    float _1762 = _1738 * _1738;
    float _1766 = ((_1757 * _1757) * (_1762 + (-1.0))) + 1.0;
    float _1774 = exp2(log2(1.0 - (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * 5.0);
    float _1775 = 0.959999978542327880859375 - _468;
    float _1777 = 0.959999978542327880859375 - _469;
    float _1778 = 0.959999978542327880859375 - _470;
    float _1785 = 1.0 - _1738;
    float _1796 = (0.5 / (((_1753 * ((_1752 * _1785) + _1738)) + 9.9999999392252902907785028219223e-09) + (((_1753 * _1785) + _1738) * _1752))) * _1752;
    float _3915 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1798 = (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1762 / ((_1766 * _1766) * 3.141590118408203125));
    uint _1812 = _1583 + 9u;
    float _1823 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1624].w)) * _305) * 0.949999988079071044921875);
    float _1824 = _1823 * _1823;
    float _1825 = cbLight._m0[_1624].x + _384;
    float _1826 = cbLight._m0[_1624].y + _385;
    float _1827 = cbLight._m0[_1624].z + _386;
    float _1831 = inversesqrt(dot(vec3(_1825, _1826, _1827), vec3(_1825, _1826, _1827)));
    float _1832 = _1831 * _1825;
    float _1833 = _1831 * _1826;
    float _1834 = _1831 * _1827;
    float _1835 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1624].xyz));
    float _3926 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _1838 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _1839 = dot(vec3(_302, _303, _304), vec3(_1832, _1833, _1834));
    float _3937 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1842 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _1843 = dot(vec3(cbLight._m0[_1624].xyz), vec3(_1832, _1833, _1834));
    float _3948 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1847 = _1824 * _1824;
    float _1851 = ((_1842 * _1842) * (_1847 + (-1.0))) + 1.0;
    float _1858 = exp2(log2(1.0 - (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) * 5.0);
    float _1865 = 1.0 - _1824;
    float _1875 = (0.5 / (((_1753 * ((_1838 * _1865) + _1824)) + 9.9999999392252902907785028219223e-09) + (((_1753 * _1865) + _1824) * _1838))) * _1838;
    float _3959 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1877 = (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_1847 / ((_1851 * _1851) * 3.141590118408203125));
    float _1887 = (((((_1858 * _1775) + _471) * cbLight._m0[_1812].x) * _1877) * _1606) + ((((cbLight._m0[_1724].x * _1575) * ((_1774 * _1775) + _471)) * _1798) * _1620);
    float _1888 = (((((_1858 * _1777) + _473) * cbLight._m0[_1812].y) * _1877) * _1606) + ((((cbLight._m0[_1724].y * _1576) * ((_1774 * _1777) + _473)) * _1798) * _1620);
    float _1889 = (((((_1858 * _1778) + _474) * cbLight._m0[_1812].z) * _1877) * _1606) + ((((cbLight._m0[_1724].z * _1577) * ((_1774 * _1778) + _474)) * _1798) * _1620);
    float _1951;
    float _1953;
    float _1955;
    if (_1661)
    {
        _1951 = _1887;
        _1953 = _1888;
        _1955 = _1889;
    }
    else
    {
        uint _1957 = _1583 + 2u;
        uint _1961 = _1583 + 10u;
        float _1975 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1957].w)) * _305) * 0.949999988079071044921875);
        float _1976 = _1975 * _1975;
        float _1977 = cbLight._m0[_1957].x + _384;
        float _1978 = cbLight._m0[_1957].y + _385;
        float _1979 = cbLight._m0[_1957].z + _386;
        float _1983 = inversesqrt(dot(vec3(_1977, _1978, _1979), vec3(_1977, _1978, _1979)));
        float _1984 = _1983 * _1977;
        float _1985 = _1983 * _1978;
        float _1986 = _1983 * _1979;
        float _1987 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1957].xyz));
        float _3970 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
        float _1990 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1991 = dot(vec3(_302, _303, _304), vec3(_1984, _1985, _1986));
        float _3981 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
        float _1994 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1995 = dot(vec3(cbLight._m0[_1957].xyz), vec3(_1984, _1985, _1986));
        float _3992 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        float _1999 = _1976 * _1976;
        float _2003 = ((_1994 * _1994) * (_1999 + (-1.0))) + 1.0;
        float _2010 = exp2(log2(1.0 - (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) * 5.0);
        float _2017 = 1.0 - _1976;
        float _2027 = (0.5 / (((_1753 * ((_1990 * _2017) + _1976)) + 9.9999999392252902907785028219223e-09) + (((_1753 * _2017) + _1976) * _1990))) * _1990;
        float _4003 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        float _2029 = (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_1999 / ((_2003 * _2003) * 3.141590118408203125));
        float _2030 = isnan(1.0) ? _1598 : (isnan(_1598) ? 1.0 : min(_1598, 1.0));
        _1951 = (((((_2010 * _1775) + _471) * cbLight._m0[_1961].x) * _2029) * _2030) + _1887;
        _1953 = (((((_2010 * _1777) + _473) * cbLight._m0[_1961].y) * _2029) * _2030) + _1888;
        _1955 = (((((_2010 * _1778) + _474) * cbLight._m0[_1961].z) * _2029) * _2030) + _1889;
    }
    float _2065;
    float _2067;
    float _2069;
    if (_1679)
    {
        _2065 = _1951;
        _2067 = _1953;
        _2069 = _1955;
    }
    else
    {
        uint _2076 = _1583 + 3u;
        uint _2080 = _1583 + 11u;
        float _2094 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2076].w)) * _305) * 0.949999988079071044921875);
        float _2095 = _2094 * _2094;
        float _2096 = cbLight._m0[_2076].x + _384;
        float _2097 = cbLight._m0[_2076].y + _385;
        float _2098 = cbLight._m0[_2076].z + _386;
        float _2102 = inversesqrt(dot(vec3(_2096, _2097, _2098), vec3(_2096, _2097, _2098)));
        float _2103 = _2102 * _2096;
        float _2104 = _2102 * _2097;
        float _2105 = _2102 * _2098;
        float _2106 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_2076].xyz));
        float _4019 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2109 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _2110 = dot(vec3(_302, _303, _304), vec3(_2103, _2104, _2105));
        float _4030 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2113 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _2114 = dot(vec3(cbLight._m0[_2076].xyz), vec3(_2103, _2104, _2105));
        float _4041 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2118 = _2095 * _2095;
        float _2122 = ((_2113 * _2113) * (_2118 + (-1.0))) + 1.0;
        float _2129 = exp2(log2(1.0 - (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) * 5.0);
        float _2136 = 1.0 - _2095;
        float _2146 = (0.5 / (((_1753 * ((_2109 * _2136) + _2095)) + 9.9999999392252902907785028219223e-09) + (((_1753 * _2136) + _2095) * _2109))) * _2109;
        float _4052 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2148 = (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_2118 / ((_2122 * _2122) * 3.141590118408203125));
        float _2149 = isnan(1.0) ? _1599 : (isnan(_1599) ? 1.0 : min(_1599, 1.0));
        _2065 = (((((_2129 * _1775) + _471) * cbLight._m0[_2080].x) * _2148) * _2149) + _1951;
        _2067 = (((((_2129 * _1777) + _473) * cbLight._m0[_2080].y) * _2148) * _2149) + _1953;
        _2069 = (((((_2129 * _1778) + _474) * cbLight._m0[_2080].z) * _2148) * _2149) + _1955;
    }
    float _2283;
    float _2285;
    float _2287;
    float _2289;
    float _2291;
    float _2293;
    if (_1581.y == 0u)
    {
        float _2224 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2225 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2224;
        float _2226 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2224;
        float _2227 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2224;
        uvec4 _2239 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2240 = _2239.x;
        uint _2251 = uint((float(_2239.y) * floor(float(uint(cbSceneParam._m0[85u].y * _406) / _2240))) + floor(float(uint(cbSceneParam._m0[85u].x * _405) / _2240)));
        float _2261 = (log2(_2227 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2262 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        uint _2265 = uint(isnan(14.0) ? _2262 : (isnan(_2262) ? 14.0 : min(_2262, 14.0)));
        uvec4 _2270 = texelFetch(g_lightClusterGridBuffer, int(((_2265 << 2u) + (_2251 << 6u)) >> 2u));
        uint _2271 = _2270.x;
        uint _2272 = _2239.z;
        float _2371;
        float _2373;
        float _2375;
        float _2377;
        float _2379;
        float _2381;
        if (((((1u << ((_2272 >> 4u) & 15u)) + 4294967295u) & _2271) == 0u) || ((_2272 & 240u) == 0u))
        {
            _2371 = 0.0;
            _2373 = 0.0;
            _2375 = 0.0;
            _2377 = 0.0;
            _2379 = 0.0;
            _2381 = 0.0;
        }
        else
        {
            float _2372;
            float _2374;
            float _2376;
            float _2378;
            float _2380;
            float _2382;
            float _2523 = 0.0;
            float _2524 = 0.0;
            float _2525 = 0.0;
            float _2526 = 0.0;
            float _2527 = 0.0;
            float _2528 = 0.0;
            uint _2529 = 0u;
            uint _2538;
            bool _2539;
            for (;;)
            {
                _2538 = texelFetch(g_lightClassification, int((((_2265 << 5u) + (_2251 << 9u)) + (_2529 << 2u)) >> 2u)).x;
                _2539 = _2538 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2539)
                {
                    frontier_phi_68_pred = _2525;
                    frontier_phi_68_pred_1 = _2528;
                    frontier_phi_68_pred_2 = _2527;
                    frontier_phi_68_pred_3 = _2526;
                    frontier_phi_68_pred_4 = _2524;
                    frontier_phi_68_pred_5 = _2523;
                }
                else
                {
                    float _2668;
                    float _2669;
                    float _2670;
                    float _2671;
                    float _2672;
                    float _2673;
                    uint _2674;
                    _2668 = _2523;
                    _2669 = _2524;
                    _2670 = _2525;
                    _2671 = _2526;
                    _2672 = _2527;
                    _2673 = _2528;
                    _2674 = _2538;
                    float _2595;
                    float _2596;
                    float _2597;
                    float _2598;
                    float _2599;
                    float _2600;
                    for (;;)
                    {
                        uint _2678 = uint(findLSB(_2674)) + (_2529 << 5u);
                        uint _2675 = (_2674 + 4294967295u) & _2674;
                        uint _2680 = _2678 * 48u;
                        vec4 _2694 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2680)).x, texelFetch(g_PointLightRenderingBuffer, int(_2680 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2680 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2680 + 3u)).x));
                        uint _2700 = (_2678 * 48u) + 4u;
                        vec4 _2713 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2700)).x, texelFetch(g_PointLightRenderingBuffer, int(_2700 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2700 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2700 + 3u)).x));
                        uint _2719 = (_2678 * 48u) + 8u;
                        vec3 _2730 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2719)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 2u)).x));
                        float _2734 = _2694.x - _2225;
                        float _2735 = _2694.y - _2226;
                        float _2736 = _2694.z - _2227;
                        float _2737 = dot(vec3(_2734, _2735, _2736), vec3(_2734, _2735, _2736));
                        float _2740 = inversesqrt(_2737);
                        float _2741 = _2740 * _2734;
                        float _2742 = _2740 * _2735;
                        float _2743 = _2740 * _2736;
                        float _2744 = dot(vec3(_426, _429, _432), vec3(_2741, _2742, _2743));
                        float _2749 = 1.0 - (_2737 * _2694.w);
                        float _4078 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
                        float _2750 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
                        float _2751 = sqrt(_2737) * _2713.w;
                        float _2754 = 1.39999997615814208984375 / (_2751 + 1.39999997615814208984375);
                        float _2755 = _2754 * _2754;
                        float _2758 = ((1.0 - _2755) * _2744) + _2755;
                        float _2761 = _2751 * _2751;
                        float _2765 = ((isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0))) * _2750) / ((_2761 * 0.699999988079071044921875) + 1.0);
                        float _2769 = (-0.0) - _2225;
                        float _2770 = (-0.0) - _2226;
                        float _2771 = (-0.0) - _2227;
                        float _2775 = inversesqrt(dot(vec3(_2769, _2770, _2771), vec3(_2769, _2770, _2771)));
                        float _2776 = _2775 * _2769;
                        float _2777 = _2775 * _2770;
                        float _2778 = _2775 * _2771;
                        float _2786 = exp2(log2(1.0 / ((_2761 * 3.5) + 5.0)) * 0.25);
                        float _2787 = 1.0 - _502;
                        float _2794 = sqrt(1.0 - ((1.0 - (_2787 * _2787)) * (1.0 - (_2786 * _2786))));
                        float _2795 = _2794 * _2794;
                        float _2796 = _2795 * _2795;
                        float _2797 = _2776 + _2741;
                        float _2798 = _2777 + _2742;
                        float _2799 = _2778 + _2743;
                        float _2803 = inversesqrt(dot(vec3(_2797, _2798, _2799), vec3(_2797, _2798, _2799)));
                        float _2807 = dot(vec3(_426, _429, _432), vec3(_2776, _2777, _2778));
                        float _4094 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
                        float _2810 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
                        float _2811 = dot(vec3(_426, _429, _432), vec3(_2803 * _2797, _2803 * _2798, _2803 * _2799));
                        float _4105 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
                        float _2814 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
                        float _2818 = ((_2814 * _2814) * (_2796 + (-1.0))) + 1.0;
                        float _2819 = _2754 * _2795;
                        float _2820 = _2819 * _2819;
                        float _2823 = ((1.0 - _2820) * _2744) + _2820;
                        float _4116 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
                        float _2824 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
                        float _2825 = 1.0 - _2795;
                        float _2835 = (0.5 / (((_2824 * ((_2810 * _2825) + _2795)) + 9.9999999392252902907785028219223e-09) + (((_2824 * _2825) + _2795) * _2810))) * _2824;
                        float _4127 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
                        float _2846 = (((_2796 * 3.1415927410125732421875) * (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0)))) / ((_2818 * _2818) * ((_2761 * 2.1991131305694580078125) + 3.141590118408203125))) * _2750;
                        _2598 = (_2765 * _2713.x) + _2671;
                        _2599 = (_2765 * _2713.y) + _2672;
                        _2600 = (_2765 * _2713.z) + _2673;
                        _2595 = (_2846 * _2730.x) + _2668;
                        _2596 = (_2846 * _2730.y) + _2669;
                        _2597 = (_2846 * _2730.z) + _2670;
                        if (_2675 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2668 = _2595;
                            _2669 = _2596;
                            _2670 = _2597;
                            _2671 = _2598;
                            _2672 = _2599;
                            _2673 = _2600;
                            _2674 = _2675;
                        }
                    }
                    frontier_phi_68_pred = _2597;
                    frontier_phi_68_pred_1 = _2600;
                    frontier_phi_68_pred_2 = _2599;
                    frontier_phi_68_pred_3 = _2598;
                    frontier_phi_68_pred_4 = _2596;
                    frontier_phi_68_pred_5 = _2595;
                }
                _2376 = frontier_phi_68_pred;
                _2382 = frontier_phi_68_pred_1;
                _2380 = frontier_phi_68_pred_2;
                _2378 = frontier_phi_68_pred_3;
                _2374 = frontier_phi_68_pred_4;
                _2372 = frontier_phi_68_pred_5;
                uint _2530 = _2529 + 1u;
                if (_2530 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2523 = _2372;
                    _2524 = _2374;
                    _2525 = _2376;
                    _2526 = _2378;
                    _2527 = _2380;
                    _2528 = _2382;
                    _2529 = _2530;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2371 = _2372;
            _2373 = _2374;
            _2375 = _2376;
            _2377 = _2378;
            _2379 = _2380;
            _2381 = _2382;
        }
        uvec4 _2385 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2386 = _2385.z;
        uint _2388 = (_2386 >> 8u) & 15u;
        float _2491;
        float _2493;
        float _2495;
        float _2497;
        float _2499;
        float _2501;
        if (((4294967295u << _2388) & _2271) == 0u)
        {
            _2491 = _2371;
            _2493 = _2373;
            _2495 = _2375;
            _2497 = _2377;
            _2499 = _2379;
            _2501 = _2381;
        }
        else
        {
            float _2516 = inversesqrt(dot(vec3(_2225, _2226, _2227), vec3(_2225, _2226, _2227)));
            float _2517 = _2516 * _2225;
            float _2518 = _2516 * _2226;
            float _2519 = _2516 * _2227;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2388 < ((_2386 >> 12u) & 15u))
            {
                float _2492;
                float _2494;
                float _2496;
                float _2498;
                float _2500;
                float _2502;
                float _2651 = _2371;
                float _2652 = _2373;
                float _2653 = _2375;
                float _2654 = _2377;
                float _2655 = _2379;
                float _2656 = _2381;
                uint _2657 = _2388;
                uint _2666;
                bool _2667;
                for (;;)
                {
                    _2666 = texelFetch(g_lightClassification, int((((_2265 << 5u) + (_2251 << 9u)) + (_2657 << 2u)) >> 2u)).x;
                    _2667 = _2666 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2667)
                    {
                        frontier_phi_79_pred = _2656;
                        frontier_phi_79_pred_1 = _2655;
                        frontier_phi_79_pred_2 = _2654;
                        frontier_phi_79_pred_3 = _2653;
                        frontier_phi_79_pred_4 = _2652;
                        frontier_phi_79_pred_5 = _2651;
                    }
                    else
                    {
                        float _2860;
                        float _2861;
                        float _2862;
                        float _2863;
                        float _2864;
                        float _2865;
                        float _3156;
                        float _3157;
                        float _3158;
                        float _3159;
                        float _3160;
                        float _3161;
                        float _2873 = _2651;
                        float _2874 = _2652;
                        float _2875 = _2653;
                        float _2876 = _2654;
                        float _2877 = _2655;
                        float _2878 = _2656;
                        uint _2879 = _2666;
                        uint _2880;
                        vec4 _2905;
                        float _2906;
                        vec4 _2921;
                        vec3 _2933;
                        vec4 _2949;
                        vec4 _2965;
                        float _3012;
                        bool _3013;
                        for (;;)
                        {
                            uint _2890 = ((_2657 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2879));
                            _2880 = (_2879 + 4294967295u) & _2879;
                            uint _2892 = _2890 * 40u;
                            _2905 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2892)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 3u)).x));
                            _2906 = _2905.w;
                            uint _2908 = (_2890 * 40u) + 4u;
                            _2921 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 3u)).x));
                            uint _2923 = (_2890 * 40u) + 8u;
                            _2933 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2923)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 2u)).x));
                            uint _2936 = (_2890 * 40u) + 16u;
                            _2949 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2936)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 3u)).x));
                            uint _2952 = (_2890 * 40u) + 20u;
                            _2965 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2952)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 3u)).x));
                            uint _2968 = (_2890 * 40u) + 24u;
                            vec4 _2981 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2968)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 3u)).x));
                            uint _2987 = (_2890 * 40u) + 28u;
                            vec4 _3000 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 3u)).x));
                            _3012 = fma(_2227, _3000.z, fma(_2226, _3000.y, _3000.x * _2225)) + _3000.w;
                            _3013 = !((fma(_2227, _2981.z, fma(_2226, _2981.y, _2981.x * _2225)) + _2981.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3013)
                            {
                                float _3040 = _2905.x - _2225;
                                float _3041 = _2905.y - _2226;
                                float _3042 = _2905.z - _2227;
                                float _3043 = dot(vec3(_3040, _3041, _3042), vec3(_3040, _3041, _3042));
                                float _3046 = inversesqrt(_3043);
                                float _3047 = _3046 * _3040;
                                float _3048 = _3046 * _3041;
                                float _3049 = _3046 * _3042;
                                float _3053 = 1.0 - (_3043 / (_2906 * _2906));
                                float _4138 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                                float _3054 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
                                float _3058 = sqrt(_3043) * _2921.w;
                                float _3060 = 1.39999997615814208984375 / (_3058 + 1.39999997615814208984375);
                                float _3061 = _3060 * _3060;
                                float _3064 = ((1.0 - _3061) * dot(vec3(_3047, _3048, _3049), vec3(_426, _429, _432))) + _3061;
                                float _3067 = _3058 * _3058;
                                float _3071 = (fma(_2227, _2949.z, fma(_2226, _2949.y, _2949.x * _2225)) + _2949.w) / _3012;
                                float _3072 = (fma(_2227, _2965.z, fma(_2226, _2965.y, _2965.x * _2225)) + _2965.w) / _3012;
                                float _3076 = 1.0 - dot(vec2(_3071, _3072), vec2(_3071, _3072));
                                float _4154 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                                float _3077 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
                                float _3078 = _3077 * (((isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0))) * _3054) / ((_3067 * 0.699999988079071044921875) + 1.0));
                                float _3090 = exp2(log2(1.0 / ((_3067 * 3.5) + 5.0)) * 0.25);
                                float _3091 = 1.0 - _502;
                                float _3098 = sqrt(1.0 - ((1.0 - (_3091 * _3091)) * (1.0 - (_3090 * _3090))));
                                float _3099 = _3098 * _3098;
                                float _3100 = _3099 * _3099;
                                float _3101 = _3047 - _2517;
                                float _3102 = _3048 - _2518;
                                float _3103 = _3049 - _2519;
                                float _3107 = inversesqrt(dot(vec3(_3101, _3102, _3103), vec3(_3101, _3102, _3103)));
                                float _3111 = dot(vec3(_426, _429, _432), vec3((-0.0) - _2517, (-0.0) - _2518, (-0.0) - _2519));
                                float _4165 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                                float _3114 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
                                float _3115 = dot(vec3(_426, _429, _432), vec3(_3107 * _3101, _3107 * _3102, _3107 * _3103));
                                float _4176 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                                float _3118 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
                                float _3122 = ((_3118 * _3118) * (_3100 + (-1.0))) + 1.0;
                                float _3123 = _3060 * _3099;
                                float _3124 = _3123 * _3123;
                                float _3130 = ((1.0 - _3124) * dot(vec3(_426, _429, _432), vec3(_3047, _3048, _3049))) + _3124;
                                float _4187 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                                float _3131 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
                                float _3132 = 1.0 - _3099;
                                float _3142 = (0.5 / (((_3131 * ((_3114 * _3132) + _3099)) + 9.9999999392252902907785028219223e-09) + (((_3131 * _3132) + _3099) * _3114))) * _3131;
                                float _4198 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                                float _3152 = (_3077 * _3054) * (((_3100 * 3.1415927410125732421875) * (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) / ((_3122 * _3122) * ((_3067 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3078 * _2921.z;
                                frontier_phi_85_pred_1 = _3078 * _2921.y;
                                frontier_phi_85_pred_2 = _3078 * _2921.x;
                                frontier_phi_85_pred_3 = _3152 * _2933.z;
                                frontier_phi_85_pred_4 = _3152 * _2933.y;
                                frontier_phi_85_pred_5 = _3152 * _2933.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3161 = frontier_phi_85_pred;
                            _3160 = frontier_phi_85_pred_1;
                            _3159 = frontier_phi_85_pred_2;
                            _3158 = frontier_phi_85_pred_3;
                            _3157 = frontier_phi_85_pred_4;
                            _3156 = frontier_phi_85_pred_5;
                            _2863 = _3159 + _2876;
                            _2864 = _3160 + _2877;
                            _2865 = _3161 + _2878;
                            _2860 = _3156 + _2873;
                            _2861 = _3157 + _2874;
                            _2862 = _3158 + _2875;
                            if (_2880 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2873 = _2860;
                                _2874 = _2861;
                                _2875 = _2862;
                                _2876 = _2863;
                                _2877 = _2864;
                                _2878 = _2865;
                                _2879 = _2880;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2865;
                        frontier_phi_79_pred_1 = _2864;
                        frontier_phi_79_pred_2 = _2863;
                        frontier_phi_79_pred_3 = _2862;
                        frontier_phi_79_pred_4 = _2861;
                        frontier_phi_79_pred_5 = _2860;
                    }
                    _2502 = frontier_phi_79_pred;
                    _2500 = frontier_phi_79_pred_1;
                    _2498 = frontier_phi_79_pred_2;
                    _2496 = frontier_phi_79_pred_3;
                    _2494 = frontier_phi_79_pred_4;
                    _2492 = frontier_phi_79_pred_5;
                    uint _2658 = _2657 + 1u;
                    if (_2658 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2651 = _2492;
                        _2652 = _2494;
                        _2653 = _2496;
                        _2654 = _2498;
                        _2655 = _2500;
                        _2656 = _2502;
                        _2657 = _2658;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2498;
                frontier_phi_60_61_ladder_1 = _2502;
                frontier_phi_60_61_ladder_2 = _2500;
                frontier_phi_60_61_ladder_3 = _2496;
                frontier_phi_60_61_ladder_4 = _2494;
                frontier_phi_60_61_ladder_5 = _2492;
            }
            else
            {
                frontier_phi_60_61_ladder = _2377;
                frontier_phi_60_61_ladder_1 = _2381;
                frontier_phi_60_61_ladder_2 = _2379;
                frontier_phi_60_61_ladder_3 = _2375;
                frontier_phi_60_61_ladder_4 = _2373;
                frontier_phi_60_61_ladder_5 = _2371;
            }
            _2491 = frontier_phi_60_61_ladder_5;
            _2493 = frontier_phi_60_61_ladder_4;
            _2495 = frontier_phi_60_61_ladder_3;
            _2497 = frontier_phi_60_61_ladder;
            _2499 = frontier_phi_60_61_ladder_2;
            _2501 = frontier_phi_60_61_ladder_1;
        }
        float _2506 = isnan(1.0) ? _486 : (isnan(_486) ? 1.0 : min(_486, 1.0));
        _2283 = (_2506 * _2497) + _1717;
        _2285 = (_2506 * _2499) + _1719;
        _2287 = (_2506 * _2501) + _1721;
        _2289 = ((_2491 * _471) * _2506) + _2065;
        _2291 = ((_2493 * _473) * _2506) + _2067;
        _2293 = ((_2495 * _474) * _2506) + _2069;
    }
    else
    {
        _2283 = _1717;
        _2285 = _1719;
        _2287 = _1721;
        _2289 = _2065;
        _2291 = _2067;
        _2293 = _2069;
    }
    float _4214 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _4225 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _4236 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _2310 = ((isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_2283 + ((isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0))) * _486))) + ((_2289 + ((isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))) * _1328)) * cbPerFrame._m0[3u].x);
    float _2311 = ((isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_2285 + ((isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0))) * _486))) + ((_2291 + ((isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))) * _1328)) * cbPerFrame._m0[3u].x);
    float _2312 = ((isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_2287 + ((isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0))) * _486))) + ((_2293 + ((isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))) * _1328)) * cbPerFrame._m0[3u].x);
    uint _2313 = _445 + 6u;
    float _2321 = _405 / cbSceneParam._m0[86u].x;
    float _2322 = _406 / cbSceneParam._m0[86u].y;
    vec4 _2336 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2321, _2322, (log2((isnan(cbSceneParam._m0[77u].w) ? _325 : (isnan(_325) ? cbSceneParam._m0[77u].w : min(_325, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2338 = _2336.x;
    float _2339 = _2336.y;
    float _2340 = _2336.z;
    float _2341 = _2336.w;
    float _2433;
    float _2435;
    float _2437;
    float _2439;
    if (_325 > cbSceneParam._m0[78u].w)
    {
        float _2396 = isnan(_325) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _325 : min(cbSceneParam._m0[80u].w, _325));
        float _2397 = _2396 / _325;
        float _2408 = _2397 * _377;
        float _2409 = _378 * _2397;
        float _2410 = (-0.0) - _2409;
        float _2411 = _2397 * _379;
        float _2413 = (cbSceneParam._m0[77u].w * _2410) / _2396;
        float _2414 = _2413 + cbSceneParam._m0[79u].w;
        float _2415 = cbSceneParam._m0[79u].w - _2409;
        float _2421 = sqrt(((_2408 * _2408) + (_2409 * _2409)) + (_2411 * _2411));
        float _2424 = (1.0 - (cbSceneParam._m0[77u].w / _2396)) * _2421;
        float _2429 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2431 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2608;
        if (abs((_2410 - _2413) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2608 = ((((_2414 > 0.0) ? exp2(_2429 * _2414) : (2.0 - exp2(_2431 * _2414))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2424;
        }
        else
        {
            float _2552 = 1.0 / cbSceneParam._m0[80u].x;
            float _2553 = isnan(_2415) ? _2414 : (isnan(_2414) ? _2415 : max(_2414, _2415));
            float _2554 = isnan(_2415) ? _2414 : (isnan(_2414) ? _2415 : min(_2414, _2415));
            float _2563 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : min(_2553, 0.0));
            float _2564 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : min(_2554, 0.0));
            _2608 = ((abs(_2421 / _2410) * cbSceneParam._m0[80u].y) * ((((_2563 - _2564) * 2.0) - ((exp2(_2429 * (isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0)))) - exp2(_2429 * (isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0))))) * _2552)) - ((exp2(_2431 * _2563) - exp2(_2431 * _2564)) * _2552))) + (_2424 * cbSceneParam._m0[80u].z);
        }
        vec4 _2610 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2321, _2322, 1.0), 0.0);
        float _2619 = exp2((_2608 * (-1.44269502162933349609375)) * (1.0 - _2610.w));
        float _2620 = log2(_2619);
        float _2636 = log2(_2341);
        _2433 = (exp2(_2636 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2620 * cbSceneParam._m0[78u].x)) * _2610.x) / cbSceneParam._m0[78u].x)) + _2338;
        _2435 = (exp2(_2636 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2620 * cbSceneParam._m0[78u].y)) * _2610.y) / cbSceneParam._m0[78u].y)) + _2339;
        _2437 = (exp2(_2636 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2620 * cbSceneParam._m0[78u].z)) * _2610.z) / cbSceneParam._m0[78u].z)) + _2340;
        _2439 = _2619 * _2341;
    }
    else
    {
        _2433 = _2338;
        _2435 = _2339;
        _2437 = _2340;
        _2439 = _2341;
    }
    bool _2646;
    vec4 _2449;
    vec4 _2471;
    float _2473;
    float _2477;
    float _2478;
    float _2479;
    float _2480;
    bool _2490;
    for (;;)
    {
        _2449 = cbMatDynParam._m0[0u];
        float _2451 = roundEven(_2449.y);
        bool _2452 = _2451 == 3.0;
        float _2453 = log2(_2439);
        float _2460 = exp2(_2453 * cbSceneParam._m0[78u].x) * _2310;
        float _2461 = exp2(_2453 * cbSceneParam._m0[78u].y) * _2311;
        float _2462 = exp2(_2453 * cbSceneParam._m0[78u].z) * _2312;
        float _2469 = _393 + (-0.5);
        _2471 = cbMtdParam._m0[1u];
        _2473 = _2471.y * _2469;
        float _2476 = (_2451 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2477 = _2476 * (_2452 ? _2460 : (_2460 + (cbSceneParam._m0[72u].w * _2433)));
        _2478 = _2476 * (_2452 ? _2461 : (_2461 + (cbSceneParam._m0[72u].w * _2435)));
        _2479 = _2476 * (_2452 ? _2462 : (_2462 + (cbSceneParam._m0[72u].w * _2437)));
        _2480 = _2469 * 0.999000012874603271484375;
        _2490 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2490)
        {
            if ((cbInstanceData._m0[_445 + 7u].x + _2480) < 0.5)
            {
                _2646 = true;
                break;
            }
        }
        uint _2587 = _447 + uint(_2449.w);
        if ((cbInstanceData._m0[_2587].w < 1.0) && ((cbInstanceData._m0[_2587].w + _2480) < 0.5))
        {
            _2646 = true;
            break;
        }
        if ((_2473 + 1.0) < _2471.x)
        {
            _2646 = true;
            break;
        }
        _2646 = false;
        break;
    }
    float _2851;
    if (_2646)
    {
        discard_state = true;
        _2851 = 0.0;
    }
    else
    {
        _2851 = cbInstanceData._m0[_2313].w;
    }
    SV_Target.x = _2477;
    SV_Target.y = _2478;
    SV_Target.z = _2479;
    SV_Target.w = _2851;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2313].w;
    discard_exit();
}


