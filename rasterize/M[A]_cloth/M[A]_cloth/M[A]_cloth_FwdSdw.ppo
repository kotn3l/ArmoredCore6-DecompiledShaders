#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _704;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _166 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _167 = _166 * NORMAL.x;
    float _168 = _166 * NORMAL.y;
    float _169 = _166 * NORMAL.z;
    float _174;
    float _175;
    float _176;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _174 = (-0.0) - _167;
        _175 = (-0.0) - _168;
        _176 = (-0.0) - _169;
    }
    else
    {
        _174 = _167;
        _175 = _168;
        _176 = _169;
    }
    vec4 _190 = texture(sampler2D(M_A_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _193 = _190.x;
    float _194 = _190.y;
    float _195 = _190.z;
    float _197 = _190.w * TEXCOORD_1.z;
    float _201 = inversesqrt(dot(vec3(_174, _175, _176), vec3(_174, _175, _176)));
    float _202 = _201 * _174;
    float _203 = _201 * _175;
    float _204 = _201 * _176;
    float _3100 = isnan(0.0) ? _197 : (isnan(_197) ? 0.0 : max(_197, 0.0));
    float _206 = isnan(1.0) ? _3100 : (isnan(_3100) ? 1.0 : min(_3100, 1.0));
    float _3111 = isnan(0.0) ? _193 : (isnan(_193) ? 0.0 : max(_193, 0.0));
    float _3122 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _3133 = isnan(0.0) ? _195 : (isnan(_195) ? 0.0 : max(_195, 0.0));
    float _225 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _268 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _278 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _268);
    float _279 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _268);
    float _280 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _268);
    float _284 = inversesqrt(dot(vec3(_278, _279, _280), vec3(_278, _279, _280)));
    float _285 = _278 * _284;
    float _286 = _279 * _284;
    float _287 = _280 * _284;
    float _293 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _294 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _315 = fma(_204, cbSceneParam._m0[5u].z, fma(_203, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _202));
    float _318 = fma(_204, cbSceneParam._m0[6u].z, fma(_203, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _202));
    float _321 = fma(_204, cbSceneParam._m0[7u].z, fma(_203, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _202));
    uint _334 = uint(roundEven(NORMAL.w)) * 13u;
    uint _337 = (_334 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _343 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3111 : (isnan(_3111) ? 1.0 : min(_3111, 1.0)))) * cbInstanceData._m0[_337].x;
    float _344 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3122 : (isnan(_3122) ? 1.0 : min(_3122, 1.0)))) * cbInstanceData._m0[_337].y;
    float _345 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3133 : (isnan(_3133) ? 1.0 : min(_3133, 1.0)))) * cbInstanceData._m0[_337].z;
    float _3144 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _346 = isnan(1.0) ? _3144 : (isnan(_3144) ? 1.0 : min(_3144, 1.0));
    float _3155 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _347 = isnan(1.0) ? _3155 : (isnan(_3155) ? 1.0 : min(_3155, 1.0));
    float _3166 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _348 = isnan(1.0) ? _3166 : (isnan(_3166) ? 1.0 : min(_3166, 1.0));
    vec4 _357 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _293, cbSceneParam._m0[86u].y * _294));
    float _360 = _357.x * TEXCOORD_1.w;
    float _361 = dot(vec3(_202, _203, _204), vec3(_285, _286, _287));
    float _364 = _361 * 2.0;
    float _369 = (_364 * _202) - _285;
    float _370 = (_364 * _203) - _286;
    float _371 = (_364 * _204) - _287;
    float _393 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _397 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _401 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _703;
    float _705;
    float _706;
    float _707;
    float _708;
    float _709;
    float _710;
    float _711;
    float _712;
    float _713;
    float _714;
    float _715;
    float _716;
    float _717;
    float _718;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _428 = fma(_401, cbModelParam._m0[26u].z, fma(_397, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _393));
        float _432 = fma(_401, cbModelParam._m0[27u].z, fma(_397, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _393));
        float _436 = fma(_401, cbModelParam._m0[28u].z, fma(_397, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _393));
        float _461 = _393 + _202;
        float _462 = _397 + _203;
        float _463 = _401 + _204;
        float _473 = fma(_463, cbModelParam._m0[26u].z, fma(_462, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _461)) - _428;
        float _474 = fma(_463, cbModelParam._m0[27u].z, fma(_462, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _461)) - _432;
        float _475 = fma(_463, cbModelParam._m0[28u].z, fma(_462, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _461)) - _436;
        float _479 = inversesqrt(dot(vec3(_473, _474, _475), vec3(_473, _474, _475)));
        float _492 = ((_479 * _473) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_428 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _493 = ((_479 * _474) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_432 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _494 = ((_479 * _475) / cbModelParam._m0[34u].z) + ((((((_436 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _497 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_492, _493, _494), 0.0);
        vec4 _504 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_492, _493, _494), 0.0);
        vec4 _511 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_492, _493, _494), 0.0);
        vec4 _518 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_492, _493, _494), 0.0);
        float _531 = exp2((_497.w + (-0.5)) * 20.0) * 2.0;
        float _532 = _531 * (_497.x + (-0.5));
        float _533 = _531 * (_497.y + (-0.5));
        float _534 = _531 * (_497.z + (-0.5));
        float _541 = exp2((_504.w + (-0.5)) * 20.0) * 2.0;
        float _542 = _541 * (_504.x + (-0.5));
        float _543 = _541 * (_504.y + (-0.5));
        float _544 = _541 * (_504.z + (-0.5));
        float _551 = exp2((_511.w + (-0.5)) * 20.0) * 2.0;
        float _552 = _551 * (_511.x + (-0.5));
        float _553 = _551 * (_511.y + (-0.5));
        float _554 = _551 * (_511.z + (-0.5));
        float _561 = exp2((_518.w + (-0.5)) * 20.0) * 2.0;
        float _562 = _561 * (_518.x + (-0.5));
        float _563 = _561 * (_518.y + (-0.5));
        float _564 = _561 * (_518.z + (-0.5));
        float _565 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
        float _566 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
        float _567 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
        float _568 = _532 * 0.5;
        float _569 = _542 * 0.5;
        float _570 = _552 * 0.5;
        float _571 = dot(vec3(_568, _569, _570), vec3(_568, _569, _570));
        float _576 = (_571 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_571);
        float _585 = (dot(vec3(_202, _203, _204), vec3(_576 * _568, _576 * _569, _576 * _570)) + 1.0) * 0.5;
        float _3192 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
        float _595 = sqrt(((_569 * _569) + (_568 * _568)) + (_570 * _570)) / (_565 + 9.9999997473787516355514526367188e-06);
        float _3203 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
        float _596 = isnan(1.0) ? _3203 : (isnan(_3203) ? 1.0 : min(_3203, 1.0));
        float _597 = _596 * 2.0;
        float _601 = (1.0 - _596) / (_596 + 1.0);
        float _3214 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
        float _602 = isnan(1.0) ? _3214 : (isnan(_3214) ? 1.0 : min(_3214, 1.0));
        float _611 = ((((1.0 - _602) * (_597 + 2.0)) * exp2(log2(isnan(1.0) ? _3192 : (isnan(_3192) ? 1.0 : min(_3192, 1.0))) * (_597 + 1.0))) + _602) * _565;
        float _612 = _533 * 0.5;
        float _613 = _543 * 0.5;
        float _614 = _553 * 0.5;
        float _615 = dot(vec3(_612, _613, _614), vec3(_612, _613, _614));
        float _620 = (_615 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_615);
        float _628 = (dot(vec3(_202, _203, _204), vec3(_620 * _612, _620 * _613, _620 * _614)) + 1.0) * 0.5;
        float _3225 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
        float _637 = sqrt(((_613 * _613) + (_612 * _612)) + (_614 * _614)) / (_566 + 9.9999997473787516355514526367188e-06);
        float _3236 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
        float _638 = isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0));
        float _639 = _638 * 2.0;
        float _643 = (1.0 - _638) / (_638 + 1.0);
        float _3247 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
        float _644 = isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0));
        float _653 = ((((1.0 - _644) * (_639 + 2.0)) * exp2(log2(isnan(1.0) ? _3225 : (isnan(_3225) ? 1.0 : min(_3225, 1.0))) * (_639 + 1.0))) + _644) * _566;
        float _654 = _534 * 0.5;
        float _655 = _544 * 0.5;
        float _656 = _554 * 0.5;
        float _657 = dot(vec3(_654, _655, _656), vec3(_654, _655, _656));
        float _662 = (_657 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_657);
        float _670 = (dot(vec3(_202, _203, _204), vec3(_662 * _654, _662 * _655, _662 * _656)) + 1.0) * 0.5;
        float _3258 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        float _679 = sqrt(((_655 * _655) + (_654 * _654)) + (_656 * _656)) / (_567 + 9.9999997473787516355514526367188e-06);
        float _3269 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
        float _680 = isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0));
        float _681 = _680 * 2.0;
        float _685 = (1.0 - _680) / (_680 + 1.0);
        float _3280 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        float _686 = isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0));
        float _695 = ((((1.0 - _686) * (_681 + 2.0)) * exp2(log2(isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0))) * (_681 + 1.0))) + _686) * _567;
        _703 = _534;
        _705 = _533;
        _706 = _532;
        _707 = _544;
        _708 = _543;
        _709 = _542;
        _710 = _554;
        _711 = _553;
        _712 = _552;
        _713 = _567;
        _714 = _566;
        _715 = _565;
        _716 = cbModelParam._m0[36u].z * (isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0)));
        _717 = cbModelParam._m0[36u].z * (isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0)));
        _718 = cbModelParam._m0[36u].z * (isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0)));
    }
    else
    {
        _703 = _704;
        _705 = _704;
        _706 = _704;
        _707 = _704;
        _708 = _704;
        _709 = _704;
        _710 = _704;
        _711 = _704;
        _712 = _704;
        _713 = _704;
        _714 = _704;
        _715 = _704;
        _716 = 0.0;
        _717 = 0.0;
        _718 = 0.0;
    }
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _744 = fma(_401, cbModelParam._m0[30u].z, fma(_397, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _393));
        float _748 = fma(_401, cbModelParam._m0[31u].z, fma(_397, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _393));
        float _752 = fma(_401, cbModelParam._m0[32u].z, fma(_397, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _393));
        float _775 = _393 + _202;
        float _776 = _397 + _203;
        float _777 = _401 + _204;
        float _787 = fma(_777, cbModelParam._m0[30u].z, fma(_776, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _775)) - _744;
        float _788 = fma(_777, cbModelParam._m0[31u].z, fma(_776, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _775)) - _748;
        float _789 = fma(_777, cbModelParam._m0[32u].z, fma(_776, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _775)) - _752;
        float _793 = inversesqrt(dot(vec3(_787, _788, _789), vec3(_787, _788, _789)));
        float _806 = ((_793 * _787) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_744 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _807 = ((_793 * _788) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_748 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _808 = ((_793 * _789) / cbModelParam._m0[35u].z) + ((((((_752 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _810 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _817 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _824 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _831 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        float _843 = exp2((_810.w + (-0.5)) * 20.0) * 2.0;
        float _844 = _843 * (_810.x + (-0.5));
        float _845 = _843 * (_810.y + (-0.5));
        float _846 = _843 * (_810.z + (-0.5));
        float _853 = exp2((_817.w + (-0.5)) * 20.0) * 2.0;
        float _854 = _853 * (_817.x + (-0.5));
        float _855 = _853 * (_817.y + (-0.5));
        float _856 = _853 * (_817.z + (-0.5));
        float _863 = exp2((_824.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_824.x + (-0.5));
        float _865 = _863 * (_824.y + (-0.5));
        float _866 = _863 * (_824.z + (-0.5));
        float _873 = exp2((_831.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_831.x + (-0.5));
        float _875 = _873 * (_831.y + (-0.5));
        float _876 = _873 * (_831.z + (-0.5));
        float _877 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _878 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _879 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _880 = _844 * 0.5;
        float _881 = _854 * 0.5;
        float _882 = _864 * 0.5;
        float _883 = dot(vec3(_880, _881, _882), vec3(_880, _881, _882));
        float _888 = (_883 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_883);
        float _896 = (dot(vec3(_202, _203, _204), vec3(_888 * _880, _888 * _881, _888 * _882)) + 1.0) * 0.5;
        float _3321 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _905 = sqrt(((_881 * _881) + (_880 * _880)) + (_882 * _882)) / (_877 + 9.9999997473787516355514526367188e-06);
        float _3332 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0));
        float _907 = _906 * 2.0;
        float _911 = (1.0 - _906) / (_906 + 1.0);
        float _3343 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0));
        float _921 = ((((1.0 - _912) * (_907 + 2.0)) * exp2(log2(isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0))) * (_907 + 1.0))) + _912) * _877;
        float _922 = _845 * 0.5;
        float _923 = _855 * 0.5;
        float _924 = _865 * 0.5;
        float _925 = dot(vec3(_922, _923, _924), vec3(_922, _923, _924));
        float _930 = (_925 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_925);
        float _938 = (dot(vec3(_202, _203, _204), vec3(_930 * _922, _930 * _923, _930 * _924)) + 1.0) * 0.5;
        float _3354 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _947 = sqrt(((_923 * _923) + (_922 * _922)) + (_924 * _924)) / (_878 + 9.9999997473787516355514526367188e-06);
        float _3365 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0));
        float _949 = _948 * 2.0;
        float _953 = (1.0 - _948) / (_948 + 1.0);
        float _3376 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0));
        float _963 = ((((1.0 - _954) * (_949 + 2.0)) * exp2(log2(isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0))) * (_949 + 1.0))) + _954) * _878;
        float _964 = _846 * 0.5;
        float _965 = _856 * 0.5;
        float _966 = _866 * 0.5;
        float _967 = dot(vec3(_964, _965, _966), vec3(_964, _965, _966));
        float _972 = (_967 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_967);
        float _980 = (dot(vec3(_202, _203, _204), vec3(_972 * _964, _972 * _965, _972 * _966)) + 1.0) * 0.5;
        float _3387 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _989 = sqrt(((_965 * _965) + (_964 * _964)) + (_966 * _966)) / (_879 + 9.9999997473787516355514526367188e-06);
        float _3398 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
        float _991 = _990 * 2.0;
        float _995 = (1.0 - _990) / (_990 + 1.0);
        float _3409 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
        float _1005 = ((((1.0 - _996) * (_991 + 2.0)) * exp2(log2(isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0))) * (_991 + 1.0))) + _996) * _879;
        _1013 = _846;
        _1014 = _845;
        _1015 = _844;
        _1016 = _856;
        _1017 = _855;
        _1018 = _854;
        _1019 = _866;
        _1020 = _865;
        _1021 = _864;
        _1022 = _879;
        _1023 = _878;
        _1024 = _877;
        _1025 = cbModelParam._m0[36u].w * (isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0)));
        _1026 = cbModelParam._m0[36u].w * (isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0)));
        _1027 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0)));
    }
    else
    {
        _1013 = _704;
        _1014 = _704;
        _1015 = _704;
        _1016 = _704;
        _1017 = _704;
        _1018 = _704;
        _1019 = _704;
        _1020 = _704;
        _1021 = _704;
        _1022 = _704;
        _1023 = _704;
        _1024 = _704;
        _1025 = 0.0;
        _1026 = 0.0;
        _1027 = 0.0;
    }
    float _1037 = (cbModelParam._m0[1u].x * (_1025 - _716)) + _716;
    float _1038 = (cbModelParam._m0[1u].x * (_1026 - _717)) + _717;
    float _1039 = (cbModelParam._m0[1u].x * (_1027 - _718)) + _718;
    float _1060 = fma(_1039, cbSceneParam._m0[89u].z, fma(_1038, cbSceneParam._m0[89u].y, _1037 * cbSceneParam._m0[89u].x));
    float _1063 = fma(_1039, cbSceneParam._m0[90u].z, fma(_1038, cbSceneParam._m0[90u].y, _1037 * cbSceneParam._m0[90u].x));
    float _1066 = fma(_1039, cbSceneParam._m0[91u].z, fma(_1038, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1037));
    float _1081 = _369 * 0.5;
    float _1082 = _370 * 0.5;
    float _1083 = _371 * 0.5;
    float _1084 = dot(vec4(_1081, _1082, _1083, 1.0), vec4(_1015, _1018, _1021, _1024));
    float _1087 = dot(vec4(_1081, _1082, _1083, 1.0), vec4(_1014, _1017, _1020, _1023));
    float _1090 = dot(vec4(_1081, _1082, _1083, 1.0), vec4(_1013, _1016, _1019, _1022));
    float _1124;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1097 = dot(vec4(_1081, _1082, _1083, 1.0), vec4(_703, _707, _710, _713));
        float _1101 = dot(vec4(_1081, _1082, _1083, 1.0), vec4(_705, _708, _711, _714));
        float _1105 = dot(vec4(_1081, _1082, _1083, 1.0), vec4(_706, _709, _712, _715));
        float _1112 = dot(vec4(cbModelParam._m0[39u]), vec4(_1081, _1082, _1083, 1.0));
        _1124 = dot(vec3(isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)), isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)), isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1112) ? 0.0 : (isnan(0.0) ? _1112 : max(0.0, _1112))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1124 = 1.0;
    }
    float _1135;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1126 = dot(vec4(cbModelParam._m0[40u]), vec4(_1081, _1082, _1083, 1.0));
        _1135 = dot(vec3(isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0)), isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0)), isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1126) ? 0.0 : (isnan(0.0) ? _1126 : max(0.0, _1126))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1135 = 1.0;
    }
    float _1139 = (_1135 * cbModelParam._m0[1u].x) + (_1124 * (1.0 - cbModelParam._m0[1u].x));
    float _1148 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1230;
    float _1232;
    float _1234;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1197 = fma(_401, cbModelParam._m0[13u].z, fma(_397, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _393)) + cbModelParam._m0[13u].w;
        float _1201 = fma(_401, cbModelParam._m0[14u].z, fma(_397, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _393)) + cbModelParam._m0[14u].w;
        float _1205 = fma(_401, cbModelParam._m0[15u].z, fma(_397, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _393)) + cbModelParam._m0[15u].w;
        float _1208 = fma(_371, cbModelParam._m0[13u].z, fma(_370, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _369));
        float _1211 = fma(_371, cbModelParam._m0[14u].z, fma(_370, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _369));
        float _1214 = fma(_371, cbModelParam._m0[15u].z, fma(_370, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _369));
        float _1240;
        if (_1208 > 0.0)
        {
            _1240 = abs((1.0 - _1197) / _1208);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1208 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1197 + 1.0) / _1208);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1240 = frontier_phi_16_14_ladder;
        }
        float _1415;
        if (_1211 > 0.0)
        {
            _1415 = abs((1.0 - _1201) / _1211);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1211 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1201 + 1.0) / _1211);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1415 = frontier_phi_25_21_ladder;
        }
        float _1712;
        if (_1214 > 0.0)
        {
            _1712 = abs((1.0 - _1205) / _1214);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1214 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1205 + 1.0) / _1214);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1712 = frontier_phi_37_32_ladder;
        }
        float _1714 = isnan(_1415) ? _1240 : (isnan(_1240) ? _1415 : min(_1240, _1415));
        float _1715 = isnan(_1712) ? _1714 : (isnan(_1714) ? _1712 : min(_1714, _1712));
        float _1719 = (_1715 * _1208) + _1197;
        float _1720 = (_1715 * _1211) + _1201;
        float _1721 = (_1715 * _1214) + _1205;
        float _1722 = _1715 * 9.9999997473787516355514526367188e-05;
        float _1724 = (-1.0) - _1722;
        float _1726 = _1722 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1721 > _1726) || ((_1721 < _1724) || ((_1720 > _1726) || ((_1720 < _1724) || ((_1719 < _1724) || (_1719 > _1726))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1866 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1721, cbModelParam._m0[9u].z, fma(_1720, cbModelParam._m0[9u].y, _1719 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1721, cbModelParam._m0[10u].z, fma(_1720, cbModelParam._m0[10u].y, _1719 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1721, cbModelParam._m0[11u].z, fma(_1720, cbModelParam._m0[11u].y, _1719 * cbModelParam._m0[11u].x))), _1148);
            frontier_phi_15_37_ladder = _1866.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1866.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1866.z * cbModelParam._m0[1u].y;
        }
        _1230 = frontier_phi_15_37_ladder_1;
        _1232 = frontier_phi_15_37_ladder;
        _1234 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1218 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_369, _370, _371), _1148);
        _1230 = _1218.x * cbModelParam._m0[1u].y;
        _1232 = _1218.y * cbModelParam._m0[1u].y;
        _1234 = _1218.z * cbModelParam._m0[1u].y;
    }
    float _1237 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1330;
    float _1332;
    float _1334;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1294 = fma(_401, cbModelParam._m0[21u].z, fma(_397, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _393)) + cbModelParam._m0[21u].w;
        float _1298 = fma(_401, cbModelParam._m0[22u].z, fma(_397, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _393)) + cbModelParam._m0[22u].w;
        float _1302 = fma(_401, cbModelParam._m0[23u].z, fma(_397, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _393)) + cbModelParam._m0[23u].w;
        float _1305 = fma(_371, cbModelParam._m0[21u].z, fma(_370, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _369));
        float _1308 = fma(_371, cbModelParam._m0[22u].z, fma(_370, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _369));
        float _1311 = fma(_371, cbModelParam._m0[23u].z, fma(_370, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _369));
        float _1420;
        if (_1305 > 0.0)
        {
            _1420 = abs((1.0 - _1294) / _1305);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1305 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1294 + 1.0) / _1305);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1420 = frontier_phi_27_23_ladder;
        }
        float _1739;
        if (_1308 > 0.0)
        {
            _1739 = abs((1.0 - _1298) / _1308);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1308 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1298 + 1.0) / _1308);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1739 = frontier_phi_39_34_ladder;
        }
        float _2012;
        if (_1311 > 0.0)
        {
            _2012 = abs((1.0 - _1302) / _1311);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1311 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1302 + 1.0) / _1311);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2012 = frontier_phi_49_46_ladder;
        }
        float _2014 = isnan(_1739) ? _1420 : (isnan(_1420) ? _1739 : min(_1420, _1739));
        float _2015 = isnan(_2012) ? _2014 : (isnan(_2014) ? _2012 : min(_2014, _2012));
        float _2019 = (_2015 * _1305) + _1294;
        float _2020 = (_2015 * _1308) + _1298;
        float _2021 = (_2015 * _1311) + _1302;
        float _2022 = _2015 * 9.9999997473787516355514526367188e-05;
        float _2023 = (-1.0) - _2022;
        float _2025 = _2022 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2021 > _2025) || ((_2021 < _2023) || ((_2020 > _2025) || ((_2020 < _2023) || ((_2019 < _2023) || (_2019 > _2025))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2112 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2021, cbModelParam._m0[17u].z, fma(_2020, cbModelParam._m0[17u].y, _2019 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2021, cbModelParam._m0[18u].z, fma(_2020, cbModelParam._m0[18u].y, _2019 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2021, cbModelParam._m0[19u].z, fma(_2020, cbModelParam._m0[19u].y, _2019 * cbModelParam._m0[19u].x))), _1237);
            frontier_phi_24_49_ladder = _2112.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2112.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2112.x * cbModelParam._m0[1u].z;
        }
        _1330 = frontier_phi_24_49_ladder_2;
        _1332 = frontier_phi_24_49_ladder_1;
        _1334 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1314 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_369, _370, _371), _1237);
        _1330 = _1314.x * cbModelParam._m0[1u].z;
        _1332 = _1314.y * cbModelParam._m0[1u].z;
        _1334 = _1314.z * cbModelParam._m0[1u].z;
    }
    float _1346 = _360 * 0.01200000010430812835693359375;
    float _1348 = _1346 * ((cbModelParam._m0[1u].w * (_1330 - _1230)) + _1230);
    float _1349 = _1346 * ((cbModelParam._m0[1u].w * (_1332 - _1232)) + _1232);
    float _1350 = _1346 * ((cbModelParam._m0[1u].w * (_1334 - _1234)) + _1234);
    float _1353 = fma(_1350, cbSceneParam._m0[89u].z, fma(_1349, cbSceneParam._m0[89u].y, _1348 * cbSceneParam._m0[89u].x));
    float _1356 = fma(_1350, cbSceneParam._m0[90u].z, fma(_1349, cbSceneParam._m0[90u].y, _1348 * cbSceneParam._m0[90u].x));
    float _1359 = fma(_1350, cbSceneParam._m0[91u].z, fma(_1349, cbSceneParam._m0[91u].y, _1348 * cbSceneParam._m0[91u].x));
    float _1394 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1398 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1402 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1406 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1407 = _1394 / _1406;
    float _1408 = _1398 / _1406;
    float _1409 = _1402 / _1406;
    float _1556;
    float _1557;
    float _1558;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1436 = ((uint(_1409 > cbSceneParam._m0[59u].y) + uint(_1409 > cbSceneParam._m0[59u].x)) + uint(_1409 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1437 = _1436 + 43u;
        uint _1445 = _1436 + 44u;
        uint _1453 = _1436 + 45u;
        uint _1461 = _1436 + 46u;
        float _1472 = fma(_1406, cbSceneParam._m0[_1437].w, fma(_1402, cbSceneParam._m0[_1437].z, fma(_1398, cbSceneParam._m0[_1437].y, _1394 * cbSceneParam._m0[_1437].x)));
        float _1476 = fma(_1406, cbSceneParam._m0[_1445].w, fma(_1402, cbSceneParam._m0[_1445].z, fma(_1398, cbSceneParam._m0[_1445].y, _1394 * cbSceneParam._m0[_1445].x)));
        float _1484 = fma(_1406, cbSceneParam._m0[_1461].w, fma(_1402, cbSceneParam._m0[_1461].z, fma(_1398, cbSceneParam._m0[_1461].y, _1394 * cbSceneParam._m0[_1461].x)));
        float _1489 = cbSceneParam._m0[33u].z * _1484;
        float _1491 = cbSceneParam._m0[33u].w * _1484;
        float _1494 = fma(_1406, cbSceneParam._m0[_1453].w, fma(_1402, cbSceneParam._m0[_1453].z, fma(_1398, cbSceneParam._m0[_1453].y, _1394 * cbSceneParam._m0[_1453].x))) / _1484;
        float _1542 = (cbSceneParam._m0[33u].x - sqrt(((_1408 * _1408) + (_1407 * _1407)) + (_1409 * _1409))) * cbSceneParam._m0[33u].y;
        float _3535 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1549 = (isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1489 + _1472) / _1484, (_1491 + _1476) / _1484), _1494), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1491 + _1472) / _1484, (_1476 - _1489) / _1484), _1494), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1472 - _1489) / _1484, (_1476 - _1491) / _1484), _1494), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1472 - _1491) / _1484, (_1489 + _1476) / _1484), _1494), 0.0)).x), vec4(0.25)));
        _1556 = 1.0 - (_1549 * cbSceneParam._m0[34u].x);
        _1557 = 1.0 - (_1549 * cbSceneParam._m0[34u].y);
        _1558 = 1.0 - (_1549 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1556 = 1.0;
        _1557 = 1.0;
        _1558 = 1.0;
    }
    float _1622;
    float _1624;
    float _1626;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1610 = fma(_1406, cbSceneParam._m0[63u].w, fma(_1402, cbSceneParam._m0[63u].z, fma(_1398, cbSceneParam._m0[63u].y, _1394 * cbSceneParam._m0[63u].x)));
        float _1611 = fma(_1406, cbSceneParam._m0[60u].w, fma(_1402, cbSceneParam._m0[60u].z, fma(_1398, cbSceneParam._m0[60u].y, _1394 * cbSceneParam._m0[60u].x))) / _1610;
        float _1612 = fma(_1406, cbSceneParam._m0[61u].w, fma(_1402, cbSceneParam._m0[61u].z, fma(_1398, cbSceneParam._m0[61u].y, _1394 * cbSceneParam._m0[61u].x))) / _1610;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1611 >= cbSceneParam._m0[64u].x) && (_1612 >= cbSceneParam._m0[64u].y)) && (_1611 <= cbSceneParam._m0[64u].z)) && (_1612 <= cbSceneParam._m0[64u].w))
        {
            float _1752 = fma(_1406, cbSceneParam._m0[62u].w, fma(_1402, cbSceneParam._m0[62u].z, fma(_1398, cbSceneParam._m0[62u].y, _1394 * cbSceneParam._m0[62u].x))) / _1610;
            float _1756 = isnan(cbSceneParam._m0[41u].w) ? _1752 : (isnan(_1752) ? cbSceneParam._m0[41u].w : max(_1752, cbSceneParam._m0[41u].w));
            float _1799 = (cbSceneParam._m0[33u].x - sqrt(((_1408 * _1408) + (_1407 * _1407)) + (_1409 * _1409))) * cbSceneParam._m0[33u].y;
            float _3551 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
            float _1806 = (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1611, cbSceneParam._m0[33u].w + _1612), _1756), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1611, _1612 - cbSceneParam._m0[33u].z), _1756), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1611 - cbSceneParam._m0[33u].z, _1612 - cbSceneParam._m0[33u].w), _1756), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1611 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1612), _1756), 0.0)).x), vec4(0.25)));
            float _1810 = 1.0 - (_1806 * cbSceneParam._m0[34u].x);
            float _1811 = 1.0 - (_1806 * cbSceneParam._m0[34u].y);
            float _1812 = 1.0 - (_1806 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1811) ? _1557 : (isnan(_1557) ? _1811 : min(_1557, _1811));
            frontier_phi_36_35_ladder_1 = isnan(_1812) ? _1558 : (isnan(_1558) ? _1812 : min(_1558, _1812));
            frontier_phi_36_35_ladder_2 = isnan(_1810) ? _1556 : (isnan(_1556) ? _1810 : min(_1556, _1810));
        }
        else
        {
            frontier_phi_36_35_ladder = _1557;
            frontier_phi_36_35_ladder_1 = _1558;
            frontier_phi_36_35_ladder_2 = _1556;
        }
        _1622 = frontier_phi_36_35_ladder_2;
        _1624 = frontier_phi_36_35_ladder;
        _1626 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1622 = _1556;
        _1624 = _1557;
        _1626 = _1558;
    }
    uvec4 _1631 = floatBitsToUint(cbInstanceData._m0[_334 + 5u]);
    uint _1633 = _1631.x * 14u;
    uint _1634 = _1633 + 13u;
    float _1641 = _360 + (-1.0);
    float _1647 = (cbLight._m0[_1634].x * _1641) + 1.0;
    float _1648 = (cbLight._m0[_1634].y * _1641) + 1.0;
    float _1649 = (cbLight._m0[_1634].z * _1641) + 1.0;
    float _1650 = (cbLight._m0[_1634].w * _1641) + 1.0;
    uint _1651 = _1633 + 5u;
    float _1657 = isnan(1.0) ? _1648 : (isnan(_1648) ? 1.0 : min(_1648, 1.0));
    uint _1661 = _1633 + 4u;
    float _1671 = isnan(1.0) ? _1647 : (isnan(_1647) ? 1.0 : min(_1647, 1.0));
    uint _1675 = _1633 | 1u;
    float _1686 = dot(vec3(cbLight._m0[_1633].xyz), vec3(_202, _203, _204));
    float _1689 = dot(vec3(cbLight._m0[_1675].xyz), vec3(_202, _203, _204));
    float _3587 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
    float _3598 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
    float _1694 = (isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) * 0.3183098733425140380859375;
    float _1696 = (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * 0.3183098733425140380859375;
    float _1703 = ((cbLight._m0[_1651].x * _1657) * _1696) + (((cbLight._m0[_1661].x * _1622) * _1671) * _1694);
    float _1704 = ((_1657 * cbLight._m0[_1651].y) * _1696) + (((cbLight._m0[_1661].y * _1624) * _1671) * _1694);
    float _1705 = ((_1657 * cbLight._m0[_1651].z) * _1696) + (((cbLight._m0[_1661].z * _1626) * _1671) * _1694);
    uvec4 _1709 = floatBitsToUint(cbLight._m0[_1633 + 12u]);
    bool _1711 = _1709.x == 0u;
    float _1813;
    float _1815;
    float _1817;
    if (_1711)
    {
        _1813 = _1703;
        _1815 = _1704;
        _1817 = _1705;
    }
    else
    {
        uint _1821 = _1633 + 6u;
        float _1837 = (dot(vec3(cbLight._m0[_1633 + 2u].xyz), vec3(_202, _203, _204)) * 0.5) + 0.5;
        float _1838 = _1837 * _1837;
        float _3609 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1839 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _1840 = isnan(1.0) ? _1649 : (isnan(_1649) ? 1.0 : min(_1649, 1.0));
        _1813 = (((cbLight._m0[_1821].x * 0.3183098733425140380859375) * _1839) * _1840) + _1703;
        _1815 = (((cbLight._m0[_1821].y * 0.3183098733425140380859375) * _1839) * _1840) + _1704;
        _1817 = (((cbLight._m0[_1821].z * 0.3183098733425140380859375) * _1839) * _1840) + _1705;
    }
    bool _1820 = _1709.y == 0u;
    float _1875;
    float _1877;
    float _1879;
    if (_1820)
    {
        _1875 = _1813;
        _1877 = _1815;
        _1879 = _1817;
    }
    else
    {
        uint _1983 = _1633 + 7u;
        float _1999 = (dot(vec3(cbLight._m0[_1633 + 3u].xyz), vec3(_202, _203, _204)) * 0.5) + 0.5;
        float _2000 = _1999 * _1999;
        float _3625 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
        float _2001 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _2002 = isnan(1.0) ? _1650 : (isnan(_1650) ? 1.0 : min(_1650, 1.0));
        _1875 = (((cbLight._m0[_1983].x * 0.3183098733425140380859375) * _2001) * _2002) + _1813;
        _1877 = (((cbLight._m0[_1983].y * 0.3183098733425140380859375) * _2001) * _2002) + _1815;
        _1879 = (((cbLight._m0[_1983].z * 0.3183098733425140380859375) * _2001) * _2002) + _1817;
    }
    uint _1881 = _1633 + 8u;
    float _1887 = cbLight._m0[_1633].x + _285;
    float _1888 = cbLight._m0[_1633].y + _286;
    float _1889 = cbLight._m0[_1633].z + _287;
    float _1893 = inversesqrt(dot(vec3(_1887, _1888, _1889), vec3(_1887, _1888, _1889)));
    float _1897 = dot(vec3(_202, _203, _204), vec3(cbLight._m0[_1633].xyz));
    float _3641 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1900 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
    float _3652 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _1901 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    float _1902 = dot(vec3(cbLight._m0[_1633].xyz), vec3(_1887 * _1893, _1888 * _1893, _1889 * _1893));
    float _3663 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1913 = (exp2(log2(1.0 - (isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1919 = (0.5 / ((_1900 + 9.9999999392252902907785028219223e-09) + _1901)) * _1900;
    float _3674 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1921 = (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) * 0.31831014156341552734375;
    uint _1935 = _1633 + 9u;
    float _1941 = cbLight._m0[_1675].x + _285;
    float _1942 = cbLight._m0[_1675].y + _286;
    float _1943 = cbLight._m0[_1675].z + _287;
    float _1947 = inversesqrt(dot(vec3(_1941, _1942, _1943), vec3(_1941, _1942, _1943)));
    float _1951 = dot(vec3(_202, _203, _204), vec3(cbLight._m0[_1675].xyz));
    float _3685 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _1954 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _1955 = dot(vec3(cbLight._m0[_1675].xyz), vec3(_1941 * _1947, _1942 * _1947, _1943 * _1947));
    float _3696 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1964 = (exp2(log2(1.0 - (isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1968 = (0.5 / ((_1954 + 9.9999999392252902907785028219223e-09) + _1901)) * _1954;
    float _3707 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1970 = (isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * 0.31831014156341552734375;
    float _1980 = (((_1964 * cbLight._m0[_1935].x) * _1970) * _1657) + ((((cbLight._m0[_1881].x * _1622) * _1913) * _1921) * _1671);
    float _1981 = (((_1964 * cbLight._m0[_1935].y) * _1970) * _1657) + ((((cbLight._m0[_1881].y * _1624) * _1913) * _1921) * _1671);
    float _1982 = (((_1964 * cbLight._m0[_1935].z) * _1970) * _1657) + ((((cbLight._m0[_1881].z * _1626) * _1913) * _1921) * _1671);
    float _2038;
    float _2040;
    float _2042;
    if (_1711)
    {
        _2038 = _1980;
        _2040 = _1981;
        _2042 = _1982;
    }
    else
    {
        uint _2044 = _1633 + 10u;
        uint _2050 = _1633 + 2u;
        float _2056 = cbLight._m0[_2050].x + _285;
        float _2057 = cbLight._m0[_2050].y + _286;
        float _2058 = cbLight._m0[_2050].z + _287;
        float _2062 = inversesqrt(dot(vec3(_2056, _2057, _2058), vec3(_2056, _2057, _2058)));
        float _2066 = dot(vec3(_202, _203, _204), vec3(cbLight._m0[_2050].xyz));
        float _3718 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        float _2069 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _2070 = dot(vec3(cbLight._m0[_2050].xyz), vec3(_2056 * _2062, _2057 * _2062, _2058 * _2062));
        float _3729 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
        float _2079 = (exp2(log2(1.0 - (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2083 = (0.5 / ((_2069 + 9.9999999392252902907785028219223e-09) + _1901)) * _2069;
        float _3740 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2085 = (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * 0.31831014156341552734375;
        float _2086 = isnan(1.0) ? _1649 : (isnan(_1649) ? 1.0 : min(_1649, 1.0));
        _2038 = (((_2079 * cbLight._m0[_2044].x) * _2085) * _2086) + _1980;
        _2040 = (((_2079 * cbLight._m0[_2044].y) * _2085) * _2086) + _1981;
        _2042 = (((_2079 * cbLight._m0[_2044].z) * _2085) * _2086) + _1982;
    }
    float _2117;
    float _2119;
    float _2121;
    if (_1820)
    {
        _2117 = _2038;
        _2119 = _2040;
        _2121 = _2042;
    }
    else
    {
        uint _2128 = _1633 + 11u;
        uint _2134 = _1633 + 3u;
        float _2140 = cbLight._m0[_2134].x + _285;
        float _2141 = cbLight._m0[_2134].y + _286;
        float _2142 = cbLight._m0[_2134].z + _287;
        float _2146 = inversesqrt(dot(vec3(_2140, _2141, _2142), vec3(_2140, _2141, _2142)));
        float _2150 = dot(vec3(_202, _203, _204), vec3(cbLight._m0[_2134].xyz));
        float _3756 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2153 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _2154 = dot(vec3(cbLight._m0[_2134].xyz), vec3(_2140 * _2146, _2141 * _2146, _2142 * _2146));
        float _3767 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2163 = (exp2(log2(1.0 - (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2167 = (0.5 / ((_2153 + 9.9999999392252902907785028219223e-09) + _1901)) * _2153;
        float _3778 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2169 = (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * 0.31831014156341552734375;
        float _2170 = isnan(1.0) ? _1650 : (isnan(_1650) ? 1.0 : min(_1650, 1.0));
        _2117 = (((_2163 * cbLight._m0[_2128].x) * _2169) * _2170) + _2038;
        _2119 = (((_2163 * cbLight._m0[_2128].y) * _2169) * _2170) + _2040;
        _2121 = (((_2163 * cbLight._m0[_2128].z) * _2169) * _2170) + _2042;
    }
    float _2235;
    float _2237;
    float _2239;
    float _2241;
    float _2243;
    float _2245;
    if (_1631.y == 0u)
    {
        uvec4 _2191 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2192 = _2191.x;
        uint _2203 = uint((float(_2191.y) * floor(float(uint(cbSceneParam._m0[85u].y * _294) / _2192))) + floor(float(uint(cbSceneParam._m0[85u].x * _293) / _2192)));
        float _2213 = (log2(_1409 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2214 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        uint _2217 = uint(isnan(14.0) ? _2214 : (isnan(_2214) ? 14.0 : min(_2214, 14.0)));
        uvec4 _2222 = texelFetch(g_lightClusterGridBuffer, int(((_2217 << 2u) + (_2203 << 6u)) >> 2u));
        uint _2223 = _2222.x;
        uint _2224 = _2191.z;
        float _2304;
        float _2306;
        float _2308;
        float _2310;
        float _2312;
        float _2314;
        if (((((1u << ((_2224 >> 4u) & 15u)) + 4294967295u) & _2223) == 0u) || ((_2224 & 240u) == 0u))
        {
            _2304 = 0.0;
            _2306 = 0.0;
            _2308 = 0.0;
            _2310 = 0.0;
            _2312 = 0.0;
            _2314 = 0.0;
        }
        else
        {
            float _2305;
            float _2307;
            float _2309;
            float _2311;
            float _2313;
            float _2315;
            float _2446 = 0.0;
            float _2447 = 0.0;
            float _2448 = 0.0;
            float _2449 = 0.0;
            float _2450 = 0.0;
            float _2451 = 0.0;
            uint _2452 = 0u;
            uint _2461;
            bool _2462;
            for (;;)
            {
                _2461 = texelFetch(g_lightClassification, int((((_2217 << 5u) + (_2203 << 9u)) + (_2452 << 2u)) >> 2u)).x;
                _2462 = _2461 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2462)
                {
                    frontier_phi_68_pred = _2451;
                    frontier_phi_68_pred_1 = _2450;
                    frontier_phi_68_pred_2 = _2449;
                    frontier_phi_68_pred_3 = _2447;
                    frontier_phi_68_pred_4 = _2446;
                    frontier_phi_68_pred_5 = _2448;
                }
                else
                {
                    float _2570;
                    float _2571;
                    float _2572;
                    float _2573;
                    float _2574;
                    float _2575;
                    uint _2576;
                    _2570 = _2446;
                    _2571 = _2447;
                    _2572 = _2448;
                    _2573 = _2449;
                    _2574 = _2450;
                    _2575 = _2451;
                    _2576 = _2461;
                    float _2502;
                    float _2503;
                    float _2504;
                    float _2505;
                    float _2506;
                    float _2507;
                    for (;;)
                    {
                        uint _2580 = uint(findLSB(_2576)) + (_2452 << 5u);
                        uint _2577 = (_2576 + 4294967295u) & _2576;
                        uint _2582 = _2580 * 48u;
                        vec4 _2596 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2582)).x, texelFetch(g_PointLightRenderingBuffer, int(_2582 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2582 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2582 + 3u)).x));
                        uint _2602 = (_2580 * 48u) + 4u;
                        vec4 _2615 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2602)).x, texelFetch(g_PointLightRenderingBuffer, int(_2602 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2602 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2602 + 3u)).x));
                        uint _2621 = (_2580 * 48u) + 8u;
                        vec3 _2632 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2621)).x, texelFetch(g_PointLightRenderingBuffer, int(_2621 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2621 + 2u)).x));
                        float _2636 = _2596.x - _1407;
                        float _2637 = _2596.y - _1408;
                        float _2638 = _2596.z - _1409;
                        float _2639 = dot(vec3(_2636, _2637, _2638), vec3(_2636, _2637, _2638));
                        float _2642 = inversesqrt(_2639);
                        float _2651 = 1.0 - (_2639 * _2596.w);
                        float _3804 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
                        float _2652 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
                        float _2653 = sqrt(_2639) * _2615.w;
                        float _2656 = 1.39999997615814208984375 / (_2653 + 1.39999997615814208984375);
                        float _2657 = _2656 * _2656;
                        float _2660 = ((1.0 - _2657) * dot(vec3(_315, _318, _321), vec3(_2642 * _2636, _2642 * _2637, _2642 * _2638))) + _2657;
                        float _2663 = _2653 * _2653;
                        float _2667 = ((isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0))) * _2652) / ((_2663 * 0.699999988079071044921875) + 1.0);
                        float _2671 = (-0.0) - _1407;
                        float _2672 = (-0.0) - _1408;
                        float _2673 = (-0.0) - _1409;
                        float _2677 = inversesqrt(dot(vec3(_2671, _2672, _2673), vec3(_2671, _2672, _2673)));
                        float _2681 = dot(vec3(_315, _318, _321), vec3(_2677 * _2671, _2677 * _2672, _2677 * _2673));
                        float _3820 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
                        float _3831 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
                        float _2685 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
                        float _2689 = (0.5 / (((isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) + 9.9999999392252902907785028219223e-09) + _2685)) * _2685;
                        float _3842 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
                        float _2698 = (((isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * 3.1415927410125732421875) / ((_2663 * 2.1991131305694580078125) + 3.141590118408203125)) * _2652;
                        _2505 = (_2667 * _2615.x) + _2573;
                        _2506 = (_2667 * _2615.y) + _2574;
                        _2507 = (_2667 * _2615.z) + _2575;
                        _2502 = (_2698 * _2632.x) + _2570;
                        _2503 = (_2698 * _2632.y) + _2571;
                        _2504 = (_2698 * _2632.z) + _2572;
                        if (_2577 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2570 = _2502;
                            _2571 = _2503;
                            _2572 = _2504;
                            _2573 = _2505;
                            _2574 = _2506;
                            _2575 = _2507;
                            _2576 = _2577;
                        }
                    }
                    frontier_phi_68_pred = _2507;
                    frontier_phi_68_pred_1 = _2506;
                    frontier_phi_68_pred_2 = _2505;
                    frontier_phi_68_pred_3 = _2503;
                    frontier_phi_68_pred_4 = _2502;
                    frontier_phi_68_pred_5 = _2504;
                }
                _2315 = frontier_phi_68_pred;
                _2313 = frontier_phi_68_pred_1;
                _2311 = frontier_phi_68_pred_2;
                _2307 = frontier_phi_68_pred_3;
                _2305 = frontier_phi_68_pred_4;
                _2309 = frontier_phi_68_pred_5;
                uint _2453 = _2452 + 1u;
                if (_2453 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2446 = _2305;
                    _2447 = _2307;
                    _2448 = _2309;
                    _2449 = _2311;
                    _2450 = _2313;
                    _2451 = _2315;
                    _2452 = _2453;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2304 = _2305;
            _2306 = _2307;
            _2308 = _2309;
            _2310 = _2311;
            _2312 = _2313;
            _2314 = _2315;
        }
        uvec4 _2318 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2319 = _2318.z;
        uint _2321 = (_2319 >> 8u) & 15u;
        float _2417;
        float _2419;
        float _2421;
        float _2423;
        float _2425;
        float _2427;
        if (((4294967295u << _2321) & _2223) == 0u)
        {
            _2417 = _2304;
            _2419 = _2306;
            _2421 = _2308;
            _2423 = _2310;
            _2425 = _2312;
            _2427 = _2314;
        }
        else
        {
            float _2442 = inversesqrt(dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409)));
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2321 < ((_2319 >> 12u) & 15u))
            {
                float _2418;
                float _2420;
                float _2422;
                float _2424;
                float _2426;
                float _2428;
                float _2553 = _2304;
                float _2554 = _2306;
                float _2555 = _2308;
                float _2556 = _2310;
                float _2557 = _2312;
                float _2558 = _2314;
                uint _2559 = _2321;
                uint _2568;
                bool _2569;
                for (;;)
                {
                    _2568 = texelFetch(g_lightClassification, int((((_2217 << 5u) + (_2203 << 9u)) + (_2559 << 2u)) >> 2u)).x;
                    _2569 = _2568 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2569)
                    {
                        frontier_phi_74_pred = _2555;
                        frontier_phi_74_pred_1 = _2554;
                        frontier_phi_74_pred_2 = _2553;
                        frontier_phi_74_pred_3 = _2558;
                        frontier_phi_74_pred_4 = _2557;
                        frontier_phi_74_pred_5 = _2556;
                    }
                    else
                    {
                        float _2703;
                        float _2704;
                        float _2705;
                        float _2706;
                        float _2707;
                        float _2708;
                        float _2955;
                        float _2956;
                        float _2957;
                        float _2958;
                        float _2959;
                        float _2960;
                        float _2716 = _2553;
                        float _2717 = _2554;
                        float _2718 = _2555;
                        float _2719 = _2556;
                        float _2720 = _2557;
                        float _2721 = _2558;
                        uint _2722 = _2568;
                        uint _2723;
                        vec4 _2748;
                        float _2749;
                        vec4 _2764;
                        vec3 _2776;
                        vec4 _2792;
                        vec4 _2808;
                        float _2855;
                        bool _2856;
                        for (;;)
                        {
                            uint _2733 = ((_2559 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2722));
                            _2723 = (_2722 + 4294967295u) & _2722;
                            uint _2735 = _2733 * 40u;
                            _2748 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2735)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 3u)).x));
                            _2749 = _2748.w;
                            uint _2751 = (_2733 * 40u) + 4u;
                            _2764 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2751)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2751 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2751 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2751 + 3u)).x));
                            uint _2766 = (_2733 * 40u) + 8u;
                            _2776 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2766)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2766 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2766 + 2u)).x));
                            uint _2779 = (_2733 * 40u) + 16u;
                            _2792 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2779)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2779 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2779 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2779 + 3u)).x));
                            uint _2795 = (_2733 * 40u) + 20u;
                            _2808 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2795)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2795 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2795 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2795 + 3u)).x));
                            uint _2811 = (_2733 * 40u) + 24u;
                            vec4 _2824 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2811)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 3u)).x));
                            uint _2830 = (_2733 * 40u) + 28u;
                            vec4 _2843 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2830)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 3u)).x));
                            _2855 = fma(_1409, _2843.z, fma(_1408, _2843.y, _2843.x * _1407)) + _2843.w;
                            _2856 = !((fma(_1409, _2824.z, fma(_1408, _2824.y, _2824.x * _1407)) + _2824.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_2856)
                            {
                                float _2883 = _2748.x - _1407;
                                float _2884 = _2748.y - _1408;
                                float _2885 = _2748.z - _1409;
                                float _2886 = dot(vec3(_2883, _2884, _2885), vec3(_2883, _2884, _2885));
                                float _2889 = inversesqrt(_2886);
                                float _2890 = _2889 * _2883;
                                float _2891 = _2889 * _2884;
                                float _2892 = _2889 * _2885;
                                float _2896 = 1.0 - (_2886 / (_2749 * _2749));
                                float _3853 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
                                float _2897 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
                                float _2901 = sqrt(_2886) * _2764.w;
                                float _2903 = 1.39999997615814208984375 / (_2901 + 1.39999997615814208984375);
                                float _2904 = _2903 * _2903;
                                float _2905 = 1.0 - _2904;
                                float _2907 = (_2905 * dot(vec3(_2890, _2891, _2892), vec3(_315, _318, _321))) + _2904;
                                float _2910 = _2901 * _2901;
                                float _2914 = (fma(_1409, _2792.z, fma(_1408, _2792.y, _2792.x * _1407)) + _2792.w) / _2855;
                                float _2915 = (fma(_1409, _2808.z, fma(_1408, _2808.y, _2808.x * _1407)) + _2808.w) / _2855;
                                float _2919 = 1.0 - dot(vec2(_2914, _2915), vec2(_2914, _2915));
                                float _3869 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
                                float _2920 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
                                float _2921 = _2920 * (((isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0))) * _2897) / ((_2910 * 0.699999988079071044921875) + 1.0));
                                float _2931 = dot(vec3(_315, _318, _321), vec3((-0.0) - (_1407 * _2442), (-0.0) - (_1408 * _2442), (-0.0) - (_1409 * _2442)));
                                float _3880 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
                                float _2939 = (_2905 * dot(vec3(_315, _318, _321), vec3(_2890, _2891, _2892))) + _2904;
                                float _3891 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                                float _2940 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
                                float _2944 = (0.5 / (((isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) + 9.9999999392252902907785028219223e-09) + _2940)) * _2940;
                                float _3902 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                                float _2951 = (_2920 * _2897) * (((isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * 3.1415927410125732421875) / ((_2910 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_80_pred = _2951 * _2776.z;
                                frontier_phi_80_pred_1 = _2951 * _2776.y;
                                frontier_phi_80_pred_2 = _2951 * _2776.x;
                                frontier_phi_80_pred_3 = _2921 * _2764.z;
                                frontier_phi_80_pred_4 = _2921 * _2764.y;
                                frontier_phi_80_pred_5 = _2921 * _2764.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _2957 = frontier_phi_80_pred;
                            _2956 = frontier_phi_80_pred_1;
                            _2955 = frontier_phi_80_pred_2;
                            _2960 = frontier_phi_80_pred_3;
                            _2959 = frontier_phi_80_pred_4;
                            _2958 = frontier_phi_80_pred_5;
                            _2706 = _2958 + _2719;
                            _2707 = _2959 + _2720;
                            _2708 = _2960 + _2721;
                            _2703 = _2955 + _2716;
                            _2704 = _2956 + _2717;
                            _2705 = _2957 + _2718;
                            if (_2723 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2716 = _2703;
                                _2717 = _2704;
                                _2718 = _2705;
                                _2719 = _2706;
                                _2720 = _2707;
                                _2721 = _2708;
                                _2722 = _2723;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _2705;
                        frontier_phi_74_pred_1 = _2704;
                        frontier_phi_74_pred_2 = _2703;
                        frontier_phi_74_pred_3 = _2708;
                        frontier_phi_74_pred_4 = _2707;
                        frontier_phi_74_pred_5 = _2706;
                    }
                    _2422 = frontier_phi_74_pred;
                    _2420 = frontier_phi_74_pred_1;
                    _2418 = frontier_phi_74_pred_2;
                    _2428 = frontier_phi_74_pred_3;
                    _2426 = frontier_phi_74_pred_4;
                    _2424 = frontier_phi_74_pred_5;
                    uint _2560 = _2559 + 1u;
                    if (_2560 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2553 = _2418;
                        _2554 = _2420;
                        _2555 = _2422;
                        _2556 = _2424;
                        _2557 = _2426;
                        _2558 = _2428;
                        _2559 = _2560;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2426;
                frontier_phi_62_63_ladder_1 = _2424;
                frontier_phi_62_63_ladder_2 = _2422;
                frontier_phi_62_63_ladder_3 = _2428;
                frontier_phi_62_63_ladder_4 = _2420;
                frontier_phi_62_63_ladder_5 = _2418;
            }
            else
            {
                frontier_phi_62_63_ladder = _2312;
                frontier_phi_62_63_ladder_1 = _2310;
                frontier_phi_62_63_ladder_2 = _2308;
                frontier_phi_62_63_ladder_3 = _2314;
                frontier_phi_62_63_ladder_4 = _2306;
                frontier_phi_62_63_ladder_5 = _2304;
            }
            _2417 = frontier_phi_62_63_ladder_5;
            _2419 = frontier_phi_62_63_ladder_4;
            _2421 = frontier_phi_62_63_ladder_2;
            _2423 = frontier_phi_62_63_ladder_1;
            _2425 = frontier_phi_62_63_ladder;
            _2427 = frontier_phi_62_63_ladder_3;
        }
        float _2432 = isnan(1.0) ? _360 : (isnan(_360) ? 1.0 : min(_360, 1.0));
        _2235 = (_2432 * _2423) + _1875;
        _2237 = (_2432 * _2425) + _1877;
        _2239 = (_2432 * _2427) + _1879;
        _2241 = ((_2417 * 0.039999999105930328369140625) * _2432) + _2117;
        _2243 = ((_2419 * 0.039999999105930328369140625) * _2432) + _2119;
        _2245 = ((_2421 * 0.039999999105930328369140625) * _2432) + _2121;
    }
    else
    {
        _2235 = _1875;
        _2237 = _1877;
        _2239 = _1879;
        _2241 = _2117;
        _2243 = _2119;
        _2245 = _2121;
    }
    float _3918 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _3929 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _3940 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _3951 = isnan(0.0) ? _206 : (isnan(_206) ? 0.0 : max(_206, 0.0));
    float _2270 = cbInstanceData._m0[_334 + 6u].w * (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0)));
    float _2275 = _293 / cbSceneParam._m0[86u].x;
    float _2276 = _294 / cbSceneParam._m0[86u].y;
    vec4 _2290 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2275, _2276, (log2((isnan(cbSceneParam._m0[77u].w) ? _225 : (isnan(_225) ? cbSceneParam._m0[77u].w : min(_225, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2292 = _2290.x;
    float _2293 = _2290.y;
    float _2294 = _2290.z;
    float _2295 = _2290.w;
    float _2366;
    float _2368;
    float _2370;
    float _2372;
    if (_225 > cbSceneParam._m0[78u].w)
    {
        float _2329 = isnan(_225) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _225 : min(cbSceneParam._m0[80u].w, _225));
        float _2330 = _2329 / _225;
        float _2341 = _2330 * _278;
        float _2342 = _279 * _2330;
        float _2343 = (-0.0) - _2342;
        float _2344 = _2330 * _280;
        float _2346 = (cbSceneParam._m0[77u].w * _2343) / _2329;
        float _2347 = _2346 + cbSceneParam._m0[79u].w;
        float _2348 = cbSceneParam._m0[79u].w - _2342;
        float _2354 = sqrt(((_2341 * _2341) + (_2342 * _2342)) + (_2344 * _2344));
        float _2357 = (1.0 - (cbSceneParam._m0[77u].w / _2329)) * _2354;
        float _2362 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2364 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2515;
        if (abs((_2343 - _2346) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2515 = ((((_2347 > 0.0) ? exp2(_2362 * _2347) : (2.0 - exp2(_2364 * _2347))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2357;
        }
        else
        {
            float _2475 = 1.0 / cbSceneParam._m0[80u].x;
            float _2476 = isnan(_2348) ? _2347 : (isnan(_2347) ? _2348 : max(_2347, _2348));
            float _2477 = isnan(_2348) ? _2347 : (isnan(_2347) ? _2348 : min(_2347, _2348));
            float _2486 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : min(_2476, 0.0));
            float _2487 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : min(_2477, 0.0));
            _2515 = ((abs(_2354 / _2343) * cbSceneParam._m0[80u].y) * ((((_2486 - _2487) * 2.0) - ((exp2(_2362 * (isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0)))) - exp2(_2362 * (isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0))))) * _2475)) - ((exp2(_2364 * _2486) - exp2(_2364 * _2487)) * _2475))) + (_2357 * cbSceneParam._m0[80u].z);
        }
        vec4 _2517 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2275, _2276, 1.0), 0.0);
        float _2526 = exp2((_2515 * (-1.44269502162933349609375)) * (1.0 - _2517.w));
        float _2527 = log2(_2526);
        float _2543 = log2(_2295);
        _2366 = (exp2(_2543 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2527 * cbSceneParam._m0[78u].x)) * _2517.x) / cbSceneParam._m0[78u].x)) + _2292;
        _2368 = (exp2(_2543 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2527 * cbSceneParam._m0[78u].y)) * _2517.y) / cbSceneParam._m0[78u].y)) + _2293;
        _2370 = (exp2(_2543 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2527 * cbSceneParam._m0[78u].z)) * _2517.z) / cbSceneParam._m0[78u].z)) + _2294;
        _2372 = _2526 * _2295;
    }
    else
    {
        _2366 = _2292;
        _2368 = _2293;
        _2370 = _2294;
        _2372 = _2295;
    }
    float _2384 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2385 = _2384 == 3.0;
    float _2387 = log2(_2372);
    float _2394 = exp2(_2387 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_2235 + ((isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0))) * _360))) + ((_2241 + ((isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0))) * _1139)) * cbPerFrame._m0[3u].x));
    float _2395 = exp2(_2387 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_2237 + ((isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0))) * _360))) + ((_2243 + ((isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0))) * _1139)) * cbPerFrame._m0[3u].x));
    float _2396 = exp2(_2387 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_2239 + ((isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0))) * _360))) + ((_2245 + ((isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0))) * _1139)) * cbPerFrame._m0[3u].x));
    float _2405 = (_2384 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2405 * (_2385 ? _2394 : (_2394 + (cbSceneParam._m0[72u].w * _2366)));
    SV_Target.y = _2405 * (_2385 ? _2395 : (_2395 + (cbSceneParam._m0[72u].w * _2368)));
    SV_Target.z = _2405 * (_2385 ? _2396 : (_2396 + (cbSceneParam._m0[72u].w * _2370)));
    SV_Target.w = _2270;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2270;
}


