#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _747;
float _2938;
float _2939;
float _2940;
float _2941;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _168 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _169 = _168 * NORMAL.x;
    float _170 = _168 * NORMAL.y;
    float _171 = _168 * NORMAL.z;
    float _176;
    float _177;
    float _178;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _176 = (-0.0) - _169;
        _177 = (-0.0) - _170;
        _178 = (-0.0) - _171;
    }
    else
    {
        _176 = _169;
        _177 = _170;
        _178 = _171;
    }
    vec4 _192 = texture(sampler2D(M_A_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _195 = _192.x;
    float _196 = _192.y;
    float _197 = _192.z;
    float _198 = _192.w;
    float _199 = _198 * TEXCOORD_1.z;
    float _203 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _204 = _203 * _176;
    float _205 = _203 * _177;
    float _206 = _203 * _178;
    float _2950 = isnan(0.0) ? _199 : (isnan(_199) ? 0.0 : max(_199, 0.0));
    float _208 = isnan(1.0) ? _2950 : (isnan(_2950) ? 1.0 : min(_2950, 1.0));
    float _2961 = isnan(0.0) ? _195 : (isnan(_195) ? 0.0 : max(_195, 0.0));
    float _2972 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _2983 = isnan(0.0) ? _197 : (isnan(_197) ? 0.0 : max(_197, 0.0));
    float _227 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _270 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _280 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _270);
    float _281 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _270);
    float _282 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _270);
    float _286 = inversesqrt(dot(vec3(_280, _281, _282), vec3(_280, _281, _282)));
    float _287 = _280 * _286;
    float _288 = _281 * _286;
    float _289 = _282 * _286;
    vec4 _294 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _296 = _294.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _426 = sqrt(((_280 * _280) + (_281 * _281)) + (_282 * _282));
        float _432 = (cbMatDynParam._m0[5u].x * _426) + cbMatDynParam._m0[5u].y;
        float _2994 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
        float _433 = isnan(1.0) ? _2994 : (isnan(_2994) ? 1.0 : min(_2994, 1.0));
        float _437 = (cbMatDynParam._m0[5u].z * _426) + cbMatDynParam._m0[5u].w;
        float _3005 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3005 : (isnan(_3005) ? 1.0 : min(_3005, 1.0))) - _433)) + _433) < ((_296 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _308 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _309 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _329 = fma(_206, cbSceneParam._m0[5u].z, fma(_205, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _204));
    float _332 = fma(_206, cbSceneParam._m0[6u].z, fma(_205, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _204));
    float _335 = fma(_206, cbSceneParam._m0[7u].z, fma(_205, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _204));
    uint _348 = uint(roundEven(NORMAL.w)) * 13u;
    uint _350 = _348 + 9u;
    uint _351 = _350 + uint(cbMatDynParam._m0[0u].w);
    float _357 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2961 : (isnan(_2961) ? 1.0 : min(_2961, 1.0)))) * cbInstanceData._m0[_351].x;
    float _358 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2972 : (isnan(_2972) ? 1.0 : min(_2972, 1.0)))) * cbInstanceData._m0[_351].y;
    float _359 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2983 : (isnan(_2983) ? 1.0 : min(_2983, 1.0)))) * cbInstanceData._m0[_351].z;
    float _3016 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _360 = isnan(1.0) ? _3016 : (isnan(_3016) ? 1.0 : min(_3016, 1.0));
    float _3027 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _361 = isnan(1.0) ? _3027 : (isnan(_3027) ? 1.0 : min(_3027, 1.0));
    float _3038 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _362 = isnan(1.0) ? _3038 : (isnan(_3038) ? 1.0 : min(_3038, 1.0));
    vec4 _371 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _308, cbSceneParam._m0[86u].y * _309));
    float _374 = _371.x * TEXCOORD_1.w;
    float _375 = dot(vec3(_204, _205, _206), vec3(_287, _288, _289));
    float _378 = _375 * 2.0;
    float _383 = (_378 * _204) - _287;
    float _384 = (_378 * _205) - _288;
    float _385 = (_378 * _206) - _289;
    float _407 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _411 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _415 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _746;
    float _748;
    float _749;
    float _750;
    float _751;
    float _752;
    float _753;
    float _754;
    float _755;
    float _756;
    float _757;
    float _758;
    float _759;
    float _760;
    float _761;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _471 = fma(_415, cbModelParam._m0[26u].z, fma(_411, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _407));
        float _475 = fma(_415, cbModelParam._m0[27u].z, fma(_411, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _407));
        float _479 = fma(_415, cbModelParam._m0[28u].z, fma(_411, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _407));
        float _504 = _407 + _204;
        float _505 = _411 + _205;
        float _506 = _415 + _206;
        float _516 = fma(_506, cbModelParam._m0[26u].z, fma(_505, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _504)) - _471;
        float _517 = fma(_506, cbModelParam._m0[27u].z, fma(_505, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _504)) - _475;
        float _518 = fma(_506, cbModelParam._m0[28u].z, fma(_505, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _504)) - _479;
        float _522 = inversesqrt(dot(vec3(_516, _517, _518), vec3(_516, _517, _518)));
        float _535 = ((_522 * _516) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_471 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _536 = ((_522 * _517) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_475 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _537 = ((_522 * _518) / cbModelParam._m0[34u].z) + ((((((_479 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _540 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_535, _536, _537), 0.0);
        vec4 _547 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_535, _536, _537), 0.0);
        vec4 _554 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_535, _536, _537), 0.0);
        vec4 _561 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_535, _536, _537), 0.0);
        float _574 = exp2((_540.w + (-0.5)) * 20.0) * 2.0;
        float _575 = _574 * (_540.x + (-0.5));
        float _576 = _574 * (_540.y + (-0.5));
        float _577 = _574 * (_540.z + (-0.5));
        float _584 = exp2((_547.w + (-0.5)) * 20.0) * 2.0;
        float _585 = _584 * (_547.x + (-0.5));
        float _586 = _584 * (_547.y + (-0.5));
        float _587 = _584 * (_547.z + (-0.5));
        float _594 = exp2((_554.w + (-0.5)) * 20.0) * 2.0;
        float _595 = _594 * (_554.x + (-0.5));
        float _596 = _594 * (_554.y + (-0.5));
        float _597 = _594 * (_554.z + (-0.5));
        float _604 = exp2((_561.w + (-0.5)) * 20.0) * 2.0;
        float _605 = _604 * (_561.x + (-0.5));
        float _606 = _604 * (_561.y + (-0.5));
        float _607 = _604 * (_561.z + (-0.5));
        float _608 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
        float _609 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
        float _610 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
        float _611 = _575 * 0.5;
        float _612 = _585 * 0.5;
        float _613 = _595 * 0.5;
        float _614 = dot(vec3(_611, _612, _613), vec3(_611, _612, _613));
        float _619 = (_614 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_614);
        float _628 = (dot(vec3(_204, _205, _206), vec3(_619 * _611, _619 * _612, _619 * _613)) + 1.0) * 0.5;
        float _3064 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
        float _638 = sqrt(((_612 * _612) + (_611 * _611)) + (_613 * _613)) / (_608 + 9.9999997473787516355514526367188e-06);
        float _3075 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
        float _639 = isnan(1.0) ? _3075 : (isnan(_3075) ? 1.0 : min(_3075, 1.0));
        float _640 = _639 * 2.0;
        float _644 = (1.0 - _639) / (_639 + 1.0);
        float _3086 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
        float _645 = isnan(1.0) ? _3086 : (isnan(_3086) ? 1.0 : min(_3086, 1.0));
        float _654 = ((((1.0 - _645) * (_640 + 2.0)) * exp2(log2(isnan(1.0) ? _3064 : (isnan(_3064) ? 1.0 : min(_3064, 1.0))) * (_640 + 1.0))) + _645) * _608;
        float _655 = _576 * 0.5;
        float _656 = _586 * 0.5;
        float _657 = _596 * 0.5;
        float _658 = dot(vec3(_655, _656, _657), vec3(_655, _656, _657));
        float _663 = (_658 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_658);
        float _671 = (dot(vec3(_204, _205, _206), vec3(_663 * _655, _663 * _656, _663 * _657)) + 1.0) * 0.5;
        float _3097 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
        float _680 = sqrt(((_656 * _656) + (_655 * _655)) + (_657 * _657)) / (_609 + 9.9999997473787516355514526367188e-06);
        float _3108 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
        float _681 = isnan(1.0) ? _3108 : (isnan(_3108) ? 1.0 : min(_3108, 1.0));
        float _682 = _681 * 2.0;
        float _686 = (1.0 - _681) / (_681 + 1.0);
        float _3119 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
        float _687 = isnan(1.0) ? _3119 : (isnan(_3119) ? 1.0 : min(_3119, 1.0));
        float _696 = ((((1.0 - _687) * (_682 + 2.0)) * exp2(log2(isnan(1.0) ? _3097 : (isnan(_3097) ? 1.0 : min(_3097, 1.0))) * (_682 + 1.0))) + _687) * _609;
        float _697 = _577 * 0.5;
        float _698 = _587 * 0.5;
        float _699 = _597 * 0.5;
        float _700 = dot(vec3(_697, _698, _699), vec3(_697, _698, _699));
        float _705 = (_700 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_700);
        float _713 = (dot(vec3(_204, _205, _206), vec3(_705 * _697, _705 * _698, _705 * _699)) + 1.0) * 0.5;
        float _3130 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _722 = sqrt(((_698 * _698) + (_697 * _697)) + (_699 * _699)) / (_610 + 9.9999997473787516355514526367188e-06);
        float _3141 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _723 = isnan(1.0) ? _3141 : (isnan(_3141) ? 1.0 : min(_3141, 1.0));
        float _724 = _723 * 2.0;
        float _728 = (1.0 - _723) / (_723 + 1.0);
        float _3152 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _729 = isnan(1.0) ? _3152 : (isnan(_3152) ? 1.0 : min(_3152, 1.0));
        float _738 = ((((1.0 - _729) * (_724 + 2.0)) * exp2(log2(isnan(1.0) ? _3130 : (isnan(_3130) ? 1.0 : min(_3130, 1.0))) * (_724 + 1.0))) + _729) * _610;
        _746 = _577;
        _748 = _576;
        _749 = _575;
        _750 = _587;
        _751 = _586;
        _752 = _585;
        _753 = _597;
        _754 = _596;
        _755 = _595;
        _756 = _610;
        _757 = _609;
        _758 = _608;
        _759 = cbModelParam._m0[36u].z * (isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0)));
        _760 = cbModelParam._m0[36u].z * (isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0)));
        _761 = cbModelParam._m0[36u].z * (isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0)));
    }
    else
    {
        _746 = _747;
        _748 = _747;
        _749 = _747;
        _750 = _747;
        _751 = _747;
        _752 = _747;
        _753 = _747;
        _754 = _747;
        _755 = _747;
        _756 = _747;
        _757 = _747;
        _758 = _747;
        _759 = 0.0;
        _760 = 0.0;
        _761 = 0.0;
    }
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _790 = fma(_415, cbModelParam._m0[30u].z, fma(_411, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _407));
        float _794 = fma(_415, cbModelParam._m0[31u].z, fma(_411, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _407));
        float _798 = fma(_415, cbModelParam._m0[32u].z, fma(_411, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _407));
        float _821 = _407 + _204;
        float _822 = _411 + _205;
        float _823 = _415 + _206;
        float _833 = fma(_823, cbModelParam._m0[30u].z, fma(_822, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _821)) - _790;
        float _834 = fma(_823, cbModelParam._m0[31u].z, fma(_822, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _821)) - _794;
        float _835 = fma(_823, cbModelParam._m0[32u].z, fma(_822, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _821)) - _798;
        float _839 = inversesqrt(dot(vec3(_833, _834, _835), vec3(_833, _834, _835)));
        float _852 = ((_839 * _833) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_790 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _853 = ((_839 * _834) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_794 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _854 = ((_839 * _835) / cbModelParam._m0[35u].z) + ((((((_798 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _856 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        vec4 _863 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        vec4 _870 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        vec4 _877 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        float _889 = exp2((_856.w + (-0.5)) * 20.0) * 2.0;
        float _890 = _889 * (_856.x + (-0.5));
        float _891 = _889 * (_856.y + (-0.5));
        float _892 = _889 * (_856.z + (-0.5));
        float _899 = exp2((_863.w + (-0.5)) * 20.0) * 2.0;
        float _900 = _899 * (_863.x + (-0.5));
        float _901 = _899 * (_863.y + (-0.5));
        float _902 = _899 * (_863.z + (-0.5));
        float _909 = exp2((_870.w + (-0.5)) * 20.0) * 2.0;
        float _910 = _909 * (_870.x + (-0.5));
        float _911 = _909 * (_870.y + (-0.5));
        float _912 = _909 * (_870.z + (-0.5));
        float _919 = exp2((_877.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_877.x + (-0.5));
        float _921 = _919 * (_877.y + (-0.5));
        float _922 = _919 * (_877.z + (-0.5));
        float _923 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _924 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _925 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _926 = _890 * 0.5;
        float _927 = _900 * 0.5;
        float _928 = _910 * 0.5;
        float _929 = dot(vec3(_926, _927, _928), vec3(_926, _927, _928));
        float _934 = (_929 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_929);
        float _942 = (dot(vec3(_204, _205, _206), vec3(_934 * _926, _934 * _927, _934 * _928)) + 1.0) * 0.5;
        float _3193 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _951 = sqrt(((_927 * _927) + (_926 * _926)) + (_928 * _928)) / (_923 + 9.9999997473787516355514526367188e-06);
        float _3204 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3204 : (isnan(_3204) ? 1.0 : min(_3204, 1.0));
        float _953 = _952 * 2.0;
        float _957 = (1.0 - _952) / (_952 + 1.0);
        float _3215 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0));
        float _967 = ((((1.0 - _958) * (_953 + 2.0)) * exp2(log2(isnan(1.0) ? _3193 : (isnan(_3193) ? 1.0 : min(_3193, 1.0))) * (_953 + 1.0))) + _958) * _923;
        float _968 = _891 * 0.5;
        float _969 = _901 * 0.5;
        float _970 = _911 * 0.5;
        float _971 = dot(vec3(_968, _969, _970), vec3(_968, _969, _970));
        float _976 = (_971 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_971);
        float _984 = (dot(vec3(_204, _205, _206), vec3(_976 * _968, _976 * _969, _976 * _970)) + 1.0) * 0.5;
        float _3226 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _993 = sqrt(((_969 * _969) + (_968 * _968)) + (_970 * _970)) / (_924 + 9.9999997473787516355514526367188e-06);
        float _3237 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3248 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0))) * (_995 + 1.0))) + _1000) * _924;
        float _1010 = _892 * 0.5;
        float _1011 = _902 * 0.5;
        float _1012 = _912 * 0.5;
        float _1013 = dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012));
        float _1018 = (_1013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1013);
        float _1026 = (dot(vec3(_204, _205, _206), vec3(_1018 * _1010, _1018 * _1011, _1018 * _1012)) + 1.0) * 0.5;
        float _3259 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1035 = sqrt(((_1011 * _1011) + (_1010 * _1010)) + (_1012 * _1012)) / (_925 + 9.9999997473787516355514526367188e-06);
        float _3270 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0));
        float _1037 = _1036 * 2.0;
        float _1041 = (1.0 - _1036) / (_1036 + 1.0);
        float _3281 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0));
        float _1051 = ((((1.0 - _1042) * (_1037 + 2.0)) * exp2(log2(isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0))) * (_1037 + 1.0))) + _1042) * _925;
        _1059 = _892;
        _1060 = _891;
        _1061 = _890;
        _1062 = _902;
        _1063 = _901;
        _1064 = _900;
        _1065 = _912;
        _1066 = _911;
        _1067 = _910;
        _1068 = _925;
        _1069 = _924;
        _1070 = _923;
        _1071 = cbModelParam._m0[36u].w * (isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0)));
        _1072 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
        _1073 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0)));
    }
    else
    {
        _1059 = _747;
        _1060 = _747;
        _1061 = _747;
        _1062 = _747;
        _1063 = _747;
        _1064 = _747;
        _1065 = _747;
        _1066 = _747;
        _1067 = _747;
        _1068 = _747;
        _1069 = _747;
        _1070 = _747;
        _1071 = 0.0;
        _1072 = 0.0;
        _1073 = 0.0;
    }
    float _1083 = (cbModelParam._m0[1u].x * (_1071 - _759)) + _759;
    float _1084 = (cbModelParam._m0[1u].x * (_1072 - _760)) + _760;
    float _1085 = (cbModelParam._m0[1u].x * (_1073 - _761)) + _761;
    float _1106 = fma(_1085, cbSceneParam._m0[89u].z, fma(_1084, cbSceneParam._m0[89u].y, _1083 * cbSceneParam._m0[89u].x));
    float _1109 = fma(_1085, cbSceneParam._m0[90u].z, fma(_1084, cbSceneParam._m0[90u].y, _1083 * cbSceneParam._m0[90u].x));
    float _1112 = fma(_1085, cbSceneParam._m0[91u].z, fma(_1084, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1083));
    float _1127 = _383 * 0.5;
    float _1128 = _384 * 0.5;
    float _1129 = _385 * 0.5;
    float _1130 = dot(vec4(_1127, _1128, _1129, 1.0), vec4(_1061, _1064, _1067, _1070));
    float _1133 = dot(vec4(_1127, _1128, _1129, 1.0), vec4(_1060, _1063, _1066, _1069));
    float _1136 = dot(vec4(_1127, _1128, _1129, 1.0), vec4(_1059, _1062, _1065, _1068));
    float _1170;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1143 = dot(vec4(_1127, _1128, _1129, 1.0), vec4(_746, _750, _753, _756));
        float _1147 = dot(vec4(_1127, _1128, _1129, 1.0), vec4(_748, _751, _754, _757));
        float _1151 = dot(vec4(_1127, _1128, _1129, 1.0), vec4(_749, _752, _755, _758));
        float _1158 = dot(vec4(cbModelParam._m0[39u]), vec4(_1127, _1128, _1129, 1.0));
        _1170 = dot(vec3(isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)), isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)), isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1158) ? 0.0 : (isnan(0.0) ? _1158 : max(0.0, _1158))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1170 = 1.0;
    }
    float _1181;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1172 = dot(vec4(cbModelParam._m0[40u]), vec4(_1127, _1128, _1129, 1.0));
        _1181 = dot(vec3(isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)), isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)), isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1172) ? 0.0 : (isnan(0.0) ? _1172 : max(0.0, _1172))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1181 = 1.0;
    }
    float _1185 = (_1181 * cbModelParam._m0[1u].x) + (_1170 * (1.0 - cbModelParam._m0[1u].x));
    float _1194 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1276;
    float _1278;
    float _1280;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1243 = fma(_415, cbModelParam._m0[13u].z, fma(_411, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _407)) + cbModelParam._m0[13u].w;
        float _1247 = fma(_415, cbModelParam._m0[14u].z, fma(_411, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _407)) + cbModelParam._m0[14u].w;
        float _1251 = fma(_415, cbModelParam._m0[15u].z, fma(_411, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _407)) + cbModelParam._m0[15u].w;
        float _1254 = fma(_385, cbModelParam._m0[13u].z, fma(_384, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _383));
        float _1257 = fma(_385, cbModelParam._m0[14u].z, fma(_384, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _383));
        float _1260 = fma(_385, cbModelParam._m0[15u].z, fma(_384, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _383));
        float _1286;
        if (_1254 > 0.0)
        {
            _1286 = abs((1.0 - _1243) / _1254);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1254 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1243 + 1.0) / _1254);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1286 = frontier_phi_19_17_ladder;
        }
        float _1515;
        if (_1257 > 0.0)
        {
            _1515 = abs((1.0 - _1247) / _1257);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1257 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1247 + 1.0) / _1257);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1515 = frontier_phi_28_24_ladder;
        }
        float _1707;
        if (_1260 > 0.0)
        {
            _1707 = abs((1.0 - _1251) / _1260);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1260 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1251 + 1.0) / _1260);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1707 = frontier_phi_40_35_ladder;
        }
        float _1709 = isnan(_1515) ? _1286 : (isnan(_1286) ? _1515 : min(_1286, _1515));
        float _1710 = isnan(_1707) ? _1709 : (isnan(_1709) ? _1707 : min(_1709, _1707));
        float _1714 = (_1710 * _1254) + _1243;
        float _1715 = (_1710 * _1257) + _1247;
        float _1716 = (_1710 * _1260) + _1251;
        float _1717 = _1710 * 9.9999997473787516355514526367188e-05;
        float _1719 = (-1.0) - _1717;
        float _1721 = _1717 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1716 > _1721) || ((_1716 < _1719) || ((_1715 > _1721) || ((_1715 < _1719) || ((_1714 < _1719) || (_1714 > _1721))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1813 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1716, cbModelParam._m0[9u].z, fma(_1715, cbModelParam._m0[9u].y, _1714 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1716, cbModelParam._m0[10u].z, fma(_1715, cbModelParam._m0[10u].y, _1714 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1716, cbModelParam._m0[11u].z, fma(_1715, cbModelParam._m0[11u].y, _1714 * cbModelParam._m0[11u].x))), _1194);
            frontier_phi_18_40_ladder = _1813.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1813.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1813.x * cbModelParam._m0[1u].y;
        }
        _1276 = frontier_phi_18_40_ladder_2;
        _1278 = frontier_phi_18_40_ladder_1;
        _1280 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1264 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_383, _384, _385), _1194);
        _1276 = _1264.x * cbModelParam._m0[1u].y;
        _1278 = _1264.y * cbModelParam._m0[1u].y;
        _1280 = _1264.z * cbModelParam._m0[1u].y;
    }
    float _1283 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1376;
    float _1378;
    float _1380;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1340 = fma(_415, cbModelParam._m0[21u].z, fma(_411, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _407)) + cbModelParam._m0[21u].w;
        float _1344 = fma(_415, cbModelParam._m0[22u].z, fma(_411, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _407)) + cbModelParam._m0[22u].w;
        float _1348 = fma(_415, cbModelParam._m0[23u].z, fma(_411, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _407)) + cbModelParam._m0[23u].w;
        float _1351 = fma(_385, cbModelParam._m0[21u].z, fma(_384, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _383));
        float _1354 = fma(_385, cbModelParam._m0[22u].z, fma(_384, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _383));
        float _1357 = fma(_385, cbModelParam._m0[23u].z, fma(_384, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _383));
        float _1520;
        if (_1351 > 0.0)
        {
            _1520 = abs((1.0 - _1340) / _1351);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1351 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1340 + 1.0) / _1351);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1520 = frontier_phi_30_26_ladder;
        }
        float _1734;
        if (_1354 > 0.0)
        {
            _1734 = abs((1.0 - _1344) / _1354);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1354 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1344 + 1.0) / _1354);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1734 = frontier_phi_42_37_ladder;
        }
        float _1885;
        if (_1357 > 0.0)
        {
            _1885 = abs((1.0 - _1348) / _1357);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1357 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1348 + 1.0) / _1357);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _1885 = frontier_phi_51_48_ladder;
        }
        float _1887 = isnan(_1734) ? _1520 : (isnan(_1520) ? _1734 : min(_1520, _1734));
        float _1888 = isnan(_1885) ? _1887 : (isnan(_1887) ? _1885 : min(_1887, _1885));
        float _1892 = (_1888 * _1351) + _1340;
        float _1893 = (_1888 * _1354) + _1344;
        float _1894 = (_1888 * _1357) + _1348;
        float _1895 = _1888 * 9.9999997473787516355514526367188e-05;
        float _1896 = (-1.0) - _1895;
        float _1898 = _1895 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_1894 > _1898) || ((_1894 < _1896) || ((_1893 > _1898) || ((_1893 < _1896) || ((_1892 < _1896) || (_1892 > _1898))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2094 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1894, cbModelParam._m0[17u].z, fma(_1893, cbModelParam._m0[17u].y, _1892 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1894, cbModelParam._m0[18u].z, fma(_1893, cbModelParam._m0[18u].y, _1892 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1894, cbModelParam._m0[19u].z, fma(_1893, cbModelParam._m0[19u].y, _1892 * cbModelParam._m0[19u].x))), _1283);
            frontier_phi_27_51_ladder = _2094.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2094.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2094.x * cbModelParam._m0[1u].z;
        }
        _1376 = frontier_phi_27_51_ladder_2;
        _1378 = frontier_phi_27_51_ladder_1;
        _1380 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1360 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_383, _384, _385), _1283);
        _1376 = _1360.x * cbModelParam._m0[1u].z;
        _1378 = _1360.y * cbModelParam._m0[1u].z;
        _1380 = _1360.z * cbModelParam._m0[1u].z;
    }
    float _1392 = _374 * 0.01200000010430812835693359375;
    float _1394 = _1392 * ((cbModelParam._m0[1u].w * (_1376 - _1276)) + _1276);
    float _1395 = _1392 * ((cbModelParam._m0[1u].w * (_1378 - _1278)) + _1278);
    float _1396 = _1392 * ((cbModelParam._m0[1u].w * (_1380 - _1280)) + _1280);
    float _1399 = fma(_1396, cbSceneParam._m0[89u].z, fma(_1395, cbSceneParam._m0[89u].y, _1394 * cbSceneParam._m0[89u].x));
    float _1402 = fma(_1396, cbSceneParam._m0[90u].z, fma(_1395, cbSceneParam._m0[90u].y, _1394 * cbSceneParam._m0[90u].x));
    float _1405 = fma(_1396, cbSceneParam._m0[91u].z, fma(_1395, cbSceneParam._m0[91u].y, _1394 * cbSceneParam._m0[91u].x));
    vec4 _1413 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_308, _309));
    float _1415 = _1413.w;
    float _1427 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1415);
    float _1428 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1415);
    float _1429 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1415);
    uvec4 _1433 = floatBitsToUint(cbInstanceData._m0[_348 + 5u]);
    uint _1435 = _1433.x * 14u;
    uint _1436 = _1435 + 13u;
    float _1443 = _374 + (-1.0);
    float _1449 = (cbLight._m0[_1436].x * _1443) + 1.0;
    float _1450 = (cbLight._m0[_1436].y * _1443) + 1.0;
    float _1451 = (cbLight._m0[_1436].z * _1443) + 1.0;
    float _1452 = (cbLight._m0[_1436].w * _1443) + 1.0;
    uint _1453 = _1435 + 5u;
    float _1459 = isnan(1.0) ? _1450 : (isnan(_1450) ? 1.0 : min(_1450, 1.0));
    uint _1463 = _1435 + 4u;
    float _1473 = isnan(1.0) ? _1449 : (isnan(_1449) ? 1.0 : min(_1449, 1.0));
    uint _1477 = _1435 | 1u;
    float _1488 = dot(vec3(cbLight._m0[_1435].xyz), vec3(_204, _205, _206));
    float _1491 = dot(vec3(cbLight._m0[_1477].xyz), vec3(_204, _205, _206));
    float _3417 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
    float _3428 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
    float _1496 = (isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0))) * 0.3183098733425140380859375;
    float _1498 = (isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0))) * 0.3183098733425140380859375;
    float _1505 = ((cbLight._m0[_1453].x * _1459) * _1498) + (((cbLight._m0[_1463].x * _1427) * _1473) * _1496);
    float _1506 = ((_1459 * cbLight._m0[_1453].y) * _1498) + (((cbLight._m0[_1463].y * _1428) * _1473) * _1496);
    float _1507 = ((_1459 * cbLight._m0[_1453].z) * _1498) + (((cbLight._m0[_1463].z * _1429) * _1473) * _1496);
    uvec4 _1512 = floatBitsToUint(cbLight._m0[_1435 + 12u]);
    bool _1514 = _1512.x == 0u;
    float _1525;
    float _1527;
    float _1529;
    if (_1514)
    {
        _1525 = _1505;
        _1527 = _1506;
        _1529 = _1507;
    }
    else
    {
        uint _1533 = _1435 + 6u;
        float _1549 = (dot(vec3(cbLight._m0[_1435 + 2u].xyz), vec3(_204, _205, _206)) * 0.5) + 0.5;
        float _1550 = _1549 * _1549;
        float _3439 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
        float _1552 = isnan(1.0) ? _1451 : (isnan(_1451) ? 1.0 : min(_1451, 1.0));
        _1525 = (((cbLight._m0[_1533].x * 0.3183098733425140380859375) * _1551) * _1552) + _1505;
        _1527 = (((cbLight._m0[_1533].y * 0.3183098733425140380859375) * _1551) * _1552) + _1506;
        _1529 = (((cbLight._m0[_1533].z * 0.3183098733425140380859375) * _1551) * _1552) + _1507;
    }
    bool _1532 = _1512.y == 0u;
    float _1570;
    float _1572;
    float _1574;
    if (_1532)
    {
        _1570 = _1525;
        _1572 = _1527;
        _1574 = _1529;
    }
    else
    {
        uint _1678 = _1435 + 7u;
        float _1694 = (dot(vec3(cbLight._m0[_1435 + 3u].xyz), vec3(_204, _205, _206)) * 0.5) + 0.5;
        float _1695 = _1694 * _1694;
        float _3455 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
        float _1697 = isnan(1.0) ? _1452 : (isnan(_1452) ? 1.0 : min(_1452, 1.0));
        _1570 = (((cbLight._m0[_1678].x * 0.3183098733425140380859375) * _1696) * _1697) + _1525;
        _1572 = (((cbLight._m0[_1678].y * 0.3183098733425140380859375) * _1696) * _1697) + _1527;
        _1574 = (((cbLight._m0[_1678].z * 0.3183098733425140380859375) * _1696) * _1697) + _1529;
    }
    uint _1576 = _1435 + 8u;
    float _1582 = cbLight._m0[_1435].x + _287;
    float _1583 = cbLight._m0[_1435].y + _288;
    float _1584 = cbLight._m0[_1435].z + _289;
    float _1588 = inversesqrt(dot(vec3(_1582, _1583, _1584), vec3(_1582, _1583, _1584)));
    float _1592 = dot(vec3(_204, _205, _206), vec3(cbLight._m0[_1435].xyz));
    float _3471 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
    float _1595 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
    float _3482 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _1596 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
    float _1597 = dot(vec3(cbLight._m0[_1435].xyz), vec3(_1582 * _1588, _1583 * _1588, _1584 * _1588));
    float _3493 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
    float _1608 = (exp2(log2(1.0 - (isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1614 = (0.5 / ((_1595 + 9.9999999392252902907785028219223e-09) + _1596)) * _1595;
    float _3504 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
    float _1616 = (isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0))) * 0.31831014156341552734375;
    uint _1630 = _1435 + 9u;
    float _1636 = cbLight._m0[_1477].x + _287;
    float _1637 = cbLight._m0[_1477].y + _288;
    float _1638 = cbLight._m0[_1477].z + _289;
    float _1642 = inversesqrt(dot(vec3(_1636, _1637, _1638), vec3(_1636, _1637, _1638)));
    float _1646 = dot(vec3(_204, _205, _206), vec3(cbLight._m0[_1477].xyz));
    float _3515 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
    float _1649 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
    float _1650 = dot(vec3(cbLight._m0[_1477].xyz), vec3(_1636 * _1642, _1637 * _1642, _1638 * _1642));
    float _3526 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
    float _1659 = (exp2(log2(1.0 - (isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1663 = (0.5 / ((_1649 + 9.9999999392252902907785028219223e-09) + _1596)) * _1649;
    float _3537 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
    float _1665 = (isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))) * 0.31831014156341552734375;
    float _1675 = (((_1659 * cbLight._m0[_1630].x) * _1665) * _1459) + ((((cbLight._m0[_1576].x * _1427) * _1608) * _1616) * _1473);
    float _1676 = (((_1659 * cbLight._m0[_1630].y) * _1665) * _1459) + ((((cbLight._m0[_1576].y * _1428) * _1608) * _1616) * _1473);
    float _1677 = (((_1659 * cbLight._m0[_1630].z) * _1665) * _1459) + ((((cbLight._m0[_1576].z * _1429) * _1608) * _1616) * _1473);
    float _1739;
    float _1741;
    float _1743;
    if (_1514)
    {
        _1739 = _1675;
        _1741 = _1676;
        _1743 = _1677;
    }
    else
    {
        uint _1745 = _1435 + 10u;
        uint _1751 = _1435 + 2u;
        float _1757 = cbLight._m0[_1751].x + _287;
        float _1758 = cbLight._m0[_1751].y + _288;
        float _1759 = cbLight._m0[_1751].z + _289;
        float _1763 = inversesqrt(dot(vec3(_1757, _1758, _1759), vec3(_1757, _1758, _1759)));
        float _1767 = dot(vec3(_204, _205, _206), vec3(cbLight._m0[_1751].xyz));
        float _3548 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1770 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _1771 = dot(vec3(cbLight._m0[_1751].xyz), vec3(_1757 * _1763, _1758 * _1763, _1759 * _1763));
        float _3559 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1780 = (exp2(log2(1.0 - (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1784 = (0.5 / ((_1770 + 9.9999999392252902907785028219223e-09) + _1596)) * _1770;
        float _3570 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1786 = (isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * 0.31831014156341552734375;
        float _1787 = isnan(1.0) ? _1451 : (isnan(_1451) ? 1.0 : min(_1451, 1.0));
        _1739 = (((_1780 * cbLight._m0[_1745].x) * _1786) * _1787) + _1675;
        _1741 = (((_1780 * cbLight._m0[_1745].y) * _1786) * _1787) + _1676;
        _1743 = (((_1780 * cbLight._m0[_1745].z) * _1786) * _1787) + _1677;
    }
    float _1822;
    float _1824;
    float _1826;
    if (_1532)
    {
        _1822 = _1739;
        _1824 = _1741;
        _1826 = _1743;
    }
    else
    {
        uint _1833 = _1435 + 11u;
        uint _1839 = _1435 + 3u;
        float _1845 = cbLight._m0[_1839].x + _287;
        float _1846 = cbLight._m0[_1839].y + _288;
        float _1847 = cbLight._m0[_1839].z + _289;
        float _1851 = inversesqrt(dot(vec3(_1845, _1846, _1847), vec3(_1845, _1846, _1847)));
        float _1855 = dot(vec3(_204, _205, _206), vec3(cbLight._m0[_1839].xyz));
        float _3586 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1858 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _1859 = dot(vec3(cbLight._m0[_1839].xyz), vec3(_1845 * _1851, _1846 * _1851, _1847 * _1851));
        float _3597 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
        float _1868 = (exp2(log2(1.0 - (isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1872 = (0.5 / ((_1858 + 9.9999999392252902907785028219223e-09) + _1596)) * _1858;
        float _3608 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
        float _1874 = (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) * 0.31831014156341552734375;
        float _1875 = isnan(1.0) ? _1452 : (isnan(_1452) ? 1.0 : min(_1452, 1.0));
        _1822 = (((_1868 * cbLight._m0[_1833].x) * _1874) * _1875) + _1739;
        _1824 = (((_1868 * cbLight._m0[_1833].y) * _1874) * _1875) + _1741;
        _1826 = (((_1868 * cbLight._m0[_1833].z) * _1874) * _1875) + _1743;
    }
    float _2009;
    float _2011;
    float _2013;
    float _2015;
    float _2017;
    float _2019;
    if (_1433.y == 0u)
    {
        float _1950 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1951 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1950;
        float _1952 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1950;
        float _1953 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1950;
        uvec4 _1965 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1966 = _1965.x;
        uint _1977 = uint((float(_1965.y) * floor(float(uint(cbSceneParam._m0[85u].y * _309) / _1966))) + floor(float(uint(cbSceneParam._m0[85u].x * _308) / _1966)));
        float _1987 = (log2(_1953 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1988 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
        uint _1991 = uint(isnan(14.0) ? _1988 : (isnan(_1988) ? 14.0 : min(_1988, 14.0)));
        uvec4 _1996 = texelFetch(g_lightClusterGridBuffer, int(((_1991 << 2u) + (_1977 << 6u)) >> 2u));
        uint _1997 = _1996.x;
        uint _1998 = _1965.z;
        float _2099;
        float _2101;
        float _2103;
        float _2105;
        float _2107;
        float _2109;
        if (((((1u << ((_1998 >> 4u) & 15u)) + 4294967295u) & _1997) == 0u) || ((_1998 & 240u) == 0u))
        {
            _2099 = 0.0;
            _2101 = 0.0;
            _2103 = 0.0;
            _2105 = 0.0;
            _2107 = 0.0;
            _2109 = 0.0;
        }
        else
        {
            float _2100;
            float _2102;
            float _2104;
            float _2106;
            float _2108;
            float _2110;
            float _2250 = 0.0;
            float _2251 = 0.0;
            float _2252 = 0.0;
            float _2253 = 0.0;
            float _2254 = 0.0;
            float _2255 = 0.0;
            uint _2256 = 0u;
            uint _2265;
            bool _2266;
            for (;;)
            {
                _2265 = texelFetch(g_lightClassification, int((((_1991 << 5u) + (_1977 << 9u)) + (_2256 << 2u)) >> 2u)).x;
                _2266 = _2265 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2266)
                {
                    frontier_phi_68_pred = _2252;
                    frontier_phi_68_pred_1 = _2255;
                    frontier_phi_68_pred_2 = _2254;
                    frontier_phi_68_pred_3 = _2253;
                    frontier_phi_68_pred_4 = _2251;
                    frontier_phi_68_pred_5 = _2250;
                }
                else
                {
                    float _2395;
                    float _2396;
                    float _2397;
                    float _2398;
                    float _2399;
                    float _2400;
                    uint _2401;
                    _2395 = _2250;
                    _2396 = _2251;
                    _2397 = _2252;
                    _2398 = _2253;
                    _2399 = _2254;
                    _2400 = _2255;
                    _2401 = _2265;
                    float _2322;
                    float _2323;
                    float _2324;
                    float _2325;
                    float _2326;
                    float _2327;
                    for (;;)
                    {
                        uint _2405 = uint(findLSB(_2401)) + (_2256 << 5u);
                        uint _2402 = (_2401 + 4294967295u) & _2401;
                        uint _2407 = _2405 * 48u;
                        vec4 _2421 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2407)).x, texelFetch(g_PointLightRenderingBuffer, int(_2407 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2407 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2407 + 3u)).x));
                        uint _2427 = (_2405 * 48u) + 4u;
                        vec4 _2440 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2427)).x, texelFetch(g_PointLightRenderingBuffer, int(_2427 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2427 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2427 + 3u)).x));
                        uint _2446 = (_2405 * 48u) + 8u;
                        vec3 _2457 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2446)).x, texelFetch(g_PointLightRenderingBuffer, int(_2446 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2446 + 2u)).x));
                        float _2461 = _2421.x - _1951;
                        float _2462 = _2421.y - _1952;
                        float _2463 = _2421.z - _1953;
                        float _2464 = dot(vec3(_2461, _2462, _2463), vec3(_2461, _2462, _2463));
                        float _2467 = inversesqrt(_2464);
                        float _2476 = 1.0 - (_2464 * _2421.w);
                        float _3634 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
                        float _2477 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
                        float _2478 = sqrt(_2464) * _2440.w;
                        float _2481 = 1.39999997615814208984375 / (_2478 + 1.39999997615814208984375);
                        float _2482 = _2481 * _2481;
                        float _2485 = ((1.0 - _2482) * dot(vec3(_329, _332, _335), vec3(_2467 * _2461, _2467 * _2462, _2467 * _2463))) + _2482;
                        float _2488 = _2478 * _2478;
                        float _2492 = ((isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0))) * _2477) / ((_2488 * 0.699999988079071044921875) + 1.0);
                        float _2496 = (-0.0) - _1951;
                        float _2497 = (-0.0) - _1952;
                        float _2498 = (-0.0) - _1953;
                        float _2502 = inversesqrt(dot(vec3(_2496, _2497, _2498), vec3(_2496, _2497, _2498)));
                        float _2506 = dot(vec3(_329, _332, _335), vec3(_2502 * _2496, _2502 * _2497, _2502 * _2498));
                        float _3650 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
                        float _3661 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
                        float _2510 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
                        float _2514 = (0.5 / (((isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) + 9.9999999392252902907785028219223e-09) + _2510)) * _2510;
                        float _3672 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
                        float _2523 = (((isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * 3.1415927410125732421875) / ((_2488 * 2.1991131305694580078125) + 3.141590118408203125)) * _2477;
                        _2325 = (_2492 * _2440.x) + _2398;
                        _2326 = (_2492 * _2440.y) + _2399;
                        _2327 = (_2492 * _2440.z) + _2400;
                        _2322 = (_2523 * _2457.x) + _2395;
                        _2323 = (_2523 * _2457.y) + _2396;
                        _2324 = (_2523 * _2457.z) + _2397;
                        if (_2402 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2395 = _2322;
                            _2396 = _2323;
                            _2397 = _2324;
                            _2398 = _2325;
                            _2399 = _2326;
                            _2400 = _2327;
                            _2401 = _2402;
                        }
                    }
                    frontier_phi_68_pred = _2324;
                    frontier_phi_68_pred_1 = _2327;
                    frontier_phi_68_pred_2 = _2326;
                    frontier_phi_68_pred_3 = _2325;
                    frontier_phi_68_pred_4 = _2323;
                    frontier_phi_68_pred_5 = _2322;
                }
                _2104 = frontier_phi_68_pred;
                _2110 = frontier_phi_68_pred_1;
                _2108 = frontier_phi_68_pred_2;
                _2106 = frontier_phi_68_pred_3;
                _2102 = frontier_phi_68_pred_4;
                _2100 = frontier_phi_68_pred_5;
                uint _2257 = _2256 + 1u;
                if (_2257 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2250 = _2100;
                    _2251 = _2102;
                    _2252 = _2104;
                    _2253 = _2106;
                    _2254 = _2108;
                    _2255 = _2110;
                    _2256 = _2257;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2099 = _2100;
            _2101 = _2102;
            _2103 = _2104;
            _2105 = _2106;
            _2107 = _2108;
            _2109 = _2110;
        }
        uvec4 _2113 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2114 = _2113.z;
        uint _2116 = (_2114 >> 8u) & 15u;
        float _2221;
        float _2223;
        float _2225;
        float _2227;
        float _2229;
        float _2231;
        if (((4294967295u << _2116) & _1997) == 0u)
        {
            _2221 = _2099;
            _2223 = _2101;
            _2225 = _2103;
            _2227 = _2105;
            _2229 = _2107;
            _2231 = _2109;
        }
        else
        {
            float _2246 = inversesqrt(dot(vec3(_1951, _1952, _1953), vec3(_1951, _1952, _1953)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2116 < ((_2114 >> 12u) & 15u))
            {
                float _2222;
                float _2224;
                float _2226;
                float _2228;
                float _2230;
                float _2232;
                float _2378 = _2099;
                float _2379 = _2101;
                float _2380 = _2103;
                float _2381 = _2105;
                float _2382 = _2107;
                float _2383 = _2109;
                uint _2384 = _2116;
                uint _2393;
                bool _2394;
                for (;;)
                {
                    _2393 = texelFetch(g_lightClassification, int((((_1991 << 5u) + (_1977 << 9u)) + (_2384 << 2u)) >> 2u)).x;
                    _2394 = _2393 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2394)
                    {
                        frontier_phi_79_pred = _2383;
                        frontier_phi_79_pred_1 = _2382;
                        frontier_phi_79_pred_2 = _2381;
                        frontier_phi_79_pred_3 = _2380;
                        frontier_phi_79_pred_4 = _2379;
                        frontier_phi_79_pred_5 = _2378;
                    }
                    else
                    {
                        float _2537;
                        float _2538;
                        float _2539;
                        float _2540;
                        float _2541;
                        float _2542;
                        float _2789;
                        float _2790;
                        float _2791;
                        float _2792;
                        float _2793;
                        float _2794;
                        float _2550 = _2378;
                        float _2551 = _2379;
                        float _2552 = _2380;
                        float _2553 = _2381;
                        float _2554 = _2382;
                        float _2555 = _2383;
                        uint _2556 = _2393;
                        uint _2557;
                        vec4 _2582;
                        float _2583;
                        vec4 _2598;
                        vec3 _2610;
                        vec4 _2626;
                        vec4 _2642;
                        float _2689;
                        bool _2690;
                        for (;;)
                        {
                            uint _2567 = ((_2384 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2556));
                            _2557 = (_2556 + 4294967295u) & _2556;
                            uint _2569 = _2567 * 40u;
                            _2582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2569 + 3u)).x));
                            _2583 = _2582.w;
                            uint _2585 = (_2567 * 40u) + 4u;
                            _2598 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2585)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2585 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2585 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2585 + 3u)).x));
                            uint _2600 = (_2567 * 40u) + 8u;
                            _2610 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2600)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2600 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2600 + 2u)).x));
                            uint _2613 = (_2567 * 40u) + 16u;
                            _2626 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2613)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2613 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2613 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2613 + 3u)).x));
                            uint _2629 = (_2567 * 40u) + 20u;
                            _2642 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2629)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2629 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2629 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2629 + 3u)).x));
                            uint _2645 = (_2567 * 40u) + 24u;
                            vec4 _2658 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2645)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2645 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2645 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2645 + 3u)).x));
                            uint _2664 = (_2567 * 40u) + 28u;
                            vec4 _2677 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2664)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2664 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2664 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2664 + 3u)).x));
                            _2689 = fma(_1953, _2677.z, fma(_1952, _2677.y, _2677.x * _1951)) + _2677.w;
                            _2690 = !((fma(_1953, _2658.z, fma(_1952, _2658.y, _2658.x * _1951)) + _2658.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2690)
                            {
                                float _2717 = _2582.x - _1951;
                                float _2718 = _2582.y - _1952;
                                float _2719 = _2582.z - _1953;
                                float _2720 = dot(vec3(_2717, _2718, _2719), vec3(_2717, _2718, _2719));
                                float _2723 = inversesqrt(_2720);
                                float _2724 = _2723 * _2717;
                                float _2725 = _2723 * _2718;
                                float _2726 = _2723 * _2719;
                                float _2730 = 1.0 - (_2720 / (_2583 * _2583));
                                float _3683 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
                                float _2731 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
                                float _2735 = sqrt(_2720) * _2598.w;
                                float _2737 = 1.39999997615814208984375 / (_2735 + 1.39999997615814208984375);
                                float _2738 = _2737 * _2737;
                                float _2739 = 1.0 - _2738;
                                float _2741 = (_2739 * dot(vec3(_2724, _2725, _2726), vec3(_329, _332, _335))) + _2738;
                                float _2744 = _2735 * _2735;
                                float _2748 = (fma(_1953, _2626.z, fma(_1952, _2626.y, _2626.x * _1951)) + _2626.w) / _2689;
                                float _2749 = (fma(_1953, _2642.z, fma(_1952, _2642.y, _2642.x * _1951)) + _2642.w) / _2689;
                                float _2753 = 1.0 - dot(vec2(_2748, _2749), vec2(_2748, _2749));
                                float _3699 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
                                float _2754 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
                                float _2755 = _2754 * (((isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0))) * _2731) / ((_2744 * 0.699999988079071044921875) + 1.0));
                                float _2765 = dot(vec3(_329, _332, _335), vec3((-0.0) - (_1951 * _2246), (-0.0) - (_1952 * _2246), (-0.0) - (_1953 * _2246)));
                                float _3710 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
                                float _2773 = (_2739 * dot(vec3(_329, _332, _335), vec3(_2724, _2725, _2726))) + _2738;
                                float _3721 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
                                float _2774 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
                                float _2778 = (0.5 / (((isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) + 9.9999999392252902907785028219223e-09) + _2774)) * _2774;
                                float _3732 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
                                float _2785 = (_2754 * _2731) * (((isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * 3.1415927410125732421875) / ((_2744 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_85_pred = _2755 * _2598.z;
                                frontier_phi_85_pred_1 = _2755 * _2598.y;
                                frontier_phi_85_pred_2 = _2755 * _2598.x;
                                frontier_phi_85_pred_3 = _2785 * _2610.z;
                                frontier_phi_85_pred_4 = _2785 * _2610.y;
                                frontier_phi_85_pred_5 = _2785 * _2610.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _2794 = frontier_phi_85_pred;
                            _2793 = frontier_phi_85_pred_1;
                            _2792 = frontier_phi_85_pred_2;
                            _2791 = frontier_phi_85_pred_3;
                            _2790 = frontier_phi_85_pred_4;
                            _2789 = frontier_phi_85_pred_5;
                            _2540 = _2792 + _2553;
                            _2541 = _2793 + _2554;
                            _2542 = _2794 + _2555;
                            _2537 = _2789 + _2550;
                            _2538 = _2790 + _2551;
                            _2539 = _2791 + _2552;
                            if (_2557 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2550 = _2537;
                                _2551 = _2538;
                                _2552 = _2539;
                                _2553 = _2540;
                                _2554 = _2541;
                                _2555 = _2542;
                                _2556 = _2557;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2542;
                        frontier_phi_79_pred_1 = _2541;
                        frontier_phi_79_pred_2 = _2540;
                        frontier_phi_79_pred_3 = _2539;
                        frontier_phi_79_pred_4 = _2538;
                        frontier_phi_79_pred_5 = _2537;
                    }
                    _2232 = frontier_phi_79_pred;
                    _2230 = frontier_phi_79_pred_1;
                    _2228 = frontier_phi_79_pred_2;
                    _2226 = frontier_phi_79_pred_3;
                    _2224 = frontier_phi_79_pred_4;
                    _2222 = frontier_phi_79_pred_5;
                    uint _2385 = _2384 + 1u;
                    if (_2385 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2378 = _2222;
                        _2379 = _2224;
                        _2380 = _2226;
                        _2381 = _2228;
                        _2382 = _2230;
                        _2383 = _2232;
                        _2384 = _2385;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2228;
                frontier_phi_60_61_ladder_1 = _2232;
                frontier_phi_60_61_ladder_2 = _2230;
                frontier_phi_60_61_ladder_3 = _2226;
                frontier_phi_60_61_ladder_4 = _2224;
                frontier_phi_60_61_ladder_5 = _2222;
            }
            else
            {
                frontier_phi_60_61_ladder = _2105;
                frontier_phi_60_61_ladder_1 = _2109;
                frontier_phi_60_61_ladder_2 = _2107;
                frontier_phi_60_61_ladder_3 = _2103;
                frontier_phi_60_61_ladder_4 = _2101;
                frontier_phi_60_61_ladder_5 = _2099;
            }
            _2221 = frontier_phi_60_61_ladder_5;
            _2223 = frontier_phi_60_61_ladder_4;
            _2225 = frontier_phi_60_61_ladder_3;
            _2227 = frontier_phi_60_61_ladder;
            _2229 = frontier_phi_60_61_ladder_2;
            _2231 = frontier_phi_60_61_ladder_1;
        }
        float _2236 = isnan(1.0) ? _374 : (isnan(_374) ? 1.0 : min(_374, 1.0));
        _2009 = (_2236 * _2227) + _1570;
        _2011 = (_2236 * _2229) + _1572;
        _2013 = (_2236 * _2231) + _1574;
        _2015 = ((_2221 * 0.039999999105930328369140625) * _2236) + _1822;
        _2017 = ((_2223 * 0.039999999105930328369140625) * _2236) + _1824;
        _2019 = ((_2225 * 0.039999999105930328369140625) * _2236) + _1826;
    }
    else
    {
        _2009 = _1570;
        _2011 = _1572;
        _2013 = _1574;
        _2015 = _1822;
        _2017 = _1824;
        _2019 = _1826;
    }
    float _3748 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _3759 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _3770 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _3781 = isnan(0.0) ? _208 : (isnan(_208) ? 0.0 : max(_208, 0.0));
    float _2037 = ((isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) * (_2009 + ((isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0))) * _374))) + ((_2015 + ((isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))) * _1185)) * cbPerFrame._m0[3u].x);
    float _2038 = ((isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * (_2011 + ((isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0))) * _374))) + ((_2017 + ((isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))) * _1185)) * cbPerFrame._m0[3u].x);
    float _2039 = ((isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * (_2013 + ((isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0))) * _374))) + ((_2019 + ((isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))) * _1185)) * cbPerFrame._m0[3u].x);
    float _2044 = cbInstanceData._m0[_348 + 6u].w * (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0)));
    float _2049 = _308 / cbSceneParam._m0[86u].x;
    float _2050 = _309 / cbSceneParam._m0[86u].y;
    vec4 _2064 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2049, _2050, (log2((isnan(cbSceneParam._m0[77u].w) ? _227 : (isnan(_227) ? cbSceneParam._m0[77u].w : min(_227, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2066 = _2064.x;
    float _2067 = _2064.y;
    float _2068 = _2064.z;
    float _2069 = _2064.w;
    float _2161;
    float _2163;
    float _2165;
    float _2167;
    if (_227 > cbSceneParam._m0[78u].w)
    {
        float _2124 = isnan(_227) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _227 : min(cbSceneParam._m0[80u].w, _227));
        float _2125 = _2124 / _227;
        float _2136 = _2125 * _280;
        float _2137 = _281 * _2125;
        float _2138 = (-0.0) - _2137;
        float _2139 = _2125 * _282;
        float _2141 = (cbSceneParam._m0[77u].w * _2138) / _2124;
        float _2142 = _2141 + cbSceneParam._m0[79u].w;
        float _2143 = cbSceneParam._m0[79u].w - _2137;
        float _2149 = sqrt(((_2136 * _2136) + (_2137 * _2137)) + (_2139 * _2139));
        float _2152 = (1.0 - (cbSceneParam._m0[77u].w / _2124)) * _2149;
        float _2157 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2159 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2335;
        if (abs((_2138 - _2141) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2335 = ((((_2142 > 0.0) ? exp2(_2157 * _2142) : (2.0 - exp2(_2159 * _2142))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2152;
        }
        else
        {
            float _2279 = 1.0 / cbSceneParam._m0[80u].x;
            float _2280 = isnan(_2143) ? _2142 : (isnan(_2142) ? _2143 : max(_2142, _2143));
            float _2281 = isnan(_2143) ? _2142 : (isnan(_2142) ? _2143 : min(_2142, _2143));
            float _2290 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : min(_2280, 0.0));
            float _2291 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : min(_2281, 0.0));
            _2335 = ((abs(_2149 / _2138) * cbSceneParam._m0[80u].y) * ((((_2290 - _2291) * 2.0) - ((exp2(_2157 * (isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0)))) - exp2(_2157 * (isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0))))) * _2279)) - ((exp2(_2159 * _2290) - exp2(_2159 * _2291)) * _2279))) + (_2152 * cbSceneParam._m0[80u].z);
        }
        vec4 _2337 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2049, _2050, 1.0), 0.0);
        float _2346 = exp2((_2335 * (-1.44269502162933349609375)) * (1.0 - _2337.w));
        float _2347 = log2(_2346);
        float _2363 = log2(_2069);
        _2161 = (exp2(_2363 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2347 * cbSceneParam._m0[78u].x)) * _2337.x) / cbSceneParam._m0[78u].x)) + _2066;
        _2163 = (exp2(_2363 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2347 * cbSceneParam._m0[78u].y)) * _2337.y) / cbSceneParam._m0[78u].y)) + _2067;
        _2165 = (exp2(_2363 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2347 * cbSceneParam._m0[78u].z)) * _2337.z) / cbSceneParam._m0[78u].z)) + _2068;
        _2167 = _2346 * _2069;
    }
    else
    {
        _2161 = _2066;
        _2163 = _2067;
        _2165 = _2068;
        _2167 = _2069;
    }
    bool _2373;
    vec4 _2177;
    vec4 _2200;
    float _2202;
    float _2206;
    float _2207;
    float _2208;
    float _2209;
    bool _2220;
    for (;;)
    {
        _2177 = cbMatDynParam._m0[0u];
        float _2179 = roundEven(_2177.y);
        bool _2180 = _2179 == 3.0;
        float _2182 = log2(_2167);
        float _2189 = exp2(_2182 * cbSceneParam._m0[78u].x) * _2037;
        float _2190 = exp2(_2182 * cbSceneParam._m0[78u].y) * _2038;
        float _2191 = exp2(_2182 * cbSceneParam._m0[78u].z) * _2039;
        float _2198 = _296 + (-0.5);
        _2200 = cbMtdParam._m0[1u];
        _2202 = _2200.y * _2198;
        float _2205 = (_2179 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2206 = _2205 * (_2180 ? _2189 : (_2189 + (cbSceneParam._m0[72u].w * _2161)));
        _2207 = _2205 * (_2180 ? _2190 : (_2190 + (cbSceneParam._m0[72u].w * _2163)));
        _2208 = _2205 * (_2180 ? _2191 : (_2191 + (cbSceneParam._m0[72u].w * _2165)));
        _2209 = _2198 * 0.999000012874603271484375;
        _2220 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2220)
        {
            if ((cbInstanceData._m0[_348 + 7u].x + _2209) < 0.5)
            {
                _2373 = true;
                break;
            }
        }
        uint _2314 = _350 + uint(_2177.w);
        if ((cbInstanceData._m0[_2314].w < 1.0) && ((cbInstanceData._m0[_2314].w + _2209) < 0.5))
        {
            _2373 = true;
            break;
        }
        if ((_2202 + _198) < _2200.x)
        {
            _2373 = true;
            break;
        }
        _2373 = false;
        break;
    }
    float _2528;
    if (_2373)
    {
        discard_state = true;
        _2528 = 0.0;
    }
    else
    {
        _2528 = _2044;
    }
    SV_Target.x = _2206;
    SV_Target.y = _2207;
    SV_Target.z = _2208;
    SV_Target.w = _2528;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2044;
    discard_exit();
}


