#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _702;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _164 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _165 = _164 * NORMAL.x;
    float _166 = _164 * NORMAL.y;
    float _167 = _164 * NORMAL.z;
    float _172;
    float _173;
    float _174;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _172 = (-0.0) - _165;
        _173 = (-0.0) - _166;
        _174 = (-0.0) - _167;
    }
    else
    {
        _172 = _165;
        _173 = _166;
        _174 = _167;
    }
    vec4 _188 = texture(sampler2D(M_A_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _191 = _188.x;
    float _192 = _188.y;
    float _193 = _188.z;
    float _195 = _188.w * TEXCOORD_1.z;
    float _199 = inversesqrt(dot(vec3(_172, _173, _174), vec3(_172, _173, _174)));
    float _200 = _199 * _172;
    float _201 = _199 * _173;
    float _202 = _199 * _174;
    float _2838 = isnan(0.0) ? _195 : (isnan(_195) ? 0.0 : max(_195, 0.0));
    float _204 = isnan(1.0) ? _2838 : (isnan(_2838) ? 1.0 : min(_2838, 1.0));
    float _2849 = isnan(0.0) ? _191 : (isnan(_191) ? 0.0 : max(_191, 0.0));
    float _2860 = isnan(0.0) ? _192 : (isnan(_192) ? 0.0 : max(_192, 0.0));
    float _2871 = isnan(0.0) ? _193 : (isnan(_193) ? 0.0 : max(_193, 0.0));
    float _223 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _266 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _276 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _266);
    float _277 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _266);
    float _278 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _266);
    float _282 = inversesqrt(dot(vec3(_276, _277, _278), vec3(_276, _277, _278)));
    float _283 = _276 * _282;
    float _284 = _277 * _282;
    float _285 = _278 * _282;
    float _291 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _292 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _313 = fma(_202, cbSceneParam._m0[5u].z, fma(_201, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _200));
    float _316 = fma(_202, cbSceneParam._m0[6u].z, fma(_201, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _200));
    float _319 = fma(_202, cbSceneParam._m0[7u].z, fma(_201, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _200));
    uint _332 = uint(roundEven(NORMAL.w)) * 13u;
    uint _335 = (_332 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _341 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2849 : (isnan(_2849) ? 1.0 : min(_2849, 1.0)))) * cbInstanceData._m0[_335].x;
    float _342 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2860 : (isnan(_2860) ? 1.0 : min(_2860, 1.0)))) * cbInstanceData._m0[_335].y;
    float _343 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2871 : (isnan(_2871) ? 1.0 : min(_2871, 1.0)))) * cbInstanceData._m0[_335].z;
    float _2882 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _344 = isnan(1.0) ? _2882 : (isnan(_2882) ? 1.0 : min(_2882, 1.0));
    float _2893 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _345 = isnan(1.0) ? _2893 : (isnan(_2893) ? 1.0 : min(_2893, 1.0));
    float _2904 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _346 = isnan(1.0) ? _2904 : (isnan(_2904) ? 1.0 : min(_2904, 1.0));
    vec4 _355 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _291, cbSceneParam._m0[86u].y * _292));
    float _358 = _355.x * TEXCOORD_1.w;
    float _359 = dot(vec3(_200, _201, _202), vec3(_283, _284, _285));
    float _362 = _359 * 2.0;
    float _367 = (_362 * _200) - _283;
    float _368 = (_362 * _201) - _284;
    float _369 = (_362 * _202) - _285;
    float _391 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _395 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _399 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _701;
    float _703;
    float _704;
    float _705;
    float _706;
    float _707;
    float _708;
    float _709;
    float _710;
    float _711;
    float _712;
    float _713;
    float _714;
    float _715;
    float _716;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _426 = fma(_399, cbModelParam._m0[26u].z, fma(_395, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _391));
        float _430 = fma(_399, cbModelParam._m0[27u].z, fma(_395, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _391));
        float _434 = fma(_399, cbModelParam._m0[28u].z, fma(_395, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _391));
        float _459 = _391 + _200;
        float _460 = _395 + _201;
        float _461 = _399 + _202;
        float _471 = fma(_461, cbModelParam._m0[26u].z, fma(_460, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _459)) - _426;
        float _472 = fma(_461, cbModelParam._m0[27u].z, fma(_460, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _459)) - _430;
        float _473 = fma(_461, cbModelParam._m0[28u].z, fma(_460, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _459)) - _434;
        float _477 = inversesqrt(dot(vec3(_471, _472, _473), vec3(_471, _472, _473)));
        float _490 = ((_477 * _471) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_426 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _491 = ((_477 * _472) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_430 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _492 = ((_477 * _473) / cbModelParam._m0[34u].z) + ((((((_434 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _495 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_490, _491, _492), 0.0);
        vec4 _502 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_490, _491, _492), 0.0);
        vec4 _509 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_490, _491, _492), 0.0);
        vec4 _516 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_490, _491, _492), 0.0);
        float _529 = exp2((_495.w + (-0.5)) * 20.0) * 2.0;
        float _530 = _529 * (_495.x + (-0.5));
        float _531 = _529 * (_495.y + (-0.5));
        float _532 = _529 * (_495.z + (-0.5));
        float _539 = exp2((_502.w + (-0.5)) * 20.0) * 2.0;
        float _540 = _539 * (_502.x + (-0.5));
        float _541 = _539 * (_502.y + (-0.5));
        float _542 = _539 * (_502.z + (-0.5));
        float _549 = exp2((_509.w + (-0.5)) * 20.0) * 2.0;
        float _550 = _549 * (_509.x + (-0.5));
        float _551 = _549 * (_509.y + (-0.5));
        float _552 = _549 * (_509.z + (-0.5));
        float _559 = exp2((_516.w + (-0.5)) * 20.0) * 2.0;
        float _560 = _559 * (_516.x + (-0.5));
        float _561 = _559 * (_516.y + (-0.5));
        float _562 = _559 * (_516.z + (-0.5));
        float _563 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
        float _564 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
        float _565 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
        float _566 = _530 * 0.5;
        float _567 = _540 * 0.5;
        float _568 = _550 * 0.5;
        float _569 = dot(vec3(_566, _567, _568), vec3(_566, _567, _568));
        float _574 = (_569 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_569);
        float _583 = (dot(vec3(_200, _201, _202), vec3(_574 * _566, _574 * _567, _574 * _568)) + 1.0) * 0.5;
        float _2930 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
        float _593 = sqrt(((_567 * _567) + (_566 * _566)) + (_568 * _568)) / (_563 + 9.9999997473787516355514526367188e-06);
        float _2941 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
        float _594 = isnan(1.0) ? _2941 : (isnan(_2941) ? 1.0 : min(_2941, 1.0));
        float _595 = _594 * 2.0;
        float _599 = (1.0 - _594) / (_594 + 1.0);
        float _2952 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
        float _600 = isnan(1.0) ? _2952 : (isnan(_2952) ? 1.0 : min(_2952, 1.0));
        float _609 = ((((1.0 - _600) * (_595 + 2.0)) * exp2(log2(isnan(1.0) ? _2930 : (isnan(_2930) ? 1.0 : min(_2930, 1.0))) * (_595 + 1.0))) + _600) * _563;
        float _610 = _531 * 0.5;
        float _611 = _541 * 0.5;
        float _612 = _551 * 0.5;
        float _613 = dot(vec3(_610, _611, _612), vec3(_610, _611, _612));
        float _618 = (_613 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_613);
        float _626 = (dot(vec3(_200, _201, _202), vec3(_618 * _610, _618 * _611, _618 * _612)) + 1.0) * 0.5;
        float _2963 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
        float _635 = sqrt(((_611 * _611) + (_610 * _610)) + (_612 * _612)) / (_564 + 9.9999997473787516355514526367188e-06);
        float _2974 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
        float _636 = isnan(1.0) ? _2974 : (isnan(_2974) ? 1.0 : min(_2974, 1.0));
        float _637 = _636 * 2.0;
        float _641 = (1.0 - _636) / (_636 + 1.0);
        float _2985 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
        float _642 = isnan(1.0) ? _2985 : (isnan(_2985) ? 1.0 : min(_2985, 1.0));
        float _651 = ((((1.0 - _642) * (_637 + 2.0)) * exp2(log2(isnan(1.0) ? _2963 : (isnan(_2963) ? 1.0 : min(_2963, 1.0))) * (_637 + 1.0))) + _642) * _564;
        float _652 = _532 * 0.5;
        float _653 = _542 * 0.5;
        float _654 = _552 * 0.5;
        float _655 = dot(vec3(_652, _653, _654), vec3(_652, _653, _654));
        float _660 = (_655 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_655);
        float _668 = (dot(vec3(_200, _201, _202), vec3(_660 * _652, _660 * _653, _660 * _654)) + 1.0) * 0.5;
        float _2996 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        float _677 = sqrt(((_653 * _653) + (_652 * _652)) + (_654 * _654)) / (_565 + 9.9999997473787516355514526367188e-06);
        float _3007 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
        float _678 = isnan(1.0) ? _3007 : (isnan(_3007) ? 1.0 : min(_3007, 1.0));
        float _679 = _678 * 2.0;
        float _683 = (1.0 - _678) / (_678 + 1.0);
        float _3018 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
        float _684 = isnan(1.0) ? _3018 : (isnan(_3018) ? 1.0 : min(_3018, 1.0));
        float _693 = ((((1.0 - _684) * (_679 + 2.0)) * exp2(log2(isnan(1.0) ? _2996 : (isnan(_2996) ? 1.0 : min(_2996, 1.0))) * (_679 + 1.0))) + _684) * _565;
        _701 = _532;
        _703 = _531;
        _704 = _530;
        _705 = _542;
        _706 = _541;
        _707 = _540;
        _708 = _552;
        _709 = _551;
        _710 = _550;
        _711 = _565;
        _712 = _564;
        _713 = _563;
        _714 = cbModelParam._m0[36u].z * (isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0)));
        _715 = cbModelParam._m0[36u].z * (isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0)));
        _716 = cbModelParam._m0[36u].z * (isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0)));
    }
    else
    {
        _701 = _702;
        _703 = _702;
        _704 = _702;
        _705 = _702;
        _706 = _702;
        _707 = _702;
        _708 = _702;
        _709 = _702;
        _710 = _702;
        _711 = _702;
        _712 = _702;
        _713 = _702;
        _714 = 0.0;
        _715 = 0.0;
        _716 = 0.0;
    }
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _742 = fma(_399, cbModelParam._m0[30u].z, fma(_395, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _391));
        float _746 = fma(_399, cbModelParam._m0[31u].z, fma(_395, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _391));
        float _750 = fma(_399, cbModelParam._m0[32u].z, fma(_395, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _391));
        float _773 = _391 + _200;
        float _774 = _395 + _201;
        float _775 = _399 + _202;
        float _785 = fma(_775, cbModelParam._m0[30u].z, fma(_774, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _773)) - _742;
        float _786 = fma(_775, cbModelParam._m0[31u].z, fma(_774, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _773)) - _746;
        float _787 = fma(_775, cbModelParam._m0[32u].z, fma(_774, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _773)) - _750;
        float _791 = inversesqrt(dot(vec3(_785, _786, _787), vec3(_785, _786, _787)));
        float _804 = ((_791 * _785) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_742 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _805 = ((_791 * _786) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_746 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _806 = ((_791 * _787) / cbModelParam._m0[35u].z) + ((((((_750 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _808 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        vec4 _815 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        vec4 _822 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        vec4 _829 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        float _841 = exp2((_808.w + (-0.5)) * 20.0) * 2.0;
        float _842 = _841 * (_808.x + (-0.5));
        float _843 = _841 * (_808.y + (-0.5));
        float _844 = _841 * (_808.z + (-0.5));
        float _851 = exp2((_815.w + (-0.5)) * 20.0) * 2.0;
        float _852 = _851 * (_815.x + (-0.5));
        float _853 = _851 * (_815.y + (-0.5));
        float _854 = _851 * (_815.z + (-0.5));
        float _861 = exp2((_822.w + (-0.5)) * 20.0) * 2.0;
        float _862 = _861 * (_822.x + (-0.5));
        float _863 = _861 * (_822.y + (-0.5));
        float _864 = _861 * (_822.z + (-0.5));
        float _871 = exp2((_829.w + (-0.5)) * 20.0) * 2.0;
        float _872 = _871 * (_829.x + (-0.5));
        float _873 = _871 * (_829.y + (-0.5));
        float _874 = _871 * (_829.z + (-0.5));
        float _875 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _876 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _877 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _878 = _842 * 0.5;
        float _879 = _852 * 0.5;
        float _880 = _862 * 0.5;
        float _881 = dot(vec3(_878, _879, _880), vec3(_878, _879, _880));
        float _886 = (_881 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_881);
        float _894 = (dot(vec3(_200, _201, _202), vec3(_886 * _878, _886 * _879, _886 * _880)) + 1.0) * 0.5;
        float _3059 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _903 = sqrt(((_879 * _879) + (_878 * _878)) + (_880 * _880)) / (_875 + 9.9999997473787516355514526367188e-06);
        float _3070 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _904 = isnan(1.0) ? _3070 : (isnan(_3070) ? 1.0 : min(_3070, 1.0));
        float _905 = _904 * 2.0;
        float _909 = (1.0 - _904) / (_904 + 1.0);
        float _3081 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3081 : (isnan(_3081) ? 1.0 : min(_3081, 1.0));
        float _919 = ((((1.0 - _910) * (_905 + 2.0)) * exp2(log2(isnan(1.0) ? _3059 : (isnan(_3059) ? 1.0 : min(_3059, 1.0))) * (_905 + 1.0))) + _910) * _875;
        float _920 = _843 * 0.5;
        float _921 = _853 * 0.5;
        float _922 = _863 * 0.5;
        float _923 = dot(vec3(_920, _921, _922), vec3(_920, _921, _922));
        float _928 = (_923 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_923);
        float _936 = (dot(vec3(_200, _201, _202), vec3(_928 * _920, _928 * _921, _928 * _922)) + 1.0) * 0.5;
        float _3092 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _945 = sqrt(((_921 * _921) + (_920 * _920)) + (_922 * _922)) / (_876 + 9.9999997473787516355514526367188e-06);
        float _3103 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _946 = isnan(1.0) ? _3103 : (isnan(_3103) ? 1.0 : min(_3103, 1.0));
        float _947 = _946 * 2.0;
        float _951 = (1.0 - _946) / (_946 + 1.0);
        float _3114 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3114 : (isnan(_3114) ? 1.0 : min(_3114, 1.0));
        float _961 = ((((1.0 - _952) * (_947 + 2.0)) * exp2(log2(isnan(1.0) ? _3092 : (isnan(_3092) ? 1.0 : min(_3092, 1.0))) * (_947 + 1.0))) + _952) * _876;
        float _962 = _844 * 0.5;
        float _963 = _854 * 0.5;
        float _964 = _864 * 0.5;
        float _965 = dot(vec3(_962, _963, _964), vec3(_962, _963, _964));
        float _970 = (_965 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_965);
        float _978 = (dot(vec3(_200, _201, _202), vec3(_970 * _962, _970 * _963, _970 * _964)) + 1.0) * 0.5;
        float _3125 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _987 = sqrt(((_963 * _963) + (_962 * _962)) + (_964 * _964)) / (_877 + 9.9999997473787516355514526367188e-06);
        float _3136 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3136 : (isnan(_3136) ? 1.0 : min(_3136, 1.0));
        float _989 = _988 * 2.0;
        float _993 = (1.0 - _988) / (_988 + 1.0);
        float _3147 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3147 : (isnan(_3147) ? 1.0 : min(_3147, 1.0));
        float _1003 = ((((1.0 - _994) * (_989 + 2.0)) * exp2(log2(isnan(1.0) ? _3125 : (isnan(_3125) ? 1.0 : min(_3125, 1.0))) * (_989 + 1.0))) + _994) * _877;
        _1011 = _844;
        _1012 = _843;
        _1013 = _842;
        _1014 = _854;
        _1015 = _853;
        _1016 = _852;
        _1017 = _864;
        _1018 = _863;
        _1019 = _862;
        _1020 = _877;
        _1021 = _876;
        _1022 = _875;
        _1023 = cbModelParam._m0[36u].w * (isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0)));
        _1024 = cbModelParam._m0[36u].w * (isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0)));
        _1025 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0)));
    }
    else
    {
        _1011 = _702;
        _1012 = _702;
        _1013 = _702;
        _1014 = _702;
        _1015 = _702;
        _1016 = _702;
        _1017 = _702;
        _1018 = _702;
        _1019 = _702;
        _1020 = _702;
        _1021 = _702;
        _1022 = _702;
        _1023 = 0.0;
        _1024 = 0.0;
        _1025 = 0.0;
    }
    float _1035 = (cbModelParam._m0[1u].x * (_1023 - _714)) + _714;
    float _1036 = (cbModelParam._m0[1u].x * (_1024 - _715)) + _715;
    float _1037 = (cbModelParam._m0[1u].x * (_1025 - _716)) + _716;
    float _1058 = fma(_1037, cbSceneParam._m0[89u].z, fma(_1036, cbSceneParam._m0[89u].y, _1035 * cbSceneParam._m0[89u].x));
    float _1061 = fma(_1037, cbSceneParam._m0[90u].z, fma(_1036, cbSceneParam._m0[90u].y, _1035 * cbSceneParam._m0[90u].x));
    float _1064 = fma(_1037, cbSceneParam._m0[91u].z, fma(_1036, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1035));
    float _1079 = _367 * 0.5;
    float _1080 = _368 * 0.5;
    float _1081 = _369 * 0.5;
    float _1082 = dot(vec4(_1079, _1080, _1081, 1.0), vec4(_1013, _1016, _1019, _1022));
    float _1085 = dot(vec4(_1079, _1080, _1081, 1.0), vec4(_1012, _1015, _1018, _1021));
    float _1088 = dot(vec4(_1079, _1080, _1081, 1.0), vec4(_1011, _1014, _1017, _1020));
    float _1122;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1095 = dot(vec4(_1079, _1080, _1081, 1.0), vec4(_701, _705, _708, _711));
        float _1099 = dot(vec4(_1079, _1080, _1081, 1.0), vec4(_703, _706, _709, _712));
        float _1103 = dot(vec4(_1079, _1080, _1081, 1.0), vec4(_704, _707, _710, _713));
        float _1110 = dot(vec4(cbModelParam._m0[39u]), vec4(_1079, _1080, _1081, 1.0));
        _1122 = dot(vec3(isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)), isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)), isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1110) ? 0.0 : (isnan(0.0) ? _1110 : max(0.0, _1110))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1122 = 1.0;
    }
    float _1133;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1124 = dot(vec4(cbModelParam._m0[40u]), vec4(_1079, _1080, _1081, 1.0));
        _1133 = dot(vec3(isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)), isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)), isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1124) ? 0.0 : (isnan(0.0) ? _1124 : max(0.0, _1124))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1133 = 1.0;
    }
    float _1137 = (_1133 * cbModelParam._m0[1u].x) + (_1122 * (1.0 - cbModelParam._m0[1u].x));
    float _1146 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1228;
    float _1230;
    float _1232;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1195 = fma(_399, cbModelParam._m0[13u].z, fma(_395, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _391)) + cbModelParam._m0[13u].w;
        float _1199 = fma(_399, cbModelParam._m0[14u].z, fma(_395, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _391)) + cbModelParam._m0[14u].w;
        float _1203 = fma(_399, cbModelParam._m0[15u].z, fma(_395, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _391)) + cbModelParam._m0[15u].w;
        float _1206 = fma(_369, cbModelParam._m0[13u].z, fma(_368, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _367));
        float _1209 = fma(_369, cbModelParam._m0[14u].z, fma(_368, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _367));
        float _1212 = fma(_369, cbModelParam._m0[15u].z, fma(_368, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _367));
        float _1238;
        if (_1206 > 0.0)
        {
            _1238 = abs((1.0 - _1195) / _1206);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1206 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1195 + 1.0) / _1206);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1238 = frontier_phi_16_14_ladder;
        }
        float _1467;
        if (_1209 > 0.0)
        {
            _1467 = abs((1.0 - _1199) / _1209);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1209 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1199 + 1.0) / _1209);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1467 = frontier_phi_25_21_ladder;
        }
        float _1659;
        if (_1212 > 0.0)
        {
            _1659 = abs((1.0 - _1203) / _1212);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1212 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1203 + 1.0) / _1212);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1659 = frontier_phi_37_32_ladder;
        }
        float _1661 = isnan(_1467) ? _1238 : (isnan(_1238) ? _1467 : min(_1238, _1467));
        float _1662 = isnan(_1659) ? _1661 : (isnan(_1661) ? _1659 : min(_1661, _1659));
        float _1666 = (_1662 * _1206) + _1195;
        float _1667 = (_1662 * _1209) + _1199;
        float _1668 = (_1662 * _1212) + _1203;
        float _1669 = _1662 * 9.9999997473787516355514526367188e-05;
        float _1671 = (-1.0) - _1669;
        float _1673 = _1669 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1668 > _1673) || ((_1668 < _1671) || ((_1667 > _1673) || ((_1667 < _1671) || ((_1666 < _1671) || (_1666 > _1673))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1765 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1668, cbModelParam._m0[9u].z, fma(_1667, cbModelParam._m0[9u].y, _1666 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1668, cbModelParam._m0[10u].z, fma(_1667, cbModelParam._m0[10u].y, _1666 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1668, cbModelParam._m0[11u].z, fma(_1667, cbModelParam._m0[11u].y, _1666 * cbModelParam._m0[11u].x))), _1146);
            frontier_phi_15_37_ladder = _1765.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1765.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1765.x * cbModelParam._m0[1u].y;
        }
        _1228 = frontier_phi_15_37_ladder_2;
        _1230 = frontier_phi_15_37_ladder_1;
        _1232 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1216 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_367, _368, _369), _1146);
        _1228 = _1216.x * cbModelParam._m0[1u].y;
        _1230 = _1216.y * cbModelParam._m0[1u].y;
        _1232 = _1216.z * cbModelParam._m0[1u].y;
    }
    float _1235 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1328;
    float _1330;
    float _1332;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1292 = fma(_399, cbModelParam._m0[21u].z, fma(_395, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _391)) + cbModelParam._m0[21u].w;
        float _1296 = fma(_399, cbModelParam._m0[22u].z, fma(_395, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _391)) + cbModelParam._m0[22u].w;
        float _1300 = fma(_399, cbModelParam._m0[23u].z, fma(_395, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _391)) + cbModelParam._m0[23u].w;
        float _1303 = fma(_369, cbModelParam._m0[21u].z, fma(_368, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _367));
        float _1306 = fma(_369, cbModelParam._m0[22u].z, fma(_368, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _367));
        float _1309 = fma(_369, cbModelParam._m0[23u].z, fma(_368, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _367));
        float _1472;
        if (_1303 > 0.0)
        {
            _1472 = abs((1.0 - _1292) / _1303);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1303 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1292 + 1.0) / _1303);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1472 = frontier_phi_27_23_ladder;
        }
        float _1686;
        if (_1306 > 0.0)
        {
            _1686 = abs((1.0 - _1296) / _1306);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1306 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1296 + 1.0) / _1306);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1686 = frontier_phi_39_34_ladder;
        }
        float _1837;
        if (_1309 > 0.0)
        {
            _1837 = abs((1.0 - _1300) / _1309);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1309 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1300 + 1.0) / _1309);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _1837 = frontier_phi_48_45_ladder;
        }
        float _1839 = isnan(_1686) ? _1472 : (isnan(_1472) ? _1686 : min(_1472, _1686));
        float _1840 = isnan(_1837) ? _1839 : (isnan(_1839) ? _1837 : min(_1839, _1837));
        float _1844 = (_1840 * _1303) + _1292;
        float _1845 = (_1840 * _1306) + _1296;
        float _1846 = (_1840 * _1309) + _1300;
        float _1847 = _1840 * 9.9999997473787516355514526367188e-05;
        float _1848 = (-1.0) - _1847;
        float _1850 = _1847 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1846 > _1850) || ((_1846 < _1848) || ((_1845 > _1850) || ((_1845 < _1848) || ((_1844 < _1848) || (_1844 > _1850))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2046 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1846, cbModelParam._m0[17u].z, fma(_1845, cbModelParam._m0[17u].y, _1844 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1846, cbModelParam._m0[18u].z, fma(_1845, cbModelParam._m0[18u].y, _1844 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1846, cbModelParam._m0[19u].z, fma(_1845, cbModelParam._m0[19u].y, _1844 * cbModelParam._m0[19u].x))), _1235);
            frontier_phi_24_48_ladder = _2046.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2046.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2046.x * cbModelParam._m0[1u].z;
        }
        _1328 = frontier_phi_24_48_ladder_2;
        _1330 = frontier_phi_24_48_ladder_1;
        _1332 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1312 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_367, _368, _369), _1235);
        _1328 = _1312.x * cbModelParam._m0[1u].z;
        _1330 = _1312.y * cbModelParam._m0[1u].z;
        _1332 = _1312.z * cbModelParam._m0[1u].z;
    }
    float _1344 = _358 * 0.01200000010430812835693359375;
    float _1346 = _1344 * ((cbModelParam._m0[1u].w * (_1328 - _1228)) + _1228);
    float _1347 = _1344 * ((cbModelParam._m0[1u].w * (_1330 - _1230)) + _1230);
    float _1348 = _1344 * ((cbModelParam._m0[1u].w * (_1332 - _1232)) + _1232);
    float _1351 = fma(_1348, cbSceneParam._m0[89u].z, fma(_1347, cbSceneParam._m0[89u].y, _1346 * cbSceneParam._m0[89u].x));
    float _1354 = fma(_1348, cbSceneParam._m0[90u].z, fma(_1347, cbSceneParam._m0[90u].y, _1346 * cbSceneParam._m0[90u].x));
    float _1357 = fma(_1348, cbSceneParam._m0[91u].z, fma(_1347, cbSceneParam._m0[91u].y, _1346 * cbSceneParam._m0[91u].x));
    vec4 _1365 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_291, _292));
    float _1367 = _1365.w;
    float _1379 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1367);
    float _1380 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1367);
    float _1381 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1367);
    uvec4 _1385 = floatBitsToUint(cbInstanceData._m0[_332 + 5u]);
    uint _1387 = _1385.x * 14u;
    uint _1388 = _1387 + 13u;
    float _1395 = _358 + (-1.0);
    float _1401 = (cbLight._m0[_1388].x * _1395) + 1.0;
    float _1402 = (cbLight._m0[_1388].y * _1395) + 1.0;
    float _1403 = (cbLight._m0[_1388].z * _1395) + 1.0;
    float _1404 = (cbLight._m0[_1388].w * _1395) + 1.0;
    uint _1405 = _1387 + 5u;
    float _1411 = isnan(1.0) ? _1402 : (isnan(_1402) ? 1.0 : min(_1402, 1.0));
    uint _1415 = _1387 + 4u;
    float _1425 = isnan(1.0) ? _1401 : (isnan(_1401) ? 1.0 : min(_1401, 1.0));
    uint _1429 = _1387 | 1u;
    float _1440 = dot(vec3(cbLight._m0[_1387].xyz), vec3(_200, _201, _202));
    float _1443 = dot(vec3(cbLight._m0[_1429].xyz), vec3(_200, _201, _202));
    float _3283 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
    float _3294 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
    float _1448 = (isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0))) * 0.3183098733425140380859375;
    float _1450 = (isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0))) * 0.3183098733425140380859375;
    float _1457 = ((cbLight._m0[_1405].x * _1411) * _1450) + (((cbLight._m0[_1415].x * _1379) * _1425) * _1448);
    float _1458 = ((_1411 * cbLight._m0[_1405].y) * _1450) + (((cbLight._m0[_1415].y * _1380) * _1425) * _1448);
    float _1459 = ((_1411 * cbLight._m0[_1405].z) * _1450) + (((cbLight._m0[_1415].z * _1381) * _1425) * _1448);
    uvec4 _1464 = floatBitsToUint(cbLight._m0[_1387 + 12u]);
    bool _1466 = _1464.x == 0u;
    float _1477;
    float _1479;
    float _1481;
    if (_1466)
    {
        _1477 = _1457;
        _1479 = _1458;
        _1481 = _1459;
    }
    else
    {
        uint _1485 = _1387 + 6u;
        float _1501 = (dot(vec3(cbLight._m0[_1387 + 2u].xyz), vec3(_200, _201, _202)) * 0.5) + 0.5;
        float _1502 = _1501 * _1501;
        float _3305 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
        float _1504 = isnan(1.0) ? _1403 : (isnan(_1403) ? 1.0 : min(_1403, 1.0));
        _1477 = (((cbLight._m0[_1485].x * 0.3183098733425140380859375) * _1503) * _1504) + _1457;
        _1479 = (((cbLight._m0[_1485].y * 0.3183098733425140380859375) * _1503) * _1504) + _1458;
        _1481 = (((cbLight._m0[_1485].z * 0.3183098733425140380859375) * _1503) * _1504) + _1459;
    }
    bool _1484 = _1464.y == 0u;
    float _1522;
    float _1524;
    float _1526;
    if (_1484)
    {
        _1522 = _1477;
        _1524 = _1479;
        _1526 = _1481;
    }
    else
    {
        uint _1630 = _1387 + 7u;
        float _1646 = (dot(vec3(cbLight._m0[_1387 + 3u].xyz), vec3(_200, _201, _202)) * 0.5) + 0.5;
        float _1647 = _1646 * _1646;
        float _3321 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0));
        float _1649 = isnan(1.0) ? _1404 : (isnan(_1404) ? 1.0 : min(_1404, 1.0));
        _1522 = (((cbLight._m0[_1630].x * 0.3183098733425140380859375) * _1648) * _1649) + _1477;
        _1524 = (((cbLight._m0[_1630].y * 0.3183098733425140380859375) * _1648) * _1649) + _1479;
        _1526 = (((cbLight._m0[_1630].z * 0.3183098733425140380859375) * _1648) * _1649) + _1481;
    }
    uint _1528 = _1387 + 8u;
    float _1534 = cbLight._m0[_1387].x + _283;
    float _1535 = cbLight._m0[_1387].y + _284;
    float _1536 = cbLight._m0[_1387].z + _285;
    float _1540 = inversesqrt(dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536)));
    float _1544 = dot(vec3(_200, _201, _202), vec3(cbLight._m0[_1387].xyz));
    float _3337 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
    float _1547 = isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0));
    float _3348 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _1548 = isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0));
    float _1549 = dot(vec3(cbLight._m0[_1387].xyz), vec3(_1534 * _1540, _1535 * _1540, _1536 * _1540));
    float _3359 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
    float _1560 = (exp2(log2(1.0 - (isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1566 = (0.5 / ((_1547 + 9.9999999392252902907785028219223e-09) + _1548)) * _1547;
    float _3370 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
    float _1568 = (isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0))) * 0.31831014156341552734375;
    uint _1582 = _1387 + 9u;
    float _1588 = cbLight._m0[_1429].x + _283;
    float _1589 = cbLight._m0[_1429].y + _284;
    float _1590 = cbLight._m0[_1429].z + _285;
    float _1594 = inversesqrt(dot(vec3(_1588, _1589, _1590), vec3(_1588, _1589, _1590)));
    float _1598 = dot(vec3(_200, _201, _202), vec3(cbLight._m0[_1429].xyz));
    float _3381 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
    float _1601 = isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0));
    float _1602 = dot(vec3(cbLight._m0[_1429].xyz), vec3(_1588 * _1594, _1589 * _1594, _1590 * _1594));
    float _3392 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
    float _1611 = (exp2(log2(1.0 - (isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1615 = (0.5 / ((_1601 + 9.9999999392252902907785028219223e-09) + _1548)) * _1601;
    float _3403 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
    float _1617 = (isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0))) * 0.31831014156341552734375;
    float _1627 = (((_1611 * cbLight._m0[_1582].x) * _1617) * _1411) + ((((cbLight._m0[_1528].x * _1379) * _1560) * _1568) * _1425);
    float _1628 = (((_1611 * cbLight._m0[_1582].y) * _1617) * _1411) + ((((cbLight._m0[_1528].y * _1380) * _1560) * _1568) * _1425);
    float _1629 = (((_1611 * cbLight._m0[_1582].z) * _1617) * _1411) + ((((cbLight._m0[_1528].z * _1381) * _1560) * _1568) * _1425);
    float _1691;
    float _1693;
    float _1695;
    if (_1466)
    {
        _1691 = _1627;
        _1693 = _1628;
        _1695 = _1629;
    }
    else
    {
        uint _1697 = _1387 + 10u;
        uint _1703 = _1387 + 2u;
        float _1709 = cbLight._m0[_1703].x + _283;
        float _1710 = cbLight._m0[_1703].y + _284;
        float _1711 = cbLight._m0[_1703].z + _285;
        float _1715 = inversesqrt(dot(vec3(_1709, _1710, _1711), vec3(_1709, _1710, _1711)));
        float _1719 = dot(vec3(_200, _201, _202), vec3(cbLight._m0[_1703].xyz));
        float _3414 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1722 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
        float _1723 = dot(vec3(cbLight._m0[_1703].xyz), vec3(_1709 * _1715, _1710 * _1715, _1711 * _1715));
        float _3425 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1732 = (exp2(log2(1.0 - (isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1736 = (0.5 / ((_1722 + 9.9999999392252902907785028219223e-09) + _1548)) * _1722;
        float _3436 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1738 = (isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))) * 0.31831014156341552734375;
        float _1739 = isnan(1.0) ? _1403 : (isnan(_1403) ? 1.0 : min(_1403, 1.0));
        _1691 = (((_1732 * cbLight._m0[_1697].x) * _1738) * _1739) + _1627;
        _1693 = (((_1732 * cbLight._m0[_1697].y) * _1738) * _1739) + _1628;
        _1695 = (((_1732 * cbLight._m0[_1697].z) * _1738) * _1739) + _1629;
    }
    float _1774;
    float _1776;
    float _1778;
    if (_1484)
    {
        _1774 = _1691;
        _1776 = _1693;
        _1778 = _1695;
    }
    else
    {
        uint _1785 = _1387 + 11u;
        uint _1791 = _1387 + 3u;
        float _1797 = cbLight._m0[_1791].x + _283;
        float _1798 = cbLight._m0[_1791].y + _284;
        float _1799 = cbLight._m0[_1791].z + _285;
        float _1803 = inversesqrt(dot(vec3(_1797, _1798, _1799), vec3(_1797, _1798, _1799)));
        float _1807 = dot(vec3(_200, _201, _202), vec3(cbLight._m0[_1791].xyz));
        float _3452 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1810 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
        float _1811 = dot(vec3(cbLight._m0[_1791].xyz), vec3(_1797 * _1803, _1798 * _1803, _1799 * _1803));
        float _3463 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1820 = (exp2(log2(1.0 - (isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1824 = (0.5 / ((_1810 + 9.9999999392252902907785028219223e-09) + _1548)) * _1810;
        float _3474 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1826 = (isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))) * 0.31831014156341552734375;
        float _1827 = isnan(1.0) ? _1404 : (isnan(_1404) ? 1.0 : min(_1404, 1.0));
        _1774 = (((_1820 * cbLight._m0[_1785].x) * _1826) * _1827) + _1691;
        _1776 = (((_1820 * cbLight._m0[_1785].y) * _1826) * _1827) + _1693;
        _1778 = (((_1820 * cbLight._m0[_1785].z) * _1826) * _1827) + _1695;
    }
    float _1961;
    float _1963;
    float _1965;
    float _1967;
    float _1969;
    float _1971;
    if (_1385.y == 0u)
    {
        float _1902 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1903 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1902;
        float _1904 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1902;
        float _1905 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1902;
        uvec4 _1917 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1918 = _1917.x;
        uint _1929 = uint((float(_1917.y) * floor(float(uint(cbSceneParam._m0[85u].y * _292) / _1918))) + floor(float(uint(cbSceneParam._m0[85u].x * _291) / _1918)));
        float _1939 = (log2(_1905 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1940 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        uint _1943 = uint(isnan(14.0) ? _1940 : (isnan(_1940) ? 14.0 : min(_1940, 14.0)));
        uvec4 _1948 = texelFetch(g_lightClusterGridBuffer, int(((_1943 << 2u) + (_1929 << 6u)) >> 2u));
        uint _1949 = _1948.x;
        uint _1950 = _1917.z;
        float _2051;
        float _2053;
        float _2055;
        float _2057;
        float _2059;
        float _2061;
        if (((((1u << ((_1950 >> 4u) & 15u)) + 4294967295u) & _1949) == 0u) || ((_1950 & 240u) == 0u))
        {
            _2051 = 0.0;
            _2053 = 0.0;
            _2055 = 0.0;
            _2057 = 0.0;
            _2059 = 0.0;
            _2061 = 0.0;
        }
        else
        {
            float _2052;
            float _2054;
            float _2056;
            float _2058;
            float _2060;
            float _2062;
            float _2193 = 0.0;
            float _2194 = 0.0;
            float _2195 = 0.0;
            float _2196 = 0.0;
            float _2197 = 0.0;
            float _2198 = 0.0;
            uint _2199 = 0u;
            uint _2208;
            bool _2209;
            for (;;)
            {
                _2208 = texelFetch(g_lightClassification, int((((_1943 << 5u) + (_1929 << 9u)) + (_2199 << 2u)) >> 2u)).x;
                _2209 = _2208 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2209)
                {
                    frontier_phi_63_pred = _2198;
                    frontier_phi_63_pred_1 = _2197;
                    frontier_phi_63_pred_2 = _2196;
                    frontier_phi_63_pred_3 = _2195;
                    frontier_phi_63_pred_4 = _2194;
                    frontier_phi_63_pred_5 = _2193;
                }
                else
                {
                    float _2317;
                    float _2318;
                    float _2319;
                    float _2320;
                    float _2321;
                    float _2322;
                    uint _2323;
                    _2317 = _2193;
                    _2318 = _2194;
                    _2319 = _2195;
                    _2320 = _2196;
                    _2321 = _2197;
                    _2322 = _2198;
                    _2323 = _2208;
                    float _2249;
                    float _2250;
                    float _2251;
                    float _2252;
                    float _2253;
                    float _2254;
                    for (;;)
                    {
                        uint _2327 = uint(findLSB(_2323)) + (_2199 << 5u);
                        uint _2324 = (_2323 + 4294967295u) & _2323;
                        uint _2329 = _2327 * 48u;
                        vec4 _2343 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2329)).x, texelFetch(g_PointLightRenderingBuffer, int(_2329 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2329 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2329 + 3u)).x));
                        uint _2349 = (_2327 * 48u) + 4u;
                        vec4 _2362 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2349)).x, texelFetch(g_PointLightRenderingBuffer, int(_2349 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2349 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2349 + 3u)).x));
                        uint _2368 = (_2327 * 48u) + 8u;
                        vec3 _2379 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2368)).x, texelFetch(g_PointLightRenderingBuffer, int(_2368 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2368 + 2u)).x));
                        float _2383 = _2343.x - _1903;
                        float _2384 = _2343.y - _1904;
                        float _2385 = _2343.z - _1905;
                        float _2386 = dot(vec3(_2383, _2384, _2385), vec3(_2383, _2384, _2385));
                        float _2389 = inversesqrt(_2386);
                        float _2398 = 1.0 - (_2386 * _2343.w);
                        float _3500 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
                        float _2399 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
                        float _2400 = sqrt(_2386) * _2362.w;
                        float _2403 = 1.39999997615814208984375 / (_2400 + 1.39999997615814208984375);
                        float _2404 = _2403 * _2403;
                        float _2407 = ((1.0 - _2404) * dot(vec3(_313, _316, _319), vec3(_2389 * _2383, _2389 * _2384, _2389 * _2385))) + _2404;
                        float _2410 = _2400 * _2400;
                        float _2414 = ((isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0))) * _2399) / ((_2410 * 0.699999988079071044921875) + 1.0);
                        float _2418 = (-0.0) - _1903;
                        float _2419 = (-0.0) - _1904;
                        float _2420 = (-0.0) - _1905;
                        float _2424 = inversesqrt(dot(vec3(_2418, _2419, _2420), vec3(_2418, _2419, _2420)));
                        float _2428 = dot(vec3(_313, _316, _319), vec3(_2424 * _2418, _2424 * _2419, _2424 * _2420));
                        float _3516 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
                        float _3527 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
                        float _2432 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
                        float _2436 = (0.5 / (((isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0))) + 9.9999999392252902907785028219223e-09) + _2432)) * _2432;
                        float _3538 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
                        float _2445 = (((isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) * 3.1415927410125732421875) / ((_2410 * 2.1991131305694580078125) + 3.141590118408203125)) * _2399;
                        _2252 = (_2414 * _2362.x) + _2320;
                        _2253 = (_2414 * _2362.y) + _2321;
                        _2254 = (_2414 * _2362.z) + _2322;
                        _2249 = (_2445 * _2379.x) + _2317;
                        _2250 = (_2445 * _2379.y) + _2318;
                        _2251 = (_2445 * _2379.z) + _2319;
                        if (_2324 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2317 = _2249;
                            _2318 = _2250;
                            _2319 = _2251;
                            _2320 = _2252;
                            _2321 = _2253;
                            _2322 = _2254;
                            _2323 = _2324;
                        }
                    }
                    frontier_phi_63_pred = _2254;
                    frontier_phi_63_pred_1 = _2253;
                    frontier_phi_63_pred_2 = _2252;
                    frontier_phi_63_pred_3 = _2251;
                    frontier_phi_63_pred_4 = _2250;
                    frontier_phi_63_pred_5 = _2249;
                }
                _2062 = frontier_phi_63_pred;
                _2060 = frontier_phi_63_pred_1;
                _2058 = frontier_phi_63_pred_2;
                _2056 = frontier_phi_63_pred_3;
                _2054 = frontier_phi_63_pred_4;
                _2052 = frontier_phi_63_pred_5;
                uint _2200 = _2199 + 1u;
                if (_2200 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2193 = _2052;
                    _2194 = _2054;
                    _2195 = _2056;
                    _2196 = _2058;
                    _2197 = _2060;
                    _2198 = _2062;
                    _2199 = _2200;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2051 = _2052;
            _2053 = _2054;
            _2055 = _2056;
            _2057 = _2058;
            _2059 = _2060;
            _2061 = _2062;
        }
        uvec4 _2065 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2066 = _2065.z;
        uint _2068 = (_2066 >> 8u) & 15u;
        float _2164;
        float _2166;
        float _2168;
        float _2170;
        float _2172;
        float _2174;
        if (((4294967295u << _2068) & _1949) == 0u)
        {
            _2164 = _2051;
            _2166 = _2053;
            _2168 = _2055;
            _2170 = _2057;
            _2172 = _2059;
            _2174 = _2061;
        }
        else
        {
            float _2189 = inversesqrt(dot(vec3(_1903, _1904, _1905), vec3(_1903, _1904, _1905)));
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2068 < ((_2066 >> 12u) & 15u))
            {
                float _2165;
                float _2167;
                float _2169;
                float _2171;
                float _2173;
                float _2175;
                float _2300 = _2051;
                float _2301 = _2053;
                float _2302 = _2055;
                float _2303 = _2057;
                float _2304 = _2059;
                float _2305 = _2061;
                uint _2306 = _2068;
                uint _2315;
                bool _2316;
                for (;;)
                {
                    _2315 = texelFetch(g_lightClassification, int((((_1943 << 5u) + (_1929 << 9u)) + (_2306 << 2u)) >> 2u)).x;
                    _2316 = _2315 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2316)
                    {
                        frontier_phi_69_pred = _2305;
                        frontier_phi_69_pred_1 = _2304;
                        frontier_phi_69_pred_2 = _2303;
                        frontier_phi_69_pred_3 = _2302;
                        frontier_phi_69_pred_4 = _2301;
                        frontier_phi_69_pred_5 = _2300;
                    }
                    else
                    {
                        float _2450;
                        float _2451;
                        float _2452;
                        float _2453;
                        float _2454;
                        float _2455;
                        float _2702;
                        float _2703;
                        float _2704;
                        float _2705;
                        float _2706;
                        float _2707;
                        float _2463 = _2300;
                        float _2464 = _2301;
                        float _2465 = _2302;
                        float _2466 = _2303;
                        float _2467 = _2304;
                        float _2468 = _2305;
                        uint _2469 = _2315;
                        uint _2470;
                        vec4 _2495;
                        float _2496;
                        vec4 _2511;
                        vec3 _2523;
                        vec4 _2539;
                        vec4 _2555;
                        float _2602;
                        bool _2603;
                        for (;;)
                        {
                            uint _2480 = ((_2306 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2469));
                            _2470 = (_2469 + 4294967295u) & _2469;
                            uint _2482 = _2480 * 40u;
                            _2495 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2482 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2482 + 3u)).x));
                            _2496 = _2495.w;
                            uint _2498 = (_2480 * 40u) + 4u;
                            _2511 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2498 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2498 + 3u)).x));
                            uint _2513 = (_2480 * 40u) + 8u;
                            _2523 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2513)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2513 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2513 + 2u)).x));
                            uint _2526 = (_2480 * 40u) + 16u;
                            _2539 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2526 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2526 + 3u)).x));
                            uint _2542 = (_2480 * 40u) + 20u;
                            _2555 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2542)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2542 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2542 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2542 + 3u)).x));
                            uint _2558 = (_2480 * 40u) + 24u;
                            vec4 _2571 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2558 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2558 + 3u)).x));
                            uint _2577 = (_2480 * 40u) + 28u;
                            vec4 _2590 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2577)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2577 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2577 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2577 + 3u)).x));
                            _2602 = fma(_1905, _2590.z, fma(_1904, _2590.y, _2590.x * _1903)) + _2590.w;
                            _2603 = !((fma(_1905, _2571.z, fma(_1904, _2571.y, _2571.x * _1903)) + _2571.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2603)
                            {
                                float _2630 = _2495.x - _1903;
                                float _2631 = _2495.y - _1904;
                                float _2632 = _2495.z - _1905;
                                float _2633 = dot(vec3(_2630, _2631, _2632), vec3(_2630, _2631, _2632));
                                float _2636 = inversesqrt(_2633);
                                float _2637 = _2636 * _2630;
                                float _2638 = _2636 * _2631;
                                float _2639 = _2636 * _2632;
                                float _2643 = 1.0 - (_2633 / (_2496 * _2496));
                                float _3549 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
                                float _2644 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
                                float _2648 = sqrt(_2633) * _2511.w;
                                float _2650 = 1.39999997615814208984375 / (_2648 + 1.39999997615814208984375);
                                float _2651 = _2650 * _2650;
                                float _2652 = 1.0 - _2651;
                                float _2654 = (_2652 * dot(vec3(_2637, _2638, _2639), vec3(_313, _316, _319))) + _2651;
                                float _2657 = _2648 * _2648;
                                float _2661 = (fma(_1905, _2539.z, fma(_1904, _2539.y, _2539.x * _1903)) + _2539.w) / _2602;
                                float _2662 = (fma(_1905, _2555.z, fma(_1904, _2555.y, _2555.x * _1903)) + _2555.w) / _2602;
                                float _2666 = 1.0 - dot(vec2(_2661, _2662), vec2(_2661, _2662));
                                float _3565 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
                                float _2667 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
                                float _2668 = _2667 * (((isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0))) * _2644) / ((_2657 * 0.699999988079071044921875) + 1.0));
                                float _2678 = dot(vec3(_313, _316, _319), vec3((-0.0) - (_1903 * _2189), (-0.0) - (_1904 * _2189), (-0.0) - (_1905 * _2189)));
                                float _3576 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
                                float _2686 = (_2652 * dot(vec3(_313, _316, _319), vec3(_2637, _2638, _2639))) + _2651;
                                float _3587 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
                                float _2687 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
                                float _2691 = (0.5 / (((isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) + 9.9999999392252902907785028219223e-09) + _2687)) * _2687;
                                float _3598 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
                                float _2698 = (_2667 * _2644) * (((isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * 3.1415927410125732421875) / ((_2657 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_75_pred = _2668 * _2511.z;
                                frontier_phi_75_pred_1 = _2668 * _2511.y;
                                frontier_phi_75_pred_2 = _2668 * _2511.x;
                                frontier_phi_75_pred_3 = _2698 * _2523.z;
                                frontier_phi_75_pred_4 = _2698 * _2523.y;
                                frontier_phi_75_pred_5 = _2698 * _2523.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _2707 = frontier_phi_75_pred;
                            _2706 = frontier_phi_75_pred_1;
                            _2705 = frontier_phi_75_pred_2;
                            _2704 = frontier_phi_75_pred_3;
                            _2703 = frontier_phi_75_pred_4;
                            _2702 = frontier_phi_75_pred_5;
                            _2453 = _2705 + _2466;
                            _2454 = _2706 + _2467;
                            _2455 = _2707 + _2468;
                            _2450 = _2702 + _2463;
                            _2451 = _2703 + _2464;
                            _2452 = _2704 + _2465;
                            if (_2470 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2463 = _2450;
                                _2464 = _2451;
                                _2465 = _2452;
                                _2466 = _2453;
                                _2467 = _2454;
                                _2468 = _2455;
                                _2469 = _2470;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2455;
                        frontier_phi_69_pred_1 = _2454;
                        frontier_phi_69_pred_2 = _2453;
                        frontier_phi_69_pred_3 = _2452;
                        frontier_phi_69_pred_4 = _2451;
                        frontier_phi_69_pred_5 = _2450;
                    }
                    _2175 = frontier_phi_69_pred;
                    _2173 = frontier_phi_69_pred_1;
                    _2171 = frontier_phi_69_pred_2;
                    _2169 = frontier_phi_69_pred_3;
                    _2167 = frontier_phi_69_pred_4;
                    _2165 = frontier_phi_69_pred_5;
                    uint _2307 = _2306 + 1u;
                    if (_2307 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2300 = _2165;
                        _2301 = _2167;
                        _2302 = _2169;
                        _2303 = _2171;
                        _2304 = _2173;
                        _2305 = _2175;
                        _2306 = _2307;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2175;
                frontier_phi_57_58_ladder_1 = _2173;
                frontier_phi_57_58_ladder_2 = _2171;
                frontier_phi_57_58_ladder_3 = _2169;
                frontier_phi_57_58_ladder_4 = _2167;
                frontier_phi_57_58_ladder_5 = _2165;
            }
            else
            {
                frontier_phi_57_58_ladder = _2061;
                frontier_phi_57_58_ladder_1 = _2059;
                frontier_phi_57_58_ladder_2 = _2057;
                frontier_phi_57_58_ladder_3 = _2055;
                frontier_phi_57_58_ladder_4 = _2053;
                frontier_phi_57_58_ladder_5 = _2051;
            }
            _2164 = frontier_phi_57_58_ladder_5;
            _2166 = frontier_phi_57_58_ladder_4;
            _2168 = frontier_phi_57_58_ladder_3;
            _2170 = frontier_phi_57_58_ladder_2;
            _2172 = frontier_phi_57_58_ladder_1;
            _2174 = frontier_phi_57_58_ladder;
        }
        float _2179 = isnan(1.0) ? _358 : (isnan(_358) ? 1.0 : min(_358, 1.0));
        _1961 = (_2179 * _2170) + _1522;
        _1963 = (_2179 * _2172) + _1524;
        _1965 = (_2179 * _2174) + _1526;
        _1967 = ((_2164 * 0.039999999105930328369140625) * _2179) + _1774;
        _1969 = ((_2166 * 0.039999999105930328369140625) * _2179) + _1776;
        _1971 = ((_2168 * 0.039999999105930328369140625) * _2179) + _1778;
    }
    else
    {
        _1961 = _1522;
        _1963 = _1524;
        _1965 = _1526;
        _1967 = _1774;
        _1969 = _1776;
        _1971 = _1778;
    }
    float _3614 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _3625 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _3636 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _3647 = isnan(0.0) ? _204 : (isnan(_204) ? 0.0 : max(_204, 0.0));
    float _1996 = cbInstanceData._m0[_332 + 6u].w * (isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0)));
    float _2001 = _291 / cbSceneParam._m0[86u].x;
    float _2002 = _292 / cbSceneParam._m0[86u].y;
    vec4 _2016 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2001, _2002, (log2((isnan(cbSceneParam._m0[77u].w) ? _223 : (isnan(_223) ? cbSceneParam._m0[77u].w : min(_223, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2018 = _2016.x;
    float _2019 = _2016.y;
    float _2020 = _2016.z;
    float _2021 = _2016.w;
    float _2113;
    float _2115;
    float _2117;
    float _2119;
    if (_223 > cbSceneParam._m0[78u].w)
    {
        float _2076 = isnan(_223) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _223 : min(cbSceneParam._m0[80u].w, _223));
        float _2077 = _2076 / _223;
        float _2088 = _2077 * _276;
        float _2089 = _277 * _2077;
        float _2090 = (-0.0) - _2089;
        float _2091 = _2077 * _278;
        float _2093 = (cbSceneParam._m0[77u].w * _2090) / _2076;
        float _2094 = _2093 + cbSceneParam._m0[79u].w;
        float _2095 = cbSceneParam._m0[79u].w - _2089;
        float _2101 = sqrt(((_2088 * _2088) + (_2089 * _2089)) + (_2091 * _2091));
        float _2104 = (1.0 - (cbSceneParam._m0[77u].w / _2076)) * _2101;
        float _2109 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2111 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2262;
        if (abs((_2090 - _2093) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2262 = ((((_2094 > 0.0) ? exp2(_2109 * _2094) : (2.0 - exp2(_2111 * _2094))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2104;
        }
        else
        {
            float _2222 = 1.0 / cbSceneParam._m0[80u].x;
            float _2223 = isnan(_2095) ? _2094 : (isnan(_2094) ? _2095 : max(_2094, _2095));
            float _2224 = isnan(_2095) ? _2094 : (isnan(_2094) ? _2095 : min(_2094, _2095));
            float _2233 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : min(_2223, 0.0));
            float _2234 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : min(_2224, 0.0));
            _2262 = ((abs(_2101 / _2090) * cbSceneParam._m0[80u].y) * ((((_2233 - _2234) * 2.0) - ((exp2(_2109 * (isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0)))) - exp2(_2109 * (isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0))))) * _2222)) - ((exp2(_2111 * _2233) - exp2(_2111 * _2234)) * _2222))) + (_2104 * cbSceneParam._m0[80u].z);
        }
        vec4 _2264 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2001, _2002, 1.0), 0.0);
        float _2273 = exp2((_2262 * (-1.44269502162933349609375)) * (1.0 - _2264.w));
        float _2274 = log2(_2273);
        float _2290 = log2(_2021);
        _2113 = (exp2(_2290 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2274 * cbSceneParam._m0[78u].x)) * _2264.x) / cbSceneParam._m0[78u].x)) + _2018;
        _2115 = (exp2(_2290 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2274 * cbSceneParam._m0[78u].y)) * _2264.y) / cbSceneParam._m0[78u].y)) + _2019;
        _2117 = (exp2(_2290 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2274 * cbSceneParam._m0[78u].z)) * _2264.z) / cbSceneParam._m0[78u].z)) + _2020;
        _2119 = _2273 * _2021;
    }
    else
    {
        _2113 = _2018;
        _2115 = _2019;
        _2117 = _2020;
        _2119 = _2021;
    }
    float _2131 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2132 = _2131 == 3.0;
    float _2134 = log2(_2119);
    float _2141 = exp2(_2134 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * (_1961 + ((isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0))) * _358))) + ((_1967 + ((isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0))) * _1137)) * cbPerFrame._m0[3u].x));
    float _2142 = exp2(_2134 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))) * (_1963 + ((isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0))) * _358))) + ((_1969 + ((isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0))) * _1137)) * cbPerFrame._m0[3u].x));
    float _2143 = exp2(_2134 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * (_1965 + ((isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0))) * _358))) + ((_1971 + ((isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0))) * _1137)) * cbPerFrame._m0[3u].x));
    float _2152 = (_2131 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2152 * (_2132 ? _2141 : (_2141 + (cbSceneParam._m0[72u].w * _2113)));
    SV_Target.y = _2152 * (_2132 ? _2142 : (_2142 + (cbSceneParam._m0[72u].w * _2115)));
    SV_Target.z = _2152 * (_2132 ? _2143 : (_2143 + (cbSceneParam._m0[72u].w * _2117)));
    SV_Target.w = _1996;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _1996;
}


