#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _700;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _162 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _163 = _162 * NORMAL.x;
    float _164 = _162 * NORMAL.y;
    float _165 = _162 * NORMAL.z;
    float _170;
    float _171;
    float _172;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _170 = (-0.0) - _163;
        _171 = (-0.0) - _164;
        _172 = (-0.0) - _165;
    }
    else
    {
        _170 = _163;
        _171 = _164;
        _172 = _165;
    }
    vec4 _186 = texture(sampler2D(M_A_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _189 = _186.x;
    float _190 = _186.y;
    float _191 = _186.z;
    float _193 = _186.w * TEXCOORD_1.z;
    float _197 = inversesqrt(dot(vec3(_170, _171, _172), vec3(_170, _171, _172)));
    float _198 = _197 * _170;
    float _199 = _197 * _171;
    float _200 = _197 * _172;
    float _2812 = isnan(0.0) ? _193 : (isnan(_193) ? 0.0 : max(_193, 0.0));
    float _202 = isnan(1.0) ? _2812 : (isnan(_2812) ? 1.0 : min(_2812, 1.0));
    float _2823 = isnan(0.0) ? _189 : (isnan(_189) ? 0.0 : max(_189, 0.0));
    float _2834 = isnan(0.0) ? _190 : (isnan(_190) ? 0.0 : max(_190, 0.0));
    float _2845 = isnan(0.0) ? _191 : (isnan(_191) ? 0.0 : max(_191, 0.0));
    float _221 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _264 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _274 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _264);
    float _275 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _264);
    float _276 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _264);
    float _280 = inversesqrt(dot(vec3(_274, _275, _276), vec3(_274, _275, _276)));
    float _281 = _274 * _280;
    float _282 = _275 * _280;
    float _283 = _276 * _280;
    float _289 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _290 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _311 = fma(_200, cbSceneParam._m0[5u].z, fma(_199, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _198));
    float _314 = fma(_200, cbSceneParam._m0[6u].z, fma(_199, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _198));
    float _317 = fma(_200, cbSceneParam._m0[7u].z, fma(_199, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _198));
    uint _330 = uint(roundEven(NORMAL.w)) * 13u;
    uint _333 = (_330 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _339 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2823 : (isnan(_2823) ? 1.0 : min(_2823, 1.0)))) * cbInstanceData._m0[_333].x;
    float _340 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2834 : (isnan(_2834) ? 1.0 : min(_2834, 1.0)))) * cbInstanceData._m0[_333].y;
    float _341 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2845 : (isnan(_2845) ? 1.0 : min(_2845, 1.0)))) * cbInstanceData._m0[_333].z;
    float _2856 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _342 = isnan(1.0) ? _2856 : (isnan(_2856) ? 1.0 : min(_2856, 1.0));
    float _2867 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _343 = isnan(1.0) ? _2867 : (isnan(_2867) ? 1.0 : min(_2867, 1.0));
    float _2878 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _344 = isnan(1.0) ? _2878 : (isnan(_2878) ? 1.0 : min(_2878, 1.0));
    vec4 _353 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _289, cbSceneParam._m0[86u].y * _290));
    float _356 = _353.x * TEXCOORD_1.w;
    float _357 = dot(vec3(_198, _199, _200), vec3(_281, _282, _283));
    float _360 = _357 * 2.0;
    float _365 = (_360 * _198) - _281;
    float _366 = (_360 * _199) - _282;
    float _367 = (_360 * _200) - _283;
    float _389 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _393 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _397 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _699;
    float _701;
    float _702;
    float _703;
    float _704;
    float _705;
    float _706;
    float _707;
    float _708;
    float _709;
    float _710;
    float _711;
    float _712;
    float _713;
    float _714;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _424 = fma(_397, cbModelParam._m0[26u].z, fma(_393, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _389));
        float _428 = fma(_397, cbModelParam._m0[27u].z, fma(_393, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _389));
        float _432 = fma(_397, cbModelParam._m0[28u].z, fma(_393, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _389));
        float _457 = _389 + _198;
        float _458 = _393 + _199;
        float _459 = _397 + _200;
        float _469 = fma(_459, cbModelParam._m0[26u].z, fma(_458, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _457)) - _424;
        float _470 = fma(_459, cbModelParam._m0[27u].z, fma(_458, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _457)) - _428;
        float _471 = fma(_459, cbModelParam._m0[28u].z, fma(_458, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _457)) - _432;
        float _475 = inversesqrt(dot(vec3(_469, _470, _471), vec3(_469, _470, _471)));
        float _488 = ((_475 * _469) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_424 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _489 = ((_475 * _470) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_428 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _490 = ((_475 * _471) / cbModelParam._m0[34u].z) + ((((((_432 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _493 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_488, _489, _490), 0.0);
        vec4 _500 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_488, _489, _490), 0.0);
        vec4 _507 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_488, _489, _490), 0.0);
        vec4 _514 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_488, _489, _490), 0.0);
        float _527 = exp2((_493.w + (-0.5)) * 20.0) * 2.0;
        float _528 = _527 * (_493.x + (-0.5));
        float _529 = _527 * (_493.y + (-0.5));
        float _530 = _527 * (_493.z + (-0.5));
        float _537 = exp2((_500.w + (-0.5)) * 20.0) * 2.0;
        float _538 = _537 * (_500.x + (-0.5));
        float _539 = _537 * (_500.y + (-0.5));
        float _540 = _537 * (_500.z + (-0.5));
        float _547 = exp2((_507.w + (-0.5)) * 20.0) * 2.0;
        float _548 = _547 * (_507.x + (-0.5));
        float _549 = _547 * (_507.y + (-0.5));
        float _550 = _547 * (_507.z + (-0.5));
        float _557 = exp2((_514.w + (-0.5)) * 20.0) * 2.0;
        float _558 = _557 * (_514.x + (-0.5));
        float _559 = _557 * (_514.y + (-0.5));
        float _560 = _557 * (_514.z + (-0.5));
        float _561 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
        float _562 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
        float _563 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
        float _564 = _528 * 0.5;
        float _565 = _538 * 0.5;
        float _566 = _548 * 0.5;
        float _567 = dot(vec3(_564, _565, _566), vec3(_564, _565, _566));
        float _572 = (_567 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_567);
        float _581 = (dot(vec3(_198, _199, _200), vec3(_572 * _564, _572 * _565, _572 * _566)) + 1.0) * 0.5;
        float _2904 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
        float _591 = sqrt(((_565 * _565) + (_564 * _564)) + (_566 * _566)) / (_561 + 9.9999997473787516355514526367188e-06);
        float _2915 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
        float _592 = isnan(1.0) ? _2915 : (isnan(_2915) ? 1.0 : min(_2915, 1.0));
        float _593 = _592 * 2.0;
        float _597 = (1.0 - _592) / (_592 + 1.0);
        float _2926 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
        float _598 = isnan(1.0) ? _2926 : (isnan(_2926) ? 1.0 : min(_2926, 1.0));
        float _607 = ((((1.0 - _598) * (_593 + 2.0)) * exp2(log2(isnan(1.0) ? _2904 : (isnan(_2904) ? 1.0 : min(_2904, 1.0))) * (_593 + 1.0))) + _598) * _561;
        float _608 = _529 * 0.5;
        float _609 = _539 * 0.5;
        float _610 = _549 * 0.5;
        float _611 = dot(vec3(_608, _609, _610), vec3(_608, _609, _610));
        float _616 = (_611 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_611);
        float _624 = (dot(vec3(_198, _199, _200), vec3(_616 * _608, _616 * _609, _616 * _610)) + 1.0) * 0.5;
        float _2937 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
        float _633 = sqrt(((_609 * _609) + (_608 * _608)) + (_610 * _610)) / (_562 + 9.9999997473787516355514526367188e-06);
        float _2948 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
        float _634 = isnan(1.0) ? _2948 : (isnan(_2948) ? 1.0 : min(_2948, 1.0));
        float _635 = _634 * 2.0;
        float _639 = (1.0 - _634) / (_634 + 1.0);
        float _2959 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
        float _640 = isnan(1.0) ? _2959 : (isnan(_2959) ? 1.0 : min(_2959, 1.0));
        float _649 = ((((1.0 - _640) * (_635 + 2.0)) * exp2(log2(isnan(1.0) ? _2937 : (isnan(_2937) ? 1.0 : min(_2937, 1.0))) * (_635 + 1.0))) + _640) * _562;
        float _650 = _530 * 0.5;
        float _651 = _540 * 0.5;
        float _652 = _550 * 0.5;
        float _653 = dot(vec3(_650, _651, _652), vec3(_650, _651, _652));
        float _658 = (_653 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_653);
        float _666 = (dot(vec3(_198, _199, _200), vec3(_658 * _650, _658 * _651, _658 * _652)) + 1.0) * 0.5;
        float _2970 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
        float _675 = sqrt(((_651 * _651) + (_650 * _650)) + (_652 * _652)) / (_563 + 9.9999997473787516355514526367188e-06);
        float _2981 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
        float _676 = isnan(1.0) ? _2981 : (isnan(_2981) ? 1.0 : min(_2981, 1.0));
        float _677 = _676 * 2.0;
        float _681 = (1.0 - _676) / (_676 + 1.0);
        float _2992 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
        float _682 = isnan(1.0) ? _2992 : (isnan(_2992) ? 1.0 : min(_2992, 1.0));
        float _691 = ((((1.0 - _682) * (_677 + 2.0)) * exp2(log2(isnan(1.0) ? _2970 : (isnan(_2970) ? 1.0 : min(_2970, 1.0))) * (_677 + 1.0))) + _682) * _563;
        _699 = _530;
        _701 = _529;
        _702 = _528;
        _703 = _540;
        _704 = _539;
        _705 = _538;
        _706 = _550;
        _707 = _549;
        _708 = _548;
        _709 = _563;
        _710 = _562;
        _711 = _561;
        _712 = cbModelParam._m0[36u].z * (isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0)));
        _713 = cbModelParam._m0[36u].z * (isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0)));
        _714 = cbModelParam._m0[36u].z * (isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0)));
    }
    else
    {
        _699 = _700;
        _701 = _700;
        _702 = _700;
        _703 = _700;
        _704 = _700;
        _705 = _700;
        _706 = _700;
        _707 = _700;
        _708 = _700;
        _709 = _700;
        _710 = _700;
        _711 = _700;
        _712 = 0.0;
        _713 = 0.0;
        _714 = 0.0;
    }
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _740 = fma(_397, cbModelParam._m0[30u].z, fma(_393, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _389));
        float _744 = fma(_397, cbModelParam._m0[31u].z, fma(_393, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _389));
        float _748 = fma(_397, cbModelParam._m0[32u].z, fma(_393, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _389));
        float _771 = _389 + _198;
        float _772 = _393 + _199;
        float _773 = _397 + _200;
        float _783 = fma(_773, cbModelParam._m0[30u].z, fma(_772, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _771)) - _740;
        float _784 = fma(_773, cbModelParam._m0[31u].z, fma(_772, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _771)) - _744;
        float _785 = fma(_773, cbModelParam._m0[32u].z, fma(_772, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _771)) - _748;
        float _789 = inversesqrt(dot(vec3(_783, _784, _785), vec3(_783, _784, _785)));
        float _802 = ((_789 * _783) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_740 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _803 = ((_789 * _784) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_744 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _804 = ((_789 * _785) / cbModelParam._m0[35u].z) + ((((((_748 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _806 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_802, _803, _804), 0.0);
        vec4 _813 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_802, _803, _804), 0.0);
        vec4 _820 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_802, _803, _804), 0.0);
        vec4 _827 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_802, _803, _804), 0.0);
        float _839 = exp2((_806.w + (-0.5)) * 20.0) * 2.0;
        float _840 = _839 * (_806.x + (-0.5));
        float _841 = _839 * (_806.y + (-0.5));
        float _842 = _839 * (_806.z + (-0.5));
        float _849 = exp2((_813.w + (-0.5)) * 20.0) * 2.0;
        float _850 = _849 * (_813.x + (-0.5));
        float _851 = _849 * (_813.y + (-0.5));
        float _852 = _849 * (_813.z + (-0.5));
        float _859 = exp2((_820.w + (-0.5)) * 20.0) * 2.0;
        float _860 = _859 * (_820.x + (-0.5));
        float _861 = _859 * (_820.y + (-0.5));
        float _862 = _859 * (_820.z + (-0.5));
        float _869 = exp2((_827.w + (-0.5)) * 20.0) * 2.0;
        float _870 = _869 * (_827.x + (-0.5));
        float _871 = _869 * (_827.y + (-0.5));
        float _872 = _869 * (_827.z + (-0.5));
        float _873 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _874 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _875 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _876 = _840 * 0.5;
        float _877 = _850 * 0.5;
        float _878 = _860 * 0.5;
        float _879 = dot(vec3(_876, _877, _878), vec3(_876, _877, _878));
        float _884 = (_879 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_879);
        float _892 = (dot(vec3(_198, _199, _200), vec3(_884 * _876, _884 * _877, _884 * _878)) + 1.0) * 0.5;
        float _3033 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _901 = sqrt(((_877 * _877) + (_876 * _876)) + (_878 * _878)) / (_873 + 9.9999997473787516355514526367188e-06);
        float _3044 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3044 : (isnan(_3044) ? 1.0 : min(_3044, 1.0));
        float _903 = _902 * 2.0;
        float _907 = (1.0 - _902) / (_902 + 1.0);
        float _3055 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3055 : (isnan(_3055) ? 1.0 : min(_3055, 1.0));
        float _917 = ((((1.0 - _908) * (_903 + 2.0)) * exp2(log2(isnan(1.0) ? _3033 : (isnan(_3033) ? 1.0 : min(_3033, 1.0))) * (_903 + 1.0))) + _908) * _873;
        float _918 = _841 * 0.5;
        float _919 = _851 * 0.5;
        float _920 = _861 * 0.5;
        float _921 = dot(vec3(_918, _919, _920), vec3(_918, _919, _920));
        float _926 = (_921 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_921);
        float _934 = (dot(vec3(_198, _199, _200), vec3(_926 * _918, _926 * _919, _926 * _920)) + 1.0) * 0.5;
        float _3066 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _943 = sqrt(((_919 * _919) + (_918 * _918)) + (_920 * _920)) / (_874 + 9.9999997473787516355514526367188e-06);
        float _3077 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3077 : (isnan(_3077) ? 1.0 : min(_3077, 1.0));
        float _945 = _944 * 2.0;
        float _949 = (1.0 - _944) / (_944 + 1.0);
        float _3088 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3088 : (isnan(_3088) ? 1.0 : min(_3088, 1.0));
        float _959 = ((((1.0 - _950) * (_945 + 2.0)) * exp2(log2(isnan(1.0) ? _3066 : (isnan(_3066) ? 1.0 : min(_3066, 1.0))) * (_945 + 1.0))) + _950) * _874;
        float _960 = _842 * 0.5;
        float _961 = _852 * 0.5;
        float _962 = _862 * 0.5;
        float _963 = dot(vec3(_960, _961, _962), vec3(_960, _961, _962));
        float _968 = (_963 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_963);
        float _976 = (dot(vec3(_198, _199, _200), vec3(_968 * _960, _968 * _961, _968 * _962)) + 1.0) * 0.5;
        float _3099 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _985 = sqrt(((_961 * _961) + (_960 * _960)) + (_962 * _962)) / (_875 + 9.9999997473787516355514526367188e-06);
        float _3110 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3110 : (isnan(_3110) ? 1.0 : min(_3110, 1.0));
        float _987 = _986 * 2.0;
        float _991 = (1.0 - _986) / (_986 + 1.0);
        float _3121 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3121 : (isnan(_3121) ? 1.0 : min(_3121, 1.0));
        float _1001 = ((((1.0 - _992) * (_987 + 2.0)) * exp2(log2(isnan(1.0) ? _3099 : (isnan(_3099) ? 1.0 : min(_3099, 1.0))) * (_987 + 1.0))) + _992) * _875;
        _1009 = _842;
        _1010 = _841;
        _1011 = _840;
        _1012 = _852;
        _1013 = _851;
        _1014 = _850;
        _1015 = _862;
        _1016 = _861;
        _1017 = _860;
        _1018 = _875;
        _1019 = _874;
        _1020 = _873;
        _1021 = cbModelParam._m0[36u].w * (isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0)));
        _1022 = cbModelParam._m0[36u].w * (isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0)));
        _1023 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0)));
    }
    else
    {
        _1009 = _700;
        _1010 = _700;
        _1011 = _700;
        _1012 = _700;
        _1013 = _700;
        _1014 = _700;
        _1015 = _700;
        _1016 = _700;
        _1017 = _700;
        _1018 = _700;
        _1019 = _700;
        _1020 = _700;
        _1021 = 0.0;
        _1022 = 0.0;
        _1023 = 0.0;
    }
    float _1033 = (cbModelParam._m0[1u].x * (_1021 - _712)) + _712;
    float _1034 = (cbModelParam._m0[1u].x * (_1022 - _713)) + _713;
    float _1035 = (cbModelParam._m0[1u].x * (_1023 - _714)) + _714;
    float _1056 = fma(_1035, cbSceneParam._m0[89u].z, fma(_1034, cbSceneParam._m0[89u].y, _1033 * cbSceneParam._m0[89u].x));
    float _1059 = fma(_1035, cbSceneParam._m0[90u].z, fma(_1034, cbSceneParam._m0[90u].y, _1033 * cbSceneParam._m0[90u].x));
    float _1062 = fma(_1035, cbSceneParam._m0[91u].z, fma(_1034, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1033));
    float _1077 = _365 * 0.5;
    float _1078 = _366 * 0.5;
    float _1079 = _367 * 0.5;
    float _1080 = dot(vec4(_1077, _1078, _1079, 1.0), vec4(_1011, _1014, _1017, _1020));
    float _1083 = dot(vec4(_1077, _1078, _1079, 1.0), vec4(_1010, _1013, _1016, _1019));
    float _1086 = dot(vec4(_1077, _1078, _1079, 1.0), vec4(_1009, _1012, _1015, _1018));
    float _1120;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1093 = dot(vec4(_1077, _1078, _1079, 1.0), vec4(_699, _703, _706, _709));
        float _1097 = dot(vec4(_1077, _1078, _1079, 1.0), vec4(_701, _704, _707, _710));
        float _1101 = dot(vec4(_1077, _1078, _1079, 1.0), vec4(_702, _705, _708, _711));
        float _1108 = dot(vec4(cbModelParam._m0[39u]), vec4(_1077, _1078, _1079, 1.0));
        _1120 = dot(vec3(isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)), isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0)), isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1108) ? 0.0 : (isnan(0.0) ? _1108 : max(0.0, _1108))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1120 = 1.0;
    }
    float _1131;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1122 = dot(vec4(cbModelParam._m0[40u]), vec4(_1077, _1078, _1079, 1.0));
        _1131 = dot(vec3(isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0)), isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0)), isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1122) ? 0.0 : (isnan(0.0) ? _1122 : max(0.0, _1122))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1131 = 1.0;
    }
    float _1135 = (_1131 * cbModelParam._m0[1u].x) + (_1120 * (1.0 - cbModelParam._m0[1u].x));
    float _1144 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1226;
    float _1228;
    float _1230;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1193 = fma(_397, cbModelParam._m0[13u].z, fma(_393, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _389)) + cbModelParam._m0[13u].w;
        float _1197 = fma(_397, cbModelParam._m0[14u].z, fma(_393, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _389)) + cbModelParam._m0[14u].w;
        float _1201 = fma(_397, cbModelParam._m0[15u].z, fma(_393, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _389)) + cbModelParam._m0[15u].w;
        float _1204 = fma(_367, cbModelParam._m0[13u].z, fma(_366, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _365));
        float _1207 = fma(_367, cbModelParam._m0[14u].z, fma(_366, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _365));
        float _1210 = fma(_367, cbModelParam._m0[15u].z, fma(_366, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _365));
        float _1236;
        if (_1204 > 0.0)
        {
            _1236 = abs((1.0 - _1193) / _1204);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1204 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1193 + 1.0) / _1204);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1236 = frontier_phi_16_14_ladder;
        }
        float _1444;
        if (_1207 > 0.0)
        {
            _1444 = abs((1.0 - _1197) / _1207);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1207 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1197 + 1.0) / _1207);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1444 = frontier_phi_25_21_ladder;
        }
        float _1633;
        if (_1210 > 0.0)
        {
            _1633 = abs((1.0 - _1201) / _1210);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1210 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1201 + 1.0) / _1210);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1633 = frontier_phi_37_32_ladder;
        }
        float _1635 = isnan(_1444) ? _1236 : (isnan(_1236) ? _1444 : min(_1236, _1444));
        float _1636 = isnan(_1633) ? _1635 : (isnan(_1635) ? _1633 : min(_1635, _1633));
        float _1640 = (_1636 * _1204) + _1193;
        float _1641 = (_1636 * _1207) + _1197;
        float _1642 = (_1636 * _1210) + _1201;
        float _1643 = _1636 * 9.9999997473787516355514526367188e-05;
        float _1645 = (-1.0) - _1643;
        float _1647 = _1643 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1642 > _1647) || ((_1642 < _1645) || ((_1641 > _1647) || ((_1641 < _1645) || ((_1640 < _1645) || (_1640 > _1647))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1739 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1642, cbModelParam._m0[9u].z, fma(_1641, cbModelParam._m0[9u].y, _1640 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1642, cbModelParam._m0[10u].z, fma(_1641, cbModelParam._m0[10u].y, _1640 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1642, cbModelParam._m0[11u].z, fma(_1641, cbModelParam._m0[11u].y, _1640 * cbModelParam._m0[11u].x))), _1144);
            frontier_phi_15_37_ladder = _1739.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1739.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1739.x * cbModelParam._m0[1u].y;
        }
        _1226 = frontier_phi_15_37_ladder_2;
        _1228 = frontier_phi_15_37_ladder_1;
        _1230 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1214 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_365, _366, _367), _1144);
        _1226 = _1214.x * cbModelParam._m0[1u].y;
        _1228 = _1214.y * cbModelParam._m0[1u].y;
        _1230 = _1214.z * cbModelParam._m0[1u].y;
    }
    float _1233 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1326;
    float _1328;
    float _1330;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1290 = fma(_397, cbModelParam._m0[21u].z, fma(_393, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _389)) + cbModelParam._m0[21u].w;
        float _1294 = fma(_397, cbModelParam._m0[22u].z, fma(_393, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _389)) + cbModelParam._m0[22u].w;
        float _1298 = fma(_397, cbModelParam._m0[23u].z, fma(_393, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _389)) + cbModelParam._m0[23u].w;
        float _1301 = fma(_367, cbModelParam._m0[21u].z, fma(_366, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _365));
        float _1304 = fma(_367, cbModelParam._m0[22u].z, fma(_366, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _365));
        float _1307 = fma(_367, cbModelParam._m0[23u].z, fma(_366, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _365));
        float _1449;
        if (_1301 > 0.0)
        {
            _1449 = abs((1.0 - _1290) / _1301);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1301 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1290 + 1.0) / _1301);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1449 = frontier_phi_27_23_ladder;
        }
        float _1660;
        if (_1304 > 0.0)
        {
            _1660 = abs((1.0 - _1294) / _1304);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1304 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1294 + 1.0) / _1304);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1660 = frontier_phi_39_34_ladder;
        }
        float _1811;
        if (_1307 > 0.0)
        {
            _1811 = abs((1.0 - _1298) / _1307);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1307 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1298 + 1.0) / _1307);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _1811 = frontier_phi_48_45_ladder;
        }
        float _1813 = isnan(_1660) ? _1449 : (isnan(_1449) ? _1660 : min(_1449, _1660));
        float _1814 = isnan(_1811) ? _1813 : (isnan(_1813) ? _1811 : min(_1813, _1811));
        float _1818 = (_1814 * _1301) + _1290;
        float _1819 = (_1814 * _1304) + _1294;
        float _1820 = (_1814 * _1307) + _1298;
        float _1821 = _1814 * 9.9999997473787516355514526367188e-05;
        float _1822 = (-1.0) - _1821;
        float _1824 = _1821 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1820 > _1824) || ((_1820 < _1822) || ((_1819 > _1824) || ((_1819 < _1822) || ((_1818 < _1822) || (_1818 > _1824))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2020 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1820, cbModelParam._m0[17u].z, fma(_1819, cbModelParam._m0[17u].y, _1818 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1820, cbModelParam._m0[18u].z, fma(_1819, cbModelParam._m0[18u].y, _1818 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1820, cbModelParam._m0[19u].z, fma(_1819, cbModelParam._m0[19u].y, _1818 * cbModelParam._m0[19u].x))), _1233);
            frontier_phi_24_48_ladder = _2020.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2020.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2020.x * cbModelParam._m0[1u].z;
        }
        _1326 = frontier_phi_24_48_ladder_2;
        _1328 = frontier_phi_24_48_ladder_1;
        _1330 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1310 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_365, _366, _367), _1233);
        _1326 = _1310.x * cbModelParam._m0[1u].z;
        _1328 = _1310.y * cbModelParam._m0[1u].z;
        _1330 = _1310.z * cbModelParam._m0[1u].z;
    }
    float _1342 = _356 * 0.01200000010430812835693359375;
    float _1344 = _1342 * ((cbModelParam._m0[1u].w * (_1326 - _1226)) + _1226);
    float _1345 = _1342 * ((cbModelParam._m0[1u].w * (_1328 - _1228)) + _1228);
    float _1346 = _1342 * ((cbModelParam._m0[1u].w * (_1330 - _1230)) + _1230);
    float _1349 = fma(_1346, cbSceneParam._m0[89u].z, fma(_1345, cbSceneParam._m0[89u].y, _1344 * cbSceneParam._m0[89u].x));
    float _1352 = fma(_1346, cbSceneParam._m0[90u].z, fma(_1345, cbSceneParam._m0[90u].y, _1344 * cbSceneParam._m0[90u].x));
    float _1355 = fma(_1346, cbSceneParam._m0[91u].z, fma(_1345, cbSceneParam._m0[91u].y, _1344 * cbSceneParam._m0[91u].x));
    uvec4 _1365 = floatBitsToUint(cbInstanceData._m0[_330 + 5u]);
    uint _1367 = _1365.x * 14u;
    uint _1368 = _1367 + 13u;
    float _1375 = _356 + (-1.0);
    float _1381 = (cbLight._m0[_1368].x * _1375) + 1.0;
    float _1382 = (cbLight._m0[_1368].y * _1375) + 1.0;
    float _1383 = (cbLight._m0[_1368].z * _1375) + 1.0;
    float _1384 = (cbLight._m0[_1368].w * _1375) + 1.0;
    uint _1385 = _1367 + 5u;
    float _1391 = isnan(1.0) ? _1382 : (isnan(_1382) ? 1.0 : min(_1382, 1.0));
    uint _1395 = _1367 + 4u;
    float _1402 = isnan(1.0) ? _1381 : (isnan(_1381) ? 1.0 : min(_1381, 1.0));
    uint _1406 = _1367 | 1u;
    float _1417 = dot(vec3(cbLight._m0[_1367].xyz), vec3(_198, _199, _200));
    float _1420 = dot(vec3(cbLight._m0[_1406].xyz), vec3(_198, _199, _200));
    float _3257 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
    float _3268 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
    float _1425 = (isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0))) * 0.3183098733425140380859375;
    float _1427 = (isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0))) * 0.3183098733425140380859375;
    float _1434 = ((cbLight._m0[_1385].x * _1391) * _1427) + ((cbLight._m0[_1395].x * _1402) * _1425);
    float _1435 = ((_1391 * cbLight._m0[_1385].y) * _1427) + ((_1402 * cbLight._m0[_1395].y) * _1425);
    float _1436 = ((_1391 * cbLight._m0[_1385].z) * _1427) + ((_1402 * cbLight._m0[_1395].z) * _1425);
    uvec4 _1441 = floatBitsToUint(cbLight._m0[_1367 + 12u]);
    bool _1443 = _1441.x == 0u;
    float _1454;
    float _1456;
    float _1458;
    if (_1443)
    {
        _1454 = _1434;
        _1456 = _1435;
        _1458 = _1436;
    }
    else
    {
        uint _1462 = _1367 + 6u;
        float _1478 = (dot(vec3(cbLight._m0[_1367 + 2u].xyz), vec3(_198, _199, _200)) * 0.5) + 0.5;
        float _1479 = _1478 * _1478;
        float _3279 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0));
        float _1481 = isnan(1.0) ? _1383 : (isnan(_1383) ? 1.0 : min(_1383, 1.0));
        _1454 = (((cbLight._m0[_1462].x * 0.3183098733425140380859375) * _1480) * _1481) + _1434;
        _1456 = (((cbLight._m0[_1462].y * 0.3183098733425140380859375) * _1480) * _1481) + _1435;
        _1458 = (((cbLight._m0[_1462].z * 0.3183098733425140380859375) * _1480) * _1481) + _1436;
    }
    bool _1461 = _1441.y == 0u;
    float _1499;
    float _1501;
    float _1503;
    if (_1461)
    {
        _1499 = _1454;
        _1501 = _1456;
        _1503 = _1458;
    }
    else
    {
        uint _1604 = _1367 + 7u;
        float _1620 = (dot(vec3(cbLight._m0[_1367 + 3u].xyz), vec3(_198, _199, _200)) * 0.5) + 0.5;
        float _1621 = _1620 * _1620;
        float _3295 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0));
        float _1623 = isnan(1.0) ? _1384 : (isnan(_1384) ? 1.0 : min(_1384, 1.0));
        _1499 = (((cbLight._m0[_1604].x * 0.3183098733425140380859375) * _1622) * _1623) + _1454;
        _1501 = (((cbLight._m0[_1604].y * 0.3183098733425140380859375) * _1622) * _1623) + _1456;
        _1503 = (((cbLight._m0[_1604].z * 0.3183098733425140380859375) * _1622) * _1623) + _1458;
    }
    uint _1505 = _1367 + 8u;
    float _1511 = cbLight._m0[_1367].x + _281;
    float _1512 = cbLight._m0[_1367].y + _282;
    float _1513 = cbLight._m0[_1367].z + _283;
    float _1517 = inversesqrt(dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513)));
    float _1521 = dot(vec3(_198, _199, _200), vec3(cbLight._m0[_1367].xyz));
    float _3311 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
    float _1524 = isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0));
    float _3322 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _1525 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
    float _1526 = dot(vec3(cbLight._m0[_1367].xyz), vec3(_1511 * _1517, _1512 * _1517, _1513 * _1517));
    float _3333 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
    float _1537 = (exp2(log2(1.0 - (isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1543 = (0.5 / ((_1524 + 9.9999999392252902907785028219223e-09) + _1525)) * _1524;
    float _3344 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
    float _1545 = (isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0))) * 0.31831014156341552734375;
    uint _1556 = _1367 + 9u;
    float _1562 = cbLight._m0[_1406].x + _281;
    float _1563 = cbLight._m0[_1406].y + _282;
    float _1564 = cbLight._m0[_1406].z + _283;
    float _1568 = inversesqrt(dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564)));
    float _1572 = dot(vec3(_198, _199, _200), vec3(cbLight._m0[_1406].xyz));
    float _3355 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
    float _1575 = isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0));
    float _1576 = dot(vec3(cbLight._m0[_1406].xyz), vec3(_1562 * _1568, _1563 * _1568, _1564 * _1568));
    float _3366 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
    float _1585 = (exp2(log2(1.0 - (isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1589 = (0.5 / ((_1575 + 9.9999999392252902907785028219223e-09) + _1525)) * _1575;
    float _3377 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
    float _1591 = (isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0))) * 0.31831014156341552734375;
    float _1601 = (((_1585 * cbLight._m0[_1556].x) * _1591) * _1391) + (((_1537 * cbLight._m0[_1505].x) * _1545) * _1402);
    float _1602 = (((_1585 * cbLight._m0[_1556].y) * _1591) * _1391) + (((_1537 * cbLight._m0[_1505].y) * _1545) * _1402);
    float _1603 = (((_1585 * cbLight._m0[_1556].z) * _1591) * _1391) + (((_1537 * cbLight._m0[_1505].z) * _1545) * _1402);
    float _1665;
    float _1667;
    float _1669;
    if (_1443)
    {
        _1665 = _1601;
        _1667 = _1602;
        _1669 = _1603;
    }
    else
    {
        uint _1671 = _1367 + 10u;
        uint _1677 = _1367 + 2u;
        float _1683 = cbLight._m0[_1677].x + _281;
        float _1684 = cbLight._m0[_1677].y + _282;
        float _1685 = cbLight._m0[_1677].z + _283;
        float _1689 = inversesqrt(dot(vec3(_1683, _1684, _1685), vec3(_1683, _1684, _1685)));
        float _1693 = dot(vec3(_198, _199, _200), vec3(cbLight._m0[_1677].xyz));
        float _3388 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1696 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
        float _1697 = dot(vec3(cbLight._m0[_1677].xyz), vec3(_1683 * _1689, _1684 * _1689, _1685 * _1689));
        float _3399 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1706 = (exp2(log2(1.0 - (isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1710 = (0.5 / ((_1696 + 9.9999999392252902907785028219223e-09) + _1525)) * _1696;
        float _3410 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1712 = (isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0))) * 0.31831014156341552734375;
        float _1713 = isnan(1.0) ? _1383 : (isnan(_1383) ? 1.0 : min(_1383, 1.0));
        _1665 = (((_1706 * cbLight._m0[_1671].x) * _1712) * _1713) + _1601;
        _1667 = (((_1706 * cbLight._m0[_1671].y) * _1712) * _1713) + _1602;
        _1669 = (((_1706 * cbLight._m0[_1671].z) * _1712) * _1713) + _1603;
    }
    float _1748;
    float _1750;
    float _1752;
    if (_1461)
    {
        _1748 = _1665;
        _1750 = _1667;
        _1752 = _1669;
    }
    else
    {
        uint _1759 = _1367 + 11u;
        uint _1765 = _1367 + 3u;
        float _1771 = cbLight._m0[_1765].x + _281;
        float _1772 = cbLight._m0[_1765].y + _282;
        float _1773 = cbLight._m0[_1765].z + _283;
        float _1777 = inversesqrt(dot(vec3(_1771, _1772, _1773), vec3(_1771, _1772, _1773)));
        float _1781 = dot(vec3(_198, _199, _200), vec3(cbLight._m0[_1765].xyz));
        float _3426 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1784 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
        float _1785 = dot(vec3(cbLight._m0[_1765].xyz), vec3(_1771 * _1777, _1772 * _1777, _1773 * _1777));
        float _3437 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1794 = (exp2(log2(1.0 - (isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1798 = (0.5 / ((_1784 + 9.9999999392252902907785028219223e-09) + _1525)) * _1784;
        float _3448 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1800 = (isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0))) * 0.31831014156341552734375;
        float _1801 = isnan(1.0) ? _1384 : (isnan(_1384) ? 1.0 : min(_1384, 1.0));
        _1748 = (((_1794 * cbLight._m0[_1759].x) * _1800) * _1801) + _1665;
        _1750 = (((_1794 * cbLight._m0[_1759].y) * _1800) * _1801) + _1667;
        _1752 = (((_1794 * cbLight._m0[_1759].z) * _1800) * _1801) + _1669;
    }
    float _1935;
    float _1937;
    float _1939;
    float _1941;
    float _1943;
    float _1945;
    if (_1365.y == 0u)
    {
        float _1876 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1877 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1876;
        float _1878 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1876;
        float _1879 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1876;
        uvec4 _1891 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1892 = _1891.x;
        uint _1903 = uint((float(_1891.y) * floor(float(uint(cbSceneParam._m0[85u].y * _290) / _1892))) + floor(float(uint(cbSceneParam._m0[85u].x * _289) / _1892)));
        float _1913 = (log2(_1879 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1914 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
        uint _1917 = uint(isnan(14.0) ? _1914 : (isnan(_1914) ? 14.0 : min(_1914, 14.0)));
        uvec4 _1922 = texelFetch(g_lightClusterGridBuffer, int(((_1917 << 2u) + (_1903 << 6u)) >> 2u));
        uint _1923 = _1922.x;
        uint _1924 = _1891.z;
        float _2025;
        float _2027;
        float _2029;
        float _2031;
        float _2033;
        float _2035;
        if (((((1u << ((_1924 >> 4u) & 15u)) + 4294967295u) & _1923) == 0u) || ((_1924 & 240u) == 0u))
        {
            _2025 = 0.0;
            _2027 = 0.0;
            _2029 = 0.0;
            _2031 = 0.0;
            _2033 = 0.0;
            _2035 = 0.0;
        }
        else
        {
            float _2026;
            float _2028;
            float _2030;
            float _2032;
            float _2034;
            float _2036;
            float _2167 = 0.0;
            float _2168 = 0.0;
            float _2169 = 0.0;
            float _2170 = 0.0;
            float _2171 = 0.0;
            float _2172 = 0.0;
            uint _2173 = 0u;
            uint _2182;
            bool _2183;
            for (;;)
            {
                _2182 = texelFetch(g_lightClassification, int((((_1917 << 5u) + (_1903 << 9u)) + (_2173 << 2u)) >> 2u)).x;
                _2183 = _2182 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2183)
                {
                    frontier_phi_63_pred = _2172;
                    frontier_phi_63_pred_1 = _2171;
                    frontier_phi_63_pred_2 = _2170;
                    frontier_phi_63_pred_3 = _2169;
                    frontier_phi_63_pred_4 = _2168;
                    frontier_phi_63_pred_5 = _2167;
                }
                else
                {
                    float _2291;
                    float _2292;
                    float _2293;
                    float _2294;
                    float _2295;
                    float _2296;
                    uint _2297;
                    _2291 = _2167;
                    _2292 = _2168;
                    _2293 = _2169;
                    _2294 = _2170;
                    _2295 = _2171;
                    _2296 = _2172;
                    _2297 = _2182;
                    float _2223;
                    float _2224;
                    float _2225;
                    float _2226;
                    float _2227;
                    float _2228;
                    for (;;)
                    {
                        uint _2301 = uint(findLSB(_2297)) + (_2173 << 5u);
                        uint _2298 = (_2297 + 4294967295u) & _2297;
                        uint _2303 = _2301 * 48u;
                        vec4 _2317 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2303)).x, texelFetch(g_PointLightRenderingBuffer, int(_2303 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2303 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2303 + 3u)).x));
                        uint _2323 = (_2301 * 48u) + 4u;
                        vec4 _2336 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2323)).x, texelFetch(g_PointLightRenderingBuffer, int(_2323 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2323 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2323 + 3u)).x));
                        uint _2342 = (_2301 * 48u) + 8u;
                        vec3 _2353 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2342)).x, texelFetch(g_PointLightRenderingBuffer, int(_2342 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2342 + 2u)).x));
                        float _2357 = _2317.x - _1877;
                        float _2358 = _2317.y - _1878;
                        float _2359 = _2317.z - _1879;
                        float _2360 = dot(vec3(_2357, _2358, _2359), vec3(_2357, _2358, _2359));
                        float _2363 = inversesqrt(_2360);
                        float _2372 = 1.0 - (_2360 * _2317.w);
                        float _3474 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
                        float _2373 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
                        float _2374 = sqrt(_2360) * _2336.w;
                        float _2377 = 1.39999997615814208984375 / (_2374 + 1.39999997615814208984375);
                        float _2378 = _2377 * _2377;
                        float _2381 = ((1.0 - _2378) * dot(vec3(_311, _314, _317), vec3(_2363 * _2357, _2363 * _2358, _2363 * _2359))) + _2378;
                        float _2384 = _2374 * _2374;
                        float _2388 = ((isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0))) * _2373) / ((_2384 * 0.699999988079071044921875) + 1.0);
                        float _2392 = (-0.0) - _1877;
                        float _2393 = (-0.0) - _1878;
                        float _2394 = (-0.0) - _1879;
                        float _2398 = inversesqrt(dot(vec3(_2392, _2393, _2394), vec3(_2392, _2393, _2394)));
                        float _2402 = dot(vec3(_311, _314, _317), vec3(_2398 * _2392, _2398 * _2393, _2398 * _2394));
                        float _3490 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
                        float _3501 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
                        float _2406 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
                        float _2410 = (0.5 / (((isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0))) + 9.9999999392252902907785028219223e-09) + _2406)) * _2406;
                        float _3512 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
                        float _2419 = (((isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0))) * 3.1415927410125732421875) / ((_2384 * 2.1991131305694580078125) + 3.141590118408203125)) * _2373;
                        _2226 = (_2388 * _2336.x) + _2294;
                        _2227 = (_2388 * _2336.y) + _2295;
                        _2228 = (_2388 * _2336.z) + _2296;
                        _2223 = (_2419 * _2353.x) + _2291;
                        _2224 = (_2419 * _2353.y) + _2292;
                        _2225 = (_2419 * _2353.z) + _2293;
                        if (_2298 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2291 = _2223;
                            _2292 = _2224;
                            _2293 = _2225;
                            _2294 = _2226;
                            _2295 = _2227;
                            _2296 = _2228;
                            _2297 = _2298;
                        }
                    }
                    frontier_phi_63_pred = _2228;
                    frontier_phi_63_pred_1 = _2227;
                    frontier_phi_63_pred_2 = _2226;
                    frontier_phi_63_pred_3 = _2225;
                    frontier_phi_63_pred_4 = _2224;
                    frontier_phi_63_pred_5 = _2223;
                }
                _2036 = frontier_phi_63_pred;
                _2034 = frontier_phi_63_pred_1;
                _2032 = frontier_phi_63_pred_2;
                _2030 = frontier_phi_63_pred_3;
                _2028 = frontier_phi_63_pred_4;
                _2026 = frontier_phi_63_pred_5;
                uint _2174 = _2173 + 1u;
                if (_2174 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2167 = _2026;
                    _2168 = _2028;
                    _2169 = _2030;
                    _2170 = _2032;
                    _2171 = _2034;
                    _2172 = _2036;
                    _2173 = _2174;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2025 = _2026;
            _2027 = _2028;
            _2029 = _2030;
            _2031 = _2032;
            _2033 = _2034;
            _2035 = _2036;
        }
        uvec4 _2039 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2040 = _2039.z;
        uint _2042 = (_2040 >> 8u) & 15u;
        float _2138;
        float _2140;
        float _2142;
        float _2144;
        float _2146;
        float _2148;
        if (((4294967295u << _2042) & _1923) == 0u)
        {
            _2138 = _2025;
            _2140 = _2027;
            _2142 = _2029;
            _2144 = _2031;
            _2146 = _2033;
            _2148 = _2035;
        }
        else
        {
            float _2163 = inversesqrt(dot(vec3(_1877, _1878, _1879), vec3(_1877, _1878, _1879)));
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2042 < ((_2040 >> 12u) & 15u))
            {
                float _2139;
                float _2141;
                float _2143;
                float _2145;
                float _2147;
                float _2149;
                float _2274 = _2025;
                float _2275 = _2027;
                float _2276 = _2029;
                float _2277 = _2031;
                float _2278 = _2033;
                float _2279 = _2035;
                uint _2280 = _2042;
                uint _2289;
                bool _2290;
                for (;;)
                {
                    _2289 = texelFetch(g_lightClassification, int((((_1917 << 5u) + (_1903 << 9u)) + (_2280 << 2u)) >> 2u)).x;
                    _2290 = _2289 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2290)
                    {
                        frontier_phi_69_pred = _2279;
                        frontier_phi_69_pred_1 = _2278;
                        frontier_phi_69_pred_2 = _2277;
                        frontier_phi_69_pred_3 = _2276;
                        frontier_phi_69_pred_4 = _2275;
                        frontier_phi_69_pred_5 = _2274;
                    }
                    else
                    {
                        float _2424;
                        float _2425;
                        float _2426;
                        float _2427;
                        float _2428;
                        float _2429;
                        float _2676;
                        float _2677;
                        float _2678;
                        float _2679;
                        float _2680;
                        float _2681;
                        float _2437 = _2274;
                        float _2438 = _2275;
                        float _2439 = _2276;
                        float _2440 = _2277;
                        float _2441 = _2278;
                        float _2442 = _2279;
                        uint _2443 = _2289;
                        uint _2444;
                        vec4 _2469;
                        float _2470;
                        vec4 _2485;
                        vec3 _2497;
                        vec4 _2513;
                        vec4 _2529;
                        float _2576;
                        bool _2577;
                        for (;;)
                        {
                            uint _2454 = ((_2280 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2443));
                            _2444 = (_2443 + 4294967295u) & _2443;
                            uint _2456 = _2454 * 40u;
                            _2469 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2456 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2456 + 3u)).x));
                            _2470 = _2469.w;
                            uint _2472 = (_2454 * 40u) + 4u;
                            _2485 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2472 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2472 + 3u)).x));
                            uint _2487 = (_2454 * 40u) + 8u;
                            _2497 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2487 + 2u)).x));
                            uint _2500 = (_2454 * 40u) + 16u;
                            _2513 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2500 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2500 + 3u)).x));
                            uint _2516 = (_2454 * 40u) + 20u;
                            _2529 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2516)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2516 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2516 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2516 + 3u)).x));
                            uint _2532 = (_2454 * 40u) + 24u;
                            vec4 _2545 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2532)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2532 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2532 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2532 + 3u)).x));
                            uint _2551 = (_2454 * 40u) + 28u;
                            vec4 _2564 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2551 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2551 + 3u)).x));
                            _2576 = fma(_1879, _2564.z, fma(_1878, _2564.y, _2564.x * _1877)) + _2564.w;
                            _2577 = !((fma(_1879, _2545.z, fma(_1878, _2545.y, _2545.x * _1877)) + _2545.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2577)
                            {
                                float _2604 = _2469.x - _1877;
                                float _2605 = _2469.y - _1878;
                                float _2606 = _2469.z - _1879;
                                float _2607 = dot(vec3(_2604, _2605, _2606), vec3(_2604, _2605, _2606));
                                float _2610 = inversesqrt(_2607);
                                float _2611 = _2610 * _2604;
                                float _2612 = _2610 * _2605;
                                float _2613 = _2610 * _2606;
                                float _2617 = 1.0 - (_2607 / (_2470 * _2470));
                                float _3523 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
                                float _2618 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
                                float _2622 = sqrt(_2607) * _2485.w;
                                float _2624 = 1.39999997615814208984375 / (_2622 + 1.39999997615814208984375);
                                float _2625 = _2624 * _2624;
                                float _2626 = 1.0 - _2625;
                                float _2628 = (_2626 * dot(vec3(_2611, _2612, _2613), vec3(_311, _314, _317))) + _2625;
                                float _2631 = _2622 * _2622;
                                float _2635 = (fma(_1879, _2513.z, fma(_1878, _2513.y, _2513.x * _1877)) + _2513.w) / _2576;
                                float _2636 = (fma(_1879, _2529.z, fma(_1878, _2529.y, _2529.x * _1877)) + _2529.w) / _2576;
                                float _2640 = 1.0 - dot(vec2(_2635, _2636), vec2(_2635, _2636));
                                float _3539 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
                                float _2641 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
                                float _2642 = _2641 * (((isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0))) * _2618) / ((_2631 * 0.699999988079071044921875) + 1.0));
                                float _2652 = dot(vec3(_311, _314, _317), vec3((-0.0) - (_1877 * _2163), (-0.0) - (_1878 * _2163), (-0.0) - (_1879 * _2163)));
                                float _3550 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
                                float _2660 = (_2626 * dot(vec3(_311, _314, _317), vec3(_2611, _2612, _2613))) + _2625;
                                float _3561 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
                                float _2661 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
                                float _2665 = (0.5 / (((isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0))) + 9.9999999392252902907785028219223e-09) + _2661)) * _2661;
                                float _3572 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
                                float _2672 = (_2641 * _2618) * (((isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * 3.1415927410125732421875) / ((_2631 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_75_pred = _2642 * _2485.z;
                                frontier_phi_75_pred_1 = _2642 * _2485.y;
                                frontier_phi_75_pred_2 = _2642 * _2485.x;
                                frontier_phi_75_pred_3 = _2672 * _2497.z;
                                frontier_phi_75_pred_4 = _2672 * _2497.y;
                                frontier_phi_75_pred_5 = _2672 * _2497.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _2681 = frontier_phi_75_pred;
                            _2680 = frontier_phi_75_pred_1;
                            _2679 = frontier_phi_75_pred_2;
                            _2678 = frontier_phi_75_pred_3;
                            _2677 = frontier_phi_75_pred_4;
                            _2676 = frontier_phi_75_pred_5;
                            _2427 = _2679 + _2440;
                            _2428 = _2680 + _2441;
                            _2429 = _2681 + _2442;
                            _2424 = _2676 + _2437;
                            _2425 = _2677 + _2438;
                            _2426 = _2678 + _2439;
                            if (_2444 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2437 = _2424;
                                _2438 = _2425;
                                _2439 = _2426;
                                _2440 = _2427;
                                _2441 = _2428;
                                _2442 = _2429;
                                _2443 = _2444;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2429;
                        frontier_phi_69_pred_1 = _2428;
                        frontier_phi_69_pred_2 = _2427;
                        frontier_phi_69_pred_3 = _2426;
                        frontier_phi_69_pred_4 = _2425;
                        frontier_phi_69_pred_5 = _2424;
                    }
                    _2149 = frontier_phi_69_pred;
                    _2147 = frontier_phi_69_pred_1;
                    _2145 = frontier_phi_69_pred_2;
                    _2143 = frontier_phi_69_pred_3;
                    _2141 = frontier_phi_69_pred_4;
                    _2139 = frontier_phi_69_pred_5;
                    uint _2281 = _2280 + 1u;
                    if (_2281 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2274 = _2139;
                        _2275 = _2141;
                        _2276 = _2143;
                        _2277 = _2145;
                        _2278 = _2147;
                        _2279 = _2149;
                        _2280 = _2281;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2149;
                frontier_phi_57_58_ladder_1 = _2147;
                frontier_phi_57_58_ladder_2 = _2145;
                frontier_phi_57_58_ladder_3 = _2143;
                frontier_phi_57_58_ladder_4 = _2141;
                frontier_phi_57_58_ladder_5 = _2139;
            }
            else
            {
                frontier_phi_57_58_ladder = _2035;
                frontier_phi_57_58_ladder_1 = _2033;
                frontier_phi_57_58_ladder_2 = _2031;
                frontier_phi_57_58_ladder_3 = _2029;
                frontier_phi_57_58_ladder_4 = _2027;
                frontier_phi_57_58_ladder_5 = _2025;
            }
            _2138 = frontier_phi_57_58_ladder_5;
            _2140 = frontier_phi_57_58_ladder_4;
            _2142 = frontier_phi_57_58_ladder_3;
            _2144 = frontier_phi_57_58_ladder_2;
            _2146 = frontier_phi_57_58_ladder_1;
            _2148 = frontier_phi_57_58_ladder;
        }
        float _2153 = isnan(1.0) ? _356 : (isnan(_356) ? 1.0 : min(_356, 1.0));
        _1935 = (_2153 * _2144) + _1499;
        _1937 = (_2153 * _2146) + _1501;
        _1939 = (_2153 * _2148) + _1503;
        _1941 = ((_2138 * 0.039999999105930328369140625) * _2153) + _1748;
        _1943 = ((_2140 * 0.039999999105930328369140625) * _2153) + _1750;
        _1945 = ((_2142 * 0.039999999105930328369140625) * _2153) + _1752;
    }
    else
    {
        _1935 = _1499;
        _1937 = _1501;
        _1939 = _1503;
        _1941 = _1748;
        _1943 = _1750;
        _1945 = _1752;
    }
    float _3588 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _3599 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _3610 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _3621 = isnan(0.0) ? _202 : (isnan(_202) ? 0.0 : max(_202, 0.0));
    float _1970 = cbInstanceData._m0[_330 + 6u].w * (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0)));
    float _1975 = _289 / cbSceneParam._m0[86u].x;
    float _1976 = _290 / cbSceneParam._m0[86u].y;
    vec4 _1990 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1975, _1976, (log2((isnan(cbSceneParam._m0[77u].w) ? _221 : (isnan(_221) ? cbSceneParam._m0[77u].w : min(_221, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1992 = _1990.x;
    float _1993 = _1990.y;
    float _1994 = _1990.z;
    float _1995 = _1990.w;
    float _2087;
    float _2089;
    float _2091;
    float _2093;
    if (_221 > cbSceneParam._m0[78u].w)
    {
        float _2050 = isnan(_221) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _221 : min(cbSceneParam._m0[80u].w, _221));
        float _2051 = _2050 / _221;
        float _2062 = _2051 * _274;
        float _2063 = _275 * _2051;
        float _2064 = (-0.0) - _2063;
        float _2065 = _2051 * _276;
        float _2067 = (cbSceneParam._m0[77u].w * _2064) / _2050;
        float _2068 = _2067 + cbSceneParam._m0[79u].w;
        float _2069 = cbSceneParam._m0[79u].w - _2063;
        float _2075 = sqrt(((_2062 * _2062) + (_2063 * _2063)) + (_2065 * _2065));
        float _2078 = (1.0 - (cbSceneParam._m0[77u].w / _2050)) * _2075;
        float _2083 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2085 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2236;
        if (abs((_2064 - _2067) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2236 = ((((_2068 > 0.0) ? exp2(_2083 * _2068) : (2.0 - exp2(_2085 * _2068))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2078;
        }
        else
        {
            float _2196 = 1.0 / cbSceneParam._m0[80u].x;
            float _2197 = isnan(_2069) ? _2068 : (isnan(_2068) ? _2069 : max(_2068, _2069));
            float _2198 = isnan(_2069) ? _2068 : (isnan(_2068) ? _2069 : min(_2068, _2069));
            float _2207 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : min(_2197, 0.0));
            float _2208 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : min(_2198, 0.0));
            _2236 = ((abs(_2075 / _2064) * cbSceneParam._m0[80u].y) * ((((_2207 - _2208) * 2.0) - ((exp2(_2083 * (isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0)))) - exp2(_2083 * (isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0))))) * _2196)) - ((exp2(_2085 * _2207) - exp2(_2085 * _2208)) * _2196))) + (_2078 * cbSceneParam._m0[80u].z);
        }
        vec4 _2238 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1975, _1976, 1.0), 0.0);
        float _2247 = exp2((_2236 * (-1.44269502162933349609375)) * (1.0 - _2238.w));
        float _2248 = log2(_2247);
        float _2264 = log2(_1995);
        _2087 = (exp2(_2264 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2248 * cbSceneParam._m0[78u].x)) * _2238.x) / cbSceneParam._m0[78u].x)) + _1992;
        _2089 = (exp2(_2264 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2248 * cbSceneParam._m0[78u].y)) * _2238.y) / cbSceneParam._m0[78u].y)) + _1993;
        _2091 = (exp2(_2264 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2248 * cbSceneParam._m0[78u].z)) * _2238.z) / cbSceneParam._m0[78u].z)) + _1994;
        _2093 = _2247 * _1995;
    }
    else
    {
        _2087 = _1992;
        _2089 = _1993;
        _2091 = _1994;
        _2093 = _1995;
    }
    float _2105 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2106 = _2105 == 3.0;
    float _2108 = log2(_2093);
    float _2115 = exp2(_2108 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * (_1935 + ((isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0))) * _356))) + ((_1941 + ((isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0))) * _1135)) * cbPerFrame._m0[3u].x));
    float _2116 = exp2(_2108 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) * (_1937 + ((isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0))) * _356))) + ((_1943 + ((isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0))) * _1135)) * cbPerFrame._m0[3u].x));
    float _2117 = exp2(_2108 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * (_1939 + ((isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0))) * _356))) + ((_1945 + ((isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0))) * _1135)) * cbPerFrame._m0[3u].x));
    float _2126 = (_2105 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2126 * (_2106 ? _2115 : (_2115 + (cbSceneParam._m0[72u].w * _2087)));
    SV_Target.y = _2126 * (_2106 ? _2116 : (_2116 + (cbSceneParam._m0[72u].w * _2089)));
    SV_Target.z = _2126 * (_2106 ? _2117 : (_2117 + (cbSceneParam._m0[72u].w * _2091)));
    SV_Target.w = _1970;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _1970;
}


