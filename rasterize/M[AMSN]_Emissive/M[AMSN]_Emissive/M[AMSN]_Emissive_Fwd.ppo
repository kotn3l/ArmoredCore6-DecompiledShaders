#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Emissive_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Emissive_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Emissive_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Emissive_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _865;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = _197 * NORMAL.x;
    float _199 = _197 * NORMAL.y;
    float _200 = _197 * NORMAL.z;
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212;
    float _213;
    float _214;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
    }
    else
    {
        _212 = _198;
        _213 = _199;
        _214 = _200;
    }
    vec4 _228 = texture(sampler2D(M_AMSN_Emissive_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _231 = _228.x;
    float _232 = _228.y;
    float _233 = _228.z;
    float _235 = _228.w * TEXCOORD_1.z;
    vec4 _251 = texture(sampler2D(M_AMSN_Emissive_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _254 = _251.x + cbMtdParam._m0[9u].x;
    vec4 _266 = texture(sampler2D(M_AMSN_Emissive_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _270 = _266.z;
    float _274 = (_266.x * 2.0) + (-1.0);
    float _276 = (_266.y * 2.0) + (-1.0);
    float _277 = dot(vec2(_274, _276), vec2(_274, _276));
    float _3223 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _283 = sqrt(1.0 - (isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0))));
    vec4 _296 = texture(sampler2D(M_AMSN_Emissive_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[3u].w));
    float _306 = fma(_283, _212, fma(_276, _204 * TANGENT.x, (_190 * _182) * _274));
    float _309 = fma(_283, _213, fma(_276, _204 * TANGENT.y, (_190 * _183) * _274));
    float _312 = fma(_283, _214, fma(_276, _204 * TANGENT.z, (_190 * _184) * _274));
    float _316 = inversesqrt(dot(vec3(_306, _309, _312), vec3(_306, _309, _312)));
    float _317 = _316 * _306;
    float _318 = _316 * _309;
    float _319 = _316 * _312;
    float _3234 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _320 = isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0));
    float _3245 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _321 = isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0));
    float _3256 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3267 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3278 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3289 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _325 = isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0));
    float _341 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _383 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _393 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _383);
    float _394 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _383);
    float _395 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _383);
    float _399 = inversesqrt(dot(vec3(_393, _394, _395), vec3(_393, _394, _395)));
    float _400 = _393 * _399;
    float _401 = _394 * _399;
    float _402 = _395 * _399;
    float _408 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _409 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _430 = fma(_319, cbSceneParam._m0[5u].z, fma(_318, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _317));
    float _433 = fma(_319, cbSceneParam._m0[6u].z, fma(_318, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _317));
    float _436 = fma(_319, cbSceneParam._m0[7u].z, fma(_318, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _317));
    uint _449 = uint(roundEven(NORMAL.w)) * 13u;
    uint _451 = _449 + 9u;
    uint _452 = _451 + uint(cbMatDynParam._m0[0u].w);
    float _458 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0)))) * cbInstanceData._m0[_452].x;
    float _459 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0)))) * cbInstanceData._m0[_452].y;
    float _460 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0)))) * cbInstanceData._m0[_452].z;
    float _3300 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _461 = isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0));
    float _3311 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _462 = isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0));
    float _3322 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _463 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
    float _464 = 1.0 - _325;
    float _465 = _461 * _464;
    float _466 = _462 * _464;
    float _467 = _463 * _464;
    float _472 = (_461 + (-0.039999999105930328369140625)) * _325;
    float _473 = (_462 + (-0.039999999105930328369140625)) * _325;
    float _474 = (_463 + (-0.039999999105930328369140625)) * _325;
    float _475 = _472 + 0.039999999105930328369140625;
    float _477 = _473 + 0.039999999105930328369140625;
    float _478 = _474 + 0.039999999105930328369140625;
    vec4 _487 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _408, cbSceneParam._m0[86u].y * _409));
    float _490 = _487.x * TEXCOORD_1.w;
    float _491 = dot(vec3(_317, _318, _319), vec3(_400, _401, _402));
    float _494 = _491 * 2.0;
    float _498 = (_494 * _317) - _400;
    float _499 = (_494 * _318) - _401;
    float _500 = (_494 * _319) - _402;
    float _504 = abs(dot(vec3(_400, _401, _402), vec3(_317, _318, _319)));
    float _3333 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _506 = sqrt(_321);
    float _519 = exp2((_506 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_506 * 3.0));
    float _525 = (1.0 - _519) * ((_506 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _526 = _519 * _506;
    float _554 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _558 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _562 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _864;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _589 = fma(_562, cbModelParam._m0[26u].z, fma(_558, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _554));
        float _593 = fma(_562, cbModelParam._m0[27u].z, fma(_558, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _554));
        float _597 = fma(_562, cbModelParam._m0[28u].z, fma(_558, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _554));
        float _622 = _554 + _317;
        float _623 = _558 + _318;
        float _624 = _562 + _319;
        float _634 = fma(_624, cbModelParam._m0[26u].z, fma(_623, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _622)) - _589;
        float _635 = fma(_624, cbModelParam._m0[27u].z, fma(_623, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _622)) - _593;
        float _636 = fma(_624, cbModelParam._m0[28u].z, fma(_623, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _622)) - _597;
        float _640 = inversesqrt(dot(vec3(_634, _635, _636), vec3(_634, _635, _636)));
        float _653 = ((_640 * _634) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_589 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _654 = ((_640 * _635) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_593 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _655 = ((_640 * _636) / cbModelParam._m0[34u].z) + ((((((_597 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _658 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_653, _654, _655), 0.0);
        vec4 _665 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_653, _654, _655), 0.0);
        vec4 _672 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_653, _654, _655), 0.0);
        vec4 _679 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_653, _654, _655), 0.0);
        float _692 = exp2((_658.w + (-0.5)) * 20.0) * 2.0;
        float _693 = _692 * (_658.x + (-0.5));
        float _694 = _692 * (_658.y + (-0.5));
        float _695 = _692 * (_658.z + (-0.5));
        float _702 = exp2((_665.w + (-0.5)) * 20.0) * 2.0;
        float _703 = _702 * (_665.x + (-0.5));
        float _704 = _702 * (_665.y + (-0.5));
        float _705 = _702 * (_665.z + (-0.5));
        float _712 = exp2((_672.w + (-0.5)) * 20.0) * 2.0;
        float _713 = _712 * (_672.x + (-0.5));
        float _714 = _712 * (_672.y + (-0.5));
        float _715 = _712 * (_672.z + (-0.5));
        float _722 = exp2((_679.w + (-0.5)) * 20.0) * 2.0;
        float _723 = _722 * (_679.x + (-0.5));
        float _724 = _722 * (_679.y + (-0.5));
        float _725 = _722 * (_679.z + (-0.5));
        float _726 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _727 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _728 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _729 = _693 * 0.5;
        float _730 = _703 * 0.5;
        float _731 = _713 * 0.5;
        float _732 = dot(vec3(_729, _730, _731), vec3(_729, _730, _731));
        float _737 = (_732 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_732);
        float _746 = (dot(vec3(_317, _318, _319), vec3(_737 * _729, _737 * _730, _737 * _731)) + 1.0) * 0.5;
        float _3359 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _756 = sqrt(((_730 * _730) + (_729 * _729)) + (_731 * _731)) / (_726 + 9.9999997473787516355514526367188e-06);
        float _3370 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _757 = isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0));
        float _758 = _757 * 2.0;
        float _762 = (1.0 - _757) / (_757 + 1.0);
        float _3381 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _763 = isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0));
        float _772 = ((((1.0 - _763) * (_758 + 2.0)) * exp2(log2(isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0))) * (_758 + 1.0))) + _763) * _726;
        float _773 = _694 * 0.5;
        float _774 = _704 * 0.5;
        float _775 = _714 * 0.5;
        float _776 = dot(vec3(_773, _774, _775), vec3(_773, _774, _775));
        float _781 = (_776 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_776);
        float _789 = (dot(vec3(_317, _318, _319), vec3(_781 * _773, _781 * _774, _781 * _775)) + 1.0) * 0.5;
        float _3392 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _798 = sqrt(((_774 * _774) + (_773 * _773)) + (_775 * _775)) / (_727 + 9.9999997473787516355514526367188e-06);
        float _3403 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _799 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
        float _800 = _799 * 2.0;
        float _804 = (1.0 - _799) / (_799 + 1.0);
        float _3414 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
        float _814 = ((((1.0 - _805) * (_800 + 2.0)) * exp2(log2(isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0))) * (_800 + 1.0))) + _805) * _727;
        float _815 = _695 * 0.5;
        float _816 = _705 * 0.5;
        float _817 = _715 * 0.5;
        float _818 = dot(vec3(_815, _816, _817), vec3(_815, _816, _817));
        float _823 = (_818 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_818);
        float _831 = (dot(vec3(_317, _318, _319), vec3(_823 * _815, _823 * _816, _823 * _817)) + 1.0) * 0.5;
        float _3425 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _840 = sqrt(((_816 * _816) + (_815 * _815)) + (_817 * _817)) / (_728 + 9.9999997473787516355514526367188e-06);
        float _3436 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
        float _842 = _841 * 2.0;
        float _846 = (1.0 - _841) / (_841 + 1.0);
        float _3447 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
        float _856 = ((((1.0 - _847) * (_842 + 2.0)) * exp2(log2(isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0))) * (_842 + 1.0))) + _847) * _728;
        _864 = _695;
        _866 = _694;
        _867 = _693;
        _868 = _705;
        _869 = _704;
        _870 = _703;
        _871 = _715;
        _872 = _714;
        _873 = _713;
        _874 = _728;
        _875 = _727;
        _876 = _726;
        _877 = cbModelParam._m0[36u].z * (isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0)));
        _878 = cbModelParam._m0[36u].z * (isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0)));
        _879 = cbModelParam._m0[36u].z * (isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0)));
    }
    else
    {
        _864 = _865;
        _866 = _865;
        _867 = _865;
        _868 = _865;
        _869 = _865;
        _870 = _865;
        _871 = _865;
        _872 = _865;
        _873 = _865;
        _874 = _865;
        _875 = _865;
        _876 = _865;
        _877 = 0.0;
        _878 = 0.0;
        _879 = 0.0;
    }
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _905 = fma(_562, cbModelParam._m0[30u].z, fma(_558, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _554));
        float _909 = fma(_562, cbModelParam._m0[31u].z, fma(_558, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _554));
        float _913 = fma(_562, cbModelParam._m0[32u].z, fma(_558, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _554));
        float _936 = _554 + _317;
        float _937 = _558 + _318;
        float _938 = _562 + _319;
        float _948 = fma(_938, cbModelParam._m0[30u].z, fma(_937, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _936)) - _905;
        float _949 = fma(_938, cbModelParam._m0[31u].z, fma(_937, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _936)) - _909;
        float _950 = fma(_938, cbModelParam._m0[32u].z, fma(_937, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _936)) - _913;
        float _954 = inversesqrt(dot(vec3(_948, _949, _950), vec3(_948, _949, _950)));
        float _967 = ((_954 * _948) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_905 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _968 = ((_954 * _949) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_909 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _969 = ((_954 * _950) / cbModelParam._m0[35u].z) + ((((((_913 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        float _1004 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_971.x + (-0.5));
        float _1006 = _1004 * (_971.y + (-0.5));
        float _1007 = _1004 * (_971.z + (-0.5));
        float _1014 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_978.x + (-0.5));
        float _1016 = _1014 * (_978.y + (-0.5));
        float _1017 = _1014 * (_978.z + (-0.5));
        float _1024 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_985.x + (-0.5));
        float _1026 = _1024 * (_985.y + (-0.5));
        float _1027 = _1024 * (_985.z + (-0.5));
        float _1034 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_992.x + (-0.5));
        float _1036 = _1034 * (_992.y + (-0.5));
        float _1037 = _1034 * (_992.z + (-0.5));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1040 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1041 = _1005 * 0.5;
        float _1042 = _1015 * 0.5;
        float _1043 = _1025 * 0.5;
        float _1044 = dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043));
        float _1049 = (_1044 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1044);
        float _1057 = (dot(vec3(_317, _318, _319), vec3(_1049 * _1041, _1049 * _1042, _1049 * _1043)) + 1.0) * 0.5;
        float _3488 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1066 = sqrt(((_1042 * _1042) + (_1041 * _1041)) + (_1043 * _1043)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _3499 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _1068 = _1067 * 2.0;
        float _1072 = (1.0 - _1067) / (_1067 + 1.0);
        float _3510 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
        float _1082 = ((((1.0 - _1073) * (_1068 + 2.0)) * exp2(log2(isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))) * (_1068 + 1.0))) + _1073) * _1038;
        float _1083 = _1006 * 0.5;
        float _1084 = _1016 * 0.5;
        float _1085 = _1026 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1099 = (dot(vec3(_317, _318, _319), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _3521 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1108 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_1039 + 9.9999997473787516355514526367188e-06);
        float _3532 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _3543 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0))) * (_1110 + 1.0))) + _1115) * _1039;
        float _1125 = _1007 * 0.5;
        float _1126 = _1017 * 0.5;
        float _1127 = _1027 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_317, _318, _319), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _3554 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1040 + 9.9999997473787516355514526367188e-06);
        float _3565 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3576 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0))) * (_1152 + 1.0))) + _1157) * _1040;
        _1174 = _1007;
        _1175 = _1006;
        _1176 = _1005;
        _1177 = _1017;
        _1178 = _1016;
        _1179 = _1015;
        _1180 = _1027;
        _1181 = _1026;
        _1182 = _1025;
        _1183 = _1040;
        _1184 = _1039;
        _1185 = _1038;
        _1186 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)));
        _1187 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
        _1188 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
    }
    else
    {
        _1174 = _865;
        _1175 = _865;
        _1176 = _865;
        _1177 = _865;
        _1178 = _865;
        _1179 = _865;
        _1180 = _865;
        _1181 = _865;
        _1182 = _865;
        _1183 = _865;
        _1184 = _865;
        _1185 = _865;
        _1186 = 0.0;
        _1187 = 0.0;
        _1188 = 0.0;
    }
    float _1198 = (cbModelParam._m0[1u].x * (_1186 - _877)) + _877;
    float _1199 = (cbModelParam._m0[1u].x * (_1187 - _878)) + _878;
    float _1200 = (cbModelParam._m0[1u].x * (_1188 - _879)) + _879;
    float _1221 = fma(_1200, cbSceneParam._m0[89u].z, fma(_1199, cbSceneParam._m0[89u].y, _1198 * cbSceneParam._m0[89u].x));
    float _1224 = fma(_1200, cbSceneParam._m0[90u].z, fma(_1199, cbSceneParam._m0[90u].y, _1198 * cbSceneParam._m0[90u].x));
    float _1227 = fma(_1200, cbSceneParam._m0[91u].z, fma(_1199, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1198));
    float _1242 = _498 * 0.5;
    float _1243 = _499 * 0.5;
    float _1244 = _500 * 0.5;
    float _1245 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_1176, _1179, _1182, _1185));
    float _1248 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_1175, _1178, _1181, _1184));
    float _1251 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_1174, _1177, _1180, _1183));
    float _1285;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1258 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_864, _868, _871, _874));
        float _1262 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_866, _869, _872, _875));
        float _1266 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_867, _870, _873, _876));
        float _1273 = dot(vec4(cbModelParam._m0[39u]), vec4(_1242, _1243, _1244, 1.0));
        _1285 = dot(vec3(isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)), isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)), isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1273) ? 0.0 : (isnan(0.0) ? _1273 : max(0.0, _1273))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1285 = 1.0;
    }
    float _1296;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1287 = dot(vec4(cbModelParam._m0[40u]), vec4(_1242, _1243, _1244, 1.0));
        _1296 = dot(vec3(isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)), isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)), isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1287) ? 0.0 : (isnan(0.0) ? _1287 : max(0.0, _1287))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1296 = 1.0;
    }
    float _1300 = (_1296 * cbModelParam._m0[1u].x) + (_1285 * (1.0 - cbModelParam._m0[1u].x));
    float _1310 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _321);
    float _1311 = isnan(_1310) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1310 : min(cbModelParam._m0[25u].z, _1310));
    float _1393;
    float _1395;
    float _1397;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1360 = fma(_562, cbModelParam._m0[13u].z, fma(_558, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _554)) + cbModelParam._m0[13u].w;
        float _1364 = fma(_562, cbModelParam._m0[14u].z, fma(_558, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _554)) + cbModelParam._m0[14u].w;
        float _1368 = fma(_562, cbModelParam._m0[15u].z, fma(_558, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _554)) + cbModelParam._m0[15u].w;
        float _1371 = fma(_500, cbModelParam._m0[13u].z, fma(_499, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _498));
        float _1374 = fma(_500, cbModelParam._m0[14u].z, fma(_499, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _498));
        float _1377 = fma(_500, cbModelParam._m0[15u].z, fma(_499, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _498));
        float _1405;
        if (_1371 > 0.0)
        {
            _1405 = abs((1.0 - _1360) / _1371);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1371 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1360 + 1.0) / _1371);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1405 = frontier_phi_16_14_ladder;
        }
        float _1613;
        if (_1374 > 0.0)
        {
            _1613 = abs((1.0 - _1364) / _1374);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1374 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1364 + 1.0) / _1374);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1613 = frontier_phi_25_21_ladder;
        }
        float _1867;
        if (_1377 > 0.0)
        {
            _1867 = abs((1.0 - _1368) / _1377);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1377 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1368 + 1.0) / _1377);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1867 = frontier_phi_37_32_ladder;
        }
        float _1869 = isnan(_1613) ? _1405 : (isnan(_1405) ? _1613 : min(_1405, _1613));
        float _1870 = isnan(_1867) ? _1869 : (isnan(_1869) ? _1867 : min(_1869, _1867));
        float _1874 = (_1870 * _1371) + _1360;
        float _1875 = (_1870 * _1374) + _1364;
        float _1876 = (_1870 * _1377) + _1368;
        float _1877 = _1870 * 9.9999997473787516355514526367188e-05;
        float _1879 = (-1.0) - _1877;
        float _1881 = _1877 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1876 > _1881) || ((_1876 < _1879) || ((_1875 > _1881) || ((_1875 < _1879) || ((_1874 < _1879) || (_1874 > _1881))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2004 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1876, cbModelParam._m0[9u].z, fma(_1875, cbModelParam._m0[9u].y, _1874 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1876, cbModelParam._m0[10u].z, fma(_1875, cbModelParam._m0[10u].y, _1874 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1876, cbModelParam._m0[11u].z, fma(_1875, cbModelParam._m0[11u].y, _1874 * cbModelParam._m0[11u].x))), _1311);
            frontier_phi_15_37_ladder = _2004.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2004.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2004.x * cbModelParam._m0[1u].y;
        }
        _1393 = frontier_phi_15_37_ladder_2;
        _1395 = frontier_phi_15_37_ladder_1;
        _1397 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1381 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_498, _499, _500), _1311);
        _1393 = _1381.x * cbModelParam._m0[1u].y;
        _1395 = _1381.y * cbModelParam._m0[1u].y;
        _1397 = _1381.z * cbModelParam._m0[1u].y;
    }
    float _1401 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _321);
    float _1402 = isnan(_1401) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1401 : min(cbModelParam._m0[25u].w, _1401));
    float _1495;
    float _1497;
    float _1499;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1459 = fma(_562, cbModelParam._m0[21u].z, fma(_558, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _554)) + cbModelParam._m0[21u].w;
        float _1463 = fma(_562, cbModelParam._m0[22u].z, fma(_558, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _554)) + cbModelParam._m0[22u].w;
        float _1467 = fma(_562, cbModelParam._m0[23u].z, fma(_558, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _554)) + cbModelParam._m0[23u].w;
        float _1470 = fma(_500, cbModelParam._m0[21u].z, fma(_499, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _498));
        float _1473 = fma(_500, cbModelParam._m0[22u].z, fma(_499, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _498));
        float _1476 = fma(_500, cbModelParam._m0[23u].z, fma(_499, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _498));
        float _1618;
        if (_1470 > 0.0)
        {
            _1618 = abs((1.0 - _1459) / _1470);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1470 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1459 + 1.0) / _1470);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1618 = frontier_phi_27_23_ladder;
        }
        float _1894;
        if (_1473 > 0.0)
        {
            _1894 = abs((1.0 - _1463) / _1473);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1473 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1463 + 1.0) / _1473);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1894 = frontier_phi_39_34_ladder;
        }
        float _2107;
        if (_1476 > 0.0)
        {
            _2107 = abs((1.0 - _1467) / _1476);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1476 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1467 + 1.0) / _1476);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2107 = frontier_phi_48_45_ladder;
        }
        float _2109 = isnan(_1894) ? _1618 : (isnan(_1618) ? _1894 : min(_1618, _1894));
        float _2110 = isnan(_2107) ? _2109 : (isnan(_2109) ? _2107 : min(_2109, _2107));
        float _2114 = (_2110 * _1470) + _1459;
        float _2115 = (_2110 * _1473) + _1463;
        float _2116 = (_2110 * _1476) + _1467;
        float _2117 = _2110 * 9.9999997473787516355514526367188e-05;
        float _2118 = (-1.0) - _2117;
        float _2120 = _2117 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2116 > _2120) || ((_2116 < _2118) || ((_2115 > _2120) || ((_2115 < _2118) || ((_2114 < _2118) || (_2114 > _2120))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2335 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2116, cbModelParam._m0[17u].z, fma(_2115, cbModelParam._m0[17u].y, _2114 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2116, cbModelParam._m0[18u].z, fma(_2115, cbModelParam._m0[18u].y, _2114 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2116, cbModelParam._m0[19u].z, fma(_2115, cbModelParam._m0[19u].y, _2114 * cbModelParam._m0[19u].x))), _1402);
            frontier_phi_24_48_ladder = _2335.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2335.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2335.x * cbModelParam._m0[1u].z;
        }
        _1495 = frontier_phi_24_48_ladder_2;
        _1497 = frontier_phi_24_48_ladder_1;
        _1499 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1479 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_498, _499, _500), _1402);
        _1495 = _1479.x * cbModelParam._m0[1u].z;
        _1497 = _1479.y * cbModelParam._m0[1u].z;
        _1499 = _1479.z * cbModelParam._m0[1u].z;
    }
    float _1512 = (((_525 * _475) + _526) * _490) * ((cbModelParam._m0[1u].w * (_1495 - _1393)) + _1393);
    float _1514 = (((_525 * _477) + _526) * _490) * ((cbModelParam._m0[1u].w * (_1497 - _1395)) + _1395);
    float _1516 = (((_525 * _478) + _526) * _490) * ((cbModelParam._m0[1u].w * (_1499 - _1397)) + _1397);
    float _1519 = fma(_1516, cbSceneParam._m0[89u].z, fma(_1514, cbSceneParam._m0[89u].y, _1512 * cbSceneParam._m0[89u].x));
    float _1522 = fma(_1516, cbSceneParam._m0[90u].z, fma(_1514, cbSceneParam._m0[90u].y, _1512 * cbSceneParam._m0[90u].x));
    float _1525 = fma(_1516, cbSceneParam._m0[91u].z, fma(_1514, cbSceneParam._m0[91u].y, _1512 * cbSceneParam._m0[91u].x));
    uvec4 _1535 = floatBitsToUint(cbInstanceData._m0[_449 + 5u]);
    uint _1537 = _1535.x * 14u;
    uint _1538 = _1537 + 13u;
    float _1545 = _490 + (-1.0);
    float _1550 = (cbLight._m0[_1538].x * _1545) + 1.0;
    float _1551 = (cbLight._m0[_1538].y * _1545) + 1.0;
    float _1552 = (cbLight._m0[_1538].z * _1545) + 1.0;
    float _1553 = (cbLight._m0[_1538].w * _1545) + 1.0;
    uint _1554 = _1537 + 5u;
    float _1560 = isnan(1.0) ? _1551 : (isnan(_1551) ? 1.0 : min(_1551, 1.0));
    uint _1564 = _1537 + 4u;
    float _1571 = isnan(1.0) ? _1550 : (isnan(_1550) ? 1.0 : min(_1550, 1.0));
    uint _1575 = _1537 | 1u;
    float _1586 = dot(vec3(cbLight._m0[_1537].xyz), vec3(_317, _318, _319));
    float _1589 = dot(vec3(cbLight._m0[_1575].xyz), vec3(_317, _318, _319));
    float _3712 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
    float _3723 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
    float _1594 = (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) * 0.3183098733425140380859375;
    float _1596 = (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * 0.3183098733425140380859375;
    float _1603 = ((cbLight._m0[_1554].x * _1560) * _1596) + ((cbLight._m0[_1564].x * _1571) * _1594);
    float _1604 = ((_1560 * cbLight._m0[_1554].y) * _1596) + ((_1571 * cbLight._m0[_1564].y) * _1594);
    float _1605 = ((_1560 * cbLight._m0[_1554].z) * _1596) + ((_1571 * cbLight._m0[_1564].z) * _1594);
    uvec4 _1610 = floatBitsToUint(cbLight._m0[_1537 + 12u]);
    bool _1612 = _1610.x == 0u;
    float _1623;
    float _1625;
    float _1627;
    if (_1612)
    {
        _1623 = _1603;
        _1625 = _1604;
        _1627 = _1605;
    }
    else
    {
        uint _1631 = _1537 + 6u;
        float _1647 = (dot(vec3(cbLight._m0[_1537 + 2u].xyz), vec3(_317, _318, _319)) * 0.5) + 0.5;
        float _1648 = _1647 * _1647;
        float _3734 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1650 = isnan(1.0) ? _1552 : (isnan(_1552) ? 1.0 : min(_1552, 1.0));
        _1623 = (((cbLight._m0[_1631].x * 0.3183098733425140380859375) * _1649) * _1650) + _1603;
        _1625 = (((cbLight._m0[_1631].y * 0.3183098733425140380859375) * _1649) * _1650) + _1604;
        _1627 = (((cbLight._m0[_1631].z * 0.3183098733425140380859375) * _1649) * _1650) + _1605;
    }
    bool _1630 = _1610.y == 0u;
    float _1668;
    float _1670;
    float _1672;
    if (_1630)
    {
        _1668 = _1623;
        _1670 = _1625;
        _1672 = _1627;
    }
    else
    {
        uint _1838 = _1537 + 7u;
        float _1854 = (dot(vec3(cbLight._m0[_1537 + 3u].xyz), vec3(_317, _318, _319)) * 0.5) + 0.5;
        float _1855 = _1854 * _1854;
        float _3750 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1856 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1857 = isnan(1.0) ? _1553 : (isnan(_1553) ? 1.0 : min(_1553, 1.0));
        _1668 = (((cbLight._m0[_1838].x * 0.3183098733425140380859375) * _1856) * _1857) + _1623;
        _1670 = (((cbLight._m0[_1838].y * 0.3183098733425140380859375) * _1856) * _1857) + _1625;
        _1672 = (((cbLight._m0[_1838].z * 0.3183098733425140380859375) * _1856) * _1857) + _1627;
    }
    uint _1675 = _1537 + 8u;
    float _1688 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1537].w)) * _321) * 0.949999988079071044921875);
    float _1689 = _1688 * _1688;
    float _1690 = cbLight._m0[_1537].x + _400;
    float _1691 = cbLight._m0[_1537].y + _401;
    float _1692 = cbLight._m0[_1537].z + _402;
    float _1696 = inversesqrt(dot(vec3(_1690, _1691, _1692), vec3(_1690, _1691, _1692)));
    float _1697 = _1696 * _1690;
    float _1698 = _1696 * _1691;
    float _1699 = _1696 * _1692;
    float _1700 = dot(vec3(_317, _318, _319), vec3(cbLight._m0[_1537].xyz));
    float _3766 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
    float _1703 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    float _3777 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _1704 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _1705 = dot(vec3(_317, _318, _319), vec3(_1697, _1698, _1699));
    float _3788 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
    float _1708 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _1709 = dot(vec3(cbLight._m0[_1537].xyz), vec3(_1697, _1698, _1699));
    float _3799 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
    float _1713 = _1689 * _1689;
    float _1717 = ((_1708 * _1708) * (_1713 + (-1.0))) + 1.0;
    float _1725 = exp2(log2(1.0 - (isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0)))) * 5.0);
    float _1726 = 0.959999978542327880859375 - _472;
    float _1728 = 0.959999978542327880859375 - _473;
    float _1729 = 0.959999978542327880859375 - _474;
    float _1736 = 1.0 - _1689;
    float _1747 = (0.5 / (((_1704 * ((_1703 * _1736) + _1689)) + 9.9999999392252902907785028219223e-09) + (((_1704 * _1736) + _1689) * _1703))) * _1703;
    float _3810 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
    float _1749 = (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * (_1713 / ((_1717 * _1717) * 3.141590118408203125));
    uint _1760 = _1537 + 9u;
    float _1771 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1575].w)) * _321) * 0.949999988079071044921875);
    float _1772 = _1771 * _1771;
    float _1773 = cbLight._m0[_1575].x + _400;
    float _1774 = cbLight._m0[_1575].y + _401;
    float _1775 = cbLight._m0[_1575].z + _402;
    float _1779 = inversesqrt(dot(vec3(_1773, _1774, _1775), vec3(_1773, _1774, _1775)));
    float _1780 = _1779 * _1773;
    float _1781 = _1779 * _1774;
    float _1782 = _1779 * _1775;
    float _1783 = dot(vec3(_317, _318, _319), vec3(cbLight._m0[_1575].xyz));
    float _3821 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
    float _1786 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _1787 = dot(vec3(_317, _318, _319), vec3(_1780, _1781, _1782));
    float _3832 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _1790 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _1791 = dot(vec3(cbLight._m0[_1575].xyz), vec3(_1780, _1781, _1782));
    float _3843 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1795 = _1772 * _1772;
    float _1799 = ((_1790 * _1790) * (_1795 + (-1.0))) + 1.0;
    float _1806 = exp2(log2(1.0 - (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0)))) * 5.0);
    float _1813 = 1.0 - _1772;
    float _1823 = (0.5 / (((_1704 * ((_1786 * _1813) + _1772)) + 9.9999999392252902907785028219223e-09) + (((_1704 * _1813) + _1772) * _1786))) * _1786;
    float _3854 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _1825 = (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_1795 / ((_1799 * _1799) * 3.141590118408203125));
    float _1835 = (((((_1806 * _1726) + _475) * cbLight._m0[_1760].x) * _1825) * _1560) + (((((_1725 * _1726) + _475) * cbLight._m0[_1675].x) * _1749) * _1571);
    float _1836 = (((((_1806 * _1728) + _477) * cbLight._m0[_1760].y) * _1825) * _1560) + (((((_1725 * _1728) + _477) * cbLight._m0[_1675].y) * _1749) * _1571);
    float _1837 = (((((_1806 * _1729) + _478) * cbLight._m0[_1760].z) * _1825) * _1560) + (((((_1725 * _1729) + _478) * cbLight._m0[_1675].z) * _1749) * _1571);
    float _1899;
    float _1901;
    float _1903;
    if (_1612)
    {
        _1899 = _1835;
        _1901 = _1836;
        _1903 = _1837;
    }
    else
    {
        uint _1905 = _1537 + 2u;
        uint _1909 = _1537 + 10u;
        float _1923 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1905].w)) * _321) * 0.949999988079071044921875);
        float _1924 = _1923 * _1923;
        float _1925 = cbLight._m0[_1905].x + _400;
        float _1926 = cbLight._m0[_1905].y + _401;
        float _1927 = cbLight._m0[_1905].z + _402;
        float _1931 = inversesqrt(dot(vec3(_1925, _1926, _1927), vec3(_1925, _1926, _1927)));
        float _1932 = _1931 * _1925;
        float _1933 = _1931 * _1926;
        float _1934 = _1931 * _1927;
        float _1935 = dot(vec3(_317, _318, _319), vec3(cbLight._m0[_1905].xyz));
        float _3865 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
        float _1938 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1939 = dot(vec3(_317, _318, _319), vec3(_1932, _1933, _1934));
        float _3876 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1942 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1943 = dot(vec3(cbLight._m0[_1905].xyz), vec3(_1932, _1933, _1934));
        float _3887 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1947 = _1924 * _1924;
        float _1951 = ((_1942 * _1942) * (_1947 + (-1.0))) + 1.0;
        float _1958 = exp2(log2(1.0 - (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0)))) * 5.0);
        float _1965 = 1.0 - _1924;
        float _1975 = (0.5 / (((_1704 * ((_1938 * _1965) + _1924)) + 9.9999999392252902907785028219223e-09) + (((_1704 * _1965) + _1924) * _1938))) * _1938;
        float _3898 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
        float _1977 = (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_1947 / ((_1951 * _1951) * 3.141590118408203125));
        float _1978 = isnan(1.0) ? _1552 : (isnan(_1552) ? 1.0 : min(_1552, 1.0));
        _1899 = (((((_1958 * _1726) + _475) * cbLight._m0[_1909].x) * _1977) * _1978) + _1835;
        _1901 = (((((_1958 * _1728) + _477) * cbLight._m0[_1909].y) * _1977) * _1978) + _1836;
        _1903 = (((((_1958 * _1729) + _478) * cbLight._m0[_1909].z) * _1977) * _1978) + _1837;
    }
    float _2013;
    float _2015;
    float _2017;
    if (_1630)
    {
        _2013 = _1899;
        _2015 = _1901;
        _2017 = _1903;
    }
    else
    {
        uint _2024 = _1537 + 3u;
        uint _2028 = _1537 + 11u;
        float _2042 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2024].w)) * _321) * 0.949999988079071044921875);
        float _2043 = _2042 * _2042;
        float _2044 = cbLight._m0[_2024].x + _400;
        float _2045 = cbLight._m0[_2024].y + _401;
        float _2046 = cbLight._m0[_2024].z + _402;
        float _2050 = inversesqrt(dot(vec3(_2044, _2045, _2046), vec3(_2044, _2045, _2046)));
        float _2051 = _2050 * _2044;
        float _2052 = _2050 * _2045;
        float _2053 = _2050 * _2046;
        float _2054 = dot(vec3(_317, _318, _319), vec3(cbLight._m0[_2024].xyz));
        float _3914 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2057 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _2058 = dot(vec3(_317, _318, _319), vec3(_2051, _2052, _2053));
        float _3925 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2061 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _2062 = dot(vec3(cbLight._m0[_2024].xyz), vec3(_2051, _2052, _2053));
        float _3936 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2066 = _2043 * _2043;
        float _2070 = ((_2061 * _2061) * (_2066 + (-1.0))) + 1.0;
        float _2077 = exp2(log2(1.0 - (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) * 5.0);
        float _2084 = 1.0 - _2043;
        float _2094 = (0.5 / (((_1704 * ((_2057 * _2084) + _2043)) + 9.9999999392252902907785028219223e-09) + (((_1704 * _2084) + _2043) * _2057))) * _2057;
        float _3947 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2096 = (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_2066 / ((_2070 * _2070) * 3.141590118408203125));
        float _2097 = isnan(1.0) ? _1553 : (isnan(_1553) ? 1.0 : min(_1553, 1.0));
        _2013 = (((((_2077 * _1726) + _475) * cbLight._m0[_2028].x) * _2096) * _2097) + _1899;
        _2015 = (((((_2077 * _1728) + _477) * cbLight._m0[_2028].y) * _2096) * _2097) + _1901;
        _2017 = (((((_2077 * _1729) + _478) * cbLight._m0[_2028].z) * _2096) * _2097) + _1903;
    }
    float _2231;
    float _2233;
    float _2235;
    float _2237;
    float _2239;
    float _2241;
    if (_1535.y == 0u)
    {
        float _2172 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2173 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2172;
        float _2174 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2172;
        float _2175 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2172;
        uvec4 _2187 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2188 = _2187.x;
        uint _2199 = uint((float(_2187.y) * floor(float(uint(cbSceneParam._m0[85u].y * _409) / _2188))) + floor(float(uint(cbSceneParam._m0[85u].x * _408) / _2188)));
        float _2209 = (log2(_2175 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2210 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        uint _2213 = uint(isnan(14.0) ? _2210 : (isnan(_2210) ? 14.0 : min(_2210, 14.0)));
        uvec4 _2218 = texelFetch(g_lightClusterGridBuffer, int(((_2213 << 2u) + (_2199 << 6u)) >> 2u));
        uint _2219 = _2218.x;
        uint _2220 = _2187.z;
        float _2340;
        float _2342;
        float _2344;
        float _2346;
        float _2348;
        float _2350;
        if (((((1u << ((_2220 >> 4u) & 15u)) + 4294967295u) & _2219) == 0u) || ((_2220 & 240u) == 0u))
        {
            _2340 = 0.0;
            _2342 = 0.0;
            _2344 = 0.0;
            _2346 = 0.0;
            _2348 = 0.0;
            _2350 = 0.0;
        }
        else
        {
            float _2341;
            float _2343;
            float _2345;
            float _2347;
            float _2349;
            float _2351;
            float _2484 = 0.0;
            float _2485 = 0.0;
            float _2486 = 0.0;
            float _2487 = 0.0;
            float _2488 = 0.0;
            float _2489 = 0.0;
            uint _2490 = 0u;
            uint _2499;
            bool _2500;
            for (;;)
            {
                _2499 = texelFetch(g_lightClassification, int((((_2213 << 5u) + (_2199 << 9u)) + (_2490 << 2u)) >> 2u)).x;
                _2500 = _2499 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2500)
                {
                    frontier_phi_63_pred = _2489;
                    frontier_phi_63_pred_1 = _2488;
                    frontier_phi_63_pred_2 = _2487;
                    frontier_phi_63_pred_3 = _2486;
                    frontier_phi_63_pred_4 = _2485;
                    frontier_phi_63_pred_5 = _2484;
                }
                else
                {
                    float _2608;
                    float _2609;
                    float _2610;
                    float _2611;
                    float _2612;
                    float _2613;
                    uint _2614;
                    _2608 = _2484;
                    _2609 = _2485;
                    _2610 = _2486;
                    _2611 = _2487;
                    _2612 = _2488;
                    _2613 = _2489;
                    _2614 = _2499;
                    float _2540;
                    float _2541;
                    float _2542;
                    float _2543;
                    float _2544;
                    float _2545;
                    for (;;)
                    {
                        uint _2618 = uint(findLSB(_2614)) + (_2490 << 5u);
                        uint _2615 = (_2614 + 4294967295u) & _2614;
                        uint _2620 = _2618 * 48u;
                        vec4 _2634 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2620)).x, texelFetch(g_PointLightRenderingBuffer, int(_2620 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2620 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2620 + 3u)).x));
                        uint _2640 = (_2618 * 48u) + 4u;
                        vec4 _2653 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2640)).x, texelFetch(g_PointLightRenderingBuffer, int(_2640 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2640 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2640 + 3u)).x));
                        uint _2659 = (_2618 * 48u) + 8u;
                        vec3 _2670 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2659)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 2u)).x));
                        float _2674 = _2634.x - _2173;
                        float _2675 = _2634.y - _2174;
                        float _2676 = _2634.z - _2175;
                        float _2677 = dot(vec3(_2674, _2675, _2676), vec3(_2674, _2675, _2676));
                        float _2680 = inversesqrt(_2677);
                        float _2681 = _2680 * _2674;
                        float _2682 = _2680 * _2675;
                        float _2683 = _2680 * _2676;
                        float _2684 = dot(vec3(_430, _433, _436), vec3(_2681, _2682, _2683));
                        float _2689 = 1.0 - (_2677 * _2634.w);
                        float _3973 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
                        float _2690 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
                        float _2691 = sqrt(_2677) * _2653.w;
                        float _2694 = 1.39999997615814208984375 / (_2691 + 1.39999997615814208984375);
                        float _2695 = _2694 * _2694;
                        float _2698 = ((1.0 - _2695) * _2684) + _2695;
                        float _2701 = _2691 * _2691;
                        float _2705 = ((isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0))) * _2690) / ((_2701 * 0.699999988079071044921875) + 1.0);
                        float _2709 = (-0.0) - _2173;
                        float _2710 = (-0.0) - _2174;
                        float _2711 = (-0.0) - _2175;
                        float _2715 = inversesqrt(dot(vec3(_2709, _2710, _2711), vec3(_2709, _2710, _2711)));
                        float _2716 = _2715 * _2709;
                        float _2717 = _2715 * _2710;
                        float _2718 = _2715 * _2711;
                        float _2726 = exp2(log2(1.0 / ((_2701 * 3.5) + 5.0)) * 0.25);
                        float _2727 = 1.0 - _506;
                        float _2734 = sqrt(1.0 - ((1.0 - (_2727 * _2727)) * (1.0 - (_2726 * _2726))));
                        float _2735 = _2734 * _2734;
                        float _2736 = _2735 * _2735;
                        float _2737 = _2716 + _2681;
                        float _2738 = _2717 + _2682;
                        float _2739 = _2718 + _2683;
                        float _2743 = inversesqrt(dot(vec3(_2737, _2738, _2739), vec3(_2737, _2738, _2739)));
                        float _2747 = dot(vec3(_430, _433, _436), vec3(_2716, _2717, _2718));
                        float _3989 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
                        float _2750 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
                        float _2751 = dot(vec3(_430, _433, _436), vec3(_2743 * _2737, _2743 * _2738, _2743 * _2739));
                        float _4000 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
                        float _2754 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
                        float _2758 = ((_2754 * _2754) * (_2736 + (-1.0))) + 1.0;
                        float _2759 = _2694 * _2735;
                        float _2760 = _2759 * _2759;
                        float _2763 = ((1.0 - _2760) * _2684) + _2760;
                        float _4011 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
                        float _2764 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
                        float _2765 = 1.0 - _2735;
                        float _2775 = (0.5 / (((_2764 * ((_2750 * _2765) + _2735)) + 9.9999999392252902907785028219223e-09) + (((_2764 * _2765) + _2735) * _2750))) * _2764;
                        float _4022 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
                        float _2786 = (((_2736 * 3.1415927410125732421875) * (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) / ((_2758 * _2758) * ((_2701 * 2.1991131305694580078125) + 3.141590118408203125))) * _2690;
                        _2543 = (_2705 * _2653.x) + _2611;
                        _2544 = (_2705 * _2653.y) + _2612;
                        _2545 = (_2705 * _2653.z) + _2613;
                        _2540 = (_2786 * _2670.x) + _2608;
                        _2541 = (_2786 * _2670.y) + _2609;
                        _2542 = (_2786 * _2670.z) + _2610;
                        if (_2615 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2608 = _2540;
                            _2609 = _2541;
                            _2610 = _2542;
                            _2611 = _2543;
                            _2612 = _2544;
                            _2613 = _2545;
                            _2614 = _2615;
                        }
                    }
                    frontier_phi_63_pred = _2545;
                    frontier_phi_63_pred_1 = _2544;
                    frontier_phi_63_pred_2 = _2543;
                    frontier_phi_63_pred_3 = _2542;
                    frontier_phi_63_pred_4 = _2541;
                    frontier_phi_63_pred_5 = _2540;
                }
                _2351 = frontier_phi_63_pred;
                _2349 = frontier_phi_63_pred_1;
                _2347 = frontier_phi_63_pred_2;
                _2345 = frontier_phi_63_pred_3;
                _2343 = frontier_phi_63_pred_4;
                _2341 = frontier_phi_63_pred_5;
                uint _2491 = _2490 + 1u;
                if (_2491 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2484 = _2341;
                    _2485 = _2343;
                    _2486 = _2345;
                    _2487 = _2347;
                    _2488 = _2349;
                    _2489 = _2351;
                    _2490 = _2491;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2340 = _2341;
            _2342 = _2343;
            _2344 = _2345;
            _2346 = _2347;
            _2348 = _2349;
            _2350 = _2351;
        }
        uvec4 _2354 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2355 = _2354.z;
        uint _2357 = (_2355 >> 8u) & 15u;
        float _2452;
        float _2454;
        float _2456;
        float _2458;
        float _2460;
        float _2462;
        if (((4294967295u << _2357) & _2219) == 0u)
        {
            _2452 = _2340;
            _2454 = _2342;
            _2456 = _2344;
            _2458 = _2346;
            _2460 = _2348;
            _2462 = _2350;
        }
        else
        {
            float _2477 = inversesqrt(dot(vec3(_2173, _2174, _2175), vec3(_2173, _2174, _2175)));
            float _2478 = _2477 * _2173;
            float _2479 = _2477 * _2174;
            float _2480 = _2477 * _2175;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2357 < ((_2355 >> 12u) & 15u))
            {
                float _2453;
                float _2455;
                float _2457;
                float _2459;
                float _2461;
                float _2463;
                float _2591 = _2340;
                float _2592 = _2342;
                float _2593 = _2344;
                float _2594 = _2346;
                float _2595 = _2348;
                float _2596 = _2350;
                uint _2597 = _2357;
                uint _2606;
                bool _2607;
                for (;;)
                {
                    _2606 = texelFetch(g_lightClassification, int((((_2213 << 5u) + (_2199 << 9u)) + (_2597 << 2u)) >> 2u)).x;
                    _2607 = _2606 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2607)
                    {
                        frontier_phi_69_pred = _2596;
                        frontier_phi_69_pred_1 = _2595;
                        frontier_phi_69_pred_2 = _2594;
                        frontier_phi_69_pred_3 = _2593;
                        frontier_phi_69_pred_4 = _2592;
                        frontier_phi_69_pred_5 = _2591;
                    }
                    else
                    {
                        float _2791;
                        float _2792;
                        float _2793;
                        float _2794;
                        float _2795;
                        float _2796;
                        float _3087;
                        float _3088;
                        float _3089;
                        float _3090;
                        float _3091;
                        float _3092;
                        float _2804 = _2591;
                        float _2805 = _2592;
                        float _2806 = _2593;
                        float _2807 = _2594;
                        float _2808 = _2595;
                        float _2809 = _2596;
                        uint _2810 = _2606;
                        uint _2811;
                        vec4 _2836;
                        float _2837;
                        vec4 _2852;
                        vec3 _2864;
                        vec4 _2880;
                        vec4 _2896;
                        float _2943;
                        bool _2944;
                        for (;;)
                        {
                            uint _2821 = ((_2597 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2810));
                            _2811 = (_2810 + 4294967295u) & _2810;
                            uint _2823 = _2821 * 40u;
                            _2836 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2823)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 3u)).x));
                            _2837 = _2836.w;
                            uint _2839 = (_2821 * 40u) + 4u;
                            _2852 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2839)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 3u)).x));
                            uint _2854 = (_2821 * 40u) + 8u;
                            _2864 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2854)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 2u)).x));
                            uint _2867 = (_2821 * 40u) + 16u;
                            _2880 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2867)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 3u)).x));
                            uint _2883 = (_2821 * 40u) + 20u;
                            _2896 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2883)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 3u)).x));
                            uint _2899 = (_2821 * 40u) + 24u;
                            vec4 _2912 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2899)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 3u)).x));
                            uint _2918 = (_2821 * 40u) + 28u;
                            vec4 _2931 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2918)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 3u)).x));
                            _2943 = fma(_2175, _2931.z, fma(_2174, _2931.y, _2931.x * _2173)) + _2931.w;
                            _2944 = !((fma(_2175, _2912.z, fma(_2174, _2912.y, _2912.x * _2173)) + _2912.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2944)
                            {
                                float _2971 = _2836.x - _2173;
                                float _2972 = _2836.y - _2174;
                                float _2973 = _2836.z - _2175;
                                float _2974 = dot(vec3(_2971, _2972, _2973), vec3(_2971, _2972, _2973));
                                float _2977 = inversesqrt(_2974);
                                float _2978 = _2977 * _2971;
                                float _2979 = _2977 * _2972;
                                float _2980 = _2977 * _2973;
                                float _2984 = 1.0 - (_2974 / (_2837 * _2837));
                                float _4033 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
                                float _2985 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
                                float _2989 = sqrt(_2974) * _2852.w;
                                float _2991 = 1.39999997615814208984375 / (_2989 + 1.39999997615814208984375);
                                float _2992 = _2991 * _2991;
                                float _2995 = ((1.0 - _2992) * dot(vec3(_2978, _2979, _2980), vec3(_430, _433, _436))) + _2992;
                                float _2998 = _2989 * _2989;
                                float _3002 = (fma(_2175, _2880.z, fma(_2174, _2880.y, _2880.x * _2173)) + _2880.w) / _2943;
                                float _3003 = (fma(_2175, _2896.z, fma(_2174, _2896.y, _2896.x * _2173)) + _2896.w) / _2943;
                                float _3007 = 1.0 - dot(vec2(_3002, _3003), vec2(_3002, _3003));
                                float _4049 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                                float _3008 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
                                float _3009 = _3008 * (((isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0))) * _2985) / ((_2998 * 0.699999988079071044921875) + 1.0));
                                float _3021 = exp2(log2(1.0 / ((_2998 * 3.5) + 5.0)) * 0.25);
                                float _3022 = 1.0 - _506;
                                float _3029 = sqrt(1.0 - ((1.0 - (_3022 * _3022)) * (1.0 - (_3021 * _3021))));
                                float _3030 = _3029 * _3029;
                                float _3031 = _3030 * _3030;
                                float _3032 = _2978 - _2478;
                                float _3033 = _2979 - _2479;
                                float _3034 = _2980 - _2480;
                                float _3038 = inversesqrt(dot(vec3(_3032, _3033, _3034), vec3(_3032, _3033, _3034)));
                                float _3042 = dot(vec3(_430, _433, _436), vec3((-0.0) - _2478, (-0.0) - _2479, (-0.0) - _2480));
                                float _4060 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                                float _3045 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
                                float _3046 = dot(vec3(_430, _433, _436), vec3(_3038 * _3032, _3038 * _3033, _3038 * _3034));
                                float _4071 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                                float _3049 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
                                float _3053 = ((_3049 * _3049) * (_3031 + (-1.0))) + 1.0;
                                float _3054 = _2991 * _3030;
                                float _3055 = _3054 * _3054;
                                float _3061 = ((1.0 - _3055) * dot(vec3(_430, _433, _436), vec3(_2978, _2979, _2980))) + _3055;
                                float _4082 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                                float _3062 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
                                float _3063 = 1.0 - _3030;
                                float _3073 = (0.5 / (((_3062 * ((_3045 * _3063) + _3030)) + 9.9999999392252902907785028219223e-09) + (((_3062 * _3063) + _3030) * _3045))) * _3062;
                                float _4093 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                                float _3083 = (_3008 * _2985) * (((_3031 * 3.1415927410125732421875) * (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0)))) / ((_3053 * _3053) * ((_2998 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3009 * _2852.z;
                                frontier_phi_75_pred_1 = _3009 * _2852.y;
                                frontier_phi_75_pred_2 = _3009 * _2852.x;
                                frontier_phi_75_pred_3 = _3083 * _2864.z;
                                frontier_phi_75_pred_4 = _3083 * _2864.y;
                                frontier_phi_75_pred_5 = _3083 * _2864.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3092 = frontier_phi_75_pred;
                            _3091 = frontier_phi_75_pred_1;
                            _3090 = frontier_phi_75_pred_2;
                            _3089 = frontier_phi_75_pred_3;
                            _3088 = frontier_phi_75_pred_4;
                            _3087 = frontier_phi_75_pred_5;
                            _2794 = _3090 + _2807;
                            _2795 = _3091 + _2808;
                            _2796 = _3092 + _2809;
                            _2791 = _3087 + _2804;
                            _2792 = _3088 + _2805;
                            _2793 = _3089 + _2806;
                            if (_2811 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2804 = _2791;
                                _2805 = _2792;
                                _2806 = _2793;
                                _2807 = _2794;
                                _2808 = _2795;
                                _2809 = _2796;
                                _2810 = _2811;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2796;
                        frontier_phi_69_pred_1 = _2795;
                        frontier_phi_69_pred_2 = _2794;
                        frontier_phi_69_pred_3 = _2793;
                        frontier_phi_69_pred_4 = _2792;
                        frontier_phi_69_pred_5 = _2791;
                    }
                    _2463 = frontier_phi_69_pred;
                    _2461 = frontier_phi_69_pred_1;
                    _2459 = frontier_phi_69_pred_2;
                    _2457 = frontier_phi_69_pred_3;
                    _2455 = frontier_phi_69_pred_4;
                    _2453 = frontier_phi_69_pred_5;
                    uint _2598 = _2597 + 1u;
                    if (_2598 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2591 = _2453;
                        _2592 = _2455;
                        _2593 = _2457;
                        _2594 = _2459;
                        _2595 = _2461;
                        _2596 = _2463;
                        _2597 = _2598;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2463;
                frontier_phi_57_58_ladder_1 = _2461;
                frontier_phi_57_58_ladder_2 = _2459;
                frontier_phi_57_58_ladder_3 = _2457;
                frontier_phi_57_58_ladder_4 = _2455;
                frontier_phi_57_58_ladder_5 = _2453;
            }
            else
            {
                frontier_phi_57_58_ladder = _2350;
                frontier_phi_57_58_ladder_1 = _2348;
                frontier_phi_57_58_ladder_2 = _2346;
                frontier_phi_57_58_ladder_3 = _2344;
                frontier_phi_57_58_ladder_4 = _2342;
                frontier_phi_57_58_ladder_5 = _2340;
            }
            _2452 = frontier_phi_57_58_ladder_5;
            _2454 = frontier_phi_57_58_ladder_4;
            _2456 = frontier_phi_57_58_ladder_3;
            _2458 = frontier_phi_57_58_ladder_2;
            _2460 = frontier_phi_57_58_ladder_1;
            _2462 = frontier_phi_57_58_ladder;
        }
        float _2467 = isnan(1.0) ? _490 : (isnan(_490) ? 1.0 : min(_490, 1.0));
        _2231 = (_2467 * _2458) + _1668;
        _2233 = (_2467 * _2460) + _1670;
        _2235 = (_2467 * _2462) + _1672;
        _2237 = ((_2452 * _475) * _2467) + _2013;
        _2239 = ((_2454 * _477) * _2467) + _2015;
        _2241 = ((_2456 * _478) * _2467) + _2017;
    }
    else
    {
        _2231 = _1668;
        _2233 = _1670;
        _2235 = _1672;
        _2237 = _2013;
        _2239 = _2015;
        _2241 = _2017;
    }
    uint _2247 = _451 + uint(cbMatDynParam._m0[0u].w);
    float _4109 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _4120 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _4131 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _4142 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _2273 = (((isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_2231 + ((isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0))) * _490))) + ((_2237 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _1300)) * cbPerFrame._m0[3u].x)) + ((_296.x * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2247].x);
    float _2275 = (((_296.y * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2247].y) + ((_2239 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _1300)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_2233 + ((isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0))) * _490)));
    float _2277 = (((_296.z * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2247].z) + ((_2241 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _1300)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_2235 + ((isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0))) * _490)));
    float _2285 = cbInstanceData._m0[_449 + 6u].w * (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0)));
    float _2290 = _408 / cbSceneParam._m0[86u].x;
    float _2291 = _409 / cbSceneParam._m0[86u].y;
    vec4 _2305 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2290, _2291, (log2((isnan(cbSceneParam._m0[77u].w) ? _341 : (isnan(_341) ? cbSceneParam._m0[77u].w : min(_341, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2307 = _2305.x;
    float _2308 = _2305.y;
    float _2309 = _2305.z;
    float _2310 = _2305.w;
    float _2402;
    float _2404;
    float _2406;
    float _2408;
    if (_341 > cbSceneParam._m0[78u].w)
    {
        float _2365 = isnan(_341) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _341 : min(cbSceneParam._m0[80u].w, _341));
        float _2366 = _2365 / _341;
        float _2377 = _2366 * _393;
        float _2378 = _394 * _2366;
        float _2379 = (-0.0) - _2378;
        float _2380 = _2366 * _395;
        float _2382 = (cbSceneParam._m0[77u].w * _2379) / _2365;
        float _2383 = _2382 + cbSceneParam._m0[79u].w;
        float _2384 = cbSceneParam._m0[79u].w - _2378;
        float _2390 = sqrt(((_2377 * _2377) + (_2378 * _2378)) + (_2380 * _2380));
        float _2393 = (1.0 - (cbSceneParam._m0[77u].w / _2365)) * _2390;
        float _2398 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2400 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2553;
        if (abs((_2379 - _2382) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2553 = ((((_2383 > 0.0) ? exp2(_2398 * _2383) : (2.0 - exp2(_2400 * _2383))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2393;
        }
        else
        {
            float _2513 = 1.0 / cbSceneParam._m0[80u].x;
            float _2514 = isnan(_2384) ? _2383 : (isnan(_2383) ? _2384 : max(_2383, _2384));
            float _2515 = isnan(_2384) ? _2383 : (isnan(_2383) ? _2384 : min(_2383, _2384));
            float _2524 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : min(_2514, 0.0));
            float _2525 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : min(_2515, 0.0));
            _2553 = ((abs(_2390 / _2379) * cbSceneParam._m0[80u].y) * ((((_2524 - _2525) * 2.0) - ((exp2(_2398 * (isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0)))) - exp2(_2398 * (isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0))))) * _2513)) - ((exp2(_2400 * _2524) - exp2(_2400 * _2525)) * _2513))) + (_2393 * cbSceneParam._m0[80u].z);
        }
        vec4 _2555 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2290, _2291, 1.0), 0.0);
        float _2564 = exp2((_2553 * (-1.44269502162933349609375)) * (1.0 - _2555.w));
        float _2565 = log2(_2564);
        float _2581 = log2(_2310);
        _2402 = (exp2(_2581 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2565 * cbSceneParam._m0[78u].x)) * _2555.x) / cbSceneParam._m0[78u].x)) + _2307;
        _2404 = (exp2(_2581 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2565 * cbSceneParam._m0[78u].y)) * _2555.y) / cbSceneParam._m0[78u].y)) + _2308;
        _2406 = (exp2(_2581 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2565 * cbSceneParam._m0[78u].z)) * _2555.z) / cbSceneParam._m0[78u].z)) + _2309;
        _2408 = _2564 * _2310;
    }
    else
    {
        _2402 = _2307;
        _2404 = _2308;
        _2406 = _2309;
        _2408 = _2310;
    }
    float _2420 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2421 = _2420 == 3.0;
    float _2422 = log2(_2408);
    float _2429 = exp2(_2422 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0)));
    float _2430 = exp2(_2422 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0)));
    float _2431 = exp2(_2422 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0)));
    float _2440 = (_2420 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2440 * (_2421 ? _2429 : (_2429 + (cbSceneParam._m0[72u].w * _2402)));
    SV_Target.y = _2440 * (_2421 ? _2430 : (_2430 + (cbSceneParam._m0[72u].w * _2404)));
    SV_Target.z = _2440 * (_2421 ? _2431 : (_2431 + (cbSceneParam._m0[72u].w * _2406)));
    SV_Target.w = _2285;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2285;
}


