#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Emissive_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Emissive_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Emissive_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Emissive_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _869;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    vec4 _232 = texture(sampler2D(M_AMSN_Emissive_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _235 = _232.x;
    float _236 = _232.y;
    float _237 = _232.z;
    float _239 = _232.w * TEXCOORD_1.z;
    vec4 _255 = texture(sampler2D(M_AMSN_Emissive_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _258 = _255.x + cbMtdParam._m0[9u].x;
    vec4 _270 = texture(sampler2D(M_AMSN_Emissive_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _274 = _270.z;
    float _278 = (_270.x * 2.0) + (-1.0);
    float _280 = (_270.y * 2.0) + (-1.0);
    float _281 = dot(vec2(_278, _280), vec2(_278, _280));
    float _3510 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _287 = sqrt(1.0 - (isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0))));
    vec4 _300 = texture(sampler2D(M_AMSN_Emissive_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[3u].w));
    float _310 = fma(_287, _216, fma(_280, _208 * TANGENT.x, (_194 * _186) * _278));
    float _313 = fma(_287, _217, fma(_280, _208 * TANGENT.y, (_194 * _187) * _278));
    float _316 = fma(_287, _218, fma(_280, _208 * TANGENT.z, (_194 * _188) * _278));
    float _320 = inversesqrt(dot(vec3(_310, _313, _316), vec3(_310, _313, _316)));
    float _321 = _320 * _310;
    float _322 = _320 * _313;
    float _323 = _320 * _316;
    float _3521 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _324 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
    float _3532 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _325 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
    float _3543 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3554 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3565 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3576 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _329 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    float _345 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _387 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _397 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _387);
    float _398 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _387);
    float _399 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _387);
    float _403 = inversesqrt(dot(vec3(_397, _398, _399), vec3(_397, _398, _399)));
    float _404 = _397 * _403;
    float _405 = _398 * _403;
    float _406 = _399 * _403;
    float _412 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _413 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _434 = fma(_323, cbSceneParam._m0[5u].z, fma(_322, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _321));
    float _437 = fma(_323, cbSceneParam._m0[6u].z, fma(_322, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _321));
    float _440 = fma(_323, cbSceneParam._m0[7u].z, fma(_322, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _321));
    uint _453 = uint(roundEven(NORMAL.w)) * 13u;
    uint _455 = _453 + 9u;
    uint _456 = _455 + uint(cbMatDynParam._m0[0u].w);
    float _462 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0)))) * cbInstanceData._m0[_456].x;
    float _463 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0)))) * cbInstanceData._m0[_456].y;
    float _464 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0)))) * cbInstanceData._m0[_456].z;
    float _3587 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _465 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
    float _3598 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _466 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
    float _3609 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _467 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
    float _468 = 1.0 - _329;
    float _469 = _465 * _468;
    float _470 = _466 * _468;
    float _471 = _467 * _468;
    float _476 = (_465 + (-0.039999999105930328369140625)) * _329;
    float _477 = (_466 + (-0.039999999105930328369140625)) * _329;
    float _478 = (_467 + (-0.039999999105930328369140625)) * _329;
    float _479 = _476 + 0.039999999105930328369140625;
    float _481 = _477 + 0.039999999105930328369140625;
    float _482 = _478 + 0.039999999105930328369140625;
    vec4 _491 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _412, cbSceneParam._m0[86u].y * _413));
    float _494 = _491.x * TEXCOORD_1.w;
    float _495 = dot(vec3(_321, _322, _323), vec3(_404, _405, _406));
    float _498 = _495 * 2.0;
    float _502 = (_498 * _321) - _404;
    float _503 = (_498 * _322) - _405;
    float _504 = (_498 * _323) - _406;
    float _508 = abs(dot(vec3(_404, _405, _406), vec3(_321, _322, _323)));
    float _3620 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _510 = sqrt(_325);
    float _523 = exp2((_510 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_510 * 3.0));
    float _529 = (1.0 - _523) * ((_510 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _530 = _523 * _510;
    float _558 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _562 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _566 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _868;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _593 = fma(_566, cbModelParam._m0[26u].z, fma(_562, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _558));
        float _597 = fma(_566, cbModelParam._m0[27u].z, fma(_562, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _558));
        float _601 = fma(_566, cbModelParam._m0[28u].z, fma(_562, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _558));
        float _626 = _558 + _321;
        float _627 = _562 + _322;
        float _628 = _566 + _323;
        float _638 = fma(_628, cbModelParam._m0[26u].z, fma(_627, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _626)) - _593;
        float _639 = fma(_628, cbModelParam._m0[27u].z, fma(_627, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _626)) - _597;
        float _640 = fma(_628, cbModelParam._m0[28u].z, fma(_627, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _626)) - _601;
        float _644 = inversesqrt(dot(vec3(_638, _639, _640), vec3(_638, _639, _640)));
        float _657 = ((_644 * _638) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_593 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _658 = ((_644 * _639) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_597 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _659 = ((_644 * _640) / cbModelParam._m0[34u].z) + ((((((_601 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _662 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_657, _658, _659), 0.0);
        vec4 _669 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_657, _658, _659), 0.0);
        vec4 _676 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_657, _658, _659), 0.0);
        vec4 _683 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_657, _658, _659), 0.0);
        float _696 = exp2((_662.w + (-0.5)) * 20.0) * 2.0;
        float _697 = _696 * (_662.x + (-0.5));
        float _698 = _696 * (_662.y + (-0.5));
        float _699 = _696 * (_662.z + (-0.5));
        float _706 = exp2((_669.w + (-0.5)) * 20.0) * 2.0;
        float _707 = _706 * (_669.x + (-0.5));
        float _708 = _706 * (_669.y + (-0.5));
        float _709 = _706 * (_669.z + (-0.5));
        float _716 = exp2((_676.w + (-0.5)) * 20.0) * 2.0;
        float _717 = _716 * (_676.x + (-0.5));
        float _718 = _716 * (_676.y + (-0.5));
        float _719 = _716 * (_676.z + (-0.5));
        float _726 = exp2((_683.w + (-0.5)) * 20.0) * 2.0;
        float _727 = _726 * (_683.x + (-0.5));
        float _728 = _726 * (_683.y + (-0.5));
        float _729 = _726 * (_683.z + (-0.5));
        float _730 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _731 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _732 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _733 = _697 * 0.5;
        float _734 = _707 * 0.5;
        float _735 = _717 * 0.5;
        float _736 = dot(vec3(_733, _734, _735), vec3(_733, _734, _735));
        float _741 = (_736 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_736);
        float _750 = (dot(vec3(_321, _322, _323), vec3(_741 * _733, _741 * _734, _741 * _735)) + 1.0) * 0.5;
        float _3646 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _760 = sqrt(((_734 * _734) + (_733 * _733)) + (_735 * _735)) / (_730 + 9.9999997473787516355514526367188e-06);
        float _3657 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _761 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _762 = _761 * 2.0;
        float _766 = (1.0 - _761) / (_761 + 1.0);
        float _3668 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _767 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _776 = ((((1.0 - _767) * (_762 + 2.0)) * exp2(log2(isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * (_762 + 1.0))) + _767) * _730;
        float _777 = _698 * 0.5;
        float _778 = _708 * 0.5;
        float _779 = _718 * 0.5;
        float _780 = dot(vec3(_777, _778, _779), vec3(_777, _778, _779));
        float _785 = (_780 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_780);
        float _793 = (dot(vec3(_321, _322, _323), vec3(_785 * _777, _785 * _778, _785 * _779)) + 1.0) * 0.5;
        float _3679 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _802 = sqrt(((_778 * _778) + (_777 * _777)) + (_779 * _779)) / (_731 + 9.9999997473787516355514526367188e-06);
        float _3690 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _803 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _804 = _803 * 2.0;
        float _808 = (1.0 - _803) / (_803 + 1.0);
        float _3701 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _809 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _818 = ((((1.0 - _809) * (_804 + 2.0)) * exp2(log2(isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * (_804 + 1.0))) + _809) * _731;
        float _819 = _699 * 0.5;
        float _820 = _709 * 0.5;
        float _821 = _719 * 0.5;
        float _822 = dot(vec3(_819, _820, _821), vec3(_819, _820, _821));
        float _827 = (_822 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_822);
        float _835 = (dot(vec3(_321, _322, _323), vec3(_827 * _819, _827 * _820, _827 * _821)) + 1.0) * 0.5;
        float _3712 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _844 = sqrt(((_820 * _820) + (_819 * _819)) + (_821 * _821)) / (_732 + 9.9999997473787516355514526367188e-06);
        float _3723 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _845 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _846 = _845 * 2.0;
        float _850 = (1.0 - _845) / (_845 + 1.0);
        float _3734 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _851 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _860 = ((((1.0 - _851) * (_846 + 2.0)) * exp2(log2(isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) * (_846 + 1.0))) + _851) * _732;
        _868 = _699;
        _870 = _698;
        _871 = _697;
        _872 = _709;
        _873 = _708;
        _874 = _707;
        _875 = _719;
        _876 = _718;
        _877 = _717;
        _878 = _732;
        _879 = _731;
        _880 = _730;
        _881 = cbModelParam._m0[36u].z * (isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0)));
        _882 = cbModelParam._m0[36u].z * (isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0)));
        _883 = cbModelParam._m0[36u].z * (isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0)));
    }
    else
    {
        _868 = _869;
        _870 = _869;
        _871 = _869;
        _872 = _869;
        _873 = _869;
        _874 = _869;
        _875 = _869;
        _876 = _869;
        _877 = _869;
        _878 = _869;
        _879 = _869;
        _880 = _869;
        _881 = 0.0;
        _882 = 0.0;
        _883 = 0.0;
    }
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _909 = fma(_566, cbModelParam._m0[30u].z, fma(_562, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _558));
        float _913 = fma(_566, cbModelParam._m0[31u].z, fma(_562, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _558));
        float _917 = fma(_566, cbModelParam._m0[32u].z, fma(_562, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _558));
        float _940 = _558 + _321;
        float _941 = _562 + _322;
        float _942 = _566 + _323;
        float _952 = fma(_942, cbModelParam._m0[30u].z, fma(_941, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _940)) - _909;
        float _953 = fma(_942, cbModelParam._m0[31u].z, fma(_941, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _940)) - _913;
        float _954 = fma(_942, cbModelParam._m0[32u].z, fma(_941, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _940)) - _917;
        float _958 = inversesqrt(dot(vec3(_952, _953, _954), vec3(_952, _953, _954)));
        float _971 = ((_958 * _952) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_909 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _972 = ((_958 * _953) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_913 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _973 = ((_958 * _954) / cbModelParam._m0[35u].z) + ((((((_917 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        float _1008 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_975.x + (-0.5));
        float _1010 = _1008 * (_975.y + (-0.5));
        float _1011 = _1008 * (_975.z + (-0.5));
        float _1018 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_982.x + (-0.5));
        float _1020 = _1018 * (_982.y + (-0.5));
        float _1021 = _1018 * (_982.z + (-0.5));
        float _1028 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_989.x + (-0.5));
        float _1030 = _1028 * (_989.y + (-0.5));
        float _1031 = _1028 * (_989.z + (-0.5));
        float _1038 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_996.x + (-0.5));
        float _1040 = _1038 * (_996.y + (-0.5));
        float _1041 = _1038 * (_996.z + (-0.5));
        float _1042 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1043 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = _1009 * 0.5;
        float _1046 = _1019 * 0.5;
        float _1047 = _1029 * 0.5;
        float _1048 = dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047));
        float _1053 = (_1048 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1048);
        float _1061 = (dot(vec3(_321, _322, _323), vec3(_1053 * _1045, _1053 * _1046, _1053 * _1047)) + 1.0) * 0.5;
        float _3775 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1070 = sqrt(((_1046 * _1046) + (_1045 * _1045)) + (_1047 * _1047)) / (_1042 + 9.9999997473787516355514526367188e-06);
        float _3786 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1072 = _1071 * 2.0;
        float _1076 = (1.0 - _1071) / (_1071 + 1.0);
        float _3797 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1086 = ((((1.0 - _1077) * (_1072 + 2.0)) * exp2(log2(isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * (_1072 + 1.0))) + _1077) * _1042;
        float _1087 = _1010 * 0.5;
        float _1088 = _1020 * 0.5;
        float _1089 = _1030 * 0.5;
        float _1090 = dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089));
        float _1095 = (_1090 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1090);
        float _1103 = (dot(vec3(_321, _322, _323), vec3(_1095 * _1087, _1095 * _1088, _1095 * _1089)) + 1.0) * 0.5;
        float _3808 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1112 = sqrt(((_1088 * _1088) + (_1087 * _1087)) + (_1089 * _1089)) / (_1043 + 9.9999997473787516355514526367188e-06);
        float _3819 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1114 = _1113 * 2.0;
        float _1118 = (1.0 - _1113) / (_1113 + 1.0);
        float _3830 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1128 = ((((1.0 - _1119) * (_1114 + 2.0)) * exp2(log2(isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * (_1114 + 1.0))) + _1119) * _1043;
        float _1129 = _1011 * 0.5;
        float _1130 = _1021 * 0.5;
        float _1131 = _1031 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1145 = (dot(vec3(_321, _322, _323), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _3841 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1154 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _3852 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _3863 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * (_1156 + 1.0))) + _1161) * _1044;
        _1178 = _1011;
        _1179 = _1010;
        _1180 = _1009;
        _1181 = _1021;
        _1182 = _1020;
        _1183 = _1019;
        _1184 = _1031;
        _1185 = _1030;
        _1186 = _1029;
        _1187 = _1044;
        _1188 = _1043;
        _1189 = _1042;
        _1190 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0)));
        _1191 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)));
        _1192 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
    }
    else
    {
        _1178 = _869;
        _1179 = _869;
        _1180 = _869;
        _1181 = _869;
        _1182 = _869;
        _1183 = _869;
        _1184 = _869;
        _1185 = _869;
        _1186 = _869;
        _1187 = _869;
        _1188 = _869;
        _1189 = _869;
        _1190 = 0.0;
        _1191 = 0.0;
        _1192 = 0.0;
    }
    float _1202 = (cbModelParam._m0[1u].x * (_1190 - _881)) + _881;
    float _1203 = (cbModelParam._m0[1u].x * (_1191 - _882)) + _882;
    float _1204 = (cbModelParam._m0[1u].x * (_1192 - _883)) + _883;
    float _1225 = fma(_1204, cbSceneParam._m0[89u].z, fma(_1203, cbSceneParam._m0[89u].y, _1202 * cbSceneParam._m0[89u].x));
    float _1228 = fma(_1204, cbSceneParam._m0[90u].z, fma(_1203, cbSceneParam._m0[90u].y, _1202 * cbSceneParam._m0[90u].x));
    float _1231 = fma(_1204, cbSceneParam._m0[91u].z, fma(_1203, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1202));
    float _1246 = _502 * 0.5;
    float _1247 = _503 * 0.5;
    float _1248 = _504 * 0.5;
    float _1249 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_1180, _1183, _1186, _1189));
    float _1252 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_1179, _1182, _1185, _1188));
    float _1255 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_1178, _1181, _1184, _1187));
    float _1289;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1262 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_868, _872, _875, _878));
        float _1266 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_870, _873, _876, _879));
        float _1270 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_871, _874, _877, _880));
        float _1277 = dot(vec4(cbModelParam._m0[39u]), vec4(_1246, _1247, _1248, 1.0));
        _1289 = dot(vec3(isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)), isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)), isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1277) ? 0.0 : (isnan(0.0) ? _1277 : max(0.0, _1277))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1289 = 1.0;
    }
    float _1300;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1291 = dot(vec4(cbModelParam._m0[40u]), vec4(_1246, _1247, _1248, 1.0));
        _1300 = dot(vec3(isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)), isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)), isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1291) ? 0.0 : (isnan(0.0) ? _1291 : max(0.0, _1291))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1300 = 1.0;
    }
    float _1304 = (_1300 * cbModelParam._m0[1u].x) + (_1289 * (1.0 - cbModelParam._m0[1u].x));
    float _1314 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _325);
    float _1315 = isnan(_1314) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1314 : min(cbModelParam._m0[25u].z, _1314));
    float _1397;
    float _1399;
    float _1401;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1364 = fma(_566, cbModelParam._m0[13u].z, fma(_562, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _558)) + cbModelParam._m0[13u].w;
        float _1368 = fma(_566, cbModelParam._m0[14u].z, fma(_562, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _558)) + cbModelParam._m0[14u].w;
        float _1372 = fma(_566, cbModelParam._m0[15u].z, fma(_562, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _558)) + cbModelParam._m0[15u].w;
        float _1375 = fma(_504, cbModelParam._m0[13u].z, fma(_503, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _502));
        float _1378 = fma(_504, cbModelParam._m0[14u].z, fma(_503, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _502));
        float _1381 = fma(_504, cbModelParam._m0[15u].z, fma(_503, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _502));
        float _1409;
        if (_1375 > 0.0)
        {
            _1409 = abs((1.0 - _1364) / _1375);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1375 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1364 + 1.0) / _1375);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1409 = frontier_phi_16_14_ladder;
        }
        float _1585;
        if (_1378 > 0.0)
        {
            _1585 = abs((1.0 - _1368) / _1378);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1378 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1368 + 1.0) / _1378);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1585 = frontier_phi_25_21_ladder;
        }
        float _1881;
        if (_1381 > 0.0)
        {
            _1881 = abs((1.0 - _1372) / _1381);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1381 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1372 + 1.0) / _1381);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1881 = frontier_phi_37_32_ladder;
        }
        float _1883 = isnan(_1585) ? _1409 : (isnan(_1409) ? _1585 : min(_1409, _1585));
        float _1884 = isnan(_1881) ? _1883 : (isnan(_1883) ? _1881 : min(_1883, _1881));
        float _1888 = (_1884 * _1375) + _1364;
        float _1889 = (_1884 * _1378) + _1368;
        float _1890 = (_1884 * _1381) + _1372;
        float _1891 = _1884 * 9.9999997473787516355514526367188e-05;
        float _1893 = (-1.0) - _1891;
        float _1895 = _1891 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1890 > _1895) || ((_1890 < _1893) || ((_1889 > _1895) || ((_1889 < _1893) || ((_1888 < _1893) || (_1888 > _1895))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2035 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1890, cbModelParam._m0[9u].z, fma(_1889, cbModelParam._m0[9u].y, _1888 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1890, cbModelParam._m0[10u].z, fma(_1889, cbModelParam._m0[10u].y, _1888 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1890, cbModelParam._m0[11u].z, fma(_1889, cbModelParam._m0[11u].y, _1888 * cbModelParam._m0[11u].x))), _1315);
            frontier_phi_15_37_ladder = _2035.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2035.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2035.z * cbModelParam._m0[1u].y;
        }
        _1397 = frontier_phi_15_37_ladder_1;
        _1399 = frontier_phi_15_37_ladder;
        _1401 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1385 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_502, _503, _504), _1315);
        _1397 = _1385.x * cbModelParam._m0[1u].y;
        _1399 = _1385.y * cbModelParam._m0[1u].y;
        _1401 = _1385.z * cbModelParam._m0[1u].y;
    }
    float _1405 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _325);
    float _1406 = isnan(_1405) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1405 : min(cbModelParam._m0[25u].w, _1405));
    float _1499;
    float _1501;
    float _1503;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1463 = fma(_566, cbModelParam._m0[21u].z, fma(_562, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _558)) + cbModelParam._m0[21u].w;
        float _1467 = fma(_566, cbModelParam._m0[22u].z, fma(_562, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _558)) + cbModelParam._m0[22u].w;
        float _1471 = fma(_566, cbModelParam._m0[23u].z, fma(_562, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _558)) + cbModelParam._m0[23u].w;
        float _1474 = fma(_504, cbModelParam._m0[21u].z, fma(_503, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _502));
        float _1477 = fma(_504, cbModelParam._m0[22u].z, fma(_503, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _502));
        float _1480 = fma(_504, cbModelParam._m0[23u].z, fma(_503, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _502));
        float _1590;
        if (_1474 > 0.0)
        {
            _1590 = abs((1.0 - _1463) / _1474);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1474 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1463 + 1.0) / _1474);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1590 = frontier_phi_27_23_ladder;
        }
        float _1908;
        if (_1477 > 0.0)
        {
            _1908 = abs((1.0 - _1467) / _1477);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1477 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1467 + 1.0) / _1477);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1908 = frontier_phi_39_34_ladder;
        }
        float _2246;
        if (_1480 > 0.0)
        {
            _2246 = abs((1.0 - _1471) / _1480);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1480 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1471 + 1.0) / _1480);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2246 = frontier_phi_49_46_ladder;
        }
        float _2248 = isnan(_1908) ? _1590 : (isnan(_1590) ? _1908 : min(_1590, _1908));
        float _2249 = isnan(_2246) ? _2248 : (isnan(_2248) ? _2246 : min(_2248, _2246));
        float _2253 = (_2249 * _1474) + _1463;
        float _2254 = (_2249 * _1477) + _1467;
        float _2255 = (_2249 * _1480) + _1471;
        float _2256 = _2249 * 9.9999997473787516355514526367188e-05;
        float _2257 = (-1.0) - _2256;
        float _2259 = _2256 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2255 > _2259) || ((_2255 < _2257) || ((_2254 > _2259) || ((_2254 < _2257) || ((_2253 < _2257) || (_2253 > _2259))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2377 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2255, cbModelParam._m0[17u].z, fma(_2254, cbModelParam._m0[17u].y, _2253 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2255, cbModelParam._m0[18u].z, fma(_2254, cbModelParam._m0[18u].y, _2253 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2255, cbModelParam._m0[19u].z, fma(_2254, cbModelParam._m0[19u].y, _2253 * cbModelParam._m0[19u].x))), _1406);
            frontier_phi_24_49_ladder = _2377.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2377.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2377.x * cbModelParam._m0[1u].z;
        }
        _1499 = frontier_phi_24_49_ladder_2;
        _1501 = frontier_phi_24_49_ladder_1;
        _1503 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1483 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_502, _503, _504), _1406);
        _1499 = _1483.x * cbModelParam._m0[1u].z;
        _1501 = _1483.y * cbModelParam._m0[1u].z;
        _1503 = _1483.z * cbModelParam._m0[1u].z;
    }
    float _1516 = (((_529 * _479) + _530) * _494) * ((cbModelParam._m0[1u].w * (_1499 - _1397)) + _1397);
    float _1518 = (((_529 * _481) + _530) * _494) * ((cbModelParam._m0[1u].w * (_1501 - _1399)) + _1399);
    float _1520 = (((_529 * _482) + _530) * _494) * ((cbModelParam._m0[1u].w * (_1503 - _1401)) + _1401);
    float _1523 = fma(_1520, cbSceneParam._m0[89u].z, fma(_1518, cbSceneParam._m0[89u].y, _1516 * cbSceneParam._m0[89u].x));
    float _1526 = fma(_1520, cbSceneParam._m0[90u].z, fma(_1518, cbSceneParam._m0[90u].y, _1516 * cbSceneParam._m0[90u].x));
    float _1529 = fma(_1520, cbSceneParam._m0[91u].z, fma(_1518, cbSceneParam._m0[91u].y, _1516 * cbSceneParam._m0[91u].x));
    float _1564 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1568 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1572 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1576 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1577 = _1564 / _1576;
    float _1578 = _1568 / _1576;
    float _1579 = _1572 / _1576;
    float _1726;
    float _1727;
    float _1728;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1606 = ((uint(_1579 > cbSceneParam._m0[59u].y) + uint(_1579 > cbSceneParam._m0[59u].x)) + uint(_1579 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1607 = _1606 + 43u;
        uint _1615 = _1606 + 44u;
        uint _1623 = _1606 + 45u;
        uint _1631 = _1606 + 46u;
        float _1642 = fma(_1576, cbSceneParam._m0[_1607].w, fma(_1572, cbSceneParam._m0[_1607].z, fma(_1568, cbSceneParam._m0[_1607].y, _1564 * cbSceneParam._m0[_1607].x)));
        float _1646 = fma(_1576, cbSceneParam._m0[_1615].w, fma(_1572, cbSceneParam._m0[_1615].z, fma(_1568, cbSceneParam._m0[_1615].y, _1564 * cbSceneParam._m0[_1615].x)));
        float _1654 = fma(_1576, cbSceneParam._m0[_1631].w, fma(_1572, cbSceneParam._m0[_1631].z, fma(_1568, cbSceneParam._m0[_1631].y, _1564 * cbSceneParam._m0[_1631].x)));
        float _1659 = cbSceneParam._m0[33u].z * _1654;
        float _1661 = cbSceneParam._m0[33u].w * _1654;
        float _1664 = fma(_1576, cbSceneParam._m0[_1623].w, fma(_1572, cbSceneParam._m0[_1623].z, fma(_1568, cbSceneParam._m0[_1623].y, _1564 * cbSceneParam._m0[_1623].x))) / _1654;
        float _1712 = (cbSceneParam._m0[33u].x - sqrt(((_1578 * _1578) + (_1577 * _1577)) + (_1579 * _1579))) * cbSceneParam._m0[33u].y;
        float _3989 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1719 = (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1659 + _1642) / _1654, (_1661 + _1646) / _1654), _1664), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1661 + _1642) / _1654, (_1646 - _1659) / _1654), _1664), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1642 - _1659) / _1654, (_1646 - _1661) / _1654), _1664), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1642 - _1661) / _1654, (_1659 + _1646) / _1654), _1664), 0.0)).x), vec4(0.25)));
        _1726 = 1.0 - (_1719 * cbSceneParam._m0[34u].x);
        _1727 = 1.0 - (_1719 * cbSceneParam._m0[34u].y);
        _1728 = 1.0 - (_1719 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1726 = 1.0;
        _1727 = 1.0;
        _1728 = 1.0;
    }
    float _1792;
    float _1794;
    float _1796;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1780 = fma(_1576, cbSceneParam._m0[63u].w, fma(_1572, cbSceneParam._m0[63u].z, fma(_1568, cbSceneParam._m0[63u].y, _1564 * cbSceneParam._m0[63u].x)));
        float _1781 = fma(_1576, cbSceneParam._m0[60u].w, fma(_1572, cbSceneParam._m0[60u].z, fma(_1568, cbSceneParam._m0[60u].y, _1564 * cbSceneParam._m0[60u].x))) / _1780;
        float _1782 = fma(_1576, cbSceneParam._m0[61u].w, fma(_1572, cbSceneParam._m0[61u].z, fma(_1568, cbSceneParam._m0[61u].y, _1564 * cbSceneParam._m0[61u].x))) / _1780;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1781 >= cbSceneParam._m0[64u].x) && (_1782 >= cbSceneParam._m0[64u].y)) && (_1781 <= cbSceneParam._m0[64u].z)) && (_1782 <= cbSceneParam._m0[64u].w))
        {
            float _1921 = fma(_1576, cbSceneParam._m0[62u].w, fma(_1572, cbSceneParam._m0[62u].z, fma(_1568, cbSceneParam._m0[62u].y, _1564 * cbSceneParam._m0[62u].x))) / _1780;
            float _1925 = isnan(cbSceneParam._m0[41u].w) ? _1921 : (isnan(_1921) ? cbSceneParam._m0[41u].w : max(_1921, cbSceneParam._m0[41u].w));
            float _1968 = (cbSceneParam._m0[33u].x - sqrt(((_1578 * _1578) + (_1577 * _1577)) + (_1579 * _1579))) * cbSceneParam._m0[33u].y;
            float _4005 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
            float _1975 = (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1781, cbSceneParam._m0[33u].w + _1782), _1925), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1781, _1782 - cbSceneParam._m0[33u].z), _1925), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1781 - cbSceneParam._m0[33u].z, _1782 - cbSceneParam._m0[33u].w), _1925), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1781 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1782), _1925), 0.0)).x), vec4(0.25)));
            float _1979 = 1.0 - (_1975 * cbSceneParam._m0[34u].x);
            float _1980 = 1.0 - (_1975 * cbSceneParam._m0[34u].y);
            float _1981 = 1.0 - (_1975 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1980) ? _1727 : (isnan(_1727) ? _1980 : min(_1727, _1980));
            frontier_phi_36_35_ladder_1 = isnan(_1981) ? _1728 : (isnan(_1728) ? _1981 : min(_1728, _1981));
            frontier_phi_36_35_ladder_2 = isnan(_1979) ? _1726 : (isnan(_1726) ? _1979 : min(_1726, _1979));
        }
        else
        {
            frontier_phi_36_35_ladder = _1727;
            frontier_phi_36_35_ladder_1 = _1728;
            frontier_phi_36_35_ladder_2 = _1726;
        }
        _1792 = frontier_phi_36_35_ladder_2;
        _1794 = frontier_phi_36_35_ladder;
        _1796 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1792 = _1726;
        _1794 = _1727;
        _1796 = _1728;
    }
    uvec4 _1801 = floatBitsToUint(cbInstanceData._m0[_453 + 5u]);
    uint _1803 = _1801.x * 14u;
    uint _1804 = _1803 + 13u;
    float _1811 = _494 + (-1.0);
    float _1816 = (cbLight._m0[_1804].x * _1811) + 1.0;
    float _1817 = (cbLight._m0[_1804].y * _1811) + 1.0;
    float _1818 = (cbLight._m0[_1804].z * _1811) + 1.0;
    float _1819 = (cbLight._m0[_1804].w * _1811) + 1.0;
    uint _1820 = _1803 + 5u;
    float _1826 = isnan(1.0) ? _1817 : (isnan(_1817) ? 1.0 : min(_1817, 1.0));
    uint _1830 = _1803 + 4u;
    float _1840 = isnan(1.0) ? _1816 : (isnan(_1816) ? 1.0 : min(_1816, 1.0));
    uint _1844 = _1803 | 1u;
    float _1855 = dot(vec3(cbLight._m0[_1803].xyz), vec3(_321, _322, _323));
    float _1858 = dot(vec3(cbLight._m0[_1844].xyz), vec3(_321, _322, _323));
    float _4041 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _4052 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1863 = (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * 0.3183098733425140380859375;
    float _1865 = (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * 0.3183098733425140380859375;
    float _1872 = ((cbLight._m0[_1820].x * _1826) * _1865) + (((cbLight._m0[_1830].x * _1792) * _1840) * _1863);
    float _1873 = ((_1826 * cbLight._m0[_1820].y) * _1865) + (((cbLight._m0[_1830].y * _1794) * _1840) * _1863);
    float _1874 = ((_1826 * cbLight._m0[_1820].z) * _1865) + (((cbLight._m0[_1830].z * _1796) * _1840) * _1863);
    uvec4 _1878 = floatBitsToUint(cbLight._m0[_1803 + 12u]);
    bool _1880 = _1878.x == 0u;
    float _1982;
    float _1984;
    float _1986;
    if (_1880)
    {
        _1982 = _1872;
        _1984 = _1873;
        _1986 = _1874;
    }
    else
    {
        uint _1990 = _1803 + 6u;
        float _2006 = (dot(vec3(cbLight._m0[_1803 + 2u].xyz), vec3(_321, _322, _323)) * 0.5) + 0.5;
        float _2007 = _2006 * _2006;
        float _4063 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        float _2008 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _2009 = isnan(1.0) ? _1818 : (isnan(_1818) ? 1.0 : min(_1818, 1.0));
        _1982 = (((cbLight._m0[_1990].x * 0.3183098733425140380859375) * _2008) * _2009) + _1872;
        _1984 = (((cbLight._m0[_1990].y * 0.3183098733425140380859375) * _2008) * _2009) + _1873;
        _1986 = (((cbLight._m0[_1990].z * 0.3183098733425140380859375) * _2008) * _2009) + _1874;
    }
    bool _1989 = _1878.y == 0u;
    float _2044;
    float _2046;
    float _2048;
    if (_1989)
    {
        _2044 = _1982;
        _2046 = _1984;
        _2048 = _1986;
    }
    else
    {
        uint _2217 = _1803 + 7u;
        float _2233 = (dot(vec3(cbLight._m0[_1803 + 3u].xyz), vec3(_321, _322, _323)) * 0.5) + 0.5;
        float _2234 = _2233 * _2233;
        float _4079 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2235 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _2236 = isnan(1.0) ? _1819 : (isnan(_1819) ? 1.0 : min(_1819, 1.0));
        _2044 = (((cbLight._m0[_2217].x * 0.3183098733425140380859375) * _2235) * _2236) + _1982;
        _2046 = (((cbLight._m0[_2217].y * 0.3183098733425140380859375) * _2235) * _2236) + _1984;
        _2048 = (((cbLight._m0[_2217].z * 0.3183098733425140380859375) * _2235) * _2236) + _1986;
    }
    uint _2051 = _1803 + 8u;
    float _2064 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1803].w)) * _325) * 0.949999988079071044921875);
    float _2065 = _2064 * _2064;
    float _2066 = cbLight._m0[_1803].x + _404;
    float _2067 = cbLight._m0[_1803].y + _405;
    float _2068 = cbLight._m0[_1803].z + _406;
    float _2072 = inversesqrt(dot(vec3(_2066, _2067, _2068), vec3(_2066, _2067, _2068)));
    float _2073 = _2072 * _2066;
    float _2074 = _2072 * _2067;
    float _2075 = _2072 * _2068;
    float _2076 = dot(vec3(_321, _322, _323), vec3(cbLight._m0[_1803].xyz));
    float _4095 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2079 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _4106 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _2080 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _2081 = dot(vec3(_321, _322, _323), vec3(_2073, _2074, _2075));
    float _4117 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2084 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _2085 = dot(vec3(cbLight._m0[_1803].xyz), vec3(_2073, _2074, _2075));
    float _4128 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2089 = _2065 * _2065;
    float _2093 = ((_2084 * _2084) * (_2089 + (-1.0))) + 1.0;
    float _2101 = exp2(log2(1.0 - (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) * 5.0);
    float _2102 = 0.959999978542327880859375 - _476;
    float _2104 = 0.959999978542327880859375 - _477;
    float _2105 = 0.959999978542327880859375 - _478;
    float _2112 = 1.0 - _2065;
    float _2123 = (0.5 / (((_2080 * ((_2079 * _2112) + _2065)) + 9.9999999392252902907785028219223e-09) + (((_2080 * _2112) + _2065) * _2079))) * _2079;
    float _4139 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2125 = (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_2089 / ((_2093 * _2093) * 3.141590118408203125));
    uint _2139 = _1803 + 9u;
    float _2150 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1844].w)) * _325) * 0.949999988079071044921875);
    float _2151 = _2150 * _2150;
    float _2152 = cbLight._m0[_1844].x + _404;
    float _2153 = cbLight._m0[_1844].y + _405;
    float _2154 = cbLight._m0[_1844].z + _406;
    float _2158 = inversesqrt(dot(vec3(_2152, _2153, _2154), vec3(_2152, _2153, _2154)));
    float _2159 = _2158 * _2152;
    float _2160 = _2158 * _2153;
    float _2161 = _2158 * _2154;
    float _2162 = dot(vec3(_321, _322, _323), vec3(cbLight._m0[_1844].xyz));
    float _4150 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2165 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _2166 = dot(vec3(_321, _322, _323), vec3(_2159, _2160, _2161));
    float _4161 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2169 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _2170 = dot(vec3(cbLight._m0[_1844].xyz), vec3(_2159, _2160, _2161));
    float _4172 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2174 = _2151 * _2151;
    float _2178 = ((_2169 * _2169) * (_2174 + (-1.0))) + 1.0;
    float _2185 = exp2(log2(1.0 - (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) * 5.0);
    float _2192 = 1.0 - _2151;
    float _2202 = (0.5 / (((_2080 * ((_2165 * _2192) + _2151)) + 9.9999999392252902907785028219223e-09) + (((_2080 * _2192) + _2151) * _2165))) * _2165;
    float _4183 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2204 = (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_2174 / ((_2178 * _2178) * 3.141590118408203125));
    float _2214 = (((((_2185 * _2102) + _479) * cbLight._m0[_2139].x) * _2204) * _1826) + ((((cbLight._m0[_2051].x * _1792) * ((_2101 * _2102) + _479)) * _2125) * _1840);
    float _2215 = (((((_2185 * _2104) + _481) * cbLight._m0[_2139].y) * _2204) * _1826) + ((((cbLight._m0[_2051].y * _1794) * ((_2101 * _2104) + _481)) * _2125) * _1840);
    float _2216 = (((((_2185 * _2105) + _482) * cbLight._m0[_2139].z) * _2204) * _1826) + ((((cbLight._m0[_2051].z * _1796) * ((_2101 * _2105) + _482)) * _2125) * _1840);
    float _2272;
    float _2274;
    float _2276;
    if (_1880)
    {
        _2272 = _2214;
        _2274 = _2215;
        _2276 = _2216;
    }
    else
    {
        uint _2278 = _1803 + 2u;
        uint _2282 = _1803 + 10u;
        float _2296 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2278].w)) * _325) * 0.949999988079071044921875);
        float _2297 = _2296 * _2296;
        float _2298 = cbLight._m0[_2278].x + _404;
        float _2299 = cbLight._m0[_2278].y + _405;
        float _2300 = cbLight._m0[_2278].z + _406;
        float _2304 = inversesqrt(dot(vec3(_2298, _2299, _2300), vec3(_2298, _2299, _2300)));
        float _2305 = _2304 * _2298;
        float _2306 = _2304 * _2299;
        float _2307 = _2304 * _2300;
        float _2308 = dot(vec3(_321, _322, _323), vec3(cbLight._m0[_2278].xyz));
        float _4194 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2311 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _2312 = dot(vec3(_321, _322, _323), vec3(_2305, _2306, _2307));
        float _4205 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2315 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _2316 = dot(vec3(cbLight._m0[_2278].xyz), vec3(_2305, _2306, _2307));
        float _4216 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2320 = _2297 * _2297;
        float _2324 = ((_2315 * _2315) * (_2320 + (-1.0))) + 1.0;
        float _2331 = exp2(log2(1.0 - (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) * 5.0);
        float _2338 = 1.0 - _2297;
        float _2348 = (0.5 / (((_2080 * ((_2311 * _2338) + _2297)) + 9.9999999392252902907785028219223e-09) + (((_2080 * _2338) + _2297) * _2311))) * _2311;
        float _4227 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2350 = (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_2320 / ((_2324 * _2324) * 3.141590118408203125));
        float _2351 = isnan(1.0) ? _1818 : (isnan(_1818) ? 1.0 : min(_1818, 1.0));
        _2272 = (((((_2331 * _2102) + _479) * cbLight._m0[_2282].x) * _2350) * _2351) + _2214;
        _2274 = (((((_2331 * _2104) + _481) * cbLight._m0[_2282].y) * _2350) * _2351) + _2215;
        _2276 = (((((_2331 * _2105) + _482) * cbLight._m0[_2282].z) * _2350) * _2351) + _2216;
    }
    float _2382;
    float _2384;
    float _2386;
    if (_1989)
    {
        _2382 = _2272;
        _2384 = _2274;
        _2386 = _2276;
    }
    else
    {
        uint _2393 = _1803 + 3u;
        uint _2397 = _1803 + 11u;
        float _2411 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2393].w)) * _325) * 0.949999988079071044921875);
        float _2412 = _2411 * _2411;
        float _2413 = cbLight._m0[_2393].x + _404;
        float _2414 = cbLight._m0[_2393].y + _405;
        float _2415 = cbLight._m0[_2393].z + _406;
        float _2419 = inversesqrt(dot(vec3(_2413, _2414, _2415), vec3(_2413, _2414, _2415)));
        float _2420 = _2419 * _2413;
        float _2421 = _2419 * _2414;
        float _2422 = _2419 * _2415;
        float _2423 = dot(vec3(_321, _322, _323), vec3(cbLight._m0[_2393].xyz));
        float _4243 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2426 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _2427 = dot(vec3(_321, _322, _323), vec3(_2420, _2421, _2422));
        float _4254 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2430 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _2431 = dot(vec3(cbLight._m0[_2393].xyz), vec3(_2420, _2421, _2422));
        float _4265 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2435 = _2412 * _2412;
        float _2439 = ((_2430 * _2430) * (_2435 + (-1.0))) + 1.0;
        float _2446 = exp2(log2(1.0 - (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0)))) * 5.0);
        float _2453 = 1.0 - _2412;
        float _2463 = (0.5 / (((_2080 * ((_2426 * _2453) + _2412)) + 9.9999999392252902907785028219223e-09) + (((_2080 * _2453) + _2412) * _2426))) * _2426;
        float _4276 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2465 = (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_2435 / ((_2439 * _2439) * 3.141590118408203125));
        float _2466 = isnan(1.0) ? _1819 : (isnan(_1819) ? 1.0 : min(_1819, 1.0));
        _2382 = (((((_2446 * _2102) + _479) * cbLight._m0[_2397].x) * _2465) * _2466) + _2272;
        _2384 = (((((_2446 * _2104) + _481) * cbLight._m0[_2397].y) * _2465) * _2466) + _2274;
        _2386 = (((((_2446 * _2105) + _482) * cbLight._m0[_2397].z) * _2465) * _2466) + _2276;
    }
    float _2531;
    float _2533;
    float _2535;
    float _2537;
    float _2539;
    float _2541;
    if (_1801.y == 0u)
    {
        uvec4 _2487 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2488 = _2487.x;
        uint _2499 = uint((float(_2487.y) * floor(float(uint(cbSceneParam._m0[85u].y * _413) / _2488))) + floor(float(uint(cbSceneParam._m0[85u].x * _412) / _2488)));
        float _2509 = (log2(_1579 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2510 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        uint _2513 = uint(isnan(14.0) ? _2510 : (isnan(_2510) ? 14.0 : min(_2510, 14.0)));
        uvec4 _2518 = texelFetch(g_lightClusterGridBuffer, int(((_2513 << 2u) + (_2499 << 6u)) >> 2u));
        uint _2519 = _2518.x;
        uint _2520 = _2487.z;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        if (((((1u << ((_2520 >> 4u) & 15u)) + 4294967295u) & _2519) == 0u) || ((_2520 & 240u) == 0u))
        {
            _2619 = 0.0;
            _2621 = 0.0;
            _2623 = 0.0;
            _2625 = 0.0;
            _2627 = 0.0;
            _2629 = 0.0;
        }
        else
        {
            float _2620;
            float _2622;
            float _2624;
            float _2626;
            float _2628;
            float _2630;
            float _2763 = 0.0;
            float _2764 = 0.0;
            float _2765 = 0.0;
            float _2766 = 0.0;
            float _2767 = 0.0;
            float _2768 = 0.0;
            uint _2769 = 0u;
            uint _2778;
            bool _2779;
            for (;;)
            {
                _2778 = texelFetch(g_lightClassification, int((((_2513 << 5u) + (_2499 << 9u)) + (_2769 << 2u)) >> 2u)).x;
                _2779 = _2778 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2779)
                {
                    frontier_phi_68_pred = _2768;
                    frontier_phi_68_pred_1 = _2767;
                    frontier_phi_68_pred_2 = _2766;
                    frontier_phi_68_pred_3 = _2764;
                    frontier_phi_68_pred_4 = _2763;
                    frontier_phi_68_pred_5 = _2765;
                }
                else
                {
                    float _2887;
                    float _2888;
                    float _2889;
                    float _2890;
                    float _2891;
                    float _2892;
                    uint _2893;
                    _2887 = _2763;
                    _2888 = _2764;
                    _2889 = _2765;
                    _2890 = _2766;
                    _2891 = _2767;
                    _2892 = _2768;
                    _2893 = _2778;
                    float _2819;
                    float _2820;
                    float _2821;
                    float _2822;
                    float _2823;
                    float _2824;
                    for (;;)
                    {
                        uint _2897 = uint(findLSB(_2893)) + (_2769 << 5u);
                        uint _2894 = (_2893 + 4294967295u) & _2893;
                        uint _2899 = _2897 * 48u;
                        vec4 _2913 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2899)).x, texelFetch(g_PointLightRenderingBuffer, int(_2899 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2899 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2899 + 3u)).x));
                        uint _2919 = (_2897 * 48u) + 4u;
                        vec4 _2932 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2919)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 3u)).x));
                        uint _2938 = (_2897 * 48u) + 8u;
                        vec3 _2949 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2938)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 2u)).x));
                        float _2953 = _2913.x - _1577;
                        float _2954 = _2913.y - _1578;
                        float _2955 = _2913.z - _1579;
                        float _2956 = dot(vec3(_2953, _2954, _2955), vec3(_2953, _2954, _2955));
                        float _2959 = inversesqrt(_2956);
                        float _2960 = _2959 * _2953;
                        float _2961 = _2959 * _2954;
                        float _2962 = _2959 * _2955;
                        float _2963 = dot(vec3(_434, _437, _440), vec3(_2960, _2961, _2962));
                        float _2968 = 1.0 - (_2956 * _2913.w);
                        float _4302 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
                        float _2969 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
                        float _2970 = sqrt(_2956) * _2932.w;
                        float _2973 = 1.39999997615814208984375 / (_2970 + 1.39999997615814208984375);
                        float _2974 = _2973 * _2973;
                        float _2977 = ((1.0 - _2974) * _2963) + _2974;
                        float _2980 = _2970 * _2970;
                        float _2984 = ((isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0))) * _2969) / ((_2980 * 0.699999988079071044921875) + 1.0);
                        float _2988 = (-0.0) - _1577;
                        float _2989 = (-0.0) - _1578;
                        float _2990 = (-0.0) - _1579;
                        float _2994 = inversesqrt(dot(vec3(_2988, _2989, _2990), vec3(_2988, _2989, _2990)));
                        float _2995 = _2994 * _2988;
                        float _2996 = _2994 * _2989;
                        float _2997 = _2994 * _2990;
                        float _3004 = exp2(log2(1.0 / ((_2980 * 3.5) + 5.0)) * 0.25);
                        float _3005 = 1.0 - _510;
                        float _3012 = sqrt(1.0 - ((1.0 - (_3005 * _3005)) * (1.0 - (_3004 * _3004))));
                        float _3013 = _3012 * _3012;
                        float _3014 = _3013 * _3013;
                        float _3015 = _2995 + _2960;
                        float _3016 = _2996 + _2961;
                        float _3017 = _2997 + _2962;
                        float _3021 = inversesqrt(dot(vec3(_3015, _3016, _3017), vec3(_3015, _3016, _3017)));
                        float _3025 = dot(vec3(_434, _437, _440), vec3(_2995, _2996, _2997));
                        float _4318 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                        float _3028 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                        float _3029 = dot(vec3(_434, _437, _440), vec3(_3021 * _3015, _3021 * _3016, _3021 * _3017));
                        float _4329 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                        float _3032 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
                        float _3036 = ((_3032 * _3032) * (_3014 + (-1.0))) + 1.0;
                        float _3037 = _2973 * _3013;
                        float _3038 = _3037 * _3037;
                        float _3041 = ((1.0 - _3038) * _2963) + _3038;
                        float _4340 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                        float _3042 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                        float _3043 = 1.0 - _3013;
                        float _3053 = (0.5 / (((_3042 * ((_3028 * _3043) + _3013)) + 9.9999999392252902907785028219223e-09) + (((_3042 * _3043) + _3013) * _3028))) * _3042;
                        float _4351 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                        float _3064 = (((_3014 * 3.1415927410125732421875) * (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0)))) / ((_3036 * _3036) * ((_2980 * 2.1991131305694580078125) + 3.141590118408203125))) * _2969;
                        _2822 = (_2984 * _2932.x) + _2890;
                        _2823 = (_2984 * _2932.y) + _2891;
                        _2824 = (_2984 * _2932.z) + _2892;
                        _2819 = (_3064 * _2949.x) + _2887;
                        _2820 = (_3064 * _2949.y) + _2888;
                        _2821 = (_3064 * _2949.z) + _2889;
                        if (_2894 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2887 = _2819;
                            _2888 = _2820;
                            _2889 = _2821;
                            _2890 = _2822;
                            _2891 = _2823;
                            _2892 = _2824;
                            _2893 = _2894;
                        }
                    }
                    frontier_phi_68_pred = _2824;
                    frontier_phi_68_pred_1 = _2823;
                    frontier_phi_68_pred_2 = _2822;
                    frontier_phi_68_pred_3 = _2820;
                    frontier_phi_68_pred_4 = _2819;
                    frontier_phi_68_pred_5 = _2821;
                }
                _2630 = frontier_phi_68_pred;
                _2628 = frontier_phi_68_pred_1;
                _2626 = frontier_phi_68_pred_2;
                _2622 = frontier_phi_68_pred_3;
                _2620 = frontier_phi_68_pred_4;
                _2624 = frontier_phi_68_pred_5;
                uint _2770 = _2769 + 1u;
                if (_2770 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2763 = _2620;
                    _2764 = _2622;
                    _2765 = _2624;
                    _2766 = _2626;
                    _2767 = _2628;
                    _2768 = _2630;
                    _2769 = _2770;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2619 = _2620;
            _2621 = _2622;
            _2623 = _2624;
            _2625 = _2626;
            _2627 = _2628;
            _2629 = _2630;
        }
        uvec4 _2633 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2634 = _2633.z;
        uint _2636 = (_2634 >> 8u) & 15u;
        float _2731;
        float _2733;
        float _2735;
        float _2737;
        float _2739;
        float _2741;
        if (((4294967295u << _2636) & _2519) == 0u)
        {
            _2731 = _2619;
            _2733 = _2621;
            _2735 = _2623;
            _2737 = _2625;
            _2739 = _2627;
            _2741 = _2629;
        }
        else
        {
            float _2756 = inversesqrt(dot(vec3(_1577, _1578, _1579), vec3(_1577, _1578, _1579)));
            float _2757 = _2756 * _1577;
            float _2758 = _2756 * _1578;
            float _2759 = _2756 * _1579;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2636 < ((_2634 >> 12u) & 15u))
            {
                float _2732;
                float _2734;
                float _2736;
                float _2738;
                float _2740;
                float _2742;
                float _2870 = _2619;
                float _2871 = _2621;
                float _2872 = _2623;
                float _2873 = _2625;
                float _2874 = _2627;
                float _2875 = _2629;
                uint _2876 = _2636;
                uint _2885;
                bool _2886;
                for (;;)
                {
                    _2885 = texelFetch(g_lightClassification, int((((_2513 << 5u) + (_2499 << 9u)) + (_2876 << 2u)) >> 2u)).x;
                    _2886 = _2885 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2886)
                    {
                        frontier_phi_74_pred = _2872;
                        frontier_phi_74_pred_1 = _2871;
                        frontier_phi_74_pred_2 = _2870;
                        frontier_phi_74_pred_3 = _2875;
                        frontier_phi_74_pred_4 = _2874;
                        frontier_phi_74_pred_5 = _2873;
                    }
                    else
                    {
                        float _3069;
                        float _3070;
                        float _3071;
                        float _3072;
                        float _3073;
                        float _3074;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3082 = _2870;
                        float _3083 = _2871;
                        float _3084 = _2872;
                        float _3085 = _2873;
                        float _3086 = _2874;
                        float _3087 = _2875;
                        uint _3088 = _2885;
                        uint _3089;
                        vec4 _3114;
                        float _3115;
                        vec4 _3130;
                        vec3 _3142;
                        vec4 _3158;
                        vec4 _3174;
                        float _3221;
                        bool _3222;
                        for (;;)
                        {
                            uint _3099 = ((_2876 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3088));
                            _3089 = (_3088 + 4294967295u) & _3088;
                            uint _3101 = _3099 * 40u;
                            _3114 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 3u)).x));
                            _3115 = _3114.w;
                            uint _3117 = (_3099 * 40u) + 4u;
                            _3130 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3117)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 3u)).x));
                            uint _3132 = (_3099 * 40u) + 8u;
                            _3142 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x));
                            uint _3145 = (_3099 * 40u) + 16u;
                            _3158 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 3u)).x));
                            uint _3161 = (_3099 * 40u) + 20u;
                            _3174 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3161)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 3u)).x));
                            uint _3177 = (_3099 * 40u) + 24u;
                            vec4 _3190 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3177)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 3u)).x));
                            uint _3196 = (_3099 * 40u) + 28u;
                            vec4 _3209 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3196)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 3u)).x));
                            _3221 = fma(_1579, _3209.z, fma(_1578, _3209.y, _3209.x * _1577)) + _3209.w;
                            _3222 = !((fma(_1579, _3190.z, fma(_1578, _3190.y, _3190.x * _1577)) + _3190.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3222)
                            {
                                float _3249 = _3114.x - _1577;
                                float _3250 = _3114.y - _1578;
                                float _3251 = _3114.z - _1579;
                                float _3252 = dot(vec3(_3249, _3250, _3251), vec3(_3249, _3250, _3251));
                                float _3255 = inversesqrt(_3252);
                                float _3256 = _3255 * _3249;
                                float _3257 = _3255 * _3250;
                                float _3258 = _3255 * _3251;
                                float _3262 = 1.0 - (_3252 / (_3115 * _3115));
                                float _4362 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                                float _3263 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                                float _3267 = sqrt(_3252) * _3130.w;
                                float _3269 = 1.39999997615814208984375 / (_3267 + 1.39999997615814208984375);
                                float _3270 = _3269 * _3269;
                                float _3273 = ((1.0 - _3270) * dot(vec3(_3256, _3257, _3258), vec3(_434, _437, _440))) + _3270;
                                float _3276 = _3267 * _3267;
                                float _3280 = (fma(_1579, _3158.z, fma(_1578, _3158.y, _3158.x * _1577)) + _3158.w) / _3221;
                                float _3281 = (fma(_1579, _3174.z, fma(_1578, _3174.y, _3174.x * _1577)) + _3174.w) / _3221;
                                float _3285 = 1.0 - dot(vec2(_3280, _3281), vec2(_3280, _3281));
                                float _4378 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                                float _3286 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                                float _3287 = _3286 * (((isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0))) * _3263) / ((_3276 * 0.699999988079071044921875) + 1.0));
                                float _3299 = exp2(log2(1.0 / ((_3276 * 3.5) + 5.0)) * 0.25);
                                float _3300 = 1.0 - _510;
                                float _3307 = sqrt(1.0 - ((1.0 - (_3300 * _3300)) * (1.0 - (_3299 * _3299))));
                                float _3308 = _3307 * _3307;
                                float _3309 = _3308 * _3308;
                                float _3310 = _3256 - _2757;
                                float _3311 = _3257 - _2758;
                                float _3312 = _3258 - _2759;
                                float _3316 = inversesqrt(dot(vec3(_3310, _3311, _3312), vec3(_3310, _3311, _3312)));
                                float _3320 = dot(vec3(_434, _437, _440), vec3((-0.0) - _2757, (-0.0) - _2758, (-0.0) - _2759));
                                float _4389 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                                float _3323 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                                float _3324 = dot(vec3(_434, _437, _440), vec3(_3316 * _3310, _3316 * _3311, _3316 * _3312));
                                float _4400 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                                float _3327 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                                float _3331 = ((_3327 * _3327) * (_3309 + (-1.0))) + 1.0;
                                float _3332 = _3269 * _3308;
                                float _3333 = _3332 * _3332;
                                float _3339 = ((1.0 - _3333) * dot(vec3(_434, _437, _440), vec3(_3256, _3257, _3258))) + _3333;
                                float _4411 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                                float _3340 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                                float _3341 = 1.0 - _3308;
                                float _3351 = (0.5 / (((_3340 * ((_3323 * _3341) + _3308)) + 9.9999999392252902907785028219223e-09) + (((_3340 * _3341) + _3308) * _3323))) * _3340;
                                float _4422 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                                float _3361 = (_3286 * _3263) * (((_3309 * 3.1415927410125732421875) * (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0)))) / ((_3331 * _3331) * ((_3276 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3361 * _3142.z;
                                frontier_phi_80_pred_1 = _3361 * _3142.y;
                                frontier_phi_80_pred_2 = _3361 * _3142.x;
                                frontier_phi_80_pred_3 = _3287 * _3130.z;
                                frontier_phi_80_pred_4 = _3287 * _3130.y;
                                frontier_phi_80_pred_5 = _3287 * _3130.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3367 = frontier_phi_80_pred;
                            _3366 = frontier_phi_80_pred_1;
                            _3365 = frontier_phi_80_pred_2;
                            _3370 = frontier_phi_80_pred_3;
                            _3369 = frontier_phi_80_pred_4;
                            _3368 = frontier_phi_80_pred_5;
                            _3072 = _3368 + _3085;
                            _3073 = _3369 + _3086;
                            _3074 = _3370 + _3087;
                            _3069 = _3365 + _3082;
                            _3070 = _3366 + _3083;
                            _3071 = _3367 + _3084;
                            if (_3089 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3082 = _3069;
                                _3083 = _3070;
                                _3084 = _3071;
                                _3085 = _3072;
                                _3086 = _3073;
                                _3087 = _3074;
                                _3088 = _3089;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3071;
                        frontier_phi_74_pred_1 = _3070;
                        frontier_phi_74_pred_2 = _3069;
                        frontier_phi_74_pred_3 = _3074;
                        frontier_phi_74_pred_4 = _3073;
                        frontier_phi_74_pred_5 = _3072;
                    }
                    _2736 = frontier_phi_74_pred;
                    _2734 = frontier_phi_74_pred_1;
                    _2732 = frontier_phi_74_pred_2;
                    _2742 = frontier_phi_74_pred_3;
                    _2740 = frontier_phi_74_pred_4;
                    _2738 = frontier_phi_74_pred_5;
                    uint _2877 = _2876 + 1u;
                    if (_2877 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2870 = _2732;
                        _2871 = _2734;
                        _2872 = _2736;
                        _2873 = _2738;
                        _2874 = _2740;
                        _2875 = _2742;
                        _2876 = _2877;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2740;
                frontier_phi_62_63_ladder_1 = _2738;
                frontier_phi_62_63_ladder_2 = _2736;
                frontier_phi_62_63_ladder_3 = _2742;
                frontier_phi_62_63_ladder_4 = _2734;
                frontier_phi_62_63_ladder_5 = _2732;
            }
            else
            {
                frontier_phi_62_63_ladder = _2627;
                frontier_phi_62_63_ladder_1 = _2625;
                frontier_phi_62_63_ladder_2 = _2623;
                frontier_phi_62_63_ladder_3 = _2629;
                frontier_phi_62_63_ladder_4 = _2621;
                frontier_phi_62_63_ladder_5 = _2619;
            }
            _2731 = frontier_phi_62_63_ladder_5;
            _2733 = frontier_phi_62_63_ladder_4;
            _2735 = frontier_phi_62_63_ladder_2;
            _2737 = frontier_phi_62_63_ladder_1;
            _2739 = frontier_phi_62_63_ladder;
            _2741 = frontier_phi_62_63_ladder_3;
        }
        float _2746 = isnan(1.0) ? _494 : (isnan(_494) ? 1.0 : min(_494, 1.0));
        _2531 = (_2746 * _2737) + _2044;
        _2533 = (_2746 * _2739) + _2046;
        _2535 = (_2746 * _2741) + _2048;
        _2537 = ((_2731 * _479) * _2746) + _2382;
        _2539 = ((_2733 * _481) * _2746) + _2384;
        _2541 = ((_2735 * _482) * _2746) + _2386;
    }
    else
    {
        _2531 = _2044;
        _2533 = _2046;
        _2535 = _2048;
        _2537 = _2382;
        _2539 = _2384;
        _2541 = _2386;
    }
    uint _2547 = _455 + uint(cbMatDynParam._m0[0u].w);
    float _4438 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _4449 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _4460 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _4471 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _2573 = (((isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2531 + ((isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0))) * _494))) + ((_2537 + ((isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))) * _1304)) * cbPerFrame._m0[3u].x)) + ((_300.x * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2547].x);
    float _2575 = (((_300.y * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2547].y) + ((_2539 + ((isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))) * _1304)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_2533 + ((isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0))) * _494)));
    float _2577 = (((_300.z * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2547].z) + ((_2541 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _1304)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_2535 + ((isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0))) * _494)));
    float _2585 = cbInstanceData._m0[_453 + 6u].w * (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0)));
    float _2590 = _412 / cbSceneParam._m0[86u].x;
    float _2591 = _413 / cbSceneParam._m0[86u].y;
    vec4 _2605 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2590, _2591, (log2((isnan(cbSceneParam._m0[77u].w) ? _345 : (isnan(_345) ? cbSceneParam._m0[77u].w : min(_345, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2607 = _2605.x;
    float _2608 = _2605.y;
    float _2609 = _2605.z;
    float _2610 = _2605.w;
    float _2681;
    float _2683;
    float _2685;
    float _2687;
    if (_345 > cbSceneParam._m0[78u].w)
    {
        float _2644 = isnan(_345) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _345 : min(cbSceneParam._m0[80u].w, _345));
        float _2645 = _2644 / _345;
        float _2656 = _2645 * _397;
        float _2657 = _398 * _2645;
        float _2658 = (-0.0) - _2657;
        float _2659 = _2645 * _399;
        float _2661 = (cbSceneParam._m0[77u].w * _2658) / _2644;
        float _2662 = _2661 + cbSceneParam._m0[79u].w;
        float _2663 = cbSceneParam._m0[79u].w - _2657;
        float _2669 = sqrt(((_2656 * _2656) + (_2657 * _2657)) + (_2659 * _2659));
        float _2672 = (1.0 - (cbSceneParam._m0[77u].w / _2644)) * _2669;
        float _2677 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2679 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2832;
        if (abs((_2658 - _2661) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2832 = ((((_2662 > 0.0) ? exp2(_2677 * _2662) : (2.0 - exp2(_2679 * _2662))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2672;
        }
        else
        {
            float _2792 = 1.0 / cbSceneParam._m0[80u].x;
            float _2793 = isnan(_2663) ? _2662 : (isnan(_2662) ? _2663 : max(_2662, _2663));
            float _2794 = isnan(_2663) ? _2662 : (isnan(_2662) ? _2663 : min(_2662, _2663));
            float _2803 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : min(_2793, 0.0));
            float _2804 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : min(_2794, 0.0));
            _2832 = ((abs(_2669 / _2658) * cbSceneParam._m0[80u].y) * ((((_2803 - _2804) * 2.0) - ((exp2(_2677 * (isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0)))) - exp2(_2677 * (isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0))))) * _2792)) - ((exp2(_2679 * _2803) - exp2(_2679 * _2804)) * _2792))) + (_2672 * cbSceneParam._m0[80u].z);
        }
        vec4 _2834 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2590, _2591, 1.0), 0.0);
        float _2843 = exp2((_2832 * (-1.44269502162933349609375)) * (1.0 - _2834.w));
        float _2844 = log2(_2843);
        float _2860 = log2(_2610);
        _2681 = (exp2(_2860 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2844 * cbSceneParam._m0[78u].x)) * _2834.x) / cbSceneParam._m0[78u].x)) + _2607;
        _2683 = (exp2(_2860 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2844 * cbSceneParam._m0[78u].y)) * _2834.y) / cbSceneParam._m0[78u].y)) + _2608;
        _2685 = (exp2(_2860 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2844 * cbSceneParam._m0[78u].z)) * _2834.z) / cbSceneParam._m0[78u].z)) + _2609;
        _2687 = _2843 * _2610;
    }
    else
    {
        _2681 = _2607;
        _2683 = _2608;
        _2685 = _2609;
        _2687 = _2610;
    }
    float _2699 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2700 = _2699 == 3.0;
    float _2701 = log2(_2687);
    float _2708 = exp2(_2701 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0)));
    float _2709 = exp2(_2701 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0)));
    float _2710 = exp2(_2701 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0)));
    float _2719 = (_2699 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2719 * (_2700 ? _2708 : (_2708 + (cbSceneParam._m0[72u].w * _2681)));
    SV_Target.y = _2719 * (_2700 ? _2709 : (_2709 + (cbSceneParam._m0[72u].w * _2683)));
    SV_Target.z = _2719 * (_2700 ? _2710 : (_2710 + (cbSceneParam._m0[72u].w * _2685)));
    SV_Target.w = _2585;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2585;
}


