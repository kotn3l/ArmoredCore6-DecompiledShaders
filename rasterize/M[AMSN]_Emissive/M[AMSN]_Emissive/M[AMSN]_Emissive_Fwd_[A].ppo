#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Emissive_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Emissive_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Emissive_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Emissive_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _910;
float _3322;
float _3323;
float _3324;
float _3325;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    vec4 _232 = texture(sampler2D(M_AMSN_Emissive_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _235 = _232.x;
    float _236 = _232.y;
    float _237 = _232.z;
    float _238 = _232.w;
    float _239 = _238 * TEXCOORD_1.z;
    vec4 _255 = texture(sampler2D(M_AMSN_Emissive_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _258 = _255.x + cbMtdParam._m0[9u].x;
    vec4 _270 = texture(sampler2D(M_AMSN_Emissive_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _274 = _270.z;
    float _278 = (_270.x * 2.0) + (-1.0);
    float _280 = (_270.y * 2.0) + (-1.0);
    float _281 = dot(vec2(_278, _280), vec2(_278, _280));
    float _3334 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _287 = sqrt(1.0 - (isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0))));
    vec4 _300 = texture(sampler2D(M_AMSN_Emissive_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[3u].w));
    float _310 = fma(_287, _216, fma(_280, _208 * TANGENT.x, (_194 * _186) * _278));
    float _313 = fma(_287, _217, fma(_280, _208 * TANGENT.y, (_194 * _187) * _278));
    float _316 = fma(_287, _218, fma(_280, _208 * TANGENT.z, (_194 * _188) * _278));
    float _320 = inversesqrt(dot(vec3(_310, _313, _316), vec3(_310, _313, _316)));
    float _321 = _320 * _310;
    float _322 = _320 * _313;
    float _323 = _320 * _316;
    float _3345 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _324 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
    float _3356 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _325 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
    float _3367 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3378 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3389 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3400 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _329 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
    float _345 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _387 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _397 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _387);
    float _398 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _387);
    float _399 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _387);
    float _403 = inversesqrt(dot(vec3(_397, _398, _399), vec3(_397, _398, _399)));
    float _404 = _397 * _403;
    float _405 = _398 * _403;
    float _406 = _399 * _403;
    vec4 _411 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _413 = _411.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _589 = sqrt(((_397 * _397) + (_398 * _398)) + (_399 * _399));
        float _595 = (cbMatDynParam._m0[5u].x * _589) + cbMatDynParam._m0[5u].y;
        float _3411 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
        float _596 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
        float _600 = (cbMatDynParam._m0[5u].z * _589) + cbMatDynParam._m0[5u].w;
        float _3422 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0))) - _596)) + _596) < ((_413 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _425 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _426 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _446 = fma(_323, cbSceneParam._m0[5u].z, fma(_322, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _321));
    float _449 = fma(_323, cbSceneParam._m0[6u].z, fma(_322, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _321));
    float _452 = fma(_323, cbSceneParam._m0[7u].z, fma(_322, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _321));
    uint _465 = uint(roundEven(NORMAL.w)) * 13u;
    uint _467 = _465 + 9u;
    uint _468 = _467 + uint(cbMatDynParam._m0[0u].w);
    float _474 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0)))) * cbInstanceData._m0[_468].x;
    float _475 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0)))) * cbInstanceData._m0[_468].y;
    float _476 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0)))) * cbInstanceData._m0[_468].z;
    float _3433 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _477 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
    float _3444 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _478 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
    float _3455 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _479 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
    float _480 = 1.0 - _329;
    float _481 = _477 * _480;
    float _482 = _478 * _480;
    float _483 = _479 * _480;
    float _488 = (_477 + (-0.039999999105930328369140625)) * _329;
    float _489 = (_478 + (-0.039999999105930328369140625)) * _329;
    float _490 = (_479 + (-0.039999999105930328369140625)) * _329;
    float _491 = _488 + 0.039999999105930328369140625;
    float _493 = _489 + 0.039999999105930328369140625;
    float _494 = _490 + 0.039999999105930328369140625;
    vec4 _503 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _425, cbSceneParam._m0[86u].y * _426));
    float _506 = _503.x * TEXCOORD_1.w;
    float _507 = dot(vec3(_321, _322, _323), vec3(_404, _405, _406));
    float _510 = _507 * 2.0;
    float _514 = (_510 * _321) - _404;
    float _515 = (_510 * _322) - _405;
    float _516 = (_510 * _323) - _406;
    float _520 = abs(dot(vec3(_404, _405, _406), vec3(_321, _322, _323)));
    float _3466 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _522 = sqrt(_325);
    float _535 = exp2((_522 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_522 * 3.0));
    float _541 = (1.0 - _535) * ((_522 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _542 = _535 * _522;
    float _570 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _574 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _578 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _909;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _634 = fma(_578, cbModelParam._m0[26u].z, fma(_574, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _570));
        float _638 = fma(_578, cbModelParam._m0[27u].z, fma(_574, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _570));
        float _642 = fma(_578, cbModelParam._m0[28u].z, fma(_574, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _570));
        float _667 = _570 + _321;
        float _668 = _574 + _322;
        float _669 = _578 + _323;
        float _679 = fma(_669, cbModelParam._m0[26u].z, fma(_668, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _667)) - _634;
        float _680 = fma(_669, cbModelParam._m0[27u].z, fma(_668, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _667)) - _638;
        float _681 = fma(_669, cbModelParam._m0[28u].z, fma(_668, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _667)) - _642;
        float _685 = inversesqrt(dot(vec3(_679, _680, _681), vec3(_679, _680, _681)));
        float _698 = ((_685 * _679) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_634 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _699 = ((_685 * _680) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_638 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _700 = ((_685 * _681) / cbModelParam._m0[34u].z) + ((((((_642 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _703 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_698, _699, _700), 0.0);
        vec4 _710 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_698, _699, _700), 0.0);
        vec4 _717 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_698, _699, _700), 0.0);
        vec4 _724 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_698, _699, _700), 0.0);
        float _737 = exp2((_703.w + (-0.5)) * 20.0) * 2.0;
        float _738 = _737 * (_703.x + (-0.5));
        float _739 = _737 * (_703.y + (-0.5));
        float _740 = _737 * (_703.z + (-0.5));
        float _747 = exp2((_710.w + (-0.5)) * 20.0) * 2.0;
        float _748 = _747 * (_710.x + (-0.5));
        float _749 = _747 * (_710.y + (-0.5));
        float _750 = _747 * (_710.z + (-0.5));
        float _757 = exp2((_717.w + (-0.5)) * 20.0) * 2.0;
        float _758 = _757 * (_717.x + (-0.5));
        float _759 = _757 * (_717.y + (-0.5));
        float _760 = _757 * (_717.z + (-0.5));
        float _767 = exp2((_724.w + (-0.5)) * 20.0) * 2.0;
        float _768 = _767 * (_724.x + (-0.5));
        float _769 = _767 * (_724.y + (-0.5));
        float _770 = _767 * (_724.z + (-0.5));
        float _771 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _772 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _773 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _774 = _738 * 0.5;
        float _775 = _748 * 0.5;
        float _776 = _758 * 0.5;
        float _777 = dot(vec3(_774, _775, _776), vec3(_774, _775, _776));
        float _782 = (_777 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_777);
        float _791 = (dot(vec3(_321, _322, _323), vec3(_782 * _774, _782 * _775, _782 * _776)) + 1.0) * 0.5;
        float _3492 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _801 = sqrt(((_775 * _775) + (_774 * _774)) + (_776 * _776)) / (_771 + 9.9999997473787516355514526367188e-06);
        float _3503 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _802 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _803 = _802 * 2.0;
        float _807 = (1.0 - _802) / (_802 + 1.0);
        float _3514 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _808 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _817 = ((((1.0 - _808) * (_803 + 2.0)) * exp2(log2(isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * (_803 + 1.0))) + _808) * _771;
        float _818 = _739 * 0.5;
        float _819 = _749 * 0.5;
        float _820 = _759 * 0.5;
        float _821 = dot(vec3(_818, _819, _820), vec3(_818, _819, _820));
        float _826 = (_821 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_821);
        float _834 = (dot(vec3(_321, _322, _323), vec3(_826 * _818, _826 * _819, _826 * _820)) + 1.0) * 0.5;
        float _3525 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _843 = sqrt(((_819 * _819) + (_818 * _818)) + (_820 * _820)) / (_772 + 9.9999997473787516355514526367188e-06);
        float _3536 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _845 = _844 * 2.0;
        float _849 = (1.0 - _844) / (_844 + 1.0);
        float _3547 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _850 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _859 = ((((1.0 - _850) * (_845 + 2.0)) * exp2(log2(isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))) * (_845 + 1.0))) + _850) * _772;
        float _860 = _740 * 0.5;
        float _861 = _750 * 0.5;
        float _862 = _760 * 0.5;
        float _863 = dot(vec3(_860, _861, _862), vec3(_860, _861, _862));
        float _868 = (_863 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_863);
        float _876 = (dot(vec3(_321, _322, _323), vec3(_868 * _860, _868 * _861, _868 * _862)) + 1.0) * 0.5;
        float _3558 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _885 = sqrt(((_861 * _861) + (_860 * _860)) + (_862 * _862)) / (_773 + 9.9999997473787516355514526367188e-06);
        float _3569 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _887 = _886 * 2.0;
        float _891 = (1.0 - _886) / (_886 + 1.0);
        float _3580 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _901 = ((((1.0 - _892) * (_887 + 2.0)) * exp2(log2(isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))) * (_887 + 1.0))) + _892) * _773;
        _909 = _740;
        _911 = _739;
        _912 = _738;
        _913 = _750;
        _914 = _749;
        _915 = _748;
        _916 = _760;
        _917 = _759;
        _918 = _758;
        _919 = _773;
        _920 = _772;
        _921 = _771;
        _922 = cbModelParam._m0[36u].z * (isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0)));
        _923 = cbModelParam._m0[36u].z * (isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0)));
        _924 = cbModelParam._m0[36u].z * (isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0)));
    }
    else
    {
        _909 = _910;
        _911 = _910;
        _912 = _910;
        _913 = _910;
        _914 = _910;
        _915 = _910;
        _916 = _910;
        _917 = _910;
        _918 = _910;
        _919 = _910;
        _920 = _910;
        _921 = _910;
        _922 = 0.0;
        _923 = 0.0;
        _924 = 0.0;
    }
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _953 = fma(_578, cbModelParam._m0[30u].z, fma(_574, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _570));
        float _957 = fma(_578, cbModelParam._m0[31u].z, fma(_574, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _570));
        float _961 = fma(_578, cbModelParam._m0[32u].z, fma(_574, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _570));
        float _984 = _570 + _321;
        float _985 = _574 + _322;
        float _986 = _578 + _323;
        float _996 = fma(_986, cbModelParam._m0[30u].z, fma(_985, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _984)) - _953;
        float _997 = fma(_986, cbModelParam._m0[31u].z, fma(_985, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _984)) - _957;
        float _998 = fma(_986, cbModelParam._m0[32u].z, fma(_985, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _984)) - _961;
        float _1002 = inversesqrt(dot(vec3(_996, _997, _998), vec3(_996, _997, _998)));
        float _1015 = ((_1002 * _996) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_953 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1016 = ((_1002 * _997) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_957 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1017 = ((_1002 * _998) / cbModelParam._m0[35u].z) + ((((((_961 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        float _1052 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1019.x + (-0.5));
        float _1054 = _1052 * (_1019.y + (-0.5));
        float _1055 = _1052 * (_1019.z + (-0.5));
        float _1062 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1026.x + (-0.5));
        float _1064 = _1062 * (_1026.y + (-0.5));
        float _1065 = _1062 * (_1026.z + (-0.5));
        float _1072 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1033.x + (-0.5));
        float _1074 = _1072 * (_1033.y + (-0.5));
        float _1075 = _1072 * (_1033.z + (-0.5));
        float _1082 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1040.x + (-0.5));
        float _1084 = _1082 * (_1040.y + (-0.5));
        float _1085 = _1082 * (_1040.z + (-0.5));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = _1053 * 0.5;
        float _1090 = _1063 * 0.5;
        float _1091 = _1073 * 0.5;
        float _1092 = dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091));
        float _1097 = (_1092 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1092);
        float _1105 = (dot(vec3(_321, _322, _323), vec3(_1097 * _1089, _1097 * _1090, _1097 * _1091)) + 1.0) * 0.5;
        float _3621 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1114 = sqrt(((_1090 * _1090) + (_1089 * _1089)) + (_1091 * _1091)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3632 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1116 = _1115 * 2.0;
        float _1120 = (1.0 - _1115) / (_1115 + 1.0);
        float _3643 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1130 = ((((1.0 - _1121) * (_1116 + 2.0)) * exp2(log2(isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * (_1116 + 1.0))) + _1121) * _1086;
        float _1131 = _1054 * 0.5;
        float _1132 = _1064 * 0.5;
        float _1133 = _1074 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1147 = (dot(vec3(_321, _322, _323), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _3654 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1156 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1087 + 9.9999997473787516355514526367188e-06);
        float _3665 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _3676 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * (_1158 + 1.0))) + _1163) * _1087;
        float _1173 = _1055 * 0.5;
        float _1174 = _1065 * 0.5;
        float _1175 = _1075 * 0.5;
        float _1176 = dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175));
        float _1181 = (_1176 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1176);
        float _1189 = (dot(vec3(_321, _322, _323), vec3(_1181 * _1173, _1181 * _1174, _1181 * _1175)) + 1.0) * 0.5;
        float _3687 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1198 = sqrt(((_1174 * _1174) + (_1173 * _1173)) + (_1175 * _1175)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _3698 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _3709 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * (_1200 + 1.0))) + _1205) * _1088;
        _1222 = _1055;
        _1223 = _1054;
        _1224 = _1053;
        _1225 = _1065;
        _1226 = _1064;
        _1227 = _1063;
        _1228 = _1075;
        _1229 = _1074;
        _1230 = _1073;
        _1231 = _1088;
        _1232 = _1087;
        _1233 = _1086;
        _1234 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)));
        _1235 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
        _1236 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
    }
    else
    {
        _1222 = _910;
        _1223 = _910;
        _1224 = _910;
        _1225 = _910;
        _1226 = _910;
        _1227 = _910;
        _1228 = _910;
        _1229 = _910;
        _1230 = _910;
        _1231 = _910;
        _1232 = _910;
        _1233 = _910;
        _1234 = 0.0;
        _1235 = 0.0;
        _1236 = 0.0;
    }
    float _1246 = (cbModelParam._m0[1u].x * (_1234 - _922)) + _922;
    float _1247 = (cbModelParam._m0[1u].x * (_1235 - _923)) + _923;
    float _1248 = (cbModelParam._m0[1u].x * (_1236 - _924)) + _924;
    float _1269 = fma(_1248, cbSceneParam._m0[89u].z, fma(_1247, cbSceneParam._m0[89u].y, _1246 * cbSceneParam._m0[89u].x));
    float _1272 = fma(_1248, cbSceneParam._m0[90u].z, fma(_1247, cbSceneParam._m0[90u].y, _1246 * cbSceneParam._m0[90u].x));
    float _1275 = fma(_1248, cbSceneParam._m0[91u].z, fma(_1247, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1246));
    float _1290 = _514 * 0.5;
    float _1291 = _515 * 0.5;
    float _1292 = _516 * 0.5;
    float _1293 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_1224, _1227, _1230, _1233));
    float _1296 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_1223, _1226, _1229, _1232));
    float _1299 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_1222, _1225, _1228, _1231));
    float _1333;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1306 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_909, _913, _916, _919));
        float _1310 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_911, _914, _917, _920));
        float _1314 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_912, _915, _918, _921));
        float _1321 = dot(vec4(cbModelParam._m0[39u]), vec4(_1290, _1291, _1292, 1.0));
        _1333 = dot(vec3(isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)), isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)), isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1321) ? 0.0 : (isnan(0.0) ? _1321 : max(0.0, _1321))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1333 = 1.0;
    }
    float _1344;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1335 = dot(vec4(cbModelParam._m0[40u]), vec4(_1290, _1291, _1292, 1.0));
        _1344 = dot(vec3(isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)), isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)), isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1335) ? 0.0 : (isnan(0.0) ? _1335 : max(0.0, _1335))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1344 = 1.0;
    }
    float _1348 = (_1344 * cbModelParam._m0[1u].x) + (_1333 * (1.0 - cbModelParam._m0[1u].x));
    float _1358 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _325);
    float _1359 = isnan(_1358) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1358 : min(cbModelParam._m0[25u].z, _1358));
    float _1441;
    float _1443;
    float _1445;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1408 = fma(_578, cbModelParam._m0[13u].z, fma(_574, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _570)) + cbModelParam._m0[13u].w;
        float _1412 = fma(_578, cbModelParam._m0[14u].z, fma(_574, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _570)) + cbModelParam._m0[14u].w;
        float _1416 = fma(_578, cbModelParam._m0[15u].z, fma(_574, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _570)) + cbModelParam._m0[15u].w;
        float _1419 = fma(_516, cbModelParam._m0[13u].z, fma(_515, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _514));
        float _1422 = fma(_516, cbModelParam._m0[14u].z, fma(_515, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _514));
        float _1425 = fma(_516, cbModelParam._m0[15u].z, fma(_515, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _514));
        float _1453;
        if (_1419 > 0.0)
        {
            _1453 = abs((1.0 - _1408) / _1419);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1419 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1408 + 1.0) / _1419);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1453 = frontier_phi_19_17_ladder;
        }
        float _1661;
        if (_1422 > 0.0)
        {
            _1661 = abs((1.0 - _1412) / _1422);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1422 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1412 + 1.0) / _1422);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1661 = frontier_phi_28_24_ladder;
        }
        float _1915;
        if (_1425 > 0.0)
        {
            _1915 = abs((1.0 - _1416) / _1425);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1425 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1416 + 1.0) / _1425);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1915 = frontier_phi_40_35_ladder;
        }
        float _1917 = isnan(_1661) ? _1453 : (isnan(_1453) ? _1661 : min(_1453, _1661));
        float _1918 = isnan(_1915) ? _1917 : (isnan(_1917) ? _1915 : min(_1917, _1915));
        float _1922 = (_1918 * _1419) + _1408;
        float _1923 = (_1918 * _1422) + _1412;
        float _1924 = (_1918 * _1425) + _1416;
        float _1925 = _1918 * 9.9999997473787516355514526367188e-05;
        float _1927 = (-1.0) - _1925;
        float _1929 = _1925 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1924 > _1929) || ((_1924 < _1927) || ((_1923 > _1929) || ((_1923 < _1927) || ((_1922 < _1927) || (_1922 > _1929))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2052 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1924, cbModelParam._m0[9u].z, fma(_1923, cbModelParam._m0[9u].y, _1922 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1924, cbModelParam._m0[10u].z, fma(_1923, cbModelParam._m0[10u].y, _1922 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1924, cbModelParam._m0[11u].z, fma(_1923, cbModelParam._m0[11u].y, _1922 * cbModelParam._m0[11u].x))), _1359);
            frontier_phi_18_40_ladder = _2052.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2052.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2052.x * cbModelParam._m0[1u].y;
        }
        _1441 = frontier_phi_18_40_ladder_2;
        _1443 = frontier_phi_18_40_ladder_1;
        _1445 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1429 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_514, _515, _516), _1359);
        _1441 = _1429.x * cbModelParam._m0[1u].y;
        _1443 = _1429.y * cbModelParam._m0[1u].y;
        _1445 = _1429.z * cbModelParam._m0[1u].y;
    }
    float _1449 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _325);
    float _1450 = isnan(_1449) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1449 : min(cbModelParam._m0[25u].w, _1449));
    float _1543;
    float _1545;
    float _1547;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1507 = fma(_578, cbModelParam._m0[21u].z, fma(_574, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _570)) + cbModelParam._m0[21u].w;
        float _1511 = fma(_578, cbModelParam._m0[22u].z, fma(_574, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _570)) + cbModelParam._m0[22u].w;
        float _1515 = fma(_578, cbModelParam._m0[23u].z, fma(_574, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _570)) + cbModelParam._m0[23u].w;
        float _1518 = fma(_516, cbModelParam._m0[21u].z, fma(_515, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _514));
        float _1521 = fma(_516, cbModelParam._m0[22u].z, fma(_515, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _514));
        float _1524 = fma(_516, cbModelParam._m0[23u].z, fma(_515, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _514));
        float _1666;
        if (_1518 > 0.0)
        {
            _1666 = abs((1.0 - _1507) / _1518);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1507 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1666 = frontier_phi_30_26_ladder;
        }
        float _1942;
        if (_1521 > 0.0)
        {
            _1942 = abs((1.0 - _1511) / _1521);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1521 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1511 + 1.0) / _1521);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1942 = frontier_phi_42_37_ladder;
        }
        float _2155;
        if (_1524 > 0.0)
        {
            _2155 = abs((1.0 - _1515) / _1524);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1524 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1515 + 1.0) / _1524);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2155 = frontier_phi_51_48_ladder;
        }
        float _2157 = isnan(_1942) ? _1666 : (isnan(_1666) ? _1942 : min(_1666, _1942));
        float _2158 = isnan(_2155) ? _2157 : (isnan(_2157) ? _2155 : min(_2157, _2155));
        float _2162 = (_2158 * _1518) + _1507;
        float _2163 = (_2158 * _1521) + _1511;
        float _2164 = (_2158 * _1524) + _1515;
        float _2165 = _2158 * 9.9999997473787516355514526367188e-05;
        float _2166 = (-1.0) - _2165;
        float _2168 = _2165 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2164 > _2168) || ((_2164 < _2166) || ((_2163 > _2168) || ((_2163 < _2166) || ((_2162 < _2166) || (_2162 > _2168))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2383 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2164, cbModelParam._m0[17u].z, fma(_2163, cbModelParam._m0[17u].y, _2162 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2164, cbModelParam._m0[18u].z, fma(_2163, cbModelParam._m0[18u].y, _2162 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2164, cbModelParam._m0[19u].z, fma(_2163, cbModelParam._m0[19u].y, _2162 * cbModelParam._m0[19u].x))), _1450);
            frontier_phi_27_51_ladder = _2383.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2383.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2383.x * cbModelParam._m0[1u].z;
        }
        _1543 = frontier_phi_27_51_ladder_2;
        _1545 = frontier_phi_27_51_ladder_1;
        _1547 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1527 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_514, _515, _516), _1450);
        _1543 = _1527.x * cbModelParam._m0[1u].z;
        _1545 = _1527.y * cbModelParam._m0[1u].z;
        _1547 = _1527.z * cbModelParam._m0[1u].z;
    }
    float _1560 = (((_541 * _491) + _542) * _506) * ((cbModelParam._m0[1u].w * (_1543 - _1441)) + _1441);
    float _1562 = (((_541 * _493) + _542) * _506) * ((cbModelParam._m0[1u].w * (_1545 - _1443)) + _1443);
    float _1564 = (((_541 * _494) + _542) * _506) * ((cbModelParam._m0[1u].w * (_1547 - _1445)) + _1445);
    float _1567 = fma(_1564, cbSceneParam._m0[89u].z, fma(_1562, cbSceneParam._m0[89u].y, _1560 * cbSceneParam._m0[89u].x));
    float _1570 = fma(_1564, cbSceneParam._m0[90u].z, fma(_1562, cbSceneParam._m0[90u].y, _1560 * cbSceneParam._m0[90u].x));
    float _1573 = fma(_1564, cbSceneParam._m0[91u].z, fma(_1562, cbSceneParam._m0[91u].y, _1560 * cbSceneParam._m0[91u].x));
    uvec4 _1583 = floatBitsToUint(cbInstanceData._m0[_465 + 5u]);
    uint _1585 = _1583.x * 14u;
    uint _1586 = _1585 + 13u;
    float _1593 = _506 + (-1.0);
    float _1598 = (cbLight._m0[_1586].x * _1593) + 1.0;
    float _1599 = (cbLight._m0[_1586].y * _1593) + 1.0;
    float _1600 = (cbLight._m0[_1586].z * _1593) + 1.0;
    float _1601 = (cbLight._m0[_1586].w * _1593) + 1.0;
    uint _1602 = _1585 + 5u;
    float _1608 = isnan(1.0) ? _1599 : (isnan(_1599) ? 1.0 : min(_1599, 1.0));
    uint _1612 = _1585 + 4u;
    float _1619 = isnan(1.0) ? _1598 : (isnan(_1598) ? 1.0 : min(_1598, 1.0));
    uint _1623 = _1585 | 1u;
    float _1634 = dot(vec3(cbLight._m0[_1585].xyz), vec3(_321, _322, _323));
    float _1637 = dot(vec3(cbLight._m0[_1623].xyz), vec3(_321, _322, _323));
    float _3845 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
    float _3856 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
    float _1642 = (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * 0.3183098733425140380859375;
    float _1644 = (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * 0.3183098733425140380859375;
    float _1651 = ((cbLight._m0[_1602].x * _1608) * _1644) + ((cbLight._m0[_1612].x * _1619) * _1642);
    float _1652 = ((_1608 * cbLight._m0[_1602].y) * _1644) + ((_1619 * cbLight._m0[_1612].y) * _1642);
    float _1653 = ((_1608 * cbLight._m0[_1602].z) * _1644) + ((_1619 * cbLight._m0[_1612].z) * _1642);
    uvec4 _1658 = floatBitsToUint(cbLight._m0[_1585 + 12u]);
    bool _1660 = _1658.x == 0u;
    float _1671;
    float _1673;
    float _1675;
    if (_1660)
    {
        _1671 = _1651;
        _1673 = _1652;
        _1675 = _1653;
    }
    else
    {
        uint _1679 = _1585 + 6u;
        float _1695 = (dot(vec3(cbLight._m0[_1585 + 2u].xyz), vec3(_321, _322, _323)) * 0.5) + 0.5;
        float _1696 = _1695 * _1695;
        float _3867 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1697 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1698 = isnan(1.0) ? _1600 : (isnan(_1600) ? 1.0 : min(_1600, 1.0));
        _1671 = (((cbLight._m0[_1679].x * 0.3183098733425140380859375) * _1697) * _1698) + _1651;
        _1673 = (((cbLight._m0[_1679].y * 0.3183098733425140380859375) * _1697) * _1698) + _1652;
        _1675 = (((cbLight._m0[_1679].z * 0.3183098733425140380859375) * _1697) * _1698) + _1653;
    }
    bool _1678 = _1658.y == 0u;
    float _1716;
    float _1718;
    float _1720;
    if (_1678)
    {
        _1716 = _1671;
        _1718 = _1673;
        _1720 = _1675;
    }
    else
    {
        uint _1886 = _1585 + 7u;
        float _1902 = (dot(vec3(cbLight._m0[_1585 + 3u].xyz), vec3(_321, _322, _323)) * 0.5) + 0.5;
        float _1903 = _1902 * _1902;
        float _3883 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
        float _1904 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1905 = isnan(1.0) ? _1601 : (isnan(_1601) ? 1.0 : min(_1601, 1.0));
        _1716 = (((cbLight._m0[_1886].x * 0.3183098733425140380859375) * _1904) * _1905) + _1671;
        _1718 = (((cbLight._m0[_1886].y * 0.3183098733425140380859375) * _1904) * _1905) + _1673;
        _1720 = (((cbLight._m0[_1886].z * 0.3183098733425140380859375) * _1904) * _1905) + _1675;
    }
    uint _1723 = _1585 + 8u;
    float _1736 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1585].w)) * _325) * 0.949999988079071044921875);
    float _1737 = _1736 * _1736;
    float _1738 = cbLight._m0[_1585].x + _404;
    float _1739 = cbLight._m0[_1585].y + _405;
    float _1740 = cbLight._m0[_1585].z + _406;
    float _1744 = inversesqrt(dot(vec3(_1738, _1739, _1740), vec3(_1738, _1739, _1740)));
    float _1745 = _1744 * _1738;
    float _1746 = _1744 * _1739;
    float _1747 = _1744 * _1740;
    float _1748 = dot(vec3(_321, _322, _323), vec3(cbLight._m0[_1585].xyz));
    float _3899 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _1751 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _3910 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _1752 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _1753 = dot(vec3(_321, _322, _323), vec3(_1745, _1746, _1747));
    float _3921 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
    float _1756 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _1757 = dot(vec3(cbLight._m0[_1585].xyz), vec3(_1745, _1746, _1747));
    float _3932 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _1761 = _1737 * _1737;
    float _1765 = ((_1756 * _1756) * (_1761 + (-1.0))) + 1.0;
    float _1773 = exp2(log2(1.0 - (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0)))) * 5.0);
    float _1774 = 0.959999978542327880859375 - _488;
    float _1776 = 0.959999978542327880859375 - _489;
    float _1777 = 0.959999978542327880859375 - _490;
    float _1784 = 1.0 - _1737;
    float _1795 = (0.5 / (((_1752 * ((_1751 * _1784) + _1737)) + 9.9999999392252902907785028219223e-09) + (((_1752 * _1784) + _1737) * _1751))) * _1751;
    float _3943 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _1797 = (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * (_1761 / ((_1765 * _1765) * 3.141590118408203125));
    uint _1808 = _1585 + 9u;
    float _1819 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1623].w)) * _325) * 0.949999988079071044921875);
    float _1820 = _1819 * _1819;
    float _1821 = cbLight._m0[_1623].x + _404;
    float _1822 = cbLight._m0[_1623].y + _405;
    float _1823 = cbLight._m0[_1623].z + _406;
    float _1827 = inversesqrt(dot(vec3(_1821, _1822, _1823), vec3(_1821, _1822, _1823)));
    float _1828 = _1827 * _1821;
    float _1829 = _1827 * _1822;
    float _1830 = _1827 * _1823;
    float _1831 = dot(vec3(_321, _322, _323), vec3(cbLight._m0[_1623].xyz));
    float _3954 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1834 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _1835 = dot(vec3(_321, _322, _323), vec3(_1828, _1829, _1830));
    float _3965 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _1838 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _1839 = dot(vec3(cbLight._m0[_1623].xyz), vec3(_1828, _1829, _1830));
    float _3976 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1843 = _1820 * _1820;
    float _1847 = ((_1838 * _1838) * (_1843 + (-1.0))) + 1.0;
    float _1854 = exp2(log2(1.0 - (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0)))) * 5.0);
    float _1861 = 1.0 - _1820;
    float _1871 = (0.5 / (((_1752 * ((_1834 * _1861) + _1820)) + 9.9999999392252902907785028219223e-09) + (((_1752 * _1861) + _1820) * _1834))) * _1834;
    float _3987 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1873 = (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_1843 / ((_1847 * _1847) * 3.141590118408203125));
    float _1883 = (((((_1854 * _1774) + _491) * cbLight._m0[_1808].x) * _1873) * _1608) + (((((_1773 * _1774) + _491) * cbLight._m0[_1723].x) * _1797) * _1619);
    float _1884 = (((((_1854 * _1776) + _493) * cbLight._m0[_1808].y) * _1873) * _1608) + (((((_1773 * _1776) + _493) * cbLight._m0[_1723].y) * _1797) * _1619);
    float _1885 = (((((_1854 * _1777) + _494) * cbLight._m0[_1808].z) * _1873) * _1608) + (((((_1773 * _1777) + _494) * cbLight._m0[_1723].z) * _1797) * _1619);
    float _1947;
    float _1949;
    float _1951;
    if (_1660)
    {
        _1947 = _1883;
        _1949 = _1884;
        _1951 = _1885;
    }
    else
    {
        uint _1953 = _1585 + 2u;
        uint _1957 = _1585 + 10u;
        float _1971 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1953].w)) * _325) * 0.949999988079071044921875);
        float _1972 = _1971 * _1971;
        float _1973 = cbLight._m0[_1953].x + _404;
        float _1974 = cbLight._m0[_1953].y + _405;
        float _1975 = cbLight._m0[_1953].z + _406;
        float _1979 = inversesqrt(dot(vec3(_1973, _1974, _1975), vec3(_1973, _1974, _1975)));
        float _1980 = _1979 * _1973;
        float _1981 = _1979 * _1974;
        float _1982 = _1979 * _1975;
        float _1983 = dot(vec3(_321, _322, _323), vec3(cbLight._m0[_1953].xyz));
        float _3998 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
        float _1986 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1987 = dot(vec3(_321, _322, _323), vec3(_1980, _1981, _1982));
        float _4009 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
        float _1990 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1991 = dot(vec3(cbLight._m0[_1953].xyz), vec3(_1980, _1981, _1982));
        float _4020 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
        float _1995 = _1972 * _1972;
        float _1999 = ((_1990 * _1990) * (_1995 + (-1.0))) + 1.0;
        float _2006 = exp2(log2(1.0 - (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0)))) * 5.0);
        float _2013 = 1.0 - _1972;
        float _2023 = (0.5 / (((_1752 * ((_1986 * _2013) + _1972)) + 9.9999999392252902907785028219223e-09) + (((_1752 * _2013) + _1972) * _1986))) * _1986;
        float _4031 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
        float _2025 = (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (_1995 / ((_1999 * _1999) * 3.141590118408203125));
        float _2026 = isnan(1.0) ? _1600 : (isnan(_1600) ? 1.0 : min(_1600, 1.0));
        _1947 = (((((_2006 * _1774) + _491) * cbLight._m0[_1957].x) * _2025) * _2026) + _1883;
        _1949 = (((((_2006 * _1776) + _493) * cbLight._m0[_1957].y) * _2025) * _2026) + _1884;
        _1951 = (((((_2006 * _1777) + _494) * cbLight._m0[_1957].z) * _2025) * _2026) + _1885;
    }
    float _2061;
    float _2063;
    float _2065;
    if (_1678)
    {
        _2061 = _1947;
        _2063 = _1949;
        _2065 = _1951;
    }
    else
    {
        uint _2072 = _1585 + 3u;
        uint _2076 = _1585 + 11u;
        float _2090 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2072].w)) * _325) * 0.949999988079071044921875);
        float _2091 = _2090 * _2090;
        float _2092 = cbLight._m0[_2072].x + _404;
        float _2093 = cbLight._m0[_2072].y + _405;
        float _2094 = cbLight._m0[_2072].z + _406;
        float _2098 = inversesqrt(dot(vec3(_2092, _2093, _2094), vec3(_2092, _2093, _2094)));
        float _2099 = _2098 * _2092;
        float _2100 = _2098 * _2093;
        float _2101 = _2098 * _2094;
        float _2102 = dot(vec3(_321, _322, _323), vec3(cbLight._m0[_2072].xyz));
        float _4047 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2105 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _2106 = dot(vec3(_321, _322, _323), vec3(_2099, _2100, _2101));
        float _4058 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2109 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _2110 = dot(vec3(cbLight._m0[_2072].xyz), vec3(_2099, _2100, _2101));
        float _4069 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2114 = _2091 * _2091;
        float _2118 = ((_2109 * _2109) * (_2114 + (-1.0))) + 1.0;
        float _2125 = exp2(log2(1.0 - (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0)))) * 5.0);
        float _2132 = 1.0 - _2091;
        float _2142 = (0.5 / (((_1752 * ((_2105 * _2132) + _2091)) + 9.9999999392252902907785028219223e-09) + (((_1752 * _2132) + _2091) * _2105))) * _2105;
        float _4080 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2144 = (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_2114 / ((_2118 * _2118) * 3.141590118408203125));
        float _2145 = isnan(1.0) ? _1601 : (isnan(_1601) ? 1.0 : min(_1601, 1.0));
        _2061 = (((((_2125 * _1774) + _491) * cbLight._m0[_2076].x) * _2144) * _2145) + _1947;
        _2063 = (((((_2125 * _1776) + _493) * cbLight._m0[_2076].y) * _2144) * _2145) + _1949;
        _2065 = (((((_2125 * _1777) + _494) * cbLight._m0[_2076].z) * _2144) * _2145) + _1951;
    }
    float _2279;
    float _2281;
    float _2283;
    float _2285;
    float _2287;
    float _2289;
    if (_1583.y == 0u)
    {
        float _2220 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2221 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2220;
        float _2222 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2220;
        float _2223 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2220;
        uvec4 _2235 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2236 = _2235.x;
        uint _2247 = uint((float(_2235.y) * floor(float(uint(cbSceneParam._m0[85u].y * _426) / _2236))) + floor(float(uint(cbSceneParam._m0[85u].x * _425) / _2236)));
        float _2257 = (log2(_2223 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2258 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        uint _2261 = uint(isnan(14.0) ? _2258 : (isnan(_2258) ? 14.0 : min(_2258, 14.0)));
        uvec4 _2266 = texelFetch(g_lightClusterGridBuffer, int(((_2261 << 2u) + (_2247 << 6u)) >> 2u));
        uint _2267 = _2266.x;
        uint _2268 = _2235.z;
        float _2388;
        float _2390;
        float _2392;
        float _2394;
        float _2396;
        float _2398;
        if (((((1u << ((_2268 >> 4u) & 15u)) + 4294967295u) & _2267) == 0u) || ((_2268 & 240u) == 0u))
        {
            _2388 = 0.0;
            _2390 = 0.0;
            _2392 = 0.0;
            _2394 = 0.0;
            _2396 = 0.0;
            _2398 = 0.0;
        }
        else
        {
            float _2389;
            float _2391;
            float _2393;
            float _2395;
            float _2397;
            float _2399;
            float _2540 = 0.0;
            float _2541 = 0.0;
            float _2542 = 0.0;
            float _2543 = 0.0;
            float _2544 = 0.0;
            float _2545 = 0.0;
            uint _2546 = 0u;
            uint _2555;
            bool _2556;
            for (;;)
            {
                _2555 = texelFetch(g_lightClassification, int((((_2261 << 5u) + (_2247 << 9u)) + (_2546 << 2u)) >> 2u)).x;
                _2556 = _2555 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2556)
                {
                    frontier_phi_68_pred = _2542;
                    frontier_phi_68_pred_1 = _2545;
                    frontier_phi_68_pred_2 = _2544;
                    frontier_phi_68_pred_3 = _2543;
                    frontier_phi_68_pred_4 = _2541;
                    frontier_phi_68_pred_5 = _2540;
                }
                else
                {
                    float _2685;
                    float _2686;
                    float _2687;
                    float _2688;
                    float _2689;
                    float _2690;
                    uint _2691;
                    _2685 = _2540;
                    _2686 = _2541;
                    _2687 = _2542;
                    _2688 = _2543;
                    _2689 = _2544;
                    _2690 = _2545;
                    _2691 = _2555;
                    float _2612;
                    float _2613;
                    float _2614;
                    float _2615;
                    float _2616;
                    float _2617;
                    for (;;)
                    {
                        uint _2695 = uint(findLSB(_2691)) + (_2546 << 5u);
                        uint _2692 = (_2691 + 4294967295u) & _2691;
                        uint _2697 = _2695 * 48u;
                        vec4 _2711 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2697)).x, texelFetch(g_PointLightRenderingBuffer, int(_2697 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2697 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2697 + 3u)).x));
                        uint _2717 = (_2695 * 48u) + 4u;
                        vec4 _2730 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2717)).x, texelFetch(g_PointLightRenderingBuffer, int(_2717 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2717 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2717 + 3u)).x));
                        uint _2736 = (_2695 * 48u) + 8u;
                        vec3 _2747 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2736)).x, texelFetch(g_PointLightRenderingBuffer, int(_2736 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2736 + 2u)).x));
                        float _2751 = _2711.x - _2221;
                        float _2752 = _2711.y - _2222;
                        float _2753 = _2711.z - _2223;
                        float _2754 = dot(vec3(_2751, _2752, _2753), vec3(_2751, _2752, _2753));
                        float _2757 = inversesqrt(_2754);
                        float _2758 = _2757 * _2751;
                        float _2759 = _2757 * _2752;
                        float _2760 = _2757 * _2753;
                        float _2761 = dot(vec3(_446, _449, _452), vec3(_2758, _2759, _2760));
                        float _2766 = 1.0 - (_2754 * _2711.w);
                        float _4106 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
                        float _2767 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
                        float _2768 = sqrt(_2754) * _2730.w;
                        float _2771 = 1.39999997615814208984375 / (_2768 + 1.39999997615814208984375);
                        float _2772 = _2771 * _2771;
                        float _2775 = ((1.0 - _2772) * _2761) + _2772;
                        float _2778 = _2768 * _2768;
                        float _2782 = ((isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0))) * _2767) / ((_2778 * 0.699999988079071044921875) + 1.0);
                        float _2786 = (-0.0) - _2221;
                        float _2787 = (-0.0) - _2222;
                        float _2788 = (-0.0) - _2223;
                        float _2792 = inversesqrt(dot(vec3(_2786, _2787, _2788), vec3(_2786, _2787, _2788)));
                        float _2793 = _2792 * _2786;
                        float _2794 = _2792 * _2787;
                        float _2795 = _2792 * _2788;
                        float _2803 = exp2(log2(1.0 / ((_2778 * 3.5) + 5.0)) * 0.25);
                        float _2804 = 1.0 - _522;
                        float _2811 = sqrt(1.0 - ((1.0 - (_2804 * _2804)) * (1.0 - (_2803 * _2803))));
                        float _2812 = _2811 * _2811;
                        float _2813 = _2812 * _2812;
                        float _2814 = _2793 + _2758;
                        float _2815 = _2794 + _2759;
                        float _2816 = _2795 + _2760;
                        float _2820 = inversesqrt(dot(vec3(_2814, _2815, _2816), vec3(_2814, _2815, _2816)));
                        float _2824 = dot(vec3(_446, _449, _452), vec3(_2793, _2794, _2795));
                        float _4122 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
                        float _2827 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
                        float _2828 = dot(vec3(_446, _449, _452), vec3(_2820 * _2814, _2820 * _2815, _2820 * _2816));
                        float _4133 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
                        float _2831 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
                        float _2835 = ((_2831 * _2831) * (_2813 + (-1.0))) + 1.0;
                        float _2836 = _2771 * _2812;
                        float _2837 = _2836 * _2836;
                        float _2840 = ((1.0 - _2837) * _2761) + _2837;
                        float _4144 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
                        float _2841 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
                        float _2842 = 1.0 - _2812;
                        float _2852 = (0.5 / (((_2841 * ((_2827 * _2842) + _2812)) + 9.9999999392252902907785028219223e-09) + (((_2841 * _2842) + _2812) * _2827))) * _2841;
                        float _4155 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
                        float _2863 = (((_2813 * 3.1415927410125732421875) * (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) / ((_2835 * _2835) * ((_2778 * 2.1991131305694580078125) + 3.141590118408203125))) * _2767;
                        _2615 = (_2782 * _2730.x) + _2688;
                        _2616 = (_2782 * _2730.y) + _2689;
                        _2617 = (_2782 * _2730.z) + _2690;
                        _2612 = (_2863 * _2747.x) + _2685;
                        _2613 = (_2863 * _2747.y) + _2686;
                        _2614 = (_2863 * _2747.z) + _2687;
                        if (_2692 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2685 = _2612;
                            _2686 = _2613;
                            _2687 = _2614;
                            _2688 = _2615;
                            _2689 = _2616;
                            _2690 = _2617;
                            _2691 = _2692;
                        }
                    }
                    frontier_phi_68_pred = _2614;
                    frontier_phi_68_pred_1 = _2617;
                    frontier_phi_68_pred_2 = _2616;
                    frontier_phi_68_pred_3 = _2615;
                    frontier_phi_68_pred_4 = _2613;
                    frontier_phi_68_pred_5 = _2612;
                }
                _2393 = frontier_phi_68_pred;
                _2399 = frontier_phi_68_pred_1;
                _2397 = frontier_phi_68_pred_2;
                _2395 = frontier_phi_68_pred_3;
                _2391 = frontier_phi_68_pred_4;
                _2389 = frontier_phi_68_pred_5;
                uint _2547 = _2546 + 1u;
                if (_2547 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2540 = _2389;
                    _2541 = _2391;
                    _2542 = _2393;
                    _2543 = _2395;
                    _2544 = _2397;
                    _2545 = _2399;
                    _2546 = _2547;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2388 = _2389;
            _2390 = _2391;
            _2392 = _2393;
            _2394 = _2395;
            _2396 = _2397;
            _2398 = _2399;
        }
        uvec4 _2402 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2403 = _2402.z;
        uint _2405 = (_2403 >> 8u) & 15u;
        float _2508;
        float _2510;
        float _2512;
        float _2514;
        float _2516;
        float _2518;
        if (((4294967295u << _2405) & _2267) == 0u)
        {
            _2508 = _2388;
            _2510 = _2390;
            _2512 = _2392;
            _2514 = _2394;
            _2516 = _2396;
            _2518 = _2398;
        }
        else
        {
            float _2533 = inversesqrt(dot(vec3(_2221, _2222, _2223), vec3(_2221, _2222, _2223)));
            float _2534 = _2533 * _2221;
            float _2535 = _2533 * _2222;
            float _2536 = _2533 * _2223;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2405 < ((_2403 >> 12u) & 15u))
            {
                float _2509;
                float _2511;
                float _2513;
                float _2515;
                float _2517;
                float _2519;
                float _2668 = _2388;
                float _2669 = _2390;
                float _2670 = _2392;
                float _2671 = _2394;
                float _2672 = _2396;
                float _2673 = _2398;
                uint _2674 = _2405;
                uint _2683;
                bool _2684;
                for (;;)
                {
                    _2683 = texelFetch(g_lightClassification, int((((_2261 << 5u) + (_2247 << 9u)) + (_2674 << 2u)) >> 2u)).x;
                    _2684 = _2683 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2684)
                    {
                        frontier_phi_79_pred = _2673;
                        frontier_phi_79_pred_1 = _2672;
                        frontier_phi_79_pred_2 = _2671;
                        frontier_phi_79_pred_3 = _2670;
                        frontier_phi_79_pred_4 = _2669;
                        frontier_phi_79_pred_5 = _2668;
                    }
                    else
                    {
                        float _2877;
                        float _2878;
                        float _2879;
                        float _2880;
                        float _2881;
                        float _2882;
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _2890 = _2668;
                        float _2891 = _2669;
                        float _2892 = _2670;
                        float _2893 = _2671;
                        float _2894 = _2672;
                        float _2895 = _2673;
                        uint _2896 = _2683;
                        uint _2897;
                        vec4 _2922;
                        float _2923;
                        vec4 _2938;
                        vec3 _2950;
                        vec4 _2966;
                        vec4 _2982;
                        float _3029;
                        bool _3030;
                        for (;;)
                        {
                            uint _2907 = ((_2674 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2896));
                            _2897 = (_2896 + 4294967295u) & _2896;
                            uint _2909 = _2907 * 40u;
                            _2922 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2909)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 3u)).x));
                            _2923 = _2922.w;
                            uint _2925 = (_2907 * 40u) + 4u;
                            _2938 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2925)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 3u)).x));
                            uint _2940 = (_2907 * 40u) + 8u;
                            _2950 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2940)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 2u)).x));
                            uint _2953 = (_2907 * 40u) + 16u;
                            _2966 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2953)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 3u)).x));
                            uint _2969 = (_2907 * 40u) + 20u;
                            _2982 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2969)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 3u)).x));
                            uint _2985 = (_2907 * 40u) + 24u;
                            vec4 _2998 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2985)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 3u)).x));
                            uint _3004 = (_2907 * 40u) + 28u;
                            vec4 _3017 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3004)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 3u)).x));
                            _3029 = fma(_2223, _3017.z, fma(_2222, _3017.y, _3017.x * _2221)) + _3017.w;
                            _3030 = !((fma(_2223, _2998.z, fma(_2222, _2998.y, _2998.x * _2221)) + _2998.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3030)
                            {
                                float _3057 = _2922.x - _2221;
                                float _3058 = _2922.y - _2222;
                                float _3059 = _2922.z - _2223;
                                float _3060 = dot(vec3(_3057, _3058, _3059), vec3(_3057, _3058, _3059));
                                float _3063 = inversesqrt(_3060);
                                float _3064 = _3063 * _3057;
                                float _3065 = _3063 * _3058;
                                float _3066 = _3063 * _3059;
                                float _3070 = 1.0 - (_3060 / (_2923 * _2923));
                                float _4166 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                                float _3071 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
                                float _3075 = sqrt(_3060) * _2938.w;
                                float _3077 = 1.39999997615814208984375 / (_3075 + 1.39999997615814208984375);
                                float _3078 = _3077 * _3077;
                                float _3081 = ((1.0 - _3078) * dot(vec3(_3064, _3065, _3066), vec3(_446, _449, _452))) + _3078;
                                float _3084 = _3075 * _3075;
                                float _3088 = (fma(_2223, _2966.z, fma(_2222, _2966.y, _2966.x * _2221)) + _2966.w) / _3029;
                                float _3089 = (fma(_2223, _2982.z, fma(_2222, _2982.y, _2982.x * _2221)) + _2982.w) / _3029;
                                float _3093 = 1.0 - dot(vec2(_3088, _3089), vec2(_3088, _3089));
                                float _4182 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                                float _3094 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                                float _3095 = _3094 * (((isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0))) * _3071) / ((_3084 * 0.699999988079071044921875) + 1.0));
                                float _3107 = exp2(log2(1.0 / ((_3084 * 3.5) + 5.0)) * 0.25);
                                float _3108 = 1.0 - _522;
                                float _3115 = sqrt(1.0 - ((1.0 - (_3108 * _3108)) * (1.0 - (_3107 * _3107))));
                                float _3116 = _3115 * _3115;
                                float _3117 = _3116 * _3116;
                                float _3118 = _3064 - _2534;
                                float _3119 = _3065 - _2535;
                                float _3120 = _3066 - _2536;
                                float _3124 = inversesqrt(dot(vec3(_3118, _3119, _3120), vec3(_3118, _3119, _3120)));
                                float _3128 = dot(vec3(_446, _449, _452), vec3((-0.0) - _2534, (-0.0) - _2535, (-0.0) - _2536));
                                float _4193 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                                float _3131 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
                                float _3132 = dot(vec3(_446, _449, _452), vec3(_3124 * _3118, _3124 * _3119, _3124 * _3120));
                                float _4204 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                                float _3135 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                                float _3139 = ((_3135 * _3135) * (_3117 + (-1.0))) + 1.0;
                                float _3140 = _3077 * _3116;
                                float _3141 = _3140 * _3140;
                                float _3147 = ((1.0 - _3141) * dot(vec3(_446, _449, _452), vec3(_3064, _3065, _3066))) + _3141;
                                float _4215 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                                float _3148 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
                                float _3149 = 1.0 - _3116;
                                float _3159 = (0.5 / (((_3148 * ((_3131 * _3149) + _3116)) + 9.9999999392252902907785028219223e-09) + (((_3148 * _3149) + _3116) * _3131))) * _3148;
                                float _4226 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                                float _3169 = (_3094 * _3071) * (((_3117 * 3.1415927410125732421875) * (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0)))) / ((_3139 * _3139) * ((_3084 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3095 * _2938.z;
                                frontier_phi_85_pred_1 = _3095 * _2938.y;
                                frontier_phi_85_pred_2 = _3095 * _2938.x;
                                frontier_phi_85_pred_3 = _3169 * _2950.z;
                                frontier_phi_85_pred_4 = _3169 * _2950.y;
                                frontier_phi_85_pred_5 = _3169 * _2950.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3178 = frontier_phi_85_pred;
                            _3177 = frontier_phi_85_pred_1;
                            _3176 = frontier_phi_85_pred_2;
                            _3175 = frontier_phi_85_pred_3;
                            _3174 = frontier_phi_85_pred_4;
                            _3173 = frontier_phi_85_pred_5;
                            _2880 = _3176 + _2893;
                            _2881 = _3177 + _2894;
                            _2882 = _3178 + _2895;
                            _2877 = _3173 + _2890;
                            _2878 = _3174 + _2891;
                            _2879 = _3175 + _2892;
                            if (_2897 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2890 = _2877;
                                _2891 = _2878;
                                _2892 = _2879;
                                _2893 = _2880;
                                _2894 = _2881;
                                _2895 = _2882;
                                _2896 = _2897;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2882;
                        frontier_phi_79_pred_1 = _2881;
                        frontier_phi_79_pred_2 = _2880;
                        frontier_phi_79_pred_3 = _2879;
                        frontier_phi_79_pred_4 = _2878;
                        frontier_phi_79_pred_5 = _2877;
                    }
                    _2519 = frontier_phi_79_pred;
                    _2517 = frontier_phi_79_pred_1;
                    _2515 = frontier_phi_79_pred_2;
                    _2513 = frontier_phi_79_pred_3;
                    _2511 = frontier_phi_79_pred_4;
                    _2509 = frontier_phi_79_pred_5;
                    uint _2675 = _2674 + 1u;
                    if (_2675 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2668 = _2509;
                        _2669 = _2511;
                        _2670 = _2513;
                        _2671 = _2515;
                        _2672 = _2517;
                        _2673 = _2519;
                        _2674 = _2675;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2515;
                frontier_phi_60_61_ladder_1 = _2519;
                frontier_phi_60_61_ladder_2 = _2517;
                frontier_phi_60_61_ladder_3 = _2513;
                frontier_phi_60_61_ladder_4 = _2511;
                frontier_phi_60_61_ladder_5 = _2509;
            }
            else
            {
                frontier_phi_60_61_ladder = _2394;
                frontier_phi_60_61_ladder_1 = _2398;
                frontier_phi_60_61_ladder_2 = _2396;
                frontier_phi_60_61_ladder_3 = _2392;
                frontier_phi_60_61_ladder_4 = _2390;
                frontier_phi_60_61_ladder_5 = _2388;
            }
            _2508 = frontier_phi_60_61_ladder_5;
            _2510 = frontier_phi_60_61_ladder_4;
            _2512 = frontier_phi_60_61_ladder_3;
            _2514 = frontier_phi_60_61_ladder;
            _2516 = frontier_phi_60_61_ladder_2;
            _2518 = frontier_phi_60_61_ladder_1;
        }
        float _2523 = isnan(1.0) ? _506 : (isnan(_506) ? 1.0 : min(_506, 1.0));
        _2279 = (_2523 * _2514) + _1716;
        _2281 = (_2523 * _2516) + _1718;
        _2283 = (_2523 * _2518) + _1720;
        _2285 = ((_2508 * _491) * _2523) + _2061;
        _2287 = ((_2510 * _493) * _2523) + _2063;
        _2289 = ((_2512 * _494) * _2523) + _2065;
    }
    else
    {
        _2279 = _1716;
        _2281 = _1718;
        _2283 = _1720;
        _2285 = _2061;
        _2287 = _2063;
        _2289 = _2065;
    }
    uint _2295 = _467 + uint(cbMatDynParam._m0[0u].w);
    float _4242 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _4253 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _4264 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _4275 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _2321 = (((isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_2279 + ((isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))) * _506))) + ((_2285 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _1348)) * cbPerFrame._m0[3u].x)) + ((_300.x * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2295].x);
    float _2323 = (((_300.y * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2295].y) + ((_2287 + ((isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))) * _1348)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2281 + ((isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0))) * _506)));
    float _2325 = (((_300.z * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2295].z) + ((_2289 + ((isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))) * _1348)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_2283 + ((isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0))) * _506)));
    float _2326 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2327 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _2328 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2333 = cbInstanceData._m0[_465 + 6u].w * (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0)));
    float _2338 = _425 / cbSceneParam._m0[86u].x;
    float _2339 = _426 / cbSceneParam._m0[86u].y;
    vec4 _2353 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2338, _2339, (log2((isnan(cbSceneParam._m0[77u].w) ? _345 : (isnan(_345) ? cbSceneParam._m0[77u].w : min(_345, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2355 = _2353.x;
    float _2356 = _2353.y;
    float _2357 = _2353.z;
    float _2358 = _2353.w;
    float _2450;
    float _2452;
    float _2454;
    float _2456;
    if (_345 > cbSceneParam._m0[78u].w)
    {
        float _2413 = isnan(_345) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _345 : min(cbSceneParam._m0[80u].w, _345));
        float _2414 = _2413 / _345;
        float _2425 = _2414 * _397;
        float _2426 = _398 * _2414;
        float _2427 = (-0.0) - _2426;
        float _2428 = _2414 * _399;
        float _2430 = (cbSceneParam._m0[77u].w * _2427) / _2413;
        float _2431 = _2430 + cbSceneParam._m0[79u].w;
        float _2432 = cbSceneParam._m0[79u].w - _2426;
        float _2438 = sqrt(((_2425 * _2425) + (_2426 * _2426)) + (_2428 * _2428));
        float _2441 = (1.0 - (cbSceneParam._m0[77u].w / _2413)) * _2438;
        float _2446 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2448 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2625;
        if (abs((_2427 - _2430) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2625 = ((((_2431 > 0.0) ? exp2(_2446 * _2431) : (2.0 - exp2(_2448 * _2431))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2441;
        }
        else
        {
            float _2569 = 1.0 / cbSceneParam._m0[80u].x;
            float _2570 = isnan(_2432) ? _2431 : (isnan(_2431) ? _2432 : max(_2431, _2432));
            float _2571 = isnan(_2432) ? _2431 : (isnan(_2431) ? _2432 : min(_2431, _2432));
            float _2580 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : min(_2570, 0.0));
            float _2581 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : min(_2571, 0.0));
            _2625 = ((abs(_2438 / _2427) * cbSceneParam._m0[80u].y) * ((((_2580 - _2581) * 2.0) - ((exp2(_2446 * (isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0)))) - exp2(_2446 * (isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0))))) * _2569)) - ((exp2(_2448 * _2580) - exp2(_2448 * _2581)) * _2569))) + (_2441 * cbSceneParam._m0[80u].z);
        }
        vec4 _2627 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2338, _2339, 1.0), 0.0);
        float _2636 = exp2((_2625 * (-1.44269502162933349609375)) * (1.0 - _2627.w));
        float _2637 = log2(_2636);
        float _2653 = log2(_2358);
        _2450 = (exp2(_2653 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2637 * cbSceneParam._m0[78u].x)) * _2627.x) / cbSceneParam._m0[78u].x)) + _2355;
        _2452 = (exp2(_2653 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2637 * cbSceneParam._m0[78u].y)) * _2627.y) / cbSceneParam._m0[78u].y)) + _2356;
        _2454 = (exp2(_2653 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2637 * cbSceneParam._m0[78u].z)) * _2627.z) / cbSceneParam._m0[78u].z)) + _2357;
        _2456 = _2636 * _2358;
    }
    else
    {
        _2450 = _2355;
        _2452 = _2356;
        _2454 = _2357;
        _2456 = _2358;
    }
    bool _2663;
    vec4 _2466;
    vec4 _2488;
    float _2490;
    float _2494;
    float _2495;
    float _2496;
    float _2497;
    bool _2507;
    for (;;)
    {
        _2466 = cbMatDynParam._m0[0u];
        float _2468 = roundEven(_2466.y);
        bool _2469 = _2468 == 3.0;
        float _2470 = log2(_2456);
        float _2477 = exp2(_2470 * cbSceneParam._m0[78u].x) * _2326;
        float _2478 = exp2(_2470 * cbSceneParam._m0[78u].y) * _2327;
        float _2479 = exp2(_2470 * cbSceneParam._m0[78u].z) * _2328;
        float _2486 = _413 + (-0.5);
        _2488 = cbMtdParam._m0[1u];
        _2490 = _2488.y * _2486;
        float _2493 = (_2468 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2494 = _2493 * (_2469 ? _2477 : (_2477 + (cbSceneParam._m0[72u].w * _2450)));
        _2495 = _2493 * (_2469 ? _2478 : (_2478 + (cbSceneParam._m0[72u].w * _2452)));
        _2496 = _2493 * (_2469 ? _2479 : (_2479 + (cbSceneParam._m0[72u].w * _2454)));
        _2497 = _2486 * 0.999000012874603271484375;
        _2507 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2507)
        {
            if ((cbInstanceData._m0[_465 + 7u].x + _2497) < 0.5)
            {
                _2663 = true;
                break;
            }
        }
        uint _2604 = _467 + uint(_2466.w);
        if ((cbInstanceData._m0[_2604].w < 1.0) && ((cbInstanceData._m0[_2604].w + _2497) < 0.5))
        {
            _2663 = true;
            break;
        }
        if ((_2490 + _238) < _2488.x)
        {
            _2663 = true;
            break;
        }
        _2663 = false;
        break;
    }
    float _2868;
    if (_2663)
    {
        discard_state = true;
        _2868 = 0.0;
    }
    else
    {
        _2868 = _2333;
    }
    SV_Target.x = _2494;
    SV_Target.y = _2495;
    SV_Target.z = _2496;
    SV_Target.w = _2868;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2333;
    discard_exit();
}


