#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[18];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D MenuMiniMapColorSet_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _789;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _176 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _177 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _178 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _183 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _184 = _183 * _176;
    float _185 = _183 * _177;
    float _186 = _183 * _178;
    float _190 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _191 = _190 * NORMAL.x;
    float _192 = _190 * NORMAL.y;
    float _193 = _190 * NORMAL.z;
    float _197 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _198 = _197 * TANGENT.x;
    float _199 = _197 * TANGENT.y;
    float _200 = _197 * TANGENT.z;
    float _205;
    float _206;
    float _207;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _205 = (-0.0) - _191;
        _206 = (-0.0) - _192;
        _207 = (-0.0) - _193;
    }
    else
    {
        _205 = _191;
        _206 = _192;
        _207 = _193;
    }
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _282 = texture(sampler2D(MenuMiniMapColorSet_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _290 = (_282.x * 2.0) + (-1.0);
    float _292 = (_282.y * 2.0) + (-1.0);
    float _293 = dot(vec2(_290, _292), vec2(_290, _292));
    float _2926 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _299 = sqrt(1.0 - (isnan(1.0) ? _2926 : (isnan(_2926) ? 1.0 : min(_2926, 1.0))));
    float _302 = fma(_299, _205, fma(_292, _198, _290 * _184));
    float _305 = fma(_299, _206, fma(_292, _199, _290 * _185));
    float _308 = fma(_299, _207, fma(_292, _200, _290 * _186));
    float _312 = inversesqrt(dot(vec3(_302, _305, _308), vec3(_302, _305, _308)));
    float _313 = _312 * _302;
    float _314 = _312 * _305;
    float _315 = _312 * _308;
    float _319 = inversesqrt(dot(vec3(_313, _314, _315), vec3(_313, _314, _315)));
    float _326 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _327 = _326 * _261;
    float _328 = _326 * _262;
    float _329 = _326 * _263;
    float _336 = cbMtdParam._m0[9u].x - dot(vec3(_327, _328, _329), vec3(_319 * _313, _319 * _314, _319 * _315));
    float _2937 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _337 = isnan(1.0) ? _2937 : (isnan(_2937) ? 1.0 : min(_2937, 1.0));
    float _340 = fma(_315, _205, fma(_314, _198, _313 * _184));
    float _343 = fma(_315, _206, fma(_314, _199, _313 * _185));
    float _346 = fma(_315, _207, fma(_314, _200, _313 * _186));
    float _350 = inversesqrt(dot(vec3(_340, _343, _346), vec3(_340, _343, _346)));
    float _351 = _350 * _340;
    float _352 = _350 * _343;
    float _353 = _350 * _346;
    float _2948 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _354 = isnan(1.0) ? _2948 : (isnan(_2948) ? 1.0 : min(_2948, 1.0));
    float _2959 = isnan(0.0) ? cbMatDynParam._m0[17u].x : (isnan(cbMatDynParam._m0[17u].x) ? 0.0 : max(cbMatDynParam._m0[17u].x, 0.0));
    float _2970 = isnan(0.0) ? cbMatDynParam._m0[17u].y : (isnan(cbMatDynParam._m0[17u].y) ? 0.0 : max(cbMatDynParam._m0[17u].y, 0.0));
    float _2981 = isnan(0.0) ? cbMatDynParam._m0[17u].z : (isnan(cbMatDynParam._m0[17u].z) ? 0.0 : max(cbMatDynParam._m0[17u].z, 0.0));
    float _373 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _379 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _380 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _401 = fma(_353, cbSceneParam._m0[5u].z, fma(_352, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _351));
    float _404 = fma(_353, cbSceneParam._m0[6u].z, fma(_352, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _351));
    float _407 = fma(_353, cbSceneParam._m0[7u].z, fma(_352, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _351));
    uint _420 = uint(roundEven(NORMAL.w)) * 13u;
    uint _423 = (_420 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _429 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2959 : (isnan(_2959) ? 1.0 : min(_2959, 1.0)))) * cbInstanceData._m0[_423].x;
    float _430 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2970 : (isnan(_2970) ? 1.0 : min(_2970, 1.0)))) * cbInstanceData._m0[_423].y;
    float _431 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2981 : (isnan(_2981) ? 1.0 : min(_2981, 1.0)))) * cbInstanceData._m0[_423].z;
    float _2992 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _432 = isnan(1.0) ? _2992 : (isnan(_2992) ? 1.0 : min(_2992, 1.0));
    float _3003 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _433 = isnan(1.0) ? _3003 : (isnan(_3003) ? 1.0 : min(_3003, 1.0));
    float _3014 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _434 = isnan(1.0) ? _3014 : (isnan(_3014) ? 1.0 : min(_3014, 1.0));
    vec4 _443 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _379, cbSceneParam._m0[86u].y * _380));
    float _446 = _443.x * TEXCOORD.z;
    float _447 = dot(vec3(_351, _352, _353), vec3(_327, _328, _329));
    float _450 = _447 * 2.0;
    float _454 = (_450 * _351) - _327;
    float _455 = (_450 * _352) - _328;
    float _456 = (_450 * _353) - _329;
    float _478 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _482 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _486 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _788;
    float _790;
    float _791;
    float _792;
    float _793;
    float _794;
    float _795;
    float _796;
    float _797;
    float _798;
    float _799;
    float _800;
    float _801;
    float _802;
    float _803;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _513 = fma(_486, cbModelParam._m0[26u].z, fma(_482, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _478));
        float _517 = fma(_486, cbModelParam._m0[27u].z, fma(_482, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _478));
        float _521 = fma(_486, cbModelParam._m0[28u].z, fma(_482, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _478));
        float _546 = _478 + _351;
        float _547 = _482 + _352;
        float _548 = _486 + _353;
        float _558 = fma(_548, cbModelParam._m0[26u].z, fma(_547, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _546)) - _513;
        float _559 = fma(_548, cbModelParam._m0[27u].z, fma(_547, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _546)) - _517;
        float _560 = fma(_548, cbModelParam._m0[28u].z, fma(_547, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _546)) - _521;
        float _564 = inversesqrt(dot(vec3(_558, _559, _560), vec3(_558, _559, _560)));
        float _577 = ((_564 * _558) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_513 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _578 = ((_564 * _559) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_517 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _579 = ((_564 * _560) / cbModelParam._m0[34u].z) + ((((((_521 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _582 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_577, _578, _579), 0.0);
        vec4 _589 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_577, _578, _579), 0.0);
        vec4 _596 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_577, _578, _579), 0.0);
        vec4 _603 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_577, _578, _579), 0.0);
        float _616 = exp2((_582.w + (-0.5)) * 20.0) * 2.0;
        float _617 = _616 * (_582.x + (-0.5));
        float _618 = _616 * (_582.y + (-0.5));
        float _619 = _616 * (_582.z + (-0.5));
        float _626 = exp2((_589.w + (-0.5)) * 20.0) * 2.0;
        float _627 = _626 * (_589.x + (-0.5));
        float _628 = _626 * (_589.y + (-0.5));
        float _629 = _626 * (_589.z + (-0.5));
        float _636 = exp2((_596.w + (-0.5)) * 20.0) * 2.0;
        float _637 = _636 * (_596.x + (-0.5));
        float _638 = _636 * (_596.y + (-0.5));
        float _639 = _636 * (_596.z + (-0.5));
        float _646 = exp2((_603.w + (-0.5)) * 20.0) * 2.0;
        float _647 = _646 * (_603.x + (-0.5));
        float _648 = _646 * (_603.y + (-0.5));
        float _649 = _646 * (_603.z + (-0.5));
        float _650 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
        float _651 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
        float _652 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
        float _653 = _617 * 0.5;
        float _654 = _627 * 0.5;
        float _655 = _637 * 0.5;
        float _656 = dot(vec3(_653, _654, _655), vec3(_653, _654, _655));
        float _661 = (_656 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_656);
        float _670 = (dot(vec3(_351, _352, _353), vec3(_661 * _653, _661 * _654, _661 * _655)) + 1.0) * 0.5;
        float _3040 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        float _680 = sqrt(((_654 * _654) + (_653 * _653)) + (_655 * _655)) / (_650 + 9.9999997473787516355514526367188e-06);
        float _3051 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
        float _681 = isnan(1.0) ? _3051 : (isnan(_3051) ? 1.0 : min(_3051, 1.0));
        float _682 = _681 * 2.0;
        float _686 = (1.0 - _681) / (_681 + 1.0);
        float _3062 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
        float _687 = isnan(1.0) ? _3062 : (isnan(_3062) ? 1.0 : min(_3062, 1.0));
        float _696 = ((((1.0 - _687) * (_682 + 2.0)) * exp2(log2(isnan(1.0) ? _3040 : (isnan(_3040) ? 1.0 : min(_3040, 1.0))) * (_682 + 1.0))) + _687) * _650;
        float _697 = _618 * 0.5;
        float _698 = _628 * 0.5;
        float _699 = _638 * 0.5;
        float _700 = dot(vec3(_697, _698, _699), vec3(_697, _698, _699));
        float _705 = (_700 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_700);
        float _713 = (dot(vec3(_351, _352, _353), vec3(_705 * _697, _705 * _698, _705 * _699)) + 1.0) * 0.5;
        float _3073 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _722 = sqrt(((_698 * _698) + (_697 * _697)) + (_699 * _699)) / (_651 + 9.9999997473787516355514526367188e-06);
        float _3084 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _723 = isnan(1.0) ? _3084 : (isnan(_3084) ? 1.0 : min(_3084, 1.0));
        float _724 = _723 * 2.0;
        float _728 = (1.0 - _723) / (_723 + 1.0);
        float _3095 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _729 = isnan(1.0) ? _3095 : (isnan(_3095) ? 1.0 : min(_3095, 1.0));
        float _738 = ((((1.0 - _729) * (_724 + 2.0)) * exp2(log2(isnan(1.0) ? _3073 : (isnan(_3073) ? 1.0 : min(_3073, 1.0))) * (_724 + 1.0))) + _729) * _651;
        float _739 = _619 * 0.5;
        float _740 = _629 * 0.5;
        float _741 = _639 * 0.5;
        float _742 = dot(vec3(_739, _740, _741), vec3(_739, _740, _741));
        float _747 = (_742 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_742);
        float _755 = (dot(vec3(_351, _352, _353), vec3(_747 * _739, _747 * _740, _747 * _741)) + 1.0) * 0.5;
        float _3106 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _764 = sqrt(((_740 * _740) + (_739 * _739)) + (_741 * _741)) / (_652 + 9.9999997473787516355514526367188e-06);
        float _3117 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _765 = isnan(1.0) ? _3117 : (isnan(_3117) ? 1.0 : min(_3117, 1.0));
        float _766 = _765 * 2.0;
        float _770 = (1.0 - _765) / (_765 + 1.0);
        float _3128 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _771 = isnan(1.0) ? _3128 : (isnan(_3128) ? 1.0 : min(_3128, 1.0));
        float _780 = ((((1.0 - _771) * (_766 + 2.0)) * exp2(log2(isnan(1.0) ? _3106 : (isnan(_3106) ? 1.0 : min(_3106, 1.0))) * (_766 + 1.0))) + _771) * _652;
        _788 = _619;
        _790 = _618;
        _791 = _617;
        _792 = _629;
        _793 = _628;
        _794 = _627;
        _795 = _639;
        _796 = _638;
        _797 = _637;
        _798 = _652;
        _799 = _651;
        _800 = _650;
        _801 = cbModelParam._m0[36u].z * (isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0)));
        _802 = cbModelParam._m0[36u].z * (isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0)));
        _803 = cbModelParam._m0[36u].z * (isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0)));
    }
    else
    {
        _788 = _789;
        _790 = _789;
        _791 = _789;
        _792 = _789;
        _793 = _789;
        _794 = _789;
        _795 = _789;
        _796 = _789;
        _797 = _789;
        _798 = _789;
        _799 = _789;
        _800 = _789;
        _801 = 0.0;
        _802 = 0.0;
        _803 = 0.0;
    }
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _829 = fma(_486, cbModelParam._m0[30u].z, fma(_482, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _478));
        float _833 = fma(_486, cbModelParam._m0[31u].z, fma(_482, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _478));
        float _837 = fma(_486, cbModelParam._m0[32u].z, fma(_482, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _478));
        float _860 = _478 + _351;
        float _861 = _482 + _352;
        float _862 = _486 + _353;
        float _872 = fma(_862, cbModelParam._m0[30u].z, fma(_861, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _860)) - _829;
        float _873 = fma(_862, cbModelParam._m0[31u].z, fma(_861, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _860)) - _833;
        float _874 = fma(_862, cbModelParam._m0[32u].z, fma(_861, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _860)) - _837;
        float _878 = inversesqrt(dot(vec3(_872, _873, _874), vec3(_872, _873, _874)));
        float _891 = ((_878 * _872) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_829 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _892 = ((_878 * _873) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_833 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _893 = ((_878 * _874) / cbModelParam._m0[35u].z) + ((((((_837 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _895 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_891, _892, _893), 0.0);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_891, _892, _893), 0.0);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_891, _892, _893), 0.0);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_891, _892, _893), 0.0);
        float _928 = exp2((_895.w + (-0.5)) * 20.0) * 2.0;
        float _929 = _928 * (_895.x + (-0.5));
        float _930 = _928 * (_895.y + (-0.5));
        float _931 = _928 * (_895.z + (-0.5));
        float _938 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _939 = _938 * (_902.x + (-0.5));
        float _940 = _938 * (_902.y + (-0.5));
        float _941 = _938 * (_902.z + (-0.5));
        float _948 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _949 = _948 * (_909.x + (-0.5));
        float _950 = _948 * (_909.y + (-0.5));
        float _951 = _948 * (_909.z + (-0.5));
        float _958 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _959 = _958 * (_916.x + (-0.5));
        float _960 = _958 * (_916.y + (-0.5));
        float _961 = _958 * (_916.z + (-0.5));
        float _962 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _963 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _964 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _965 = _929 * 0.5;
        float _966 = _939 * 0.5;
        float _967 = _949 * 0.5;
        float _968 = dot(vec3(_965, _966, _967), vec3(_965, _966, _967));
        float _973 = (_968 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_968);
        float _981 = (dot(vec3(_351, _352, _353), vec3(_973 * _965, _973 * _966, _973 * _967)) + 1.0) * 0.5;
        float _3169 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _990 = sqrt(((_966 * _966) + (_965 * _965)) + (_967 * _967)) / (_962 + 9.9999997473787516355514526367188e-06);
        float _3180 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _3180 : (isnan(_3180) ? 1.0 : min(_3180, 1.0));
        float _992 = _991 * 2.0;
        float _996 = (1.0 - _991) / (_991 + 1.0);
        float _3191 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _997 = isnan(1.0) ? _3191 : (isnan(_3191) ? 1.0 : min(_3191, 1.0));
        float _1006 = ((((1.0 - _997) * (_992 + 2.0)) * exp2(log2(isnan(1.0) ? _3169 : (isnan(_3169) ? 1.0 : min(_3169, 1.0))) * (_992 + 1.0))) + _997) * _962;
        float _1007 = _930 * 0.5;
        float _1008 = _940 * 0.5;
        float _1009 = _950 * 0.5;
        float _1010 = dot(vec3(_1007, _1008, _1009), vec3(_1007, _1008, _1009));
        float _1015 = (_1010 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1010);
        float _1023 = (dot(vec3(_351, _352, _353), vec3(_1015 * _1007, _1015 * _1008, _1015 * _1009)) + 1.0) * 0.5;
        float _3202 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1032 = sqrt(((_1008 * _1008) + (_1007 * _1007)) + (_1009 * _1009)) / (_963 + 9.9999997473787516355514526367188e-06);
        float _3213 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0));
        float _1034 = _1033 * 2.0;
        float _1038 = (1.0 - _1033) / (_1033 + 1.0);
        float _3224 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _3224 : (isnan(_3224) ? 1.0 : min(_3224, 1.0));
        float _1048 = ((((1.0 - _1039) * (_1034 + 2.0)) * exp2(log2(isnan(1.0) ? _3202 : (isnan(_3202) ? 1.0 : min(_3202, 1.0))) * (_1034 + 1.0))) + _1039) * _963;
        float _1049 = _931 * 0.5;
        float _1050 = _941 * 0.5;
        float _1051 = _951 * 0.5;
        float _1052 = dot(vec3(_1049, _1050, _1051), vec3(_1049, _1050, _1051));
        float _1057 = (_1052 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1052);
        float _1065 = (dot(vec3(_351, _352, _353), vec3(_1057 * _1049, _1057 * _1050, _1057 * _1051)) + 1.0) * 0.5;
        float _3235 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1074 = sqrt(((_1050 * _1050) + (_1049 * _1049)) + (_1051 * _1051)) / (_964 + 9.9999997473787516355514526367188e-06);
        float _3246 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0));
        float _1076 = _1075 * 2.0;
        float _1080 = (1.0 - _1075) / (_1075 + 1.0);
        float _3257 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0));
        float _1090 = ((((1.0 - _1081) * (_1076 + 2.0)) * exp2(log2(isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0))) * (_1076 + 1.0))) + _1081) * _964;
        _1098 = _931;
        _1099 = _930;
        _1100 = _929;
        _1101 = _941;
        _1102 = _940;
        _1103 = _939;
        _1104 = _951;
        _1105 = _950;
        _1106 = _949;
        _1107 = _964;
        _1108 = _963;
        _1109 = _962;
        _1110 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0)));
        _1111 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0)));
        _1112 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0)));
    }
    else
    {
        _1098 = _789;
        _1099 = _789;
        _1100 = _789;
        _1101 = _789;
        _1102 = _789;
        _1103 = _789;
        _1104 = _789;
        _1105 = _789;
        _1106 = _789;
        _1107 = _789;
        _1108 = _789;
        _1109 = _789;
        _1110 = 0.0;
        _1111 = 0.0;
        _1112 = 0.0;
    }
    float _1122 = (cbModelParam._m0[1u].x * (_1110 - _801)) + _801;
    float _1123 = (cbModelParam._m0[1u].x * (_1111 - _802)) + _802;
    float _1124 = (cbModelParam._m0[1u].x * (_1112 - _803)) + _803;
    float _1145 = fma(_1124, cbSceneParam._m0[89u].z, fma(_1123, cbSceneParam._m0[89u].y, _1122 * cbSceneParam._m0[89u].x));
    float _1148 = fma(_1124, cbSceneParam._m0[90u].z, fma(_1123, cbSceneParam._m0[90u].y, _1122 * cbSceneParam._m0[90u].x));
    float _1151 = fma(_1124, cbSceneParam._m0[91u].z, fma(_1123, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1122));
    float _1166 = _454 * 0.5;
    float _1167 = _455 * 0.5;
    float _1168 = _456 * 0.5;
    float _1169 = dot(vec4(_1166, _1167, _1168, 1.0), vec4(_1100, _1103, _1106, _1109));
    float _1172 = dot(vec4(_1166, _1167, _1168, 1.0), vec4(_1099, _1102, _1105, _1108));
    float _1175 = dot(vec4(_1166, _1167, _1168, 1.0), vec4(_1098, _1101, _1104, _1107));
    float _1209;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1182 = dot(vec4(_1166, _1167, _1168, 1.0), vec4(_788, _792, _795, _798));
        float _1186 = dot(vec4(_1166, _1167, _1168, 1.0), vec4(_790, _793, _796, _799));
        float _1190 = dot(vec4(_1166, _1167, _1168, 1.0), vec4(_791, _794, _797, _800));
        float _1197 = dot(vec4(cbModelParam._m0[39u]), vec4(_1166, _1167, _1168, 1.0));
        _1209 = dot(vec3(isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)), isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)), isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1197) ? 0.0 : (isnan(0.0) ? _1197 : max(0.0, _1197))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1209 = 1.0;
    }
    float _1220;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1211 = dot(vec4(cbModelParam._m0[40u]), vec4(_1166, _1167, _1168, 1.0));
        _1220 = dot(vec3(isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)), isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)), isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1211) ? 0.0 : (isnan(0.0) ? _1211 : max(0.0, _1211))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1220 = 1.0;
    }
    float _1224 = (_1220 * cbModelParam._m0[1u].x) + (_1209 * (1.0 - cbModelParam._m0[1u].x));
    float _1233 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1315;
    float _1317;
    float _1319;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1282 = fma(_486, cbModelParam._m0[13u].z, fma(_482, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _478)) + cbModelParam._m0[13u].w;
        float _1286 = fma(_486, cbModelParam._m0[14u].z, fma(_482, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _478)) + cbModelParam._m0[14u].w;
        float _1290 = fma(_486, cbModelParam._m0[15u].z, fma(_482, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _478)) + cbModelParam._m0[15u].w;
        float _1293 = fma(_456, cbModelParam._m0[13u].z, fma(_455, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _454));
        float _1296 = fma(_456, cbModelParam._m0[14u].z, fma(_455, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _454));
        float _1299 = fma(_456, cbModelParam._m0[15u].z, fma(_455, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _454));
        float _1325;
        if (_1293 > 0.0)
        {
            _1325 = abs((1.0 - _1282) / _1293);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1293 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1282 + 1.0) / _1293);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1325 = frontier_phi_16_14_ladder;
        }
        float _1552;
        if (_1296 > 0.0)
        {
            _1552 = abs((1.0 - _1286) / _1296);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1296 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1286 + 1.0) / _1296);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1552 = frontier_phi_25_21_ladder;
        }
        float _1744;
        if (_1299 > 0.0)
        {
            _1744 = abs((1.0 - _1290) / _1299);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1299 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1290 + 1.0) / _1299);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1744 = frontier_phi_37_32_ladder;
        }
        float _1746 = isnan(_1552) ? _1325 : (isnan(_1325) ? _1552 : min(_1325, _1552));
        float _1747 = isnan(_1744) ? _1746 : (isnan(_1746) ? _1744 : min(_1746, _1744));
        float _1751 = (_1747 * _1293) + _1282;
        float _1752 = (_1747 * _1296) + _1286;
        float _1753 = (_1747 * _1299) + _1290;
        float _1754 = _1747 * 9.9999997473787516355514526367188e-05;
        float _1756 = (-1.0) - _1754;
        float _1758 = _1754 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1753 > _1758) || ((_1753 < _1756) || ((_1752 > _1758) || ((_1752 < _1756) || ((_1751 < _1756) || (_1751 > _1758))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1850 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1753, cbModelParam._m0[9u].z, fma(_1752, cbModelParam._m0[9u].y, _1751 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1753, cbModelParam._m0[10u].z, fma(_1752, cbModelParam._m0[10u].y, _1751 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1753, cbModelParam._m0[11u].z, fma(_1752, cbModelParam._m0[11u].y, _1751 * cbModelParam._m0[11u].x))), _1233);
            frontier_phi_15_37_ladder = _1850.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1850.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1850.x * cbModelParam._m0[1u].y;
        }
        _1315 = frontier_phi_15_37_ladder_2;
        _1317 = frontier_phi_15_37_ladder_1;
        _1319 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1303 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_454, _455, _456), _1233);
        _1315 = _1303.x * cbModelParam._m0[1u].y;
        _1317 = _1303.y * cbModelParam._m0[1u].y;
        _1319 = _1303.z * cbModelParam._m0[1u].y;
    }
    float _1322 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1414;
    float _1416;
    float _1418;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1378 = fma(_486, cbModelParam._m0[21u].z, fma(_482, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _478)) + cbModelParam._m0[21u].w;
        float _1382 = fma(_486, cbModelParam._m0[22u].z, fma(_482, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _478)) + cbModelParam._m0[22u].w;
        float _1386 = fma(_486, cbModelParam._m0[23u].z, fma(_482, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _478)) + cbModelParam._m0[23u].w;
        float _1389 = fma(_456, cbModelParam._m0[21u].z, fma(_455, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _454));
        float _1392 = fma(_456, cbModelParam._m0[22u].z, fma(_455, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _454));
        float _1395 = fma(_456, cbModelParam._m0[23u].z, fma(_455, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _454));
        float _1557;
        if (_1389 > 0.0)
        {
            _1557 = abs((1.0 - _1378) / _1389);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1389 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1378 + 1.0) / _1389);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1557 = frontier_phi_27_23_ladder;
        }
        float _1771;
        if (_1392 > 0.0)
        {
            _1771 = abs((1.0 - _1382) / _1392);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1392 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1382 + 1.0) / _1392);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1771 = frontier_phi_39_34_ladder;
        }
        float _1922;
        if (_1395 > 0.0)
        {
            _1922 = abs((1.0 - _1386) / _1395);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1395 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1386 + 1.0) / _1395);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _1922 = frontier_phi_48_45_ladder;
        }
        float _1924 = isnan(_1771) ? _1557 : (isnan(_1557) ? _1771 : min(_1557, _1771));
        float _1925 = isnan(_1922) ? _1924 : (isnan(_1924) ? _1922 : min(_1924, _1922));
        float _1929 = (_1925 * _1389) + _1378;
        float _1930 = (_1925 * _1392) + _1382;
        float _1931 = (_1925 * _1395) + _1386;
        float _1932 = _1925 * 9.9999997473787516355514526367188e-05;
        float _1933 = (-1.0) - _1932;
        float _1935 = _1932 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1931 > _1935) || ((_1931 < _1933) || ((_1930 > _1935) || ((_1930 < _1933) || ((_1929 < _1933) || (_1929 > _1935))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2134 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1931, cbModelParam._m0[17u].z, fma(_1930, cbModelParam._m0[17u].y, _1929 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1931, cbModelParam._m0[18u].z, fma(_1930, cbModelParam._m0[18u].y, _1929 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1931, cbModelParam._m0[19u].z, fma(_1930, cbModelParam._m0[19u].y, _1929 * cbModelParam._m0[19u].x))), _1322);
            frontier_phi_24_48_ladder = _2134.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2134.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2134.x * cbModelParam._m0[1u].z;
        }
        _1414 = frontier_phi_24_48_ladder_2;
        _1416 = frontier_phi_24_48_ladder_1;
        _1418 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1398 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_454, _455, _456), _1322);
        _1414 = _1398.x * cbModelParam._m0[1u].z;
        _1416 = _1398.y * cbModelParam._m0[1u].z;
        _1418 = _1398.z * cbModelParam._m0[1u].z;
    }
    float _1430 = _446 * 0.01200000010430812835693359375;
    float _1432 = _1430 * ((cbModelParam._m0[1u].w * (_1414 - _1315)) + _1315);
    float _1433 = _1430 * ((cbModelParam._m0[1u].w * (_1416 - _1317)) + _1317);
    float _1434 = _1430 * ((cbModelParam._m0[1u].w * (_1418 - _1319)) + _1319);
    float _1437 = fma(_1434, cbSceneParam._m0[89u].z, fma(_1433, cbSceneParam._m0[89u].y, _1432 * cbSceneParam._m0[89u].x));
    float _1440 = fma(_1434, cbSceneParam._m0[90u].z, fma(_1433, cbSceneParam._m0[90u].y, _1432 * cbSceneParam._m0[90u].x));
    float _1443 = fma(_1434, cbSceneParam._m0[91u].z, fma(_1433, cbSceneParam._m0[91u].y, _1432 * cbSceneParam._m0[91u].x));
    vec4 _1451 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_379, _380));
    float _1453 = _1451.w;
    float _1465 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1453);
    float _1466 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1453);
    float _1467 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1453);
    uvec4 _1471 = floatBitsToUint(cbInstanceData._m0[_420 + 5u]);
    uint _1473 = _1471.x * 14u;
    uint _1474 = _1473 + 13u;
    float _1481 = _446 + (-1.0);
    float _1486 = (cbLight._m0[_1474].x * _1481) + 1.0;
    float _1487 = (cbLight._m0[_1474].y * _1481) + 1.0;
    float _1488 = (cbLight._m0[_1474].z * _1481) + 1.0;
    float _1489 = (cbLight._m0[_1474].w * _1481) + 1.0;
    uint _1490 = _1473 + 5u;
    float _1496 = isnan(1.0) ? _1487 : (isnan(_1487) ? 1.0 : min(_1487, 1.0));
    uint _1500 = _1473 + 4u;
    float _1510 = isnan(1.0) ? _1486 : (isnan(_1486) ? 1.0 : min(_1486, 1.0));
    uint _1514 = _1473 | 1u;
    float _1525 = dot(vec3(cbLight._m0[_1473].xyz), vec3(_351, _352, _353));
    float _1528 = dot(vec3(cbLight._m0[_1514].xyz), vec3(_351, _352, _353));
    float _3393 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
    float _3404 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
    float _1533 = (isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0))) * 0.3183098733425140380859375;
    float _1535 = (isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0))) * 0.3183098733425140380859375;
    float _1542 = ((cbLight._m0[_1490].x * _1496) * _1535) + (((cbLight._m0[_1500].x * _1465) * _1510) * _1533);
    float _1543 = ((_1496 * cbLight._m0[_1490].y) * _1535) + (((cbLight._m0[_1500].y * _1466) * _1510) * _1533);
    float _1544 = ((_1496 * cbLight._m0[_1490].z) * _1535) + (((cbLight._m0[_1500].z * _1467) * _1510) * _1533);
    uvec4 _1549 = floatBitsToUint(cbLight._m0[_1473 + 12u]);
    bool _1551 = _1549.x == 0u;
    float _1562;
    float _1564;
    float _1566;
    if (_1551)
    {
        _1562 = _1542;
        _1564 = _1543;
        _1566 = _1544;
    }
    else
    {
        uint _1570 = _1473 + 6u;
        float _1586 = (dot(vec3(cbLight._m0[_1473 + 2u].xyz), vec3(_351, _352, _353)) * 0.5) + 0.5;
        float _1587 = _1586 * _1586;
        float _3415 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
        float _1589 = isnan(1.0) ? _1488 : (isnan(_1488) ? 1.0 : min(_1488, 1.0));
        _1562 = (((cbLight._m0[_1570].x * 0.3183098733425140380859375) * _1588) * _1589) + _1542;
        _1564 = (((cbLight._m0[_1570].y * 0.3183098733425140380859375) * _1588) * _1589) + _1543;
        _1566 = (((cbLight._m0[_1570].z * 0.3183098733425140380859375) * _1588) * _1589) + _1544;
    }
    bool _1569 = _1549.y == 0u;
    float _1607;
    float _1609;
    float _1611;
    if (_1569)
    {
        _1607 = _1562;
        _1609 = _1564;
        _1611 = _1566;
    }
    else
    {
        uint _1715 = _1473 + 7u;
        float _1731 = (dot(vec3(cbLight._m0[_1473 + 3u].xyz), vec3(_351, _352, _353)) * 0.5) + 0.5;
        float _1732 = _1731 * _1731;
        float _3431 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1733 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
        float _1734 = isnan(1.0) ? _1489 : (isnan(_1489) ? 1.0 : min(_1489, 1.0));
        _1607 = (((cbLight._m0[_1715].x * 0.3183098733425140380859375) * _1733) * _1734) + _1562;
        _1609 = (((cbLight._m0[_1715].y * 0.3183098733425140380859375) * _1733) * _1734) + _1564;
        _1611 = (((cbLight._m0[_1715].z * 0.3183098733425140380859375) * _1733) * _1734) + _1566;
    }
    uint _1613 = _1473 + 8u;
    float _1619 = cbLight._m0[_1473].x + _327;
    float _1620 = cbLight._m0[_1473].y + _328;
    float _1621 = cbLight._m0[_1473].z + _329;
    float _1625 = inversesqrt(dot(vec3(_1619, _1620, _1621), vec3(_1619, _1620, _1621)));
    float _1629 = dot(vec3(_351, _352, _353), vec3(cbLight._m0[_1473].xyz));
    float _3447 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
    float _1632 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
    float _3458 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _1633 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
    float _1634 = dot(vec3(cbLight._m0[_1473].xyz), vec3(_1619 * _1625, _1620 * _1625, _1621 * _1625));
    float _3469 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
    float _1645 = (exp2(log2(1.0 - (isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1651 = (0.5 / ((_1632 + 9.9999999392252902907785028219223e-09) + _1633)) * _1632;
    float _3480 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
    float _1653 = (isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0))) * 0.31831014156341552734375;
    uint _1667 = _1473 + 9u;
    float _1673 = cbLight._m0[_1514].x + _327;
    float _1674 = cbLight._m0[_1514].y + _328;
    float _1675 = cbLight._m0[_1514].z + _329;
    float _1679 = inversesqrt(dot(vec3(_1673, _1674, _1675), vec3(_1673, _1674, _1675)));
    float _1683 = dot(vec3(_351, _352, _353), vec3(cbLight._m0[_1514].xyz));
    float _3491 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
    float _1686 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
    float _1687 = dot(vec3(cbLight._m0[_1514].xyz), vec3(_1673 * _1679, _1674 * _1679, _1675 * _1679));
    float _3502 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
    float _1696 = (exp2(log2(1.0 - (isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1700 = (0.5 / ((_1686 + 9.9999999392252902907785028219223e-09) + _1633)) * _1686;
    float _3513 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
    float _1702 = (isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))) * 0.31831014156341552734375;
    float _1712 = (((_1696 * cbLight._m0[_1667].x) * _1702) * _1496) + ((((cbLight._m0[_1613].x * _1465) * _1645) * _1653) * _1510);
    float _1713 = (((_1696 * cbLight._m0[_1667].y) * _1702) * _1496) + ((((cbLight._m0[_1613].y * _1466) * _1645) * _1653) * _1510);
    float _1714 = (((_1696 * cbLight._m0[_1667].z) * _1702) * _1496) + ((((cbLight._m0[_1613].z * _1467) * _1645) * _1653) * _1510);
    float _1776;
    float _1778;
    float _1780;
    if (_1551)
    {
        _1776 = _1712;
        _1778 = _1713;
        _1780 = _1714;
    }
    else
    {
        uint _1782 = _1473 + 10u;
        uint _1788 = _1473 + 2u;
        float _1794 = cbLight._m0[_1788].x + _327;
        float _1795 = cbLight._m0[_1788].y + _328;
        float _1796 = cbLight._m0[_1788].z + _329;
        float _1800 = inversesqrt(dot(vec3(_1794, _1795, _1796), vec3(_1794, _1795, _1796)));
        float _1804 = dot(vec3(_351, _352, _353), vec3(cbLight._m0[_1788].xyz));
        float _3524 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1807 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _1808 = dot(vec3(cbLight._m0[_1788].xyz), vec3(_1794 * _1800, _1795 * _1800, _1796 * _1800));
        float _3535 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1817 = (exp2(log2(1.0 - (isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1821 = (0.5 / ((_1807 + 9.9999999392252902907785028219223e-09) + _1633)) * _1807;
        float _3546 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1823 = (isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) * 0.31831014156341552734375;
        float _1824 = isnan(1.0) ? _1488 : (isnan(_1488) ? 1.0 : min(_1488, 1.0));
        _1776 = (((_1817 * cbLight._m0[_1782].x) * _1823) * _1824) + _1712;
        _1778 = (((_1817 * cbLight._m0[_1782].y) * _1823) * _1824) + _1713;
        _1780 = (((_1817 * cbLight._m0[_1782].z) * _1823) * _1824) + _1714;
    }
    float _1859;
    float _1861;
    float _1863;
    if (_1569)
    {
        _1859 = _1776;
        _1861 = _1778;
        _1863 = _1780;
    }
    else
    {
        uint _1870 = _1473 + 11u;
        uint _1876 = _1473 + 3u;
        float _1882 = cbLight._m0[_1876].x + _327;
        float _1883 = cbLight._m0[_1876].y + _328;
        float _1884 = cbLight._m0[_1876].z + _329;
        float _1888 = inversesqrt(dot(vec3(_1882, _1883, _1884), vec3(_1882, _1883, _1884)));
        float _1892 = dot(vec3(_351, _352, _353), vec3(cbLight._m0[_1876].xyz));
        float _3562 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
        float _1895 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _1896 = dot(vec3(cbLight._m0[_1876].xyz), vec3(_1882 * _1888, _1883 * _1888, _1884 * _1888));
        float _3573 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1905 = (exp2(log2(1.0 - (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1909 = (0.5 / ((_1895 + 9.9999999392252902907785028219223e-09) + _1633)) * _1895;
        float _3584 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
        float _1911 = (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) * 0.31831014156341552734375;
        float _1912 = isnan(1.0) ? _1489 : (isnan(_1489) ? 1.0 : min(_1489, 1.0));
        _1859 = (((_1905 * cbLight._m0[_1870].x) * _1911) * _1912) + _1776;
        _1861 = (((_1905 * cbLight._m0[_1870].y) * _1911) * _1912) + _1778;
        _1863 = (((_1905 * cbLight._m0[_1870].z) * _1911) * _1912) + _1780;
    }
    float _2046;
    float _2048;
    float _2050;
    float _2052;
    float _2054;
    float _2056;
    if (_1471.y == 0u)
    {
        float _1987 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1988 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1987;
        float _1989 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1987;
        float _1990 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1987;
        uvec4 _2002 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2003 = _2002.x;
        uint _2014 = uint((float(_2002.y) * floor(float(uint(cbSceneParam._m0[85u].y * _380) / _2003))) + floor(float(uint(cbSceneParam._m0[85u].x * _379) / _2003)));
        float _2024 = (log2(_1990 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2025 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
        uint _2028 = uint(isnan(14.0) ? _2025 : (isnan(_2025) ? 14.0 : min(_2025, 14.0)));
        uvec4 _2033 = texelFetch(g_lightClusterGridBuffer, int(((_2028 << 2u) + (_2014 << 6u)) >> 2u));
        uint _2034 = _2033.x;
        uint _2035 = _2002.z;
        float _2139;
        float _2141;
        float _2143;
        float _2145;
        float _2147;
        float _2149;
        if (((((1u << ((_2035 >> 4u) & 15u)) + 4294967295u) & _2034) == 0u) || ((_2035 & 240u) == 0u))
        {
            _2139 = 0.0;
            _2141 = 0.0;
            _2143 = 0.0;
            _2145 = 0.0;
            _2147 = 0.0;
            _2149 = 0.0;
        }
        else
        {
            float _2140;
            float _2142;
            float _2144;
            float _2146;
            float _2148;
            float _2150;
            float _2281 = 0.0;
            float _2282 = 0.0;
            float _2283 = 0.0;
            float _2284 = 0.0;
            float _2285 = 0.0;
            float _2286 = 0.0;
            uint _2287 = 0u;
            uint _2296;
            bool _2297;
            for (;;)
            {
                _2296 = texelFetch(g_lightClassification, int((((_2028 << 5u) + (_2014 << 9u)) + (_2287 << 2u)) >> 2u)).x;
                _2297 = _2296 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2297)
                {
                    frontier_phi_63_pred = _2286;
                    frontier_phi_63_pred_1 = _2285;
                    frontier_phi_63_pred_2 = _2284;
                    frontier_phi_63_pred_3 = _2283;
                    frontier_phi_63_pred_4 = _2282;
                    frontier_phi_63_pred_5 = _2281;
                }
                else
                {
                    float _2405;
                    float _2406;
                    float _2407;
                    float _2408;
                    float _2409;
                    float _2410;
                    uint _2411;
                    _2405 = _2281;
                    _2406 = _2282;
                    _2407 = _2283;
                    _2408 = _2284;
                    _2409 = _2285;
                    _2410 = _2286;
                    _2411 = _2296;
                    float _2337;
                    float _2338;
                    float _2339;
                    float _2340;
                    float _2341;
                    float _2342;
                    for (;;)
                    {
                        uint _2415 = uint(findLSB(_2411)) + (_2287 << 5u);
                        uint _2412 = (_2411 + 4294967295u) & _2411;
                        uint _2417 = _2415 * 48u;
                        vec4 _2431 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2417)).x, texelFetch(g_PointLightRenderingBuffer, int(_2417 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2417 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2417 + 3u)).x));
                        uint _2437 = (_2415 * 48u) + 4u;
                        vec4 _2450 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2437)).x, texelFetch(g_PointLightRenderingBuffer, int(_2437 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2437 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2437 + 3u)).x));
                        uint _2456 = (_2415 * 48u) + 8u;
                        vec3 _2467 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2456)).x, texelFetch(g_PointLightRenderingBuffer, int(_2456 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2456 + 2u)).x));
                        float _2471 = _2431.x - _1988;
                        float _2472 = _2431.y - _1989;
                        float _2473 = _2431.z - _1990;
                        float _2474 = dot(vec3(_2471, _2472, _2473), vec3(_2471, _2472, _2473));
                        float _2477 = inversesqrt(_2474);
                        float _2486 = 1.0 - (_2474 * _2431.w);
                        float _3610 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
                        float _2487 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
                        float _2488 = sqrt(_2474) * _2450.w;
                        float _2491 = 1.39999997615814208984375 / (_2488 + 1.39999997615814208984375);
                        float _2492 = _2491 * _2491;
                        float _2495 = ((1.0 - _2492) * dot(vec3(_401, _404, _407), vec3(_2477 * _2471, _2477 * _2472, _2477 * _2473))) + _2492;
                        float _2498 = _2488 * _2488;
                        float _2502 = ((isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0))) * _2487) / ((_2498 * 0.699999988079071044921875) + 1.0);
                        float _2506 = (-0.0) - _1988;
                        float _2507 = (-0.0) - _1989;
                        float _2508 = (-0.0) - _1990;
                        float _2512 = inversesqrt(dot(vec3(_2506, _2507, _2508), vec3(_2506, _2507, _2508)));
                        float _2516 = dot(vec3(_401, _404, _407), vec3(_2512 * _2506, _2512 * _2507, _2512 * _2508));
                        float _3626 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
                        float _3637 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
                        float _2520 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
                        float _2524 = (0.5 / (((isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) + 9.9999999392252902907785028219223e-09) + _2520)) * _2520;
                        float _3648 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
                        float _2533 = (((isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))) * 3.1415927410125732421875) / ((_2498 * 2.1991131305694580078125) + 3.141590118408203125)) * _2487;
                        _2340 = (_2502 * _2450.x) + _2408;
                        _2341 = (_2502 * _2450.y) + _2409;
                        _2342 = (_2502 * _2450.z) + _2410;
                        _2337 = (_2533 * _2467.x) + _2405;
                        _2338 = (_2533 * _2467.y) + _2406;
                        _2339 = (_2533 * _2467.z) + _2407;
                        if (_2412 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2405 = _2337;
                            _2406 = _2338;
                            _2407 = _2339;
                            _2408 = _2340;
                            _2409 = _2341;
                            _2410 = _2342;
                            _2411 = _2412;
                        }
                    }
                    frontier_phi_63_pred = _2342;
                    frontier_phi_63_pred_1 = _2341;
                    frontier_phi_63_pred_2 = _2340;
                    frontier_phi_63_pred_3 = _2339;
                    frontier_phi_63_pred_4 = _2338;
                    frontier_phi_63_pred_5 = _2337;
                }
                _2150 = frontier_phi_63_pred;
                _2148 = frontier_phi_63_pred_1;
                _2146 = frontier_phi_63_pred_2;
                _2144 = frontier_phi_63_pred_3;
                _2142 = frontier_phi_63_pred_4;
                _2140 = frontier_phi_63_pred_5;
                uint _2288 = _2287 + 1u;
                if (_2288 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2281 = _2140;
                    _2282 = _2142;
                    _2283 = _2144;
                    _2284 = _2146;
                    _2285 = _2148;
                    _2286 = _2150;
                    _2287 = _2288;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2139 = _2140;
            _2141 = _2142;
            _2143 = _2144;
            _2145 = _2146;
            _2147 = _2148;
            _2149 = _2150;
        }
        uvec4 _2153 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2154 = _2153.z;
        uint _2156 = (_2154 >> 8u) & 15u;
        float _2252;
        float _2254;
        float _2256;
        float _2258;
        float _2260;
        float _2262;
        if (((4294967295u << _2156) & _2034) == 0u)
        {
            _2252 = _2139;
            _2254 = _2141;
            _2256 = _2143;
            _2258 = _2145;
            _2260 = _2147;
            _2262 = _2149;
        }
        else
        {
            float _2277 = inversesqrt(dot(vec3(_1988, _1989, _1990), vec3(_1988, _1989, _1990)));
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2156 < ((_2154 >> 12u) & 15u))
            {
                float _2253;
                float _2255;
                float _2257;
                float _2259;
                float _2261;
                float _2263;
                float _2388 = _2139;
                float _2389 = _2141;
                float _2390 = _2143;
                float _2391 = _2145;
                float _2392 = _2147;
                float _2393 = _2149;
                uint _2394 = _2156;
                uint _2403;
                bool _2404;
                for (;;)
                {
                    _2403 = texelFetch(g_lightClassification, int((((_2028 << 5u) + (_2014 << 9u)) + (_2394 << 2u)) >> 2u)).x;
                    _2404 = _2403 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2404)
                    {
                        frontier_phi_69_pred = _2393;
                        frontier_phi_69_pred_1 = _2392;
                        frontier_phi_69_pred_2 = _2391;
                        frontier_phi_69_pred_3 = _2390;
                        frontier_phi_69_pred_4 = _2389;
                        frontier_phi_69_pred_5 = _2388;
                    }
                    else
                    {
                        float _2538;
                        float _2539;
                        float _2540;
                        float _2541;
                        float _2542;
                        float _2543;
                        float _2790;
                        float _2791;
                        float _2792;
                        float _2793;
                        float _2794;
                        float _2795;
                        float _2551 = _2388;
                        float _2552 = _2389;
                        float _2553 = _2390;
                        float _2554 = _2391;
                        float _2555 = _2392;
                        float _2556 = _2393;
                        uint _2557 = _2403;
                        uint _2558;
                        vec4 _2583;
                        float _2584;
                        vec4 _2599;
                        vec3 _2611;
                        vec4 _2627;
                        vec4 _2643;
                        float _2690;
                        bool _2691;
                        for (;;)
                        {
                            uint _2568 = ((_2394 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2557));
                            _2558 = (_2557 + 4294967295u) & _2557;
                            uint _2570 = _2568 * 40u;
                            _2583 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2570)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2570 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2570 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2570 + 3u)).x));
                            _2584 = _2583.w;
                            uint _2586 = (_2568 * 40u) + 4u;
                            _2599 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2586)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2586 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2586 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2586 + 3u)).x));
                            uint _2601 = (_2568 * 40u) + 8u;
                            _2611 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2601)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2601 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2601 + 2u)).x));
                            uint _2614 = (_2568 * 40u) + 16u;
                            _2627 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2614)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2614 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2614 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2614 + 3u)).x));
                            uint _2630 = (_2568 * 40u) + 20u;
                            _2643 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2630 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2630 + 3u)).x));
                            uint _2646 = (_2568 * 40u) + 24u;
                            vec4 _2659 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2646 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2646 + 3u)).x));
                            uint _2665 = (_2568 * 40u) + 28u;
                            vec4 _2678 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2665)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2665 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2665 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2665 + 3u)).x));
                            _2690 = fma(_1990, _2678.z, fma(_1989, _2678.y, _2678.x * _1988)) + _2678.w;
                            _2691 = !((fma(_1990, _2659.z, fma(_1989, _2659.y, _2659.x * _1988)) + _2659.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2691)
                            {
                                float _2718 = _2583.x - _1988;
                                float _2719 = _2583.y - _1989;
                                float _2720 = _2583.z - _1990;
                                float _2721 = dot(vec3(_2718, _2719, _2720), vec3(_2718, _2719, _2720));
                                float _2724 = inversesqrt(_2721);
                                float _2725 = _2724 * _2718;
                                float _2726 = _2724 * _2719;
                                float _2727 = _2724 * _2720;
                                float _2731 = 1.0 - (_2721 / (_2584 * _2584));
                                float _3659 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
                                float _2732 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
                                float _2736 = sqrt(_2721) * _2599.w;
                                float _2738 = 1.39999997615814208984375 / (_2736 + 1.39999997615814208984375);
                                float _2739 = _2738 * _2738;
                                float _2740 = 1.0 - _2739;
                                float _2742 = (_2740 * dot(vec3(_2725, _2726, _2727), vec3(_401, _404, _407))) + _2739;
                                float _2745 = _2736 * _2736;
                                float _2749 = (fma(_1990, _2627.z, fma(_1989, _2627.y, _2627.x * _1988)) + _2627.w) / _2690;
                                float _2750 = (fma(_1990, _2643.z, fma(_1989, _2643.y, _2643.x * _1988)) + _2643.w) / _2690;
                                float _2754 = 1.0 - dot(vec2(_2749, _2750), vec2(_2749, _2750));
                                float _3675 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
                                float _2755 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
                                float _2756 = _2755 * (((isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0))) * _2732) / ((_2745 * 0.699999988079071044921875) + 1.0));
                                float _2766 = dot(vec3(_401, _404, _407), vec3((-0.0) - (_1988 * _2277), (-0.0) - (_1989 * _2277), (-0.0) - (_1990 * _2277)));
                                float _3686 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
                                float _2774 = (_2740 * dot(vec3(_401, _404, _407), vec3(_2725, _2726, _2727))) + _2739;
                                float _3697 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
                                float _2775 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
                                float _2779 = (0.5 / (((isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) + 9.9999999392252902907785028219223e-09) + _2775)) * _2775;
                                float _3708 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
                                float _2786 = (_2755 * _2732) * (((isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * 3.1415927410125732421875) / ((_2745 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_75_pred = _2756 * _2599.z;
                                frontier_phi_75_pred_1 = _2756 * _2599.y;
                                frontier_phi_75_pred_2 = _2756 * _2599.x;
                                frontier_phi_75_pred_3 = _2786 * _2611.z;
                                frontier_phi_75_pred_4 = _2786 * _2611.y;
                                frontier_phi_75_pred_5 = _2786 * _2611.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _2795 = frontier_phi_75_pred;
                            _2794 = frontier_phi_75_pred_1;
                            _2793 = frontier_phi_75_pred_2;
                            _2792 = frontier_phi_75_pred_3;
                            _2791 = frontier_phi_75_pred_4;
                            _2790 = frontier_phi_75_pred_5;
                            _2541 = _2793 + _2554;
                            _2542 = _2794 + _2555;
                            _2543 = _2795 + _2556;
                            _2538 = _2790 + _2551;
                            _2539 = _2791 + _2552;
                            _2540 = _2792 + _2553;
                            if (_2558 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2551 = _2538;
                                _2552 = _2539;
                                _2553 = _2540;
                                _2554 = _2541;
                                _2555 = _2542;
                                _2556 = _2543;
                                _2557 = _2558;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2543;
                        frontier_phi_69_pred_1 = _2542;
                        frontier_phi_69_pred_2 = _2541;
                        frontier_phi_69_pred_3 = _2540;
                        frontier_phi_69_pred_4 = _2539;
                        frontier_phi_69_pred_5 = _2538;
                    }
                    _2263 = frontier_phi_69_pred;
                    _2261 = frontier_phi_69_pred_1;
                    _2259 = frontier_phi_69_pred_2;
                    _2257 = frontier_phi_69_pred_3;
                    _2255 = frontier_phi_69_pred_4;
                    _2253 = frontier_phi_69_pred_5;
                    uint _2395 = _2394 + 1u;
                    if (_2395 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2388 = _2253;
                        _2389 = _2255;
                        _2390 = _2257;
                        _2391 = _2259;
                        _2392 = _2261;
                        _2393 = _2263;
                        _2394 = _2395;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2263;
                frontier_phi_57_58_ladder_1 = _2261;
                frontier_phi_57_58_ladder_2 = _2259;
                frontier_phi_57_58_ladder_3 = _2257;
                frontier_phi_57_58_ladder_4 = _2255;
                frontier_phi_57_58_ladder_5 = _2253;
            }
            else
            {
                frontier_phi_57_58_ladder = _2149;
                frontier_phi_57_58_ladder_1 = _2147;
                frontier_phi_57_58_ladder_2 = _2145;
                frontier_phi_57_58_ladder_3 = _2143;
                frontier_phi_57_58_ladder_4 = _2141;
                frontier_phi_57_58_ladder_5 = _2139;
            }
            _2252 = frontier_phi_57_58_ladder_5;
            _2254 = frontier_phi_57_58_ladder_4;
            _2256 = frontier_phi_57_58_ladder_3;
            _2258 = frontier_phi_57_58_ladder_2;
            _2260 = frontier_phi_57_58_ladder_1;
            _2262 = frontier_phi_57_58_ladder;
        }
        float _2267 = isnan(1.0) ? _446 : (isnan(_446) ? 1.0 : min(_446, 1.0));
        _2046 = (_2267 * _2258) + _1607;
        _2048 = (_2267 * _2260) + _1609;
        _2050 = (_2267 * _2262) + _1611;
        _2052 = ((_2252 * 0.039999999105930328369140625) * _2267) + _1859;
        _2054 = ((_2254 * 0.039999999105930328369140625) * _2267) + _1861;
        _2056 = ((_2256 * 0.039999999105930328369140625) * _2267) + _1863;
    }
    else
    {
        _2046 = _1607;
        _2048 = _1609;
        _2050 = _1611;
        _2052 = _1859;
        _2054 = _1861;
        _2056 = _1863;
    }
    float _3724 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _3735 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _3746 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _3757 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _2074 = ((isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_2046 + ((isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0))) * _446))) + ((_2052 + ((isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0))) * _1224)) * cbPerFrame._m0[3u].x);
    float _2075 = ((isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (_2048 + ((isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0))) * _446))) + ((_2054 + ((isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))) * _1224)) * cbPerFrame._m0[3u].x);
    float _2076 = ((isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * (_2050 + ((isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0))) * _446))) + ((_2056 + ((isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))) * _1224)) * cbPerFrame._m0[3u].x);
    float _2084 = cbInstanceData._m0[_420 + 6u].w * (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0)));
    float _2089 = _379 / cbSceneParam._m0[86u].x;
    float _2090 = _380 / cbSceneParam._m0[86u].y;
    vec4 _2104 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2089, _2090, (log2((isnan(cbSceneParam._m0[77u].w) ? _373 : (isnan(_373) ? cbSceneParam._m0[77u].w : min(_373, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2106 = _2104.x;
    float _2107 = _2104.y;
    float _2108 = _2104.z;
    float _2109 = _2104.w;
    float _2201;
    float _2203;
    float _2205;
    float _2207;
    if (_373 > cbSceneParam._m0[78u].w)
    {
        float _2164 = isnan(_373) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _373 : min(cbSceneParam._m0[80u].w, _373));
        float _2165 = _2164 / _373;
        float _2176 = _2165 * _261;
        float _2177 = _262 * _2165;
        float _2178 = (-0.0) - _2177;
        float _2179 = _2165 * _263;
        float _2181 = (cbSceneParam._m0[77u].w * _2178) / _2164;
        float _2182 = _2181 + cbSceneParam._m0[79u].w;
        float _2183 = cbSceneParam._m0[79u].w - _2177;
        float _2189 = sqrt(((_2176 * _2176) + (_2177 * _2177)) + (_2179 * _2179));
        float _2192 = (1.0 - (cbSceneParam._m0[77u].w / _2164)) * _2189;
        float _2197 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2199 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2350;
        if (abs((_2178 - _2181) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2350 = ((((_2182 > 0.0) ? exp2(_2197 * _2182) : (2.0 - exp2(_2199 * _2182))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2192;
        }
        else
        {
            float _2310 = 1.0 / cbSceneParam._m0[80u].x;
            float _2311 = isnan(_2183) ? _2182 : (isnan(_2182) ? _2183 : max(_2182, _2183));
            float _2312 = isnan(_2183) ? _2182 : (isnan(_2182) ? _2183 : min(_2182, _2183));
            float _2321 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : min(_2311, 0.0));
            float _2322 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : min(_2312, 0.0));
            _2350 = ((abs(_2189 / _2178) * cbSceneParam._m0[80u].y) * ((((_2321 - _2322) * 2.0) - ((exp2(_2197 * (isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0)))) - exp2(_2197 * (isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0))))) * _2310)) - ((exp2(_2199 * _2321) - exp2(_2199 * _2322)) * _2310))) + (_2192 * cbSceneParam._m0[80u].z);
        }
        vec4 _2352 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2089, _2090, 1.0), 0.0);
        float _2361 = exp2((_2350 * (-1.44269502162933349609375)) * (1.0 - _2352.w));
        float _2362 = log2(_2361);
        float _2378 = log2(_2109);
        _2201 = (exp2(_2378 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2362 * cbSceneParam._m0[78u].x)) * _2352.x) / cbSceneParam._m0[78u].x)) + _2106;
        _2203 = (exp2(_2378 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2362 * cbSceneParam._m0[78u].y)) * _2352.y) / cbSceneParam._m0[78u].y)) + _2107;
        _2205 = (exp2(_2378 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2362 * cbSceneParam._m0[78u].z)) * _2352.z) / cbSceneParam._m0[78u].z)) + _2108;
        _2207 = _2361 * _2109;
    }
    else
    {
        _2201 = _2106;
        _2203 = _2107;
        _2205 = _2108;
        _2207 = _2109;
    }
    float _2219 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2220 = _2219 == 3.0;
    float _2222 = log2(_2207);
    float _2229 = exp2(_2222 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0)));
    float _2230 = exp2(_2222 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0)));
    float _2231 = exp2(_2222 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0)));
    float _2240 = (_2219 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2240 * (_2220 ? _2229 : (_2229 + (cbSceneParam._m0[72u].w * _2201)));
    SV_Target.y = _2240 * (_2220 ? _2230 : (_2230 + (cbSceneParam._m0[72u].w * _2203)));
    SV_Target.z = _2240 * (_2220 ? _2231 : (_2231 + (cbSceneParam._m0[72u].w * _2205)));
    SV_Target.w = _2084;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2084;
}


