#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[18];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D MenuMiniMapColorSet_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _836;
float _3288;
float _3289;
float _3290;
float _3291;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _211;
    float _212;
    float _213;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
    }
    else
    {
        _211 = _197;
        _212 = _198;
        _213 = _199;
    }
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    vec4 _288 = texture(sampler2D(MenuMiniMapColorSet_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _296 = (_288.x * 2.0) + (-1.0);
    float _298 = (_288.y * 2.0) + (-1.0);
    float _299 = dot(vec2(_296, _298), vec2(_296, _298));
    float _3300 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _305 = sqrt(1.0 - (isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0))));
    float _308 = fma(_305, _211, fma(_298, _204, _296 * _190));
    float _311 = fma(_305, _212, fma(_298, _205, _296 * _191));
    float _314 = fma(_305, _213, fma(_298, _206, _296 * _192));
    float _318 = inversesqrt(dot(vec3(_308, _311, _314), vec3(_308, _311, _314)));
    float _319 = _318 * _308;
    float _320 = _318 * _311;
    float _321 = _318 * _314;
    float _325 = inversesqrt(dot(vec3(_319, _320, _321), vec3(_319, _320, _321)));
    float _332 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _333 = _332 * _267;
    float _334 = _332 * _268;
    float _335 = _332 * _269;
    float _342 = cbMtdParam._m0[9u].x - dot(vec3(_333, _334, _335), vec3(_325 * _319, _325 * _320, _325 * _321));
    float _3311 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _343 = isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0));
    float _346 = fma(_321, _211, fma(_320, _204, _319 * _190));
    float _349 = fma(_321, _212, fma(_320, _205, _319 * _191));
    float _352 = fma(_321, _213, fma(_320, _206, _319 * _192));
    float _356 = inversesqrt(dot(vec3(_346, _349, _352), vec3(_346, _349, _352)));
    float _357 = _356 * _346;
    float _358 = _356 * _349;
    float _359 = _356 * _352;
    float _3322 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _360 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
    float _3333 = isnan(0.0) ? cbMatDynParam._m0[17u].x : (isnan(cbMatDynParam._m0[17u].x) ? 0.0 : max(cbMatDynParam._m0[17u].x, 0.0));
    float _3344 = isnan(0.0) ? cbMatDynParam._m0[17u].y : (isnan(cbMatDynParam._m0[17u].y) ? 0.0 : max(cbMatDynParam._m0[17u].y, 0.0));
    float _3355 = isnan(0.0) ? cbMatDynParam._m0[17u].z : (isnan(cbMatDynParam._m0[17u].z) ? 0.0 : max(cbMatDynParam._m0[17u].z, 0.0));
    float _379 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _384 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _386 = _384.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _515 = sqrt(((_267 * _267) + (_268 * _268)) + (_269 * _269));
        float _521 = (cbMatDynParam._m0[5u].x * _515) + cbMatDynParam._m0[5u].y;
        float _3366 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
        float _522 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
        float _526 = (cbMatDynParam._m0[5u].z * _515) + cbMatDynParam._m0[5u].w;
        float _3377 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0))) - _522)) + _522) < ((_386 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _398 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _399 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _419 = fma(_359, cbSceneParam._m0[5u].z, fma(_358, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _357));
    float _422 = fma(_359, cbSceneParam._m0[6u].z, fma(_358, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _357));
    float _425 = fma(_359, cbSceneParam._m0[7u].z, fma(_358, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _357));
    uint _438 = uint(roundEven(NORMAL.w)) * 13u;
    uint _440 = _438 + 9u;
    uint _441 = _440 + uint(cbMatDynParam._m0[0u].w);
    float _447 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0)))) * cbInstanceData._m0[_441].x;
    float _448 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0)))) * cbInstanceData._m0[_441].y;
    float _449 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0)))) * cbInstanceData._m0[_441].z;
    float _3388 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _450 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
    float _3399 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _451 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
    float _3410 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _452 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
    vec4 _461 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _398, cbSceneParam._m0[86u].y * _399));
    float _464 = _461.x * TEXCOORD.z;
    float _465 = dot(vec3(_357, _358, _359), vec3(_333, _334, _335));
    float _468 = _465 * 2.0;
    float _472 = (_468 * _357) - _333;
    float _473 = (_468 * _358) - _334;
    float _474 = (_468 * _359) - _335;
    float _496 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _500 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _504 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _835;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _560 = fma(_504, cbModelParam._m0[26u].z, fma(_500, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _496));
        float _564 = fma(_504, cbModelParam._m0[27u].z, fma(_500, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _496));
        float _568 = fma(_504, cbModelParam._m0[28u].z, fma(_500, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _496));
        float _593 = _496 + _357;
        float _594 = _500 + _358;
        float _595 = _504 + _359;
        float _605 = fma(_595, cbModelParam._m0[26u].z, fma(_594, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _593)) - _560;
        float _606 = fma(_595, cbModelParam._m0[27u].z, fma(_594, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _593)) - _564;
        float _607 = fma(_595, cbModelParam._m0[28u].z, fma(_594, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _593)) - _568;
        float _611 = inversesqrt(dot(vec3(_605, _606, _607), vec3(_605, _606, _607)));
        float _624 = ((_611 * _605) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_560 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _625 = ((_611 * _606) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_564 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _626 = ((_611 * _607) / cbModelParam._m0[34u].z) + ((((((_568 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _629 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_624, _625, _626), 0.0);
        vec4 _636 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_624, _625, _626), 0.0);
        vec4 _643 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_624, _625, _626), 0.0);
        vec4 _650 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_624, _625, _626), 0.0);
        float _663 = exp2((_629.w + (-0.5)) * 20.0) * 2.0;
        float _664 = _663 * (_629.x + (-0.5));
        float _665 = _663 * (_629.y + (-0.5));
        float _666 = _663 * (_629.z + (-0.5));
        float _673 = exp2((_636.w + (-0.5)) * 20.0) * 2.0;
        float _674 = _673 * (_636.x + (-0.5));
        float _675 = _673 * (_636.y + (-0.5));
        float _676 = _673 * (_636.z + (-0.5));
        float _683 = exp2((_643.w + (-0.5)) * 20.0) * 2.0;
        float _684 = _683 * (_643.x + (-0.5));
        float _685 = _683 * (_643.y + (-0.5));
        float _686 = _683 * (_643.z + (-0.5));
        float _693 = exp2((_650.w + (-0.5)) * 20.0) * 2.0;
        float _694 = _693 * (_650.x + (-0.5));
        float _695 = _693 * (_650.y + (-0.5));
        float _696 = _693 * (_650.z + (-0.5));
        float _697 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _698 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
        float _699 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
        float _700 = _664 * 0.5;
        float _701 = _674 * 0.5;
        float _702 = _684 * 0.5;
        float _703 = dot(vec3(_700, _701, _702), vec3(_700, _701, _702));
        float _708 = (_703 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_703);
        float _717 = (dot(vec3(_357, _358, _359), vec3(_708 * _700, _708 * _701, _708 * _702)) + 1.0) * 0.5;
        float _3436 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _727 = sqrt(((_701 * _701) + (_700 * _700)) + (_702 * _702)) / (_697 + 9.9999997473787516355514526367188e-06);
        float _3447 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _728 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
        float _729 = _728 * 2.0;
        float _733 = (1.0 - _728) / (_728 + 1.0);
        float _3458 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _734 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _743 = ((((1.0 - _734) * (_729 + 2.0)) * exp2(log2(isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))) * (_729 + 1.0))) + _734) * _697;
        float _744 = _665 * 0.5;
        float _745 = _675 * 0.5;
        float _746 = _685 * 0.5;
        float _747 = dot(vec3(_744, _745, _746), vec3(_744, _745, _746));
        float _752 = (_747 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_747);
        float _760 = (dot(vec3(_357, _358, _359), vec3(_752 * _744, _752 * _745, _752 * _746)) + 1.0) * 0.5;
        float _3469 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _769 = sqrt(((_745 * _745) + (_744 * _744)) + (_746 * _746)) / (_698 + 9.9999997473787516355514526367188e-06);
        float _3480 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _770 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
        float _771 = _770 * 2.0;
        float _775 = (1.0 - _770) / (_770 + 1.0);
        float _3491 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _776 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _785 = ((((1.0 - _776) * (_771 + 2.0)) * exp2(log2(isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0))) * (_771 + 1.0))) + _776) * _698;
        float _786 = _666 * 0.5;
        float _787 = _676 * 0.5;
        float _788 = _686 * 0.5;
        float _789 = dot(vec3(_786, _787, _788), vec3(_786, _787, _788));
        float _794 = (_789 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_789);
        float _802 = (dot(vec3(_357, _358, _359), vec3(_794 * _786, _794 * _787, _794 * _788)) + 1.0) * 0.5;
        float _3502 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _811 = sqrt(((_787 * _787) + (_786 * _786)) + (_788 * _788)) / (_699 + 9.9999997473787516355514526367188e-06);
        float _3513 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _812 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
        float _813 = _812 * 2.0;
        float _817 = (1.0 - _812) / (_812 + 1.0);
        float _3524 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _818 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _827 = ((((1.0 - _818) * (_813 + 2.0)) * exp2(log2(isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0))) * (_813 + 1.0))) + _818) * _699;
        _835 = _666;
        _837 = _665;
        _838 = _664;
        _839 = _676;
        _840 = _675;
        _841 = _674;
        _842 = _686;
        _843 = _685;
        _844 = _684;
        _845 = _699;
        _846 = _698;
        _847 = _697;
        _848 = cbModelParam._m0[36u].z * (isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0)));
        _849 = cbModelParam._m0[36u].z * (isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0)));
        _850 = cbModelParam._m0[36u].z * (isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0)));
    }
    else
    {
        _835 = _836;
        _837 = _836;
        _838 = _836;
        _839 = _836;
        _840 = _836;
        _841 = _836;
        _842 = _836;
        _843 = _836;
        _844 = _836;
        _845 = _836;
        _846 = _836;
        _847 = _836;
        _848 = 0.0;
        _849 = 0.0;
        _850 = 0.0;
    }
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _879 = fma(_504, cbModelParam._m0[30u].z, fma(_500, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _496));
        float _883 = fma(_504, cbModelParam._m0[31u].z, fma(_500, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _496));
        float _887 = fma(_504, cbModelParam._m0[32u].z, fma(_500, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _496));
        float _910 = _496 + _357;
        float _911 = _500 + _358;
        float _912 = _504 + _359;
        float _922 = fma(_912, cbModelParam._m0[30u].z, fma(_911, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _910)) - _879;
        float _923 = fma(_912, cbModelParam._m0[31u].z, fma(_911, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _910)) - _883;
        float _924 = fma(_912, cbModelParam._m0[32u].z, fma(_911, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _910)) - _887;
        float _928 = inversesqrt(dot(vec3(_922, _923, _924), vec3(_922, _923, _924)));
        float _941 = ((_928 * _922) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_879 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _942 = ((_928 * _923) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_883 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _943 = ((_928 * _924) / cbModelParam._m0[35u].z) + ((((((_887 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _945 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        float _978 = exp2((_945.w + (-0.5)) * 20.0) * 2.0;
        float _979 = _978 * (_945.x + (-0.5));
        float _980 = _978 * (_945.y + (-0.5));
        float _981 = _978 * (_945.z + (-0.5));
        float _988 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _989 = _988 * (_952.x + (-0.5));
        float _990 = _988 * (_952.y + (-0.5));
        float _991 = _988 * (_952.z + (-0.5));
        float _998 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_959.x + (-0.5));
        float _1000 = _998 * (_959.y + (-0.5));
        float _1001 = _998 * (_959.z + (-0.5));
        float _1008 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_966.x + (-0.5));
        float _1010 = _1008 * (_966.y + (-0.5));
        float _1011 = _1008 * (_966.z + (-0.5));
        float _1012 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1013 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1014 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1015 = _979 * 0.5;
        float _1016 = _989 * 0.5;
        float _1017 = _999 * 0.5;
        float _1018 = dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017));
        float _1023 = (_1018 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1018);
        float _1031 = (dot(vec3(_357, _358, _359), vec3(_1023 * _1015, _1023 * _1016, _1023 * _1017)) + 1.0) * 0.5;
        float _3565 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1040 = sqrt(((_1016 * _1016) + (_1015 * _1015)) + (_1017 * _1017)) / (_1012 + 9.9999997473787516355514526367188e-06);
        float _3576 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _1042 = _1041 * 2.0;
        float _1046 = (1.0 - _1041) / (_1041 + 1.0);
        float _3587 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _1056 = ((((1.0 - _1047) * (_1042 + 2.0)) * exp2(log2(isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) * (_1042 + 1.0))) + _1047) * _1012;
        float _1057 = _980 * 0.5;
        float _1058 = _990 * 0.5;
        float _1059 = _1000 * 0.5;
        float _1060 = dot(vec3(_1057, _1058, _1059), vec3(_1057, _1058, _1059));
        float _1065 = (_1060 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1060);
        float _1073 = (dot(vec3(_357, _358, _359), vec3(_1065 * _1057, _1065 * _1058, _1065 * _1059)) + 1.0) * 0.5;
        float _3598 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1082 = sqrt(((_1058 * _1058) + (_1057 * _1057)) + (_1059 * _1059)) / (_1013 + 9.9999997473787516355514526367188e-06);
        float _3609 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _1084 = _1083 * 2.0;
        float _1088 = (1.0 - _1083) / (_1083 + 1.0);
        float _3620 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _1098 = ((((1.0 - _1089) * (_1084 + 2.0)) * exp2(log2(isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * (_1084 + 1.0))) + _1089) * _1013;
        float _1099 = _981 * 0.5;
        float _1100 = _991 * 0.5;
        float _1101 = _1001 * 0.5;
        float _1102 = dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101));
        float _1107 = (_1102 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1102);
        float _1115 = (dot(vec3(_357, _358, _359), vec3(_1107 * _1099, _1107 * _1100, _1107 * _1101)) + 1.0) * 0.5;
        float _3631 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1124 = sqrt(((_1100 * _1100) + (_1099 * _1099)) + (_1101 * _1101)) / (_1014 + 9.9999997473787516355514526367188e-06);
        float _3642 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _1126 = _1125 * 2.0;
        float _1130 = (1.0 - _1125) / (_1125 + 1.0);
        float _3653 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _1140 = ((((1.0 - _1131) * (_1126 + 2.0)) * exp2(log2(isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))) * (_1126 + 1.0))) + _1131) * _1014;
        _1148 = _981;
        _1149 = _980;
        _1150 = _979;
        _1151 = _991;
        _1152 = _990;
        _1153 = _989;
        _1154 = _1001;
        _1155 = _1000;
        _1156 = _999;
        _1157 = _1014;
        _1158 = _1013;
        _1159 = _1012;
        _1160 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0)));
        _1161 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0)));
        _1162 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0)));
    }
    else
    {
        _1148 = _836;
        _1149 = _836;
        _1150 = _836;
        _1151 = _836;
        _1152 = _836;
        _1153 = _836;
        _1154 = _836;
        _1155 = _836;
        _1156 = _836;
        _1157 = _836;
        _1158 = _836;
        _1159 = _836;
        _1160 = 0.0;
        _1161 = 0.0;
        _1162 = 0.0;
    }
    float _1172 = (cbModelParam._m0[1u].x * (_1160 - _848)) + _848;
    float _1173 = (cbModelParam._m0[1u].x * (_1161 - _849)) + _849;
    float _1174 = (cbModelParam._m0[1u].x * (_1162 - _850)) + _850;
    float _1195 = fma(_1174, cbSceneParam._m0[89u].z, fma(_1173, cbSceneParam._m0[89u].y, _1172 * cbSceneParam._m0[89u].x));
    float _1198 = fma(_1174, cbSceneParam._m0[90u].z, fma(_1173, cbSceneParam._m0[90u].y, _1172 * cbSceneParam._m0[90u].x));
    float _1201 = fma(_1174, cbSceneParam._m0[91u].z, fma(_1173, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1172));
    float _1216 = _472 * 0.5;
    float _1217 = _473 * 0.5;
    float _1218 = _474 * 0.5;
    float _1219 = dot(vec4(_1216, _1217, _1218, 1.0), vec4(_1150, _1153, _1156, _1159));
    float _1222 = dot(vec4(_1216, _1217, _1218, 1.0), vec4(_1149, _1152, _1155, _1158));
    float _1225 = dot(vec4(_1216, _1217, _1218, 1.0), vec4(_1148, _1151, _1154, _1157));
    float _1259;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1232 = dot(vec4(_1216, _1217, _1218, 1.0), vec4(_835, _839, _842, _845));
        float _1236 = dot(vec4(_1216, _1217, _1218, 1.0), vec4(_837, _840, _843, _846));
        float _1240 = dot(vec4(_1216, _1217, _1218, 1.0), vec4(_838, _841, _844, _847));
        float _1247 = dot(vec4(cbModelParam._m0[39u]), vec4(_1216, _1217, _1218, 1.0));
        _1259 = dot(vec3(isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)), isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)), isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1247) ? 0.0 : (isnan(0.0) ? _1247 : max(0.0, _1247))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1259 = 1.0;
    }
    float _1270;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1261 = dot(vec4(cbModelParam._m0[40u]), vec4(_1216, _1217, _1218, 1.0));
        _1270 = dot(vec3(isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)), isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)), isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1261) ? 0.0 : (isnan(0.0) ? _1261 : max(0.0, _1261))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1270 = 1.0;
    }
    float _1274 = (_1270 * cbModelParam._m0[1u].x) + (_1259 * (1.0 - cbModelParam._m0[1u].x));
    float _1283 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1365;
    float _1367;
    float _1369;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1332 = fma(_504, cbModelParam._m0[13u].z, fma(_500, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _496)) + cbModelParam._m0[13u].w;
        float _1336 = fma(_504, cbModelParam._m0[14u].z, fma(_500, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _496)) + cbModelParam._m0[14u].w;
        float _1340 = fma(_504, cbModelParam._m0[15u].z, fma(_500, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _496)) + cbModelParam._m0[15u].w;
        float _1343 = fma(_474, cbModelParam._m0[13u].z, fma(_473, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _472));
        float _1346 = fma(_474, cbModelParam._m0[14u].z, fma(_473, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _472));
        float _1349 = fma(_474, cbModelParam._m0[15u].z, fma(_473, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _472));
        float _1375;
        if (_1343 > 0.0)
        {
            _1375 = abs((1.0 - _1332) / _1343);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1343 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1332 + 1.0) / _1343);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1375 = frontier_phi_19_17_ladder;
        }
        float _1549;
        if (_1346 > 0.0)
        {
            _1549 = abs((1.0 - _1336) / _1346);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1346 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1336 + 1.0) / _1346);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1549 = frontier_phi_28_24_ladder;
        }
        float _1845;
        if (_1349 > 0.0)
        {
            _1845 = abs((1.0 - _1340) / _1349);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1349 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1340 + 1.0) / _1349);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1845 = frontier_phi_40_35_ladder;
        }
        float _1847 = isnan(_1549) ? _1375 : (isnan(_1375) ? _1549 : min(_1375, _1549));
        float _1848 = isnan(_1845) ? _1847 : (isnan(_1847) ? _1845 : min(_1847, _1845));
        float _1852 = (_1848 * _1343) + _1332;
        float _1853 = (_1848 * _1346) + _1336;
        float _1854 = (_1848 * _1349) + _1340;
        float _1855 = _1848 * 9.9999997473787516355514526367188e-05;
        float _1857 = (-1.0) - _1855;
        float _1859 = _1855 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1854 > _1859) || ((_1854 < _1857) || ((_1853 > _1859) || ((_1853 < _1857) || ((_1852 < _1857) || (_1852 > _1859))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1999 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1854, cbModelParam._m0[9u].z, fma(_1853, cbModelParam._m0[9u].y, _1852 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1854, cbModelParam._m0[10u].z, fma(_1853, cbModelParam._m0[10u].y, _1852 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1854, cbModelParam._m0[11u].z, fma(_1853, cbModelParam._m0[11u].y, _1852 * cbModelParam._m0[11u].x))), _1283);
            frontier_phi_18_40_ladder = _1999.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1999.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1999.x * cbModelParam._m0[1u].y;
        }
        _1365 = frontier_phi_18_40_ladder_2;
        _1367 = frontier_phi_18_40_ladder_1;
        _1369 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1353 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_472, _473, _474), _1283);
        _1365 = _1353.x * cbModelParam._m0[1u].y;
        _1367 = _1353.y * cbModelParam._m0[1u].y;
        _1369 = _1353.z * cbModelParam._m0[1u].y;
    }
    float _1372 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1464;
    float _1466;
    float _1468;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1428 = fma(_504, cbModelParam._m0[21u].z, fma(_500, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _496)) + cbModelParam._m0[21u].w;
        float _1432 = fma(_504, cbModelParam._m0[22u].z, fma(_500, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _496)) + cbModelParam._m0[22u].w;
        float _1436 = fma(_504, cbModelParam._m0[23u].z, fma(_500, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _496)) + cbModelParam._m0[23u].w;
        float _1439 = fma(_474, cbModelParam._m0[21u].z, fma(_473, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _472));
        float _1442 = fma(_474, cbModelParam._m0[22u].z, fma(_473, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _472));
        float _1445 = fma(_474, cbModelParam._m0[23u].z, fma(_473, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _472));
        float _1554;
        if (_1439 > 0.0)
        {
            _1554 = abs((1.0 - _1428) / _1439);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1439 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1428 + 1.0) / _1439);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1554 = frontier_phi_30_26_ladder;
        }
        float _1872;
        if (_1442 > 0.0)
        {
            _1872 = abs((1.0 - _1432) / _1442);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1442 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1432 + 1.0) / _1442);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1872 = frontier_phi_42_37_ladder;
        }
        float _2145;
        if (_1445 > 0.0)
        {
            _2145 = abs((1.0 - _1436) / _1445);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1445 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1436 + 1.0) / _1445);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2145 = frontier_phi_52_49_ladder;
        }
        float _2147 = isnan(_1872) ? _1554 : (isnan(_1554) ? _1872 : min(_1554, _1872));
        float _2148 = isnan(_2145) ? _2147 : (isnan(_2147) ? _2145 : min(_2147, _2145));
        float _2152 = (_2148 * _1439) + _1428;
        float _2153 = (_2148 * _1442) + _1432;
        float _2154 = (_2148 * _1445) + _1436;
        float _2155 = _2148 * 9.9999997473787516355514526367188e-05;
        float _2156 = (-1.0) - _2155;
        float _2158 = _2155 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2154 > _2158) || ((_2154 < _2156) || ((_2153 > _2158) || ((_2153 < _2156) || ((_2152 < _2156) || (_2152 > _2158))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2245 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2154, cbModelParam._m0[17u].z, fma(_2153, cbModelParam._m0[17u].y, _2152 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2154, cbModelParam._m0[18u].z, fma(_2153, cbModelParam._m0[18u].y, _2152 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2154, cbModelParam._m0[19u].z, fma(_2153, cbModelParam._m0[19u].y, _2152 * cbModelParam._m0[19u].x))), _1372);
            frontier_phi_27_52_ladder = _2245.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2245.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2245.x * cbModelParam._m0[1u].z;
        }
        _1464 = frontier_phi_27_52_ladder_2;
        _1466 = frontier_phi_27_52_ladder_1;
        _1468 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1448 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_472, _473, _474), _1372);
        _1464 = _1448.x * cbModelParam._m0[1u].z;
        _1466 = _1448.y * cbModelParam._m0[1u].z;
        _1468 = _1448.z * cbModelParam._m0[1u].z;
    }
    float _1480 = _464 * 0.01200000010430812835693359375;
    float _1482 = _1480 * ((cbModelParam._m0[1u].w * (_1464 - _1365)) + _1365);
    float _1483 = _1480 * ((cbModelParam._m0[1u].w * (_1466 - _1367)) + _1367);
    float _1484 = _1480 * ((cbModelParam._m0[1u].w * (_1468 - _1369)) + _1369);
    float _1487 = fma(_1484, cbSceneParam._m0[89u].z, fma(_1483, cbSceneParam._m0[89u].y, _1482 * cbSceneParam._m0[89u].x));
    float _1490 = fma(_1484, cbSceneParam._m0[90u].z, fma(_1483, cbSceneParam._m0[90u].y, _1482 * cbSceneParam._m0[90u].x));
    float _1493 = fma(_1484, cbSceneParam._m0[91u].z, fma(_1483, cbSceneParam._m0[91u].y, _1482 * cbSceneParam._m0[91u].x));
    float _1528 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1532 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1536 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1540 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1541 = _1528 / _1540;
    float _1542 = _1532 / _1540;
    float _1543 = _1536 / _1540;
    float _1690;
    float _1691;
    float _1692;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1570 = ((uint(_1543 > cbSceneParam._m0[59u].y) + uint(_1543 > cbSceneParam._m0[59u].x)) + uint(_1543 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1571 = _1570 + 43u;
        uint _1579 = _1570 + 44u;
        uint _1587 = _1570 + 45u;
        uint _1595 = _1570 + 46u;
        float _1606 = fma(_1540, cbSceneParam._m0[_1571].w, fma(_1536, cbSceneParam._m0[_1571].z, fma(_1532, cbSceneParam._m0[_1571].y, _1528 * cbSceneParam._m0[_1571].x)));
        float _1610 = fma(_1540, cbSceneParam._m0[_1579].w, fma(_1536, cbSceneParam._m0[_1579].z, fma(_1532, cbSceneParam._m0[_1579].y, _1528 * cbSceneParam._m0[_1579].x)));
        float _1618 = fma(_1540, cbSceneParam._m0[_1595].w, fma(_1536, cbSceneParam._m0[_1595].z, fma(_1532, cbSceneParam._m0[_1595].y, _1528 * cbSceneParam._m0[_1595].x)));
        float _1623 = cbSceneParam._m0[33u].z * _1618;
        float _1625 = cbSceneParam._m0[33u].w * _1618;
        float _1628 = fma(_1540, cbSceneParam._m0[_1587].w, fma(_1536, cbSceneParam._m0[_1587].z, fma(_1532, cbSceneParam._m0[_1587].y, _1528 * cbSceneParam._m0[_1587].x))) / _1618;
        float _1676 = (cbSceneParam._m0[33u].x - sqrt(((_1542 * _1542) + (_1541 * _1541)) + (_1543 * _1543))) * cbSceneParam._m0[33u].y;
        float _3779 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1683 = (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1623 + _1606) / _1618, (_1625 + _1610) / _1618), _1628), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1625 + _1606) / _1618, (_1610 - _1623) / _1618), _1628), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1606 - _1623) / _1618, (_1610 - _1625) / _1618), _1628), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1606 - _1625) / _1618, (_1623 + _1610) / _1618), _1628), 0.0)).x), vec4(0.25)));
        _1690 = 1.0 - (_1683 * cbSceneParam._m0[34u].x);
        _1691 = 1.0 - (_1683 * cbSceneParam._m0[34u].y);
        _1692 = 1.0 - (_1683 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1690 = 1.0;
        _1691 = 1.0;
        _1692 = 1.0;
    }
    float _1756;
    float _1758;
    float _1760;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1744 = fma(_1540, cbSceneParam._m0[63u].w, fma(_1536, cbSceneParam._m0[63u].z, fma(_1532, cbSceneParam._m0[63u].y, _1528 * cbSceneParam._m0[63u].x)));
        float _1745 = fma(_1540, cbSceneParam._m0[60u].w, fma(_1536, cbSceneParam._m0[60u].z, fma(_1532, cbSceneParam._m0[60u].y, _1528 * cbSceneParam._m0[60u].x))) / _1744;
        float _1746 = fma(_1540, cbSceneParam._m0[61u].w, fma(_1536, cbSceneParam._m0[61u].z, fma(_1532, cbSceneParam._m0[61u].y, _1528 * cbSceneParam._m0[61u].x))) / _1744;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1745 >= cbSceneParam._m0[64u].x) && (_1746 >= cbSceneParam._m0[64u].y)) && (_1745 <= cbSceneParam._m0[64u].z)) && (_1746 <= cbSceneParam._m0[64u].w))
        {
            float _1885 = fma(_1540, cbSceneParam._m0[62u].w, fma(_1536, cbSceneParam._m0[62u].z, fma(_1532, cbSceneParam._m0[62u].y, _1528 * cbSceneParam._m0[62u].x))) / _1744;
            float _1889 = isnan(cbSceneParam._m0[41u].w) ? _1885 : (isnan(_1885) ? cbSceneParam._m0[41u].w : max(_1885, cbSceneParam._m0[41u].w));
            float _1932 = (cbSceneParam._m0[33u].x - sqrt(((_1542 * _1542) + (_1541 * _1541)) + (_1543 * _1543))) * cbSceneParam._m0[33u].y;
            float _3795 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
            float _1939 = (isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1745, cbSceneParam._m0[33u].w + _1746), _1889), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1745, _1746 - cbSceneParam._m0[33u].z), _1889), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1745 - cbSceneParam._m0[33u].z, _1746 - cbSceneParam._m0[33u].w), _1889), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1745 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1746), _1889), 0.0)).x), vec4(0.25)));
            float _1943 = 1.0 - (_1939 * cbSceneParam._m0[34u].x);
            float _1944 = 1.0 - (_1939 * cbSceneParam._m0[34u].y);
            float _1945 = 1.0 - (_1939 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_1944) ? _1691 : (isnan(_1691) ? _1944 : min(_1691, _1944));
            frontier_phi_39_38_ladder_1 = isnan(_1943) ? _1690 : (isnan(_1690) ? _1943 : min(_1690, _1943));
            frontier_phi_39_38_ladder_2 = isnan(_1945) ? _1692 : (isnan(_1692) ? _1945 : min(_1692, _1945));
        }
        else
        {
            frontier_phi_39_38_ladder = _1691;
            frontier_phi_39_38_ladder_1 = _1690;
            frontier_phi_39_38_ladder_2 = _1692;
        }
        _1756 = frontier_phi_39_38_ladder_1;
        _1758 = frontier_phi_39_38_ladder;
        _1760 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1756 = _1690;
        _1758 = _1691;
        _1760 = _1692;
    }
    uvec4 _1765 = floatBitsToUint(cbInstanceData._m0[_438 + 5u]);
    uint _1767 = _1765.x * 14u;
    uint _1768 = _1767 + 13u;
    float _1775 = _464 + (-1.0);
    float _1780 = (cbLight._m0[_1768].x * _1775) + 1.0;
    float _1781 = (cbLight._m0[_1768].y * _1775) + 1.0;
    float _1782 = (cbLight._m0[_1768].z * _1775) + 1.0;
    float _1783 = (cbLight._m0[_1768].w * _1775) + 1.0;
    uint _1784 = _1767 + 5u;
    float _1790 = isnan(1.0) ? _1781 : (isnan(_1781) ? 1.0 : min(_1781, 1.0));
    uint _1794 = _1767 + 4u;
    float _1804 = isnan(1.0) ? _1780 : (isnan(_1780) ? 1.0 : min(_1780, 1.0));
    uint _1808 = _1767 | 1u;
    float _1819 = dot(vec3(cbLight._m0[_1767].xyz), vec3(_357, _358, _359));
    float _1822 = dot(vec3(cbLight._m0[_1808].xyz), vec3(_357, _358, _359));
    float _3831 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    float _3842 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _1827 = (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * 0.3183098733425140380859375;
    float _1829 = (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * 0.3183098733425140380859375;
    float _1836 = ((cbLight._m0[_1784].x * _1790) * _1829) + (((cbLight._m0[_1794].x * _1756) * _1804) * _1827);
    float _1837 = ((_1790 * cbLight._m0[_1784].y) * _1829) + (((cbLight._m0[_1794].y * _1758) * _1804) * _1827);
    float _1838 = ((_1790 * cbLight._m0[_1784].z) * _1829) + (((cbLight._m0[_1794].z * _1760) * _1804) * _1827);
    uvec4 _1842 = floatBitsToUint(cbLight._m0[_1767 + 12u]);
    bool _1844 = _1842.x == 0u;
    float _1946;
    float _1948;
    float _1950;
    if (_1844)
    {
        _1946 = _1836;
        _1948 = _1837;
        _1950 = _1838;
    }
    else
    {
        uint _1954 = _1767 + 6u;
        float _1970 = (dot(vec3(cbLight._m0[_1767 + 2u].xyz), vec3(_357, _358, _359)) * 0.5) + 0.5;
        float _1971 = _1970 * _1970;
        float _3853 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
        float _1972 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1973 = isnan(1.0) ? _1782 : (isnan(_1782) ? 1.0 : min(_1782, 1.0));
        _1946 = (((cbLight._m0[_1954].x * 0.3183098733425140380859375) * _1972) * _1973) + _1836;
        _1948 = (((cbLight._m0[_1954].y * 0.3183098733425140380859375) * _1972) * _1973) + _1837;
        _1950 = (((cbLight._m0[_1954].z * 0.3183098733425140380859375) * _1972) * _1973) + _1838;
    }
    bool _1953 = _1842.y == 0u;
    float _2008;
    float _2010;
    float _2012;
    if (_1953)
    {
        _2008 = _1946;
        _2010 = _1948;
        _2012 = _1950;
    }
    else
    {
        uint _2116 = _1767 + 7u;
        float _2132 = (dot(vec3(cbLight._m0[_1767 + 3u].xyz), vec3(_357, _358, _359)) * 0.5) + 0.5;
        float _2133 = _2132 * _2132;
        float _3869 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2134 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _2135 = isnan(1.0) ? _1783 : (isnan(_1783) ? 1.0 : min(_1783, 1.0));
        _2008 = (((cbLight._m0[_2116].x * 0.3183098733425140380859375) * _2134) * _2135) + _1946;
        _2010 = (((cbLight._m0[_2116].y * 0.3183098733425140380859375) * _2134) * _2135) + _1948;
        _2012 = (((cbLight._m0[_2116].z * 0.3183098733425140380859375) * _2134) * _2135) + _1950;
    }
    uint _2014 = _1767 + 8u;
    float _2020 = cbLight._m0[_1767].x + _333;
    float _2021 = cbLight._m0[_1767].y + _334;
    float _2022 = cbLight._m0[_1767].z + _335;
    float _2026 = inversesqrt(dot(vec3(_2020, _2021, _2022), vec3(_2020, _2021, _2022)));
    float _2030 = dot(vec3(_357, _358, _359), vec3(cbLight._m0[_1767].xyz));
    float _3885 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2033 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _3896 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _2034 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _2035 = dot(vec3(cbLight._m0[_1767].xyz), vec3(_2020 * _2026, _2021 * _2026, _2022 * _2026));
    float _3907 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2046 = (exp2(log2(1.0 - (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2052 = (0.5 / ((_2033 + 9.9999999392252902907785028219223e-09) + _2034)) * _2033;
    float _3918 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2054 = (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * 0.31831014156341552734375;
    uint _2068 = _1767 + 9u;
    float _2074 = cbLight._m0[_1808].x + _333;
    float _2075 = cbLight._m0[_1808].y + _334;
    float _2076 = cbLight._m0[_1808].z + _335;
    float _2080 = inversesqrt(dot(vec3(_2074, _2075, _2076), vec3(_2074, _2075, _2076)));
    float _2084 = dot(vec3(_357, _358, _359), vec3(cbLight._m0[_1808].xyz));
    float _3929 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2087 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _2088 = dot(vec3(cbLight._m0[_1808].xyz), vec3(_2074 * _2080, _2075 * _2080, _2076 * _2080));
    float _3940 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2097 = (exp2(log2(1.0 - (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2101 = (0.5 / ((_2087 + 9.9999999392252902907785028219223e-09) + _2034)) * _2087;
    float _3951 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2103 = (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * 0.31831014156341552734375;
    float _2113 = (((_2097 * cbLight._m0[_2068].x) * _2103) * _1790) + ((((cbLight._m0[_2014].x * _1756) * _2046) * _2054) * _1804);
    float _2114 = (((_2097 * cbLight._m0[_2068].y) * _2103) * _1790) + ((((cbLight._m0[_2014].y * _1758) * _2046) * _2054) * _1804);
    float _2115 = (((_2097 * cbLight._m0[_2068].z) * _2103) * _1790) + ((((cbLight._m0[_2014].z * _1760) * _2046) * _2054) * _1804);
    float _2171;
    float _2173;
    float _2175;
    if (_1844)
    {
        _2171 = _2113;
        _2173 = _2114;
        _2175 = _2115;
    }
    else
    {
        uint _2177 = _1767 + 10u;
        uint _2183 = _1767 + 2u;
        float _2189 = cbLight._m0[_2183].x + _333;
        float _2190 = cbLight._m0[_2183].y + _334;
        float _2191 = cbLight._m0[_2183].z + _335;
        float _2195 = inversesqrt(dot(vec3(_2189, _2190, _2191), vec3(_2189, _2190, _2191)));
        float _2199 = dot(vec3(_357, _358, _359), vec3(cbLight._m0[_2183].xyz));
        float _3962 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2202 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _2203 = dot(vec3(cbLight._m0[_2183].xyz), vec3(_2189 * _2195, _2190 * _2195, _2191 * _2195));
        float _3973 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2212 = (exp2(log2(1.0 - (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2216 = (0.5 / ((_2202 + 9.9999999392252902907785028219223e-09) + _2034)) * _2202;
        float _3984 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2218 = (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * 0.31831014156341552734375;
        float _2219 = isnan(1.0) ? _1782 : (isnan(_1782) ? 1.0 : min(_1782, 1.0));
        _2171 = (((_2212 * cbLight._m0[_2177].x) * _2218) * _2219) + _2113;
        _2173 = (((_2212 * cbLight._m0[_2177].y) * _2218) * _2219) + _2114;
        _2175 = (((_2212 * cbLight._m0[_2177].z) * _2218) * _2219) + _2115;
    }
    float _2250;
    float _2252;
    float _2254;
    if (_1953)
    {
        _2250 = _2171;
        _2252 = _2173;
        _2254 = _2175;
    }
    else
    {
        uint _2261 = _1767 + 11u;
        uint _2267 = _1767 + 3u;
        float _2273 = cbLight._m0[_2267].x + _333;
        float _2274 = cbLight._m0[_2267].y + _334;
        float _2275 = cbLight._m0[_2267].z + _335;
        float _2279 = inversesqrt(dot(vec3(_2273, _2274, _2275), vec3(_2273, _2274, _2275)));
        float _2283 = dot(vec3(_357, _358, _359), vec3(cbLight._m0[_2267].xyz));
        float _4000 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2286 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _2287 = dot(vec3(cbLight._m0[_2267].xyz), vec3(_2273 * _2279, _2274 * _2279, _2275 * _2279));
        float _4011 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2296 = (exp2(log2(1.0 - (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2300 = (0.5 / ((_2286 + 9.9999999392252902907785028219223e-09) + _2034)) * _2286;
        float _4022 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2302 = (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * 0.31831014156341552734375;
        float _2303 = isnan(1.0) ? _1783 : (isnan(_1783) ? 1.0 : min(_1783, 1.0));
        _2250 = (((_2296 * cbLight._m0[_2261].x) * _2302) * _2303) + _2171;
        _2252 = (((_2296 * cbLight._m0[_2261].y) * _2302) * _2303) + _2173;
        _2254 = (((_2296 * cbLight._m0[_2261].z) * _2302) * _2303) + _2175;
    }
    float _2368;
    float _2370;
    float _2372;
    float _2374;
    float _2376;
    float _2378;
    if (_1765.y == 0u)
    {
        uvec4 _2324 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2325 = _2324.x;
        uint _2336 = uint((float(_2324.y) * floor(float(uint(cbSceneParam._m0[85u].y * _399) / _2325))) + floor(float(uint(cbSceneParam._m0[85u].x * _398) / _2325)));
        float _2346 = (log2(_1543 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2347 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        uint _2350 = uint(isnan(14.0) ? _2347 : (isnan(_2347) ? 14.0 : min(_2347, 14.0)));
        uvec4 _2355 = texelFetch(g_lightClusterGridBuffer, int(((_2350 << 2u) + (_2336 << 6u)) >> 2u));
        uint _2356 = _2355.x;
        uint _2357 = _2324.z;
        float _2440;
        float _2442;
        float _2444;
        float _2446;
        float _2448;
        float _2450;
        if (((((1u << ((_2357 >> 4u) & 15u)) + 4294967295u) & _2356) == 0u) || ((_2357 & 240u) == 0u))
        {
            _2440 = 0.0;
            _2442 = 0.0;
            _2444 = 0.0;
            _2446 = 0.0;
            _2448 = 0.0;
            _2450 = 0.0;
        }
        else
        {
            float _2441;
            float _2443;
            float _2445;
            float _2447;
            float _2449;
            float _2451;
            float _2591 = 0.0;
            float _2592 = 0.0;
            float _2593 = 0.0;
            float _2594 = 0.0;
            float _2595 = 0.0;
            float _2596 = 0.0;
            uint _2597 = 0u;
            uint _2606;
            bool _2607;
            for (;;)
            {
                _2606 = texelFetch(g_lightClassification, int((((_2350 << 5u) + (_2336 << 9u)) + (_2597 << 2u)) >> 2u)).x;
                _2607 = _2606 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2607)
                {
                    frontier_phi_73_pred = _2596;
                    frontier_phi_73_pred_1 = _2595;
                    frontier_phi_73_pred_2 = _2594;
                    frontier_phi_73_pred_3 = _2593;
                    frontier_phi_73_pred_4 = _2592;
                    frontier_phi_73_pred_5 = _2591;
                }
                else
                {
                    float _2736;
                    float _2737;
                    float _2738;
                    float _2739;
                    float _2740;
                    float _2741;
                    uint _2742;
                    _2736 = _2591;
                    _2737 = _2592;
                    _2738 = _2593;
                    _2739 = _2594;
                    _2740 = _2595;
                    _2741 = _2596;
                    _2742 = _2606;
                    float _2663;
                    float _2664;
                    float _2665;
                    float _2666;
                    float _2667;
                    float _2668;
                    for (;;)
                    {
                        uint _2746 = uint(findLSB(_2742)) + (_2597 << 5u);
                        uint _2743 = (_2742 + 4294967295u) & _2742;
                        uint _2748 = _2746 * 48u;
                        vec4 _2762 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2748)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 3u)).x));
                        uint _2768 = (_2746 * 48u) + 4u;
                        vec4 _2781 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2768)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 3u)).x));
                        uint _2787 = (_2746 * 48u) + 8u;
                        vec3 _2798 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2787)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 2u)).x));
                        float _2802 = _2762.x - _1541;
                        float _2803 = _2762.y - _1542;
                        float _2804 = _2762.z - _1543;
                        float _2805 = dot(vec3(_2802, _2803, _2804), vec3(_2802, _2803, _2804));
                        float _2808 = inversesqrt(_2805);
                        float _2817 = 1.0 - (_2805 * _2762.w);
                        float _4048 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
                        float _2818 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
                        float _2819 = sqrt(_2805) * _2781.w;
                        float _2822 = 1.39999997615814208984375 / (_2819 + 1.39999997615814208984375);
                        float _2823 = _2822 * _2822;
                        float _2826 = ((1.0 - _2823) * dot(vec3(_419, _422, _425), vec3(_2808 * _2802, _2808 * _2803, _2808 * _2804))) + _2823;
                        float _2829 = _2819 * _2819;
                        float _2833 = ((isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0))) * _2818) / ((_2829 * 0.699999988079071044921875) + 1.0);
                        float _2837 = (-0.0) - _1541;
                        float _2838 = (-0.0) - _1542;
                        float _2839 = (-0.0) - _1543;
                        float _2843 = inversesqrt(dot(vec3(_2837, _2838, _2839), vec3(_2837, _2838, _2839)));
                        float _2847 = dot(vec3(_419, _422, _425), vec3(_2843 * _2837, _2843 * _2838, _2843 * _2839));
                        float _4064 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
                        float _4075 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
                        float _2851 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
                        float _2855 = (0.5 / (((isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) + 9.9999999392252902907785028219223e-09) + _2851)) * _2851;
                        float _4086 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
                        float _2864 = (((isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * 3.1415927410125732421875) / ((_2829 * 2.1991131305694580078125) + 3.141590118408203125)) * _2818;
                        _2666 = (_2833 * _2781.x) + _2739;
                        _2667 = (_2833 * _2781.y) + _2740;
                        _2668 = (_2833 * _2781.z) + _2741;
                        _2663 = (_2864 * _2798.x) + _2736;
                        _2664 = (_2864 * _2798.y) + _2737;
                        _2665 = (_2864 * _2798.z) + _2738;
                        if (_2743 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2736 = _2663;
                            _2737 = _2664;
                            _2738 = _2665;
                            _2739 = _2666;
                            _2740 = _2667;
                            _2741 = _2668;
                            _2742 = _2743;
                        }
                    }
                    frontier_phi_73_pred = _2668;
                    frontier_phi_73_pred_1 = _2667;
                    frontier_phi_73_pred_2 = _2666;
                    frontier_phi_73_pred_3 = _2665;
                    frontier_phi_73_pred_4 = _2664;
                    frontier_phi_73_pred_5 = _2663;
                }
                _2451 = frontier_phi_73_pred;
                _2449 = frontier_phi_73_pred_1;
                _2447 = frontier_phi_73_pred_2;
                _2445 = frontier_phi_73_pred_3;
                _2443 = frontier_phi_73_pred_4;
                _2441 = frontier_phi_73_pred_5;
                uint _2598 = _2597 + 1u;
                if (_2598 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2591 = _2441;
                    _2592 = _2443;
                    _2593 = _2445;
                    _2594 = _2447;
                    _2595 = _2449;
                    _2596 = _2451;
                    _2597 = _2598;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2440 = _2441;
            _2442 = _2443;
            _2444 = _2445;
            _2446 = _2447;
            _2448 = _2449;
            _2450 = _2451;
        }
        uvec4 _2454 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2455 = _2454.z;
        uint _2457 = (_2455 >> 8u) & 15u;
        float _2562;
        float _2564;
        float _2566;
        float _2568;
        float _2570;
        float _2572;
        if (((4294967295u << _2457) & _2356) == 0u)
        {
            _2562 = _2440;
            _2564 = _2442;
            _2566 = _2444;
            _2568 = _2446;
            _2570 = _2448;
            _2572 = _2450;
        }
        else
        {
            float _2587 = inversesqrt(dot(vec3(_1541, _1542, _1543), vec3(_1541, _1542, _1543)));
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2457 < ((_2455 >> 12u) & 15u))
            {
                float _2563;
                float _2565;
                float _2567;
                float _2569;
                float _2571;
                float _2573;
                float _2719 = _2440;
                float _2720 = _2442;
                float _2721 = _2444;
                float _2722 = _2446;
                float _2723 = _2448;
                float _2724 = _2450;
                uint _2725 = _2457;
                uint _2734;
                bool _2735;
                for (;;)
                {
                    _2734 = texelFetch(g_lightClassification, int((((_2350 << 5u) + (_2336 << 9u)) + (_2725 << 2u)) >> 2u)).x;
                    _2735 = _2734 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2735)
                    {
                        frontier_phi_84_pred = _2723;
                        frontier_phi_84_pred_1 = _2722;
                        frontier_phi_84_pred_2 = _2721;
                        frontier_phi_84_pred_3 = _2720;
                        frontier_phi_84_pred_4 = _2719;
                        frontier_phi_84_pred_5 = _2724;
                    }
                    else
                    {
                        float _2878;
                        float _2879;
                        float _2880;
                        float _2881;
                        float _2882;
                        float _2883;
                        float _3130;
                        float _3131;
                        float _3132;
                        float _3133;
                        float _3134;
                        float _3135;
                        float _2891 = _2719;
                        float _2892 = _2720;
                        float _2893 = _2721;
                        float _2894 = _2722;
                        float _2895 = _2723;
                        float _2896 = _2724;
                        uint _2897 = _2734;
                        uint _2898;
                        vec4 _2923;
                        float _2924;
                        vec4 _2939;
                        vec3 _2951;
                        vec4 _2967;
                        vec4 _2983;
                        float _3030;
                        bool _3031;
                        for (;;)
                        {
                            uint _2908 = ((_2725 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2897));
                            _2898 = (_2897 + 4294967295u) & _2897;
                            uint _2910 = _2908 * 40u;
                            _2923 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2910)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 3u)).x));
                            _2924 = _2923.w;
                            uint _2926 = (_2908 * 40u) + 4u;
                            _2939 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2926)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 3u)).x));
                            uint _2941 = (_2908 * 40u) + 8u;
                            _2951 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2941)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 2u)).x));
                            uint _2954 = (_2908 * 40u) + 16u;
                            _2967 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2954)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 3u)).x));
                            uint _2970 = (_2908 * 40u) + 20u;
                            _2983 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 3u)).x));
                            uint _2986 = (_2908 * 40u) + 24u;
                            vec4 _2999 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 3u)).x));
                            uint _3005 = (_2908 * 40u) + 28u;
                            vec4 _3018 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3005)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 3u)).x));
                            _3030 = fma(_1543, _3018.z, fma(_1542, _3018.y, _3018.x * _1541)) + _3018.w;
                            _3031 = !((fma(_1543, _2999.z, fma(_1542, _2999.y, _2999.x * _1541)) + _2999.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3031)
                            {
                                float _3058 = _2923.x - _1541;
                                float _3059 = _2923.y - _1542;
                                float _3060 = _2923.z - _1543;
                                float _3061 = dot(vec3(_3058, _3059, _3060), vec3(_3058, _3059, _3060));
                                float _3064 = inversesqrt(_3061);
                                float _3065 = _3064 * _3058;
                                float _3066 = _3064 * _3059;
                                float _3067 = _3064 * _3060;
                                float _3071 = 1.0 - (_3061 / (_2924 * _2924));
                                float _4097 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                                float _3072 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
                                float _3076 = sqrt(_3061) * _2939.w;
                                float _3078 = 1.39999997615814208984375 / (_3076 + 1.39999997615814208984375);
                                float _3079 = _3078 * _3078;
                                float _3080 = 1.0 - _3079;
                                float _3082 = (_3080 * dot(vec3(_3065, _3066, _3067), vec3(_419, _422, _425))) + _3079;
                                float _3085 = _3076 * _3076;
                                float _3089 = (fma(_1543, _2967.z, fma(_1542, _2967.y, _2967.x * _1541)) + _2967.w) / _3030;
                                float _3090 = (fma(_1543, _2983.z, fma(_1542, _2983.y, _2983.x * _1541)) + _2983.w) / _3030;
                                float _3094 = 1.0 - dot(vec2(_3089, _3090), vec2(_3089, _3090));
                                float _4113 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                                float _3095 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
                                float _3096 = _3095 * (((isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0))) * _3072) / ((_3085 * 0.699999988079071044921875) + 1.0));
                                float _3106 = dot(vec3(_419, _422, _425), vec3((-0.0) - (_1541 * _2587), (-0.0) - (_1542 * _2587), (-0.0) - (_1543 * _2587)));
                                float _4124 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                                float _3114 = (_3080 * dot(vec3(_419, _422, _425), vec3(_3065, _3066, _3067))) + _3079;
                                float _4135 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                                float _3115 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
                                float _3119 = (0.5 / (((isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) + 9.9999999392252902907785028219223e-09) + _3115)) * _3115;
                                float _4146 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                                float _3126 = (_3095 * _3072) * (((isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * 3.1415927410125732421875) / ((_3085 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_90_pred = _3096 * _2939.y;
                                frontier_phi_90_pred_1 = _3096 * _2939.x;
                                frontier_phi_90_pred_2 = _3126 * _2951.z;
                                frontier_phi_90_pred_3 = _3126 * _2951.y;
                                frontier_phi_90_pred_4 = _3126 * _2951.x;
                                frontier_phi_90_pred_5 = _3096 * _2939.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3134 = frontier_phi_90_pred;
                            _3133 = frontier_phi_90_pred_1;
                            _3132 = frontier_phi_90_pred_2;
                            _3131 = frontier_phi_90_pred_3;
                            _3130 = frontier_phi_90_pred_4;
                            _3135 = frontier_phi_90_pred_5;
                            _2881 = _3133 + _2894;
                            _2882 = _3134 + _2895;
                            _2883 = _3135 + _2896;
                            _2878 = _3130 + _2891;
                            _2879 = _3131 + _2892;
                            _2880 = _3132 + _2893;
                            if (_2898 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2891 = _2878;
                                _2892 = _2879;
                                _2893 = _2880;
                                _2894 = _2881;
                                _2895 = _2882;
                                _2896 = _2883;
                                _2897 = _2898;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _2882;
                        frontier_phi_84_pred_1 = _2881;
                        frontier_phi_84_pred_2 = _2880;
                        frontier_phi_84_pred_3 = _2879;
                        frontier_phi_84_pred_4 = _2878;
                        frontier_phi_84_pred_5 = _2883;
                    }
                    _2571 = frontier_phi_84_pred;
                    _2569 = frontier_phi_84_pred_1;
                    _2567 = frontier_phi_84_pred_2;
                    _2565 = frontier_phi_84_pred_3;
                    _2563 = frontier_phi_84_pred_4;
                    _2573 = frontier_phi_84_pred_5;
                    uint _2726 = _2725 + 1u;
                    if (_2726 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2719 = _2563;
                        _2720 = _2565;
                        _2721 = _2567;
                        _2722 = _2569;
                        _2723 = _2571;
                        _2724 = _2573;
                        _2725 = _2726;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2573;
                frontier_phi_65_66_ladder_1 = _2569;
                frontier_phi_65_66_ladder_2 = _2571;
                frontier_phi_65_66_ladder_3 = _2565;
                frontier_phi_65_66_ladder_4 = _2563;
                frontier_phi_65_66_ladder_5 = _2567;
            }
            else
            {
                frontier_phi_65_66_ladder = _2450;
                frontier_phi_65_66_ladder_1 = _2446;
                frontier_phi_65_66_ladder_2 = _2448;
                frontier_phi_65_66_ladder_3 = _2442;
                frontier_phi_65_66_ladder_4 = _2440;
                frontier_phi_65_66_ladder_5 = _2444;
            }
            _2562 = frontier_phi_65_66_ladder_4;
            _2564 = frontier_phi_65_66_ladder_3;
            _2566 = frontier_phi_65_66_ladder_5;
            _2568 = frontier_phi_65_66_ladder_1;
            _2570 = frontier_phi_65_66_ladder_2;
            _2572 = frontier_phi_65_66_ladder;
        }
        float _2577 = isnan(1.0) ? _464 : (isnan(_464) ? 1.0 : min(_464, 1.0));
        _2368 = (_2577 * _2568) + _2008;
        _2370 = (_2577 * _2570) + _2010;
        _2372 = (_2577 * _2572) + _2012;
        _2374 = ((_2562 * 0.039999999105930328369140625) * _2577) + _2250;
        _2376 = ((_2564 * 0.039999999105930328369140625) * _2577) + _2252;
        _2378 = ((_2566 * 0.039999999105930328369140625) * _2577) + _2254;
    }
    else
    {
        _2368 = _2008;
        _2370 = _2010;
        _2372 = _2012;
        _2374 = _2250;
        _2376 = _2252;
        _2378 = _2254;
    }
    float _4162 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _4173 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _4184 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _4195 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _2396 = ((isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_2368 + ((isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0))) * _464))) + ((_2374 + ((isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))) * _1274)) * cbPerFrame._m0[3u].x);
    float _2397 = ((isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_2370 + ((isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0))) * _464))) + ((_2376 + ((isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))) * _1274)) * cbPerFrame._m0[3u].x);
    float _2398 = ((isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_2372 + ((isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0))) * _464))) + ((_2378 + ((isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))) * _1274)) * cbPerFrame._m0[3u].x);
    float _2399 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2400 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2401 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2406 = cbInstanceData._m0[_438 + 6u].w * (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)));
    float _2411 = _398 / cbSceneParam._m0[86u].x;
    float _2412 = _399 / cbSceneParam._m0[86u].y;
    vec4 _2426 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2411, _2412, (log2((isnan(cbSceneParam._m0[77u].w) ? _379 : (isnan(_379) ? cbSceneParam._m0[77u].w : min(_379, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2428 = _2426.x;
    float _2429 = _2426.y;
    float _2430 = _2426.z;
    float _2431 = _2426.w;
    float _2502;
    float _2504;
    float _2506;
    float _2508;
    if (_379 > cbSceneParam._m0[78u].w)
    {
        float _2465 = isnan(_379) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _379 : min(cbSceneParam._m0[80u].w, _379));
        float _2466 = _2465 / _379;
        float _2477 = _2466 * _267;
        float _2478 = _268 * _2466;
        float _2479 = (-0.0) - _2478;
        float _2480 = _2466 * _269;
        float _2482 = (cbSceneParam._m0[77u].w * _2479) / _2465;
        float _2483 = _2482 + cbSceneParam._m0[79u].w;
        float _2484 = cbSceneParam._m0[79u].w - _2478;
        float _2490 = sqrt(((_2477 * _2477) + (_2478 * _2478)) + (_2480 * _2480));
        float _2493 = (1.0 - (cbSceneParam._m0[77u].w / _2465)) * _2490;
        float _2498 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2500 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2676;
        if (abs((_2479 - _2482) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2676 = ((((_2483 > 0.0) ? exp2(_2498 * _2483) : (2.0 - exp2(_2500 * _2483))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2493;
        }
        else
        {
            float _2620 = 1.0 / cbSceneParam._m0[80u].x;
            float _2621 = isnan(_2484) ? _2483 : (isnan(_2483) ? _2484 : max(_2483, _2484));
            float _2622 = isnan(_2484) ? _2483 : (isnan(_2483) ? _2484 : min(_2483, _2484));
            float _2631 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : min(_2621, 0.0));
            float _2632 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : min(_2622, 0.0));
            _2676 = ((abs(_2490 / _2479) * cbSceneParam._m0[80u].y) * ((((_2631 - _2632) * 2.0) - ((exp2(_2498 * (isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0)))) - exp2(_2498 * (isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0))))) * _2620)) - ((exp2(_2500 * _2631) - exp2(_2500 * _2632)) * _2620))) + (_2493 * cbSceneParam._m0[80u].z);
        }
        vec4 _2678 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2411, _2412, 1.0), 0.0);
        float _2687 = exp2((_2676 * (-1.44269502162933349609375)) * (1.0 - _2678.w));
        float _2688 = log2(_2687);
        float _2704 = log2(_2431);
        _2502 = (exp2(_2704 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2688 * cbSceneParam._m0[78u].x)) * _2678.x) / cbSceneParam._m0[78u].x)) + _2428;
        _2504 = (exp2(_2704 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2688 * cbSceneParam._m0[78u].y)) * _2678.y) / cbSceneParam._m0[78u].y)) + _2429;
        _2506 = (exp2(_2704 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2688 * cbSceneParam._m0[78u].z)) * _2678.z) / cbSceneParam._m0[78u].z)) + _2430;
        _2508 = _2687 * _2431;
    }
    else
    {
        _2502 = _2428;
        _2504 = _2429;
        _2506 = _2430;
        _2508 = _2431;
    }
    bool _2714;
    vec4 _2518;
    vec4 _2541;
    float _2543;
    float _2547;
    float _2548;
    float _2549;
    float _2550;
    bool _2561;
    for (;;)
    {
        _2518 = cbMatDynParam._m0[0u];
        float _2520 = roundEven(_2518.y);
        bool _2521 = _2520 == 3.0;
        float _2523 = log2(_2508);
        float _2530 = exp2(_2523 * cbSceneParam._m0[78u].x) * _2399;
        float _2531 = exp2(_2523 * cbSceneParam._m0[78u].y) * _2400;
        float _2532 = exp2(_2523 * cbSceneParam._m0[78u].z) * _2401;
        float _2539 = _386 + (-0.5);
        _2541 = cbMtdParam._m0[1u];
        _2543 = _2541.y * _2539;
        float _2546 = (_2520 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2547 = _2546 * (_2521 ? _2530 : (_2530 + (cbSceneParam._m0[72u].w * _2502)));
        _2548 = _2546 * (_2521 ? _2531 : (_2531 + (cbSceneParam._m0[72u].w * _2504)));
        _2549 = _2546 * (_2521 ? _2532 : (_2532 + (cbSceneParam._m0[72u].w * _2506)));
        _2550 = _2539 * 0.999000012874603271484375;
        _2561 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2561)
        {
            if ((cbInstanceData._m0[_438 + 7u].x + _2550) < 0.5)
            {
                _2714 = true;
                break;
            }
        }
        uint _2655 = _440 + uint(_2518.w);
        if ((cbInstanceData._m0[_2655].w < 1.0) && ((cbInstanceData._m0[_2655].w + _2550) < 0.5))
        {
            _2714 = true;
            break;
        }
        if ((_2543 + 1.0) < _2541.x)
        {
            _2714 = true;
            break;
        }
        _2714 = false;
        break;
    }
    float _2869;
    if (_2714)
    {
        discard_state = true;
        _2869 = 0.0;
    }
    else
    {
        _2869 = _2406;
    }
    SV_Target.x = _2547;
    SV_Target.y = _2548;
    SV_Target.z = _2549;
    SV_Target.w = _2869;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2406;
    discard_exit();
}


