#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[18];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D MenuMiniMapColorSet_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _787;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _174 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _175 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _176 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _181 = inversesqrt(dot(vec3(_174, _175, _176), vec3(_174, _175, _176)));
    float _182 = _181 * _174;
    float _183 = _181 * _175;
    float _184 = _181 * _176;
    float _188 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _189 = _188 * NORMAL.x;
    float _190 = _188 * NORMAL.y;
    float _191 = _188 * NORMAL.z;
    float _195 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _196 = _195 * TANGENT.x;
    float _197 = _195 * TANGENT.y;
    float _198 = _195 * TANGENT.z;
    float _203;
    float _204;
    float _205;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _203 = (-0.0) - _189;
        _204 = (-0.0) - _190;
        _205 = (-0.0) - _191;
    }
    else
    {
        _203 = _189;
        _204 = _190;
        _205 = _191;
    }
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    vec4 _280 = texture(sampler2D(MenuMiniMapColorSet_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _288 = (_280.x * 2.0) + (-1.0);
    float _290 = (_280.y * 2.0) + (-1.0);
    float _291 = dot(vec2(_288, _290), vec2(_288, _290));
    float _2900 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _297 = sqrt(1.0 - (isnan(1.0) ? _2900 : (isnan(_2900) ? 1.0 : min(_2900, 1.0))));
    float _300 = fma(_297, _203, fma(_290, _196, _288 * _182));
    float _303 = fma(_297, _204, fma(_290, _197, _288 * _183));
    float _306 = fma(_297, _205, fma(_290, _198, _288 * _184));
    float _310 = inversesqrt(dot(vec3(_300, _303, _306), vec3(_300, _303, _306)));
    float _311 = _310 * _300;
    float _312 = _310 * _303;
    float _313 = _310 * _306;
    float _317 = inversesqrt(dot(vec3(_311, _312, _313), vec3(_311, _312, _313)));
    float _324 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _325 = _324 * _259;
    float _326 = _324 * _260;
    float _327 = _324 * _261;
    float _334 = cbMtdParam._m0[9u].x - dot(vec3(_325, _326, _327), vec3(_317 * _311, _317 * _312, _317 * _313));
    float _2911 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _335 = isnan(1.0) ? _2911 : (isnan(_2911) ? 1.0 : min(_2911, 1.0));
    float _338 = fma(_313, _203, fma(_312, _196, _311 * _182));
    float _341 = fma(_313, _204, fma(_312, _197, _311 * _183));
    float _344 = fma(_313, _205, fma(_312, _198, _311 * _184));
    float _348 = inversesqrt(dot(vec3(_338, _341, _344), vec3(_338, _341, _344)));
    float _349 = _348 * _338;
    float _350 = _348 * _341;
    float _351 = _348 * _344;
    float _2922 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _352 = isnan(1.0) ? _2922 : (isnan(_2922) ? 1.0 : min(_2922, 1.0));
    float _2933 = isnan(0.0) ? cbMatDynParam._m0[17u].x : (isnan(cbMatDynParam._m0[17u].x) ? 0.0 : max(cbMatDynParam._m0[17u].x, 0.0));
    float _2944 = isnan(0.0) ? cbMatDynParam._m0[17u].y : (isnan(cbMatDynParam._m0[17u].y) ? 0.0 : max(cbMatDynParam._m0[17u].y, 0.0));
    float _2955 = isnan(0.0) ? cbMatDynParam._m0[17u].z : (isnan(cbMatDynParam._m0[17u].z) ? 0.0 : max(cbMatDynParam._m0[17u].z, 0.0));
    float _371 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _377 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _378 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _399 = fma(_351, cbSceneParam._m0[5u].z, fma(_350, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _349));
    float _402 = fma(_351, cbSceneParam._m0[6u].z, fma(_350, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _349));
    float _405 = fma(_351, cbSceneParam._m0[7u].z, fma(_350, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _349));
    uint _418 = uint(roundEven(NORMAL.w)) * 13u;
    uint _421 = (_418 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _427 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2933 : (isnan(_2933) ? 1.0 : min(_2933, 1.0)))) * cbInstanceData._m0[_421].x;
    float _428 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2944 : (isnan(_2944) ? 1.0 : min(_2944, 1.0)))) * cbInstanceData._m0[_421].y;
    float _429 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2955 : (isnan(_2955) ? 1.0 : min(_2955, 1.0)))) * cbInstanceData._m0[_421].z;
    float _2966 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _430 = isnan(1.0) ? _2966 : (isnan(_2966) ? 1.0 : min(_2966, 1.0));
    float _2977 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _431 = isnan(1.0) ? _2977 : (isnan(_2977) ? 1.0 : min(_2977, 1.0));
    float _2988 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _432 = isnan(1.0) ? _2988 : (isnan(_2988) ? 1.0 : min(_2988, 1.0));
    vec4 _441 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _377, cbSceneParam._m0[86u].y * _378));
    float _444 = _441.x * TEXCOORD.z;
    float _445 = dot(vec3(_349, _350, _351), vec3(_325, _326, _327));
    float _448 = _445 * 2.0;
    float _452 = (_448 * _349) - _325;
    float _453 = (_448 * _350) - _326;
    float _454 = (_448 * _351) - _327;
    float _476 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _480 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _484 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _786;
    float _788;
    float _789;
    float _790;
    float _791;
    float _792;
    float _793;
    float _794;
    float _795;
    float _796;
    float _797;
    float _798;
    float _799;
    float _800;
    float _801;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _511 = fma(_484, cbModelParam._m0[26u].z, fma(_480, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _476));
        float _515 = fma(_484, cbModelParam._m0[27u].z, fma(_480, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _476));
        float _519 = fma(_484, cbModelParam._m0[28u].z, fma(_480, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _476));
        float _544 = _476 + _349;
        float _545 = _480 + _350;
        float _546 = _484 + _351;
        float _556 = fma(_546, cbModelParam._m0[26u].z, fma(_545, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _544)) - _511;
        float _557 = fma(_546, cbModelParam._m0[27u].z, fma(_545, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _544)) - _515;
        float _558 = fma(_546, cbModelParam._m0[28u].z, fma(_545, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _544)) - _519;
        float _562 = inversesqrt(dot(vec3(_556, _557, _558), vec3(_556, _557, _558)));
        float _575 = ((_562 * _556) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_511 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _576 = ((_562 * _557) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_515 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _577 = ((_562 * _558) / cbModelParam._m0[34u].z) + ((((((_519 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _580 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_575, _576, _577), 0.0);
        vec4 _587 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_575, _576, _577), 0.0);
        vec4 _594 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_575, _576, _577), 0.0);
        vec4 _601 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_575, _576, _577), 0.0);
        float _614 = exp2((_580.w + (-0.5)) * 20.0) * 2.0;
        float _615 = _614 * (_580.x + (-0.5));
        float _616 = _614 * (_580.y + (-0.5));
        float _617 = _614 * (_580.z + (-0.5));
        float _624 = exp2((_587.w + (-0.5)) * 20.0) * 2.0;
        float _625 = _624 * (_587.x + (-0.5));
        float _626 = _624 * (_587.y + (-0.5));
        float _627 = _624 * (_587.z + (-0.5));
        float _634 = exp2((_594.w + (-0.5)) * 20.0) * 2.0;
        float _635 = _634 * (_594.x + (-0.5));
        float _636 = _634 * (_594.y + (-0.5));
        float _637 = _634 * (_594.z + (-0.5));
        float _644 = exp2((_601.w + (-0.5)) * 20.0) * 2.0;
        float _645 = _644 * (_601.x + (-0.5));
        float _646 = _644 * (_601.y + (-0.5));
        float _647 = _644 * (_601.z + (-0.5));
        float _648 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
        float _649 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
        float _650 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
        float _651 = _615 * 0.5;
        float _652 = _625 * 0.5;
        float _653 = _635 * 0.5;
        float _654 = dot(vec3(_651, _652, _653), vec3(_651, _652, _653));
        float _659 = (_654 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_654);
        float _668 = (dot(vec3(_349, _350, _351), vec3(_659 * _651, _659 * _652, _659 * _653)) + 1.0) * 0.5;
        float _3014 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        float _678 = sqrt(((_652 * _652) + (_651 * _651)) + (_653 * _653)) / (_648 + 9.9999997473787516355514526367188e-06);
        float _3025 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
        float _679 = isnan(1.0) ? _3025 : (isnan(_3025) ? 1.0 : min(_3025, 1.0));
        float _680 = _679 * 2.0;
        float _684 = (1.0 - _679) / (_679 + 1.0);
        float _3036 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
        float _685 = isnan(1.0) ? _3036 : (isnan(_3036) ? 1.0 : min(_3036, 1.0));
        float _694 = ((((1.0 - _685) * (_680 + 2.0)) * exp2(log2(isnan(1.0) ? _3014 : (isnan(_3014) ? 1.0 : min(_3014, 1.0))) * (_680 + 1.0))) + _685) * _648;
        float _695 = _616 * 0.5;
        float _696 = _626 * 0.5;
        float _697 = _636 * 0.5;
        float _698 = dot(vec3(_695, _696, _697), vec3(_695, _696, _697));
        float _703 = (_698 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_698);
        float _711 = (dot(vec3(_349, _350, _351), vec3(_703 * _695, _703 * _696, _703 * _697)) + 1.0) * 0.5;
        float _3047 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        float _720 = sqrt(((_696 * _696) + (_695 * _695)) + (_697 * _697)) / (_649 + 9.9999997473787516355514526367188e-06);
        float _3058 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _721 = isnan(1.0) ? _3058 : (isnan(_3058) ? 1.0 : min(_3058, 1.0));
        float _722 = _721 * 2.0;
        float _726 = (1.0 - _721) / (_721 + 1.0);
        float _3069 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _727 = isnan(1.0) ? _3069 : (isnan(_3069) ? 1.0 : min(_3069, 1.0));
        float _736 = ((((1.0 - _727) * (_722 + 2.0)) * exp2(log2(isnan(1.0) ? _3047 : (isnan(_3047) ? 1.0 : min(_3047, 1.0))) * (_722 + 1.0))) + _727) * _649;
        float _737 = _617 * 0.5;
        float _738 = _627 * 0.5;
        float _739 = _637 * 0.5;
        float _740 = dot(vec3(_737, _738, _739), vec3(_737, _738, _739));
        float _745 = (_740 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_740);
        float _753 = (dot(vec3(_349, _350, _351), vec3(_745 * _737, _745 * _738, _745 * _739)) + 1.0) * 0.5;
        float _3080 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _762 = sqrt(((_738 * _738) + (_737 * _737)) + (_739 * _739)) / (_650 + 9.9999997473787516355514526367188e-06);
        float _3091 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _763 = isnan(1.0) ? _3091 : (isnan(_3091) ? 1.0 : min(_3091, 1.0));
        float _764 = _763 * 2.0;
        float _768 = (1.0 - _763) / (_763 + 1.0);
        float _3102 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _769 = isnan(1.0) ? _3102 : (isnan(_3102) ? 1.0 : min(_3102, 1.0));
        float _778 = ((((1.0 - _769) * (_764 + 2.0)) * exp2(log2(isnan(1.0) ? _3080 : (isnan(_3080) ? 1.0 : min(_3080, 1.0))) * (_764 + 1.0))) + _769) * _650;
        _786 = _617;
        _788 = _616;
        _789 = _615;
        _790 = _627;
        _791 = _626;
        _792 = _625;
        _793 = _637;
        _794 = _636;
        _795 = _635;
        _796 = _650;
        _797 = _649;
        _798 = _648;
        _799 = cbModelParam._m0[36u].z * (isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0)));
        _800 = cbModelParam._m0[36u].z * (isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0)));
        _801 = cbModelParam._m0[36u].z * (isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0)));
    }
    else
    {
        _786 = _787;
        _788 = _787;
        _789 = _787;
        _790 = _787;
        _791 = _787;
        _792 = _787;
        _793 = _787;
        _794 = _787;
        _795 = _787;
        _796 = _787;
        _797 = _787;
        _798 = _787;
        _799 = 0.0;
        _800 = 0.0;
        _801 = 0.0;
    }
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _827 = fma(_484, cbModelParam._m0[30u].z, fma(_480, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _476));
        float _831 = fma(_484, cbModelParam._m0[31u].z, fma(_480, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _476));
        float _835 = fma(_484, cbModelParam._m0[32u].z, fma(_480, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _476));
        float _858 = _476 + _349;
        float _859 = _480 + _350;
        float _860 = _484 + _351;
        float _870 = fma(_860, cbModelParam._m0[30u].z, fma(_859, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _858)) - _827;
        float _871 = fma(_860, cbModelParam._m0[31u].z, fma(_859, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _858)) - _831;
        float _872 = fma(_860, cbModelParam._m0[32u].z, fma(_859, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _858)) - _835;
        float _876 = inversesqrt(dot(vec3(_870, _871, _872), vec3(_870, _871, _872)));
        float _889 = ((_876 * _870) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_827 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _890 = ((_876 * _871) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_831 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _891 = ((_876 * _872) / cbModelParam._m0[35u].z) + ((((((_835 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _893 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_889, _890, _891), 0.0);
        vec4 _900 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_889, _890, _891), 0.0);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_889, _890, _891), 0.0);
        vec4 _914 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_889, _890, _891), 0.0);
        float _926 = exp2((_893.w + (-0.5)) * 20.0) * 2.0;
        float _927 = _926 * (_893.x + (-0.5));
        float _928 = _926 * (_893.y + (-0.5));
        float _929 = _926 * (_893.z + (-0.5));
        float _936 = exp2((_900.w + (-0.5)) * 20.0) * 2.0;
        float _937 = _936 * (_900.x + (-0.5));
        float _938 = _936 * (_900.y + (-0.5));
        float _939 = _936 * (_900.z + (-0.5));
        float _946 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _947 = _946 * (_907.x + (-0.5));
        float _948 = _946 * (_907.y + (-0.5));
        float _949 = _946 * (_907.z + (-0.5));
        float _956 = exp2((_914.w + (-0.5)) * 20.0) * 2.0;
        float _957 = _956 * (_914.x + (-0.5));
        float _958 = _956 * (_914.y + (-0.5));
        float _959 = _956 * (_914.z + (-0.5));
        float _960 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _961 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _962 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _963 = _927 * 0.5;
        float _964 = _937 * 0.5;
        float _965 = _947 * 0.5;
        float _966 = dot(vec3(_963, _964, _965), vec3(_963, _964, _965));
        float _971 = (_966 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_966);
        float _979 = (dot(vec3(_349, _350, _351), vec3(_971 * _963, _971 * _964, _971 * _965)) + 1.0) * 0.5;
        float _3143 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _988 = sqrt(((_964 * _964) + (_963 * _963)) + (_965 * _965)) / (_960 + 9.9999997473787516355514526367188e-06);
        float _3154 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3154 : (isnan(_3154) ? 1.0 : min(_3154, 1.0));
        float _990 = _989 * 2.0;
        float _994 = (1.0 - _989) / (_989 + 1.0);
        float _3165 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _995 = isnan(1.0) ? _3165 : (isnan(_3165) ? 1.0 : min(_3165, 1.0));
        float _1004 = ((((1.0 - _995) * (_990 + 2.0)) * exp2(log2(isnan(1.0) ? _3143 : (isnan(_3143) ? 1.0 : min(_3143, 1.0))) * (_990 + 1.0))) + _995) * _960;
        float _1005 = _928 * 0.5;
        float _1006 = _938 * 0.5;
        float _1007 = _948 * 0.5;
        float _1008 = dot(vec3(_1005, _1006, _1007), vec3(_1005, _1006, _1007));
        float _1013 = (_1008 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1008);
        float _1021 = (dot(vec3(_349, _350, _351), vec3(_1013 * _1005, _1013 * _1006, _1013 * _1007)) + 1.0) * 0.5;
        float _3176 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1030 = sqrt(((_1006 * _1006) + (_1005 * _1005)) + (_1007 * _1007)) / (_961 + 9.9999997473787516355514526367188e-06);
        float _3187 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0));
        float _1032 = _1031 * 2.0;
        float _1036 = (1.0 - _1031) / (_1031 + 1.0);
        float _3198 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0));
        float _1046 = ((((1.0 - _1037) * (_1032 + 2.0)) * exp2(log2(isnan(1.0) ? _3176 : (isnan(_3176) ? 1.0 : min(_3176, 1.0))) * (_1032 + 1.0))) + _1037) * _961;
        float _1047 = _929 * 0.5;
        float _1048 = _939 * 0.5;
        float _1049 = _949 * 0.5;
        float _1050 = dot(vec3(_1047, _1048, _1049), vec3(_1047, _1048, _1049));
        float _1055 = (_1050 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1050);
        float _1063 = (dot(vec3(_349, _350, _351), vec3(_1055 * _1047, _1055 * _1048, _1055 * _1049)) + 1.0) * 0.5;
        float _3209 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1072 = sqrt(((_1048 * _1048) + (_1047 * _1047)) + (_1049 * _1049)) / (_962 + 9.9999997473787516355514526367188e-06);
        float _3220 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0));
        float _1074 = _1073 * 2.0;
        float _1078 = (1.0 - _1073) / (_1073 + 1.0);
        float _3231 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0));
        float _1088 = ((((1.0 - _1079) * (_1074 + 2.0)) * exp2(log2(isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0))) * (_1074 + 1.0))) + _1079) * _962;
        _1096 = _929;
        _1097 = _928;
        _1098 = _927;
        _1099 = _939;
        _1100 = _938;
        _1101 = _937;
        _1102 = _949;
        _1103 = _948;
        _1104 = _947;
        _1105 = _962;
        _1106 = _961;
        _1107 = _960;
        _1108 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0)));
        _1109 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0)));
        _1110 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0)));
    }
    else
    {
        _1096 = _787;
        _1097 = _787;
        _1098 = _787;
        _1099 = _787;
        _1100 = _787;
        _1101 = _787;
        _1102 = _787;
        _1103 = _787;
        _1104 = _787;
        _1105 = _787;
        _1106 = _787;
        _1107 = _787;
        _1108 = 0.0;
        _1109 = 0.0;
        _1110 = 0.0;
    }
    float _1120 = (cbModelParam._m0[1u].x * (_1108 - _799)) + _799;
    float _1121 = (cbModelParam._m0[1u].x * (_1109 - _800)) + _800;
    float _1122 = (cbModelParam._m0[1u].x * (_1110 - _801)) + _801;
    float _1143 = fma(_1122, cbSceneParam._m0[89u].z, fma(_1121, cbSceneParam._m0[89u].y, _1120 * cbSceneParam._m0[89u].x));
    float _1146 = fma(_1122, cbSceneParam._m0[90u].z, fma(_1121, cbSceneParam._m0[90u].y, _1120 * cbSceneParam._m0[90u].x));
    float _1149 = fma(_1122, cbSceneParam._m0[91u].z, fma(_1121, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1120));
    float _1164 = _452 * 0.5;
    float _1165 = _453 * 0.5;
    float _1166 = _454 * 0.5;
    float _1167 = dot(vec4(_1164, _1165, _1166, 1.0), vec4(_1098, _1101, _1104, _1107));
    float _1170 = dot(vec4(_1164, _1165, _1166, 1.0), vec4(_1097, _1100, _1103, _1106));
    float _1173 = dot(vec4(_1164, _1165, _1166, 1.0), vec4(_1096, _1099, _1102, _1105));
    float _1207;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1180 = dot(vec4(_1164, _1165, _1166, 1.0), vec4(_786, _790, _793, _796));
        float _1184 = dot(vec4(_1164, _1165, _1166, 1.0), vec4(_788, _791, _794, _797));
        float _1188 = dot(vec4(_1164, _1165, _1166, 1.0), vec4(_789, _792, _795, _798));
        float _1195 = dot(vec4(cbModelParam._m0[39u]), vec4(_1164, _1165, _1166, 1.0));
        _1207 = dot(vec3(isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)), isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)), isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1195) ? 0.0 : (isnan(0.0) ? _1195 : max(0.0, _1195))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1207 = 1.0;
    }
    float _1218;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1209 = dot(vec4(cbModelParam._m0[40u]), vec4(_1164, _1165, _1166, 1.0));
        _1218 = dot(vec3(isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)), isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)), isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1209) ? 0.0 : (isnan(0.0) ? _1209 : max(0.0, _1209))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1218 = 1.0;
    }
    float _1222 = (_1218 * cbModelParam._m0[1u].x) + (_1207 * (1.0 - cbModelParam._m0[1u].x));
    float _1231 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1313;
    float _1315;
    float _1317;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1280 = fma(_484, cbModelParam._m0[13u].z, fma(_480, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _476)) + cbModelParam._m0[13u].w;
        float _1284 = fma(_484, cbModelParam._m0[14u].z, fma(_480, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _476)) + cbModelParam._m0[14u].w;
        float _1288 = fma(_484, cbModelParam._m0[15u].z, fma(_480, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _476)) + cbModelParam._m0[15u].w;
        float _1291 = fma(_454, cbModelParam._m0[13u].z, fma(_453, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _452));
        float _1294 = fma(_454, cbModelParam._m0[14u].z, fma(_453, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _452));
        float _1297 = fma(_454, cbModelParam._m0[15u].z, fma(_453, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _452));
        float _1323;
        if (_1291 > 0.0)
        {
            _1323 = abs((1.0 - _1280) / _1291);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1291 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1280 + 1.0) / _1291);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1323 = frontier_phi_16_14_ladder;
        }
        float _1529;
        if (_1294 > 0.0)
        {
            _1529 = abs((1.0 - _1284) / _1294);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1294 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1284 + 1.0) / _1294);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1529 = frontier_phi_25_21_ladder;
        }
        float _1718;
        if (_1297 > 0.0)
        {
            _1718 = abs((1.0 - _1288) / _1297);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1297 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1288 + 1.0) / _1297);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1718 = frontier_phi_37_32_ladder;
        }
        float _1720 = isnan(_1529) ? _1323 : (isnan(_1323) ? _1529 : min(_1323, _1529));
        float _1721 = isnan(_1718) ? _1720 : (isnan(_1720) ? _1718 : min(_1720, _1718));
        float _1725 = (_1721 * _1291) + _1280;
        float _1726 = (_1721 * _1294) + _1284;
        float _1727 = (_1721 * _1297) + _1288;
        float _1728 = _1721 * 9.9999997473787516355514526367188e-05;
        float _1730 = (-1.0) - _1728;
        float _1732 = _1728 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1727 > _1732) || ((_1727 < _1730) || ((_1726 > _1732) || ((_1726 < _1730) || ((_1725 < _1730) || (_1725 > _1732))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1824 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1727, cbModelParam._m0[9u].z, fma(_1726, cbModelParam._m0[9u].y, _1725 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1727, cbModelParam._m0[10u].z, fma(_1726, cbModelParam._m0[10u].y, _1725 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1727, cbModelParam._m0[11u].z, fma(_1726, cbModelParam._m0[11u].y, _1725 * cbModelParam._m0[11u].x))), _1231);
            frontier_phi_15_37_ladder = _1824.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1824.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1824.x * cbModelParam._m0[1u].y;
        }
        _1313 = frontier_phi_15_37_ladder_2;
        _1315 = frontier_phi_15_37_ladder_1;
        _1317 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1301 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_452, _453, _454), _1231);
        _1313 = _1301.x * cbModelParam._m0[1u].y;
        _1315 = _1301.y * cbModelParam._m0[1u].y;
        _1317 = _1301.z * cbModelParam._m0[1u].y;
    }
    float _1320 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1412;
    float _1414;
    float _1416;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1376 = fma(_484, cbModelParam._m0[21u].z, fma(_480, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _476)) + cbModelParam._m0[21u].w;
        float _1380 = fma(_484, cbModelParam._m0[22u].z, fma(_480, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _476)) + cbModelParam._m0[22u].w;
        float _1384 = fma(_484, cbModelParam._m0[23u].z, fma(_480, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _476)) + cbModelParam._m0[23u].w;
        float _1387 = fma(_454, cbModelParam._m0[21u].z, fma(_453, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _452));
        float _1390 = fma(_454, cbModelParam._m0[22u].z, fma(_453, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _452));
        float _1393 = fma(_454, cbModelParam._m0[23u].z, fma(_453, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _452));
        float _1534;
        if (_1387 > 0.0)
        {
            _1534 = abs((1.0 - _1376) / _1387);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1387 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1376 + 1.0) / _1387);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1534 = frontier_phi_27_23_ladder;
        }
        float _1745;
        if (_1390 > 0.0)
        {
            _1745 = abs((1.0 - _1380) / _1390);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1390 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1380 + 1.0) / _1390);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1745 = frontier_phi_39_34_ladder;
        }
        float _1896;
        if (_1393 > 0.0)
        {
            _1896 = abs((1.0 - _1384) / _1393);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1393 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1384 + 1.0) / _1393);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _1896 = frontier_phi_48_45_ladder;
        }
        float _1898 = isnan(_1745) ? _1534 : (isnan(_1534) ? _1745 : min(_1534, _1745));
        float _1899 = isnan(_1896) ? _1898 : (isnan(_1898) ? _1896 : min(_1898, _1896));
        float _1903 = (_1899 * _1387) + _1376;
        float _1904 = (_1899 * _1390) + _1380;
        float _1905 = (_1899 * _1393) + _1384;
        float _1906 = _1899 * 9.9999997473787516355514526367188e-05;
        float _1907 = (-1.0) - _1906;
        float _1909 = _1906 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1905 > _1909) || ((_1905 < _1907) || ((_1904 > _1909) || ((_1904 < _1907) || ((_1903 < _1907) || (_1903 > _1909))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2108 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1905, cbModelParam._m0[17u].z, fma(_1904, cbModelParam._m0[17u].y, _1903 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1905, cbModelParam._m0[18u].z, fma(_1904, cbModelParam._m0[18u].y, _1903 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1905, cbModelParam._m0[19u].z, fma(_1904, cbModelParam._m0[19u].y, _1903 * cbModelParam._m0[19u].x))), _1320);
            frontier_phi_24_48_ladder = _2108.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2108.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2108.x * cbModelParam._m0[1u].z;
        }
        _1412 = frontier_phi_24_48_ladder_2;
        _1414 = frontier_phi_24_48_ladder_1;
        _1416 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1396 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_452, _453, _454), _1320);
        _1412 = _1396.x * cbModelParam._m0[1u].z;
        _1414 = _1396.y * cbModelParam._m0[1u].z;
        _1416 = _1396.z * cbModelParam._m0[1u].z;
    }
    float _1428 = _444 * 0.01200000010430812835693359375;
    float _1430 = _1428 * ((cbModelParam._m0[1u].w * (_1412 - _1313)) + _1313);
    float _1431 = _1428 * ((cbModelParam._m0[1u].w * (_1414 - _1315)) + _1315);
    float _1432 = _1428 * ((cbModelParam._m0[1u].w * (_1416 - _1317)) + _1317);
    float _1435 = fma(_1432, cbSceneParam._m0[89u].z, fma(_1431, cbSceneParam._m0[89u].y, _1430 * cbSceneParam._m0[89u].x));
    float _1438 = fma(_1432, cbSceneParam._m0[90u].z, fma(_1431, cbSceneParam._m0[90u].y, _1430 * cbSceneParam._m0[90u].x));
    float _1441 = fma(_1432, cbSceneParam._m0[91u].z, fma(_1431, cbSceneParam._m0[91u].y, _1430 * cbSceneParam._m0[91u].x));
    uvec4 _1451 = floatBitsToUint(cbInstanceData._m0[_418 + 5u]);
    uint _1453 = _1451.x * 14u;
    uint _1454 = _1453 + 13u;
    float _1461 = _444 + (-1.0);
    float _1466 = (cbLight._m0[_1454].x * _1461) + 1.0;
    float _1467 = (cbLight._m0[_1454].y * _1461) + 1.0;
    float _1468 = (cbLight._m0[_1454].z * _1461) + 1.0;
    float _1469 = (cbLight._m0[_1454].w * _1461) + 1.0;
    uint _1470 = _1453 + 5u;
    float _1476 = isnan(1.0) ? _1467 : (isnan(_1467) ? 1.0 : min(_1467, 1.0));
    uint _1480 = _1453 + 4u;
    float _1487 = isnan(1.0) ? _1466 : (isnan(_1466) ? 1.0 : min(_1466, 1.0));
    uint _1491 = _1453 | 1u;
    float _1502 = dot(vec3(cbLight._m0[_1453].xyz), vec3(_349, _350, _351));
    float _1505 = dot(vec3(cbLight._m0[_1491].xyz), vec3(_349, _350, _351));
    float _3367 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
    float _3378 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
    float _1510 = (isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0))) * 0.3183098733425140380859375;
    float _1512 = (isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0))) * 0.3183098733425140380859375;
    float _1519 = ((cbLight._m0[_1470].x * _1476) * _1512) + ((cbLight._m0[_1480].x * _1487) * _1510);
    float _1520 = ((_1476 * cbLight._m0[_1470].y) * _1512) + ((_1487 * cbLight._m0[_1480].y) * _1510);
    float _1521 = ((_1476 * cbLight._m0[_1470].z) * _1512) + ((_1487 * cbLight._m0[_1480].z) * _1510);
    uvec4 _1526 = floatBitsToUint(cbLight._m0[_1453 + 12u]);
    bool _1528 = _1526.x == 0u;
    float _1539;
    float _1541;
    float _1543;
    if (_1528)
    {
        _1539 = _1519;
        _1541 = _1520;
        _1543 = _1521;
    }
    else
    {
        uint _1547 = _1453 + 6u;
        float _1563 = (dot(vec3(cbLight._m0[_1453 + 2u].xyz), vec3(_349, _350, _351)) * 0.5) + 0.5;
        float _1564 = _1563 * _1563;
        float _3389 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
        float _1566 = isnan(1.0) ? _1468 : (isnan(_1468) ? 1.0 : min(_1468, 1.0));
        _1539 = (((cbLight._m0[_1547].x * 0.3183098733425140380859375) * _1565) * _1566) + _1519;
        _1541 = (((cbLight._m0[_1547].y * 0.3183098733425140380859375) * _1565) * _1566) + _1520;
        _1543 = (((cbLight._m0[_1547].z * 0.3183098733425140380859375) * _1565) * _1566) + _1521;
    }
    bool _1546 = _1526.y == 0u;
    float _1584;
    float _1586;
    float _1588;
    if (_1546)
    {
        _1584 = _1539;
        _1586 = _1541;
        _1588 = _1543;
    }
    else
    {
        uint _1689 = _1453 + 7u;
        float _1705 = (dot(vec3(cbLight._m0[_1453 + 3u].xyz), vec3(_349, _350, _351)) * 0.5) + 0.5;
        float _1706 = _1705 * _1705;
        float _3405 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1707 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
        float _1708 = isnan(1.0) ? _1469 : (isnan(_1469) ? 1.0 : min(_1469, 1.0));
        _1584 = (((cbLight._m0[_1689].x * 0.3183098733425140380859375) * _1707) * _1708) + _1539;
        _1586 = (((cbLight._m0[_1689].y * 0.3183098733425140380859375) * _1707) * _1708) + _1541;
        _1588 = (((cbLight._m0[_1689].z * 0.3183098733425140380859375) * _1707) * _1708) + _1543;
    }
    uint _1590 = _1453 + 8u;
    float _1596 = cbLight._m0[_1453].x + _325;
    float _1597 = cbLight._m0[_1453].y + _326;
    float _1598 = cbLight._m0[_1453].z + _327;
    float _1602 = inversesqrt(dot(vec3(_1596, _1597, _1598), vec3(_1596, _1597, _1598)));
    float _1606 = dot(vec3(_349, _350, _351), vec3(cbLight._m0[_1453].xyz));
    float _3421 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
    float _1609 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
    float _3432 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _1610 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
    float _1611 = dot(vec3(cbLight._m0[_1453].xyz), vec3(_1596 * _1602, _1597 * _1602, _1598 * _1602));
    float _3443 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
    float _1622 = (exp2(log2(1.0 - (isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1628 = (0.5 / ((_1609 + 9.9999999392252902907785028219223e-09) + _1610)) * _1609;
    float _3454 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
    float _1630 = (isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0))) * 0.31831014156341552734375;
    uint _1641 = _1453 + 9u;
    float _1647 = cbLight._m0[_1491].x + _325;
    float _1648 = cbLight._m0[_1491].y + _326;
    float _1649 = cbLight._m0[_1491].z + _327;
    float _1653 = inversesqrt(dot(vec3(_1647, _1648, _1649), vec3(_1647, _1648, _1649)));
    float _1657 = dot(vec3(_349, _350, _351), vec3(cbLight._m0[_1491].xyz));
    float _3465 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
    float _1660 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
    float _1661 = dot(vec3(cbLight._m0[_1491].xyz), vec3(_1647 * _1653, _1648 * _1653, _1649 * _1653));
    float _3476 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
    float _1670 = (exp2(log2(1.0 - (isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1674 = (0.5 / ((_1660 + 9.9999999392252902907785028219223e-09) + _1610)) * _1660;
    float _3487 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
    float _1676 = (isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0))) * 0.31831014156341552734375;
    float _1686 = (((_1670 * cbLight._m0[_1641].x) * _1676) * _1476) + (((_1622 * cbLight._m0[_1590].x) * _1630) * _1487);
    float _1687 = (((_1670 * cbLight._m0[_1641].y) * _1676) * _1476) + (((_1622 * cbLight._m0[_1590].y) * _1630) * _1487);
    float _1688 = (((_1670 * cbLight._m0[_1641].z) * _1676) * _1476) + (((_1622 * cbLight._m0[_1590].z) * _1630) * _1487);
    float _1750;
    float _1752;
    float _1754;
    if (_1528)
    {
        _1750 = _1686;
        _1752 = _1687;
        _1754 = _1688;
    }
    else
    {
        uint _1756 = _1453 + 10u;
        uint _1762 = _1453 + 2u;
        float _1768 = cbLight._m0[_1762].x + _325;
        float _1769 = cbLight._m0[_1762].y + _326;
        float _1770 = cbLight._m0[_1762].z + _327;
        float _1774 = inversesqrt(dot(vec3(_1768, _1769, _1770), vec3(_1768, _1769, _1770)));
        float _1778 = dot(vec3(_349, _350, _351), vec3(cbLight._m0[_1762].xyz));
        float _3498 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1781 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
        float _1782 = dot(vec3(cbLight._m0[_1762].xyz), vec3(_1768 * _1774, _1769 * _1774, _1770 * _1774));
        float _3509 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1791 = (exp2(log2(1.0 - (isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1795 = (0.5 / ((_1781 + 9.9999999392252902907785028219223e-09) + _1610)) * _1781;
        float _3520 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1797 = (isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0))) * 0.31831014156341552734375;
        float _1798 = isnan(1.0) ? _1468 : (isnan(_1468) ? 1.0 : min(_1468, 1.0));
        _1750 = (((_1791 * cbLight._m0[_1756].x) * _1797) * _1798) + _1686;
        _1752 = (((_1791 * cbLight._m0[_1756].y) * _1797) * _1798) + _1687;
        _1754 = (((_1791 * cbLight._m0[_1756].z) * _1797) * _1798) + _1688;
    }
    float _1833;
    float _1835;
    float _1837;
    if (_1546)
    {
        _1833 = _1750;
        _1835 = _1752;
        _1837 = _1754;
    }
    else
    {
        uint _1844 = _1453 + 11u;
        uint _1850 = _1453 + 3u;
        float _1856 = cbLight._m0[_1850].x + _325;
        float _1857 = cbLight._m0[_1850].y + _326;
        float _1858 = cbLight._m0[_1850].z + _327;
        float _1862 = inversesqrt(dot(vec3(_1856, _1857, _1858), vec3(_1856, _1857, _1858)));
        float _1866 = dot(vec3(_349, _350, _351), vec3(cbLight._m0[_1850].xyz));
        float _3536 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
        float _1869 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _1870 = dot(vec3(cbLight._m0[_1850].xyz), vec3(_1856 * _1862, _1857 * _1862, _1858 * _1862));
        float _3547 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
        float _1879 = (exp2(log2(1.0 - (isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1883 = (0.5 / ((_1869 + 9.9999999392252902907785028219223e-09) + _1610)) * _1869;
        float _3558 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
        float _1885 = (isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))) * 0.31831014156341552734375;
        float _1886 = isnan(1.0) ? _1469 : (isnan(_1469) ? 1.0 : min(_1469, 1.0));
        _1833 = (((_1879 * cbLight._m0[_1844].x) * _1885) * _1886) + _1750;
        _1835 = (((_1879 * cbLight._m0[_1844].y) * _1885) * _1886) + _1752;
        _1837 = (((_1879 * cbLight._m0[_1844].z) * _1885) * _1886) + _1754;
    }
    float _2020;
    float _2022;
    float _2024;
    float _2026;
    float _2028;
    float _2030;
    if (_1451.y == 0u)
    {
        float _1961 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1962 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1961;
        float _1963 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1961;
        float _1964 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1961;
        uvec4 _1976 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1977 = _1976.x;
        uint _1988 = uint((float(_1976.y) * floor(float(uint(cbSceneParam._m0[85u].y * _378) / _1977))) + floor(float(uint(cbSceneParam._m0[85u].x * _377) / _1977)));
        float _1998 = (log2(_1964 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1999 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
        uint _2002 = uint(isnan(14.0) ? _1999 : (isnan(_1999) ? 14.0 : min(_1999, 14.0)));
        uvec4 _2007 = texelFetch(g_lightClusterGridBuffer, int(((_2002 << 2u) + (_1988 << 6u)) >> 2u));
        uint _2008 = _2007.x;
        uint _2009 = _1976.z;
        float _2113;
        float _2115;
        float _2117;
        float _2119;
        float _2121;
        float _2123;
        if (((((1u << ((_2009 >> 4u) & 15u)) + 4294967295u) & _2008) == 0u) || ((_2009 & 240u) == 0u))
        {
            _2113 = 0.0;
            _2115 = 0.0;
            _2117 = 0.0;
            _2119 = 0.0;
            _2121 = 0.0;
            _2123 = 0.0;
        }
        else
        {
            float _2114;
            float _2116;
            float _2118;
            float _2120;
            float _2122;
            float _2124;
            float _2255 = 0.0;
            float _2256 = 0.0;
            float _2257 = 0.0;
            float _2258 = 0.0;
            float _2259 = 0.0;
            float _2260 = 0.0;
            uint _2261 = 0u;
            uint _2270;
            bool _2271;
            for (;;)
            {
                _2270 = texelFetch(g_lightClassification, int((((_2002 << 5u) + (_1988 << 9u)) + (_2261 << 2u)) >> 2u)).x;
                _2271 = _2270 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2271)
                {
                    frontier_phi_63_pred = _2260;
                    frontier_phi_63_pred_1 = _2259;
                    frontier_phi_63_pred_2 = _2258;
                    frontier_phi_63_pred_3 = _2257;
                    frontier_phi_63_pred_4 = _2256;
                    frontier_phi_63_pred_5 = _2255;
                }
                else
                {
                    float _2379;
                    float _2380;
                    float _2381;
                    float _2382;
                    float _2383;
                    float _2384;
                    uint _2385;
                    _2379 = _2255;
                    _2380 = _2256;
                    _2381 = _2257;
                    _2382 = _2258;
                    _2383 = _2259;
                    _2384 = _2260;
                    _2385 = _2270;
                    float _2311;
                    float _2312;
                    float _2313;
                    float _2314;
                    float _2315;
                    float _2316;
                    for (;;)
                    {
                        uint _2389 = uint(findLSB(_2385)) + (_2261 << 5u);
                        uint _2386 = (_2385 + 4294967295u) & _2385;
                        uint _2391 = _2389 * 48u;
                        vec4 _2405 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2391)).x, texelFetch(g_PointLightRenderingBuffer, int(_2391 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2391 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2391 + 3u)).x));
                        uint _2411 = (_2389 * 48u) + 4u;
                        vec4 _2424 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2411)).x, texelFetch(g_PointLightRenderingBuffer, int(_2411 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2411 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2411 + 3u)).x));
                        uint _2430 = (_2389 * 48u) + 8u;
                        vec3 _2441 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2430)).x, texelFetch(g_PointLightRenderingBuffer, int(_2430 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2430 + 2u)).x));
                        float _2445 = _2405.x - _1962;
                        float _2446 = _2405.y - _1963;
                        float _2447 = _2405.z - _1964;
                        float _2448 = dot(vec3(_2445, _2446, _2447), vec3(_2445, _2446, _2447));
                        float _2451 = inversesqrt(_2448);
                        float _2460 = 1.0 - (_2448 * _2405.w);
                        float _3584 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
                        float _2461 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
                        float _2462 = sqrt(_2448) * _2424.w;
                        float _2465 = 1.39999997615814208984375 / (_2462 + 1.39999997615814208984375);
                        float _2466 = _2465 * _2465;
                        float _2469 = ((1.0 - _2466) * dot(vec3(_399, _402, _405), vec3(_2451 * _2445, _2451 * _2446, _2451 * _2447))) + _2466;
                        float _2472 = _2462 * _2462;
                        float _2476 = ((isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0))) * _2461) / ((_2472 * 0.699999988079071044921875) + 1.0);
                        float _2480 = (-0.0) - _1962;
                        float _2481 = (-0.0) - _1963;
                        float _2482 = (-0.0) - _1964;
                        float _2486 = inversesqrt(dot(vec3(_2480, _2481, _2482), vec3(_2480, _2481, _2482)));
                        float _2490 = dot(vec3(_399, _402, _405), vec3(_2486 * _2480, _2486 * _2481, _2486 * _2482));
                        float _3600 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
                        float _3611 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
                        float _2494 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
                        float _2498 = (0.5 / (((isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) + 9.9999999392252902907785028219223e-09) + _2494)) * _2494;
                        float _3622 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
                        float _2507 = (((isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * 3.1415927410125732421875) / ((_2472 * 2.1991131305694580078125) + 3.141590118408203125)) * _2461;
                        _2314 = (_2476 * _2424.x) + _2382;
                        _2315 = (_2476 * _2424.y) + _2383;
                        _2316 = (_2476 * _2424.z) + _2384;
                        _2311 = (_2507 * _2441.x) + _2379;
                        _2312 = (_2507 * _2441.y) + _2380;
                        _2313 = (_2507 * _2441.z) + _2381;
                        if (_2386 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2379 = _2311;
                            _2380 = _2312;
                            _2381 = _2313;
                            _2382 = _2314;
                            _2383 = _2315;
                            _2384 = _2316;
                            _2385 = _2386;
                        }
                    }
                    frontier_phi_63_pred = _2316;
                    frontier_phi_63_pred_1 = _2315;
                    frontier_phi_63_pred_2 = _2314;
                    frontier_phi_63_pred_3 = _2313;
                    frontier_phi_63_pred_4 = _2312;
                    frontier_phi_63_pred_5 = _2311;
                }
                _2124 = frontier_phi_63_pred;
                _2122 = frontier_phi_63_pred_1;
                _2120 = frontier_phi_63_pred_2;
                _2118 = frontier_phi_63_pred_3;
                _2116 = frontier_phi_63_pred_4;
                _2114 = frontier_phi_63_pred_5;
                uint _2262 = _2261 + 1u;
                if (_2262 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2255 = _2114;
                    _2256 = _2116;
                    _2257 = _2118;
                    _2258 = _2120;
                    _2259 = _2122;
                    _2260 = _2124;
                    _2261 = _2262;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2113 = _2114;
            _2115 = _2116;
            _2117 = _2118;
            _2119 = _2120;
            _2121 = _2122;
            _2123 = _2124;
        }
        uvec4 _2127 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2128 = _2127.z;
        uint _2130 = (_2128 >> 8u) & 15u;
        float _2226;
        float _2228;
        float _2230;
        float _2232;
        float _2234;
        float _2236;
        if (((4294967295u << _2130) & _2008) == 0u)
        {
            _2226 = _2113;
            _2228 = _2115;
            _2230 = _2117;
            _2232 = _2119;
            _2234 = _2121;
            _2236 = _2123;
        }
        else
        {
            float _2251 = inversesqrt(dot(vec3(_1962, _1963, _1964), vec3(_1962, _1963, _1964)));
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2130 < ((_2128 >> 12u) & 15u))
            {
                float _2227;
                float _2229;
                float _2231;
                float _2233;
                float _2235;
                float _2237;
                float _2362 = _2113;
                float _2363 = _2115;
                float _2364 = _2117;
                float _2365 = _2119;
                float _2366 = _2121;
                float _2367 = _2123;
                uint _2368 = _2130;
                uint _2377;
                bool _2378;
                for (;;)
                {
                    _2377 = texelFetch(g_lightClassification, int((((_2002 << 5u) + (_1988 << 9u)) + (_2368 << 2u)) >> 2u)).x;
                    _2378 = _2377 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2378)
                    {
                        frontier_phi_69_pred = _2367;
                        frontier_phi_69_pred_1 = _2366;
                        frontier_phi_69_pred_2 = _2365;
                        frontier_phi_69_pred_3 = _2364;
                        frontier_phi_69_pred_4 = _2363;
                        frontier_phi_69_pred_5 = _2362;
                    }
                    else
                    {
                        float _2512;
                        float _2513;
                        float _2514;
                        float _2515;
                        float _2516;
                        float _2517;
                        float _2764;
                        float _2765;
                        float _2766;
                        float _2767;
                        float _2768;
                        float _2769;
                        float _2525 = _2362;
                        float _2526 = _2363;
                        float _2527 = _2364;
                        float _2528 = _2365;
                        float _2529 = _2366;
                        float _2530 = _2367;
                        uint _2531 = _2377;
                        uint _2532;
                        vec4 _2557;
                        float _2558;
                        vec4 _2573;
                        vec3 _2585;
                        vec4 _2601;
                        vec4 _2617;
                        float _2664;
                        bool _2665;
                        for (;;)
                        {
                            uint _2542 = ((_2368 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2531));
                            _2532 = (_2531 + 4294967295u) & _2531;
                            uint _2544 = _2542 * 40u;
                            _2557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2544 + 3u)).x));
                            _2558 = _2557.w;
                            uint _2560 = (_2542 * 40u) + 4u;
                            _2573 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2560)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2560 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2560 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2560 + 3u)).x));
                            uint _2575 = (_2542 * 40u) + 8u;
                            _2585 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2575)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2575 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2575 + 2u)).x));
                            uint _2588 = (_2542 * 40u) + 16u;
                            _2601 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2588)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2588 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2588 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2588 + 3u)).x));
                            uint _2604 = (_2542 * 40u) + 20u;
                            _2617 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2604)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2604 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2604 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2604 + 3u)).x));
                            uint _2620 = (_2542 * 40u) + 24u;
                            vec4 _2633 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2620)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2620 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2620 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2620 + 3u)).x));
                            uint _2639 = (_2542 * 40u) + 28u;
                            vec4 _2652 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2639 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2639 + 3u)).x));
                            _2664 = fma(_1964, _2652.z, fma(_1963, _2652.y, _2652.x * _1962)) + _2652.w;
                            _2665 = !((fma(_1964, _2633.z, fma(_1963, _2633.y, _2633.x * _1962)) + _2633.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2665)
                            {
                                float _2692 = _2557.x - _1962;
                                float _2693 = _2557.y - _1963;
                                float _2694 = _2557.z - _1964;
                                float _2695 = dot(vec3(_2692, _2693, _2694), vec3(_2692, _2693, _2694));
                                float _2698 = inversesqrt(_2695);
                                float _2699 = _2698 * _2692;
                                float _2700 = _2698 * _2693;
                                float _2701 = _2698 * _2694;
                                float _2705 = 1.0 - (_2695 / (_2558 * _2558));
                                float _3633 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
                                float _2706 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
                                float _2710 = sqrt(_2695) * _2573.w;
                                float _2712 = 1.39999997615814208984375 / (_2710 + 1.39999997615814208984375);
                                float _2713 = _2712 * _2712;
                                float _2714 = 1.0 - _2713;
                                float _2716 = (_2714 * dot(vec3(_2699, _2700, _2701), vec3(_399, _402, _405))) + _2713;
                                float _2719 = _2710 * _2710;
                                float _2723 = (fma(_1964, _2601.z, fma(_1963, _2601.y, _2601.x * _1962)) + _2601.w) / _2664;
                                float _2724 = (fma(_1964, _2617.z, fma(_1963, _2617.y, _2617.x * _1962)) + _2617.w) / _2664;
                                float _2728 = 1.0 - dot(vec2(_2723, _2724), vec2(_2723, _2724));
                                float _3649 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
                                float _2729 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
                                float _2730 = _2729 * (((isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0))) * _2706) / ((_2719 * 0.699999988079071044921875) + 1.0));
                                float _2740 = dot(vec3(_399, _402, _405), vec3((-0.0) - (_1962 * _2251), (-0.0) - (_1963 * _2251), (-0.0) - (_1964 * _2251)));
                                float _3660 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
                                float _2748 = (_2714 * dot(vec3(_399, _402, _405), vec3(_2699, _2700, _2701))) + _2713;
                                float _3671 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
                                float _2749 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
                                float _2753 = (0.5 / (((isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) + 9.9999999392252902907785028219223e-09) + _2749)) * _2749;
                                float _3682 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
                                float _2760 = (_2729 * _2706) * (((isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * 3.1415927410125732421875) / ((_2719 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_75_pred = _2730 * _2573.z;
                                frontier_phi_75_pred_1 = _2730 * _2573.y;
                                frontier_phi_75_pred_2 = _2730 * _2573.x;
                                frontier_phi_75_pred_3 = _2760 * _2585.z;
                                frontier_phi_75_pred_4 = _2760 * _2585.y;
                                frontier_phi_75_pred_5 = _2760 * _2585.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _2769 = frontier_phi_75_pred;
                            _2768 = frontier_phi_75_pred_1;
                            _2767 = frontier_phi_75_pred_2;
                            _2766 = frontier_phi_75_pred_3;
                            _2765 = frontier_phi_75_pred_4;
                            _2764 = frontier_phi_75_pred_5;
                            _2515 = _2767 + _2528;
                            _2516 = _2768 + _2529;
                            _2517 = _2769 + _2530;
                            _2512 = _2764 + _2525;
                            _2513 = _2765 + _2526;
                            _2514 = _2766 + _2527;
                            if (_2532 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2525 = _2512;
                                _2526 = _2513;
                                _2527 = _2514;
                                _2528 = _2515;
                                _2529 = _2516;
                                _2530 = _2517;
                                _2531 = _2532;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2517;
                        frontier_phi_69_pred_1 = _2516;
                        frontier_phi_69_pred_2 = _2515;
                        frontier_phi_69_pred_3 = _2514;
                        frontier_phi_69_pred_4 = _2513;
                        frontier_phi_69_pred_5 = _2512;
                    }
                    _2237 = frontier_phi_69_pred;
                    _2235 = frontier_phi_69_pred_1;
                    _2233 = frontier_phi_69_pred_2;
                    _2231 = frontier_phi_69_pred_3;
                    _2229 = frontier_phi_69_pred_4;
                    _2227 = frontier_phi_69_pred_5;
                    uint _2369 = _2368 + 1u;
                    if (_2369 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2362 = _2227;
                        _2363 = _2229;
                        _2364 = _2231;
                        _2365 = _2233;
                        _2366 = _2235;
                        _2367 = _2237;
                        _2368 = _2369;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2237;
                frontier_phi_57_58_ladder_1 = _2235;
                frontier_phi_57_58_ladder_2 = _2233;
                frontier_phi_57_58_ladder_3 = _2231;
                frontier_phi_57_58_ladder_4 = _2229;
                frontier_phi_57_58_ladder_5 = _2227;
            }
            else
            {
                frontier_phi_57_58_ladder = _2123;
                frontier_phi_57_58_ladder_1 = _2121;
                frontier_phi_57_58_ladder_2 = _2119;
                frontier_phi_57_58_ladder_3 = _2117;
                frontier_phi_57_58_ladder_4 = _2115;
                frontier_phi_57_58_ladder_5 = _2113;
            }
            _2226 = frontier_phi_57_58_ladder_5;
            _2228 = frontier_phi_57_58_ladder_4;
            _2230 = frontier_phi_57_58_ladder_3;
            _2232 = frontier_phi_57_58_ladder_2;
            _2234 = frontier_phi_57_58_ladder_1;
            _2236 = frontier_phi_57_58_ladder;
        }
        float _2241 = isnan(1.0) ? _444 : (isnan(_444) ? 1.0 : min(_444, 1.0));
        _2020 = (_2241 * _2232) + _1584;
        _2022 = (_2241 * _2234) + _1586;
        _2024 = (_2241 * _2236) + _1588;
        _2026 = ((_2226 * 0.039999999105930328369140625) * _2241) + _1833;
        _2028 = ((_2228 * 0.039999999105930328369140625) * _2241) + _1835;
        _2030 = ((_2230 * 0.039999999105930328369140625) * _2241) + _1837;
    }
    else
    {
        _2020 = _1584;
        _2022 = _1586;
        _2024 = _1588;
        _2026 = _1833;
        _2028 = _1835;
        _2030 = _1837;
    }
    float _3698 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _3709 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _3720 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _3731 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _2048 = ((isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * (_2020 + ((isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0))) * _444))) + ((_2026 + ((isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0))) * _1222)) * cbPerFrame._m0[3u].x);
    float _2049 = ((isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * (_2022 + ((isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0))) * _444))) + ((_2028 + ((isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))) * _1222)) * cbPerFrame._m0[3u].x);
    float _2050 = ((isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_2024 + ((isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0))) * _444))) + ((_2030 + ((isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))) * _1222)) * cbPerFrame._m0[3u].x);
    float _2058 = cbInstanceData._m0[_418 + 6u].w * (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0)));
    float _2063 = _377 / cbSceneParam._m0[86u].x;
    float _2064 = _378 / cbSceneParam._m0[86u].y;
    vec4 _2078 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2063, _2064, (log2((isnan(cbSceneParam._m0[77u].w) ? _371 : (isnan(_371) ? cbSceneParam._m0[77u].w : min(_371, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2080 = _2078.x;
    float _2081 = _2078.y;
    float _2082 = _2078.z;
    float _2083 = _2078.w;
    float _2175;
    float _2177;
    float _2179;
    float _2181;
    if (_371 > cbSceneParam._m0[78u].w)
    {
        float _2138 = isnan(_371) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _371 : min(cbSceneParam._m0[80u].w, _371));
        float _2139 = _2138 / _371;
        float _2150 = _2139 * _259;
        float _2151 = _260 * _2139;
        float _2152 = (-0.0) - _2151;
        float _2153 = _2139 * _261;
        float _2155 = (cbSceneParam._m0[77u].w * _2152) / _2138;
        float _2156 = _2155 + cbSceneParam._m0[79u].w;
        float _2157 = cbSceneParam._m0[79u].w - _2151;
        float _2163 = sqrt(((_2150 * _2150) + (_2151 * _2151)) + (_2153 * _2153));
        float _2166 = (1.0 - (cbSceneParam._m0[77u].w / _2138)) * _2163;
        float _2171 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2173 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2324;
        if (abs((_2152 - _2155) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2324 = ((((_2156 > 0.0) ? exp2(_2171 * _2156) : (2.0 - exp2(_2173 * _2156))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2166;
        }
        else
        {
            float _2284 = 1.0 / cbSceneParam._m0[80u].x;
            float _2285 = isnan(_2157) ? _2156 : (isnan(_2156) ? _2157 : max(_2156, _2157));
            float _2286 = isnan(_2157) ? _2156 : (isnan(_2156) ? _2157 : min(_2156, _2157));
            float _2295 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : min(_2285, 0.0));
            float _2296 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : min(_2286, 0.0));
            _2324 = ((abs(_2163 / _2152) * cbSceneParam._m0[80u].y) * ((((_2295 - _2296) * 2.0) - ((exp2(_2171 * (isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0)))) - exp2(_2171 * (isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0))))) * _2284)) - ((exp2(_2173 * _2295) - exp2(_2173 * _2296)) * _2284))) + (_2166 * cbSceneParam._m0[80u].z);
        }
        vec4 _2326 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2063, _2064, 1.0), 0.0);
        float _2335 = exp2((_2324 * (-1.44269502162933349609375)) * (1.0 - _2326.w));
        float _2336 = log2(_2335);
        float _2352 = log2(_2083);
        _2175 = (exp2(_2352 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2336 * cbSceneParam._m0[78u].x)) * _2326.x) / cbSceneParam._m0[78u].x)) + _2080;
        _2177 = (exp2(_2352 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2336 * cbSceneParam._m0[78u].y)) * _2326.y) / cbSceneParam._m0[78u].y)) + _2081;
        _2179 = (exp2(_2352 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2336 * cbSceneParam._m0[78u].z)) * _2326.z) / cbSceneParam._m0[78u].z)) + _2082;
        _2181 = _2335 * _2083;
    }
    else
    {
        _2175 = _2080;
        _2177 = _2081;
        _2179 = _2082;
        _2181 = _2083;
    }
    float _2193 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2194 = _2193 == 3.0;
    float _2196 = log2(_2181);
    float _2203 = exp2(_2196 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0)));
    float _2204 = exp2(_2196 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0)));
    float _2205 = exp2(_2196 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0)));
    float _2214 = (_2193 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2214 * (_2194 ? _2203 : (_2203 + (cbSceneParam._m0[72u].w * _2175)));
    SV_Target.y = _2214 * (_2194 ? _2204 : (_2204 + (cbSceneParam._m0[72u].w * _2177)));
    SV_Target.z = _2214 * (_2194 ? _2205 : (_2205 + (cbSceneParam._m0[72u].w * _2179)));
    SV_Target.w = _2058;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2058;
}


