#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[18];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D MenuMiniMapColorSet_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _832;
float _3000;
float _3001;
float _3002;
float _3003;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _186 = _185 * _178;
    float _187 = _185 * _179;
    float _188 = _185 * _180;
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _193 = _192 * NORMAL.x;
    float _194 = _192 * NORMAL.y;
    float _195 = _192 * NORMAL.z;
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _200 = _199 * TANGENT.x;
    float _201 = _199 * TANGENT.y;
    float _202 = _199 * TANGENT.z;
    float _207;
    float _208;
    float _209;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _207 = (-0.0) - _193;
        _208 = (-0.0) - _194;
        _209 = (-0.0) - _195;
    }
    else
    {
        _207 = _193;
        _208 = _194;
        _209 = _195;
    }
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(MenuMiniMapColorSet_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _292 = (_284.x * 2.0) + (-1.0);
    float _294 = (_284.y * 2.0) + (-1.0);
    float _295 = dot(vec2(_292, _294), vec2(_292, _294));
    float _3012 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _301 = sqrt(1.0 - (isnan(1.0) ? _3012 : (isnan(_3012) ? 1.0 : min(_3012, 1.0))));
    float _304 = fma(_301, _207, fma(_294, _200, _292 * _186));
    float _307 = fma(_301, _208, fma(_294, _201, _292 * _187));
    float _310 = fma(_301, _209, fma(_294, _202, _292 * _188));
    float _314 = inversesqrt(dot(vec3(_304, _307, _310), vec3(_304, _307, _310)));
    float _315 = _314 * _304;
    float _316 = _314 * _307;
    float _317 = _314 * _310;
    float _321 = inversesqrt(dot(vec3(_315, _316, _317), vec3(_315, _316, _317)));
    float _328 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _329 = _328 * _263;
    float _330 = _328 * _264;
    float _331 = _328 * _265;
    float _338 = cbMtdParam._m0[9u].x - dot(vec3(_329, _330, _331), vec3(_321 * _315, _321 * _316, _321 * _317));
    float _3023 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _339 = isnan(1.0) ? _3023 : (isnan(_3023) ? 1.0 : min(_3023, 1.0));
    float _342 = fma(_317, _207, fma(_316, _200, _315 * _186));
    float _345 = fma(_317, _208, fma(_316, _201, _315 * _187));
    float _348 = fma(_317, _209, fma(_316, _202, _315 * _188));
    float _352 = inversesqrt(dot(vec3(_342, _345, _348), vec3(_342, _345, _348)));
    float _353 = _352 * _342;
    float _354 = _352 * _345;
    float _355 = _352 * _348;
    float _3034 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _356 = isnan(1.0) ? _3034 : (isnan(_3034) ? 1.0 : min(_3034, 1.0));
    float _3045 = isnan(0.0) ? cbMatDynParam._m0[17u].x : (isnan(cbMatDynParam._m0[17u].x) ? 0.0 : max(cbMatDynParam._m0[17u].x, 0.0));
    float _3056 = isnan(0.0) ? cbMatDynParam._m0[17u].y : (isnan(cbMatDynParam._m0[17u].y) ? 0.0 : max(cbMatDynParam._m0[17u].y, 0.0));
    float _3067 = isnan(0.0) ? cbMatDynParam._m0[17u].z : (isnan(cbMatDynParam._m0[17u].z) ? 0.0 : max(cbMatDynParam._m0[17u].z, 0.0));
    float _375 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _380 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _382 = _380.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _511 = sqrt(((_263 * _263) + (_264 * _264)) + (_265 * _265));
        float _517 = (cbMatDynParam._m0[5u].x * _511) + cbMatDynParam._m0[5u].y;
        float _3078 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
        float _518 = isnan(1.0) ? _3078 : (isnan(_3078) ? 1.0 : min(_3078, 1.0));
        float _522 = (cbMatDynParam._m0[5u].z * _511) + cbMatDynParam._m0[5u].w;
        float _3089 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3089 : (isnan(_3089) ? 1.0 : min(_3089, 1.0))) - _518)) + _518) < ((_382 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _394 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _395 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _415 = fma(_355, cbSceneParam._m0[5u].z, fma(_354, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _353));
    float _418 = fma(_355, cbSceneParam._m0[6u].z, fma(_354, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _353));
    float _421 = fma(_355, cbSceneParam._m0[7u].z, fma(_354, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _353));
    uint _434 = uint(roundEven(NORMAL.w)) * 13u;
    uint _436 = _434 + 9u;
    uint _437 = _436 + uint(cbMatDynParam._m0[0u].w);
    float _443 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3045 : (isnan(_3045) ? 1.0 : min(_3045, 1.0)))) * cbInstanceData._m0[_437].x;
    float _444 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3056 : (isnan(_3056) ? 1.0 : min(_3056, 1.0)))) * cbInstanceData._m0[_437].y;
    float _445 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3067 : (isnan(_3067) ? 1.0 : min(_3067, 1.0)))) * cbInstanceData._m0[_437].z;
    float _3100 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _3100 : (isnan(_3100) ? 1.0 : min(_3100, 1.0));
    float _3111 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _447 = isnan(1.0) ? _3111 : (isnan(_3111) ? 1.0 : min(_3111, 1.0));
    float _3122 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _448 = isnan(1.0) ? _3122 : (isnan(_3122) ? 1.0 : min(_3122, 1.0));
    vec4 _457 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _394, cbSceneParam._m0[86u].y * _395));
    float _460 = _457.x * TEXCOORD.z;
    float _461 = dot(vec3(_353, _354, _355), vec3(_329, _330, _331));
    float _464 = _461 * 2.0;
    float _468 = (_464 * _353) - _329;
    float _469 = (_464 * _354) - _330;
    float _470 = (_464 * _355) - _331;
    float _492 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _496 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _500 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _831;
    float _833;
    float _834;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _556 = fma(_500, cbModelParam._m0[26u].z, fma(_496, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _492));
        float _560 = fma(_500, cbModelParam._m0[27u].z, fma(_496, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _492));
        float _564 = fma(_500, cbModelParam._m0[28u].z, fma(_496, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _492));
        float _589 = _492 + _353;
        float _590 = _496 + _354;
        float _591 = _500 + _355;
        float _601 = fma(_591, cbModelParam._m0[26u].z, fma(_590, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _589)) - _556;
        float _602 = fma(_591, cbModelParam._m0[27u].z, fma(_590, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _589)) - _560;
        float _603 = fma(_591, cbModelParam._m0[28u].z, fma(_590, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _589)) - _564;
        float _607 = inversesqrt(dot(vec3(_601, _602, _603), vec3(_601, _602, _603)));
        float _620 = ((_607 * _601) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_556 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _621 = ((_607 * _602) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_560 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _622 = ((_607 * _603) / cbModelParam._m0[34u].z) + ((((((_564 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _625 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_620, _621, _622), 0.0);
        vec4 _632 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_620, _621, _622), 0.0);
        vec4 _639 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_620, _621, _622), 0.0);
        vec4 _646 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_620, _621, _622), 0.0);
        float _659 = exp2((_625.w + (-0.5)) * 20.0) * 2.0;
        float _660 = _659 * (_625.x + (-0.5));
        float _661 = _659 * (_625.y + (-0.5));
        float _662 = _659 * (_625.z + (-0.5));
        float _669 = exp2((_632.w + (-0.5)) * 20.0) * 2.0;
        float _670 = _669 * (_632.x + (-0.5));
        float _671 = _669 * (_632.y + (-0.5));
        float _672 = _669 * (_632.z + (-0.5));
        float _679 = exp2((_639.w + (-0.5)) * 20.0) * 2.0;
        float _680 = _679 * (_639.x + (-0.5));
        float _681 = _679 * (_639.y + (-0.5));
        float _682 = _679 * (_639.z + (-0.5));
        float _689 = exp2((_646.w + (-0.5)) * 20.0) * 2.0;
        float _690 = _689 * (_646.x + (-0.5));
        float _691 = _689 * (_646.y + (-0.5));
        float _692 = _689 * (_646.z + (-0.5));
        float _693 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        float _694 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        float _695 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _696 = _660 * 0.5;
        float _697 = _670 * 0.5;
        float _698 = _680 * 0.5;
        float _699 = dot(vec3(_696, _697, _698), vec3(_696, _697, _698));
        float _704 = (_699 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_699);
        float _713 = (dot(vec3(_353, _354, _355), vec3(_704 * _696, _704 * _697, _704 * _698)) + 1.0) * 0.5;
        float _3148 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _723 = sqrt(((_697 * _697) + (_696 * _696)) + (_698 * _698)) / (_693 + 9.9999997473787516355514526367188e-06);
        float _3159 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _724 = isnan(1.0) ? _3159 : (isnan(_3159) ? 1.0 : min(_3159, 1.0));
        float _725 = _724 * 2.0;
        float _729 = (1.0 - _724) / (_724 + 1.0);
        float _3170 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _730 = isnan(1.0) ? _3170 : (isnan(_3170) ? 1.0 : min(_3170, 1.0));
        float _739 = ((((1.0 - _730) * (_725 + 2.0)) * exp2(log2(isnan(1.0) ? _3148 : (isnan(_3148) ? 1.0 : min(_3148, 1.0))) * (_725 + 1.0))) + _730) * _693;
        float _740 = _661 * 0.5;
        float _741 = _671 * 0.5;
        float _742 = _681 * 0.5;
        float _743 = dot(vec3(_740, _741, _742), vec3(_740, _741, _742));
        float _748 = (_743 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_743);
        float _756 = (dot(vec3(_353, _354, _355), vec3(_748 * _740, _748 * _741, _748 * _742)) + 1.0) * 0.5;
        float _3181 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _765 = sqrt(((_741 * _741) + (_740 * _740)) + (_742 * _742)) / (_694 + 9.9999997473787516355514526367188e-06);
        float _3192 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _766 = isnan(1.0) ? _3192 : (isnan(_3192) ? 1.0 : min(_3192, 1.0));
        float _767 = _766 * 2.0;
        float _771 = (1.0 - _766) / (_766 + 1.0);
        float _3203 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _772 = isnan(1.0) ? _3203 : (isnan(_3203) ? 1.0 : min(_3203, 1.0));
        float _781 = ((((1.0 - _772) * (_767 + 2.0)) * exp2(log2(isnan(1.0) ? _3181 : (isnan(_3181) ? 1.0 : min(_3181, 1.0))) * (_767 + 1.0))) + _772) * _694;
        float _782 = _662 * 0.5;
        float _783 = _672 * 0.5;
        float _784 = _682 * 0.5;
        float _785 = dot(vec3(_782, _783, _784), vec3(_782, _783, _784));
        float _790 = (_785 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_785);
        float _798 = (dot(vec3(_353, _354, _355), vec3(_790 * _782, _790 * _783, _790 * _784)) + 1.0) * 0.5;
        float _3214 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _807 = sqrt(((_783 * _783) + (_782 * _782)) + (_784 * _784)) / (_695 + 9.9999997473787516355514526367188e-06);
        float _3225 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _808 = isnan(1.0) ? _3225 : (isnan(_3225) ? 1.0 : min(_3225, 1.0));
        float _809 = _808 * 2.0;
        float _813 = (1.0 - _808) / (_808 + 1.0);
        float _3236 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _814 = isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0));
        float _823 = ((((1.0 - _814) * (_809 + 2.0)) * exp2(log2(isnan(1.0) ? _3214 : (isnan(_3214) ? 1.0 : min(_3214, 1.0))) * (_809 + 1.0))) + _814) * _695;
        _831 = _662;
        _833 = _661;
        _834 = _660;
        _835 = _672;
        _836 = _671;
        _837 = _670;
        _838 = _682;
        _839 = _681;
        _840 = _680;
        _841 = _695;
        _842 = _694;
        _843 = _693;
        _844 = cbModelParam._m0[36u].z * (isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0)));
        _845 = cbModelParam._m0[36u].z * (isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0)));
        _846 = cbModelParam._m0[36u].z * (isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0)));
    }
    else
    {
        _831 = _832;
        _833 = _832;
        _834 = _832;
        _835 = _832;
        _836 = _832;
        _837 = _832;
        _838 = _832;
        _839 = _832;
        _840 = _832;
        _841 = _832;
        _842 = _832;
        _843 = _832;
        _844 = 0.0;
        _845 = 0.0;
        _846 = 0.0;
    }
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _875 = fma(_500, cbModelParam._m0[30u].z, fma(_496, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _492));
        float _879 = fma(_500, cbModelParam._m0[31u].z, fma(_496, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _492));
        float _883 = fma(_500, cbModelParam._m0[32u].z, fma(_496, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _492));
        float _906 = _492 + _353;
        float _907 = _496 + _354;
        float _908 = _500 + _355;
        float _918 = fma(_908, cbModelParam._m0[30u].z, fma(_907, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _906)) - _875;
        float _919 = fma(_908, cbModelParam._m0[31u].z, fma(_907, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _906)) - _879;
        float _920 = fma(_908, cbModelParam._m0[32u].z, fma(_907, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _906)) - _883;
        float _924 = inversesqrt(dot(vec3(_918, _919, _920), vec3(_918, _919, _920)));
        float _937 = ((_924 * _918) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_875 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _938 = ((_924 * _919) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_879 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _939 = ((_924 * _920) / cbModelParam._m0[35u].z) + ((((((_883 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _941 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_937, _938, _939), 0.0);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_937, _938, _939), 0.0);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_937, _938, _939), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_937, _938, _939), 0.0);
        float _974 = exp2((_941.w + (-0.5)) * 20.0) * 2.0;
        float _975 = _974 * (_941.x + (-0.5));
        float _976 = _974 * (_941.y + (-0.5));
        float _977 = _974 * (_941.z + (-0.5));
        float _984 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _985 = _984 * (_948.x + (-0.5));
        float _986 = _984 * (_948.y + (-0.5));
        float _987 = _984 * (_948.z + (-0.5));
        float _994 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_955.x + (-0.5));
        float _996 = _994 * (_955.y + (-0.5));
        float _997 = _994 * (_955.z + (-0.5));
        float _1004 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_962.x + (-0.5));
        float _1006 = _1004 * (_962.y + (-0.5));
        float _1007 = _1004 * (_962.z + (-0.5));
        float _1008 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1009 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1010 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1011 = _975 * 0.5;
        float _1012 = _985 * 0.5;
        float _1013 = _995 * 0.5;
        float _1014 = dot(vec3(_1011, _1012, _1013), vec3(_1011, _1012, _1013));
        float _1019 = (_1014 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1014);
        float _1027 = (dot(vec3(_353, _354, _355), vec3(_1019 * _1011, _1019 * _1012, _1019 * _1013)) + 1.0) * 0.5;
        float _3277 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1036 = sqrt(((_1012 * _1012) + (_1011 * _1011)) + (_1013 * _1013)) / (_1008 + 9.9999997473787516355514526367188e-06);
        float _3288 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0));
        float _1038 = _1037 * 2.0;
        float _1042 = (1.0 - _1037) / (_1037 + 1.0);
        float _3299 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0));
        float _1052 = ((((1.0 - _1043) * (_1038 + 2.0)) * exp2(log2(isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0))) * (_1038 + 1.0))) + _1043) * _1008;
        float _1053 = _976 * 0.5;
        float _1054 = _986 * 0.5;
        float _1055 = _996 * 0.5;
        float _1056 = dot(vec3(_1053, _1054, _1055), vec3(_1053, _1054, _1055));
        float _1061 = (_1056 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1056);
        float _1069 = (dot(vec3(_353, _354, _355), vec3(_1061 * _1053, _1061 * _1054, _1061 * _1055)) + 1.0) * 0.5;
        float _3310 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1078 = sqrt(((_1054 * _1054) + (_1053 * _1053)) + (_1055 * _1055)) / (_1009 + 9.9999997473787516355514526367188e-06);
        float _3321 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0));
        float _1080 = _1079 * 2.0;
        float _1084 = (1.0 - _1079) / (_1079 + 1.0);
        float _3332 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0));
        float _1094 = ((((1.0 - _1085) * (_1080 + 2.0)) * exp2(log2(isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0))) * (_1080 + 1.0))) + _1085) * _1009;
        float _1095 = _977 * 0.5;
        float _1096 = _987 * 0.5;
        float _1097 = _997 * 0.5;
        float _1098 = dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097));
        float _1103 = (_1098 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1098);
        float _1111 = (dot(vec3(_353, _354, _355), vec3(_1103 * _1095, _1103 * _1096, _1103 * _1097)) + 1.0) * 0.5;
        float _3343 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1120 = sqrt(((_1096 * _1096) + (_1095 * _1095)) + (_1097 * _1097)) / (_1010 + 9.9999997473787516355514526367188e-06);
        float _3354 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0));
        float _1122 = _1121 * 2.0;
        float _1126 = (1.0 - _1121) / (_1121 + 1.0);
        float _3365 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0));
        float _1136 = ((((1.0 - _1127) * (_1122 + 2.0)) * exp2(log2(isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0))) * (_1122 + 1.0))) + _1127) * _1010;
        _1144 = _977;
        _1145 = _976;
        _1146 = _975;
        _1147 = _987;
        _1148 = _986;
        _1149 = _985;
        _1150 = _997;
        _1151 = _996;
        _1152 = _995;
        _1153 = _1010;
        _1154 = _1009;
        _1155 = _1008;
        _1156 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0)));
        _1157 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0)));
        _1158 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0)));
    }
    else
    {
        _1144 = _832;
        _1145 = _832;
        _1146 = _832;
        _1147 = _832;
        _1148 = _832;
        _1149 = _832;
        _1150 = _832;
        _1151 = _832;
        _1152 = _832;
        _1153 = _832;
        _1154 = _832;
        _1155 = _832;
        _1156 = 0.0;
        _1157 = 0.0;
        _1158 = 0.0;
    }
    float _1168 = (cbModelParam._m0[1u].x * (_1156 - _844)) + _844;
    float _1169 = (cbModelParam._m0[1u].x * (_1157 - _845)) + _845;
    float _1170 = (cbModelParam._m0[1u].x * (_1158 - _846)) + _846;
    float _1191 = fma(_1170, cbSceneParam._m0[89u].z, fma(_1169, cbSceneParam._m0[89u].y, _1168 * cbSceneParam._m0[89u].x));
    float _1194 = fma(_1170, cbSceneParam._m0[90u].z, fma(_1169, cbSceneParam._m0[90u].y, _1168 * cbSceneParam._m0[90u].x));
    float _1197 = fma(_1170, cbSceneParam._m0[91u].z, fma(_1169, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1168));
    float _1212 = _468 * 0.5;
    float _1213 = _469 * 0.5;
    float _1214 = _470 * 0.5;
    float _1215 = dot(vec4(_1212, _1213, _1214, 1.0), vec4(_1146, _1149, _1152, _1155));
    float _1218 = dot(vec4(_1212, _1213, _1214, 1.0), vec4(_1145, _1148, _1151, _1154));
    float _1221 = dot(vec4(_1212, _1213, _1214, 1.0), vec4(_1144, _1147, _1150, _1153));
    float _1255;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1228 = dot(vec4(_1212, _1213, _1214, 1.0), vec4(_831, _835, _838, _841));
        float _1232 = dot(vec4(_1212, _1213, _1214, 1.0), vec4(_833, _836, _839, _842));
        float _1236 = dot(vec4(_1212, _1213, _1214, 1.0), vec4(_834, _837, _840, _843));
        float _1243 = dot(vec4(cbModelParam._m0[39u]), vec4(_1212, _1213, _1214, 1.0));
        _1255 = dot(vec3(isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)), isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)), isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1243) ? 0.0 : (isnan(0.0) ? _1243 : max(0.0, _1243))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1255 = 1.0;
    }
    float _1266;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1257 = dot(vec4(cbModelParam._m0[40u]), vec4(_1212, _1213, _1214, 1.0));
        _1266 = dot(vec3(isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)), isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)), isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1257) ? 0.0 : (isnan(0.0) ? _1257 : max(0.0, _1257))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1266 = 1.0;
    }
    float _1270 = (_1266 * cbModelParam._m0[1u].x) + (_1255 * (1.0 - cbModelParam._m0[1u].x));
    float _1279 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1361;
    float _1363;
    float _1365;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1328 = fma(_500, cbModelParam._m0[13u].z, fma(_496, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _492)) + cbModelParam._m0[13u].w;
        float _1332 = fma(_500, cbModelParam._m0[14u].z, fma(_496, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _492)) + cbModelParam._m0[14u].w;
        float _1336 = fma(_500, cbModelParam._m0[15u].z, fma(_496, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _492)) + cbModelParam._m0[15u].w;
        float _1339 = fma(_470, cbModelParam._m0[13u].z, fma(_469, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _468));
        float _1342 = fma(_470, cbModelParam._m0[14u].z, fma(_469, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _468));
        float _1345 = fma(_470, cbModelParam._m0[15u].z, fma(_469, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _468));
        float _1371;
        if (_1339 > 0.0)
        {
            _1371 = abs((1.0 - _1328) / _1339);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1339 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1328 + 1.0) / _1339);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1371 = frontier_phi_19_17_ladder;
        }
        float _1577;
        if (_1342 > 0.0)
        {
            _1577 = abs((1.0 - _1332) / _1342);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1342 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1332 + 1.0) / _1342);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1577 = frontier_phi_28_24_ladder;
        }
        float _1766;
        if (_1345 > 0.0)
        {
            _1766 = abs((1.0 - _1336) / _1345);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1345 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1336 + 1.0) / _1345);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1766 = frontier_phi_40_35_ladder;
        }
        float _1768 = isnan(_1577) ? _1371 : (isnan(_1371) ? _1577 : min(_1371, _1577));
        float _1769 = isnan(_1766) ? _1768 : (isnan(_1768) ? _1766 : min(_1768, _1766));
        float _1773 = (_1769 * _1339) + _1328;
        float _1774 = (_1769 * _1342) + _1332;
        float _1775 = (_1769 * _1345) + _1336;
        float _1776 = _1769 * 9.9999997473787516355514526367188e-05;
        float _1778 = (-1.0) - _1776;
        float _1780 = _1776 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1775 > _1780) || ((_1775 < _1778) || ((_1774 > _1780) || ((_1774 < _1778) || ((_1773 < _1778) || (_1773 > _1780))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1872 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1775, cbModelParam._m0[9u].z, fma(_1774, cbModelParam._m0[9u].y, _1773 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1775, cbModelParam._m0[10u].z, fma(_1774, cbModelParam._m0[10u].y, _1773 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1775, cbModelParam._m0[11u].z, fma(_1774, cbModelParam._m0[11u].y, _1773 * cbModelParam._m0[11u].x))), _1279);
            frontier_phi_18_40_ladder = _1872.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1872.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1872.x * cbModelParam._m0[1u].y;
        }
        _1361 = frontier_phi_18_40_ladder_2;
        _1363 = frontier_phi_18_40_ladder_1;
        _1365 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1349 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_468, _469, _470), _1279);
        _1361 = _1349.x * cbModelParam._m0[1u].y;
        _1363 = _1349.y * cbModelParam._m0[1u].y;
        _1365 = _1349.z * cbModelParam._m0[1u].y;
    }
    float _1368 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1460;
    float _1462;
    float _1464;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1424 = fma(_500, cbModelParam._m0[21u].z, fma(_496, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _492)) + cbModelParam._m0[21u].w;
        float _1428 = fma(_500, cbModelParam._m0[22u].z, fma(_496, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _492)) + cbModelParam._m0[22u].w;
        float _1432 = fma(_500, cbModelParam._m0[23u].z, fma(_496, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _492)) + cbModelParam._m0[23u].w;
        float _1435 = fma(_470, cbModelParam._m0[21u].z, fma(_469, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _468));
        float _1438 = fma(_470, cbModelParam._m0[22u].z, fma(_469, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _468));
        float _1441 = fma(_470, cbModelParam._m0[23u].z, fma(_469, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _468));
        float _1582;
        if (_1435 > 0.0)
        {
            _1582 = abs((1.0 - _1424) / _1435);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1435 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1424 + 1.0) / _1435);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1582 = frontier_phi_30_26_ladder;
        }
        float _1793;
        if (_1438 > 0.0)
        {
            _1793 = abs((1.0 - _1428) / _1438);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1438 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1428 + 1.0) / _1438);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1793 = frontier_phi_42_37_ladder;
        }
        float _1944;
        if (_1441 > 0.0)
        {
            _1944 = abs((1.0 - _1432) / _1441);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1441 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1432 + 1.0) / _1441);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _1944 = frontier_phi_51_48_ladder;
        }
        float _1946 = isnan(_1793) ? _1582 : (isnan(_1582) ? _1793 : min(_1582, _1793));
        float _1947 = isnan(_1944) ? _1946 : (isnan(_1946) ? _1944 : min(_1946, _1944));
        float _1951 = (_1947 * _1435) + _1424;
        float _1952 = (_1947 * _1438) + _1428;
        float _1953 = (_1947 * _1441) + _1432;
        float _1954 = _1947 * 9.9999997473787516355514526367188e-05;
        float _1955 = (-1.0) - _1954;
        float _1957 = _1954 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_1953 > _1957) || ((_1953 < _1955) || ((_1952 > _1957) || ((_1952 < _1955) || ((_1951 < _1955) || (_1951 > _1957))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2156 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1953, cbModelParam._m0[17u].z, fma(_1952, cbModelParam._m0[17u].y, _1951 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1953, cbModelParam._m0[18u].z, fma(_1952, cbModelParam._m0[18u].y, _1951 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1953, cbModelParam._m0[19u].z, fma(_1952, cbModelParam._m0[19u].y, _1951 * cbModelParam._m0[19u].x))), _1368);
            frontier_phi_27_51_ladder = _2156.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2156.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2156.x * cbModelParam._m0[1u].z;
        }
        _1460 = frontier_phi_27_51_ladder_2;
        _1462 = frontier_phi_27_51_ladder_1;
        _1464 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1444 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_468, _469, _470), _1368);
        _1460 = _1444.x * cbModelParam._m0[1u].z;
        _1462 = _1444.y * cbModelParam._m0[1u].z;
        _1464 = _1444.z * cbModelParam._m0[1u].z;
    }
    float _1476 = _460 * 0.01200000010430812835693359375;
    float _1478 = _1476 * ((cbModelParam._m0[1u].w * (_1460 - _1361)) + _1361);
    float _1479 = _1476 * ((cbModelParam._m0[1u].w * (_1462 - _1363)) + _1363);
    float _1480 = _1476 * ((cbModelParam._m0[1u].w * (_1464 - _1365)) + _1365);
    float _1483 = fma(_1480, cbSceneParam._m0[89u].z, fma(_1479, cbSceneParam._m0[89u].y, _1478 * cbSceneParam._m0[89u].x));
    float _1486 = fma(_1480, cbSceneParam._m0[90u].z, fma(_1479, cbSceneParam._m0[90u].y, _1478 * cbSceneParam._m0[90u].x));
    float _1489 = fma(_1480, cbSceneParam._m0[91u].z, fma(_1479, cbSceneParam._m0[91u].y, _1478 * cbSceneParam._m0[91u].x));
    uvec4 _1499 = floatBitsToUint(cbInstanceData._m0[_434 + 5u]);
    uint _1501 = _1499.x * 14u;
    uint _1502 = _1501 + 13u;
    float _1509 = _460 + (-1.0);
    float _1514 = (cbLight._m0[_1502].x * _1509) + 1.0;
    float _1515 = (cbLight._m0[_1502].y * _1509) + 1.0;
    float _1516 = (cbLight._m0[_1502].z * _1509) + 1.0;
    float _1517 = (cbLight._m0[_1502].w * _1509) + 1.0;
    uint _1518 = _1501 + 5u;
    float _1524 = isnan(1.0) ? _1515 : (isnan(_1515) ? 1.0 : min(_1515, 1.0));
    uint _1528 = _1501 + 4u;
    float _1535 = isnan(1.0) ? _1514 : (isnan(_1514) ? 1.0 : min(_1514, 1.0));
    uint _1539 = _1501 | 1u;
    float _1550 = dot(vec3(cbLight._m0[_1501].xyz), vec3(_353, _354, _355));
    float _1553 = dot(vec3(cbLight._m0[_1539].xyz), vec3(_353, _354, _355));
    float _3501 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
    float _3512 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
    float _1558 = (isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))) * 0.3183098733425140380859375;
    float _1560 = (isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0))) * 0.3183098733425140380859375;
    float _1567 = ((cbLight._m0[_1518].x * _1524) * _1560) + ((cbLight._m0[_1528].x * _1535) * _1558);
    float _1568 = ((_1524 * cbLight._m0[_1518].y) * _1560) + ((_1535 * cbLight._m0[_1528].y) * _1558);
    float _1569 = ((_1524 * cbLight._m0[_1518].z) * _1560) + ((_1535 * cbLight._m0[_1528].z) * _1558);
    uvec4 _1574 = floatBitsToUint(cbLight._m0[_1501 + 12u]);
    bool _1576 = _1574.x == 0u;
    float _1587;
    float _1589;
    float _1591;
    if (_1576)
    {
        _1587 = _1567;
        _1589 = _1568;
        _1591 = _1569;
    }
    else
    {
        uint _1595 = _1501 + 6u;
        float _1611 = (dot(vec3(cbLight._m0[_1501 + 2u].xyz), vec3(_353, _354, _355)) * 0.5) + 0.5;
        float _1612 = _1611 * _1611;
        float _3523 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _1614 = isnan(1.0) ? _1516 : (isnan(_1516) ? 1.0 : min(_1516, 1.0));
        _1587 = (((cbLight._m0[_1595].x * 0.3183098733425140380859375) * _1613) * _1614) + _1567;
        _1589 = (((cbLight._m0[_1595].y * 0.3183098733425140380859375) * _1613) * _1614) + _1568;
        _1591 = (((cbLight._m0[_1595].z * 0.3183098733425140380859375) * _1613) * _1614) + _1569;
    }
    bool _1594 = _1574.y == 0u;
    float _1632;
    float _1634;
    float _1636;
    if (_1594)
    {
        _1632 = _1587;
        _1634 = _1589;
        _1636 = _1591;
    }
    else
    {
        uint _1737 = _1501 + 7u;
        float _1753 = (dot(vec3(cbLight._m0[_1501 + 3u].xyz), vec3(_353, _354, _355)) * 0.5) + 0.5;
        float _1754 = _1753 * _1753;
        float _3539 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1755 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
        float _1756 = isnan(1.0) ? _1517 : (isnan(_1517) ? 1.0 : min(_1517, 1.0));
        _1632 = (((cbLight._m0[_1737].x * 0.3183098733425140380859375) * _1755) * _1756) + _1587;
        _1634 = (((cbLight._m0[_1737].y * 0.3183098733425140380859375) * _1755) * _1756) + _1589;
        _1636 = (((cbLight._m0[_1737].z * 0.3183098733425140380859375) * _1755) * _1756) + _1591;
    }
    uint _1638 = _1501 + 8u;
    float _1644 = cbLight._m0[_1501].x + _329;
    float _1645 = cbLight._m0[_1501].y + _330;
    float _1646 = cbLight._m0[_1501].z + _331;
    float _1650 = inversesqrt(dot(vec3(_1644, _1645, _1646), vec3(_1644, _1645, _1646)));
    float _1654 = dot(vec3(_353, _354, _355), vec3(cbLight._m0[_1501].xyz));
    float _3555 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
    float _1657 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
    float _3566 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _1658 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
    float _1659 = dot(vec3(cbLight._m0[_1501].xyz), vec3(_1644 * _1650, _1645 * _1650, _1646 * _1650));
    float _3577 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
    float _1670 = (exp2(log2(1.0 - (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1676 = (0.5 / ((_1657 + 9.9999999392252902907785028219223e-09) + _1658)) * _1657;
    float _3588 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
    float _1678 = (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * 0.31831014156341552734375;
    uint _1689 = _1501 + 9u;
    float _1695 = cbLight._m0[_1539].x + _329;
    float _1696 = cbLight._m0[_1539].y + _330;
    float _1697 = cbLight._m0[_1539].z + _331;
    float _1701 = inversesqrt(dot(vec3(_1695, _1696, _1697), vec3(_1695, _1696, _1697)));
    float _1705 = dot(vec3(_353, _354, _355), vec3(cbLight._m0[_1539].xyz));
    float _3599 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
    float _1708 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _1709 = dot(vec3(cbLight._m0[_1539].xyz), vec3(_1695 * _1701, _1696 * _1701, _1697 * _1701));
    float _3610 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
    float _1718 = (exp2(log2(1.0 - (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1722 = (0.5 / ((_1708 + 9.9999999392252902907785028219223e-09) + _1658)) * _1708;
    float _3621 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
    float _1724 = (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * 0.31831014156341552734375;
    float _1734 = (((_1718 * cbLight._m0[_1689].x) * _1724) * _1524) + (((_1670 * cbLight._m0[_1638].x) * _1678) * _1535);
    float _1735 = (((_1718 * cbLight._m0[_1689].y) * _1724) * _1524) + (((_1670 * cbLight._m0[_1638].y) * _1678) * _1535);
    float _1736 = (((_1718 * cbLight._m0[_1689].z) * _1724) * _1524) + (((_1670 * cbLight._m0[_1638].z) * _1678) * _1535);
    float _1798;
    float _1800;
    float _1802;
    if (_1576)
    {
        _1798 = _1734;
        _1800 = _1735;
        _1802 = _1736;
    }
    else
    {
        uint _1804 = _1501 + 10u;
        uint _1810 = _1501 + 2u;
        float _1816 = cbLight._m0[_1810].x + _329;
        float _1817 = cbLight._m0[_1810].y + _330;
        float _1818 = cbLight._m0[_1810].z + _331;
        float _1822 = inversesqrt(dot(vec3(_1816, _1817, _1818), vec3(_1816, _1817, _1818)));
        float _1826 = dot(vec3(_353, _354, _355), vec3(cbLight._m0[_1810].xyz));
        float _3632 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
        float _1829 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1830 = dot(vec3(cbLight._m0[_1810].xyz), vec3(_1816 * _1822, _1817 * _1822, _1818 * _1822));
        float _3643 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
        float _1839 = (exp2(log2(1.0 - (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1843 = (0.5 / ((_1829 + 9.9999999392252902907785028219223e-09) + _1658)) * _1829;
        float _3654 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
        float _1845 = (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * 0.31831014156341552734375;
        float _1846 = isnan(1.0) ? _1516 : (isnan(_1516) ? 1.0 : min(_1516, 1.0));
        _1798 = (((_1839 * cbLight._m0[_1804].x) * _1845) * _1846) + _1734;
        _1800 = (((_1839 * cbLight._m0[_1804].y) * _1845) * _1846) + _1735;
        _1802 = (((_1839 * cbLight._m0[_1804].z) * _1845) * _1846) + _1736;
    }
    float _1881;
    float _1883;
    float _1885;
    if (_1594)
    {
        _1881 = _1798;
        _1883 = _1800;
        _1885 = _1802;
    }
    else
    {
        uint _1892 = _1501 + 11u;
        uint _1898 = _1501 + 3u;
        float _1904 = cbLight._m0[_1898].x + _329;
        float _1905 = cbLight._m0[_1898].y + _330;
        float _1906 = cbLight._m0[_1898].z + _331;
        float _1910 = inversesqrt(dot(vec3(_1904, _1905, _1906), vec3(_1904, _1905, _1906)));
        float _1914 = dot(vec3(_353, _354, _355), vec3(cbLight._m0[_1898].xyz));
        float _3670 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
        float _1917 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _1918 = dot(vec3(cbLight._m0[_1898].xyz), vec3(_1904 * _1910, _1905 * _1910, _1906 * _1910));
        float _3681 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1927 = (exp2(log2(1.0 - (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1931 = (0.5 / ((_1917 + 9.9999999392252902907785028219223e-09) + _1658)) * _1917;
        float _3692 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
        float _1933 = (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * 0.31831014156341552734375;
        float _1934 = isnan(1.0) ? _1517 : (isnan(_1517) ? 1.0 : min(_1517, 1.0));
        _1881 = (((_1927 * cbLight._m0[_1892].x) * _1933) * _1934) + _1798;
        _1883 = (((_1927 * cbLight._m0[_1892].y) * _1933) * _1934) + _1800;
        _1885 = (((_1927 * cbLight._m0[_1892].z) * _1933) * _1934) + _1802;
    }
    float _2068;
    float _2070;
    float _2072;
    float _2074;
    float _2076;
    float _2078;
    if (_1499.y == 0u)
    {
        float _2009 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2010 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2009;
        float _2011 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2009;
        float _2012 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2009;
        uvec4 _2024 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2025 = _2024.x;
        uint _2036 = uint((float(_2024.y) * floor(float(uint(cbSceneParam._m0[85u].y * _395) / _2025))) + floor(float(uint(cbSceneParam._m0[85u].x * _394) / _2025)));
        float _2046 = (log2(_2012 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2047 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
        uint _2050 = uint(isnan(14.0) ? _2047 : (isnan(_2047) ? 14.0 : min(_2047, 14.0)));
        uvec4 _2055 = texelFetch(g_lightClusterGridBuffer, int(((_2050 << 2u) + (_2036 << 6u)) >> 2u));
        uint _2056 = _2055.x;
        uint _2057 = _2024.z;
        float _2161;
        float _2163;
        float _2165;
        float _2167;
        float _2169;
        float _2171;
        if (((((1u << ((_2057 >> 4u) & 15u)) + 4294967295u) & _2056) == 0u) || ((_2057 & 240u) == 0u))
        {
            _2161 = 0.0;
            _2163 = 0.0;
            _2165 = 0.0;
            _2167 = 0.0;
            _2169 = 0.0;
            _2171 = 0.0;
        }
        else
        {
            float _2162;
            float _2164;
            float _2166;
            float _2168;
            float _2170;
            float _2172;
            float _2312 = 0.0;
            float _2313 = 0.0;
            float _2314 = 0.0;
            float _2315 = 0.0;
            float _2316 = 0.0;
            float _2317 = 0.0;
            uint _2318 = 0u;
            uint _2327;
            bool _2328;
            for (;;)
            {
                _2327 = texelFetch(g_lightClassification, int((((_2050 << 5u) + (_2036 << 9u)) + (_2318 << 2u)) >> 2u)).x;
                _2328 = _2327 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2328)
                {
                    frontier_phi_68_pred = _2314;
                    frontier_phi_68_pred_1 = _2317;
                    frontier_phi_68_pred_2 = _2316;
                    frontier_phi_68_pred_3 = _2315;
                    frontier_phi_68_pred_4 = _2313;
                    frontier_phi_68_pred_5 = _2312;
                }
                else
                {
                    float _2457;
                    float _2458;
                    float _2459;
                    float _2460;
                    float _2461;
                    float _2462;
                    uint _2463;
                    _2457 = _2312;
                    _2458 = _2313;
                    _2459 = _2314;
                    _2460 = _2315;
                    _2461 = _2316;
                    _2462 = _2317;
                    _2463 = _2327;
                    float _2384;
                    float _2385;
                    float _2386;
                    float _2387;
                    float _2388;
                    float _2389;
                    for (;;)
                    {
                        uint _2467 = uint(findLSB(_2463)) + (_2318 << 5u);
                        uint _2464 = (_2463 + 4294967295u) & _2463;
                        uint _2469 = _2467 * 48u;
                        vec4 _2483 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2469)).x, texelFetch(g_PointLightRenderingBuffer, int(_2469 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2469 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2469 + 3u)).x));
                        uint _2489 = (_2467 * 48u) + 4u;
                        vec4 _2502 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2489)).x, texelFetch(g_PointLightRenderingBuffer, int(_2489 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2489 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2489 + 3u)).x));
                        uint _2508 = (_2467 * 48u) + 8u;
                        vec3 _2519 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2508)).x, texelFetch(g_PointLightRenderingBuffer, int(_2508 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2508 + 2u)).x));
                        float _2523 = _2483.x - _2010;
                        float _2524 = _2483.y - _2011;
                        float _2525 = _2483.z - _2012;
                        float _2526 = dot(vec3(_2523, _2524, _2525), vec3(_2523, _2524, _2525));
                        float _2529 = inversesqrt(_2526);
                        float _2538 = 1.0 - (_2526 * _2483.w);
                        float _3718 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
                        float _2539 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
                        float _2540 = sqrt(_2526) * _2502.w;
                        float _2543 = 1.39999997615814208984375 / (_2540 + 1.39999997615814208984375);
                        float _2544 = _2543 * _2543;
                        float _2547 = ((1.0 - _2544) * dot(vec3(_415, _418, _421), vec3(_2529 * _2523, _2529 * _2524, _2529 * _2525))) + _2544;
                        float _2550 = _2540 * _2540;
                        float _2554 = ((isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0))) * _2539) / ((_2550 * 0.699999988079071044921875) + 1.0);
                        float _2558 = (-0.0) - _2010;
                        float _2559 = (-0.0) - _2011;
                        float _2560 = (-0.0) - _2012;
                        float _2564 = inversesqrt(dot(vec3(_2558, _2559, _2560), vec3(_2558, _2559, _2560)));
                        float _2568 = dot(vec3(_415, _418, _421), vec3(_2564 * _2558, _2564 * _2559, _2564 * _2560));
                        float _3734 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
                        float _3745 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
                        float _2572 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
                        float _2576 = (0.5 / (((isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) + 9.9999999392252902907785028219223e-09) + _2572)) * _2572;
                        float _3756 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
                        float _2585 = (((isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * 3.1415927410125732421875) / ((_2550 * 2.1991131305694580078125) + 3.141590118408203125)) * _2539;
                        _2387 = (_2554 * _2502.x) + _2460;
                        _2388 = (_2554 * _2502.y) + _2461;
                        _2389 = (_2554 * _2502.z) + _2462;
                        _2384 = (_2585 * _2519.x) + _2457;
                        _2385 = (_2585 * _2519.y) + _2458;
                        _2386 = (_2585 * _2519.z) + _2459;
                        if (_2464 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2457 = _2384;
                            _2458 = _2385;
                            _2459 = _2386;
                            _2460 = _2387;
                            _2461 = _2388;
                            _2462 = _2389;
                            _2463 = _2464;
                        }
                    }
                    frontier_phi_68_pred = _2386;
                    frontier_phi_68_pred_1 = _2389;
                    frontier_phi_68_pred_2 = _2388;
                    frontier_phi_68_pred_3 = _2387;
                    frontier_phi_68_pred_4 = _2385;
                    frontier_phi_68_pred_5 = _2384;
                }
                _2166 = frontier_phi_68_pred;
                _2172 = frontier_phi_68_pred_1;
                _2170 = frontier_phi_68_pred_2;
                _2168 = frontier_phi_68_pred_3;
                _2164 = frontier_phi_68_pred_4;
                _2162 = frontier_phi_68_pred_5;
                uint _2319 = _2318 + 1u;
                if (_2319 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2312 = _2162;
                    _2313 = _2164;
                    _2314 = _2166;
                    _2315 = _2168;
                    _2316 = _2170;
                    _2317 = _2172;
                    _2318 = _2319;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2161 = _2162;
            _2163 = _2164;
            _2165 = _2166;
            _2167 = _2168;
            _2169 = _2170;
            _2171 = _2172;
        }
        uvec4 _2175 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2176 = _2175.z;
        uint _2178 = (_2176 >> 8u) & 15u;
        float _2283;
        float _2285;
        float _2287;
        float _2289;
        float _2291;
        float _2293;
        if (((4294967295u << _2178) & _2056) == 0u)
        {
            _2283 = _2161;
            _2285 = _2163;
            _2287 = _2165;
            _2289 = _2167;
            _2291 = _2169;
            _2293 = _2171;
        }
        else
        {
            float _2308 = inversesqrt(dot(vec3(_2010, _2011, _2012), vec3(_2010, _2011, _2012)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2178 < ((_2176 >> 12u) & 15u))
            {
                float _2284;
                float _2286;
                float _2288;
                float _2290;
                float _2292;
                float _2294;
                float _2440 = _2161;
                float _2441 = _2163;
                float _2442 = _2165;
                float _2443 = _2167;
                float _2444 = _2169;
                float _2445 = _2171;
                uint _2446 = _2178;
                uint _2455;
                bool _2456;
                for (;;)
                {
                    _2455 = texelFetch(g_lightClassification, int((((_2050 << 5u) + (_2036 << 9u)) + (_2446 << 2u)) >> 2u)).x;
                    _2456 = _2455 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2456)
                    {
                        frontier_phi_79_pred = _2445;
                        frontier_phi_79_pred_1 = _2444;
                        frontier_phi_79_pred_2 = _2443;
                        frontier_phi_79_pred_3 = _2442;
                        frontier_phi_79_pred_4 = _2441;
                        frontier_phi_79_pred_5 = _2440;
                    }
                    else
                    {
                        float _2599;
                        float _2600;
                        float _2601;
                        float _2602;
                        float _2603;
                        float _2604;
                        float _2851;
                        float _2852;
                        float _2853;
                        float _2854;
                        float _2855;
                        float _2856;
                        float _2612 = _2440;
                        float _2613 = _2441;
                        float _2614 = _2442;
                        float _2615 = _2443;
                        float _2616 = _2444;
                        float _2617 = _2445;
                        uint _2618 = _2455;
                        uint _2619;
                        vec4 _2644;
                        float _2645;
                        vec4 _2660;
                        vec3 _2672;
                        vec4 _2688;
                        vec4 _2704;
                        float _2751;
                        bool _2752;
                        for (;;)
                        {
                            uint _2629 = ((_2446 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2618));
                            _2619 = (_2618 + 4294967295u) & _2618;
                            uint _2631 = _2629 * 40u;
                            _2644 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2631 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2631 + 3u)).x));
                            _2645 = _2644.w;
                            uint _2647 = (_2629 * 40u) + 4u;
                            _2660 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2647)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2647 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2647 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2647 + 3u)).x));
                            uint _2662 = (_2629 * 40u) + 8u;
                            _2672 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2662)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2662 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2662 + 2u)).x));
                            uint _2675 = (_2629 * 40u) + 16u;
                            _2688 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2675)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2675 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2675 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2675 + 3u)).x));
                            uint _2691 = (_2629 * 40u) + 20u;
                            _2704 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2691)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2691 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2691 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2691 + 3u)).x));
                            uint _2707 = (_2629 * 40u) + 24u;
                            vec4 _2720 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2707)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2707 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2707 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2707 + 3u)).x));
                            uint _2726 = (_2629 * 40u) + 28u;
                            vec4 _2739 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2726)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2726 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2726 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2726 + 3u)).x));
                            _2751 = fma(_2012, _2739.z, fma(_2011, _2739.y, _2739.x * _2010)) + _2739.w;
                            _2752 = !((fma(_2012, _2720.z, fma(_2011, _2720.y, _2720.x * _2010)) + _2720.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2752)
                            {
                                float _2779 = _2644.x - _2010;
                                float _2780 = _2644.y - _2011;
                                float _2781 = _2644.z - _2012;
                                float _2782 = dot(vec3(_2779, _2780, _2781), vec3(_2779, _2780, _2781));
                                float _2785 = inversesqrt(_2782);
                                float _2786 = _2785 * _2779;
                                float _2787 = _2785 * _2780;
                                float _2788 = _2785 * _2781;
                                float _2792 = 1.0 - (_2782 / (_2645 * _2645));
                                float _3767 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
                                float _2793 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
                                float _2797 = sqrt(_2782) * _2660.w;
                                float _2799 = 1.39999997615814208984375 / (_2797 + 1.39999997615814208984375);
                                float _2800 = _2799 * _2799;
                                float _2801 = 1.0 - _2800;
                                float _2803 = (_2801 * dot(vec3(_2786, _2787, _2788), vec3(_415, _418, _421))) + _2800;
                                float _2806 = _2797 * _2797;
                                float _2810 = (fma(_2012, _2688.z, fma(_2011, _2688.y, _2688.x * _2010)) + _2688.w) / _2751;
                                float _2811 = (fma(_2012, _2704.z, fma(_2011, _2704.y, _2704.x * _2010)) + _2704.w) / _2751;
                                float _2815 = 1.0 - dot(vec2(_2810, _2811), vec2(_2810, _2811));
                                float _3783 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
                                float _2816 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
                                float _2817 = _2816 * (((isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0))) * _2793) / ((_2806 * 0.699999988079071044921875) + 1.0));
                                float _2827 = dot(vec3(_415, _418, _421), vec3((-0.0) - (_2010 * _2308), (-0.0) - (_2011 * _2308), (-0.0) - (_2012 * _2308)));
                                float _3794 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
                                float _2835 = (_2801 * dot(vec3(_415, _418, _421), vec3(_2786, _2787, _2788))) + _2800;
                                float _3805 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
                                float _2836 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
                                float _2840 = (0.5 / (((isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) + 9.9999999392252902907785028219223e-09) + _2836)) * _2836;
                                float _3816 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
                                float _2847 = (_2816 * _2793) * (((isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * 3.1415927410125732421875) / ((_2806 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_85_pred = _2817 * _2660.z;
                                frontier_phi_85_pred_1 = _2817 * _2660.y;
                                frontier_phi_85_pred_2 = _2817 * _2660.x;
                                frontier_phi_85_pred_3 = _2847 * _2672.z;
                                frontier_phi_85_pred_4 = _2847 * _2672.y;
                                frontier_phi_85_pred_5 = _2847 * _2672.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _2856 = frontier_phi_85_pred;
                            _2855 = frontier_phi_85_pred_1;
                            _2854 = frontier_phi_85_pred_2;
                            _2853 = frontier_phi_85_pred_3;
                            _2852 = frontier_phi_85_pred_4;
                            _2851 = frontier_phi_85_pred_5;
                            _2602 = _2854 + _2615;
                            _2603 = _2855 + _2616;
                            _2604 = _2856 + _2617;
                            _2599 = _2851 + _2612;
                            _2600 = _2852 + _2613;
                            _2601 = _2853 + _2614;
                            if (_2619 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2612 = _2599;
                                _2613 = _2600;
                                _2614 = _2601;
                                _2615 = _2602;
                                _2616 = _2603;
                                _2617 = _2604;
                                _2618 = _2619;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2604;
                        frontier_phi_79_pred_1 = _2603;
                        frontier_phi_79_pred_2 = _2602;
                        frontier_phi_79_pred_3 = _2601;
                        frontier_phi_79_pred_4 = _2600;
                        frontier_phi_79_pred_5 = _2599;
                    }
                    _2294 = frontier_phi_79_pred;
                    _2292 = frontier_phi_79_pred_1;
                    _2290 = frontier_phi_79_pred_2;
                    _2288 = frontier_phi_79_pred_3;
                    _2286 = frontier_phi_79_pred_4;
                    _2284 = frontier_phi_79_pred_5;
                    uint _2447 = _2446 + 1u;
                    if (_2447 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2440 = _2284;
                        _2441 = _2286;
                        _2442 = _2288;
                        _2443 = _2290;
                        _2444 = _2292;
                        _2445 = _2294;
                        _2446 = _2447;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2290;
                frontier_phi_60_61_ladder_1 = _2294;
                frontier_phi_60_61_ladder_2 = _2292;
                frontier_phi_60_61_ladder_3 = _2288;
                frontier_phi_60_61_ladder_4 = _2286;
                frontier_phi_60_61_ladder_5 = _2284;
            }
            else
            {
                frontier_phi_60_61_ladder = _2167;
                frontier_phi_60_61_ladder_1 = _2171;
                frontier_phi_60_61_ladder_2 = _2169;
                frontier_phi_60_61_ladder_3 = _2165;
                frontier_phi_60_61_ladder_4 = _2163;
                frontier_phi_60_61_ladder_5 = _2161;
            }
            _2283 = frontier_phi_60_61_ladder_5;
            _2285 = frontier_phi_60_61_ladder_4;
            _2287 = frontier_phi_60_61_ladder_3;
            _2289 = frontier_phi_60_61_ladder;
            _2291 = frontier_phi_60_61_ladder_2;
            _2293 = frontier_phi_60_61_ladder_1;
        }
        float _2298 = isnan(1.0) ? _460 : (isnan(_460) ? 1.0 : min(_460, 1.0));
        _2068 = (_2298 * _2289) + _1632;
        _2070 = (_2298 * _2291) + _1634;
        _2072 = (_2298 * _2293) + _1636;
        _2074 = ((_2283 * 0.039999999105930328369140625) * _2298) + _1881;
        _2076 = ((_2285 * 0.039999999105930328369140625) * _2298) + _1883;
        _2078 = ((_2287 * 0.039999999105930328369140625) * _2298) + _1885;
    }
    else
    {
        _2068 = _1632;
        _2070 = _1634;
        _2072 = _1636;
        _2074 = _1881;
        _2076 = _1883;
        _2078 = _1885;
    }
    float _3832 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _3843 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _3854 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _3865 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _2096 = ((isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (_2068 + ((isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0))) * _460))) + ((_2074 + ((isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))) * _1270)) * cbPerFrame._m0[3u].x);
    float _2097 = ((isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * (_2070 + ((isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0))) * _460))) + ((_2076 + ((isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))) * _1270)) * cbPerFrame._m0[3u].x);
    float _2098 = ((isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_2072 + ((isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0))) * _460))) + ((_2078 + ((isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))) * _1270)) * cbPerFrame._m0[3u].x);
    float _2099 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2100 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2101 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2106 = cbInstanceData._m0[_434 + 6u].w * (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0)));
    float _2111 = _394 / cbSceneParam._m0[86u].x;
    float _2112 = _395 / cbSceneParam._m0[86u].y;
    vec4 _2126 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2111, _2112, (log2((isnan(cbSceneParam._m0[77u].w) ? _375 : (isnan(_375) ? cbSceneParam._m0[77u].w : min(_375, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2128 = _2126.x;
    float _2129 = _2126.y;
    float _2130 = _2126.z;
    float _2131 = _2126.w;
    float _2223;
    float _2225;
    float _2227;
    float _2229;
    if (_375 > cbSceneParam._m0[78u].w)
    {
        float _2186 = isnan(_375) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _375 : min(cbSceneParam._m0[80u].w, _375));
        float _2187 = _2186 / _375;
        float _2198 = _2187 * _263;
        float _2199 = _264 * _2187;
        float _2200 = (-0.0) - _2199;
        float _2201 = _2187 * _265;
        float _2203 = (cbSceneParam._m0[77u].w * _2200) / _2186;
        float _2204 = _2203 + cbSceneParam._m0[79u].w;
        float _2205 = cbSceneParam._m0[79u].w - _2199;
        float _2211 = sqrt(((_2198 * _2198) + (_2199 * _2199)) + (_2201 * _2201));
        float _2214 = (1.0 - (cbSceneParam._m0[77u].w / _2186)) * _2211;
        float _2219 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2221 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2397;
        if (abs((_2200 - _2203) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2397 = ((((_2204 > 0.0) ? exp2(_2219 * _2204) : (2.0 - exp2(_2221 * _2204))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2214;
        }
        else
        {
            float _2341 = 1.0 / cbSceneParam._m0[80u].x;
            float _2342 = isnan(_2205) ? _2204 : (isnan(_2204) ? _2205 : max(_2204, _2205));
            float _2343 = isnan(_2205) ? _2204 : (isnan(_2204) ? _2205 : min(_2204, _2205));
            float _2352 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : min(_2342, 0.0));
            float _2353 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : min(_2343, 0.0));
            _2397 = ((abs(_2211 / _2200) * cbSceneParam._m0[80u].y) * ((((_2352 - _2353) * 2.0) - ((exp2(_2219 * (isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0)))) - exp2(_2219 * (isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0))))) * _2341)) - ((exp2(_2221 * _2352) - exp2(_2221 * _2353)) * _2341))) + (_2214 * cbSceneParam._m0[80u].z);
        }
        vec4 _2399 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2111, _2112, 1.0), 0.0);
        float _2408 = exp2((_2397 * (-1.44269502162933349609375)) * (1.0 - _2399.w));
        float _2409 = log2(_2408);
        float _2425 = log2(_2131);
        _2223 = (exp2(_2425 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2409 * cbSceneParam._m0[78u].x)) * _2399.x) / cbSceneParam._m0[78u].x)) + _2128;
        _2225 = (exp2(_2425 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2409 * cbSceneParam._m0[78u].y)) * _2399.y) / cbSceneParam._m0[78u].y)) + _2129;
        _2227 = (exp2(_2425 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2409 * cbSceneParam._m0[78u].z)) * _2399.z) / cbSceneParam._m0[78u].z)) + _2130;
        _2229 = _2408 * _2131;
    }
    else
    {
        _2223 = _2128;
        _2225 = _2129;
        _2227 = _2130;
        _2229 = _2131;
    }
    bool _2435;
    vec4 _2239;
    vec4 _2262;
    float _2264;
    float _2268;
    float _2269;
    float _2270;
    float _2271;
    bool _2282;
    for (;;)
    {
        _2239 = cbMatDynParam._m0[0u];
        float _2241 = roundEven(_2239.y);
        bool _2242 = _2241 == 3.0;
        float _2244 = log2(_2229);
        float _2251 = exp2(_2244 * cbSceneParam._m0[78u].x) * _2099;
        float _2252 = exp2(_2244 * cbSceneParam._m0[78u].y) * _2100;
        float _2253 = exp2(_2244 * cbSceneParam._m0[78u].z) * _2101;
        float _2260 = _382 + (-0.5);
        _2262 = cbMtdParam._m0[1u];
        _2264 = _2262.y * _2260;
        float _2267 = (_2241 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2268 = _2267 * (_2242 ? _2251 : (_2251 + (cbSceneParam._m0[72u].w * _2223)));
        _2269 = _2267 * (_2242 ? _2252 : (_2252 + (cbSceneParam._m0[72u].w * _2225)));
        _2270 = _2267 * (_2242 ? _2253 : (_2253 + (cbSceneParam._m0[72u].w * _2227)));
        _2271 = _2260 * 0.999000012874603271484375;
        _2282 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2282)
        {
            if ((cbInstanceData._m0[_434 + 7u].x + _2271) < 0.5)
            {
                _2435 = true;
                break;
            }
        }
        uint _2376 = _436 + uint(_2239.w);
        if ((cbInstanceData._m0[_2376].w < 1.0) && ((cbInstanceData._m0[_2376].w + _2271) < 0.5))
        {
            _2435 = true;
            break;
        }
        if ((_2264 + 1.0) < _2262.x)
        {
            _2435 = true;
            break;
        }
        _2435 = false;
        break;
    }
    float _2590;
    if (_2435)
    {
        discard_state = true;
        _2590 = 0.0;
    }
    else
    {
        _2590 = _2106;
    }
    SV_Target.x = _2268;
    SV_Target.y = _2269;
    SV_Target.z = _2270;
    SV_Target.w = _2590;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2106;
    discard_exit();
}


