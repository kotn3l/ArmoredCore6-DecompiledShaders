#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[18];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D MenuMiniMapColorSet_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _834;
float _3026;
float _3027;
float _3028;
float _3029;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _188 = _187 * _180;
    float _189 = _187 * _181;
    float _190 = _187 * _182;
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _202 = _201 * TANGENT.x;
    float _203 = _201 * TANGENT.y;
    float _204 = _201 * TANGENT.z;
    float _209;
    float _210;
    float _211;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _209 = (-0.0) - _195;
        _210 = (-0.0) - _196;
        _211 = (-0.0) - _197;
    }
    else
    {
        _209 = _195;
        _210 = _196;
        _211 = _197;
    }
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _286 = texture(sampler2D(MenuMiniMapColorSet_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _294 = (_286.x * 2.0) + (-1.0);
    float _296 = (_286.y * 2.0) + (-1.0);
    float _297 = dot(vec2(_294, _296), vec2(_294, _296));
    float _3038 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _303 = sqrt(1.0 - (isnan(1.0) ? _3038 : (isnan(_3038) ? 1.0 : min(_3038, 1.0))));
    float _306 = fma(_303, _209, fma(_296, _202, _294 * _188));
    float _309 = fma(_303, _210, fma(_296, _203, _294 * _189));
    float _312 = fma(_303, _211, fma(_296, _204, _294 * _190));
    float _316 = inversesqrt(dot(vec3(_306, _309, _312), vec3(_306, _309, _312)));
    float _317 = _316 * _306;
    float _318 = _316 * _309;
    float _319 = _316 * _312;
    float _323 = inversesqrt(dot(vec3(_317, _318, _319), vec3(_317, _318, _319)));
    float _330 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _331 = _330 * _265;
    float _332 = _330 * _266;
    float _333 = _330 * _267;
    float _340 = cbMtdParam._m0[9u].x - dot(vec3(_331, _332, _333), vec3(_323 * _317, _323 * _318, _323 * _319));
    float _3049 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _341 = isnan(1.0) ? _3049 : (isnan(_3049) ? 1.0 : min(_3049, 1.0));
    float _344 = fma(_319, _209, fma(_318, _202, _317 * _188));
    float _347 = fma(_319, _210, fma(_318, _203, _317 * _189));
    float _350 = fma(_319, _211, fma(_318, _204, _317 * _190));
    float _354 = inversesqrt(dot(vec3(_344, _347, _350), vec3(_344, _347, _350)));
    float _355 = _354 * _344;
    float _356 = _354 * _347;
    float _357 = _354 * _350;
    float _3060 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _358 = isnan(1.0) ? _3060 : (isnan(_3060) ? 1.0 : min(_3060, 1.0));
    float _3071 = isnan(0.0) ? cbMatDynParam._m0[17u].x : (isnan(cbMatDynParam._m0[17u].x) ? 0.0 : max(cbMatDynParam._m0[17u].x, 0.0));
    float _3082 = isnan(0.0) ? cbMatDynParam._m0[17u].y : (isnan(cbMatDynParam._m0[17u].y) ? 0.0 : max(cbMatDynParam._m0[17u].y, 0.0));
    float _3093 = isnan(0.0) ? cbMatDynParam._m0[17u].z : (isnan(cbMatDynParam._m0[17u].z) ? 0.0 : max(cbMatDynParam._m0[17u].z, 0.0));
    float _377 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _382 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _384 = _382.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _513 = sqrt(((_265 * _265) + (_266 * _266)) + (_267 * _267));
        float _519 = (cbMatDynParam._m0[5u].x * _513) + cbMatDynParam._m0[5u].y;
        float _3104 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
        float _520 = isnan(1.0) ? _3104 : (isnan(_3104) ? 1.0 : min(_3104, 1.0));
        float _524 = (cbMatDynParam._m0[5u].z * _513) + cbMatDynParam._m0[5u].w;
        float _3115 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3115 : (isnan(_3115) ? 1.0 : min(_3115, 1.0))) - _520)) + _520) < ((_384 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _396 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _397 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _417 = fma(_357, cbSceneParam._m0[5u].z, fma(_356, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _355));
    float _420 = fma(_357, cbSceneParam._m0[6u].z, fma(_356, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _355));
    float _423 = fma(_357, cbSceneParam._m0[7u].z, fma(_356, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _355));
    uint _436 = uint(roundEven(NORMAL.w)) * 13u;
    uint _438 = _436 + 9u;
    uint _439 = _438 + uint(cbMatDynParam._m0[0u].w);
    float _445 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3071 : (isnan(_3071) ? 1.0 : min(_3071, 1.0)))) * cbInstanceData._m0[_439].x;
    float _446 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3082 : (isnan(_3082) ? 1.0 : min(_3082, 1.0)))) * cbInstanceData._m0[_439].y;
    float _447 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3093 : (isnan(_3093) ? 1.0 : min(_3093, 1.0)))) * cbInstanceData._m0[_439].z;
    float _3126 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _448 = isnan(1.0) ? _3126 : (isnan(_3126) ? 1.0 : min(_3126, 1.0));
    float _3137 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _449 = isnan(1.0) ? _3137 : (isnan(_3137) ? 1.0 : min(_3137, 1.0));
    float _3148 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _450 = isnan(1.0) ? _3148 : (isnan(_3148) ? 1.0 : min(_3148, 1.0));
    vec4 _459 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _396, cbSceneParam._m0[86u].y * _397));
    float _462 = _459.x * TEXCOORD.z;
    float _463 = dot(vec3(_355, _356, _357), vec3(_331, _332, _333));
    float _466 = _463 * 2.0;
    float _470 = (_466 * _355) - _331;
    float _471 = (_466 * _356) - _332;
    float _472 = (_466 * _357) - _333;
    float _494 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _498 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _502 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _833;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _558 = fma(_502, cbModelParam._m0[26u].z, fma(_498, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _494));
        float _562 = fma(_502, cbModelParam._m0[27u].z, fma(_498, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _494));
        float _566 = fma(_502, cbModelParam._m0[28u].z, fma(_498, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _494));
        float _591 = _494 + _355;
        float _592 = _498 + _356;
        float _593 = _502 + _357;
        float _603 = fma(_593, cbModelParam._m0[26u].z, fma(_592, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _591)) - _558;
        float _604 = fma(_593, cbModelParam._m0[27u].z, fma(_592, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _591)) - _562;
        float _605 = fma(_593, cbModelParam._m0[28u].z, fma(_592, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _591)) - _566;
        float _609 = inversesqrt(dot(vec3(_603, _604, _605), vec3(_603, _604, _605)));
        float _622 = ((_609 * _603) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_558 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _623 = ((_609 * _604) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_562 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _624 = ((_609 * _605) / cbModelParam._m0[34u].z) + ((((((_566 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _627 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_622, _623, _624), 0.0);
        vec4 _634 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_622, _623, _624), 0.0);
        vec4 _641 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_622, _623, _624), 0.0);
        vec4 _648 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_622, _623, _624), 0.0);
        float _661 = exp2((_627.w + (-0.5)) * 20.0) * 2.0;
        float _662 = _661 * (_627.x + (-0.5));
        float _663 = _661 * (_627.y + (-0.5));
        float _664 = _661 * (_627.z + (-0.5));
        float _671 = exp2((_634.w + (-0.5)) * 20.0) * 2.0;
        float _672 = _671 * (_634.x + (-0.5));
        float _673 = _671 * (_634.y + (-0.5));
        float _674 = _671 * (_634.z + (-0.5));
        float _681 = exp2((_641.w + (-0.5)) * 20.0) * 2.0;
        float _682 = _681 * (_641.x + (-0.5));
        float _683 = _681 * (_641.y + (-0.5));
        float _684 = _681 * (_641.z + (-0.5));
        float _691 = exp2((_648.w + (-0.5)) * 20.0) * 2.0;
        float _692 = _691 * (_648.x + (-0.5));
        float _693 = _691 * (_648.y + (-0.5));
        float _694 = _691 * (_648.z + (-0.5));
        float _695 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _696 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
        float _697 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _698 = _662 * 0.5;
        float _699 = _672 * 0.5;
        float _700 = _682 * 0.5;
        float _701 = dot(vec3(_698, _699, _700), vec3(_698, _699, _700));
        float _706 = (_701 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_701);
        float _715 = (dot(vec3(_355, _356, _357), vec3(_706 * _698, _706 * _699, _706 * _700)) + 1.0) * 0.5;
        float _3174 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _725 = sqrt(((_699 * _699) + (_698 * _698)) + (_700 * _700)) / (_695 + 9.9999997473787516355514526367188e-06);
        float _3185 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _726 = isnan(1.0) ? _3185 : (isnan(_3185) ? 1.0 : min(_3185, 1.0));
        float _727 = _726 * 2.0;
        float _731 = (1.0 - _726) / (_726 + 1.0);
        float _3196 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _732 = isnan(1.0) ? _3196 : (isnan(_3196) ? 1.0 : min(_3196, 1.0));
        float _741 = ((((1.0 - _732) * (_727 + 2.0)) * exp2(log2(isnan(1.0) ? _3174 : (isnan(_3174) ? 1.0 : min(_3174, 1.0))) * (_727 + 1.0))) + _732) * _695;
        float _742 = _663 * 0.5;
        float _743 = _673 * 0.5;
        float _744 = _683 * 0.5;
        float _745 = dot(vec3(_742, _743, _744), vec3(_742, _743, _744));
        float _750 = (_745 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_745);
        float _758 = (dot(vec3(_355, _356, _357), vec3(_750 * _742, _750 * _743, _750 * _744)) + 1.0) * 0.5;
        float _3207 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _767 = sqrt(((_743 * _743) + (_742 * _742)) + (_744 * _744)) / (_696 + 9.9999997473787516355514526367188e-06);
        float _3218 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _768 = isnan(1.0) ? _3218 : (isnan(_3218) ? 1.0 : min(_3218, 1.0));
        float _769 = _768 * 2.0;
        float _773 = (1.0 - _768) / (_768 + 1.0);
        float _3229 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _774 = isnan(1.0) ? _3229 : (isnan(_3229) ? 1.0 : min(_3229, 1.0));
        float _783 = ((((1.0 - _774) * (_769 + 2.0)) * exp2(log2(isnan(1.0) ? _3207 : (isnan(_3207) ? 1.0 : min(_3207, 1.0))) * (_769 + 1.0))) + _774) * _696;
        float _784 = _664 * 0.5;
        float _785 = _674 * 0.5;
        float _786 = _684 * 0.5;
        float _787 = dot(vec3(_784, _785, _786), vec3(_784, _785, _786));
        float _792 = (_787 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_787);
        float _800 = (dot(vec3(_355, _356, _357), vec3(_792 * _784, _792 * _785, _792 * _786)) + 1.0) * 0.5;
        float _3240 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _809 = sqrt(((_785 * _785) + (_784 * _784)) + (_786 * _786)) / (_697 + 9.9999997473787516355514526367188e-06);
        float _3251 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _810 = isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0));
        float _811 = _810 * 2.0;
        float _815 = (1.0 - _810) / (_810 + 1.0);
        float _3262 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _816 = isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0));
        float _825 = ((((1.0 - _816) * (_811 + 2.0)) * exp2(log2(isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0))) * (_811 + 1.0))) + _816) * _697;
        _833 = _664;
        _835 = _663;
        _836 = _662;
        _837 = _674;
        _838 = _673;
        _839 = _672;
        _840 = _684;
        _841 = _683;
        _842 = _682;
        _843 = _697;
        _844 = _696;
        _845 = _695;
        _846 = cbModelParam._m0[36u].z * (isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0)));
        _847 = cbModelParam._m0[36u].z * (isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0)));
        _848 = cbModelParam._m0[36u].z * (isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0)));
    }
    else
    {
        _833 = _834;
        _835 = _834;
        _836 = _834;
        _837 = _834;
        _838 = _834;
        _839 = _834;
        _840 = _834;
        _841 = _834;
        _842 = _834;
        _843 = _834;
        _844 = _834;
        _845 = _834;
        _846 = 0.0;
        _847 = 0.0;
        _848 = 0.0;
    }
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _877 = fma(_502, cbModelParam._m0[30u].z, fma(_498, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _494));
        float _881 = fma(_502, cbModelParam._m0[31u].z, fma(_498, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _494));
        float _885 = fma(_502, cbModelParam._m0[32u].z, fma(_498, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _494));
        float _908 = _494 + _355;
        float _909 = _498 + _356;
        float _910 = _502 + _357;
        float _920 = fma(_910, cbModelParam._m0[30u].z, fma(_909, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _908)) - _877;
        float _921 = fma(_910, cbModelParam._m0[31u].z, fma(_909, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _908)) - _881;
        float _922 = fma(_910, cbModelParam._m0[32u].z, fma(_909, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _908)) - _885;
        float _926 = inversesqrt(dot(vec3(_920, _921, _922), vec3(_920, _921, _922)));
        float _939 = ((_926 * _920) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_877 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _940 = ((_926 * _921) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_881 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _941 = ((_926 * _922) / cbModelParam._m0[35u].z) + ((((((_885 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _943 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_939, _940, _941), 0.0);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_939, _940, _941), 0.0);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_939, _940, _941), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_939, _940, _941), 0.0);
        float _976 = exp2((_943.w + (-0.5)) * 20.0) * 2.0;
        float _977 = _976 * (_943.x + (-0.5));
        float _978 = _976 * (_943.y + (-0.5));
        float _979 = _976 * (_943.z + (-0.5));
        float _986 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _987 = _986 * (_950.x + (-0.5));
        float _988 = _986 * (_950.y + (-0.5));
        float _989 = _986 * (_950.z + (-0.5));
        float _996 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_957.x + (-0.5));
        float _998 = _996 * (_957.y + (-0.5));
        float _999 = _996 * (_957.z + (-0.5));
        float _1006 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_964.x + (-0.5));
        float _1008 = _1006 * (_964.y + (-0.5));
        float _1009 = _1006 * (_964.z + (-0.5));
        float _1010 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1011 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1012 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1013 = _977 * 0.5;
        float _1014 = _987 * 0.5;
        float _1015 = _997 * 0.5;
        float _1016 = dot(vec3(_1013, _1014, _1015), vec3(_1013, _1014, _1015));
        float _1021 = (_1016 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1016);
        float _1029 = (dot(vec3(_355, _356, _357), vec3(_1021 * _1013, _1021 * _1014, _1021 * _1015)) + 1.0) * 0.5;
        float _3303 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1038 = sqrt(((_1014 * _1014) + (_1013 * _1013)) + (_1015 * _1015)) / (_1010 + 9.9999997473787516355514526367188e-06);
        float _3314 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0));
        float _1040 = _1039 * 2.0;
        float _1044 = (1.0 - _1039) / (_1039 + 1.0);
        float _3325 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0));
        float _1054 = ((((1.0 - _1045) * (_1040 + 2.0)) * exp2(log2(isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0))) * (_1040 + 1.0))) + _1045) * _1010;
        float _1055 = _978 * 0.5;
        float _1056 = _988 * 0.5;
        float _1057 = _998 * 0.5;
        float _1058 = dot(vec3(_1055, _1056, _1057), vec3(_1055, _1056, _1057));
        float _1063 = (_1058 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1058);
        float _1071 = (dot(vec3(_355, _356, _357), vec3(_1063 * _1055, _1063 * _1056, _1063 * _1057)) + 1.0) * 0.5;
        float _3336 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1080 = sqrt(((_1056 * _1056) + (_1055 * _1055)) + (_1057 * _1057)) / (_1011 + 9.9999997473787516355514526367188e-06);
        float _3347 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0));
        float _1082 = _1081 * 2.0;
        float _1086 = (1.0 - _1081) / (_1081 + 1.0);
        float _3358 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0));
        float _1096 = ((((1.0 - _1087) * (_1082 + 2.0)) * exp2(log2(isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0))) * (_1082 + 1.0))) + _1087) * _1011;
        float _1097 = _979 * 0.5;
        float _1098 = _989 * 0.5;
        float _1099 = _999 * 0.5;
        float _1100 = dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099));
        float _1105 = (_1100 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1100);
        float _1113 = (dot(vec3(_355, _356, _357), vec3(_1105 * _1097, _1105 * _1098, _1105 * _1099)) + 1.0) * 0.5;
        float _3369 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1122 = sqrt(((_1098 * _1098) + (_1097 * _1097)) + (_1099 * _1099)) / (_1012 + 9.9999997473787516355514526367188e-06);
        float _3380 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0));
        float _1124 = _1123 * 2.0;
        float _1128 = (1.0 - _1123) / (_1123 + 1.0);
        float _3391 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
        float _1138 = ((((1.0 - _1129) * (_1124 + 2.0)) * exp2(log2(isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0))) * (_1124 + 1.0))) + _1129) * _1012;
        _1146 = _979;
        _1147 = _978;
        _1148 = _977;
        _1149 = _989;
        _1150 = _988;
        _1151 = _987;
        _1152 = _999;
        _1153 = _998;
        _1154 = _997;
        _1155 = _1012;
        _1156 = _1011;
        _1157 = _1010;
        _1158 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0)));
        _1159 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0)));
        _1160 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0)));
    }
    else
    {
        _1146 = _834;
        _1147 = _834;
        _1148 = _834;
        _1149 = _834;
        _1150 = _834;
        _1151 = _834;
        _1152 = _834;
        _1153 = _834;
        _1154 = _834;
        _1155 = _834;
        _1156 = _834;
        _1157 = _834;
        _1158 = 0.0;
        _1159 = 0.0;
        _1160 = 0.0;
    }
    float _1170 = (cbModelParam._m0[1u].x * (_1158 - _846)) + _846;
    float _1171 = (cbModelParam._m0[1u].x * (_1159 - _847)) + _847;
    float _1172 = (cbModelParam._m0[1u].x * (_1160 - _848)) + _848;
    float _1193 = fma(_1172, cbSceneParam._m0[89u].z, fma(_1171, cbSceneParam._m0[89u].y, _1170 * cbSceneParam._m0[89u].x));
    float _1196 = fma(_1172, cbSceneParam._m0[90u].z, fma(_1171, cbSceneParam._m0[90u].y, _1170 * cbSceneParam._m0[90u].x));
    float _1199 = fma(_1172, cbSceneParam._m0[91u].z, fma(_1171, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1170));
    float _1214 = _470 * 0.5;
    float _1215 = _471 * 0.5;
    float _1216 = _472 * 0.5;
    float _1217 = dot(vec4(_1214, _1215, _1216, 1.0), vec4(_1148, _1151, _1154, _1157));
    float _1220 = dot(vec4(_1214, _1215, _1216, 1.0), vec4(_1147, _1150, _1153, _1156));
    float _1223 = dot(vec4(_1214, _1215, _1216, 1.0), vec4(_1146, _1149, _1152, _1155));
    float _1257;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1230 = dot(vec4(_1214, _1215, _1216, 1.0), vec4(_833, _837, _840, _843));
        float _1234 = dot(vec4(_1214, _1215, _1216, 1.0), vec4(_835, _838, _841, _844));
        float _1238 = dot(vec4(_1214, _1215, _1216, 1.0), vec4(_836, _839, _842, _845));
        float _1245 = dot(vec4(cbModelParam._m0[39u]), vec4(_1214, _1215, _1216, 1.0));
        _1257 = dot(vec3(isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)), isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)), isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1245) ? 0.0 : (isnan(0.0) ? _1245 : max(0.0, _1245))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1257 = 1.0;
    }
    float _1268;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1259 = dot(vec4(cbModelParam._m0[40u]), vec4(_1214, _1215, _1216, 1.0));
        _1268 = dot(vec3(isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)), isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)), isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1259) ? 0.0 : (isnan(0.0) ? _1259 : max(0.0, _1259))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1268 = 1.0;
    }
    float _1272 = (_1268 * cbModelParam._m0[1u].x) + (_1257 * (1.0 - cbModelParam._m0[1u].x));
    float _1281 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1363;
    float _1365;
    float _1367;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1330 = fma(_502, cbModelParam._m0[13u].z, fma(_498, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _494)) + cbModelParam._m0[13u].w;
        float _1334 = fma(_502, cbModelParam._m0[14u].z, fma(_498, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _494)) + cbModelParam._m0[14u].w;
        float _1338 = fma(_502, cbModelParam._m0[15u].z, fma(_498, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _494)) + cbModelParam._m0[15u].w;
        float _1341 = fma(_472, cbModelParam._m0[13u].z, fma(_471, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _470));
        float _1344 = fma(_472, cbModelParam._m0[14u].z, fma(_471, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _470));
        float _1347 = fma(_472, cbModelParam._m0[15u].z, fma(_471, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _470));
        float _1373;
        if (_1341 > 0.0)
        {
            _1373 = abs((1.0 - _1330) / _1341);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1341 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1330 + 1.0) / _1341);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1373 = frontier_phi_19_17_ladder;
        }
        float _1600;
        if (_1344 > 0.0)
        {
            _1600 = abs((1.0 - _1334) / _1344);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1344 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1334 + 1.0) / _1344);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1600 = frontier_phi_28_24_ladder;
        }
        float _1792;
        if (_1347 > 0.0)
        {
            _1792 = abs((1.0 - _1338) / _1347);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1347 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1338 + 1.0) / _1347);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1792 = frontier_phi_40_35_ladder;
        }
        float _1794 = isnan(_1600) ? _1373 : (isnan(_1373) ? _1600 : min(_1373, _1600));
        float _1795 = isnan(_1792) ? _1794 : (isnan(_1794) ? _1792 : min(_1794, _1792));
        float _1799 = (_1795 * _1341) + _1330;
        float _1800 = (_1795 * _1344) + _1334;
        float _1801 = (_1795 * _1347) + _1338;
        float _1802 = _1795 * 9.9999997473787516355514526367188e-05;
        float _1804 = (-1.0) - _1802;
        float _1806 = _1802 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1801 > _1806) || ((_1801 < _1804) || ((_1800 > _1806) || ((_1800 < _1804) || ((_1799 < _1804) || (_1799 > _1806))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1898 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1801, cbModelParam._m0[9u].z, fma(_1800, cbModelParam._m0[9u].y, _1799 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1801, cbModelParam._m0[10u].z, fma(_1800, cbModelParam._m0[10u].y, _1799 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1801, cbModelParam._m0[11u].z, fma(_1800, cbModelParam._m0[11u].y, _1799 * cbModelParam._m0[11u].x))), _1281);
            frontier_phi_18_40_ladder = _1898.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1898.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1898.x * cbModelParam._m0[1u].y;
        }
        _1363 = frontier_phi_18_40_ladder_2;
        _1365 = frontier_phi_18_40_ladder_1;
        _1367 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1351 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_470, _471, _472), _1281);
        _1363 = _1351.x * cbModelParam._m0[1u].y;
        _1365 = _1351.y * cbModelParam._m0[1u].y;
        _1367 = _1351.z * cbModelParam._m0[1u].y;
    }
    float _1370 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1462;
    float _1464;
    float _1466;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1426 = fma(_502, cbModelParam._m0[21u].z, fma(_498, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _494)) + cbModelParam._m0[21u].w;
        float _1430 = fma(_502, cbModelParam._m0[22u].z, fma(_498, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _494)) + cbModelParam._m0[22u].w;
        float _1434 = fma(_502, cbModelParam._m0[23u].z, fma(_498, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _494)) + cbModelParam._m0[23u].w;
        float _1437 = fma(_472, cbModelParam._m0[21u].z, fma(_471, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _470));
        float _1440 = fma(_472, cbModelParam._m0[22u].z, fma(_471, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _470));
        float _1443 = fma(_472, cbModelParam._m0[23u].z, fma(_471, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _470));
        float _1605;
        if (_1437 > 0.0)
        {
            _1605 = abs((1.0 - _1426) / _1437);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1437 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1426 + 1.0) / _1437);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1605 = frontier_phi_30_26_ladder;
        }
        float _1819;
        if (_1440 > 0.0)
        {
            _1819 = abs((1.0 - _1430) / _1440);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1440 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1430 + 1.0) / _1440);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1819 = frontier_phi_42_37_ladder;
        }
        float _1970;
        if (_1443 > 0.0)
        {
            _1970 = abs((1.0 - _1434) / _1443);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1443 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1434 + 1.0) / _1443);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _1970 = frontier_phi_51_48_ladder;
        }
        float _1972 = isnan(_1819) ? _1605 : (isnan(_1605) ? _1819 : min(_1605, _1819));
        float _1973 = isnan(_1970) ? _1972 : (isnan(_1972) ? _1970 : min(_1972, _1970));
        float _1977 = (_1973 * _1437) + _1426;
        float _1978 = (_1973 * _1440) + _1430;
        float _1979 = (_1973 * _1443) + _1434;
        float _1980 = _1973 * 9.9999997473787516355514526367188e-05;
        float _1981 = (-1.0) - _1980;
        float _1983 = _1980 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_1979 > _1983) || ((_1979 < _1981) || ((_1978 > _1983) || ((_1978 < _1981) || ((_1977 < _1981) || (_1977 > _1983))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2182 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1979, cbModelParam._m0[17u].z, fma(_1978, cbModelParam._m0[17u].y, _1977 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1979, cbModelParam._m0[18u].z, fma(_1978, cbModelParam._m0[18u].y, _1977 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1979, cbModelParam._m0[19u].z, fma(_1978, cbModelParam._m0[19u].y, _1977 * cbModelParam._m0[19u].x))), _1370);
            frontier_phi_27_51_ladder = _2182.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2182.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2182.x * cbModelParam._m0[1u].z;
        }
        _1462 = frontier_phi_27_51_ladder_2;
        _1464 = frontier_phi_27_51_ladder_1;
        _1466 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1446 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_470, _471, _472), _1370);
        _1462 = _1446.x * cbModelParam._m0[1u].z;
        _1464 = _1446.y * cbModelParam._m0[1u].z;
        _1466 = _1446.z * cbModelParam._m0[1u].z;
    }
    float _1478 = _462 * 0.01200000010430812835693359375;
    float _1480 = _1478 * ((cbModelParam._m0[1u].w * (_1462 - _1363)) + _1363);
    float _1481 = _1478 * ((cbModelParam._m0[1u].w * (_1464 - _1365)) + _1365);
    float _1482 = _1478 * ((cbModelParam._m0[1u].w * (_1466 - _1367)) + _1367);
    float _1485 = fma(_1482, cbSceneParam._m0[89u].z, fma(_1481, cbSceneParam._m0[89u].y, _1480 * cbSceneParam._m0[89u].x));
    float _1488 = fma(_1482, cbSceneParam._m0[90u].z, fma(_1481, cbSceneParam._m0[90u].y, _1480 * cbSceneParam._m0[90u].x));
    float _1491 = fma(_1482, cbSceneParam._m0[91u].z, fma(_1481, cbSceneParam._m0[91u].y, _1480 * cbSceneParam._m0[91u].x));
    vec4 _1499 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_396, _397));
    float _1501 = _1499.w;
    float _1513 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1501);
    float _1514 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1501);
    float _1515 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1501);
    uvec4 _1519 = floatBitsToUint(cbInstanceData._m0[_436 + 5u]);
    uint _1521 = _1519.x * 14u;
    uint _1522 = _1521 + 13u;
    float _1529 = _462 + (-1.0);
    float _1534 = (cbLight._m0[_1522].x * _1529) + 1.0;
    float _1535 = (cbLight._m0[_1522].y * _1529) + 1.0;
    float _1536 = (cbLight._m0[_1522].z * _1529) + 1.0;
    float _1537 = (cbLight._m0[_1522].w * _1529) + 1.0;
    uint _1538 = _1521 + 5u;
    float _1544 = isnan(1.0) ? _1535 : (isnan(_1535) ? 1.0 : min(_1535, 1.0));
    uint _1548 = _1521 + 4u;
    float _1558 = isnan(1.0) ? _1534 : (isnan(_1534) ? 1.0 : min(_1534, 1.0));
    uint _1562 = _1521 | 1u;
    float _1573 = dot(vec3(cbLight._m0[_1521].xyz), vec3(_355, _356, _357));
    float _1576 = dot(vec3(cbLight._m0[_1562].xyz), vec3(_355, _356, _357));
    float _3527 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
    float _3538 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
    float _1581 = (isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0))) * 0.3183098733425140380859375;
    float _1583 = (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) * 0.3183098733425140380859375;
    float _1590 = ((cbLight._m0[_1538].x * _1544) * _1583) + (((cbLight._m0[_1548].x * _1513) * _1558) * _1581);
    float _1591 = ((_1544 * cbLight._m0[_1538].y) * _1583) + (((cbLight._m0[_1548].y * _1514) * _1558) * _1581);
    float _1592 = ((_1544 * cbLight._m0[_1538].z) * _1583) + (((cbLight._m0[_1548].z * _1515) * _1558) * _1581);
    uvec4 _1597 = floatBitsToUint(cbLight._m0[_1521 + 12u]);
    bool _1599 = _1597.x == 0u;
    float _1610;
    float _1612;
    float _1614;
    if (_1599)
    {
        _1610 = _1590;
        _1612 = _1591;
        _1614 = _1592;
    }
    else
    {
        uint _1618 = _1521 + 6u;
        float _1634 = (dot(vec3(cbLight._m0[_1521 + 2u].xyz), vec3(_355, _356, _357)) * 0.5) + 0.5;
        float _1635 = _1634 * _1634;
        float _3549 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _1637 = isnan(1.0) ? _1536 : (isnan(_1536) ? 1.0 : min(_1536, 1.0));
        _1610 = (((cbLight._m0[_1618].x * 0.3183098733425140380859375) * _1636) * _1637) + _1590;
        _1612 = (((cbLight._m0[_1618].y * 0.3183098733425140380859375) * _1636) * _1637) + _1591;
        _1614 = (((cbLight._m0[_1618].z * 0.3183098733425140380859375) * _1636) * _1637) + _1592;
    }
    bool _1617 = _1597.y == 0u;
    float _1655;
    float _1657;
    float _1659;
    if (_1617)
    {
        _1655 = _1610;
        _1657 = _1612;
        _1659 = _1614;
    }
    else
    {
        uint _1763 = _1521 + 7u;
        float _1779 = (dot(vec3(cbLight._m0[_1521 + 3u].xyz), vec3(_355, _356, _357)) * 0.5) + 0.5;
        float _1780 = _1779 * _1779;
        float _3565 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1781 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _1782 = isnan(1.0) ? _1537 : (isnan(_1537) ? 1.0 : min(_1537, 1.0));
        _1655 = (((cbLight._m0[_1763].x * 0.3183098733425140380859375) * _1781) * _1782) + _1610;
        _1657 = (((cbLight._m0[_1763].y * 0.3183098733425140380859375) * _1781) * _1782) + _1612;
        _1659 = (((cbLight._m0[_1763].z * 0.3183098733425140380859375) * _1781) * _1782) + _1614;
    }
    uint _1661 = _1521 + 8u;
    float _1667 = cbLight._m0[_1521].x + _331;
    float _1668 = cbLight._m0[_1521].y + _332;
    float _1669 = cbLight._m0[_1521].z + _333;
    float _1673 = inversesqrt(dot(vec3(_1667, _1668, _1669), vec3(_1667, _1668, _1669)));
    float _1677 = dot(vec3(_355, _356, _357), vec3(cbLight._m0[_1521].xyz));
    float _3581 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
    float _1680 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
    float _3592 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _1681 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
    float _1682 = dot(vec3(cbLight._m0[_1521].xyz), vec3(_1667 * _1673, _1668 * _1673, _1669 * _1673));
    float _3603 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
    float _1693 = (exp2(log2(1.0 - (isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1699 = (0.5 / ((_1680 + 9.9999999392252902907785028219223e-09) + _1681)) * _1680;
    float _3614 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
    float _1701 = (isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * 0.31831014156341552734375;
    uint _1715 = _1521 + 9u;
    float _1721 = cbLight._m0[_1562].x + _331;
    float _1722 = cbLight._m0[_1562].y + _332;
    float _1723 = cbLight._m0[_1562].z + _333;
    float _1727 = inversesqrt(dot(vec3(_1721, _1722, _1723), vec3(_1721, _1722, _1723)));
    float _1731 = dot(vec3(_355, _356, _357), vec3(cbLight._m0[_1562].xyz));
    float _3625 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
    float _1734 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
    float _1735 = dot(vec3(cbLight._m0[_1562].xyz), vec3(_1721 * _1727, _1722 * _1727, _1723 * _1727));
    float _3636 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
    float _1744 = (exp2(log2(1.0 - (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1748 = (0.5 / ((_1734 + 9.9999999392252902907785028219223e-09) + _1681)) * _1734;
    float _3647 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _1750 = (isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * 0.31831014156341552734375;
    float _1760 = (((_1744 * cbLight._m0[_1715].x) * _1750) * _1544) + ((((cbLight._m0[_1661].x * _1513) * _1693) * _1701) * _1558);
    float _1761 = (((_1744 * cbLight._m0[_1715].y) * _1750) * _1544) + ((((cbLight._m0[_1661].y * _1514) * _1693) * _1701) * _1558);
    float _1762 = (((_1744 * cbLight._m0[_1715].z) * _1750) * _1544) + ((((cbLight._m0[_1661].z * _1515) * _1693) * _1701) * _1558);
    float _1824;
    float _1826;
    float _1828;
    if (_1599)
    {
        _1824 = _1760;
        _1826 = _1761;
        _1828 = _1762;
    }
    else
    {
        uint _1830 = _1521 + 10u;
        uint _1836 = _1521 + 2u;
        float _1842 = cbLight._m0[_1836].x + _331;
        float _1843 = cbLight._m0[_1836].y + _332;
        float _1844 = cbLight._m0[_1836].z + _333;
        float _1848 = inversesqrt(dot(vec3(_1842, _1843, _1844), vec3(_1842, _1843, _1844)));
        float _1852 = dot(vec3(_355, _356, _357), vec3(cbLight._m0[_1836].xyz));
        float _3658 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
        float _1855 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1856 = dot(vec3(cbLight._m0[_1836].xyz), vec3(_1842 * _1848, _1843 * _1848, _1844 * _1848));
        float _3669 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
        float _1865 = (exp2(log2(1.0 - (isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1869 = (0.5 / ((_1855 + 9.9999999392252902907785028219223e-09) + _1681)) * _1855;
        float _3680 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
        float _1871 = (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * 0.31831014156341552734375;
        float _1872 = isnan(1.0) ? _1536 : (isnan(_1536) ? 1.0 : min(_1536, 1.0));
        _1824 = (((_1865 * cbLight._m0[_1830].x) * _1871) * _1872) + _1760;
        _1826 = (((_1865 * cbLight._m0[_1830].y) * _1871) * _1872) + _1761;
        _1828 = (((_1865 * cbLight._m0[_1830].z) * _1871) * _1872) + _1762;
    }
    float _1907;
    float _1909;
    float _1911;
    if (_1617)
    {
        _1907 = _1824;
        _1909 = _1826;
        _1911 = _1828;
    }
    else
    {
        uint _1918 = _1521 + 11u;
        uint _1924 = _1521 + 3u;
        float _1930 = cbLight._m0[_1924].x + _331;
        float _1931 = cbLight._m0[_1924].y + _332;
        float _1932 = cbLight._m0[_1924].z + _333;
        float _1936 = inversesqrt(dot(vec3(_1930, _1931, _1932), vec3(_1930, _1931, _1932)));
        float _1940 = dot(vec3(_355, _356, _357), vec3(cbLight._m0[_1924].xyz));
        float _3696 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
        float _1943 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _1944 = dot(vec3(cbLight._m0[_1924].xyz), vec3(_1930 * _1936, _1931 * _1936, _1932 * _1936));
        float _3707 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1953 = (exp2(log2(1.0 - (isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1957 = (0.5 / ((_1943 + 9.9999999392252902907785028219223e-09) + _1681)) * _1943;
        float _3718 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
        float _1959 = (isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * 0.31831014156341552734375;
        float _1960 = isnan(1.0) ? _1537 : (isnan(_1537) ? 1.0 : min(_1537, 1.0));
        _1907 = (((_1953 * cbLight._m0[_1918].x) * _1959) * _1960) + _1824;
        _1909 = (((_1953 * cbLight._m0[_1918].y) * _1959) * _1960) + _1826;
        _1911 = (((_1953 * cbLight._m0[_1918].z) * _1959) * _1960) + _1828;
    }
    float _2094;
    float _2096;
    float _2098;
    float _2100;
    float _2102;
    float _2104;
    if (_1519.y == 0u)
    {
        float _2035 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2036 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2035;
        float _2037 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2035;
        float _2038 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2035;
        uvec4 _2050 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2051 = _2050.x;
        uint _2062 = uint((float(_2050.y) * floor(float(uint(cbSceneParam._m0[85u].y * _397) / _2051))) + floor(float(uint(cbSceneParam._m0[85u].x * _396) / _2051)));
        float _2072 = (log2(_2038 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2073 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
        uint _2076 = uint(isnan(14.0) ? _2073 : (isnan(_2073) ? 14.0 : min(_2073, 14.0)));
        uvec4 _2081 = texelFetch(g_lightClusterGridBuffer, int(((_2076 << 2u) + (_2062 << 6u)) >> 2u));
        uint _2082 = _2081.x;
        uint _2083 = _2050.z;
        float _2187;
        float _2189;
        float _2191;
        float _2193;
        float _2195;
        float _2197;
        if (((((1u << ((_2083 >> 4u) & 15u)) + 4294967295u) & _2082) == 0u) || ((_2083 & 240u) == 0u))
        {
            _2187 = 0.0;
            _2189 = 0.0;
            _2191 = 0.0;
            _2193 = 0.0;
            _2195 = 0.0;
            _2197 = 0.0;
        }
        else
        {
            float _2188;
            float _2190;
            float _2192;
            float _2194;
            float _2196;
            float _2198;
            float _2338 = 0.0;
            float _2339 = 0.0;
            float _2340 = 0.0;
            float _2341 = 0.0;
            float _2342 = 0.0;
            float _2343 = 0.0;
            uint _2344 = 0u;
            uint _2353;
            bool _2354;
            for (;;)
            {
                _2353 = texelFetch(g_lightClassification, int((((_2076 << 5u) + (_2062 << 9u)) + (_2344 << 2u)) >> 2u)).x;
                _2354 = _2353 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2354)
                {
                    frontier_phi_68_pred = _2340;
                    frontier_phi_68_pred_1 = _2343;
                    frontier_phi_68_pred_2 = _2342;
                    frontier_phi_68_pred_3 = _2341;
                    frontier_phi_68_pred_4 = _2339;
                    frontier_phi_68_pred_5 = _2338;
                }
                else
                {
                    float _2483;
                    float _2484;
                    float _2485;
                    float _2486;
                    float _2487;
                    float _2488;
                    uint _2489;
                    _2483 = _2338;
                    _2484 = _2339;
                    _2485 = _2340;
                    _2486 = _2341;
                    _2487 = _2342;
                    _2488 = _2343;
                    _2489 = _2353;
                    float _2410;
                    float _2411;
                    float _2412;
                    float _2413;
                    float _2414;
                    float _2415;
                    for (;;)
                    {
                        uint _2493 = uint(findLSB(_2489)) + (_2344 << 5u);
                        uint _2490 = (_2489 + 4294967295u) & _2489;
                        uint _2495 = _2493 * 48u;
                        vec4 _2509 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2495)).x, texelFetch(g_PointLightRenderingBuffer, int(_2495 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2495 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2495 + 3u)).x));
                        uint _2515 = (_2493 * 48u) + 4u;
                        vec4 _2528 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2515)).x, texelFetch(g_PointLightRenderingBuffer, int(_2515 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2515 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2515 + 3u)).x));
                        uint _2534 = (_2493 * 48u) + 8u;
                        vec3 _2545 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2534)).x, texelFetch(g_PointLightRenderingBuffer, int(_2534 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2534 + 2u)).x));
                        float _2549 = _2509.x - _2036;
                        float _2550 = _2509.y - _2037;
                        float _2551 = _2509.z - _2038;
                        float _2552 = dot(vec3(_2549, _2550, _2551), vec3(_2549, _2550, _2551));
                        float _2555 = inversesqrt(_2552);
                        float _2564 = 1.0 - (_2552 * _2509.w);
                        float _3744 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
                        float _2565 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
                        float _2566 = sqrt(_2552) * _2528.w;
                        float _2569 = 1.39999997615814208984375 / (_2566 + 1.39999997615814208984375);
                        float _2570 = _2569 * _2569;
                        float _2573 = ((1.0 - _2570) * dot(vec3(_417, _420, _423), vec3(_2555 * _2549, _2555 * _2550, _2555 * _2551))) + _2570;
                        float _2576 = _2566 * _2566;
                        float _2580 = ((isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0))) * _2565) / ((_2576 * 0.699999988079071044921875) + 1.0);
                        float _2584 = (-0.0) - _2036;
                        float _2585 = (-0.0) - _2037;
                        float _2586 = (-0.0) - _2038;
                        float _2590 = inversesqrt(dot(vec3(_2584, _2585, _2586), vec3(_2584, _2585, _2586)));
                        float _2594 = dot(vec3(_417, _420, _423), vec3(_2590 * _2584, _2590 * _2585, _2590 * _2586));
                        float _3760 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
                        float _3771 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
                        float _2598 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
                        float _2602 = (0.5 / (((isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) + 9.9999999392252902907785028219223e-09) + _2598)) * _2598;
                        float _3782 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
                        float _2611 = (((isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * 3.1415927410125732421875) / ((_2576 * 2.1991131305694580078125) + 3.141590118408203125)) * _2565;
                        _2413 = (_2580 * _2528.x) + _2486;
                        _2414 = (_2580 * _2528.y) + _2487;
                        _2415 = (_2580 * _2528.z) + _2488;
                        _2410 = (_2611 * _2545.x) + _2483;
                        _2411 = (_2611 * _2545.y) + _2484;
                        _2412 = (_2611 * _2545.z) + _2485;
                        if (_2490 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2483 = _2410;
                            _2484 = _2411;
                            _2485 = _2412;
                            _2486 = _2413;
                            _2487 = _2414;
                            _2488 = _2415;
                            _2489 = _2490;
                        }
                    }
                    frontier_phi_68_pred = _2412;
                    frontier_phi_68_pred_1 = _2415;
                    frontier_phi_68_pred_2 = _2414;
                    frontier_phi_68_pred_3 = _2413;
                    frontier_phi_68_pred_4 = _2411;
                    frontier_phi_68_pred_5 = _2410;
                }
                _2192 = frontier_phi_68_pred;
                _2198 = frontier_phi_68_pred_1;
                _2196 = frontier_phi_68_pred_2;
                _2194 = frontier_phi_68_pred_3;
                _2190 = frontier_phi_68_pred_4;
                _2188 = frontier_phi_68_pred_5;
                uint _2345 = _2344 + 1u;
                if (_2345 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2338 = _2188;
                    _2339 = _2190;
                    _2340 = _2192;
                    _2341 = _2194;
                    _2342 = _2196;
                    _2343 = _2198;
                    _2344 = _2345;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2187 = _2188;
            _2189 = _2190;
            _2191 = _2192;
            _2193 = _2194;
            _2195 = _2196;
            _2197 = _2198;
        }
        uvec4 _2201 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2202 = _2201.z;
        uint _2204 = (_2202 >> 8u) & 15u;
        float _2309;
        float _2311;
        float _2313;
        float _2315;
        float _2317;
        float _2319;
        if (((4294967295u << _2204) & _2082) == 0u)
        {
            _2309 = _2187;
            _2311 = _2189;
            _2313 = _2191;
            _2315 = _2193;
            _2317 = _2195;
            _2319 = _2197;
        }
        else
        {
            float _2334 = inversesqrt(dot(vec3(_2036, _2037, _2038), vec3(_2036, _2037, _2038)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2204 < ((_2202 >> 12u) & 15u))
            {
                float _2310;
                float _2312;
                float _2314;
                float _2316;
                float _2318;
                float _2320;
                float _2466 = _2187;
                float _2467 = _2189;
                float _2468 = _2191;
                float _2469 = _2193;
                float _2470 = _2195;
                float _2471 = _2197;
                uint _2472 = _2204;
                uint _2481;
                bool _2482;
                for (;;)
                {
                    _2481 = texelFetch(g_lightClassification, int((((_2076 << 5u) + (_2062 << 9u)) + (_2472 << 2u)) >> 2u)).x;
                    _2482 = _2481 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2482)
                    {
                        frontier_phi_79_pred = _2471;
                        frontier_phi_79_pred_1 = _2470;
                        frontier_phi_79_pred_2 = _2469;
                        frontier_phi_79_pred_3 = _2468;
                        frontier_phi_79_pred_4 = _2467;
                        frontier_phi_79_pred_5 = _2466;
                    }
                    else
                    {
                        float _2625;
                        float _2626;
                        float _2627;
                        float _2628;
                        float _2629;
                        float _2630;
                        float _2877;
                        float _2878;
                        float _2879;
                        float _2880;
                        float _2881;
                        float _2882;
                        float _2638 = _2466;
                        float _2639 = _2467;
                        float _2640 = _2468;
                        float _2641 = _2469;
                        float _2642 = _2470;
                        float _2643 = _2471;
                        uint _2644 = _2481;
                        uint _2645;
                        vec4 _2670;
                        float _2671;
                        vec4 _2686;
                        vec3 _2698;
                        vec4 _2714;
                        vec4 _2730;
                        float _2777;
                        bool _2778;
                        for (;;)
                        {
                            uint _2655 = ((_2472 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2644));
                            _2645 = (_2644 + 4294967295u) & _2644;
                            uint _2657 = _2655 * 40u;
                            _2670 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2657)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2657 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2657 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2657 + 3u)).x));
                            _2671 = _2670.w;
                            uint _2673 = (_2655 * 40u) + 4u;
                            _2686 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2673)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2673 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2673 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2673 + 3u)).x));
                            uint _2688 = (_2655 * 40u) + 8u;
                            _2698 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2688 + 2u)).x));
                            uint _2701 = (_2655 * 40u) + 16u;
                            _2714 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2701)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2701 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2701 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2701 + 3u)).x));
                            uint _2717 = (_2655 * 40u) + 20u;
                            _2730 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2717)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2717 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2717 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2717 + 3u)).x));
                            uint _2733 = (_2655 * 40u) + 24u;
                            vec4 _2746 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2733)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2733 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2733 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2733 + 3u)).x));
                            uint _2752 = (_2655 * 40u) + 28u;
                            vec4 _2765 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2752)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2752 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2752 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2752 + 3u)).x));
                            _2777 = fma(_2038, _2765.z, fma(_2037, _2765.y, _2765.x * _2036)) + _2765.w;
                            _2778 = !((fma(_2038, _2746.z, fma(_2037, _2746.y, _2746.x * _2036)) + _2746.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2778)
                            {
                                float _2805 = _2670.x - _2036;
                                float _2806 = _2670.y - _2037;
                                float _2807 = _2670.z - _2038;
                                float _2808 = dot(vec3(_2805, _2806, _2807), vec3(_2805, _2806, _2807));
                                float _2811 = inversesqrt(_2808);
                                float _2812 = _2811 * _2805;
                                float _2813 = _2811 * _2806;
                                float _2814 = _2811 * _2807;
                                float _2818 = 1.0 - (_2808 / (_2671 * _2671));
                                float _3793 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
                                float _2819 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
                                float _2823 = sqrt(_2808) * _2686.w;
                                float _2825 = 1.39999997615814208984375 / (_2823 + 1.39999997615814208984375);
                                float _2826 = _2825 * _2825;
                                float _2827 = 1.0 - _2826;
                                float _2829 = (_2827 * dot(vec3(_2812, _2813, _2814), vec3(_417, _420, _423))) + _2826;
                                float _2832 = _2823 * _2823;
                                float _2836 = (fma(_2038, _2714.z, fma(_2037, _2714.y, _2714.x * _2036)) + _2714.w) / _2777;
                                float _2837 = (fma(_2038, _2730.z, fma(_2037, _2730.y, _2730.x * _2036)) + _2730.w) / _2777;
                                float _2841 = 1.0 - dot(vec2(_2836, _2837), vec2(_2836, _2837));
                                float _3809 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
                                float _2842 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
                                float _2843 = _2842 * (((isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0))) * _2819) / ((_2832 * 0.699999988079071044921875) + 1.0));
                                float _2853 = dot(vec3(_417, _420, _423), vec3((-0.0) - (_2036 * _2334), (-0.0) - (_2037 * _2334), (-0.0) - (_2038 * _2334)));
                                float _3820 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
                                float _2861 = (_2827 * dot(vec3(_417, _420, _423), vec3(_2812, _2813, _2814))) + _2826;
                                float _3831 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
                                float _2862 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
                                float _2866 = (0.5 / (((isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) + 9.9999999392252902907785028219223e-09) + _2862)) * _2862;
                                float _3842 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
                                float _2873 = (_2842 * _2819) * (((isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * 3.1415927410125732421875) / ((_2832 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_85_pred = _2843 * _2686.z;
                                frontier_phi_85_pred_1 = _2843 * _2686.y;
                                frontier_phi_85_pred_2 = _2843 * _2686.x;
                                frontier_phi_85_pred_3 = _2873 * _2698.z;
                                frontier_phi_85_pred_4 = _2873 * _2698.y;
                                frontier_phi_85_pred_5 = _2873 * _2698.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _2882 = frontier_phi_85_pred;
                            _2881 = frontier_phi_85_pred_1;
                            _2880 = frontier_phi_85_pred_2;
                            _2879 = frontier_phi_85_pred_3;
                            _2878 = frontier_phi_85_pred_4;
                            _2877 = frontier_phi_85_pred_5;
                            _2628 = _2880 + _2641;
                            _2629 = _2881 + _2642;
                            _2630 = _2882 + _2643;
                            _2625 = _2877 + _2638;
                            _2626 = _2878 + _2639;
                            _2627 = _2879 + _2640;
                            if (_2645 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2638 = _2625;
                                _2639 = _2626;
                                _2640 = _2627;
                                _2641 = _2628;
                                _2642 = _2629;
                                _2643 = _2630;
                                _2644 = _2645;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2630;
                        frontier_phi_79_pred_1 = _2629;
                        frontier_phi_79_pred_2 = _2628;
                        frontier_phi_79_pred_3 = _2627;
                        frontier_phi_79_pred_4 = _2626;
                        frontier_phi_79_pred_5 = _2625;
                    }
                    _2320 = frontier_phi_79_pred;
                    _2318 = frontier_phi_79_pred_1;
                    _2316 = frontier_phi_79_pred_2;
                    _2314 = frontier_phi_79_pred_3;
                    _2312 = frontier_phi_79_pred_4;
                    _2310 = frontier_phi_79_pred_5;
                    uint _2473 = _2472 + 1u;
                    if (_2473 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2466 = _2310;
                        _2467 = _2312;
                        _2468 = _2314;
                        _2469 = _2316;
                        _2470 = _2318;
                        _2471 = _2320;
                        _2472 = _2473;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2316;
                frontier_phi_60_61_ladder_1 = _2320;
                frontier_phi_60_61_ladder_2 = _2318;
                frontier_phi_60_61_ladder_3 = _2314;
                frontier_phi_60_61_ladder_4 = _2312;
                frontier_phi_60_61_ladder_5 = _2310;
            }
            else
            {
                frontier_phi_60_61_ladder = _2193;
                frontier_phi_60_61_ladder_1 = _2197;
                frontier_phi_60_61_ladder_2 = _2195;
                frontier_phi_60_61_ladder_3 = _2191;
                frontier_phi_60_61_ladder_4 = _2189;
                frontier_phi_60_61_ladder_5 = _2187;
            }
            _2309 = frontier_phi_60_61_ladder_5;
            _2311 = frontier_phi_60_61_ladder_4;
            _2313 = frontier_phi_60_61_ladder_3;
            _2315 = frontier_phi_60_61_ladder;
            _2317 = frontier_phi_60_61_ladder_2;
            _2319 = frontier_phi_60_61_ladder_1;
        }
        float _2324 = isnan(1.0) ? _462 : (isnan(_462) ? 1.0 : min(_462, 1.0));
        _2094 = (_2324 * _2315) + _1655;
        _2096 = (_2324 * _2317) + _1657;
        _2098 = (_2324 * _2319) + _1659;
        _2100 = ((_2309 * 0.039999999105930328369140625) * _2324) + _1907;
        _2102 = ((_2311 * 0.039999999105930328369140625) * _2324) + _1909;
        _2104 = ((_2313 * 0.039999999105930328369140625) * _2324) + _1911;
    }
    else
    {
        _2094 = _1655;
        _2096 = _1657;
        _2098 = _1659;
        _2100 = _1907;
        _2102 = _1909;
        _2104 = _1911;
    }
    float _3858 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _3869 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _3880 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _3891 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _2122 = ((isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_2094 + ((isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0))) * _462))) + ((_2100 + ((isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0))) * _1272)) * cbPerFrame._m0[3u].x);
    float _2123 = ((isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * (_2096 + ((isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0))) * _462))) + ((_2102 + ((isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))) * _1272)) * cbPerFrame._m0[3u].x);
    float _2124 = ((isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_2098 + ((isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0))) * _462))) + ((_2104 + ((isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))) * _1272)) * cbPerFrame._m0[3u].x);
    float _2125 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2126 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2127 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2132 = cbInstanceData._m0[_436 + 6u].w * (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)));
    float _2137 = _396 / cbSceneParam._m0[86u].x;
    float _2138 = _397 / cbSceneParam._m0[86u].y;
    vec4 _2152 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2137, _2138, (log2((isnan(cbSceneParam._m0[77u].w) ? _377 : (isnan(_377) ? cbSceneParam._m0[77u].w : min(_377, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2154 = _2152.x;
    float _2155 = _2152.y;
    float _2156 = _2152.z;
    float _2157 = _2152.w;
    float _2249;
    float _2251;
    float _2253;
    float _2255;
    if (_377 > cbSceneParam._m0[78u].w)
    {
        float _2212 = isnan(_377) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _377 : min(cbSceneParam._m0[80u].w, _377));
        float _2213 = _2212 / _377;
        float _2224 = _2213 * _265;
        float _2225 = _266 * _2213;
        float _2226 = (-0.0) - _2225;
        float _2227 = _2213 * _267;
        float _2229 = (cbSceneParam._m0[77u].w * _2226) / _2212;
        float _2230 = _2229 + cbSceneParam._m0[79u].w;
        float _2231 = cbSceneParam._m0[79u].w - _2225;
        float _2237 = sqrt(((_2224 * _2224) + (_2225 * _2225)) + (_2227 * _2227));
        float _2240 = (1.0 - (cbSceneParam._m0[77u].w / _2212)) * _2237;
        float _2245 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2247 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2423;
        if (abs((_2226 - _2229) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2423 = ((((_2230 > 0.0) ? exp2(_2245 * _2230) : (2.0 - exp2(_2247 * _2230))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2240;
        }
        else
        {
            float _2367 = 1.0 / cbSceneParam._m0[80u].x;
            float _2368 = isnan(_2231) ? _2230 : (isnan(_2230) ? _2231 : max(_2230, _2231));
            float _2369 = isnan(_2231) ? _2230 : (isnan(_2230) ? _2231 : min(_2230, _2231));
            float _2378 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : min(_2368, 0.0));
            float _2379 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : min(_2369, 0.0));
            _2423 = ((abs(_2237 / _2226) * cbSceneParam._m0[80u].y) * ((((_2378 - _2379) * 2.0) - ((exp2(_2245 * (isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0)))) - exp2(_2245 * (isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0))))) * _2367)) - ((exp2(_2247 * _2378) - exp2(_2247 * _2379)) * _2367))) + (_2240 * cbSceneParam._m0[80u].z);
        }
        vec4 _2425 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2137, _2138, 1.0), 0.0);
        float _2434 = exp2((_2423 * (-1.44269502162933349609375)) * (1.0 - _2425.w));
        float _2435 = log2(_2434);
        float _2451 = log2(_2157);
        _2249 = (exp2(_2451 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2435 * cbSceneParam._m0[78u].x)) * _2425.x) / cbSceneParam._m0[78u].x)) + _2154;
        _2251 = (exp2(_2451 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2435 * cbSceneParam._m0[78u].y)) * _2425.y) / cbSceneParam._m0[78u].y)) + _2155;
        _2253 = (exp2(_2451 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2435 * cbSceneParam._m0[78u].z)) * _2425.z) / cbSceneParam._m0[78u].z)) + _2156;
        _2255 = _2434 * _2157;
    }
    else
    {
        _2249 = _2154;
        _2251 = _2155;
        _2253 = _2156;
        _2255 = _2157;
    }
    bool _2461;
    vec4 _2265;
    vec4 _2288;
    float _2290;
    float _2294;
    float _2295;
    float _2296;
    float _2297;
    bool _2308;
    for (;;)
    {
        _2265 = cbMatDynParam._m0[0u];
        float _2267 = roundEven(_2265.y);
        bool _2268 = _2267 == 3.0;
        float _2270 = log2(_2255);
        float _2277 = exp2(_2270 * cbSceneParam._m0[78u].x) * _2125;
        float _2278 = exp2(_2270 * cbSceneParam._m0[78u].y) * _2126;
        float _2279 = exp2(_2270 * cbSceneParam._m0[78u].z) * _2127;
        float _2286 = _384 + (-0.5);
        _2288 = cbMtdParam._m0[1u];
        _2290 = _2288.y * _2286;
        float _2293 = (_2267 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2294 = _2293 * (_2268 ? _2277 : (_2277 + (cbSceneParam._m0[72u].w * _2249)));
        _2295 = _2293 * (_2268 ? _2278 : (_2278 + (cbSceneParam._m0[72u].w * _2251)));
        _2296 = _2293 * (_2268 ? _2279 : (_2279 + (cbSceneParam._m0[72u].w * _2253)));
        _2297 = _2286 * 0.999000012874603271484375;
        _2308 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2308)
        {
            if ((cbInstanceData._m0[_436 + 7u].x + _2297) < 0.5)
            {
                _2461 = true;
                break;
            }
        }
        uint _2402 = _438 + uint(_2265.w);
        if ((cbInstanceData._m0[_2402].w < 1.0) && ((cbInstanceData._m0[_2402].w + _2297) < 0.5))
        {
            _2461 = true;
            break;
        }
        if ((_2290 + 1.0) < _2288.x)
        {
            _2461 = true;
            break;
        }
        _2461 = false;
        break;
    }
    float _2616;
    if (_2461)
    {
        discard_state = true;
        _2616 = 0.0;
    }
    else
    {
        _2616 = _2132;
    }
    SV_Target.x = _2294;
    SV_Target.y = _2295;
    SV_Target.z = _2296;
    SV_Target.w = _2616;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2132;
    discard_exit();
}


