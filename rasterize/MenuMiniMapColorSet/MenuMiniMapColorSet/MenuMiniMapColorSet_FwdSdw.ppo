#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[18];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D MenuMiniMapColorSet_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _791;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _186 = _185 * _178;
    float _187 = _185 * _179;
    float _188 = _185 * _180;
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _193 = _192 * NORMAL.x;
    float _194 = _192 * NORMAL.y;
    float _195 = _192 * NORMAL.z;
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _200 = _199 * TANGENT.x;
    float _201 = _199 * TANGENT.y;
    float _202 = _199 * TANGENT.z;
    float _207;
    float _208;
    float _209;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _207 = (-0.0) - _193;
        _208 = (-0.0) - _194;
        _209 = (-0.0) - _195;
    }
    else
    {
        _207 = _193;
        _208 = _194;
        _209 = _195;
    }
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(MenuMiniMapColorSet_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _292 = (_284.x * 2.0) + (-1.0);
    float _294 = (_284.y * 2.0) + (-1.0);
    float _295 = dot(vec2(_292, _294), vec2(_292, _294));
    float _3188 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _301 = sqrt(1.0 - (isnan(1.0) ? _3188 : (isnan(_3188) ? 1.0 : min(_3188, 1.0))));
    float _304 = fma(_301, _207, fma(_294, _200, _292 * _186));
    float _307 = fma(_301, _208, fma(_294, _201, _292 * _187));
    float _310 = fma(_301, _209, fma(_294, _202, _292 * _188));
    float _314 = inversesqrt(dot(vec3(_304, _307, _310), vec3(_304, _307, _310)));
    float _315 = _314 * _304;
    float _316 = _314 * _307;
    float _317 = _314 * _310;
    float _321 = inversesqrt(dot(vec3(_315, _316, _317), vec3(_315, _316, _317)));
    float _328 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _329 = _328 * _263;
    float _330 = _328 * _264;
    float _331 = _328 * _265;
    float _338 = cbMtdParam._m0[9u].x - dot(vec3(_329, _330, _331), vec3(_321 * _315, _321 * _316, _321 * _317));
    float _3199 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _339 = isnan(1.0) ? _3199 : (isnan(_3199) ? 1.0 : min(_3199, 1.0));
    float _342 = fma(_317, _207, fma(_316, _200, _315 * _186));
    float _345 = fma(_317, _208, fma(_316, _201, _315 * _187));
    float _348 = fma(_317, _209, fma(_316, _202, _315 * _188));
    float _352 = inversesqrt(dot(vec3(_342, _345, _348), vec3(_342, _345, _348)));
    float _353 = _352 * _342;
    float _354 = _352 * _345;
    float _355 = _352 * _348;
    float _3210 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _356 = isnan(1.0) ? _3210 : (isnan(_3210) ? 1.0 : min(_3210, 1.0));
    float _3221 = isnan(0.0) ? cbMatDynParam._m0[17u].x : (isnan(cbMatDynParam._m0[17u].x) ? 0.0 : max(cbMatDynParam._m0[17u].x, 0.0));
    float _3232 = isnan(0.0) ? cbMatDynParam._m0[17u].y : (isnan(cbMatDynParam._m0[17u].y) ? 0.0 : max(cbMatDynParam._m0[17u].y, 0.0));
    float _3243 = isnan(0.0) ? cbMatDynParam._m0[17u].z : (isnan(cbMatDynParam._m0[17u].z) ? 0.0 : max(cbMatDynParam._m0[17u].z, 0.0));
    float _375 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _381 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _382 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _403 = fma(_355, cbSceneParam._m0[5u].z, fma(_354, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _353));
    float _406 = fma(_355, cbSceneParam._m0[6u].z, fma(_354, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _353));
    float _409 = fma(_355, cbSceneParam._m0[7u].z, fma(_354, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _353));
    uint _422 = uint(roundEven(NORMAL.w)) * 13u;
    uint _425 = (_422 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _431 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3221 : (isnan(_3221) ? 1.0 : min(_3221, 1.0)))) * cbInstanceData._m0[_425].x;
    float _432 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3232 : (isnan(_3232) ? 1.0 : min(_3232, 1.0)))) * cbInstanceData._m0[_425].y;
    float _433 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3243 : (isnan(_3243) ? 1.0 : min(_3243, 1.0)))) * cbInstanceData._m0[_425].z;
    float _3254 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _434 = isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0));
    float _3265 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _435 = isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0));
    float _3276 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _436 = isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0));
    vec4 _445 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _381, cbSceneParam._m0[86u].y * _382));
    float _448 = _445.x * TEXCOORD.z;
    float _449 = dot(vec3(_353, _354, _355), vec3(_329, _330, _331));
    float _452 = _449 * 2.0;
    float _456 = (_452 * _353) - _329;
    float _457 = (_452 * _354) - _330;
    float _458 = (_452 * _355) - _331;
    float _480 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _484 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _488 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _790;
    float _792;
    float _793;
    float _794;
    float _795;
    float _796;
    float _797;
    float _798;
    float _799;
    float _800;
    float _801;
    float _802;
    float _803;
    float _804;
    float _805;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _515 = fma(_488, cbModelParam._m0[26u].z, fma(_484, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _480));
        float _519 = fma(_488, cbModelParam._m0[27u].z, fma(_484, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _480));
        float _523 = fma(_488, cbModelParam._m0[28u].z, fma(_484, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _480));
        float _548 = _480 + _353;
        float _549 = _484 + _354;
        float _550 = _488 + _355;
        float _560 = fma(_550, cbModelParam._m0[26u].z, fma(_549, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _548)) - _515;
        float _561 = fma(_550, cbModelParam._m0[27u].z, fma(_549, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _548)) - _519;
        float _562 = fma(_550, cbModelParam._m0[28u].z, fma(_549, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _548)) - _523;
        float _566 = inversesqrt(dot(vec3(_560, _561, _562), vec3(_560, _561, _562)));
        float _579 = ((_566 * _560) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_515 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _580 = ((_566 * _561) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_519 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _581 = ((_566 * _562) / cbModelParam._m0[34u].z) + ((((((_523 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _584 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_579, _580, _581), 0.0);
        vec4 _591 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_579, _580, _581), 0.0);
        vec4 _598 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_579, _580, _581), 0.0);
        vec4 _605 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_579, _580, _581), 0.0);
        float _618 = exp2((_584.w + (-0.5)) * 20.0) * 2.0;
        float _619 = _618 * (_584.x + (-0.5));
        float _620 = _618 * (_584.y + (-0.5));
        float _621 = _618 * (_584.z + (-0.5));
        float _628 = exp2((_591.w + (-0.5)) * 20.0) * 2.0;
        float _629 = _628 * (_591.x + (-0.5));
        float _630 = _628 * (_591.y + (-0.5));
        float _631 = _628 * (_591.z + (-0.5));
        float _638 = exp2((_598.w + (-0.5)) * 20.0) * 2.0;
        float _639 = _638 * (_598.x + (-0.5));
        float _640 = _638 * (_598.y + (-0.5));
        float _641 = _638 * (_598.z + (-0.5));
        float _648 = exp2((_605.w + (-0.5)) * 20.0) * 2.0;
        float _649 = _648 * (_605.x + (-0.5));
        float _650 = _648 * (_605.y + (-0.5));
        float _651 = _648 * (_605.z + (-0.5));
        float _652 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
        float _653 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
        float _654 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
        float _655 = _619 * 0.5;
        float _656 = _629 * 0.5;
        float _657 = _639 * 0.5;
        float _658 = dot(vec3(_655, _656, _657), vec3(_655, _656, _657));
        float _663 = (_658 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_658);
        float _672 = (dot(vec3(_353, _354, _355), vec3(_663 * _655, _663 * _656, _663 * _657)) + 1.0) * 0.5;
        float _3302 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
        float _682 = sqrt(((_656 * _656) + (_655 * _655)) + (_657 * _657)) / (_652 + 9.9999997473787516355514526367188e-06);
        float _3313 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
        float _683 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
        float _684 = _683 * 2.0;
        float _688 = (1.0 - _683) / (_683 + 1.0);
        float _3324 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
        float _689 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
        float _698 = ((((1.0 - _689) * (_684 + 2.0)) * exp2(log2(isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0))) * (_684 + 1.0))) + _689) * _652;
        float _699 = _620 * 0.5;
        float _700 = _630 * 0.5;
        float _701 = _640 * 0.5;
        float _702 = dot(vec3(_699, _700, _701), vec3(_699, _700, _701));
        float _707 = (_702 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_702);
        float _715 = (dot(vec3(_353, _354, _355), vec3(_707 * _699, _707 * _700, _707 * _701)) + 1.0) * 0.5;
        float _3335 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _724 = sqrt(((_700 * _700) + (_699 * _699)) + (_701 * _701)) / (_653 + 9.9999997473787516355514526367188e-06);
        float _3346 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _725 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
        float _726 = _725 * 2.0;
        float _730 = (1.0 - _725) / (_725 + 1.0);
        float _3357 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _731 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
        float _740 = ((((1.0 - _731) * (_726 + 2.0)) * exp2(log2(isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0))) * (_726 + 1.0))) + _731) * _653;
        float _741 = _621 * 0.5;
        float _742 = _631 * 0.5;
        float _743 = _641 * 0.5;
        float _744 = dot(vec3(_741, _742, _743), vec3(_741, _742, _743));
        float _749 = (_744 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_744);
        float _757 = (dot(vec3(_353, _354, _355), vec3(_749 * _741, _749 * _742, _749 * _743)) + 1.0) * 0.5;
        float _3368 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _766 = sqrt(((_742 * _742) + (_741 * _741)) + (_743 * _743)) / (_654 + 9.9999997473787516355514526367188e-06);
        float _3379 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _767 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
        float _768 = _767 * 2.0;
        float _772 = (1.0 - _767) / (_767 + 1.0);
        float _3390 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _773 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
        float _782 = ((((1.0 - _773) * (_768 + 2.0)) * exp2(log2(isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0))) * (_768 + 1.0))) + _773) * _654;
        _790 = _621;
        _792 = _620;
        _793 = _619;
        _794 = _631;
        _795 = _630;
        _796 = _629;
        _797 = _641;
        _798 = _640;
        _799 = _639;
        _800 = _654;
        _801 = _653;
        _802 = _652;
        _803 = cbModelParam._m0[36u].z * (isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0)));
        _804 = cbModelParam._m0[36u].z * (isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0)));
        _805 = cbModelParam._m0[36u].z * (isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0)));
    }
    else
    {
        _790 = _791;
        _792 = _791;
        _793 = _791;
        _794 = _791;
        _795 = _791;
        _796 = _791;
        _797 = _791;
        _798 = _791;
        _799 = _791;
        _800 = _791;
        _801 = _791;
        _802 = _791;
        _803 = 0.0;
        _804 = 0.0;
        _805 = 0.0;
    }
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _831 = fma(_488, cbModelParam._m0[30u].z, fma(_484, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _480));
        float _835 = fma(_488, cbModelParam._m0[31u].z, fma(_484, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _480));
        float _839 = fma(_488, cbModelParam._m0[32u].z, fma(_484, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _480));
        float _862 = _480 + _353;
        float _863 = _484 + _354;
        float _864 = _488 + _355;
        float _874 = fma(_864, cbModelParam._m0[30u].z, fma(_863, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _862)) - _831;
        float _875 = fma(_864, cbModelParam._m0[31u].z, fma(_863, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _862)) - _835;
        float _876 = fma(_864, cbModelParam._m0[32u].z, fma(_863, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _862)) - _839;
        float _880 = inversesqrt(dot(vec3(_874, _875, _876), vec3(_874, _875, _876)));
        float _893 = ((_880 * _874) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_831 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _894 = ((_880 * _875) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_835 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _895 = ((_880 * _876) / cbModelParam._m0[35u].z) + ((((((_839 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _897 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_893, _894, _895), 0.0);
        vec4 _904 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_893, _894, _895), 0.0);
        vec4 _911 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_893, _894, _895), 0.0);
        vec4 _918 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_893, _894, _895), 0.0);
        float _930 = exp2((_897.w + (-0.5)) * 20.0) * 2.0;
        float _931 = _930 * (_897.x + (-0.5));
        float _932 = _930 * (_897.y + (-0.5));
        float _933 = _930 * (_897.z + (-0.5));
        float _940 = exp2((_904.w + (-0.5)) * 20.0) * 2.0;
        float _941 = _940 * (_904.x + (-0.5));
        float _942 = _940 * (_904.y + (-0.5));
        float _943 = _940 * (_904.z + (-0.5));
        float _950 = exp2((_911.w + (-0.5)) * 20.0) * 2.0;
        float _951 = _950 * (_911.x + (-0.5));
        float _952 = _950 * (_911.y + (-0.5));
        float _953 = _950 * (_911.z + (-0.5));
        float _960 = exp2((_918.w + (-0.5)) * 20.0) * 2.0;
        float _961 = _960 * (_918.x + (-0.5));
        float _962 = _960 * (_918.y + (-0.5));
        float _963 = _960 * (_918.z + (-0.5));
        float _964 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _965 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _966 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _967 = _931 * 0.5;
        float _968 = _941 * 0.5;
        float _969 = _951 * 0.5;
        float _970 = dot(vec3(_967, _968, _969), vec3(_967, _968, _969));
        float _975 = (_970 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_970);
        float _983 = (dot(vec3(_353, _354, _355), vec3(_975 * _967, _975 * _968, _975 * _969)) + 1.0) * 0.5;
        float _3431 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _992 = sqrt(((_968 * _968) + (_967 * _967)) + (_969 * _969)) / (_964 + 9.9999997473787516355514526367188e-06);
        float _3442 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
        float _994 = _993 * 2.0;
        float _998 = (1.0 - _993) / (_993 + 1.0);
        float _3453 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _1008 = ((((1.0 - _999) * (_994 + 2.0)) * exp2(log2(isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0))) * (_994 + 1.0))) + _999) * _964;
        float _1009 = _932 * 0.5;
        float _1010 = _942 * 0.5;
        float _1011 = _952 * 0.5;
        float _1012 = dot(vec3(_1009, _1010, _1011), vec3(_1009, _1010, _1011));
        float _1017 = (_1012 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1012);
        float _1025 = (dot(vec3(_353, _354, _355), vec3(_1017 * _1009, _1017 * _1010, _1017 * _1011)) + 1.0) * 0.5;
        float _3464 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1034 = sqrt(((_1010 * _1010) + (_1009 * _1009)) + (_1011 * _1011)) / (_965 + 9.9999997473787516355514526367188e-06);
        float _3475 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
        float _1036 = _1035 * 2.0;
        float _1040 = (1.0 - _1035) / (_1035 + 1.0);
        float _3486 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _1050 = ((((1.0 - _1041) * (_1036 + 2.0)) * exp2(log2(isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))) * (_1036 + 1.0))) + _1041) * _965;
        float _1051 = _933 * 0.5;
        float _1052 = _943 * 0.5;
        float _1053 = _953 * 0.5;
        float _1054 = dot(vec3(_1051, _1052, _1053), vec3(_1051, _1052, _1053));
        float _1059 = (_1054 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1054);
        float _1067 = (dot(vec3(_353, _354, _355), vec3(_1059 * _1051, _1059 * _1052, _1059 * _1053)) + 1.0) * 0.5;
        float _3497 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1076 = sqrt(((_1052 * _1052) + (_1051 * _1051)) + (_1053 * _1053)) / (_966 + 9.9999997473787516355514526367188e-06);
        float _3508 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
        float _1078 = _1077 * 2.0;
        float _1082 = (1.0 - _1077) / (_1077 + 1.0);
        float _3519 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _1092 = ((((1.0 - _1083) * (_1078 + 2.0)) * exp2(log2(isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))) * (_1078 + 1.0))) + _1083) * _966;
        _1100 = _933;
        _1101 = _932;
        _1102 = _931;
        _1103 = _943;
        _1104 = _942;
        _1105 = _941;
        _1106 = _953;
        _1107 = _952;
        _1108 = _951;
        _1109 = _966;
        _1110 = _965;
        _1111 = _964;
        _1112 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0)));
        _1113 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0)));
        _1114 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0)));
    }
    else
    {
        _1100 = _791;
        _1101 = _791;
        _1102 = _791;
        _1103 = _791;
        _1104 = _791;
        _1105 = _791;
        _1106 = _791;
        _1107 = _791;
        _1108 = _791;
        _1109 = _791;
        _1110 = _791;
        _1111 = _791;
        _1112 = 0.0;
        _1113 = 0.0;
        _1114 = 0.0;
    }
    float _1124 = (cbModelParam._m0[1u].x * (_1112 - _803)) + _803;
    float _1125 = (cbModelParam._m0[1u].x * (_1113 - _804)) + _804;
    float _1126 = (cbModelParam._m0[1u].x * (_1114 - _805)) + _805;
    float _1147 = fma(_1126, cbSceneParam._m0[89u].z, fma(_1125, cbSceneParam._m0[89u].y, _1124 * cbSceneParam._m0[89u].x));
    float _1150 = fma(_1126, cbSceneParam._m0[90u].z, fma(_1125, cbSceneParam._m0[90u].y, _1124 * cbSceneParam._m0[90u].x));
    float _1153 = fma(_1126, cbSceneParam._m0[91u].z, fma(_1125, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1124));
    float _1168 = _456 * 0.5;
    float _1169 = _457 * 0.5;
    float _1170 = _458 * 0.5;
    float _1171 = dot(vec4(_1168, _1169, _1170, 1.0), vec4(_1102, _1105, _1108, _1111));
    float _1174 = dot(vec4(_1168, _1169, _1170, 1.0), vec4(_1101, _1104, _1107, _1110));
    float _1177 = dot(vec4(_1168, _1169, _1170, 1.0), vec4(_1100, _1103, _1106, _1109));
    float _1211;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1184 = dot(vec4(_1168, _1169, _1170, 1.0), vec4(_790, _794, _797, _800));
        float _1188 = dot(vec4(_1168, _1169, _1170, 1.0), vec4(_792, _795, _798, _801));
        float _1192 = dot(vec4(_1168, _1169, _1170, 1.0), vec4(_793, _796, _799, _802));
        float _1199 = dot(vec4(cbModelParam._m0[39u]), vec4(_1168, _1169, _1170, 1.0));
        _1211 = dot(vec3(isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)), isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)), isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1199) ? 0.0 : (isnan(0.0) ? _1199 : max(0.0, _1199))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1211 = 1.0;
    }
    float _1222;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1213 = dot(vec4(cbModelParam._m0[40u]), vec4(_1168, _1169, _1170, 1.0));
        _1222 = dot(vec3(isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)), isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)), isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1213) ? 0.0 : (isnan(0.0) ? _1213 : max(0.0, _1213))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1222 = 1.0;
    }
    float _1226 = (_1222 * cbModelParam._m0[1u].x) + (_1211 * (1.0 - cbModelParam._m0[1u].x));
    float _1235 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1317;
    float _1319;
    float _1321;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1284 = fma(_488, cbModelParam._m0[13u].z, fma(_484, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _480)) + cbModelParam._m0[13u].w;
        float _1288 = fma(_488, cbModelParam._m0[14u].z, fma(_484, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _480)) + cbModelParam._m0[14u].w;
        float _1292 = fma(_488, cbModelParam._m0[15u].z, fma(_484, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _480)) + cbModelParam._m0[15u].w;
        float _1295 = fma(_458, cbModelParam._m0[13u].z, fma(_457, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _456));
        float _1298 = fma(_458, cbModelParam._m0[14u].z, fma(_457, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _456));
        float _1301 = fma(_458, cbModelParam._m0[15u].z, fma(_457, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _456));
        float _1327;
        if (_1295 > 0.0)
        {
            _1327 = abs((1.0 - _1284) / _1295);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1295 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1284 + 1.0) / _1295);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1327 = frontier_phi_16_14_ladder;
        }
        float _1501;
        if (_1298 > 0.0)
        {
            _1501 = abs((1.0 - _1288) / _1298);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1298 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1288 + 1.0) / _1298);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1501 = frontier_phi_25_21_ladder;
        }
        float _1797;
        if (_1301 > 0.0)
        {
            _1797 = abs((1.0 - _1292) / _1301);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1301 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1292 + 1.0) / _1301);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1797 = frontier_phi_37_32_ladder;
        }
        float _1799 = isnan(_1501) ? _1327 : (isnan(_1327) ? _1501 : min(_1327, _1501));
        float _1800 = isnan(_1797) ? _1799 : (isnan(_1799) ? _1797 : min(_1799, _1797));
        float _1804 = (_1800 * _1295) + _1284;
        float _1805 = (_1800 * _1298) + _1288;
        float _1806 = (_1800 * _1301) + _1292;
        float _1807 = _1800 * 9.9999997473787516355514526367188e-05;
        float _1809 = (-1.0) - _1807;
        float _1811 = _1807 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1806 > _1811) || ((_1806 < _1809) || ((_1805 > _1811) || ((_1805 < _1809) || ((_1804 < _1809) || (_1804 > _1811))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1951 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1806, cbModelParam._m0[9u].z, fma(_1805, cbModelParam._m0[9u].y, _1804 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1806, cbModelParam._m0[10u].z, fma(_1805, cbModelParam._m0[10u].y, _1804 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1806, cbModelParam._m0[11u].z, fma(_1805, cbModelParam._m0[11u].y, _1804 * cbModelParam._m0[11u].x))), _1235);
            frontier_phi_15_37_ladder = _1951.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1951.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1951.z * cbModelParam._m0[1u].y;
        }
        _1317 = frontier_phi_15_37_ladder_1;
        _1319 = frontier_phi_15_37_ladder;
        _1321 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1305 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_456, _457, _458), _1235);
        _1317 = _1305.x * cbModelParam._m0[1u].y;
        _1319 = _1305.y * cbModelParam._m0[1u].y;
        _1321 = _1305.z * cbModelParam._m0[1u].y;
    }
    float _1324 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1416;
    float _1418;
    float _1420;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1380 = fma(_488, cbModelParam._m0[21u].z, fma(_484, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _480)) + cbModelParam._m0[21u].w;
        float _1384 = fma(_488, cbModelParam._m0[22u].z, fma(_484, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _480)) + cbModelParam._m0[22u].w;
        float _1388 = fma(_488, cbModelParam._m0[23u].z, fma(_484, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _480)) + cbModelParam._m0[23u].w;
        float _1391 = fma(_458, cbModelParam._m0[21u].z, fma(_457, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _456));
        float _1394 = fma(_458, cbModelParam._m0[22u].z, fma(_457, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _456));
        float _1397 = fma(_458, cbModelParam._m0[23u].z, fma(_457, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _456));
        float _1506;
        if (_1391 > 0.0)
        {
            _1506 = abs((1.0 - _1380) / _1391);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1391 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1380 + 1.0) / _1391);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1506 = frontier_phi_27_23_ladder;
        }
        float _1824;
        if (_1394 > 0.0)
        {
            _1824 = abs((1.0 - _1384) / _1394);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1394 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1384 + 1.0) / _1394);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1824 = frontier_phi_39_34_ladder;
        }
        float _2097;
        if (_1397 > 0.0)
        {
            _2097 = abs((1.0 - _1388) / _1397);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1397 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1388 + 1.0) / _1397);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2097 = frontier_phi_49_46_ladder;
        }
        float _2099 = isnan(_1824) ? _1506 : (isnan(_1506) ? _1824 : min(_1506, _1824));
        float _2100 = isnan(_2097) ? _2099 : (isnan(_2099) ? _2097 : min(_2099, _2097));
        float _2104 = (_2100 * _1391) + _1380;
        float _2105 = (_2100 * _1394) + _1384;
        float _2106 = (_2100 * _1397) + _1388;
        float _2107 = _2100 * 9.9999997473787516355514526367188e-05;
        float _2108 = (-1.0) - _2107;
        float _2110 = _2107 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2106 > _2110) || ((_2106 < _2108) || ((_2105 > _2110) || ((_2105 < _2108) || ((_2104 < _2108) || (_2104 > _2110))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2197 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2106, cbModelParam._m0[17u].z, fma(_2105, cbModelParam._m0[17u].y, _2104 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2106, cbModelParam._m0[18u].z, fma(_2105, cbModelParam._m0[18u].y, _2104 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2106, cbModelParam._m0[19u].z, fma(_2105, cbModelParam._m0[19u].y, _2104 * cbModelParam._m0[19u].x))), _1324);
            frontier_phi_24_49_ladder = _2197.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2197.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2197.x * cbModelParam._m0[1u].z;
        }
        _1416 = frontier_phi_24_49_ladder_2;
        _1418 = frontier_phi_24_49_ladder_1;
        _1420 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1400 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_456, _457, _458), _1324);
        _1416 = _1400.x * cbModelParam._m0[1u].z;
        _1418 = _1400.y * cbModelParam._m0[1u].z;
        _1420 = _1400.z * cbModelParam._m0[1u].z;
    }
    float _1432 = _448 * 0.01200000010430812835693359375;
    float _1434 = _1432 * ((cbModelParam._m0[1u].w * (_1416 - _1317)) + _1317);
    float _1435 = _1432 * ((cbModelParam._m0[1u].w * (_1418 - _1319)) + _1319);
    float _1436 = _1432 * ((cbModelParam._m0[1u].w * (_1420 - _1321)) + _1321);
    float _1439 = fma(_1436, cbSceneParam._m0[89u].z, fma(_1435, cbSceneParam._m0[89u].y, _1434 * cbSceneParam._m0[89u].x));
    float _1442 = fma(_1436, cbSceneParam._m0[90u].z, fma(_1435, cbSceneParam._m0[90u].y, _1434 * cbSceneParam._m0[90u].x));
    float _1445 = fma(_1436, cbSceneParam._m0[91u].z, fma(_1435, cbSceneParam._m0[91u].y, _1434 * cbSceneParam._m0[91u].x));
    float _1480 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1484 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1488 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1492 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1493 = _1480 / _1492;
    float _1494 = _1484 / _1492;
    float _1495 = _1488 / _1492;
    float _1642;
    float _1643;
    float _1644;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1522 = ((uint(_1495 > cbSceneParam._m0[59u].y) + uint(_1495 > cbSceneParam._m0[59u].x)) + uint(_1495 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1523 = _1522 + 43u;
        uint _1531 = _1522 + 44u;
        uint _1539 = _1522 + 45u;
        uint _1547 = _1522 + 46u;
        float _1558 = fma(_1492, cbSceneParam._m0[_1523].w, fma(_1488, cbSceneParam._m0[_1523].z, fma(_1484, cbSceneParam._m0[_1523].y, _1480 * cbSceneParam._m0[_1523].x)));
        float _1562 = fma(_1492, cbSceneParam._m0[_1531].w, fma(_1488, cbSceneParam._m0[_1531].z, fma(_1484, cbSceneParam._m0[_1531].y, _1480 * cbSceneParam._m0[_1531].x)));
        float _1570 = fma(_1492, cbSceneParam._m0[_1547].w, fma(_1488, cbSceneParam._m0[_1547].z, fma(_1484, cbSceneParam._m0[_1547].y, _1480 * cbSceneParam._m0[_1547].x)));
        float _1575 = cbSceneParam._m0[33u].z * _1570;
        float _1577 = cbSceneParam._m0[33u].w * _1570;
        float _1580 = fma(_1492, cbSceneParam._m0[_1539].w, fma(_1488, cbSceneParam._m0[_1539].z, fma(_1484, cbSceneParam._m0[_1539].y, _1480 * cbSceneParam._m0[_1539].x))) / _1570;
        float _1628 = (cbSceneParam._m0[33u].x - sqrt(((_1494 * _1494) + (_1493 * _1493)) + (_1495 * _1495))) * cbSceneParam._m0[33u].y;
        float _3645 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1635 = (isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1575 + _1558) / _1570, (_1577 + _1562) / _1570), _1580), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1577 + _1558) / _1570, (_1562 - _1575) / _1570), _1580), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1558 - _1575) / _1570, (_1562 - _1577) / _1570), _1580), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1558 - _1577) / _1570, (_1575 + _1562) / _1570), _1580), 0.0)).x), vec4(0.25)));
        _1642 = 1.0 - (_1635 * cbSceneParam._m0[34u].x);
        _1643 = 1.0 - (_1635 * cbSceneParam._m0[34u].y);
        _1644 = 1.0 - (_1635 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1642 = 1.0;
        _1643 = 1.0;
        _1644 = 1.0;
    }
    float _1708;
    float _1710;
    float _1712;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1696 = fma(_1492, cbSceneParam._m0[63u].w, fma(_1488, cbSceneParam._m0[63u].z, fma(_1484, cbSceneParam._m0[63u].y, _1480 * cbSceneParam._m0[63u].x)));
        float _1697 = fma(_1492, cbSceneParam._m0[60u].w, fma(_1488, cbSceneParam._m0[60u].z, fma(_1484, cbSceneParam._m0[60u].y, _1480 * cbSceneParam._m0[60u].x))) / _1696;
        float _1698 = fma(_1492, cbSceneParam._m0[61u].w, fma(_1488, cbSceneParam._m0[61u].z, fma(_1484, cbSceneParam._m0[61u].y, _1480 * cbSceneParam._m0[61u].x))) / _1696;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1697 >= cbSceneParam._m0[64u].x) && (_1698 >= cbSceneParam._m0[64u].y)) && (_1697 <= cbSceneParam._m0[64u].z)) && (_1698 <= cbSceneParam._m0[64u].w))
        {
            float _1837 = fma(_1492, cbSceneParam._m0[62u].w, fma(_1488, cbSceneParam._m0[62u].z, fma(_1484, cbSceneParam._m0[62u].y, _1480 * cbSceneParam._m0[62u].x))) / _1696;
            float _1841 = isnan(cbSceneParam._m0[41u].w) ? _1837 : (isnan(_1837) ? cbSceneParam._m0[41u].w : max(_1837, cbSceneParam._m0[41u].w));
            float _1884 = (cbSceneParam._m0[33u].x - sqrt(((_1494 * _1494) + (_1493 * _1493)) + (_1495 * _1495))) * cbSceneParam._m0[33u].y;
            float _3661 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
            float _1891 = (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1697, cbSceneParam._m0[33u].w + _1698), _1841), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1697, _1698 - cbSceneParam._m0[33u].z), _1841), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1697 - cbSceneParam._m0[33u].z, _1698 - cbSceneParam._m0[33u].w), _1841), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1697 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1698), _1841), 0.0)).x), vec4(0.25)));
            float _1895 = 1.0 - (_1891 * cbSceneParam._m0[34u].x);
            float _1896 = 1.0 - (_1891 * cbSceneParam._m0[34u].y);
            float _1897 = 1.0 - (_1891 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1896) ? _1643 : (isnan(_1643) ? _1896 : min(_1643, _1896));
            frontier_phi_36_35_ladder_1 = isnan(_1897) ? _1644 : (isnan(_1644) ? _1897 : min(_1644, _1897));
            frontier_phi_36_35_ladder_2 = isnan(_1895) ? _1642 : (isnan(_1642) ? _1895 : min(_1642, _1895));
        }
        else
        {
            frontier_phi_36_35_ladder = _1643;
            frontier_phi_36_35_ladder_1 = _1644;
            frontier_phi_36_35_ladder_2 = _1642;
        }
        _1708 = frontier_phi_36_35_ladder_2;
        _1710 = frontier_phi_36_35_ladder;
        _1712 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1708 = _1642;
        _1710 = _1643;
        _1712 = _1644;
    }
    uvec4 _1717 = floatBitsToUint(cbInstanceData._m0[_422 + 5u]);
    uint _1719 = _1717.x * 14u;
    uint _1720 = _1719 + 13u;
    float _1727 = _448 + (-1.0);
    float _1732 = (cbLight._m0[_1720].x * _1727) + 1.0;
    float _1733 = (cbLight._m0[_1720].y * _1727) + 1.0;
    float _1734 = (cbLight._m0[_1720].z * _1727) + 1.0;
    float _1735 = (cbLight._m0[_1720].w * _1727) + 1.0;
    uint _1736 = _1719 + 5u;
    float _1742 = isnan(1.0) ? _1733 : (isnan(_1733) ? 1.0 : min(_1733, 1.0));
    uint _1746 = _1719 + 4u;
    float _1756 = isnan(1.0) ? _1732 : (isnan(_1732) ? 1.0 : min(_1732, 1.0));
    uint _1760 = _1719 | 1u;
    float _1771 = dot(vec3(cbLight._m0[_1719].xyz), vec3(_353, _354, _355));
    float _1774 = dot(vec3(cbLight._m0[_1760].xyz), vec3(_353, _354, _355));
    float _3697 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _3708 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
    float _1779 = (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * 0.3183098733425140380859375;
    float _1781 = (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * 0.3183098733425140380859375;
    float _1788 = ((cbLight._m0[_1736].x * _1742) * _1781) + (((cbLight._m0[_1746].x * _1708) * _1756) * _1779);
    float _1789 = ((_1742 * cbLight._m0[_1736].y) * _1781) + (((cbLight._m0[_1746].y * _1710) * _1756) * _1779);
    float _1790 = ((_1742 * cbLight._m0[_1736].z) * _1781) + (((cbLight._m0[_1746].z * _1712) * _1756) * _1779);
    uvec4 _1794 = floatBitsToUint(cbLight._m0[_1719 + 12u]);
    bool _1796 = _1794.x == 0u;
    float _1898;
    float _1900;
    float _1902;
    if (_1796)
    {
        _1898 = _1788;
        _1900 = _1789;
        _1902 = _1790;
    }
    else
    {
        uint _1906 = _1719 + 6u;
        float _1922 = (dot(vec3(cbLight._m0[_1719 + 2u].xyz), vec3(_353, _354, _355)) * 0.5) + 0.5;
        float _1923 = _1922 * _1922;
        float _3719 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
        float _1924 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1925 = isnan(1.0) ? _1734 : (isnan(_1734) ? 1.0 : min(_1734, 1.0));
        _1898 = (((cbLight._m0[_1906].x * 0.3183098733425140380859375) * _1924) * _1925) + _1788;
        _1900 = (((cbLight._m0[_1906].y * 0.3183098733425140380859375) * _1924) * _1925) + _1789;
        _1902 = (((cbLight._m0[_1906].z * 0.3183098733425140380859375) * _1924) * _1925) + _1790;
    }
    bool _1905 = _1794.y == 0u;
    float _1960;
    float _1962;
    float _1964;
    if (_1905)
    {
        _1960 = _1898;
        _1962 = _1900;
        _1964 = _1902;
    }
    else
    {
        uint _2068 = _1719 + 7u;
        float _2084 = (dot(vec3(cbLight._m0[_1719 + 3u].xyz), vec3(_353, _354, _355)) * 0.5) + 0.5;
        float _2085 = _2084 * _2084;
        float _3735 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        float _2086 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _2087 = isnan(1.0) ? _1735 : (isnan(_1735) ? 1.0 : min(_1735, 1.0));
        _1960 = (((cbLight._m0[_2068].x * 0.3183098733425140380859375) * _2086) * _2087) + _1898;
        _1962 = (((cbLight._m0[_2068].y * 0.3183098733425140380859375) * _2086) * _2087) + _1900;
        _1964 = (((cbLight._m0[_2068].z * 0.3183098733425140380859375) * _2086) * _2087) + _1902;
    }
    uint _1966 = _1719 + 8u;
    float _1972 = cbLight._m0[_1719].x + _329;
    float _1973 = cbLight._m0[_1719].y + _330;
    float _1974 = cbLight._m0[_1719].z + _331;
    float _1978 = inversesqrt(dot(vec3(_1972, _1973, _1974), vec3(_1972, _1973, _1974)));
    float _1982 = dot(vec3(_353, _354, _355), vec3(cbLight._m0[_1719].xyz));
    float _3751 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _1985 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _3762 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _1986 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
    float _1987 = dot(vec3(cbLight._m0[_1719].xyz), vec3(_1972 * _1978, _1973 * _1978, _1974 * _1978));
    float _3773 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1998 = (exp2(log2(1.0 - (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2004 = (0.5 / ((_1985 + 9.9999999392252902907785028219223e-09) + _1986)) * _1985;
    float _3784 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2006 = (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * 0.31831014156341552734375;
    uint _2020 = _1719 + 9u;
    float _2026 = cbLight._m0[_1760].x + _329;
    float _2027 = cbLight._m0[_1760].y + _330;
    float _2028 = cbLight._m0[_1760].z + _331;
    float _2032 = inversesqrt(dot(vec3(_2026, _2027, _2028), vec3(_2026, _2027, _2028)));
    float _2036 = dot(vec3(_353, _354, _355), vec3(cbLight._m0[_1760].xyz));
    float _3795 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2039 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _2040 = dot(vec3(cbLight._m0[_1760].xyz), vec3(_2026 * _2032, _2027 * _2032, _2028 * _2032));
    float _3806 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2049 = (exp2(log2(1.0 - (isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2053 = (0.5 / ((_2039 + 9.9999999392252902907785028219223e-09) + _1986)) * _2039;
    float _3817 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2055 = (isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * 0.31831014156341552734375;
    float _2065 = (((_2049 * cbLight._m0[_2020].x) * _2055) * _1742) + ((((cbLight._m0[_1966].x * _1708) * _1998) * _2006) * _1756);
    float _2066 = (((_2049 * cbLight._m0[_2020].y) * _2055) * _1742) + ((((cbLight._m0[_1966].y * _1710) * _1998) * _2006) * _1756);
    float _2067 = (((_2049 * cbLight._m0[_2020].z) * _2055) * _1742) + ((((cbLight._m0[_1966].z * _1712) * _1998) * _2006) * _1756);
    float _2123;
    float _2125;
    float _2127;
    if (_1796)
    {
        _2123 = _2065;
        _2125 = _2066;
        _2127 = _2067;
    }
    else
    {
        uint _2129 = _1719 + 10u;
        uint _2135 = _1719 + 2u;
        float _2141 = cbLight._m0[_2135].x + _329;
        float _2142 = cbLight._m0[_2135].y + _330;
        float _2143 = cbLight._m0[_2135].z + _331;
        float _2147 = inversesqrt(dot(vec3(_2141, _2142, _2143), vec3(_2141, _2142, _2143)));
        float _2151 = dot(vec3(_353, _354, _355), vec3(cbLight._m0[_2135].xyz));
        float _3828 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2154 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _2155 = dot(vec3(cbLight._m0[_2135].xyz), vec3(_2141 * _2147, _2142 * _2147, _2143 * _2147));
        float _3839 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2164 = (exp2(log2(1.0 - (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2168 = (0.5 / ((_2154 + 9.9999999392252902907785028219223e-09) + _1986)) * _2154;
        float _3850 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2170 = (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * 0.31831014156341552734375;
        float _2171 = isnan(1.0) ? _1734 : (isnan(_1734) ? 1.0 : min(_1734, 1.0));
        _2123 = (((_2164 * cbLight._m0[_2129].x) * _2170) * _2171) + _2065;
        _2125 = (((_2164 * cbLight._m0[_2129].y) * _2170) * _2171) + _2066;
        _2127 = (((_2164 * cbLight._m0[_2129].z) * _2170) * _2171) + _2067;
    }
    float _2202;
    float _2204;
    float _2206;
    if (_1905)
    {
        _2202 = _2123;
        _2204 = _2125;
        _2206 = _2127;
    }
    else
    {
        uint _2213 = _1719 + 11u;
        uint _2219 = _1719 + 3u;
        float _2225 = cbLight._m0[_2219].x + _329;
        float _2226 = cbLight._m0[_2219].y + _330;
        float _2227 = cbLight._m0[_2219].z + _331;
        float _2231 = inversesqrt(dot(vec3(_2225, _2226, _2227), vec3(_2225, _2226, _2227)));
        float _2235 = dot(vec3(_353, _354, _355), vec3(cbLight._m0[_2219].xyz));
        float _3866 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2238 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _2239 = dot(vec3(cbLight._m0[_2219].xyz), vec3(_2225 * _2231, _2226 * _2231, _2227 * _2231));
        float _3877 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2248 = (exp2(log2(1.0 - (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2252 = (0.5 / ((_2238 + 9.9999999392252902907785028219223e-09) + _1986)) * _2238;
        float _3888 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2254 = (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * 0.31831014156341552734375;
        float _2255 = isnan(1.0) ? _1735 : (isnan(_1735) ? 1.0 : min(_1735, 1.0));
        _2202 = (((_2248 * cbLight._m0[_2213].x) * _2254) * _2255) + _2123;
        _2204 = (((_2248 * cbLight._m0[_2213].y) * _2254) * _2255) + _2125;
        _2206 = (((_2248 * cbLight._m0[_2213].z) * _2254) * _2255) + _2127;
    }
    float _2320;
    float _2322;
    float _2324;
    float _2326;
    float _2328;
    float _2330;
    if (_1717.y == 0u)
    {
        uvec4 _2276 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2277 = _2276.x;
        uint _2288 = uint((float(_2276.y) * floor(float(uint(cbSceneParam._m0[85u].y * _382) / _2277))) + floor(float(uint(cbSceneParam._m0[85u].x * _381) / _2277)));
        float _2298 = (log2(_1495 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2299 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        uint _2302 = uint(isnan(14.0) ? _2299 : (isnan(_2299) ? 14.0 : min(_2299, 14.0)));
        uvec4 _2307 = texelFetch(g_lightClusterGridBuffer, int(((_2302 << 2u) + (_2288 << 6u)) >> 2u));
        uint _2308 = _2307.x;
        uint _2309 = _2276.z;
        float _2392;
        float _2394;
        float _2396;
        float _2398;
        float _2400;
        float _2402;
        if (((((1u << ((_2309 >> 4u) & 15u)) + 4294967295u) & _2308) == 0u) || ((_2309 & 240u) == 0u))
        {
            _2392 = 0.0;
            _2394 = 0.0;
            _2396 = 0.0;
            _2398 = 0.0;
            _2400 = 0.0;
            _2402 = 0.0;
        }
        else
        {
            float _2393;
            float _2395;
            float _2397;
            float _2399;
            float _2401;
            float _2403;
            float _2534 = 0.0;
            float _2535 = 0.0;
            float _2536 = 0.0;
            float _2537 = 0.0;
            float _2538 = 0.0;
            float _2539 = 0.0;
            uint _2540 = 0u;
            uint _2549;
            bool _2550;
            for (;;)
            {
                _2549 = texelFetch(g_lightClassification, int((((_2302 << 5u) + (_2288 << 9u)) + (_2540 << 2u)) >> 2u)).x;
                _2550 = _2549 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2550)
                {
                    frontier_phi_68_pred = _2539;
                    frontier_phi_68_pred_1 = _2538;
                    frontier_phi_68_pred_2 = _2537;
                    frontier_phi_68_pred_3 = _2535;
                    frontier_phi_68_pred_4 = _2534;
                    frontier_phi_68_pred_5 = _2536;
                }
                else
                {
                    float _2658;
                    float _2659;
                    float _2660;
                    float _2661;
                    float _2662;
                    float _2663;
                    uint _2664;
                    _2658 = _2534;
                    _2659 = _2535;
                    _2660 = _2536;
                    _2661 = _2537;
                    _2662 = _2538;
                    _2663 = _2539;
                    _2664 = _2549;
                    float _2590;
                    float _2591;
                    float _2592;
                    float _2593;
                    float _2594;
                    float _2595;
                    for (;;)
                    {
                        uint _2668 = uint(findLSB(_2664)) + (_2540 << 5u);
                        uint _2665 = (_2664 + 4294967295u) & _2664;
                        uint _2670 = _2668 * 48u;
                        vec4 _2684 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2670)).x, texelFetch(g_PointLightRenderingBuffer, int(_2670 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2670 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2670 + 3u)).x));
                        uint _2690 = (_2668 * 48u) + 4u;
                        vec4 _2703 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2690)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 3u)).x));
                        uint _2709 = (_2668 * 48u) + 8u;
                        vec3 _2720 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2709)).x, texelFetch(g_PointLightRenderingBuffer, int(_2709 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2709 + 2u)).x));
                        float _2724 = _2684.x - _1493;
                        float _2725 = _2684.y - _1494;
                        float _2726 = _2684.z - _1495;
                        float _2727 = dot(vec3(_2724, _2725, _2726), vec3(_2724, _2725, _2726));
                        float _2730 = inversesqrt(_2727);
                        float _2739 = 1.0 - (_2727 * _2684.w);
                        float _3914 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
                        float _2740 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
                        float _2741 = sqrt(_2727) * _2703.w;
                        float _2744 = 1.39999997615814208984375 / (_2741 + 1.39999997615814208984375);
                        float _2745 = _2744 * _2744;
                        float _2748 = ((1.0 - _2745) * dot(vec3(_403, _406, _409), vec3(_2730 * _2724, _2730 * _2725, _2730 * _2726))) + _2745;
                        float _2751 = _2741 * _2741;
                        float _2755 = ((isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0))) * _2740) / ((_2751 * 0.699999988079071044921875) + 1.0);
                        float _2759 = (-0.0) - _1493;
                        float _2760 = (-0.0) - _1494;
                        float _2761 = (-0.0) - _1495;
                        float _2765 = inversesqrt(dot(vec3(_2759, _2760, _2761), vec3(_2759, _2760, _2761)));
                        float _2769 = dot(vec3(_403, _406, _409), vec3(_2765 * _2759, _2765 * _2760, _2765 * _2761));
                        float _3930 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
                        float _3941 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
                        float _2773 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
                        float _2777 = (0.5 / (((isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) + 9.9999999392252902907785028219223e-09) + _2773)) * _2773;
                        float _3952 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
                        float _2786 = (((isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * 3.1415927410125732421875) / ((_2751 * 2.1991131305694580078125) + 3.141590118408203125)) * _2740;
                        _2593 = (_2755 * _2703.x) + _2661;
                        _2594 = (_2755 * _2703.y) + _2662;
                        _2595 = (_2755 * _2703.z) + _2663;
                        _2590 = (_2786 * _2720.x) + _2658;
                        _2591 = (_2786 * _2720.y) + _2659;
                        _2592 = (_2786 * _2720.z) + _2660;
                        if (_2665 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2658 = _2590;
                            _2659 = _2591;
                            _2660 = _2592;
                            _2661 = _2593;
                            _2662 = _2594;
                            _2663 = _2595;
                            _2664 = _2665;
                        }
                    }
                    frontier_phi_68_pred = _2595;
                    frontier_phi_68_pred_1 = _2594;
                    frontier_phi_68_pred_2 = _2593;
                    frontier_phi_68_pred_3 = _2591;
                    frontier_phi_68_pred_4 = _2590;
                    frontier_phi_68_pred_5 = _2592;
                }
                _2403 = frontier_phi_68_pred;
                _2401 = frontier_phi_68_pred_1;
                _2399 = frontier_phi_68_pred_2;
                _2395 = frontier_phi_68_pred_3;
                _2393 = frontier_phi_68_pred_4;
                _2397 = frontier_phi_68_pred_5;
                uint _2541 = _2540 + 1u;
                if (_2541 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2534 = _2393;
                    _2535 = _2395;
                    _2536 = _2397;
                    _2537 = _2399;
                    _2538 = _2401;
                    _2539 = _2403;
                    _2540 = _2541;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2392 = _2393;
            _2394 = _2395;
            _2396 = _2397;
            _2398 = _2399;
            _2400 = _2401;
            _2402 = _2403;
        }
        uvec4 _2406 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2407 = _2406.z;
        uint _2409 = (_2407 >> 8u) & 15u;
        float _2505;
        float _2507;
        float _2509;
        float _2511;
        float _2513;
        float _2515;
        if (((4294967295u << _2409) & _2308) == 0u)
        {
            _2505 = _2392;
            _2507 = _2394;
            _2509 = _2396;
            _2511 = _2398;
            _2513 = _2400;
            _2515 = _2402;
        }
        else
        {
            float _2530 = inversesqrt(dot(vec3(_1493, _1494, _1495), vec3(_1493, _1494, _1495)));
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2409 < ((_2407 >> 12u) & 15u))
            {
                float _2506;
                float _2508;
                float _2510;
                float _2512;
                float _2514;
                float _2516;
                float _2641 = _2392;
                float _2642 = _2394;
                float _2643 = _2396;
                float _2644 = _2398;
                float _2645 = _2400;
                float _2646 = _2402;
                uint _2647 = _2409;
                uint _2656;
                bool _2657;
                for (;;)
                {
                    _2656 = texelFetch(g_lightClassification, int((((_2302 << 5u) + (_2288 << 9u)) + (_2647 << 2u)) >> 2u)).x;
                    _2657 = _2656 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2657)
                    {
                        frontier_phi_74_pred = _2643;
                        frontier_phi_74_pred_1 = _2642;
                        frontier_phi_74_pred_2 = _2641;
                        frontier_phi_74_pred_3 = _2646;
                        frontier_phi_74_pred_4 = _2645;
                        frontier_phi_74_pred_5 = _2644;
                    }
                    else
                    {
                        float _2791;
                        float _2792;
                        float _2793;
                        float _2794;
                        float _2795;
                        float _2796;
                        float _3043;
                        float _3044;
                        float _3045;
                        float _3046;
                        float _3047;
                        float _3048;
                        float _2804 = _2641;
                        float _2805 = _2642;
                        float _2806 = _2643;
                        float _2807 = _2644;
                        float _2808 = _2645;
                        float _2809 = _2646;
                        uint _2810 = _2656;
                        uint _2811;
                        vec4 _2836;
                        float _2837;
                        vec4 _2852;
                        vec3 _2864;
                        vec4 _2880;
                        vec4 _2896;
                        float _2943;
                        bool _2944;
                        for (;;)
                        {
                            uint _2821 = ((_2647 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2810));
                            _2811 = (_2810 + 4294967295u) & _2810;
                            uint _2823 = _2821 * 40u;
                            _2836 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2823)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 3u)).x));
                            _2837 = _2836.w;
                            uint _2839 = (_2821 * 40u) + 4u;
                            _2852 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2839)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 3u)).x));
                            uint _2854 = (_2821 * 40u) + 8u;
                            _2864 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2854)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 2u)).x));
                            uint _2867 = (_2821 * 40u) + 16u;
                            _2880 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2867)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 3u)).x));
                            uint _2883 = (_2821 * 40u) + 20u;
                            _2896 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2883)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 3u)).x));
                            uint _2899 = (_2821 * 40u) + 24u;
                            vec4 _2912 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2899)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 3u)).x));
                            uint _2918 = (_2821 * 40u) + 28u;
                            vec4 _2931 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2918)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 3u)).x));
                            _2943 = fma(_1495, _2931.z, fma(_1494, _2931.y, _2931.x * _1493)) + _2931.w;
                            _2944 = !((fma(_1495, _2912.z, fma(_1494, _2912.y, _2912.x * _1493)) + _2912.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_2944)
                            {
                                float _2971 = _2836.x - _1493;
                                float _2972 = _2836.y - _1494;
                                float _2973 = _2836.z - _1495;
                                float _2974 = dot(vec3(_2971, _2972, _2973), vec3(_2971, _2972, _2973));
                                float _2977 = inversesqrt(_2974);
                                float _2978 = _2977 * _2971;
                                float _2979 = _2977 * _2972;
                                float _2980 = _2977 * _2973;
                                float _2984 = 1.0 - (_2974 / (_2837 * _2837));
                                float _3963 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
                                float _2985 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
                                float _2989 = sqrt(_2974) * _2852.w;
                                float _2991 = 1.39999997615814208984375 / (_2989 + 1.39999997615814208984375);
                                float _2992 = _2991 * _2991;
                                float _2993 = 1.0 - _2992;
                                float _2995 = (_2993 * dot(vec3(_2978, _2979, _2980), vec3(_403, _406, _409))) + _2992;
                                float _2998 = _2989 * _2989;
                                float _3002 = (fma(_1495, _2880.z, fma(_1494, _2880.y, _2880.x * _1493)) + _2880.w) / _2943;
                                float _3003 = (fma(_1495, _2896.z, fma(_1494, _2896.y, _2896.x * _1493)) + _2896.w) / _2943;
                                float _3007 = 1.0 - dot(vec2(_3002, _3003), vec2(_3002, _3003));
                                float _3979 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                                float _3008 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
                                float _3009 = _3008 * (((isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0))) * _2985) / ((_2998 * 0.699999988079071044921875) + 1.0));
                                float _3019 = dot(vec3(_403, _406, _409), vec3((-0.0) - (_1493 * _2530), (-0.0) - (_1494 * _2530), (-0.0) - (_1495 * _2530)));
                                float _3990 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
                                float _3027 = (_2993 * dot(vec3(_403, _406, _409), vec3(_2978, _2979, _2980))) + _2992;
                                float _4001 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                                float _3028 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
                                float _3032 = (0.5 / (((isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) + 9.9999999392252902907785028219223e-09) + _3028)) * _3028;
                                float _4012 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                                float _3039 = (_3008 * _2985) * (((isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * 3.1415927410125732421875) / ((_2998 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_80_pred = _3039 * _2864.z;
                                frontier_phi_80_pred_1 = _3039 * _2864.y;
                                frontier_phi_80_pred_2 = _3039 * _2864.x;
                                frontier_phi_80_pred_3 = _3009 * _2852.z;
                                frontier_phi_80_pred_4 = _3009 * _2852.y;
                                frontier_phi_80_pred_5 = _3009 * _2852.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3045 = frontier_phi_80_pred;
                            _3044 = frontier_phi_80_pred_1;
                            _3043 = frontier_phi_80_pred_2;
                            _3048 = frontier_phi_80_pred_3;
                            _3047 = frontier_phi_80_pred_4;
                            _3046 = frontier_phi_80_pred_5;
                            _2794 = _3046 + _2807;
                            _2795 = _3047 + _2808;
                            _2796 = _3048 + _2809;
                            _2791 = _3043 + _2804;
                            _2792 = _3044 + _2805;
                            _2793 = _3045 + _2806;
                            if (_2811 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2804 = _2791;
                                _2805 = _2792;
                                _2806 = _2793;
                                _2807 = _2794;
                                _2808 = _2795;
                                _2809 = _2796;
                                _2810 = _2811;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _2793;
                        frontier_phi_74_pred_1 = _2792;
                        frontier_phi_74_pred_2 = _2791;
                        frontier_phi_74_pred_3 = _2796;
                        frontier_phi_74_pred_4 = _2795;
                        frontier_phi_74_pred_5 = _2794;
                    }
                    _2510 = frontier_phi_74_pred;
                    _2508 = frontier_phi_74_pred_1;
                    _2506 = frontier_phi_74_pred_2;
                    _2516 = frontier_phi_74_pred_3;
                    _2514 = frontier_phi_74_pred_4;
                    _2512 = frontier_phi_74_pred_5;
                    uint _2648 = _2647 + 1u;
                    if (_2648 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2641 = _2506;
                        _2642 = _2508;
                        _2643 = _2510;
                        _2644 = _2512;
                        _2645 = _2514;
                        _2646 = _2516;
                        _2647 = _2648;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2514;
                frontier_phi_62_63_ladder_1 = _2512;
                frontier_phi_62_63_ladder_2 = _2510;
                frontier_phi_62_63_ladder_3 = _2516;
                frontier_phi_62_63_ladder_4 = _2508;
                frontier_phi_62_63_ladder_5 = _2506;
            }
            else
            {
                frontier_phi_62_63_ladder = _2400;
                frontier_phi_62_63_ladder_1 = _2398;
                frontier_phi_62_63_ladder_2 = _2396;
                frontier_phi_62_63_ladder_3 = _2402;
                frontier_phi_62_63_ladder_4 = _2394;
                frontier_phi_62_63_ladder_5 = _2392;
            }
            _2505 = frontier_phi_62_63_ladder_5;
            _2507 = frontier_phi_62_63_ladder_4;
            _2509 = frontier_phi_62_63_ladder_2;
            _2511 = frontier_phi_62_63_ladder_1;
            _2513 = frontier_phi_62_63_ladder;
            _2515 = frontier_phi_62_63_ladder_3;
        }
        float _2520 = isnan(1.0) ? _448 : (isnan(_448) ? 1.0 : min(_448, 1.0));
        _2320 = (_2520 * _2511) + _1960;
        _2322 = (_2520 * _2513) + _1962;
        _2324 = (_2520 * _2515) + _1964;
        _2326 = ((_2505 * 0.039999999105930328369140625) * _2520) + _2202;
        _2328 = ((_2507 * 0.039999999105930328369140625) * _2520) + _2204;
        _2330 = ((_2509 * 0.039999999105930328369140625) * _2520) + _2206;
    }
    else
    {
        _2320 = _1960;
        _2322 = _1962;
        _2324 = _1964;
        _2326 = _2202;
        _2328 = _2204;
        _2330 = _2206;
    }
    float _4028 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _4039 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _4050 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _4061 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _2348 = ((isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_2320 + ((isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0))) * _448))) + ((_2326 + ((isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))) * _1226)) * cbPerFrame._m0[3u].x);
    float _2349 = ((isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_2322 + ((isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0))) * _448))) + ((_2328 + ((isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0))) * _1226)) * cbPerFrame._m0[3u].x);
    float _2350 = ((isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_2324 + ((isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0))) * _448))) + ((_2330 + ((isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))) * _1226)) * cbPerFrame._m0[3u].x);
    float _2358 = cbInstanceData._m0[_422 + 6u].w * (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0)));
    float _2363 = _381 / cbSceneParam._m0[86u].x;
    float _2364 = _382 / cbSceneParam._m0[86u].y;
    vec4 _2378 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2363, _2364, (log2((isnan(cbSceneParam._m0[77u].w) ? _375 : (isnan(_375) ? cbSceneParam._m0[77u].w : min(_375, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2380 = _2378.x;
    float _2381 = _2378.y;
    float _2382 = _2378.z;
    float _2383 = _2378.w;
    float _2454;
    float _2456;
    float _2458;
    float _2460;
    if (_375 > cbSceneParam._m0[78u].w)
    {
        float _2417 = isnan(_375) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _375 : min(cbSceneParam._m0[80u].w, _375));
        float _2418 = _2417 / _375;
        float _2429 = _2418 * _263;
        float _2430 = _264 * _2418;
        float _2431 = (-0.0) - _2430;
        float _2432 = _2418 * _265;
        float _2434 = (cbSceneParam._m0[77u].w * _2431) / _2417;
        float _2435 = _2434 + cbSceneParam._m0[79u].w;
        float _2436 = cbSceneParam._m0[79u].w - _2430;
        float _2442 = sqrt(((_2429 * _2429) + (_2430 * _2430)) + (_2432 * _2432));
        float _2445 = (1.0 - (cbSceneParam._m0[77u].w / _2417)) * _2442;
        float _2450 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2452 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2603;
        if (abs((_2431 - _2434) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2603 = ((((_2435 > 0.0) ? exp2(_2450 * _2435) : (2.0 - exp2(_2452 * _2435))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2445;
        }
        else
        {
            float _2563 = 1.0 / cbSceneParam._m0[80u].x;
            float _2564 = isnan(_2436) ? _2435 : (isnan(_2435) ? _2436 : max(_2435, _2436));
            float _2565 = isnan(_2436) ? _2435 : (isnan(_2435) ? _2436 : min(_2435, _2436));
            float _2574 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : min(_2564, 0.0));
            float _2575 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : min(_2565, 0.0));
            _2603 = ((abs(_2442 / _2431) * cbSceneParam._m0[80u].y) * ((((_2574 - _2575) * 2.0) - ((exp2(_2450 * (isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0)))) - exp2(_2450 * (isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0))))) * _2563)) - ((exp2(_2452 * _2574) - exp2(_2452 * _2575)) * _2563))) + (_2445 * cbSceneParam._m0[80u].z);
        }
        vec4 _2605 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2363, _2364, 1.0), 0.0);
        float _2614 = exp2((_2603 * (-1.44269502162933349609375)) * (1.0 - _2605.w));
        float _2615 = log2(_2614);
        float _2631 = log2(_2383);
        _2454 = (exp2(_2631 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2615 * cbSceneParam._m0[78u].x)) * _2605.x) / cbSceneParam._m0[78u].x)) + _2380;
        _2456 = (exp2(_2631 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2615 * cbSceneParam._m0[78u].y)) * _2605.y) / cbSceneParam._m0[78u].y)) + _2381;
        _2458 = (exp2(_2631 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2615 * cbSceneParam._m0[78u].z)) * _2605.z) / cbSceneParam._m0[78u].z)) + _2382;
        _2460 = _2614 * _2383;
    }
    else
    {
        _2454 = _2380;
        _2456 = _2381;
        _2458 = _2382;
        _2460 = _2383;
    }
    float _2472 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2473 = _2472 == 3.0;
    float _2475 = log2(_2460);
    float _2482 = exp2(_2475 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0)));
    float _2483 = exp2(_2475 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0)));
    float _2484 = exp2(_2475 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0)));
    float _2493 = (_2472 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2493 * (_2473 ? _2482 : (_2482 + (cbSceneParam._m0[72u].w * _2454)));
    SV_Target.y = _2493 * (_2473 ? _2483 : (_2483 + (cbSceneParam._m0[72u].w * _2456)));
    SV_Target.z = _2493 * (_2473 ? _2484 : (_2484 + (cbSceneParam._m0[72u].w * _2458)));
    SV_Target.w = _2358;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2358;
}


