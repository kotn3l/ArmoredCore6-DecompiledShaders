#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[42];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 7) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 7) in float TEXCOORD_12;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1721;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _227 = _226 * _218;
    float _228 = _226 * _219;
    float _229 = _226 * _220;
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = _233 * NORMAL.x;
    float _235 = _233 * NORMAL.y;
    float _236 = _233 * NORMAL.z;
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241 = _240 * TANGENT.x;
    float _242 = _240 * TANGENT.y;
    float _243 = _240 * TANGENT.z;
    float _287 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _297 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _287);
    float _298 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _287);
    float _299 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _287);
    float _314 = cbMtdParam._m0[22u].x - cbMtdParam._m0[21u].w;
    float _316 = (sqrt(((_297 * _297) + (_298 * _298)) + (_299 * _299)) - cbMtdParam._m0[21u].w) / (isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0)));
    float _320 = _316 / cbMtdParam._m0[23u].z;
    float _321 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _322 = isnan(8.0) ? _321 : (isnan(_321) ? 8.0 : min(_321, 8.0));
    float _329 = cbMtdParam._m0[10u].x * _322;
    float _330 = cbMtdParam._m0[10u].y * _322;
    float _331 = cbMtdParam._m0[10u].z * _322;
    float _332 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _333 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _334 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _345 = cbMtdParam._m0[22u].y + _316;
    float _350 = _345 * cbMtdParam._m0[24u].z;
    float _4032 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    vec4 _368 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _371 = _368.x;
    float _395 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _371)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _371))) - POSITION_1.w) / cbMtdParam._m0[21u].x;
    float _4043 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _396 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _401 = 1.0 - (isnan(cbMtdParam._m0[26u].y) ? _396 : (isnan(_396) ? cbMtdParam._m0[26u].y : max(_396, cbMtdParam._m0[26u].y)));
    float _403 = (cbMtdParam._m0[26u].x + TEXCOORD_3.x) - (_401 * cbMtdParam._m0[21u].z);
    float _419 = (cbMtdParam._m0[29u].y + cbPerFrame._m0[22u].x) * cbMtdParam._m0[20u].z;
    float _427 = cbMtdParam._m0[34u].z * TEXCOORD.x;
    float _428 = cbMtdParam._m0[34u].w * TEXCOORD.y;
    vec4 _442 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_2, SS_BumpMap), vec2((((_419 * cbMtdParam._m0[35u].x) + _427) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_428 + (_419 * cbMtdParam._m0[35u].y)) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _444 = _442.x;
    float _445 = _442.y;
    float _4059 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _448 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _449 = _442.z - _448;
    float _4070 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _450 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _462 = (_450 * 0.00999999977648258209228515625) + TEXCOORD.x;
    float _464 = (_450 * (-0.00999999977648258209228515625)) + TEXCOORD.y;
    vec4 _477 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2(((_462 + (cbMtdParam._m0[31u].x * _419)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_464 + (cbMtdParam._m0[31u].y * _419)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _481 = _477.z;
    vec4 _495 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2(((_462 + (cbMtdParam._m0[30u].z * _419)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_464 + (cbMtdParam._m0[30u].w * _419)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _499 = _495.z;
    float _502 = (_401 - _442.w) + (isnan(_499) ? _481 : (isnan(_481) ? _499 : max(_481, _499)));
    float _4086 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _504 = (_403 * (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0)))) * (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0)));
    float _506 = _504 - (_504 * TEXCOORD_7.w);
    float _519 = (_506 + cbMtdParam._m0[9u].x) + (cbMtdParam._m0[16u].x * _450);
    float _520 = (_506 + cbMtdParam._m0[9u].y) + (cbMtdParam._m0[16u].y * _450);
    float _521 = (_506 + cbMtdParam._m0[9u].z) + (cbMtdParam._m0[16u].z * _450);
    vec4 _564 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * ((fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / cbMtdParam._m0[22u].z) + (cbMtdParam._m0[35u].z * _419))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * ((fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / cbMtdParam._m0[22u].z) + (cbMtdParam._m0[35u].w * _419))) + cbTextureTilingScale._m0[1u].w));
    float _569 = _564.z * 0.099999986588954925537109375;
    float _4097 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _571 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _575 = cbMtdParam._m0[24u].x * _316;
    float _4108 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _576 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _590 = (_519 + (isnan(0.07999999821186065673828125) ? _332 : (isnan(_332) ? 0.07999999821186065673828125 : min(_332, 0.07999999821186065673828125)))) + (_576 * (((1.0 - _519) - _571) + _569));
    float _592 = (_520 + (isnan(0.07999999821186065673828125) ? _333 : (isnan(_333) ? 0.07999999821186065673828125 : min(_333, 0.07999999821186065673828125)))) + (_576 * (((1.0 - _520) - _571) + _569));
    float _594 = (_521 + (isnan(0.07999999821186065673828125) ? _334 : (isnan(_334) ? 0.07999999821186065673828125 : min(_334, 0.07999999821186065673828125)))) + (_576 * (((1.0 - _521) + _569) - _571));
    float _4119 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _595 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _4130 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _596 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _4141 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _597 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _602 = _316 / cbMtdParam._m0[25u].z;
    float _4152 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _605 = (1.0 - (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) * cbMtdParam._m0[25u].y;
    float _612 = ((cbMtdParam._m0[21u].y - cbMtdParam._m0[20u].x) * _448) + cbMtdParam._m0[20u].x;
    float _635 = (POSITION_1.w - cbMtdParam._m0[28u].w) * (1.0 / cbMtdParam._m0[28u].z);
    float _4163 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _636 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _650 = (cbMtdParam._m0[33u].z * _419) + _427;
    float _651 = (cbMtdParam._m0[33u].w * _419) + _428;
    vec4 _674 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * ((cbMtdParam._m0[33u].x * _419) + _427)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((cbMtdParam._m0[33u].y * _419) + _428)) + cbTextureTilingScale._m0[3u].w));
    float _681 = (_674.x * 2.0) + (-1.0);
    float _683 = (_674.y * 2.0) + (-1.0);
    float _687 = 1.0 - dot(vec2(_681, _683), vec2(_681, _683));
    float _4174 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _689 = sqrt(isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)));
    float _692 = fma(_689, _234, fma(_683, _241, _681 * _227));
    float _695 = fma(_689, _235, fma(_683, _242, _681 * _228));
    float _698 = fma(_689, _236, fma(_683, _243, _681 * _229));
    float _702 = inversesqrt(dot(vec3(_692, _695, _698), vec3(_692, _695, _698)));
    float _703 = cbPerFrame._m0[22u].x * 2.0;
    float _704 = _703 * cbMtdParam._m0[27u].y;
    float _708 = ((_692 * 0.5) * _702) + (-0.25);
    float _712 = ((_695 * 0.5) * _702) + (-0.25);
    float _713 = _712 * cbMtdParam._m0[27u].z;
    float _715 = (-0.0) - (cbMtdParam._m0[27u].z * _708);
    float _716 = fract(_704);
    float _718 = fract(_704 + 0.5);
    float _729 = abs((_716 * 2.0) + (-1.0));
    vec4 _746 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_716 * _715) + _650) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_713 * _716) + _651) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    vec4 _751 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_718 * _715) + _650) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_713 * _718) + _651) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _762 = ((_751.x - _746.x) * _729) + _746.x;
    float _763 = ((_751.y - _746.y) * _729) + _746.y;
    float _764 = ((_751.z - _746.z) * _729) + _746.z;
    float _781 = (cbMtdParam._m0[32u].z * _419) + _427;
    float _782 = (cbMtdParam._m0[32u].w * _419) + _428;
    float _785 = _703 * cbMtdParam._m0[27u].x;
    float _786 = _712 * cbMtdParam._m0[26u].w;
    float _788 = (-0.0) - (cbMtdParam._m0[26u].w * _708);
    float _789 = fract(_785);
    float _791 = fract(_785 + 0.5);
    float _802 = abs((_789 * 2.0) + (-1.0));
    vec4 _819 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_789 * _788) + _781) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_786 * _789) + _782) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _821 = _819.x;
    float _822 = _819.y;
    float _823 = _819.z;
    vec4 _824 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_791 * _788) + _781) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_786 * _791) + _782) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _855 = (((((cbMtdParam._m0[17u].x - cbMtdParam._m0[19u].x) * _762) * cbMtdParam._m0[29u].z) + cbMtdParam._m0[19u].x) * (((_824.x - _821) * _802) + _821)) + (_762 * cbMtdParam._m0[18u].x);
    float _858 = (((((cbMtdParam._m0[17u].y - cbMtdParam._m0[19u].y) * _763) * cbMtdParam._m0[29u].z) + cbMtdParam._m0[19u].y) * (((_824.y - _822) * _802) + _822)) + (_763 * cbMtdParam._m0[18u].y);
    float _861 = ((((cbMtdParam._m0[29u].z * _764) * (cbMtdParam._m0[17u].z - cbMtdParam._m0[19u].z)) + cbMtdParam._m0[19u].z) * (((_824.z - _823) * _802) + _823)) + (_764 * cbMtdParam._m0[18u].z);
    float _865 = _855 - (_855 * _636);
    float _866 = _858 - (_858 * _636);
    float _867 = _861 - (_861 * _636);
    float _872 = (POSITION_1.w - cbMtdParam._m0[28u].y) * (1.0 / cbMtdParam._m0[28u].x);
    float _4185 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _873 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _883 = (cbMtdParam._m0[34u].x * _419) + _427;
    float _884 = (cbMtdParam._m0[34u].y * _419) + _428;
    vec4 _897 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((_883 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_884 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _899 = _897.x;
    float _900 = _897.y;
    float _901 = _897.z;
    vec4 _923 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * _883) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _884) + cbTextureTilingScale._m0[7u].w));
    float _966 = (cbMtdParam._m0[29u].x * cbMtdParam._m0[15u].x) * ((_865 + (cbMtdParam._m0[14u].x * _506)) + ((((_899 * cbMtdParam._m0[11u].x) - _865) + (((((cbMtdParam._m0[13u].x - cbMtdParam._m0[12u].x) * _899) * cbMtdParam._m0[29u].w) + cbMtdParam._m0[12u].x) * _923.x)) * _873));
    float _968 = (cbMtdParam._m0[29u].x * cbMtdParam._m0[15u].y) * ((_866 + (cbMtdParam._m0[14u].y * _506)) + ((((_900 * cbMtdParam._m0[11u].y) - _866) + (((((cbMtdParam._m0[13u].y - cbMtdParam._m0[12u].y) * _900) * cbMtdParam._m0[29u].w) + cbMtdParam._m0[12u].y) * _923.y)) * _873));
    float _970 = (cbMtdParam._m0[29u].x * cbMtdParam._m0[15u].z) * ((_867 + (cbMtdParam._m0[14u].z * _506)) + ((((_901 * cbMtdParam._m0[11u].z) - _867) + ((((cbMtdParam._m0[29u].w * _901) * (cbMtdParam._m0[13u].z - cbMtdParam._m0[12u].z)) + cbMtdParam._m0[12u].z) * _923.z)) * _873));
    float _4196 = isnan(0.0) ? TEXCOORD_3.y : (isnan(TEXCOORD_3.y) ? 0.0 : max(TEXCOORD_3.y, 0.0));
    float _977 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
    float _987 = _316 / cbMtdParam._m0[23u].w;
    float _4207 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _988 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    float _989 = _450 * 0.23999999463558197021484375;
    float _991 = _450 * (-0.20000000298023223876953125);
    float _1002 = cbMtdParam._m0[36u].z * TEXCOORD.x;
    float _1003 = cbMtdParam._m0[36u].w * TEXCOORD.y;
    vec4 _1012 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[36u].x * _419) + _989) + _1002) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[36u].y * _419) + _991) + _1003) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _1037 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((((_1002 + _989) + (cbMtdParam._m0[37u].x * _419)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_1003 + _991) + (cbMtdParam._m0[37u].y * _419)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _1055 = (((_495.x + (-0.5)) * 0.5) + _477.x) + (((_1012.x + (-1.0)) + _1037.x) * cbMtdParam._m0[25u].w);
    float _1056 = (((_495.y + (-0.5)) * 0.5) + _477.y) + (((_1012.y + (-1.0)) + _1037.y) * cbMtdParam._m0[25u].w);
    float _1061 = ((_564.x - _1055) * _988) + _1055;
    float _1062 = ((_564.y - _1056) * _988) + _1056;
    float _1064 = _316 / cbMtdParam._m0[23u].y;
    float _4218 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _1065 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _1081 = ((((_977 * (0.5 - _444)) + _444) + (((_1061 + (-0.5)) + ((0.5 - _1061) * _1065)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1082 = ((((_977 * (0.5 - _445)) + _445) + (((_1062 + (-0.5)) + ((0.5 - _1062) * _1065)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1083 = dot(vec2(_1081, _1082), vec2(_1081, _1082));
    float _4229 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _1088 = sqrt(1.0 - (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))));
    float _1090 = cbMtdParam._m0[24u].w * _345;
    float _4240 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
    float _1099 = cbMtdParam._m0[22u].w * _345;
    float _4251 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _1101 = (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * cbMtdParam._m0[27u].w;
    float _4262 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _1102 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _1107 = ((cbMtdParam._m0[25u].x - cbMtdParam._m0[23u].x) * (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0)))) + cbMtdParam._m0[23u].x;
    float _1112 = _1081 - (_1107 * _1081);
    float _1113 = _1082 - (_1107 * _1082);
    float _1114 = (_1107 * (1.0 - _1088)) + _1088;
    float _1133 = fma(_1088, _234, fma(_1082, _241, _1081 * _227));
    float _1136 = fma(_1088, _235, fma(_1082, _242, _1081 * _228));
    float _1139 = fma(_1088, _236, fma(_1082, _243, _1081 * _229));
    float _1143 = inversesqrt(dot(vec3(_1133, _1136, _1139), vec3(_1133, _1136, _1139)));
    float _1144 = _1143 * _1133;
    float _1145 = _1143 * _1136;
    float _1146 = _1143 * _1139;
    float _1149 = fma(_1114, _234, fma(_1113, _241, _1112 * _227));
    float _1152 = fma(_1114, _235, fma(_1113, _242, _1112 * _228));
    float _1155 = fma(_1114, _236, fma(_1113, _243, _1112 * _229));
    float _1159 = inversesqrt(dot(vec3(_1149, _1152, _1155), vec3(_1149, _1152, _1155)));
    float _1160 = _1159 * _1149;
    float _1161 = _1159 * _1152;
    float _1162 = _1159 * _1155;
    float _4273 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _4284 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _1164 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
    float _4295 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _4306 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _4317 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _1181 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1221 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1230 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1221);
    float _1231 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1221);
    float _1232 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1221);
    float _1236 = inversesqrt(dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232)));
    float _1237 = _1230 * _1236;
    float _1238 = _1231 * _1236;
    float _1239 = _1232 * _1236;
    float _1244 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1245 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1247 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1256 = (_1247.x * 2.0) + (-1.0);
    float _1257 = (_1247.y * 2.0) + (-1.0);
    float _1258 = (_1247.z * 2.0) + (-1.0);
    float _1262 = inversesqrt(dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258)));
    float _1273 = ((TEXCOORD.w >= 1.0) || (((TEXCOORD.z <= 0.0) || (TEXCOORD.z >= 1.0)) || (TEXCOORD.w <= 0.0))) ? 0.0 : _1247.w;
    float _1280 = (((_1256 * _1262) - _1144) * _1273) + _1144;
    float _1281 = (((_1257 * _1262) - _1145) * _1273) + _1145;
    float _1282 = (((_1258 * _1262) - _1146) * _1273) + _1146;
    float _1300 = fma(_1282, cbSceneParam._m0[5u].z, fma(_1281, cbSceneParam._m0[5u].y, _1280 * cbSceneParam._m0[5u].x));
    float _1303 = fma(_1282, cbSceneParam._m0[6u].z, fma(_1281, cbSceneParam._m0[6u].y, _1280 * cbSceneParam._m0[6u].x));
    float _1306 = fma(_1282, cbSceneParam._m0[7u].z, fma(_1281, cbSceneParam._m0[7u].y, _1280 * cbSceneParam._m0[7u].x));
    uint _1319 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1320 = _1319 + 9u;
    uint _1321 = _1320 + uint(cbMatDynParam._m0[0u].w);
    float _1327 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0)))) * cbInstanceData._m0[_1321].x;
    float _1328 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0)))) * cbInstanceData._m0[_1321].y;
    float _1329 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0)))) * cbInstanceData._m0[_1321].z;
    float _4328 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
    float _1330 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
    float _4339 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
    float _1331 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
    float _4350 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
    float _1332 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
    vec4 _1341 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1244, cbSceneParam._m0[86u].y * _1245));
    float _1344 = _1341.x * TEXCOORD_3.w;
    float _1348 = abs(dot(vec3(_1237, _1238, _1239), vec3(_1280, _1281, _1282)));
    float _4361 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
    float _1361 = dot(vec3(_1160, _1161, _1162), vec3(_1237, _1238, _1239)) * 2.0;
    float _1365 = (_1361 * _1160) - _1237;
    float _1366 = (_1361 * _1161) - _1238;
    float _1367 = (_1361 * _1162) - _1239;
    float _1371 = abs(dot(vec3(_1237, _1238, _1239), vec3(_1160, _1161, _1162)));
    float _4372 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
    float _1373 = sqrt(_1164);
    float _1385 = exp2((_1373 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1373 * 3.0));
    float _1416 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1420 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1424 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1720;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1449 = fma(_1424, cbModelParam._m0[26u].z, fma(_1420, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1416));
        float _1453 = fma(_1424, cbModelParam._m0[27u].z, fma(_1420, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1416));
        float _1457 = fma(_1424, cbModelParam._m0[28u].z, fma(_1420, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1416));
        float _1479 = _1416 + _1160;
        float _1480 = _1420 + _1161;
        float _1481 = _1424 + _1162;
        float _1491 = fma(_1481, cbModelParam._m0[26u].z, fma(_1480, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1479)) - _1449;
        float _1492 = fma(_1481, cbModelParam._m0[27u].z, fma(_1480, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1479)) - _1453;
        float _1493 = fma(_1481, cbModelParam._m0[28u].z, fma(_1480, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1479)) - _1457;
        float _1497 = inversesqrt(dot(vec3(_1491, _1492, _1493), vec3(_1491, _1492, _1493)));
        float _1509 = ((_1497 * _1491) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1449 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1510 = ((_1497 * _1492) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1453 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1511 = ((_1497 * _1493) / cbModelParam._m0[34u].z) + ((((((_1457 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1514 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        vec4 _1521 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        vec4 _1528 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        vec4 _1535 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        float _1548 = exp2((_1514.w + (-0.5)) * 20.0) * 2.0;
        float _1549 = _1548 * (_1514.x + (-0.5));
        float _1550 = _1548 * (_1514.y + (-0.5));
        float _1551 = _1548 * (_1514.z + (-0.5));
        float _1558 = exp2((_1521.w + (-0.5)) * 20.0) * 2.0;
        float _1559 = _1558 * (_1521.x + (-0.5));
        float _1560 = _1558 * (_1521.y + (-0.5));
        float _1561 = _1558 * (_1521.z + (-0.5));
        float _1568 = exp2((_1528.w + (-0.5)) * 20.0) * 2.0;
        float _1569 = _1568 * (_1528.x + (-0.5));
        float _1570 = _1568 * (_1528.y + (-0.5));
        float _1571 = _1568 * (_1528.z + (-0.5));
        float _1578 = exp2((_1535.w + (-0.5)) * 20.0) * 2.0;
        float _1579 = _1578 * (_1535.x + (-0.5));
        float _1580 = _1578 * (_1535.y + (-0.5));
        float _1581 = _1578 * (_1535.z + (-0.5));
        float _1582 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1583 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1584 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1585 = _1549 * 0.5;
        float _1586 = _1559 * 0.5;
        float _1587 = _1569 * 0.5;
        float _1588 = dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587));
        float _1593 = (_1588 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1588);
        float _1602 = (dot(vec3(_1160, _1161, _1162), vec3(_1593 * _1585, _1593 * _1586, _1593 * _1587)) + 1.0) * 0.5;
        float _4398 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1612 = sqrt(((_1586 * _1586) + (_1585 * _1585)) + (_1587 * _1587)) / (_1582 + 9.9999997473787516355514526367188e-06);
        float _4409 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _1614 = _1613 * 2.0;
        float _1618 = (1.0 - _1613) / (_1613 + 1.0);
        float _4420 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _1628 = ((((1.0 - _1619) * (_1614 + 2.0)) * exp2(log2(isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_1614 + 1.0))) + _1619) * _1582;
        float _1629 = _1550 * 0.5;
        float _1630 = _1560 * 0.5;
        float _1631 = _1570 * 0.5;
        float _1632 = dot(vec3(_1629, _1630, _1631), vec3(_1629, _1630, _1631));
        float _1637 = (_1632 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1632);
        float _1645 = (dot(vec3(_1160, _1161, _1162), vec3(_1637 * _1629, _1637 * _1630, _1637 * _1631)) + 1.0) * 0.5;
        float _4431 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1654 = sqrt(((_1630 * _1630) + (_1629 * _1629)) + (_1631 * _1631)) / (_1583 + 9.9999997473787516355514526367188e-06);
        float _4442 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _1656 = _1655 * 2.0;
        float _1660 = (1.0 - _1655) / (_1655 + 1.0);
        float _4453 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _1670 = ((((1.0 - _1661) * (_1656 + 2.0)) * exp2(log2(isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_1656 + 1.0))) + _1661) * _1583;
        float _1671 = _1551 * 0.5;
        float _1672 = _1561 * 0.5;
        float _1673 = _1571 * 0.5;
        float _1674 = dot(vec3(_1671, _1672, _1673), vec3(_1671, _1672, _1673));
        float _1679 = (_1674 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1674);
        float _1687 = (dot(vec3(_1160, _1161, _1162), vec3(_1679 * _1671, _1679 * _1672, _1679 * _1673)) + 1.0) * 0.5;
        float _4464 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1696 = sqrt(((_1672 * _1672) + (_1671 * _1671)) + (_1673 * _1673)) / (_1584 + 9.9999997473787516355514526367188e-06);
        float _4475 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1697 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _1698 = _1697 * 2.0;
        float _1702 = (1.0 - _1697) / (_1697 + 1.0);
        float _4486 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _1712 = ((((1.0 - _1703) * (_1698 + 2.0)) * exp2(log2(isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_1698 + 1.0))) + _1703) * _1584;
        _1720 = _1551;
        _1722 = _1550;
        _1723 = _1549;
        _1724 = _1561;
        _1725 = _1560;
        _1726 = _1559;
        _1727 = _1571;
        _1728 = _1570;
        _1729 = _1569;
        _1730 = _1584;
        _1731 = _1583;
        _1732 = _1582;
        _1733 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)));
        _1734 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)));
        _1735 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)));
    }
    else
    {
        _1720 = _1721;
        _1722 = _1721;
        _1723 = _1721;
        _1724 = _1721;
        _1725 = _1721;
        _1726 = _1721;
        _1727 = _1721;
        _1728 = _1721;
        _1729 = _1721;
        _1730 = _1721;
        _1731 = _1721;
        _1732 = _1721;
        _1733 = 0.0;
        _1734 = 0.0;
        _1735 = 0.0;
    }
    float _2025;
    float _2026;
    float _2027;
    float _2028;
    float _2029;
    float _2030;
    float _2031;
    float _2032;
    float _2033;
    float _2034;
    float _2035;
    float _2036;
    float _2037;
    float _2038;
    float _2039;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1758 = fma(_1424, cbModelParam._m0[30u].z, fma(_1420, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1416));
        float _1762 = fma(_1424, cbModelParam._m0[31u].z, fma(_1420, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1416));
        float _1766 = fma(_1424, cbModelParam._m0[32u].z, fma(_1420, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1416));
        float _1788 = _1416 + _1160;
        float _1789 = _1420 + _1161;
        float _1790 = _1424 + _1162;
        float _1800 = fma(_1790, cbModelParam._m0[30u].z, fma(_1789, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1788)) - _1758;
        float _1801 = fma(_1790, cbModelParam._m0[31u].z, fma(_1789, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1788)) - _1762;
        float _1802 = fma(_1790, cbModelParam._m0[32u].z, fma(_1789, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1788)) - _1766;
        float _1806 = inversesqrt(dot(vec3(_1800, _1801, _1802), vec3(_1800, _1801, _1802)));
        float _1818 = ((_1806 * _1800) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1758 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1819 = ((_1806 * _1801) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1762 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1820 = ((_1806 * _1802) / cbModelParam._m0[35u].z) + ((((((_1766 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1822 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1818, _1819, _1820), 0.0);
        vec4 _1829 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1818, _1819, _1820), 0.0);
        vec4 _1836 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1818, _1819, _1820), 0.0);
        vec4 _1843 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1818, _1819, _1820), 0.0);
        float _1855 = exp2((_1822.w + (-0.5)) * 20.0) * 2.0;
        float _1856 = _1855 * (_1822.x + (-0.5));
        float _1857 = _1855 * (_1822.y + (-0.5));
        float _1858 = _1855 * (_1822.z + (-0.5));
        float _1865 = exp2((_1829.w + (-0.5)) * 20.0) * 2.0;
        float _1866 = _1865 * (_1829.x + (-0.5));
        float _1867 = _1865 * (_1829.y + (-0.5));
        float _1868 = _1865 * (_1829.z + (-0.5));
        float _1875 = exp2((_1836.w + (-0.5)) * 20.0) * 2.0;
        float _1876 = _1875 * (_1836.x + (-0.5));
        float _1877 = _1875 * (_1836.y + (-0.5));
        float _1878 = _1875 * (_1836.z + (-0.5));
        float _1885 = exp2((_1843.w + (-0.5)) * 20.0) * 2.0;
        float _1886 = _1885 * (_1843.x + (-0.5));
        float _1887 = _1885 * (_1843.y + (-0.5));
        float _1888 = _1885 * (_1843.z + (-0.5));
        float _1889 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
        float _1890 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
        float _1891 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
        float _1892 = _1856 * 0.5;
        float _1893 = _1866 * 0.5;
        float _1894 = _1876 * 0.5;
        float _1895 = dot(vec3(_1892, _1893, _1894), vec3(_1892, _1893, _1894));
        float _1900 = (_1895 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1895);
        float _1908 = (dot(vec3(_1160, _1161, _1162), vec3(_1900 * _1892, _1900 * _1893, _1900 * _1894)) + 1.0) * 0.5;
        float _4527 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
        float _1917 = sqrt(((_1893 * _1893) + (_1892 * _1892)) + (_1894 * _1894)) / (_1889 + 9.9999997473787516355514526367188e-06);
        float _4538 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
        float _1918 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _1919 = _1918 * 2.0;
        float _1923 = (1.0 - _1918) / (_1918 + 1.0);
        float _4549 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
        float _1924 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
        float _1933 = ((((1.0 - _1924) * (_1919 + 2.0)) * exp2(log2(isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_1919 + 1.0))) + _1924) * _1889;
        float _1934 = _1857 * 0.5;
        float _1935 = _1867 * 0.5;
        float _1936 = _1877 * 0.5;
        float _1937 = dot(vec3(_1934, _1935, _1936), vec3(_1934, _1935, _1936));
        float _1942 = (_1937 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1937);
        float _1950 = (dot(vec3(_1160, _1161, _1162), vec3(_1942 * _1934, _1942 * _1935, _1942 * _1936)) + 1.0) * 0.5;
        float _4560 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
        float _1959 = sqrt(((_1935 * _1935) + (_1934 * _1934)) + (_1936 * _1936)) / (_1890 + 9.9999997473787516355514526367188e-06);
        float _4571 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
        float _1960 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _1961 = _1960 * 2.0;
        float _1965 = (1.0 - _1960) / (_1960 + 1.0);
        float _4582 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
        float _1966 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _1975 = ((((1.0 - _1966) * (_1961 + 2.0)) * exp2(log2(isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (_1961 + 1.0))) + _1966) * _1890;
        float _1976 = _1858 * 0.5;
        float _1977 = _1868 * 0.5;
        float _1978 = _1878 * 0.5;
        float _1979 = dot(vec3(_1976, _1977, _1978), vec3(_1976, _1977, _1978));
        float _1984 = (_1979 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1979);
        float _1992 = (dot(vec3(_1160, _1161, _1162), vec3(_1984 * _1976, _1984 * _1977, _1984 * _1978)) + 1.0) * 0.5;
        float _4593 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        float _2001 = sqrt(((_1977 * _1977) + (_1976 * _1976)) + (_1978 * _1978)) / (_1891 + 9.9999997473787516355514526367188e-06);
        float _4604 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
        float _2002 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _2003 = _2002 * 2.0;
        float _2007 = (1.0 - _2002) / (_2002 + 1.0);
        float _4615 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        float _2008 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
        float _2017 = ((((1.0 - _2008) * (_2003 + 2.0)) * exp2(log2(isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2003 + 1.0))) + _2008) * _1891;
        _2025 = _1858;
        _2026 = _1857;
        _2027 = _1856;
        _2028 = _1868;
        _2029 = _1867;
        _2030 = _1866;
        _2031 = _1878;
        _2032 = _1877;
        _2033 = _1876;
        _2034 = _1891;
        _2035 = _1890;
        _2036 = _1889;
        _2037 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0)));
        _2038 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0)));
        _2039 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0)));
    }
    else
    {
        _2025 = _1721;
        _2026 = _1721;
        _2027 = _1721;
        _2028 = _1721;
        _2029 = _1721;
        _2030 = _1721;
        _2031 = _1721;
        _2032 = _1721;
        _2033 = _1721;
        _2034 = _1721;
        _2035 = _1721;
        _2036 = _1721;
        _2037 = 0.0;
        _2038 = 0.0;
        _2039 = 0.0;
    }
    float _2049 = (cbModelParam._m0[1u].x * (_2037 - _1733)) + _1733;
    float _2050 = (cbModelParam._m0[1u].x * (_2038 - _1734)) + _1734;
    float _2051 = (cbModelParam._m0[1u].x * (_2039 - _1735)) + _1735;
    float _2072 = fma(_2051, cbSceneParam._m0[89u].z, fma(_2050, cbSceneParam._m0[89u].y, _2049 * cbSceneParam._m0[89u].x));
    float _2075 = fma(_2051, cbSceneParam._m0[90u].z, fma(_2050, cbSceneParam._m0[90u].y, _2049 * cbSceneParam._m0[90u].x));
    float _2078 = fma(_2051, cbSceneParam._m0[91u].z, fma(_2050, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2049));
    float _2091 = _1365 * 0.5;
    float _2092 = _1366 * 0.5;
    float _2093 = _1367 * 0.5;
    float _2094 = dot(vec4(_2091, _2092, _2093, 1.0), vec4(_2027, _2030, _2033, _2036));
    float _2097 = dot(vec4(_2091, _2092, _2093, 1.0), vec4(_2026, _2029, _2032, _2035));
    float _2100 = dot(vec4(_2091, _2092, _2093, 1.0), vec4(_2025, _2028, _2031, _2034));
    float _2134;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2107 = dot(vec4(_2091, _2092, _2093, 1.0), vec4(_1720, _1724, _1727, _1730));
        float _2111 = dot(vec4(_2091, _2092, _2093, 1.0), vec4(_1722, _1725, _1728, _1731));
        float _2115 = dot(vec4(_2091, _2092, _2093, 1.0), vec4(_1723, _1726, _1729, _1732));
        float _2122 = dot(vec4(cbModelParam._m0[39u]), vec4(_2091, _2092, _2093, 1.0));
        _2134 = dot(vec3(isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0)), isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0)), isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2122) ? 0.0 : (isnan(0.0) ? _2122 : max(0.0, _2122))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2134 = 1.0;
    }
    float _2145;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2136 = dot(vec4(cbModelParam._m0[40u]), vec4(_2091, _2092, _2093, 1.0));
        _2145 = dot(vec3(isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0)), isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0)), isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2136) ? 0.0 : (isnan(0.0) ? _2136 : max(0.0, _2136))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2145 = 1.0;
    }
    float _2149 = (_2145 * cbModelParam._m0[1u].x) + (_2134 * (1.0 - cbModelParam._m0[1u].x));
    float _2159 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1164);
    float _2160 = isnan(_2159) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2159 : min(cbModelParam._m0[25u].z, _2159));
    float _2240;
    float _2242;
    float _2244;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2207 = fma(_1424, cbModelParam._m0[13u].z, fma(_1420, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1416)) + cbModelParam._m0[13u].w;
        float _2211 = fma(_1424, cbModelParam._m0[14u].z, fma(_1420, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1416)) + cbModelParam._m0[14u].w;
        float _2215 = fma(_1424, cbModelParam._m0[15u].z, fma(_1420, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1416)) + cbModelParam._m0[15u].w;
        float _2218 = fma(_1367, cbModelParam._m0[13u].z, fma(_1366, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1365));
        float _2221 = fma(_1367, cbModelParam._m0[14u].z, fma(_1366, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1365));
        float _2224 = fma(_1367, cbModelParam._m0[15u].z, fma(_1366, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1365));
        float _2252;
        if (_2218 > 0.0)
        {
            _2252 = abs((1.0 - _2207) / _2218);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2218 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2207 + 1.0) / _2218);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2252 = frontier_phi_14_12_ladder;
        }
        float _2640;
        if (_2221 > 0.0)
        {
            _2640 = abs((1.0 - _2211) / _2221);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2221 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2211 + 1.0) / _2221);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2640 = frontier_phi_23_19_ladder;
        }
        float _3126;
        if (_2224 > 0.0)
        {
            _3126 = abs((1.0 - _2215) / _2224);
        }
        else
        {
            float frontier_phi_37_30_ladder;
            if (_2224 < 0.0)
            {
                frontier_phi_37_30_ladder = abs((_2215 + 1.0) / _2224);
            }
            else
            {
                frontier_phi_37_30_ladder = 5000.0;
            }
            _3126 = frontier_phi_37_30_ladder;
        }
        float _3128 = isnan(_2640) ? _2252 : (isnan(_2252) ? _2640 : min(_2252, _2640));
        float _3129 = isnan(_3126) ? _3128 : (isnan(_3128) ? _3126 : min(_3128, _3126));
        float _3133 = (_3129 * _2218) + _2207;
        float _3134 = (_3129 * _2221) + _2211;
        float _3135 = (_3129 * _2224) + _2215;
        float _3136 = _3129 * 9.9999997473787516355514526367188e-05;
        float _3137 = (-1.0) - _3136;
        float _3139 = _3136 + 1.0;
        float frontier_phi_13_37_ladder;
        float frontier_phi_13_37_ladder_1;
        float frontier_phi_13_37_ladder_2;
        if ((_3135 > _3139) || ((_3135 < _3137) || ((_3134 > _3139) || ((_3134 < _3137) || ((_3133 < _3137) || (_3133 > _3139))))))
        {
            frontier_phi_13_37_ladder = 0.0;
            frontier_phi_13_37_ladder_1 = 0.0;
            frontier_phi_13_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3261 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_3135, cbModelParam._m0[9u].z, fma(_3134, cbModelParam._m0[9u].y, _3133 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_3135, cbModelParam._m0[10u].z, fma(_3134, cbModelParam._m0[10u].y, _3133 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_3135, cbModelParam._m0[11u].z, fma(_3134, cbModelParam._m0[11u].y, _3133 * cbModelParam._m0[11u].x))), _2160);
            frontier_phi_13_37_ladder = _3261.z * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_1 = _3261.y * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_2 = _3261.x * cbModelParam._m0[1u].y;
        }
        _2240 = frontier_phi_13_37_ladder_2;
        _2242 = frontier_phi_13_37_ladder_1;
        _2244 = frontier_phi_13_37_ladder;
    }
    else
    {
        vec4 _2228 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1365, _1366, _1367), _2160);
        _2240 = _2228.x * cbModelParam._m0[1u].y;
        _2242 = _2228.y * cbModelParam._m0[1u].y;
        _2244 = _2228.z * cbModelParam._m0[1u].y;
    }
    float _2248 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1164);
    float _2249 = isnan(_2248) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2248 : min(cbModelParam._m0[25u].w, _2248));
    float _2338;
    float _2340;
    float _2342;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2302 = fma(_1424, cbModelParam._m0[21u].z, fma(_1420, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1416)) + cbModelParam._m0[21u].w;
        float _2306 = fma(_1424, cbModelParam._m0[22u].z, fma(_1420, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1416)) + cbModelParam._m0[22u].w;
        float _2310 = fma(_1424, cbModelParam._m0[23u].z, fma(_1420, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1416)) + cbModelParam._m0[23u].w;
        float _2313 = fma(_1367, cbModelParam._m0[21u].z, fma(_1366, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1365));
        float _2316 = fma(_1367, cbModelParam._m0[22u].z, fma(_1366, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1365));
        float _2319 = fma(_1367, cbModelParam._m0[23u].z, fma(_1366, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1365));
        float _2645;
        if (_2313 > 0.0)
        {
            _2645 = abs((1.0 - _2302) / _2313);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2313 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2302 + 1.0) / _2313);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2645 = frontier_phi_25_21_ladder;
        }
        float _3152;
        if (_2316 > 0.0)
        {
            _3152 = abs((1.0 - _2306) / _2316);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_2316 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_2306 + 1.0) / _2316);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _3152 = frontier_phi_39_32_ladder;
        }
        float _3321;
        if (_2319 > 0.0)
        {
            _3321 = abs((1.0 - _2310) / _2319);
        }
        else
        {
            float frontier_phi_53_48_ladder;
            if (_2319 < 0.0)
            {
                frontier_phi_53_48_ladder = abs((_2310 + 1.0) / _2319);
            }
            else
            {
                frontier_phi_53_48_ladder = 5000.0;
            }
            _3321 = frontier_phi_53_48_ladder;
        }
        float _3323 = isnan(_3152) ? _2645 : (isnan(_2645) ? _3152 : min(_2645, _3152));
        float _3324 = isnan(_3321) ? _3323 : (isnan(_3323) ? _3321 : min(_3323, _3321));
        float _3328 = (_3324 * _2313) + _2302;
        float _3329 = (_3324 * _2316) + _2306;
        float _3330 = (_3324 * _2319) + _2310;
        float _3331 = _3324 * 9.9999997473787516355514526367188e-05;
        float _3332 = (-1.0) - _3331;
        float _3334 = _3331 + 1.0;
        float frontier_phi_22_53_ladder;
        float frontier_phi_22_53_ladder_1;
        float frontier_phi_22_53_ladder_2;
        if ((_3330 > _3334) || ((_3330 < _3332) || ((_3329 > _3334) || ((_3329 < _3332) || ((_3328 < _3332) || (_3328 > _3334))))))
        {
            frontier_phi_22_53_ladder = 0.0;
            frontier_phi_22_53_ladder_1 = 0.0;
            frontier_phi_22_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3563 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3330, cbModelParam._m0[17u].z, fma(_3329, cbModelParam._m0[17u].y, _3328 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3330, cbModelParam._m0[18u].z, fma(_3329, cbModelParam._m0[18u].y, _3328 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3330, cbModelParam._m0[19u].z, fma(_3329, cbModelParam._m0[19u].y, _3328 * cbModelParam._m0[19u].x))), _2249);
            frontier_phi_22_53_ladder = _3563.y * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_1 = _3563.z * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_2 = _3563.x * cbModelParam._m0[1u].z;
        }
        _2338 = frontier_phi_22_53_ladder_2;
        _2340 = frontier_phi_22_53_ladder;
        _2342 = frontier_phi_22_53_ladder_1;
    }
    else
    {
        vec4 _2322 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1365, _1366, _1367), _2249);
        _2338 = _2322.x * cbModelParam._m0[1u].z;
        _2340 = _2322.y * cbModelParam._m0[1u].z;
        _2342 = _2322.z * cbModelParam._m0[1u].z;
    }
    float _2354 = ((((1.0 - _1385) * ((_1373 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1385 * _1373)) * _1344;
    float _2355 = _2354 * ((cbModelParam._m0[1u].w * (_2338 - _2240)) + _2240);
    float _2356 = _2354 * ((cbModelParam._m0[1u].w * (_2340 - _2242)) + _2242);
    float _2357 = _2354 * ((cbModelParam._m0[1u].w * (_2342 - _2244)) + _2244);
    float _2360 = fma(_2357, cbSceneParam._m0[89u].z, fma(_2356, cbSceneParam._m0[89u].y, _2355 * cbSceneParam._m0[89u].x));
    float _2363 = fma(_2357, cbSceneParam._m0[90u].z, fma(_2356, cbSceneParam._m0[90u].y, _2355 * cbSceneParam._m0[90u].x));
    float _2366 = fma(_2357, cbSceneParam._m0[91u].z, fma(_2356, cbSceneParam._m0[91u].y, _2355 * cbSceneParam._m0[91u].x));
    float _2385 = (cbSceneParam._m0[88u].y * (1.0 - _1164)) + cbSceneParam._m0[88u].z;
    float _4741 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    vec4 _2389 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(_1244, _1245), (isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0))) * 5.0);
    float _2405 = 1.0 - _2389.w;
    uvec4 _2415 = floatBitsToUint(cbInstanceData._m0[_1319 + 5u]);
    uint _2417 = _2415.x * 14u;
    uint _2418 = _2417 + 13u;
    float _2423 = _1344 + (-1.0);
    float _2426 = (cbLight._m0[_2418].x * _2423) + 1.0;
    float _2427 = (cbLight._m0[_2418].y * _2423) + 1.0;
    uint _2428 = _2417 + 5u;
    float _2434 = isnan(1.0) ? _2427 : (isnan(_2427) ? 1.0 : min(_2427, 1.0));
    uint _2438 = _2417 + 4u;
    float _2444 = isnan(1.0) ? _2426 : (isnan(_2426) ? 1.0 : min(_2426, 1.0));
    uint _2448 = _2417 | 1u;
    float _2459 = dot(vec3(cbLight._m0[_2417].xyz), vec3(_1280, _1281, _1282));
    float _2462 = dot(vec3(cbLight._m0[_2448].xyz), vec3(_1280, _1281, _1282));
    float _4762 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    float _4773 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
    float _2467 = (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0))) * 0.3183098733425140380859375;
    float _2469 = (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * 0.3183098733425140380859375;
    float _2476 = ((cbLight._m0[_2428].x * _2434) * _2469) + ((cbLight._m0[_2438].x * _2444) * _2467);
    float _2477 = ((_2434 * cbLight._m0[_2428].y) * _2469) + ((_2444 * cbLight._m0[_2438].y) * _2467);
    float _2478 = ((_2434 * cbLight._m0[_2428].z) * _2469) + ((_2444 * cbLight._m0[_2438].z) * _2467);
    uint _2480 = _2417 + 8u;
    float _2493 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2417].w)) * _1164) * 0.949999988079071044921875);
    float _2494 = _2493 * _2493;
    float _2495 = cbLight._m0[_2417].x + _1237;
    float _2496 = cbLight._m0[_2417].y + _1238;
    float _2497 = cbLight._m0[_2417].z + _1239;
    float _2501 = inversesqrt(dot(vec3(_2495, _2496, _2497), vec3(_2495, _2496, _2497)));
    float _2502 = _2501 * _2495;
    float _2503 = _2501 * _2496;
    float _2504 = _2501 * _2497;
    float _2505 = dot(vec3(_1280, _1281, _1282), vec3(cbLight._m0[_2417].xyz));
    float _4784 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
    float _2508 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
    float _2509 = dot(vec3(_1280, _1281, _1282), vec3(_1237, _1238, _1239));
    float _4795 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
    float _2512 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
    float _2513 = dot(vec3(_1280, _1281, _1282), vec3(_2502, _2503, _2504));
    float _4806 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
    float _2516 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
    float _2517 = dot(vec3(cbLight._m0[_2417].xyz), vec3(_2502, _2503, _2504));
    float _4817 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
    float _2521 = _2494 * _2494;
    float _2525 = ((_2516 * _2516) * (_2521 + (-1.0))) + 1.0;
    float _2536 = (exp2(log2(1.0 - (isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2537 = 1.0 - _2494;
    float _2548 = (0.5 / (((_2512 * ((_2508 * _2537) + _2494)) + 9.9999999392252902907785028219223e-09) + (((_2512 * _2537) + _2494) * _2508))) * _2508;
    float _4828 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
    float _2550 = (isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0))) * (_2521 / ((_2525 * _2525) * 3.141590118408203125));
    uint _2561 = _2417 + 9u;
    float _2572 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2448].w)) * _1164) * 0.949999988079071044921875);
    float _2573 = _2572 * _2572;
    float _2574 = cbLight._m0[_2448].x + _1237;
    float _2575 = cbLight._m0[_2448].y + _1238;
    float _2576 = cbLight._m0[_2448].z + _1239;
    float _2580 = inversesqrt(dot(vec3(_2574, _2575, _2576), vec3(_2574, _2575, _2576)));
    float _2581 = _2580 * _2574;
    float _2582 = _2580 * _2575;
    float _2583 = _2580 * _2576;
    float _2584 = dot(vec3(_1280, _1281, _1282), vec3(cbLight._m0[_2448].xyz));
    float _4839 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
    float _2587 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
    float _2588 = dot(vec3(_1280, _1281, _1282), vec3(_2581, _2582, _2583));
    float _4850 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
    float _2591 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
    float _2592 = dot(vec3(cbLight._m0[_2448].xyz), vec3(_2581, _2582, _2583));
    float _4861 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
    float _2596 = _2573 * _2573;
    float _2600 = ((_2591 * _2591) * (_2596 + (-1.0))) + 1.0;
    float _2609 = (exp2(log2(1.0 - (isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2610 = 1.0 - _2573;
    float _2620 = (0.5 / (((_2512 * ((_2587 * _2610) + _2573)) + 9.9999999392252902907785028219223e-09) + (((_2512 * _2610) + _2573) * _2587))) * _2587;
    float _4872 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
    float _2622 = (isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0))) * (_2596 / ((_2600 * _2600) * 3.141590118408203125));
    float _2632 = (((_2609 * cbLight._m0[_2561].x) * _2622) * _2434) + (((_2536 * cbLight._m0[_2480].x) * _2550) * _2444);
    float _2633 = (((_2609 * cbLight._m0[_2561].y) * _2622) * _2434) + (((_2536 * cbLight._m0[_2480].y) * _2550) * _2444);
    float _2634 = (((_2609 * cbLight._m0[_2561].z) * _2622) * _2434) + (((_2536 * cbLight._m0[_2480].z) * _2550) * _2444);
    float _2749;
    float _2751;
    float _2753;
    float _2755;
    float _2757;
    float _2759;
    if (_2415.y == 0u)
    {
        float _2689 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2690 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2689;
        float _2691 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2689;
        float _2692 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2689;
        uvec4 _2704 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2705 = _2704.x;
        uint _2716 = uint((float(_2704.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1245) / _2705))) + floor(float(uint(cbSceneParam._m0[85u].x * _1244) / _2705)));
        float _2726 = (log2(_2692 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2727 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        uint _2730 = uint(isnan(14.0) ? _2727 : (isnan(_2727) ? 14.0 : min(_2727, 14.0)));
        uvec4 _2735 = texelFetch(g_lightClusterGridBuffer, int(((_2730 << 2u) + (_2716 << 6u)) >> 2u));
        uint _2736 = _2735.x;
        uint _2737 = _2704.z;
        float _2970;
        float _2972;
        float _2974;
        float _2976;
        float _2978;
        float _2980;
        if (((((1u << ((_2737 >> 4u) & 15u)) + 4294967295u) & _2736) == 0u) || ((_2737 & 240u) == 0u))
        {
            _2970 = 0.0;
            _2972 = 0.0;
            _2974 = 0.0;
            _2976 = 0.0;
            _2978 = 0.0;
            _2980 = 0.0;
        }
        else
        {
            float _2971;
            float _2973;
            float _2975;
            float _2977;
            float _2979;
            float _2981;
            float _3189 = 0.0;
            float _3190 = 0.0;
            float _3191 = 0.0;
            float _3192 = 0.0;
            float _3193 = 0.0;
            float _3194 = 0.0;
            uint _3195 = 0u;
            uint _3204;
            bool _3205;
            for (;;)
            {
                _3204 = texelFetch(g_lightClassification, int((((_2730 << 5u) + (_2716 << 9u)) + (_3195 << 2u)) >> 2u)).x;
                _3205 = _3204 == 0u;
                float frontier_phi_50_pred;
                float frontier_phi_50_pred_1;
                float frontier_phi_50_pred_2;
                float frontier_phi_50_pred_3;
                float frontier_phi_50_pred_4;
                float frontier_phi_50_pred_5;
                if (_3205)
                {
                    frontier_phi_50_pred = _3192;
                    frontier_phi_50_pred_1 = _3194;
                    frontier_phi_50_pred_2 = _3193;
                    frontier_phi_50_pred_3 = _3191;
                    frontier_phi_50_pred_4 = _3190;
                    frontier_phi_50_pred_5 = _3189;
                }
                else
                {
                    float _3364;
                    float _3365;
                    float _3366;
                    float _3367;
                    float _3368;
                    float _3369;
                    uint _3370;
                    _3364 = _3189;
                    _3365 = _3190;
                    _3366 = _3191;
                    _3367 = _3192;
                    _3368 = _3193;
                    _3369 = _3194;
                    _3370 = _3204;
                    float _3270;
                    float _3271;
                    float _3272;
                    float _3273;
                    float _3274;
                    float _3275;
                    for (;;)
                    {
                        uint _3374 = uint(findLSB(_3370)) + (_3195 << 5u);
                        uint _3371 = (_3370 + 4294967295u) & _3370;
                        uint _3376 = _3374 * 48u;
                        vec4 _3390 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3376)).x, texelFetch(g_PointLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3376 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3376 + 3u)).x));
                        uint _3396 = (_3374 * 48u) + 4u;
                        vec4 _3409 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3396)).x, texelFetch(g_PointLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3396 + 3u)).x));
                        uint _3415 = (_3374 * 48u) + 8u;
                        vec3 _3426 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3415)).x, texelFetch(g_PointLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3415 + 2u)).x));
                        float _3430 = _3390.x - _2690;
                        float _3431 = _3390.y - _2691;
                        float _3432 = _3390.z - _2692;
                        float _3433 = dot(vec3(_3430, _3431, _3432), vec3(_3430, _3431, _3432));
                        float _3436 = inversesqrt(_3433);
                        float _3437 = _3436 * _3430;
                        float _3438 = _3436 * _3431;
                        float _3439 = _3436 * _3432;
                        float _3440 = dot(vec3(_1300, _1303, _1306), vec3(_3437, _3438, _3439));
                        float _3445 = 1.0 - (_3433 * _3390.w);
                        float _4893 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                        float _3446 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
                        float _3447 = sqrt(_3433) * _3409.w;
                        float _3450 = 1.39999997615814208984375 / (_3447 + 1.39999997615814208984375);
                        float _3451 = _3450 * _3450;
                        float _3454 = ((1.0 - _3451) * _3440) + _3451;
                        float _3457 = _3447 * _3447;
                        float _3461 = ((isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0))) * _3446) / ((_3457 * 0.699999988079071044921875) + 1.0);
                        float _3465 = (-0.0) - _2690;
                        float _3466 = (-0.0) - _2691;
                        float _3467 = (-0.0) - _2692;
                        float _3471 = inversesqrt(dot(vec3(_3465, _3466, _3467), vec3(_3465, _3466, _3467)));
                        float _3472 = _3471 * _3465;
                        float _3473 = _3471 * _3466;
                        float _3474 = _3471 * _3467;
                        float _3482 = exp2(log2(1.0 / ((_3457 * 3.5) + 5.0)) * 0.25);
                        float _3483 = 1.0 - _1373;
                        float _3490 = sqrt(1.0 - ((1.0 - (_3483 * _3483)) * (1.0 - (_3482 * _3482))));
                        float _3491 = _3490 * _3490;
                        float _3492 = _3491 * _3491;
                        float _3493 = _3472 + _3437;
                        float _3494 = _3473 + _3438;
                        float _3495 = _3474 + _3439;
                        float _3499 = inversesqrt(dot(vec3(_3493, _3494, _3495), vec3(_3493, _3494, _3495)));
                        float _3503 = dot(vec3(_1300, _1303, _1306), vec3(_3472, _3473, _3474));
                        float _4909 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                        float _3506 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                        float _3507 = dot(vec3(_1300, _1303, _1306), vec3(_3499 * _3493, _3499 * _3494, _3499 * _3495));
                        float _4920 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                        float _3510 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
                        float _3514 = ((_3510 * _3510) * (_3492 + (-1.0))) + 1.0;
                        float _3515 = _3450 * _3491;
                        float _3516 = _3515 * _3515;
                        float _3519 = ((1.0 - _3516) * _3440) + _3516;
                        float _4931 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                        float _3520 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
                        float _3521 = 1.0 - _3491;
                        float _3531 = (0.5 / (((_3520 * ((_3506 * _3521) + _3491)) + 9.9999999392252902907785028219223e-09) + (((_3520 * _3521) + _3491) * _3506))) * _3520;
                        float _4942 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                        float _3542 = (((_3492 * 3.1415927410125732421875) * (isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0)))) / ((_3514 * _3514) * ((_3457 * 2.1991131305694580078125) + 3.141590118408203125))) * _3446;
                        _3273 = (_3461 * _3409.x) + _3367;
                        _3274 = (_3461 * _3409.y) + _3368;
                        _3275 = (_3461 * _3409.z) + _3369;
                        _3270 = (_3542 * _3426.x) + _3364;
                        _3271 = (_3542 * _3426.y) + _3365;
                        _3272 = (_3542 * _3426.z) + _3366;
                        if (_3371 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3364 = _3270;
                            _3365 = _3271;
                            _3366 = _3272;
                            _3367 = _3273;
                            _3368 = _3274;
                            _3369 = _3275;
                            _3370 = _3371;
                        }
                    }
                    frontier_phi_50_pred = _3273;
                    frontier_phi_50_pred_1 = _3275;
                    frontier_phi_50_pred_2 = _3274;
                    frontier_phi_50_pred_3 = _3272;
                    frontier_phi_50_pred_4 = _3271;
                    frontier_phi_50_pred_5 = _3270;
                }
                _2977 = frontier_phi_50_pred;
                _2981 = frontier_phi_50_pred_1;
                _2979 = frontier_phi_50_pred_2;
                _2975 = frontier_phi_50_pred_3;
                _2973 = frontier_phi_50_pred_4;
                _2971 = frontier_phi_50_pred_5;
                uint _3196 = _3195 + 1u;
                if (_3196 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3189 = _2971;
                    _3190 = _2973;
                    _3191 = _2975;
                    _3192 = _2977;
                    _3193 = _2979;
                    _3194 = _2981;
                    _3195 = _3196;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2970 = _2971;
            _2972 = _2973;
            _2974 = _2975;
            _2976 = _2977;
            _2978 = _2979;
            _2980 = _2981;
        }
        uvec4 _2984 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2985 = _2984.z;
        uint _2987 = (_2985 >> 8u) & 15u;
        float _3157;
        float _3159;
        float _3161;
        float _3163;
        float _3165;
        float _3167;
        if (((4294967295u << _2987) & _2736) == 0u)
        {
            _3157 = _2970;
            _3159 = _2972;
            _3161 = _2974;
            _3163 = _2976;
            _3165 = _2978;
            _3167 = _2980;
        }
        else
        {
            float _3182 = inversesqrt(dot(vec3(_2690, _2691, _2692), vec3(_2690, _2691, _2692)));
            float _3183 = _3182 * _2690;
            float _3184 = _3182 * _2691;
            float _3185 = _3182 * _2692;
            float frontier_phi_41_42_ladder;
            float frontier_phi_41_42_ladder_1;
            float frontier_phi_41_42_ladder_2;
            float frontier_phi_41_42_ladder_3;
            float frontier_phi_41_42_ladder_4;
            float frontier_phi_41_42_ladder_5;
            if (_2987 < ((_2985 >> 12u) & 15u))
            {
                float _3158;
                float _3160;
                float _3162;
                float _3164;
                float _3166;
                float _3168;
                float _3347 = _2970;
                float _3348 = _2972;
                float _3349 = _2974;
                float _3350 = _2976;
                float _3351 = _2978;
                float _3352 = _2980;
                uint _3353 = _2987;
                uint _3362;
                bool _3363;
                for (;;)
                {
                    _3362 = texelFetch(g_lightClassification, int((((_2730 << 5u) + (_2716 << 9u)) + (_3353 << 2u)) >> 2u)).x;
                    _3363 = _3362 == 0u;
                    float frontier_phi_59_pred;
                    float frontier_phi_59_pred_1;
                    float frontier_phi_59_pred_2;
                    float frontier_phi_59_pred_3;
                    float frontier_phi_59_pred_4;
                    float frontier_phi_59_pred_5;
                    if (_3363)
                    {
                        frontier_phi_59_pred = _3352;
                        frontier_phi_59_pred_1 = _3351;
                        frontier_phi_59_pred_2 = _3350;
                        frontier_phi_59_pred_3 = _3349;
                        frontier_phi_59_pred_4 = _3348;
                        frontier_phi_59_pred_5 = _3347;
                    }
                    else
                    {
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3861;
                        float _3862;
                        float _3863;
                        float _3864;
                        float _3865;
                        float _3866;
                        float _3581 = _3347;
                        float _3582 = _3348;
                        float _3583 = _3349;
                        float _3584 = _3350;
                        float _3585 = _3351;
                        float _3586 = _3352;
                        uint _3587 = _3362;
                        uint _3588;
                        vec4 _3613;
                        float _3614;
                        vec4 _3629;
                        vec3 _3641;
                        vec4 _3656;
                        vec4 _3671;
                        float _3717;
                        bool _3718;
                        for (;;)
                        {
                            uint _3598 = ((_3353 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3587));
                            _3588 = (_3587 + 4294967295u) & _3587;
                            uint _3600 = _3598 * 40u;
                            _3613 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3600)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 3u)).x));
                            _3614 = _3613.w;
                            uint _3616 = (_3598 * 40u) + 4u;
                            _3629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 3u)).x));
                            uint _3631 = (_3598 * 40u) + 8u;
                            _3641 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 2u)).x));
                            uint _3643 = (_3598 * 40u) + 16u;
                            _3656 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3643)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 3u)).x));
                            uint _3658 = (_3598 * 40u) + 20u;
                            _3671 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 3u)).x));
                            uint _3673 = (_3598 * 40u) + 24u;
                            vec4 _3686 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3673)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 3u)).x));
                            uint _3692 = (_3598 * 40u) + 28u;
                            vec4 _3705 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3692)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 3u)).x));
                            _3717 = fma(_2692, _3705.z, fma(_2691, _3705.y, _3705.x * _2690)) + _3705.w;
                            _3718 = !((fma(_2692, _3686.z, fma(_2691, _3686.y, _3686.x * _2690)) + _3686.w) <= 0.0);
                            float frontier_phi_65_pred;
                            float frontier_phi_65_pred_1;
                            float frontier_phi_65_pred_2;
                            float frontier_phi_65_pred_3;
                            float frontier_phi_65_pred_4;
                            float frontier_phi_65_pred_5;
                            if (_3718)
                            {
                                float _3745 = _3613.x - _2690;
                                float _3746 = _3613.y - _2691;
                                float _3747 = _3613.z - _2692;
                                float _3748 = dot(vec3(_3745, _3746, _3747), vec3(_3745, _3746, _3747));
                                float _3751 = inversesqrt(_3748);
                                float _3752 = _3751 * _3745;
                                float _3753 = _3751 * _3746;
                                float _3754 = _3751 * _3747;
                                float _3758 = 1.0 - (_3748 / (_3614 * _3614));
                                float _4953 = isnan(0.0) ? _3758 : (isnan(_3758) ? 0.0 : max(_3758, 0.0));
                                float _3759 = isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0));
                                float _3763 = sqrt(_3748) * _3629.w;
                                float _3765 = 1.39999997615814208984375 / (_3763 + 1.39999997615814208984375);
                                float _3766 = _3765 * _3765;
                                float _3769 = ((1.0 - _3766) * dot(vec3(_3752, _3753, _3754), vec3(_1300, _1303, _1306))) + _3766;
                                float _3772 = _3763 * _3763;
                                float _3776 = (fma(_2692, _3656.z, fma(_2691, _3656.y, _3656.x * _2690)) + _3656.w) / _3717;
                                float _3777 = (fma(_2692, _3671.z, fma(_2691, _3671.y, _3671.x * _2690)) + _3671.w) / _3717;
                                float _3781 = 1.0 - dot(vec2(_3776, _3777), vec2(_3776, _3777));
                                float _4969 = isnan(0.0) ? _3781 : (isnan(_3781) ? 0.0 : max(_3781, 0.0));
                                float _3782 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
                                float _3783 = _3782 * (((isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0))) * _3759) / ((_3772 * 0.699999988079071044921875) + 1.0));
                                float _3795 = exp2(log2(1.0 / ((_3772 * 3.5) + 5.0)) * 0.25);
                                float _3796 = 1.0 - _1373;
                                float _3803 = sqrt(1.0 - ((1.0 - (_3796 * _3796)) * (1.0 - (_3795 * _3795))));
                                float _3804 = _3803 * _3803;
                                float _3805 = _3804 * _3804;
                                float _3806 = _3752 - _3183;
                                float _3807 = _3753 - _3184;
                                float _3808 = _3754 - _3185;
                                float _3812 = inversesqrt(dot(vec3(_3806, _3807, _3808), vec3(_3806, _3807, _3808)));
                                float _3816 = dot(vec3(_1300, _1303, _1306), vec3((-0.0) - _3183, (-0.0) - _3184, (-0.0) - _3185));
                                float _4980 = isnan(0.0) ? _3816 : (isnan(_3816) ? 0.0 : max(_3816, 0.0));
                                float _3819 = isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0));
                                float _3820 = dot(vec3(_1300, _1303, _1306), vec3(_3812 * _3806, _3812 * _3807, _3812 * _3808));
                                float _4991 = isnan(0.0) ? _3820 : (isnan(_3820) ? 0.0 : max(_3820, 0.0));
                                float _3823 = isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0));
                                float _3827 = ((_3823 * _3823) * (_3805 + (-1.0))) + 1.0;
                                float _3828 = _3765 * _3804;
                                float _3829 = _3828 * _3828;
                                float _3835 = ((1.0 - _3829) * dot(vec3(_1300, _1303, _1306), vec3(_3752, _3753, _3754))) + _3829;
                                float _5002 = isnan(0.0) ? _3835 : (isnan(_3835) ? 0.0 : max(_3835, 0.0));
                                float _3836 = isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0));
                                float _3837 = 1.0 - _3804;
                                float _3847 = (0.5 / (((_3836 * ((_3819 * _3837) + _3804)) + 9.9999999392252902907785028219223e-09) + (((_3836 * _3837) + _3804) * _3819))) * _3836;
                                float _5013 = isnan(0.0) ? _3847 : (isnan(_3847) ? 0.0 : max(_3847, 0.0));
                                float _3857 = (_3782 * _3759) * (((_3805 * 3.1415927410125732421875) * (isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0)))) / ((_3827 * _3827) * ((_3772 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_65_pred = _3783 * _3629.z;
                                frontier_phi_65_pred_1 = _3783 * _3629.y;
                                frontier_phi_65_pred_2 = _3783 * _3629.x;
                                frontier_phi_65_pred_3 = _3857 * _3641.z;
                                frontier_phi_65_pred_4 = _3857 * _3641.y;
                                frontier_phi_65_pred_5 = _3857 * _3641.x;
                            }
                            else
                            {
                                frontier_phi_65_pred = 0.0;
                                frontier_phi_65_pred_1 = 0.0;
                                frontier_phi_65_pred_2 = 0.0;
                                frontier_phi_65_pred_3 = 0.0;
                                frontier_phi_65_pred_4 = 0.0;
                                frontier_phi_65_pred_5 = 0.0;
                            }
                            _3866 = frontier_phi_65_pred;
                            _3865 = frontier_phi_65_pred_1;
                            _3864 = frontier_phi_65_pred_2;
                            _3863 = frontier_phi_65_pred_3;
                            _3862 = frontier_phi_65_pred_4;
                            _3861 = frontier_phi_65_pred_5;
                            _3571 = _3864 + _3584;
                            _3572 = _3865 + _3585;
                            _3573 = _3866 + _3586;
                            _3568 = _3861 + _3581;
                            _3569 = _3862 + _3582;
                            _3570 = _3863 + _3583;
                            if (_3588 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3581 = _3568;
                                _3582 = _3569;
                                _3583 = _3570;
                                _3584 = _3571;
                                _3585 = _3572;
                                _3586 = _3573;
                                _3587 = _3588;
                                continue;
                            }
                        }
                        frontier_phi_59_pred = _3573;
                        frontier_phi_59_pred_1 = _3572;
                        frontier_phi_59_pred_2 = _3571;
                        frontier_phi_59_pred_3 = _3570;
                        frontier_phi_59_pred_4 = _3569;
                        frontier_phi_59_pred_5 = _3568;
                    }
                    _3168 = frontier_phi_59_pred;
                    _3166 = frontier_phi_59_pred_1;
                    _3164 = frontier_phi_59_pred_2;
                    _3162 = frontier_phi_59_pred_3;
                    _3160 = frontier_phi_59_pred_4;
                    _3158 = frontier_phi_59_pred_5;
                    uint _3354 = _3353 + 1u;
                    if (_3354 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3347 = _3158;
                        _3348 = _3160;
                        _3349 = _3162;
                        _3350 = _3164;
                        _3351 = _3166;
                        _3352 = _3168;
                        _3353 = _3354;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_41_42_ladder = _3164;
                frontier_phi_41_42_ladder_1 = _3168;
                frontier_phi_41_42_ladder_2 = _3166;
                frontier_phi_41_42_ladder_3 = _3162;
                frontier_phi_41_42_ladder_4 = _3160;
                frontier_phi_41_42_ladder_5 = _3158;
            }
            else
            {
                frontier_phi_41_42_ladder = _2976;
                frontier_phi_41_42_ladder_1 = _2980;
                frontier_phi_41_42_ladder_2 = _2978;
                frontier_phi_41_42_ladder_3 = _2974;
                frontier_phi_41_42_ladder_4 = _2972;
                frontier_phi_41_42_ladder_5 = _2970;
            }
            _3157 = frontier_phi_41_42_ladder_5;
            _3159 = frontier_phi_41_42_ladder_4;
            _3161 = frontier_phi_41_42_ladder_3;
            _3163 = frontier_phi_41_42_ladder;
            _3165 = frontier_phi_41_42_ladder_2;
            _3167 = frontier_phi_41_42_ladder_1;
        }
        float _3172 = isnan(1.0) ? _1344 : (isnan(_1344) ? 1.0 : min(_1344, 1.0));
        _2749 = (_3172 * _3163) + _2476;
        _2751 = (_3172 * _3165) + _2477;
        _2753 = (_3172 * _3167) + _2478;
        _2755 = ((_3157 * 0.039999999105930328369140625) * _3172) + _2632;
        _2757 = ((_3159 * 0.039999999105930328369140625) * _3172) + _2633;
        _2759 = ((_3161 * 0.039999999105930328369140625) * _3172) + _2634;
    }
    else
    {
        _2749 = _2476;
        _2751 = _2477;
        _2753 = _2478;
        _2755 = _2632;
        _2757 = _2633;
        _2759 = _2634;
    }
    uint _2765 = _1320 + uint(cbMatDynParam._m0[0u].w);
    float _2771 = cbInstanceData._m0[_2765].x * (_966 - (_966 * TEXCOORD_7.x));
    float _2772 = cbInstanceData._m0[_2765].y * (_968 - (_968 * TEXCOORD_7.y));
    float _2773 = cbInstanceData._m0[_2765].z * (_970 - (_970 * TEXCOORD_7.z));
    float _2786 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2787 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2788 = cbSceneParam._m0[86u].x * ((_1244 / cbSceneParam._m0[86u].x) + (((10.0 / (_1181 + 10.0)) * cbMtdParam._m0[20u].y) * dot(vec3(_1280, _1281, _1282), vec3(_227, _228, _229))));
    float _2789 = isnan(_2786) ? _2788 : (isnan(_2788) ? _2786 : min(_2788, _2786));
    float _2790 = isnan(_2787) ? _1245 : (isnan(_1245) ? _2787 : min(_1245, _2787));
    vec4 _2792 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2789, _2790), 0.0);
    float _2794 = _2792.x;
    bool _2814 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2794)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2794))) > _1181;
    float _2815 = _2814 ? _2789 : _1244;
    float _2816 = _2814 ? _2790 : _1245;
    vec4 _2818 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2815, _2816));
    vec4 _2823 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2815, _2816));
    float _2825 = _2823.x;
    float _2845 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2825)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2825))) - _1181;
    bool _2855 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2859 = (isnan(_2845) ? 0.0 : (isnan(0.0) ? _2845 : max(0.0, _2845))) * (-1.44269502162933349609375);
    float _5044 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
    float _5055 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
    float _5066 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
    float _2886 = 0.959999978542327880859375 - (exp2(log2(1.0 - (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0)))) * 5.0) * 0.959999978542327880859375);
    float _2889 = ((_2818.x * _2886) * exp2(_2859 * (_2855 ? 0.0 : (cbMtdParam._m0[39u].z + cbMtdParam._m0[38u].x)))) * cbSceneParam._m0[72u].w;
    float _2892 = ((_2818.y * _2886) * exp2(_2859 * (_2855 ? 0.0 : (cbMtdParam._m0[39u].w + cbMtdParam._m0[38u].y)))) * cbSceneParam._m0[72u].w;
    float _2895 = ((_2818.z * _2886) * exp2(_2859 * (_2855 ? 0.0 : (cbMtdParam._m0[40u].x + cbMtdParam._m0[38u].z)))) * cbSceneParam._m0[72u].w;
    float _2904 = ((_2771 + (((((_2354 * _2389.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0))) * _2149) * _2405)) + _2755) * cbPerFrame._m0[3u].x)) + _2889) + ((((isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0))) * (_2749 + ((isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0))) * _1344))) - _2889) * _1102);
    float _2907 = ((_2772 + (((((_2354 * _2389.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0))) * _2149) * _2405)) + _2757) * cbPerFrame._m0[3u].x)) + _2892) + ((((isnan(1.0) ? _5055 : (isnan(_5055) ? 1.0 : min(_5055, 1.0))) * (_2751 + ((isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0))) * _1344))) - _2892) * _1102);
    float _2910 = ((_2773 + (((((_2354 * _2389.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0))) * _2149) * _2405)) + _2759) * cbPerFrame._m0[3u].x)) + _2895) + ((((isnan(1.0) ? _5066 : (isnan(_5066) ? 1.0 : min(_5066, 1.0))) * (_2753 + ((isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0))) * _1344))) - _2895) * _1102);
    float _5092 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2923 = isnan(1.0) ? _5092 : (isnan(_5092) ? 1.0 : min(_5092, 1.0));
    float _2933 = _1244 / cbSceneParam._m0[86u].x;
    float _2934 = _1245 / cbSceneParam._m0[86u].y;
    vec4 _2948 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2933, _2934, (log2((isnan(cbSceneParam._m0[77u].w) ? _1181 : (isnan(_1181) ? cbSceneParam._m0[77u].w : min(_1181, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2950 = _2948.x;
    float _2951 = _2948.y;
    float _2952 = _2948.z;
    float _2953 = _2948.w;
    float _3032;
    float _3034;
    float _3036;
    float _3038;
    if (_1181 > cbSceneParam._m0[78u].w)
    {
        float _2995 = isnan(_1181) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1181 : min(cbSceneParam._m0[80u].w, _1181));
        float _2996 = _2995 / _1181;
        float _3007 = _2996 * _1230;
        float _3008 = _1231 * _2996;
        float _3009 = (-0.0) - _3008;
        float _3010 = _2996 * _1232;
        float _3012 = (cbSceneParam._m0[77u].w * _3009) / _2995;
        float _3013 = _3012 + cbSceneParam._m0[79u].w;
        float _3014 = cbSceneParam._m0[79u].w - _3008;
        float _3020 = sqrt(((_3007 * _3007) + (_3008 * _3008)) + (_3010 * _3010));
        float _3023 = (1.0 - (cbSceneParam._m0[77u].w / _2995)) * _3020;
        float _3029 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3030 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3283;
        if (abs((_3009 - _3012) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3283 = ((((_3013 > 0.0) ? exp2(_3029 * _3013) : (2.0 - exp2(_3030 * _3013))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3023;
        }
        else
        {
            float _3218 = 1.0 / cbSceneParam._m0[80u].x;
            float _3219 = isnan(_3014) ? _3013 : (isnan(_3013) ? _3014 : max(_3013, _3014));
            float _3220 = isnan(_3014) ? _3013 : (isnan(_3013) ? _3014 : min(_3013, _3014));
            float _3229 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : min(_3219, 0.0));
            float _3230 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : min(_3220, 0.0));
            _3283 = ((abs(_3020 / _3009) * cbSceneParam._m0[80u].y) * ((((_3229 - _3230) * 2.0) - ((exp2(_3029 * (isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0)))) - exp2(_3029 * (isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0))))) * _3218)) - ((exp2(_3030 * _3229) - exp2(_3030 * _3230)) * _3218))) + (_3023 * cbSceneParam._m0[80u].z);
        }
        vec4 _3285 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2933, _2934, 1.0), 0.0);
        float _3294 = exp2((_3283 * (-1.44269502162933349609375)) * (1.0 - _3285.w));
        float _3295 = log2(_3294);
        float _3311 = log2(_2953);
        _3032 = (exp2(_3311 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3295 * cbSceneParam._m0[78u].x)) * _3285.x) / cbSceneParam._m0[78u].x)) + _2950;
        _3034 = (exp2(_3311 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3295 * cbSceneParam._m0[78u].y)) * _3285.y) / cbSceneParam._m0[78u].y)) + _2951;
        _3036 = (exp2(_3311 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3295 * cbSceneParam._m0[78u].z)) * _3285.z) / cbSceneParam._m0[78u].z)) + _2952;
        _3038 = _3294 * _2953;
    }
    else
    {
        _3032 = _2950;
        _3034 = _2951;
        _3036 = _2952;
        _3038 = _2953;
    }
    bool _3050 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _3051 = log2(_3038);
    float _3055 = exp2(_3051 * cbSceneParam._m0[78u].x);
    float _3056 = exp2(_3051 * cbSceneParam._m0[78u].y);
    float _3057 = exp2(_3051 * cbSceneParam._m0[78u].z);
    float _3058 = _3055 * (isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0)));
    float _3059 = _3056 * (isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0)));
    float _3060 = _3057 * (isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0)));
    vec4 _3068 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_1244, _1245));
    float _3070 = _3068.x;
    float _3091 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3070)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3070))) - _1181) * cbMtdParam._m0[24u].y;
    float _5143 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
    float _3092 = isnan(1.0) ? _5143 : (isnan(_5143) ? 1.0 : min(_5143, 1.0));
    float _3093 = (cbInstanceData._m0[_1319 + 6u].w * (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0)))) * _3092;
    float _3102 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3102 * (_3050 ? _3058 : (_3058 + (cbSceneParam._m0[72u].w * _3032)));
    SV_Target.y = _3102 * (_3050 ? _3059 : (_3059 + (cbSceneParam._m0[72u].w * _3034)));
    SV_Target.z = _3102 * (_3050 ? _3060 : (_3060 + (cbSceneParam._m0[72u].w * _3036)));
    SV_Target.w = _3093;
    SV_Target_1.x = ((((cbMtdParam._m0[2u].x * _2771) * _2923) * _3055) * _3092) * _3102;
    SV_Target_1.y = ((((cbMtdParam._m0[2u].y * _2772) * _2923) * _3056) * _3092) * _3102;
    SV_Target_1.z = ((((cbMtdParam._m0[2u].z * _2773) * _2923) * _3057) * _3092) * _3102;
    SV_Target_1.w = _3093;
}


