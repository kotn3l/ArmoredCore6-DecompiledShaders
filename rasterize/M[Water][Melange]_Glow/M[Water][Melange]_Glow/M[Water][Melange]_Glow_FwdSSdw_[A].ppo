#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[42];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 7) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 7) in float TEXCOORD_12;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1767;
float _4117;
float _4118;
float _4119;
float _4120;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _233 = _232 * _224;
    float _234 = _232 * _225;
    float _235 = _232 * _226;
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = _239 * NORMAL.x;
    float _241 = _239 * NORMAL.y;
    float _242 = _239 * NORMAL.z;
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247 = _246 * TANGENT.x;
    float _248 = _246 * TANGENT.y;
    float _249 = _246 * TANGENT.z;
    float _293 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _303 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _293);
    float _304 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _293);
    float _305 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _293);
    float _320 = cbMtdParam._m0[22u].x - cbMtdParam._m0[21u].w;
    float _322 = (sqrt(((_303 * _303) + (_304 * _304)) + (_305 * _305)) - cbMtdParam._m0[21u].w) / (isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0)));
    float _326 = _322 / cbMtdParam._m0[23u].z;
    float _327 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _328 = isnan(8.0) ? _327 : (isnan(_327) ? 8.0 : min(_327, 8.0));
    float _335 = cbMtdParam._m0[10u].x * _328;
    float _336 = cbMtdParam._m0[10u].y * _328;
    float _337 = cbMtdParam._m0[10u].z * _328;
    float _338 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _339 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _340 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _351 = cbMtdParam._m0[22u].y + _322;
    float _356 = _351 * cbMtdParam._m0[24u].z;
    float _4174 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    vec4 _374 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _377 = _374.x;
    float _401 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _377)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _377))) - POSITION_1.w) / cbMtdParam._m0[21u].x;
    float _4185 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _402 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _407 = 1.0 - (isnan(cbMtdParam._m0[26u].y) ? _402 : (isnan(_402) ? cbMtdParam._m0[26u].y : max(_402, cbMtdParam._m0[26u].y)));
    float _409 = (cbMtdParam._m0[26u].x + TEXCOORD_3.x) - (_407 * cbMtdParam._m0[21u].z);
    float _425 = (cbMtdParam._m0[29u].y + cbPerFrame._m0[22u].x) * cbMtdParam._m0[20u].z;
    float _433 = cbMtdParam._m0[34u].z * TEXCOORD.x;
    float _434 = cbMtdParam._m0[34u].w * TEXCOORD.y;
    vec4 _448 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_2, SS_BumpMap), vec2((((_425 * cbMtdParam._m0[35u].x) + _433) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_434 + (_425 * cbMtdParam._m0[35u].y)) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _450 = _448.x;
    float _451 = _448.y;
    float _4201 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _454 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _455 = _448.z - _454;
    float _4212 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _456 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _468 = (_456 * 0.00999999977648258209228515625) + TEXCOORD.x;
    float _470 = (_456 * (-0.00999999977648258209228515625)) + TEXCOORD.y;
    vec4 _483 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2(((_468 + (cbMtdParam._m0[31u].x * _425)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_470 + (cbMtdParam._m0[31u].y * _425)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _487 = _483.z;
    vec4 _501 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2(((_468 + (cbMtdParam._m0[30u].z * _425)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_470 + (cbMtdParam._m0[30u].w * _425)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _505 = _501.z;
    float _508 = (_407 - _448.w) + (isnan(_505) ? _487 : (isnan(_487) ? _505 : max(_487, _505)));
    float _4228 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _510 = (_409 * (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) * (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0)));
    float _512 = _510 - (_510 * TEXCOORD_7.w);
    float _525 = (_512 + cbMtdParam._m0[9u].x) + (cbMtdParam._m0[16u].x * _456);
    float _526 = (_512 + cbMtdParam._m0[9u].y) + (cbMtdParam._m0[16u].y * _456);
    float _527 = (_512 + cbMtdParam._m0[9u].z) + (cbMtdParam._m0[16u].z * _456);
    vec4 _570 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * ((fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / cbMtdParam._m0[22u].z) + (cbMtdParam._m0[35u].z * _425))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * ((fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / cbMtdParam._m0[22u].z) + (cbMtdParam._m0[35u].w * _425))) + cbTextureTilingScale._m0[1u].w));
    float _575 = _570.z * 0.099999986588954925537109375;
    float _4239 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _577 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _581 = cbMtdParam._m0[24u].x * _322;
    float _4250 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _582 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _596 = (_525 + (isnan(0.07999999821186065673828125) ? _338 : (isnan(_338) ? 0.07999999821186065673828125 : min(_338, 0.07999999821186065673828125)))) + (_582 * (((1.0 - _525) - _577) + _575));
    float _598 = (_526 + (isnan(0.07999999821186065673828125) ? _339 : (isnan(_339) ? 0.07999999821186065673828125 : min(_339, 0.07999999821186065673828125)))) + (_582 * (((1.0 - _526) - _577) + _575));
    float _600 = (_527 + (isnan(0.07999999821186065673828125) ? _340 : (isnan(_340) ? 0.07999999821186065673828125 : min(_340, 0.07999999821186065673828125)))) + (_582 * (((1.0 - _527) + _575) - _577));
    float _4261 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _601 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _4272 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _602 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    float _4283 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _603 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _608 = _322 / cbMtdParam._m0[25u].z;
    float _4294 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _611 = (1.0 - (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0)))) * cbMtdParam._m0[25u].y;
    float _618 = ((cbMtdParam._m0[21u].y - cbMtdParam._m0[20u].x) * _454) + cbMtdParam._m0[20u].x;
    float _641 = (POSITION_1.w - cbMtdParam._m0[28u].w) * (1.0 / cbMtdParam._m0[28u].z);
    float _4305 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _642 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
    float _656 = (cbMtdParam._m0[33u].z * _425) + _433;
    float _657 = (cbMtdParam._m0[33u].w * _425) + _434;
    vec4 _680 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * ((cbMtdParam._m0[33u].x * _425) + _433)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((cbMtdParam._m0[33u].y * _425) + _434)) + cbTextureTilingScale._m0[3u].w));
    float _687 = (_680.x * 2.0) + (-1.0);
    float _689 = (_680.y * 2.0) + (-1.0);
    float _693 = 1.0 - dot(vec2(_687, _689), vec2(_687, _689));
    float _4316 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _695 = sqrt(isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0)));
    float _698 = fma(_695, _240, fma(_689, _247, _687 * _233));
    float _701 = fma(_695, _241, fma(_689, _248, _687 * _234));
    float _704 = fma(_695, _242, fma(_689, _249, _687 * _235));
    float _708 = inversesqrt(dot(vec3(_698, _701, _704), vec3(_698, _701, _704)));
    float _709 = cbPerFrame._m0[22u].x * 2.0;
    float _710 = _709 * cbMtdParam._m0[27u].y;
    float _714 = ((_698 * 0.5) * _708) + (-0.25);
    float _718 = ((_701 * 0.5) * _708) + (-0.25);
    float _719 = _718 * cbMtdParam._m0[27u].z;
    float _721 = (-0.0) - (cbMtdParam._m0[27u].z * _714);
    float _722 = fract(_710);
    float _724 = fract(_710 + 0.5);
    float _735 = abs((_722 * 2.0) + (-1.0));
    vec4 _752 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_722 * _721) + _656) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_719 * _722) + _657) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    vec4 _757 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_724 * _721) + _656) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_719 * _724) + _657) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _768 = ((_757.x - _752.x) * _735) + _752.x;
    float _769 = ((_757.y - _752.y) * _735) + _752.y;
    float _770 = ((_757.z - _752.z) * _735) + _752.z;
    float _787 = (cbMtdParam._m0[32u].z * _425) + _433;
    float _788 = (cbMtdParam._m0[32u].w * _425) + _434;
    float _791 = _709 * cbMtdParam._m0[27u].x;
    float _792 = _718 * cbMtdParam._m0[26u].w;
    float _794 = (-0.0) - (cbMtdParam._m0[26u].w * _714);
    float _795 = fract(_791);
    float _797 = fract(_791 + 0.5);
    float _808 = abs((_795 * 2.0) + (-1.0));
    vec4 _825 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_795 * _794) + _787) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_792 * _795) + _788) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _827 = _825.x;
    float _828 = _825.y;
    float _829 = _825.z;
    vec4 _830 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_797 * _794) + _787) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_792 * _797) + _788) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _861 = (((((cbMtdParam._m0[17u].x - cbMtdParam._m0[19u].x) * _768) * cbMtdParam._m0[29u].z) + cbMtdParam._m0[19u].x) * (((_830.x - _827) * _808) + _827)) + (_768 * cbMtdParam._m0[18u].x);
    float _864 = (((((cbMtdParam._m0[17u].y - cbMtdParam._m0[19u].y) * _769) * cbMtdParam._m0[29u].z) + cbMtdParam._m0[19u].y) * (((_830.y - _828) * _808) + _828)) + (_769 * cbMtdParam._m0[18u].y);
    float _867 = ((((cbMtdParam._m0[29u].z * _770) * (cbMtdParam._m0[17u].z - cbMtdParam._m0[19u].z)) + cbMtdParam._m0[19u].z) * (((_830.z - _829) * _808) + _829)) + (_770 * cbMtdParam._m0[18u].z);
    float _871 = _861 - (_861 * _642);
    float _872 = _864 - (_864 * _642);
    float _873 = _867 - (_867 * _642);
    float _878 = (POSITION_1.w - cbMtdParam._m0[28u].y) * (1.0 / cbMtdParam._m0[28u].x);
    float _4327 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _879 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
    float _889 = (cbMtdParam._m0[34u].x * _425) + _433;
    float _890 = (cbMtdParam._m0[34u].y * _425) + _434;
    vec4 _903 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((_889 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_890 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _905 = _903.x;
    float _906 = _903.y;
    float _907 = _903.z;
    vec4 _929 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * _889) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _890) + cbTextureTilingScale._m0[7u].w));
    float _972 = (cbMtdParam._m0[29u].x * cbMtdParam._m0[15u].x) * ((_871 + (cbMtdParam._m0[14u].x * _512)) + ((((_905 * cbMtdParam._m0[11u].x) - _871) + (((((cbMtdParam._m0[13u].x - cbMtdParam._m0[12u].x) * _905) * cbMtdParam._m0[29u].w) + cbMtdParam._m0[12u].x) * _929.x)) * _879));
    float _974 = (cbMtdParam._m0[29u].x * cbMtdParam._m0[15u].y) * ((_872 + (cbMtdParam._m0[14u].y * _512)) + ((((_906 * cbMtdParam._m0[11u].y) - _872) + (((((cbMtdParam._m0[13u].y - cbMtdParam._m0[12u].y) * _906) * cbMtdParam._m0[29u].w) + cbMtdParam._m0[12u].y) * _929.y)) * _879));
    float _976 = (cbMtdParam._m0[29u].x * cbMtdParam._m0[15u].z) * ((_873 + (cbMtdParam._m0[14u].z * _512)) + ((((_907 * cbMtdParam._m0[11u].z) - _873) + ((((cbMtdParam._m0[29u].w * _907) * (cbMtdParam._m0[13u].z - cbMtdParam._m0[12u].z)) + cbMtdParam._m0[12u].z) * _929.z)) * _879));
    float _4338 = isnan(0.0) ? TEXCOORD_3.y : (isnan(TEXCOORD_3.y) ? 0.0 : max(TEXCOORD_3.y, 0.0));
    float _983 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
    float _993 = _322 / cbMtdParam._m0[23u].w;
    float _4349 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _994 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
    float _995 = _456 * 0.23999999463558197021484375;
    float _997 = _456 * (-0.20000000298023223876953125);
    float _1008 = cbMtdParam._m0[36u].z * TEXCOORD.x;
    float _1009 = cbMtdParam._m0[36u].w * TEXCOORD.y;
    vec4 _1018 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[36u].x * _425) + _995) + _1008) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[36u].y * _425) + _997) + _1009) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _1043 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((((_1008 + _995) + (cbMtdParam._m0[37u].x * _425)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_1009 + _997) + (cbMtdParam._m0[37u].y * _425)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _1061 = (((_501.x + (-0.5)) * 0.5) + _483.x) + (((_1018.x + (-1.0)) + _1043.x) * cbMtdParam._m0[25u].w);
    float _1062 = (((_501.y + (-0.5)) * 0.5) + _483.y) + (((_1018.y + (-1.0)) + _1043.y) * cbMtdParam._m0[25u].w);
    float _1067 = ((_570.x - _1061) * _994) + _1061;
    float _1068 = ((_570.y - _1062) * _994) + _1062;
    float _1070 = _322 / cbMtdParam._m0[23u].y;
    float _4360 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _1071 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
    float _1087 = ((((_983 * (0.5 - _450)) + _450) + (((_1067 + (-0.5)) + ((0.5 - _1067) * _1071)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1088 = ((((_983 * (0.5 - _451)) + _451) + (((_1068 + (-0.5)) + ((0.5 - _1068) * _1071)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1089 = dot(vec2(_1087, _1088), vec2(_1087, _1088));
    float _4371 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _1094 = sqrt(1.0 - (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))));
    float _1096 = cbMtdParam._m0[24u].w * _351;
    float _4382 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _1105 = cbMtdParam._m0[22u].w * _351;
    float _4393 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _1107 = (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * cbMtdParam._m0[27u].w;
    float _4404 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _1108 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
    float _1113 = ((cbMtdParam._m0[25u].x - cbMtdParam._m0[23u].x) * (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0)))) + cbMtdParam._m0[23u].x;
    float _1118 = _1087 - (_1113 * _1087);
    float _1119 = _1088 - (_1113 * _1088);
    float _1120 = (_1113 * (1.0 - _1094)) + _1094;
    float _1139 = fma(_1094, _240, fma(_1088, _247, _1087 * _233));
    float _1142 = fma(_1094, _241, fma(_1088, _248, _1087 * _234));
    float _1145 = fma(_1094, _242, fma(_1088, _249, _1087 * _235));
    float _1149 = inversesqrt(dot(vec3(_1139, _1142, _1145), vec3(_1139, _1142, _1145)));
    float _1150 = _1149 * _1139;
    float _1151 = _1149 * _1142;
    float _1152 = _1149 * _1145;
    float _1155 = fma(_1120, _240, fma(_1119, _247, _1118 * _233));
    float _1158 = fma(_1120, _241, fma(_1119, _248, _1118 * _234));
    float _1161 = fma(_1120, _242, fma(_1119, _249, _1118 * _235));
    float _1165 = inversesqrt(dot(vec3(_1155, _1158, _1161), vec3(_1155, _1158, _1161)));
    float _1166 = _1165 * _1155;
    float _1167 = _1165 * _1158;
    float _1168 = _1165 * _1161;
    float _4415 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _4426 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _1170 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
    float _4437 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _4448 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _4459 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _1187 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1227 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1236 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1227);
    float _1237 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1227);
    float _1238 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1227);
    float _1242 = inversesqrt(dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238)));
    float _1243 = _1236 * _1242;
    float _1244 = _1237 * _1242;
    float _1245 = _1238 * _1242;
    vec4 _1250 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1252 = _1250.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1452 = sqrt(((_1236 * _1236) + (_1237 * _1237)) + (_1238 * _1238));
        float _1458 = (cbMatDynParam._m0[5u].x * _1452) + cbMatDynParam._m0[5u].y;
        float _4470 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _1463 = (cbMatDynParam._m0[5u].z * _1452) + cbMatDynParam._m0[5u].w;
        float _4481 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) - _1459)) + _1459) < ((_1252 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1262 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1263 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1265 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1274 = (_1265.x * 2.0) + (-1.0);
    float _1275 = (_1265.y * 2.0) + (-1.0);
    float _1276 = (_1265.z * 2.0) + (-1.0);
    float _1280 = inversesqrt(dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276)));
    float _1291 = ((TEXCOORD.w >= 1.0) || (((TEXCOORD.z <= 0.0) || (TEXCOORD.z >= 1.0)) || (TEXCOORD.w <= 0.0))) ? 0.0 : _1265.w;
    float _1298 = (((_1274 * _1280) - _1150) * _1291) + _1150;
    float _1299 = (((_1275 * _1280) - _1151) * _1291) + _1151;
    float _1300 = (((_1276 * _1280) - _1152) * _1291) + _1152;
    float _1318 = fma(_1300, cbSceneParam._m0[5u].z, fma(_1299, cbSceneParam._m0[5u].y, _1298 * cbSceneParam._m0[5u].x));
    float _1321 = fma(_1300, cbSceneParam._m0[6u].z, fma(_1299, cbSceneParam._m0[6u].y, _1298 * cbSceneParam._m0[6u].x));
    float _1324 = fma(_1300, cbSceneParam._m0[7u].z, fma(_1299, cbSceneParam._m0[7u].y, _1298 * cbSceneParam._m0[7u].x));
    uint _1337 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1338 = _1337 + 9u;
    uint _1339 = _1338 + uint(cbMatDynParam._m0[0u].w);
    float _1345 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0)))) * cbInstanceData._m0[_1339].x;
    float _1346 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0)))) * cbInstanceData._m0[_1339].y;
    float _1347 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0)))) * cbInstanceData._m0[_1339].z;
    float _4492 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
    float _1348 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
    float _4503 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
    float _1349 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
    float _4514 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
    float _1350 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
    vec4 _1359 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1262, cbSceneParam._m0[86u].y * _1263));
    float _1362 = _1359.x * TEXCOORD_3.w;
    float _1366 = abs(dot(vec3(_1243, _1244, _1245), vec3(_1298, _1299, _1300)));
    float _4525 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
    float _1379 = dot(vec3(_1166, _1167, _1168), vec3(_1243, _1244, _1245)) * 2.0;
    float _1383 = (_1379 * _1166) - _1243;
    float _1384 = (_1379 * _1167) - _1244;
    float _1385 = (_1379 * _1168) - _1245;
    float _1389 = abs(dot(vec3(_1243, _1244, _1245), vec3(_1166, _1167, _1168)));
    float _4536 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
    float _1391 = sqrt(_1170);
    float _1403 = exp2((_1391 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1391 * 3.0));
    float _1434 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1438 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1442 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1766;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1495 = fma(_1442, cbModelParam._m0[26u].z, fma(_1438, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1434));
        float _1499 = fma(_1442, cbModelParam._m0[27u].z, fma(_1438, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1434));
        float _1503 = fma(_1442, cbModelParam._m0[28u].z, fma(_1438, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1434));
        float _1525 = _1434 + _1166;
        float _1526 = _1438 + _1167;
        float _1527 = _1442 + _1168;
        float _1537 = fma(_1527, cbModelParam._m0[26u].z, fma(_1526, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1525)) - _1495;
        float _1538 = fma(_1527, cbModelParam._m0[27u].z, fma(_1526, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1525)) - _1499;
        float _1539 = fma(_1527, cbModelParam._m0[28u].z, fma(_1526, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1525)) - _1503;
        float _1543 = inversesqrt(dot(vec3(_1537, _1538, _1539), vec3(_1537, _1538, _1539)));
        float _1555 = ((_1543 * _1537) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1495 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1556 = ((_1543 * _1538) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1499 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1557 = ((_1543 * _1539) / cbModelParam._m0[34u].z) + ((((((_1503 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1560 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1555, _1556, _1557), 0.0);
        vec4 _1567 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1555, _1556, _1557), 0.0);
        vec4 _1574 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1555, _1556, _1557), 0.0);
        vec4 _1581 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1555, _1556, _1557), 0.0);
        float _1594 = exp2((_1560.w + (-0.5)) * 20.0) * 2.0;
        float _1595 = _1594 * (_1560.x + (-0.5));
        float _1596 = _1594 * (_1560.y + (-0.5));
        float _1597 = _1594 * (_1560.z + (-0.5));
        float _1604 = exp2((_1567.w + (-0.5)) * 20.0) * 2.0;
        float _1605 = _1604 * (_1567.x + (-0.5));
        float _1606 = _1604 * (_1567.y + (-0.5));
        float _1607 = _1604 * (_1567.z + (-0.5));
        float _1614 = exp2((_1574.w + (-0.5)) * 20.0) * 2.0;
        float _1615 = _1614 * (_1574.x + (-0.5));
        float _1616 = _1614 * (_1574.y + (-0.5));
        float _1617 = _1614 * (_1574.z + (-0.5));
        float _1624 = exp2((_1581.w + (-0.5)) * 20.0) * 2.0;
        float _1625 = _1624 * (_1581.x + (-0.5));
        float _1626 = _1624 * (_1581.y + (-0.5));
        float _1627 = _1624 * (_1581.z + (-0.5));
        float _1628 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1629 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1630 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1631 = _1595 * 0.5;
        float _1632 = _1605 * 0.5;
        float _1633 = _1615 * 0.5;
        float _1634 = dot(vec3(_1631, _1632, _1633), vec3(_1631, _1632, _1633));
        float _1639 = (_1634 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1634);
        float _1648 = (dot(vec3(_1166, _1167, _1168), vec3(_1639 * _1631, _1639 * _1632, _1639 * _1633)) + 1.0) * 0.5;
        float _4562 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1658 = sqrt(((_1632 * _1632) + (_1631 * _1631)) + (_1633 * _1633)) / (_1628 + 9.9999997473787516355514526367188e-06);
        float _4573 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
        float _1660 = _1659 * 2.0;
        float _1664 = (1.0 - _1659) / (_1659 + 1.0);
        float _4584 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _1674 = ((((1.0 - _1665) * (_1660 + 2.0)) * exp2(log2(isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_1660 + 1.0))) + _1665) * _1628;
        float _1675 = _1596 * 0.5;
        float _1676 = _1606 * 0.5;
        float _1677 = _1616 * 0.5;
        float _1678 = dot(vec3(_1675, _1676, _1677), vec3(_1675, _1676, _1677));
        float _1683 = (_1678 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1678);
        float _1691 = (dot(vec3(_1166, _1167, _1168), vec3(_1683 * _1675, _1683 * _1676, _1683 * _1677)) + 1.0) * 0.5;
        float _4595 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1700 = sqrt(((_1676 * _1676) + (_1675 * _1675)) + (_1677 * _1677)) / (_1629 + 9.9999997473787516355514526367188e-06);
        float _4606 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        float _1702 = _1701 * 2.0;
        float _1706 = (1.0 - _1701) / (_1701 + 1.0);
        float _4617 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1707 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
        float _1716 = ((((1.0 - _1707) * (_1702 + 2.0)) * exp2(log2(isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_1702 + 1.0))) + _1707) * _1629;
        float _1717 = _1597 * 0.5;
        float _1718 = _1607 * 0.5;
        float _1719 = _1617 * 0.5;
        float _1720 = dot(vec3(_1717, _1718, _1719), vec3(_1717, _1718, _1719));
        float _1725 = (_1720 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1720);
        float _1733 = (dot(vec3(_1166, _1167, _1168), vec3(_1725 * _1717, _1725 * _1718, _1725 * _1719)) + 1.0) * 0.5;
        float _4628 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1742 = sqrt(((_1718 * _1718) + (_1717 * _1717)) + (_1719 * _1719)) / (_1630 + 9.9999997473787516355514526367188e-06);
        float _4639 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1743 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
        float _1744 = _1743 * 2.0;
        float _1748 = (1.0 - _1743) / (_1743 + 1.0);
        float _4650 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1749 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
        float _1758 = ((((1.0 - _1749) * (_1744 + 2.0)) * exp2(log2(isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (_1744 + 1.0))) + _1749) * _1630;
        _1766 = _1597;
        _1768 = _1596;
        _1769 = _1595;
        _1770 = _1607;
        _1771 = _1606;
        _1772 = _1605;
        _1773 = _1617;
        _1774 = _1616;
        _1775 = _1615;
        _1776 = _1630;
        _1777 = _1629;
        _1778 = _1628;
        _1779 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)));
        _1780 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)));
        _1781 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)));
    }
    else
    {
        _1766 = _1767;
        _1768 = _1767;
        _1769 = _1767;
        _1770 = _1767;
        _1771 = _1767;
        _1772 = _1767;
        _1773 = _1767;
        _1774 = _1767;
        _1775 = _1767;
        _1776 = _1767;
        _1777 = _1767;
        _1778 = _1767;
        _1779 = 0.0;
        _1780 = 0.0;
        _1781 = 0.0;
    }
    float _2074;
    float _2075;
    float _2076;
    float _2077;
    float _2078;
    float _2079;
    float _2080;
    float _2081;
    float _2082;
    float _2083;
    float _2084;
    float _2085;
    float _2086;
    float _2087;
    float _2088;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1807 = fma(_1442, cbModelParam._m0[30u].z, fma(_1438, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1434));
        float _1811 = fma(_1442, cbModelParam._m0[31u].z, fma(_1438, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1434));
        float _1815 = fma(_1442, cbModelParam._m0[32u].z, fma(_1438, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1434));
        float _1837 = _1434 + _1166;
        float _1838 = _1438 + _1167;
        float _1839 = _1442 + _1168;
        float _1849 = fma(_1839, cbModelParam._m0[30u].z, fma(_1838, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1837)) - _1807;
        float _1850 = fma(_1839, cbModelParam._m0[31u].z, fma(_1838, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1837)) - _1811;
        float _1851 = fma(_1839, cbModelParam._m0[32u].z, fma(_1838, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1837)) - _1815;
        float _1855 = inversesqrt(dot(vec3(_1849, _1850, _1851), vec3(_1849, _1850, _1851)));
        float _1867 = ((_1855 * _1849) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1807 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1868 = ((_1855 * _1850) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1811 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1869 = ((_1855 * _1851) / cbModelParam._m0[35u].z) + ((((((_1815 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1871 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1867, _1868, _1869), 0.0);
        vec4 _1878 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1867, _1868, _1869), 0.0);
        vec4 _1885 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1867, _1868, _1869), 0.0);
        vec4 _1892 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1867, _1868, _1869), 0.0);
        float _1904 = exp2((_1871.w + (-0.5)) * 20.0) * 2.0;
        float _1905 = _1904 * (_1871.x + (-0.5));
        float _1906 = _1904 * (_1871.y + (-0.5));
        float _1907 = _1904 * (_1871.z + (-0.5));
        float _1914 = exp2((_1878.w + (-0.5)) * 20.0) * 2.0;
        float _1915 = _1914 * (_1878.x + (-0.5));
        float _1916 = _1914 * (_1878.y + (-0.5));
        float _1917 = _1914 * (_1878.z + (-0.5));
        float _1924 = exp2((_1885.w + (-0.5)) * 20.0) * 2.0;
        float _1925 = _1924 * (_1885.x + (-0.5));
        float _1926 = _1924 * (_1885.y + (-0.5));
        float _1927 = _1924 * (_1885.z + (-0.5));
        float _1934 = exp2((_1892.w + (-0.5)) * 20.0) * 2.0;
        float _1935 = _1934 * (_1892.x + (-0.5));
        float _1936 = _1934 * (_1892.y + (-0.5));
        float _1937 = _1934 * (_1892.z + (-0.5));
        float _1938 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
        float _1939 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
        float _1940 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
        float _1941 = _1905 * 0.5;
        float _1942 = _1915 * 0.5;
        float _1943 = _1925 * 0.5;
        float _1944 = dot(vec3(_1941, _1942, _1943), vec3(_1941, _1942, _1943));
        float _1949 = (_1944 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1944);
        float _1957 = (dot(vec3(_1166, _1167, _1168), vec3(_1949 * _1941, _1949 * _1942, _1949 * _1943)) + 1.0) * 0.5;
        float _4691 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
        float _1966 = sqrt(((_1942 * _1942) + (_1941 * _1941)) + (_1943 * _1943)) / (_1938 + 9.9999997473787516355514526367188e-06);
        float _4702 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1967 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
        float _1968 = _1967 * 2.0;
        float _1972 = (1.0 - _1967) / (_1967 + 1.0);
        float _4713 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
        float _1973 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
        float _1982 = ((((1.0 - _1973) * (_1968 + 2.0)) * exp2(log2(isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * (_1968 + 1.0))) + _1973) * _1938;
        float _1983 = _1906 * 0.5;
        float _1984 = _1916 * 0.5;
        float _1985 = _1926 * 0.5;
        float _1986 = dot(vec3(_1983, _1984, _1985), vec3(_1983, _1984, _1985));
        float _1991 = (_1986 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1986);
        float _1999 = (dot(vec3(_1166, _1167, _1168), vec3(_1991 * _1983, _1991 * _1984, _1991 * _1985)) + 1.0) * 0.5;
        float _4724 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2008 = sqrt(((_1984 * _1984) + (_1983 * _1983)) + (_1985 * _1985)) / (_1939 + 9.9999997473787516355514526367188e-06);
        float _4735 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
        float _2009 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
        float _2010 = _2009 * 2.0;
        float _2014 = (1.0 - _2009) / (_2009 + 1.0);
        float _4746 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
        float _2015 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
        float _2024 = ((((1.0 - _2015) * (_2010 + 2.0)) * exp2(log2(isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (_2010 + 1.0))) + _2015) * _1939;
        float _2025 = _1907 * 0.5;
        float _2026 = _1917 * 0.5;
        float _2027 = _1927 * 0.5;
        float _2028 = dot(vec3(_2025, _2026, _2027), vec3(_2025, _2026, _2027));
        float _2033 = (_2028 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2028);
        float _2041 = (dot(vec3(_1166, _1167, _1168), vec3(_2033 * _2025, _2033 * _2026, _2033 * _2027)) + 1.0) * 0.5;
        float _4757 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
        float _2050 = sqrt(((_2026 * _2026) + (_2025 * _2025)) + (_2027 * _2027)) / (_1940 + 9.9999997473787516355514526367188e-06);
        float _4768 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
        float _2051 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
        float _2052 = _2051 * 2.0;
        float _2056 = (1.0 - _2051) / (_2051 + 1.0);
        float _4779 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
        float _2057 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
        float _2066 = ((((1.0 - _2057) * (_2052 + 2.0)) * exp2(log2(isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * (_2052 + 1.0))) + _2057) * _1940;
        _2074 = _1907;
        _2075 = _1906;
        _2076 = _1905;
        _2077 = _1917;
        _2078 = _1916;
        _2079 = _1915;
        _2080 = _1927;
        _2081 = _1926;
        _2082 = _1925;
        _2083 = _1940;
        _2084 = _1939;
        _2085 = _1938;
        _2086 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0)));
        _2087 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0)));
        _2088 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0)));
    }
    else
    {
        _2074 = _1767;
        _2075 = _1767;
        _2076 = _1767;
        _2077 = _1767;
        _2078 = _1767;
        _2079 = _1767;
        _2080 = _1767;
        _2081 = _1767;
        _2082 = _1767;
        _2083 = _1767;
        _2084 = _1767;
        _2085 = _1767;
        _2086 = 0.0;
        _2087 = 0.0;
        _2088 = 0.0;
    }
    float _2098 = (cbModelParam._m0[1u].x * (_2086 - _1779)) + _1779;
    float _2099 = (cbModelParam._m0[1u].x * (_2087 - _1780)) + _1780;
    float _2100 = (cbModelParam._m0[1u].x * (_2088 - _1781)) + _1781;
    float _2121 = fma(_2100, cbSceneParam._m0[89u].z, fma(_2099, cbSceneParam._m0[89u].y, _2098 * cbSceneParam._m0[89u].x));
    float _2124 = fma(_2100, cbSceneParam._m0[90u].z, fma(_2099, cbSceneParam._m0[90u].y, _2098 * cbSceneParam._m0[90u].x));
    float _2127 = fma(_2100, cbSceneParam._m0[91u].z, fma(_2099, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2098));
    float _2140 = _1383 * 0.5;
    float _2141 = _1384 * 0.5;
    float _2142 = _1385 * 0.5;
    float _2143 = dot(vec4(_2140, _2141, _2142, 1.0), vec4(_2076, _2079, _2082, _2085));
    float _2146 = dot(vec4(_2140, _2141, _2142, 1.0), vec4(_2075, _2078, _2081, _2084));
    float _2149 = dot(vec4(_2140, _2141, _2142, 1.0), vec4(_2074, _2077, _2080, _2083));
    float _2183;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2156 = dot(vec4(_2140, _2141, _2142, 1.0), vec4(_1766, _1770, _1773, _1776));
        float _2160 = dot(vec4(_2140, _2141, _2142, 1.0), vec4(_1768, _1771, _1774, _1777));
        float _2164 = dot(vec4(_2140, _2141, _2142, 1.0), vec4(_1769, _1772, _1775, _1778));
        float _2171 = dot(vec4(cbModelParam._m0[39u]), vec4(_2140, _2141, _2142, 1.0));
        _2183 = dot(vec3(isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0)), isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0)), isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2171) ? 0.0 : (isnan(0.0) ? _2171 : max(0.0, _2171))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2183 = 1.0;
    }
    float _2194;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2185 = dot(vec4(cbModelParam._m0[40u]), vec4(_2140, _2141, _2142, 1.0));
        _2194 = dot(vec3(isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0)), isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0)), isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2185) ? 0.0 : (isnan(0.0) ? _2185 : max(0.0, _2185))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2194 = 1.0;
    }
    float _2198 = (_2194 * cbModelParam._m0[1u].x) + (_2183 * (1.0 - cbModelParam._m0[1u].x));
    float _2208 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1170);
    float _2209 = isnan(_2208) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2208 : min(cbModelParam._m0[25u].z, _2208));
    float _2289;
    float _2291;
    float _2293;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2256 = fma(_1442, cbModelParam._m0[13u].z, fma(_1438, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1434)) + cbModelParam._m0[13u].w;
        float _2260 = fma(_1442, cbModelParam._m0[14u].z, fma(_1438, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1434)) + cbModelParam._m0[14u].w;
        float _2264 = fma(_1442, cbModelParam._m0[15u].z, fma(_1438, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1434)) + cbModelParam._m0[15u].w;
        float _2267 = fma(_1385, cbModelParam._m0[13u].z, fma(_1384, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1383));
        float _2270 = fma(_1385, cbModelParam._m0[14u].z, fma(_1384, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1383));
        float _2273 = fma(_1385, cbModelParam._m0[15u].z, fma(_1384, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1383));
        float _2301;
        if (_2267 > 0.0)
        {
            _2301 = abs((1.0 - _2256) / _2267);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2267 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2256 + 1.0) / _2267);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2301 = frontier_phi_17_15_ladder;
        }
        float _2713;
        if (_2270 > 0.0)
        {
            _2713 = abs((1.0 - _2260) / _2270);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2270 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2260 + 1.0) / _2270);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2713 = frontier_phi_26_22_ladder;
        }
        float _3213;
        if (_2273 > 0.0)
        {
            _3213 = abs((1.0 - _2264) / _2273);
        }
        else
        {
            float frontier_phi_40_33_ladder;
            if (_2273 < 0.0)
            {
                frontier_phi_40_33_ladder = abs((_2264 + 1.0) / _2273);
            }
            else
            {
                frontier_phi_40_33_ladder = 5000.0;
            }
            _3213 = frontier_phi_40_33_ladder;
        }
        float _3215 = isnan(_2713) ? _2301 : (isnan(_2301) ? _2713 : min(_2301, _2713));
        float _3216 = isnan(_3213) ? _3215 : (isnan(_3215) ? _3213 : min(_3215, _3213));
        float _3220 = (_3216 * _2267) + _2256;
        float _3221 = (_3216 * _2270) + _2260;
        float _3222 = (_3216 * _2273) + _2264;
        float _3223 = _3216 * 9.9999997473787516355514526367188e-05;
        float _3224 = (-1.0) - _3223;
        float _3226 = _3223 + 1.0;
        float frontier_phi_16_40_ladder;
        float frontier_phi_16_40_ladder_1;
        float frontier_phi_16_40_ladder_2;
        if ((_3222 > _3226) || ((_3222 < _3224) || ((_3221 > _3226) || ((_3221 < _3224) || ((_3220 < _3224) || (_3220 > _3226))))))
        {
            frontier_phi_16_40_ladder = 0.0;
            frontier_phi_16_40_ladder_1 = 0.0;
            frontier_phi_16_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3364 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_3222, cbModelParam._m0[9u].z, fma(_3221, cbModelParam._m0[9u].y, _3220 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_3222, cbModelParam._m0[10u].z, fma(_3221, cbModelParam._m0[10u].y, _3220 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_3222, cbModelParam._m0[11u].z, fma(_3221, cbModelParam._m0[11u].y, _3220 * cbModelParam._m0[11u].x))), _2209);
            frontier_phi_16_40_ladder = _3364.z * cbModelParam._m0[1u].y;
            frontier_phi_16_40_ladder_1 = _3364.y * cbModelParam._m0[1u].y;
            frontier_phi_16_40_ladder_2 = _3364.x * cbModelParam._m0[1u].y;
        }
        _2289 = frontier_phi_16_40_ladder_2;
        _2291 = frontier_phi_16_40_ladder_1;
        _2293 = frontier_phi_16_40_ladder;
    }
    else
    {
        vec4 _2277 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1383, _1384, _1385), _2209);
        _2289 = _2277.x * cbModelParam._m0[1u].y;
        _2291 = _2277.y * cbModelParam._m0[1u].y;
        _2293 = _2277.z * cbModelParam._m0[1u].y;
    }
    float _2297 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1170);
    float _2298 = isnan(_2297) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2297 : min(cbModelParam._m0[25u].w, _2297));
    float _2387;
    float _2389;
    float _2391;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2351 = fma(_1442, cbModelParam._m0[21u].z, fma(_1438, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1434)) + cbModelParam._m0[21u].w;
        float _2355 = fma(_1442, cbModelParam._m0[22u].z, fma(_1438, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1434)) + cbModelParam._m0[22u].w;
        float _2359 = fma(_1442, cbModelParam._m0[23u].z, fma(_1438, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1434)) + cbModelParam._m0[23u].w;
        float _2362 = fma(_1385, cbModelParam._m0[21u].z, fma(_1384, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1383));
        float _2365 = fma(_1385, cbModelParam._m0[22u].z, fma(_1384, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1383));
        float _2368 = fma(_1385, cbModelParam._m0[23u].z, fma(_1384, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1383));
        float _2718;
        if (_2362 > 0.0)
        {
            _2718 = abs((1.0 - _2351) / _2362);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2362 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2351 + 1.0) / _2362);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2718 = frontier_phi_28_24_ladder;
        }
        float _3239;
        if (_2365 > 0.0)
        {
            _3239 = abs((1.0 - _2355) / _2365);
        }
        else
        {
            float frontier_phi_42_35_ladder;
            if (_2365 < 0.0)
            {
                frontier_phi_42_35_ladder = abs((_2355 + 1.0) / _2365);
            }
            else
            {
                frontier_phi_42_35_ladder = 5000.0;
            }
            _3239 = frontier_phi_42_35_ladder;
        }
        float _3429;
        if (_2368 > 0.0)
        {
            _3429 = abs((1.0 - _2359) / _2368);
        }
        else
        {
            float frontier_phi_60_53_ladder;
            if (_2368 < 0.0)
            {
                frontier_phi_60_53_ladder = abs((_2359 + 1.0) / _2368);
            }
            else
            {
                frontier_phi_60_53_ladder = 5000.0;
            }
            _3429 = frontier_phi_60_53_ladder;
        }
        float _3431 = isnan(_3239) ? _2718 : (isnan(_2718) ? _3239 : min(_2718, _3239));
        float _3432 = isnan(_3429) ? _3431 : (isnan(_3431) ? _3429 : min(_3431, _3429));
        float _3436 = (_3432 * _2362) + _2351;
        float _3437 = (_3432 * _2365) + _2355;
        float _3438 = (_3432 * _2368) + _2359;
        float _3439 = _3432 * 9.9999997473787516355514526367188e-05;
        float _3440 = (-1.0) - _3439;
        float _3442 = _3439 + 1.0;
        float frontier_phi_25_60_ladder;
        float frontier_phi_25_60_ladder_1;
        float frontier_phi_25_60_ladder_2;
        if ((_3438 > _3442) || ((_3438 < _3440) || ((_3437 > _3442) || ((_3437 < _3440) || ((_3436 < _3440) || (_3436 > _3442))))))
        {
            frontier_phi_25_60_ladder = 0.0;
            frontier_phi_25_60_ladder_1 = 0.0;
            frontier_phi_25_60_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3680 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3438, cbModelParam._m0[17u].z, fma(_3437, cbModelParam._m0[17u].y, _3436 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3438, cbModelParam._m0[18u].z, fma(_3437, cbModelParam._m0[18u].y, _3436 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3438, cbModelParam._m0[19u].z, fma(_3437, cbModelParam._m0[19u].y, _3436 * cbModelParam._m0[19u].x))), _2298);
            frontier_phi_25_60_ladder = _3680.x * cbModelParam._m0[1u].z;
            frontier_phi_25_60_ladder_1 = _3680.z * cbModelParam._m0[1u].z;
            frontier_phi_25_60_ladder_2 = _3680.y * cbModelParam._m0[1u].z;
        }
        _2387 = frontier_phi_25_60_ladder;
        _2389 = frontier_phi_25_60_ladder_2;
        _2391 = frontier_phi_25_60_ladder_1;
    }
    else
    {
        vec4 _2371 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1383, _1384, _1385), _2298);
        _2387 = _2371.x * cbModelParam._m0[1u].z;
        _2389 = _2371.y * cbModelParam._m0[1u].z;
        _2391 = _2371.z * cbModelParam._m0[1u].z;
    }
    float _2403 = ((((1.0 - _1403) * ((_1391 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1403 * _1391)) * _1362;
    float _2404 = _2403 * ((cbModelParam._m0[1u].w * (_2387 - _2289)) + _2289);
    float _2405 = _2403 * ((cbModelParam._m0[1u].w * (_2389 - _2291)) + _2291);
    float _2406 = _2403 * ((cbModelParam._m0[1u].w * (_2391 - _2293)) + _2293);
    float _2409 = fma(_2406, cbSceneParam._m0[89u].z, fma(_2405, cbSceneParam._m0[89u].y, _2404 * cbSceneParam._m0[89u].x));
    float _2412 = fma(_2406, cbSceneParam._m0[90u].z, fma(_2405, cbSceneParam._m0[90u].y, _2404 * cbSceneParam._m0[90u].x));
    float _2415 = fma(_2406, cbSceneParam._m0[91u].z, fma(_2405, cbSceneParam._m0[91u].y, _2404 * cbSceneParam._m0[91u].x));
    float _2434 = (cbSceneParam._m0[88u].y * (1.0 - _1170)) + cbSceneParam._m0[88u].z;
    float _4905 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    vec4 _2438 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(_1262, _1263), (isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0))) * 5.0);
    float _2454 = 1.0 - _2438.w;
    vec4 _2462 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1262, _1263));
    float _2464 = _2462.w;
    float _2476 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2464);
    float _2477 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2464);
    float _2478 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2464);
    uvec4 _2482 = floatBitsToUint(cbInstanceData._m0[_1337 + 5u]);
    uint _2484 = _2482.x * 14u;
    uint _2485 = _2484 + 13u;
    float _2490 = _1362 + (-1.0);
    float _2493 = (cbLight._m0[_2485].x * _2490) + 1.0;
    float _2494 = (cbLight._m0[_2485].y * _2490) + 1.0;
    uint _2495 = _2484 + 5u;
    float _2501 = isnan(1.0) ? _2494 : (isnan(_2494) ? 1.0 : min(_2494, 1.0));
    uint _2505 = _2484 + 4u;
    float _2514 = isnan(1.0) ? _2493 : (isnan(_2493) ? 1.0 : min(_2493, 1.0));
    uint _2518 = _2484 | 1u;
    float _2529 = dot(vec3(cbLight._m0[_2484].xyz), vec3(_1298, _1299, _1300));
    float _2532 = dot(vec3(cbLight._m0[_2518].xyz), vec3(_1298, _1299, _1300));
    float _4926 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
    float _4937 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _2537 = (isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0))) * 0.3183098733425140380859375;
    float _2539 = (isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0))) * 0.3183098733425140380859375;
    float _2546 = ((cbLight._m0[_2495].x * _2501) * _2539) + (((cbLight._m0[_2505].x * _2476) * _2514) * _2537);
    float _2547 = ((_2501 * cbLight._m0[_2495].y) * _2539) + (((cbLight._m0[_2505].y * _2477) * _2514) * _2537);
    float _2548 = ((_2501 * cbLight._m0[_2495].z) * _2539) + (((cbLight._m0[_2505].z * _2478) * _2514) * _2537);
    uint _2550 = _2484 + 8u;
    float _2563 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2484].w)) * _1170) * 0.949999988079071044921875);
    float _2564 = _2563 * _2563;
    float _2565 = cbLight._m0[_2484].x + _1243;
    float _2566 = cbLight._m0[_2484].y + _1244;
    float _2567 = cbLight._m0[_2484].z + _1245;
    float _2571 = inversesqrt(dot(vec3(_2565, _2566, _2567), vec3(_2565, _2566, _2567)));
    float _2572 = _2571 * _2565;
    float _2573 = _2571 * _2566;
    float _2574 = _2571 * _2567;
    float _2575 = dot(vec3(_1298, _1299, _1300), vec3(cbLight._m0[_2484].xyz));
    float _4948 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
    float _2578 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
    float _2579 = dot(vec3(_1298, _1299, _1300), vec3(_1243, _1244, _1245));
    float _4959 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
    float _2582 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
    float _2583 = dot(vec3(_1298, _1299, _1300), vec3(_2572, _2573, _2574));
    float _4970 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _2586 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
    float _2587 = dot(vec3(cbLight._m0[_2484].xyz), vec3(_2572, _2573, _2574));
    float _4981 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
    float _2591 = _2564 * _2564;
    float _2595 = ((_2586 * _2586) * (_2591 + (-1.0))) + 1.0;
    float _2606 = (exp2(log2(1.0 - (isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2607 = 1.0 - _2564;
    float _2618 = (0.5 / (((_2582 * ((_2578 * _2607) + _2564)) + 9.9999999392252902907785028219223e-09) + (((_2582 * _2607) + _2564) * _2578))) * _2578;
    float _4992 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
    float _2620 = (isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0))) * (_2591 / ((_2595 * _2595) * 3.141590118408203125));
    uint _2634 = _2484 + 9u;
    float _2645 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2518].w)) * _1170) * 0.949999988079071044921875);
    float _2646 = _2645 * _2645;
    float _2647 = cbLight._m0[_2518].x + _1243;
    float _2648 = cbLight._m0[_2518].y + _1244;
    float _2649 = cbLight._m0[_2518].z + _1245;
    float _2653 = inversesqrt(dot(vec3(_2647, _2648, _2649), vec3(_2647, _2648, _2649)));
    float _2654 = _2653 * _2647;
    float _2655 = _2653 * _2648;
    float _2656 = _2653 * _2649;
    float _2657 = dot(vec3(_1298, _1299, _1300), vec3(cbLight._m0[_2518].xyz));
    float _5003 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
    float _2660 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
    float _2661 = dot(vec3(_1298, _1299, _1300), vec3(_2654, _2655, _2656));
    float _5014 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
    float _2664 = isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0));
    float _2665 = dot(vec3(cbLight._m0[_2518].xyz), vec3(_2654, _2655, _2656));
    float _5025 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
    float _2669 = _2646 * _2646;
    float _2673 = ((_2664 * _2664) * (_2669 + (-1.0))) + 1.0;
    float _2682 = (exp2(log2(1.0 - (isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2683 = 1.0 - _2646;
    float _2693 = (0.5 / (((_2582 * ((_2660 * _2683) + _2646)) + 9.9999999392252902907785028219223e-09) + (((_2582 * _2683) + _2646) * _2660))) * _2660;
    float _5036 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
    float _2695 = (isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0))) * (_2669 / ((_2673 * _2673) * 3.141590118408203125));
    float _2705 = (((_2682 * cbLight._m0[_2634].x) * _2695) * _2501) + ((((cbLight._m0[_2550].x * _2476) * _2606) * _2620) * _2514);
    float _2706 = (((_2682 * cbLight._m0[_2634].y) * _2695) * _2501) + ((((cbLight._m0[_2550].y * _2477) * _2606) * _2620) * _2514);
    float _2707 = (((_2682 * cbLight._m0[_2634].z) * _2695) * _2501) + ((((cbLight._m0[_2550].z * _2478) * _2606) * _2620) * _2514);
    float _2822;
    float _2824;
    float _2826;
    float _2828;
    float _2830;
    float _2832;
    if (_2482.y == 0u)
    {
        float _2762 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2763 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2762;
        float _2764 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2762;
        float _2765 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2762;
        uvec4 _2777 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2778 = _2777.x;
        uint _2789 = uint((float(_2777.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1263) / _2778))) + floor(float(uint(cbSceneParam._m0[85u].x * _1262) / _2778)));
        float _2799 = (log2(_2765 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2800 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
        uint _2803 = uint(isnan(14.0) ? _2800 : (isnan(_2800) ? 14.0 : min(_2800, 14.0)));
        uvec4 _2808 = texelFetch(g_lightClusterGridBuffer, int(((_2803 << 2u) + (_2789 << 6u)) >> 2u));
        uint _2809 = _2808.x;
        uint _2810 = _2777.z;
        float _3049;
        float _3051;
        float _3053;
        float _3055;
        float _3057;
        float _3059;
        if (((((1u << ((_2810 >> 4u) & 15u)) + 4294967295u) & _2809) == 0u) || ((_2810 & 240u) == 0u))
        {
            _3049 = 0.0;
            _3051 = 0.0;
            _3053 = 0.0;
            _3055 = 0.0;
            _3057 = 0.0;
            _3059 = 0.0;
        }
        else
        {
            float _3050;
            float _3052;
            float _3054;
            float _3056;
            float _3058;
            float _3060;
            float _3276 = 0.0;
            float _3277 = 0.0;
            float _3278 = 0.0;
            float _3279 = 0.0;
            float _3280 = 0.0;
            float _3281 = 0.0;
            uint _3282 = 0u;
            uint _3291;
            bool _3292;
            for (;;)
            {
                _3291 = texelFetch(g_lightClassification, int((((_2803 << 5u) + (_2789 << 9u)) + (_3282 << 2u)) >> 2u)).x;
                _3292 = _3291 == 0u;
                float frontier_phi_55_pred;
                float frontier_phi_55_pred_1;
                float frontier_phi_55_pred_2;
                float frontier_phi_55_pred_3;
                float frontier_phi_55_pred_4;
                float frontier_phi_55_pred_5;
                if (_3292)
                {
                    frontier_phi_55_pred = _3280;
                    frontier_phi_55_pred_1 = _3281;
                    frontier_phi_55_pred_2 = _3279;
                    frontier_phi_55_pred_3 = _3278;
                    frontier_phi_55_pred_4 = _3277;
                    frontier_phi_55_pred_5 = _3276;
                }
                else
                {
                    float _3472;
                    float _3473;
                    float _3474;
                    float _3475;
                    float _3476;
                    float _3477;
                    uint _3478;
                    _3472 = _3276;
                    _3473 = _3277;
                    _3474 = _3278;
                    _3475 = _3279;
                    _3476 = _3280;
                    _3477 = _3281;
                    _3478 = _3291;
                    float _3373;
                    float _3374;
                    float _3375;
                    float _3376;
                    float _3377;
                    float _3378;
                    for (;;)
                    {
                        uint _3482 = uint(findLSB(_3478)) + (_3282 << 5u);
                        uint _3479 = (_3478 + 4294967295u) & _3478;
                        uint _3484 = _3482 * 48u;
                        vec4 _3498 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3484)).x, texelFetch(g_PointLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3484 + 3u)).x));
                        uint _3504 = (_3482 * 48u) + 4u;
                        vec4 _3517 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3504)).x, texelFetch(g_PointLightRenderingBuffer, int(_3504 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3504 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3504 + 3u)).x));
                        uint _3523 = (_3482 * 48u) + 8u;
                        vec3 _3534 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3523)).x, texelFetch(g_PointLightRenderingBuffer, int(_3523 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3523 + 2u)).x));
                        float _3538 = _3498.x - _2763;
                        float _3539 = _3498.y - _2764;
                        float _3540 = _3498.z - _2765;
                        float _3541 = dot(vec3(_3538, _3539, _3540), vec3(_3538, _3539, _3540));
                        float _3544 = inversesqrt(_3541);
                        float _3545 = _3544 * _3538;
                        float _3546 = _3544 * _3539;
                        float _3547 = _3544 * _3540;
                        float _3548 = dot(vec3(_1318, _1321, _1324), vec3(_3545, _3546, _3547));
                        float _3553 = 1.0 - (_3541 * _3498.w);
                        float _5057 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                        float _3554 = isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0));
                        float _3555 = sqrt(_3541) * _3517.w;
                        float _3558 = 1.39999997615814208984375 / (_3555 + 1.39999997615814208984375);
                        float _3559 = _3558 * _3558;
                        float _3562 = ((1.0 - _3559) * _3548) + _3559;
                        float _3565 = _3555 * _3555;
                        float _3569 = ((isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0))) * _3554) / ((_3565 * 0.699999988079071044921875) + 1.0);
                        float _3573 = (-0.0) - _2763;
                        float _3574 = (-0.0) - _2764;
                        float _3575 = (-0.0) - _2765;
                        float _3579 = inversesqrt(dot(vec3(_3573, _3574, _3575), vec3(_3573, _3574, _3575)));
                        float _3580 = _3579 * _3573;
                        float _3581 = _3579 * _3574;
                        float _3582 = _3579 * _3575;
                        float _3590 = exp2(log2(1.0 / ((_3565 * 3.5) + 5.0)) * 0.25);
                        float _3591 = 1.0 - _1391;
                        float _3598 = sqrt(1.0 - ((1.0 - (_3591 * _3591)) * (1.0 - (_3590 * _3590))));
                        float _3599 = _3598 * _3598;
                        float _3600 = _3599 * _3599;
                        float _3601 = _3580 + _3545;
                        float _3602 = _3581 + _3546;
                        float _3603 = _3582 + _3547;
                        float _3607 = inversesqrt(dot(vec3(_3601, _3602, _3603), vec3(_3601, _3602, _3603)));
                        float _3611 = dot(vec3(_1318, _1321, _1324), vec3(_3580, _3581, _3582));
                        float _5073 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                        float _3614 = isnan(1.0) ? _5073 : (isnan(_5073) ? 1.0 : min(_5073, 1.0));
                        float _3615 = dot(vec3(_1318, _1321, _1324), vec3(_3607 * _3601, _3607 * _3602, _3607 * _3603));
                        float _5084 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                        float _3618 = isnan(1.0) ? _5084 : (isnan(_5084) ? 1.0 : min(_5084, 1.0));
                        float _3622 = ((_3618 * _3618) * (_3600 + (-1.0))) + 1.0;
                        float _3623 = _3558 * _3599;
                        float _3624 = _3623 * _3623;
                        float _3627 = ((1.0 - _3624) * _3548) + _3624;
                        float _5095 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                        float _3628 = isnan(1.0) ? _5095 : (isnan(_5095) ? 1.0 : min(_5095, 1.0));
                        float _3629 = 1.0 - _3599;
                        float _3639 = (0.5 / (((_3628 * ((_3614 * _3629) + _3599)) + 9.9999999392252902907785028219223e-09) + (((_3628 * _3629) + _3599) * _3614))) * _3628;
                        float _5106 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                        float _3650 = (((_3600 * 3.1415927410125732421875) * (isnan(1.0) ? _5106 : (isnan(_5106) ? 1.0 : min(_5106, 1.0)))) / ((_3622 * _3622) * ((_3565 * 2.1991131305694580078125) + 3.141590118408203125))) * _3554;
                        _3376 = (_3569 * _3517.x) + _3475;
                        _3377 = (_3569 * _3517.y) + _3476;
                        _3378 = (_3569 * _3517.z) + _3477;
                        _3373 = (_3650 * _3534.x) + _3472;
                        _3374 = (_3650 * _3534.y) + _3473;
                        _3375 = (_3650 * _3534.z) + _3474;
                        if (_3479 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3472 = _3373;
                            _3473 = _3374;
                            _3474 = _3375;
                            _3475 = _3376;
                            _3476 = _3377;
                            _3477 = _3378;
                            _3478 = _3479;
                        }
                    }
                    frontier_phi_55_pred = _3377;
                    frontier_phi_55_pred_1 = _3378;
                    frontier_phi_55_pred_2 = _3376;
                    frontier_phi_55_pred_3 = _3375;
                    frontier_phi_55_pred_4 = _3374;
                    frontier_phi_55_pred_5 = _3373;
                }
                _3058 = frontier_phi_55_pred;
                _3060 = frontier_phi_55_pred_1;
                _3056 = frontier_phi_55_pred_2;
                _3054 = frontier_phi_55_pred_3;
                _3052 = frontier_phi_55_pred_4;
                _3050 = frontier_phi_55_pred_5;
                uint _3283 = _3282 + 1u;
                if (_3283 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3276 = _3050;
                    _3277 = _3052;
                    _3278 = _3054;
                    _3279 = _3056;
                    _3280 = _3058;
                    _3281 = _3060;
                    _3282 = _3283;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3049 = _3050;
            _3051 = _3052;
            _3053 = _3054;
            _3055 = _3056;
            _3057 = _3058;
            _3059 = _3060;
        }
        uvec4 _3063 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3064 = _3063.z;
        uint _3066 = (_3064 >> 8u) & 15u;
        float _3244;
        float _3246;
        float _3248;
        float _3250;
        float _3252;
        float _3254;
        if (((4294967295u << _3066) & _2809) == 0u)
        {
            _3244 = _3049;
            _3246 = _3051;
            _3248 = _3053;
            _3250 = _3055;
            _3252 = _3057;
            _3254 = _3059;
        }
        else
        {
            float _3269 = inversesqrt(dot(vec3(_2763, _2764, _2765), vec3(_2763, _2764, _2765)));
            float _3270 = _3269 * _2763;
            float _3271 = _3269 * _2764;
            float _3272 = _3269 * _2765;
            float frontier_phi_44_45_ladder;
            float frontier_phi_44_45_ladder_1;
            float frontier_phi_44_45_ladder_2;
            float frontier_phi_44_45_ladder_3;
            float frontier_phi_44_45_ladder_4;
            float frontier_phi_44_45_ladder_5;
            if (_3066 < ((_3064 >> 12u) & 15u))
            {
                float _3245;
                float _3247;
                float _3249;
                float _3251;
                float _3253;
                float _3255;
                float _3455 = _3049;
                float _3456 = _3051;
                float _3457 = _3053;
                float _3458 = _3055;
                float _3459 = _3057;
                float _3460 = _3059;
                uint _3461 = _3066;
                uint _3470;
                bool _3471;
                for (;;)
                {
                    _3470 = texelFetch(g_lightClassification, int((((_2803 << 5u) + (_2789 << 9u)) + (_3461 << 2u)) >> 2u)).x;
                    _3471 = _3470 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3471)
                    {
                        frontier_phi_69_pred = _3460;
                        frontier_phi_69_pred_1 = _3459;
                        frontier_phi_69_pred_2 = _3458;
                        frontier_phi_69_pred_3 = _3457;
                        frontier_phi_69_pred_4 = _3456;
                        frontier_phi_69_pred_5 = _3455;
                    }
                    else
                    {
                        float _3685;
                        float _3686;
                        float _3687;
                        float _3688;
                        float _3689;
                        float _3690;
                        float _3978;
                        float _3979;
                        float _3980;
                        float _3981;
                        float _3982;
                        float _3983;
                        float _3698 = _3455;
                        float _3699 = _3456;
                        float _3700 = _3457;
                        float _3701 = _3458;
                        float _3702 = _3459;
                        float _3703 = _3460;
                        uint _3704 = _3470;
                        uint _3705;
                        vec4 _3730;
                        float _3731;
                        vec4 _3746;
                        vec3 _3758;
                        vec4 _3773;
                        vec4 _3788;
                        float _3834;
                        bool _3835;
                        for (;;)
                        {
                            uint _3715 = ((_3461 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3704));
                            _3705 = (_3704 + 4294967295u) & _3704;
                            uint _3717 = _3715 * 40u;
                            _3730 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3717)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 3u)).x));
                            _3731 = _3730.w;
                            uint _3733 = (_3715 * 40u) + 4u;
                            _3746 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3733)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 3u)).x));
                            uint _3748 = (_3715 * 40u) + 8u;
                            _3758 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3748)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 2u)).x));
                            uint _3760 = (_3715 * 40u) + 16u;
                            _3773 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3760)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3760 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3760 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3760 + 3u)).x));
                            uint _3775 = (_3715 * 40u) + 20u;
                            _3788 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3775)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3775 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3775 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3775 + 3u)).x));
                            uint _3790 = (_3715 * 40u) + 24u;
                            vec4 _3803 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3790)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3790 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3790 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3790 + 3u)).x));
                            uint _3809 = (_3715 * 40u) + 28u;
                            vec4 _3822 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3809)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3809 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3809 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3809 + 3u)).x));
                            _3834 = fma(_2765, _3822.z, fma(_2764, _3822.y, _3822.x * _2763)) + _3822.w;
                            _3835 = !((fma(_2765, _3803.z, fma(_2764, _3803.y, _3803.x * _2763)) + _3803.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3835)
                            {
                                float _3862 = _3730.x - _2763;
                                float _3863 = _3730.y - _2764;
                                float _3864 = _3730.z - _2765;
                                float _3865 = dot(vec3(_3862, _3863, _3864), vec3(_3862, _3863, _3864));
                                float _3868 = inversesqrt(_3865);
                                float _3869 = _3868 * _3862;
                                float _3870 = _3868 * _3863;
                                float _3871 = _3868 * _3864;
                                float _3875 = 1.0 - (_3865 / (_3731 * _3731));
                                float _5117 = isnan(0.0) ? _3875 : (isnan(_3875) ? 0.0 : max(_3875, 0.0));
                                float _3876 = isnan(1.0) ? _5117 : (isnan(_5117) ? 1.0 : min(_5117, 1.0));
                                float _3880 = sqrt(_3865) * _3746.w;
                                float _3882 = 1.39999997615814208984375 / (_3880 + 1.39999997615814208984375);
                                float _3883 = _3882 * _3882;
                                float _3886 = ((1.0 - _3883) * dot(vec3(_3869, _3870, _3871), vec3(_1318, _1321, _1324))) + _3883;
                                float _3889 = _3880 * _3880;
                                float _3893 = (fma(_2765, _3773.z, fma(_2764, _3773.y, _3773.x * _2763)) + _3773.w) / _3834;
                                float _3894 = (fma(_2765, _3788.z, fma(_2764, _3788.y, _3788.x * _2763)) + _3788.w) / _3834;
                                float _3898 = 1.0 - dot(vec2(_3893, _3894), vec2(_3893, _3894));
                                float _5133 = isnan(0.0) ? _3898 : (isnan(_3898) ? 0.0 : max(_3898, 0.0));
                                float _3899 = isnan(1.0) ? _5133 : (isnan(_5133) ? 1.0 : min(_5133, 1.0));
                                float _3900 = _3899 * (((isnan(0.0) ? _3886 : (isnan(_3886) ? 0.0 : max(_3886, 0.0))) * _3876) / ((_3889 * 0.699999988079071044921875) + 1.0));
                                float _3912 = exp2(log2(1.0 / ((_3889 * 3.5) + 5.0)) * 0.25);
                                float _3913 = 1.0 - _1391;
                                float _3920 = sqrt(1.0 - ((1.0 - (_3913 * _3913)) * (1.0 - (_3912 * _3912))));
                                float _3921 = _3920 * _3920;
                                float _3922 = _3921 * _3921;
                                float _3923 = _3869 - _3270;
                                float _3924 = _3870 - _3271;
                                float _3925 = _3871 - _3272;
                                float _3929 = inversesqrt(dot(vec3(_3923, _3924, _3925), vec3(_3923, _3924, _3925)));
                                float _3933 = dot(vec3(_1318, _1321, _1324), vec3((-0.0) - _3270, (-0.0) - _3271, (-0.0) - _3272));
                                float _5144 = isnan(0.0) ? _3933 : (isnan(_3933) ? 0.0 : max(_3933, 0.0));
                                float _3936 = isnan(1.0) ? _5144 : (isnan(_5144) ? 1.0 : min(_5144, 1.0));
                                float _3937 = dot(vec3(_1318, _1321, _1324), vec3(_3929 * _3923, _3929 * _3924, _3929 * _3925));
                                float _5155 = isnan(0.0) ? _3937 : (isnan(_3937) ? 0.0 : max(_3937, 0.0));
                                float _3940 = isnan(1.0) ? _5155 : (isnan(_5155) ? 1.0 : min(_5155, 1.0));
                                float _3944 = ((_3940 * _3940) * (_3922 + (-1.0))) + 1.0;
                                float _3945 = _3882 * _3921;
                                float _3946 = _3945 * _3945;
                                float _3952 = ((1.0 - _3946) * dot(vec3(_1318, _1321, _1324), vec3(_3869, _3870, _3871))) + _3946;
                                float _5166 = isnan(0.0) ? _3952 : (isnan(_3952) ? 0.0 : max(_3952, 0.0));
                                float _3953 = isnan(1.0) ? _5166 : (isnan(_5166) ? 1.0 : min(_5166, 1.0));
                                float _3954 = 1.0 - _3921;
                                float _3964 = (0.5 / (((_3953 * ((_3936 * _3954) + _3921)) + 9.9999999392252902907785028219223e-09) + (((_3953 * _3954) + _3921) * _3936))) * _3953;
                                float _5177 = isnan(0.0) ? _3964 : (isnan(_3964) ? 0.0 : max(_3964, 0.0));
                                float _3974 = (_3899 * _3876) * (((_3922 * 3.1415927410125732421875) * (isnan(1.0) ? _5177 : (isnan(_5177) ? 1.0 : min(_5177, 1.0)))) / ((_3944 * _3944) * ((_3889 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3900 * _3746.x;
                                frontier_phi_75_pred_1 = _3900 * _3746.z;
                                frontier_phi_75_pred_2 = _3900 * _3746.y;
                                frontier_phi_75_pred_3 = _3974 * _3758.z;
                                frontier_phi_75_pred_4 = _3974 * _3758.y;
                                frontier_phi_75_pred_5 = _3974 * _3758.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3981 = frontier_phi_75_pred;
                            _3983 = frontier_phi_75_pred_1;
                            _3982 = frontier_phi_75_pred_2;
                            _3980 = frontier_phi_75_pred_3;
                            _3979 = frontier_phi_75_pred_4;
                            _3978 = frontier_phi_75_pred_5;
                            _3688 = _3981 + _3701;
                            _3689 = _3982 + _3702;
                            _3690 = _3983 + _3703;
                            _3685 = _3978 + _3698;
                            _3686 = _3979 + _3699;
                            _3687 = _3980 + _3700;
                            if (_3705 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3698 = _3685;
                                _3699 = _3686;
                                _3700 = _3687;
                                _3701 = _3688;
                                _3702 = _3689;
                                _3703 = _3690;
                                _3704 = _3705;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3690;
                        frontier_phi_69_pred_1 = _3689;
                        frontier_phi_69_pred_2 = _3688;
                        frontier_phi_69_pred_3 = _3687;
                        frontier_phi_69_pred_4 = _3686;
                        frontier_phi_69_pred_5 = _3685;
                    }
                    _3255 = frontier_phi_69_pred;
                    _3253 = frontier_phi_69_pred_1;
                    _3251 = frontier_phi_69_pred_2;
                    _3249 = frontier_phi_69_pred_3;
                    _3247 = frontier_phi_69_pred_4;
                    _3245 = frontier_phi_69_pred_5;
                    uint _3462 = _3461 + 1u;
                    if (_3462 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3455 = _3245;
                        _3456 = _3247;
                        _3457 = _3249;
                        _3458 = _3251;
                        _3459 = _3253;
                        _3460 = _3255;
                        _3461 = _3462;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_44_45_ladder = _3247;
                frontier_phi_44_45_ladder_1 = _3255;
                frontier_phi_44_45_ladder_2 = _3253;
                frontier_phi_44_45_ladder_3 = _3251;
                frontier_phi_44_45_ladder_4 = _3249;
                frontier_phi_44_45_ladder_5 = _3245;
            }
            else
            {
                frontier_phi_44_45_ladder = _3051;
                frontier_phi_44_45_ladder_1 = _3059;
                frontier_phi_44_45_ladder_2 = _3057;
                frontier_phi_44_45_ladder_3 = _3055;
                frontier_phi_44_45_ladder_4 = _3053;
                frontier_phi_44_45_ladder_5 = _3049;
            }
            _3244 = frontier_phi_44_45_ladder_5;
            _3246 = frontier_phi_44_45_ladder;
            _3248 = frontier_phi_44_45_ladder_4;
            _3250 = frontier_phi_44_45_ladder_3;
            _3252 = frontier_phi_44_45_ladder_2;
            _3254 = frontier_phi_44_45_ladder_1;
        }
        float _3259 = isnan(1.0) ? _1362 : (isnan(_1362) ? 1.0 : min(_1362, 1.0));
        _2822 = (_3259 * _3250) + _2546;
        _2824 = (_3259 * _3252) + _2547;
        _2826 = (_3259 * _3254) + _2548;
        _2828 = ((_3244 * 0.039999999105930328369140625) * _3259) + _2705;
        _2830 = ((_3246 * 0.039999999105930328369140625) * _3259) + _2706;
        _2832 = ((_3248 * 0.039999999105930328369140625) * _3259) + _2707;
    }
    else
    {
        _2822 = _2546;
        _2824 = _2547;
        _2826 = _2548;
        _2828 = _2705;
        _2830 = _2706;
        _2832 = _2707;
    }
    uint _2838 = _1338 + uint(cbMatDynParam._m0[0u].w);
    float _2844 = cbInstanceData._m0[_2838].x * (_972 - (_972 * TEXCOORD_7.x));
    float _2845 = cbInstanceData._m0[_2838].y * (_974 - (_974 * TEXCOORD_7.y));
    float _2846 = cbInstanceData._m0[_2838].z * (_976 - (_976 * TEXCOORD_7.z));
    float _2865 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2866 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2867 = cbSceneParam._m0[86u].x * ((_1262 / cbSceneParam._m0[86u].x) + (((10.0 / (_1187 + 10.0)) * cbMtdParam._m0[20u].y) * dot(vec3(_1298, _1299, _1300), vec3(_233, _234, _235))));
    float _2868 = isnan(_2865) ? _2867 : (isnan(_2867) ? _2865 : min(_2867, _2865));
    float _2869 = isnan(_2866) ? _1263 : (isnan(_1263) ? _2866 : min(_1263, _2866));
    vec4 _2871 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2868, _2869), 0.0);
    float _2873 = _2871.x;
    bool _2893 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2873)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2873))) > _1187;
    float _2894 = _2893 ? _2868 : _1262;
    float _2895 = _2893 ? _2869 : _1263;
    vec4 _2897 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2894, _2895));
    vec4 _2902 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2894, _2895));
    float _2904 = _2902.x;
    float _2924 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2904)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2904))) - _1187;
    bool _2934 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2938 = (isnan(_2924) ? 0.0 : (isnan(0.0) ? _2924 : max(0.0, _2924))) * (-1.44269502162933349609375);
    float _5208 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
    float _5219 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
    float _5230 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
    float _2965 = 0.959999978542327880859375 - (exp2(log2(1.0 - (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0)))) * 5.0) * 0.959999978542327880859375);
    float _2968 = ((_2897.x * _2965) * exp2(_2938 * (_2934 ? 0.0 : (cbMtdParam._m0[39u].z + cbMtdParam._m0[38u].x)))) * cbSceneParam._m0[72u].w;
    float _2971 = ((_2897.y * _2965) * exp2(_2938 * (_2934 ? 0.0 : (cbMtdParam._m0[39u].w + cbMtdParam._m0[38u].y)))) * cbSceneParam._m0[72u].w;
    float _2974 = ((_2897.z * _2965) * exp2(_2938 * (_2934 ? 0.0 : (cbMtdParam._m0[40u].x + cbMtdParam._m0[38u].z)))) * cbSceneParam._m0[72u].w;
    float _2983 = ((_2844 + (((((_2403 * _2438.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0))) * _2198) * _2454)) + _2828) * cbPerFrame._m0[3u].x)) + _2968) + ((((isnan(1.0) ? _5208 : (isnan(_5208) ? 1.0 : min(_5208, 1.0))) * (_2822 + ((isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0))) * _1362))) - _2968) * _1108);
    float _2986 = ((_2845 + (((((_2403 * _2438.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0))) * _2198) * _2454)) + _2830) * cbPerFrame._m0[3u].x)) + _2971) + ((((isnan(1.0) ? _5219 : (isnan(_5219) ? 1.0 : min(_5219, 1.0))) * (_2824 + ((isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0))) * _1362))) - _2971) * _1108);
    float _2989 = ((_2846 + (((((_2403 * _2438.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0))) * _2198) * _2454)) + _2832) * cbPerFrame._m0[3u].x)) + _2974) + ((((isnan(1.0) ? _5230 : (isnan(_5230) ? 1.0 : min(_5230, 1.0))) * (_2826 + ((isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0))) * _1362))) - _2974) * _1108);
    float _2990 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
    float _2991 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
    float _2992 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
    float _2998 = cbMtdParam._m0[2u].x * _2844;
    float _2999 = cbMtdParam._m0[2u].y * _2845;
    float _3000 = cbMtdParam._m0[2u].z * _2846;
    float _5256 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3002 = isnan(1.0) ? _5256 : (isnan(_5256) ? 1.0 : min(_5256, 1.0));
    float _3007 = cbInstanceData._m0[_1337 + 6u].w * (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0)));
    float _3012 = _1262 / cbSceneParam._m0[86u].x;
    float _3013 = _1263 / cbSceneParam._m0[86u].y;
    vec4 _3027 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3012, _3013, (log2((isnan(cbSceneParam._m0[77u].w) ? _1187 : (isnan(_1187) ? cbSceneParam._m0[77u].w : min(_1187, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3029 = _3027.x;
    float _3030 = _3027.y;
    float _3031 = _3027.z;
    float _3032 = _3027.w;
    float _3111;
    float _3113;
    float _3115;
    float _3117;
    if (_1187 > cbSceneParam._m0[78u].w)
    {
        float _3074 = isnan(_1187) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1187 : min(cbSceneParam._m0[80u].w, _1187));
        float _3075 = _3074 / _1187;
        float _3086 = _3075 * _1236;
        float _3087 = _1237 * _3075;
        float _3088 = (-0.0) - _3087;
        float _3089 = _3075 * _1238;
        float _3091 = (cbSceneParam._m0[77u].w * _3088) / _3074;
        float _3092 = _3091 + cbSceneParam._m0[79u].w;
        float _3093 = cbSceneParam._m0[79u].w - _3087;
        float _3099 = sqrt(((_3086 * _3086) + (_3087 * _3087)) + (_3089 * _3089));
        float _3102 = (1.0 - (cbSceneParam._m0[77u].w / _3074)) * _3099;
        float _3108 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3109 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3386;
        if (abs((_3088 - _3091) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3386 = ((((_3092 > 0.0) ? exp2(_3108 * _3092) : (2.0 - exp2(_3109 * _3092))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3102;
        }
        else
        {
            float _3305 = 1.0 / cbSceneParam._m0[80u].x;
            float _3306 = isnan(_3093) ? _3092 : (isnan(_3092) ? _3093 : max(_3092, _3093));
            float _3307 = isnan(_3093) ? _3092 : (isnan(_3092) ? _3093 : min(_3092, _3093));
            float _3316 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : min(_3306, 0.0));
            float _3317 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : min(_3307, 0.0));
            _3386 = ((abs(_3099 / _3088) * cbSceneParam._m0[80u].y) * ((((_3316 - _3317) * 2.0) - ((exp2(_3108 * (isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0)))) - exp2(_3108 * (isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0))))) * _3305)) - ((exp2(_3109 * _3316) - exp2(_3109 * _3317)) * _3305))) + (_3102 * cbSceneParam._m0[80u].z);
        }
        vec4 _3388 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3012, _3013, 1.0), 0.0);
        float _3397 = exp2((_3386 * (-1.44269502162933349609375)) * (1.0 - _3388.w));
        float _3398 = log2(_3397);
        float _3414 = log2(_3032);
        _3111 = (exp2(_3414 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3398 * cbSceneParam._m0[78u].x)) * _3388.x) / cbSceneParam._m0[78u].x)) + _3029;
        _3113 = (exp2(_3414 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3398 * cbSceneParam._m0[78u].y)) * _3388.y) / cbSceneParam._m0[78u].y)) + _3030;
        _3115 = (exp2(_3414 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3398 * cbSceneParam._m0[78u].z)) * _3388.z) / cbSceneParam._m0[78u].z)) + _3031;
        _3117 = _3397 * _3032;
    }
    else
    {
        _3111 = _3029;
        _3113 = _3030;
        _3115 = _3031;
        _3117 = _3032;
    }
    bool _3424;
    float _3172;
    vec4 _3175;
    float _3177;
    vec4 _3179;
    float _3187;
    float _3188;
    float _3189;
    float _3193;
    float _3197;
    float _3201;
    float _3202;
    bool _3212;
    for (;;)
    {
        bool _3129 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _3130 = log2(_3117);
        float _3134 = exp2(_3130 * cbSceneParam._m0[78u].x);
        float _3135 = exp2(_3130 * cbSceneParam._m0[78u].y);
        float _3136 = exp2(_3130 * cbSceneParam._m0[78u].z);
        float _3137 = _3134 * _2990;
        float _3138 = _3135 * _2991;
        float _3139 = _3136 * _2992;
        vec4 _3147 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_1262, _1263));
        float _3149 = _3147.x;
        float _3170 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3149)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3149))) - _1187) * cbMtdParam._m0[24u].y;
        float _5307 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
        float _3171 = isnan(1.0) ? _5307 : (isnan(_5307) ? 1.0 : min(_5307, 1.0));
        _3172 = _3007 * _3171;
        float _3173 = _1252 + (-0.5);
        _3175 = cbMtdParam._m0[1u];
        _3177 = _3175.y * _3173;
        _3179 = cbMatDynParam._m0[0u];
        float _3186 = (roundEven(_3179.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3187 = _3186 * (_3129 ? _3137 : (_3137 + (cbSceneParam._m0[72u].w * _3111)));
        _3188 = _3186 * (_3129 ? _3138 : (_3138 + (cbSceneParam._m0[72u].w * _3113)));
        _3189 = _3186 * (_3129 ? _3139 : (_3139 + (cbSceneParam._m0[72u].w * _3115)));
        _3193 = (((_2998 * _3002) * _3134) * _3171) * _3186;
        _3197 = (((_2999 * _3002) * _3135) * _3171) * _3186;
        _3201 = (((_3000 * _3002) * _3136) * _3171) * _3186;
        _3202 = _3173 * 0.999000012874603271484375;
        _3212 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3212)
        {
            if ((cbInstanceData._m0[_1337 + 7u].x + _3202) < 0.5)
            {
                _3424 = true;
                break;
            }
        }
        uint _3340 = _1338 + uint(_3179.w);
        if ((cbInstanceData._m0[_3340].w < 1.0) && ((cbInstanceData._m0[_3340].w + _3202) < 0.5))
        {
            _3424 = true;
            break;
        }
        if ((_3177 + 1.0) < _3175.x)
        {
            _3424 = true;
            break;
        }
        _3424 = false;
        break;
    }
    float _3655;
    if (_3424)
    {
        discard_state = true;
        _3655 = 0.0;
    }
    else
    {
        _3655 = _3172;
    }
    SV_Target.x = _3187;
    SV_Target.y = _3188;
    SV_Target.z = _3189;
    SV_Target.w = _3655;
    SV_Target_1.x = _3193;
    SV_Target_1.y = _3197;
    SV_Target_1.z = _3201;
    SV_Target_1.w = _3172;
    discard_exit();
}


