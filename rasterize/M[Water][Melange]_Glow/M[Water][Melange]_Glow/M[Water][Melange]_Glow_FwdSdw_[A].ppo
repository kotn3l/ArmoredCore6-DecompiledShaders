#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[42];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 7) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 7) in float TEXCOORD_12;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1769;
float _4371;
float _4372;
float _4373;
float _4374;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _235 = _234 * _226;
    float _236 = _234 * _227;
    float _237 = _234 * _228;
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = _241 * NORMAL.x;
    float _243 = _241 * NORMAL.y;
    float _244 = _241 * NORMAL.z;
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249 = _248 * TANGENT.x;
    float _250 = _248 * TANGENT.y;
    float _251 = _248 * TANGENT.z;
    float _295 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _305 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _295);
    float _306 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _295);
    float _307 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _295);
    float _322 = cbMtdParam._m0[22u].x - cbMtdParam._m0[21u].w;
    float _324 = (sqrt(((_305 * _305) + (_306 * _306)) + (_307 * _307)) - cbMtdParam._m0[21u].w) / (isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0)));
    float _328 = _324 / cbMtdParam._m0[23u].z;
    float _329 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _330 = isnan(8.0) ? _329 : (isnan(_329) ? 8.0 : min(_329, 8.0));
    float _337 = cbMtdParam._m0[10u].x * _330;
    float _338 = cbMtdParam._m0[10u].y * _330;
    float _339 = cbMtdParam._m0[10u].z * _330;
    float _340 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _341 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _342 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _353 = cbMtdParam._m0[22u].y + _324;
    float _358 = _353 * cbMtdParam._m0[24u].z;
    float _4428 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    vec4 _376 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _379 = _376.x;
    float _403 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _379)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _379))) - POSITION_1.w) / cbMtdParam._m0[21u].x;
    float _4439 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _404 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
    float _409 = 1.0 - (isnan(cbMtdParam._m0[26u].y) ? _404 : (isnan(_404) ? cbMtdParam._m0[26u].y : max(_404, cbMtdParam._m0[26u].y)));
    float _411 = (cbMtdParam._m0[26u].x + TEXCOORD_3.x) - (_409 * cbMtdParam._m0[21u].z);
    float _427 = (cbMtdParam._m0[29u].y + cbPerFrame._m0[22u].x) * cbMtdParam._m0[20u].z;
    float _435 = cbMtdParam._m0[34u].z * TEXCOORD.x;
    float _436 = cbMtdParam._m0[34u].w * TEXCOORD.y;
    vec4 _450 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_2, SS_BumpMap), vec2((((_427 * cbMtdParam._m0[35u].x) + _435) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_436 + (_427 * cbMtdParam._m0[35u].y)) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _452 = _450.x;
    float _453 = _450.y;
    float _4455 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _456 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
    float _457 = _450.z - _456;
    float _4466 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _458 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
    float _470 = (_458 * 0.00999999977648258209228515625) + TEXCOORD.x;
    float _472 = (_458 * (-0.00999999977648258209228515625)) + TEXCOORD.y;
    vec4 _485 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2(((_470 + (cbMtdParam._m0[31u].x * _427)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_472 + (cbMtdParam._m0[31u].y * _427)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _489 = _485.z;
    vec4 _503 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2(((_470 + (cbMtdParam._m0[30u].z * _427)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_472 + (cbMtdParam._m0[30u].w * _427)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _507 = _503.z;
    float _510 = (_409 - _450.w) + (isnan(_507) ? _489 : (isnan(_489) ? _507 : max(_489, _507)));
    float _4482 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _512 = (_411 * (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0)))) * (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0)));
    float _514 = _512 - (_512 * TEXCOORD_7.w);
    float _527 = (_514 + cbMtdParam._m0[9u].x) + (cbMtdParam._m0[16u].x * _458);
    float _528 = (_514 + cbMtdParam._m0[9u].y) + (cbMtdParam._m0[16u].y * _458);
    float _529 = (_514 + cbMtdParam._m0[9u].z) + (cbMtdParam._m0[16u].z * _458);
    vec4 _572 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * ((fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / cbMtdParam._m0[22u].z) + (cbMtdParam._m0[35u].z * _427))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * ((fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / cbMtdParam._m0[22u].z) + (cbMtdParam._m0[35u].w * _427))) + cbTextureTilingScale._m0[1u].w));
    float _577 = _572.z * 0.099999986588954925537109375;
    float _4493 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _579 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
    float _583 = cbMtdParam._m0[24u].x * _324;
    float _4504 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _584 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
    float _598 = (_527 + (isnan(0.07999999821186065673828125) ? _340 : (isnan(_340) ? 0.07999999821186065673828125 : min(_340, 0.07999999821186065673828125)))) + (_584 * (((1.0 - _527) - _579) + _577));
    float _600 = (_528 + (isnan(0.07999999821186065673828125) ? _341 : (isnan(_341) ? 0.07999999821186065673828125 : min(_341, 0.07999999821186065673828125)))) + (_584 * (((1.0 - _528) - _579) + _577));
    float _602 = (_529 + (isnan(0.07999999821186065673828125) ? _342 : (isnan(_342) ? 0.07999999821186065673828125 : min(_342, 0.07999999821186065673828125)))) + (_584 * (((1.0 - _529) + _577) - _579));
    float _4515 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _603 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
    float _4526 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _604 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
    float _4537 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _605 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
    float _610 = _324 / cbMtdParam._m0[25u].z;
    float _4548 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _613 = (1.0 - (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0)))) * cbMtdParam._m0[25u].y;
    float _620 = ((cbMtdParam._m0[21u].y - cbMtdParam._m0[20u].x) * _456) + cbMtdParam._m0[20u].x;
    float _643 = (POSITION_1.w - cbMtdParam._m0[28u].w) * (1.0 / cbMtdParam._m0[28u].z);
    float _4559 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _644 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
    float _658 = (cbMtdParam._m0[33u].z * _427) + _435;
    float _659 = (cbMtdParam._m0[33u].w * _427) + _436;
    vec4 _682 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * ((cbMtdParam._m0[33u].x * _427) + _435)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((cbMtdParam._m0[33u].y * _427) + _436)) + cbTextureTilingScale._m0[3u].w));
    float _689 = (_682.x * 2.0) + (-1.0);
    float _691 = (_682.y * 2.0) + (-1.0);
    float _695 = 1.0 - dot(vec2(_689, _691), vec2(_689, _691));
    float _4570 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _697 = sqrt(isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0)));
    float _700 = fma(_697, _242, fma(_691, _249, _689 * _235));
    float _703 = fma(_697, _243, fma(_691, _250, _689 * _236));
    float _706 = fma(_697, _244, fma(_691, _251, _689 * _237));
    float _710 = inversesqrt(dot(vec3(_700, _703, _706), vec3(_700, _703, _706)));
    float _711 = cbPerFrame._m0[22u].x * 2.0;
    float _712 = _711 * cbMtdParam._m0[27u].y;
    float _716 = ((_700 * 0.5) * _710) + (-0.25);
    float _720 = ((_703 * 0.5) * _710) + (-0.25);
    float _721 = _720 * cbMtdParam._m0[27u].z;
    float _723 = (-0.0) - (cbMtdParam._m0[27u].z * _716);
    float _724 = fract(_712);
    float _726 = fract(_712 + 0.5);
    float _737 = abs((_724 * 2.0) + (-1.0));
    vec4 _754 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_724 * _723) + _658) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_721 * _724) + _659) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    vec4 _759 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_726 * _723) + _658) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_721 * _726) + _659) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _770 = ((_759.x - _754.x) * _737) + _754.x;
    float _771 = ((_759.y - _754.y) * _737) + _754.y;
    float _772 = ((_759.z - _754.z) * _737) + _754.z;
    float _789 = (cbMtdParam._m0[32u].z * _427) + _435;
    float _790 = (cbMtdParam._m0[32u].w * _427) + _436;
    float _793 = _711 * cbMtdParam._m0[27u].x;
    float _794 = _720 * cbMtdParam._m0[26u].w;
    float _796 = (-0.0) - (cbMtdParam._m0[26u].w * _716);
    float _797 = fract(_793);
    float _799 = fract(_793 + 0.5);
    float _810 = abs((_797 * 2.0) + (-1.0));
    vec4 _827 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_797 * _796) + _789) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_794 * _797) + _790) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _829 = _827.x;
    float _830 = _827.y;
    float _831 = _827.z;
    vec4 _832 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_799 * _796) + _789) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_794 * _799) + _790) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _863 = (((((cbMtdParam._m0[17u].x - cbMtdParam._m0[19u].x) * _770) * cbMtdParam._m0[29u].z) + cbMtdParam._m0[19u].x) * (((_832.x - _829) * _810) + _829)) + (_770 * cbMtdParam._m0[18u].x);
    float _866 = (((((cbMtdParam._m0[17u].y - cbMtdParam._m0[19u].y) * _771) * cbMtdParam._m0[29u].z) + cbMtdParam._m0[19u].y) * (((_832.y - _830) * _810) + _830)) + (_771 * cbMtdParam._m0[18u].y);
    float _869 = ((((cbMtdParam._m0[29u].z * _772) * (cbMtdParam._m0[17u].z - cbMtdParam._m0[19u].z)) + cbMtdParam._m0[19u].z) * (((_832.z - _831) * _810) + _831)) + (_772 * cbMtdParam._m0[18u].z);
    float _873 = _863 - (_863 * _644);
    float _874 = _866 - (_866 * _644);
    float _875 = _869 - (_869 * _644);
    float _880 = (POSITION_1.w - cbMtdParam._m0[28u].y) * (1.0 / cbMtdParam._m0[28u].x);
    float _4581 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _881 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
    float _891 = (cbMtdParam._m0[34u].x * _427) + _435;
    float _892 = (cbMtdParam._m0[34u].y * _427) + _436;
    vec4 _905 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((_891 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_892 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _907 = _905.x;
    float _908 = _905.y;
    float _909 = _905.z;
    vec4 _931 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * _891) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _892) + cbTextureTilingScale._m0[7u].w));
    float _974 = (cbMtdParam._m0[29u].x * cbMtdParam._m0[15u].x) * ((_873 + (cbMtdParam._m0[14u].x * _514)) + ((((_907 * cbMtdParam._m0[11u].x) - _873) + (((((cbMtdParam._m0[13u].x - cbMtdParam._m0[12u].x) * _907) * cbMtdParam._m0[29u].w) + cbMtdParam._m0[12u].x) * _931.x)) * _881));
    float _976 = (cbMtdParam._m0[29u].x * cbMtdParam._m0[15u].y) * ((_874 + (cbMtdParam._m0[14u].y * _514)) + ((((_908 * cbMtdParam._m0[11u].y) - _874) + (((((cbMtdParam._m0[13u].y - cbMtdParam._m0[12u].y) * _908) * cbMtdParam._m0[29u].w) + cbMtdParam._m0[12u].y) * _931.y)) * _881));
    float _978 = (cbMtdParam._m0[29u].x * cbMtdParam._m0[15u].z) * ((_875 + (cbMtdParam._m0[14u].z * _514)) + ((((_909 * cbMtdParam._m0[11u].z) - _875) + ((((cbMtdParam._m0[29u].w * _909) * (cbMtdParam._m0[13u].z - cbMtdParam._m0[12u].z)) + cbMtdParam._m0[12u].z) * _931.z)) * _881));
    float _4592 = isnan(0.0) ? TEXCOORD_3.y : (isnan(TEXCOORD_3.y) ? 0.0 : max(TEXCOORD_3.y, 0.0));
    float _985 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
    float _995 = _324 / cbMtdParam._m0[23u].w;
    float _4603 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _996 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
    float _997 = _458 * 0.23999999463558197021484375;
    float _999 = _458 * (-0.20000000298023223876953125);
    float _1010 = cbMtdParam._m0[36u].z * TEXCOORD.x;
    float _1011 = cbMtdParam._m0[36u].w * TEXCOORD.y;
    vec4 _1020 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[36u].x * _427) + _997) + _1010) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[36u].y * _427) + _999) + _1011) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _1045 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((((_1010 + _997) + (cbMtdParam._m0[37u].x * _427)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_1011 + _999) + (cbMtdParam._m0[37u].y * _427)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _1063 = (((_503.x + (-0.5)) * 0.5) + _485.x) + (((_1020.x + (-1.0)) + _1045.x) * cbMtdParam._m0[25u].w);
    float _1064 = (((_503.y + (-0.5)) * 0.5) + _485.y) + (((_1020.y + (-1.0)) + _1045.y) * cbMtdParam._m0[25u].w);
    float _1069 = ((_572.x - _1063) * _996) + _1063;
    float _1070 = ((_572.y - _1064) * _996) + _1064;
    float _1072 = _324 / cbMtdParam._m0[23u].y;
    float _4614 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _1073 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
    float _1089 = ((((_985 * (0.5 - _452)) + _452) + (((_1069 + (-0.5)) + ((0.5 - _1069) * _1073)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1090 = ((((_985 * (0.5 - _453)) + _453) + (((_1070 + (-0.5)) + ((0.5 - _1070) * _1073)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1091 = dot(vec2(_1089, _1090), vec2(_1089, _1090));
    float _4625 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _1096 = sqrt(1.0 - (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))));
    float _1098 = cbMtdParam._m0[24u].w * _353;
    float _4636 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _1107 = cbMtdParam._m0[22u].w * _353;
    float _4647 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _1109 = (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * cbMtdParam._m0[27u].w;
    float _4658 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _1110 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
    float _1115 = ((cbMtdParam._m0[25u].x - cbMtdParam._m0[23u].x) * (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0)))) + cbMtdParam._m0[23u].x;
    float _1120 = _1089 - (_1115 * _1089);
    float _1121 = _1090 - (_1115 * _1090);
    float _1122 = (_1115 * (1.0 - _1096)) + _1096;
    float _1141 = fma(_1096, _242, fma(_1090, _249, _1089 * _235));
    float _1144 = fma(_1096, _243, fma(_1090, _250, _1089 * _236));
    float _1147 = fma(_1096, _244, fma(_1090, _251, _1089 * _237));
    float _1151 = inversesqrt(dot(vec3(_1141, _1144, _1147), vec3(_1141, _1144, _1147)));
    float _1152 = _1151 * _1141;
    float _1153 = _1151 * _1144;
    float _1154 = _1151 * _1147;
    float _1157 = fma(_1122, _242, fma(_1121, _249, _1120 * _235));
    float _1160 = fma(_1122, _243, fma(_1121, _250, _1120 * _236));
    float _1163 = fma(_1122, _244, fma(_1121, _251, _1120 * _237));
    float _1167 = inversesqrt(dot(vec3(_1157, _1160, _1163), vec3(_1157, _1160, _1163)));
    float _1168 = _1167 * _1157;
    float _1169 = _1167 * _1160;
    float _1170 = _1167 * _1163;
    float _4669 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _4680 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _1172 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
    float _4691 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _4702 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _4713 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _1189 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1229 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1238 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1229);
    float _1239 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1229);
    float _1240 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1229);
    float _1244 = inversesqrt(dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240)));
    float _1245 = _1238 * _1244;
    float _1246 = _1239 * _1244;
    float _1247 = _1240 * _1244;
    vec4 _1252 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1254 = _1252.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1454 = sqrt(((_1238 * _1238) + (_1239 * _1239)) + (_1240 * _1240));
        float _1460 = (cbMatDynParam._m0[5u].x * _1454) + cbMatDynParam._m0[5u].y;
        float _4724 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
        float _1465 = (cbMatDynParam._m0[5u].z * _1454) + cbMatDynParam._m0[5u].w;
        float _4735 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) - _1461)) + _1461) < ((_1254 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1264 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1265 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1267 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1276 = (_1267.x * 2.0) + (-1.0);
    float _1277 = (_1267.y * 2.0) + (-1.0);
    float _1278 = (_1267.z * 2.0) + (-1.0);
    float _1282 = inversesqrt(dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278)));
    float _1293 = ((TEXCOORD.w >= 1.0) || (((TEXCOORD.z <= 0.0) || (TEXCOORD.z >= 1.0)) || (TEXCOORD.w <= 0.0))) ? 0.0 : _1267.w;
    float _1300 = (((_1276 * _1282) - _1152) * _1293) + _1152;
    float _1301 = (((_1277 * _1282) - _1153) * _1293) + _1153;
    float _1302 = (((_1278 * _1282) - _1154) * _1293) + _1154;
    float _1320 = fma(_1302, cbSceneParam._m0[5u].z, fma(_1301, cbSceneParam._m0[5u].y, _1300 * cbSceneParam._m0[5u].x));
    float _1323 = fma(_1302, cbSceneParam._m0[6u].z, fma(_1301, cbSceneParam._m0[6u].y, _1300 * cbSceneParam._m0[6u].x));
    float _1326 = fma(_1302, cbSceneParam._m0[7u].z, fma(_1301, cbSceneParam._m0[7u].y, _1300 * cbSceneParam._m0[7u].x));
    uint _1339 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1340 = _1339 + 9u;
    uint _1341 = _1340 + uint(cbMatDynParam._m0[0u].w);
    float _1347 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0)))) * cbInstanceData._m0[_1341].x;
    float _1348 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0)))) * cbInstanceData._m0[_1341].y;
    float _1349 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0)))) * cbInstanceData._m0[_1341].z;
    float _4746 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
    float _1350 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
    float _4757 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
    float _1351 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
    float _4768 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
    float _1352 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
    vec4 _1361 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1264, cbSceneParam._m0[86u].y * _1265));
    float _1364 = _1361.x * TEXCOORD_3.w;
    float _1368 = abs(dot(vec3(_1245, _1246, _1247), vec3(_1300, _1301, _1302)));
    float _4779 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
    float _1381 = dot(vec3(_1168, _1169, _1170), vec3(_1245, _1246, _1247)) * 2.0;
    float _1385 = (_1381 * _1168) - _1245;
    float _1386 = (_1381 * _1169) - _1246;
    float _1387 = (_1381 * _1170) - _1247;
    float _1391 = abs(dot(vec3(_1245, _1246, _1247), vec3(_1168, _1169, _1170)));
    float _4790 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
    float _1393 = sqrt(_1172);
    float _1405 = exp2((_1393 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1393 * 3.0));
    float _1436 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1440 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1444 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1768;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1497 = fma(_1444, cbModelParam._m0[26u].z, fma(_1440, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1436));
        float _1501 = fma(_1444, cbModelParam._m0[27u].z, fma(_1440, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1436));
        float _1505 = fma(_1444, cbModelParam._m0[28u].z, fma(_1440, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1436));
        float _1527 = _1436 + _1168;
        float _1528 = _1440 + _1169;
        float _1529 = _1444 + _1170;
        float _1539 = fma(_1529, cbModelParam._m0[26u].z, fma(_1528, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1527)) - _1497;
        float _1540 = fma(_1529, cbModelParam._m0[27u].z, fma(_1528, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1527)) - _1501;
        float _1541 = fma(_1529, cbModelParam._m0[28u].z, fma(_1528, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1527)) - _1505;
        float _1545 = inversesqrt(dot(vec3(_1539, _1540, _1541), vec3(_1539, _1540, _1541)));
        float _1557 = ((_1545 * _1539) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1497 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1558 = ((_1545 * _1540) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1501 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1559 = ((_1545 * _1541) / cbModelParam._m0[34u].z) + ((((((_1505 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1562 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1557, _1558, _1559), 0.0);
        vec4 _1569 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1557, _1558, _1559), 0.0);
        vec4 _1576 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1557, _1558, _1559), 0.0);
        vec4 _1583 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1557, _1558, _1559), 0.0);
        float _1596 = exp2((_1562.w + (-0.5)) * 20.0) * 2.0;
        float _1597 = _1596 * (_1562.x + (-0.5));
        float _1598 = _1596 * (_1562.y + (-0.5));
        float _1599 = _1596 * (_1562.z + (-0.5));
        float _1606 = exp2((_1569.w + (-0.5)) * 20.0) * 2.0;
        float _1607 = _1606 * (_1569.x + (-0.5));
        float _1608 = _1606 * (_1569.y + (-0.5));
        float _1609 = _1606 * (_1569.z + (-0.5));
        float _1616 = exp2((_1576.w + (-0.5)) * 20.0) * 2.0;
        float _1617 = _1616 * (_1576.x + (-0.5));
        float _1618 = _1616 * (_1576.y + (-0.5));
        float _1619 = _1616 * (_1576.z + (-0.5));
        float _1626 = exp2((_1583.w + (-0.5)) * 20.0) * 2.0;
        float _1627 = _1626 * (_1583.x + (-0.5));
        float _1628 = _1626 * (_1583.y + (-0.5));
        float _1629 = _1626 * (_1583.z + (-0.5));
        float _1630 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1631 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1632 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1633 = _1597 * 0.5;
        float _1634 = _1607 * 0.5;
        float _1635 = _1617 * 0.5;
        float _1636 = dot(vec3(_1633, _1634, _1635), vec3(_1633, _1634, _1635));
        float _1641 = (_1636 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1636);
        float _1650 = (dot(vec3(_1168, _1169, _1170), vec3(_1641 * _1633, _1641 * _1634, _1641 * _1635)) + 1.0) * 0.5;
        float _4816 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1660 = sqrt(((_1634 * _1634) + (_1633 * _1633)) + (_1635 * _1635)) / (_1630 + 9.9999997473787516355514526367188e-06);
        float _4827 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
        float _1662 = _1661 * 2.0;
        float _1666 = (1.0 - _1661) / (_1661 + 1.0);
        float _4838 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
        float _1676 = ((((1.0 - _1667) * (_1662 + 2.0)) * exp2(log2(isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0))) * (_1662 + 1.0))) + _1667) * _1630;
        float _1677 = _1598 * 0.5;
        float _1678 = _1608 * 0.5;
        float _1679 = _1618 * 0.5;
        float _1680 = dot(vec3(_1677, _1678, _1679), vec3(_1677, _1678, _1679));
        float _1685 = (_1680 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1680);
        float _1693 = (dot(vec3(_1168, _1169, _1170), vec3(_1685 * _1677, _1685 * _1678, _1685 * _1679)) + 1.0) * 0.5;
        float _4849 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1702 = sqrt(((_1678 * _1678) + (_1677 * _1677)) + (_1679 * _1679)) / (_1631 + 9.9999997473787516355514526367188e-06);
        float _4860 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
        float _1704 = _1703 * 2.0;
        float _1708 = (1.0 - _1703) / (_1703 + 1.0);
        float _4871 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1709 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
        float _1718 = ((((1.0 - _1709) * (_1704 + 2.0)) * exp2(log2(isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0))) * (_1704 + 1.0))) + _1709) * _1631;
        float _1719 = _1599 * 0.5;
        float _1720 = _1609 * 0.5;
        float _1721 = _1619 * 0.5;
        float _1722 = dot(vec3(_1719, _1720, _1721), vec3(_1719, _1720, _1721));
        float _1727 = (_1722 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1722);
        float _1735 = (dot(vec3(_1168, _1169, _1170), vec3(_1727 * _1719, _1727 * _1720, _1727 * _1721)) + 1.0) * 0.5;
        float _4882 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1744 = sqrt(((_1720 * _1720) + (_1719 * _1719)) + (_1721 * _1721)) / (_1632 + 9.9999997473787516355514526367188e-06);
        float _4893 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1745 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
        float _1746 = _1745 * 2.0;
        float _1750 = (1.0 - _1745) / (_1745 + 1.0);
        float _4904 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1751 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
        float _1760 = ((((1.0 - _1751) * (_1746 + 2.0)) * exp2(log2(isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0))) * (_1746 + 1.0))) + _1751) * _1632;
        _1768 = _1599;
        _1770 = _1598;
        _1771 = _1597;
        _1772 = _1609;
        _1773 = _1608;
        _1774 = _1607;
        _1775 = _1619;
        _1776 = _1618;
        _1777 = _1617;
        _1778 = _1632;
        _1779 = _1631;
        _1780 = _1630;
        _1781 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)));
        _1782 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)));
        _1783 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)));
    }
    else
    {
        _1768 = _1769;
        _1770 = _1769;
        _1771 = _1769;
        _1772 = _1769;
        _1773 = _1769;
        _1774 = _1769;
        _1775 = _1769;
        _1776 = _1769;
        _1777 = _1769;
        _1778 = _1769;
        _1779 = _1769;
        _1780 = _1769;
        _1781 = 0.0;
        _1782 = 0.0;
        _1783 = 0.0;
    }
    float _2076;
    float _2077;
    float _2078;
    float _2079;
    float _2080;
    float _2081;
    float _2082;
    float _2083;
    float _2084;
    float _2085;
    float _2086;
    float _2087;
    float _2088;
    float _2089;
    float _2090;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1809 = fma(_1444, cbModelParam._m0[30u].z, fma(_1440, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1436));
        float _1813 = fma(_1444, cbModelParam._m0[31u].z, fma(_1440, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1436));
        float _1817 = fma(_1444, cbModelParam._m0[32u].z, fma(_1440, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1436));
        float _1839 = _1436 + _1168;
        float _1840 = _1440 + _1169;
        float _1841 = _1444 + _1170;
        float _1851 = fma(_1841, cbModelParam._m0[30u].z, fma(_1840, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1839)) - _1809;
        float _1852 = fma(_1841, cbModelParam._m0[31u].z, fma(_1840, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1839)) - _1813;
        float _1853 = fma(_1841, cbModelParam._m0[32u].z, fma(_1840, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1839)) - _1817;
        float _1857 = inversesqrt(dot(vec3(_1851, _1852, _1853), vec3(_1851, _1852, _1853)));
        float _1869 = ((_1857 * _1851) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1809 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1870 = ((_1857 * _1852) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1813 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1871 = ((_1857 * _1853) / cbModelParam._m0[35u].z) + ((((((_1817 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1873 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1869, _1870, _1871), 0.0);
        vec4 _1880 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1869, _1870, _1871), 0.0);
        vec4 _1887 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1869, _1870, _1871), 0.0);
        vec4 _1894 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1869, _1870, _1871), 0.0);
        float _1906 = exp2((_1873.w + (-0.5)) * 20.0) * 2.0;
        float _1907 = _1906 * (_1873.x + (-0.5));
        float _1908 = _1906 * (_1873.y + (-0.5));
        float _1909 = _1906 * (_1873.z + (-0.5));
        float _1916 = exp2((_1880.w + (-0.5)) * 20.0) * 2.0;
        float _1917 = _1916 * (_1880.x + (-0.5));
        float _1918 = _1916 * (_1880.y + (-0.5));
        float _1919 = _1916 * (_1880.z + (-0.5));
        float _1926 = exp2((_1887.w + (-0.5)) * 20.0) * 2.0;
        float _1927 = _1926 * (_1887.x + (-0.5));
        float _1928 = _1926 * (_1887.y + (-0.5));
        float _1929 = _1926 * (_1887.z + (-0.5));
        float _1936 = exp2((_1894.w + (-0.5)) * 20.0) * 2.0;
        float _1937 = _1936 * (_1894.x + (-0.5));
        float _1938 = _1936 * (_1894.y + (-0.5));
        float _1939 = _1936 * (_1894.z + (-0.5));
        float _1940 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
        float _1941 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
        float _1942 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1943 = _1907 * 0.5;
        float _1944 = _1917 * 0.5;
        float _1945 = _1927 * 0.5;
        float _1946 = dot(vec3(_1943, _1944, _1945), vec3(_1943, _1944, _1945));
        float _1951 = (_1946 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1946);
        float _1959 = (dot(vec3(_1168, _1169, _1170), vec3(_1951 * _1943, _1951 * _1944, _1951 * _1945)) + 1.0) * 0.5;
        float _4945 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
        float _1968 = sqrt(((_1944 * _1944) + (_1943 * _1943)) + (_1945 * _1945)) / (_1940 + 9.9999997473787516355514526367188e-06);
        float _4956 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
        float _1969 = isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0));
        float _1970 = _1969 * 2.0;
        float _1974 = (1.0 - _1969) / (_1969 + 1.0);
        float _4967 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        float _1975 = isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0));
        float _1984 = ((((1.0 - _1975) * (_1970 + 2.0)) * exp2(log2(isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0))) * (_1970 + 1.0))) + _1975) * _1940;
        float _1985 = _1908 * 0.5;
        float _1986 = _1918 * 0.5;
        float _1987 = _1928 * 0.5;
        float _1988 = dot(vec3(_1985, _1986, _1987), vec3(_1985, _1986, _1987));
        float _1993 = (_1988 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1988);
        float _2001 = (dot(vec3(_1168, _1169, _1170), vec3(_1993 * _1985, _1993 * _1986, _1993 * _1987)) + 1.0) * 0.5;
        float _4978 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
        float _2010 = sqrt(((_1986 * _1986) + (_1985 * _1985)) + (_1987 * _1987)) / (_1941 + 9.9999997473787516355514526367188e-06);
        float _4989 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        float _2011 = isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0));
        float _2012 = _2011 * 2.0;
        float _2016 = (1.0 - _2011) / (_2011 + 1.0);
        float _5000 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
        float _2017 = isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0));
        float _2026 = ((((1.0 - _2017) * (_2012 + 2.0)) * exp2(log2(isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0))) * (_2012 + 1.0))) + _2017) * _1941;
        float _2027 = _1909 * 0.5;
        float _2028 = _1919 * 0.5;
        float _2029 = _1929 * 0.5;
        float _2030 = dot(vec3(_2027, _2028, _2029), vec3(_2027, _2028, _2029));
        float _2035 = (_2030 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2030);
        float _2043 = (dot(vec3(_1168, _1169, _1170), vec3(_2035 * _2027, _2035 * _2028, _2035 * _2029)) + 1.0) * 0.5;
        float _5011 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2052 = sqrt(((_2028 * _2028) + (_2027 * _2027)) + (_2029 * _2029)) / (_1942 + 9.9999997473787516355514526367188e-06);
        float _5022 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
        float _2053 = isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0));
        float _2054 = _2053 * 2.0;
        float _2058 = (1.0 - _2053) / (_2053 + 1.0);
        float _5033 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2059 = isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0));
        float _2068 = ((((1.0 - _2059) * (_2054 + 2.0)) * exp2(log2(isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0))) * (_2054 + 1.0))) + _2059) * _1942;
        _2076 = _1909;
        _2077 = _1908;
        _2078 = _1907;
        _2079 = _1919;
        _2080 = _1918;
        _2081 = _1917;
        _2082 = _1929;
        _2083 = _1928;
        _2084 = _1927;
        _2085 = _1942;
        _2086 = _1941;
        _2087 = _1940;
        _2088 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0)));
        _2089 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0)));
        _2090 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0)));
    }
    else
    {
        _2076 = _1769;
        _2077 = _1769;
        _2078 = _1769;
        _2079 = _1769;
        _2080 = _1769;
        _2081 = _1769;
        _2082 = _1769;
        _2083 = _1769;
        _2084 = _1769;
        _2085 = _1769;
        _2086 = _1769;
        _2087 = _1769;
        _2088 = 0.0;
        _2089 = 0.0;
        _2090 = 0.0;
    }
    float _2100 = (cbModelParam._m0[1u].x * (_2088 - _1781)) + _1781;
    float _2101 = (cbModelParam._m0[1u].x * (_2089 - _1782)) + _1782;
    float _2102 = (cbModelParam._m0[1u].x * (_2090 - _1783)) + _1783;
    float _2123 = fma(_2102, cbSceneParam._m0[89u].z, fma(_2101, cbSceneParam._m0[89u].y, _2100 * cbSceneParam._m0[89u].x));
    float _2126 = fma(_2102, cbSceneParam._m0[90u].z, fma(_2101, cbSceneParam._m0[90u].y, _2100 * cbSceneParam._m0[90u].x));
    float _2129 = fma(_2102, cbSceneParam._m0[91u].z, fma(_2101, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2100));
    float _2142 = _1385 * 0.5;
    float _2143 = _1386 * 0.5;
    float _2144 = _1387 * 0.5;
    float _2145 = dot(vec4(_2142, _2143, _2144, 1.0), vec4(_2078, _2081, _2084, _2087));
    float _2148 = dot(vec4(_2142, _2143, _2144, 1.0), vec4(_2077, _2080, _2083, _2086));
    float _2151 = dot(vec4(_2142, _2143, _2144, 1.0), vec4(_2076, _2079, _2082, _2085));
    float _2185;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2158 = dot(vec4(_2142, _2143, _2144, 1.0), vec4(_1768, _1772, _1775, _1778));
        float _2162 = dot(vec4(_2142, _2143, _2144, 1.0), vec4(_1770, _1773, _1776, _1779));
        float _2166 = dot(vec4(_2142, _2143, _2144, 1.0), vec4(_1771, _1774, _1777, _1780));
        float _2173 = dot(vec4(cbModelParam._m0[39u]), vec4(_2142, _2143, _2144, 1.0));
        _2185 = dot(vec3(isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0)), isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0)), isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2173) ? 0.0 : (isnan(0.0) ? _2173 : max(0.0, _2173))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2185 = 1.0;
    }
    float _2196;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2187 = dot(vec4(cbModelParam._m0[40u]), vec4(_2142, _2143, _2144, 1.0));
        _2196 = dot(vec3(isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0)), isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0)), isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2187) ? 0.0 : (isnan(0.0) ? _2187 : max(0.0, _2187))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2196 = 1.0;
    }
    float _2200 = (_2196 * cbModelParam._m0[1u].x) + (_2185 * (1.0 - cbModelParam._m0[1u].x));
    float _2210 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1172);
    float _2211 = isnan(_2210) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2210 : min(cbModelParam._m0[25u].z, _2210));
    float _2291;
    float _2293;
    float _2295;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2258 = fma(_1444, cbModelParam._m0[13u].z, fma(_1440, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1436)) + cbModelParam._m0[13u].w;
        float _2262 = fma(_1444, cbModelParam._m0[14u].z, fma(_1440, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1436)) + cbModelParam._m0[14u].w;
        float _2266 = fma(_1444, cbModelParam._m0[15u].z, fma(_1440, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1436)) + cbModelParam._m0[15u].w;
        float _2269 = fma(_1387, cbModelParam._m0[13u].z, fma(_1386, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1385));
        float _2272 = fma(_1387, cbModelParam._m0[14u].z, fma(_1386, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1385));
        float _2275 = fma(_1387, cbModelParam._m0[15u].z, fma(_1386, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1385));
        float _2303;
        if (_2269 > 0.0)
        {
            _2303 = abs((1.0 - _2258) / _2269);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2269 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2258 + 1.0) / _2269);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2303 = frontier_phi_17_15_ladder;
        }
        float _2511;
        if (_2272 > 0.0)
        {
            _2511 = abs((1.0 - _2262) / _2272);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2272 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2262 + 1.0) / _2272);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2511 = frontier_phi_26_22_ladder;
        }
        float _2957;
        if (_2275 > 0.0)
        {
            _2957 = abs((1.0 - _2266) / _2275);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2275 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2266 + 1.0) / _2275);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2957 = frontier_phi_38_33_ladder;
        }
        float _2959 = isnan(_2511) ? _2303 : (isnan(_2303) ? _2511 : min(_2303, _2511));
        float _2960 = isnan(_2957) ? _2959 : (isnan(_2959) ? _2957 : min(_2959, _2957));
        float _2964 = (_2960 * _2269) + _2258;
        float _2965 = (_2960 * _2272) + _2262;
        float _2966 = (_2960 * _2275) + _2266;
        float _2967 = _2960 * 9.9999997473787516355514526367188e-05;
        float _2969 = (-1.0) - _2967;
        float _2971 = _2967 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2966 > _2971) || ((_2966 < _2969) || ((_2965 > _2971) || ((_2965 < _2969) || ((_2964 < _2969) || (_2964 > _2971))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3343 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2966, cbModelParam._m0[9u].z, fma(_2965, cbModelParam._m0[9u].y, _2964 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2966, cbModelParam._m0[10u].z, fma(_2965, cbModelParam._m0[10u].y, _2964 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2966, cbModelParam._m0[11u].z, fma(_2965, cbModelParam._m0[11u].y, _2964 * cbModelParam._m0[11u].x))), _2211);
            frontier_phi_16_38_ladder = _3343.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _3343.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _3343.x * cbModelParam._m0[1u].y;
        }
        _2291 = frontier_phi_16_38_ladder_2;
        _2293 = frontier_phi_16_38_ladder_1;
        _2295 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2279 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1385, _1386, _1387), _2211);
        _2291 = _2279.x * cbModelParam._m0[1u].y;
        _2293 = _2279.y * cbModelParam._m0[1u].y;
        _2295 = _2279.z * cbModelParam._m0[1u].y;
    }
    float _2299 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1172);
    float _2300 = isnan(_2299) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2299 : min(cbModelParam._m0[25u].w, _2299));
    float _2389;
    float _2391;
    float _2393;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2353 = fma(_1444, cbModelParam._m0[21u].z, fma(_1440, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1436)) + cbModelParam._m0[21u].w;
        float _2357 = fma(_1444, cbModelParam._m0[22u].z, fma(_1440, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1436)) + cbModelParam._m0[22u].w;
        float _2361 = fma(_1444, cbModelParam._m0[23u].z, fma(_1440, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1436)) + cbModelParam._m0[23u].w;
        float _2364 = fma(_1387, cbModelParam._m0[21u].z, fma(_1386, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1385));
        float _2367 = fma(_1387, cbModelParam._m0[22u].z, fma(_1386, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1385));
        float _2370 = fma(_1387, cbModelParam._m0[23u].z, fma(_1386, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1385));
        float _2516;
        if (_2364 > 0.0)
        {
            _2516 = abs((1.0 - _2353) / _2364);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2364 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2353 + 1.0) / _2364);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2516 = frontier_phi_28_24_ladder;
        }
        float _2984;
        if (_2367 > 0.0)
        {
            _2984 = abs((1.0 - _2357) / _2367);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2367 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2357 + 1.0) / _2367);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2984 = frontier_phi_40_35_ladder;
        }
        float _3515;
        if (_2370 > 0.0)
        {
            _3515 = abs((1.0 - _2361) / _2370);
        }
        else
        {
            float frontier_phi_52_47_ladder;
            if (_2370 < 0.0)
            {
                frontier_phi_52_47_ladder = abs((_2361 + 1.0) / _2370);
            }
            else
            {
                frontier_phi_52_47_ladder = 5000.0;
            }
            _3515 = frontier_phi_52_47_ladder;
        }
        float _3517 = isnan(_2984) ? _2516 : (isnan(_2516) ? _2984 : min(_2516, _2984));
        float _3518 = isnan(_3515) ? _3517 : (isnan(_3517) ? _3515 : min(_3517, _3515));
        float _3522 = (_3518 * _2364) + _2353;
        float _3523 = (_3518 * _2367) + _2357;
        float _3524 = (_3518 * _2370) + _2361;
        float _3525 = _3518 * 9.9999997473787516355514526367188e-05;
        float _3526 = (-1.0) - _3525;
        float _3528 = _3525 + 1.0;
        float frontier_phi_25_52_ladder;
        float frontier_phi_25_52_ladder_1;
        float frontier_phi_25_52_ladder_2;
        if ((_3524 > _3528) || ((_3524 < _3526) || ((_3523 > _3528) || ((_3523 < _3526) || ((_3522 < _3526) || (_3522 > _3528))))))
        {
            frontier_phi_25_52_ladder = 0.0;
            frontier_phi_25_52_ladder_1 = 0.0;
            frontier_phi_25_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3661 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3524, cbModelParam._m0[17u].z, fma(_3523, cbModelParam._m0[17u].y, _3522 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3524, cbModelParam._m0[18u].z, fma(_3523, cbModelParam._m0[18u].y, _3522 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3524, cbModelParam._m0[19u].z, fma(_3523, cbModelParam._m0[19u].y, _3522 * cbModelParam._m0[19u].x))), _2300);
            frontier_phi_25_52_ladder = _3661.z * cbModelParam._m0[1u].z;
            frontier_phi_25_52_ladder_1 = _3661.y * cbModelParam._m0[1u].z;
            frontier_phi_25_52_ladder_2 = _3661.x * cbModelParam._m0[1u].z;
        }
        _2389 = frontier_phi_25_52_ladder_2;
        _2391 = frontier_phi_25_52_ladder_1;
        _2393 = frontier_phi_25_52_ladder;
    }
    else
    {
        vec4 _2373 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1385, _1386, _1387), _2300);
        _2389 = _2373.x * cbModelParam._m0[1u].z;
        _2391 = _2373.y * cbModelParam._m0[1u].z;
        _2393 = _2373.z * cbModelParam._m0[1u].z;
    }
    float _2405 = ((((1.0 - _1405) * ((_1393 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1405 * _1393)) * _1364;
    float _2406 = _2405 * ((cbModelParam._m0[1u].w * (_2389 - _2291)) + _2291);
    float _2407 = _2405 * ((cbModelParam._m0[1u].w * (_2391 - _2293)) + _2293);
    float _2408 = _2405 * ((cbModelParam._m0[1u].w * (_2393 - _2295)) + _2295);
    float _2411 = fma(_2408, cbSceneParam._m0[89u].z, fma(_2407, cbSceneParam._m0[89u].y, _2406 * cbSceneParam._m0[89u].x));
    float _2414 = fma(_2408, cbSceneParam._m0[90u].z, fma(_2407, cbSceneParam._m0[90u].y, _2406 * cbSceneParam._m0[90u].x));
    float _2417 = fma(_2408, cbSceneParam._m0[91u].z, fma(_2407, cbSceneParam._m0[91u].y, _2406 * cbSceneParam._m0[91u].x));
    float _2436 = (cbSceneParam._m0[88u].y * (1.0 - _1172)) + cbSceneParam._m0[88u].z;
    float _5159 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
    vec4 _2440 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(_1264, _1265), (isnan(1.0) ? _5159 : (isnan(_5159) ? 1.0 : min(_5159, 1.0))) * 5.0);
    float _2456 = 1.0 - _2440.w;
    float _2490 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2494 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2498 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2502 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2503 = _2490 / _2502;
    float _2504 = _2494 / _2502;
    float _2505 = _2498 / _2502;
    float _2651;
    float _2652;
    float _2653;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2532 = ((uint(_2505 > cbSceneParam._m0[59u].y) + uint(_2505 > cbSceneParam._m0[59u].x)) + uint(_2505 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2533 = _2532 + 43u;
        uint _2541 = _2532 + 44u;
        uint _2549 = _2532 + 45u;
        uint _2557 = _2532 + 46u;
        float _2568 = fma(_2502, cbSceneParam._m0[_2533].w, fma(_2498, cbSceneParam._m0[_2533].z, fma(_2494, cbSceneParam._m0[_2533].y, _2490 * cbSceneParam._m0[_2533].x)));
        float _2572 = fma(_2502, cbSceneParam._m0[_2541].w, fma(_2498, cbSceneParam._m0[_2541].z, fma(_2494, cbSceneParam._m0[_2541].y, _2490 * cbSceneParam._m0[_2541].x)));
        float _2580 = fma(_2502, cbSceneParam._m0[_2557].w, fma(_2498, cbSceneParam._m0[_2557].z, fma(_2494, cbSceneParam._m0[_2557].y, _2490 * cbSceneParam._m0[_2557].x)));
        float _2584 = cbSceneParam._m0[33u].z * _2580;
        float _2586 = cbSceneParam._m0[33u].w * _2580;
        float _2589 = fma(_2502, cbSceneParam._m0[_2549].w, fma(_2498, cbSceneParam._m0[_2549].z, fma(_2494, cbSceneParam._m0[_2549].y, _2490 * cbSceneParam._m0[_2549].x))) / _2580;
        float _2637 = (cbSceneParam._m0[33u].x - sqrt(((_2504 * _2504) + (_2503 * _2503)) + (_2505 * _2505))) * cbSceneParam._m0[33u].y;
        float _5170 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2644 = (isnan(1.0) ? _5170 : (isnan(_5170) ? 1.0 : min(_5170, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2584 + _2568) / _2580, (_2586 + _2572) / _2580), _2589), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2586 + _2568) / _2580, (_2572 - _2584) / _2580), _2589), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2568 - _2584) / _2580, (_2572 - _2586) / _2580), _2589), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2568 - _2586) / _2580, (_2584 + _2572) / _2580), _2589), 0.0)).x), vec4(0.25)));
        _2651 = 1.0 - (_2644 * cbSceneParam._m0[34u].x);
        _2652 = 1.0 - (_2644 * cbSceneParam._m0[34u].y);
        _2653 = 1.0 - (_2644 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2651 = 1.0;
        _2652 = 1.0;
        _2653 = 1.0;
    }
    float _2717;
    float _2719;
    float _2721;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2705 = fma(_2502, cbSceneParam._m0[63u].w, fma(_2498, cbSceneParam._m0[63u].z, fma(_2494, cbSceneParam._m0[63u].y, _2490 * cbSceneParam._m0[63u].x)));
        float _2706 = fma(_2502, cbSceneParam._m0[60u].w, fma(_2498, cbSceneParam._m0[60u].z, fma(_2494, cbSceneParam._m0[60u].y, _2490 * cbSceneParam._m0[60u].x))) / _2705;
        float _2707 = fma(_2502, cbSceneParam._m0[61u].w, fma(_2498, cbSceneParam._m0[61u].z, fma(_2494, cbSceneParam._m0[61u].y, _2490 * cbSceneParam._m0[61u].x))) / _2705;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2706 >= cbSceneParam._m0[64u].x) && (_2707 >= cbSceneParam._m0[64u].y)) && (_2706 <= cbSceneParam._m0[64u].z)) && (_2707 <= cbSceneParam._m0[64u].w))
        {
            float _2997 = fma(_2502, cbSceneParam._m0[62u].w, fma(_2498, cbSceneParam._m0[62u].z, fma(_2494, cbSceneParam._m0[62u].y, _2490 * cbSceneParam._m0[62u].x))) / _2705;
            float _3001 = isnan(cbSceneParam._m0[41u].w) ? _2997 : (isnan(_2997) ? cbSceneParam._m0[41u].w : max(_2997, cbSceneParam._m0[41u].w));
            float _3044 = (cbSceneParam._m0[33u].x - sqrt(((_2504 * _2504) + (_2503 * _2503)) + (_2505 * _2505))) * cbSceneParam._m0[33u].y;
            float _5186 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
            float _3051 = (isnan(1.0) ? _5186 : (isnan(_5186) ? 1.0 : min(_5186, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2706, cbSceneParam._m0[33u].w + _2707), _3001), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2706, _2707 - cbSceneParam._m0[33u].z), _3001), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2706 - cbSceneParam._m0[33u].z, _2707 - cbSceneParam._m0[33u].w), _3001), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2706 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2707), _3001), 0.0)).x), vec4(0.25)));
            float _3055 = 1.0 - (_3051 * cbSceneParam._m0[34u].x);
            float _3056 = 1.0 - (_3051 * cbSceneParam._m0[34u].y);
            float _3057 = 1.0 - (_3051 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_3057) ? _2653 : (isnan(_2653) ? _3057 : min(_2653, _3057));
            frontier_phi_37_36_ladder_1 = isnan(_3056) ? _2652 : (isnan(_2652) ? _3056 : min(_2652, _3056));
            frontier_phi_37_36_ladder_2 = isnan(_3055) ? _2651 : (isnan(_2651) ? _3055 : min(_2651, _3055));
        }
        else
        {
            frontier_phi_37_36_ladder = _2653;
            frontier_phi_37_36_ladder_1 = _2652;
            frontier_phi_37_36_ladder_2 = _2651;
        }
        _2717 = frontier_phi_37_36_ladder_2;
        _2719 = frontier_phi_37_36_ladder_1;
        _2721 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2717 = _2651;
        _2719 = _2652;
        _2721 = _2653;
    }
    uvec4 _2726 = floatBitsToUint(cbInstanceData._m0[_1339 + 5u]);
    uint _2728 = _2726.x * 14u;
    uint _2729 = _2728 + 13u;
    float _2734 = _1364 + (-1.0);
    float _2737 = (cbLight._m0[_2729].x * _2734) + 1.0;
    float _2738 = (cbLight._m0[_2729].y * _2734) + 1.0;
    uint _2739 = _2728 + 5u;
    float _2745 = isnan(1.0) ? _2738 : (isnan(_2738) ? 1.0 : min(_2738, 1.0));
    uint _2749 = _2728 + 4u;
    float _2758 = isnan(1.0) ? _2737 : (isnan(_2737) ? 1.0 : min(_2737, 1.0));
    uint _2762 = _2728 | 1u;
    float _2773 = dot(vec3(cbLight._m0[_2728].xyz), vec3(_1300, _1301, _1302));
    float _2776 = dot(vec3(cbLight._m0[_2762].xyz), vec3(_1300, _1301, _1302));
    float _5222 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
    float _5233 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
    float _2781 = (isnan(1.0) ? _5222 : (isnan(_5222) ? 1.0 : min(_5222, 1.0))) * 0.3183098733425140380859375;
    float _2783 = (isnan(1.0) ? _5233 : (isnan(_5233) ? 1.0 : min(_5233, 1.0))) * 0.3183098733425140380859375;
    float _2790 = ((cbLight._m0[_2739].x * _2745) * _2783) + (((cbLight._m0[_2749].x * _2717) * _2758) * _2781);
    float _2791 = ((_2745 * cbLight._m0[_2739].y) * _2783) + (((cbLight._m0[_2749].y * _2719) * _2758) * _2781);
    float _2792 = ((_2745 * cbLight._m0[_2739].z) * _2783) + (((cbLight._m0[_2749].z * _2721) * _2758) * _2781);
    uint _2794 = _2728 + 8u;
    float _2807 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2728].w)) * _1172) * 0.949999988079071044921875);
    float _2808 = _2807 * _2807;
    float _2809 = cbLight._m0[_2728].x + _1245;
    float _2810 = cbLight._m0[_2728].y + _1246;
    float _2811 = cbLight._m0[_2728].z + _1247;
    float _2815 = inversesqrt(dot(vec3(_2809, _2810, _2811), vec3(_2809, _2810, _2811)));
    float _2816 = _2815 * _2809;
    float _2817 = _2815 * _2810;
    float _2818 = _2815 * _2811;
    float _2819 = dot(vec3(_1300, _1301, _1302), vec3(cbLight._m0[_2728].xyz));
    float _5244 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
    float _2822 = isnan(1.0) ? _5244 : (isnan(_5244) ? 1.0 : min(_5244, 1.0));
    float _2823 = dot(vec3(_1300, _1301, _1302), vec3(_1245, _1246, _1247));
    float _5255 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
    float _2826 = isnan(1.0) ? _5255 : (isnan(_5255) ? 1.0 : min(_5255, 1.0));
    float _2827 = dot(vec3(_1300, _1301, _1302), vec3(_2816, _2817, _2818));
    float _5266 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
    float _2830 = isnan(1.0) ? _5266 : (isnan(_5266) ? 1.0 : min(_5266, 1.0));
    float _2831 = dot(vec3(cbLight._m0[_2728].xyz), vec3(_2816, _2817, _2818));
    float _5277 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
    float _2835 = _2808 * _2808;
    float _2839 = ((_2830 * _2830) * (_2835 + (-1.0))) + 1.0;
    float _2850 = (exp2(log2(1.0 - (isnan(1.0) ? _5277 : (isnan(_5277) ? 1.0 : min(_5277, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2851 = 1.0 - _2808;
    float _2862 = (0.5 / (((_2826 * ((_2822 * _2851) + _2808)) + 9.9999999392252902907785028219223e-09) + (((_2826 * _2851) + _2808) * _2822))) * _2822;
    float _5288 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
    float _2864 = (isnan(1.0) ? _5288 : (isnan(_5288) ? 1.0 : min(_5288, 1.0))) * (_2835 / ((_2839 * _2839) * 3.141590118408203125));
    uint _2878 = _2728 + 9u;
    float _2889 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2762].w)) * _1172) * 0.949999988079071044921875);
    float _2890 = _2889 * _2889;
    float _2891 = cbLight._m0[_2762].x + _1245;
    float _2892 = cbLight._m0[_2762].y + _1246;
    float _2893 = cbLight._m0[_2762].z + _1247;
    float _2897 = inversesqrt(dot(vec3(_2891, _2892, _2893), vec3(_2891, _2892, _2893)));
    float _2898 = _2897 * _2891;
    float _2899 = _2897 * _2892;
    float _2900 = _2897 * _2893;
    float _2901 = dot(vec3(_1300, _1301, _1302), vec3(cbLight._m0[_2762].xyz));
    float _5299 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
    float _2904 = isnan(1.0) ? _5299 : (isnan(_5299) ? 1.0 : min(_5299, 1.0));
    float _2905 = dot(vec3(_1300, _1301, _1302), vec3(_2898, _2899, _2900));
    float _5310 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
    float _2908 = isnan(1.0) ? _5310 : (isnan(_5310) ? 1.0 : min(_5310, 1.0));
    float _2909 = dot(vec3(cbLight._m0[_2762].xyz), vec3(_2898, _2899, _2900));
    float _5321 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
    float _2913 = _2890 * _2890;
    float _2917 = ((_2908 * _2908) * (_2913 + (-1.0))) + 1.0;
    float _2926 = (exp2(log2(1.0 - (isnan(1.0) ? _5321 : (isnan(_5321) ? 1.0 : min(_5321, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2927 = 1.0 - _2890;
    float _2937 = (0.5 / (((_2826 * ((_2904 * _2927) + _2890)) + 9.9999999392252902907785028219223e-09) + (((_2826 * _2927) + _2890) * _2904))) * _2904;
    float _5332 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
    float _2939 = (isnan(1.0) ? _5332 : (isnan(_5332) ? 1.0 : min(_5332, 1.0))) * (_2913 / ((_2917 * _2917) * 3.141590118408203125));
    float _2949 = (((_2926 * cbLight._m0[_2878].x) * _2939) * _2745) + ((((cbLight._m0[_2794].x * _2717) * _2850) * _2864) * _2758);
    float _2950 = (((_2926 * cbLight._m0[_2878].y) * _2939) * _2745) + ((((cbLight._m0[_2794].y * _2719) * _2850) * _2864) * _2758);
    float _2951 = (((_2926 * cbLight._m0[_2878].z) * _2939) * _2745) + ((((cbLight._m0[_2794].z * _2721) * _2850) * _2864) * _2758);
    float _3114;
    float _3116;
    float _3118;
    float _3120;
    float _3122;
    float _3124;
    if (_2726.y == 0u)
    {
        uvec4 _3069 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3070 = _3069.x;
        uint _3081 = uint((float(_3069.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1265) / _3070))) + floor(float(uint(cbSceneParam._m0[85u].x * _1264) / _3070)));
        float _3091 = (log2(_2505 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3092 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
        uint _3095 = uint(isnan(14.0) ? _3092 : (isnan(_3092) ? 14.0 : min(_3092, 14.0)));
        uvec4 _3100 = texelFetch(g_lightClusterGridBuffer, int(((_3095 << 2u) + (_3081 << 6u)) >> 2u));
        uint _3101 = _3100.x;
        uint _3102 = _3069.z;
        float _3352;
        float _3354;
        float _3356;
        float _3358;
        float _3360;
        float _3362;
        if (((((1u << ((_3102 >> 4u) & 15u)) + 4294967295u) & _3101) == 0u) || ((_3102 & 240u) == 0u))
        {
            _3352 = 0.0;
            _3354 = 0.0;
            _3356 = 0.0;
            _3358 = 0.0;
            _3360 = 0.0;
            _3362 = 0.0;
        }
        else
        {
            float _3353;
            float _3355;
            float _3357;
            float _3359;
            float _3361;
            float _3363;
            float _3573 = 0.0;
            float _3574 = 0.0;
            float _3575 = 0.0;
            float _3576 = 0.0;
            float _3577 = 0.0;
            float _3578 = 0.0;
            uint _3579 = 0u;
            uint _3588;
            bool _3589;
            for (;;)
            {
                _3588 = texelFetch(g_lightClassification, int((((_3095 << 5u) + (_3081 << 9u)) + (_3579 << 2u)) >> 2u)).x;
                _3589 = _3588 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_3589)
                {
                    frontier_phi_63_pred = _3578;
                    frontier_phi_63_pred_1 = _3577;
                    frontier_phi_63_pred_2 = _3576;
                    frontier_phi_63_pred_3 = _3575;
                    frontier_phi_63_pred_4 = _3574;
                    frontier_phi_63_pred_5 = _3573;
                }
                else
                {
                    float _3739;
                    float _3740;
                    float _3741;
                    float _3742;
                    float _3743;
                    float _3744;
                    uint _3745;
                    _3739 = _3573;
                    _3740 = _3574;
                    _3741 = _3575;
                    _3742 = _3576;
                    _3743 = _3577;
                    _3744 = _3578;
                    _3745 = _3588;
                    float _3666;
                    float _3667;
                    float _3668;
                    float _3669;
                    float _3670;
                    float _3671;
                    for (;;)
                    {
                        uint _3749 = uint(findLSB(_3745)) + (_3579 << 5u);
                        uint _3746 = (_3745 + 4294967295u) & _3745;
                        uint _3751 = _3749 * 48u;
                        vec4 _3765 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3751)).x, texelFetch(g_PointLightRenderingBuffer, int(_3751 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3751 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3751 + 3u)).x));
                        uint _3771 = (_3749 * 48u) + 4u;
                        vec4 _3784 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3771)).x, texelFetch(g_PointLightRenderingBuffer, int(_3771 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3771 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3771 + 3u)).x));
                        uint _3790 = (_3749 * 48u) + 8u;
                        vec3 _3801 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3790)).x, texelFetch(g_PointLightRenderingBuffer, int(_3790 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3790 + 2u)).x));
                        float _3805 = _3765.x - _2503;
                        float _3806 = _3765.y - _2504;
                        float _3807 = _3765.z - _2505;
                        float _3808 = dot(vec3(_3805, _3806, _3807), vec3(_3805, _3806, _3807));
                        float _3811 = inversesqrt(_3808);
                        float _3812 = _3811 * _3805;
                        float _3813 = _3811 * _3806;
                        float _3814 = _3811 * _3807;
                        float _3815 = dot(vec3(_1320, _1323, _1326), vec3(_3812, _3813, _3814));
                        float _3820 = 1.0 - (_3808 * _3765.w);
                        float _5353 = isnan(0.0) ? _3820 : (isnan(_3820) ? 0.0 : max(_3820, 0.0));
                        float _3821 = isnan(1.0) ? _5353 : (isnan(_5353) ? 1.0 : min(_5353, 1.0));
                        float _3822 = sqrt(_3808) * _3784.w;
                        float _3825 = 1.39999997615814208984375 / (_3822 + 1.39999997615814208984375);
                        float _3826 = _3825 * _3825;
                        float _3829 = ((1.0 - _3826) * _3815) + _3826;
                        float _3832 = _3822 * _3822;
                        float _3836 = ((isnan(0.0) ? _3829 : (isnan(_3829) ? 0.0 : max(_3829, 0.0))) * _3821) / ((_3832 * 0.699999988079071044921875) + 1.0);
                        float _3840 = (-0.0) - _2503;
                        float _3841 = (-0.0) - _2504;
                        float _3842 = (-0.0) - _2505;
                        float _3846 = inversesqrt(dot(vec3(_3840, _3841, _3842), vec3(_3840, _3841, _3842)));
                        float _3847 = _3846 * _3840;
                        float _3848 = _3846 * _3841;
                        float _3849 = _3846 * _3842;
                        float _3856 = exp2(log2(1.0 / ((_3832 * 3.5) + 5.0)) * 0.25);
                        float _3857 = 1.0 - _1393;
                        float _3864 = sqrt(1.0 - ((1.0 - (_3857 * _3857)) * (1.0 - (_3856 * _3856))));
                        float _3865 = _3864 * _3864;
                        float _3866 = _3865 * _3865;
                        float _3867 = _3847 + _3812;
                        float _3868 = _3848 + _3813;
                        float _3869 = _3849 + _3814;
                        float _3873 = inversesqrt(dot(vec3(_3867, _3868, _3869), vec3(_3867, _3868, _3869)));
                        float _3877 = dot(vec3(_1320, _1323, _1326), vec3(_3847, _3848, _3849));
                        float _5369 = isnan(0.0) ? _3877 : (isnan(_3877) ? 0.0 : max(_3877, 0.0));
                        float _3880 = isnan(1.0) ? _5369 : (isnan(_5369) ? 1.0 : min(_5369, 1.0));
                        float _3881 = dot(vec3(_1320, _1323, _1326), vec3(_3873 * _3867, _3873 * _3868, _3873 * _3869));
                        float _5380 = isnan(0.0) ? _3881 : (isnan(_3881) ? 0.0 : max(_3881, 0.0));
                        float _3884 = isnan(1.0) ? _5380 : (isnan(_5380) ? 1.0 : min(_5380, 1.0));
                        float _3888 = ((_3884 * _3884) * (_3866 + (-1.0))) + 1.0;
                        float _3889 = _3825 * _3865;
                        float _3890 = _3889 * _3889;
                        float _3893 = ((1.0 - _3890) * _3815) + _3890;
                        float _5391 = isnan(0.0) ? _3893 : (isnan(_3893) ? 0.0 : max(_3893, 0.0));
                        float _3894 = isnan(1.0) ? _5391 : (isnan(_5391) ? 1.0 : min(_5391, 1.0));
                        float _3895 = 1.0 - _3865;
                        float _3905 = (0.5 / (((_3894 * ((_3880 * _3895) + _3865)) + 9.9999999392252902907785028219223e-09) + (((_3894 * _3895) + _3865) * _3880))) * _3894;
                        float _5402 = isnan(0.0) ? _3905 : (isnan(_3905) ? 0.0 : max(_3905, 0.0));
                        float _3916 = (((_3866 * 3.1415927410125732421875) * (isnan(1.0) ? _5402 : (isnan(_5402) ? 1.0 : min(_5402, 1.0)))) / ((_3888 * _3888) * ((_3832 * 2.1991131305694580078125) + 3.141590118408203125))) * _3821;
                        _3669 = (_3836 * _3784.x) + _3742;
                        _3670 = (_3836 * _3784.y) + _3743;
                        _3671 = (_3836 * _3784.z) + _3744;
                        _3666 = (_3916 * _3801.x) + _3739;
                        _3667 = (_3916 * _3801.y) + _3740;
                        _3668 = (_3916 * _3801.z) + _3741;
                        if (_3746 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3739 = _3666;
                            _3740 = _3667;
                            _3741 = _3668;
                            _3742 = _3669;
                            _3743 = _3670;
                            _3744 = _3671;
                            _3745 = _3746;
                        }
                    }
                    frontier_phi_63_pred = _3671;
                    frontier_phi_63_pred_1 = _3670;
                    frontier_phi_63_pred_2 = _3669;
                    frontier_phi_63_pred_3 = _3668;
                    frontier_phi_63_pred_4 = _3667;
                    frontier_phi_63_pred_5 = _3666;
                }
                _3363 = frontier_phi_63_pred;
                _3361 = frontier_phi_63_pred_1;
                _3359 = frontier_phi_63_pred_2;
                _3357 = frontier_phi_63_pred_3;
                _3355 = frontier_phi_63_pred_4;
                _3353 = frontier_phi_63_pred_5;
                uint _3580 = _3579 + 1u;
                if (_3580 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3573 = _3353;
                    _3574 = _3355;
                    _3575 = _3357;
                    _3576 = _3359;
                    _3577 = _3361;
                    _3578 = _3363;
                    _3579 = _3580;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3352 = _3353;
            _3354 = _3355;
            _3356 = _3357;
            _3358 = _3359;
            _3360 = _3361;
            _3362 = _3363;
        }
        uvec4 _3366 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3367 = _3366.z;
        uint _3369 = (_3367 >> 8u) & 15u;
        float _3541;
        float _3543;
        float _3545;
        float _3547;
        float _3549;
        float _3551;
        if (((4294967295u << _3369) & _3101) == 0u)
        {
            _3541 = _3352;
            _3543 = _3354;
            _3545 = _3356;
            _3547 = _3358;
            _3549 = _3360;
            _3551 = _3362;
        }
        else
        {
            float _3566 = inversesqrt(dot(vec3(_2503, _2504, _2505), vec3(_2503, _2504, _2505)));
            float _3567 = _3566 * _2503;
            float _3568 = _3566 * _2504;
            float _3569 = _3566 * _2505;
            float frontier_phi_54_55_ladder;
            float frontier_phi_54_55_ladder_1;
            float frontier_phi_54_55_ladder_2;
            float frontier_phi_54_55_ladder_3;
            float frontier_phi_54_55_ladder_4;
            float frontier_phi_54_55_ladder_5;
            if (_3369 < ((_3367 >> 12u) & 15u))
            {
                float _3542;
                float _3544;
                float _3546;
                float _3548;
                float _3550;
                float _3552;
                float _3722 = _3352;
                float _3723 = _3354;
                float _3724 = _3356;
                float _3725 = _3358;
                float _3726 = _3360;
                float _3727 = _3362;
                uint _3728 = _3369;
                uint _3737;
                bool _3738;
                for (;;)
                {
                    _3737 = texelFetch(g_lightClassification, int((((_3095 << 5u) + (_3081 << 9u)) + (_3728 << 2u)) >> 2u)).x;
                    _3738 = _3737 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3738)
                    {
                        frontier_phi_74_pred = _3726;
                        frontier_phi_74_pred_1 = _3725;
                        frontier_phi_74_pred_2 = _3724;
                        frontier_phi_74_pred_3 = _3723;
                        frontier_phi_74_pred_4 = _3722;
                        frontier_phi_74_pred_5 = _3727;
                    }
                    else
                    {
                        float _3930;
                        float _3931;
                        float _3932;
                        float _3933;
                        float _3934;
                        float _3935;
                        float _4223;
                        float _4224;
                        float _4225;
                        float _4226;
                        float _4227;
                        float _4228;
                        float _3943 = _3722;
                        float _3944 = _3723;
                        float _3945 = _3724;
                        float _3946 = _3725;
                        float _3947 = _3726;
                        float _3948 = _3727;
                        uint _3949 = _3737;
                        uint _3950;
                        vec4 _3975;
                        float _3976;
                        vec4 _3991;
                        vec3 _4003;
                        vec4 _4018;
                        vec4 _4033;
                        float _4079;
                        bool _4080;
                        for (;;)
                        {
                            uint _3960 = ((_3728 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3949));
                            _3950 = (_3949 + 4294967295u) & _3949;
                            uint _3962 = _3960 * 40u;
                            _3975 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3962)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3962 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3962 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3962 + 3u)).x));
                            _3976 = _3975.w;
                            uint _3978 = (_3960 * 40u) + 4u;
                            _3991 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3978)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3978 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3978 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3978 + 3u)).x));
                            uint _3993 = (_3960 * 40u) + 8u;
                            _4003 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3993)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3993 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3993 + 2u)).x));
                            uint _4005 = (_3960 * 40u) + 16u;
                            _4018 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4005)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4005 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4005 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4005 + 3u)).x));
                            uint _4020 = (_3960 * 40u) + 20u;
                            _4033 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4020)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4020 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4020 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4020 + 3u)).x));
                            uint _4035 = (_3960 * 40u) + 24u;
                            vec4 _4048 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4035)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4035 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4035 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4035 + 3u)).x));
                            uint _4054 = (_3960 * 40u) + 28u;
                            vec4 _4067 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4054)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4054 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4054 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4054 + 3u)).x));
                            _4079 = fma(_2505, _4067.z, fma(_2504, _4067.y, _4067.x * _2503)) + _4067.w;
                            _4080 = !((fma(_2505, _4048.z, fma(_2504, _4048.y, _4048.x * _2503)) + _4048.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_4080)
                            {
                                float _4107 = _3975.x - _2503;
                                float _4108 = _3975.y - _2504;
                                float _4109 = _3975.z - _2505;
                                float _4110 = dot(vec3(_4107, _4108, _4109), vec3(_4107, _4108, _4109));
                                float _4113 = inversesqrt(_4110);
                                float _4114 = _4113 * _4107;
                                float _4115 = _4113 * _4108;
                                float _4116 = _4113 * _4109;
                                float _4120 = 1.0 - (_4110 / (_3976 * _3976));
                                float _5413 = isnan(0.0) ? _4120 : (isnan(_4120) ? 0.0 : max(_4120, 0.0));
                                float _4121 = isnan(1.0) ? _5413 : (isnan(_5413) ? 1.0 : min(_5413, 1.0));
                                float _4125 = sqrt(_4110) * _3991.w;
                                float _4127 = 1.39999997615814208984375 / (_4125 + 1.39999997615814208984375);
                                float _4128 = _4127 * _4127;
                                float _4131 = ((1.0 - _4128) * dot(vec3(_4114, _4115, _4116), vec3(_1320, _1323, _1326))) + _4128;
                                float _4134 = _4125 * _4125;
                                float _4138 = (fma(_2505, _4018.z, fma(_2504, _4018.y, _4018.x * _2503)) + _4018.w) / _4079;
                                float _4139 = (fma(_2505, _4033.z, fma(_2504, _4033.y, _4033.x * _2503)) + _4033.w) / _4079;
                                float _4143 = 1.0 - dot(vec2(_4138, _4139), vec2(_4138, _4139));
                                float _5429 = isnan(0.0) ? _4143 : (isnan(_4143) ? 0.0 : max(_4143, 0.0));
                                float _4144 = isnan(1.0) ? _5429 : (isnan(_5429) ? 1.0 : min(_5429, 1.0));
                                float _4145 = _4144 * (((isnan(0.0) ? _4131 : (isnan(_4131) ? 0.0 : max(_4131, 0.0))) * _4121) / ((_4134 * 0.699999988079071044921875) + 1.0));
                                float _4157 = exp2(log2(1.0 / ((_4134 * 3.5) + 5.0)) * 0.25);
                                float _4158 = 1.0 - _1393;
                                float _4165 = sqrt(1.0 - ((1.0 - (_4158 * _4158)) * (1.0 - (_4157 * _4157))));
                                float _4166 = _4165 * _4165;
                                float _4167 = _4166 * _4166;
                                float _4168 = _4114 - _3567;
                                float _4169 = _4115 - _3568;
                                float _4170 = _4116 - _3569;
                                float _4174 = inversesqrt(dot(vec3(_4168, _4169, _4170), vec3(_4168, _4169, _4170)));
                                float _4178 = dot(vec3(_1320, _1323, _1326), vec3((-0.0) - _3567, (-0.0) - _3568, (-0.0) - _3569));
                                float _5440 = isnan(0.0) ? _4178 : (isnan(_4178) ? 0.0 : max(_4178, 0.0));
                                float _4181 = isnan(1.0) ? _5440 : (isnan(_5440) ? 1.0 : min(_5440, 1.0));
                                float _4182 = dot(vec3(_1320, _1323, _1326), vec3(_4174 * _4168, _4174 * _4169, _4174 * _4170));
                                float _5451 = isnan(0.0) ? _4182 : (isnan(_4182) ? 0.0 : max(_4182, 0.0));
                                float _4185 = isnan(1.0) ? _5451 : (isnan(_5451) ? 1.0 : min(_5451, 1.0));
                                float _4189 = ((_4185 * _4185) * (_4167 + (-1.0))) + 1.0;
                                float _4190 = _4127 * _4166;
                                float _4191 = _4190 * _4190;
                                float _4197 = ((1.0 - _4191) * dot(vec3(_1320, _1323, _1326), vec3(_4114, _4115, _4116))) + _4191;
                                float _5462 = isnan(0.0) ? _4197 : (isnan(_4197) ? 0.0 : max(_4197, 0.0));
                                float _4198 = isnan(1.0) ? _5462 : (isnan(_5462) ? 1.0 : min(_5462, 1.0));
                                float _4199 = 1.0 - _4166;
                                float _4209 = (0.5 / (((_4198 * ((_4181 * _4199) + _4166)) + 9.9999999392252902907785028219223e-09) + (((_4198 * _4199) + _4166) * _4181))) * _4198;
                                float _5473 = isnan(0.0) ? _4209 : (isnan(_4209) ? 0.0 : max(_4209, 0.0));
                                float _4219 = (_4144 * _4121) * (((_4167 * 3.1415927410125732421875) * (isnan(1.0) ? _5473 : (isnan(_5473) ? 1.0 : min(_5473, 1.0)))) / ((_4189 * _4189) * ((_4134 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _4145 * _3991.z;
                                frontier_phi_80_pred_1 = _4145 * _3991.y;
                                frontier_phi_80_pred_2 = _4145 * _3991.x;
                                frontier_phi_80_pred_3 = _4219 * _4003.z;
                                frontier_phi_80_pred_4 = _4219 * _4003.y;
                                frontier_phi_80_pred_5 = _4219 * _4003.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _4228 = frontier_phi_80_pred;
                            _4227 = frontier_phi_80_pred_1;
                            _4226 = frontier_phi_80_pred_2;
                            _4225 = frontier_phi_80_pred_3;
                            _4224 = frontier_phi_80_pred_4;
                            _4223 = frontier_phi_80_pred_5;
                            _3933 = _4226 + _3946;
                            _3934 = _4227 + _3947;
                            _3935 = _4228 + _3948;
                            _3930 = _4223 + _3943;
                            _3931 = _4224 + _3944;
                            _3932 = _4225 + _3945;
                            if (_3950 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3943 = _3930;
                                _3944 = _3931;
                                _3945 = _3932;
                                _3946 = _3933;
                                _3947 = _3934;
                                _3948 = _3935;
                                _3949 = _3950;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3934;
                        frontier_phi_74_pred_1 = _3933;
                        frontier_phi_74_pred_2 = _3932;
                        frontier_phi_74_pred_3 = _3931;
                        frontier_phi_74_pred_4 = _3930;
                        frontier_phi_74_pred_5 = _3935;
                    }
                    _3550 = frontier_phi_74_pred;
                    _3548 = frontier_phi_74_pred_1;
                    _3546 = frontier_phi_74_pred_2;
                    _3544 = frontier_phi_74_pred_3;
                    _3542 = frontier_phi_74_pred_4;
                    _3552 = frontier_phi_74_pred_5;
                    uint _3729 = _3728 + 1u;
                    if (_3729 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3722 = _3542;
                        _3723 = _3544;
                        _3724 = _3546;
                        _3725 = _3548;
                        _3726 = _3550;
                        _3727 = _3552;
                        _3728 = _3729;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_54_55_ladder = _3552;
                frontier_phi_54_55_ladder_1 = _3550;
                frontier_phi_54_55_ladder_2 = _3548;
                frontier_phi_54_55_ladder_3 = _3546;
                frontier_phi_54_55_ladder_4 = _3542;
                frontier_phi_54_55_ladder_5 = _3544;
            }
            else
            {
                frontier_phi_54_55_ladder = _3362;
                frontier_phi_54_55_ladder_1 = _3360;
                frontier_phi_54_55_ladder_2 = _3358;
                frontier_phi_54_55_ladder_3 = _3356;
                frontier_phi_54_55_ladder_4 = _3352;
                frontier_phi_54_55_ladder_5 = _3354;
            }
            _3541 = frontier_phi_54_55_ladder_4;
            _3543 = frontier_phi_54_55_ladder_5;
            _3545 = frontier_phi_54_55_ladder_3;
            _3547 = frontier_phi_54_55_ladder_2;
            _3549 = frontier_phi_54_55_ladder_1;
            _3551 = frontier_phi_54_55_ladder;
        }
        float _3556 = isnan(1.0) ? _1364 : (isnan(_1364) ? 1.0 : min(_1364, 1.0));
        _3114 = (_3556 * _3547) + _2790;
        _3116 = (_3556 * _3549) + _2791;
        _3118 = (_3556 * _3551) + _2792;
        _3120 = ((_3541 * 0.039999999105930328369140625) * _3556) + _2949;
        _3122 = ((_3543 * 0.039999999105930328369140625) * _3556) + _2950;
        _3124 = ((_3545 * 0.039999999105930328369140625) * _3556) + _2951;
    }
    else
    {
        _3114 = _2790;
        _3116 = _2791;
        _3118 = _2792;
        _3120 = _2949;
        _3122 = _2950;
        _3124 = _2951;
    }
    uint _3130 = _1340 + uint(cbMatDynParam._m0[0u].w);
    float _3136 = cbInstanceData._m0[_3130].x * (_974 - (_974 * TEXCOORD_7.x));
    float _3137 = cbInstanceData._m0[_3130].y * (_976 - (_976 * TEXCOORD_7.y));
    float _3138 = cbInstanceData._m0[_3130].z * (_978 - (_978 * TEXCOORD_7.z));
    float _3151 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _3152 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _3153 = cbSceneParam._m0[86u].x * ((_1264 / cbSceneParam._m0[86u].x) + (((10.0 / (_1189 + 10.0)) * cbMtdParam._m0[20u].y) * dot(vec3(_1300, _1301, _1302), vec3(_235, _236, _237))));
    float _3154 = isnan(_3151) ? _3153 : (isnan(_3153) ? _3151 : min(_3153, _3151));
    float _3155 = isnan(_3152) ? _1265 : (isnan(_1265) ? _3152 : min(_1265, _3152));
    vec4 _3157 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_3154, _3155), 0.0);
    float _3159 = _3157.x;
    bool _3179 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3159)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3159))) > _1189;
    float _3180 = _3179 ? _3154 : _1264;
    float _3181 = _3179 ? _3155 : _1265;
    vec4 _3183 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_3180, _3181));
    vec4 _3188 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_3180, _3181));
    float _3190 = _3188.x;
    float _3210 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3190)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3190))) - _1189;
    bool _3220 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _3224 = (isnan(_3210) ? 0.0 : (isnan(0.0) ? _3210 : max(0.0, _3210))) * (-1.44269502162933349609375);
    float _5504 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
    float _5515 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
    float _5526 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
    float _3251 = 0.959999978542327880859375 - (exp2(log2(1.0 - (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0)))) * 5.0) * 0.959999978542327880859375);
    float _3254 = ((_3183.x * _3251) * exp2(_3224 * (_3220 ? 0.0 : (cbMtdParam._m0[39u].z + cbMtdParam._m0[38u].x)))) * cbSceneParam._m0[72u].w;
    float _3257 = ((_3183.y * _3251) * exp2(_3224 * (_3220 ? 0.0 : (cbMtdParam._m0[39u].w + cbMtdParam._m0[38u].y)))) * cbSceneParam._m0[72u].w;
    float _3260 = ((_3183.z * _3251) * exp2(_3224 * (_3220 ? 0.0 : (cbMtdParam._m0[40u].x + cbMtdParam._m0[38u].z)))) * cbSceneParam._m0[72u].w;
    float _3269 = ((_3136 + (((((_2405 * _2440.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0))) * _2200) * _2456)) + _3120) * cbPerFrame._m0[3u].x)) + _3254) + ((((isnan(1.0) ? _5504 : (isnan(_5504) ? 1.0 : min(_5504, 1.0))) * (_3114 + ((isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0))) * _1364))) - _3254) * _1110);
    float _3272 = ((_3137 + (((((_2405 * _2440.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0))) * _2200) * _2456)) + _3122) * cbPerFrame._m0[3u].x)) + _3257) + ((((isnan(1.0) ? _5515 : (isnan(_5515) ? 1.0 : min(_5515, 1.0))) * (_3116 + ((isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0))) * _1364))) - _3257) * _1110);
    float _3275 = ((_3138 + (((((_2405 * _2440.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0))) * _2200) * _2456)) + _3124) * cbPerFrame._m0[3u].x)) + _3260) + ((((isnan(1.0) ? _5526 : (isnan(_5526) ? 1.0 : min(_5526, 1.0))) * (_3118 + ((isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0))) * _1364))) - _3260) * _1110);
    float _3276 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
    float _3277 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
    float _3278 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
    float _3284 = cbMtdParam._m0[2u].x * _3136;
    float _3285 = cbMtdParam._m0[2u].y * _3137;
    float _3286 = cbMtdParam._m0[2u].z * _3138;
    float _5552 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3288 = isnan(1.0) ? _5552 : (isnan(_5552) ? 1.0 : min(_5552, 1.0));
    float _3293 = cbInstanceData._m0[_1339 + 6u].w * (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0)));
    float _3298 = _1264 / cbSceneParam._m0[86u].x;
    float _3299 = _1265 / cbSceneParam._m0[86u].y;
    vec4 _3313 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3298, _3299, (log2((isnan(cbSceneParam._m0[77u].w) ? _1189 : (isnan(_1189) ? cbSceneParam._m0[77u].w : min(_1189, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3315 = _3313.x;
    float _3316 = _3313.y;
    float _3317 = _3313.z;
    float _3318 = _3313.w;
    float _3413;
    float _3415;
    float _3417;
    float _3419;
    if (_1189 > cbSceneParam._m0[78u].w)
    {
        float _3377 = isnan(_1189) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1189 : min(cbSceneParam._m0[80u].w, _1189));
        float _3378 = _3377 / _1189;
        float _3389 = _3378 * _1238;
        float _3390 = _1239 * _3378;
        float _3391 = (-0.0) - _3390;
        float _3392 = _3378 * _1240;
        float _3394 = (cbSceneParam._m0[77u].w * _3391) / _3377;
        float _3395 = _3394 + cbSceneParam._m0[79u].w;
        float _3396 = cbSceneParam._m0[79u].w - _3390;
        float _3402 = sqrt(((_3389 * _3389) + (_3390 * _3390)) + (_3392 * _3392));
        float _3405 = (1.0 - (cbSceneParam._m0[77u].w / _3377)) * _3402;
        float _3410 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3411 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3679;
        if (abs((_3391 - _3394) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3679 = ((((_3395 > 0.0) ? exp2(_3410 * _3395) : (2.0 - exp2(_3411 * _3395))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3405;
        }
        else
        {
            float _3602 = 1.0 / cbSceneParam._m0[80u].x;
            float _3603 = isnan(_3396) ? _3395 : (isnan(_3395) ? _3396 : max(_3395, _3396));
            float _3604 = isnan(_3396) ? _3395 : (isnan(_3395) ? _3396 : min(_3395, _3396));
            float _3613 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : min(_3603, 0.0));
            float _3614 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : min(_3604, 0.0));
            _3679 = ((abs(_3402 / _3391) * cbSceneParam._m0[80u].y) * ((((_3613 - _3614) * 2.0) - ((exp2(_3410 * (isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0)))) - exp2(_3410 * (isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0))))) * _3602)) - ((exp2(_3411 * _3613) - exp2(_3411 * _3614)) * _3602))) + (_3405 * cbSceneParam._m0[80u].z);
        }
        vec4 _3681 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3298, _3299, 1.0), 0.0);
        float _3690 = exp2((_3679 * (-1.44269502162933349609375)) * (1.0 - _3681.w));
        float _3691 = log2(_3690);
        float _3707 = log2(_3318);
        _3413 = (exp2(_3707 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3691 * cbSceneParam._m0[78u].x)) * _3681.x) / cbSceneParam._m0[78u].x)) + _3315;
        _3415 = (exp2(_3707 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3691 * cbSceneParam._m0[78u].y)) * _3681.y) / cbSceneParam._m0[78u].y)) + _3316;
        _3417 = (exp2(_3707 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3691 * cbSceneParam._m0[78u].z)) * _3681.z) / cbSceneParam._m0[78u].z)) + _3317;
        _3419 = _3690 * _3318;
    }
    else
    {
        _3413 = _3315;
        _3415 = _3316;
        _3417 = _3317;
        _3419 = _3318;
    }
    bool _3717;
    float _3474;
    vec4 _3477;
    float _3479;
    vec4 _3481;
    float _3489;
    float _3490;
    float _3491;
    float _3495;
    float _3499;
    float _3503;
    float _3504;
    bool _3514;
    for (;;)
    {
        bool _3431 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _3432 = log2(_3419);
        float _3436 = exp2(_3432 * cbSceneParam._m0[78u].x);
        float _3437 = exp2(_3432 * cbSceneParam._m0[78u].y);
        float _3438 = exp2(_3432 * cbSceneParam._m0[78u].z);
        float _3439 = _3436 * _3276;
        float _3440 = _3437 * _3277;
        float _3441 = _3438 * _3278;
        vec4 _3449 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_1264, _1265));
        float _3451 = _3449.x;
        float _3472 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3451)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3451))) - _1189) * cbMtdParam._m0[24u].y;
        float _5603 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
        float _3473 = isnan(1.0) ? _5603 : (isnan(_5603) ? 1.0 : min(_5603, 1.0));
        _3474 = _3293 * _3473;
        float _3475 = _1254 + (-0.5);
        _3477 = cbMtdParam._m0[1u];
        _3479 = _3477.y * _3475;
        _3481 = cbMatDynParam._m0[0u];
        float _3488 = (roundEven(_3481.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3489 = _3488 * (_3431 ? _3439 : (_3439 + (cbSceneParam._m0[72u].w * _3413)));
        _3490 = _3488 * (_3431 ? _3440 : (_3440 + (cbSceneParam._m0[72u].w * _3415)));
        _3491 = _3488 * (_3431 ? _3441 : (_3441 + (cbSceneParam._m0[72u].w * _3417)));
        _3495 = (((_3284 * _3288) * _3436) * _3473) * _3488;
        _3499 = (((_3285 * _3288) * _3437) * _3473) * _3488;
        _3503 = (((_3286 * _3288) * _3438) * _3473) * _3488;
        _3504 = _3475 * 0.999000012874603271484375;
        _3514 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3514)
        {
            if ((cbInstanceData._m0[_1339 + 7u].x + _3504) < 0.5)
            {
                _3717 = true;
                break;
            }
        }
        uint _3637 = _1340 + uint(_3481.w);
        if ((cbInstanceData._m0[_3637].w < 1.0) && ((cbInstanceData._m0[_3637].w + _3504) < 0.5))
        {
            _3717 = true;
            break;
        }
        if ((_3479 + 1.0) < _3477.x)
        {
            _3717 = true;
            break;
        }
        _3717 = false;
        break;
    }
    float _3921;
    if (_3717)
    {
        discard_state = true;
        _3921 = 0.0;
    }
    else
    {
        _3921 = _3474;
    }
    SV_Target.x = _3489;
    SV_Target.y = _3490;
    SV_Target.z = _3491;
    SV_Target.w = _3921;
    SV_Target_1.x = _3495;
    SV_Target_1.y = _3499;
    SV_Target_1.z = _3503;
    SV_Target_1.w = _3474;
    discard_exit();
}


