#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[42];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 7) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 7) in float TEXCOORD_12;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1765;
float _4085;
float _4086;
float _4087;
float _4088;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _231 = _230 * _222;
    float _232 = _230 * _223;
    float _233 = _230 * _224;
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = _237 * NORMAL.x;
    float _239 = _237 * NORMAL.y;
    float _240 = _237 * NORMAL.z;
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245 = _244 * TANGENT.x;
    float _246 = _244 * TANGENT.y;
    float _247 = _244 * TANGENT.z;
    float _291 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _301 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _291);
    float _302 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _291);
    float _303 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _291);
    float _318 = cbMtdParam._m0[22u].x - cbMtdParam._m0[21u].w;
    float _320 = (sqrt(((_301 * _301) + (_302 * _302)) + (_303 * _303)) - cbMtdParam._m0[21u].w) / (isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0)));
    float _324 = _320 / cbMtdParam._m0[23u].z;
    float _325 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _326 = isnan(8.0) ? _325 : (isnan(_325) ? 8.0 : min(_325, 8.0));
    float _333 = cbMtdParam._m0[10u].x * _326;
    float _334 = cbMtdParam._m0[10u].y * _326;
    float _335 = cbMtdParam._m0[10u].z * _326;
    float _336 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _337 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _338 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _349 = cbMtdParam._m0[22u].y + _320;
    float _354 = _349 * cbMtdParam._m0[24u].z;
    float _4142 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    vec4 _372 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _375 = _372.x;
    float _399 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _375)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _375))) - POSITION_1.w) / cbMtdParam._m0[21u].x;
    float _4153 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _400 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _405 = 1.0 - (isnan(cbMtdParam._m0[26u].y) ? _400 : (isnan(_400) ? cbMtdParam._m0[26u].y : max(_400, cbMtdParam._m0[26u].y)));
    float _407 = (cbMtdParam._m0[26u].x + TEXCOORD_3.x) - (_405 * cbMtdParam._m0[21u].z);
    float _423 = (cbMtdParam._m0[29u].y + cbPerFrame._m0[22u].x) * cbMtdParam._m0[20u].z;
    float _431 = cbMtdParam._m0[34u].z * TEXCOORD.x;
    float _432 = cbMtdParam._m0[34u].w * TEXCOORD.y;
    vec4 _446 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_2, SS_BumpMap), vec2((((_423 * cbMtdParam._m0[35u].x) + _431) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_432 + (_423 * cbMtdParam._m0[35u].y)) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _448 = _446.x;
    float _449 = _446.y;
    float _4169 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _452 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _453 = _446.z - _452;
    float _4180 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _454 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _466 = (_454 * 0.00999999977648258209228515625) + TEXCOORD.x;
    float _468 = (_454 * (-0.00999999977648258209228515625)) + TEXCOORD.y;
    vec4 _481 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2(((_466 + (cbMtdParam._m0[31u].x * _423)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_468 + (cbMtdParam._m0[31u].y * _423)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _485 = _481.z;
    vec4 _499 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2(((_466 + (cbMtdParam._m0[30u].z * _423)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_468 + (cbMtdParam._m0[30u].w * _423)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _503 = _499.z;
    float _506 = (_405 - _446.w) + (isnan(_503) ? _485 : (isnan(_485) ? _503 : max(_485, _503)));
    float _4196 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _508 = (_407 * (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0)))) * (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0)));
    float _510 = _508 - (_508 * TEXCOORD_7.w);
    float _523 = (_510 + cbMtdParam._m0[9u].x) + (cbMtdParam._m0[16u].x * _454);
    float _524 = (_510 + cbMtdParam._m0[9u].y) + (cbMtdParam._m0[16u].y * _454);
    float _525 = (_510 + cbMtdParam._m0[9u].z) + (cbMtdParam._m0[16u].z * _454);
    vec4 _568 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * ((fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / cbMtdParam._m0[22u].z) + (cbMtdParam._m0[35u].z * _423))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * ((fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / cbMtdParam._m0[22u].z) + (cbMtdParam._m0[35u].w * _423))) + cbTextureTilingScale._m0[1u].w));
    float _573 = _568.z * 0.099999986588954925537109375;
    float _4207 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _575 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    float _579 = cbMtdParam._m0[24u].x * _320;
    float _4218 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _580 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _594 = (_523 + (isnan(0.07999999821186065673828125) ? _336 : (isnan(_336) ? 0.07999999821186065673828125 : min(_336, 0.07999999821186065673828125)))) + (_580 * (((1.0 - _523) - _575) + _573));
    float _596 = (_524 + (isnan(0.07999999821186065673828125) ? _337 : (isnan(_337) ? 0.07999999821186065673828125 : min(_337, 0.07999999821186065673828125)))) + (_580 * (((1.0 - _524) - _575) + _573));
    float _598 = (_525 + (isnan(0.07999999821186065673828125) ? _338 : (isnan(_338) ? 0.07999999821186065673828125 : min(_338, 0.07999999821186065673828125)))) + (_580 * (((1.0 - _525) + _573) - _575));
    float _4229 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _599 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _4240 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _600 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
    float _4251 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _601 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
    float _606 = _320 / cbMtdParam._m0[25u].z;
    float _4262 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _609 = (1.0 - (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0)))) * cbMtdParam._m0[25u].y;
    float _616 = ((cbMtdParam._m0[21u].y - cbMtdParam._m0[20u].x) * _452) + cbMtdParam._m0[20u].x;
    float _639 = (POSITION_1.w - cbMtdParam._m0[28u].w) * (1.0 / cbMtdParam._m0[28u].z);
    float _4273 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _640 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    float _654 = (cbMtdParam._m0[33u].z * _423) + _431;
    float _655 = (cbMtdParam._m0[33u].w * _423) + _432;
    vec4 _678 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * ((cbMtdParam._m0[33u].x * _423) + _431)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((cbMtdParam._m0[33u].y * _423) + _432)) + cbTextureTilingScale._m0[3u].w));
    float _685 = (_678.x * 2.0) + (-1.0);
    float _687 = (_678.y * 2.0) + (-1.0);
    float _691 = 1.0 - dot(vec2(_685, _687), vec2(_685, _687));
    float _4284 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _693 = sqrt(isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0)));
    float _696 = fma(_693, _238, fma(_687, _245, _685 * _231));
    float _699 = fma(_693, _239, fma(_687, _246, _685 * _232));
    float _702 = fma(_693, _240, fma(_687, _247, _685 * _233));
    float _706 = inversesqrt(dot(vec3(_696, _699, _702), vec3(_696, _699, _702)));
    float _707 = cbPerFrame._m0[22u].x * 2.0;
    float _708 = _707 * cbMtdParam._m0[27u].y;
    float _712 = ((_696 * 0.5) * _706) + (-0.25);
    float _716 = ((_699 * 0.5) * _706) + (-0.25);
    float _717 = _716 * cbMtdParam._m0[27u].z;
    float _719 = (-0.0) - (cbMtdParam._m0[27u].z * _712);
    float _720 = fract(_708);
    float _722 = fract(_708 + 0.5);
    float _733 = abs((_720 * 2.0) + (-1.0));
    vec4 _750 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_720 * _719) + _654) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_717 * _720) + _655) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    vec4 _755 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_722 * _719) + _654) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_717 * _722) + _655) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _766 = ((_755.x - _750.x) * _733) + _750.x;
    float _767 = ((_755.y - _750.y) * _733) + _750.y;
    float _768 = ((_755.z - _750.z) * _733) + _750.z;
    float _785 = (cbMtdParam._m0[32u].z * _423) + _431;
    float _786 = (cbMtdParam._m0[32u].w * _423) + _432;
    float _789 = _707 * cbMtdParam._m0[27u].x;
    float _790 = _716 * cbMtdParam._m0[26u].w;
    float _792 = (-0.0) - (cbMtdParam._m0[26u].w * _712);
    float _793 = fract(_789);
    float _795 = fract(_789 + 0.5);
    float _806 = abs((_793 * 2.0) + (-1.0));
    vec4 _823 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_793 * _792) + _785) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_790 * _793) + _786) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _825 = _823.x;
    float _826 = _823.y;
    float _827 = _823.z;
    vec4 _828 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_795 * _792) + _785) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_790 * _795) + _786) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _859 = (((((cbMtdParam._m0[17u].x - cbMtdParam._m0[19u].x) * _766) * cbMtdParam._m0[29u].z) + cbMtdParam._m0[19u].x) * (((_828.x - _825) * _806) + _825)) + (_766 * cbMtdParam._m0[18u].x);
    float _862 = (((((cbMtdParam._m0[17u].y - cbMtdParam._m0[19u].y) * _767) * cbMtdParam._m0[29u].z) + cbMtdParam._m0[19u].y) * (((_828.y - _826) * _806) + _826)) + (_767 * cbMtdParam._m0[18u].y);
    float _865 = ((((cbMtdParam._m0[29u].z * _768) * (cbMtdParam._m0[17u].z - cbMtdParam._m0[19u].z)) + cbMtdParam._m0[19u].z) * (((_828.z - _827) * _806) + _827)) + (_768 * cbMtdParam._m0[18u].z);
    float _869 = _859 - (_859 * _640);
    float _870 = _862 - (_862 * _640);
    float _871 = _865 - (_865 * _640);
    float _876 = (POSITION_1.w - cbMtdParam._m0[28u].y) * (1.0 / cbMtdParam._m0[28u].x);
    float _4295 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _877 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
    float _887 = (cbMtdParam._m0[34u].x * _423) + _431;
    float _888 = (cbMtdParam._m0[34u].y * _423) + _432;
    vec4 _901 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((_887 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_888 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _903 = _901.x;
    float _904 = _901.y;
    float _905 = _901.z;
    vec4 _927 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * _887) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _888) + cbTextureTilingScale._m0[7u].w));
    float _970 = (cbMtdParam._m0[29u].x * cbMtdParam._m0[15u].x) * ((_869 + (cbMtdParam._m0[14u].x * _510)) + ((((_903 * cbMtdParam._m0[11u].x) - _869) + (((((cbMtdParam._m0[13u].x - cbMtdParam._m0[12u].x) * _903) * cbMtdParam._m0[29u].w) + cbMtdParam._m0[12u].x) * _927.x)) * _877));
    float _972 = (cbMtdParam._m0[29u].x * cbMtdParam._m0[15u].y) * ((_870 + (cbMtdParam._m0[14u].y * _510)) + ((((_904 * cbMtdParam._m0[11u].y) - _870) + (((((cbMtdParam._m0[13u].y - cbMtdParam._m0[12u].y) * _904) * cbMtdParam._m0[29u].w) + cbMtdParam._m0[12u].y) * _927.y)) * _877));
    float _974 = (cbMtdParam._m0[29u].x * cbMtdParam._m0[15u].z) * ((_871 + (cbMtdParam._m0[14u].z * _510)) + ((((_905 * cbMtdParam._m0[11u].z) - _871) + ((((cbMtdParam._m0[29u].w * _905) * (cbMtdParam._m0[13u].z - cbMtdParam._m0[12u].z)) + cbMtdParam._m0[12u].z) * _927.z)) * _877));
    float _4306 = isnan(0.0) ? TEXCOORD_3.y : (isnan(TEXCOORD_3.y) ? 0.0 : max(TEXCOORD_3.y, 0.0));
    float _981 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _991 = _320 / cbMtdParam._m0[23u].w;
    float _4317 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _992 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
    float _993 = _454 * 0.23999999463558197021484375;
    float _995 = _454 * (-0.20000000298023223876953125);
    float _1006 = cbMtdParam._m0[36u].z * TEXCOORD.x;
    float _1007 = cbMtdParam._m0[36u].w * TEXCOORD.y;
    vec4 _1016 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[36u].x * _423) + _993) + _1006) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[36u].y * _423) + _995) + _1007) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _1041 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((((_1006 + _993) + (cbMtdParam._m0[37u].x * _423)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_1007 + _995) + (cbMtdParam._m0[37u].y * _423)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _1059 = (((_499.x + (-0.5)) * 0.5) + _481.x) + (((_1016.x + (-1.0)) + _1041.x) * cbMtdParam._m0[25u].w);
    float _1060 = (((_499.y + (-0.5)) * 0.5) + _481.y) + (((_1016.y + (-1.0)) + _1041.y) * cbMtdParam._m0[25u].w);
    float _1065 = ((_568.x - _1059) * _992) + _1059;
    float _1066 = ((_568.y - _1060) * _992) + _1060;
    float _1068 = _320 / cbMtdParam._m0[23u].y;
    float _4328 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _1069 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
    float _1085 = ((((_981 * (0.5 - _448)) + _448) + (((_1065 + (-0.5)) + ((0.5 - _1065) * _1069)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1086 = ((((_981 * (0.5 - _449)) + _449) + (((_1066 + (-0.5)) + ((0.5 - _1066) * _1069)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1087 = dot(vec2(_1085, _1086), vec2(_1085, _1086));
    float _4339 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    float _1092 = sqrt(1.0 - (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))));
    float _1094 = cbMtdParam._m0[24u].w * _349;
    float _4350 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _1103 = cbMtdParam._m0[22u].w * _349;
    float _4361 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _1105 = (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * cbMtdParam._m0[27u].w;
    float _4372 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _1106 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
    float _1111 = ((cbMtdParam._m0[25u].x - cbMtdParam._m0[23u].x) * (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0)))) + cbMtdParam._m0[23u].x;
    float _1116 = _1085 - (_1111 * _1085);
    float _1117 = _1086 - (_1111 * _1086);
    float _1118 = (_1111 * (1.0 - _1092)) + _1092;
    float _1137 = fma(_1092, _238, fma(_1086, _245, _1085 * _231));
    float _1140 = fma(_1092, _239, fma(_1086, _246, _1085 * _232));
    float _1143 = fma(_1092, _240, fma(_1086, _247, _1085 * _233));
    float _1147 = inversesqrt(dot(vec3(_1137, _1140, _1143), vec3(_1137, _1140, _1143)));
    float _1148 = _1147 * _1137;
    float _1149 = _1147 * _1140;
    float _1150 = _1147 * _1143;
    float _1153 = fma(_1118, _238, fma(_1117, _245, _1116 * _231));
    float _1156 = fma(_1118, _239, fma(_1117, _246, _1116 * _232));
    float _1159 = fma(_1118, _240, fma(_1117, _247, _1116 * _233));
    float _1163 = inversesqrt(dot(vec3(_1153, _1156, _1159), vec3(_1153, _1156, _1159)));
    float _1164 = _1163 * _1153;
    float _1165 = _1163 * _1156;
    float _1166 = _1163 * _1159;
    float _4383 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _4394 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _1168 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
    float _4405 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _4416 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _4427 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _1185 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1225 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1234 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1225);
    float _1235 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1225);
    float _1236 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1225);
    float _1240 = inversesqrt(dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236)));
    float _1241 = _1234 * _1240;
    float _1242 = _1235 * _1240;
    float _1243 = _1236 * _1240;
    vec4 _1248 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1250 = _1248.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1450 = sqrt(((_1234 * _1234) + (_1235 * _1235)) + (_1236 * _1236));
        float _1456 = (cbMatDynParam._m0[5u].x * _1450) + cbMatDynParam._m0[5u].y;
        float _4438 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1461 = (cbMatDynParam._m0[5u].z * _1450) + cbMatDynParam._m0[5u].w;
        float _4449 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) - _1457)) + _1457) < ((_1250 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1260 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1261 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1263 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1272 = (_1263.x * 2.0) + (-1.0);
    float _1273 = (_1263.y * 2.0) + (-1.0);
    float _1274 = (_1263.z * 2.0) + (-1.0);
    float _1278 = inversesqrt(dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274)));
    float _1289 = ((TEXCOORD.w >= 1.0) || (((TEXCOORD.z <= 0.0) || (TEXCOORD.z >= 1.0)) || (TEXCOORD.w <= 0.0))) ? 0.0 : _1263.w;
    float _1296 = (((_1272 * _1278) - _1148) * _1289) + _1148;
    float _1297 = (((_1273 * _1278) - _1149) * _1289) + _1149;
    float _1298 = (((_1274 * _1278) - _1150) * _1289) + _1150;
    float _1316 = fma(_1298, cbSceneParam._m0[5u].z, fma(_1297, cbSceneParam._m0[5u].y, _1296 * cbSceneParam._m0[5u].x));
    float _1319 = fma(_1298, cbSceneParam._m0[6u].z, fma(_1297, cbSceneParam._m0[6u].y, _1296 * cbSceneParam._m0[6u].x));
    float _1322 = fma(_1298, cbSceneParam._m0[7u].z, fma(_1297, cbSceneParam._m0[7u].y, _1296 * cbSceneParam._m0[7u].x));
    uint _1335 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1336 = _1335 + 9u;
    uint _1337 = _1336 + uint(cbMatDynParam._m0[0u].w);
    float _1343 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0)))) * cbInstanceData._m0[_1337].x;
    float _1344 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0)))) * cbInstanceData._m0[_1337].y;
    float _1345 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0)))) * cbInstanceData._m0[_1337].z;
    float _4460 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
    float _1346 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
    float _4471 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
    float _1347 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
    float _4482 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
    float _1348 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
    vec4 _1357 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1260, cbSceneParam._m0[86u].y * _1261));
    float _1360 = _1357.x * TEXCOORD_3.w;
    float _1364 = abs(dot(vec3(_1241, _1242, _1243), vec3(_1296, _1297, _1298)));
    float _4493 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
    float _1377 = dot(vec3(_1164, _1165, _1166), vec3(_1241, _1242, _1243)) * 2.0;
    float _1381 = (_1377 * _1164) - _1241;
    float _1382 = (_1377 * _1165) - _1242;
    float _1383 = (_1377 * _1166) - _1243;
    float _1387 = abs(dot(vec3(_1241, _1242, _1243), vec3(_1164, _1165, _1166)));
    float _4504 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
    float _1389 = sqrt(_1168);
    float _1401 = exp2((_1389 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1389 * 3.0));
    float _1432 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1436 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1440 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1764;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1493 = fma(_1440, cbModelParam._m0[26u].z, fma(_1436, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1432));
        float _1497 = fma(_1440, cbModelParam._m0[27u].z, fma(_1436, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1432));
        float _1501 = fma(_1440, cbModelParam._m0[28u].z, fma(_1436, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1432));
        float _1523 = _1432 + _1164;
        float _1524 = _1436 + _1165;
        float _1525 = _1440 + _1166;
        float _1535 = fma(_1525, cbModelParam._m0[26u].z, fma(_1524, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1523)) - _1493;
        float _1536 = fma(_1525, cbModelParam._m0[27u].z, fma(_1524, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1523)) - _1497;
        float _1537 = fma(_1525, cbModelParam._m0[28u].z, fma(_1524, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1523)) - _1501;
        float _1541 = inversesqrt(dot(vec3(_1535, _1536, _1537), vec3(_1535, _1536, _1537)));
        float _1553 = ((_1541 * _1535) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1493 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1554 = ((_1541 * _1536) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1497 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1555 = ((_1541 * _1537) / cbModelParam._m0[34u].z) + ((((((_1501 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1558 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1553, _1554, _1555), 0.0);
        vec4 _1565 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1553, _1554, _1555), 0.0);
        vec4 _1572 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1553, _1554, _1555), 0.0);
        vec4 _1579 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1553, _1554, _1555), 0.0);
        float _1592 = exp2((_1558.w + (-0.5)) * 20.0) * 2.0;
        float _1593 = _1592 * (_1558.x + (-0.5));
        float _1594 = _1592 * (_1558.y + (-0.5));
        float _1595 = _1592 * (_1558.z + (-0.5));
        float _1602 = exp2((_1565.w + (-0.5)) * 20.0) * 2.0;
        float _1603 = _1602 * (_1565.x + (-0.5));
        float _1604 = _1602 * (_1565.y + (-0.5));
        float _1605 = _1602 * (_1565.z + (-0.5));
        float _1612 = exp2((_1572.w + (-0.5)) * 20.0) * 2.0;
        float _1613 = _1612 * (_1572.x + (-0.5));
        float _1614 = _1612 * (_1572.y + (-0.5));
        float _1615 = _1612 * (_1572.z + (-0.5));
        float _1622 = exp2((_1579.w + (-0.5)) * 20.0) * 2.0;
        float _1623 = _1622 * (_1579.x + (-0.5));
        float _1624 = _1622 * (_1579.y + (-0.5));
        float _1625 = _1622 * (_1579.z + (-0.5));
        float _1626 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1627 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1628 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1629 = _1593 * 0.5;
        float _1630 = _1603 * 0.5;
        float _1631 = _1613 * 0.5;
        float _1632 = dot(vec3(_1629, _1630, _1631), vec3(_1629, _1630, _1631));
        float _1637 = (_1632 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1632);
        float _1646 = (dot(vec3(_1164, _1165, _1166), vec3(_1637 * _1629, _1637 * _1630, _1637 * _1631)) + 1.0) * 0.5;
        float _4530 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1656 = sqrt(((_1630 * _1630) + (_1629 * _1629)) + (_1631 * _1631)) / (_1626 + 9.9999997473787516355514526367188e-06);
        float _4541 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _1658 = _1657 * 2.0;
        float _1662 = (1.0 - _1657) / (_1657 + 1.0);
        float _4552 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _1672 = ((((1.0 - _1663) * (_1658 + 2.0)) * exp2(log2(isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * (_1658 + 1.0))) + _1663) * _1626;
        float _1673 = _1594 * 0.5;
        float _1674 = _1604 * 0.5;
        float _1675 = _1614 * 0.5;
        float _1676 = dot(vec3(_1673, _1674, _1675), vec3(_1673, _1674, _1675));
        float _1681 = (_1676 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1676);
        float _1689 = (dot(vec3(_1164, _1165, _1166), vec3(_1681 * _1673, _1681 * _1674, _1681 * _1675)) + 1.0) * 0.5;
        float _4563 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1698 = sqrt(((_1674 * _1674) + (_1673 * _1673)) + (_1675 * _1675)) / (_1627 + 9.9999997473787516355514526367188e-06);
        float _4574 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
        float _1700 = _1699 * 2.0;
        float _1704 = (1.0 - _1699) / (_1699 + 1.0);
        float _4585 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1705 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
        float _1714 = ((((1.0 - _1705) * (_1700 + 2.0)) * exp2(log2(isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0))) * (_1700 + 1.0))) + _1705) * _1627;
        float _1715 = _1595 * 0.5;
        float _1716 = _1605 * 0.5;
        float _1717 = _1615 * 0.5;
        float _1718 = dot(vec3(_1715, _1716, _1717), vec3(_1715, _1716, _1717));
        float _1723 = (_1718 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1718);
        float _1731 = (dot(vec3(_1164, _1165, _1166), vec3(_1723 * _1715, _1723 * _1716, _1723 * _1717)) + 1.0) * 0.5;
        float _4596 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1740 = sqrt(((_1716 * _1716) + (_1715 * _1715)) + (_1717 * _1717)) / (_1628 + 9.9999997473787516355514526367188e-06);
        float _4607 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1741 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
        float _1742 = _1741 * 2.0;
        float _1746 = (1.0 - _1741) / (_1741 + 1.0);
        float _4618 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1747 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
        float _1756 = ((((1.0 - _1747) * (_1742 + 2.0)) * exp2(log2(isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_1742 + 1.0))) + _1747) * _1628;
        _1764 = _1595;
        _1766 = _1594;
        _1767 = _1593;
        _1768 = _1605;
        _1769 = _1604;
        _1770 = _1603;
        _1771 = _1615;
        _1772 = _1614;
        _1773 = _1613;
        _1774 = _1628;
        _1775 = _1627;
        _1776 = _1626;
        _1777 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)));
        _1778 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)));
        _1779 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)));
    }
    else
    {
        _1764 = _1765;
        _1766 = _1765;
        _1767 = _1765;
        _1768 = _1765;
        _1769 = _1765;
        _1770 = _1765;
        _1771 = _1765;
        _1772 = _1765;
        _1773 = _1765;
        _1774 = _1765;
        _1775 = _1765;
        _1776 = _1765;
        _1777 = 0.0;
        _1778 = 0.0;
        _1779 = 0.0;
    }
    float _2072;
    float _2073;
    float _2074;
    float _2075;
    float _2076;
    float _2077;
    float _2078;
    float _2079;
    float _2080;
    float _2081;
    float _2082;
    float _2083;
    float _2084;
    float _2085;
    float _2086;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1805 = fma(_1440, cbModelParam._m0[30u].z, fma(_1436, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1432));
        float _1809 = fma(_1440, cbModelParam._m0[31u].z, fma(_1436, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1432));
        float _1813 = fma(_1440, cbModelParam._m0[32u].z, fma(_1436, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1432));
        float _1835 = _1432 + _1164;
        float _1836 = _1436 + _1165;
        float _1837 = _1440 + _1166;
        float _1847 = fma(_1837, cbModelParam._m0[30u].z, fma(_1836, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1835)) - _1805;
        float _1848 = fma(_1837, cbModelParam._m0[31u].z, fma(_1836, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1835)) - _1809;
        float _1849 = fma(_1837, cbModelParam._m0[32u].z, fma(_1836, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1835)) - _1813;
        float _1853 = inversesqrt(dot(vec3(_1847, _1848, _1849), vec3(_1847, _1848, _1849)));
        float _1865 = ((_1853 * _1847) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1805 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1866 = ((_1853 * _1848) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1809 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1867 = ((_1853 * _1849) / cbModelParam._m0[35u].z) + ((((((_1813 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1869 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1865, _1866, _1867), 0.0);
        vec4 _1876 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1865, _1866, _1867), 0.0);
        vec4 _1883 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1865, _1866, _1867), 0.0);
        vec4 _1890 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1865, _1866, _1867), 0.0);
        float _1902 = exp2((_1869.w + (-0.5)) * 20.0) * 2.0;
        float _1903 = _1902 * (_1869.x + (-0.5));
        float _1904 = _1902 * (_1869.y + (-0.5));
        float _1905 = _1902 * (_1869.z + (-0.5));
        float _1912 = exp2((_1876.w + (-0.5)) * 20.0) * 2.0;
        float _1913 = _1912 * (_1876.x + (-0.5));
        float _1914 = _1912 * (_1876.y + (-0.5));
        float _1915 = _1912 * (_1876.z + (-0.5));
        float _1922 = exp2((_1883.w + (-0.5)) * 20.0) * 2.0;
        float _1923 = _1922 * (_1883.x + (-0.5));
        float _1924 = _1922 * (_1883.y + (-0.5));
        float _1925 = _1922 * (_1883.z + (-0.5));
        float _1932 = exp2((_1890.w + (-0.5)) * 20.0) * 2.0;
        float _1933 = _1932 * (_1890.x + (-0.5));
        float _1934 = _1932 * (_1890.y + (-0.5));
        float _1935 = _1932 * (_1890.z + (-0.5));
        float _1936 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
        float _1937 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
        float _1938 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
        float _1939 = _1903 * 0.5;
        float _1940 = _1913 * 0.5;
        float _1941 = _1923 * 0.5;
        float _1942 = dot(vec3(_1939, _1940, _1941), vec3(_1939, _1940, _1941));
        float _1947 = (_1942 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1942);
        float _1955 = (dot(vec3(_1164, _1165, _1166), vec3(_1947 * _1939, _1947 * _1940, _1947 * _1941)) + 1.0) * 0.5;
        float _4659 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1964 = sqrt(((_1940 * _1940) + (_1939 * _1939)) + (_1941 * _1941)) / (_1936 + 9.9999997473787516355514526367188e-06);
        float _4670 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
        float _1965 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
        float _1966 = _1965 * 2.0;
        float _1970 = (1.0 - _1965) / (_1965 + 1.0);
        float _4681 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1971 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
        float _1980 = ((((1.0 - _1971) * (_1966 + 2.0)) * exp2(log2(isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * (_1966 + 1.0))) + _1971) * _1936;
        float _1981 = _1904 * 0.5;
        float _1982 = _1914 * 0.5;
        float _1983 = _1924 * 0.5;
        float _1984 = dot(vec3(_1981, _1982, _1983), vec3(_1981, _1982, _1983));
        float _1989 = (_1984 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1984);
        float _1997 = (dot(vec3(_1164, _1165, _1166), vec3(_1989 * _1981, _1989 * _1982, _1989 * _1983)) + 1.0) * 0.5;
        float _4692 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
        float _2006 = sqrt(((_1982 * _1982) + (_1981 * _1981)) + (_1983 * _1983)) / (_1937 + 9.9999997473787516355514526367188e-06);
        float _4703 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2007 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
        float _2008 = _2007 * 2.0;
        float _2012 = (1.0 - _2007) / (_2007 + 1.0);
        float _4714 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
        float _2013 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
        float _2022 = ((((1.0 - _2013) * (_2008 + 2.0)) * exp2(log2(isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0))) * (_2008 + 1.0))) + _2013) * _1937;
        float _2023 = _1905 * 0.5;
        float _2024 = _1915 * 0.5;
        float _2025 = _1925 * 0.5;
        float _2026 = dot(vec3(_2023, _2024, _2025), vec3(_2023, _2024, _2025));
        float _2031 = (_2026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2026);
        float _2039 = (dot(vec3(_1164, _1165, _1166), vec3(_2031 * _2023, _2031 * _2024, _2031 * _2025)) + 1.0) * 0.5;
        float _4725 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2048 = sqrt(((_2024 * _2024) + (_2023 * _2023)) + (_2025 * _2025)) / (_1938 + 9.9999997473787516355514526367188e-06);
        float _4736 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        float _2049 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
        float _2050 = _2049 * 2.0;
        float _2054 = (1.0 - _2049) / (_2049 + 1.0);
        float _4747 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2055 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
        float _2064 = ((((1.0 - _2055) * (_2050 + 2.0)) * exp2(log2(isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0))) * (_2050 + 1.0))) + _2055) * _1938;
        _2072 = _1905;
        _2073 = _1904;
        _2074 = _1903;
        _2075 = _1915;
        _2076 = _1914;
        _2077 = _1913;
        _2078 = _1925;
        _2079 = _1924;
        _2080 = _1923;
        _2081 = _1938;
        _2082 = _1937;
        _2083 = _1936;
        _2084 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0)));
        _2085 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0)));
        _2086 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0)));
    }
    else
    {
        _2072 = _1765;
        _2073 = _1765;
        _2074 = _1765;
        _2075 = _1765;
        _2076 = _1765;
        _2077 = _1765;
        _2078 = _1765;
        _2079 = _1765;
        _2080 = _1765;
        _2081 = _1765;
        _2082 = _1765;
        _2083 = _1765;
        _2084 = 0.0;
        _2085 = 0.0;
        _2086 = 0.0;
    }
    float _2096 = (cbModelParam._m0[1u].x * (_2084 - _1777)) + _1777;
    float _2097 = (cbModelParam._m0[1u].x * (_2085 - _1778)) + _1778;
    float _2098 = (cbModelParam._m0[1u].x * (_2086 - _1779)) + _1779;
    float _2119 = fma(_2098, cbSceneParam._m0[89u].z, fma(_2097, cbSceneParam._m0[89u].y, _2096 * cbSceneParam._m0[89u].x));
    float _2122 = fma(_2098, cbSceneParam._m0[90u].z, fma(_2097, cbSceneParam._m0[90u].y, _2096 * cbSceneParam._m0[90u].x));
    float _2125 = fma(_2098, cbSceneParam._m0[91u].z, fma(_2097, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2096));
    float _2138 = _1381 * 0.5;
    float _2139 = _1382 * 0.5;
    float _2140 = _1383 * 0.5;
    float _2141 = dot(vec4(_2138, _2139, _2140, 1.0), vec4(_2074, _2077, _2080, _2083));
    float _2144 = dot(vec4(_2138, _2139, _2140, 1.0), vec4(_2073, _2076, _2079, _2082));
    float _2147 = dot(vec4(_2138, _2139, _2140, 1.0), vec4(_2072, _2075, _2078, _2081));
    float _2181;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2154 = dot(vec4(_2138, _2139, _2140, 1.0), vec4(_1764, _1768, _1771, _1774));
        float _2158 = dot(vec4(_2138, _2139, _2140, 1.0), vec4(_1766, _1769, _1772, _1775));
        float _2162 = dot(vec4(_2138, _2139, _2140, 1.0), vec4(_1767, _1770, _1773, _1776));
        float _2169 = dot(vec4(cbModelParam._m0[39u]), vec4(_2138, _2139, _2140, 1.0));
        _2181 = dot(vec3(isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0)), isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0)), isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2169) ? 0.0 : (isnan(0.0) ? _2169 : max(0.0, _2169))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2181 = 1.0;
    }
    float _2192;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2183 = dot(vec4(cbModelParam._m0[40u]), vec4(_2138, _2139, _2140, 1.0));
        _2192 = dot(vec3(isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0)), isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0)), isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2183) ? 0.0 : (isnan(0.0) ? _2183 : max(0.0, _2183))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2192 = 1.0;
    }
    float _2196 = (_2192 * cbModelParam._m0[1u].x) + (_2181 * (1.0 - cbModelParam._m0[1u].x));
    float _2206 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1168);
    float _2207 = isnan(_2206) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2206 : min(cbModelParam._m0[25u].z, _2206));
    float _2287;
    float _2289;
    float _2291;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2254 = fma(_1440, cbModelParam._m0[13u].z, fma(_1436, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1432)) + cbModelParam._m0[13u].w;
        float _2258 = fma(_1440, cbModelParam._m0[14u].z, fma(_1436, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1432)) + cbModelParam._m0[14u].w;
        float _2262 = fma(_1440, cbModelParam._m0[15u].z, fma(_1436, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1432)) + cbModelParam._m0[15u].w;
        float _2265 = fma(_1383, cbModelParam._m0[13u].z, fma(_1382, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1381));
        float _2268 = fma(_1383, cbModelParam._m0[14u].z, fma(_1382, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1381));
        float _2271 = fma(_1383, cbModelParam._m0[15u].z, fma(_1382, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1381));
        float _2299;
        if (_2265 > 0.0)
        {
            _2299 = abs((1.0 - _2254) / _2265);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2265 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2254 + 1.0) / _2265);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2299 = frontier_phi_17_15_ladder;
        }
        float _2687;
        if (_2268 > 0.0)
        {
            _2687 = abs((1.0 - _2258) / _2268);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2268 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2258 + 1.0) / _2268);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2687 = frontier_phi_26_22_ladder;
        }
        float _3181;
        if (_2271 > 0.0)
        {
            _3181 = abs((1.0 - _2262) / _2271);
        }
        else
        {
            float frontier_phi_40_33_ladder;
            if (_2271 < 0.0)
            {
                frontier_phi_40_33_ladder = abs((_2262 + 1.0) / _2271);
            }
            else
            {
                frontier_phi_40_33_ladder = 5000.0;
            }
            _3181 = frontier_phi_40_33_ladder;
        }
        float _3183 = isnan(_2687) ? _2299 : (isnan(_2299) ? _2687 : min(_2299, _2687));
        float _3184 = isnan(_3181) ? _3183 : (isnan(_3183) ? _3181 : min(_3183, _3181));
        float _3188 = (_3184 * _2265) + _2254;
        float _3189 = (_3184 * _2268) + _2258;
        float _3190 = (_3184 * _2271) + _2262;
        float _3191 = _3184 * 9.9999997473787516355514526367188e-05;
        float _3192 = (-1.0) - _3191;
        float _3194 = _3191 + 1.0;
        float frontier_phi_16_40_ladder;
        float frontier_phi_16_40_ladder_1;
        float frontier_phi_16_40_ladder_2;
        if ((_3190 > _3194) || ((_3190 < _3192) || ((_3189 > _3194) || ((_3189 < _3192) || ((_3188 < _3192) || (_3188 > _3194))))))
        {
            frontier_phi_16_40_ladder = 0.0;
            frontier_phi_16_40_ladder_1 = 0.0;
            frontier_phi_16_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3332 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_3190, cbModelParam._m0[9u].z, fma(_3189, cbModelParam._m0[9u].y, _3188 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_3190, cbModelParam._m0[10u].z, fma(_3189, cbModelParam._m0[10u].y, _3188 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_3190, cbModelParam._m0[11u].z, fma(_3189, cbModelParam._m0[11u].y, _3188 * cbModelParam._m0[11u].x))), _2207);
            frontier_phi_16_40_ladder = _3332.z * cbModelParam._m0[1u].y;
            frontier_phi_16_40_ladder_1 = _3332.y * cbModelParam._m0[1u].y;
            frontier_phi_16_40_ladder_2 = _3332.x * cbModelParam._m0[1u].y;
        }
        _2287 = frontier_phi_16_40_ladder_2;
        _2289 = frontier_phi_16_40_ladder_1;
        _2291 = frontier_phi_16_40_ladder;
    }
    else
    {
        vec4 _2275 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1381, _1382, _1383), _2207);
        _2287 = _2275.x * cbModelParam._m0[1u].y;
        _2289 = _2275.y * cbModelParam._m0[1u].y;
        _2291 = _2275.z * cbModelParam._m0[1u].y;
    }
    float _2295 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1168);
    float _2296 = isnan(_2295) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2295 : min(cbModelParam._m0[25u].w, _2295));
    float _2385;
    float _2387;
    float _2389;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2349 = fma(_1440, cbModelParam._m0[21u].z, fma(_1436, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1432)) + cbModelParam._m0[21u].w;
        float _2353 = fma(_1440, cbModelParam._m0[22u].z, fma(_1436, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1432)) + cbModelParam._m0[22u].w;
        float _2357 = fma(_1440, cbModelParam._m0[23u].z, fma(_1436, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1432)) + cbModelParam._m0[23u].w;
        float _2360 = fma(_1383, cbModelParam._m0[21u].z, fma(_1382, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1381));
        float _2363 = fma(_1383, cbModelParam._m0[22u].z, fma(_1382, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1381));
        float _2366 = fma(_1383, cbModelParam._m0[23u].z, fma(_1382, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1381));
        float _2692;
        if (_2360 > 0.0)
        {
            _2692 = abs((1.0 - _2349) / _2360);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2360 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2349 + 1.0) / _2360);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2692 = frontier_phi_28_24_ladder;
        }
        float _3207;
        if (_2363 > 0.0)
        {
            _3207 = abs((1.0 - _2353) / _2363);
        }
        else
        {
            float frontier_phi_42_35_ladder;
            if (_2363 < 0.0)
            {
                frontier_phi_42_35_ladder = abs((_2353 + 1.0) / _2363);
            }
            else
            {
                frontier_phi_42_35_ladder = 5000.0;
            }
            _3207 = frontier_phi_42_35_ladder;
        }
        float _3397;
        if (_2366 > 0.0)
        {
            _3397 = abs((1.0 - _2357) / _2366);
        }
        else
        {
            float frontier_phi_60_53_ladder;
            if (_2366 < 0.0)
            {
                frontier_phi_60_53_ladder = abs((_2357 + 1.0) / _2366);
            }
            else
            {
                frontier_phi_60_53_ladder = 5000.0;
            }
            _3397 = frontier_phi_60_53_ladder;
        }
        float _3399 = isnan(_3207) ? _2692 : (isnan(_2692) ? _3207 : min(_2692, _3207));
        float _3400 = isnan(_3397) ? _3399 : (isnan(_3399) ? _3397 : min(_3399, _3397));
        float _3404 = (_3400 * _2360) + _2349;
        float _3405 = (_3400 * _2363) + _2353;
        float _3406 = (_3400 * _2366) + _2357;
        float _3407 = _3400 * 9.9999997473787516355514526367188e-05;
        float _3408 = (-1.0) - _3407;
        float _3410 = _3407 + 1.0;
        float frontier_phi_25_60_ladder;
        float frontier_phi_25_60_ladder_1;
        float frontier_phi_25_60_ladder_2;
        if ((_3406 > _3410) || ((_3406 < _3408) || ((_3405 > _3410) || ((_3405 < _3408) || ((_3404 < _3408) || (_3404 > _3410))))))
        {
            frontier_phi_25_60_ladder = 0.0;
            frontier_phi_25_60_ladder_1 = 0.0;
            frontier_phi_25_60_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3648 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3406, cbModelParam._m0[17u].z, fma(_3405, cbModelParam._m0[17u].y, _3404 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3406, cbModelParam._m0[18u].z, fma(_3405, cbModelParam._m0[18u].y, _3404 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3406, cbModelParam._m0[19u].z, fma(_3405, cbModelParam._m0[19u].y, _3404 * cbModelParam._m0[19u].x))), _2296);
            frontier_phi_25_60_ladder = _3648.x * cbModelParam._m0[1u].z;
            frontier_phi_25_60_ladder_1 = _3648.z * cbModelParam._m0[1u].z;
            frontier_phi_25_60_ladder_2 = _3648.y * cbModelParam._m0[1u].z;
        }
        _2385 = frontier_phi_25_60_ladder;
        _2387 = frontier_phi_25_60_ladder_2;
        _2389 = frontier_phi_25_60_ladder_1;
    }
    else
    {
        vec4 _2369 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1381, _1382, _1383), _2296);
        _2385 = _2369.x * cbModelParam._m0[1u].z;
        _2387 = _2369.y * cbModelParam._m0[1u].z;
        _2389 = _2369.z * cbModelParam._m0[1u].z;
    }
    float _2401 = ((((1.0 - _1401) * ((_1389 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1401 * _1389)) * _1360;
    float _2402 = _2401 * ((cbModelParam._m0[1u].w * (_2385 - _2287)) + _2287);
    float _2403 = _2401 * ((cbModelParam._m0[1u].w * (_2387 - _2289)) + _2289);
    float _2404 = _2401 * ((cbModelParam._m0[1u].w * (_2389 - _2291)) + _2291);
    float _2407 = fma(_2404, cbSceneParam._m0[89u].z, fma(_2403, cbSceneParam._m0[89u].y, _2402 * cbSceneParam._m0[89u].x));
    float _2410 = fma(_2404, cbSceneParam._m0[90u].z, fma(_2403, cbSceneParam._m0[90u].y, _2402 * cbSceneParam._m0[90u].x));
    float _2413 = fma(_2404, cbSceneParam._m0[91u].z, fma(_2403, cbSceneParam._m0[91u].y, _2402 * cbSceneParam._m0[91u].x));
    float _2432 = (cbSceneParam._m0[88u].y * (1.0 - _1168)) + cbSceneParam._m0[88u].z;
    float _4873 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    vec4 _2436 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(_1260, _1261), (isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0))) * 5.0);
    float _2452 = 1.0 - _2436.w;
    uvec4 _2462 = floatBitsToUint(cbInstanceData._m0[_1335 + 5u]);
    uint _2464 = _2462.x * 14u;
    uint _2465 = _2464 + 13u;
    float _2470 = _1360 + (-1.0);
    float _2473 = (cbLight._m0[_2465].x * _2470) + 1.0;
    float _2474 = (cbLight._m0[_2465].y * _2470) + 1.0;
    uint _2475 = _2464 + 5u;
    float _2481 = isnan(1.0) ? _2474 : (isnan(_2474) ? 1.0 : min(_2474, 1.0));
    uint _2485 = _2464 + 4u;
    float _2491 = isnan(1.0) ? _2473 : (isnan(_2473) ? 1.0 : min(_2473, 1.0));
    uint _2495 = _2464 | 1u;
    float _2506 = dot(vec3(cbLight._m0[_2464].xyz), vec3(_1296, _1297, _1298));
    float _2509 = dot(vec3(cbLight._m0[_2495].xyz), vec3(_1296, _1297, _1298));
    float _4894 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
    float _4905 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
    float _2514 = (isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0))) * 0.3183098733425140380859375;
    float _2516 = (isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0))) * 0.3183098733425140380859375;
    float _2523 = ((cbLight._m0[_2475].x * _2481) * _2516) + ((cbLight._m0[_2485].x * _2491) * _2514);
    float _2524 = ((_2481 * cbLight._m0[_2475].y) * _2516) + ((_2491 * cbLight._m0[_2485].y) * _2514);
    float _2525 = ((_2481 * cbLight._m0[_2475].z) * _2516) + ((_2491 * cbLight._m0[_2485].z) * _2514);
    uint _2527 = _2464 + 8u;
    float _2540 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2464].w)) * _1168) * 0.949999988079071044921875);
    float _2541 = _2540 * _2540;
    float _2542 = cbLight._m0[_2464].x + _1241;
    float _2543 = cbLight._m0[_2464].y + _1242;
    float _2544 = cbLight._m0[_2464].z + _1243;
    float _2548 = inversesqrt(dot(vec3(_2542, _2543, _2544), vec3(_2542, _2543, _2544)));
    float _2549 = _2548 * _2542;
    float _2550 = _2548 * _2543;
    float _2551 = _2548 * _2544;
    float _2552 = dot(vec3(_1296, _1297, _1298), vec3(cbLight._m0[_2464].xyz));
    float _4916 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
    float _2555 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
    float _2556 = dot(vec3(_1296, _1297, _1298), vec3(_1241, _1242, _1243));
    float _4927 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
    float _2559 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
    float _2560 = dot(vec3(_1296, _1297, _1298), vec3(_2549, _2550, _2551));
    float _4938 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
    float _2563 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
    float _2564 = dot(vec3(cbLight._m0[_2464].xyz), vec3(_2549, _2550, _2551));
    float _4949 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
    float _2568 = _2541 * _2541;
    float _2572 = ((_2563 * _2563) * (_2568 + (-1.0))) + 1.0;
    float _2583 = (exp2(log2(1.0 - (isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2584 = 1.0 - _2541;
    float _2595 = (0.5 / (((_2559 * ((_2555 * _2584) + _2541)) + 9.9999999392252902907785028219223e-09) + (((_2559 * _2584) + _2541) * _2555))) * _2555;
    float _4960 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
    float _2597 = (isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0))) * (_2568 / ((_2572 * _2572) * 3.141590118408203125));
    uint _2608 = _2464 + 9u;
    float _2619 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2495].w)) * _1168) * 0.949999988079071044921875);
    float _2620 = _2619 * _2619;
    float _2621 = cbLight._m0[_2495].x + _1241;
    float _2622 = cbLight._m0[_2495].y + _1242;
    float _2623 = cbLight._m0[_2495].z + _1243;
    float _2627 = inversesqrt(dot(vec3(_2621, _2622, _2623), vec3(_2621, _2622, _2623)));
    float _2628 = _2627 * _2621;
    float _2629 = _2627 * _2622;
    float _2630 = _2627 * _2623;
    float _2631 = dot(vec3(_1296, _1297, _1298), vec3(cbLight._m0[_2495].xyz));
    float _4971 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
    float _2634 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
    float _2635 = dot(vec3(_1296, _1297, _1298), vec3(_2628, _2629, _2630));
    float _4982 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
    float _2638 = isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0));
    float _2639 = dot(vec3(cbLight._m0[_2495].xyz), vec3(_2628, _2629, _2630));
    float _4993 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
    float _2643 = _2620 * _2620;
    float _2647 = ((_2638 * _2638) * (_2643 + (-1.0))) + 1.0;
    float _2656 = (exp2(log2(1.0 - (isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2657 = 1.0 - _2620;
    float _2667 = (0.5 / (((_2559 * ((_2634 * _2657) + _2620)) + 9.9999999392252902907785028219223e-09) + (((_2559 * _2657) + _2620) * _2634))) * _2634;
    float _5004 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
    float _2669 = (isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0))) * (_2643 / ((_2647 * _2647) * 3.141590118408203125));
    float _2679 = (((_2656 * cbLight._m0[_2608].x) * _2669) * _2481) + (((_2583 * cbLight._m0[_2527].x) * _2597) * _2491);
    float _2680 = (((_2656 * cbLight._m0[_2608].y) * _2669) * _2481) + (((_2583 * cbLight._m0[_2527].y) * _2597) * _2491);
    float _2681 = (((_2656 * cbLight._m0[_2608].z) * _2669) * _2481) + (((_2583 * cbLight._m0[_2527].z) * _2597) * _2491);
    float _2796;
    float _2798;
    float _2800;
    float _2802;
    float _2804;
    float _2806;
    if (_2462.y == 0u)
    {
        float _2736 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2737 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2736;
        float _2738 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2736;
        float _2739 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2736;
        uvec4 _2751 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2752 = _2751.x;
        uint _2763 = uint((float(_2751.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1261) / _2752))) + floor(float(uint(cbSceneParam._m0[85u].x * _1260) / _2752)));
        float _2773 = (log2(_2739 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2774 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
        uint _2777 = uint(isnan(14.0) ? _2774 : (isnan(_2774) ? 14.0 : min(_2774, 14.0)));
        uvec4 _2782 = texelFetch(g_lightClusterGridBuffer, int(((_2777 << 2u) + (_2763 << 6u)) >> 2u));
        uint _2783 = _2782.x;
        uint _2784 = _2751.z;
        float _3017;
        float _3019;
        float _3021;
        float _3023;
        float _3025;
        float _3027;
        if (((((1u << ((_2784 >> 4u) & 15u)) + 4294967295u) & _2783) == 0u) || ((_2784 & 240u) == 0u))
        {
            _3017 = 0.0;
            _3019 = 0.0;
            _3021 = 0.0;
            _3023 = 0.0;
            _3025 = 0.0;
            _3027 = 0.0;
        }
        else
        {
            float _3018;
            float _3020;
            float _3022;
            float _3024;
            float _3026;
            float _3028;
            float _3244 = 0.0;
            float _3245 = 0.0;
            float _3246 = 0.0;
            float _3247 = 0.0;
            float _3248 = 0.0;
            float _3249 = 0.0;
            uint _3250 = 0u;
            uint _3259;
            bool _3260;
            for (;;)
            {
                _3259 = texelFetch(g_lightClassification, int((((_2777 << 5u) + (_2763 << 9u)) + (_3250 << 2u)) >> 2u)).x;
                _3260 = _3259 == 0u;
                float frontier_phi_55_pred;
                float frontier_phi_55_pred_1;
                float frontier_phi_55_pred_2;
                float frontier_phi_55_pred_3;
                float frontier_phi_55_pred_4;
                float frontier_phi_55_pred_5;
                if (_3260)
                {
                    frontier_phi_55_pred = _3248;
                    frontier_phi_55_pred_1 = _3249;
                    frontier_phi_55_pred_2 = _3247;
                    frontier_phi_55_pred_3 = _3246;
                    frontier_phi_55_pred_4 = _3245;
                    frontier_phi_55_pred_5 = _3244;
                }
                else
                {
                    float _3440;
                    float _3441;
                    float _3442;
                    float _3443;
                    float _3444;
                    float _3445;
                    uint _3446;
                    _3440 = _3244;
                    _3441 = _3245;
                    _3442 = _3246;
                    _3443 = _3247;
                    _3444 = _3248;
                    _3445 = _3249;
                    _3446 = _3259;
                    float _3341;
                    float _3342;
                    float _3343;
                    float _3344;
                    float _3345;
                    float _3346;
                    for (;;)
                    {
                        uint _3450 = uint(findLSB(_3446)) + (_3250 << 5u);
                        uint _3447 = (_3446 + 4294967295u) & _3446;
                        uint _3452 = _3450 * 48u;
                        vec4 _3466 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3452)).x, texelFetch(g_PointLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3452 + 3u)).x));
                        uint _3472 = (_3450 * 48u) + 4u;
                        vec4 _3485 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3472)).x, texelFetch(g_PointLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3472 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3472 + 3u)).x));
                        uint _3491 = (_3450 * 48u) + 8u;
                        vec3 _3502 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3491)).x, texelFetch(g_PointLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3491 + 2u)).x));
                        float _3506 = _3466.x - _2737;
                        float _3507 = _3466.y - _2738;
                        float _3508 = _3466.z - _2739;
                        float _3509 = dot(vec3(_3506, _3507, _3508), vec3(_3506, _3507, _3508));
                        float _3512 = inversesqrt(_3509);
                        float _3513 = _3512 * _3506;
                        float _3514 = _3512 * _3507;
                        float _3515 = _3512 * _3508;
                        float _3516 = dot(vec3(_1316, _1319, _1322), vec3(_3513, _3514, _3515));
                        float _3521 = 1.0 - (_3509 * _3466.w);
                        float _5025 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                        float _3522 = isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0));
                        float _3523 = sqrt(_3509) * _3485.w;
                        float _3526 = 1.39999997615814208984375 / (_3523 + 1.39999997615814208984375);
                        float _3527 = _3526 * _3526;
                        float _3530 = ((1.0 - _3527) * _3516) + _3527;
                        float _3533 = _3523 * _3523;
                        float _3537 = ((isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0))) * _3522) / ((_3533 * 0.699999988079071044921875) + 1.0);
                        float _3541 = (-0.0) - _2737;
                        float _3542 = (-0.0) - _2738;
                        float _3543 = (-0.0) - _2739;
                        float _3547 = inversesqrt(dot(vec3(_3541, _3542, _3543), vec3(_3541, _3542, _3543)));
                        float _3548 = _3547 * _3541;
                        float _3549 = _3547 * _3542;
                        float _3550 = _3547 * _3543;
                        float _3558 = exp2(log2(1.0 / ((_3533 * 3.5) + 5.0)) * 0.25);
                        float _3559 = 1.0 - _1389;
                        float _3566 = sqrt(1.0 - ((1.0 - (_3559 * _3559)) * (1.0 - (_3558 * _3558))));
                        float _3567 = _3566 * _3566;
                        float _3568 = _3567 * _3567;
                        float _3569 = _3548 + _3513;
                        float _3570 = _3549 + _3514;
                        float _3571 = _3550 + _3515;
                        float _3575 = inversesqrt(dot(vec3(_3569, _3570, _3571), vec3(_3569, _3570, _3571)));
                        float _3579 = dot(vec3(_1316, _1319, _1322), vec3(_3548, _3549, _3550));
                        float _5041 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                        float _3582 = isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0));
                        float _3583 = dot(vec3(_1316, _1319, _1322), vec3(_3575 * _3569, _3575 * _3570, _3575 * _3571));
                        float _5052 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                        float _3586 = isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0));
                        float _3590 = ((_3586 * _3586) * (_3568 + (-1.0))) + 1.0;
                        float _3591 = _3526 * _3567;
                        float _3592 = _3591 * _3591;
                        float _3595 = ((1.0 - _3592) * _3516) + _3592;
                        float _5063 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                        float _3596 = isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0));
                        float _3597 = 1.0 - _3567;
                        float _3607 = (0.5 / (((_3596 * ((_3582 * _3597) + _3567)) + 9.9999999392252902907785028219223e-09) + (((_3596 * _3597) + _3567) * _3582))) * _3596;
                        float _5074 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                        float _3618 = (((_3568 * 3.1415927410125732421875) * (isnan(1.0) ? _5074 : (isnan(_5074) ? 1.0 : min(_5074, 1.0)))) / ((_3590 * _3590) * ((_3533 * 2.1991131305694580078125) + 3.141590118408203125))) * _3522;
                        _3344 = (_3537 * _3485.x) + _3443;
                        _3345 = (_3537 * _3485.y) + _3444;
                        _3346 = (_3537 * _3485.z) + _3445;
                        _3341 = (_3618 * _3502.x) + _3440;
                        _3342 = (_3618 * _3502.y) + _3441;
                        _3343 = (_3618 * _3502.z) + _3442;
                        if (_3447 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3440 = _3341;
                            _3441 = _3342;
                            _3442 = _3343;
                            _3443 = _3344;
                            _3444 = _3345;
                            _3445 = _3346;
                            _3446 = _3447;
                        }
                    }
                    frontier_phi_55_pred = _3345;
                    frontier_phi_55_pred_1 = _3346;
                    frontier_phi_55_pred_2 = _3344;
                    frontier_phi_55_pred_3 = _3343;
                    frontier_phi_55_pred_4 = _3342;
                    frontier_phi_55_pred_5 = _3341;
                }
                _3026 = frontier_phi_55_pred;
                _3028 = frontier_phi_55_pred_1;
                _3024 = frontier_phi_55_pred_2;
                _3022 = frontier_phi_55_pred_3;
                _3020 = frontier_phi_55_pred_4;
                _3018 = frontier_phi_55_pred_5;
                uint _3251 = _3250 + 1u;
                if (_3251 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3244 = _3018;
                    _3245 = _3020;
                    _3246 = _3022;
                    _3247 = _3024;
                    _3248 = _3026;
                    _3249 = _3028;
                    _3250 = _3251;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3017 = _3018;
            _3019 = _3020;
            _3021 = _3022;
            _3023 = _3024;
            _3025 = _3026;
            _3027 = _3028;
        }
        uvec4 _3031 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3032 = _3031.z;
        uint _3034 = (_3032 >> 8u) & 15u;
        float _3212;
        float _3214;
        float _3216;
        float _3218;
        float _3220;
        float _3222;
        if (((4294967295u << _3034) & _2783) == 0u)
        {
            _3212 = _3017;
            _3214 = _3019;
            _3216 = _3021;
            _3218 = _3023;
            _3220 = _3025;
            _3222 = _3027;
        }
        else
        {
            float _3237 = inversesqrt(dot(vec3(_2737, _2738, _2739), vec3(_2737, _2738, _2739)));
            float _3238 = _3237 * _2737;
            float _3239 = _3237 * _2738;
            float _3240 = _3237 * _2739;
            float frontier_phi_44_45_ladder;
            float frontier_phi_44_45_ladder_1;
            float frontier_phi_44_45_ladder_2;
            float frontier_phi_44_45_ladder_3;
            float frontier_phi_44_45_ladder_4;
            float frontier_phi_44_45_ladder_5;
            if (_3034 < ((_3032 >> 12u) & 15u))
            {
                float _3213;
                float _3215;
                float _3217;
                float _3219;
                float _3221;
                float _3223;
                float _3423 = _3017;
                float _3424 = _3019;
                float _3425 = _3021;
                float _3426 = _3023;
                float _3427 = _3025;
                float _3428 = _3027;
                uint _3429 = _3034;
                uint _3438;
                bool _3439;
                for (;;)
                {
                    _3438 = texelFetch(g_lightClassification, int((((_2777 << 5u) + (_2763 << 9u)) + (_3429 << 2u)) >> 2u)).x;
                    _3439 = _3438 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3439)
                    {
                        frontier_phi_69_pred = _3428;
                        frontier_phi_69_pred_1 = _3427;
                        frontier_phi_69_pred_2 = _3426;
                        frontier_phi_69_pred_3 = _3425;
                        frontier_phi_69_pred_4 = _3424;
                        frontier_phi_69_pred_5 = _3423;
                    }
                    else
                    {
                        float _3653;
                        float _3654;
                        float _3655;
                        float _3656;
                        float _3657;
                        float _3658;
                        float _3946;
                        float _3947;
                        float _3948;
                        float _3949;
                        float _3950;
                        float _3951;
                        float _3666 = _3423;
                        float _3667 = _3424;
                        float _3668 = _3425;
                        float _3669 = _3426;
                        float _3670 = _3427;
                        float _3671 = _3428;
                        uint _3672 = _3438;
                        uint _3673;
                        vec4 _3698;
                        float _3699;
                        vec4 _3714;
                        vec3 _3726;
                        vec4 _3741;
                        vec4 _3756;
                        float _3802;
                        bool _3803;
                        for (;;)
                        {
                            uint _3683 = ((_3429 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3672));
                            _3673 = (_3672 + 4294967295u) & _3672;
                            uint _3685 = _3683 * 40u;
                            _3698 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3685)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 3u)).x));
                            _3699 = _3698.w;
                            uint _3701 = (_3683 * 40u) + 4u;
                            _3714 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3701)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 3u)).x));
                            uint _3716 = (_3683 * 40u) + 8u;
                            _3726 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3716)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 2u)).x));
                            uint _3728 = (_3683 * 40u) + 16u;
                            _3741 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3728)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 3u)).x));
                            uint _3743 = (_3683 * 40u) + 20u;
                            _3756 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3743)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 3u)).x));
                            uint _3758 = (_3683 * 40u) + 24u;
                            vec4 _3771 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3758)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 3u)).x));
                            uint _3777 = (_3683 * 40u) + 28u;
                            vec4 _3790 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3777)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 3u)).x));
                            _3802 = fma(_2739, _3790.z, fma(_2738, _3790.y, _3790.x * _2737)) + _3790.w;
                            _3803 = !((fma(_2739, _3771.z, fma(_2738, _3771.y, _3771.x * _2737)) + _3771.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3803)
                            {
                                float _3830 = _3698.x - _2737;
                                float _3831 = _3698.y - _2738;
                                float _3832 = _3698.z - _2739;
                                float _3833 = dot(vec3(_3830, _3831, _3832), vec3(_3830, _3831, _3832));
                                float _3836 = inversesqrt(_3833);
                                float _3837 = _3836 * _3830;
                                float _3838 = _3836 * _3831;
                                float _3839 = _3836 * _3832;
                                float _3843 = 1.0 - (_3833 / (_3699 * _3699));
                                float _5085 = isnan(0.0) ? _3843 : (isnan(_3843) ? 0.0 : max(_3843, 0.0));
                                float _3844 = isnan(1.0) ? _5085 : (isnan(_5085) ? 1.0 : min(_5085, 1.0));
                                float _3848 = sqrt(_3833) * _3714.w;
                                float _3850 = 1.39999997615814208984375 / (_3848 + 1.39999997615814208984375);
                                float _3851 = _3850 * _3850;
                                float _3854 = ((1.0 - _3851) * dot(vec3(_3837, _3838, _3839), vec3(_1316, _1319, _1322))) + _3851;
                                float _3857 = _3848 * _3848;
                                float _3861 = (fma(_2739, _3741.z, fma(_2738, _3741.y, _3741.x * _2737)) + _3741.w) / _3802;
                                float _3862 = (fma(_2739, _3756.z, fma(_2738, _3756.y, _3756.x * _2737)) + _3756.w) / _3802;
                                float _3866 = 1.0 - dot(vec2(_3861, _3862), vec2(_3861, _3862));
                                float _5101 = isnan(0.0) ? _3866 : (isnan(_3866) ? 0.0 : max(_3866, 0.0));
                                float _3867 = isnan(1.0) ? _5101 : (isnan(_5101) ? 1.0 : min(_5101, 1.0));
                                float _3868 = _3867 * (((isnan(0.0) ? _3854 : (isnan(_3854) ? 0.0 : max(_3854, 0.0))) * _3844) / ((_3857 * 0.699999988079071044921875) + 1.0));
                                float _3880 = exp2(log2(1.0 / ((_3857 * 3.5) + 5.0)) * 0.25);
                                float _3881 = 1.0 - _1389;
                                float _3888 = sqrt(1.0 - ((1.0 - (_3881 * _3881)) * (1.0 - (_3880 * _3880))));
                                float _3889 = _3888 * _3888;
                                float _3890 = _3889 * _3889;
                                float _3891 = _3837 - _3238;
                                float _3892 = _3838 - _3239;
                                float _3893 = _3839 - _3240;
                                float _3897 = inversesqrt(dot(vec3(_3891, _3892, _3893), vec3(_3891, _3892, _3893)));
                                float _3901 = dot(vec3(_1316, _1319, _1322), vec3((-0.0) - _3238, (-0.0) - _3239, (-0.0) - _3240));
                                float _5112 = isnan(0.0) ? _3901 : (isnan(_3901) ? 0.0 : max(_3901, 0.0));
                                float _3904 = isnan(1.0) ? _5112 : (isnan(_5112) ? 1.0 : min(_5112, 1.0));
                                float _3905 = dot(vec3(_1316, _1319, _1322), vec3(_3897 * _3891, _3897 * _3892, _3897 * _3893));
                                float _5123 = isnan(0.0) ? _3905 : (isnan(_3905) ? 0.0 : max(_3905, 0.0));
                                float _3908 = isnan(1.0) ? _5123 : (isnan(_5123) ? 1.0 : min(_5123, 1.0));
                                float _3912 = ((_3908 * _3908) * (_3890 + (-1.0))) + 1.0;
                                float _3913 = _3850 * _3889;
                                float _3914 = _3913 * _3913;
                                float _3920 = ((1.0 - _3914) * dot(vec3(_1316, _1319, _1322), vec3(_3837, _3838, _3839))) + _3914;
                                float _5134 = isnan(0.0) ? _3920 : (isnan(_3920) ? 0.0 : max(_3920, 0.0));
                                float _3921 = isnan(1.0) ? _5134 : (isnan(_5134) ? 1.0 : min(_5134, 1.0));
                                float _3922 = 1.0 - _3889;
                                float _3932 = (0.5 / (((_3921 * ((_3904 * _3922) + _3889)) + 9.9999999392252902907785028219223e-09) + (((_3921 * _3922) + _3889) * _3904))) * _3921;
                                float _5145 = isnan(0.0) ? _3932 : (isnan(_3932) ? 0.0 : max(_3932, 0.0));
                                float _3942 = (_3867 * _3844) * (((_3890 * 3.1415927410125732421875) * (isnan(1.0) ? _5145 : (isnan(_5145) ? 1.0 : min(_5145, 1.0)))) / ((_3912 * _3912) * ((_3857 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3868 * _3714.x;
                                frontier_phi_75_pred_1 = _3868 * _3714.z;
                                frontier_phi_75_pred_2 = _3868 * _3714.y;
                                frontier_phi_75_pred_3 = _3942 * _3726.z;
                                frontier_phi_75_pred_4 = _3942 * _3726.y;
                                frontier_phi_75_pred_5 = _3942 * _3726.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3949 = frontier_phi_75_pred;
                            _3951 = frontier_phi_75_pred_1;
                            _3950 = frontier_phi_75_pred_2;
                            _3948 = frontier_phi_75_pred_3;
                            _3947 = frontier_phi_75_pred_4;
                            _3946 = frontier_phi_75_pred_5;
                            _3656 = _3949 + _3669;
                            _3657 = _3950 + _3670;
                            _3658 = _3951 + _3671;
                            _3653 = _3946 + _3666;
                            _3654 = _3947 + _3667;
                            _3655 = _3948 + _3668;
                            if (_3673 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3666 = _3653;
                                _3667 = _3654;
                                _3668 = _3655;
                                _3669 = _3656;
                                _3670 = _3657;
                                _3671 = _3658;
                                _3672 = _3673;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3658;
                        frontier_phi_69_pred_1 = _3657;
                        frontier_phi_69_pred_2 = _3656;
                        frontier_phi_69_pred_3 = _3655;
                        frontier_phi_69_pred_4 = _3654;
                        frontier_phi_69_pred_5 = _3653;
                    }
                    _3223 = frontier_phi_69_pred;
                    _3221 = frontier_phi_69_pred_1;
                    _3219 = frontier_phi_69_pred_2;
                    _3217 = frontier_phi_69_pred_3;
                    _3215 = frontier_phi_69_pred_4;
                    _3213 = frontier_phi_69_pred_5;
                    uint _3430 = _3429 + 1u;
                    if (_3430 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3423 = _3213;
                        _3424 = _3215;
                        _3425 = _3217;
                        _3426 = _3219;
                        _3427 = _3221;
                        _3428 = _3223;
                        _3429 = _3430;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_44_45_ladder = _3215;
                frontier_phi_44_45_ladder_1 = _3223;
                frontier_phi_44_45_ladder_2 = _3221;
                frontier_phi_44_45_ladder_3 = _3219;
                frontier_phi_44_45_ladder_4 = _3217;
                frontier_phi_44_45_ladder_5 = _3213;
            }
            else
            {
                frontier_phi_44_45_ladder = _3019;
                frontier_phi_44_45_ladder_1 = _3027;
                frontier_phi_44_45_ladder_2 = _3025;
                frontier_phi_44_45_ladder_3 = _3023;
                frontier_phi_44_45_ladder_4 = _3021;
                frontier_phi_44_45_ladder_5 = _3017;
            }
            _3212 = frontier_phi_44_45_ladder_5;
            _3214 = frontier_phi_44_45_ladder;
            _3216 = frontier_phi_44_45_ladder_4;
            _3218 = frontier_phi_44_45_ladder_3;
            _3220 = frontier_phi_44_45_ladder_2;
            _3222 = frontier_phi_44_45_ladder_1;
        }
        float _3227 = isnan(1.0) ? _1360 : (isnan(_1360) ? 1.0 : min(_1360, 1.0));
        _2796 = (_3227 * _3218) + _2523;
        _2798 = (_3227 * _3220) + _2524;
        _2800 = (_3227 * _3222) + _2525;
        _2802 = ((_3212 * 0.039999999105930328369140625) * _3227) + _2679;
        _2804 = ((_3214 * 0.039999999105930328369140625) * _3227) + _2680;
        _2806 = ((_3216 * 0.039999999105930328369140625) * _3227) + _2681;
    }
    else
    {
        _2796 = _2523;
        _2798 = _2524;
        _2800 = _2525;
        _2802 = _2679;
        _2804 = _2680;
        _2806 = _2681;
    }
    uint _2812 = _1336 + uint(cbMatDynParam._m0[0u].w);
    float _2818 = cbInstanceData._m0[_2812].x * (_970 - (_970 * TEXCOORD_7.x));
    float _2819 = cbInstanceData._m0[_2812].y * (_972 - (_972 * TEXCOORD_7.y));
    float _2820 = cbInstanceData._m0[_2812].z * (_974 - (_974 * TEXCOORD_7.z));
    float _2833 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2834 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2835 = cbSceneParam._m0[86u].x * ((_1260 / cbSceneParam._m0[86u].x) + (((10.0 / (_1185 + 10.0)) * cbMtdParam._m0[20u].y) * dot(vec3(_1296, _1297, _1298), vec3(_231, _232, _233))));
    float _2836 = isnan(_2833) ? _2835 : (isnan(_2835) ? _2833 : min(_2835, _2833));
    float _2837 = isnan(_2834) ? _1261 : (isnan(_1261) ? _2834 : min(_1261, _2834));
    vec4 _2839 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2836, _2837), 0.0);
    float _2841 = _2839.x;
    bool _2861 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2841)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2841))) > _1185;
    float _2862 = _2861 ? _2836 : _1260;
    float _2863 = _2861 ? _2837 : _1261;
    vec4 _2865 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2862, _2863));
    vec4 _2870 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2862, _2863));
    float _2872 = _2870.x;
    float _2892 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2872)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2872))) - _1185;
    bool _2902 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2906 = (isnan(_2892) ? 0.0 : (isnan(0.0) ? _2892 : max(0.0, _2892))) * (-1.44269502162933349609375);
    float _5176 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
    float _5187 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
    float _5198 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
    float _2933 = 0.959999978542327880859375 - (exp2(log2(1.0 - (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0)))) * 5.0) * 0.959999978542327880859375);
    float _2936 = ((_2865.x * _2933) * exp2(_2906 * (_2902 ? 0.0 : (cbMtdParam._m0[39u].z + cbMtdParam._m0[38u].x)))) * cbSceneParam._m0[72u].w;
    float _2939 = ((_2865.y * _2933) * exp2(_2906 * (_2902 ? 0.0 : (cbMtdParam._m0[39u].w + cbMtdParam._m0[38u].y)))) * cbSceneParam._m0[72u].w;
    float _2942 = ((_2865.z * _2933) * exp2(_2906 * (_2902 ? 0.0 : (cbMtdParam._m0[40u].x + cbMtdParam._m0[38u].z)))) * cbSceneParam._m0[72u].w;
    float _2951 = ((_2818 + (((((_2401 * _2436.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0))) * _2196) * _2452)) + _2802) * cbPerFrame._m0[3u].x)) + _2936) + ((((isnan(1.0) ? _5176 : (isnan(_5176) ? 1.0 : min(_5176, 1.0))) * (_2796 + ((isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0))) * _1360))) - _2936) * _1106);
    float _2954 = ((_2819 + (((((_2401 * _2436.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0))) * _2196) * _2452)) + _2804) * cbPerFrame._m0[3u].x)) + _2939) + ((((isnan(1.0) ? _5187 : (isnan(_5187) ? 1.0 : min(_5187, 1.0))) * (_2798 + ((isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0))) * _1360))) - _2939) * _1106);
    float _2957 = ((_2820 + (((((_2401 * _2436.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0))) * _2196) * _2452)) + _2806) * cbPerFrame._m0[3u].x)) + _2942) + ((((isnan(1.0) ? _5198 : (isnan(_5198) ? 1.0 : min(_5198, 1.0))) * (_2800 + ((isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0))) * _1360))) - _2942) * _1106);
    float _2958 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
    float _2959 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
    float _2960 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
    float _2966 = cbMtdParam._m0[2u].x * _2818;
    float _2967 = cbMtdParam._m0[2u].y * _2819;
    float _2968 = cbMtdParam._m0[2u].z * _2820;
    float _5224 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2970 = isnan(1.0) ? _5224 : (isnan(_5224) ? 1.0 : min(_5224, 1.0));
    float _2975 = cbInstanceData._m0[_1335 + 6u].w * (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0)));
    float _2980 = _1260 / cbSceneParam._m0[86u].x;
    float _2981 = _1261 / cbSceneParam._m0[86u].y;
    vec4 _2995 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2980, _2981, (log2((isnan(cbSceneParam._m0[77u].w) ? _1185 : (isnan(_1185) ? cbSceneParam._m0[77u].w : min(_1185, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2997 = _2995.x;
    float _2998 = _2995.y;
    float _2999 = _2995.z;
    float _3000 = _2995.w;
    float _3079;
    float _3081;
    float _3083;
    float _3085;
    if (_1185 > cbSceneParam._m0[78u].w)
    {
        float _3042 = isnan(_1185) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1185 : min(cbSceneParam._m0[80u].w, _1185));
        float _3043 = _3042 / _1185;
        float _3054 = _3043 * _1234;
        float _3055 = _1235 * _3043;
        float _3056 = (-0.0) - _3055;
        float _3057 = _3043 * _1236;
        float _3059 = (cbSceneParam._m0[77u].w * _3056) / _3042;
        float _3060 = _3059 + cbSceneParam._m0[79u].w;
        float _3061 = cbSceneParam._m0[79u].w - _3055;
        float _3067 = sqrt(((_3054 * _3054) + (_3055 * _3055)) + (_3057 * _3057));
        float _3070 = (1.0 - (cbSceneParam._m0[77u].w / _3042)) * _3067;
        float _3076 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3077 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3354;
        if (abs((_3056 - _3059) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3354 = ((((_3060 > 0.0) ? exp2(_3076 * _3060) : (2.0 - exp2(_3077 * _3060))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3070;
        }
        else
        {
            float _3273 = 1.0 / cbSceneParam._m0[80u].x;
            float _3274 = isnan(_3061) ? _3060 : (isnan(_3060) ? _3061 : max(_3060, _3061));
            float _3275 = isnan(_3061) ? _3060 : (isnan(_3060) ? _3061 : min(_3060, _3061));
            float _3284 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : min(_3274, 0.0));
            float _3285 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : min(_3275, 0.0));
            _3354 = ((abs(_3067 / _3056) * cbSceneParam._m0[80u].y) * ((((_3284 - _3285) * 2.0) - ((exp2(_3076 * (isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0)))) - exp2(_3076 * (isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0))))) * _3273)) - ((exp2(_3077 * _3284) - exp2(_3077 * _3285)) * _3273))) + (_3070 * cbSceneParam._m0[80u].z);
        }
        vec4 _3356 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2980, _2981, 1.0), 0.0);
        float _3365 = exp2((_3354 * (-1.44269502162933349609375)) * (1.0 - _3356.w));
        float _3366 = log2(_3365);
        float _3382 = log2(_3000);
        _3079 = (exp2(_3382 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3366 * cbSceneParam._m0[78u].x)) * _3356.x) / cbSceneParam._m0[78u].x)) + _2997;
        _3081 = (exp2(_3382 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3366 * cbSceneParam._m0[78u].y)) * _3356.y) / cbSceneParam._m0[78u].y)) + _2998;
        _3083 = (exp2(_3382 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3366 * cbSceneParam._m0[78u].z)) * _3356.z) / cbSceneParam._m0[78u].z)) + _2999;
        _3085 = _3365 * _3000;
    }
    else
    {
        _3079 = _2997;
        _3081 = _2998;
        _3083 = _2999;
        _3085 = _3000;
    }
    bool _3392;
    float _3140;
    vec4 _3143;
    float _3145;
    vec4 _3147;
    float _3155;
    float _3156;
    float _3157;
    float _3161;
    float _3165;
    float _3169;
    float _3170;
    bool _3180;
    for (;;)
    {
        bool _3097 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _3098 = log2(_3085);
        float _3102 = exp2(_3098 * cbSceneParam._m0[78u].x);
        float _3103 = exp2(_3098 * cbSceneParam._m0[78u].y);
        float _3104 = exp2(_3098 * cbSceneParam._m0[78u].z);
        float _3105 = _3102 * _2958;
        float _3106 = _3103 * _2959;
        float _3107 = _3104 * _2960;
        vec4 _3115 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_1260, _1261));
        float _3117 = _3115.x;
        float _3138 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3117)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3117))) - _1185) * cbMtdParam._m0[24u].y;
        float _5275 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
        float _3139 = isnan(1.0) ? _5275 : (isnan(_5275) ? 1.0 : min(_5275, 1.0));
        _3140 = _2975 * _3139;
        float _3141 = _1250 + (-0.5);
        _3143 = cbMtdParam._m0[1u];
        _3145 = _3143.y * _3141;
        _3147 = cbMatDynParam._m0[0u];
        float _3154 = (roundEven(_3147.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3155 = _3154 * (_3097 ? _3105 : (_3105 + (cbSceneParam._m0[72u].w * _3079)));
        _3156 = _3154 * (_3097 ? _3106 : (_3106 + (cbSceneParam._m0[72u].w * _3081)));
        _3157 = _3154 * (_3097 ? _3107 : (_3107 + (cbSceneParam._m0[72u].w * _3083)));
        _3161 = (((_2966 * _2970) * _3102) * _3139) * _3154;
        _3165 = (((_2967 * _2970) * _3103) * _3139) * _3154;
        _3169 = (((_2968 * _2970) * _3104) * _3139) * _3154;
        _3170 = _3141 * 0.999000012874603271484375;
        _3180 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3180)
        {
            if ((cbInstanceData._m0[_1335 + 7u].x + _3170) < 0.5)
            {
                _3392 = true;
                break;
            }
        }
        uint _3308 = _1336 + uint(_3147.w);
        if ((cbInstanceData._m0[_3308].w < 1.0) && ((cbInstanceData._m0[_3308].w + _3170) < 0.5))
        {
            _3392 = true;
            break;
        }
        if ((_3145 + 1.0) < _3143.x)
        {
            _3392 = true;
            break;
        }
        _3392 = false;
        break;
    }
    float _3623;
    if (_3392)
    {
        discard_state = true;
        _3623 = 0.0;
    }
    else
    {
        _3623 = _3140;
    }
    SV_Target.x = _3155;
    SV_Target.y = _3156;
    SV_Target.z = _3157;
    SV_Target.w = _3623;
    SV_Target_1.x = _3161;
    SV_Target_1.y = _3165;
    SV_Target_1.z = _3169;
    SV_Target_1.w = _3140;
    discard_exit();
}


