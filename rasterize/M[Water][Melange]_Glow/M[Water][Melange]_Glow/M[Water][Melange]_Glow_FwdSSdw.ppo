#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[42];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_8;
layout(set = 0, binding = 7) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 7) in float TEXCOORD_12;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1723;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _229 = _228 * _220;
    float _230 = _228 * _221;
    float _231 = _228 * _222;
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = _235 * NORMAL.x;
    float _237 = _235 * NORMAL.y;
    float _238 = _235 * NORMAL.z;
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243 = _242 * TANGENT.x;
    float _244 = _242 * TANGENT.y;
    float _245 = _242 * TANGENT.z;
    float _289 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _299 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _289);
    float _300 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _289);
    float _301 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _289);
    float _316 = cbMtdParam._m0[22u].x - cbMtdParam._m0[21u].w;
    float _318 = (sqrt(((_299 * _299) + (_300 * _300)) + (_301 * _301)) - cbMtdParam._m0[21u].w) / (isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0)));
    float _322 = _318 / cbMtdParam._m0[23u].z;
    float _323 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _324 = isnan(8.0) ? _323 : (isnan(_323) ? 8.0 : min(_323, 8.0));
    float _331 = cbMtdParam._m0[10u].x * _324;
    float _332 = cbMtdParam._m0[10u].y * _324;
    float _333 = cbMtdParam._m0[10u].z * _324;
    float _334 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _335 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _336 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _347 = cbMtdParam._m0[22u].y + _318;
    float _352 = _347 * cbMtdParam._m0[24u].z;
    float _4064 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    vec4 _370 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _373 = _370.x;
    float _397 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _373)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _373))) - POSITION_1.w) / cbMtdParam._m0[21u].x;
    float _4075 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _398 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _403 = 1.0 - (isnan(cbMtdParam._m0[26u].y) ? _398 : (isnan(_398) ? cbMtdParam._m0[26u].y : max(_398, cbMtdParam._m0[26u].y)));
    float _405 = (cbMtdParam._m0[26u].x + TEXCOORD_3.x) - (_403 * cbMtdParam._m0[21u].z);
    float _421 = (cbMtdParam._m0[29u].y + cbPerFrame._m0[22u].x) * cbMtdParam._m0[20u].z;
    float _429 = cbMtdParam._m0[34u].z * TEXCOORD.x;
    float _430 = cbMtdParam._m0[34u].w * TEXCOORD.y;
    vec4 _444 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_2, SS_BumpMap), vec2((((_421 * cbMtdParam._m0[35u].x) + _429) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_430 + (_421 * cbMtdParam._m0[35u].y)) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _446 = _444.x;
    float _447 = _444.y;
    float _4091 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _450 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _451 = _444.z - _450;
    float _4102 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _452 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _464 = (_452 * 0.00999999977648258209228515625) + TEXCOORD.x;
    float _466 = (_452 * (-0.00999999977648258209228515625)) + TEXCOORD.y;
    vec4 _479 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2(((_464 + (cbMtdParam._m0[31u].x * _421)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_466 + (cbMtdParam._m0[31u].y * _421)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _483 = _479.z;
    vec4 _497 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2(((_464 + (cbMtdParam._m0[30u].z * _421)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_466 + (cbMtdParam._m0[30u].w * _421)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _501 = _497.z;
    float _504 = (_403 - _444.w) + (isnan(_501) ? _483 : (isnan(_483) ? _501 : max(_483, _501)));
    float _4118 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _506 = (_405 * (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) * (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0)));
    float _508 = _506 - (_506 * TEXCOORD_7.w);
    float _521 = (_508 + cbMtdParam._m0[9u].x) + (cbMtdParam._m0[16u].x * _452);
    float _522 = (_508 + cbMtdParam._m0[9u].y) + (cbMtdParam._m0[16u].y * _452);
    float _523 = (_508 + cbMtdParam._m0[9u].z) + (cbMtdParam._m0[16u].z * _452);
    vec4 _566 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * ((fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / cbMtdParam._m0[22u].z) + (cbMtdParam._m0[35u].z * _421))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * ((fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / cbMtdParam._m0[22u].z) + (cbMtdParam._m0[35u].w * _421))) + cbTextureTilingScale._m0[1u].w));
    float _571 = _566.z * 0.099999986588954925537109375;
    float _4129 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _573 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _577 = cbMtdParam._m0[24u].x * _318;
    float _4140 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _578 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _592 = (_521 + (isnan(0.07999999821186065673828125) ? _334 : (isnan(_334) ? 0.07999999821186065673828125 : min(_334, 0.07999999821186065673828125)))) + (_578 * (((1.0 - _521) - _573) + _571));
    float _594 = (_522 + (isnan(0.07999999821186065673828125) ? _335 : (isnan(_335) ? 0.07999999821186065673828125 : min(_335, 0.07999999821186065673828125)))) + (_578 * (((1.0 - _522) - _573) + _571));
    float _596 = (_523 + (isnan(0.07999999821186065673828125) ? _336 : (isnan(_336) ? 0.07999999821186065673828125 : min(_336, 0.07999999821186065673828125)))) + (_578 * (((1.0 - _523) + _571) - _573));
    float _4151 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _597 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _4162 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _598 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _4173 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _599 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _604 = _318 / cbMtdParam._m0[25u].z;
    float _4184 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _607 = (1.0 - (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) * cbMtdParam._m0[25u].y;
    float _614 = ((cbMtdParam._m0[21u].y - cbMtdParam._m0[20u].x) * _450) + cbMtdParam._m0[20u].x;
    float _637 = (POSITION_1.w - cbMtdParam._m0[28u].w) * (1.0 / cbMtdParam._m0[28u].z);
    float _4195 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _638 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _652 = (cbMtdParam._m0[33u].z * _421) + _429;
    float _653 = (cbMtdParam._m0[33u].w * _421) + _430;
    vec4 _676 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * ((cbMtdParam._m0[33u].x * _421) + _429)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((cbMtdParam._m0[33u].y * _421) + _430)) + cbTextureTilingScale._m0[3u].w));
    float _683 = (_676.x * 2.0) + (-1.0);
    float _685 = (_676.y * 2.0) + (-1.0);
    float _689 = 1.0 - dot(vec2(_683, _685), vec2(_683, _685));
    float _4206 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _691 = sqrt(isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0)));
    float _694 = fma(_691, _236, fma(_685, _243, _683 * _229));
    float _697 = fma(_691, _237, fma(_685, _244, _683 * _230));
    float _700 = fma(_691, _238, fma(_685, _245, _683 * _231));
    float _704 = inversesqrt(dot(vec3(_694, _697, _700), vec3(_694, _697, _700)));
    float _705 = cbPerFrame._m0[22u].x * 2.0;
    float _706 = _705 * cbMtdParam._m0[27u].y;
    float _710 = ((_694 * 0.5) * _704) + (-0.25);
    float _714 = ((_697 * 0.5) * _704) + (-0.25);
    float _715 = _714 * cbMtdParam._m0[27u].z;
    float _717 = (-0.0) - (cbMtdParam._m0[27u].z * _710);
    float _718 = fract(_706);
    float _720 = fract(_706 + 0.5);
    float _731 = abs((_718 * 2.0) + (-1.0));
    vec4 _748 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_718 * _717) + _652) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_715 * _718) + _653) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    vec4 _753 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_720 * _717) + _652) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_715 * _720) + _653) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _764 = ((_753.x - _748.x) * _731) + _748.x;
    float _765 = ((_753.y - _748.y) * _731) + _748.y;
    float _766 = ((_753.z - _748.z) * _731) + _748.z;
    float _783 = (cbMtdParam._m0[32u].z * _421) + _429;
    float _784 = (cbMtdParam._m0[32u].w * _421) + _430;
    float _787 = _705 * cbMtdParam._m0[27u].x;
    float _788 = _714 * cbMtdParam._m0[26u].w;
    float _790 = (-0.0) - (cbMtdParam._m0[26u].w * _710);
    float _791 = fract(_787);
    float _793 = fract(_787 + 0.5);
    float _804 = abs((_791 * 2.0) + (-1.0));
    vec4 _821 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_791 * _790) + _783) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_788 * _791) + _784) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _823 = _821.x;
    float _824 = _821.y;
    float _825 = _821.z;
    vec4 _826 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_793 * _790) + _783) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_788 * _793) + _784) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _857 = (((((cbMtdParam._m0[17u].x - cbMtdParam._m0[19u].x) * _764) * cbMtdParam._m0[29u].z) + cbMtdParam._m0[19u].x) * (((_826.x - _823) * _804) + _823)) + (_764 * cbMtdParam._m0[18u].x);
    float _860 = (((((cbMtdParam._m0[17u].y - cbMtdParam._m0[19u].y) * _765) * cbMtdParam._m0[29u].z) + cbMtdParam._m0[19u].y) * (((_826.y - _824) * _804) + _824)) + (_765 * cbMtdParam._m0[18u].y);
    float _863 = ((((cbMtdParam._m0[29u].z * _766) * (cbMtdParam._m0[17u].z - cbMtdParam._m0[19u].z)) + cbMtdParam._m0[19u].z) * (((_826.z - _825) * _804) + _825)) + (_766 * cbMtdParam._m0[18u].z);
    float _867 = _857 - (_857 * _638);
    float _868 = _860 - (_860 * _638);
    float _869 = _863 - (_863 * _638);
    float _874 = (POSITION_1.w - cbMtdParam._m0[28u].y) * (1.0 / cbMtdParam._m0[28u].x);
    float _4217 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _875 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
    float _885 = (cbMtdParam._m0[34u].x * _421) + _429;
    float _886 = (cbMtdParam._m0[34u].y * _421) + _430;
    vec4 _899 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((_885 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_886 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _901 = _899.x;
    float _902 = _899.y;
    float _903 = _899.z;
    vec4 _925 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * _885) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _886) + cbTextureTilingScale._m0[7u].w));
    float _968 = (cbMtdParam._m0[29u].x * cbMtdParam._m0[15u].x) * ((_867 + (cbMtdParam._m0[14u].x * _508)) + ((((_901 * cbMtdParam._m0[11u].x) - _867) + (((((cbMtdParam._m0[13u].x - cbMtdParam._m0[12u].x) * _901) * cbMtdParam._m0[29u].w) + cbMtdParam._m0[12u].x) * _925.x)) * _875));
    float _970 = (cbMtdParam._m0[29u].x * cbMtdParam._m0[15u].y) * ((_868 + (cbMtdParam._m0[14u].y * _508)) + ((((_902 * cbMtdParam._m0[11u].y) - _868) + (((((cbMtdParam._m0[13u].y - cbMtdParam._m0[12u].y) * _902) * cbMtdParam._m0[29u].w) + cbMtdParam._m0[12u].y) * _925.y)) * _875));
    float _972 = (cbMtdParam._m0[29u].x * cbMtdParam._m0[15u].z) * ((_869 + (cbMtdParam._m0[14u].z * _508)) + ((((_903 * cbMtdParam._m0[11u].z) - _869) + ((((cbMtdParam._m0[29u].w * _903) * (cbMtdParam._m0[13u].z - cbMtdParam._m0[12u].z)) + cbMtdParam._m0[12u].z) * _925.z)) * _875));
    float _4228 = isnan(0.0) ? TEXCOORD_3.y : (isnan(TEXCOORD_3.y) ? 0.0 : max(TEXCOORD_3.y, 0.0));
    float _979 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _989 = _318 / cbMtdParam._m0[23u].w;
    float _4239 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _990 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _991 = _452 * 0.23999999463558197021484375;
    float _993 = _452 * (-0.20000000298023223876953125);
    float _1004 = cbMtdParam._m0[36u].z * TEXCOORD.x;
    float _1005 = cbMtdParam._m0[36u].w * TEXCOORD.y;
    vec4 _1014 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[36u].x * _421) + _991) + _1004) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[36u].y * _421) + _993) + _1005) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _1039 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((((_1004 + _991) + (cbMtdParam._m0[37u].x * _421)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_1005 + _993) + (cbMtdParam._m0[37u].y * _421)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _1057 = (((_497.x + (-0.5)) * 0.5) + _479.x) + (((_1014.x + (-1.0)) + _1039.x) * cbMtdParam._m0[25u].w);
    float _1058 = (((_497.y + (-0.5)) * 0.5) + _479.y) + (((_1014.y + (-1.0)) + _1039.y) * cbMtdParam._m0[25u].w);
    float _1063 = ((_566.x - _1057) * _990) + _1057;
    float _1064 = ((_566.y - _1058) * _990) + _1058;
    float _1066 = _318 / cbMtdParam._m0[23u].y;
    float _4250 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _1067 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _1083 = ((((_979 * (0.5 - _446)) + _446) + (((_1063 + (-0.5)) + ((0.5 - _1063) * _1067)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1084 = ((((_979 * (0.5 - _447)) + _447) + (((_1064 + (-0.5)) + ((0.5 - _1064) * _1067)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1085 = dot(vec2(_1083, _1084), vec2(_1083, _1084));
    float _4261 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
    float _1090 = sqrt(1.0 - (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))));
    float _1092 = cbMtdParam._m0[24u].w * _347;
    float _4272 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _1101 = cbMtdParam._m0[22u].w * _347;
    float _4283 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _1103 = (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * cbMtdParam._m0[27u].w;
    float _4294 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _1104 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    float _1109 = ((cbMtdParam._m0[25u].x - cbMtdParam._m0[23u].x) * (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0)))) + cbMtdParam._m0[23u].x;
    float _1114 = _1083 - (_1109 * _1083);
    float _1115 = _1084 - (_1109 * _1084);
    float _1116 = (_1109 * (1.0 - _1090)) + _1090;
    float _1135 = fma(_1090, _236, fma(_1084, _243, _1083 * _229));
    float _1138 = fma(_1090, _237, fma(_1084, _244, _1083 * _230));
    float _1141 = fma(_1090, _238, fma(_1084, _245, _1083 * _231));
    float _1145 = inversesqrt(dot(vec3(_1135, _1138, _1141), vec3(_1135, _1138, _1141)));
    float _1146 = _1145 * _1135;
    float _1147 = _1145 * _1138;
    float _1148 = _1145 * _1141;
    float _1151 = fma(_1116, _236, fma(_1115, _243, _1114 * _229));
    float _1154 = fma(_1116, _237, fma(_1115, _244, _1114 * _230));
    float _1157 = fma(_1116, _238, fma(_1115, _245, _1114 * _231));
    float _1161 = inversesqrt(dot(vec3(_1151, _1154, _1157), vec3(_1151, _1154, _1157)));
    float _1162 = _1161 * _1151;
    float _1163 = _1161 * _1154;
    float _1164 = _1161 * _1157;
    float _4305 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _4316 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _1166 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
    float _4327 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _4338 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _4349 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _1183 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1223 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1232 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1223);
    float _1233 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1223);
    float _1234 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1223);
    float _1238 = inversesqrt(dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234)));
    float _1239 = _1232 * _1238;
    float _1240 = _1233 * _1238;
    float _1241 = _1234 * _1238;
    float _1246 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1247 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1249 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1258 = (_1249.x * 2.0) + (-1.0);
    float _1259 = (_1249.y * 2.0) + (-1.0);
    float _1260 = (_1249.z * 2.0) + (-1.0);
    float _1264 = inversesqrt(dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260)));
    float _1275 = ((TEXCOORD.w >= 1.0) || (((TEXCOORD.z <= 0.0) || (TEXCOORD.z >= 1.0)) || (TEXCOORD.w <= 0.0))) ? 0.0 : _1249.w;
    float _1282 = (((_1258 * _1264) - _1146) * _1275) + _1146;
    float _1283 = (((_1259 * _1264) - _1147) * _1275) + _1147;
    float _1284 = (((_1260 * _1264) - _1148) * _1275) + _1148;
    float _1302 = fma(_1284, cbSceneParam._m0[5u].z, fma(_1283, cbSceneParam._m0[5u].y, _1282 * cbSceneParam._m0[5u].x));
    float _1305 = fma(_1284, cbSceneParam._m0[6u].z, fma(_1283, cbSceneParam._m0[6u].y, _1282 * cbSceneParam._m0[6u].x));
    float _1308 = fma(_1284, cbSceneParam._m0[7u].z, fma(_1283, cbSceneParam._m0[7u].y, _1282 * cbSceneParam._m0[7u].x));
    uint _1321 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1322 = _1321 + 9u;
    uint _1323 = _1322 + uint(cbMatDynParam._m0[0u].w);
    float _1329 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0)))) * cbInstanceData._m0[_1323].x;
    float _1330 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0)))) * cbInstanceData._m0[_1323].y;
    float _1331 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) * cbInstanceData._m0[_1323].z;
    float _4360 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
    float _1332 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
    float _4371 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
    float _1333 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
    float _4382 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
    float _1334 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
    vec4 _1343 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1246, cbSceneParam._m0[86u].y * _1247));
    float _1346 = _1343.x * TEXCOORD_3.w;
    float _1350 = abs(dot(vec3(_1239, _1240, _1241), vec3(_1282, _1283, _1284)));
    float _4393 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
    float _1363 = dot(vec3(_1162, _1163, _1164), vec3(_1239, _1240, _1241)) * 2.0;
    float _1367 = (_1363 * _1162) - _1239;
    float _1368 = (_1363 * _1163) - _1240;
    float _1369 = (_1363 * _1164) - _1241;
    float _1373 = abs(dot(vec3(_1239, _1240, _1241), vec3(_1162, _1163, _1164)));
    float _4404 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
    float _1375 = sqrt(_1166);
    float _1387 = exp2((_1375 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1375 * 3.0));
    float _1418 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1422 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1426 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1722;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1451 = fma(_1426, cbModelParam._m0[26u].z, fma(_1422, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1418));
        float _1455 = fma(_1426, cbModelParam._m0[27u].z, fma(_1422, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1418));
        float _1459 = fma(_1426, cbModelParam._m0[28u].z, fma(_1422, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1418));
        float _1481 = _1418 + _1162;
        float _1482 = _1422 + _1163;
        float _1483 = _1426 + _1164;
        float _1493 = fma(_1483, cbModelParam._m0[26u].z, fma(_1482, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1481)) - _1451;
        float _1494 = fma(_1483, cbModelParam._m0[27u].z, fma(_1482, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1481)) - _1455;
        float _1495 = fma(_1483, cbModelParam._m0[28u].z, fma(_1482, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1481)) - _1459;
        float _1499 = inversesqrt(dot(vec3(_1493, _1494, _1495), vec3(_1493, _1494, _1495)));
        float _1511 = ((_1499 * _1493) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1451 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1512 = ((_1499 * _1494) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1455 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1513 = ((_1499 * _1495) / cbModelParam._m0[34u].z) + ((((((_1459 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1516 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        vec4 _1523 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        vec4 _1530 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        vec4 _1537 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        float _1550 = exp2((_1516.w + (-0.5)) * 20.0) * 2.0;
        float _1551 = _1550 * (_1516.x + (-0.5));
        float _1552 = _1550 * (_1516.y + (-0.5));
        float _1553 = _1550 * (_1516.z + (-0.5));
        float _1560 = exp2((_1523.w + (-0.5)) * 20.0) * 2.0;
        float _1561 = _1560 * (_1523.x + (-0.5));
        float _1562 = _1560 * (_1523.y + (-0.5));
        float _1563 = _1560 * (_1523.z + (-0.5));
        float _1570 = exp2((_1530.w + (-0.5)) * 20.0) * 2.0;
        float _1571 = _1570 * (_1530.x + (-0.5));
        float _1572 = _1570 * (_1530.y + (-0.5));
        float _1573 = _1570 * (_1530.z + (-0.5));
        float _1580 = exp2((_1537.w + (-0.5)) * 20.0) * 2.0;
        float _1581 = _1580 * (_1537.x + (-0.5));
        float _1582 = _1580 * (_1537.y + (-0.5));
        float _1583 = _1580 * (_1537.z + (-0.5));
        float _1584 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1585 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1586 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1587 = _1551 * 0.5;
        float _1588 = _1561 * 0.5;
        float _1589 = _1571 * 0.5;
        float _1590 = dot(vec3(_1587, _1588, _1589), vec3(_1587, _1588, _1589));
        float _1595 = (_1590 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1590);
        float _1604 = (dot(vec3(_1162, _1163, _1164), vec3(_1595 * _1587, _1595 * _1588, _1595 * _1589)) + 1.0) * 0.5;
        float _4430 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1614 = sqrt(((_1588 * _1588) + (_1587 * _1587)) + (_1589 * _1589)) / (_1584 + 9.9999997473787516355514526367188e-06);
        float _4441 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _1616 = _1615 * 2.0;
        float _1620 = (1.0 - _1615) / (_1615 + 1.0);
        float _4452 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _1630 = ((((1.0 - _1621) * (_1616 + 2.0)) * exp2(log2(isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_1616 + 1.0))) + _1621) * _1584;
        float _1631 = _1552 * 0.5;
        float _1632 = _1562 * 0.5;
        float _1633 = _1572 * 0.5;
        float _1634 = dot(vec3(_1631, _1632, _1633), vec3(_1631, _1632, _1633));
        float _1639 = (_1634 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1634);
        float _1647 = (dot(vec3(_1162, _1163, _1164), vec3(_1639 * _1631, _1639 * _1632, _1639 * _1633)) + 1.0) * 0.5;
        float _4463 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1656 = sqrt(((_1632 * _1632) + (_1631 * _1631)) + (_1633 * _1633)) / (_1585 + 9.9999997473787516355514526367188e-06);
        float _4474 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _1658 = _1657 * 2.0;
        float _1662 = (1.0 - _1657) / (_1657 + 1.0);
        float _4485 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _1672 = ((((1.0 - _1663) * (_1658 + 2.0)) * exp2(log2(isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_1658 + 1.0))) + _1663) * _1585;
        float _1673 = _1553 * 0.5;
        float _1674 = _1563 * 0.5;
        float _1675 = _1573 * 0.5;
        float _1676 = dot(vec3(_1673, _1674, _1675), vec3(_1673, _1674, _1675));
        float _1681 = (_1676 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1676);
        float _1689 = (dot(vec3(_1162, _1163, _1164), vec3(_1681 * _1673, _1681 * _1674, _1681 * _1675)) + 1.0) * 0.5;
        float _4496 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1698 = sqrt(((_1674 * _1674) + (_1673 * _1673)) + (_1675 * _1675)) / (_1586 + 9.9999997473787516355514526367188e-06);
        float _4507 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
        float _1700 = _1699 * 2.0;
        float _1704 = (1.0 - _1699) / (_1699 + 1.0);
        float _4518 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1705 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _1714 = ((((1.0 - _1705) * (_1700 + 2.0)) * exp2(log2(isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (_1700 + 1.0))) + _1705) * _1586;
        _1722 = _1553;
        _1724 = _1552;
        _1725 = _1551;
        _1726 = _1563;
        _1727 = _1562;
        _1728 = _1561;
        _1729 = _1573;
        _1730 = _1572;
        _1731 = _1571;
        _1732 = _1586;
        _1733 = _1585;
        _1734 = _1584;
        _1735 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)));
        _1736 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)));
        _1737 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)));
    }
    else
    {
        _1722 = _1723;
        _1724 = _1723;
        _1725 = _1723;
        _1726 = _1723;
        _1727 = _1723;
        _1728 = _1723;
        _1729 = _1723;
        _1730 = _1723;
        _1731 = _1723;
        _1732 = _1723;
        _1733 = _1723;
        _1734 = _1723;
        _1735 = 0.0;
        _1736 = 0.0;
        _1737 = 0.0;
    }
    float _2027;
    float _2028;
    float _2029;
    float _2030;
    float _2031;
    float _2032;
    float _2033;
    float _2034;
    float _2035;
    float _2036;
    float _2037;
    float _2038;
    float _2039;
    float _2040;
    float _2041;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1760 = fma(_1426, cbModelParam._m0[30u].z, fma(_1422, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1418));
        float _1764 = fma(_1426, cbModelParam._m0[31u].z, fma(_1422, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1418));
        float _1768 = fma(_1426, cbModelParam._m0[32u].z, fma(_1422, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1418));
        float _1790 = _1418 + _1162;
        float _1791 = _1422 + _1163;
        float _1792 = _1426 + _1164;
        float _1802 = fma(_1792, cbModelParam._m0[30u].z, fma(_1791, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1790)) - _1760;
        float _1803 = fma(_1792, cbModelParam._m0[31u].z, fma(_1791, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1790)) - _1764;
        float _1804 = fma(_1792, cbModelParam._m0[32u].z, fma(_1791, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1790)) - _1768;
        float _1808 = inversesqrt(dot(vec3(_1802, _1803, _1804), vec3(_1802, _1803, _1804)));
        float _1820 = ((_1808 * _1802) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1760 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1821 = ((_1808 * _1803) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1764 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1822 = ((_1808 * _1804) / cbModelParam._m0[35u].z) + ((((((_1768 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1824 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1820, _1821, _1822), 0.0);
        vec4 _1831 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1820, _1821, _1822), 0.0);
        vec4 _1838 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1820, _1821, _1822), 0.0);
        vec4 _1845 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1820, _1821, _1822), 0.0);
        float _1857 = exp2((_1824.w + (-0.5)) * 20.0) * 2.0;
        float _1858 = _1857 * (_1824.x + (-0.5));
        float _1859 = _1857 * (_1824.y + (-0.5));
        float _1860 = _1857 * (_1824.z + (-0.5));
        float _1867 = exp2((_1831.w + (-0.5)) * 20.0) * 2.0;
        float _1868 = _1867 * (_1831.x + (-0.5));
        float _1869 = _1867 * (_1831.y + (-0.5));
        float _1870 = _1867 * (_1831.z + (-0.5));
        float _1877 = exp2((_1838.w + (-0.5)) * 20.0) * 2.0;
        float _1878 = _1877 * (_1838.x + (-0.5));
        float _1879 = _1877 * (_1838.y + (-0.5));
        float _1880 = _1877 * (_1838.z + (-0.5));
        float _1887 = exp2((_1845.w + (-0.5)) * 20.0) * 2.0;
        float _1888 = _1887 * (_1845.x + (-0.5));
        float _1889 = _1887 * (_1845.y + (-0.5));
        float _1890 = _1887 * (_1845.z + (-0.5));
        float _1891 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
        float _1892 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
        float _1893 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
        float _1894 = _1858 * 0.5;
        float _1895 = _1868 * 0.5;
        float _1896 = _1878 * 0.5;
        float _1897 = dot(vec3(_1894, _1895, _1896), vec3(_1894, _1895, _1896));
        float _1902 = (_1897 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1897);
        float _1910 = (dot(vec3(_1162, _1163, _1164), vec3(_1902 * _1894, _1902 * _1895, _1902 * _1896)) + 1.0) * 0.5;
        float _4559 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
        float _1919 = sqrt(((_1895 * _1895) + (_1894 * _1894)) + (_1896 * _1896)) / (_1891 + 9.9999997473787516355514526367188e-06);
        float _4570 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
        float _1920 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
        float _1921 = _1920 * 2.0;
        float _1925 = (1.0 - _1920) / (_1920 + 1.0);
        float _4581 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
        float _1926 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
        float _1935 = ((((1.0 - _1926) * (_1921 + 2.0)) * exp2(log2(isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * (_1921 + 1.0))) + _1926) * _1891;
        float _1936 = _1859 * 0.5;
        float _1937 = _1869 * 0.5;
        float _1938 = _1879 * 0.5;
        float _1939 = dot(vec3(_1936, _1937, _1938), vec3(_1936, _1937, _1938));
        float _1944 = (_1939 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1939);
        float _1952 = (dot(vec3(_1162, _1163, _1164), vec3(_1944 * _1936, _1944 * _1937, _1944 * _1938)) + 1.0) * 0.5;
        float _4592 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
        float _1961 = sqrt(((_1937 * _1937) + (_1936 * _1936)) + (_1938 * _1938)) / (_1892 + 9.9999997473787516355514526367188e-06);
        float _4603 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
        float _1962 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _1963 = _1962 * 2.0;
        float _1967 = (1.0 - _1962) / (_1962 + 1.0);
        float _4614 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
        float _1968 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
        float _1977 = ((((1.0 - _1968) * (_1963 + 2.0)) * exp2(log2(isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (_1963 + 1.0))) + _1968) * _1892;
        float _1978 = _1860 * 0.5;
        float _1979 = _1870 * 0.5;
        float _1980 = _1880 * 0.5;
        float _1981 = dot(vec3(_1978, _1979, _1980), vec3(_1978, _1979, _1980));
        float _1986 = (_1981 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1981);
        float _1994 = (dot(vec3(_1162, _1163, _1164), vec3(_1986 * _1978, _1986 * _1979, _1986 * _1980)) + 1.0) * 0.5;
        float _4625 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
        float _2003 = sqrt(((_1979 * _1979) + (_1978 * _1978)) + (_1980 * _1980)) / (_1893 + 9.9999997473787516355514526367188e-06);
        float _4636 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2004 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
        float _2005 = _2004 * 2.0;
        float _2009 = (1.0 - _2004) / (_2004 + 1.0);
        float _4647 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
        float _2010 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
        float _2019 = ((((1.0 - _2010) * (_2005 + 2.0)) * exp2(log2(isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2005 + 1.0))) + _2010) * _1893;
        _2027 = _1860;
        _2028 = _1859;
        _2029 = _1858;
        _2030 = _1870;
        _2031 = _1869;
        _2032 = _1868;
        _2033 = _1880;
        _2034 = _1879;
        _2035 = _1878;
        _2036 = _1893;
        _2037 = _1892;
        _2038 = _1891;
        _2039 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0)));
        _2040 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0)));
        _2041 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0)));
    }
    else
    {
        _2027 = _1723;
        _2028 = _1723;
        _2029 = _1723;
        _2030 = _1723;
        _2031 = _1723;
        _2032 = _1723;
        _2033 = _1723;
        _2034 = _1723;
        _2035 = _1723;
        _2036 = _1723;
        _2037 = _1723;
        _2038 = _1723;
        _2039 = 0.0;
        _2040 = 0.0;
        _2041 = 0.0;
    }
    float _2051 = (cbModelParam._m0[1u].x * (_2039 - _1735)) + _1735;
    float _2052 = (cbModelParam._m0[1u].x * (_2040 - _1736)) + _1736;
    float _2053 = (cbModelParam._m0[1u].x * (_2041 - _1737)) + _1737;
    float _2074 = fma(_2053, cbSceneParam._m0[89u].z, fma(_2052, cbSceneParam._m0[89u].y, _2051 * cbSceneParam._m0[89u].x));
    float _2077 = fma(_2053, cbSceneParam._m0[90u].z, fma(_2052, cbSceneParam._m0[90u].y, _2051 * cbSceneParam._m0[90u].x));
    float _2080 = fma(_2053, cbSceneParam._m0[91u].z, fma(_2052, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2051));
    float _2093 = _1367 * 0.5;
    float _2094 = _1368 * 0.5;
    float _2095 = _1369 * 0.5;
    float _2096 = dot(vec4(_2093, _2094, _2095, 1.0), vec4(_2029, _2032, _2035, _2038));
    float _2099 = dot(vec4(_2093, _2094, _2095, 1.0), vec4(_2028, _2031, _2034, _2037));
    float _2102 = dot(vec4(_2093, _2094, _2095, 1.0), vec4(_2027, _2030, _2033, _2036));
    float _2136;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2109 = dot(vec4(_2093, _2094, _2095, 1.0), vec4(_1722, _1726, _1729, _1732));
        float _2113 = dot(vec4(_2093, _2094, _2095, 1.0), vec4(_1724, _1727, _1730, _1733));
        float _2117 = dot(vec4(_2093, _2094, _2095, 1.0), vec4(_1725, _1728, _1731, _1734));
        float _2124 = dot(vec4(cbModelParam._m0[39u]), vec4(_2093, _2094, _2095, 1.0));
        _2136 = dot(vec3(isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0)), isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0)), isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2124) ? 0.0 : (isnan(0.0) ? _2124 : max(0.0, _2124))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2136 = 1.0;
    }
    float _2147;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2138 = dot(vec4(cbModelParam._m0[40u]), vec4(_2093, _2094, _2095, 1.0));
        _2147 = dot(vec3(isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0)), isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0)), isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2138) ? 0.0 : (isnan(0.0) ? _2138 : max(0.0, _2138))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2147 = 1.0;
    }
    float _2151 = (_2147 * cbModelParam._m0[1u].x) + (_2136 * (1.0 - cbModelParam._m0[1u].x));
    float _2161 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1166);
    float _2162 = isnan(_2161) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2161 : min(cbModelParam._m0[25u].z, _2161));
    float _2242;
    float _2244;
    float _2246;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2209 = fma(_1426, cbModelParam._m0[13u].z, fma(_1422, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1418)) + cbModelParam._m0[13u].w;
        float _2213 = fma(_1426, cbModelParam._m0[14u].z, fma(_1422, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1418)) + cbModelParam._m0[14u].w;
        float _2217 = fma(_1426, cbModelParam._m0[15u].z, fma(_1422, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1418)) + cbModelParam._m0[15u].w;
        float _2220 = fma(_1369, cbModelParam._m0[13u].z, fma(_1368, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1367));
        float _2223 = fma(_1369, cbModelParam._m0[14u].z, fma(_1368, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1367));
        float _2226 = fma(_1369, cbModelParam._m0[15u].z, fma(_1368, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1367));
        float _2254;
        if (_2220 > 0.0)
        {
            _2254 = abs((1.0 - _2209) / _2220);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2220 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2209 + 1.0) / _2220);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2254 = frontier_phi_14_12_ladder;
        }
        float _2666;
        if (_2223 > 0.0)
        {
            _2666 = abs((1.0 - _2213) / _2223);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2223 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2213 + 1.0) / _2223);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2666 = frontier_phi_23_19_ladder;
        }
        float _3158;
        if (_2226 > 0.0)
        {
            _3158 = abs((1.0 - _2217) / _2226);
        }
        else
        {
            float frontier_phi_37_30_ladder;
            if (_2226 < 0.0)
            {
                frontier_phi_37_30_ladder = abs((_2217 + 1.0) / _2226);
            }
            else
            {
                frontier_phi_37_30_ladder = 5000.0;
            }
            _3158 = frontier_phi_37_30_ladder;
        }
        float _3160 = isnan(_2666) ? _2254 : (isnan(_2254) ? _2666 : min(_2254, _2666));
        float _3161 = isnan(_3158) ? _3160 : (isnan(_3160) ? _3158 : min(_3160, _3158));
        float _3165 = (_3161 * _2220) + _2209;
        float _3166 = (_3161 * _2223) + _2213;
        float _3167 = (_3161 * _2226) + _2217;
        float _3168 = _3161 * 9.9999997473787516355514526367188e-05;
        float _3169 = (-1.0) - _3168;
        float _3171 = _3168 + 1.0;
        float frontier_phi_13_37_ladder;
        float frontier_phi_13_37_ladder_1;
        float frontier_phi_13_37_ladder_2;
        if ((_3167 > _3171) || ((_3167 < _3169) || ((_3166 > _3171) || ((_3166 < _3169) || ((_3165 < _3169) || (_3165 > _3171))))))
        {
            frontier_phi_13_37_ladder = 0.0;
            frontier_phi_13_37_ladder_1 = 0.0;
            frontier_phi_13_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3293 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_3167, cbModelParam._m0[9u].z, fma(_3166, cbModelParam._m0[9u].y, _3165 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_3167, cbModelParam._m0[10u].z, fma(_3166, cbModelParam._m0[10u].y, _3165 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_3167, cbModelParam._m0[11u].z, fma(_3166, cbModelParam._m0[11u].y, _3165 * cbModelParam._m0[11u].x))), _2162);
            frontier_phi_13_37_ladder = _3293.z * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_1 = _3293.y * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_2 = _3293.x * cbModelParam._m0[1u].y;
        }
        _2242 = frontier_phi_13_37_ladder_2;
        _2244 = frontier_phi_13_37_ladder_1;
        _2246 = frontier_phi_13_37_ladder;
    }
    else
    {
        vec4 _2230 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1367, _1368, _1369), _2162);
        _2242 = _2230.x * cbModelParam._m0[1u].y;
        _2244 = _2230.y * cbModelParam._m0[1u].y;
        _2246 = _2230.z * cbModelParam._m0[1u].y;
    }
    float _2250 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1166);
    float _2251 = isnan(_2250) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2250 : min(cbModelParam._m0[25u].w, _2250));
    float _2340;
    float _2342;
    float _2344;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2304 = fma(_1426, cbModelParam._m0[21u].z, fma(_1422, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1418)) + cbModelParam._m0[21u].w;
        float _2308 = fma(_1426, cbModelParam._m0[22u].z, fma(_1422, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1418)) + cbModelParam._m0[22u].w;
        float _2312 = fma(_1426, cbModelParam._m0[23u].z, fma(_1422, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1418)) + cbModelParam._m0[23u].w;
        float _2315 = fma(_1369, cbModelParam._m0[21u].z, fma(_1368, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1367));
        float _2318 = fma(_1369, cbModelParam._m0[22u].z, fma(_1368, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1367));
        float _2321 = fma(_1369, cbModelParam._m0[23u].z, fma(_1368, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1367));
        float _2671;
        if (_2315 > 0.0)
        {
            _2671 = abs((1.0 - _2304) / _2315);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2315 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2304 + 1.0) / _2315);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2671 = frontier_phi_25_21_ladder;
        }
        float _3184;
        if (_2318 > 0.0)
        {
            _3184 = abs((1.0 - _2308) / _2318);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_2318 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_2308 + 1.0) / _2318);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _3184 = frontier_phi_39_32_ladder;
        }
        float _3353;
        if (_2321 > 0.0)
        {
            _3353 = abs((1.0 - _2312) / _2321);
        }
        else
        {
            float frontier_phi_53_48_ladder;
            if (_2321 < 0.0)
            {
                frontier_phi_53_48_ladder = abs((_2312 + 1.0) / _2321);
            }
            else
            {
                frontier_phi_53_48_ladder = 5000.0;
            }
            _3353 = frontier_phi_53_48_ladder;
        }
        float _3355 = isnan(_3184) ? _2671 : (isnan(_2671) ? _3184 : min(_2671, _3184));
        float _3356 = isnan(_3353) ? _3355 : (isnan(_3355) ? _3353 : min(_3355, _3353));
        float _3360 = (_3356 * _2315) + _2304;
        float _3361 = (_3356 * _2318) + _2308;
        float _3362 = (_3356 * _2321) + _2312;
        float _3363 = _3356 * 9.9999997473787516355514526367188e-05;
        float _3364 = (-1.0) - _3363;
        float _3366 = _3363 + 1.0;
        float frontier_phi_22_53_ladder;
        float frontier_phi_22_53_ladder_1;
        float frontier_phi_22_53_ladder_2;
        if ((_3362 > _3366) || ((_3362 < _3364) || ((_3361 > _3366) || ((_3361 < _3364) || ((_3360 < _3364) || (_3360 > _3366))))))
        {
            frontier_phi_22_53_ladder = 0.0;
            frontier_phi_22_53_ladder_1 = 0.0;
            frontier_phi_22_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3595 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3362, cbModelParam._m0[17u].z, fma(_3361, cbModelParam._m0[17u].y, _3360 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3362, cbModelParam._m0[18u].z, fma(_3361, cbModelParam._m0[18u].y, _3360 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3362, cbModelParam._m0[19u].z, fma(_3361, cbModelParam._m0[19u].y, _3360 * cbModelParam._m0[19u].x))), _2251);
            frontier_phi_22_53_ladder = _3595.y * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_1 = _3595.z * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_2 = _3595.x * cbModelParam._m0[1u].z;
        }
        _2340 = frontier_phi_22_53_ladder_2;
        _2342 = frontier_phi_22_53_ladder;
        _2344 = frontier_phi_22_53_ladder_1;
    }
    else
    {
        vec4 _2324 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1367, _1368, _1369), _2251);
        _2340 = _2324.x * cbModelParam._m0[1u].z;
        _2342 = _2324.y * cbModelParam._m0[1u].z;
        _2344 = _2324.z * cbModelParam._m0[1u].z;
    }
    float _2356 = ((((1.0 - _1387) * ((_1375 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1387 * _1375)) * _1346;
    float _2357 = _2356 * ((cbModelParam._m0[1u].w * (_2340 - _2242)) + _2242);
    float _2358 = _2356 * ((cbModelParam._m0[1u].w * (_2342 - _2244)) + _2244);
    float _2359 = _2356 * ((cbModelParam._m0[1u].w * (_2344 - _2246)) + _2246);
    float _2362 = fma(_2359, cbSceneParam._m0[89u].z, fma(_2358, cbSceneParam._m0[89u].y, _2357 * cbSceneParam._m0[89u].x));
    float _2365 = fma(_2359, cbSceneParam._m0[90u].z, fma(_2358, cbSceneParam._m0[90u].y, _2357 * cbSceneParam._m0[90u].x));
    float _2368 = fma(_2359, cbSceneParam._m0[91u].z, fma(_2358, cbSceneParam._m0[91u].y, _2357 * cbSceneParam._m0[91u].x));
    float _2387 = (cbSceneParam._m0[88u].y * (1.0 - _1166)) + cbSceneParam._m0[88u].z;
    float _4773 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    vec4 _2391 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(_1246, _1247), (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * 5.0);
    float _2407 = 1.0 - _2391.w;
    vec4 _2415 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1246, _1247));
    float _2417 = _2415.w;
    float _2429 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2417);
    float _2430 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2417);
    float _2431 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2417);
    uvec4 _2435 = floatBitsToUint(cbInstanceData._m0[_1321 + 5u]);
    uint _2437 = _2435.x * 14u;
    uint _2438 = _2437 + 13u;
    float _2443 = _1346 + (-1.0);
    float _2446 = (cbLight._m0[_2438].x * _2443) + 1.0;
    float _2447 = (cbLight._m0[_2438].y * _2443) + 1.0;
    uint _2448 = _2437 + 5u;
    float _2454 = isnan(1.0) ? _2447 : (isnan(_2447) ? 1.0 : min(_2447, 1.0));
    uint _2458 = _2437 + 4u;
    float _2467 = isnan(1.0) ? _2446 : (isnan(_2446) ? 1.0 : min(_2446, 1.0));
    uint _2471 = _2437 | 1u;
    float _2482 = dot(vec3(cbLight._m0[_2437].xyz), vec3(_1282, _1283, _1284));
    float _2485 = dot(vec3(cbLight._m0[_2471].xyz), vec3(_1282, _1283, _1284));
    float _4794 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _4805 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2490 = (isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0))) * 0.3183098733425140380859375;
    float _2492 = (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0))) * 0.3183098733425140380859375;
    float _2499 = ((cbLight._m0[_2448].x * _2454) * _2492) + (((cbLight._m0[_2458].x * _2429) * _2467) * _2490);
    float _2500 = ((_2454 * cbLight._m0[_2448].y) * _2492) + (((cbLight._m0[_2458].y * _2430) * _2467) * _2490);
    float _2501 = ((_2454 * cbLight._m0[_2448].z) * _2492) + (((cbLight._m0[_2458].z * _2431) * _2467) * _2490);
    uint _2503 = _2437 + 8u;
    float _2516 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2437].w)) * _1166) * 0.949999988079071044921875);
    float _2517 = _2516 * _2516;
    float _2518 = cbLight._m0[_2437].x + _1239;
    float _2519 = cbLight._m0[_2437].y + _1240;
    float _2520 = cbLight._m0[_2437].z + _1241;
    float _2524 = inversesqrt(dot(vec3(_2518, _2519, _2520), vec3(_2518, _2519, _2520)));
    float _2525 = _2524 * _2518;
    float _2526 = _2524 * _2519;
    float _2527 = _2524 * _2520;
    float _2528 = dot(vec3(_1282, _1283, _1284), vec3(cbLight._m0[_2437].xyz));
    float _4816 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
    float _2531 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
    float _2532 = dot(vec3(_1282, _1283, _1284), vec3(_1239, _1240, _1241));
    float _4827 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _2535 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
    float _2536 = dot(vec3(_1282, _1283, _1284), vec3(_2525, _2526, _2527));
    float _4838 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _2539 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
    float _2540 = dot(vec3(cbLight._m0[_2437].xyz), vec3(_2525, _2526, _2527));
    float _4849 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
    float _2544 = _2517 * _2517;
    float _2548 = ((_2539 * _2539) * (_2544 + (-1.0))) + 1.0;
    float _2559 = (exp2(log2(1.0 - (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2560 = 1.0 - _2517;
    float _2571 = (0.5 / (((_2535 * ((_2531 * _2560) + _2517)) + 9.9999999392252902907785028219223e-09) + (((_2535 * _2560) + _2517) * _2531))) * _2531;
    float _4860 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
    float _2573 = (isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0))) * (_2544 / ((_2548 * _2548) * 3.141590118408203125));
    uint _2587 = _2437 + 9u;
    float _2598 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2471].w)) * _1166) * 0.949999988079071044921875);
    float _2599 = _2598 * _2598;
    float _2600 = cbLight._m0[_2471].x + _1239;
    float _2601 = cbLight._m0[_2471].y + _1240;
    float _2602 = cbLight._m0[_2471].z + _1241;
    float _2606 = inversesqrt(dot(vec3(_2600, _2601, _2602), vec3(_2600, _2601, _2602)));
    float _2607 = _2606 * _2600;
    float _2608 = _2606 * _2601;
    float _2609 = _2606 * _2602;
    float _2610 = dot(vec3(_1282, _1283, _1284), vec3(cbLight._m0[_2471].xyz));
    float _4871 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
    float _2613 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
    float _2614 = dot(vec3(_1282, _1283, _1284), vec3(_2607, _2608, _2609));
    float _4882 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
    float _2617 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
    float _2618 = dot(vec3(cbLight._m0[_2471].xyz), vec3(_2607, _2608, _2609));
    float _4893 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
    float _2622 = _2599 * _2599;
    float _2626 = ((_2617 * _2617) * (_2622 + (-1.0))) + 1.0;
    float _2635 = (exp2(log2(1.0 - (isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2636 = 1.0 - _2599;
    float _2646 = (0.5 / (((_2535 * ((_2613 * _2636) + _2599)) + 9.9999999392252902907785028219223e-09) + (((_2535 * _2636) + _2599) * _2613))) * _2613;
    float _4904 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
    float _2648 = (isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0))) * (_2622 / ((_2626 * _2626) * 3.141590118408203125));
    float _2658 = (((_2635 * cbLight._m0[_2587].x) * _2648) * _2454) + ((((cbLight._m0[_2503].x * _2429) * _2559) * _2573) * _2467);
    float _2659 = (((_2635 * cbLight._m0[_2587].y) * _2648) * _2454) + ((((cbLight._m0[_2503].y * _2430) * _2559) * _2573) * _2467);
    float _2660 = (((_2635 * cbLight._m0[_2587].z) * _2648) * _2454) + ((((cbLight._m0[_2503].z * _2431) * _2559) * _2573) * _2467);
    float _2775;
    float _2777;
    float _2779;
    float _2781;
    float _2783;
    float _2785;
    if (_2435.y == 0u)
    {
        float _2715 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2716 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2715;
        float _2717 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2715;
        float _2718 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2715;
        uvec4 _2730 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2731 = _2730.x;
        uint _2742 = uint((float(_2730.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1247) / _2731))) + floor(float(uint(cbSceneParam._m0[85u].x * _1246) / _2731)));
        float _2752 = (log2(_2718 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2753 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        uint _2756 = uint(isnan(14.0) ? _2753 : (isnan(_2753) ? 14.0 : min(_2753, 14.0)));
        uvec4 _2761 = texelFetch(g_lightClusterGridBuffer, int(((_2756 << 2u) + (_2742 << 6u)) >> 2u));
        uint _2762 = _2761.x;
        uint _2763 = _2730.z;
        float _3002;
        float _3004;
        float _3006;
        float _3008;
        float _3010;
        float _3012;
        if (((((1u << ((_2763 >> 4u) & 15u)) + 4294967295u) & _2762) == 0u) || ((_2763 & 240u) == 0u))
        {
            _3002 = 0.0;
            _3004 = 0.0;
            _3006 = 0.0;
            _3008 = 0.0;
            _3010 = 0.0;
            _3012 = 0.0;
        }
        else
        {
            float _3003;
            float _3005;
            float _3007;
            float _3009;
            float _3011;
            float _3013;
            float _3221 = 0.0;
            float _3222 = 0.0;
            float _3223 = 0.0;
            float _3224 = 0.0;
            float _3225 = 0.0;
            float _3226 = 0.0;
            uint _3227 = 0u;
            uint _3236;
            bool _3237;
            for (;;)
            {
                _3236 = texelFetch(g_lightClassification, int((((_2756 << 5u) + (_2742 << 9u)) + (_3227 << 2u)) >> 2u)).x;
                _3237 = _3236 == 0u;
                float frontier_phi_50_pred;
                float frontier_phi_50_pred_1;
                float frontier_phi_50_pred_2;
                float frontier_phi_50_pred_3;
                float frontier_phi_50_pred_4;
                float frontier_phi_50_pred_5;
                if (_3237)
                {
                    frontier_phi_50_pred = _3224;
                    frontier_phi_50_pred_1 = _3226;
                    frontier_phi_50_pred_2 = _3225;
                    frontier_phi_50_pred_3 = _3223;
                    frontier_phi_50_pred_4 = _3222;
                    frontier_phi_50_pred_5 = _3221;
                }
                else
                {
                    float _3396;
                    float _3397;
                    float _3398;
                    float _3399;
                    float _3400;
                    float _3401;
                    uint _3402;
                    _3396 = _3221;
                    _3397 = _3222;
                    _3398 = _3223;
                    _3399 = _3224;
                    _3400 = _3225;
                    _3401 = _3226;
                    _3402 = _3236;
                    float _3302;
                    float _3303;
                    float _3304;
                    float _3305;
                    float _3306;
                    float _3307;
                    for (;;)
                    {
                        uint _3406 = uint(findLSB(_3402)) + (_3227 << 5u);
                        uint _3403 = (_3402 + 4294967295u) & _3402;
                        uint _3408 = _3406 * 48u;
                        vec4 _3422 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3408)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 3u)).x));
                        uint _3428 = (_3406 * 48u) + 4u;
                        vec4 _3441 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3428)).x, texelFetch(g_PointLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3428 + 3u)).x));
                        uint _3447 = (_3406 * 48u) + 8u;
                        vec3 _3458 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3447)).x, texelFetch(g_PointLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3447 + 2u)).x));
                        float _3462 = _3422.x - _2716;
                        float _3463 = _3422.y - _2717;
                        float _3464 = _3422.z - _2718;
                        float _3465 = dot(vec3(_3462, _3463, _3464), vec3(_3462, _3463, _3464));
                        float _3468 = inversesqrt(_3465);
                        float _3469 = _3468 * _3462;
                        float _3470 = _3468 * _3463;
                        float _3471 = _3468 * _3464;
                        float _3472 = dot(vec3(_1302, _1305, _1308), vec3(_3469, _3470, _3471));
                        float _3477 = 1.0 - (_3465 * _3422.w);
                        float _4925 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                        float _3478 = isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0));
                        float _3479 = sqrt(_3465) * _3441.w;
                        float _3482 = 1.39999997615814208984375 / (_3479 + 1.39999997615814208984375);
                        float _3483 = _3482 * _3482;
                        float _3486 = ((1.0 - _3483) * _3472) + _3483;
                        float _3489 = _3479 * _3479;
                        float _3493 = ((isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0))) * _3478) / ((_3489 * 0.699999988079071044921875) + 1.0);
                        float _3497 = (-0.0) - _2716;
                        float _3498 = (-0.0) - _2717;
                        float _3499 = (-0.0) - _2718;
                        float _3503 = inversesqrt(dot(vec3(_3497, _3498, _3499), vec3(_3497, _3498, _3499)));
                        float _3504 = _3503 * _3497;
                        float _3505 = _3503 * _3498;
                        float _3506 = _3503 * _3499;
                        float _3514 = exp2(log2(1.0 / ((_3489 * 3.5) + 5.0)) * 0.25);
                        float _3515 = 1.0 - _1375;
                        float _3522 = sqrt(1.0 - ((1.0 - (_3515 * _3515)) * (1.0 - (_3514 * _3514))));
                        float _3523 = _3522 * _3522;
                        float _3524 = _3523 * _3523;
                        float _3525 = _3504 + _3469;
                        float _3526 = _3505 + _3470;
                        float _3527 = _3506 + _3471;
                        float _3531 = inversesqrt(dot(vec3(_3525, _3526, _3527), vec3(_3525, _3526, _3527)));
                        float _3535 = dot(vec3(_1302, _1305, _1308), vec3(_3504, _3505, _3506));
                        float _4941 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                        float _3538 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
                        float _3539 = dot(vec3(_1302, _1305, _1308), vec3(_3531 * _3525, _3531 * _3526, _3531 * _3527));
                        float _4952 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                        float _3542 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
                        float _3546 = ((_3542 * _3542) * (_3524 + (-1.0))) + 1.0;
                        float _3547 = _3482 * _3523;
                        float _3548 = _3547 * _3547;
                        float _3551 = ((1.0 - _3548) * _3472) + _3548;
                        float _4963 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                        float _3552 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
                        float _3553 = 1.0 - _3523;
                        float _3563 = (0.5 / (((_3552 * ((_3538 * _3553) + _3523)) + 9.9999999392252902907785028219223e-09) + (((_3552 * _3553) + _3523) * _3538))) * _3552;
                        float _4974 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                        float _3574 = (((_3524 * 3.1415927410125732421875) * (isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0)))) / ((_3546 * _3546) * ((_3489 * 2.1991131305694580078125) + 3.141590118408203125))) * _3478;
                        _3305 = (_3493 * _3441.x) + _3399;
                        _3306 = (_3493 * _3441.y) + _3400;
                        _3307 = (_3493 * _3441.z) + _3401;
                        _3302 = (_3574 * _3458.x) + _3396;
                        _3303 = (_3574 * _3458.y) + _3397;
                        _3304 = (_3574 * _3458.z) + _3398;
                        if (_3403 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3396 = _3302;
                            _3397 = _3303;
                            _3398 = _3304;
                            _3399 = _3305;
                            _3400 = _3306;
                            _3401 = _3307;
                            _3402 = _3403;
                        }
                    }
                    frontier_phi_50_pred = _3305;
                    frontier_phi_50_pred_1 = _3307;
                    frontier_phi_50_pred_2 = _3306;
                    frontier_phi_50_pred_3 = _3304;
                    frontier_phi_50_pred_4 = _3303;
                    frontier_phi_50_pred_5 = _3302;
                }
                _3009 = frontier_phi_50_pred;
                _3013 = frontier_phi_50_pred_1;
                _3011 = frontier_phi_50_pred_2;
                _3007 = frontier_phi_50_pred_3;
                _3005 = frontier_phi_50_pred_4;
                _3003 = frontier_phi_50_pred_5;
                uint _3228 = _3227 + 1u;
                if (_3228 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3221 = _3003;
                    _3222 = _3005;
                    _3223 = _3007;
                    _3224 = _3009;
                    _3225 = _3011;
                    _3226 = _3013;
                    _3227 = _3228;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3002 = _3003;
            _3004 = _3005;
            _3006 = _3007;
            _3008 = _3009;
            _3010 = _3011;
            _3012 = _3013;
        }
        uvec4 _3016 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3017 = _3016.z;
        uint _3019 = (_3017 >> 8u) & 15u;
        float _3189;
        float _3191;
        float _3193;
        float _3195;
        float _3197;
        float _3199;
        if (((4294967295u << _3019) & _2762) == 0u)
        {
            _3189 = _3002;
            _3191 = _3004;
            _3193 = _3006;
            _3195 = _3008;
            _3197 = _3010;
            _3199 = _3012;
        }
        else
        {
            float _3214 = inversesqrt(dot(vec3(_2716, _2717, _2718), vec3(_2716, _2717, _2718)));
            float _3215 = _3214 * _2716;
            float _3216 = _3214 * _2717;
            float _3217 = _3214 * _2718;
            float frontier_phi_41_42_ladder;
            float frontier_phi_41_42_ladder_1;
            float frontier_phi_41_42_ladder_2;
            float frontier_phi_41_42_ladder_3;
            float frontier_phi_41_42_ladder_4;
            float frontier_phi_41_42_ladder_5;
            if (_3019 < ((_3017 >> 12u) & 15u))
            {
                float _3190;
                float _3192;
                float _3194;
                float _3196;
                float _3198;
                float _3200;
                float _3379 = _3002;
                float _3380 = _3004;
                float _3381 = _3006;
                float _3382 = _3008;
                float _3383 = _3010;
                float _3384 = _3012;
                uint _3385 = _3019;
                uint _3394;
                bool _3395;
                for (;;)
                {
                    _3394 = texelFetch(g_lightClassification, int((((_2756 << 5u) + (_2742 << 9u)) + (_3385 << 2u)) >> 2u)).x;
                    _3395 = _3394 == 0u;
                    float frontier_phi_59_pred;
                    float frontier_phi_59_pred_1;
                    float frontier_phi_59_pred_2;
                    float frontier_phi_59_pred_3;
                    float frontier_phi_59_pred_4;
                    float frontier_phi_59_pred_5;
                    if (_3395)
                    {
                        frontier_phi_59_pred = _3384;
                        frontier_phi_59_pred_1 = _3383;
                        frontier_phi_59_pred_2 = _3382;
                        frontier_phi_59_pred_3 = _3381;
                        frontier_phi_59_pred_4 = _3380;
                        frontier_phi_59_pred_5 = _3379;
                    }
                    else
                    {
                        float _3600;
                        float _3601;
                        float _3602;
                        float _3603;
                        float _3604;
                        float _3605;
                        float _3893;
                        float _3894;
                        float _3895;
                        float _3896;
                        float _3897;
                        float _3898;
                        float _3613 = _3379;
                        float _3614 = _3380;
                        float _3615 = _3381;
                        float _3616 = _3382;
                        float _3617 = _3383;
                        float _3618 = _3384;
                        uint _3619 = _3394;
                        uint _3620;
                        vec4 _3645;
                        float _3646;
                        vec4 _3661;
                        vec3 _3673;
                        vec4 _3688;
                        vec4 _3703;
                        float _3749;
                        bool _3750;
                        for (;;)
                        {
                            uint _3630 = ((_3385 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3619));
                            _3620 = (_3619 + 4294967295u) & _3619;
                            uint _3632 = _3630 * 40u;
                            _3645 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 3u)).x));
                            _3646 = _3645.w;
                            uint _3648 = (_3630 * 40u) + 4u;
                            _3661 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3648)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 3u)).x));
                            uint _3663 = (_3630 * 40u) + 8u;
                            _3673 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3663)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 2u)).x));
                            uint _3675 = (_3630 * 40u) + 16u;
                            _3688 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3675)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 3u)).x));
                            uint _3690 = (_3630 * 40u) + 20u;
                            _3703 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3690)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 3u)).x));
                            uint _3705 = (_3630 * 40u) + 24u;
                            vec4 _3718 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3705)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 3u)).x));
                            uint _3724 = (_3630 * 40u) + 28u;
                            vec4 _3737 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3724)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 3u)).x));
                            _3749 = fma(_2718, _3737.z, fma(_2717, _3737.y, _3737.x * _2716)) + _3737.w;
                            _3750 = !((fma(_2718, _3718.z, fma(_2717, _3718.y, _3718.x * _2716)) + _3718.w) <= 0.0);
                            float frontier_phi_65_pred;
                            float frontier_phi_65_pred_1;
                            float frontier_phi_65_pred_2;
                            float frontier_phi_65_pred_3;
                            float frontier_phi_65_pred_4;
                            float frontier_phi_65_pred_5;
                            if (_3750)
                            {
                                float _3777 = _3645.x - _2716;
                                float _3778 = _3645.y - _2717;
                                float _3779 = _3645.z - _2718;
                                float _3780 = dot(vec3(_3777, _3778, _3779), vec3(_3777, _3778, _3779));
                                float _3783 = inversesqrt(_3780);
                                float _3784 = _3783 * _3777;
                                float _3785 = _3783 * _3778;
                                float _3786 = _3783 * _3779;
                                float _3790 = 1.0 - (_3780 / (_3646 * _3646));
                                float _4985 = isnan(0.0) ? _3790 : (isnan(_3790) ? 0.0 : max(_3790, 0.0));
                                float _3791 = isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0));
                                float _3795 = sqrt(_3780) * _3661.w;
                                float _3797 = 1.39999997615814208984375 / (_3795 + 1.39999997615814208984375);
                                float _3798 = _3797 * _3797;
                                float _3801 = ((1.0 - _3798) * dot(vec3(_3784, _3785, _3786), vec3(_1302, _1305, _1308))) + _3798;
                                float _3804 = _3795 * _3795;
                                float _3808 = (fma(_2718, _3688.z, fma(_2717, _3688.y, _3688.x * _2716)) + _3688.w) / _3749;
                                float _3809 = (fma(_2718, _3703.z, fma(_2717, _3703.y, _3703.x * _2716)) + _3703.w) / _3749;
                                float _3813 = 1.0 - dot(vec2(_3808, _3809), vec2(_3808, _3809));
                                float _5001 = isnan(0.0) ? _3813 : (isnan(_3813) ? 0.0 : max(_3813, 0.0));
                                float _3814 = isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0));
                                float _3815 = _3814 * (((isnan(0.0) ? _3801 : (isnan(_3801) ? 0.0 : max(_3801, 0.0))) * _3791) / ((_3804 * 0.699999988079071044921875) + 1.0));
                                float _3827 = exp2(log2(1.0 / ((_3804 * 3.5) + 5.0)) * 0.25);
                                float _3828 = 1.0 - _1375;
                                float _3835 = sqrt(1.0 - ((1.0 - (_3828 * _3828)) * (1.0 - (_3827 * _3827))));
                                float _3836 = _3835 * _3835;
                                float _3837 = _3836 * _3836;
                                float _3838 = _3784 - _3215;
                                float _3839 = _3785 - _3216;
                                float _3840 = _3786 - _3217;
                                float _3844 = inversesqrt(dot(vec3(_3838, _3839, _3840), vec3(_3838, _3839, _3840)));
                                float _3848 = dot(vec3(_1302, _1305, _1308), vec3((-0.0) - _3215, (-0.0) - _3216, (-0.0) - _3217));
                                float _5012 = isnan(0.0) ? _3848 : (isnan(_3848) ? 0.0 : max(_3848, 0.0));
                                float _3851 = isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0));
                                float _3852 = dot(vec3(_1302, _1305, _1308), vec3(_3844 * _3838, _3844 * _3839, _3844 * _3840));
                                float _5023 = isnan(0.0) ? _3852 : (isnan(_3852) ? 0.0 : max(_3852, 0.0));
                                float _3855 = isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0));
                                float _3859 = ((_3855 * _3855) * (_3837 + (-1.0))) + 1.0;
                                float _3860 = _3797 * _3836;
                                float _3861 = _3860 * _3860;
                                float _3867 = ((1.0 - _3861) * dot(vec3(_1302, _1305, _1308), vec3(_3784, _3785, _3786))) + _3861;
                                float _5034 = isnan(0.0) ? _3867 : (isnan(_3867) ? 0.0 : max(_3867, 0.0));
                                float _3868 = isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0));
                                float _3869 = 1.0 - _3836;
                                float _3879 = (0.5 / (((_3868 * ((_3851 * _3869) + _3836)) + 9.9999999392252902907785028219223e-09) + (((_3868 * _3869) + _3836) * _3851))) * _3868;
                                float _5045 = isnan(0.0) ? _3879 : (isnan(_3879) ? 0.0 : max(_3879, 0.0));
                                float _3889 = (_3814 * _3791) * (((_3837 * 3.1415927410125732421875) * (isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0)))) / ((_3859 * _3859) * ((_3804 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_65_pred = _3815 * _3661.z;
                                frontier_phi_65_pred_1 = _3815 * _3661.y;
                                frontier_phi_65_pred_2 = _3815 * _3661.x;
                                frontier_phi_65_pred_3 = _3889 * _3673.z;
                                frontier_phi_65_pred_4 = _3889 * _3673.y;
                                frontier_phi_65_pred_5 = _3889 * _3673.x;
                            }
                            else
                            {
                                frontier_phi_65_pred = 0.0;
                                frontier_phi_65_pred_1 = 0.0;
                                frontier_phi_65_pred_2 = 0.0;
                                frontier_phi_65_pred_3 = 0.0;
                                frontier_phi_65_pred_4 = 0.0;
                                frontier_phi_65_pred_5 = 0.0;
                            }
                            _3898 = frontier_phi_65_pred;
                            _3897 = frontier_phi_65_pred_1;
                            _3896 = frontier_phi_65_pred_2;
                            _3895 = frontier_phi_65_pred_3;
                            _3894 = frontier_phi_65_pred_4;
                            _3893 = frontier_phi_65_pred_5;
                            _3603 = _3896 + _3616;
                            _3604 = _3897 + _3617;
                            _3605 = _3898 + _3618;
                            _3600 = _3893 + _3613;
                            _3601 = _3894 + _3614;
                            _3602 = _3895 + _3615;
                            if (_3620 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3613 = _3600;
                                _3614 = _3601;
                                _3615 = _3602;
                                _3616 = _3603;
                                _3617 = _3604;
                                _3618 = _3605;
                                _3619 = _3620;
                                continue;
                            }
                        }
                        frontier_phi_59_pred = _3605;
                        frontier_phi_59_pred_1 = _3604;
                        frontier_phi_59_pred_2 = _3603;
                        frontier_phi_59_pred_3 = _3602;
                        frontier_phi_59_pred_4 = _3601;
                        frontier_phi_59_pred_5 = _3600;
                    }
                    _3200 = frontier_phi_59_pred;
                    _3198 = frontier_phi_59_pred_1;
                    _3196 = frontier_phi_59_pred_2;
                    _3194 = frontier_phi_59_pred_3;
                    _3192 = frontier_phi_59_pred_4;
                    _3190 = frontier_phi_59_pred_5;
                    uint _3386 = _3385 + 1u;
                    if (_3386 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3379 = _3190;
                        _3380 = _3192;
                        _3381 = _3194;
                        _3382 = _3196;
                        _3383 = _3198;
                        _3384 = _3200;
                        _3385 = _3386;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_41_42_ladder = _3196;
                frontier_phi_41_42_ladder_1 = _3200;
                frontier_phi_41_42_ladder_2 = _3198;
                frontier_phi_41_42_ladder_3 = _3194;
                frontier_phi_41_42_ladder_4 = _3192;
                frontier_phi_41_42_ladder_5 = _3190;
            }
            else
            {
                frontier_phi_41_42_ladder = _3008;
                frontier_phi_41_42_ladder_1 = _3012;
                frontier_phi_41_42_ladder_2 = _3010;
                frontier_phi_41_42_ladder_3 = _3006;
                frontier_phi_41_42_ladder_4 = _3004;
                frontier_phi_41_42_ladder_5 = _3002;
            }
            _3189 = frontier_phi_41_42_ladder_5;
            _3191 = frontier_phi_41_42_ladder_4;
            _3193 = frontier_phi_41_42_ladder_3;
            _3195 = frontier_phi_41_42_ladder;
            _3197 = frontier_phi_41_42_ladder_2;
            _3199 = frontier_phi_41_42_ladder_1;
        }
        float _3204 = isnan(1.0) ? _1346 : (isnan(_1346) ? 1.0 : min(_1346, 1.0));
        _2775 = (_3204 * _3195) + _2499;
        _2777 = (_3204 * _3197) + _2500;
        _2779 = (_3204 * _3199) + _2501;
        _2781 = ((_3189 * 0.039999999105930328369140625) * _3204) + _2658;
        _2783 = ((_3191 * 0.039999999105930328369140625) * _3204) + _2659;
        _2785 = ((_3193 * 0.039999999105930328369140625) * _3204) + _2660;
    }
    else
    {
        _2775 = _2499;
        _2777 = _2500;
        _2779 = _2501;
        _2781 = _2658;
        _2783 = _2659;
        _2785 = _2660;
    }
    uint _2791 = _1322 + uint(cbMatDynParam._m0[0u].w);
    float _2797 = cbInstanceData._m0[_2791].x * (_968 - (_968 * TEXCOORD_7.x));
    float _2798 = cbInstanceData._m0[_2791].y * (_970 - (_970 * TEXCOORD_7.y));
    float _2799 = cbInstanceData._m0[_2791].z * (_972 - (_972 * TEXCOORD_7.z));
    float _2818 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2819 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2820 = cbSceneParam._m0[86u].x * ((_1246 / cbSceneParam._m0[86u].x) + (((10.0 / (_1183 + 10.0)) * cbMtdParam._m0[20u].y) * dot(vec3(_1282, _1283, _1284), vec3(_229, _230, _231))));
    float _2821 = isnan(_2818) ? _2820 : (isnan(_2820) ? _2818 : min(_2820, _2818));
    float _2822 = isnan(_2819) ? _1247 : (isnan(_1247) ? _2819 : min(_1247, _2819));
    vec4 _2824 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2821, _2822), 0.0);
    float _2826 = _2824.x;
    bool _2846 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2826)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2826))) > _1183;
    float _2847 = _2846 ? _2821 : _1246;
    float _2848 = _2846 ? _2822 : _1247;
    vec4 _2850 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2847, _2848));
    vec4 _2855 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2847, _2848));
    float _2857 = _2855.x;
    float _2877 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2857)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2857))) - _1183;
    bool _2887 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2891 = (isnan(_2877) ? 0.0 : (isnan(0.0) ? _2877 : max(0.0, _2877))) * (-1.44269502162933349609375);
    float _5076 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
    float _5087 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
    float _5098 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
    float _2918 = 0.959999978542327880859375 - (exp2(log2(1.0 - (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0)))) * 5.0) * 0.959999978542327880859375);
    float _2921 = ((_2850.x * _2918) * exp2(_2891 * (_2887 ? 0.0 : (cbMtdParam._m0[39u].z + cbMtdParam._m0[38u].x)))) * cbSceneParam._m0[72u].w;
    float _2924 = ((_2850.y * _2918) * exp2(_2891 * (_2887 ? 0.0 : (cbMtdParam._m0[39u].w + cbMtdParam._m0[38u].y)))) * cbSceneParam._m0[72u].w;
    float _2927 = ((_2850.z * _2918) * exp2(_2891 * (_2887 ? 0.0 : (cbMtdParam._m0[40u].x + cbMtdParam._m0[38u].z)))) * cbSceneParam._m0[72u].w;
    float _2936 = ((_2797 + (((((_2356 * _2391.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0))) * _2151) * _2407)) + _2781) * cbPerFrame._m0[3u].x)) + _2921) + ((((isnan(1.0) ? _5076 : (isnan(_5076) ? 1.0 : min(_5076, 1.0))) * (_2775 + ((isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0))) * _1346))) - _2921) * _1104);
    float _2939 = ((_2798 + (((((_2356 * _2391.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0))) * _2151) * _2407)) + _2783) * cbPerFrame._m0[3u].x)) + _2924) + ((((isnan(1.0) ? _5087 : (isnan(_5087) ? 1.0 : min(_5087, 1.0))) * (_2777 + ((isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0))) * _1346))) - _2924) * _1104);
    float _2942 = ((_2799 + (((((_2356 * _2391.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0))) * _2151) * _2407)) + _2785) * cbPerFrame._m0[3u].x)) + _2927) + ((((isnan(1.0) ? _5098 : (isnan(_5098) ? 1.0 : min(_5098, 1.0))) * (_2779 + ((isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0))) * _1346))) - _2927) * _1104);
    float _5124 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2955 = isnan(1.0) ? _5124 : (isnan(_5124) ? 1.0 : min(_5124, 1.0));
    float _2965 = _1246 / cbSceneParam._m0[86u].x;
    float _2966 = _1247 / cbSceneParam._m0[86u].y;
    vec4 _2980 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2965, _2966, (log2((isnan(cbSceneParam._m0[77u].w) ? _1183 : (isnan(_1183) ? cbSceneParam._m0[77u].w : min(_1183, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2982 = _2980.x;
    float _2983 = _2980.y;
    float _2984 = _2980.z;
    float _2985 = _2980.w;
    float _3064;
    float _3066;
    float _3068;
    float _3070;
    if (_1183 > cbSceneParam._m0[78u].w)
    {
        float _3027 = isnan(_1183) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1183 : min(cbSceneParam._m0[80u].w, _1183));
        float _3028 = _3027 / _1183;
        float _3039 = _3028 * _1232;
        float _3040 = _1233 * _3028;
        float _3041 = (-0.0) - _3040;
        float _3042 = _3028 * _1234;
        float _3044 = (cbSceneParam._m0[77u].w * _3041) / _3027;
        float _3045 = _3044 + cbSceneParam._m0[79u].w;
        float _3046 = cbSceneParam._m0[79u].w - _3040;
        float _3052 = sqrt(((_3039 * _3039) + (_3040 * _3040)) + (_3042 * _3042));
        float _3055 = (1.0 - (cbSceneParam._m0[77u].w / _3027)) * _3052;
        float _3061 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3062 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3315;
        if (abs((_3041 - _3044) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3315 = ((((_3045 > 0.0) ? exp2(_3061 * _3045) : (2.0 - exp2(_3062 * _3045))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3055;
        }
        else
        {
            float _3250 = 1.0 / cbSceneParam._m0[80u].x;
            float _3251 = isnan(_3046) ? _3045 : (isnan(_3045) ? _3046 : max(_3045, _3046));
            float _3252 = isnan(_3046) ? _3045 : (isnan(_3045) ? _3046 : min(_3045, _3046));
            float _3261 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : min(_3251, 0.0));
            float _3262 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : min(_3252, 0.0));
            _3315 = ((abs(_3052 / _3041) * cbSceneParam._m0[80u].y) * ((((_3261 - _3262) * 2.0) - ((exp2(_3061 * (isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0)))) - exp2(_3061 * (isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0))))) * _3250)) - ((exp2(_3062 * _3261) - exp2(_3062 * _3262)) * _3250))) + (_3055 * cbSceneParam._m0[80u].z);
        }
        vec4 _3317 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2965, _2966, 1.0), 0.0);
        float _3326 = exp2((_3315 * (-1.44269502162933349609375)) * (1.0 - _3317.w));
        float _3327 = log2(_3326);
        float _3343 = log2(_2985);
        _3064 = (exp2(_3343 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3327 * cbSceneParam._m0[78u].x)) * _3317.x) / cbSceneParam._m0[78u].x)) + _2982;
        _3066 = (exp2(_3343 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3327 * cbSceneParam._m0[78u].y)) * _3317.y) / cbSceneParam._m0[78u].y)) + _2983;
        _3068 = (exp2(_3343 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3327 * cbSceneParam._m0[78u].z)) * _3317.z) / cbSceneParam._m0[78u].z)) + _2984;
        _3070 = _3326 * _2985;
    }
    else
    {
        _3064 = _2982;
        _3066 = _2983;
        _3068 = _2984;
        _3070 = _2985;
    }
    bool _3082 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _3083 = log2(_3070);
    float _3087 = exp2(_3083 * cbSceneParam._m0[78u].x);
    float _3088 = exp2(_3083 * cbSceneParam._m0[78u].y);
    float _3089 = exp2(_3083 * cbSceneParam._m0[78u].z);
    float _3090 = _3087 * (isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0)));
    float _3091 = _3088 * (isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0)));
    float _3092 = _3089 * (isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0)));
    vec4 _3100 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_1246, _1247));
    float _3102 = _3100.x;
    float _3123 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3102)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3102))) - _1183) * cbMtdParam._m0[24u].y;
    float _5175 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
    float _3124 = isnan(1.0) ? _5175 : (isnan(_5175) ? 1.0 : min(_5175, 1.0));
    float _3125 = (cbInstanceData._m0[_1321 + 6u].w * (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) * _3124;
    float _3134 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3134 * (_3082 ? _3090 : (_3090 + (cbSceneParam._m0[72u].w * _3064)));
    SV_Target.y = _3134 * (_3082 ? _3091 : (_3091 + (cbSceneParam._m0[72u].w * _3066)));
    SV_Target.z = _3134 * (_3082 ? _3092 : (_3092 + (cbSceneParam._m0[72u].w * _3068)));
    SV_Target.w = _3125;
    SV_Target_1.x = ((((cbMtdParam._m0[2u].x * _2797) * _2955) * _3087) * _3124) * _3134;
    SV_Target_1.y = ((((cbMtdParam._m0[2u].y * _2798) * _2955) * _3088) * _3124) * _3134;
    SV_Target_1.z = ((((cbMtdParam._m0[2u].z * _2799) * _2955) * _3089) * _3124) * _3134;
    SV_Target_1.w = _3125;
}


