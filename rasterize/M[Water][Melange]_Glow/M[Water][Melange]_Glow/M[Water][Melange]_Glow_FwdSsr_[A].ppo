#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[42];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 0, std140) uniform cbPerSceneUBO
{
    vec4 _m0[39];
} cbPerScene;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 26) uniform texture2D g_PrevFrameTexture;
layout(set = 0, binding = 27) uniform texture2D g_ConvertedDepthTexture;
layout(set = 0, binding = 0) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Melange_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 7) in float TEXCOORD_12;
layout(location = 0) out vec4 SV_Target;
bool discard_state;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    float _139 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _140 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _141 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _147 = inversesqrt(dot(vec3(_139, _140, _141), vec3(_139, _140, _141)));
    float _154 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _161 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _196 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _204 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _208 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _218 = cbSceneParam._m0[71u].x - (_196 / _208);
    float _219 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _208);
    float _220 = cbSceneParam._m0[71u].z - (_204 / _208);
    float _230 = sqrt(((_218 * _218) + (_219 * _219)) + (_220 * _220));
    float _235 = cbMtdParam._m0[22u].x - cbMtdParam._m0[21u].w;
    float _237 = (_230 - cbMtdParam._m0[21u].w) / (isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0)));
    float _252 = (cbMtdParam._m0[29u].y + cbPerFrame._m0[22u].x) * cbMtdParam._m0[20u].z;
    vec4 _276 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_2, SS_BumpMap), vec2((((_252 * cbMtdParam._m0[35u].x) + (cbMtdParam._m0[34u].z * TEXCOORD.x)) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[34u].w * TEXCOORD.y) + (_252 * cbMtdParam._m0[35u].y)) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _279 = _276.x;
    float _280 = _276.y;
    float _1123 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _283 = isnan(1.0) ? _1123 : (isnan(_1123) ? 1.0 : min(_1123, 1.0));
    float _284 = _276.z - _283;
    float _1134 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _285 = isnan(1.0) ? _1134 : (isnan(_1134) ? 1.0 : min(_1134, 1.0));
    float _297 = (_285 * 0.00999999977648258209228515625) + TEXCOORD.x;
    float _299 = (_285 * (-0.00999999977648258209228515625)) + TEXCOORD.y;
    vec4 _312 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2(((_297 + (cbMtdParam._m0[31u].x * _252)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_299 + (cbMtdParam._m0[31u].y * _252)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _329 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2(((_297 + (cbMtdParam._m0[30u].z * _252)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_299 + (cbMtdParam._m0[30u].w * _252)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _353 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * ((_196 / cbMtdParam._m0[22u].z) + (cbMtdParam._m0[35u].z * _252))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * ((_204 / cbMtdParam._m0[22u].z) + (cbMtdParam._m0[35u].w * _252))) + cbTextureTilingScale._m0[1u].w));
    float _361 = ((cbMtdParam._m0[21u].y - cbMtdParam._m0[20u].x) * _283) + cbMtdParam._m0[20u].x;
    float _1145 = isnan(0.0) ? TEXCOORD_3.y : (isnan(TEXCOORD_3.y) ? 0.0 : max(TEXCOORD_3.y, 0.0));
    float _362 = isnan(1.0) ? _1145 : (isnan(_1145) ? 1.0 : min(_1145, 1.0));
    float _373 = _237 / cbMtdParam._m0[23u].w;
    float _1156 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _374 = isnan(1.0) ? _1156 : (isnan(_1156) ? 1.0 : min(_1156, 1.0));
    float _375 = _285 * 0.23999999463558197021484375;
    float _377 = _285 * (-0.20000000298023223876953125);
    float _388 = cbMtdParam._m0[36u].z * TEXCOORD.x;
    float _389 = cbMtdParam._m0[36u].w * TEXCOORD.y;
    vec4 _398 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[36u].x * _252) + _375) + _388) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[36u].y * _252) + _377) + _389) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _417 = texture(sampler2D(M_Water_Melange_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((((_388 + _375) + (cbMtdParam._m0[37u].x * _252)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_389 + _377) + (cbMtdParam._m0[37u].y * _252)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _438 = (((_329.x + (-0.5)) * 0.5) + _312.x) + (((_398.x + (-1.0)) + _417.x) * cbMtdParam._m0[25u].w);
    float _439 = (((_329.y + (-0.5)) * 0.5) + _312.y) + (((_398.y + (-1.0)) + _417.y) * cbMtdParam._m0[25u].w);
    float _444 = ((_353.x - _438) * _374) + _438;
    float _445 = ((_353.y - _439) * _374) + _439;
    float _447 = _237 / cbMtdParam._m0[23u].y;
    float _1167 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _448 = isnan(1.0) ? _1167 : (isnan(_1167) ? 1.0 : min(_1167, 1.0));
    float _465 = ((((_362 * (0.5 - _279)) + _279) + (((_444 + (-0.5)) + ((0.5 - _444) * _448)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _466 = ((((_362 * (0.5 - _280)) + _280) + (((_445 + (-0.5)) + ((0.5 - _445) * _448)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _467 = dot(vec2(_465, _466), vec2(_465, _466));
    float _1178 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _472 = sqrt(1.0 - (isnan(1.0) ? _1178 : (isnan(_1178) ? 1.0 : min(_1178, 1.0))));
    float _475 = fma(_472, _154 * NORMAL.x, fma(_466, _161 * TANGENT.x, (_147 * _139) * _465));
    float _478 = fma(_472, _154 * NORMAL.y, fma(_466, _161 * TANGENT.y, (_147 * _140) * _465));
    float _481 = fma(_472, _154 * NORMAL.z, fma(_466, _161 * TANGENT.z, (_147 * _141) * _465));
    float _485 = inversesqrt(dot(vec3(_475, _478, _481), vec3(_475, _478, _481)));
    float _486 = _485 * _475;
    float _487 = _485 * _478;
    float _488 = _485 * _481;
    float _1189 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _489 = isnan(1.0) ? _1189 : (isnan(_1189) ? 1.0 : min(_1189, 1.0));
    float _503 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _570 = (cbMatDynParam._m0[5u].x * _230) + cbMatDynParam._m0[5u].y;
        float _1200 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
        float _571 = isnan(1.0) ? _1200 : (isnan(_1200) ? 1.0 : min(_1200, 1.0));
        float _575 = (cbMatDynParam._m0[5u].z * _230) + cbMatDynParam._m0[5u].w;
        float _1211 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _1211 : (isnan(_1211) ? 1.0 : min(_1211, 1.0))) - _571)) + _571) < ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    vec4 _514 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD.z, TEXCOORD.w));
    float _523 = (_514.x * 2.0) + (-1.0);
    float _524 = (_514.y * 2.0) + (-1.0);
    float _525 = (_514.z * 2.0) + (-1.0);
    float _529 = inversesqrt(dot(vec3(_523, _524, _525), vec3(_523, _524, _525)));
    float _540 = ((TEXCOORD.w >= 1.0) || (((TEXCOORD.z <= 0.0) || (TEXCOORD.z >= 1.0)) || (TEXCOORD.w <= 0.0))) ? 0.0 : _514.w;
    float _547 = (((_523 * _529) - _486) * _540) + _486;
    float _548 = (((_524 * _529) - _487) * _540) + _487;
    float _549 = (((_525 * _529) - _488) * _540) + _488;
    float _550 = POSITION_1.x / POSITION_1.w;
    float _551 = POSITION_1.y / POSITION_1.w;
    float _554 = (_550 * 0.5) + 0.5;
    float _555 = 0.5 - (_551 * 0.5);
    float _587;
    float _589;
    float _591;
    float _593;
    if (_489 < cbPerScene._m0[22u].z)
    {
        _587 = 0.0;
        _589 = 0.0;
        _591 = 0.0;
        _593 = 0.0;
    }
    else
    {
        float _599 = 1.0 / _503;
        float frontier_phi_3_4_ladder;
        float frontier_phi_3_4_ladder_1;
        float frontier_phi_3_4_ladder_2;
        float frontier_phi_3_4_ladder_3;
        if (!(cbPerScene._m0[21u].y >= _599))
        {
            float _624 = fma(_549, cbPerScene._m0[8u].z, fma(_548, cbPerScene._m0[8u].y, cbPerScene._m0[8u].x * _547));
            float _627 = fma(_549, cbPerScene._m0[9u].z, fma(_548, cbPerScene._m0[9u].y, cbPerScene._m0[9u].x * _547));
            float _630 = fma(_549, cbPerScene._m0[10u].z, fma(_548, cbPerScene._m0[10u].y, cbPerScene._m0[10u].x * _547));
            float _637 = (_550 * _503) * cbPerScene._m0[28u].x;
            float _639 = (_551 * _503) * cbPerScene._m0[28u].y;
            float _643 = inversesqrt(dot(vec3(_637, _639, _503), vec3(_637, _639, _503)));
            float _644 = _637 * _643;
            float _645 = _639 * _643;
            float _646 = _643 * _503;
            float _650 = dot(vec3(_644, _645, _646), vec3(_624, _627, _630)) * 2.0;
            float _654 = _644 - (_650 * _624);
            float _655 = _645 - (_650 * _627);
            float _656 = _646 - (_650 * _630);
            float _660 = inversesqrt(dot(vec3(_654, _655, _656), vec3(_654, _655, _656)));
            float _663 = _656 * _660;
            float frontier_phi_3_4_ladder_6_ladder;
            float frontier_phi_3_4_ladder_6_ladder_1;
            float frontier_phi_3_4_ladder_6_ladder_2;
            float frontier_phi_3_4_ladder_6_ladder_3;
            if (_663 < cbPerScene._m0[16u].x)
            {
                frontier_phi_3_4_ladder_6_ladder = 0.0;
                frontier_phi_3_4_ladder_6_ladder_1 = 0.0;
                frontier_phi_3_4_ladder_6_ladder_2 = 0.0;
                frontier_phi_3_4_ladder_6_ladder_3 = 0.0;
            }
            else
            {
                float _676 = abs(dot(vec3((-0.0) - _644, (-0.0) - _645, (-0.0) - _646), vec3(_624, _627, _630)));
                float _1222 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
                float _687 = (((_489 * _489) * 0.959999978542327880859375) * exp2(log2(1.0 - (isnan(1.0) ? _1222 : (isnan(_1222) ? 1.0 : min(_1222, 1.0)))) * 5.0)) + 0.039999999105930328369140625;
                float _695 = (cbPerScene._m0[29u].x * (1.0 - _489)) + cbPerScene._m0[29u].y;
                float _1233 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
                float _703 = ((cbPerScene._m0[23u].w - cbPerScene._m0[23u].z) * (isnan(1.0) ? _1233 : (isnan(_1233) ? 1.0 : min(_1233, 1.0)))) + cbPerScene._m0[23u].z;
                float frontier_phi_3_4_ladder_6_ladder_7_ladder;
                float frontier_phi_3_4_ladder_6_ladder_7_ladder_1;
                float frontier_phi_3_4_ladder_6_ladder_7_ladder_2;
                float frontier_phi_3_4_ladder_6_ladder_7_ladder_3;
                if (_687 < cbPerScene._m0[22u].x)
                {
                    frontier_phi_3_4_ladder_6_ladder_7_ladder = 0.0;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_1 = 0.0;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_2 = 0.0;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_3 = 0.0;
                }
                else
                {
                    float _706 = _663 - cbPerScene._m0[16u].x;
                    float _1244 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
                    float _707 = isnan(1.0) ? _1244 : (isnan(_1244) ? 1.0 : min(_1244, 1.0));
                    float _708 = _707 * _707;
                    float _710 = (_687 - cbPerScene._m0[22u].x) * 10.0;
                    float _1255 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
                    float _712 = isnan(1.0) ? _1255 : (isnan(_1255) ? 1.0 : min(_1255, 1.0));
                    float _713 = isnan(_712) ? _708 : (isnan(_708) ? _712 : min(_708, _712));
                    float _717 = (cbPerScene._m0[21u].x - _503) * cbPerScene._m0[21u].z;
                    float _1271 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
                    float _718 = isnan(1.0) ? _1271 : (isnan(_1271) ? 1.0 : min(_1271, 1.0));
                    float _719 = isnan(_718) ? _713 : (isnan(_713) ? _718 : min(_713, _718));
                    float _720 = (_654 * _660) + _637;
                    float _721 = (_655 * _660) + _639;
                    float _722 = _663 + _503;
                    float _754 = fma(_722, cbPerScene._m0[7u].z, fma(_721, cbPerScene._m0[7u].y, cbPerScene._m0[7u].x * _720)) + cbPerScene._m0[7u].w;
                    float _758 = ((fma(_722, cbPerScene._m0[4u].z, fma(_721, cbPerScene._m0[4u].y, cbPerScene._m0[4u].x * _720)) + cbPerScene._m0[4u].w) / _754) - _554;
                    float _759 = ((fma(_722, cbPerScene._m0[5u].z, fma(_721, cbPerScene._m0[5u].y, cbPerScene._m0[5u].x * _720)) + cbPerScene._m0[5u].w) / _754) - _555;
                    float _766 = cbPerScene._m0[18u].x * _758;
                    float _767 = cbPerScene._m0[18u].y * _759;
                    float _772 = sqrt((_766 * _766) + (_767 * _767)) + 9.9999997473787516355514526367188e-06;
                    float _777 = (_758 / _772) * _703;
                    float _778 = (_759 / _772) * _703;
                    float _779 = (((1.0 / _722) - _599) / _772) * _703;
                    float _807 = abs(float(_777 > 0.0) - _554) / (abs(_777) + 1.0000000116860974230803549289703e-07);
                    float _808 = abs(float(_778 > 0.0) - _555) / (abs(_778) + 1.0000000116860974230803549289703e-07);
                    float _810 = (abs(((_779 > 0.0) ? cbPerScene._m0[20u].x : cbPerScene._m0[20u].y) - _599) / (abs(_779) + 1.0000000116860974230803549289703e-07)) + 2.0;
                    float _811 = isnan(_808) ? _807 : (isnan(_807) ? _808 : min(_807, _808));
                    float _812 = isnan(_810) ? _811 : (isnan(_811) ? _810 : min(_811, _810));
                    uint _815 = uint(int(isnan(cbPerScene._m0[23u].y) ? _812 : (isnan(_812) ? cbPerScene._m0[23u].y : min(_812, cbPerScene._m0[23u].y))));
                    float _594;
                    float _820;
                    float _822;
                    float _824;
                    if (int(_815) > int(0u))
                    {
                        float _817 = _779 + _599;
                        float _818 = _778 + _555;
                        float _819 = _777 + _554;
                        float _821;
                        float _823;
                        float _825;
                        float _826;
                        uint _837;
                        float _839;
                        float _841;
                        float _843;
                        float _845;
                        float _847;
                        float _849;
                        float _851;
                        uint _853;
                        float _855;
                        float _857;
                        float _859;
                        float _832 = 0.0;
                        float _833 = 0.0;
                        float _834 = 0.0;
                        float _835 = 0.0;
                        uint _836 = 0u;
                        float _838 = _599;
                        float _840 = _819;
                        float _842 = _818;
                        float _844 = _817;
                        float _846 = _554;
                        float _848 = _555;
                        float _850 = _599;
                        uint _852 = 1u;
                        float _854 = 0.0;
                        float _856 = 0.0;
                        float _858 = 0.0;
                        float _870;
                        float _877;
                        float _878;
                        float _879;
                        float _880;
                        float _881;
                        float _882;
                        uint _883;
                        float _884;
                        bool _890;
                        for (;;)
                        {
                            _870 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _840, cbSceneParam._m0[86u].y * _842), 0.0).x;
                            bool _876 = _836 == (_815 + 4294967295u);
                            _877 = _876 ? _854 : _840;
                            _878 = _876 ? _856 : _842;
                            _879 = _876 ? _858 : _844;
                            _880 = _876 ? _854 : _846;
                            _881 = _876 ? _856 : _848;
                            _882 = _876 ? _858 : _850;
                            _883 = _876 ? 1u : _852;
                            _884 = _876 ? (-1.0) : (_844 - _870);
                            _890 = (_883 != 0u) && ((_884 <= 0.0) && ((_876 ? (-1.0) : (_870 - (_838 * cbPerScene._m0[19u].y))) < 0.0));
                            float frontier_phi_17_pred;
                            float frontier_phi_17_pred_1;
                            float frontier_phi_17_pred_2;
                            uint frontier_phi_17_pred_3;
                            float frontier_phi_17_pred_4;
                            float frontier_phi_17_pred_5;
                            float frontier_phi_17_pred_6;
                            float frontier_phi_17_pred_7;
                            float frontier_phi_17_pred_8;
                            float frontier_phi_17_pred_9;
                            float frontier_phi_17_pred_10;
                            float frontier_phi_17_pred_11;
                            float frontier_phi_17_pred_12;
                            float frontier_phi_17_pred_13;
                            float frontier_phi_17_pred_14;
                            uint frontier_phi_17_pred_15;
                            if (_890)
                            {
                                uint _900 = uint(int(log2(_703) + 0.999000012874603271484375));
                                float _911;
                                float _913;
                                float _915;
                                float _917;
                                float _919;
                                float _921;
                                float _923;
                                if (int(_900) > int(0u))
                                {
                                    uint _1021;
                                    float _1023;
                                    float _1024;
                                    float _1025;
                                    float _1026;
                                    float _1027;
                                    float _1028;
                                    float _1029;
                                    _1021 = 0u;
                                    _1023 = _877;
                                    _1024 = _878;
                                    _1025 = _879;
                                    _1026 = _880;
                                    _1027 = _881;
                                    _1028 = _882;
                                    _1029 = _870;
                                    float _912;
                                    float _914;
                                    float _916;
                                    float _918;
                                    float _920;
                                    float _922;
                                    float _924;
                                    for (;;)
                                    {
                                        float _1033 = (_1026 + _1023) * 0.5;
                                        float _1034 = (_1027 + _1024) * 0.5;
                                        float _1035 = (_1028 + _1025) * 0.5;
                                        vec4 _1043 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _1033, cbSceneParam._m0[86u].y * _1034), 0.0);
                                        float _1045 = _1043.x;
                                        bool _1047 = (_1035 - _1045) < 0.0;
                                        _912 = _1047 ? _1033 : _1023;
                                        _914 = _1047 ? _1034 : _1024;
                                        _916 = _1047 ? _1035 : _1025;
                                        _918 = _1047 ? _1026 : _1033;
                                        _920 = _1047 ? _1027 : _1034;
                                        _922 = _1047 ? _1028 : _1035;
                                        _924 = _1047 ? _1045 : _1029;
                                        uint _1022 = _1021 + 1u;
                                        if (_1022 == _900)
                                        {
                                            break;
                                        }
                                        else
                                        {
                                            _1021 = _1022;
                                            _1023 = _912;
                                            _1024 = _914;
                                            _1025 = _916;
                                            _1026 = _918;
                                            _1027 = _920;
                                            _1028 = _922;
                                            _1029 = _924;
                                        }
                                    }
                                    _911 = _912;
                                    _913 = _914;
                                    _915 = _916;
                                    _917 = _918;
                                    _919 = _920;
                                    _921 = _922;
                                    _923 = _924;
                                }
                                else
                                {
                                    _911 = _877;
                                    _913 = _878;
                                    _915 = _879;
                                    _917 = _880;
                                    _919 = _881;
                                    _921 = _882;
                                    _923 = _870;
                                }
                                float _933 = cbPerScene._m0[28u].x * ((_911 * 2.0) + (-1.0));
                                float _934 = cbPerScene._m0[28u].y * (1.0 - (_913 * 2.0));
                                float _966 = fma(_923, cbPerScene._m0[27u].w, fma(_934, cbPerScene._m0[27u].y, cbPerScene._m0[27u].x * _933) + cbPerScene._m0[27u].z);
                                float _967 = fma(_923, cbPerScene._m0[24u].w, fma(_934, cbPerScene._m0[24u].y, _933 * cbPerScene._m0[24u].x) + cbPerScene._m0[24u].z) / _966;
                                float _968 = fma(_923, cbPerScene._m0[25u].w, fma(_934, cbPerScene._m0[25u].y, cbPerScene._m0[25u].x * _933) + cbPerScene._m0[25u].z) / _966;
                                vec4 _977 = textureLod(sampler2D(g_PrevFrameTexture, SS_ClampLinear), vec2(cbSceneParam._m0[87u].z * _967, cbSceneParam._m0[87u].w * _968), 0.0);
                                float _982 = isnan(_719) ? 1.0 : (isnan(1.0) ? _719 : min(1.0, _719));
                                float _983 = 0.5 - _967;
                                float _984 = 0.5 - _968;
                                float _985 = _983 * 2.0;
                                float _986 = _984 * 2.0;
                                float _987 = _985 * _985;
                                float _988 = _986 * _986;
                                float _1307 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
                                float _1318 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
                                float _997 = inversesqrt(dot(vec2(_777, _778), vec2(_777, _778)));
                                float _1003 = inversesqrt(dot(vec2(_985, _986), vec2(_985, _986)));
                                float _1009 = dot(vec2((_983 * (-2.0)) * _1003, (_984 * (-2.0)) * _1003), vec2(_997 * _777, _997 * _778));
                                float _1329 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
                                float _1016 = ((1.0 - (isnan(1.0) ? _1318 : (isnan(_1318) ? 1.0 : min(_1318, 1.0)))) * (1.0 - (isnan(1.0) ? _1307 : (isnan(_1307) ? 1.0 : min(_1307, 1.0))))) * (4.0 - ((isnan(1.0) ? _1329 : (isnan(_1329) ? 1.0 : min(_1329, 1.0))) * 2.0));
                                float _1340 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
                                float _1017 = isnan(1.0) ? _1340 : (isnan(_1340) ? 1.0 : min(_1340, 1.0));
                                float _1018 = _1017 * _1017;
                                frontier_phi_17_pred = _858;
                                frontier_phi_17_pred_1 = _856;
                                frontier_phi_17_pred_2 = _854;
                                frontier_phi_17_pred_3 = _883;
                                frontier_phi_17_pred_4 = _921;
                                frontier_phi_17_pred_5 = _919;
                                frontier_phi_17_pred_6 = _917;
                                frontier_phi_17_pred_7 = _915;
                                frontier_phi_17_pred_8 = _913;
                                frontier_phi_17_pred_9 = _911;
                                frontier_phi_17_pred_10 = _838;
                                frontier_phi_17_pred_11 = isnan(_1018) ? _982 : (isnan(_982) ? _1018 : min(_982, _1018));
                                frontier_phi_17_pred_12 = _977.z;
                                frontier_phi_17_pred_13 = _977.y;
                                frontier_phi_17_pred_14 = _977.x;
                                frontier_phi_17_pred_15 = _815;
                            }
                            else
                            {
                                bool _902 = _884 > 0.0;
                                frontier_phi_17_pred = _902 ? _879 : _858;
                                frontier_phi_17_pred_1 = _902 ? _878 : _856;
                                frontier_phi_17_pred_2 = _902 ? _877 : _854;
                                frontier_phi_17_pred_3 = uint(_902);
                                frontier_phi_17_pred_4 = _879;
                                frontier_phi_17_pred_5 = _878;
                                frontier_phi_17_pred_6 = _877;
                                frontier_phi_17_pred_7 = _879 + _779;
                                frontier_phi_17_pred_8 = _878 + _778;
                                frontier_phi_17_pred_9 = _877 + _777;
                                frontier_phi_17_pred_10 = _870;
                                frontier_phi_17_pred_11 = _835;
                                frontier_phi_17_pred_12 = _834;
                                frontier_phi_17_pred_13 = _833;
                                frontier_phi_17_pred_14 = _832;
                                frontier_phi_17_pred_15 = _836 + 1u;
                            }
                            _859 = frontier_phi_17_pred;
                            _857 = frontier_phi_17_pred_1;
                            _855 = frontier_phi_17_pred_2;
                            _853 = frontier_phi_17_pred_3;
                            _851 = frontier_phi_17_pred_4;
                            _849 = frontier_phi_17_pred_5;
                            _847 = frontier_phi_17_pred_6;
                            _845 = frontier_phi_17_pred_7;
                            _843 = frontier_phi_17_pred_8;
                            _841 = frontier_phi_17_pred_9;
                            _839 = frontier_phi_17_pred_10;
                            _826 = frontier_phi_17_pred_11;
                            _825 = frontier_phi_17_pred_12;
                            _823 = frontier_phi_17_pred_13;
                            _821 = frontier_phi_17_pred_14;
                            _837 = frontier_phi_17_pred_15;
                            if (int(_837) < int(_815))
                            {
                                _832 = _821;
                                _833 = _823;
                                _834 = _825;
                                _835 = _826;
                                _836 = _837;
                                _838 = _839;
                                _840 = _841;
                                _842 = _843;
                                _844 = _845;
                                _846 = _847;
                                _848 = _849;
                                _850 = _851;
                                _852 = _853;
                                _854 = _855;
                                _856 = _857;
                                _858 = _859;
                                continue;
                            }
                            else
                            {
                                break;
                            }
                        }
                        _820 = _821;
                        _822 = _823;
                        _824 = _825;
                        _594 = _826;
                    }
                    else
                    {
                        _820 = 0.0;
                        _822 = 0.0;
                        _824 = 0.0;
                        _594 = 0.0;
                    }
                    float frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder;
                    float frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_1;
                    float frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_2;
                    float frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_3;
                    if ((isnan(_820) || isnan(_822)) || isnan(_824))
                    {
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder = 0.0;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_1 = 0.0;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_2 = 0.0;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_3 = 0.0;
                    }
                    else
                    {
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder = (_594 * _820) * cbPerScene._m0[28u].w;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_1 = _594;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_2 = (_594 * _824) * cbPerScene._m0[28u].w;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_3 = (_594 * _822) * cbPerScene._m0[28u].w;
                    }
                    frontier_phi_3_4_ladder_6_ladder_7_ladder = frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_1 = frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_1;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_2 = frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_2;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_3 = frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_3;
                }
                frontier_phi_3_4_ladder_6_ladder = frontier_phi_3_4_ladder_6_ladder_7_ladder;
                frontier_phi_3_4_ladder_6_ladder_1 = frontier_phi_3_4_ladder_6_ladder_7_ladder_1;
                frontier_phi_3_4_ladder_6_ladder_2 = frontier_phi_3_4_ladder_6_ladder_7_ladder_2;
                frontier_phi_3_4_ladder_6_ladder_3 = frontier_phi_3_4_ladder_6_ladder_7_ladder_3;
            }
            frontier_phi_3_4_ladder = frontier_phi_3_4_ladder_6_ladder;
            frontier_phi_3_4_ladder_1 = frontier_phi_3_4_ladder_6_ladder_1;
            frontier_phi_3_4_ladder_2 = frontier_phi_3_4_ladder_6_ladder_2;
            frontier_phi_3_4_ladder_3 = frontier_phi_3_4_ladder_6_ladder_3;
        }
        else
        {
            frontier_phi_3_4_ladder = 0.0;
            frontier_phi_3_4_ladder_1 = 0.0;
            frontier_phi_3_4_ladder_2 = 0.0;
            frontier_phi_3_4_ladder_3 = 0.0;
        }
        _587 = frontier_phi_3_4_ladder;
        _589 = frontier_phi_3_4_ladder_3;
        _591 = frontier_phi_3_4_ladder_2;
        _593 = frontier_phi_3_4_ladder_1;
    }
    SV_Target.x = _587;
    SV_Target.y = _589;
    SV_Target.z = _591;
    SV_Target.w = _593;
    discard_exit();
}


