#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD_1;
layout(location = 4, component = 1) in float TEXCOORD_2;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 4, component = 2) in float TEXCOORD_10;
layout(location = 4, component = 3) in float TEXCOORD_11;
layout(location = 7) in float TEXCOORD_12;
layout(location = 7, component = 1) in vec2 TEXCOORD_14;
bool discard_state;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    bool _122;
    vec4 _80;
    float _82;
    float _83;
    bool _96;
    uint _97;
    for (;;)
    {
        float _76 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125)).w + (-0.5);
        _80 = cbMtdParam._m0[1u];
        _82 = _76 * _80.y;
        _83 = _76 * 0.999000012874603271484375;
        _96 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        _97 = uint(roundEven(NORMAL.w)) * 13u;
        if (_96)
        {
            if ((cbInstanceData._m0[_97 + 7u].x + _83) < 0.5)
            {
                _122 = true;
                break;
            }
        }
        uint _113 = (_97 + 9u) + uint(cbMatDynParam._m0[0u].w);
        if ((cbInstanceData._m0[_113].w < 1.0) && ((cbInstanceData._m0[_113].w + _83) < 0.5))
        {
            _122 = true;
            break;
        }
        if ((_82 + 1.0) < _80.x)
        {
            _122 = true;
            break;
        }
        _122 = false;
        break;
    }
    if (_122)
    {
        discard_state = true;
    }
    discard_exit();
}


