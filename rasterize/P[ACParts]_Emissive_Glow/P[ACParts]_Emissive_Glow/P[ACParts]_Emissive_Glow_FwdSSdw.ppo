#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _736;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _161 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _162 = _161 * NORMAL.x;
    float _163 = _161 * NORMAL.y;
    float _164 = _161 * NORMAL.z;
    vec4 _184 = texture(sampler2D(P_ACParts_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _190 = _184.x * cbMtdParam._m0[10u].x;
    float _191 = _184.y * cbMtdParam._m0[10u].y;
    float _192 = _184.z * cbMtdParam._m0[10u].z;
    vec4 _214 = texture(sampler2D(P_ACParts_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _237 = inversesqrt(dot(vec3(_162, _163, _164), vec3(_162, _163, _164)));
    float _238 = _237 * _162;
    float _239 = _237 * _163;
    float _240 = _237 * _164;
    float _2907 = isnan(0.0) ? _190 : (isnan(_190) ? 0.0 : max(_190, 0.0));
    float _2918 = isnan(0.0) ? _191 : (isnan(_191) ? 0.0 : max(_191, 0.0));
    float _2929 = isnan(0.0) ? _192 : (isnan(_192) ? 0.0 : max(_192, 0.0));
    float _260 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _301 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _311 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _301);
    float _312 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _301);
    float _313 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _301);
    float _317 = inversesqrt(dot(vec3(_311, _312, _313), vec3(_311, _312, _313)));
    float _318 = _311 * _317;
    float _319 = _312 * _317;
    float _320 = _313 * _317;
    float _326 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _327 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _348 = fma(_240, cbSceneParam._m0[5u].z, fma(_239, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _238));
    float _351 = fma(_240, cbSceneParam._m0[6u].z, fma(_239, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _238));
    float _354 = fma(_240, cbSceneParam._m0[7u].z, fma(_239, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _238));
    uint _367 = uint(roundEven(NORMAL.w)) * 13u;
    uint _368 = _367 + 9u;
    uint _369 = _368 + uint(cbMatDynParam._m0[0u].w);
    float _375 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2907 : (isnan(_2907) ? 1.0 : min(_2907, 1.0)))) * cbInstanceData._m0[_369].x;
    float _376 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2918 : (isnan(_2918) ? 1.0 : min(_2918, 1.0)))) * cbInstanceData._m0[_369].y;
    float _377 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2929 : (isnan(_2929) ? 1.0 : min(_2929, 1.0)))) * cbInstanceData._m0[_369].z;
    float _2940 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _378 = isnan(1.0) ? _2940 : (isnan(_2940) ? 1.0 : min(_2940, 1.0));
    float _2951 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _379 = isnan(1.0) ? _2951 : (isnan(_2951) ? 1.0 : min(_2951, 1.0));
    float _2962 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _380 = isnan(1.0) ? _2962 : (isnan(_2962) ? 1.0 : min(_2962, 1.0));
    vec4 _389 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _326, cbSceneParam._m0[86u].y * _327));
    float _392 = _389.x * TEXCOORD.z;
    float _393 = dot(vec3(_238, _239, _240), vec3(_318, _319, _320));
    float _396 = _393 * 2.0;
    float _401 = (_396 * _238) - _318;
    float _402 = (_396 * _239) - _319;
    float _403 = (_396 * _240) - _320;
    float _425 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _429 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _433 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _735;
    float _737;
    float _738;
    float _739;
    float _740;
    float _741;
    float _742;
    float _743;
    float _744;
    float _745;
    float _746;
    float _747;
    float _748;
    float _749;
    float _750;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _460 = fma(_433, cbModelParam._m0[26u].z, fma(_429, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _425));
        float _464 = fma(_433, cbModelParam._m0[27u].z, fma(_429, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _425));
        float _468 = fma(_433, cbModelParam._m0[28u].z, fma(_429, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _425));
        float _493 = _425 + _238;
        float _494 = _429 + _239;
        float _495 = _433 + _240;
        float _505 = fma(_495, cbModelParam._m0[26u].z, fma(_494, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _493)) - _460;
        float _506 = fma(_495, cbModelParam._m0[27u].z, fma(_494, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _493)) - _464;
        float _507 = fma(_495, cbModelParam._m0[28u].z, fma(_494, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _493)) - _468;
        float _511 = inversesqrt(dot(vec3(_505, _506, _507), vec3(_505, _506, _507)));
        float _524 = ((_511 * _505) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_460 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _525 = ((_511 * _506) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_464 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _526 = ((_511 * _507) / cbModelParam._m0[34u].z) + ((((((_468 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _529 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_524, _525, _526), 0.0);
        vec4 _536 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_524, _525, _526), 0.0);
        vec4 _543 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_524, _525, _526), 0.0);
        vec4 _550 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_524, _525, _526), 0.0);
        float _563 = exp2((_529.w + (-0.5)) * 20.0) * 2.0;
        float _564 = _563 * (_529.x + (-0.5));
        float _565 = _563 * (_529.y + (-0.5));
        float _566 = _563 * (_529.z + (-0.5));
        float _573 = exp2((_536.w + (-0.5)) * 20.0) * 2.0;
        float _574 = _573 * (_536.x + (-0.5));
        float _575 = _573 * (_536.y + (-0.5));
        float _576 = _573 * (_536.z + (-0.5));
        float _583 = exp2((_543.w + (-0.5)) * 20.0) * 2.0;
        float _584 = _583 * (_543.x + (-0.5));
        float _585 = _583 * (_543.y + (-0.5));
        float _586 = _583 * (_543.z + (-0.5));
        float _593 = exp2((_550.w + (-0.5)) * 20.0) * 2.0;
        float _594 = _593 * (_550.x + (-0.5));
        float _595 = _593 * (_550.y + (-0.5));
        float _596 = _593 * (_550.z + (-0.5));
        float _597 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
        float _598 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
        float _599 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
        float _600 = _564 * 0.5;
        float _601 = _574 * 0.5;
        float _602 = _584 * 0.5;
        float _603 = dot(vec3(_600, _601, _602), vec3(_600, _601, _602));
        float _608 = (_603 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_603);
        float _617 = (dot(vec3(_238, _239, _240), vec3(_608 * _600, _608 * _601, _608 * _602)) + 1.0) * 0.5;
        float _2988 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
        float _627 = sqrt(((_601 * _601) + (_600 * _600)) + (_602 * _602)) / (_597 + 9.9999997473787516355514526367188e-06);
        float _2999 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
        float _628 = isnan(1.0) ? _2999 : (isnan(_2999) ? 1.0 : min(_2999, 1.0));
        float _629 = _628 * 2.0;
        float _633 = (1.0 - _628) / (_628 + 1.0);
        float _3010 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
        float _634 = isnan(1.0) ? _3010 : (isnan(_3010) ? 1.0 : min(_3010, 1.0));
        float _643 = ((((1.0 - _634) * (_629 + 2.0)) * exp2(log2(isnan(1.0) ? _2988 : (isnan(_2988) ? 1.0 : min(_2988, 1.0))) * (_629 + 1.0))) + _634) * _597;
        float _644 = _565 * 0.5;
        float _645 = _575 * 0.5;
        float _646 = _585 * 0.5;
        float _647 = dot(vec3(_644, _645, _646), vec3(_644, _645, _646));
        float _652 = (_647 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_647);
        float _660 = (dot(vec3(_238, _239, _240), vec3(_652 * _644, _652 * _645, _652 * _646)) + 1.0) * 0.5;
        float _3021 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
        float _669 = sqrt(((_645 * _645) + (_644 * _644)) + (_646 * _646)) / (_598 + 9.9999997473787516355514526367188e-06);
        float _3032 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
        float _670 = isnan(1.0) ? _3032 : (isnan(_3032) ? 1.0 : min(_3032, 1.0));
        float _671 = _670 * 2.0;
        float _675 = (1.0 - _670) / (_670 + 1.0);
        float _3043 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
        float _676 = isnan(1.0) ? _3043 : (isnan(_3043) ? 1.0 : min(_3043, 1.0));
        float _685 = ((((1.0 - _676) * (_671 + 2.0)) * exp2(log2(isnan(1.0) ? _3021 : (isnan(_3021) ? 1.0 : min(_3021, 1.0))) * (_671 + 1.0))) + _676) * _598;
        float _686 = _566 * 0.5;
        float _687 = _576 * 0.5;
        float _688 = _586 * 0.5;
        float _689 = dot(vec3(_686, _687, _688), vec3(_686, _687, _688));
        float _694 = (_689 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_689);
        float _702 = (dot(vec3(_238, _239, _240), vec3(_694 * _686, _694 * _687, _694 * _688)) + 1.0) * 0.5;
        float _3054 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _711 = sqrt(((_687 * _687) + (_686 * _686)) + (_688 * _688)) / (_599 + 9.9999997473787516355514526367188e-06);
        float _3065 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        float _712 = isnan(1.0) ? _3065 : (isnan(_3065) ? 1.0 : min(_3065, 1.0));
        float _713 = _712 * 2.0;
        float _717 = (1.0 - _712) / (_712 + 1.0);
        float _3076 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _718 = isnan(1.0) ? _3076 : (isnan(_3076) ? 1.0 : min(_3076, 1.0));
        float _727 = ((((1.0 - _718) * (_713 + 2.0)) * exp2(log2(isnan(1.0) ? _3054 : (isnan(_3054) ? 1.0 : min(_3054, 1.0))) * (_713 + 1.0))) + _718) * _599;
        _735 = _566;
        _737 = _565;
        _738 = _564;
        _739 = _576;
        _740 = _575;
        _741 = _574;
        _742 = _586;
        _743 = _585;
        _744 = _584;
        _745 = _599;
        _746 = _598;
        _747 = _597;
        _748 = cbModelParam._m0[36u].z * (isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0)));
        _749 = cbModelParam._m0[36u].z * (isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0)));
        _750 = cbModelParam._m0[36u].z * (isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0)));
    }
    else
    {
        _735 = _736;
        _737 = _736;
        _738 = _736;
        _739 = _736;
        _740 = _736;
        _741 = _736;
        _742 = _736;
        _743 = _736;
        _744 = _736;
        _745 = _736;
        _746 = _736;
        _747 = _736;
        _748 = 0.0;
        _749 = 0.0;
        _750 = 0.0;
    }
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _776 = fma(_433, cbModelParam._m0[30u].z, fma(_429, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _425));
        float _780 = fma(_433, cbModelParam._m0[31u].z, fma(_429, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _425));
        float _784 = fma(_433, cbModelParam._m0[32u].z, fma(_429, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _425));
        float _807 = _425 + _238;
        float _808 = _429 + _239;
        float _809 = _433 + _240;
        float _819 = fma(_809, cbModelParam._m0[30u].z, fma(_808, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _807)) - _776;
        float _820 = fma(_809, cbModelParam._m0[31u].z, fma(_808, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _807)) - _780;
        float _821 = fma(_809, cbModelParam._m0[32u].z, fma(_808, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _807)) - _784;
        float _825 = inversesqrt(dot(vec3(_819, _820, _821), vec3(_819, _820, _821)));
        float _838 = ((_825 * _819) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_776 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _839 = ((_825 * _820) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_780 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _840 = ((_825 * _821) / cbModelParam._m0[35u].z) + ((((((_784 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _842 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_838, _839, _840), 0.0);
        vec4 _849 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_838, _839, _840), 0.0);
        vec4 _856 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_838, _839, _840), 0.0);
        vec4 _863 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_838, _839, _840), 0.0);
        float _875 = exp2((_842.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_842.x + (-0.5));
        float _877 = _875 * (_842.y + (-0.5));
        float _878 = _875 * (_842.z + (-0.5));
        float _885 = exp2((_849.w + (-0.5)) * 20.0) * 2.0;
        float _886 = _885 * (_849.x + (-0.5));
        float _887 = _885 * (_849.y + (-0.5));
        float _888 = _885 * (_849.z + (-0.5));
        float _895 = exp2((_856.w + (-0.5)) * 20.0) * 2.0;
        float _896 = _895 * (_856.x + (-0.5));
        float _897 = _895 * (_856.y + (-0.5));
        float _898 = _895 * (_856.z + (-0.5));
        float _905 = exp2((_863.w + (-0.5)) * 20.0) * 2.0;
        float _906 = _905 * (_863.x + (-0.5));
        float _907 = _905 * (_863.y + (-0.5));
        float _908 = _905 * (_863.z + (-0.5));
        float _909 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _910 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _911 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _912 = _876 * 0.5;
        float _913 = _886 * 0.5;
        float _914 = _896 * 0.5;
        float _915 = dot(vec3(_912, _913, _914), vec3(_912, _913, _914));
        float _920 = (_915 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_915);
        float _928 = (dot(vec3(_238, _239, _240), vec3(_920 * _912, _920 * _913, _920 * _914)) + 1.0) * 0.5;
        float _3117 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _937 = sqrt(((_913 * _913) + (_912 * _912)) + (_914 * _914)) / (_909 + 9.9999997473787516355514526367188e-06);
        float _3128 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3128 : (isnan(_3128) ? 1.0 : min(_3128, 1.0));
        float _939 = _938 * 2.0;
        float _943 = (1.0 - _938) / (_938 + 1.0);
        float _3139 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3139 : (isnan(_3139) ? 1.0 : min(_3139, 1.0));
        float _953 = ((((1.0 - _944) * (_939 + 2.0)) * exp2(log2(isnan(1.0) ? _3117 : (isnan(_3117) ? 1.0 : min(_3117, 1.0))) * (_939 + 1.0))) + _944) * _909;
        float _954 = _877 * 0.5;
        float _955 = _887 * 0.5;
        float _956 = _897 * 0.5;
        float _957 = dot(vec3(_954, _955, _956), vec3(_954, _955, _956));
        float _962 = (_957 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_957);
        float _970 = (dot(vec3(_238, _239, _240), vec3(_962 * _954, _962 * _955, _962 * _956)) + 1.0) * 0.5;
        float _3150 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _979 = sqrt(((_955 * _955) + (_954 * _954)) + (_956 * _956)) / (_910 + 9.9999997473787516355514526367188e-06);
        float _3161 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3161 : (isnan(_3161) ? 1.0 : min(_3161, 1.0));
        float _981 = _980 * 2.0;
        float _985 = (1.0 - _980) / (_980 + 1.0);
        float _3172 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0));
        float _995 = ((((1.0 - _986) * (_981 + 2.0)) * exp2(log2(isnan(1.0) ? _3150 : (isnan(_3150) ? 1.0 : min(_3150, 1.0))) * (_981 + 1.0))) + _986) * _910;
        float _996 = _878 * 0.5;
        float _997 = _888 * 0.5;
        float _998 = _898 * 0.5;
        float _999 = dot(vec3(_996, _997, _998), vec3(_996, _997, _998));
        float _1004 = (_999 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_999);
        float _1012 = (dot(vec3(_238, _239, _240), vec3(_1004 * _996, _1004 * _997, _1004 * _998)) + 1.0) * 0.5;
        float _3183 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1021 = sqrt(((_997 * _997) + (_996 * _996)) + (_998 * _998)) / (_911 + 9.9999997473787516355514526367188e-06);
        float _3194 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0));
        float _1023 = _1022 * 2.0;
        float _1027 = (1.0 - _1022) / (_1022 + 1.0);
        float _3205 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0));
        float _1037 = ((((1.0 - _1028) * (_1023 + 2.0)) * exp2(log2(isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0))) * (_1023 + 1.0))) + _1028) * _911;
        _1045 = _878;
        _1046 = _877;
        _1047 = _876;
        _1048 = _888;
        _1049 = _887;
        _1050 = _886;
        _1051 = _898;
        _1052 = _897;
        _1053 = _896;
        _1054 = _911;
        _1055 = _910;
        _1056 = _909;
        _1057 = cbModelParam._m0[36u].w * (isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0)));
        _1058 = cbModelParam._m0[36u].w * (isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0)));
        _1059 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0)));
    }
    else
    {
        _1045 = _736;
        _1046 = _736;
        _1047 = _736;
        _1048 = _736;
        _1049 = _736;
        _1050 = _736;
        _1051 = _736;
        _1052 = _736;
        _1053 = _736;
        _1054 = _736;
        _1055 = _736;
        _1056 = _736;
        _1057 = 0.0;
        _1058 = 0.0;
        _1059 = 0.0;
    }
    float _1069 = (cbModelParam._m0[1u].x * (_1057 - _748)) + _748;
    float _1070 = (cbModelParam._m0[1u].x * (_1058 - _749)) + _749;
    float _1071 = (cbModelParam._m0[1u].x * (_1059 - _750)) + _750;
    float _1092 = fma(_1071, cbSceneParam._m0[89u].z, fma(_1070, cbSceneParam._m0[89u].y, _1069 * cbSceneParam._m0[89u].x));
    float _1095 = fma(_1071, cbSceneParam._m0[90u].z, fma(_1070, cbSceneParam._m0[90u].y, _1069 * cbSceneParam._m0[90u].x));
    float _1098 = fma(_1071, cbSceneParam._m0[91u].z, fma(_1070, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1069));
    float _1113 = _401 * 0.5;
    float _1114 = _402 * 0.5;
    float _1115 = _403 * 0.5;
    float _1116 = dot(vec4(_1113, _1114, _1115, 1.0), vec4(_1047, _1050, _1053, _1056));
    float _1119 = dot(vec4(_1113, _1114, _1115, 1.0), vec4(_1046, _1049, _1052, _1055));
    float _1122 = dot(vec4(_1113, _1114, _1115, 1.0), vec4(_1045, _1048, _1051, _1054));
    float _1156;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1129 = dot(vec4(_1113, _1114, _1115, 1.0), vec4(_735, _739, _742, _745));
        float _1133 = dot(vec4(_1113, _1114, _1115, 1.0), vec4(_737, _740, _743, _746));
        float _1137 = dot(vec4(_1113, _1114, _1115, 1.0), vec4(_738, _741, _744, _747));
        float _1144 = dot(vec4(cbModelParam._m0[39u]), vec4(_1113, _1114, _1115, 1.0));
        _1156 = dot(vec3(isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)), isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)), isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1144) ? 0.0 : (isnan(0.0) ? _1144 : max(0.0, _1144))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1156 = 1.0;
    }
    float _1167;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1158 = dot(vec4(cbModelParam._m0[40u]), vec4(_1113, _1114, _1115, 1.0));
        _1167 = dot(vec3(isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)), isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)), isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1158) ? 0.0 : (isnan(0.0) ? _1158 : max(0.0, _1158))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1167 = 1.0;
    }
    float _1171 = (_1167 * cbModelParam._m0[1u].x) + (_1156 * (1.0 - cbModelParam._m0[1u].x));
    float _1180 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1262;
    float _1264;
    float _1266;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1229 = fma(_433, cbModelParam._m0[13u].z, fma(_429, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _425)) + cbModelParam._m0[13u].w;
        float _1233 = fma(_433, cbModelParam._m0[14u].z, fma(_429, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _425)) + cbModelParam._m0[14u].w;
        float _1237 = fma(_433, cbModelParam._m0[15u].z, fma(_429, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _425)) + cbModelParam._m0[15u].w;
        float _1240 = fma(_403, cbModelParam._m0[13u].z, fma(_402, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _401));
        float _1243 = fma(_403, cbModelParam._m0[14u].z, fma(_402, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _401));
        float _1246 = fma(_403, cbModelParam._m0[15u].z, fma(_402, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _401));
        float _1272;
        if (_1240 > 0.0)
        {
            _1272 = abs((1.0 - _1229) / _1240);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1240 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1229 + 1.0) / _1240);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1272 = frontier_phi_14_12_ladder;
        }
        float _1500;
        if (_1243 > 0.0)
        {
            _1500 = abs((1.0 - _1233) / _1243);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1243 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1233 + 1.0) / _1243);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1500 = frontier_phi_23_19_ladder;
        }
        float _1692;
        if (_1246 > 0.0)
        {
            _1692 = abs((1.0 - _1237) / _1246);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1246 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1237 + 1.0) / _1246);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1692 = frontier_phi_35_30_ladder;
        }
        float _1694 = isnan(_1500) ? _1272 : (isnan(_1272) ? _1500 : min(_1272, _1500));
        float _1695 = isnan(_1692) ? _1694 : (isnan(_1694) ? _1692 : min(_1694, _1692));
        float _1699 = (_1695 * _1240) + _1229;
        float _1700 = (_1695 * _1243) + _1233;
        float _1701 = (_1695 * _1246) + _1237;
        float _1702 = _1695 * 9.9999997473787516355514526367188e-05;
        float _1704 = (-1.0) - _1702;
        float _1706 = _1702 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1701 > _1706) || ((_1701 < _1704) || ((_1700 > _1706) || ((_1700 < _1704) || ((_1699 < _1704) || (_1699 > _1706))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1798 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1701, cbModelParam._m0[9u].z, fma(_1700, cbModelParam._m0[9u].y, _1699 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1701, cbModelParam._m0[10u].z, fma(_1700, cbModelParam._m0[10u].y, _1699 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1701, cbModelParam._m0[11u].z, fma(_1700, cbModelParam._m0[11u].y, _1699 * cbModelParam._m0[11u].x))), _1180);
            frontier_phi_13_35_ladder = _1798.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1798.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1798.x * cbModelParam._m0[1u].y;
        }
        _1262 = frontier_phi_13_35_ladder_2;
        _1264 = frontier_phi_13_35_ladder_1;
        _1266 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1250 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_401, _402, _403), _1180);
        _1262 = _1250.x * cbModelParam._m0[1u].y;
        _1264 = _1250.y * cbModelParam._m0[1u].y;
        _1266 = _1250.z * cbModelParam._m0[1u].y;
    }
    float _1269 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1362;
    float _1364;
    float _1366;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1326 = fma(_433, cbModelParam._m0[21u].z, fma(_429, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _425)) + cbModelParam._m0[21u].w;
        float _1330 = fma(_433, cbModelParam._m0[22u].z, fma(_429, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _425)) + cbModelParam._m0[22u].w;
        float _1334 = fma(_433, cbModelParam._m0[23u].z, fma(_429, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _425)) + cbModelParam._m0[23u].w;
        float _1337 = fma(_403, cbModelParam._m0[21u].z, fma(_402, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _401));
        float _1340 = fma(_403, cbModelParam._m0[22u].z, fma(_402, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _401));
        float _1343 = fma(_403, cbModelParam._m0[23u].z, fma(_402, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _401));
        float _1505;
        if (_1337 > 0.0)
        {
            _1505 = abs((1.0 - _1326) / _1337);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1337 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1326 + 1.0) / _1337);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1505 = frontier_phi_25_21_ladder;
        }
        float _1719;
        if (_1340 > 0.0)
        {
            _1719 = abs((1.0 - _1330) / _1340);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1340 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1330 + 1.0) / _1340);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1719 = frontier_phi_37_32_ladder;
        }
        float _1870;
        if (_1343 > 0.0)
        {
            _1870 = abs((1.0 - _1334) / _1343);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1343 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1334 + 1.0) / _1343);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1870 = frontier_phi_46_43_ladder;
        }
        float _1872 = isnan(_1719) ? _1505 : (isnan(_1505) ? _1719 : min(_1505, _1719));
        float _1873 = isnan(_1870) ? _1872 : (isnan(_1872) ? _1870 : min(_1872, _1870));
        float _1877 = (_1873 * _1337) + _1326;
        float _1878 = (_1873 * _1340) + _1330;
        float _1879 = (_1873 * _1343) + _1334;
        float _1880 = _1873 * 9.9999997473787516355514526367188e-05;
        float _1881 = (-1.0) - _1880;
        float _1883 = _1880 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1879 > _1883) || ((_1879 < _1881) || ((_1878 > _1883) || ((_1878 < _1881) || ((_1877 < _1881) || (_1877 > _1883))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2107 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1879, cbModelParam._m0[17u].z, fma(_1878, cbModelParam._m0[17u].y, _1877 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1879, cbModelParam._m0[18u].z, fma(_1878, cbModelParam._m0[18u].y, _1877 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1879, cbModelParam._m0[19u].z, fma(_1878, cbModelParam._m0[19u].y, _1877 * cbModelParam._m0[19u].x))), _1269);
            frontier_phi_22_46_ladder = _2107.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2107.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2107.x * cbModelParam._m0[1u].z;
        }
        _1362 = frontier_phi_22_46_ladder_2;
        _1364 = frontier_phi_22_46_ladder_1;
        _1366 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1346 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_401, _402, _403), _1269);
        _1362 = _1346.x * cbModelParam._m0[1u].z;
        _1364 = _1346.y * cbModelParam._m0[1u].z;
        _1366 = _1346.z * cbModelParam._m0[1u].z;
    }
    float _1378 = _392 * 0.01200000010430812835693359375;
    float _1380 = _1378 * ((cbModelParam._m0[1u].w * (_1362 - _1262)) + _1262);
    float _1381 = _1378 * ((cbModelParam._m0[1u].w * (_1364 - _1264)) + _1264);
    float _1382 = _1378 * ((cbModelParam._m0[1u].w * (_1366 - _1266)) + _1266);
    float _1385 = fma(_1382, cbSceneParam._m0[89u].z, fma(_1381, cbSceneParam._m0[89u].y, _1380 * cbSceneParam._m0[89u].x));
    float _1388 = fma(_1382, cbSceneParam._m0[90u].z, fma(_1381, cbSceneParam._m0[90u].y, _1380 * cbSceneParam._m0[90u].x));
    float _1391 = fma(_1382, cbSceneParam._m0[91u].z, fma(_1381, cbSceneParam._m0[91u].y, _1380 * cbSceneParam._m0[91u].x));
    vec4 _1399 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_326, _327));
    float _1401 = _1399.w;
    float _1413 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1401);
    float _1414 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1401);
    float _1415 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1401);
    uvec4 _1419 = floatBitsToUint(cbInstanceData._m0[_367 + 5u]);
    uint _1421 = _1419.x * 14u;
    uint _1422 = _1421 + 13u;
    float _1429 = _392 + (-1.0);
    float _1435 = (cbLight._m0[_1422].x * _1429) + 1.0;
    float _1436 = (cbLight._m0[_1422].y * _1429) + 1.0;
    float _1437 = (cbLight._m0[_1422].z * _1429) + 1.0;
    float _1438 = (cbLight._m0[_1422].w * _1429) + 1.0;
    uint _1439 = _1421 + 5u;
    float _1445 = isnan(1.0) ? _1436 : (isnan(_1436) ? 1.0 : min(_1436, 1.0));
    uint _1449 = _1421 + 4u;
    float _1459 = isnan(1.0) ? _1435 : (isnan(_1435) ? 1.0 : min(_1435, 1.0));
    uint _1463 = _1421 | 1u;
    float _1474 = dot(vec3(cbLight._m0[_1421].xyz), vec3(_238, _239, _240));
    float _1477 = dot(vec3(cbLight._m0[_1463].xyz), vec3(_238, _239, _240));
    float _3341 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
    float _3352 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
    float _1482 = (isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0))) * 0.3183098733425140380859375;
    float _1484 = (isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0))) * 0.3183098733425140380859375;
    float _1491 = ((cbLight._m0[_1439].x * _1445) * _1484) + (((cbLight._m0[_1449].x * _1413) * _1459) * _1482);
    float _1492 = ((_1445 * cbLight._m0[_1439].y) * _1484) + (((cbLight._m0[_1449].y * _1414) * _1459) * _1482);
    float _1493 = ((_1445 * cbLight._m0[_1439].z) * _1484) + (((cbLight._m0[_1449].z * _1415) * _1459) * _1482);
    uvec4 _1497 = floatBitsToUint(cbLight._m0[_1421 + 12u]);
    bool _1499 = _1497.x == 0u;
    float _1510;
    float _1512;
    float _1514;
    if (_1499)
    {
        _1510 = _1491;
        _1512 = _1492;
        _1514 = _1493;
    }
    else
    {
        uint _1518 = _1421 + 6u;
        float _1534 = (dot(vec3(cbLight._m0[_1421 + 2u].xyz), vec3(_238, _239, _240)) * 0.5) + 0.5;
        float _1535 = _1534 * _1534;
        float _3363 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
        float _1537 = isnan(1.0) ? _1437 : (isnan(_1437) ? 1.0 : min(_1437, 1.0));
        _1510 = (((cbLight._m0[_1518].x * 0.3183098733425140380859375) * _1536) * _1537) + _1491;
        _1512 = (((cbLight._m0[_1518].y * 0.3183098733425140380859375) * _1536) * _1537) + _1492;
        _1514 = (((cbLight._m0[_1518].z * 0.3183098733425140380859375) * _1536) * _1537) + _1493;
    }
    bool _1517 = _1497.y == 0u;
    float _1555;
    float _1557;
    float _1559;
    if (_1517)
    {
        _1555 = _1510;
        _1557 = _1512;
        _1559 = _1514;
    }
    else
    {
        uint _1663 = _1421 + 7u;
        float _1679 = (dot(vec3(cbLight._m0[_1421 + 3u].xyz), vec3(_238, _239, _240)) * 0.5) + 0.5;
        float _1680 = _1679 * _1679;
        float _3379 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
        float _1682 = isnan(1.0) ? _1438 : (isnan(_1438) ? 1.0 : min(_1438, 1.0));
        _1555 = (((cbLight._m0[_1663].x * 0.3183098733425140380859375) * _1681) * _1682) + _1510;
        _1557 = (((cbLight._m0[_1663].y * 0.3183098733425140380859375) * _1681) * _1682) + _1512;
        _1559 = (((cbLight._m0[_1663].z * 0.3183098733425140380859375) * _1681) * _1682) + _1514;
    }
    uint _1561 = _1421 + 8u;
    float _1567 = cbLight._m0[_1421].x + _318;
    float _1568 = cbLight._m0[_1421].y + _319;
    float _1569 = cbLight._m0[_1421].z + _320;
    float _1573 = inversesqrt(dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569)));
    float _1577 = dot(vec3(_238, _239, _240), vec3(cbLight._m0[_1421].xyz));
    float _3395 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
    float _1580 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
    float _3406 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _1581 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
    float _1582 = dot(vec3(cbLight._m0[_1421].xyz), vec3(_1567 * _1573, _1568 * _1573, _1569 * _1573));
    float _3417 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
    float _1593 = (exp2(log2(1.0 - (isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1599 = (0.5 / ((_1580 + 9.9999999392252902907785028219223e-09) + _1581)) * _1580;
    float _3428 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
    float _1601 = (isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0))) * 0.31831014156341552734375;
    uint _1615 = _1421 + 9u;
    float _1621 = cbLight._m0[_1463].x + _318;
    float _1622 = cbLight._m0[_1463].y + _319;
    float _1623 = cbLight._m0[_1463].z + _320;
    float _1627 = inversesqrt(dot(vec3(_1621, _1622, _1623), vec3(_1621, _1622, _1623)));
    float _1631 = dot(vec3(_238, _239, _240), vec3(cbLight._m0[_1463].xyz));
    float _3439 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
    float _1634 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
    float _1635 = dot(vec3(cbLight._m0[_1463].xyz), vec3(_1621 * _1627, _1622 * _1627, _1623 * _1627));
    float _3450 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
    float _1644 = (exp2(log2(1.0 - (isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1648 = (0.5 / ((_1634 + 9.9999999392252902907785028219223e-09) + _1581)) * _1634;
    float _3461 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
    float _1650 = (isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0))) * 0.31831014156341552734375;
    float _1660 = (((_1644 * cbLight._m0[_1615].x) * _1650) * _1445) + ((((cbLight._m0[_1561].x * _1413) * _1593) * _1601) * _1459);
    float _1661 = (((_1644 * cbLight._m0[_1615].y) * _1650) * _1445) + ((((cbLight._m0[_1561].y * _1414) * _1593) * _1601) * _1459);
    float _1662 = (((_1644 * cbLight._m0[_1615].z) * _1650) * _1445) + ((((cbLight._m0[_1561].z * _1415) * _1593) * _1601) * _1459);
    float _1724;
    float _1726;
    float _1728;
    if (_1499)
    {
        _1724 = _1660;
        _1726 = _1661;
        _1728 = _1662;
    }
    else
    {
        uint _1730 = _1421 + 10u;
        uint _1736 = _1421 + 2u;
        float _1742 = cbLight._m0[_1736].x + _318;
        float _1743 = cbLight._m0[_1736].y + _319;
        float _1744 = cbLight._m0[_1736].z + _320;
        float _1748 = inversesqrt(dot(vec3(_1742, _1743, _1744), vec3(_1742, _1743, _1744)));
        float _1752 = dot(vec3(_238, _239, _240), vec3(cbLight._m0[_1736].xyz));
        float _3472 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1755 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
        float _1756 = dot(vec3(cbLight._m0[_1736].xyz), vec3(_1742 * _1748, _1743 * _1748, _1744 * _1748));
        float _3483 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1765 = (exp2(log2(1.0 - (isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1769 = (0.5 / ((_1755 + 9.9999999392252902907785028219223e-09) + _1581)) * _1755;
        float _3494 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1771 = (isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0))) * 0.31831014156341552734375;
        float _1772 = isnan(1.0) ? _1437 : (isnan(_1437) ? 1.0 : min(_1437, 1.0));
        _1724 = (((_1765 * cbLight._m0[_1730].x) * _1771) * _1772) + _1660;
        _1726 = (((_1765 * cbLight._m0[_1730].y) * _1771) * _1772) + _1661;
        _1728 = (((_1765 * cbLight._m0[_1730].z) * _1771) * _1772) + _1662;
    }
    float _1807;
    float _1809;
    float _1811;
    if (_1517)
    {
        _1807 = _1724;
        _1809 = _1726;
        _1811 = _1728;
    }
    else
    {
        uint _1818 = _1421 + 11u;
        uint _1824 = _1421 + 3u;
        float _1830 = cbLight._m0[_1824].x + _318;
        float _1831 = cbLight._m0[_1824].y + _319;
        float _1832 = cbLight._m0[_1824].z + _320;
        float _1836 = inversesqrt(dot(vec3(_1830, _1831, _1832), vec3(_1830, _1831, _1832)));
        float _1840 = dot(vec3(_238, _239, _240), vec3(cbLight._m0[_1824].xyz));
        float _3510 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1843 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
        float _1844 = dot(vec3(cbLight._m0[_1824].xyz), vec3(_1830 * _1836, _1831 * _1836, _1832 * _1836));
        float _3521 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
        float _1853 = (exp2(log2(1.0 - (isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1857 = (0.5 / ((_1843 + 9.9999999392252902907785028219223e-09) + _1581)) * _1843;
        float _3532 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
        float _1859 = (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * 0.31831014156341552734375;
        float _1860 = isnan(1.0) ? _1438 : (isnan(_1438) ? 1.0 : min(_1438, 1.0));
        _1807 = (((_1853 * cbLight._m0[_1818].x) * _1859) * _1860) + _1724;
        _1809 = (((_1853 * cbLight._m0[_1818].y) * _1859) * _1860) + _1726;
        _1811 = (((_1853 * cbLight._m0[_1818].z) * _1859) * _1860) + _1728;
    }
    float _1995;
    float _1997;
    float _1999;
    float _2001;
    float _2003;
    float _2005;
    if (_1419.y == 0u)
    {
        float _1935 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1936 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1935;
        float _1937 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1935;
        float _1938 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1935;
        uvec4 _1950 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1951 = _1950.x;
        uint _1962 = uint((float(_1950.y) * floor(float(uint(cbSceneParam._m0[85u].y * _327) / _1951))) + floor(float(uint(cbSceneParam._m0[85u].x * _326) / _1951)));
        float _1972 = (log2(_1938 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1973 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
        uint _1976 = uint(isnan(14.0) ? _1973 : (isnan(_1973) ? 14.0 : min(_1973, 14.0)));
        uvec4 _1981 = texelFetch(g_lightClusterGridBuffer, int(((_1976 << 2u) + (_1962 << 6u)) >> 2u));
        uint _1982 = _1981.x;
        uint _1983 = _1950.z;
        float _2112;
        float _2114;
        float _2116;
        float _2118;
        float _2120;
        float _2122;
        if (((((1u << ((_1983 >> 4u) & 15u)) + 4294967295u) & _1982) == 0u) || ((_1983 & 240u) == 0u))
        {
            _2112 = 0.0;
            _2114 = 0.0;
            _2116 = 0.0;
            _2118 = 0.0;
            _2120 = 0.0;
            _2122 = 0.0;
        }
        else
        {
            float _2113;
            float _2115;
            float _2117;
            float _2119;
            float _2121;
            float _2123;
            float _2264 = 0.0;
            float _2265 = 0.0;
            float _2266 = 0.0;
            float _2267 = 0.0;
            float _2268 = 0.0;
            float _2269 = 0.0;
            uint _2270 = 0u;
            uint _2279;
            bool _2280;
            for (;;)
            {
                _2279 = texelFetch(g_lightClassification, int((((_1976 << 5u) + (_1962 << 9u)) + (_2270 << 2u)) >> 2u)).x;
                _2280 = _2279 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2280)
                {
                    frontier_phi_61_pred = _2264;
                    frontier_phi_61_pred_1 = _2269;
                    frontier_phi_61_pred_2 = _2268;
                    frontier_phi_61_pred_3 = _2267;
                    frontier_phi_61_pred_4 = _2266;
                    frontier_phi_61_pred_5 = _2265;
                }
                else
                {
                    float _2388;
                    float _2389;
                    float _2390;
                    float _2391;
                    float _2392;
                    float _2393;
                    uint _2394;
                    _2388 = _2264;
                    _2389 = _2265;
                    _2390 = _2266;
                    _2391 = _2267;
                    _2392 = _2268;
                    _2393 = _2269;
                    _2394 = _2279;
                    float _2320;
                    float _2321;
                    float _2322;
                    float _2323;
                    float _2324;
                    float _2325;
                    for (;;)
                    {
                        uint _2398 = uint(findLSB(_2394)) + (_2270 << 5u);
                        uint _2395 = (_2394 + 4294967295u) & _2394;
                        uint _2400 = _2398 * 48u;
                        vec4 _2414 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2400)).x, texelFetch(g_PointLightRenderingBuffer, int(_2400 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2400 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2400 + 3u)).x));
                        uint _2420 = (_2398 * 48u) + 4u;
                        vec4 _2433 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2420)).x, texelFetch(g_PointLightRenderingBuffer, int(_2420 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2420 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2420 + 3u)).x));
                        uint _2439 = (_2398 * 48u) + 8u;
                        vec3 _2450 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2439)).x, texelFetch(g_PointLightRenderingBuffer, int(_2439 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2439 + 2u)).x));
                        float _2454 = _2414.x - _1936;
                        float _2455 = _2414.y - _1937;
                        float _2456 = _2414.z - _1938;
                        float _2457 = dot(vec3(_2454, _2455, _2456), vec3(_2454, _2455, _2456));
                        float _2460 = inversesqrt(_2457);
                        float _2469 = 1.0 - (_2457 * _2414.w);
                        float _3558 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
                        float _2470 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
                        float _2471 = sqrt(_2457) * _2433.w;
                        float _2474 = 1.39999997615814208984375 / (_2471 + 1.39999997615814208984375);
                        float _2475 = _2474 * _2474;
                        float _2478 = ((1.0 - _2475) * dot(vec3(_348, _351, _354), vec3(_2460 * _2454, _2460 * _2455, _2460 * _2456))) + _2475;
                        float _2481 = _2471 * _2471;
                        float _2485 = ((isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0))) * _2470) / ((_2481 * 0.699999988079071044921875) + 1.0);
                        float _2489 = (-0.0) - _1936;
                        float _2490 = (-0.0) - _1937;
                        float _2491 = (-0.0) - _1938;
                        float _2495 = inversesqrt(dot(vec3(_2489, _2490, _2491), vec3(_2489, _2490, _2491)));
                        float _2499 = dot(vec3(_348, _351, _354), vec3(_2495 * _2489, _2495 * _2490, _2495 * _2491));
                        float _3574 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
                        float _3585 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
                        float _2503 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
                        float _2507 = (0.5 / (((isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) + 9.9999999392252902907785028219223e-09) + _2503)) * _2503;
                        float _3596 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
                        float _2516 = (((isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * 3.1415927410125732421875) / ((_2481 * 2.1991131305694580078125) + 3.141590118408203125)) * _2470;
                        _2323 = (_2485 * _2433.x) + _2391;
                        _2324 = (_2485 * _2433.y) + _2392;
                        _2325 = (_2485 * _2433.z) + _2393;
                        _2320 = (_2516 * _2450.x) + _2388;
                        _2321 = (_2516 * _2450.y) + _2389;
                        _2322 = (_2516 * _2450.z) + _2390;
                        if (_2395 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2388 = _2320;
                            _2389 = _2321;
                            _2390 = _2322;
                            _2391 = _2323;
                            _2392 = _2324;
                            _2393 = _2325;
                            _2394 = _2395;
                        }
                    }
                    frontier_phi_61_pred = _2320;
                    frontier_phi_61_pred_1 = _2325;
                    frontier_phi_61_pred_2 = _2324;
                    frontier_phi_61_pred_3 = _2323;
                    frontier_phi_61_pred_4 = _2322;
                    frontier_phi_61_pred_5 = _2321;
                }
                _2113 = frontier_phi_61_pred;
                _2123 = frontier_phi_61_pred_1;
                _2121 = frontier_phi_61_pred_2;
                _2119 = frontier_phi_61_pred_3;
                _2117 = frontier_phi_61_pred_4;
                _2115 = frontier_phi_61_pred_5;
                uint _2271 = _2270 + 1u;
                if (_2271 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2264 = _2113;
                    _2265 = _2115;
                    _2266 = _2117;
                    _2267 = _2119;
                    _2268 = _2121;
                    _2269 = _2123;
                    _2270 = _2271;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2112 = _2113;
            _2114 = _2115;
            _2116 = _2117;
            _2118 = _2119;
            _2120 = _2121;
            _2122 = _2123;
        }
        uvec4 _2126 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2127 = _2126.z;
        uint _2129 = (_2127 >> 8u) & 15u;
        float _2235;
        float _2237;
        float _2239;
        float _2241;
        float _2243;
        float _2245;
        if (((4294967295u << _2129) & _1982) == 0u)
        {
            _2235 = _2112;
            _2237 = _2114;
            _2239 = _2116;
            _2241 = _2118;
            _2243 = _2120;
            _2245 = _2122;
        }
        else
        {
            float _2260 = inversesqrt(dot(vec3(_1936, _1937, _1938), vec3(_1936, _1937, _1938)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2129 < ((_2127 >> 12u) & 15u))
            {
                float _2236;
                float _2238;
                float _2240;
                float _2242;
                float _2244;
                float _2246;
                float _2371 = _2112;
                float _2372 = _2114;
                float _2373 = _2116;
                float _2374 = _2118;
                float _2375 = _2120;
                float _2376 = _2122;
                uint _2377 = _2129;
                uint _2386;
                bool _2387;
                for (;;)
                {
                    _2386 = texelFetch(g_lightClassification, int((((_1976 << 5u) + (_1962 << 9u)) + (_2377 << 2u)) >> 2u)).x;
                    _2387 = _2386 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2387)
                    {
                        frontier_phi_67_pred = _2374;
                        frontier_phi_67_pred_1 = _2375;
                        frontier_phi_67_pred_2 = _2376;
                        frontier_phi_67_pred_3 = _2373;
                        frontier_phi_67_pred_4 = _2372;
                        frontier_phi_67_pred_5 = _2371;
                    }
                    else
                    {
                        float _2521;
                        float _2522;
                        float _2523;
                        float _2524;
                        float _2525;
                        float _2526;
                        float _2773;
                        float _2774;
                        float _2775;
                        float _2776;
                        float _2777;
                        float _2778;
                        float _2534 = _2371;
                        float _2535 = _2372;
                        float _2536 = _2373;
                        float _2537 = _2374;
                        float _2538 = _2375;
                        float _2539 = _2376;
                        uint _2540 = _2386;
                        uint _2541;
                        vec4 _2566;
                        float _2567;
                        vec4 _2582;
                        vec3 _2594;
                        vec4 _2610;
                        vec4 _2626;
                        float _2673;
                        bool _2674;
                        for (;;)
                        {
                            uint _2551 = ((_2377 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2540));
                            _2541 = (_2540 + 4294967295u) & _2540;
                            uint _2553 = _2551 * 40u;
                            _2566 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2553 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2553 + 3u)).x));
                            _2567 = _2566.w;
                            uint _2569 = (_2551 * 40u) + 4u;
                            _2582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2569 + 3u)).x));
                            uint _2584 = (_2551 * 40u) + 8u;
                            _2594 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2584 + 2u)).x));
                            uint _2597 = (_2551 * 40u) + 16u;
                            _2610 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2597 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2597 + 3u)).x));
                            uint _2613 = (_2551 * 40u) + 20u;
                            _2626 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2613)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2613 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2613 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2613 + 3u)).x));
                            uint _2629 = (_2551 * 40u) + 24u;
                            vec4 _2642 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2629)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2629 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2629 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2629 + 3u)).x));
                            uint _2648 = (_2551 * 40u) + 28u;
                            vec4 _2661 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2648)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2648 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2648 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2648 + 3u)).x));
                            _2673 = fma(_1938, _2661.z, fma(_1937, _2661.y, _2661.x * _1936)) + _2661.w;
                            _2674 = !((fma(_1938, _2642.z, fma(_1937, _2642.y, _2642.x * _1936)) + _2642.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2674)
                            {
                                float _2701 = _2566.x - _1936;
                                float _2702 = _2566.y - _1937;
                                float _2703 = _2566.z - _1938;
                                float _2704 = dot(vec3(_2701, _2702, _2703), vec3(_2701, _2702, _2703));
                                float _2707 = inversesqrt(_2704);
                                float _2708 = _2707 * _2701;
                                float _2709 = _2707 * _2702;
                                float _2710 = _2707 * _2703;
                                float _2714 = 1.0 - (_2704 / (_2567 * _2567));
                                float _3607 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
                                float _2715 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
                                float _2719 = sqrt(_2704) * _2582.w;
                                float _2721 = 1.39999997615814208984375 / (_2719 + 1.39999997615814208984375);
                                float _2722 = _2721 * _2721;
                                float _2723 = 1.0 - _2722;
                                float _2725 = (_2723 * dot(vec3(_2708, _2709, _2710), vec3(_348, _351, _354))) + _2722;
                                float _2728 = _2719 * _2719;
                                float _2732 = (fma(_1938, _2610.z, fma(_1937, _2610.y, _2610.x * _1936)) + _2610.w) / _2673;
                                float _2733 = (fma(_1938, _2626.z, fma(_1937, _2626.y, _2626.x * _1936)) + _2626.w) / _2673;
                                float _2737 = 1.0 - dot(vec2(_2732, _2733), vec2(_2732, _2733));
                                float _3623 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
                                float _2738 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
                                float _2739 = _2738 * (((isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0))) * _2715) / ((_2728 * 0.699999988079071044921875) + 1.0));
                                float _2749 = dot(vec3(_348, _351, _354), vec3((-0.0) - (_1936 * _2260), (-0.0) - (_1937 * _2260), (-0.0) - (_1938 * _2260)));
                                float _3634 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
                                float _2757 = (_2723 * dot(vec3(_348, _351, _354), vec3(_2708, _2709, _2710))) + _2722;
                                float _3645 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
                                float _2758 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
                                float _2762 = (0.5 / (((isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) + 9.9999999392252902907785028219223e-09) + _2758)) * _2758;
                                float _3656 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
                                float _2769 = (_2738 * _2715) * (((isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))) * 3.1415927410125732421875) / ((_2728 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2769 * _2594.x;
                                frontier_phi_73_pred_1 = _2769 * _2594.y;
                                frontier_phi_73_pred_2 = _2739 * _2582.z;
                                frontier_phi_73_pred_3 = _2739 * _2582.y;
                                frontier_phi_73_pred_4 = _2739 * _2582.x;
                                frontier_phi_73_pred_5 = _2769 * _2594.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2773 = frontier_phi_73_pred;
                            _2774 = frontier_phi_73_pred_1;
                            _2778 = frontier_phi_73_pred_2;
                            _2777 = frontier_phi_73_pred_3;
                            _2776 = frontier_phi_73_pred_4;
                            _2775 = frontier_phi_73_pred_5;
                            _2524 = _2776 + _2537;
                            _2525 = _2777 + _2538;
                            _2526 = _2778 + _2539;
                            _2521 = _2773 + _2534;
                            _2522 = _2774 + _2535;
                            _2523 = _2775 + _2536;
                            if (_2541 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2534 = _2521;
                                _2535 = _2522;
                                _2536 = _2523;
                                _2537 = _2524;
                                _2538 = _2525;
                                _2539 = _2526;
                                _2540 = _2541;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2524;
                        frontier_phi_67_pred_1 = _2525;
                        frontier_phi_67_pred_2 = _2526;
                        frontier_phi_67_pred_3 = _2523;
                        frontier_phi_67_pred_4 = _2522;
                        frontier_phi_67_pred_5 = _2521;
                    }
                    _2242 = frontier_phi_67_pred;
                    _2244 = frontier_phi_67_pred_1;
                    _2246 = frontier_phi_67_pred_2;
                    _2240 = frontier_phi_67_pred_3;
                    _2238 = frontier_phi_67_pred_4;
                    _2236 = frontier_phi_67_pred_5;
                    uint _2378 = _2377 + 1u;
                    if (_2378 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2371 = _2236;
                        _2372 = _2238;
                        _2373 = _2240;
                        _2374 = _2242;
                        _2375 = _2244;
                        _2376 = _2246;
                        _2377 = _2378;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2244;
                frontier_phi_55_56_ladder_1 = _2246;
                frontier_phi_55_56_ladder_2 = _2242;
                frontier_phi_55_56_ladder_3 = _2240;
                frontier_phi_55_56_ladder_4 = _2238;
                frontier_phi_55_56_ladder_5 = _2236;
            }
            else
            {
                frontier_phi_55_56_ladder = _2120;
                frontier_phi_55_56_ladder_1 = _2122;
                frontier_phi_55_56_ladder_2 = _2118;
                frontier_phi_55_56_ladder_3 = _2116;
                frontier_phi_55_56_ladder_4 = _2114;
                frontier_phi_55_56_ladder_5 = _2112;
            }
            _2235 = frontier_phi_55_56_ladder_5;
            _2237 = frontier_phi_55_56_ladder_4;
            _2239 = frontier_phi_55_56_ladder_3;
            _2241 = frontier_phi_55_56_ladder_2;
            _2243 = frontier_phi_55_56_ladder;
            _2245 = frontier_phi_55_56_ladder_1;
        }
        float _2250 = isnan(1.0) ? _392 : (isnan(_392) ? 1.0 : min(_392, 1.0));
        _1995 = (_2250 * _2241) + _1555;
        _1997 = (_2250 * _2243) + _1557;
        _1999 = (_2250 * _2245) + _1559;
        _2001 = ((_2235 * 0.039999999105930328369140625) * _2250) + _1807;
        _2003 = ((_2237 * 0.039999999105930328369140625) * _2250) + _1809;
        _2005 = ((_2239 * 0.039999999105930328369140625) * _2250) + _1811;
    }
    else
    {
        _1995 = _1555;
        _1997 = _1557;
        _1999 = _1559;
        _2001 = _1807;
        _2003 = _1809;
        _2005 = _1811;
    }
    uint _2011 = _368 + uint(cbMatDynParam._m0[0u].w);
    float _2017 = cbInstanceData._m0[_2011].x * (((cbMtdParam._m0[12u].x * cbMtdParam._m0[9u].x) * _214.x) + cbMtdParam._m0[11u].x);
    float _2018 = cbInstanceData._m0[_2011].y * (((cbMtdParam._m0[12u].x * cbMtdParam._m0[9u].y) * _214.y) + cbMtdParam._m0[11u].y);
    float _2019 = cbInstanceData._m0[_2011].z * (cbMtdParam._m0[11u].z + ((cbMtdParam._m0[12u].x * cbMtdParam._m0[9u].z) * _214.z));
    float _3672 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _3683 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _3694 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _2036 = (((isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * (_1995 + ((isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0))) * _392))) + ((_2001 + ((isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0))) * _1171)) * cbPerFrame._m0[3u].x)) + _2017;
    float _2038 = (_2018 + ((_2003 + ((isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0))) * _1171)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * (_1997 + ((isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0))) * _392)));
    float _2040 = (_2019 + ((_2005 + ((isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))) * _1171)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * (_1999 + ((isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0))) * _392)));
    float _3720 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2053 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    uint _2054 = _367 + 6u;
    float _2062 = _326 / cbSceneParam._m0[86u].x;
    float _2063 = _327 / cbSceneParam._m0[86u].y;
    vec4 _2077 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2062, _2063, (log2((isnan(cbSceneParam._m0[77u].w) ? _260 : (isnan(_260) ? cbSceneParam._m0[77u].w : min(_260, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2079 = _2077.x;
    float _2080 = _2077.y;
    float _2081 = _2077.z;
    float _2082 = _2077.w;
    float _2175;
    float _2177;
    float _2179;
    float _2181;
    if (_260 > cbSceneParam._m0[78u].w)
    {
        float _2137 = isnan(_260) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _260 : min(cbSceneParam._m0[80u].w, _260));
        float _2138 = _2137 / _260;
        float _2149 = _2138 * _311;
        float _2150 = _312 * _2138;
        float _2151 = (-0.0) - _2150;
        float _2153 = _2138 * _313;
        float _2155 = (cbSceneParam._m0[77u].w * _2151) / _2137;
        float _2156 = _2155 + cbSceneParam._m0[79u].w;
        float _2157 = cbSceneParam._m0[79u].w - _2150;
        float _2163 = sqrt(((_2149 * _2149) + (_2150 * _2150)) + (_2153 * _2153));
        float _2166 = (1.0 - (cbSceneParam._m0[77u].w / _2137)) * _2163;
        float _2171 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2173 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2333;
        if (abs((_2151 - _2155) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2333 = ((((_2156 > 0.0) ? exp2(_2171 * _2156) : (2.0 - exp2(_2173 * _2156))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2166;
        }
        else
        {
            float _2293 = 1.0 / cbSceneParam._m0[80u].x;
            float _2294 = isnan(_2157) ? _2156 : (isnan(_2156) ? _2157 : max(_2156, _2157));
            float _2295 = isnan(_2157) ? _2156 : (isnan(_2156) ? _2157 : min(_2156, _2157));
            float _2304 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : min(_2294, 0.0));
            float _2305 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : min(_2295, 0.0));
            _2333 = ((abs(_2163 / _2151) * cbSceneParam._m0[80u].y) * ((((_2304 - _2305) * 2.0) - ((exp2(_2171 * (isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0)))) - exp2(_2171 * (isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0))))) * _2293)) - ((exp2(_2173 * _2304) - exp2(_2173 * _2305)) * _2293))) + (_2166 * cbSceneParam._m0[80u].z);
        }
        vec4 _2335 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2062, _2063, 1.0), 0.0);
        float _2344 = exp2((_2333 * (-1.44269502162933349609375)) * (1.0 - _2335.w));
        float _2345 = log2(_2344);
        float _2361 = log2(_2082);
        _2175 = (exp2(_2361 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2345 * cbSceneParam._m0[78u].x)) * _2335.x) / cbSceneParam._m0[78u].x)) + _2079;
        _2177 = (exp2(_2361 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2345 * cbSceneParam._m0[78u].y)) * _2335.y) / cbSceneParam._m0[78u].y)) + _2080;
        _2179 = (exp2(_2361 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2345 * cbSceneParam._m0[78u].z)) * _2335.z) / cbSceneParam._m0[78u].z)) + _2081;
        _2181 = _2344 * _2082;
    }
    else
    {
        _2175 = _2079;
        _2177 = _2080;
        _2179 = _2081;
        _2181 = _2082;
    }
    float _2193 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2194 = _2193 == 3.0;
    float _2196 = log2(_2181);
    float _2200 = exp2(_2196 * cbSceneParam._m0[78u].x);
    float _2201 = exp2(_2196 * cbSceneParam._m0[78u].y);
    float _2202 = exp2(_2196 * cbSceneParam._m0[78u].z);
    float _2203 = _2200 * (isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0)));
    float _2204 = _2201 * (isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0)));
    float _2205 = _2202 * (isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0)));
    float _2214 = (_2193 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2214 * (_2194 ? _2203 : (_2203 + (cbSceneParam._m0[72u].w * _2175)));
    SV_Target.y = _2214 * (_2194 ? _2204 : (_2204 + (cbSceneParam._m0[72u].w * _2177)));
    SV_Target.z = _2214 * (_2194 ? _2205 : (_2205 + (cbSceneParam._m0[72u].w * _2179)));
    SV_Target.w = cbInstanceData._m0[_2054].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2017) * _2053) * _2200) * _2214;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2018) * _2053) * _2201) * _2214;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2019) * _2053) * _2202) * _2214;
    SV_Target_1.w = cbInstanceData._m0[_2054].w;
}


