#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _734;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _159 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _160 = _159 * NORMAL.x;
    float _161 = _159 * NORMAL.y;
    float _162 = _159 * NORMAL.z;
    vec4 _182 = texture(sampler2D(P_ACParts_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _188 = _182.x * cbMtdParam._m0[10u].x;
    float _189 = _182.y * cbMtdParam._m0[10u].y;
    float _190 = _182.z * cbMtdParam._m0[10u].z;
    vec4 _212 = texture(sampler2D(P_ACParts_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _235 = inversesqrt(dot(vec3(_160, _161, _162), vec3(_160, _161, _162)));
    float _236 = _235 * _160;
    float _237 = _235 * _161;
    float _238 = _235 * _162;
    float _2881 = isnan(0.0) ? _188 : (isnan(_188) ? 0.0 : max(_188, 0.0));
    float _2892 = isnan(0.0) ? _189 : (isnan(_189) ? 0.0 : max(_189, 0.0));
    float _2903 = isnan(0.0) ? _190 : (isnan(_190) ? 0.0 : max(_190, 0.0));
    float _258 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _299 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _309 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _299);
    float _310 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _299);
    float _311 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _299);
    float _315 = inversesqrt(dot(vec3(_309, _310, _311), vec3(_309, _310, _311)));
    float _316 = _309 * _315;
    float _317 = _310 * _315;
    float _318 = _311 * _315;
    float _324 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _325 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _346 = fma(_238, cbSceneParam._m0[5u].z, fma(_237, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _236));
    float _349 = fma(_238, cbSceneParam._m0[6u].z, fma(_237, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _236));
    float _352 = fma(_238, cbSceneParam._m0[7u].z, fma(_237, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _236));
    uint _365 = uint(roundEven(NORMAL.w)) * 13u;
    uint _366 = _365 + 9u;
    uint _367 = _366 + uint(cbMatDynParam._m0[0u].w);
    float _373 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2881 : (isnan(_2881) ? 1.0 : min(_2881, 1.0)))) * cbInstanceData._m0[_367].x;
    float _374 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2892 : (isnan(_2892) ? 1.0 : min(_2892, 1.0)))) * cbInstanceData._m0[_367].y;
    float _375 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2903 : (isnan(_2903) ? 1.0 : min(_2903, 1.0)))) * cbInstanceData._m0[_367].z;
    float _2914 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _376 = isnan(1.0) ? _2914 : (isnan(_2914) ? 1.0 : min(_2914, 1.0));
    float _2925 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _377 = isnan(1.0) ? _2925 : (isnan(_2925) ? 1.0 : min(_2925, 1.0));
    float _2936 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _378 = isnan(1.0) ? _2936 : (isnan(_2936) ? 1.0 : min(_2936, 1.0));
    vec4 _387 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _324, cbSceneParam._m0[86u].y * _325));
    float _390 = _387.x * TEXCOORD.z;
    float _391 = dot(vec3(_236, _237, _238), vec3(_316, _317, _318));
    float _394 = _391 * 2.0;
    float _399 = (_394 * _236) - _316;
    float _400 = (_394 * _237) - _317;
    float _401 = (_394 * _238) - _318;
    float _423 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _427 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _431 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _733;
    float _735;
    float _736;
    float _737;
    float _738;
    float _739;
    float _740;
    float _741;
    float _742;
    float _743;
    float _744;
    float _745;
    float _746;
    float _747;
    float _748;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _458 = fma(_431, cbModelParam._m0[26u].z, fma(_427, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _423));
        float _462 = fma(_431, cbModelParam._m0[27u].z, fma(_427, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _423));
        float _466 = fma(_431, cbModelParam._m0[28u].z, fma(_427, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _423));
        float _491 = _423 + _236;
        float _492 = _427 + _237;
        float _493 = _431 + _238;
        float _503 = fma(_493, cbModelParam._m0[26u].z, fma(_492, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _491)) - _458;
        float _504 = fma(_493, cbModelParam._m0[27u].z, fma(_492, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _491)) - _462;
        float _505 = fma(_493, cbModelParam._m0[28u].z, fma(_492, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _491)) - _466;
        float _509 = inversesqrt(dot(vec3(_503, _504, _505), vec3(_503, _504, _505)));
        float _522 = ((_509 * _503) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_458 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _523 = ((_509 * _504) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_462 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _524 = ((_509 * _505) / cbModelParam._m0[34u].z) + ((((((_466 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _527 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_522, _523, _524), 0.0);
        vec4 _534 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_522, _523, _524), 0.0);
        vec4 _541 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_522, _523, _524), 0.0);
        vec4 _548 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_522, _523, _524), 0.0);
        float _561 = exp2((_527.w + (-0.5)) * 20.0) * 2.0;
        float _562 = _561 * (_527.x + (-0.5));
        float _563 = _561 * (_527.y + (-0.5));
        float _564 = _561 * (_527.z + (-0.5));
        float _571 = exp2((_534.w + (-0.5)) * 20.0) * 2.0;
        float _572 = _571 * (_534.x + (-0.5));
        float _573 = _571 * (_534.y + (-0.5));
        float _574 = _571 * (_534.z + (-0.5));
        float _581 = exp2((_541.w + (-0.5)) * 20.0) * 2.0;
        float _582 = _581 * (_541.x + (-0.5));
        float _583 = _581 * (_541.y + (-0.5));
        float _584 = _581 * (_541.z + (-0.5));
        float _591 = exp2((_548.w + (-0.5)) * 20.0) * 2.0;
        float _592 = _591 * (_548.x + (-0.5));
        float _593 = _591 * (_548.y + (-0.5));
        float _594 = _591 * (_548.z + (-0.5));
        float _595 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
        float _596 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
        float _597 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
        float _598 = _562 * 0.5;
        float _599 = _572 * 0.5;
        float _600 = _582 * 0.5;
        float _601 = dot(vec3(_598, _599, _600), vec3(_598, _599, _600));
        float _606 = (_601 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_601);
        float _615 = (dot(vec3(_236, _237, _238), vec3(_606 * _598, _606 * _599, _606 * _600)) + 1.0) * 0.5;
        float _2962 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
        float _625 = sqrt(((_599 * _599) + (_598 * _598)) + (_600 * _600)) / (_595 + 9.9999997473787516355514526367188e-06);
        float _2973 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
        float _626 = isnan(1.0) ? _2973 : (isnan(_2973) ? 1.0 : min(_2973, 1.0));
        float _627 = _626 * 2.0;
        float _631 = (1.0 - _626) / (_626 + 1.0);
        float _2984 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
        float _632 = isnan(1.0) ? _2984 : (isnan(_2984) ? 1.0 : min(_2984, 1.0));
        float _641 = ((((1.0 - _632) * (_627 + 2.0)) * exp2(log2(isnan(1.0) ? _2962 : (isnan(_2962) ? 1.0 : min(_2962, 1.0))) * (_627 + 1.0))) + _632) * _595;
        float _642 = _563 * 0.5;
        float _643 = _573 * 0.5;
        float _644 = _583 * 0.5;
        float _645 = dot(vec3(_642, _643, _644), vec3(_642, _643, _644));
        float _650 = (_645 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_645);
        float _658 = (dot(vec3(_236, _237, _238), vec3(_650 * _642, _650 * _643, _650 * _644)) + 1.0) * 0.5;
        float _2995 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
        float _667 = sqrt(((_643 * _643) + (_642 * _642)) + (_644 * _644)) / (_596 + 9.9999997473787516355514526367188e-06);
        float _3006 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
        float _668 = isnan(1.0) ? _3006 : (isnan(_3006) ? 1.0 : min(_3006, 1.0));
        float _669 = _668 * 2.0;
        float _673 = (1.0 - _668) / (_668 + 1.0);
        float _3017 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
        float _674 = isnan(1.0) ? _3017 : (isnan(_3017) ? 1.0 : min(_3017, 1.0));
        float _683 = ((((1.0 - _674) * (_669 + 2.0)) * exp2(log2(isnan(1.0) ? _2995 : (isnan(_2995) ? 1.0 : min(_2995, 1.0))) * (_669 + 1.0))) + _674) * _596;
        float _684 = _564 * 0.5;
        float _685 = _574 * 0.5;
        float _686 = _584 * 0.5;
        float _687 = dot(vec3(_684, _685, _686), vec3(_684, _685, _686));
        float _692 = (_687 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_687);
        float _700 = (dot(vec3(_236, _237, _238), vec3(_692 * _684, _692 * _685, _692 * _686)) + 1.0) * 0.5;
        float _3028 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
        float _709 = sqrt(((_685 * _685) + (_684 * _684)) + (_686 * _686)) / (_597 + 9.9999997473787516355514526367188e-06);
        float _3039 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _710 = isnan(1.0) ? _3039 : (isnan(_3039) ? 1.0 : min(_3039, 1.0));
        float _711 = _710 * 2.0;
        float _715 = (1.0 - _710) / (_710 + 1.0);
        float _3050 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _716 = isnan(1.0) ? _3050 : (isnan(_3050) ? 1.0 : min(_3050, 1.0));
        float _725 = ((((1.0 - _716) * (_711 + 2.0)) * exp2(log2(isnan(1.0) ? _3028 : (isnan(_3028) ? 1.0 : min(_3028, 1.0))) * (_711 + 1.0))) + _716) * _597;
        _733 = _564;
        _735 = _563;
        _736 = _562;
        _737 = _574;
        _738 = _573;
        _739 = _572;
        _740 = _584;
        _741 = _583;
        _742 = _582;
        _743 = _597;
        _744 = _596;
        _745 = _595;
        _746 = cbModelParam._m0[36u].z * (isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0)));
        _747 = cbModelParam._m0[36u].z * (isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0)));
        _748 = cbModelParam._m0[36u].z * (isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0)));
    }
    else
    {
        _733 = _734;
        _735 = _734;
        _736 = _734;
        _737 = _734;
        _738 = _734;
        _739 = _734;
        _740 = _734;
        _741 = _734;
        _742 = _734;
        _743 = _734;
        _744 = _734;
        _745 = _734;
        _746 = 0.0;
        _747 = 0.0;
        _748 = 0.0;
    }
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _774 = fma(_431, cbModelParam._m0[30u].z, fma(_427, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _423));
        float _778 = fma(_431, cbModelParam._m0[31u].z, fma(_427, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _423));
        float _782 = fma(_431, cbModelParam._m0[32u].z, fma(_427, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _423));
        float _805 = _423 + _236;
        float _806 = _427 + _237;
        float _807 = _431 + _238;
        float _817 = fma(_807, cbModelParam._m0[30u].z, fma(_806, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _805)) - _774;
        float _818 = fma(_807, cbModelParam._m0[31u].z, fma(_806, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _805)) - _778;
        float _819 = fma(_807, cbModelParam._m0[32u].z, fma(_806, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _805)) - _782;
        float _823 = inversesqrt(dot(vec3(_817, _818, _819), vec3(_817, _818, _819)));
        float _836 = ((_823 * _817) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_774 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _837 = ((_823 * _818) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_778 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _838 = ((_823 * _819) / cbModelParam._m0[35u].z) + ((((((_782 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_836, _837, _838), 0.0);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_836, _837, _838), 0.0);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_836, _837, _838), 0.0);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_836, _837, _838), 0.0);
        float _873 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_840.x + (-0.5));
        float _875 = _873 * (_840.y + (-0.5));
        float _876 = _873 * (_840.z + (-0.5));
        float _883 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_847.x + (-0.5));
        float _885 = _883 * (_847.y + (-0.5));
        float _886 = _883 * (_847.z + (-0.5));
        float _893 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_854.x + (-0.5));
        float _895 = _893 * (_854.y + (-0.5));
        float _896 = _893 * (_854.z + (-0.5));
        float _903 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _904 = _903 * (_861.x + (-0.5));
        float _905 = _903 * (_861.y + (-0.5));
        float _906 = _903 * (_861.z + (-0.5));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _910 = _874 * 0.5;
        float _911 = _884 * 0.5;
        float _912 = _894 * 0.5;
        float _913 = dot(vec3(_910, _911, _912), vec3(_910, _911, _912));
        float _918 = (_913 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_913);
        float _926 = (dot(vec3(_236, _237, _238), vec3(_918 * _910, _918 * _911, _918 * _912)) + 1.0) * 0.5;
        float _3091 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _935 = sqrt(((_911 * _911) + (_910 * _910)) + (_912 * _912)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _3102 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3102 : (isnan(_3102) ? 1.0 : min(_3102, 1.0));
        float _937 = _936 * 2.0;
        float _941 = (1.0 - _936) / (_936 + 1.0);
        float _3113 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3113 : (isnan(_3113) ? 1.0 : min(_3113, 1.0));
        float _951 = ((((1.0 - _942) * (_937 + 2.0)) * exp2(log2(isnan(1.0) ? _3091 : (isnan(_3091) ? 1.0 : min(_3091, 1.0))) * (_937 + 1.0))) + _942) * _907;
        float _952 = _875 * 0.5;
        float _953 = _885 * 0.5;
        float _954 = _895 * 0.5;
        float _955 = dot(vec3(_952, _953, _954), vec3(_952, _953, _954));
        float _960 = (_955 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_955);
        float _968 = (dot(vec3(_236, _237, _238), vec3(_960 * _952, _960 * _953, _960 * _954)) + 1.0) * 0.5;
        float _3124 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _977 = sqrt(((_953 * _953) + (_952 * _952)) + (_954 * _954)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3135 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3135 : (isnan(_3135) ? 1.0 : min(_3135, 1.0));
        float _979 = _978 * 2.0;
        float _983 = (1.0 - _978) / (_978 + 1.0);
        float _3146 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3146 : (isnan(_3146) ? 1.0 : min(_3146, 1.0));
        float _993 = ((((1.0 - _984) * (_979 + 2.0)) * exp2(log2(isnan(1.0) ? _3124 : (isnan(_3124) ? 1.0 : min(_3124, 1.0))) * (_979 + 1.0))) + _984) * _908;
        float _994 = _876 * 0.5;
        float _995 = _886 * 0.5;
        float _996 = _896 * 0.5;
        float _997 = dot(vec3(_994, _995, _996), vec3(_994, _995, _996));
        float _1002 = (_997 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_997);
        float _1010 = (dot(vec3(_236, _237, _238), vec3(_1002 * _994, _1002 * _995, _1002 * _996)) + 1.0) * 0.5;
        float _3157 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1019 = sqrt(((_995 * _995) + (_994 * _994)) + (_996 * _996)) / (_909 + 9.9999997473787516355514526367188e-06);
        float _3168 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3168 : (isnan(_3168) ? 1.0 : min(_3168, 1.0));
        float _1021 = _1020 * 2.0;
        float _1025 = (1.0 - _1020) / (_1020 + 1.0);
        float _3179 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3179 : (isnan(_3179) ? 1.0 : min(_3179, 1.0));
        float _1035 = ((((1.0 - _1026) * (_1021 + 2.0)) * exp2(log2(isnan(1.0) ? _3157 : (isnan(_3157) ? 1.0 : min(_3157, 1.0))) * (_1021 + 1.0))) + _1026) * _909;
        _1043 = _876;
        _1044 = _875;
        _1045 = _874;
        _1046 = _886;
        _1047 = _885;
        _1048 = _884;
        _1049 = _896;
        _1050 = _895;
        _1051 = _894;
        _1052 = _909;
        _1053 = _908;
        _1054 = _907;
        _1055 = cbModelParam._m0[36u].w * (isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0)));
        _1056 = cbModelParam._m0[36u].w * (isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0)));
        _1057 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0)));
    }
    else
    {
        _1043 = _734;
        _1044 = _734;
        _1045 = _734;
        _1046 = _734;
        _1047 = _734;
        _1048 = _734;
        _1049 = _734;
        _1050 = _734;
        _1051 = _734;
        _1052 = _734;
        _1053 = _734;
        _1054 = _734;
        _1055 = 0.0;
        _1056 = 0.0;
        _1057 = 0.0;
    }
    float _1067 = (cbModelParam._m0[1u].x * (_1055 - _746)) + _746;
    float _1068 = (cbModelParam._m0[1u].x * (_1056 - _747)) + _747;
    float _1069 = (cbModelParam._m0[1u].x * (_1057 - _748)) + _748;
    float _1090 = fma(_1069, cbSceneParam._m0[89u].z, fma(_1068, cbSceneParam._m0[89u].y, _1067 * cbSceneParam._m0[89u].x));
    float _1093 = fma(_1069, cbSceneParam._m0[90u].z, fma(_1068, cbSceneParam._m0[90u].y, _1067 * cbSceneParam._m0[90u].x));
    float _1096 = fma(_1069, cbSceneParam._m0[91u].z, fma(_1068, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1067));
    float _1111 = _399 * 0.5;
    float _1112 = _400 * 0.5;
    float _1113 = _401 * 0.5;
    float _1114 = dot(vec4(_1111, _1112, _1113, 1.0), vec4(_1045, _1048, _1051, _1054));
    float _1117 = dot(vec4(_1111, _1112, _1113, 1.0), vec4(_1044, _1047, _1050, _1053));
    float _1120 = dot(vec4(_1111, _1112, _1113, 1.0), vec4(_1043, _1046, _1049, _1052));
    float _1154;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1127 = dot(vec4(_1111, _1112, _1113, 1.0), vec4(_733, _737, _740, _743));
        float _1131 = dot(vec4(_1111, _1112, _1113, 1.0), vec4(_735, _738, _741, _744));
        float _1135 = dot(vec4(_1111, _1112, _1113, 1.0), vec4(_736, _739, _742, _745));
        float _1142 = dot(vec4(cbModelParam._m0[39u]), vec4(_1111, _1112, _1113, 1.0));
        _1154 = dot(vec3(isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)), isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)), isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1142) ? 0.0 : (isnan(0.0) ? _1142 : max(0.0, _1142))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1154 = 1.0;
    }
    float _1165;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1156 = dot(vec4(cbModelParam._m0[40u]), vec4(_1111, _1112, _1113, 1.0));
        _1165 = dot(vec3(isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0)), isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)), isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1156) ? 0.0 : (isnan(0.0) ? _1156 : max(0.0, _1156))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1165 = 1.0;
    }
    float _1169 = (_1165 * cbModelParam._m0[1u].x) + (_1154 * (1.0 - cbModelParam._m0[1u].x));
    float _1178 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1260;
    float _1262;
    float _1264;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1227 = fma(_431, cbModelParam._m0[13u].z, fma(_427, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _423)) + cbModelParam._m0[13u].w;
        float _1231 = fma(_431, cbModelParam._m0[14u].z, fma(_427, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _423)) + cbModelParam._m0[14u].w;
        float _1235 = fma(_431, cbModelParam._m0[15u].z, fma(_427, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _423)) + cbModelParam._m0[15u].w;
        float _1238 = fma(_401, cbModelParam._m0[13u].z, fma(_400, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _399));
        float _1241 = fma(_401, cbModelParam._m0[14u].z, fma(_400, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _399));
        float _1244 = fma(_401, cbModelParam._m0[15u].z, fma(_400, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _399));
        float _1270;
        if (_1238 > 0.0)
        {
            _1270 = abs((1.0 - _1227) / _1238);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1238 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1227 + 1.0) / _1238);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1270 = frontier_phi_14_12_ladder;
        }
        float _1477;
        if (_1241 > 0.0)
        {
            _1477 = abs((1.0 - _1231) / _1241);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1241 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1231 + 1.0) / _1241);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1477 = frontier_phi_23_19_ladder;
        }
        float _1666;
        if (_1244 > 0.0)
        {
            _1666 = abs((1.0 - _1235) / _1244);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1244 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1235 + 1.0) / _1244);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1666 = frontier_phi_35_30_ladder;
        }
        float _1668 = isnan(_1477) ? _1270 : (isnan(_1270) ? _1477 : min(_1270, _1477));
        float _1669 = isnan(_1666) ? _1668 : (isnan(_1668) ? _1666 : min(_1668, _1666));
        float _1673 = (_1669 * _1238) + _1227;
        float _1674 = (_1669 * _1241) + _1231;
        float _1675 = (_1669 * _1244) + _1235;
        float _1676 = _1669 * 9.9999997473787516355514526367188e-05;
        float _1678 = (-1.0) - _1676;
        float _1680 = _1676 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1675 > _1680) || ((_1675 < _1678) || ((_1674 > _1680) || ((_1674 < _1678) || ((_1673 < _1678) || (_1673 > _1680))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1772 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1675, cbModelParam._m0[9u].z, fma(_1674, cbModelParam._m0[9u].y, _1673 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1675, cbModelParam._m0[10u].z, fma(_1674, cbModelParam._m0[10u].y, _1673 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1675, cbModelParam._m0[11u].z, fma(_1674, cbModelParam._m0[11u].y, _1673 * cbModelParam._m0[11u].x))), _1178);
            frontier_phi_13_35_ladder = _1772.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1772.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1772.x * cbModelParam._m0[1u].y;
        }
        _1260 = frontier_phi_13_35_ladder_2;
        _1262 = frontier_phi_13_35_ladder_1;
        _1264 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1248 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_399, _400, _401), _1178);
        _1260 = _1248.x * cbModelParam._m0[1u].y;
        _1262 = _1248.y * cbModelParam._m0[1u].y;
        _1264 = _1248.z * cbModelParam._m0[1u].y;
    }
    float _1267 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1360;
    float _1362;
    float _1364;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1324 = fma(_431, cbModelParam._m0[21u].z, fma(_427, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _423)) + cbModelParam._m0[21u].w;
        float _1328 = fma(_431, cbModelParam._m0[22u].z, fma(_427, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _423)) + cbModelParam._m0[22u].w;
        float _1332 = fma(_431, cbModelParam._m0[23u].z, fma(_427, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _423)) + cbModelParam._m0[23u].w;
        float _1335 = fma(_401, cbModelParam._m0[21u].z, fma(_400, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _399));
        float _1338 = fma(_401, cbModelParam._m0[22u].z, fma(_400, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _399));
        float _1341 = fma(_401, cbModelParam._m0[23u].z, fma(_400, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _399));
        float _1482;
        if (_1335 > 0.0)
        {
            _1482 = abs((1.0 - _1324) / _1335);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1335 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1324 + 1.0) / _1335);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1482 = frontier_phi_25_21_ladder;
        }
        float _1693;
        if (_1338 > 0.0)
        {
            _1693 = abs((1.0 - _1328) / _1338);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1338 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1328 + 1.0) / _1338);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1693 = frontier_phi_37_32_ladder;
        }
        float _1844;
        if (_1341 > 0.0)
        {
            _1844 = abs((1.0 - _1332) / _1341);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1341 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1332 + 1.0) / _1341);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1844 = frontier_phi_46_43_ladder;
        }
        float _1846 = isnan(_1693) ? _1482 : (isnan(_1482) ? _1693 : min(_1482, _1693));
        float _1847 = isnan(_1844) ? _1846 : (isnan(_1846) ? _1844 : min(_1846, _1844));
        float _1851 = (_1847 * _1335) + _1324;
        float _1852 = (_1847 * _1338) + _1328;
        float _1853 = (_1847 * _1341) + _1332;
        float _1854 = _1847 * 9.9999997473787516355514526367188e-05;
        float _1855 = (-1.0) - _1854;
        float _1857 = _1854 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1853 > _1857) || ((_1853 < _1855) || ((_1852 > _1857) || ((_1852 < _1855) || ((_1851 < _1855) || (_1851 > _1857))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2081 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1853, cbModelParam._m0[17u].z, fma(_1852, cbModelParam._m0[17u].y, _1851 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1853, cbModelParam._m0[18u].z, fma(_1852, cbModelParam._m0[18u].y, _1851 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1853, cbModelParam._m0[19u].z, fma(_1852, cbModelParam._m0[19u].y, _1851 * cbModelParam._m0[19u].x))), _1267);
            frontier_phi_22_46_ladder = _2081.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2081.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2081.x * cbModelParam._m0[1u].z;
        }
        _1360 = frontier_phi_22_46_ladder_2;
        _1362 = frontier_phi_22_46_ladder_1;
        _1364 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1344 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_399, _400, _401), _1267);
        _1360 = _1344.x * cbModelParam._m0[1u].z;
        _1362 = _1344.y * cbModelParam._m0[1u].z;
        _1364 = _1344.z * cbModelParam._m0[1u].z;
    }
    float _1376 = _390 * 0.01200000010430812835693359375;
    float _1378 = _1376 * ((cbModelParam._m0[1u].w * (_1360 - _1260)) + _1260);
    float _1379 = _1376 * ((cbModelParam._m0[1u].w * (_1362 - _1262)) + _1262);
    float _1380 = _1376 * ((cbModelParam._m0[1u].w * (_1364 - _1264)) + _1264);
    float _1383 = fma(_1380, cbSceneParam._m0[89u].z, fma(_1379, cbSceneParam._m0[89u].y, _1378 * cbSceneParam._m0[89u].x));
    float _1386 = fma(_1380, cbSceneParam._m0[90u].z, fma(_1379, cbSceneParam._m0[90u].y, _1378 * cbSceneParam._m0[90u].x));
    float _1389 = fma(_1380, cbSceneParam._m0[91u].z, fma(_1379, cbSceneParam._m0[91u].y, _1378 * cbSceneParam._m0[91u].x));
    uvec4 _1399 = floatBitsToUint(cbInstanceData._m0[_365 + 5u]);
    uint _1401 = _1399.x * 14u;
    uint _1402 = _1401 + 13u;
    float _1409 = _390 + (-1.0);
    float _1415 = (cbLight._m0[_1402].x * _1409) + 1.0;
    float _1416 = (cbLight._m0[_1402].y * _1409) + 1.0;
    float _1417 = (cbLight._m0[_1402].z * _1409) + 1.0;
    float _1418 = (cbLight._m0[_1402].w * _1409) + 1.0;
    uint _1419 = _1401 + 5u;
    float _1425 = isnan(1.0) ? _1416 : (isnan(_1416) ? 1.0 : min(_1416, 1.0));
    uint _1429 = _1401 + 4u;
    float _1436 = isnan(1.0) ? _1415 : (isnan(_1415) ? 1.0 : min(_1415, 1.0));
    uint _1440 = _1401 | 1u;
    float _1451 = dot(vec3(cbLight._m0[_1401].xyz), vec3(_236, _237, _238));
    float _1454 = dot(vec3(cbLight._m0[_1440].xyz), vec3(_236, _237, _238));
    float _3315 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
    float _3326 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
    float _1459 = (isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0))) * 0.3183098733425140380859375;
    float _1461 = (isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0))) * 0.3183098733425140380859375;
    float _1468 = ((cbLight._m0[_1419].x * _1425) * _1461) + ((cbLight._m0[_1429].x * _1436) * _1459);
    float _1469 = ((_1425 * cbLight._m0[_1419].y) * _1461) + ((_1436 * cbLight._m0[_1429].y) * _1459);
    float _1470 = ((_1425 * cbLight._m0[_1419].z) * _1461) + ((_1436 * cbLight._m0[_1429].z) * _1459);
    uvec4 _1474 = floatBitsToUint(cbLight._m0[_1401 + 12u]);
    bool _1476 = _1474.x == 0u;
    float _1487;
    float _1489;
    float _1491;
    if (_1476)
    {
        _1487 = _1468;
        _1489 = _1469;
        _1491 = _1470;
    }
    else
    {
        uint _1495 = _1401 + 6u;
        float _1511 = (dot(vec3(cbLight._m0[_1401 + 2u].xyz), vec3(_236, _237, _238)) * 0.5) + 0.5;
        float _1512 = _1511 * _1511;
        float _3337 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0));
        float _1514 = isnan(1.0) ? _1417 : (isnan(_1417) ? 1.0 : min(_1417, 1.0));
        _1487 = (((cbLight._m0[_1495].x * 0.3183098733425140380859375) * _1513) * _1514) + _1468;
        _1489 = (((cbLight._m0[_1495].y * 0.3183098733425140380859375) * _1513) * _1514) + _1469;
        _1491 = (((cbLight._m0[_1495].z * 0.3183098733425140380859375) * _1513) * _1514) + _1470;
    }
    bool _1494 = _1474.y == 0u;
    float _1532;
    float _1534;
    float _1536;
    if (_1494)
    {
        _1532 = _1487;
        _1534 = _1489;
        _1536 = _1491;
    }
    else
    {
        uint _1637 = _1401 + 7u;
        float _1653 = (dot(vec3(cbLight._m0[_1401 + 3u].xyz), vec3(_236, _237, _238)) * 0.5) + 0.5;
        float _1654 = _1653 * _1653;
        float _3353 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
        float _1656 = isnan(1.0) ? _1418 : (isnan(_1418) ? 1.0 : min(_1418, 1.0));
        _1532 = (((cbLight._m0[_1637].x * 0.3183098733425140380859375) * _1655) * _1656) + _1487;
        _1534 = (((cbLight._m0[_1637].y * 0.3183098733425140380859375) * _1655) * _1656) + _1489;
        _1536 = (((cbLight._m0[_1637].z * 0.3183098733425140380859375) * _1655) * _1656) + _1491;
    }
    uint _1538 = _1401 + 8u;
    float _1544 = cbLight._m0[_1401].x + _316;
    float _1545 = cbLight._m0[_1401].y + _317;
    float _1546 = cbLight._m0[_1401].z + _318;
    float _1550 = inversesqrt(dot(vec3(_1544, _1545, _1546), vec3(_1544, _1545, _1546)));
    float _1554 = dot(vec3(_236, _237, _238), vec3(cbLight._m0[_1401].xyz));
    float _3369 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
    float _1557 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
    float _3380 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _1558 = isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0));
    float _1559 = dot(vec3(cbLight._m0[_1401].xyz), vec3(_1544 * _1550, _1545 * _1550, _1546 * _1550));
    float _3391 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
    float _1570 = (exp2(log2(1.0 - (isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1576 = (0.5 / ((_1557 + 9.9999999392252902907785028219223e-09) + _1558)) * _1557;
    float _3402 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
    float _1578 = (isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0))) * 0.31831014156341552734375;
    uint _1589 = _1401 + 9u;
    float _1595 = cbLight._m0[_1440].x + _316;
    float _1596 = cbLight._m0[_1440].y + _317;
    float _1597 = cbLight._m0[_1440].z + _318;
    float _1601 = inversesqrt(dot(vec3(_1595, _1596, _1597), vec3(_1595, _1596, _1597)));
    float _1605 = dot(vec3(_236, _237, _238), vec3(cbLight._m0[_1440].xyz));
    float _3413 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
    float _1608 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
    float _1609 = dot(vec3(cbLight._m0[_1440].xyz), vec3(_1595 * _1601, _1596 * _1601, _1597 * _1601));
    float _3424 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
    float _1618 = (exp2(log2(1.0 - (isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1622 = (0.5 / ((_1608 + 9.9999999392252902907785028219223e-09) + _1558)) * _1608;
    float _3435 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
    float _1624 = (isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0))) * 0.31831014156341552734375;
    float _1634 = (((_1618 * cbLight._m0[_1589].x) * _1624) * _1425) + (((_1570 * cbLight._m0[_1538].x) * _1578) * _1436);
    float _1635 = (((_1618 * cbLight._m0[_1589].y) * _1624) * _1425) + (((_1570 * cbLight._m0[_1538].y) * _1578) * _1436);
    float _1636 = (((_1618 * cbLight._m0[_1589].z) * _1624) * _1425) + (((_1570 * cbLight._m0[_1538].z) * _1578) * _1436);
    float _1698;
    float _1700;
    float _1702;
    if (_1476)
    {
        _1698 = _1634;
        _1700 = _1635;
        _1702 = _1636;
    }
    else
    {
        uint _1704 = _1401 + 10u;
        uint _1710 = _1401 + 2u;
        float _1716 = cbLight._m0[_1710].x + _316;
        float _1717 = cbLight._m0[_1710].y + _317;
        float _1718 = cbLight._m0[_1710].z + _318;
        float _1722 = inversesqrt(dot(vec3(_1716, _1717, _1718), vec3(_1716, _1717, _1718)));
        float _1726 = dot(vec3(_236, _237, _238), vec3(cbLight._m0[_1710].xyz));
        float _3446 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1729 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
        float _1730 = dot(vec3(cbLight._m0[_1710].xyz), vec3(_1716 * _1722, _1717 * _1722, _1718 * _1722));
        float _3457 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1739 = (exp2(log2(1.0 - (isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1743 = (0.5 / ((_1729 + 9.9999999392252902907785028219223e-09) + _1558)) * _1729;
        float _3468 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1745 = (isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0))) * 0.31831014156341552734375;
        float _1746 = isnan(1.0) ? _1417 : (isnan(_1417) ? 1.0 : min(_1417, 1.0));
        _1698 = (((_1739 * cbLight._m0[_1704].x) * _1745) * _1746) + _1634;
        _1700 = (((_1739 * cbLight._m0[_1704].y) * _1745) * _1746) + _1635;
        _1702 = (((_1739 * cbLight._m0[_1704].z) * _1745) * _1746) + _1636;
    }
    float _1781;
    float _1783;
    float _1785;
    if (_1494)
    {
        _1781 = _1698;
        _1783 = _1700;
        _1785 = _1702;
    }
    else
    {
        uint _1792 = _1401 + 11u;
        uint _1798 = _1401 + 3u;
        float _1804 = cbLight._m0[_1798].x + _316;
        float _1805 = cbLight._m0[_1798].y + _317;
        float _1806 = cbLight._m0[_1798].z + _318;
        float _1810 = inversesqrt(dot(vec3(_1804, _1805, _1806), vec3(_1804, _1805, _1806)));
        float _1814 = dot(vec3(_236, _237, _238), vec3(cbLight._m0[_1798].xyz));
        float _3484 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1817 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
        float _1818 = dot(vec3(cbLight._m0[_1798].xyz), vec3(_1804 * _1810, _1805 * _1810, _1806 * _1810));
        float _3495 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1827 = (exp2(log2(1.0 - (isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1831 = (0.5 / ((_1817 + 9.9999999392252902907785028219223e-09) + _1558)) * _1817;
        float _3506 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
        float _1833 = (isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))) * 0.31831014156341552734375;
        float _1834 = isnan(1.0) ? _1418 : (isnan(_1418) ? 1.0 : min(_1418, 1.0));
        _1781 = (((_1827 * cbLight._m0[_1792].x) * _1833) * _1834) + _1698;
        _1783 = (((_1827 * cbLight._m0[_1792].y) * _1833) * _1834) + _1700;
        _1785 = (((_1827 * cbLight._m0[_1792].z) * _1833) * _1834) + _1702;
    }
    float _1969;
    float _1971;
    float _1973;
    float _1975;
    float _1977;
    float _1979;
    if (_1399.y == 0u)
    {
        float _1909 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1910 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1909;
        float _1911 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1909;
        float _1912 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1909;
        uvec4 _1924 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1925 = _1924.x;
        uint _1936 = uint((float(_1924.y) * floor(float(uint(cbSceneParam._m0[85u].y * _325) / _1925))) + floor(float(uint(cbSceneParam._m0[85u].x * _324) / _1925)));
        float _1946 = (log2(_1912 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1947 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
        uint _1950 = uint(isnan(14.0) ? _1947 : (isnan(_1947) ? 14.0 : min(_1947, 14.0)));
        uvec4 _1955 = texelFetch(g_lightClusterGridBuffer, int(((_1950 << 2u) + (_1936 << 6u)) >> 2u));
        uint _1956 = _1955.x;
        uint _1957 = _1924.z;
        float _2086;
        float _2088;
        float _2090;
        float _2092;
        float _2094;
        float _2096;
        if (((((1u << ((_1957 >> 4u) & 15u)) + 4294967295u) & _1956) == 0u) || ((_1957 & 240u) == 0u))
        {
            _2086 = 0.0;
            _2088 = 0.0;
            _2090 = 0.0;
            _2092 = 0.0;
            _2094 = 0.0;
            _2096 = 0.0;
        }
        else
        {
            float _2087;
            float _2089;
            float _2091;
            float _2093;
            float _2095;
            float _2097;
            float _2238 = 0.0;
            float _2239 = 0.0;
            float _2240 = 0.0;
            float _2241 = 0.0;
            float _2242 = 0.0;
            float _2243 = 0.0;
            uint _2244 = 0u;
            uint _2253;
            bool _2254;
            for (;;)
            {
                _2253 = texelFetch(g_lightClassification, int((((_1950 << 5u) + (_1936 << 9u)) + (_2244 << 2u)) >> 2u)).x;
                _2254 = _2253 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2254)
                {
                    frontier_phi_61_pred = _2238;
                    frontier_phi_61_pred_1 = _2243;
                    frontier_phi_61_pred_2 = _2242;
                    frontier_phi_61_pred_3 = _2241;
                    frontier_phi_61_pred_4 = _2240;
                    frontier_phi_61_pred_5 = _2239;
                }
                else
                {
                    float _2362;
                    float _2363;
                    float _2364;
                    float _2365;
                    float _2366;
                    float _2367;
                    uint _2368;
                    _2362 = _2238;
                    _2363 = _2239;
                    _2364 = _2240;
                    _2365 = _2241;
                    _2366 = _2242;
                    _2367 = _2243;
                    _2368 = _2253;
                    float _2294;
                    float _2295;
                    float _2296;
                    float _2297;
                    float _2298;
                    float _2299;
                    for (;;)
                    {
                        uint _2372 = uint(findLSB(_2368)) + (_2244 << 5u);
                        uint _2369 = (_2368 + 4294967295u) & _2368;
                        uint _2374 = _2372 * 48u;
                        vec4 _2388 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2374)).x, texelFetch(g_PointLightRenderingBuffer, int(_2374 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2374 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2374 + 3u)).x));
                        uint _2394 = (_2372 * 48u) + 4u;
                        vec4 _2407 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2394)).x, texelFetch(g_PointLightRenderingBuffer, int(_2394 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2394 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2394 + 3u)).x));
                        uint _2413 = (_2372 * 48u) + 8u;
                        vec3 _2424 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2413)).x, texelFetch(g_PointLightRenderingBuffer, int(_2413 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2413 + 2u)).x));
                        float _2428 = _2388.x - _1910;
                        float _2429 = _2388.y - _1911;
                        float _2430 = _2388.z - _1912;
                        float _2431 = dot(vec3(_2428, _2429, _2430), vec3(_2428, _2429, _2430));
                        float _2434 = inversesqrt(_2431);
                        float _2443 = 1.0 - (_2431 * _2388.w);
                        float _3532 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
                        float _2444 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
                        float _2445 = sqrt(_2431) * _2407.w;
                        float _2448 = 1.39999997615814208984375 / (_2445 + 1.39999997615814208984375);
                        float _2449 = _2448 * _2448;
                        float _2452 = ((1.0 - _2449) * dot(vec3(_346, _349, _352), vec3(_2434 * _2428, _2434 * _2429, _2434 * _2430))) + _2449;
                        float _2455 = _2445 * _2445;
                        float _2459 = ((isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0))) * _2444) / ((_2455 * 0.699999988079071044921875) + 1.0);
                        float _2463 = (-0.0) - _1910;
                        float _2464 = (-0.0) - _1911;
                        float _2465 = (-0.0) - _1912;
                        float _2469 = inversesqrt(dot(vec3(_2463, _2464, _2465), vec3(_2463, _2464, _2465)));
                        float _2473 = dot(vec3(_346, _349, _352), vec3(_2469 * _2463, _2469 * _2464, _2469 * _2465));
                        float _3548 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
                        float _3559 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
                        float _2477 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
                        float _2481 = (0.5 / (((isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) + 9.9999999392252902907785028219223e-09) + _2477)) * _2477;
                        float _3570 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
                        float _2490 = (((isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * 3.1415927410125732421875) / ((_2455 * 2.1991131305694580078125) + 3.141590118408203125)) * _2444;
                        _2297 = (_2459 * _2407.x) + _2365;
                        _2298 = (_2459 * _2407.y) + _2366;
                        _2299 = (_2459 * _2407.z) + _2367;
                        _2294 = (_2490 * _2424.x) + _2362;
                        _2295 = (_2490 * _2424.y) + _2363;
                        _2296 = (_2490 * _2424.z) + _2364;
                        if (_2369 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2362 = _2294;
                            _2363 = _2295;
                            _2364 = _2296;
                            _2365 = _2297;
                            _2366 = _2298;
                            _2367 = _2299;
                            _2368 = _2369;
                        }
                    }
                    frontier_phi_61_pred = _2294;
                    frontier_phi_61_pred_1 = _2299;
                    frontier_phi_61_pred_2 = _2298;
                    frontier_phi_61_pred_3 = _2297;
                    frontier_phi_61_pred_4 = _2296;
                    frontier_phi_61_pred_5 = _2295;
                }
                _2087 = frontier_phi_61_pred;
                _2097 = frontier_phi_61_pred_1;
                _2095 = frontier_phi_61_pred_2;
                _2093 = frontier_phi_61_pred_3;
                _2091 = frontier_phi_61_pred_4;
                _2089 = frontier_phi_61_pred_5;
                uint _2245 = _2244 + 1u;
                if (_2245 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2238 = _2087;
                    _2239 = _2089;
                    _2240 = _2091;
                    _2241 = _2093;
                    _2242 = _2095;
                    _2243 = _2097;
                    _2244 = _2245;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2086 = _2087;
            _2088 = _2089;
            _2090 = _2091;
            _2092 = _2093;
            _2094 = _2095;
            _2096 = _2097;
        }
        uvec4 _2100 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2101 = _2100.z;
        uint _2103 = (_2101 >> 8u) & 15u;
        float _2209;
        float _2211;
        float _2213;
        float _2215;
        float _2217;
        float _2219;
        if (((4294967295u << _2103) & _1956) == 0u)
        {
            _2209 = _2086;
            _2211 = _2088;
            _2213 = _2090;
            _2215 = _2092;
            _2217 = _2094;
            _2219 = _2096;
        }
        else
        {
            float _2234 = inversesqrt(dot(vec3(_1910, _1911, _1912), vec3(_1910, _1911, _1912)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2103 < ((_2101 >> 12u) & 15u))
            {
                float _2210;
                float _2212;
                float _2214;
                float _2216;
                float _2218;
                float _2220;
                float _2345 = _2086;
                float _2346 = _2088;
                float _2347 = _2090;
                float _2348 = _2092;
                float _2349 = _2094;
                float _2350 = _2096;
                uint _2351 = _2103;
                uint _2360;
                bool _2361;
                for (;;)
                {
                    _2360 = texelFetch(g_lightClassification, int((((_1950 << 5u) + (_1936 << 9u)) + (_2351 << 2u)) >> 2u)).x;
                    _2361 = _2360 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2361)
                    {
                        frontier_phi_67_pred = _2348;
                        frontier_phi_67_pred_1 = _2349;
                        frontier_phi_67_pred_2 = _2350;
                        frontier_phi_67_pred_3 = _2347;
                        frontier_phi_67_pred_4 = _2346;
                        frontier_phi_67_pred_5 = _2345;
                    }
                    else
                    {
                        float _2495;
                        float _2496;
                        float _2497;
                        float _2498;
                        float _2499;
                        float _2500;
                        float _2747;
                        float _2748;
                        float _2749;
                        float _2750;
                        float _2751;
                        float _2752;
                        float _2508 = _2345;
                        float _2509 = _2346;
                        float _2510 = _2347;
                        float _2511 = _2348;
                        float _2512 = _2349;
                        float _2513 = _2350;
                        uint _2514 = _2360;
                        uint _2515;
                        vec4 _2540;
                        float _2541;
                        vec4 _2556;
                        vec3 _2568;
                        vec4 _2584;
                        vec4 _2600;
                        float _2647;
                        bool _2648;
                        for (;;)
                        {
                            uint _2525 = ((_2351 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2514));
                            _2515 = (_2514 + 4294967295u) & _2514;
                            uint _2527 = _2525 * 40u;
                            _2540 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2527)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2527 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2527 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2527 + 3u)).x));
                            _2541 = _2540.w;
                            uint _2543 = (_2525 * 40u) + 4u;
                            _2556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2543 + 3u)).x));
                            uint _2558 = (_2525 * 40u) + 8u;
                            _2568 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2558 + 2u)).x));
                            uint _2571 = (_2525 * 40u) + 16u;
                            _2584 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2571 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2571 + 3u)).x));
                            uint _2587 = (_2525 * 40u) + 20u;
                            _2600 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2587)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2587 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2587 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2587 + 3u)).x));
                            uint _2603 = (_2525 * 40u) + 24u;
                            vec4 _2616 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2603 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2603 + 3u)).x));
                            uint _2622 = (_2525 * 40u) + 28u;
                            vec4 _2635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2622 + 3u)).x));
                            _2647 = fma(_1912, _2635.z, fma(_1911, _2635.y, _2635.x * _1910)) + _2635.w;
                            _2648 = !((fma(_1912, _2616.z, fma(_1911, _2616.y, _2616.x * _1910)) + _2616.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2648)
                            {
                                float _2675 = _2540.x - _1910;
                                float _2676 = _2540.y - _1911;
                                float _2677 = _2540.z - _1912;
                                float _2678 = dot(vec3(_2675, _2676, _2677), vec3(_2675, _2676, _2677));
                                float _2681 = inversesqrt(_2678);
                                float _2682 = _2681 * _2675;
                                float _2683 = _2681 * _2676;
                                float _2684 = _2681 * _2677;
                                float _2688 = 1.0 - (_2678 / (_2541 * _2541));
                                float _3581 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
                                float _2689 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
                                float _2693 = sqrt(_2678) * _2556.w;
                                float _2695 = 1.39999997615814208984375 / (_2693 + 1.39999997615814208984375);
                                float _2696 = _2695 * _2695;
                                float _2697 = 1.0 - _2696;
                                float _2699 = (_2697 * dot(vec3(_2682, _2683, _2684), vec3(_346, _349, _352))) + _2696;
                                float _2702 = _2693 * _2693;
                                float _2706 = (fma(_1912, _2584.z, fma(_1911, _2584.y, _2584.x * _1910)) + _2584.w) / _2647;
                                float _2707 = (fma(_1912, _2600.z, fma(_1911, _2600.y, _2600.x * _1910)) + _2600.w) / _2647;
                                float _2711 = 1.0 - dot(vec2(_2706, _2707), vec2(_2706, _2707));
                                float _3597 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
                                float _2712 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
                                float _2713 = _2712 * (((isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0))) * _2689) / ((_2702 * 0.699999988079071044921875) + 1.0));
                                float _2723 = dot(vec3(_346, _349, _352), vec3((-0.0) - (_1910 * _2234), (-0.0) - (_1911 * _2234), (-0.0) - (_1912 * _2234)));
                                float _3608 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
                                float _2731 = (_2697 * dot(vec3(_346, _349, _352), vec3(_2682, _2683, _2684))) + _2696;
                                float _3619 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
                                float _2732 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
                                float _2736 = (0.5 / (((isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) + 9.9999999392252902907785028219223e-09) + _2732)) * _2732;
                                float _3630 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
                                float _2743 = (_2712 * _2689) * (((isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) * 3.1415927410125732421875) / ((_2702 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2743 * _2568.x;
                                frontier_phi_73_pred_1 = _2743 * _2568.y;
                                frontier_phi_73_pred_2 = _2713 * _2556.z;
                                frontier_phi_73_pred_3 = _2713 * _2556.y;
                                frontier_phi_73_pred_4 = _2713 * _2556.x;
                                frontier_phi_73_pred_5 = _2743 * _2568.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2747 = frontier_phi_73_pred;
                            _2748 = frontier_phi_73_pred_1;
                            _2752 = frontier_phi_73_pred_2;
                            _2751 = frontier_phi_73_pred_3;
                            _2750 = frontier_phi_73_pred_4;
                            _2749 = frontier_phi_73_pred_5;
                            _2498 = _2750 + _2511;
                            _2499 = _2751 + _2512;
                            _2500 = _2752 + _2513;
                            _2495 = _2747 + _2508;
                            _2496 = _2748 + _2509;
                            _2497 = _2749 + _2510;
                            if (_2515 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2508 = _2495;
                                _2509 = _2496;
                                _2510 = _2497;
                                _2511 = _2498;
                                _2512 = _2499;
                                _2513 = _2500;
                                _2514 = _2515;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2498;
                        frontier_phi_67_pred_1 = _2499;
                        frontier_phi_67_pred_2 = _2500;
                        frontier_phi_67_pred_3 = _2497;
                        frontier_phi_67_pred_4 = _2496;
                        frontier_phi_67_pred_5 = _2495;
                    }
                    _2216 = frontier_phi_67_pred;
                    _2218 = frontier_phi_67_pred_1;
                    _2220 = frontier_phi_67_pred_2;
                    _2214 = frontier_phi_67_pred_3;
                    _2212 = frontier_phi_67_pred_4;
                    _2210 = frontier_phi_67_pred_5;
                    uint _2352 = _2351 + 1u;
                    if (_2352 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2345 = _2210;
                        _2346 = _2212;
                        _2347 = _2214;
                        _2348 = _2216;
                        _2349 = _2218;
                        _2350 = _2220;
                        _2351 = _2352;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2218;
                frontier_phi_55_56_ladder_1 = _2220;
                frontier_phi_55_56_ladder_2 = _2216;
                frontier_phi_55_56_ladder_3 = _2214;
                frontier_phi_55_56_ladder_4 = _2212;
                frontier_phi_55_56_ladder_5 = _2210;
            }
            else
            {
                frontier_phi_55_56_ladder = _2094;
                frontier_phi_55_56_ladder_1 = _2096;
                frontier_phi_55_56_ladder_2 = _2092;
                frontier_phi_55_56_ladder_3 = _2090;
                frontier_phi_55_56_ladder_4 = _2088;
                frontier_phi_55_56_ladder_5 = _2086;
            }
            _2209 = frontier_phi_55_56_ladder_5;
            _2211 = frontier_phi_55_56_ladder_4;
            _2213 = frontier_phi_55_56_ladder_3;
            _2215 = frontier_phi_55_56_ladder_2;
            _2217 = frontier_phi_55_56_ladder;
            _2219 = frontier_phi_55_56_ladder_1;
        }
        float _2224 = isnan(1.0) ? _390 : (isnan(_390) ? 1.0 : min(_390, 1.0));
        _1969 = (_2224 * _2215) + _1532;
        _1971 = (_2224 * _2217) + _1534;
        _1973 = (_2224 * _2219) + _1536;
        _1975 = ((_2209 * 0.039999999105930328369140625) * _2224) + _1781;
        _1977 = ((_2211 * 0.039999999105930328369140625) * _2224) + _1783;
        _1979 = ((_2213 * 0.039999999105930328369140625) * _2224) + _1785;
    }
    else
    {
        _1969 = _1532;
        _1971 = _1534;
        _1973 = _1536;
        _1975 = _1781;
        _1977 = _1783;
        _1979 = _1785;
    }
    uint _1985 = _366 + uint(cbMatDynParam._m0[0u].w);
    float _1991 = cbInstanceData._m0[_1985].x * (((cbMtdParam._m0[12u].x * cbMtdParam._m0[9u].x) * _212.x) + cbMtdParam._m0[11u].x);
    float _1992 = cbInstanceData._m0[_1985].y * (((cbMtdParam._m0[12u].x * cbMtdParam._m0[9u].y) * _212.y) + cbMtdParam._m0[11u].y);
    float _1993 = cbInstanceData._m0[_1985].z * (cbMtdParam._m0[11u].z + ((cbMtdParam._m0[12u].x * cbMtdParam._m0[9u].z) * _212.z));
    float _3646 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _3657 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _3668 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _2010 = (((isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * (_1969 + ((isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0))) * _390))) + ((_1975 + ((isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))) * _1169)) * cbPerFrame._m0[3u].x)) + _1991;
    float _2012 = (_1992 + ((_1977 + ((isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0))) * _1169)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))) * (_1971 + ((isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0))) * _390)));
    float _2014 = (_1993 + ((_1979 + ((isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0))) * _1169)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * (_1973 + ((isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0))) * _390)));
    float _3694 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2027 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
    uint _2028 = _365 + 6u;
    float _2036 = _324 / cbSceneParam._m0[86u].x;
    float _2037 = _325 / cbSceneParam._m0[86u].y;
    vec4 _2051 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2036, _2037, (log2((isnan(cbSceneParam._m0[77u].w) ? _258 : (isnan(_258) ? cbSceneParam._m0[77u].w : min(_258, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2053 = _2051.x;
    float _2054 = _2051.y;
    float _2055 = _2051.z;
    float _2056 = _2051.w;
    float _2149;
    float _2151;
    float _2153;
    float _2155;
    if (_258 > cbSceneParam._m0[78u].w)
    {
        float _2111 = isnan(_258) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _258 : min(cbSceneParam._m0[80u].w, _258));
        float _2112 = _2111 / _258;
        float _2123 = _2112 * _309;
        float _2124 = _310 * _2112;
        float _2125 = (-0.0) - _2124;
        float _2127 = _2112 * _311;
        float _2129 = (cbSceneParam._m0[77u].w * _2125) / _2111;
        float _2130 = _2129 + cbSceneParam._m0[79u].w;
        float _2131 = cbSceneParam._m0[79u].w - _2124;
        float _2137 = sqrt(((_2123 * _2123) + (_2124 * _2124)) + (_2127 * _2127));
        float _2140 = (1.0 - (cbSceneParam._m0[77u].w / _2111)) * _2137;
        float _2145 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2147 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2307;
        if (abs((_2125 - _2129) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2307 = ((((_2130 > 0.0) ? exp2(_2145 * _2130) : (2.0 - exp2(_2147 * _2130))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2140;
        }
        else
        {
            float _2267 = 1.0 / cbSceneParam._m0[80u].x;
            float _2268 = isnan(_2131) ? _2130 : (isnan(_2130) ? _2131 : max(_2130, _2131));
            float _2269 = isnan(_2131) ? _2130 : (isnan(_2130) ? _2131 : min(_2130, _2131));
            float _2278 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : min(_2268, 0.0));
            float _2279 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : min(_2269, 0.0));
            _2307 = ((abs(_2137 / _2125) * cbSceneParam._m0[80u].y) * ((((_2278 - _2279) * 2.0) - ((exp2(_2145 * (isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0)))) - exp2(_2145 * (isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0))))) * _2267)) - ((exp2(_2147 * _2278) - exp2(_2147 * _2279)) * _2267))) + (_2140 * cbSceneParam._m0[80u].z);
        }
        vec4 _2309 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2036, _2037, 1.0), 0.0);
        float _2318 = exp2((_2307 * (-1.44269502162933349609375)) * (1.0 - _2309.w));
        float _2319 = log2(_2318);
        float _2335 = log2(_2056);
        _2149 = (exp2(_2335 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2319 * cbSceneParam._m0[78u].x)) * _2309.x) / cbSceneParam._m0[78u].x)) + _2053;
        _2151 = (exp2(_2335 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2319 * cbSceneParam._m0[78u].y)) * _2309.y) / cbSceneParam._m0[78u].y)) + _2054;
        _2153 = (exp2(_2335 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2319 * cbSceneParam._m0[78u].z)) * _2309.z) / cbSceneParam._m0[78u].z)) + _2055;
        _2155 = _2318 * _2056;
    }
    else
    {
        _2149 = _2053;
        _2151 = _2054;
        _2153 = _2055;
        _2155 = _2056;
    }
    float _2167 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2168 = _2167 == 3.0;
    float _2170 = log2(_2155);
    float _2174 = exp2(_2170 * cbSceneParam._m0[78u].x);
    float _2175 = exp2(_2170 * cbSceneParam._m0[78u].y);
    float _2176 = exp2(_2170 * cbSceneParam._m0[78u].z);
    float _2177 = _2174 * (isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0)));
    float _2178 = _2175 * (isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0)));
    float _2179 = _2176 * (isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0)));
    float _2188 = (_2167 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2188 * (_2168 ? _2177 : (_2177 + (cbSceneParam._m0[72u].w * _2149)));
    SV_Target.y = _2188 * (_2168 ? _2178 : (_2178 + (cbSceneParam._m0[72u].w * _2151)));
    SV_Target.z = _2188 * (_2168 ? _2179 : (_2179 + (cbSceneParam._m0[72u].w * _2153)));
    SV_Target.w = cbInstanceData._m0[_2028].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _1991) * _2027) * _2174) * _2188;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _1992) * _2027) * _2175) * _2188;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _1993) * _2027) * _2176) * _2188;
    SV_Target_1.w = cbInstanceData._m0[_2028].w;
}


