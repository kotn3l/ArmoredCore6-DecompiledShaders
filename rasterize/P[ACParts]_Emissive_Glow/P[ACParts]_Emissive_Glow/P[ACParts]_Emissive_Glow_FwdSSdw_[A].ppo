#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _781;
float _3007;
float _3008;
float _3009;
float _3010;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _165 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _166 = _165 * NORMAL.x;
    float _167 = _165 * NORMAL.y;
    float _168 = _165 * NORMAL.z;
    vec4 _188 = texture(sampler2D(P_ACParts_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _194 = _188.x * cbMtdParam._m0[10u].x;
    float _195 = _188.y * cbMtdParam._m0[10u].y;
    float _196 = _188.z * cbMtdParam._m0[10u].z;
    vec4 _218 = texture(sampler2D(P_ACParts_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _241 = inversesqrt(dot(vec3(_166, _167, _168), vec3(_166, _167, _168)));
    float _242 = _241 * _166;
    float _243 = _241 * _167;
    float _244 = _241 * _168;
    float _3019 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _3030 = isnan(0.0) ? _195 : (isnan(_195) ? 0.0 : max(_195, 0.0));
    float _3041 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _264 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _305 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _315 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _305);
    float _316 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _305);
    float _317 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _305);
    float _321 = inversesqrt(dot(vec3(_315, _316, _317), vec3(_315, _316, _317)));
    float _322 = _315 * _321;
    float _323 = _316 * _321;
    float _324 = _317 * _321;
    vec4 _329 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _331 = _329.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _460 = sqrt(((_315 * _315) + (_316 * _316)) + (_317 * _317));
        float _466 = (cbMatDynParam._m0[5u].x * _460) + cbMatDynParam._m0[5u].y;
        float _3052 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
        float _467 = isnan(1.0) ? _3052 : (isnan(_3052) ? 1.0 : min(_3052, 1.0));
        float _471 = (cbMatDynParam._m0[5u].z * _460) + cbMatDynParam._m0[5u].w;
        float _3063 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3063 : (isnan(_3063) ? 1.0 : min(_3063, 1.0))) - _467)) + _467) < ((_331 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _343 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _344 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _364 = fma(_244, cbSceneParam._m0[5u].z, fma(_243, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _242));
    float _367 = fma(_244, cbSceneParam._m0[6u].z, fma(_243, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _242));
    float _370 = fma(_244, cbSceneParam._m0[7u].z, fma(_243, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _242));
    uint _383 = uint(roundEven(NORMAL.w)) * 13u;
    uint _384 = _383 + 9u;
    uint _385 = _384 + uint(cbMatDynParam._m0[0u].w);
    float _391 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3019 : (isnan(_3019) ? 1.0 : min(_3019, 1.0)))) * cbInstanceData._m0[_385].x;
    float _392 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3030 : (isnan(_3030) ? 1.0 : min(_3030, 1.0)))) * cbInstanceData._m0[_385].y;
    float _393 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3041 : (isnan(_3041) ? 1.0 : min(_3041, 1.0)))) * cbInstanceData._m0[_385].z;
    float _3074 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _394 = isnan(1.0) ? _3074 : (isnan(_3074) ? 1.0 : min(_3074, 1.0));
    float _3085 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _395 = isnan(1.0) ? _3085 : (isnan(_3085) ? 1.0 : min(_3085, 1.0));
    float _3096 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _396 = isnan(1.0) ? _3096 : (isnan(_3096) ? 1.0 : min(_3096, 1.0));
    vec4 _405 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _343, cbSceneParam._m0[86u].y * _344));
    float _408 = _405.x * TEXCOORD.z;
    float _409 = dot(vec3(_242, _243, _244), vec3(_322, _323, _324));
    float _412 = _409 * 2.0;
    float _417 = (_412 * _242) - _322;
    float _418 = (_412 * _243) - _323;
    float _419 = (_412 * _244) - _324;
    float _441 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _445 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _449 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _780;
    float _782;
    float _783;
    float _784;
    float _785;
    float _786;
    float _787;
    float _788;
    float _789;
    float _790;
    float _791;
    float _792;
    float _793;
    float _794;
    float _795;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _505 = fma(_449, cbModelParam._m0[26u].z, fma(_445, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _441));
        float _509 = fma(_449, cbModelParam._m0[27u].z, fma(_445, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _441));
        float _513 = fma(_449, cbModelParam._m0[28u].z, fma(_445, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _441));
        float _538 = _441 + _242;
        float _539 = _445 + _243;
        float _540 = _449 + _244;
        float _550 = fma(_540, cbModelParam._m0[26u].z, fma(_539, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _538)) - _505;
        float _551 = fma(_540, cbModelParam._m0[27u].z, fma(_539, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _538)) - _509;
        float _552 = fma(_540, cbModelParam._m0[28u].z, fma(_539, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _538)) - _513;
        float _556 = inversesqrt(dot(vec3(_550, _551, _552), vec3(_550, _551, _552)));
        float _569 = ((_556 * _550) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_505 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _570 = ((_556 * _551) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_509 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _571 = ((_556 * _552) / cbModelParam._m0[34u].z) + ((((((_513 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _574 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_569, _570, _571), 0.0);
        vec4 _581 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_569, _570, _571), 0.0);
        vec4 _588 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_569, _570, _571), 0.0);
        vec4 _595 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_569, _570, _571), 0.0);
        float _608 = exp2((_574.w + (-0.5)) * 20.0) * 2.0;
        float _609 = _608 * (_574.x + (-0.5));
        float _610 = _608 * (_574.y + (-0.5));
        float _611 = _608 * (_574.z + (-0.5));
        float _618 = exp2((_581.w + (-0.5)) * 20.0) * 2.0;
        float _619 = _618 * (_581.x + (-0.5));
        float _620 = _618 * (_581.y + (-0.5));
        float _621 = _618 * (_581.z + (-0.5));
        float _628 = exp2((_588.w + (-0.5)) * 20.0) * 2.0;
        float _629 = _628 * (_588.x + (-0.5));
        float _630 = _628 * (_588.y + (-0.5));
        float _631 = _628 * (_588.z + (-0.5));
        float _638 = exp2((_595.w + (-0.5)) * 20.0) * 2.0;
        float _639 = _638 * (_595.x + (-0.5));
        float _640 = _638 * (_595.y + (-0.5));
        float _641 = _638 * (_595.z + (-0.5));
        float _642 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
        float _643 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
        float _644 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
        float _645 = _609 * 0.5;
        float _646 = _619 * 0.5;
        float _647 = _629 * 0.5;
        float _648 = dot(vec3(_645, _646, _647), vec3(_645, _646, _647));
        float _653 = (_648 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_648);
        float _662 = (dot(vec3(_242, _243, _244), vec3(_653 * _645, _653 * _646, _653 * _647)) + 1.0) * 0.5;
        float _3122 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        float _672 = sqrt(((_646 * _646) + (_645 * _645)) + (_647 * _647)) / (_642 + 9.9999997473787516355514526367188e-06);
        float _3133 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
        float _673 = isnan(1.0) ? _3133 : (isnan(_3133) ? 1.0 : min(_3133, 1.0));
        float _674 = _673 * 2.0;
        float _678 = (1.0 - _673) / (_673 + 1.0);
        float _3144 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
        float _679 = isnan(1.0) ? _3144 : (isnan(_3144) ? 1.0 : min(_3144, 1.0));
        float _688 = ((((1.0 - _679) * (_674 + 2.0)) * exp2(log2(isnan(1.0) ? _3122 : (isnan(_3122) ? 1.0 : min(_3122, 1.0))) * (_674 + 1.0))) + _679) * _642;
        float _689 = _610 * 0.5;
        float _690 = _620 * 0.5;
        float _691 = _630 * 0.5;
        float _692 = dot(vec3(_689, _690, _691), vec3(_689, _690, _691));
        float _697 = (_692 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_692);
        float _705 = (dot(vec3(_242, _243, _244), vec3(_697 * _689, _697 * _690, _697 * _691)) + 1.0) * 0.5;
        float _3155 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _714 = sqrt(((_690 * _690) + (_689 * _689)) + (_691 * _691)) / (_643 + 9.9999997473787516355514526367188e-06);
        float _3166 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _715 = isnan(1.0) ? _3166 : (isnan(_3166) ? 1.0 : min(_3166, 1.0));
        float _716 = _715 * 2.0;
        float _720 = (1.0 - _715) / (_715 + 1.0);
        float _3177 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _721 = isnan(1.0) ? _3177 : (isnan(_3177) ? 1.0 : min(_3177, 1.0));
        float _730 = ((((1.0 - _721) * (_716 + 2.0)) * exp2(log2(isnan(1.0) ? _3155 : (isnan(_3155) ? 1.0 : min(_3155, 1.0))) * (_716 + 1.0))) + _721) * _643;
        float _731 = _611 * 0.5;
        float _732 = _621 * 0.5;
        float _733 = _631 * 0.5;
        float _734 = dot(vec3(_731, _732, _733), vec3(_731, _732, _733));
        float _739 = (_734 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_734);
        float _747 = (dot(vec3(_242, _243, _244), vec3(_739 * _731, _739 * _732, _739 * _733)) + 1.0) * 0.5;
        float _3188 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _756 = sqrt(((_732 * _732) + (_731 * _731)) + (_733 * _733)) / (_644 + 9.9999997473787516355514526367188e-06);
        float _3199 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _757 = isnan(1.0) ? _3199 : (isnan(_3199) ? 1.0 : min(_3199, 1.0));
        float _758 = _757 * 2.0;
        float _762 = (1.0 - _757) / (_757 + 1.0);
        float _3210 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _763 = isnan(1.0) ? _3210 : (isnan(_3210) ? 1.0 : min(_3210, 1.0));
        float _772 = ((((1.0 - _763) * (_758 + 2.0)) * exp2(log2(isnan(1.0) ? _3188 : (isnan(_3188) ? 1.0 : min(_3188, 1.0))) * (_758 + 1.0))) + _763) * _644;
        _780 = _611;
        _782 = _610;
        _783 = _609;
        _784 = _621;
        _785 = _620;
        _786 = _619;
        _787 = _631;
        _788 = _630;
        _789 = _629;
        _790 = _644;
        _791 = _643;
        _792 = _642;
        _793 = cbModelParam._m0[36u].z * (isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0)));
        _794 = cbModelParam._m0[36u].z * (isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0)));
        _795 = cbModelParam._m0[36u].z * (isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0)));
    }
    else
    {
        _780 = _781;
        _782 = _781;
        _783 = _781;
        _784 = _781;
        _785 = _781;
        _786 = _781;
        _787 = _781;
        _788 = _781;
        _789 = _781;
        _790 = _781;
        _791 = _781;
        _792 = _781;
        _793 = 0.0;
        _794 = 0.0;
        _795 = 0.0;
    }
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _824 = fma(_449, cbModelParam._m0[30u].z, fma(_445, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _441));
        float _828 = fma(_449, cbModelParam._m0[31u].z, fma(_445, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _441));
        float _832 = fma(_449, cbModelParam._m0[32u].z, fma(_445, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _441));
        float _855 = _441 + _242;
        float _856 = _445 + _243;
        float _857 = _449 + _244;
        float _867 = fma(_857, cbModelParam._m0[30u].z, fma(_856, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _855)) - _824;
        float _868 = fma(_857, cbModelParam._m0[31u].z, fma(_856, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _855)) - _828;
        float _869 = fma(_857, cbModelParam._m0[32u].z, fma(_856, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _855)) - _832;
        float _873 = inversesqrt(dot(vec3(_867, _868, _869), vec3(_867, _868, _869)));
        float _886 = ((_873 * _867) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_824 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _887 = ((_873 * _868) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_828 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _888 = ((_873 * _869) / cbModelParam._m0[35u].z) + ((((((_832 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _890 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _897 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _904 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _911 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        float _923 = exp2((_890.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_890.x + (-0.5));
        float _925 = _923 * (_890.y + (-0.5));
        float _926 = _923 * (_890.z + (-0.5));
        float _933 = exp2((_897.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_897.x + (-0.5));
        float _935 = _933 * (_897.y + (-0.5));
        float _936 = _933 * (_897.z + (-0.5));
        float _943 = exp2((_904.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_904.x + (-0.5));
        float _945 = _943 * (_904.y + (-0.5));
        float _946 = _943 * (_904.z + (-0.5));
        float _953 = exp2((_911.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_911.x + (-0.5));
        float _955 = _953 * (_911.y + (-0.5));
        float _956 = _953 * (_911.z + (-0.5));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _959 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _960 = _924 * 0.5;
        float _961 = _934 * 0.5;
        float _962 = _944 * 0.5;
        float _963 = dot(vec3(_960, _961, _962), vec3(_960, _961, _962));
        float _968 = (_963 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_963);
        float _976 = (dot(vec3(_242, _243, _244), vec3(_968 * _960, _968 * _961, _968 * _962)) + 1.0) * 0.5;
        float _3251 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _985 = sqrt(((_961 * _961) + (_960 * _960)) + (_962 * _962)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _3262 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0));
        float _987 = _986 * 2.0;
        float _991 = (1.0 - _986) / (_986 + 1.0);
        float _3273 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0));
        float _1001 = ((((1.0 - _992) * (_987 + 2.0)) * exp2(log2(isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0))) * (_987 + 1.0))) + _992) * _957;
        float _1002 = _925 * 0.5;
        float _1003 = _935 * 0.5;
        float _1004 = _945 * 0.5;
        float _1005 = dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004));
        float _1010 = (_1005 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1005);
        float _1018 = (dot(vec3(_242, _243, _244), vec3(_1010 * _1002, _1010 * _1003, _1010 * _1004)) + 1.0) * 0.5;
        float _3284 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1027 = sqrt(((_1003 * _1003) + (_1002 * _1002)) + (_1004 * _1004)) / (_958 + 9.9999997473787516355514526367188e-06);
        float _3295 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _3306 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0))) * (_1029 + 1.0))) + _1034) * _958;
        float _1044 = _926 * 0.5;
        float _1045 = _936 * 0.5;
        float _1046 = _946 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1060 = (dot(vec3(_242, _243, _244), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _3317 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1069 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_959 + 9.9999997473787516355514526367188e-06);
        float _3328 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
        float _1071 = _1070 * 2.0;
        float _1075 = (1.0 - _1070) / (_1070 + 1.0);
        float _3339 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
        float _1085 = ((((1.0 - _1076) * (_1071 + 2.0)) * exp2(log2(isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0))) * (_1071 + 1.0))) + _1076) * _959;
        _1093 = _926;
        _1094 = _925;
        _1095 = _924;
        _1096 = _936;
        _1097 = _935;
        _1098 = _934;
        _1099 = _946;
        _1100 = _945;
        _1101 = _944;
        _1102 = _959;
        _1103 = _958;
        _1104 = _957;
        _1105 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0)));
        _1106 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
        _1107 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)));
    }
    else
    {
        _1093 = _781;
        _1094 = _781;
        _1095 = _781;
        _1096 = _781;
        _1097 = _781;
        _1098 = _781;
        _1099 = _781;
        _1100 = _781;
        _1101 = _781;
        _1102 = _781;
        _1103 = _781;
        _1104 = _781;
        _1105 = 0.0;
        _1106 = 0.0;
        _1107 = 0.0;
    }
    float _1117 = (cbModelParam._m0[1u].x * (_1105 - _793)) + _793;
    float _1118 = (cbModelParam._m0[1u].x * (_1106 - _794)) + _794;
    float _1119 = (cbModelParam._m0[1u].x * (_1107 - _795)) + _795;
    float _1140 = fma(_1119, cbSceneParam._m0[89u].z, fma(_1118, cbSceneParam._m0[89u].y, _1117 * cbSceneParam._m0[89u].x));
    float _1143 = fma(_1119, cbSceneParam._m0[90u].z, fma(_1118, cbSceneParam._m0[90u].y, _1117 * cbSceneParam._m0[90u].x));
    float _1146 = fma(_1119, cbSceneParam._m0[91u].z, fma(_1118, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1117));
    float _1161 = _417 * 0.5;
    float _1162 = _418 * 0.5;
    float _1163 = _419 * 0.5;
    float _1164 = dot(vec4(_1161, _1162, _1163, 1.0), vec4(_1095, _1098, _1101, _1104));
    float _1167 = dot(vec4(_1161, _1162, _1163, 1.0), vec4(_1094, _1097, _1100, _1103));
    float _1170 = dot(vec4(_1161, _1162, _1163, 1.0), vec4(_1093, _1096, _1099, _1102));
    float _1204;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1177 = dot(vec4(_1161, _1162, _1163, 1.0), vec4(_780, _784, _787, _790));
        float _1181 = dot(vec4(_1161, _1162, _1163, 1.0), vec4(_782, _785, _788, _791));
        float _1185 = dot(vec4(_1161, _1162, _1163, 1.0), vec4(_783, _786, _789, _792));
        float _1192 = dot(vec4(cbModelParam._m0[39u]), vec4(_1161, _1162, _1163, 1.0));
        _1204 = dot(vec3(isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)), isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)), isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1192) ? 0.0 : (isnan(0.0) ? _1192 : max(0.0, _1192))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1204 = 1.0;
    }
    float _1215;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1206 = dot(vec4(cbModelParam._m0[40u]), vec4(_1161, _1162, _1163, 1.0));
        _1215 = dot(vec3(isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)), isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)), isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1206) ? 0.0 : (isnan(0.0) ? _1206 : max(0.0, _1206))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1215 = 1.0;
    }
    float _1219 = (_1215 * cbModelParam._m0[1u].x) + (_1204 * (1.0 - cbModelParam._m0[1u].x));
    float _1228 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1310;
    float _1312;
    float _1314;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1277 = fma(_449, cbModelParam._m0[13u].z, fma(_445, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _441)) + cbModelParam._m0[13u].w;
        float _1281 = fma(_449, cbModelParam._m0[14u].z, fma(_445, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _441)) + cbModelParam._m0[14u].w;
        float _1285 = fma(_449, cbModelParam._m0[15u].z, fma(_445, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _441)) + cbModelParam._m0[15u].w;
        float _1288 = fma(_419, cbModelParam._m0[13u].z, fma(_418, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _417));
        float _1291 = fma(_419, cbModelParam._m0[14u].z, fma(_418, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _417));
        float _1294 = fma(_419, cbModelParam._m0[15u].z, fma(_418, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _417));
        float _1320;
        if (_1288 > 0.0)
        {
            _1320 = abs((1.0 - _1277) / _1288);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1288 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1277 + 1.0) / _1288);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1320 = frontier_phi_17_15_ladder;
        }
        float _1548;
        if (_1291 > 0.0)
        {
            _1548 = abs((1.0 - _1281) / _1291);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1291 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1281 + 1.0) / _1291);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1548 = frontier_phi_26_22_ladder;
        }
        float _1740;
        if (_1294 > 0.0)
        {
            _1740 = abs((1.0 - _1285) / _1294);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1294 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1285 + 1.0) / _1294);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1740 = frontier_phi_38_33_ladder;
        }
        float _1742 = isnan(_1548) ? _1320 : (isnan(_1320) ? _1548 : min(_1320, _1548));
        float _1743 = isnan(_1740) ? _1742 : (isnan(_1742) ? _1740 : min(_1742, _1740));
        float _1747 = (_1743 * _1288) + _1277;
        float _1748 = (_1743 * _1291) + _1281;
        float _1749 = (_1743 * _1294) + _1285;
        float _1750 = _1743 * 9.9999997473787516355514526367188e-05;
        float _1752 = (-1.0) - _1750;
        float _1754 = _1750 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1749 > _1754) || ((_1749 < _1752) || ((_1748 > _1754) || ((_1748 < _1752) || ((_1747 < _1752) || (_1747 > _1754))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1846 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1749, cbModelParam._m0[9u].z, fma(_1748, cbModelParam._m0[9u].y, _1747 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1749, cbModelParam._m0[10u].z, fma(_1748, cbModelParam._m0[10u].y, _1747 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1749, cbModelParam._m0[11u].z, fma(_1748, cbModelParam._m0[11u].y, _1747 * cbModelParam._m0[11u].x))), _1228);
            frontier_phi_16_38_ladder = _1846.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1846.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1846.x * cbModelParam._m0[1u].y;
        }
        _1310 = frontier_phi_16_38_ladder_2;
        _1312 = frontier_phi_16_38_ladder_1;
        _1314 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1298 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_417, _418, _419), _1228);
        _1310 = _1298.x * cbModelParam._m0[1u].y;
        _1312 = _1298.y * cbModelParam._m0[1u].y;
        _1314 = _1298.z * cbModelParam._m0[1u].y;
    }
    float _1317 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1410;
    float _1412;
    float _1414;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1374 = fma(_449, cbModelParam._m0[21u].z, fma(_445, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _441)) + cbModelParam._m0[21u].w;
        float _1378 = fma(_449, cbModelParam._m0[22u].z, fma(_445, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _441)) + cbModelParam._m0[22u].w;
        float _1382 = fma(_449, cbModelParam._m0[23u].z, fma(_445, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _441)) + cbModelParam._m0[23u].w;
        float _1385 = fma(_419, cbModelParam._m0[21u].z, fma(_418, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _417));
        float _1388 = fma(_419, cbModelParam._m0[22u].z, fma(_418, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _417));
        float _1391 = fma(_419, cbModelParam._m0[23u].z, fma(_418, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _417));
        float _1553;
        if (_1385 > 0.0)
        {
            _1553 = abs((1.0 - _1374) / _1385);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1385 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1374 + 1.0) / _1385);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1553 = frontier_phi_28_24_ladder;
        }
        float _1767;
        if (_1388 > 0.0)
        {
            _1767 = abs((1.0 - _1378) / _1388);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1388 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1378 + 1.0) / _1388);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1767 = frontier_phi_40_35_ladder;
        }
        float _1918;
        if (_1391 > 0.0)
        {
            _1918 = abs((1.0 - _1382) / _1391);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1391 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1382 + 1.0) / _1391);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _1918 = frontier_phi_49_46_ladder;
        }
        float _1920 = isnan(_1767) ? _1553 : (isnan(_1553) ? _1767 : min(_1553, _1767));
        float _1921 = isnan(_1918) ? _1920 : (isnan(_1920) ? _1918 : min(_1920, _1918));
        float _1925 = (_1921 * _1385) + _1374;
        float _1926 = (_1921 * _1388) + _1378;
        float _1927 = (_1921 * _1391) + _1382;
        float _1928 = _1921 * 9.9999997473787516355514526367188e-05;
        float _1929 = (-1.0) - _1928;
        float _1931 = _1928 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1927 > _1931) || ((_1927 < _1929) || ((_1926 > _1931) || ((_1926 < _1929) || ((_1925 < _1929) || (_1925 > _1931))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2155 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1927, cbModelParam._m0[17u].z, fma(_1926, cbModelParam._m0[17u].y, _1925 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1927, cbModelParam._m0[18u].z, fma(_1926, cbModelParam._m0[18u].y, _1925 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1927, cbModelParam._m0[19u].z, fma(_1926, cbModelParam._m0[19u].y, _1925 * cbModelParam._m0[19u].x))), _1317);
            frontier_phi_25_49_ladder = _2155.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2155.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2155.x * cbModelParam._m0[1u].z;
        }
        _1410 = frontier_phi_25_49_ladder_2;
        _1412 = frontier_phi_25_49_ladder_1;
        _1414 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1394 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_417, _418, _419), _1317);
        _1410 = _1394.x * cbModelParam._m0[1u].z;
        _1412 = _1394.y * cbModelParam._m0[1u].z;
        _1414 = _1394.z * cbModelParam._m0[1u].z;
    }
    float _1426 = _408 * 0.01200000010430812835693359375;
    float _1428 = _1426 * ((cbModelParam._m0[1u].w * (_1410 - _1310)) + _1310);
    float _1429 = _1426 * ((cbModelParam._m0[1u].w * (_1412 - _1312)) + _1312);
    float _1430 = _1426 * ((cbModelParam._m0[1u].w * (_1414 - _1314)) + _1314);
    float _1433 = fma(_1430, cbSceneParam._m0[89u].z, fma(_1429, cbSceneParam._m0[89u].y, _1428 * cbSceneParam._m0[89u].x));
    float _1436 = fma(_1430, cbSceneParam._m0[90u].z, fma(_1429, cbSceneParam._m0[90u].y, _1428 * cbSceneParam._m0[90u].x));
    float _1439 = fma(_1430, cbSceneParam._m0[91u].z, fma(_1429, cbSceneParam._m0[91u].y, _1428 * cbSceneParam._m0[91u].x));
    vec4 _1447 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_343, _344));
    float _1449 = _1447.w;
    float _1461 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1449);
    float _1462 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1449);
    float _1463 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1449);
    uvec4 _1467 = floatBitsToUint(cbInstanceData._m0[_383 + 5u]);
    uint _1469 = _1467.x * 14u;
    uint _1470 = _1469 + 13u;
    float _1477 = _408 + (-1.0);
    float _1483 = (cbLight._m0[_1470].x * _1477) + 1.0;
    float _1484 = (cbLight._m0[_1470].y * _1477) + 1.0;
    float _1485 = (cbLight._m0[_1470].z * _1477) + 1.0;
    float _1486 = (cbLight._m0[_1470].w * _1477) + 1.0;
    uint _1487 = _1469 + 5u;
    float _1493 = isnan(1.0) ? _1484 : (isnan(_1484) ? 1.0 : min(_1484, 1.0));
    uint _1497 = _1469 + 4u;
    float _1507 = isnan(1.0) ? _1483 : (isnan(_1483) ? 1.0 : min(_1483, 1.0));
    uint _1511 = _1469 | 1u;
    float _1522 = dot(vec3(cbLight._m0[_1469].xyz), vec3(_242, _243, _244));
    float _1525 = dot(vec3(cbLight._m0[_1511].xyz), vec3(_242, _243, _244));
    float _3475 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
    float _3486 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
    float _1530 = (isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))) * 0.3183098733425140380859375;
    float _1532 = (isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0))) * 0.3183098733425140380859375;
    float _1539 = ((cbLight._m0[_1487].x * _1493) * _1532) + (((cbLight._m0[_1497].x * _1461) * _1507) * _1530);
    float _1540 = ((_1493 * cbLight._m0[_1487].y) * _1532) + (((cbLight._m0[_1497].y * _1462) * _1507) * _1530);
    float _1541 = ((_1493 * cbLight._m0[_1487].z) * _1532) + (((cbLight._m0[_1497].z * _1463) * _1507) * _1530);
    uvec4 _1545 = floatBitsToUint(cbLight._m0[_1469 + 12u]);
    bool _1547 = _1545.x == 0u;
    float _1558;
    float _1560;
    float _1562;
    if (_1547)
    {
        _1558 = _1539;
        _1560 = _1540;
        _1562 = _1541;
    }
    else
    {
        uint _1566 = _1469 + 6u;
        float _1582 = (dot(vec3(cbLight._m0[_1469 + 2u].xyz), vec3(_242, _243, _244)) * 0.5) + 0.5;
        float _1583 = _1582 * _1582;
        float _3497 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
        float _1585 = isnan(1.0) ? _1485 : (isnan(_1485) ? 1.0 : min(_1485, 1.0));
        _1558 = (((cbLight._m0[_1566].x * 0.3183098733425140380859375) * _1584) * _1585) + _1539;
        _1560 = (((cbLight._m0[_1566].y * 0.3183098733425140380859375) * _1584) * _1585) + _1540;
        _1562 = (((cbLight._m0[_1566].z * 0.3183098733425140380859375) * _1584) * _1585) + _1541;
    }
    bool _1565 = _1545.y == 0u;
    float _1603;
    float _1605;
    float _1607;
    if (_1565)
    {
        _1603 = _1558;
        _1605 = _1560;
        _1607 = _1562;
    }
    else
    {
        uint _1711 = _1469 + 7u;
        float _1727 = (dot(vec3(cbLight._m0[_1469 + 3u].xyz), vec3(_242, _243, _244)) * 0.5) + 0.5;
        float _1728 = _1727 * _1727;
        float _3513 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1729 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
        float _1730 = isnan(1.0) ? _1486 : (isnan(_1486) ? 1.0 : min(_1486, 1.0));
        _1603 = (((cbLight._m0[_1711].x * 0.3183098733425140380859375) * _1729) * _1730) + _1558;
        _1605 = (((cbLight._m0[_1711].y * 0.3183098733425140380859375) * _1729) * _1730) + _1560;
        _1607 = (((cbLight._m0[_1711].z * 0.3183098733425140380859375) * _1729) * _1730) + _1562;
    }
    uint _1609 = _1469 + 8u;
    float _1615 = cbLight._m0[_1469].x + _322;
    float _1616 = cbLight._m0[_1469].y + _323;
    float _1617 = cbLight._m0[_1469].z + _324;
    float _1621 = inversesqrt(dot(vec3(_1615, _1616, _1617), vec3(_1615, _1616, _1617)));
    float _1625 = dot(vec3(_242, _243, _244), vec3(cbLight._m0[_1469].xyz));
    float _3529 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
    float _1628 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
    float _3540 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _1629 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
    float _1630 = dot(vec3(cbLight._m0[_1469].xyz), vec3(_1615 * _1621, _1616 * _1621, _1617 * _1621));
    float _3551 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
    float _1641 = (exp2(log2(1.0 - (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1647 = (0.5 / ((_1628 + 9.9999999392252902907785028219223e-09) + _1629)) * _1628;
    float _3562 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
    float _1649 = (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))) * 0.31831014156341552734375;
    uint _1663 = _1469 + 9u;
    float _1669 = cbLight._m0[_1511].x + _322;
    float _1670 = cbLight._m0[_1511].y + _323;
    float _1671 = cbLight._m0[_1511].z + _324;
    float _1675 = inversesqrt(dot(vec3(_1669, _1670, _1671), vec3(_1669, _1670, _1671)));
    float _1679 = dot(vec3(_242, _243, _244), vec3(cbLight._m0[_1511].xyz));
    float _3573 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
    float _1682 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
    float _1683 = dot(vec3(cbLight._m0[_1511].xyz), vec3(_1669 * _1675, _1670 * _1675, _1671 * _1675));
    float _3584 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
    float _1692 = (exp2(log2(1.0 - (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1696 = (0.5 / ((_1682 + 9.9999999392252902907785028219223e-09) + _1629)) * _1682;
    float _3595 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
    float _1698 = (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))) * 0.31831014156341552734375;
    float _1708 = (((_1692 * cbLight._m0[_1663].x) * _1698) * _1493) + ((((cbLight._m0[_1609].x * _1461) * _1641) * _1649) * _1507);
    float _1709 = (((_1692 * cbLight._m0[_1663].y) * _1698) * _1493) + ((((cbLight._m0[_1609].y * _1462) * _1641) * _1649) * _1507);
    float _1710 = (((_1692 * cbLight._m0[_1663].z) * _1698) * _1493) + ((((cbLight._m0[_1609].z * _1463) * _1641) * _1649) * _1507);
    float _1772;
    float _1774;
    float _1776;
    if (_1547)
    {
        _1772 = _1708;
        _1774 = _1709;
        _1776 = _1710;
    }
    else
    {
        uint _1778 = _1469 + 10u;
        uint _1784 = _1469 + 2u;
        float _1790 = cbLight._m0[_1784].x + _322;
        float _1791 = cbLight._m0[_1784].y + _323;
        float _1792 = cbLight._m0[_1784].z + _324;
        float _1796 = inversesqrt(dot(vec3(_1790, _1791, _1792), vec3(_1790, _1791, _1792)));
        float _1800 = dot(vec3(_242, _243, _244), vec3(cbLight._m0[_1784].xyz));
        float _3606 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1803 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _1804 = dot(vec3(cbLight._m0[_1784].xyz), vec3(_1790 * _1796, _1791 * _1796, _1792 * _1796));
        float _3617 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1813 = (exp2(log2(1.0 - (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1817 = (0.5 / ((_1803 + 9.9999999392252902907785028219223e-09) + _1629)) * _1803;
        float _3628 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1819 = (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * 0.31831014156341552734375;
        float _1820 = isnan(1.0) ? _1485 : (isnan(_1485) ? 1.0 : min(_1485, 1.0));
        _1772 = (((_1813 * cbLight._m0[_1778].x) * _1819) * _1820) + _1708;
        _1774 = (((_1813 * cbLight._m0[_1778].y) * _1819) * _1820) + _1709;
        _1776 = (((_1813 * cbLight._m0[_1778].z) * _1819) * _1820) + _1710;
    }
    float _1855;
    float _1857;
    float _1859;
    if (_1565)
    {
        _1855 = _1772;
        _1857 = _1774;
        _1859 = _1776;
    }
    else
    {
        uint _1866 = _1469 + 11u;
        uint _1872 = _1469 + 3u;
        float _1878 = cbLight._m0[_1872].x + _322;
        float _1879 = cbLight._m0[_1872].y + _323;
        float _1880 = cbLight._m0[_1872].z + _324;
        float _1884 = inversesqrt(dot(vec3(_1878, _1879, _1880), vec3(_1878, _1879, _1880)));
        float _1888 = dot(vec3(_242, _243, _244), vec3(cbLight._m0[_1872].xyz));
        float _3644 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
        float _1891 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1892 = dot(vec3(cbLight._m0[_1872].xyz), vec3(_1878 * _1884, _1879 * _1884, _1880 * _1884));
        float _3655 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
        float _1901 = (exp2(log2(1.0 - (isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1905 = (0.5 / ((_1891 + 9.9999999392252902907785028219223e-09) + _1629)) * _1891;
        float _3666 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
        float _1907 = (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * 0.31831014156341552734375;
        float _1908 = isnan(1.0) ? _1486 : (isnan(_1486) ? 1.0 : min(_1486, 1.0));
        _1855 = (((_1901 * cbLight._m0[_1866].x) * _1907) * _1908) + _1772;
        _1857 = (((_1901 * cbLight._m0[_1866].y) * _1907) * _1908) + _1774;
        _1859 = (((_1901 * cbLight._m0[_1866].z) * _1907) * _1908) + _1776;
    }
    float _2043;
    float _2045;
    float _2047;
    float _2049;
    float _2051;
    float _2053;
    if (_1467.y == 0u)
    {
        float _1983 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1984 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1983;
        float _1985 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1983;
        float _1986 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1983;
        uvec4 _1998 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1999 = _1998.x;
        uint _2010 = uint((float(_1998.y) * floor(float(uint(cbSceneParam._m0[85u].y * _344) / _1999))) + floor(float(uint(cbSceneParam._m0[85u].x * _343) / _1999)));
        float _2020 = (log2(_1986 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2021 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
        uint _2024 = uint(isnan(14.0) ? _2021 : (isnan(_2021) ? 14.0 : min(_2021, 14.0)));
        uvec4 _2029 = texelFetch(g_lightClusterGridBuffer, int(((_2024 << 2u) + (_2010 << 6u)) >> 2u));
        uint _2030 = _2029.x;
        uint _2031 = _1998.z;
        float _2160;
        float _2162;
        float _2164;
        float _2166;
        float _2168;
        float _2170;
        if (((((1u << ((_2031 >> 4u) & 15u)) + 4294967295u) & _2030) == 0u) || ((_2031 & 240u) == 0u))
        {
            _2160 = 0.0;
            _2162 = 0.0;
            _2164 = 0.0;
            _2166 = 0.0;
            _2168 = 0.0;
            _2170 = 0.0;
        }
        else
        {
            float _2161;
            float _2163;
            float _2165;
            float _2167;
            float _2169;
            float _2171;
            float _2321 = 0.0;
            float _2322 = 0.0;
            float _2323 = 0.0;
            float _2324 = 0.0;
            float _2325 = 0.0;
            float _2326 = 0.0;
            uint _2327 = 0u;
            uint _2336;
            bool _2337;
            for (;;)
            {
                _2336 = texelFetch(g_lightClassification, int((((_2024 << 5u) + (_2010 << 9u)) + (_2327 << 2u)) >> 2u)).x;
                _2337 = _2336 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2337)
                {
                    frontier_phi_66_pred = _2321;
                    frontier_phi_66_pred_1 = _2326;
                    frontier_phi_66_pred_2 = _2325;
                    frontier_phi_66_pred_3 = _2324;
                    frontier_phi_66_pred_4 = _2323;
                    frontier_phi_66_pred_5 = _2322;
                }
                else
                {
                    float _2466;
                    float _2467;
                    float _2468;
                    float _2469;
                    float _2470;
                    float _2471;
                    uint _2472;
                    _2466 = _2321;
                    _2467 = _2322;
                    _2468 = _2323;
                    _2469 = _2324;
                    _2470 = _2325;
                    _2471 = _2326;
                    _2472 = _2336;
                    float _2393;
                    float _2394;
                    float _2395;
                    float _2396;
                    float _2397;
                    float _2398;
                    for (;;)
                    {
                        uint _2476 = uint(findLSB(_2472)) + (_2327 << 5u);
                        uint _2473 = (_2472 + 4294967295u) & _2472;
                        uint _2478 = _2476 * 48u;
                        vec4 _2492 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2478)).x, texelFetch(g_PointLightRenderingBuffer, int(_2478 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2478 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2478 + 3u)).x));
                        uint _2498 = (_2476 * 48u) + 4u;
                        vec4 _2511 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2498)).x, texelFetch(g_PointLightRenderingBuffer, int(_2498 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2498 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2498 + 3u)).x));
                        uint _2517 = (_2476 * 48u) + 8u;
                        vec3 _2528 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2517)).x, texelFetch(g_PointLightRenderingBuffer, int(_2517 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2517 + 2u)).x));
                        float _2532 = _2492.x - _1984;
                        float _2533 = _2492.y - _1985;
                        float _2534 = _2492.z - _1986;
                        float _2535 = dot(vec3(_2532, _2533, _2534), vec3(_2532, _2533, _2534));
                        float _2538 = inversesqrt(_2535);
                        float _2547 = 1.0 - (_2535 * _2492.w);
                        float _3692 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
                        float _2548 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
                        float _2549 = sqrt(_2535) * _2511.w;
                        float _2552 = 1.39999997615814208984375 / (_2549 + 1.39999997615814208984375);
                        float _2553 = _2552 * _2552;
                        float _2556 = ((1.0 - _2553) * dot(vec3(_364, _367, _370), vec3(_2538 * _2532, _2538 * _2533, _2538 * _2534))) + _2553;
                        float _2559 = _2549 * _2549;
                        float _2563 = ((isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0))) * _2548) / ((_2559 * 0.699999988079071044921875) + 1.0);
                        float _2567 = (-0.0) - _1984;
                        float _2568 = (-0.0) - _1985;
                        float _2569 = (-0.0) - _1986;
                        float _2573 = inversesqrt(dot(vec3(_2567, _2568, _2569), vec3(_2567, _2568, _2569)));
                        float _2577 = dot(vec3(_364, _367, _370), vec3(_2573 * _2567, _2573 * _2568, _2573 * _2569));
                        float _3708 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
                        float _3719 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
                        float _2581 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
                        float _2585 = (0.5 / (((isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) + 9.9999999392252902907785028219223e-09) + _2581)) * _2581;
                        float _3730 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
                        float _2594 = (((isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * 3.1415927410125732421875) / ((_2559 * 2.1991131305694580078125) + 3.141590118408203125)) * _2548;
                        _2396 = (_2563 * _2511.x) + _2469;
                        _2397 = (_2563 * _2511.y) + _2470;
                        _2398 = (_2563 * _2511.z) + _2471;
                        _2393 = (_2594 * _2528.x) + _2466;
                        _2394 = (_2594 * _2528.y) + _2467;
                        _2395 = (_2594 * _2528.z) + _2468;
                        if (_2473 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2466 = _2393;
                            _2467 = _2394;
                            _2468 = _2395;
                            _2469 = _2396;
                            _2470 = _2397;
                            _2471 = _2398;
                            _2472 = _2473;
                        }
                    }
                    frontier_phi_66_pred = _2393;
                    frontier_phi_66_pred_1 = _2398;
                    frontier_phi_66_pred_2 = _2397;
                    frontier_phi_66_pred_3 = _2396;
                    frontier_phi_66_pred_4 = _2395;
                    frontier_phi_66_pred_5 = _2394;
                }
                _2161 = frontier_phi_66_pred;
                _2171 = frontier_phi_66_pred_1;
                _2169 = frontier_phi_66_pred_2;
                _2167 = frontier_phi_66_pred_3;
                _2165 = frontier_phi_66_pred_4;
                _2163 = frontier_phi_66_pred_5;
                uint _2328 = _2327 + 1u;
                if (_2328 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2321 = _2161;
                    _2322 = _2163;
                    _2323 = _2165;
                    _2324 = _2167;
                    _2325 = _2169;
                    _2326 = _2171;
                    _2327 = _2328;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2160 = _2161;
            _2162 = _2163;
            _2164 = _2165;
            _2166 = _2167;
            _2168 = _2169;
            _2170 = _2171;
        }
        uvec4 _2174 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2175 = _2174.z;
        uint _2177 = (_2175 >> 8u) & 15u;
        float _2292;
        float _2294;
        float _2296;
        float _2298;
        float _2300;
        float _2302;
        if (((4294967295u << _2177) & _2030) == 0u)
        {
            _2292 = _2160;
            _2294 = _2162;
            _2296 = _2164;
            _2298 = _2166;
            _2300 = _2168;
            _2302 = _2170;
        }
        else
        {
            float _2317 = inversesqrt(dot(vec3(_1984, _1985, _1986), vec3(_1984, _1985, _1986)));
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2177 < ((_2175 >> 12u) & 15u))
            {
                float _2293;
                float _2295;
                float _2297;
                float _2299;
                float _2301;
                float _2303;
                float _2449 = _2160;
                float _2450 = _2162;
                float _2451 = _2164;
                float _2452 = _2166;
                float _2453 = _2168;
                float _2454 = _2170;
                uint _2455 = _2177;
                uint _2464;
                bool _2465;
                for (;;)
                {
                    _2464 = texelFetch(g_lightClassification, int((((_2024 << 5u) + (_2010 << 9u)) + (_2455 << 2u)) >> 2u)).x;
                    _2465 = _2464 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2465)
                    {
                        frontier_phi_77_pred = _2454;
                        frontier_phi_77_pred_1 = _2453;
                        frontier_phi_77_pred_2 = _2452;
                        frontier_phi_77_pred_3 = _2451;
                        frontier_phi_77_pred_4 = _2450;
                        frontier_phi_77_pred_5 = _2449;
                    }
                    else
                    {
                        float _2608;
                        float _2609;
                        float _2610;
                        float _2611;
                        float _2612;
                        float _2613;
                        float _2860;
                        float _2861;
                        float _2862;
                        float _2863;
                        float _2864;
                        float _2865;
                        float _2621 = _2449;
                        float _2622 = _2450;
                        float _2623 = _2451;
                        float _2624 = _2452;
                        float _2625 = _2453;
                        float _2626 = _2454;
                        uint _2627 = _2464;
                        uint _2628;
                        vec4 _2653;
                        float _2654;
                        vec4 _2669;
                        vec3 _2681;
                        vec4 _2697;
                        vec4 _2713;
                        float _2760;
                        bool _2761;
                        for (;;)
                        {
                            uint _2638 = ((_2455 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2627));
                            _2628 = (_2627 + 4294967295u) & _2627;
                            uint _2640 = _2638 * 40u;
                            _2653 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2640)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2640 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2640 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2640 + 3u)).x));
                            _2654 = _2653.w;
                            uint _2656 = (_2638 * 40u) + 4u;
                            _2669 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2656)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2656 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2656 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2656 + 3u)).x));
                            uint _2671 = (_2638 * 40u) + 8u;
                            _2681 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2671)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2671 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2671 + 2u)).x));
                            uint _2684 = (_2638 * 40u) + 16u;
                            _2697 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2684)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2684 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2684 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2684 + 3u)).x));
                            uint _2700 = (_2638 * 40u) + 20u;
                            _2713 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2700)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2700 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2700 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2700 + 3u)).x));
                            uint _2716 = (_2638 * 40u) + 24u;
                            vec4 _2729 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2716)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2716 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2716 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2716 + 3u)).x));
                            uint _2735 = (_2638 * 40u) + 28u;
                            vec4 _2748 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2735)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 3u)).x));
                            _2760 = fma(_1986, _2748.z, fma(_1985, _2748.y, _2748.x * _1984)) + _2748.w;
                            _2761 = !((fma(_1986, _2729.z, fma(_1985, _2729.y, _2729.x * _1984)) + _2729.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2761)
                            {
                                float _2788 = _2653.x - _1984;
                                float _2789 = _2653.y - _1985;
                                float _2790 = _2653.z - _1986;
                                float _2791 = dot(vec3(_2788, _2789, _2790), vec3(_2788, _2789, _2790));
                                float _2794 = inversesqrt(_2791);
                                float _2795 = _2794 * _2788;
                                float _2796 = _2794 * _2789;
                                float _2797 = _2794 * _2790;
                                float _2801 = 1.0 - (_2791 / (_2654 * _2654));
                                float _3741 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                                float _2802 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
                                float _2806 = sqrt(_2791) * _2669.w;
                                float _2808 = 1.39999997615814208984375 / (_2806 + 1.39999997615814208984375);
                                float _2809 = _2808 * _2808;
                                float _2810 = 1.0 - _2809;
                                float _2812 = (_2810 * dot(vec3(_2795, _2796, _2797), vec3(_364, _367, _370))) + _2809;
                                float _2815 = _2806 * _2806;
                                float _2819 = (fma(_1986, _2697.z, fma(_1985, _2697.y, _2697.x * _1984)) + _2697.w) / _2760;
                                float _2820 = (fma(_1986, _2713.z, fma(_1985, _2713.y, _2713.x * _1984)) + _2713.w) / _2760;
                                float _2824 = 1.0 - dot(vec2(_2819, _2820), vec2(_2819, _2820));
                                float _3757 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
                                float _2825 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
                                float _2826 = _2825 * (((isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0))) * _2802) / ((_2815 * 0.699999988079071044921875) + 1.0));
                                float _2836 = dot(vec3(_364, _367, _370), vec3((-0.0) - (_1984 * _2317), (-0.0) - (_1985 * _2317), (-0.0) - (_1986 * _2317)));
                                float _3768 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
                                float _2844 = (_2810 * dot(vec3(_364, _367, _370), vec3(_2795, _2796, _2797))) + _2809;
                                float _3779 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
                                float _2845 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
                                float _2849 = (0.5 / (((isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) + 9.9999999392252902907785028219223e-09) + _2845)) * _2845;
                                float _3790 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
                                float _2856 = (_2825 * _2802) * (((isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * 3.1415927410125732421875) / ((_2815 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2826 * _2669.y;
                                frontier_phi_83_pred_1 = _2826 * _2669.x;
                                frontier_phi_83_pred_2 = _2856 * _2681.z;
                                frontier_phi_83_pred_3 = _2856 * _2681.y;
                                frontier_phi_83_pred_4 = _2856 * _2681.x;
                                frontier_phi_83_pred_5 = _2826 * _2669.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2864 = frontier_phi_83_pred;
                            _2863 = frontier_phi_83_pred_1;
                            _2862 = frontier_phi_83_pred_2;
                            _2861 = frontier_phi_83_pred_3;
                            _2860 = frontier_phi_83_pred_4;
                            _2865 = frontier_phi_83_pred_5;
                            _2611 = _2863 + _2624;
                            _2612 = _2864 + _2625;
                            _2613 = _2865 + _2626;
                            _2608 = _2860 + _2621;
                            _2609 = _2861 + _2622;
                            _2610 = _2862 + _2623;
                            if (_2628 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2621 = _2608;
                                _2622 = _2609;
                                _2623 = _2610;
                                _2624 = _2611;
                                _2625 = _2612;
                                _2626 = _2613;
                                _2627 = _2628;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2613;
                        frontier_phi_77_pred_1 = _2612;
                        frontier_phi_77_pred_2 = _2611;
                        frontier_phi_77_pred_3 = _2610;
                        frontier_phi_77_pred_4 = _2609;
                        frontier_phi_77_pred_5 = _2608;
                    }
                    _2303 = frontier_phi_77_pred;
                    _2301 = frontier_phi_77_pred_1;
                    _2299 = frontier_phi_77_pred_2;
                    _2297 = frontier_phi_77_pred_3;
                    _2295 = frontier_phi_77_pred_4;
                    _2293 = frontier_phi_77_pred_5;
                    uint _2456 = _2455 + 1u;
                    if (_2456 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2449 = _2293;
                        _2450 = _2295;
                        _2451 = _2297;
                        _2452 = _2299;
                        _2453 = _2301;
                        _2454 = _2303;
                        _2455 = _2456;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2297;
                frontier_phi_58_59_ladder_1 = _2303;
                frontier_phi_58_59_ladder_2 = _2301;
                frontier_phi_58_59_ladder_3 = _2299;
                frontier_phi_58_59_ladder_4 = _2295;
                frontier_phi_58_59_ladder_5 = _2293;
            }
            else
            {
                frontier_phi_58_59_ladder = _2164;
                frontier_phi_58_59_ladder_1 = _2170;
                frontier_phi_58_59_ladder_2 = _2168;
                frontier_phi_58_59_ladder_3 = _2166;
                frontier_phi_58_59_ladder_4 = _2162;
                frontier_phi_58_59_ladder_5 = _2160;
            }
            _2292 = frontier_phi_58_59_ladder_5;
            _2294 = frontier_phi_58_59_ladder_4;
            _2296 = frontier_phi_58_59_ladder;
            _2298 = frontier_phi_58_59_ladder_3;
            _2300 = frontier_phi_58_59_ladder_2;
            _2302 = frontier_phi_58_59_ladder_1;
        }
        float _2307 = isnan(1.0) ? _408 : (isnan(_408) ? 1.0 : min(_408, 1.0));
        _2043 = (_2307 * _2298) + _1603;
        _2045 = (_2307 * _2300) + _1605;
        _2047 = (_2307 * _2302) + _1607;
        _2049 = ((_2292 * 0.039999999105930328369140625) * _2307) + _1855;
        _2051 = ((_2294 * 0.039999999105930328369140625) * _2307) + _1857;
        _2053 = ((_2296 * 0.039999999105930328369140625) * _2307) + _1859;
    }
    else
    {
        _2043 = _1603;
        _2045 = _1605;
        _2047 = _1607;
        _2049 = _1855;
        _2051 = _1857;
        _2053 = _1859;
    }
    uint _2059 = _384 + uint(cbMatDynParam._m0[0u].w);
    float _2065 = cbInstanceData._m0[_2059].x * (((cbMtdParam._m0[12u].x * cbMtdParam._m0[9u].x) * _218.x) + cbMtdParam._m0[11u].x);
    float _2066 = cbInstanceData._m0[_2059].y * (((cbMtdParam._m0[12u].x * cbMtdParam._m0[9u].y) * _218.y) + cbMtdParam._m0[11u].y);
    float _2067 = cbInstanceData._m0[_2059].z * (cbMtdParam._m0[11u].z + ((cbMtdParam._m0[12u].x * cbMtdParam._m0[9u].z) * _218.z));
    float _3806 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _3817 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _3828 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _2084 = (((isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) * (_2043 + ((isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0))) * _408))) + ((_2049 + ((isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))) * _1219)) * cbPerFrame._m0[3u].x)) + _2065;
    float _2086 = (_2066 + ((_2051 + ((isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))) * _1219)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_2045 + ((isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0))) * _408)));
    float _2088 = (_2067 + ((_2053 + ((isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))) * _1219)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_2047 + ((isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0))) * _408)));
    float _2089 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2090 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2091 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2097 = cbMtdParam._m0[2u].x * _2065;
    float _2098 = cbMtdParam._m0[2u].y * _2066;
    float _2099 = cbMtdParam._m0[2u].z * _2067;
    float _3854 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2101 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    uint _2102 = _383 + 6u;
    float _2110 = _343 / cbSceneParam._m0[86u].x;
    float _2111 = _344 / cbSceneParam._m0[86u].y;
    vec4 _2125 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2110, _2111, (log2((isnan(cbSceneParam._m0[77u].w) ? _264 : (isnan(_264) ? cbSceneParam._m0[77u].w : min(_264, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2127 = _2125.x;
    float _2128 = _2125.y;
    float _2129 = _2125.z;
    float _2130 = _2125.w;
    float _2223;
    float _2225;
    float _2227;
    float _2229;
    if (_264 > cbSceneParam._m0[78u].w)
    {
        float _2185 = isnan(_264) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _264 : min(cbSceneParam._m0[80u].w, _264));
        float _2186 = _2185 / _264;
        float _2197 = _2186 * _315;
        float _2198 = _316 * _2186;
        float _2199 = (-0.0) - _2198;
        float _2201 = _2186 * _317;
        float _2203 = (cbSceneParam._m0[77u].w * _2199) / _2185;
        float _2204 = _2203 + cbSceneParam._m0[79u].w;
        float _2205 = cbSceneParam._m0[79u].w - _2198;
        float _2211 = sqrt(((_2197 * _2197) + (_2198 * _2198)) + (_2201 * _2201));
        float _2214 = (1.0 - (cbSceneParam._m0[77u].w / _2185)) * _2211;
        float _2219 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2221 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2406;
        if (abs((_2199 - _2203) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2406 = ((((_2204 > 0.0) ? exp2(_2219 * _2204) : (2.0 - exp2(_2221 * _2204))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2214;
        }
        else
        {
            float _2350 = 1.0 / cbSceneParam._m0[80u].x;
            float _2351 = isnan(_2205) ? _2204 : (isnan(_2204) ? _2205 : max(_2204, _2205));
            float _2352 = isnan(_2205) ? _2204 : (isnan(_2204) ? _2205 : min(_2204, _2205));
            float _2361 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : min(_2351, 0.0));
            float _2362 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : min(_2352, 0.0));
            _2406 = ((abs(_2211 / _2199) * cbSceneParam._m0[80u].y) * ((((_2361 - _2362) * 2.0) - ((exp2(_2219 * (isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0)))) - exp2(_2219 * (isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0))))) * _2350)) - ((exp2(_2221 * _2361) - exp2(_2221 * _2362)) * _2350))) + (_2214 * cbSceneParam._m0[80u].z);
        }
        vec4 _2408 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2110, _2111, 1.0), 0.0);
        float _2417 = exp2((_2406 * (-1.44269502162933349609375)) * (1.0 - _2408.w));
        float _2418 = log2(_2417);
        float _2434 = log2(_2130);
        _2223 = (exp2(_2434 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2418 * cbSceneParam._m0[78u].x)) * _2408.x) / cbSceneParam._m0[78u].x)) + _2127;
        _2225 = (exp2(_2434 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2418 * cbSceneParam._m0[78u].y)) * _2408.y) / cbSceneParam._m0[78u].y)) + _2128;
        _2227 = (exp2(_2434 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2418 * cbSceneParam._m0[78u].z)) * _2408.z) / cbSceneParam._m0[78u].z)) + _2129;
        _2229 = _2417 * _2130;
    }
    else
    {
        _2223 = _2127;
        _2225 = _2128;
        _2227 = _2129;
        _2229 = _2130;
    }
    bool _2444;
    vec4 _2239;
    vec4 _2262;
    float _2264;
    float _2268;
    float _2269;
    float _2270;
    float _2273;
    float _2276;
    float _2279;
    float _2280;
    bool _2291;
    for (;;)
    {
        _2239 = cbMatDynParam._m0[0u];
        float _2241 = roundEven(_2239.y);
        bool _2242 = _2241 == 3.0;
        float _2244 = log2(_2229);
        float _2248 = exp2(_2244 * cbSceneParam._m0[78u].x);
        float _2249 = exp2(_2244 * cbSceneParam._m0[78u].y);
        float _2250 = exp2(_2244 * cbSceneParam._m0[78u].z);
        float _2251 = _2248 * _2089;
        float _2252 = _2249 * _2090;
        float _2253 = _2250 * _2091;
        float _2260 = _331 + (-0.5);
        _2262 = cbMtdParam._m0[1u];
        _2264 = _2262.y * _2260;
        float _2267 = (_2241 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2268 = _2267 * (_2242 ? _2251 : (_2251 + (cbSceneParam._m0[72u].w * _2223)));
        _2269 = _2267 * (_2242 ? _2252 : (_2252 + (cbSceneParam._m0[72u].w * _2225)));
        _2270 = _2267 * (_2242 ? _2253 : (_2253 + (cbSceneParam._m0[72u].w * _2227)));
        _2273 = ((_2097 * _2101) * _2248) * _2267;
        _2276 = ((_2098 * _2101) * _2249) * _2267;
        _2279 = ((_2099 * _2101) * _2250) * _2267;
        _2280 = _2260 * 0.999000012874603271484375;
        _2291 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2291)
        {
            if ((cbInstanceData._m0[_383 + 7u].x + _2280) < 0.5)
            {
                _2444 = true;
                break;
            }
        }
        uint _2385 = _384 + uint(_2239.w);
        if ((cbInstanceData._m0[_2385].w < 1.0) && ((cbInstanceData._m0[_2385].w + _2280) < 0.5))
        {
            _2444 = true;
            break;
        }
        if ((_2264 + 1.0) < _2262.x)
        {
            _2444 = true;
            break;
        }
        _2444 = false;
        break;
    }
    float _2599;
    if (_2444)
    {
        discard_state = true;
        _2599 = 0.0;
    }
    else
    {
        _2599 = cbInstanceData._m0[_2102].w;
    }
    SV_Target.x = _2268;
    SV_Target.y = _2269;
    SV_Target.z = _2270;
    SV_Target.w = _2599;
    SV_Target_1.x = _2273;
    SV_Target_1.y = _2276;
    SV_Target_1.z = _2279;
    SV_Target_1.w = cbInstanceData._m0[_2102].w;
    discard_exit();
}


