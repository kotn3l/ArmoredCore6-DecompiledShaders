#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _738;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _163 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _164 = _163 * NORMAL.x;
    float _165 = _163 * NORMAL.y;
    float _166 = _163 * NORMAL.z;
    vec4 _186 = texture(sampler2D(P_ACParts_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _192 = _186.x * cbMtdParam._m0[10u].x;
    float _193 = _186.y * cbMtdParam._m0[10u].y;
    float _194 = _186.z * cbMtdParam._m0[10u].z;
    vec4 _216 = texture(sampler2D(P_ACParts_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _239 = inversesqrt(dot(vec3(_164, _165, _166), vec3(_164, _165, _166)));
    float _240 = _239 * _164;
    float _241 = _239 * _165;
    float _242 = _239 * _166;
    float _3169 = isnan(0.0) ? _192 : (isnan(_192) ? 0.0 : max(_192, 0.0));
    float _3180 = isnan(0.0) ? _193 : (isnan(_193) ? 0.0 : max(_193, 0.0));
    float _3191 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _262 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _303 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _313 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _303);
    float _314 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _303);
    float _315 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _303);
    float _319 = inversesqrt(dot(vec3(_313, _314, _315), vec3(_313, _314, _315)));
    float _320 = _313 * _319;
    float _321 = _314 * _319;
    float _322 = _315 * _319;
    float _328 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _329 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _350 = fma(_242, cbSceneParam._m0[5u].z, fma(_241, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _240));
    float _353 = fma(_242, cbSceneParam._m0[6u].z, fma(_241, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _240));
    float _356 = fma(_242, cbSceneParam._m0[7u].z, fma(_241, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _240));
    uint _369 = uint(roundEven(NORMAL.w)) * 13u;
    uint _370 = _369 + 9u;
    uint _371 = _370 + uint(cbMatDynParam._m0[0u].w);
    float _377 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3169 : (isnan(_3169) ? 1.0 : min(_3169, 1.0)))) * cbInstanceData._m0[_371].x;
    float _378 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3180 : (isnan(_3180) ? 1.0 : min(_3180, 1.0)))) * cbInstanceData._m0[_371].y;
    float _379 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3191 : (isnan(_3191) ? 1.0 : min(_3191, 1.0)))) * cbInstanceData._m0[_371].z;
    float _3202 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _380 = isnan(1.0) ? _3202 : (isnan(_3202) ? 1.0 : min(_3202, 1.0));
    float _3213 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _381 = isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0));
    float _3224 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _382 = isnan(1.0) ? _3224 : (isnan(_3224) ? 1.0 : min(_3224, 1.0));
    vec4 _391 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _328, cbSceneParam._m0[86u].y * _329));
    float _394 = _391.x * TEXCOORD.z;
    float _395 = dot(vec3(_240, _241, _242), vec3(_320, _321, _322));
    float _398 = _395 * 2.0;
    float _403 = (_398 * _240) - _320;
    float _404 = (_398 * _241) - _321;
    float _405 = (_398 * _242) - _322;
    float _427 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _431 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _435 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _737;
    float _739;
    float _740;
    float _741;
    float _742;
    float _743;
    float _744;
    float _745;
    float _746;
    float _747;
    float _748;
    float _749;
    float _750;
    float _751;
    float _752;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _462 = fma(_435, cbModelParam._m0[26u].z, fma(_431, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _427));
        float _466 = fma(_435, cbModelParam._m0[27u].z, fma(_431, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _427));
        float _470 = fma(_435, cbModelParam._m0[28u].z, fma(_431, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _427));
        float _495 = _427 + _240;
        float _496 = _431 + _241;
        float _497 = _435 + _242;
        float _507 = fma(_497, cbModelParam._m0[26u].z, fma(_496, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _495)) - _462;
        float _508 = fma(_497, cbModelParam._m0[27u].z, fma(_496, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _495)) - _466;
        float _509 = fma(_497, cbModelParam._m0[28u].z, fma(_496, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _495)) - _470;
        float _513 = inversesqrt(dot(vec3(_507, _508, _509), vec3(_507, _508, _509)));
        float _526 = ((_513 * _507) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_462 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _527 = ((_513 * _508) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_466 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _528 = ((_513 * _509) / cbModelParam._m0[34u].z) + ((((((_470 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _531 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_526, _527, _528), 0.0);
        vec4 _538 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_526, _527, _528), 0.0);
        vec4 _545 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_526, _527, _528), 0.0);
        vec4 _552 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_526, _527, _528), 0.0);
        float _565 = exp2((_531.w + (-0.5)) * 20.0) * 2.0;
        float _566 = _565 * (_531.x + (-0.5));
        float _567 = _565 * (_531.y + (-0.5));
        float _568 = _565 * (_531.z + (-0.5));
        float _575 = exp2((_538.w + (-0.5)) * 20.0) * 2.0;
        float _576 = _575 * (_538.x + (-0.5));
        float _577 = _575 * (_538.y + (-0.5));
        float _578 = _575 * (_538.z + (-0.5));
        float _585 = exp2((_545.w + (-0.5)) * 20.0) * 2.0;
        float _586 = _585 * (_545.x + (-0.5));
        float _587 = _585 * (_545.y + (-0.5));
        float _588 = _585 * (_545.z + (-0.5));
        float _595 = exp2((_552.w + (-0.5)) * 20.0) * 2.0;
        float _596 = _595 * (_552.x + (-0.5));
        float _597 = _595 * (_552.y + (-0.5));
        float _598 = _595 * (_552.z + (-0.5));
        float _599 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
        float _600 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
        float _601 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
        float _602 = _566 * 0.5;
        float _603 = _576 * 0.5;
        float _604 = _586 * 0.5;
        float _605 = dot(vec3(_602, _603, _604), vec3(_602, _603, _604));
        float _610 = (_605 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_605);
        float _619 = (dot(vec3(_240, _241, _242), vec3(_610 * _602, _610 * _603, _610 * _604)) + 1.0) * 0.5;
        float _3250 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
        float _629 = sqrt(((_603 * _603) + (_602 * _602)) + (_604 * _604)) / (_599 + 9.9999997473787516355514526367188e-06);
        float _3261 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
        float _630 = isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0));
        float _631 = _630 * 2.0;
        float _635 = (1.0 - _630) / (_630 + 1.0);
        float _3272 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
        float _636 = isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0));
        float _645 = ((((1.0 - _636) * (_631 + 2.0)) * exp2(log2(isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0))) * (_631 + 1.0))) + _636) * _599;
        float _646 = _567 * 0.5;
        float _647 = _577 * 0.5;
        float _648 = _587 * 0.5;
        float _649 = dot(vec3(_646, _647, _648), vec3(_646, _647, _648));
        float _654 = (_649 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_649);
        float _662 = (dot(vec3(_240, _241, _242), vec3(_654 * _646, _654 * _647, _654 * _648)) + 1.0) * 0.5;
        float _3283 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        float _671 = sqrt(((_647 * _647) + (_646 * _646)) + (_648 * _648)) / (_600 + 9.9999997473787516355514526367188e-06);
        float _3294 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
        float _672 = isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0));
        float _673 = _672 * 2.0;
        float _677 = (1.0 - _672) / (_672 + 1.0);
        float _3305 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
        float _678 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
        float _687 = ((((1.0 - _678) * (_673 + 2.0)) * exp2(log2(isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0))) * (_673 + 1.0))) + _678) * _600;
        float _688 = _568 * 0.5;
        float _689 = _578 * 0.5;
        float _690 = _588 * 0.5;
        float _691 = dot(vec3(_688, _689, _690), vec3(_688, _689, _690));
        float _696 = (_691 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_691);
        float _704 = (dot(vec3(_240, _241, _242), vec3(_696 * _688, _696 * _689, _696 * _690)) + 1.0) * 0.5;
        float _3316 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _713 = sqrt(((_689 * _689) + (_688 * _688)) + (_690 * _690)) / (_601 + 9.9999997473787516355514526367188e-06);
        float _3327 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _714 = isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0));
        float _715 = _714 * 2.0;
        float _719 = (1.0 - _714) / (_714 + 1.0);
        float _3338 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _720 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
        float _729 = ((((1.0 - _720) * (_715 + 2.0)) * exp2(log2(isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0))) * (_715 + 1.0))) + _720) * _601;
        _737 = _568;
        _739 = _567;
        _740 = _566;
        _741 = _578;
        _742 = _577;
        _743 = _576;
        _744 = _588;
        _745 = _587;
        _746 = _586;
        _747 = _601;
        _748 = _600;
        _749 = _599;
        _750 = cbModelParam._m0[36u].z * (isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0)));
        _751 = cbModelParam._m0[36u].z * (isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0)));
        _752 = cbModelParam._m0[36u].z * (isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0)));
    }
    else
    {
        _737 = _738;
        _739 = _738;
        _740 = _738;
        _741 = _738;
        _742 = _738;
        _743 = _738;
        _744 = _738;
        _745 = _738;
        _746 = _738;
        _747 = _738;
        _748 = _738;
        _749 = _738;
        _750 = 0.0;
        _751 = 0.0;
        _752 = 0.0;
    }
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _778 = fma(_435, cbModelParam._m0[30u].z, fma(_431, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _427));
        float _782 = fma(_435, cbModelParam._m0[31u].z, fma(_431, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _427));
        float _786 = fma(_435, cbModelParam._m0[32u].z, fma(_431, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _427));
        float _809 = _427 + _240;
        float _810 = _431 + _241;
        float _811 = _435 + _242;
        float _821 = fma(_811, cbModelParam._m0[30u].z, fma(_810, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _809)) - _778;
        float _822 = fma(_811, cbModelParam._m0[31u].z, fma(_810, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _809)) - _782;
        float _823 = fma(_811, cbModelParam._m0[32u].z, fma(_810, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _809)) - _786;
        float _827 = inversesqrt(dot(vec3(_821, _822, _823), vec3(_821, _822, _823)));
        float _840 = ((_827 * _821) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_778 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _841 = ((_827 * _822) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_782 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _842 = ((_827 * _823) / cbModelParam._m0[35u].z) + ((((((_786 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _844 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_840, _841, _842), 0.0);
        vec4 _851 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_840, _841, _842), 0.0);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_840, _841, _842), 0.0);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_840, _841, _842), 0.0);
        float _877 = exp2((_844.w + (-0.5)) * 20.0) * 2.0;
        float _878 = _877 * (_844.x + (-0.5));
        float _879 = _877 * (_844.y + (-0.5));
        float _880 = _877 * (_844.z + (-0.5));
        float _887 = exp2((_851.w + (-0.5)) * 20.0) * 2.0;
        float _888 = _887 * (_851.x + (-0.5));
        float _889 = _887 * (_851.y + (-0.5));
        float _890 = _887 * (_851.z + (-0.5));
        float _897 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _898 = _897 * (_858.x + (-0.5));
        float _899 = _897 * (_858.y + (-0.5));
        float _900 = _897 * (_858.z + (-0.5));
        float _907 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _908 = _907 * (_865.x + (-0.5));
        float _909 = _907 * (_865.y + (-0.5));
        float _910 = _907 * (_865.z + (-0.5));
        float _911 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _912 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _913 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _914 = _878 * 0.5;
        float _915 = _888 * 0.5;
        float _916 = _898 * 0.5;
        float _917 = dot(vec3(_914, _915, _916), vec3(_914, _915, _916));
        float _922 = (_917 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_917);
        float _930 = (dot(vec3(_240, _241, _242), vec3(_922 * _914, _922 * _915, _922 * _916)) + 1.0) * 0.5;
        float _3379 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _939 = sqrt(((_915 * _915) + (_914 * _914)) + (_916 * _916)) / (_911 + 9.9999997473787516355514526367188e-06);
        float _3390 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
        float _941 = _940 * 2.0;
        float _945 = (1.0 - _940) / (_940 + 1.0);
        float _3401 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _946 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
        float _955 = ((((1.0 - _946) * (_941 + 2.0)) * exp2(log2(isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0))) * (_941 + 1.0))) + _946) * _911;
        float _956 = _879 * 0.5;
        float _957 = _889 * 0.5;
        float _958 = _899 * 0.5;
        float _959 = dot(vec3(_956, _957, _958), vec3(_956, _957, _958));
        float _964 = (_959 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_959);
        float _972 = (dot(vec3(_240, _241, _242), vec3(_964 * _956, _964 * _957, _964 * _958)) + 1.0) * 0.5;
        float _3412 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _981 = sqrt(((_957 * _957) + (_956 * _956)) + (_958 * _958)) / (_912 + 9.9999997473787516355514526367188e-06);
        float _3423 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
        float _983 = _982 * 2.0;
        float _987 = (1.0 - _982) / (_982 + 1.0);
        float _3434 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
        float _997 = ((((1.0 - _988) * (_983 + 2.0)) * exp2(log2(isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0))) * (_983 + 1.0))) + _988) * _912;
        float _998 = _880 * 0.5;
        float _999 = _890 * 0.5;
        float _1000 = _900 * 0.5;
        float _1001 = dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000));
        float _1006 = (_1001 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1001);
        float _1014 = (dot(vec3(_240, _241, _242), vec3(_1006 * _998, _1006 * _999, _1006 * _1000)) + 1.0) * 0.5;
        float _3445 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1023 = sqrt(((_999 * _999) + (_998 * _998)) + (_1000 * _1000)) / (_913 + 9.9999997473787516355514526367188e-06);
        float _3456 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
        float _1025 = _1024 * 2.0;
        float _1029 = (1.0 - _1024) / (_1024 + 1.0);
        float _3467 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
        float _1039 = ((((1.0 - _1030) * (_1025 + 2.0)) * exp2(log2(isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0))) * (_1025 + 1.0))) + _1030) * _913;
        _1047 = _880;
        _1048 = _879;
        _1049 = _878;
        _1050 = _890;
        _1051 = _889;
        _1052 = _888;
        _1053 = _900;
        _1054 = _899;
        _1055 = _898;
        _1056 = _913;
        _1057 = _912;
        _1058 = _911;
        _1059 = cbModelParam._m0[36u].w * (isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0)));
        _1060 = cbModelParam._m0[36u].w * (isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0)));
        _1061 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0)));
    }
    else
    {
        _1047 = _738;
        _1048 = _738;
        _1049 = _738;
        _1050 = _738;
        _1051 = _738;
        _1052 = _738;
        _1053 = _738;
        _1054 = _738;
        _1055 = _738;
        _1056 = _738;
        _1057 = _738;
        _1058 = _738;
        _1059 = 0.0;
        _1060 = 0.0;
        _1061 = 0.0;
    }
    float _1071 = (cbModelParam._m0[1u].x * (_1059 - _750)) + _750;
    float _1072 = (cbModelParam._m0[1u].x * (_1060 - _751)) + _751;
    float _1073 = (cbModelParam._m0[1u].x * (_1061 - _752)) + _752;
    float _1094 = fma(_1073, cbSceneParam._m0[89u].z, fma(_1072, cbSceneParam._m0[89u].y, _1071 * cbSceneParam._m0[89u].x));
    float _1097 = fma(_1073, cbSceneParam._m0[90u].z, fma(_1072, cbSceneParam._m0[90u].y, _1071 * cbSceneParam._m0[90u].x));
    float _1100 = fma(_1073, cbSceneParam._m0[91u].z, fma(_1072, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1071));
    float _1115 = _403 * 0.5;
    float _1116 = _404 * 0.5;
    float _1117 = _405 * 0.5;
    float _1118 = dot(vec4(_1115, _1116, _1117, 1.0), vec4(_1049, _1052, _1055, _1058));
    float _1121 = dot(vec4(_1115, _1116, _1117, 1.0), vec4(_1048, _1051, _1054, _1057));
    float _1124 = dot(vec4(_1115, _1116, _1117, 1.0), vec4(_1047, _1050, _1053, _1056));
    float _1158;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1131 = dot(vec4(_1115, _1116, _1117, 1.0), vec4(_737, _741, _744, _747));
        float _1135 = dot(vec4(_1115, _1116, _1117, 1.0), vec4(_739, _742, _745, _748));
        float _1139 = dot(vec4(_1115, _1116, _1117, 1.0), vec4(_740, _743, _746, _749));
        float _1146 = dot(vec4(cbModelParam._m0[39u]), vec4(_1115, _1116, _1117, 1.0));
        _1158 = dot(vec3(isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0)), isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)), isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1146) ? 0.0 : (isnan(0.0) ? _1146 : max(0.0, _1146))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1158 = 1.0;
    }
    float _1169;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1160 = dot(vec4(cbModelParam._m0[40u]), vec4(_1115, _1116, _1117, 1.0));
        _1169 = dot(vec3(isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)), isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)), isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1160) ? 0.0 : (isnan(0.0) ? _1160 : max(0.0, _1160))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1169 = 1.0;
    }
    float _1173 = (_1169 * cbModelParam._m0[1u].x) + (_1158 * (1.0 - cbModelParam._m0[1u].x));
    float _1182 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1264;
    float _1266;
    float _1268;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1231 = fma(_435, cbModelParam._m0[13u].z, fma(_431, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _427)) + cbModelParam._m0[13u].w;
        float _1235 = fma(_435, cbModelParam._m0[14u].z, fma(_431, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _427)) + cbModelParam._m0[14u].w;
        float _1239 = fma(_435, cbModelParam._m0[15u].z, fma(_431, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _427)) + cbModelParam._m0[15u].w;
        float _1242 = fma(_405, cbModelParam._m0[13u].z, fma(_404, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _403));
        float _1245 = fma(_405, cbModelParam._m0[14u].z, fma(_404, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _403));
        float _1248 = fma(_405, cbModelParam._m0[15u].z, fma(_404, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _403));
        float _1274;
        if (_1242 > 0.0)
        {
            _1274 = abs((1.0 - _1231) / _1242);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1242 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1231 + 1.0) / _1242);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1274 = frontier_phi_14_12_ladder;
        }
        float _1448;
        if (_1245 > 0.0)
        {
            _1448 = abs((1.0 - _1235) / _1245);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1245 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1235 + 1.0) / _1245);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1448 = frontier_phi_23_19_ladder;
        }
        float _1745;
        if (_1248 > 0.0)
        {
            _1745 = abs((1.0 - _1239) / _1248);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1248 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1239 + 1.0) / _1248);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1745 = frontier_phi_35_30_ladder;
        }
        float _1747 = isnan(_1448) ? _1274 : (isnan(_1274) ? _1448 : min(_1274, _1448));
        float _1748 = isnan(_1745) ? _1747 : (isnan(_1747) ? _1745 : min(_1747, _1745));
        float _1752 = (_1748 * _1242) + _1231;
        float _1753 = (_1748 * _1245) + _1235;
        float _1754 = (_1748 * _1248) + _1239;
        float _1755 = _1748 * 9.9999997473787516355514526367188e-05;
        float _1757 = (-1.0) - _1755;
        float _1759 = _1755 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1754 > _1759) || ((_1754 < _1757) || ((_1753 > _1759) || ((_1753 < _1757) || ((_1752 < _1757) || (_1752 > _1759))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1899 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1754, cbModelParam._m0[9u].z, fma(_1753, cbModelParam._m0[9u].y, _1752 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1754, cbModelParam._m0[10u].z, fma(_1753, cbModelParam._m0[10u].y, _1752 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1754, cbModelParam._m0[11u].z, fma(_1753, cbModelParam._m0[11u].y, _1752 * cbModelParam._m0[11u].x))), _1182);
            frontier_phi_13_35_ladder = _1899.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1899.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1899.x * cbModelParam._m0[1u].y;
        }
        _1264 = frontier_phi_13_35_ladder_2;
        _1266 = frontier_phi_13_35_ladder_1;
        _1268 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1252 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_403, _404, _405), _1182);
        _1264 = _1252.x * cbModelParam._m0[1u].y;
        _1266 = _1252.y * cbModelParam._m0[1u].y;
        _1268 = _1252.z * cbModelParam._m0[1u].y;
    }
    float _1271 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1364;
    float _1366;
    float _1368;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1328 = fma(_435, cbModelParam._m0[21u].z, fma(_431, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _427)) + cbModelParam._m0[21u].w;
        float _1332 = fma(_435, cbModelParam._m0[22u].z, fma(_431, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _427)) + cbModelParam._m0[22u].w;
        float _1336 = fma(_435, cbModelParam._m0[23u].z, fma(_431, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _427)) + cbModelParam._m0[23u].w;
        float _1339 = fma(_405, cbModelParam._m0[21u].z, fma(_404, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _403));
        float _1342 = fma(_405, cbModelParam._m0[22u].z, fma(_404, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _403));
        float _1345 = fma(_405, cbModelParam._m0[23u].z, fma(_404, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _403));
        float _1453;
        if (_1339 > 0.0)
        {
            _1453 = abs((1.0 - _1328) / _1339);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1339 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1328 + 1.0) / _1339);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1453 = frontier_phi_25_21_ladder;
        }
        float _1772;
        if (_1342 > 0.0)
        {
            _1772 = abs((1.0 - _1332) / _1342);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1342 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1332 + 1.0) / _1342);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1772 = frontier_phi_37_32_ladder;
        }
        float _2045;
        if (_1345 > 0.0)
        {
            _2045 = abs((1.0 - _1336) / _1345);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1345 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1336 + 1.0) / _1345);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2045 = frontier_phi_47_44_ladder;
        }
        float _2047 = isnan(_1772) ? _1453 : (isnan(_1453) ? _1772 : min(_1453, _1772));
        float _2048 = isnan(_2045) ? _2047 : (isnan(_2047) ? _2045 : min(_2047, _2045));
        float _2052 = (_2048 * _1339) + _1328;
        float _2053 = (_2048 * _1342) + _1332;
        float _2054 = (_2048 * _1345) + _1336;
        float _2055 = _2048 * 9.9999997473787516355514526367188e-05;
        float _2056 = (-1.0) - _2055;
        float _2058 = _2055 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2054 > _2058) || ((_2054 < _2056) || ((_2053 > _2058) || ((_2053 < _2056) || ((_2052 < _2056) || (_2052 > _2058))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2145 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2054, cbModelParam._m0[17u].z, fma(_2053, cbModelParam._m0[17u].y, _2052 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2054, cbModelParam._m0[18u].z, fma(_2053, cbModelParam._m0[18u].y, _2052 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2054, cbModelParam._m0[19u].z, fma(_2053, cbModelParam._m0[19u].y, _2052 * cbModelParam._m0[19u].x))), _1271);
            frontier_phi_22_47_ladder = _2145.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2145.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2145.x * cbModelParam._m0[1u].z;
        }
        _1364 = frontier_phi_22_47_ladder_2;
        _1366 = frontier_phi_22_47_ladder_1;
        _1368 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1348 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_403, _404, _405), _1271);
        _1364 = _1348.x * cbModelParam._m0[1u].z;
        _1366 = _1348.y * cbModelParam._m0[1u].z;
        _1368 = _1348.z * cbModelParam._m0[1u].z;
    }
    float _1380 = _394 * 0.01200000010430812835693359375;
    float _1382 = _1380 * ((cbModelParam._m0[1u].w * (_1364 - _1264)) + _1264);
    float _1383 = _1380 * ((cbModelParam._m0[1u].w * (_1366 - _1266)) + _1266);
    float _1384 = _1380 * ((cbModelParam._m0[1u].w * (_1368 - _1268)) + _1268);
    float _1387 = fma(_1384, cbSceneParam._m0[89u].z, fma(_1383, cbSceneParam._m0[89u].y, _1382 * cbSceneParam._m0[89u].x));
    float _1390 = fma(_1384, cbSceneParam._m0[90u].z, fma(_1383, cbSceneParam._m0[90u].y, _1382 * cbSceneParam._m0[90u].x));
    float _1393 = fma(_1384, cbSceneParam._m0[91u].z, fma(_1383, cbSceneParam._m0[91u].y, _1382 * cbSceneParam._m0[91u].x));
    float _1427 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1431 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1435 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1439 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1440 = _1427 / _1439;
    float _1441 = _1431 / _1439;
    float _1442 = _1435 / _1439;
    float _1589;
    float _1590;
    float _1591;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1469 = ((uint(_1442 > cbSceneParam._m0[59u].y) + uint(_1442 > cbSceneParam._m0[59u].x)) + uint(_1442 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1470 = _1469 + 43u;
        uint _1478 = _1469 + 44u;
        uint _1486 = _1469 + 45u;
        uint _1494 = _1469 + 46u;
        float _1505 = fma(_1439, cbSceneParam._m0[_1470].w, fma(_1435, cbSceneParam._m0[_1470].z, fma(_1431, cbSceneParam._m0[_1470].y, _1427 * cbSceneParam._m0[_1470].x)));
        float _1509 = fma(_1439, cbSceneParam._m0[_1478].w, fma(_1435, cbSceneParam._m0[_1478].z, fma(_1431, cbSceneParam._m0[_1478].y, _1427 * cbSceneParam._m0[_1478].x)));
        float _1517 = fma(_1439, cbSceneParam._m0[_1494].w, fma(_1435, cbSceneParam._m0[_1494].z, fma(_1431, cbSceneParam._m0[_1494].y, _1427 * cbSceneParam._m0[_1494].x)));
        float _1522 = cbSceneParam._m0[33u].z * _1517;
        float _1524 = cbSceneParam._m0[33u].w * _1517;
        float _1527 = fma(_1439, cbSceneParam._m0[_1486].w, fma(_1435, cbSceneParam._m0[_1486].z, fma(_1431, cbSceneParam._m0[_1486].y, _1427 * cbSceneParam._m0[_1486].x))) / _1517;
        float _1575 = (cbSceneParam._m0[33u].x - sqrt(((_1441 * _1441) + (_1440 * _1440)) + (_1442 * _1442))) * cbSceneParam._m0[33u].y;
        float _3593 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1582 = (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1522 + _1505) / _1517, (_1524 + _1509) / _1517), _1527), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1524 + _1505) / _1517, (_1509 - _1522) / _1517), _1527), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1505 - _1522) / _1517, (_1509 - _1524) / _1517), _1527), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1505 - _1524) / _1517, (_1522 + _1509) / _1517), _1527), 0.0)).x), vec4(0.25)));
        _1589 = 1.0 - (_1582 * cbSceneParam._m0[34u].x);
        _1590 = 1.0 - (_1582 * cbSceneParam._m0[34u].y);
        _1591 = 1.0 - (_1582 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1589 = 1.0;
        _1590 = 1.0;
        _1591 = 1.0;
    }
    float _1655;
    float _1657;
    float _1659;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1643 = fma(_1439, cbSceneParam._m0[63u].w, fma(_1435, cbSceneParam._m0[63u].z, fma(_1431, cbSceneParam._m0[63u].y, _1427 * cbSceneParam._m0[63u].x)));
        float _1644 = fma(_1439, cbSceneParam._m0[60u].w, fma(_1435, cbSceneParam._m0[60u].z, fma(_1431, cbSceneParam._m0[60u].y, _1427 * cbSceneParam._m0[60u].x))) / _1643;
        float _1645 = fma(_1439, cbSceneParam._m0[61u].w, fma(_1435, cbSceneParam._m0[61u].z, fma(_1431, cbSceneParam._m0[61u].y, _1427 * cbSceneParam._m0[61u].x))) / _1643;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1644 >= cbSceneParam._m0[64u].x) && (_1645 >= cbSceneParam._m0[64u].y)) && (_1644 <= cbSceneParam._m0[64u].z)) && (_1645 <= cbSceneParam._m0[64u].w))
        {
            float _1785 = fma(_1439, cbSceneParam._m0[62u].w, fma(_1435, cbSceneParam._m0[62u].z, fma(_1431, cbSceneParam._m0[62u].y, _1427 * cbSceneParam._m0[62u].x))) / _1643;
            float _1789 = isnan(cbSceneParam._m0[41u].w) ? _1785 : (isnan(_1785) ? cbSceneParam._m0[41u].w : max(_1785, cbSceneParam._m0[41u].w));
            float _1832 = (cbSceneParam._m0[33u].x - sqrt(((_1441 * _1441) + (_1440 * _1440)) + (_1442 * _1442))) * cbSceneParam._m0[33u].y;
            float _3609 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
            float _1839 = (isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1644, cbSceneParam._m0[33u].w + _1645), _1789), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1644, _1645 - cbSceneParam._m0[33u].z), _1789), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1644 - cbSceneParam._m0[33u].z, _1645 - cbSceneParam._m0[33u].w), _1789), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1644 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1645), _1789), 0.0)).x), vec4(0.25)));
            float _1843 = 1.0 - (_1839 * cbSceneParam._m0[34u].x);
            float _1844 = 1.0 - (_1839 * cbSceneParam._m0[34u].y);
            float _1845 = 1.0 - (_1839 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1845) ? _1591 : (isnan(_1591) ? _1845 : min(_1591, _1845));
            frontier_phi_34_33_ladder_1 = isnan(_1844) ? _1590 : (isnan(_1590) ? _1844 : min(_1590, _1844));
            frontier_phi_34_33_ladder_2 = isnan(_1843) ? _1589 : (isnan(_1589) ? _1843 : min(_1589, _1843));
        }
        else
        {
            frontier_phi_34_33_ladder = _1591;
            frontier_phi_34_33_ladder_1 = _1590;
            frontier_phi_34_33_ladder_2 = _1589;
        }
        _1655 = frontier_phi_34_33_ladder_2;
        _1657 = frontier_phi_34_33_ladder_1;
        _1659 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1655 = _1589;
        _1657 = _1590;
        _1659 = _1591;
    }
    uvec4 _1664 = floatBitsToUint(cbInstanceData._m0[_369 + 5u]);
    uint _1666 = _1664.x * 14u;
    uint _1667 = _1666 + 13u;
    float _1674 = _394 + (-1.0);
    float _1680 = (cbLight._m0[_1667].x * _1674) + 1.0;
    float _1681 = (cbLight._m0[_1667].y * _1674) + 1.0;
    float _1682 = (cbLight._m0[_1667].z * _1674) + 1.0;
    float _1683 = (cbLight._m0[_1667].w * _1674) + 1.0;
    uint _1684 = _1666 + 5u;
    float _1690 = isnan(1.0) ? _1681 : (isnan(_1681) ? 1.0 : min(_1681, 1.0));
    uint _1694 = _1666 + 4u;
    float _1704 = isnan(1.0) ? _1680 : (isnan(_1680) ? 1.0 : min(_1680, 1.0));
    uint _1708 = _1666 | 1u;
    float _1719 = dot(vec3(cbLight._m0[_1666].xyz), vec3(_240, _241, _242));
    float _1722 = dot(vec3(cbLight._m0[_1708].xyz), vec3(_240, _241, _242));
    float _3645 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
    float _3656 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
    float _1727 = (isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))) * 0.3183098733425140380859375;
    float _1729 = (isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))) * 0.3183098733425140380859375;
    float _1736 = ((cbLight._m0[_1684].x * _1690) * _1729) + (((cbLight._m0[_1694].x * _1655) * _1704) * _1727);
    float _1737 = ((_1690 * cbLight._m0[_1684].y) * _1729) + (((cbLight._m0[_1694].y * _1657) * _1704) * _1727);
    float _1738 = ((_1690 * cbLight._m0[_1684].z) * _1729) + (((cbLight._m0[_1694].z * _1659) * _1704) * _1727);
    uvec4 _1742 = floatBitsToUint(cbLight._m0[_1666 + 12u]);
    bool _1744 = _1742.x == 0u;
    float _1846;
    float _1848;
    float _1850;
    if (_1744)
    {
        _1846 = _1736;
        _1848 = _1737;
        _1850 = _1738;
    }
    else
    {
        uint _1854 = _1666 + 6u;
        float _1870 = (dot(vec3(cbLight._m0[_1666 + 2u].xyz), vec3(_240, _241, _242)) * 0.5) + 0.5;
        float _1871 = _1870 * _1870;
        float _3667 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
        float _1872 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
        float _1873 = isnan(1.0) ? _1682 : (isnan(_1682) ? 1.0 : min(_1682, 1.0));
        _1846 = (((cbLight._m0[_1854].x * 0.3183098733425140380859375) * _1872) * _1873) + _1736;
        _1848 = (((cbLight._m0[_1854].y * 0.3183098733425140380859375) * _1872) * _1873) + _1737;
        _1850 = (((cbLight._m0[_1854].z * 0.3183098733425140380859375) * _1872) * _1873) + _1738;
    }
    bool _1853 = _1742.y == 0u;
    float _1908;
    float _1910;
    float _1912;
    if (_1853)
    {
        _1908 = _1846;
        _1910 = _1848;
        _1912 = _1850;
    }
    else
    {
        uint _2016 = _1666 + 7u;
        float _2032 = (dot(vec3(cbLight._m0[_1666 + 3u].xyz), vec3(_240, _241, _242)) * 0.5) + 0.5;
        float _2033 = _2032 * _2032;
        float _3683 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
        float _2034 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _2035 = isnan(1.0) ? _1683 : (isnan(_1683) ? 1.0 : min(_1683, 1.0));
        _1908 = (((cbLight._m0[_2016].x * 0.3183098733425140380859375) * _2034) * _2035) + _1846;
        _1910 = (((cbLight._m0[_2016].y * 0.3183098733425140380859375) * _2034) * _2035) + _1848;
        _1912 = (((cbLight._m0[_2016].z * 0.3183098733425140380859375) * _2034) * _2035) + _1850;
    }
    uint _1914 = _1666 + 8u;
    float _1920 = cbLight._m0[_1666].x + _320;
    float _1921 = cbLight._m0[_1666].y + _321;
    float _1922 = cbLight._m0[_1666].z + _322;
    float _1926 = inversesqrt(dot(vec3(_1920, _1921, _1922), vec3(_1920, _1921, _1922)));
    float _1930 = dot(vec3(_240, _241, _242), vec3(cbLight._m0[_1666].xyz));
    float _3699 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _1933 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _3710 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _1934 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _1935 = dot(vec3(cbLight._m0[_1666].xyz), vec3(_1920 * _1926, _1921 * _1926, _1922 * _1926));
    float _3721 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _1946 = (exp2(log2(1.0 - (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1952 = (0.5 / ((_1933 + 9.9999999392252902907785028219223e-09) + _1934)) * _1933;
    float _3732 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1954 = (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * 0.31831014156341552734375;
    uint _1968 = _1666 + 9u;
    float _1974 = cbLight._m0[_1708].x + _320;
    float _1975 = cbLight._m0[_1708].y + _321;
    float _1976 = cbLight._m0[_1708].z + _322;
    float _1980 = inversesqrt(dot(vec3(_1974, _1975, _1976), vec3(_1974, _1975, _1976)));
    float _1984 = dot(vec3(_240, _241, _242), vec3(cbLight._m0[_1708].xyz));
    float _3743 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1987 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
    float _1988 = dot(vec3(cbLight._m0[_1708].xyz), vec3(_1974 * _1980, _1975 * _1980, _1976 * _1980));
    float _3754 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1997 = (exp2(log2(1.0 - (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2001 = (0.5 / ((_1987 + 9.9999999392252902907785028219223e-09) + _1934)) * _1987;
    float _3765 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2003 = (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * 0.31831014156341552734375;
    float _2013 = (((_1997 * cbLight._m0[_1968].x) * _2003) * _1690) + ((((cbLight._m0[_1914].x * _1655) * _1946) * _1954) * _1704);
    float _2014 = (((_1997 * cbLight._m0[_1968].y) * _2003) * _1690) + ((((cbLight._m0[_1914].y * _1657) * _1946) * _1954) * _1704);
    float _2015 = (((_1997 * cbLight._m0[_1968].z) * _2003) * _1690) + ((((cbLight._m0[_1914].z * _1659) * _1946) * _1954) * _1704);
    float _2071;
    float _2073;
    float _2075;
    if (_1744)
    {
        _2071 = _2013;
        _2073 = _2014;
        _2075 = _2015;
    }
    else
    {
        uint _2077 = _1666 + 10u;
        uint _2083 = _1666 + 2u;
        float _2089 = cbLight._m0[_2083].x + _320;
        float _2090 = cbLight._m0[_2083].y + _321;
        float _2091 = cbLight._m0[_2083].z + _322;
        float _2095 = inversesqrt(dot(vec3(_2089, _2090, _2091), vec3(_2089, _2090, _2091)));
        float _2099 = dot(vec3(_240, _241, _242), vec3(cbLight._m0[_2083].xyz));
        float _3776 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2102 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _2103 = dot(vec3(cbLight._m0[_2083].xyz), vec3(_2089 * _2095, _2090 * _2095, _2091 * _2095));
        float _3787 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2112 = (exp2(log2(1.0 - (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2116 = (0.5 / ((_2102 + 9.9999999392252902907785028219223e-09) + _1934)) * _2102;
        float _3798 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2118 = (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * 0.31831014156341552734375;
        float _2119 = isnan(1.0) ? _1682 : (isnan(_1682) ? 1.0 : min(_1682, 1.0));
        _2071 = (((_2112 * cbLight._m0[_2077].x) * _2118) * _2119) + _2013;
        _2073 = (((_2112 * cbLight._m0[_2077].y) * _2118) * _2119) + _2014;
        _2075 = (((_2112 * cbLight._m0[_2077].z) * _2118) * _2119) + _2015;
    }
    float _2150;
    float _2152;
    float _2154;
    if (_1853)
    {
        _2150 = _2071;
        _2152 = _2073;
        _2154 = _2075;
    }
    else
    {
        uint _2161 = _1666 + 11u;
        uint _2167 = _1666 + 3u;
        float _2173 = cbLight._m0[_2167].x + _320;
        float _2174 = cbLight._m0[_2167].y + _321;
        float _2175 = cbLight._m0[_2167].z + _322;
        float _2179 = inversesqrt(dot(vec3(_2173, _2174, _2175), vec3(_2173, _2174, _2175)));
        float _2183 = dot(vec3(_240, _241, _242), vec3(cbLight._m0[_2167].xyz));
        float _3814 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
        float _2186 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _2187 = dot(vec3(cbLight._m0[_2167].xyz), vec3(_2173 * _2179, _2174 * _2179, _2175 * _2179));
        float _3825 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2196 = (exp2(log2(1.0 - (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2200 = (0.5 / ((_2186 + 9.9999999392252902907785028219223e-09) + _1934)) * _2186;
        float _3836 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2202 = (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * 0.31831014156341552734375;
        float _2203 = isnan(1.0) ? _1683 : (isnan(_1683) ? 1.0 : min(_1683, 1.0));
        _2150 = (((_2196 * cbLight._m0[_2161].x) * _2202) * _2203) + _2071;
        _2152 = (((_2196 * cbLight._m0[_2161].y) * _2202) * _2203) + _2073;
        _2154 = (((_2196 * cbLight._m0[_2161].z) * _2202) * _2203) + _2075;
    }
    float _2269;
    float _2271;
    float _2273;
    float _2275;
    float _2277;
    float _2279;
    if (_1664.y == 0u)
    {
        uvec4 _2224 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2225 = _2224.x;
        uint _2236 = uint((float(_2224.y) * floor(float(uint(cbSceneParam._m0[85u].y * _329) / _2225))) + floor(float(uint(cbSceneParam._m0[85u].x * _328) / _2225)));
        float _2246 = (log2(_1442 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2247 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        uint _2250 = uint(isnan(14.0) ? _2247 : (isnan(_2247) ? 14.0 : min(_2247, 14.0)));
        uvec4 _2255 = texelFetch(g_lightClusterGridBuffer, int(((_2250 << 2u) + (_2236 << 6u)) >> 2u));
        uint _2256 = _2255.x;
        uint _2257 = _2224.z;
        float _2365;
        float _2367;
        float _2369;
        float _2371;
        float _2373;
        float _2375;
        if (((((1u << ((_2257 >> 4u) & 15u)) + 4294967295u) & _2256) == 0u) || ((_2257 & 240u) == 0u))
        {
            _2365 = 0.0;
            _2367 = 0.0;
            _2369 = 0.0;
            _2371 = 0.0;
            _2373 = 0.0;
            _2375 = 0.0;
        }
        else
        {
            float _2366;
            float _2368;
            float _2370;
            float _2372;
            float _2374;
            float _2376;
            float _2517 = 0.0;
            float _2518 = 0.0;
            float _2519 = 0.0;
            float _2520 = 0.0;
            float _2521 = 0.0;
            float _2522 = 0.0;
            uint _2523 = 0u;
            uint _2532;
            bool _2533;
            for (;;)
            {
                _2532 = texelFetch(g_lightClassification, int((((_2250 << 5u) + (_2236 << 9u)) + (_2523 << 2u)) >> 2u)).x;
                _2533 = _2532 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2533)
                {
                    frontier_phi_66_pred = _2522;
                    frontier_phi_66_pred_1 = _2521;
                    frontier_phi_66_pred_2 = _2520;
                    frontier_phi_66_pred_3 = _2519;
                    frontier_phi_66_pred_4 = _2518;
                    frontier_phi_66_pred_5 = _2517;
                }
                else
                {
                    float _2641;
                    float _2642;
                    float _2643;
                    float _2644;
                    float _2645;
                    float _2646;
                    uint _2647;
                    _2641 = _2517;
                    _2642 = _2518;
                    _2643 = _2519;
                    _2644 = _2520;
                    _2645 = _2521;
                    _2646 = _2522;
                    _2647 = _2532;
                    float _2573;
                    float _2574;
                    float _2575;
                    float _2576;
                    float _2577;
                    float _2578;
                    for (;;)
                    {
                        uint _2651 = uint(findLSB(_2647)) + (_2523 << 5u);
                        uint _2648 = (_2647 + 4294967295u) & _2647;
                        uint _2653 = _2651 * 48u;
                        vec4 _2667 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2653)).x, texelFetch(g_PointLightRenderingBuffer, int(_2653 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2653 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2653 + 3u)).x));
                        uint _2673 = (_2651 * 48u) + 4u;
                        vec4 _2686 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2673)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 3u)).x));
                        uint _2692 = (_2651 * 48u) + 8u;
                        vec3 _2703 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2692)).x, texelFetch(g_PointLightRenderingBuffer, int(_2692 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2692 + 2u)).x));
                        float _2707 = _2667.x - _1440;
                        float _2708 = _2667.y - _1441;
                        float _2709 = _2667.z - _1442;
                        float _2710 = dot(vec3(_2707, _2708, _2709), vec3(_2707, _2708, _2709));
                        float _2713 = inversesqrt(_2710);
                        float _2722 = 1.0 - (_2710 * _2667.w);
                        float _3862 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
                        float _2723 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
                        float _2724 = sqrt(_2710) * _2686.w;
                        float _2727 = 1.39999997615814208984375 / (_2724 + 1.39999997615814208984375);
                        float _2728 = _2727 * _2727;
                        float _2731 = ((1.0 - _2728) * dot(vec3(_350, _353, _356), vec3(_2713 * _2707, _2713 * _2708, _2713 * _2709))) + _2728;
                        float _2734 = _2724 * _2724;
                        float _2738 = ((isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0))) * _2723) / ((_2734 * 0.699999988079071044921875) + 1.0);
                        float _2742 = (-0.0) - _1440;
                        float _2743 = (-0.0) - _1441;
                        float _2744 = (-0.0) - _1442;
                        float _2748 = inversesqrt(dot(vec3(_2742, _2743, _2744), vec3(_2742, _2743, _2744)));
                        float _2752 = dot(vec3(_350, _353, _356), vec3(_2748 * _2742, _2748 * _2743, _2748 * _2744));
                        float _3878 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
                        float _3889 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
                        float _2756 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
                        float _2760 = (0.5 / (((isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) + 9.9999999392252902907785028219223e-09) + _2756)) * _2756;
                        float _3900 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
                        float _2769 = (((isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * 3.1415927410125732421875) / ((_2734 * 2.1991131305694580078125) + 3.141590118408203125)) * _2723;
                        _2576 = (_2738 * _2686.x) + _2644;
                        _2577 = (_2738 * _2686.y) + _2645;
                        _2578 = (_2738 * _2686.z) + _2646;
                        _2573 = (_2769 * _2703.x) + _2641;
                        _2574 = (_2769 * _2703.y) + _2642;
                        _2575 = (_2769 * _2703.z) + _2643;
                        if (_2648 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2641 = _2573;
                            _2642 = _2574;
                            _2643 = _2575;
                            _2644 = _2576;
                            _2645 = _2577;
                            _2646 = _2578;
                            _2647 = _2648;
                        }
                    }
                    frontier_phi_66_pred = _2578;
                    frontier_phi_66_pred_1 = _2577;
                    frontier_phi_66_pred_2 = _2576;
                    frontier_phi_66_pred_3 = _2575;
                    frontier_phi_66_pred_4 = _2574;
                    frontier_phi_66_pred_5 = _2573;
                }
                _2376 = frontier_phi_66_pred;
                _2374 = frontier_phi_66_pred_1;
                _2372 = frontier_phi_66_pred_2;
                _2370 = frontier_phi_66_pred_3;
                _2368 = frontier_phi_66_pred_4;
                _2366 = frontier_phi_66_pred_5;
                uint _2524 = _2523 + 1u;
                if (_2524 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2517 = _2366;
                    _2518 = _2368;
                    _2519 = _2370;
                    _2520 = _2372;
                    _2521 = _2374;
                    _2522 = _2376;
                    _2523 = _2524;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2365 = _2366;
            _2367 = _2368;
            _2369 = _2370;
            _2371 = _2372;
            _2373 = _2374;
            _2375 = _2376;
        }
        uvec4 _2379 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2380 = _2379.z;
        uint _2382 = (_2380 >> 8u) & 15u;
        float _2488;
        float _2490;
        float _2492;
        float _2494;
        float _2496;
        float _2498;
        if (((4294967295u << _2382) & _2256) == 0u)
        {
            _2488 = _2365;
            _2490 = _2367;
            _2492 = _2369;
            _2494 = _2371;
            _2496 = _2373;
            _2498 = _2375;
        }
        else
        {
            float _2513 = inversesqrt(dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2382 < ((_2380 >> 12u) & 15u))
            {
                float _2489;
                float _2491;
                float _2493;
                float _2495;
                float _2497;
                float _2499;
                float _2624 = _2365;
                float _2625 = _2367;
                float _2626 = _2369;
                float _2627 = _2371;
                float _2628 = _2373;
                float _2629 = _2375;
                uint _2630 = _2382;
                uint _2639;
                bool _2640;
                for (;;)
                {
                    _2639 = texelFetch(g_lightClassification, int((((_2250 << 5u) + (_2236 << 9u)) + (_2630 << 2u)) >> 2u)).x;
                    _2640 = _2639 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2640)
                    {
                        frontier_phi_72_pred = _2629;
                        frontier_phi_72_pred_1 = _2628;
                        frontier_phi_72_pred_2 = _2627;
                        frontier_phi_72_pred_3 = _2626;
                        frontier_phi_72_pred_4 = _2625;
                        frontier_phi_72_pred_5 = _2624;
                    }
                    else
                    {
                        float _2774;
                        float _2775;
                        float _2776;
                        float _2777;
                        float _2778;
                        float _2779;
                        float _3026;
                        float _3027;
                        float _3028;
                        float _3029;
                        float _3030;
                        float _3031;
                        float _2787 = _2624;
                        float _2788 = _2625;
                        float _2789 = _2626;
                        float _2790 = _2627;
                        float _2791 = _2628;
                        float _2792 = _2629;
                        uint _2793 = _2639;
                        uint _2794;
                        vec4 _2819;
                        float _2820;
                        vec4 _2835;
                        vec3 _2847;
                        vec4 _2863;
                        vec4 _2879;
                        float _2926;
                        bool _2927;
                        for (;;)
                        {
                            uint _2804 = ((_2630 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2793));
                            _2794 = (_2793 + 4294967295u) & _2793;
                            uint _2806 = _2804 * 40u;
                            _2819 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2806)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 3u)).x));
                            _2820 = _2819.w;
                            uint _2822 = (_2804 * 40u) + 4u;
                            _2835 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2822)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 3u)).x));
                            uint _2837 = (_2804 * 40u) + 8u;
                            _2847 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2837)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 2u)).x));
                            uint _2850 = (_2804 * 40u) + 16u;
                            _2863 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2850)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 3u)).x));
                            uint _2866 = (_2804 * 40u) + 20u;
                            _2879 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2866)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 3u)).x));
                            uint _2882 = (_2804 * 40u) + 24u;
                            vec4 _2895 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 3u)).x));
                            uint _2901 = (_2804 * 40u) + 28u;
                            vec4 _2914 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 3u)).x));
                            _2926 = fma(_1442, _2914.z, fma(_1441, _2914.y, _2914.x * _1440)) + _2914.w;
                            _2927 = !((fma(_1442, _2895.z, fma(_1441, _2895.y, _2895.x * _1440)) + _2895.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_2927)
                            {
                                float _2954 = _2819.x - _1440;
                                float _2955 = _2819.y - _1441;
                                float _2956 = _2819.z - _1442;
                                float _2957 = dot(vec3(_2954, _2955, _2956), vec3(_2954, _2955, _2956));
                                float _2960 = inversesqrt(_2957);
                                float _2961 = _2960 * _2954;
                                float _2962 = _2960 * _2955;
                                float _2963 = _2960 * _2956;
                                float _2967 = 1.0 - (_2957 / (_2820 * _2820));
                                float _3911 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
                                float _2968 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
                                float _2972 = sqrt(_2957) * _2835.w;
                                float _2974 = 1.39999997615814208984375 / (_2972 + 1.39999997615814208984375);
                                float _2975 = _2974 * _2974;
                                float _2976 = 1.0 - _2975;
                                float _2978 = (_2976 * dot(vec3(_2961, _2962, _2963), vec3(_350, _353, _356))) + _2975;
                                float _2981 = _2972 * _2972;
                                float _2985 = (fma(_1442, _2863.z, fma(_1441, _2863.y, _2863.x * _1440)) + _2863.w) / _2926;
                                float _2986 = (fma(_1442, _2879.z, fma(_1441, _2879.y, _2879.x * _1440)) + _2879.w) / _2926;
                                float _2990 = 1.0 - dot(vec2(_2985, _2986), vec2(_2985, _2986));
                                float _3927 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
                                float _2991 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
                                float _2992 = _2991 * (((isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0))) * _2968) / ((_2981 * 0.699999988079071044921875) + 1.0));
                                float _3002 = dot(vec3(_350, _353, _356), vec3((-0.0) - (_1440 * _2513), (-0.0) - (_1441 * _2513), (-0.0) - (_1442 * _2513)));
                                float _3938 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                                float _3010 = (_2976 * dot(vec3(_350, _353, _356), vec3(_2961, _2962, _2963))) + _2975;
                                float _3949 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                                float _3011 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
                                float _3015 = (0.5 / (((isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) + 9.9999999392252902907785028219223e-09) + _3011)) * _3011;
                                float _3960 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                                float _3022 = (_2991 * _2968) * (((isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * 3.1415927410125732421875) / ((_2981 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_78_pred = _2992 * _2835.y;
                                frontier_phi_78_pred_1 = _2992 * _2835.x;
                                frontier_phi_78_pred_2 = _3022 * _2847.z;
                                frontier_phi_78_pred_3 = _3022 * _2847.y;
                                frontier_phi_78_pred_4 = _3022 * _2847.x;
                                frontier_phi_78_pred_5 = _2992 * _2835.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3030 = frontier_phi_78_pred;
                            _3029 = frontier_phi_78_pred_1;
                            _3028 = frontier_phi_78_pred_2;
                            _3027 = frontier_phi_78_pred_3;
                            _3026 = frontier_phi_78_pred_4;
                            _3031 = frontier_phi_78_pred_5;
                            _2777 = _3029 + _2790;
                            _2778 = _3030 + _2791;
                            _2779 = _3031 + _2792;
                            _2774 = _3026 + _2787;
                            _2775 = _3027 + _2788;
                            _2776 = _3028 + _2789;
                            if (_2794 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2787 = _2774;
                                _2788 = _2775;
                                _2789 = _2776;
                                _2790 = _2777;
                                _2791 = _2778;
                                _2792 = _2779;
                                _2793 = _2794;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2779;
                        frontier_phi_72_pred_1 = _2778;
                        frontier_phi_72_pred_2 = _2777;
                        frontier_phi_72_pred_3 = _2776;
                        frontier_phi_72_pred_4 = _2775;
                        frontier_phi_72_pred_5 = _2774;
                    }
                    _2499 = frontier_phi_72_pred;
                    _2497 = frontier_phi_72_pred_1;
                    _2495 = frontier_phi_72_pred_2;
                    _2493 = frontier_phi_72_pred_3;
                    _2491 = frontier_phi_72_pred_4;
                    _2489 = frontier_phi_72_pred_5;
                    uint _2631 = _2630 + 1u;
                    if (_2631 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2624 = _2489;
                        _2625 = _2491;
                        _2626 = _2493;
                        _2627 = _2495;
                        _2628 = _2497;
                        _2629 = _2499;
                        _2630 = _2631;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2499;
                frontier_phi_60_61_ladder_1 = _2497;
                frontier_phi_60_61_ladder_2 = _2493;
                frontier_phi_60_61_ladder_3 = _2491;
                frontier_phi_60_61_ladder_4 = _2489;
                frontier_phi_60_61_ladder_5 = _2495;
            }
            else
            {
                frontier_phi_60_61_ladder = _2375;
                frontier_phi_60_61_ladder_1 = _2373;
                frontier_phi_60_61_ladder_2 = _2369;
                frontier_phi_60_61_ladder_3 = _2367;
                frontier_phi_60_61_ladder_4 = _2365;
                frontier_phi_60_61_ladder_5 = _2371;
            }
            _2488 = frontier_phi_60_61_ladder_4;
            _2490 = frontier_phi_60_61_ladder_3;
            _2492 = frontier_phi_60_61_ladder_2;
            _2494 = frontier_phi_60_61_ladder_5;
            _2496 = frontier_phi_60_61_ladder_1;
            _2498 = frontier_phi_60_61_ladder;
        }
        float _2503 = isnan(1.0) ? _394 : (isnan(_394) ? 1.0 : min(_394, 1.0));
        _2269 = (_2503 * _2494) + _1908;
        _2271 = (_2503 * _2496) + _1910;
        _2273 = (_2503 * _2498) + _1912;
        _2275 = ((_2488 * 0.039999999105930328369140625) * _2503) + _2150;
        _2277 = ((_2490 * 0.039999999105930328369140625) * _2503) + _2152;
        _2279 = ((_2492 * 0.039999999105930328369140625) * _2503) + _2154;
    }
    else
    {
        _2269 = _1908;
        _2271 = _1910;
        _2273 = _1912;
        _2275 = _2150;
        _2277 = _2152;
        _2279 = _2154;
    }
    uint _2285 = _370 + uint(cbMatDynParam._m0[0u].w);
    float _2291 = cbInstanceData._m0[_2285].x * (((cbMtdParam._m0[12u].x * cbMtdParam._m0[9u].x) * _216.x) + cbMtdParam._m0[11u].x);
    float _2292 = cbInstanceData._m0[_2285].y * (((cbMtdParam._m0[12u].x * cbMtdParam._m0[9u].y) * _216.y) + cbMtdParam._m0[11u].y);
    float _2293 = cbInstanceData._m0[_2285].z * (cbMtdParam._m0[11u].z + ((cbMtdParam._m0[12u].x * cbMtdParam._m0[9u].z) * _216.z));
    float _3976 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _3987 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _3998 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _2310 = (((isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_2269 + ((isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0))) * _394))) + ((_2275 + ((isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0))) * _1173)) * cbPerFrame._m0[3u].x)) + _2291;
    float _2312 = (_2292 + ((_2277 + ((isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))) * _1173)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_2271 + ((isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0))) * _394)));
    float _2314 = (_2293 + ((_2279 + ((isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))) * _1173)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * (_2273 + ((isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0))) * _394)));
    float _4024 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2327 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    uint _2328 = _369 + 6u;
    float _2336 = _328 / cbSceneParam._m0[86u].x;
    float _2337 = _329 / cbSceneParam._m0[86u].y;
    vec4 _2351 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2336, _2337, (log2((isnan(cbSceneParam._m0[77u].w) ? _262 : (isnan(_262) ? cbSceneParam._m0[77u].w : min(_262, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2353 = _2351.x;
    float _2354 = _2351.y;
    float _2355 = _2351.z;
    float _2356 = _2351.w;
    float _2428;
    float _2430;
    float _2432;
    float _2434;
    if (_262 > cbSceneParam._m0[78u].w)
    {
        float _2390 = isnan(_262) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _262 : min(cbSceneParam._m0[80u].w, _262));
        float _2391 = _2390 / _262;
        float _2402 = _2391 * _313;
        float _2403 = _314 * _2391;
        float _2404 = (-0.0) - _2403;
        float _2406 = _2391 * _315;
        float _2408 = (cbSceneParam._m0[77u].w * _2404) / _2390;
        float _2409 = _2408 + cbSceneParam._m0[79u].w;
        float _2410 = cbSceneParam._m0[79u].w - _2403;
        float _2416 = sqrt(((_2402 * _2402) + (_2403 * _2403)) + (_2406 * _2406));
        float _2419 = (1.0 - (cbSceneParam._m0[77u].w / _2390)) * _2416;
        float _2424 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2426 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2586;
        if (abs((_2404 - _2408) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2586 = ((((_2409 > 0.0) ? exp2(_2424 * _2409) : (2.0 - exp2(_2426 * _2409))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2419;
        }
        else
        {
            float _2546 = 1.0 / cbSceneParam._m0[80u].x;
            float _2547 = isnan(_2410) ? _2409 : (isnan(_2409) ? _2410 : max(_2409, _2410));
            float _2548 = isnan(_2410) ? _2409 : (isnan(_2409) ? _2410 : min(_2409, _2410));
            float _2557 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : min(_2547, 0.0));
            float _2558 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : min(_2548, 0.0));
            _2586 = ((abs(_2416 / _2404) * cbSceneParam._m0[80u].y) * ((((_2557 - _2558) * 2.0) - ((exp2(_2424 * (isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0)))) - exp2(_2424 * (isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0))))) * _2546)) - ((exp2(_2426 * _2557) - exp2(_2426 * _2558)) * _2546))) + (_2419 * cbSceneParam._m0[80u].z);
        }
        vec4 _2588 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2336, _2337, 1.0), 0.0);
        float _2597 = exp2((_2586 * (-1.44269502162933349609375)) * (1.0 - _2588.w));
        float _2598 = log2(_2597);
        float _2614 = log2(_2356);
        _2428 = (exp2(_2614 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2598 * cbSceneParam._m0[78u].x)) * _2588.x) / cbSceneParam._m0[78u].x)) + _2353;
        _2430 = (exp2(_2614 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2598 * cbSceneParam._m0[78u].y)) * _2588.y) / cbSceneParam._m0[78u].y)) + _2354;
        _2432 = (exp2(_2614 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2598 * cbSceneParam._m0[78u].z)) * _2588.z) / cbSceneParam._m0[78u].z)) + _2355;
        _2434 = _2597 * _2356;
    }
    else
    {
        _2428 = _2353;
        _2430 = _2354;
        _2432 = _2355;
        _2434 = _2356;
    }
    float _2446 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2447 = _2446 == 3.0;
    float _2449 = log2(_2434);
    float _2453 = exp2(_2449 * cbSceneParam._m0[78u].x);
    float _2454 = exp2(_2449 * cbSceneParam._m0[78u].y);
    float _2455 = exp2(_2449 * cbSceneParam._m0[78u].z);
    float _2456 = _2453 * (isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0)));
    float _2457 = _2454 * (isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0)));
    float _2458 = _2455 * (isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0)));
    float _2467 = (_2446 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2467 * (_2447 ? _2456 : (_2456 + (cbSceneParam._m0[72u].w * _2428)));
    SV_Target.y = _2467 * (_2447 ? _2457 : (_2457 + (cbSceneParam._m0[72u].w * _2430)));
    SV_Target.z = _2467 * (_2447 ? _2458 : (_2458 + (cbSceneParam._m0[72u].w * _2432)));
    SV_Target.w = cbInstanceData._m0[_2328].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2291) * _2327) * _2453) * _2467;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2292) * _2327) * _2454) * _2467;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2293) * _2327) * _2455) * _2467;
    SV_Target_1.w = cbInstanceData._m0[_2328].w;
}


