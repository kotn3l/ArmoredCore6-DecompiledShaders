#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _779;
float _2981;
float _2982;
float _2983;
float _2984;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _163 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _164 = _163 * NORMAL.x;
    float _165 = _163 * NORMAL.y;
    float _166 = _163 * NORMAL.z;
    vec4 _186 = texture(sampler2D(P_ACParts_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _192 = _186.x * cbMtdParam._m0[10u].x;
    float _193 = _186.y * cbMtdParam._m0[10u].y;
    float _194 = _186.z * cbMtdParam._m0[10u].z;
    vec4 _216 = texture(sampler2D(P_ACParts_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _239 = inversesqrt(dot(vec3(_164, _165, _166), vec3(_164, _165, _166)));
    float _240 = _239 * _164;
    float _241 = _239 * _165;
    float _242 = _239 * _166;
    float _2993 = isnan(0.0) ? _192 : (isnan(_192) ? 0.0 : max(_192, 0.0));
    float _3004 = isnan(0.0) ? _193 : (isnan(_193) ? 0.0 : max(_193, 0.0));
    float _3015 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _262 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _303 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _313 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _303);
    float _314 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _303);
    float _315 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _303);
    float _319 = inversesqrt(dot(vec3(_313, _314, _315), vec3(_313, _314, _315)));
    float _320 = _313 * _319;
    float _321 = _314 * _319;
    float _322 = _315 * _319;
    vec4 _327 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _329 = _327.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _458 = sqrt(((_313 * _313) + (_314 * _314)) + (_315 * _315));
        float _464 = (cbMatDynParam._m0[5u].x * _458) + cbMatDynParam._m0[5u].y;
        float _3026 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
        float _465 = isnan(1.0) ? _3026 : (isnan(_3026) ? 1.0 : min(_3026, 1.0));
        float _469 = (cbMatDynParam._m0[5u].z * _458) + cbMatDynParam._m0[5u].w;
        float _3037 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3037 : (isnan(_3037) ? 1.0 : min(_3037, 1.0))) - _465)) + _465) < ((_329 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _341 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _342 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _362 = fma(_242, cbSceneParam._m0[5u].z, fma(_241, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _240));
    float _365 = fma(_242, cbSceneParam._m0[6u].z, fma(_241, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _240));
    float _368 = fma(_242, cbSceneParam._m0[7u].z, fma(_241, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _240));
    uint _381 = uint(roundEven(NORMAL.w)) * 13u;
    uint _382 = _381 + 9u;
    uint _383 = _382 + uint(cbMatDynParam._m0[0u].w);
    float _389 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2993 : (isnan(_2993) ? 1.0 : min(_2993, 1.0)))) * cbInstanceData._m0[_383].x;
    float _390 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3004 : (isnan(_3004) ? 1.0 : min(_3004, 1.0)))) * cbInstanceData._m0[_383].y;
    float _391 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3015 : (isnan(_3015) ? 1.0 : min(_3015, 1.0)))) * cbInstanceData._m0[_383].z;
    float _3048 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _392 = isnan(1.0) ? _3048 : (isnan(_3048) ? 1.0 : min(_3048, 1.0));
    float _3059 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _393 = isnan(1.0) ? _3059 : (isnan(_3059) ? 1.0 : min(_3059, 1.0));
    float _3070 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _394 = isnan(1.0) ? _3070 : (isnan(_3070) ? 1.0 : min(_3070, 1.0));
    vec4 _403 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _341, cbSceneParam._m0[86u].y * _342));
    float _406 = _403.x * TEXCOORD.z;
    float _407 = dot(vec3(_240, _241, _242), vec3(_320, _321, _322));
    float _410 = _407 * 2.0;
    float _415 = (_410 * _240) - _320;
    float _416 = (_410 * _241) - _321;
    float _417 = (_410 * _242) - _322;
    float _439 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _443 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _447 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _778;
    float _780;
    float _781;
    float _782;
    float _783;
    float _784;
    float _785;
    float _786;
    float _787;
    float _788;
    float _789;
    float _790;
    float _791;
    float _792;
    float _793;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _503 = fma(_447, cbModelParam._m0[26u].z, fma(_443, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _439));
        float _507 = fma(_447, cbModelParam._m0[27u].z, fma(_443, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _439));
        float _511 = fma(_447, cbModelParam._m0[28u].z, fma(_443, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _439));
        float _536 = _439 + _240;
        float _537 = _443 + _241;
        float _538 = _447 + _242;
        float _548 = fma(_538, cbModelParam._m0[26u].z, fma(_537, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _536)) - _503;
        float _549 = fma(_538, cbModelParam._m0[27u].z, fma(_537, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _536)) - _507;
        float _550 = fma(_538, cbModelParam._m0[28u].z, fma(_537, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _536)) - _511;
        float _554 = inversesqrt(dot(vec3(_548, _549, _550), vec3(_548, _549, _550)));
        float _567 = ((_554 * _548) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_503 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _568 = ((_554 * _549) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_507 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _569 = ((_554 * _550) / cbModelParam._m0[34u].z) + ((((((_511 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _572 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_567, _568, _569), 0.0);
        vec4 _579 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_567, _568, _569), 0.0);
        vec4 _586 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_567, _568, _569), 0.0);
        vec4 _593 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_567, _568, _569), 0.0);
        float _606 = exp2((_572.w + (-0.5)) * 20.0) * 2.0;
        float _607 = _606 * (_572.x + (-0.5));
        float _608 = _606 * (_572.y + (-0.5));
        float _609 = _606 * (_572.z + (-0.5));
        float _616 = exp2((_579.w + (-0.5)) * 20.0) * 2.0;
        float _617 = _616 * (_579.x + (-0.5));
        float _618 = _616 * (_579.y + (-0.5));
        float _619 = _616 * (_579.z + (-0.5));
        float _626 = exp2((_586.w + (-0.5)) * 20.0) * 2.0;
        float _627 = _626 * (_586.x + (-0.5));
        float _628 = _626 * (_586.y + (-0.5));
        float _629 = _626 * (_586.z + (-0.5));
        float _636 = exp2((_593.w + (-0.5)) * 20.0) * 2.0;
        float _637 = _636 * (_593.x + (-0.5));
        float _638 = _636 * (_593.y + (-0.5));
        float _639 = _636 * (_593.z + (-0.5));
        float _640 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
        float _641 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
        float _642 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
        float _643 = _607 * 0.5;
        float _644 = _617 * 0.5;
        float _645 = _627 * 0.5;
        float _646 = dot(vec3(_643, _644, _645), vec3(_643, _644, _645));
        float _651 = (_646 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_646);
        float _660 = (dot(vec3(_240, _241, _242), vec3(_651 * _643, _651 * _644, _651 * _645)) + 1.0) * 0.5;
        float _3096 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
        float _670 = sqrt(((_644 * _644) + (_643 * _643)) + (_645 * _645)) / (_640 + 9.9999997473787516355514526367188e-06);
        float _3107 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        float _671 = isnan(1.0) ? _3107 : (isnan(_3107) ? 1.0 : min(_3107, 1.0));
        float _672 = _671 * 2.0;
        float _676 = (1.0 - _671) / (_671 + 1.0);
        float _3118 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
        float _677 = isnan(1.0) ? _3118 : (isnan(_3118) ? 1.0 : min(_3118, 1.0));
        float _686 = ((((1.0 - _677) * (_672 + 2.0)) * exp2(log2(isnan(1.0) ? _3096 : (isnan(_3096) ? 1.0 : min(_3096, 1.0))) * (_672 + 1.0))) + _677) * _640;
        float _687 = _608 * 0.5;
        float _688 = _618 * 0.5;
        float _689 = _628 * 0.5;
        float _690 = dot(vec3(_687, _688, _689), vec3(_687, _688, _689));
        float _695 = (_690 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_690);
        float _703 = (dot(vec3(_240, _241, _242), vec3(_695 * _687, _695 * _688, _695 * _689)) + 1.0) * 0.5;
        float _3129 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _712 = sqrt(((_688 * _688) + (_687 * _687)) + (_689 * _689)) / (_641 + 9.9999997473787516355514526367188e-06);
        float _3140 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _713 = isnan(1.0) ? _3140 : (isnan(_3140) ? 1.0 : min(_3140, 1.0));
        float _714 = _713 * 2.0;
        float _718 = (1.0 - _713) / (_713 + 1.0);
        float _3151 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _719 = isnan(1.0) ? _3151 : (isnan(_3151) ? 1.0 : min(_3151, 1.0));
        float _728 = ((((1.0 - _719) * (_714 + 2.0)) * exp2(log2(isnan(1.0) ? _3129 : (isnan(_3129) ? 1.0 : min(_3129, 1.0))) * (_714 + 1.0))) + _719) * _641;
        float _729 = _609 * 0.5;
        float _730 = _619 * 0.5;
        float _731 = _629 * 0.5;
        float _732 = dot(vec3(_729, _730, _731), vec3(_729, _730, _731));
        float _737 = (_732 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_732);
        float _745 = (dot(vec3(_240, _241, _242), vec3(_737 * _729, _737 * _730, _737 * _731)) + 1.0) * 0.5;
        float _3162 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _754 = sqrt(((_730 * _730) + (_729 * _729)) + (_731 * _731)) / (_642 + 9.9999997473787516355514526367188e-06);
        float _3173 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3173 : (isnan(_3173) ? 1.0 : min(_3173, 1.0));
        float _756 = _755 * 2.0;
        float _760 = (1.0 - _755) / (_755 + 1.0);
        float _3184 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _761 = isnan(1.0) ? _3184 : (isnan(_3184) ? 1.0 : min(_3184, 1.0));
        float _770 = ((((1.0 - _761) * (_756 + 2.0)) * exp2(log2(isnan(1.0) ? _3162 : (isnan(_3162) ? 1.0 : min(_3162, 1.0))) * (_756 + 1.0))) + _761) * _642;
        _778 = _609;
        _780 = _608;
        _781 = _607;
        _782 = _619;
        _783 = _618;
        _784 = _617;
        _785 = _629;
        _786 = _628;
        _787 = _627;
        _788 = _642;
        _789 = _641;
        _790 = _640;
        _791 = cbModelParam._m0[36u].z * (isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0)));
        _792 = cbModelParam._m0[36u].z * (isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0)));
        _793 = cbModelParam._m0[36u].z * (isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0)));
    }
    else
    {
        _778 = _779;
        _780 = _779;
        _781 = _779;
        _782 = _779;
        _783 = _779;
        _784 = _779;
        _785 = _779;
        _786 = _779;
        _787 = _779;
        _788 = _779;
        _789 = _779;
        _790 = _779;
        _791 = 0.0;
        _792 = 0.0;
        _793 = 0.0;
    }
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _822 = fma(_447, cbModelParam._m0[30u].z, fma(_443, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _439));
        float _826 = fma(_447, cbModelParam._m0[31u].z, fma(_443, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _439));
        float _830 = fma(_447, cbModelParam._m0[32u].z, fma(_443, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _439));
        float _853 = _439 + _240;
        float _854 = _443 + _241;
        float _855 = _447 + _242;
        float _865 = fma(_855, cbModelParam._m0[30u].z, fma(_854, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _853)) - _822;
        float _866 = fma(_855, cbModelParam._m0[31u].z, fma(_854, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _853)) - _826;
        float _867 = fma(_855, cbModelParam._m0[32u].z, fma(_854, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _853)) - _830;
        float _871 = inversesqrt(dot(vec3(_865, _866, _867), vec3(_865, _866, _867)));
        float _884 = ((_871 * _865) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_822 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _885 = ((_871 * _866) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_826 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _886 = ((_871 * _867) / cbModelParam._m0[35u].z) + ((((((_830 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _888 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _895 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_884, _885, _886), 0.0);
        float _921 = exp2((_888.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_888.x + (-0.5));
        float _923 = _921 * (_888.y + (-0.5));
        float _924 = _921 * (_888.z + (-0.5));
        float _931 = exp2((_895.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_895.x + (-0.5));
        float _933 = _931 * (_895.y + (-0.5));
        float _934 = _931 * (_895.z + (-0.5));
        float _941 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_902.x + (-0.5));
        float _943 = _941 * (_902.y + (-0.5));
        float _944 = _941 * (_902.z + (-0.5));
        float _951 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_909.x + (-0.5));
        float _953 = _951 * (_909.y + (-0.5));
        float _954 = _951 * (_909.z + (-0.5));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = _922 * 0.5;
        float _959 = _932 * 0.5;
        float _960 = _942 * 0.5;
        float _961 = dot(vec3(_958, _959, _960), vec3(_958, _959, _960));
        float _966 = (_961 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_961);
        float _974 = (dot(vec3(_240, _241, _242), vec3(_966 * _958, _966 * _959, _966 * _960)) + 1.0) * 0.5;
        float _3225 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _983 = sqrt(((_959 * _959) + (_958 * _958)) + (_960 * _960)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _3236 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0));
        float _985 = _984 * 2.0;
        float _989 = (1.0 - _984) / (_984 + 1.0);
        float _3247 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0));
        float _999 = ((((1.0 - _990) * (_985 + 2.0)) * exp2(log2(isnan(1.0) ? _3225 : (isnan(_3225) ? 1.0 : min(_3225, 1.0))) * (_985 + 1.0))) + _990) * _955;
        float _1000 = _923 * 0.5;
        float _1001 = _933 * 0.5;
        float _1002 = _943 * 0.5;
        float _1003 = dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002));
        float _1008 = (_1003 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1003);
        float _1016 = (dot(vec3(_240, _241, _242), vec3(_1008 * _1000, _1008 * _1001, _1008 * _1002)) + 1.0) * 0.5;
        float _3258 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1025 = sqrt(((_1001 * _1001) + (_1000 * _1000)) + (_1002 * _1002)) / (_956 + 9.9999997473787516355514526367188e-06);
        float _3269 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0));
        float _1027 = _1026 * 2.0;
        float _1031 = (1.0 - _1026) / (_1026 + 1.0);
        float _3280 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0));
        float _1041 = ((((1.0 - _1032) * (_1027 + 2.0)) * exp2(log2(isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0))) * (_1027 + 1.0))) + _1032) * _956;
        float _1042 = _924 * 0.5;
        float _1043 = _934 * 0.5;
        float _1044 = _944 * 0.5;
        float _1045 = dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044));
        float _1050 = (_1045 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1045);
        float _1058 = (dot(vec3(_240, _241, _242), vec3(_1050 * _1042, _1050 * _1043, _1050 * _1044)) + 1.0) * 0.5;
        float _3291 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1067 = sqrt(((_1043 * _1043) + (_1042 * _1042)) + (_1044 * _1044)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _3302 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0));
        float _1069 = _1068 * 2.0;
        float _1073 = (1.0 - _1068) / (_1068 + 1.0);
        float _3313 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
        float _1083 = ((((1.0 - _1074) * (_1069 + 2.0)) * exp2(log2(isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0))) * (_1069 + 1.0))) + _1074) * _957;
        _1091 = _924;
        _1092 = _923;
        _1093 = _922;
        _1094 = _934;
        _1095 = _933;
        _1096 = _932;
        _1097 = _944;
        _1098 = _943;
        _1099 = _942;
        _1100 = _957;
        _1101 = _956;
        _1102 = _955;
        _1103 = cbModelParam._m0[36u].w * (isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0)));
        _1104 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0)));
        _1105 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0)));
    }
    else
    {
        _1091 = _779;
        _1092 = _779;
        _1093 = _779;
        _1094 = _779;
        _1095 = _779;
        _1096 = _779;
        _1097 = _779;
        _1098 = _779;
        _1099 = _779;
        _1100 = _779;
        _1101 = _779;
        _1102 = _779;
        _1103 = 0.0;
        _1104 = 0.0;
        _1105 = 0.0;
    }
    float _1115 = (cbModelParam._m0[1u].x * (_1103 - _791)) + _791;
    float _1116 = (cbModelParam._m0[1u].x * (_1104 - _792)) + _792;
    float _1117 = (cbModelParam._m0[1u].x * (_1105 - _793)) + _793;
    float _1138 = fma(_1117, cbSceneParam._m0[89u].z, fma(_1116, cbSceneParam._m0[89u].y, _1115 * cbSceneParam._m0[89u].x));
    float _1141 = fma(_1117, cbSceneParam._m0[90u].z, fma(_1116, cbSceneParam._m0[90u].y, _1115 * cbSceneParam._m0[90u].x));
    float _1144 = fma(_1117, cbSceneParam._m0[91u].z, fma(_1116, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1115));
    float _1159 = _415 * 0.5;
    float _1160 = _416 * 0.5;
    float _1161 = _417 * 0.5;
    float _1162 = dot(vec4(_1159, _1160, _1161, 1.0), vec4(_1093, _1096, _1099, _1102));
    float _1165 = dot(vec4(_1159, _1160, _1161, 1.0), vec4(_1092, _1095, _1098, _1101));
    float _1168 = dot(vec4(_1159, _1160, _1161, 1.0), vec4(_1091, _1094, _1097, _1100));
    float _1202;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1175 = dot(vec4(_1159, _1160, _1161, 1.0), vec4(_778, _782, _785, _788));
        float _1179 = dot(vec4(_1159, _1160, _1161, 1.0), vec4(_780, _783, _786, _789));
        float _1183 = dot(vec4(_1159, _1160, _1161, 1.0), vec4(_781, _784, _787, _790));
        float _1190 = dot(vec4(cbModelParam._m0[39u]), vec4(_1159, _1160, _1161, 1.0));
        _1202 = dot(vec3(isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)), isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)), isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1190) ? 0.0 : (isnan(0.0) ? _1190 : max(0.0, _1190))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1202 = 1.0;
    }
    float _1213;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1204 = dot(vec4(cbModelParam._m0[40u]), vec4(_1159, _1160, _1161, 1.0));
        _1213 = dot(vec3(isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)), isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)), isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1204) ? 0.0 : (isnan(0.0) ? _1204 : max(0.0, _1204))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1213 = 1.0;
    }
    float _1217 = (_1213 * cbModelParam._m0[1u].x) + (_1202 * (1.0 - cbModelParam._m0[1u].x));
    float _1226 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1308;
    float _1310;
    float _1312;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1275 = fma(_447, cbModelParam._m0[13u].z, fma(_443, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _439)) + cbModelParam._m0[13u].w;
        float _1279 = fma(_447, cbModelParam._m0[14u].z, fma(_443, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _439)) + cbModelParam._m0[14u].w;
        float _1283 = fma(_447, cbModelParam._m0[15u].z, fma(_443, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _439)) + cbModelParam._m0[15u].w;
        float _1286 = fma(_417, cbModelParam._m0[13u].z, fma(_416, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _415));
        float _1289 = fma(_417, cbModelParam._m0[14u].z, fma(_416, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _415));
        float _1292 = fma(_417, cbModelParam._m0[15u].z, fma(_416, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _415));
        float _1318;
        if (_1286 > 0.0)
        {
            _1318 = abs((1.0 - _1275) / _1286);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1286 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1275 + 1.0) / _1286);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1318 = frontier_phi_17_15_ladder;
        }
        float _1525;
        if (_1289 > 0.0)
        {
            _1525 = abs((1.0 - _1279) / _1289);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1289 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1279 + 1.0) / _1289);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1525 = frontier_phi_26_22_ladder;
        }
        float _1714;
        if (_1292 > 0.0)
        {
            _1714 = abs((1.0 - _1283) / _1292);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1292 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1283 + 1.0) / _1292);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1714 = frontier_phi_38_33_ladder;
        }
        float _1716 = isnan(_1525) ? _1318 : (isnan(_1318) ? _1525 : min(_1318, _1525));
        float _1717 = isnan(_1714) ? _1716 : (isnan(_1716) ? _1714 : min(_1716, _1714));
        float _1721 = (_1717 * _1286) + _1275;
        float _1722 = (_1717 * _1289) + _1279;
        float _1723 = (_1717 * _1292) + _1283;
        float _1724 = _1717 * 9.9999997473787516355514526367188e-05;
        float _1726 = (-1.0) - _1724;
        float _1728 = _1724 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1723 > _1728) || ((_1723 < _1726) || ((_1722 > _1728) || ((_1722 < _1726) || ((_1721 < _1726) || (_1721 > _1728))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1820 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1723, cbModelParam._m0[9u].z, fma(_1722, cbModelParam._m0[9u].y, _1721 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1723, cbModelParam._m0[10u].z, fma(_1722, cbModelParam._m0[10u].y, _1721 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1723, cbModelParam._m0[11u].z, fma(_1722, cbModelParam._m0[11u].y, _1721 * cbModelParam._m0[11u].x))), _1226);
            frontier_phi_16_38_ladder = _1820.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1820.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1820.x * cbModelParam._m0[1u].y;
        }
        _1308 = frontier_phi_16_38_ladder_2;
        _1310 = frontier_phi_16_38_ladder_1;
        _1312 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1296 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_415, _416, _417), _1226);
        _1308 = _1296.x * cbModelParam._m0[1u].y;
        _1310 = _1296.y * cbModelParam._m0[1u].y;
        _1312 = _1296.z * cbModelParam._m0[1u].y;
    }
    float _1315 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1408;
    float _1410;
    float _1412;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1372 = fma(_447, cbModelParam._m0[21u].z, fma(_443, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _439)) + cbModelParam._m0[21u].w;
        float _1376 = fma(_447, cbModelParam._m0[22u].z, fma(_443, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _439)) + cbModelParam._m0[22u].w;
        float _1380 = fma(_447, cbModelParam._m0[23u].z, fma(_443, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _439)) + cbModelParam._m0[23u].w;
        float _1383 = fma(_417, cbModelParam._m0[21u].z, fma(_416, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _415));
        float _1386 = fma(_417, cbModelParam._m0[22u].z, fma(_416, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _415));
        float _1389 = fma(_417, cbModelParam._m0[23u].z, fma(_416, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _415));
        float _1530;
        if (_1383 > 0.0)
        {
            _1530 = abs((1.0 - _1372) / _1383);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1383 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1372 + 1.0) / _1383);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1530 = frontier_phi_28_24_ladder;
        }
        float _1741;
        if (_1386 > 0.0)
        {
            _1741 = abs((1.0 - _1376) / _1386);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1386 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1376 + 1.0) / _1386);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1741 = frontier_phi_40_35_ladder;
        }
        float _1892;
        if (_1389 > 0.0)
        {
            _1892 = abs((1.0 - _1380) / _1389);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1389 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1380 + 1.0) / _1389);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _1892 = frontier_phi_49_46_ladder;
        }
        float _1894 = isnan(_1741) ? _1530 : (isnan(_1530) ? _1741 : min(_1530, _1741));
        float _1895 = isnan(_1892) ? _1894 : (isnan(_1894) ? _1892 : min(_1894, _1892));
        float _1899 = (_1895 * _1383) + _1372;
        float _1900 = (_1895 * _1386) + _1376;
        float _1901 = (_1895 * _1389) + _1380;
        float _1902 = _1895 * 9.9999997473787516355514526367188e-05;
        float _1903 = (-1.0) - _1902;
        float _1905 = _1902 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1901 > _1905) || ((_1901 < _1903) || ((_1900 > _1905) || ((_1900 < _1903) || ((_1899 < _1903) || (_1899 > _1905))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2129 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1901, cbModelParam._m0[17u].z, fma(_1900, cbModelParam._m0[17u].y, _1899 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1901, cbModelParam._m0[18u].z, fma(_1900, cbModelParam._m0[18u].y, _1899 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1901, cbModelParam._m0[19u].z, fma(_1900, cbModelParam._m0[19u].y, _1899 * cbModelParam._m0[19u].x))), _1315);
            frontier_phi_25_49_ladder = _2129.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2129.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2129.x * cbModelParam._m0[1u].z;
        }
        _1408 = frontier_phi_25_49_ladder_2;
        _1410 = frontier_phi_25_49_ladder_1;
        _1412 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1392 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_415, _416, _417), _1315);
        _1408 = _1392.x * cbModelParam._m0[1u].z;
        _1410 = _1392.y * cbModelParam._m0[1u].z;
        _1412 = _1392.z * cbModelParam._m0[1u].z;
    }
    float _1424 = _406 * 0.01200000010430812835693359375;
    float _1426 = _1424 * ((cbModelParam._m0[1u].w * (_1408 - _1308)) + _1308);
    float _1427 = _1424 * ((cbModelParam._m0[1u].w * (_1410 - _1310)) + _1310);
    float _1428 = _1424 * ((cbModelParam._m0[1u].w * (_1412 - _1312)) + _1312);
    float _1431 = fma(_1428, cbSceneParam._m0[89u].z, fma(_1427, cbSceneParam._m0[89u].y, _1426 * cbSceneParam._m0[89u].x));
    float _1434 = fma(_1428, cbSceneParam._m0[90u].z, fma(_1427, cbSceneParam._m0[90u].y, _1426 * cbSceneParam._m0[90u].x));
    float _1437 = fma(_1428, cbSceneParam._m0[91u].z, fma(_1427, cbSceneParam._m0[91u].y, _1426 * cbSceneParam._m0[91u].x));
    uvec4 _1447 = floatBitsToUint(cbInstanceData._m0[_381 + 5u]);
    uint _1449 = _1447.x * 14u;
    uint _1450 = _1449 + 13u;
    float _1457 = _406 + (-1.0);
    float _1463 = (cbLight._m0[_1450].x * _1457) + 1.0;
    float _1464 = (cbLight._m0[_1450].y * _1457) + 1.0;
    float _1465 = (cbLight._m0[_1450].z * _1457) + 1.0;
    float _1466 = (cbLight._m0[_1450].w * _1457) + 1.0;
    uint _1467 = _1449 + 5u;
    float _1473 = isnan(1.0) ? _1464 : (isnan(_1464) ? 1.0 : min(_1464, 1.0));
    uint _1477 = _1449 + 4u;
    float _1484 = isnan(1.0) ? _1463 : (isnan(_1463) ? 1.0 : min(_1463, 1.0));
    uint _1488 = _1449 | 1u;
    float _1499 = dot(vec3(cbLight._m0[_1449].xyz), vec3(_240, _241, _242));
    float _1502 = dot(vec3(cbLight._m0[_1488].xyz), vec3(_240, _241, _242));
    float _3449 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
    float _3460 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
    float _1507 = (isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0))) * 0.3183098733425140380859375;
    float _1509 = (isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0))) * 0.3183098733425140380859375;
    float _1516 = ((cbLight._m0[_1467].x * _1473) * _1509) + ((cbLight._m0[_1477].x * _1484) * _1507);
    float _1517 = ((_1473 * cbLight._m0[_1467].y) * _1509) + ((_1484 * cbLight._m0[_1477].y) * _1507);
    float _1518 = ((_1473 * cbLight._m0[_1467].z) * _1509) + ((_1484 * cbLight._m0[_1477].z) * _1507);
    uvec4 _1522 = floatBitsToUint(cbLight._m0[_1449 + 12u]);
    bool _1524 = _1522.x == 0u;
    float _1535;
    float _1537;
    float _1539;
    if (_1524)
    {
        _1535 = _1516;
        _1537 = _1517;
        _1539 = _1518;
    }
    else
    {
        uint _1543 = _1449 + 6u;
        float _1559 = (dot(vec3(cbLight._m0[_1449 + 2u].xyz), vec3(_240, _241, _242)) * 0.5) + 0.5;
        float _1560 = _1559 * _1559;
        float _3471 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
        float _1562 = isnan(1.0) ? _1465 : (isnan(_1465) ? 1.0 : min(_1465, 1.0));
        _1535 = (((cbLight._m0[_1543].x * 0.3183098733425140380859375) * _1561) * _1562) + _1516;
        _1537 = (((cbLight._m0[_1543].y * 0.3183098733425140380859375) * _1561) * _1562) + _1517;
        _1539 = (((cbLight._m0[_1543].z * 0.3183098733425140380859375) * _1561) * _1562) + _1518;
    }
    bool _1542 = _1522.y == 0u;
    float _1580;
    float _1582;
    float _1584;
    if (_1542)
    {
        _1580 = _1535;
        _1582 = _1537;
        _1584 = _1539;
    }
    else
    {
        uint _1685 = _1449 + 7u;
        float _1701 = (dot(vec3(cbLight._m0[_1449 + 3u].xyz), vec3(_240, _241, _242)) * 0.5) + 0.5;
        float _1702 = _1701 * _1701;
        float _3487 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
        float _1704 = isnan(1.0) ? _1466 : (isnan(_1466) ? 1.0 : min(_1466, 1.0));
        _1580 = (((cbLight._m0[_1685].x * 0.3183098733425140380859375) * _1703) * _1704) + _1535;
        _1582 = (((cbLight._m0[_1685].y * 0.3183098733425140380859375) * _1703) * _1704) + _1537;
        _1584 = (((cbLight._m0[_1685].z * 0.3183098733425140380859375) * _1703) * _1704) + _1539;
    }
    uint _1586 = _1449 + 8u;
    float _1592 = cbLight._m0[_1449].x + _320;
    float _1593 = cbLight._m0[_1449].y + _321;
    float _1594 = cbLight._m0[_1449].z + _322;
    float _1598 = inversesqrt(dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594)));
    float _1602 = dot(vec3(_240, _241, _242), vec3(cbLight._m0[_1449].xyz));
    float _3503 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
    float _1605 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
    float _3514 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _1606 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
    float _1607 = dot(vec3(cbLight._m0[_1449].xyz), vec3(_1592 * _1598, _1593 * _1598, _1594 * _1598));
    float _3525 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
    float _1618 = (exp2(log2(1.0 - (isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1624 = (0.5 / ((_1605 + 9.9999999392252902907785028219223e-09) + _1606)) * _1605;
    float _3536 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
    float _1626 = (isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0))) * 0.31831014156341552734375;
    uint _1637 = _1449 + 9u;
    float _1643 = cbLight._m0[_1488].x + _320;
    float _1644 = cbLight._m0[_1488].y + _321;
    float _1645 = cbLight._m0[_1488].z + _322;
    float _1649 = inversesqrt(dot(vec3(_1643, _1644, _1645), vec3(_1643, _1644, _1645)));
    float _1653 = dot(vec3(_240, _241, _242), vec3(cbLight._m0[_1488].xyz));
    float _3547 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
    float _1656 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
    float _1657 = dot(vec3(cbLight._m0[_1488].xyz), vec3(_1643 * _1649, _1644 * _1649, _1645 * _1649));
    float _3558 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
    float _1666 = (exp2(log2(1.0 - (isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1670 = (0.5 / ((_1656 + 9.9999999392252902907785028219223e-09) + _1606)) * _1656;
    float _3569 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
    float _1672 = (isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))) * 0.31831014156341552734375;
    float _1682 = (((_1666 * cbLight._m0[_1637].x) * _1672) * _1473) + (((_1618 * cbLight._m0[_1586].x) * _1626) * _1484);
    float _1683 = (((_1666 * cbLight._m0[_1637].y) * _1672) * _1473) + (((_1618 * cbLight._m0[_1586].y) * _1626) * _1484);
    float _1684 = (((_1666 * cbLight._m0[_1637].z) * _1672) * _1473) + (((_1618 * cbLight._m0[_1586].z) * _1626) * _1484);
    float _1746;
    float _1748;
    float _1750;
    if (_1524)
    {
        _1746 = _1682;
        _1748 = _1683;
        _1750 = _1684;
    }
    else
    {
        uint _1752 = _1449 + 10u;
        uint _1758 = _1449 + 2u;
        float _1764 = cbLight._m0[_1758].x + _320;
        float _1765 = cbLight._m0[_1758].y + _321;
        float _1766 = cbLight._m0[_1758].z + _322;
        float _1770 = inversesqrt(dot(vec3(_1764, _1765, _1766), vec3(_1764, _1765, _1766)));
        float _1774 = dot(vec3(_240, _241, _242), vec3(cbLight._m0[_1758].xyz));
        float _3580 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1777 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _1778 = dot(vec3(cbLight._m0[_1758].xyz), vec3(_1764 * _1770, _1765 * _1770, _1766 * _1770));
        float _3591 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1787 = (exp2(log2(1.0 - (isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1791 = (0.5 / ((_1777 + 9.9999999392252902907785028219223e-09) + _1606)) * _1777;
        float _3602 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1793 = (isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) * 0.31831014156341552734375;
        float _1794 = isnan(1.0) ? _1465 : (isnan(_1465) ? 1.0 : min(_1465, 1.0));
        _1746 = (((_1787 * cbLight._m0[_1752].x) * _1793) * _1794) + _1682;
        _1748 = (((_1787 * cbLight._m0[_1752].y) * _1793) * _1794) + _1683;
        _1750 = (((_1787 * cbLight._m0[_1752].z) * _1793) * _1794) + _1684;
    }
    float _1829;
    float _1831;
    float _1833;
    if (_1542)
    {
        _1829 = _1746;
        _1831 = _1748;
        _1833 = _1750;
    }
    else
    {
        uint _1840 = _1449 + 11u;
        uint _1846 = _1449 + 3u;
        float _1852 = cbLight._m0[_1846].x + _320;
        float _1853 = cbLight._m0[_1846].y + _321;
        float _1854 = cbLight._m0[_1846].z + _322;
        float _1858 = inversesqrt(dot(vec3(_1852, _1853, _1854), vec3(_1852, _1853, _1854)));
        float _1862 = dot(vec3(_240, _241, _242), vec3(cbLight._m0[_1846].xyz));
        float _3618 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1865 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1866 = dot(vec3(cbLight._m0[_1846].xyz), vec3(_1852 * _1858, _1853 * _1858, _1854 * _1858));
        float _3629 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
        float _1875 = (exp2(log2(1.0 - (isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1879 = (0.5 / ((_1865 + 9.9999999392252902907785028219223e-09) + _1606)) * _1865;
        float _3640 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
        float _1881 = (isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * 0.31831014156341552734375;
        float _1882 = isnan(1.0) ? _1466 : (isnan(_1466) ? 1.0 : min(_1466, 1.0));
        _1829 = (((_1875 * cbLight._m0[_1840].x) * _1881) * _1882) + _1746;
        _1831 = (((_1875 * cbLight._m0[_1840].y) * _1881) * _1882) + _1748;
        _1833 = (((_1875 * cbLight._m0[_1840].z) * _1881) * _1882) + _1750;
    }
    float _2017;
    float _2019;
    float _2021;
    float _2023;
    float _2025;
    float _2027;
    if (_1447.y == 0u)
    {
        float _1957 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1958 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1957;
        float _1959 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1957;
        float _1960 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1957;
        uvec4 _1972 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1973 = _1972.x;
        uint _1984 = uint((float(_1972.y) * floor(float(uint(cbSceneParam._m0[85u].y * _342) / _1973))) + floor(float(uint(cbSceneParam._m0[85u].x * _341) / _1973)));
        float _1994 = (log2(_1960 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1995 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
        uint _1998 = uint(isnan(14.0) ? _1995 : (isnan(_1995) ? 14.0 : min(_1995, 14.0)));
        uvec4 _2003 = texelFetch(g_lightClusterGridBuffer, int(((_1998 << 2u) + (_1984 << 6u)) >> 2u));
        uint _2004 = _2003.x;
        uint _2005 = _1972.z;
        float _2134;
        float _2136;
        float _2138;
        float _2140;
        float _2142;
        float _2144;
        if (((((1u << ((_2005 >> 4u) & 15u)) + 4294967295u) & _2004) == 0u) || ((_2005 & 240u) == 0u))
        {
            _2134 = 0.0;
            _2136 = 0.0;
            _2138 = 0.0;
            _2140 = 0.0;
            _2142 = 0.0;
            _2144 = 0.0;
        }
        else
        {
            float _2135;
            float _2137;
            float _2139;
            float _2141;
            float _2143;
            float _2145;
            float _2295 = 0.0;
            float _2296 = 0.0;
            float _2297 = 0.0;
            float _2298 = 0.0;
            float _2299 = 0.0;
            float _2300 = 0.0;
            uint _2301 = 0u;
            uint _2310;
            bool _2311;
            for (;;)
            {
                _2310 = texelFetch(g_lightClassification, int((((_1998 << 5u) + (_1984 << 9u)) + (_2301 << 2u)) >> 2u)).x;
                _2311 = _2310 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2311)
                {
                    frontier_phi_66_pred = _2295;
                    frontier_phi_66_pred_1 = _2300;
                    frontier_phi_66_pred_2 = _2299;
                    frontier_phi_66_pred_3 = _2298;
                    frontier_phi_66_pred_4 = _2297;
                    frontier_phi_66_pred_5 = _2296;
                }
                else
                {
                    float _2440;
                    float _2441;
                    float _2442;
                    float _2443;
                    float _2444;
                    float _2445;
                    uint _2446;
                    _2440 = _2295;
                    _2441 = _2296;
                    _2442 = _2297;
                    _2443 = _2298;
                    _2444 = _2299;
                    _2445 = _2300;
                    _2446 = _2310;
                    float _2367;
                    float _2368;
                    float _2369;
                    float _2370;
                    float _2371;
                    float _2372;
                    for (;;)
                    {
                        uint _2450 = uint(findLSB(_2446)) + (_2301 << 5u);
                        uint _2447 = (_2446 + 4294967295u) & _2446;
                        uint _2452 = _2450 * 48u;
                        vec4 _2466 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2452)).x, texelFetch(g_PointLightRenderingBuffer, int(_2452 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2452 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2452 + 3u)).x));
                        uint _2472 = (_2450 * 48u) + 4u;
                        vec4 _2485 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2472)).x, texelFetch(g_PointLightRenderingBuffer, int(_2472 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2472 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2472 + 3u)).x));
                        uint _2491 = (_2450 * 48u) + 8u;
                        vec3 _2502 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2491)).x, texelFetch(g_PointLightRenderingBuffer, int(_2491 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2491 + 2u)).x));
                        float _2506 = _2466.x - _1958;
                        float _2507 = _2466.y - _1959;
                        float _2508 = _2466.z - _1960;
                        float _2509 = dot(vec3(_2506, _2507, _2508), vec3(_2506, _2507, _2508));
                        float _2512 = inversesqrt(_2509);
                        float _2521 = 1.0 - (_2509 * _2466.w);
                        float _3666 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
                        float _2522 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
                        float _2523 = sqrt(_2509) * _2485.w;
                        float _2526 = 1.39999997615814208984375 / (_2523 + 1.39999997615814208984375);
                        float _2527 = _2526 * _2526;
                        float _2530 = ((1.0 - _2527) * dot(vec3(_362, _365, _368), vec3(_2512 * _2506, _2512 * _2507, _2512 * _2508))) + _2527;
                        float _2533 = _2523 * _2523;
                        float _2537 = ((isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0))) * _2522) / ((_2533 * 0.699999988079071044921875) + 1.0);
                        float _2541 = (-0.0) - _1958;
                        float _2542 = (-0.0) - _1959;
                        float _2543 = (-0.0) - _1960;
                        float _2547 = inversesqrt(dot(vec3(_2541, _2542, _2543), vec3(_2541, _2542, _2543)));
                        float _2551 = dot(vec3(_362, _365, _368), vec3(_2547 * _2541, _2547 * _2542, _2547 * _2543));
                        float _3682 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
                        float _3693 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
                        float _2555 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
                        float _2559 = (0.5 / (((isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) + 9.9999999392252902907785028219223e-09) + _2555)) * _2555;
                        float _3704 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
                        float _2568 = (((isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * 3.1415927410125732421875) / ((_2533 * 2.1991131305694580078125) + 3.141590118408203125)) * _2522;
                        _2370 = (_2537 * _2485.x) + _2443;
                        _2371 = (_2537 * _2485.y) + _2444;
                        _2372 = (_2537 * _2485.z) + _2445;
                        _2367 = (_2568 * _2502.x) + _2440;
                        _2368 = (_2568 * _2502.y) + _2441;
                        _2369 = (_2568 * _2502.z) + _2442;
                        if (_2447 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2440 = _2367;
                            _2441 = _2368;
                            _2442 = _2369;
                            _2443 = _2370;
                            _2444 = _2371;
                            _2445 = _2372;
                            _2446 = _2447;
                        }
                    }
                    frontier_phi_66_pred = _2367;
                    frontier_phi_66_pred_1 = _2372;
                    frontier_phi_66_pred_2 = _2371;
                    frontier_phi_66_pred_3 = _2370;
                    frontier_phi_66_pred_4 = _2369;
                    frontier_phi_66_pred_5 = _2368;
                }
                _2135 = frontier_phi_66_pred;
                _2145 = frontier_phi_66_pred_1;
                _2143 = frontier_phi_66_pred_2;
                _2141 = frontier_phi_66_pred_3;
                _2139 = frontier_phi_66_pred_4;
                _2137 = frontier_phi_66_pred_5;
                uint _2302 = _2301 + 1u;
                if (_2302 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2295 = _2135;
                    _2296 = _2137;
                    _2297 = _2139;
                    _2298 = _2141;
                    _2299 = _2143;
                    _2300 = _2145;
                    _2301 = _2302;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2134 = _2135;
            _2136 = _2137;
            _2138 = _2139;
            _2140 = _2141;
            _2142 = _2143;
            _2144 = _2145;
        }
        uvec4 _2148 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2149 = _2148.z;
        uint _2151 = (_2149 >> 8u) & 15u;
        float _2266;
        float _2268;
        float _2270;
        float _2272;
        float _2274;
        float _2276;
        if (((4294967295u << _2151) & _2004) == 0u)
        {
            _2266 = _2134;
            _2268 = _2136;
            _2270 = _2138;
            _2272 = _2140;
            _2274 = _2142;
            _2276 = _2144;
        }
        else
        {
            float _2291 = inversesqrt(dot(vec3(_1958, _1959, _1960), vec3(_1958, _1959, _1960)));
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2151 < ((_2149 >> 12u) & 15u))
            {
                float _2267;
                float _2269;
                float _2271;
                float _2273;
                float _2275;
                float _2277;
                float _2423 = _2134;
                float _2424 = _2136;
                float _2425 = _2138;
                float _2426 = _2140;
                float _2427 = _2142;
                float _2428 = _2144;
                uint _2429 = _2151;
                uint _2438;
                bool _2439;
                for (;;)
                {
                    _2438 = texelFetch(g_lightClassification, int((((_1998 << 5u) + (_1984 << 9u)) + (_2429 << 2u)) >> 2u)).x;
                    _2439 = _2438 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2439)
                    {
                        frontier_phi_77_pred = _2428;
                        frontier_phi_77_pred_1 = _2427;
                        frontier_phi_77_pred_2 = _2426;
                        frontier_phi_77_pred_3 = _2425;
                        frontier_phi_77_pred_4 = _2424;
                        frontier_phi_77_pred_5 = _2423;
                    }
                    else
                    {
                        float _2582;
                        float _2583;
                        float _2584;
                        float _2585;
                        float _2586;
                        float _2587;
                        float _2834;
                        float _2835;
                        float _2836;
                        float _2837;
                        float _2838;
                        float _2839;
                        float _2595 = _2423;
                        float _2596 = _2424;
                        float _2597 = _2425;
                        float _2598 = _2426;
                        float _2599 = _2427;
                        float _2600 = _2428;
                        uint _2601 = _2438;
                        uint _2602;
                        vec4 _2627;
                        float _2628;
                        vec4 _2643;
                        vec3 _2655;
                        vec4 _2671;
                        vec4 _2687;
                        float _2734;
                        bool _2735;
                        for (;;)
                        {
                            uint _2612 = ((_2429 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2601));
                            _2602 = (_2601 + 4294967295u) & _2601;
                            uint _2614 = _2612 * 40u;
                            _2627 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2614)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2614 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2614 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2614 + 3u)).x));
                            _2628 = _2627.w;
                            uint _2630 = (_2612 * 40u) + 4u;
                            _2643 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2630 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2630 + 3u)).x));
                            uint _2645 = (_2612 * 40u) + 8u;
                            _2655 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2645)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2645 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2645 + 2u)).x));
                            uint _2658 = (_2612 * 40u) + 16u;
                            _2671 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2658 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2658 + 3u)).x));
                            uint _2674 = (_2612 * 40u) + 20u;
                            _2687 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2674)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2674 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2674 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2674 + 3u)).x));
                            uint _2690 = (_2612 * 40u) + 24u;
                            vec4 _2703 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2690)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2690 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2690 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2690 + 3u)).x));
                            uint _2709 = (_2612 * 40u) + 28u;
                            vec4 _2722 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2709)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 3u)).x));
                            _2734 = fma(_1960, _2722.z, fma(_1959, _2722.y, _2722.x * _1958)) + _2722.w;
                            _2735 = !((fma(_1960, _2703.z, fma(_1959, _2703.y, _2703.x * _1958)) + _2703.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2735)
                            {
                                float _2762 = _2627.x - _1958;
                                float _2763 = _2627.y - _1959;
                                float _2764 = _2627.z - _1960;
                                float _2765 = dot(vec3(_2762, _2763, _2764), vec3(_2762, _2763, _2764));
                                float _2768 = inversesqrt(_2765);
                                float _2769 = _2768 * _2762;
                                float _2770 = _2768 * _2763;
                                float _2771 = _2768 * _2764;
                                float _2775 = 1.0 - (_2765 / (_2628 * _2628));
                                float _3715 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
                                float _2776 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
                                float _2780 = sqrt(_2765) * _2643.w;
                                float _2782 = 1.39999997615814208984375 / (_2780 + 1.39999997615814208984375);
                                float _2783 = _2782 * _2782;
                                float _2784 = 1.0 - _2783;
                                float _2786 = (_2784 * dot(vec3(_2769, _2770, _2771), vec3(_362, _365, _368))) + _2783;
                                float _2789 = _2780 * _2780;
                                float _2793 = (fma(_1960, _2671.z, fma(_1959, _2671.y, _2671.x * _1958)) + _2671.w) / _2734;
                                float _2794 = (fma(_1960, _2687.z, fma(_1959, _2687.y, _2687.x * _1958)) + _2687.w) / _2734;
                                float _2798 = 1.0 - dot(vec2(_2793, _2794), vec2(_2793, _2794));
                                float _3731 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
                                float _2799 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
                                float _2800 = _2799 * (((isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0))) * _2776) / ((_2789 * 0.699999988079071044921875) + 1.0));
                                float _2810 = dot(vec3(_362, _365, _368), vec3((-0.0) - (_1958 * _2291), (-0.0) - (_1959 * _2291), (-0.0) - (_1960 * _2291)));
                                float _3742 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
                                float _2818 = (_2784 * dot(vec3(_362, _365, _368), vec3(_2769, _2770, _2771))) + _2783;
                                float _3753 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
                                float _2819 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
                                float _2823 = (0.5 / (((isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) + 9.9999999392252902907785028219223e-09) + _2819)) * _2819;
                                float _3764 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
                                float _2830 = (_2799 * _2776) * (((isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * 3.1415927410125732421875) / ((_2789 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2800 * _2643.y;
                                frontier_phi_83_pred_1 = _2800 * _2643.x;
                                frontier_phi_83_pred_2 = _2830 * _2655.z;
                                frontier_phi_83_pred_3 = _2830 * _2655.y;
                                frontier_phi_83_pred_4 = _2830 * _2655.x;
                                frontier_phi_83_pred_5 = _2800 * _2643.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2838 = frontier_phi_83_pred;
                            _2837 = frontier_phi_83_pred_1;
                            _2836 = frontier_phi_83_pred_2;
                            _2835 = frontier_phi_83_pred_3;
                            _2834 = frontier_phi_83_pred_4;
                            _2839 = frontier_phi_83_pred_5;
                            _2585 = _2837 + _2598;
                            _2586 = _2838 + _2599;
                            _2587 = _2839 + _2600;
                            _2582 = _2834 + _2595;
                            _2583 = _2835 + _2596;
                            _2584 = _2836 + _2597;
                            if (_2602 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2595 = _2582;
                                _2596 = _2583;
                                _2597 = _2584;
                                _2598 = _2585;
                                _2599 = _2586;
                                _2600 = _2587;
                                _2601 = _2602;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2587;
                        frontier_phi_77_pred_1 = _2586;
                        frontier_phi_77_pred_2 = _2585;
                        frontier_phi_77_pred_3 = _2584;
                        frontier_phi_77_pred_4 = _2583;
                        frontier_phi_77_pred_5 = _2582;
                    }
                    _2277 = frontier_phi_77_pred;
                    _2275 = frontier_phi_77_pred_1;
                    _2273 = frontier_phi_77_pred_2;
                    _2271 = frontier_phi_77_pred_3;
                    _2269 = frontier_phi_77_pred_4;
                    _2267 = frontier_phi_77_pred_5;
                    uint _2430 = _2429 + 1u;
                    if (_2430 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2423 = _2267;
                        _2424 = _2269;
                        _2425 = _2271;
                        _2426 = _2273;
                        _2427 = _2275;
                        _2428 = _2277;
                        _2429 = _2430;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2271;
                frontier_phi_58_59_ladder_1 = _2277;
                frontier_phi_58_59_ladder_2 = _2275;
                frontier_phi_58_59_ladder_3 = _2273;
                frontier_phi_58_59_ladder_4 = _2269;
                frontier_phi_58_59_ladder_5 = _2267;
            }
            else
            {
                frontier_phi_58_59_ladder = _2138;
                frontier_phi_58_59_ladder_1 = _2144;
                frontier_phi_58_59_ladder_2 = _2142;
                frontier_phi_58_59_ladder_3 = _2140;
                frontier_phi_58_59_ladder_4 = _2136;
                frontier_phi_58_59_ladder_5 = _2134;
            }
            _2266 = frontier_phi_58_59_ladder_5;
            _2268 = frontier_phi_58_59_ladder_4;
            _2270 = frontier_phi_58_59_ladder;
            _2272 = frontier_phi_58_59_ladder_3;
            _2274 = frontier_phi_58_59_ladder_2;
            _2276 = frontier_phi_58_59_ladder_1;
        }
        float _2281 = isnan(1.0) ? _406 : (isnan(_406) ? 1.0 : min(_406, 1.0));
        _2017 = (_2281 * _2272) + _1580;
        _2019 = (_2281 * _2274) + _1582;
        _2021 = (_2281 * _2276) + _1584;
        _2023 = ((_2266 * 0.039999999105930328369140625) * _2281) + _1829;
        _2025 = ((_2268 * 0.039999999105930328369140625) * _2281) + _1831;
        _2027 = ((_2270 * 0.039999999105930328369140625) * _2281) + _1833;
    }
    else
    {
        _2017 = _1580;
        _2019 = _1582;
        _2021 = _1584;
        _2023 = _1829;
        _2025 = _1831;
        _2027 = _1833;
    }
    uint _2033 = _382 + uint(cbMatDynParam._m0[0u].w);
    float _2039 = cbInstanceData._m0[_2033].x * (((cbMtdParam._m0[12u].x * cbMtdParam._m0[9u].x) * _216.x) + cbMtdParam._m0[11u].x);
    float _2040 = cbInstanceData._m0[_2033].y * (((cbMtdParam._m0[12u].x * cbMtdParam._m0[9u].y) * _216.y) + cbMtdParam._m0[11u].y);
    float _2041 = cbInstanceData._m0[_2033].z * (cbMtdParam._m0[11u].z + ((cbMtdParam._m0[12u].x * cbMtdParam._m0[9u].z) * _216.z));
    float _3780 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _3791 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _3802 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _2058 = (((isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * (_2017 + ((isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0))) * _406))) + ((_2023 + ((isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))) * _1217)) * cbPerFrame._m0[3u].x)) + _2039;
    float _2060 = (_2040 + ((_2025 + ((isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0))) * _1217)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * (_2019 + ((isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0))) * _406)));
    float _2062 = (_2041 + ((_2027 + ((isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0))) * _1217)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * (_2021 + ((isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0))) * _406)));
    float _2063 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2064 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2065 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2071 = cbMtdParam._m0[2u].x * _2039;
    float _2072 = cbMtdParam._m0[2u].y * _2040;
    float _2073 = cbMtdParam._m0[2u].z * _2041;
    float _3828 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2075 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    uint _2076 = _381 + 6u;
    float _2084 = _341 / cbSceneParam._m0[86u].x;
    float _2085 = _342 / cbSceneParam._m0[86u].y;
    vec4 _2099 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2084, _2085, (log2((isnan(cbSceneParam._m0[77u].w) ? _262 : (isnan(_262) ? cbSceneParam._m0[77u].w : min(_262, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2101 = _2099.x;
    float _2102 = _2099.y;
    float _2103 = _2099.z;
    float _2104 = _2099.w;
    float _2197;
    float _2199;
    float _2201;
    float _2203;
    if (_262 > cbSceneParam._m0[78u].w)
    {
        float _2159 = isnan(_262) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _262 : min(cbSceneParam._m0[80u].w, _262));
        float _2160 = _2159 / _262;
        float _2171 = _2160 * _313;
        float _2172 = _314 * _2160;
        float _2173 = (-0.0) - _2172;
        float _2175 = _2160 * _315;
        float _2177 = (cbSceneParam._m0[77u].w * _2173) / _2159;
        float _2178 = _2177 + cbSceneParam._m0[79u].w;
        float _2179 = cbSceneParam._m0[79u].w - _2172;
        float _2185 = sqrt(((_2171 * _2171) + (_2172 * _2172)) + (_2175 * _2175));
        float _2188 = (1.0 - (cbSceneParam._m0[77u].w / _2159)) * _2185;
        float _2193 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2195 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2380;
        if (abs((_2173 - _2177) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2380 = ((((_2178 > 0.0) ? exp2(_2193 * _2178) : (2.0 - exp2(_2195 * _2178))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2188;
        }
        else
        {
            float _2324 = 1.0 / cbSceneParam._m0[80u].x;
            float _2325 = isnan(_2179) ? _2178 : (isnan(_2178) ? _2179 : max(_2178, _2179));
            float _2326 = isnan(_2179) ? _2178 : (isnan(_2178) ? _2179 : min(_2178, _2179));
            float _2335 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : min(_2325, 0.0));
            float _2336 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : min(_2326, 0.0));
            _2380 = ((abs(_2185 / _2173) * cbSceneParam._m0[80u].y) * ((((_2335 - _2336) * 2.0) - ((exp2(_2193 * (isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0)))) - exp2(_2193 * (isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0))))) * _2324)) - ((exp2(_2195 * _2335) - exp2(_2195 * _2336)) * _2324))) + (_2188 * cbSceneParam._m0[80u].z);
        }
        vec4 _2382 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2084, _2085, 1.0), 0.0);
        float _2391 = exp2((_2380 * (-1.44269502162933349609375)) * (1.0 - _2382.w));
        float _2392 = log2(_2391);
        float _2408 = log2(_2104);
        _2197 = (exp2(_2408 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2392 * cbSceneParam._m0[78u].x)) * _2382.x) / cbSceneParam._m0[78u].x)) + _2101;
        _2199 = (exp2(_2408 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2392 * cbSceneParam._m0[78u].y)) * _2382.y) / cbSceneParam._m0[78u].y)) + _2102;
        _2201 = (exp2(_2408 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2392 * cbSceneParam._m0[78u].z)) * _2382.z) / cbSceneParam._m0[78u].z)) + _2103;
        _2203 = _2391 * _2104;
    }
    else
    {
        _2197 = _2101;
        _2199 = _2102;
        _2201 = _2103;
        _2203 = _2104;
    }
    bool _2418;
    vec4 _2213;
    vec4 _2236;
    float _2238;
    float _2242;
    float _2243;
    float _2244;
    float _2247;
    float _2250;
    float _2253;
    float _2254;
    bool _2265;
    for (;;)
    {
        _2213 = cbMatDynParam._m0[0u];
        float _2215 = roundEven(_2213.y);
        bool _2216 = _2215 == 3.0;
        float _2218 = log2(_2203);
        float _2222 = exp2(_2218 * cbSceneParam._m0[78u].x);
        float _2223 = exp2(_2218 * cbSceneParam._m0[78u].y);
        float _2224 = exp2(_2218 * cbSceneParam._m0[78u].z);
        float _2225 = _2222 * _2063;
        float _2226 = _2223 * _2064;
        float _2227 = _2224 * _2065;
        float _2234 = _329 + (-0.5);
        _2236 = cbMtdParam._m0[1u];
        _2238 = _2236.y * _2234;
        float _2241 = (_2215 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2242 = _2241 * (_2216 ? _2225 : (_2225 + (cbSceneParam._m0[72u].w * _2197)));
        _2243 = _2241 * (_2216 ? _2226 : (_2226 + (cbSceneParam._m0[72u].w * _2199)));
        _2244 = _2241 * (_2216 ? _2227 : (_2227 + (cbSceneParam._m0[72u].w * _2201)));
        _2247 = ((_2071 * _2075) * _2222) * _2241;
        _2250 = ((_2072 * _2075) * _2223) * _2241;
        _2253 = ((_2073 * _2075) * _2224) * _2241;
        _2254 = _2234 * 0.999000012874603271484375;
        _2265 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2265)
        {
            if ((cbInstanceData._m0[_381 + 7u].x + _2254) < 0.5)
            {
                _2418 = true;
                break;
            }
        }
        uint _2359 = _382 + uint(_2213.w);
        if ((cbInstanceData._m0[_2359].w < 1.0) && ((cbInstanceData._m0[_2359].w + _2254) < 0.5))
        {
            _2418 = true;
            break;
        }
        if ((_2238 + 1.0) < _2236.x)
        {
            _2418 = true;
            break;
        }
        _2418 = false;
        break;
    }
    float _2573;
    if (_2418)
    {
        discard_state = true;
        _2573 = 0.0;
    }
    else
    {
        _2573 = cbInstanceData._m0[_2076].w;
    }
    SV_Target.x = _2242;
    SV_Target.y = _2243;
    SV_Target.z = _2244;
    SV_Target.w = _2573;
    SV_Target_1.x = _2247;
    SV_Target_1.y = _2250;
    SV_Target_1.z = _2253;
    SV_Target_1.w = cbInstanceData._m0[_2076].w;
    discard_exit();
}


