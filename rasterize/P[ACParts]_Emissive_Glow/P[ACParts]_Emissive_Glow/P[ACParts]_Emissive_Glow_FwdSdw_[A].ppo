#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _783;
float _3269;
float _3270;
float _3271;
float _3272;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _167 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _168 = _167 * NORMAL.x;
    float _169 = _167 * NORMAL.y;
    float _170 = _167 * NORMAL.z;
    vec4 _190 = texture(sampler2D(P_ACParts_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _196 = _190.x * cbMtdParam._m0[10u].x;
    float _197 = _190.y * cbMtdParam._m0[10u].y;
    float _198 = _190.z * cbMtdParam._m0[10u].z;
    vec4 _220 = texture(sampler2D(P_ACParts_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _243 = inversesqrt(dot(vec3(_168, _169, _170), vec3(_168, _169, _170)));
    float _244 = _243 * _168;
    float _245 = _243 * _169;
    float _246 = _243 * _170;
    float _3281 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _3292 = isnan(0.0) ? _197 : (isnan(_197) ? 0.0 : max(_197, 0.0));
    float _3303 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _266 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _307 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _317 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _307);
    float _318 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _307);
    float _319 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _307);
    float _323 = inversesqrt(dot(vec3(_317, _318, _319), vec3(_317, _318, _319)));
    float _324 = _317 * _323;
    float _325 = _318 * _323;
    float _326 = _319 * _323;
    vec4 _331 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _333 = _331.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _462 = sqrt(((_317 * _317) + (_318 * _318)) + (_319 * _319));
        float _468 = (cbMatDynParam._m0[5u].x * _462) + cbMatDynParam._m0[5u].y;
        float _3314 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
        float _469 = isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0));
        float _473 = (cbMatDynParam._m0[5u].z * _462) + cbMatDynParam._m0[5u].w;
        float _3325 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0))) - _469)) + _469) < ((_333 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _345 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _346 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _366 = fma(_246, cbSceneParam._m0[5u].z, fma(_245, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _244));
    float _369 = fma(_246, cbSceneParam._m0[6u].z, fma(_245, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _244));
    float _372 = fma(_246, cbSceneParam._m0[7u].z, fma(_245, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _244));
    uint _385 = uint(roundEven(NORMAL.w)) * 13u;
    uint _386 = _385 + 9u;
    uint _387 = _386 + uint(cbMatDynParam._m0[0u].w);
    float _393 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0)))) * cbInstanceData._m0[_387].x;
    float _394 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0)))) * cbInstanceData._m0[_387].y;
    float _395 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0)))) * cbInstanceData._m0[_387].z;
    float _3336 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _396 = isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0));
    float _3347 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _397 = isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0));
    float _3358 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _398 = isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0));
    vec4 _407 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _345, cbSceneParam._m0[86u].y * _346));
    float _410 = _407.x * TEXCOORD.z;
    float _411 = dot(vec3(_244, _245, _246), vec3(_324, _325, _326));
    float _414 = _411 * 2.0;
    float _419 = (_414 * _244) - _324;
    float _420 = (_414 * _245) - _325;
    float _421 = (_414 * _246) - _326;
    float _443 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _447 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _451 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _782;
    float _784;
    float _785;
    float _786;
    float _787;
    float _788;
    float _789;
    float _790;
    float _791;
    float _792;
    float _793;
    float _794;
    float _795;
    float _796;
    float _797;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _507 = fma(_451, cbModelParam._m0[26u].z, fma(_447, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _443));
        float _511 = fma(_451, cbModelParam._m0[27u].z, fma(_447, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _443));
        float _515 = fma(_451, cbModelParam._m0[28u].z, fma(_447, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _443));
        float _540 = _443 + _244;
        float _541 = _447 + _245;
        float _542 = _451 + _246;
        float _552 = fma(_542, cbModelParam._m0[26u].z, fma(_541, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _540)) - _507;
        float _553 = fma(_542, cbModelParam._m0[27u].z, fma(_541, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _540)) - _511;
        float _554 = fma(_542, cbModelParam._m0[28u].z, fma(_541, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _540)) - _515;
        float _558 = inversesqrt(dot(vec3(_552, _553, _554), vec3(_552, _553, _554)));
        float _571 = ((_558 * _552) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_507 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _572 = ((_558 * _553) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_511 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _573 = ((_558 * _554) / cbModelParam._m0[34u].z) + ((((((_515 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _576 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_571, _572, _573), 0.0);
        vec4 _583 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_571, _572, _573), 0.0);
        vec4 _590 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_571, _572, _573), 0.0);
        vec4 _597 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_571, _572, _573), 0.0);
        float _610 = exp2((_576.w + (-0.5)) * 20.0) * 2.0;
        float _611 = _610 * (_576.x + (-0.5));
        float _612 = _610 * (_576.y + (-0.5));
        float _613 = _610 * (_576.z + (-0.5));
        float _620 = exp2((_583.w + (-0.5)) * 20.0) * 2.0;
        float _621 = _620 * (_583.x + (-0.5));
        float _622 = _620 * (_583.y + (-0.5));
        float _623 = _620 * (_583.z + (-0.5));
        float _630 = exp2((_590.w + (-0.5)) * 20.0) * 2.0;
        float _631 = _630 * (_590.x + (-0.5));
        float _632 = _630 * (_590.y + (-0.5));
        float _633 = _630 * (_590.z + (-0.5));
        float _640 = exp2((_597.w + (-0.5)) * 20.0) * 2.0;
        float _641 = _640 * (_597.x + (-0.5));
        float _642 = _640 * (_597.y + (-0.5));
        float _643 = _640 * (_597.z + (-0.5));
        float _644 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
        float _645 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
        float _646 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
        float _647 = _611 * 0.5;
        float _648 = _621 * 0.5;
        float _649 = _631 * 0.5;
        float _650 = dot(vec3(_647, _648, _649), vec3(_647, _648, _649));
        float _655 = (_650 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_650);
        float _664 = (dot(vec3(_244, _245, _246), vec3(_655 * _647, _655 * _648, _655 * _649)) + 1.0) * 0.5;
        float _3384 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
        float _674 = sqrt(((_648 * _648) + (_647 * _647)) + (_649 * _649)) / (_644 + 9.9999997473787516355514526367188e-06);
        float _3395 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
        float _675 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
        float _676 = _675 * 2.0;
        float _680 = (1.0 - _675) / (_675 + 1.0);
        float _3406 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
        float _681 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
        float _690 = ((((1.0 - _681) * (_676 + 2.0)) * exp2(log2(isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0))) * (_676 + 1.0))) + _681) * _644;
        float _691 = _612 * 0.5;
        float _692 = _622 * 0.5;
        float _693 = _632 * 0.5;
        float _694 = dot(vec3(_691, _692, _693), vec3(_691, _692, _693));
        float _699 = (_694 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_694);
        float _707 = (dot(vec3(_244, _245, _246), vec3(_699 * _691, _699 * _692, _699 * _693)) + 1.0) * 0.5;
        float _3417 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _716 = sqrt(((_692 * _692) + (_691 * _691)) + (_693 * _693)) / (_645 + 9.9999997473787516355514526367188e-06);
        float _3428 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _717 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
        float _718 = _717 * 2.0;
        float _722 = (1.0 - _717) / (_717 + 1.0);
        float _3439 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _723 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
        float _732 = ((((1.0 - _723) * (_718 + 2.0)) * exp2(log2(isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0))) * (_718 + 1.0))) + _723) * _645;
        float _733 = _613 * 0.5;
        float _734 = _623 * 0.5;
        float _735 = _633 * 0.5;
        float _736 = dot(vec3(_733, _734, _735), vec3(_733, _734, _735));
        float _741 = (_736 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_736);
        float _749 = (dot(vec3(_244, _245, _246), vec3(_741 * _733, _741 * _734, _741 * _735)) + 1.0) * 0.5;
        float _3450 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _758 = sqrt(((_734 * _734) + (_733 * _733)) + (_735 * _735)) / (_646 + 9.9999997473787516355514526367188e-06);
        float _3461 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _759 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
        float _760 = _759 * 2.0;
        float _764 = (1.0 - _759) / (_759 + 1.0);
        float _3472 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _765 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
        float _774 = ((((1.0 - _765) * (_760 + 2.0)) * exp2(log2(isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0))) * (_760 + 1.0))) + _765) * _646;
        _782 = _613;
        _784 = _612;
        _785 = _611;
        _786 = _623;
        _787 = _622;
        _788 = _621;
        _789 = _633;
        _790 = _632;
        _791 = _631;
        _792 = _646;
        _793 = _645;
        _794 = _644;
        _795 = cbModelParam._m0[36u].z * (isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0)));
        _796 = cbModelParam._m0[36u].z * (isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0)));
        _797 = cbModelParam._m0[36u].z * (isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0)));
    }
    else
    {
        _782 = _783;
        _784 = _783;
        _785 = _783;
        _786 = _783;
        _787 = _783;
        _788 = _783;
        _789 = _783;
        _790 = _783;
        _791 = _783;
        _792 = _783;
        _793 = _783;
        _794 = _783;
        _795 = 0.0;
        _796 = 0.0;
        _797 = 0.0;
    }
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _826 = fma(_451, cbModelParam._m0[30u].z, fma(_447, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _443));
        float _830 = fma(_451, cbModelParam._m0[31u].z, fma(_447, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _443));
        float _834 = fma(_451, cbModelParam._m0[32u].z, fma(_447, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _443));
        float _857 = _443 + _244;
        float _858 = _447 + _245;
        float _859 = _451 + _246;
        float _869 = fma(_859, cbModelParam._m0[30u].z, fma(_858, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _857)) - _826;
        float _870 = fma(_859, cbModelParam._m0[31u].z, fma(_858, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _857)) - _830;
        float _871 = fma(_859, cbModelParam._m0[32u].z, fma(_858, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _857)) - _834;
        float _875 = inversesqrt(dot(vec3(_869, _870, _871), vec3(_869, _870, _871)));
        float _888 = ((_875 * _869) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_826 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _889 = ((_875 * _870) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_830 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _890 = ((_875 * _871) / cbModelParam._m0[35u].z) + ((((((_834 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        vec4 _899 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        vec4 _906 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        vec4 _913 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        float _925 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_892.x + (-0.5));
        float _927 = _925 * (_892.y + (-0.5));
        float _928 = _925 * (_892.z + (-0.5));
        float _935 = exp2((_899.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_899.x + (-0.5));
        float _937 = _935 * (_899.y + (-0.5));
        float _938 = _935 * (_899.z + (-0.5));
        float _945 = exp2((_906.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_906.x + (-0.5));
        float _947 = _945 * (_906.y + (-0.5));
        float _948 = _945 * (_906.z + (-0.5));
        float _955 = exp2((_913.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_913.x + (-0.5));
        float _957 = _955 * (_913.y + (-0.5));
        float _958 = _955 * (_913.z + (-0.5));
        float _959 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _960 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _961 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _962 = _926 * 0.5;
        float _963 = _936 * 0.5;
        float _964 = _946 * 0.5;
        float _965 = dot(vec3(_962, _963, _964), vec3(_962, _963, _964));
        float _970 = (_965 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_965);
        float _978 = (dot(vec3(_244, _245, _246), vec3(_970 * _962, _970 * _963, _970 * _964)) + 1.0) * 0.5;
        float _3513 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _987 = sqrt(((_963 * _963) + (_962 * _962)) + (_964 * _964)) / (_959 + 9.9999997473787516355514526367188e-06);
        float _3524 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _989 = _988 * 2.0;
        float _993 = (1.0 - _988) / (_988 + 1.0);
        float _3535 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
        float _1003 = ((((1.0 - _994) * (_989 + 2.0)) * exp2(log2(isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))) * (_989 + 1.0))) + _994) * _959;
        float _1004 = _927 * 0.5;
        float _1005 = _937 * 0.5;
        float _1006 = _947 * 0.5;
        float _1007 = dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006));
        float _1012 = (_1007 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1007);
        float _1020 = (dot(vec3(_244, _245, _246), vec3(_1012 * _1004, _1012 * _1005, _1012 * _1006)) + 1.0) * 0.5;
        float _3546 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1029 = sqrt(((_1005 * _1005) + (_1004 * _1004)) + (_1006 * _1006)) / (_960 + 9.9999997473787516355514526367188e-06);
        float _3557 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _1031 = _1030 * 2.0;
        float _1035 = (1.0 - _1030) / (_1030 + 1.0);
        float _3568 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
        float _1045 = ((((1.0 - _1036) * (_1031 + 2.0)) * exp2(log2(isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) * (_1031 + 1.0))) + _1036) * _960;
        float _1046 = _928 * 0.5;
        float _1047 = _938 * 0.5;
        float _1048 = _948 * 0.5;
        float _1049 = dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048));
        float _1054 = (_1049 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1049);
        float _1062 = (dot(vec3(_244, _245, _246), vec3(_1054 * _1046, _1054 * _1047, _1054 * _1048)) + 1.0) * 0.5;
        float _3579 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1071 = sqrt(((_1047 * _1047) + (_1046 * _1046)) + (_1048 * _1048)) / (_961 + 9.9999997473787516355514526367188e-06);
        float _3590 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _1073 = _1072 * 2.0;
        float _1077 = (1.0 - _1072) / (_1072 + 1.0);
        float _3601 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
        float _1087 = ((((1.0 - _1078) * (_1073 + 2.0)) * exp2(log2(isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))) * (_1073 + 1.0))) + _1078) * _961;
        _1095 = _928;
        _1096 = _927;
        _1097 = _926;
        _1098 = _938;
        _1099 = _937;
        _1100 = _936;
        _1101 = _948;
        _1102 = _947;
        _1103 = _946;
        _1104 = _961;
        _1105 = _960;
        _1106 = _959;
        _1107 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0)));
        _1108 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0)));
        _1109 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0)));
    }
    else
    {
        _1095 = _783;
        _1096 = _783;
        _1097 = _783;
        _1098 = _783;
        _1099 = _783;
        _1100 = _783;
        _1101 = _783;
        _1102 = _783;
        _1103 = _783;
        _1104 = _783;
        _1105 = _783;
        _1106 = _783;
        _1107 = 0.0;
        _1108 = 0.0;
        _1109 = 0.0;
    }
    float _1119 = (cbModelParam._m0[1u].x * (_1107 - _795)) + _795;
    float _1120 = (cbModelParam._m0[1u].x * (_1108 - _796)) + _796;
    float _1121 = (cbModelParam._m0[1u].x * (_1109 - _797)) + _797;
    float _1142 = fma(_1121, cbSceneParam._m0[89u].z, fma(_1120, cbSceneParam._m0[89u].y, _1119 * cbSceneParam._m0[89u].x));
    float _1145 = fma(_1121, cbSceneParam._m0[90u].z, fma(_1120, cbSceneParam._m0[90u].y, _1119 * cbSceneParam._m0[90u].x));
    float _1148 = fma(_1121, cbSceneParam._m0[91u].z, fma(_1120, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1119));
    float _1163 = _419 * 0.5;
    float _1164 = _420 * 0.5;
    float _1165 = _421 * 0.5;
    float _1166 = dot(vec4(_1163, _1164, _1165, 1.0), vec4(_1097, _1100, _1103, _1106));
    float _1169 = dot(vec4(_1163, _1164, _1165, 1.0), vec4(_1096, _1099, _1102, _1105));
    float _1172 = dot(vec4(_1163, _1164, _1165, 1.0), vec4(_1095, _1098, _1101, _1104));
    float _1206;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1179 = dot(vec4(_1163, _1164, _1165, 1.0), vec4(_782, _786, _789, _792));
        float _1183 = dot(vec4(_1163, _1164, _1165, 1.0), vec4(_784, _787, _790, _793));
        float _1187 = dot(vec4(_1163, _1164, _1165, 1.0), vec4(_785, _788, _791, _794));
        float _1194 = dot(vec4(cbModelParam._m0[39u]), vec4(_1163, _1164, _1165, 1.0));
        _1206 = dot(vec3(isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)), isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)), isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1194) ? 0.0 : (isnan(0.0) ? _1194 : max(0.0, _1194))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1206 = 1.0;
    }
    float _1217;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1208 = dot(vec4(cbModelParam._m0[40u]), vec4(_1163, _1164, _1165, 1.0));
        _1217 = dot(vec3(isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)), isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)), isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1208) ? 0.0 : (isnan(0.0) ? _1208 : max(0.0, _1208))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1217 = 1.0;
    }
    float _1221 = (_1217 * cbModelParam._m0[1u].x) + (_1206 * (1.0 - cbModelParam._m0[1u].x));
    float _1230 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1312;
    float _1314;
    float _1316;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1279 = fma(_451, cbModelParam._m0[13u].z, fma(_447, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _443)) + cbModelParam._m0[13u].w;
        float _1283 = fma(_451, cbModelParam._m0[14u].z, fma(_447, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _443)) + cbModelParam._m0[14u].w;
        float _1287 = fma(_451, cbModelParam._m0[15u].z, fma(_447, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _443)) + cbModelParam._m0[15u].w;
        float _1290 = fma(_421, cbModelParam._m0[13u].z, fma(_420, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _419));
        float _1293 = fma(_421, cbModelParam._m0[14u].z, fma(_420, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _419));
        float _1296 = fma(_421, cbModelParam._m0[15u].z, fma(_420, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _419));
        float _1322;
        if (_1290 > 0.0)
        {
            _1322 = abs((1.0 - _1279) / _1290);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1290 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1279 + 1.0) / _1290);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1322 = frontier_phi_17_15_ladder;
        }
        float _1496;
        if (_1293 > 0.0)
        {
            _1496 = abs((1.0 - _1283) / _1293);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1293 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1283 + 1.0) / _1293);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1496 = frontier_phi_26_22_ladder;
        }
        float _1793;
        if (_1296 > 0.0)
        {
            _1793 = abs((1.0 - _1287) / _1296);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1296 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1287 + 1.0) / _1296);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1793 = frontier_phi_38_33_ladder;
        }
        float _1795 = isnan(_1496) ? _1322 : (isnan(_1322) ? _1496 : min(_1322, _1496));
        float _1796 = isnan(_1793) ? _1795 : (isnan(_1795) ? _1793 : min(_1795, _1793));
        float _1800 = (_1796 * _1290) + _1279;
        float _1801 = (_1796 * _1293) + _1283;
        float _1802 = (_1796 * _1296) + _1287;
        float _1803 = _1796 * 9.9999997473787516355514526367188e-05;
        float _1805 = (-1.0) - _1803;
        float _1807 = _1803 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1802 > _1807) || ((_1802 < _1805) || ((_1801 > _1807) || ((_1801 < _1805) || ((_1800 < _1805) || (_1800 > _1807))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1947 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1802, cbModelParam._m0[9u].z, fma(_1801, cbModelParam._m0[9u].y, _1800 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1802, cbModelParam._m0[10u].z, fma(_1801, cbModelParam._m0[10u].y, _1800 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1802, cbModelParam._m0[11u].z, fma(_1801, cbModelParam._m0[11u].y, _1800 * cbModelParam._m0[11u].x))), _1230);
            frontier_phi_16_38_ladder = _1947.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1947.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1947.x * cbModelParam._m0[1u].y;
        }
        _1312 = frontier_phi_16_38_ladder_2;
        _1314 = frontier_phi_16_38_ladder_1;
        _1316 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1300 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_419, _420, _421), _1230);
        _1312 = _1300.x * cbModelParam._m0[1u].y;
        _1314 = _1300.y * cbModelParam._m0[1u].y;
        _1316 = _1300.z * cbModelParam._m0[1u].y;
    }
    float _1319 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1412;
    float _1414;
    float _1416;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1376 = fma(_451, cbModelParam._m0[21u].z, fma(_447, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _443)) + cbModelParam._m0[21u].w;
        float _1380 = fma(_451, cbModelParam._m0[22u].z, fma(_447, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _443)) + cbModelParam._m0[22u].w;
        float _1384 = fma(_451, cbModelParam._m0[23u].z, fma(_447, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _443)) + cbModelParam._m0[23u].w;
        float _1387 = fma(_421, cbModelParam._m0[21u].z, fma(_420, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _419));
        float _1390 = fma(_421, cbModelParam._m0[22u].z, fma(_420, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _419));
        float _1393 = fma(_421, cbModelParam._m0[23u].z, fma(_420, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _419));
        float _1501;
        if (_1387 > 0.0)
        {
            _1501 = abs((1.0 - _1376) / _1387);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1387 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1376 + 1.0) / _1387);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1501 = frontier_phi_28_24_ladder;
        }
        float _1820;
        if (_1390 > 0.0)
        {
            _1820 = abs((1.0 - _1380) / _1390);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1390 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1380 + 1.0) / _1390);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1820 = frontier_phi_40_35_ladder;
        }
        float _2093;
        if (_1393 > 0.0)
        {
            _2093 = abs((1.0 - _1384) / _1393);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1393 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1384 + 1.0) / _1393);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2093 = frontier_phi_50_47_ladder;
        }
        float _2095 = isnan(_1820) ? _1501 : (isnan(_1501) ? _1820 : min(_1501, _1820));
        float _2096 = isnan(_2093) ? _2095 : (isnan(_2095) ? _2093 : min(_2095, _2093));
        float _2100 = (_2096 * _1387) + _1376;
        float _2101 = (_2096 * _1390) + _1380;
        float _2102 = (_2096 * _1393) + _1384;
        float _2103 = _2096 * 9.9999997473787516355514526367188e-05;
        float _2104 = (-1.0) - _2103;
        float _2106 = _2103 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2102 > _2106) || ((_2102 < _2104) || ((_2101 > _2106) || ((_2101 < _2104) || ((_2100 < _2104) || (_2100 > _2106))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2193 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2102, cbModelParam._m0[17u].z, fma(_2101, cbModelParam._m0[17u].y, _2100 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2102, cbModelParam._m0[18u].z, fma(_2101, cbModelParam._m0[18u].y, _2100 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2102, cbModelParam._m0[19u].z, fma(_2101, cbModelParam._m0[19u].y, _2100 * cbModelParam._m0[19u].x))), _1319);
            frontier_phi_25_50_ladder = _2193.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2193.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2193.x * cbModelParam._m0[1u].z;
        }
        _1412 = frontier_phi_25_50_ladder_2;
        _1414 = frontier_phi_25_50_ladder_1;
        _1416 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1396 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_419, _420, _421), _1319);
        _1412 = _1396.x * cbModelParam._m0[1u].z;
        _1414 = _1396.y * cbModelParam._m0[1u].z;
        _1416 = _1396.z * cbModelParam._m0[1u].z;
    }
    float _1428 = _410 * 0.01200000010430812835693359375;
    float _1430 = _1428 * ((cbModelParam._m0[1u].w * (_1412 - _1312)) + _1312);
    float _1431 = _1428 * ((cbModelParam._m0[1u].w * (_1414 - _1314)) + _1314);
    float _1432 = _1428 * ((cbModelParam._m0[1u].w * (_1416 - _1316)) + _1316);
    float _1435 = fma(_1432, cbSceneParam._m0[89u].z, fma(_1431, cbSceneParam._m0[89u].y, _1430 * cbSceneParam._m0[89u].x));
    float _1438 = fma(_1432, cbSceneParam._m0[90u].z, fma(_1431, cbSceneParam._m0[90u].y, _1430 * cbSceneParam._m0[90u].x));
    float _1441 = fma(_1432, cbSceneParam._m0[91u].z, fma(_1431, cbSceneParam._m0[91u].y, _1430 * cbSceneParam._m0[91u].x));
    float _1475 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1479 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1483 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1487 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1488 = _1475 / _1487;
    float _1489 = _1479 / _1487;
    float _1490 = _1483 / _1487;
    float _1637;
    float _1638;
    float _1639;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1517 = ((uint(_1490 > cbSceneParam._m0[59u].y) + uint(_1490 > cbSceneParam._m0[59u].x)) + uint(_1490 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1518 = _1517 + 43u;
        uint _1526 = _1517 + 44u;
        uint _1534 = _1517 + 45u;
        uint _1542 = _1517 + 46u;
        float _1553 = fma(_1487, cbSceneParam._m0[_1518].w, fma(_1483, cbSceneParam._m0[_1518].z, fma(_1479, cbSceneParam._m0[_1518].y, _1475 * cbSceneParam._m0[_1518].x)));
        float _1557 = fma(_1487, cbSceneParam._m0[_1526].w, fma(_1483, cbSceneParam._m0[_1526].z, fma(_1479, cbSceneParam._m0[_1526].y, _1475 * cbSceneParam._m0[_1526].x)));
        float _1565 = fma(_1487, cbSceneParam._m0[_1542].w, fma(_1483, cbSceneParam._m0[_1542].z, fma(_1479, cbSceneParam._m0[_1542].y, _1475 * cbSceneParam._m0[_1542].x)));
        float _1570 = cbSceneParam._m0[33u].z * _1565;
        float _1572 = cbSceneParam._m0[33u].w * _1565;
        float _1575 = fma(_1487, cbSceneParam._m0[_1534].w, fma(_1483, cbSceneParam._m0[_1534].z, fma(_1479, cbSceneParam._m0[_1534].y, _1475 * cbSceneParam._m0[_1534].x))) / _1565;
        float _1623 = (cbSceneParam._m0[33u].x - sqrt(((_1489 * _1489) + (_1488 * _1488)) + (_1490 * _1490))) * cbSceneParam._m0[33u].y;
        float _3727 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1630 = (isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1570 + _1553) / _1565, (_1572 + _1557) / _1565), _1575), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1572 + _1553) / _1565, (_1557 - _1570) / _1565), _1575), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1553 - _1570) / _1565, (_1557 - _1572) / _1565), _1575), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1553 - _1572) / _1565, (_1570 + _1557) / _1565), _1575), 0.0)).x), vec4(0.25)));
        _1637 = 1.0 - (_1630 * cbSceneParam._m0[34u].x);
        _1638 = 1.0 - (_1630 * cbSceneParam._m0[34u].y);
        _1639 = 1.0 - (_1630 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1637 = 1.0;
        _1638 = 1.0;
        _1639 = 1.0;
    }
    float _1703;
    float _1705;
    float _1707;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1691 = fma(_1487, cbSceneParam._m0[63u].w, fma(_1483, cbSceneParam._m0[63u].z, fma(_1479, cbSceneParam._m0[63u].y, _1475 * cbSceneParam._m0[63u].x)));
        float _1692 = fma(_1487, cbSceneParam._m0[60u].w, fma(_1483, cbSceneParam._m0[60u].z, fma(_1479, cbSceneParam._m0[60u].y, _1475 * cbSceneParam._m0[60u].x))) / _1691;
        float _1693 = fma(_1487, cbSceneParam._m0[61u].w, fma(_1483, cbSceneParam._m0[61u].z, fma(_1479, cbSceneParam._m0[61u].y, _1475 * cbSceneParam._m0[61u].x))) / _1691;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1692 >= cbSceneParam._m0[64u].x) && (_1693 >= cbSceneParam._m0[64u].y)) && (_1692 <= cbSceneParam._m0[64u].z)) && (_1693 <= cbSceneParam._m0[64u].w))
        {
            float _1833 = fma(_1487, cbSceneParam._m0[62u].w, fma(_1483, cbSceneParam._m0[62u].z, fma(_1479, cbSceneParam._m0[62u].y, _1475 * cbSceneParam._m0[62u].x))) / _1691;
            float _1837 = isnan(cbSceneParam._m0[41u].w) ? _1833 : (isnan(_1833) ? cbSceneParam._m0[41u].w : max(_1833, cbSceneParam._m0[41u].w));
            float _1880 = (cbSceneParam._m0[33u].x - sqrt(((_1489 * _1489) + (_1488 * _1488)) + (_1490 * _1490))) * cbSceneParam._m0[33u].y;
            float _3743 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
            float _1887 = (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1692, cbSceneParam._m0[33u].w + _1693), _1837), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1692, _1693 - cbSceneParam._m0[33u].z), _1837), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1692 - cbSceneParam._m0[33u].z, _1693 - cbSceneParam._m0[33u].w), _1837), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1692 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1693), _1837), 0.0)).x), vec4(0.25)));
            float _1891 = 1.0 - (_1887 * cbSceneParam._m0[34u].x);
            float _1892 = 1.0 - (_1887 * cbSceneParam._m0[34u].y);
            float _1893 = 1.0 - (_1887 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_1893) ? _1639 : (isnan(_1639) ? _1893 : min(_1639, _1893));
            frontier_phi_37_36_ladder_1 = isnan(_1892) ? _1638 : (isnan(_1638) ? _1892 : min(_1638, _1892));
            frontier_phi_37_36_ladder_2 = isnan(_1891) ? _1637 : (isnan(_1637) ? _1891 : min(_1637, _1891));
        }
        else
        {
            frontier_phi_37_36_ladder = _1639;
            frontier_phi_37_36_ladder_1 = _1638;
            frontier_phi_37_36_ladder_2 = _1637;
        }
        _1703 = frontier_phi_37_36_ladder_2;
        _1705 = frontier_phi_37_36_ladder_1;
        _1707 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1703 = _1637;
        _1705 = _1638;
        _1707 = _1639;
    }
    uvec4 _1712 = floatBitsToUint(cbInstanceData._m0[_385 + 5u]);
    uint _1714 = _1712.x * 14u;
    uint _1715 = _1714 + 13u;
    float _1722 = _410 + (-1.0);
    float _1728 = (cbLight._m0[_1715].x * _1722) + 1.0;
    float _1729 = (cbLight._m0[_1715].y * _1722) + 1.0;
    float _1730 = (cbLight._m0[_1715].z * _1722) + 1.0;
    float _1731 = (cbLight._m0[_1715].w * _1722) + 1.0;
    uint _1732 = _1714 + 5u;
    float _1738 = isnan(1.0) ? _1729 : (isnan(_1729) ? 1.0 : min(_1729, 1.0));
    uint _1742 = _1714 + 4u;
    float _1752 = isnan(1.0) ? _1728 : (isnan(_1728) ? 1.0 : min(_1728, 1.0));
    uint _1756 = _1714 | 1u;
    float _1767 = dot(vec3(cbLight._m0[_1714].xyz), vec3(_244, _245, _246));
    float _1770 = dot(vec3(cbLight._m0[_1756].xyz), vec3(_244, _245, _246));
    float _3779 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
    float _3790 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _1775 = (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * 0.3183098733425140380859375;
    float _1777 = (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * 0.3183098733425140380859375;
    float _1784 = ((cbLight._m0[_1732].x * _1738) * _1777) + (((cbLight._m0[_1742].x * _1703) * _1752) * _1775);
    float _1785 = ((_1738 * cbLight._m0[_1732].y) * _1777) + (((cbLight._m0[_1742].y * _1705) * _1752) * _1775);
    float _1786 = ((_1738 * cbLight._m0[_1732].z) * _1777) + (((cbLight._m0[_1742].z * _1707) * _1752) * _1775);
    uvec4 _1790 = floatBitsToUint(cbLight._m0[_1714 + 12u]);
    bool _1792 = _1790.x == 0u;
    float _1894;
    float _1896;
    float _1898;
    if (_1792)
    {
        _1894 = _1784;
        _1896 = _1785;
        _1898 = _1786;
    }
    else
    {
        uint _1902 = _1714 + 6u;
        float _1918 = (dot(vec3(cbLight._m0[_1714 + 2u].xyz), vec3(_244, _245, _246)) * 0.5) + 0.5;
        float _1919 = _1918 * _1918;
        float _3801 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
        float _1920 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1921 = isnan(1.0) ? _1730 : (isnan(_1730) ? 1.0 : min(_1730, 1.0));
        _1894 = (((cbLight._m0[_1902].x * 0.3183098733425140380859375) * _1920) * _1921) + _1784;
        _1896 = (((cbLight._m0[_1902].y * 0.3183098733425140380859375) * _1920) * _1921) + _1785;
        _1898 = (((cbLight._m0[_1902].z * 0.3183098733425140380859375) * _1920) * _1921) + _1786;
    }
    bool _1901 = _1790.y == 0u;
    float _1956;
    float _1958;
    float _1960;
    if (_1901)
    {
        _1956 = _1894;
        _1958 = _1896;
        _1960 = _1898;
    }
    else
    {
        uint _2064 = _1714 + 7u;
        float _2080 = (dot(vec3(cbLight._m0[_1714 + 3u].xyz), vec3(_244, _245, _246)) * 0.5) + 0.5;
        float _2081 = _2080 * _2080;
        float _3817 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
        float _2082 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _2083 = isnan(1.0) ? _1731 : (isnan(_1731) ? 1.0 : min(_1731, 1.0));
        _1956 = (((cbLight._m0[_2064].x * 0.3183098733425140380859375) * _2082) * _2083) + _1894;
        _1958 = (((cbLight._m0[_2064].y * 0.3183098733425140380859375) * _2082) * _2083) + _1896;
        _1960 = (((cbLight._m0[_2064].z * 0.3183098733425140380859375) * _2082) * _2083) + _1898;
    }
    uint _1962 = _1714 + 8u;
    float _1968 = cbLight._m0[_1714].x + _324;
    float _1969 = cbLight._m0[_1714].y + _325;
    float _1970 = cbLight._m0[_1714].z + _326;
    float _1974 = inversesqrt(dot(vec3(_1968, _1969, _1970), vec3(_1968, _1969, _1970)));
    float _1978 = dot(vec3(_244, _245, _246), vec3(cbLight._m0[_1714].xyz));
    float _3833 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _1981 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _3844 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _1982 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _1983 = dot(vec3(cbLight._m0[_1714].xyz), vec3(_1968 * _1974, _1969 * _1974, _1970 * _1974));
    float _3855 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1994 = (exp2(log2(1.0 - (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2000 = (0.5 / ((_1981 + 9.9999999392252902907785028219223e-09) + _1982)) * _1981;
    float _3866 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2002 = (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * 0.31831014156341552734375;
    uint _2016 = _1714 + 9u;
    float _2022 = cbLight._m0[_1756].x + _324;
    float _2023 = cbLight._m0[_1756].y + _325;
    float _2024 = cbLight._m0[_1756].z + _326;
    float _2028 = inversesqrt(dot(vec3(_2022, _2023, _2024), vec3(_2022, _2023, _2024)));
    float _2032 = dot(vec3(_244, _245, _246), vec3(cbLight._m0[_1756].xyz));
    float _3877 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2035 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _2036 = dot(vec3(cbLight._m0[_1756].xyz), vec3(_2022 * _2028, _2023 * _2028, _2024 * _2028));
    float _3888 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2045 = (exp2(log2(1.0 - (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2049 = (0.5 / ((_2035 + 9.9999999392252902907785028219223e-09) + _1982)) * _2035;
    float _3899 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2051 = (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * 0.31831014156341552734375;
    float _2061 = (((_2045 * cbLight._m0[_2016].x) * _2051) * _1738) + ((((cbLight._m0[_1962].x * _1703) * _1994) * _2002) * _1752);
    float _2062 = (((_2045 * cbLight._m0[_2016].y) * _2051) * _1738) + ((((cbLight._m0[_1962].y * _1705) * _1994) * _2002) * _1752);
    float _2063 = (((_2045 * cbLight._m0[_2016].z) * _2051) * _1738) + ((((cbLight._m0[_1962].z * _1707) * _1994) * _2002) * _1752);
    float _2119;
    float _2121;
    float _2123;
    if (_1792)
    {
        _2119 = _2061;
        _2121 = _2062;
        _2123 = _2063;
    }
    else
    {
        uint _2125 = _1714 + 10u;
        uint _2131 = _1714 + 2u;
        float _2137 = cbLight._m0[_2131].x + _324;
        float _2138 = cbLight._m0[_2131].y + _325;
        float _2139 = cbLight._m0[_2131].z + _326;
        float _2143 = inversesqrt(dot(vec3(_2137, _2138, _2139), vec3(_2137, _2138, _2139)));
        float _2147 = dot(vec3(_244, _245, _246), vec3(cbLight._m0[_2131].xyz));
        float _3910 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2150 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _2151 = dot(vec3(cbLight._m0[_2131].xyz), vec3(_2137 * _2143, _2138 * _2143, _2139 * _2143));
        float _3921 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2160 = (exp2(log2(1.0 - (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2164 = (0.5 / ((_2150 + 9.9999999392252902907785028219223e-09) + _1982)) * _2150;
        float _3932 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2166 = (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * 0.31831014156341552734375;
        float _2167 = isnan(1.0) ? _1730 : (isnan(_1730) ? 1.0 : min(_1730, 1.0));
        _2119 = (((_2160 * cbLight._m0[_2125].x) * _2166) * _2167) + _2061;
        _2121 = (((_2160 * cbLight._m0[_2125].y) * _2166) * _2167) + _2062;
        _2123 = (((_2160 * cbLight._m0[_2125].z) * _2166) * _2167) + _2063;
    }
    float _2198;
    float _2200;
    float _2202;
    if (_1901)
    {
        _2198 = _2119;
        _2200 = _2121;
        _2202 = _2123;
    }
    else
    {
        uint _2209 = _1714 + 11u;
        uint _2215 = _1714 + 3u;
        float _2221 = cbLight._m0[_2215].x + _324;
        float _2222 = cbLight._m0[_2215].y + _325;
        float _2223 = cbLight._m0[_2215].z + _326;
        float _2227 = inversesqrt(dot(vec3(_2221, _2222, _2223), vec3(_2221, _2222, _2223)));
        float _2231 = dot(vec3(_244, _245, _246), vec3(cbLight._m0[_2215].xyz));
        float _3948 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2234 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _2235 = dot(vec3(cbLight._m0[_2215].xyz), vec3(_2221 * _2227, _2222 * _2227, _2223 * _2227));
        float _3959 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2244 = (exp2(log2(1.0 - (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2248 = (0.5 / ((_2234 + 9.9999999392252902907785028219223e-09) + _1982)) * _2234;
        float _3970 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2250 = (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * 0.31831014156341552734375;
        float _2251 = isnan(1.0) ? _1731 : (isnan(_1731) ? 1.0 : min(_1731, 1.0));
        _2198 = (((_2244 * cbLight._m0[_2209].x) * _2250) * _2251) + _2119;
        _2200 = (((_2244 * cbLight._m0[_2209].y) * _2250) * _2251) + _2121;
        _2202 = (((_2244 * cbLight._m0[_2209].z) * _2250) * _2251) + _2123;
    }
    float _2317;
    float _2319;
    float _2321;
    float _2323;
    float _2325;
    float _2327;
    if (_1712.y == 0u)
    {
        uvec4 _2272 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2273 = _2272.x;
        uint _2284 = uint((float(_2272.y) * floor(float(uint(cbSceneParam._m0[85u].y * _346) / _2273))) + floor(float(uint(cbSceneParam._m0[85u].x * _345) / _2273)));
        float _2294 = (log2(_1490 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2295 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        uint _2298 = uint(isnan(14.0) ? _2295 : (isnan(_2295) ? 14.0 : min(_2295, 14.0)));
        uvec4 _2303 = texelFetch(g_lightClusterGridBuffer, int(((_2298 << 2u) + (_2284 << 6u)) >> 2u));
        uint _2304 = _2303.x;
        uint _2305 = _2272.z;
        float _2413;
        float _2415;
        float _2417;
        float _2419;
        float _2421;
        float _2423;
        if (((((1u << ((_2305 >> 4u) & 15u)) + 4294967295u) & _2304) == 0u) || ((_2305 & 240u) == 0u))
        {
            _2413 = 0.0;
            _2415 = 0.0;
            _2417 = 0.0;
            _2419 = 0.0;
            _2421 = 0.0;
            _2423 = 0.0;
        }
        else
        {
            float _2414;
            float _2416;
            float _2418;
            float _2420;
            float _2422;
            float _2424;
            float _2574 = 0.0;
            float _2575 = 0.0;
            float _2576 = 0.0;
            float _2577 = 0.0;
            float _2578 = 0.0;
            float _2579 = 0.0;
            uint _2580 = 0u;
            uint _2589;
            bool _2590;
            for (;;)
            {
                _2589 = texelFetch(g_lightClassification, int((((_2298 << 5u) + (_2284 << 9u)) + (_2580 << 2u)) >> 2u)).x;
                _2590 = _2589 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2590)
                {
                    frontier_phi_71_pred = _2579;
                    frontier_phi_71_pred_1 = _2578;
                    frontier_phi_71_pred_2 = _2577;
                    frontier_phi_71_pred_3 = _2576;
                    frontier_phi_71_pred_4 = _2575;
                    frontier_phi_71_pred_5 = _2574;
                }
                else
                {
                    float _2719;
                    float _2720;
                    float _2721;
                    float _2722;
                    float _2723;
                    float _2724;
                    uint _2725;
                    _2719 = _2574;
                    _2720 = _2575;
                    _2721 = _2576;
                    _2722 = _2577;
                    _2723 = _2578;
                    _2724 = _2579;
                    _2725 = _2589;
                    float _2646;
                    float _2647;
                    float _2648;
                    float _2649;
                    float _2650;
                    float _2651;
                    for (;;)
                    {
                        uint _2729 = uint(findLSB(_2725)) + (_2580 << 5u);
                        uint _2726 = (_2725 + 4294967295u) & _2725;
                        uint _2731 = _2729 * 48u;
                        vec4 _2745 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2731)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 3u)).x));
                        uint _2751 = (_2729 * 48u) + 4u;
                        vec4 _2764 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2751)).x, texelFetch(g_PointLightRenderingBuffer, int(_2751 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2751 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2751 + 3u)).x));
                        uint _2770 = (_2729 * 48u) + 8u;
                        vec3 _2781 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2770)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 2u)).x));
                        float _2785 = _2745.x - _1488;
                        float _2786 = _2745.y - _1489;
                        float _2787 = _2745.z - _1490;
                        float _2788 = dot(vec3(_2785, _2786, _2787), vec3(_2785, _2786, _2787));
                        float _2791 = inversesqrt(_2788);
                        float _2800 = 1.0 - (_2788 * _2745.w);
                        float _3996 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
                        float _2801 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
                        float _2802 = sqrt(_2788) * _2764.w;
                        float _2805 = 1.39999997615814208984375 / (_2802 + 1.39999997615814208984375);
                        float _2806 = _2805 * _2805;
                        float _2809 = ((1.0 - _2806) * dot(vec3(_366, _369, _372), vec3(_2791 * _2785, _2791 * _2786, _2791 * _2787))) + _2806;
                        float _2812 = _2802 * _2802;
                        float _2816 = ((isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0))) * _2801) / ((_2812 * 0.699999988079071044921875) + 1.0);
                        float _2820 = (-0.0) - _1488;
                        float _2821 = (-0.0) - _1489;
                        float _2822 = (-0.0) - _1490;
                        float _2826 = inversesqrt(dot(vec3(_2820, _2821, _2822), vec3(_2820, _2821, _2822)));
                        float _2830 = dot(vec3(_366, _369, _372), vec3(_2826 * _2820, _2826 * _2821, _2826 * _2822));
                        float _4012 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
                        float _4023 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
                        float _2834 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
                        float _2838 = (0.5 / (((isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) + 9.9999999392252902907785028219223e-09) + _2834)) * _2834;
                        float _4034 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
                        float _2847 = (((isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * 3.1415927410125732421875) / ((_2812 * 2.1991131305694580078125) + 3.141590118408203125)) * _2801;
                        _2649 = (_2816 * _2764.x) + _2722;
                        _2650 = (_2816 * _2764.y) + _2723;
                        _2651 = (_2816 * _2764.z) + _2724;
                        _2646 = (_2847 * _2781.x) + _2719;
                        _2647 = (_2847 * _2781.y) + _2720;
                        _2648 = (_2847 * _2781.z) + _2721;
                        if (_2726 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2719 = _2646;
                            _2720 = _2647;
                            _2721 = _2648;
                            _2722 = _2649;
                            _2723 = _2650;
                            _2724 = _2651;
                            _2725 = _2726;
                        }
                    }
                    frontier_phi_71_pred = _2651;
                    frontier_phi_71_pred_1 = _2650;
                    frontier_phi_71_pred_2 = _2649;
                    frontier_phi_71_pred_3 = _2648;
                    frontier_phi_71_pred_4 = _2647;
                    frontier_phi_71_pred_5 = _2646;
                }
                _2424 = frontier_phi_71_pred;
                _2422 = frontier_phi_71_pred_1;
                _2420 = frontier_phi_71_pred_2;
                _2418 = frontier_phi_71_pred_3;
                _2416 = frontier_phi_71_pred_4;
                _2414 = frontier_phi_71_pred_5;
                uint _2581 = _2580 + 1u;
                if (_2581 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2574 = _2414;
                    _2575 = _2416;
                    _2576 = _2418;
                    _2577 = _2420;
                    _2578 = _2422;
                    _2579 = _2424;
                    _2580 = _2581;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2413 = _2414;
            _2415 = _2416;
            _2417 = _2418;
            _2419 = _2420;
            _2421 = _2422;
            _2423 = _2424;
        }
        uvec4 _2427 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2428 = _2427.z;
        uint _2430 = (_2428 >> 8u) & 15u;
        float _2545;
        float _2547;
        float _2549;
        float _2551;
        float _2553;
        float _2555;
        if (((4294967295u << _2430) & _2304) == 0u)
        {
            _2545 = _2413;
            _2547 = _2415;
            _2549 = _2417;
            _2551 = _2419;
            _2553 = _2421;
            _2555 = _2423;
        }
        else
        {
            float _2570 = inversesqrt(dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490)));
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2430 < ((_2428 >> 12u) & 15u))
            {
                float _2546;
                float _2548;
                float _2550;
                float _2552;
                float _2554;
                float _2556;
                float _2702 = _2413;
                float _2703 = _2415;
                float _2704 = _2417;
                float _2705 = _2419;
                float _2706 = _2421;
                float _2707 = _2423;
                uint _2708 = _2430;
                uint _2717;
                bool _2718;
                for (;;)
                {
                    _2717 = texelFetch(g_lightClassification, int((((_2298 << 5u) + (_2284 << 9u)) + (_2708 << 2u)) >> 2u)).x;
                    _2718 = _2717 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2718)
                    {
                        frontier_phi_82_pred = _2707;
                        frontier_phi_82_pred_1 = _2706;
                        frontier_phi_82_pred_2 = _2705;
                        frontier_phi_82_pred_3 = _2704;
                        frontier_phi_82_pred_4 = _2703;
                        frontier_phi_82_pred_5 = _2702;
                    }
                    else
                    {
                        float _2861;
                        float _2862;
                        float _2863;
                        float _2864;
                        float _2865;
                        float _2866;
                        float _3113;
                        float _3114;
                        float _3115;
                        float _3116;
                        float _3117;
                        float _3118;
                        float _2874 = _2702;
                        float _2875 = _2703;
                        float _2876 = _2704;
                        float _2877 = _2705;
                        float _2878 = _2706;
                        float _2879 = _2707;
                        uint _2880 = _2717;
                        uint _2881;
                        vec4 _2906;
                        float _2907;
                        vec4 _2922;
                        vec3 _2934;
                        vec4 _2950;
                        vec4 _2966;
                        float _3013;
                        bool _3014;
                        for (;;)
                        {
                            uint _2891 = ((_2708 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2880));
                            _2881 = (_2880 + 4294967295u) & _2880;
                            uint _2893 = _2891 * 40u;
                            _2906 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2893)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 3u)).x));
                            _2907 = _2906.w;
                            uint _2909 = (_2891 * 40u) + 4u;
                            _2922 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2909)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 3u)).x));
                            uint _2924 = (_2891 * 40u) + 8u;
                            _2934 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2924)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 2u)).x));
                            uint _2937 = (_2891 * 40u) + 16u;
                            _2950 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2937)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 3u)).x));
                            uint _2953 = (_2891 * 40u) + 20u;
                            _2966 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2953)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 3u)).x));
                            uint _2969 = (_2891 * 40u) + 24u;
                            vec4 _2982 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2969)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 3u)).x));
                            uint _2988 = (_2891 * 40u) + 28u;
                            vec4 _3001 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2988)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 3u)).x));
                            _3013 = fma(_1490, _3001.z, fma(_1489, _3001.y, _3001.x * _1488)) + _3001.w;
                            _3014 = !((fma(_1490, _2982.z, fma(_1489, _2982.y, _2982.x * _1488)) + _2982.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3014)
                            {
                                float _3041 = _2906.x - _1488;
                                float _3042 = _2906.y - _1489;
                                float _3043 = _2906.z - _1490;
                                float _3044 = dot(vec3(_3041, _3042, _3043), vec3(_3041, _3042, _3043));
                                float _3047 = inversesqrt(_3044);
                                float _3048 = _3047 * _3041;
                                float _3049 = _3047 * _3042;
                                float _3050 = _3047 * _3043;
                                float _3054 = 1.0 - (_3044 / (_2907 * _2907));
                                float _4045 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                                float _3055 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
                                float _3059 = sqrt(_3044) * _2922.w;
                                float _3061 = 1.39999997615814208984375 / (_3059 + 1.39999997615814208984375);
                                float _3062 = _3061 * _3061;
                                float _3063 = 1.0 - _3062;
                                float _3065 = (_3063 * dot(vec3(_3048, _3049, _3050), vec3(_366, _369, _372))) + _3062;
                                float _3068 = _3059 * _3059;
                                float _3072 = (fma(_1490, _2950.z, fma(_1489, _2950.y, _2950.x * _1488)) + _2950.w) / _3013;
                                float _3073 = (fma(_1490, _2966.z, fma(_1489, _2966.y, _2966.x * _1488)) + _2966.w) / _3013;
                                float _3077 = 1.0 - dot(vec2(_3072, _3073), vec2(_3072, _3073));
                                float _4061 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                                float _3078 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
                                float _3079 = _3078 * (((isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0))) * _3055) / ((_3068 * 0.699999988079071044921875) + 1.0));
                                float _3089 = dot(vec3(_366, _369, _372), vec3((-0.0) - (_1488 * _2570), (-0.0) - (_1489 * _2570), (-0.0) - (_1490 * _2570)));
                                float _4072 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                                float _3097 = (_3063 * dot(vec3(_366, _369, _372), vec3(_3048, _3049, _3050))) + _3062;
                                float _4083 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                                float _3098 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
                                float _3102 = (0.5 / (((isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) + 9.9999999392252902907785028219223e-09) + _3098)) * _3098;
                                float _4094 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                                float _3109 = (_3078 * _3055) * (((isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * 3.1415927410125732421875) / ((_3068 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_88_pred = _3079 * _2922.z;
                                frontier_phi_88_pred_1 = _3079 * _2922.y;
                                frontier_phi_88_pred_2 = _3079 * _2922.x;
                                frontier_phi_88_pred_3 = _3109 * _2934.z;
                                frontier_phi_88_pred_4 = _3109 * _2934.y;
                                frontier_phi_88_pred_5 = _3109 * _2934.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3118 = frontier_phi_88_pred;
                            _3117 = frontier_phi_88_pred_1;
                            _3116 = frontier_phi_88_pred_2;
                            _3115 = frontier_phi_88_pred_3;
                            _3114 = frontier_phi_88_pred_4;
                            _3113 = frontier_phi_88_pred_5;
                            _2864 = _3116 + _2877;
                            _2865 = _3117 + _2878;
                            _2866 = _3118 + _2879;
                            _2861 = _3113 + _2874;
                            _2862 = _3114 + _2875;
                            _2863 = _3115 + _2876;
                            if (_2881 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2874 = _2861;
                                _2875 = _2862;
                                _2876 = _2863;
                                _2877 = _2864;
                                _2878 = _2865;
                                _2879 = _2866;
                                _2880 = _2881;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _2866;
                        frontier_phi_82_pred_1 = _2865;
                        frontier_phi_82_pred_2 = _2864;
                        frontier_phi_82_pred_3 = _2863;
                        frontier_phi_82_pred_4 = _2862;
                        frontier_phi_82_pred_5 = _2861;
                    }
                    _2556 = frontier_phi_82_pred;
                    _2554 = frontier_phi_82_pred_1;
                    _2552 = frontier_phi_82_pred_2;
                    _2550 = frontier_phi_82_pred_3;
                    _2548 = frontier_phi_82_pred_4;
                    _2546 = frontier_phi_82_pred_5;
                    uint _2709 = _2708 + 1u;
                    if (_2709 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2702 = _2546;
                        _2703 = _2548;
                        _2704 = _2550;
                        _2705 = _2552;
                        _2706 = _2554;
                        _2707 = _2556;
                        _2708 = _2709;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2552;
                frontier_phi_63_64_ladder_1 = _2556;
                frontier_phi_63_64_ladder_2 = _2554;
                frontier_phi_63_64_ladder_3 = _2550;
                frontier_phi_63_64_ladder_4 = _2548;
                frontier_phi_63_64_ladder_5 = _2546;
            }
            else
            {
                frontier_phi_63_64_ladder = _2419;
                frontier_phi_63_64_ladder_1 = _2423;
                frontier_phi_63_64_ladder_2 = _2421;
                frontier_phi_63_64_ladder_3 = _2417;
                frontier_phi_63_64_ladder_4 = _2415;
                frontier_phi_63_64_ladder_5 = _2413;
            }
            _2545 = frontier_phi_63_64_ladder_5;
            _2547 = frontier_phi_63_64_ladder_4;
            _2549 = frontier_phi_63_64_ladder_3;
            _2551 = frontier_phi_63_64_ladder;
            _2553 = frontier_phi_63_64_ladder_2;
            _2555 = frontier_phi_63_64_ladder_1;
        }
        float _2560 = isnan(1.0) ? _410 : (isnan(_410) ? 1.0 : min(_410, 1.0));
        _2317 = (_2560 * _2551) + _1956;
        _2319 = (_2560 * _2553) + _1958;
        _2321 = (_2560 * _2555) + _1960;
        _2323 = ((_2545 * 0.039999999105930328369140625) * _2560) + _2198;
        _2325 = ((_2547 * 0.039999999105930328369140625) * _2560) + _2200;
        _2327 = ((_2549 * 0.039999999105930328369140625) * _2560) + _2202;
    }
    else
    {
        _2317 = _1956;
        _2319 = _1958;
        _2321 = _1960;
        _2323 = _2198;
        _2325 = _2200;
        _2327 = _2202;
    }
    uint _2333 = _386 + uint(cbMatDynParam._m0[0u].w);
    float _2339 = cbInstanceData._m0[_2333].x * (((cbMtdParam._m0[12u].x * cbMtdParam._m0[9u].x) * _220.x) + cbMtdParam._m0[11u].x);
    float _2340 = cbInstanceData._m0[_2333].y * (((cbMtdParam._m0[12u].x * cbMtdParam._m0[9u].y) * _220.y) + cbMtdParam._m0[11u].y);
    float _2341 = cbInstanceData._m0[_2333].z * (cbMtdParam._m0[11u].z + ((cbMtdParam._m0[12u].x * cbMtdParam._m0[9u].z) * _220.z));
    float _4110 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _4121 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _4132 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _2358 = (((isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_2317 + ((isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0))) * _410))) + ((_2323 + ((isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0))) * _1221)) * cbPerFrame._m0[3u].x)) + _2339;
    float _2360 = (_2340 + ((_2325 + ((isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))) * _1221)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_2319 + ((isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0))) * _410)));
    float _2362 = (_2341 + ((_2327 + ((isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))) * _1221)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_2321 + ((isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0))) * _410)));
    float _2363 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2364 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2365 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2371 = cbMtdParam._m0[2u].x * _2339;
    float _2372 = cbMtdParam._m0[2u].y * _2340;
    float _2373 = cbMtdParam._m0[2u].z * _2341;
    float _4158 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2375 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    uint _2376 = _385 + 6u;
    float _2384 = _345 / cbSceneParam._m0[86u].x;
    float _2385 = _346 / cbSceneParam._m0[86u].y;
    vec4 _2399 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2384, _2385, (log2((isnan(cbSceneParam._m0[77u].w) ? _266 : (isnan(_266) ? cbSceneParam._m0[77u].w : min(_266, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2401 = _2399.x;
    float _2402 = _2399.y;
    float _2403 = _2399.z;
    float _2404 = _2399.w;
    float _2476;
    float _2478;
    float _2480;
    float _2482;
    if (_266 > cbSceneParam._m0[78u].w)
    {
        float _2438 = isnan(_266) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _266 : min(cbSceneParam._m0[80u].w, _266));
        float _2439 = _2438 / _266;
        float _2450 = _2439 * _317;
        float _2451 = _318 * _2439;
        float _2452 = (-0.0) - _2451;
        float _2454 = _2439 * _319;
        float _2456 = (cbSceneParam._m0[77u].w * _2452) / _2438;
        float _2457 = _2456 + cbSceneParam._m0[79u].w;
        float _2458 = cbSceneParam._m0[79u].w - _2451;
        float _2464 = sqrt(((_2450 * _2450) + (_2451 * _2451)) + (_2454 * _2454));
        float _2467 = (1.0 - (cbSceneParam._m0[77u].w / _2438)) * _2464;
        float _2472 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2474 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2659;
        if (abs((_2452 - _2456) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2659 = ((((_2457 > 0.0) ? exp2(_2472 * _2457) : (2.0 - exp2(_2474 * _2457))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2467;
        }
        else
        {
            float _2603 = 1.0 / cbSceneParam._m0[80u].x;
            float _2604 = isnan(_2458) ? _2457 : (isnan(_2457) ? _2458 : max(_2457, _2458));
            float _2605 = isnan(_2458) ? _2457 : (isnan(_2457) ? _2458 : min(_2457, _2458));
            float _2614 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : min(_2604, 0.0));
            float _2615 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : min(_2605, 0.0));
            _2659 = ((abs(_2464 / _2452) * cbSceneParam._m0[80u].y) * ((((_2614 - _2615) * 2.0) - ((exp2(_2472 * (isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0)))) - exp2(_2472 * (isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0))))) * _2603)) - ((exp2(_2474 * _2614) - exp2(_2474 * _2615)) * _2603))) + (_2467 * cbSceneParam._m0[80u].z);
        }
        vec4 _2661 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2384, _2385, 1.0), 0.0);
        float _2670 = exp2((_2659 * (-1.44269502162933349609375)) * (1.0 - _2661.w));
        float _2671 = log2(_2670);
        float _2687 = log2(_2404);
        _2476 = (exp2(_2687 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2671 * cbSceneParam._m0[78u].x)) * _2661.x) / cbSceneParam._m0[78u].x)) + _2401;
        _2478 = (exp2(_2687 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2671 * cbSceneParam._m0[78u].y)) * _2661.y) / cbSceneParam._m0[78u].y)) + _2402;
        _2480 = (exp2(_2687 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2671 * cbSceneParam._m0[78u].z)) * _2661.z) / cbSceneParam._m0[78u].z)) + _2403;
        _2482 = _2670 * _2404;
    }
    else
    {
        _2476 = _2401;
        _2478 = _2402;
        _2480 = _2403;
        _2482 = _2404;
    }
    bool _2697;
    vec4 _2492;
    vec4 _2515;
    float _2517;
    float _2521;
    float _2522;
    float _2523;
    float _2526;
    float _2529;
    float _2532;
    float _2533;
    bool _2544;
    for (;;)
    {
        _2492 = cbMatDynParam._m0[0u];
        float _2494 = roundEven(_2492.y);
        bool _2495 = _2494 == 3.0;
        float _2497 = log2(_2482);
        float _2501 = exp2(_2497 * cbSceneParam._m0[78u].x);
        float _2502 = exp2(_2497 * cbSceneParam._m0[78u].y);
        float _2503 = exp2(_2497 * cbSceneParam._m0[78u].z);
        float _2504 = _2501 * _2363;
        float _2505 = _2502 * _2364;
        float _2506 = _2503 * _2365;
        float _2513 = _333 + (-0.5);
        _2515 = cbMtdParam._m0[1u];
        _2517 = _2515.y * _2513;
        float _2520 = (_2494 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2521 = _2520 * (_2495 ? _2504 : (_2504 + (cbSceneParam._m0[72u].w * _2476)));
        _2522 = _2520 * (_2495 ? _2505 : (_2505 + (cbSceneParam._m0[72u].w * _2478)));
        _2523 = _2520 * (_2495 ? _2506 : (_2506 + (cbSceneParam._m0[72u].w * _2480)));
        _2526 = ((_2371 * _2375) * _2501) * _2520;
        _2529 = ((_2372 * _2375) * _2502) * _2520;
        _2532 = ((_2373 * _2375) * _2503) * _2520;
        _2533 = _2513 * 0.999000012874603271484375;
        _2544 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2544)
        {
            if ((cbInstanceData._m0[_385 + 7u].x + _2533) < 0.5)
            {
                _2697 = true;
                break;
            }
        }
        uint _2638 = _386 + uint(_2492.w);
        if ((cbInstanceData._m0[_2638].w < 1.0) && ((cbInstanceData._m0[_2638].w + _2533) < 0.5))
        {
            _2697 = true;
            break;
        }
        if ((_2517 + 1.0) < _2515.x)
        {
            _2697 = true;
            break;
        }
        _2697 = false;
        break;
    }
    float _2852;
    if (_2697)
    {
        discard_state = true;
        _2852 = 0.0;
    }
    else
    {
        _2852 = cbInstanceData._m0[_2376].w;
    }
    SV_Target.x = _2521;
    SV_Target.y = _2522;
    SV_Target.z = _2523;
    SV_Target.w = _2852;
    SV_Target_1.x = _2526;
    SV_Target_1.y = _2529;
    SV_Target_1.z = _2532;
    SV_Target_1.w = cbInstanceData._m0[_2376].w;
    discard_exit();
}


