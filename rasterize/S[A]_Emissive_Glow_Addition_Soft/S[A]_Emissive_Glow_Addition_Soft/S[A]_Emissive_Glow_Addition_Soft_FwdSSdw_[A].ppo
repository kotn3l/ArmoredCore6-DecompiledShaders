#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A_Emissive_Glow_Addition_Soft_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_A_Emissive_Glow_Addition_Soft_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _773;
float _3037;
float _3038;
float _3039;
float _3040;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _175 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _176 = _175 * NORMAL.x;
    float _177 = _175 * NORMAL.y;
    float _178 = _175 * NORMAL.z;
    float _183;
    float _184;
    float _185;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _183 = (-0.0) - _176;
        _184 = (-0.0) - _177;
        _185 = (-0.0) - _178;
    }
    else
    {
        _183 = _176;
        _184 = _177;
        _185 = _178;
    }
    vec4 _199 = texture(sampler2D(S_A_Emissive_Glow_Addition_Soft_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _202 = _199.x;
    float _203 = _199.y;
    float _204 = _199.z;
    vec4 _220 = texture(sampler2D(S_A_Emissive_Glow_Addition_Soft_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _231 = inversesqrt(dot(vec3(_183, _184, _185), vec3(_183, _184, _185)));
    float _232 = _231 * _183;
    float _233 = _231 * _184;
    float _234 = _231 * _185;
    float _3049 = isnan(0.0) ? _202 : (isnan(_202) ? 0.0 : max(_202, 0.0));
    float _3060 = isnan(0.0) ? _203 : (isnan(_203) ? 0.0 : max(_203, 0.0));
    float _3071 = isnan(0.0) ? _204 : (isnan(_204) ? 0.0 : max(_204, 0.0));
    float _254 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _296 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _306 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _296);
    float _307 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _296);
    float _308 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _296);
    float _312 = inversesqrt(dot(vec3(_306, _307, _308), vec3(_306, _307, _308)));
    float _313 = _306 * _312;
    float _314 = _307 * _312;
    float _315 = _308 * _312;
    vec4 _320 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _322 = _320.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _452 = sqrt(((_306 * _306) + (_307 * _307)) + (_308 * _308));
        float _458 = (cbMatDynParam._m0[5u].x * _452) + cbMatDynParam._m0[5u].y;
        float _3082 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
        float _459 = isnan(1.0) ? _3082 : (isnan(_3082) ? 1.0 : min(_3082, 1.0));
        float _463 = (cbMatDynParam._m0[5u].z * _452) + cbMatDynParam._m0[5u].w;
        float _3093 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3093 : (isnan(_3093) ? 1.0 : min(_3093, 1.0))) - _459)) + _459) < ((_322 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _334 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _335 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _355 = fma(_234, cbSceneParam._m0[5u].z, fma(_233, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _232));
    float _358 = fma(_234, cbSceneParam._m0[6u].z, fma(_233, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _232));
    float _361 = fma(_234, cbSceneParam._m0[7u].z, fma(_233, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _232));
    uint _374 = uint(roundEven(NORMAL.w)) * 13u;
    uint _376 = _374 + 9u;
    uint _377 = _376 + uint(cbMatDynParam._m0[0u].w);
    float _383 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3049 : (isnan(_3049) ? 1.0 : min(_3049, 1.0)))) * cbInstanceData._m0[_377].x;
    float _384 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3060 : (isnan(_3060) ? 1.0 : min(_3060, 1.0)))) * cbInstanceData._m0[_377].y;
    float _385 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3071 : (isnan(_3071) ? 1.0 : min(_3071, 1.0)))) * cbInstanceData._m0[_377].z;
    float _3104 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _386 = isnan(1.0) ? _3104 : (isnan(_3104) ? 1.0 : min(_3104, 1.0));
    float _3115 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _387 = isnan(1.0) ? _3115 : (isnan(_3115) ? 1.0 : min(_3115, 1.0));
    float _3126 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _388 = isnan(1.0) ? _3126 : (isnan(_3126) ? 1.0 : min(_3126, 1.0));
    vec4 _397 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _334, cbSceneParam._m0[86u].y * _335));
    float _400 = _397.x * TEXCOORD.z;
    float _401 = dot(vec3(_232, _233, _234), vec3(_313, _314, _315));
    float _404 = _401 * 2.0;
    float _409 = (_404 * _232) - _313;
    float _410 = (_404 * _233) - _314;
    float _411 = (_404 * _234) - _315;
    float _433 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _437 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _441 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _772;
    float _774;
    float _775;
    float _776;
    float _777;
    float _778;
    float _779;
    float _780;
    float _781;
    float _782;
    float _783;
    float _784;
    float _785;
    float _786;
    float _787;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _497 = fma(_441, cbModelParam._m0[26u].z, fma(_437, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _433));
        float _501 = fma(_441, cbModelParam._m0[27u].z, fma(_437, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _433));
        float _505 = fma(_441, cbModelParam._m0[28u].z, fma(_437, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _433));
        float _530 = _433 + _232;
        float _531 = _437 + _233;
        float _532 = _441 + _234;
        float _542 = fma(_532, cbModelParam._m0[26u].z, fma(_531, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _530)) - _497;
        float _543 = fma(_532, cbModelParam._m0[27u].z, fma(_531, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _530)) - _501;
        float _544 = fma(_532, cbModelParam._m0[28u].z, fma(_531, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _530)) - _505;
        float _548 = inversesqrt(dot(vec3(_542, _543, _544), vec3(_542, _543, _544)));
        float _561 = ((_548 * _542) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_497 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _562 = ((_548 * _543) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_501 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _563 = ((_548 * _544) / cbModelParam._m0[34u].z) + ((((((_505 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _566 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_561, _562, _563), 0.0);
        vec4 _573 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_561, _562, _563), 0.0);
        vec4 _580 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_561, _562, _563), 0.0);
        vec4 _587 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_561, _562, _563), 0.0);
        float _600 = exp2((_566.w + (-0.5)) * 20.0) * 2.0;
        float _601 = _600 * (_566.x + (-0.5));
        float _602 = _600 * (_566.y + (-0.5));
        float _603 = _600 * (_566.z + (-0.5));
        float _610 = exp2((_573.w + (-0.5)) * 20.0) * 2.0;
        float _611 = _610 * (_573.x + (-0.5));
        float _612 = _610 * (_573.y + (-0.5));
        float _613 = _610 * (_573.z + (-0.5));
        float _620 = exp2((_580.w + (-0.5)) * 20.0) * 2.0;
        float _621 = _620 * (_580.x + (-0.5));
        float _622 = _620 * (_580.y + (-0.5));
        float _623 = _620 * (_580.z + (-0.5));
        float _630 = exp2((_587.w + (-0.5)) * 20.0) * 2.0;
        float _631 = _630 * (_587.x + (-0.5));
        float _632 = _630 * (_587.y + (-0.5));
        float _633 = _630 * (_587.z + (-0.5));
        float _634 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
        float _635 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
        float _636 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
        float _637 = _601 * 0.5;
        float _638 = _611 * 0.5;
        float _639 = _621 * 0.5;
        float _640 = dot(vec3(_637, _638, _639), vec3(_637, _638, _639));
        float _645 = (_640 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_640);
        float _654 = (dot(vec3(_232, _233, _234), vec3(_645 * _637, _645 * _638, _645 * _639)) + 1.0) * 0.5;
        float _3152 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
        float _664 = sqrt(((_638 * _638) + (_637 * _637)) + (_639 * _639)) / (_634 + 9.9999997473787516355514526367188e-06);
        float _3163 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
        float _665 = isnan(1.0) ? _3163 : (isnan(_3163) ? 1.0 : min(_3163, 1.0));
        float _666 = _665 * 2.0;
        float _670 = (1.0 - _665) / (_665 + 1.0);
        float _3174 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        float _671 = isnan(1.0) ? _3174 : (isnan(_3174) ? 1.0 : min(_3174, 1.0));
        float _680 = ((((1.0 - _671) * (_666 + 2.0)) * exp2(log2(isnan(1.0) ? _3152 : (isnan(_3152) ? 1.0 : min(_3152, 1.0))) * (_666 + 1.0))) + _671) * _634;
        float _681 = _602 * 0.5;
        float _682 = _612 * 0.5;
        float _683 = _622 * 0.5;
        float _684 = dot(vec3(_681, _682, _683), vec3(_681, _682, _683));
        float _689 = (_684 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_684);
        float _697 = (dot(vec3(_232, _233, _234), vec3(_689 * _681, _689 * _682, _689 * _683)) + 1.0) * 0.5;
        float _3185 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
        float _706 = sqrt(((_682 * _682) + (_681 * _681)) + (_683 * _683)) / (_635 + 9.9999997473787516355514526367188e-06);
        float _3196 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _707 = isnan(1.0) ? _3196 : (isnan(_3196) ? 1.0 : min(_3196, 1.0));
        float _708 = _707 * 2.0;
        float _712 = (1.0 - _707) / (_707 + 1.0);
        float _3207 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _713 = isnan(1.0) ? _3207 : (isnan(_3207) ? 1.0 : min(_3207, 1.0));
        float _722 = ((((1.0 - _713) * (_708 + 2.0)) * exp2(log2(isnan(1.0) ? _3185 : (isnan(_3185) ? 1.0 : min(_3185, 1.0))) * (_708 + 1.0))) + _713) * _635;
        float _723 = _603 * 0.5;
        float _724 = _613 * 0.5;
        float _725 = _623 * 0.5;
        float _726 = dot(vec3(_723, _724, _725), vec3(_723, _724, _725));
        float _731 = (_726 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_726);
        float _739 = (dot(vec3(_232, _233, _234), vec3(_731 * _723, _731 * _724, _731 * _725)) + 1.0) * 0.5;
        float _3218 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _748 = sqrt(((_724 * _724) + (_723 * _723)) + (_725 * _725)) / (_636 + 9.9999997473787516355514526367188e-06);
        float _3229 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _749 = isnan(1.0) ? _3229 : (isnan(_3229) ? 1.0 : min(_3229, 1.0));
        float _750 = _749 * 2.0;
        float _754 = (1.0 - _749) / (_749 + 1.0);
        float _3240 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0));
        float _764 = ((((1.0 - _755) * (_750 + 2.0)) * exp2(log2(isnan(1.0) ? _3218 : (isnan(_3218) ? 1.0 : min(_3218, 1.0))) * (_750 + 1.0))) + _755) * _636;
        _772 = _603;
        _774 = _602;
        _775 = _601;
        _776 = _613;
        _777 = _612;
        _778 = _611;
        _779 = _623;
        _780 = _622;
        _781 = _621;
        _782 = _636;
        _783 = _635;
        _784 = _634;
        _785 = cbModelParam._m0[36u].z * (isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0)));
        _786 = cbModelParam._m0[36u].z * (isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0)));
        _787 = cbModelParam._m0[36u].z * (isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0)));
    }
    else
    {
        _772 = _773;
        _774 = _773;
        _775 = _773;
        _776 = _773;
        _777 = _773;
        _778 = _773;
        _779 = _773;
        _780 = _773;
        _781 = _773;
        _782 = _773;
        _783 = _773;
        _784 = _773;
        _785 = 0.0;
        _786 = 0.0;
        _787 = 0.0;
    }
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _816 = fma(_441, cbModelParam._m0[30u].z, fma(_437, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _433));
        float _820 = fma(_441, cbModelParam._m0[31u].z, fma(_437, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _433));
        float _824 = fma(_441, cbModelParam._m0[32u].z, fma(_437, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _433));
        float _847 = _433 + _232;
        float _848 = _437 + _233;
        float _849 = _441 + _234;
        float _859 = fma(_849, cbModelParam._m0[30u].z, fma(_848, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _847)) - _816;
        float _860 = fma(_849, cbModelParam._m0[31u].z, fma(_848, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _847)) - _820;
        float _861 = fma(_849, cbModelParam._m0[32u].z, fma(_848, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _847)) - _824;
        float _865 = inversesqrt(dot(vec3(_859, _860, _861), vec3(_859, _860, _861)));
        float _878 = ((_865 * _859) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_816 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _879 = ((_865 * _860) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_820 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _880 = ((_865 * _861) / cbModelParam._m0[35u].z) + ((((((_824 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        float _915 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _916 = _915 * (_882.x + (-0.5));
        float _917 = _915 * (_882.y + (-0.5));
        float _918 = _915 * (_882.z + (-0.5));
        float _925 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_889.x + (-0.5));
        float _927 = _925 * (_889.y + (-0.5));
        float _928 = _925 * (_889.z + (-0.5));
        float _935 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_896.x + (-0.5));
        float _937 = _935 * (_896.y + (-0.5));
        float _938 = _935 * (_896.z + (-0.5));
        float _945 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_903.x + (-0.5));
        float _947 = _945 * (_903.y + (-0.5));
        float _948 = _945 * (_903.z + (-0.5));
        float _949 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _950 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _951 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _952 = _916 * 0.5;
        float _953 = _926 * 0.5;
        float _954 = _936 * 0.5;
        float _955 = dot(vec3(_952, _953, _954), vec3(_952, _953, _954));
        float _960 = (_955 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_955);
        float _968 = (dot(vec3(_232, _233, _234), vec3(_960 * _952, _960 * _953, _960 * _954)) + 1.0) * 0.5;
        float _3281 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _977 = sqrt(((_953 * _953) + (_952 * _952)) + (_954 * _954)) / (_949 + 9.9999997473787516355514526367188e-06);
        float _3292 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0));
        float _979 = _978 * 2.0;
        float _983 = (1.0 - _978) / (_978 + 1.0);
        float _3303 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0));
        float _993 = ((((1.0 - _984) * (_979 + 2.0)) * exp2(log2(isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0))) * (_979 + 1.0))) + _984) * _949;
        float _994 = _917 * 0.5;
        float _995 = _927 * 0.5;
        float _996 = _937 * 0.5;
        float _997 = dot(vec3(_994, _995, _996), vec3(_994, _995, _996));
        float _1002 = (_997 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_997);
        float _1010 = (dot(vec3(_232, _233, _234), vec3(_1002 * _994, _1002 * _995, _1002 * _996)) + 1.0) * 0.5;
        float _3314 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1019 = sqrt(((_995 * _995) + (_994 * _994)) + (_996 * _996)) / (_950 + 9.9999997473787516355514526367188e-06);
        float _3325 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0));
        float _1021 = _1020 * 2.0;
        float _1025 = (1.0 - _1020) / (_1020 + 1.0);
        float _3336 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0));
        float _1035 = ((((1.0 - _1026) * (_1021 + 2.0)) * exp2(log2(isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0))) * (_1021 + 1.0))) + _1026) * _950;
        float _1036 = _918 * 0.5;
        float _1037 = _928 * 0.5;
        float _1038 = _938 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1052 = (dot(vec3(_232, _233, _234), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _3347 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1061 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_951 + 9.9999997473787516355514526367188e-06);
        float _3358 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0));
        float _1063 = _1062 * 2.0;
        float _1067 = (1.0 - _1062) / (_1062 + 1.0);
        float _3369 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
        float _1077 = ((((1.0 - _1068) * (_1063 + 2.0)) * exp2(log2(isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0))) * (_1063 + 1.0))) + _1068) * _951;
        _1085 = _918;
        _1086 = _917;
        _1087 = _916;
        _1088 = _928;
        _1089 = _927;
        _1090 = _926;
        _1091 = _938;
        _1092 = _937;
        _1093 = _936;
        _1094 = _951;
        _1095 = _950;
        _1096 = _949;
        _1097 = cbModelParam._m0[36u].w * (isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0)));
        _1098 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0)));
        _1099 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0)));
    }
    else
    {
        _1085 = _773;
        _1086 = _773;
        _1087 = _773;
        _1088 = _773;
        _1089 = _773;
        _1090 = _773;
        _1091 = _773;
        _1092 = _773;
        _1093 = _773;
        _1094 = _773;
        _1095 = _773;
        _1096 = _773;
        _1097 = 0.0;
        _1098 = 0.0;
        _1099 = 0.0;
    }
    float _1109 = (cbModelParam._m0[1u].x * (_1097 - _785)) + _785;
    float _1110 = (cbModelParam._m0[1u].x * (_1098 - _786)) + _786;
    float _1111 = (cbModelParam._m0[1u].x * (_1099 - _787)) + _787;
    float _1132 = fma(_1111, cbSceneParam._m0[89u].z, fma(_1110, cbSceneParam._m0[89u].y, _1109 * cbSceneParam._m0[89u].x));
    float _1135 = fma(_1111, cbSceneParam._m0[90u].z, fma(_1110, cbSceneParam._m0[90u].y, _1109 * cbSceneParam._m0[90u].x));
    float _1138 = fma(_1111, cbSceneParam._m0[91u].z, fma(_1110, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1109));
    float _1153 = _409 * 0.5;
    float _1154 = _410 * 0.5;
    float _1155 = _411 * 0.5;
    float _1156 = dot(vec4(_1153, _1154, _1155, 1.0), vec4(_1087, _1090, _1093, _1096));
    float _1159 = dot(vec4(_1153, _1154, _1155, 1.0), vec4(_1086, _1089, _1092, _1095));
    float _1162 = dot(vec4(_1153, _1154, _1155, 1.0), vec4(_1085, _1088, _1091, _1094));
    float _1196;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1169 = dot(vec4(_1153, _1154, _1155, 1.0), vec4(_772, _776, _779, _782));
        float _1173 = dot(vec4(_1153, _1154, _1155, 1.0), vec4(_774, _777, _780, _783));
        float _1177 = dot(vec4(_1153, _1154, _1155, 1.0), vec4(_775, _778, _781, _784));
        float _1184 = dot(vec4(cbModelParam._m0[39u]), vec4(_1153, _1154, _1155, 1.0));
        _1196 = dot(vec3(isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)), isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)), isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1184) ? 0.0 : (isnan(0.0) ? _1184 : max(0.0, _1184))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1196 = 1.0;
    }
    float _1207;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1198 = dot(vec4(cbModelParam._m0[40u]), vec4(_1153, _1154, _1155, 1.0));
        _1207 = dot(vec3(isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)), isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)), isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1198) ? 0.0 : (isnan(0.0) ? _1198 : max(0.0, _1198))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1207 = 1.0;
    }
    float _1211 = (_1207 * cbModelParam._m0[1u].x) + (_1196 * (1.0 - cbModelParam._m0[1u].x));
    float _1220 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1302;
    float _1304;
    float _1306;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1269 = fma(_441, cbModelParam._m0[13u].z, fma(_437, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _433)) + cbModelParam._m0[13u].w;
        float _1273 = fma(_441, cbModelParam._m0[14u].z, fma(_437, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _433)) + cbModelParam._m0[14u].w;
        float _1277 = fma(_441, cbModelParam._m0[15u].z, fma(_437, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _433)) + cbModelParam._m0[15u].w;
        float _1280 = fma(_411, cbModelParam._m0[13u].z, fma(_410, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _409));
        float _1283 = fma(_411, cbModelParam._m0[14u].z, fma(_410, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _409));
        float _1286 = fma(_411, cbModelParam._m0[15u].z, fma(_410, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _409));
        float _1312;
        if (_1280 > 0.0)
        {
            _1312 = abs((1.0 - _1269) / _1280);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1280 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1269 + 1.0) / _1280);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1312 = frontier_phi_19_17_ladder;
        }
        float _1541;
        if (_1283 > 0.0)
        {
            _1541 = abs((1.0 - _1273) / _1283);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1283 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1273 + 1.0) / _1283);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1541 = frontier_phi_28_24_ladder;
        }
        float _1733;
        if (_1286 > 0.0)
        {
            _1733 = abs((1.0 - _1277) / _1286);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1286 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1277 + 1.0) / _1286);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1733 = frontier_phi_40_35_ladder;
        }
        float _1735 = isnan(_1541) ? _1312 : (isnan(_1312) ? _1541 : min(_1312, _1541));
        float _1736 = isnan(_1733) ? _1735 : (isnan(_1735) ? _1733 : min(_1735, _1733));
        float _1740 = (_1736 * _1280) + _1269;
        float _1741 = (_1736 * _1283) + _1273;
        float _1742 = (_1736 * _1286) + _1277;
        float _1743 = _1736 * 9.9999997473787516355514526367188e-05;
        float _1745 = (-1.0) - _1743;
        float _1747 = _1743 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1742 > _1747) || ((_1742 < _1745) || ((_1741 > _1747) || ((_1741 < _1745) || ((_1740 < _1745) || (_1740 > _1747))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1839 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1742, cbModelParam._m0[9u].z, fma(_1741, cbModelParam._m0[9u].y, _1740 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1742, cbModelParam._m0[10u].z, fma(_1741, cbModelParam._m0[10u].y, _1740 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1742, cbModelParam._m0[11u].z, fma(_1741, cbModelParam._m0[11u].y, _1740 * cbModelParam._m0[11u].x))), _1220);
            frontier_phi_18_40_ladder = _1839.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1839.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1839.x * cbModelParam._m0[1u].y;
        }
        _1302 = frontier_phi_18_40_ladder_2;
        _1304 = frontier_phi_18_40_ladder_1;
        _1306 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1290 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_409, _410, _411), _1220);
        _1302 = _1290.x * cbModelParam._m0[1u].y;
        _1304 = _1290.y * cbModelParam._m0[1u].y;
        _1306 = _1290.z * cbModelParam._m0[1u].y;
    }
    float _1309 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1402;
    float _1404;
    float _1406;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1366 = fma(_441, cbModelParam._m0[21u].z, fma(_437, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _433)) + cbModelParam._m0[21u].w;
        float _1370 = fma(_441, cbModelParam._m0[22u].z, fma(_437, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _433)) + cbModelParam._m0[22u].w;
        float _1374 = fma(_441, cbModelParam._m0[23u].z, fma(_437, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _433)) + cbModelParam._m0[23u].w;
        float _1377 = fma(_411, cbModelParam._m0[21u].z, fma(_410, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _409));
        float _1380 = fma(_411, cbModelParam._m0[22u].z, fma(_410, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _409));
        float _1383 = fma(_411, cbModelParam._m0[23u].z, fma(_410, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _409));
        float _1546;
        if (_1377 > 0.0)
        {
            _1546 = abs((1.0 - _1366) / _1377);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1377 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1366 + 1.0) / _1377);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1546 = frontier_phi_30_26_ladder;
        }
        float _1760;
        if (_1380 > 0.0)
        {
            _1760 = abs((1.0 - _1370) / _1380);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1380 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1370 + 1.0) / _1380);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1760 = frontier_phi_42_37_ladder;
        }
        float _1911;
        if (_1383 > 0.0)
        {
            _1911 = abs((1.0 - _1374) / _1383);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1383 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1374 + 1.0) / _1383);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _1911 = frontier_phi_51_48_ladder;
        }
        float _1913 = isnan(_1760) ? _1546 : (isnan(_1546) ? _1760 : min(_1546, _1760));
        float _1914 = isnan(_1911) ? _1913 : (isnan(_1913) ? _1911 : min(_1913, _1911));
        float _1918 = (_1914 * _1377) + _1366;
        float _1919 = (_1914 * _1380) + _1370;
        float _1920 = (_1914 * _1383) + _1374;
        float _1921 = _1914 * 9.9999997473787516355514526367188e-05;
        float _1922 = (-1.0) - _1921;
        float _1924 = _1921 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_1920 > _1924) || ((_1920 < _1922) || ((_1919 > _1924) || ((_1919 < _1922) || ((_1918 < _1922) || (_1918 > _1924))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2147 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1920, cbModelParam._m0[17u].z, fma(_1919, cbModelParam._m0[17u].y, _1918 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1920, cbModelParam._m0[18u].z, fma(_1919, cbModelParam._m0[18u].y, _1918 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1920, cbModelParam._m0[19u].z, fma(_1919, cbModelParam._m0[19u].y, _1918 * cbModelParam._m0[19u].x))), _1309);
            frontier_phi_27_51_ladder = _2147.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2147.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2147.x * cbModelParam._m0[1u].z;
        }
        _1402 = frontier_phi_27_51_ladder_2;
        _1404 = frontier_phi_27_51_ladder_1;
        _1406 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1386 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_409, _410, _411), _1309);
        _1402 = _1386.x * cbModelParam._m0[1u].z;
        _1404 = _1386.y * cbModelParam._m0[1u].z;
        _1406 = _1386.z * cbModelParam._m0[1u].z;
    }
    float _1418 = _400 * 0.01200000010430812835693359375;
    float _1420 = _1418 * ((cbModelParam._m0[1u].w * (_1402 - _1302)) + _1302);
    float _1421 = _1418 * ((cbModelParam._m0[1u].w * (_1404 - _1304)) + _1304);
    float _1422 = _1418 * ((cbModelParam._m0[1u].w * (_1406 - _1306)) + _1306);
    float _1425 = fma(_1422, cbSceneParam._m0[89u].z, fma(_1421, cbSceneParam._m0[89u].y, _1420 * cbSceneParam._m0[89u].x));
    float _1428 = fma(_1422, cbSceneParam._m0[90u].z, fma(_1421, cbSceneParam._m0[90u].y, _1420 * cbSceneParam._m0[90u].x));
    float _1431 = fma(_1422, cbSceneParam._m0[91u].z, fma(_1421, cbSceneParam._m0[91u].y, _1420 * cbSceneParam._m0[91u].x));
    vec4 _1439 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_334, _335));
    float _1441 = _1439.w;
    float _1453 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1441);
    float _1454 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1441);
    float _1455 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1441);
    uvec4 _1459 = floatBitsToUint(cbInstanceData._m0[_374 + 5u]);
    uint _1461 = _1459.x * 14u;
    uint _1462 = _1461 + 13u;
    float _1469 = _400 + (-1.0);
    float _1475 = (cbLight._m0[_1462].x * _1469) + 1.0;
    float _1476 = (cbLight._m0[_1462].y * _1469) + 1.0;
    float _1477 = (cbLight._m0[_1462].z * _1469) + 1.0;
    float _1478 = (cbLight._m0[_1462].w * _1469) + 1.0;
    uint _1479 = _1461 + 5u;
    float _1485 = isnan(1.0) ? _1476 : (isnan(_1476) ? 1.0 : min(_1476, 1.0));
    uint _1489 = _1461 + 4u;
    float _1499 = isnan(1.0) ? _1475 : (isnan(_1475) ? 1.0 : min(_1475, 1.0));
    uint _1503 = _1461 | 1u;
    float _1514 = dot(vec3(cbLight._m0[_1461].xyz), vec3(_232, _233, _234));
    float _1517 = dot(vec3(cbLight._m0[_1503].xyz), vec3(_232, _233, _234));
    float _3505 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
    float _3516 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
    float _1522 = (isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0))) * 0.3183098733425140380859375;
    float _1524 = (isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0))) * 0.3183098733425140380859375;
    float _1531 = ((cbLight._m0[_1479].x * _1485) * _1524) + (((cbLight._m0[_1489].x * _1453) * _1499) * _1522);
    float _1532 = ((_1485 * cbLight._m0[_1479].y) * _1524) + (((cbLight._m0[_1489].y * _1454) * _1499) * _1522);
    float _1533 = ((_1485 * cbLight._m0[_1479].z) * _1524) + (((cbLight._m0[_1489].z * _1455) * _1499) * _1522);
    uvec4 _1538 = floatBitsToUint(cbLight._m0[_1461 + 12u]);
    bool _1540 = _1538.x == 0u;
    float _1551;
    float _1553;
    float _1555;
    if (_1540)
    {
        _1551 = _1531;
        _1553 = _1532;
        _1555 = _1533;
    }
    else
    {
        uint _1559 = _1461 + 6u;
        float _1575 = (dot(vec3(cbLight._m0[_1461 + 2u].xyz), vec3(_232, _233, _234)) * 0.5) + 0.5;
        float _1576 = _1575 * _1575;
        float _3527 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _1578 = isnan(1.0) ? _1477 : (isnan(_1477) ? 1.0 : min(_1477, 1.0));
        _1551 = (((cbLight._m0[_1559].x * 0.3183098733425140380859375) * _1577) * _1578) + _1531;
        _1553 = (((cbLight._m0[_1559].y * 0.3183098733425140380859375) * _1577) * _1578) + _1532;
        _1555 = (((cbLight._m0[_1559].z * 0.3183098733425140380859375) * _1577) * _1578) + _1533;
    }
    bool _1558 = _1538.y == 0u;
    float _1596;
    float _1598;
    float _1600;
    if (_1558)
    {
        _1596 = _1551;
        _1598 = _1553;
        _1600 = _1555;
    }
    else
    {
        uint _1704 = _1461 + 7u;
        float _1720 = (dot(vec3(cbLight._m0[_1461 + 3u].xyz), vec3(_232, _233, _234)) * 0.5) + 0.5;
        float _1721 = _1720 * _1720;
        float _3543 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1722 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _1723 = isnan(1.0) ? _1478 : (isnan(_1478) ? 1.0 : min(_1478, 1.0));
        _1596 = (((cbLight._m0[_1704].x * 0.3183098733425140380859375) * _1722) * _1723) + _1551;
        _1598 = (((cbLight._m0[_1704].y * 0.3183098733425140380859375) * _1722) * _1723) + _1553;
        _1600 = (((cbLight._m0[_1704].z * 0.3183098733425140380859375) * _1722) * _1723) + _1555;
    }
    uint _1602 = _1461 + 8u;
    float _1608 = cbLight._m0[_1461].x + _313;
    float _1609 = cbLight._m0[_1461].y + _314;
    float _1610 = cbLight._m0[_1461].z + _315;
    float _1614 = inversesqrt(dot(vec3(_1608, _1609, _1610), vec3(_1608, _1609, _1610)));
    float _1618 = dot(vec3(_232, _233, _234), vec3(cbLight._m0[_1461].xyz));
    float _3559 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
    float _1621 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
    float _3570 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _1622 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
    float _1623 = dot(vec3(cbLight._m0[_1461].xyz), vec3(_1608 * _1614, _1609 * _1614, _1610 * _1614));
    float _3581 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
    float _1634 = (exp2(log2(1.0 - (isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1640 = (0.5 / ((_1621 + 9.9999999392252902907785028219223e-09) + _1622)) * _1621;
    float _3592 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
    float _1642 = (isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0))) * 0.31831014156341552734375;
    uint _1656 = _1461 + 9u;
    float _1662 = cbLight._m0[_1503].x + _313;
    float _1663 = cbLight._m0[_1503].y + _314;
    float _1664 = cbLight._m0[_1503].z + _315;
    float _1668 = inversesqrt(dot(vec3(_1662, _1663, _1664), vec3(_1662, _1663, _1664)));
    float _1672 = dot(vec3(_232, _233, _234), vec3(cbLight._m0[_1503].xyz));
    float _3603 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
    float _1675 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
    float _1676 = dot(vec3(cbLight._m0[_1503].xyz), vec3(_1662 * _1668, _1663 * _1668, _1664 * _1668));
    float _3614 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
    float _1685 = (exp2(log2(1.0 - (isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1689 = (0.5 / ((_1675 + 9.9999999392252902907785028219223e-09) + _1622)) * _1675;
    float _3625 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
    float _1691 = (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))) * 0.31831014156341552734375;
    float _1701 = (((_1685 * cbLight._m0[_1656].x) * _1691) * _1485) + ((((cbLight._m0[_1602].x * _1453) * _1634) * _1642) * _1499);
    float _1702 = (((_1685 * cbLight._m0[_1656].y) * _1691) * _1485) + ((((cbLight._m0[_1602].y * _1454) * _1634) * _1642) * _1499);
    float _1703 = (((_1685 * cbLight._m0[_1656].z) * _1691) * _1485) + ((((cbLight._m0[_1602].z * _1455) * _1634) * _1642) * _1499);
    float _1765;
    float _1767;
    float _1769;
    if (_1540)
    {
        _1765 = _1701;
        _1767 = _1702;
        _1769 = _1703;
    }
    else
    {
        uint _1771 = _1461 + 10u;
        uint _1777 = _1461 + 2u;
        float _1783 = cbLight._m0[_1777].x + _313;
        float _1784 = cbLight._m0[_1777].y + _314;
        float _1785 = cbLight._m0[_1777].z + _315;
        float _1789 = inversesqrt(dot(vec3(_1783, _1784, _1785), vec3(_1783, _1784, _1785)));
        float _1793 = dot(vec3(_232, _233, _234), vec3(cbLight._m0[_1777].xyz));
        float _3636 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1796 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _1797 = dot(vec3(cbLight._m0[_1777].xyz), vec3(_1783 * _1789, _1784 * _1789, _1785 * _1789));
        float _3647 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1806 = (exp2(log2(1.0 - (isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1810 = (0.5 / ((_1796 + 9.9999999392252902907785028219223e-09) + _1622)) * _1796;
        float _3658 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1812 = (isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) * 0.31831014156341552734375;
        float _1813 = isnan(1.0) ? _1477 : (isnan(_1477) ? 1.0 : min(_1477, 1.0));
        _1765 = (((_1806 * cbLight._m0[_1771].x) * _1812) * _1813) + _1701;
        _1767 = (((_1806 * cbLight._m0[_1771].y) * _1812) * _1813) + _1702;
        _1769 = (((_1806 * cbLight._m0[_1771].z) * _1812) * _1813) + _1703;
    }
    float _1848;
    float _1850;
    float _1852;
    if (_1558)
    {
        _1848 = _1765;
        _1850 = _1767;
        _1852 = _1769;
    }
    else
    {
        uint _1859 = _1461 + 11u;
        uint _1865 = _1461 + 3u;
        float _1871 = cbLight._m0[_1865].x + _313;
        float _1872 = cbLight._m0[_1865].y + _314;
        float _1873 = cbLight._m0[_1865].z + _315;
        float _1877 = inversesqrt(dot(vec3(_1871, _1872, _1873), vec3(_1871, _1872, _1873)));
        float _1881 = dot(vec3(_232, _233, _234), vec3(cbLight._m0[_1865].xyz));
        float _3674 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
        float _1884 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1885 = dot(vec3(cbLight._m0[_1865].xyz), vec3(_1871 * _1877, _1872 * _1877, _1873 * _1877));
        float _3685 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
        float _1894 = (exp2(log2(1.0 - (isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1898 = (0.5 / ((_1884 + 9.9999999392252902907785028219223e-09) + _1622)) * _1884;
        float _3696 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1900 = (isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * 0.31831014156341552734375;
        float _1901 = isnan(1.0) ? _1478 : (isnan(_1478) ? 1.0 : min(_1478, 1.0));
        _1848 = (((_1894 * cbLight._m0[_1859].x) * _1900) * _1901) + _1765;
        _1850 = (((_1894 * cbLight._m0[_1859].y) * _1900) * _1901) + _1767;
        _1852 = (((_1894 * cbLight._m0[_1859].z) * _1900) * _1901) + _1769;
    }
    float _2035;
    float _2037;
    float _2039;
    float _2041;
    float _2043;
    float _2045;
    if (_1459.y == 0u)
    {
        float _1976 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1977 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1976;
        float _1978 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1976;
        float _1979 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1976;
        uvec4 _1991 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1992 = _1991.x;
        uint _2003 = uint((float(_1991.y) * floor(float(uint(cbSceneParam._m0[85u].y * _335) / _1992))) + floor(float(uint(cbSceneParam._m0[85u].x * _334) / _1992)));
        float _2013 = (log2(_1979 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2014 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
        uint _2017 = uint(isnan(14.0) ? _2014 : (isnan(_2014) ? 14.0 : min(_2014, 14.0)));
        uvec4 _2022 = texelFetch(g_lightClusterGridBuffer, int(((_2017 << 2u) + (_2003 << 6u)) >> 2u));
        uint _2023 = _2022.x;
        uint _2024 = _1991.z;
        float _2152;
        float _2154;
        float _2156;
        float _2158;
        float _2160;
        float _2162;
        if (((((1u << ((_2024 >> 4u) & 15u)) + 4294967295u) & _2023) == 0u) || ((_2024 & 240u) == 0u))
        {
            _2152 = 0.0;
            _2154 = 0.0;
            _2156 = 0.0;
            _2158 = 0.0;
            _2160 = 0.0;
            _2162 = 0.0;
        }
        else
        {
            float _2153;
            float _2155;
            float _2157;
            float _2159;
            float _2161;
            float _2163;
            float _2349 = 0.0;
            float _2350 = 0.0;
            float _2351 = 0.0;
            float _2352 = 0.0;
            float _2353 = 0.0;
            float _2354 = 0.0;
            uint _2355 = 0u;
            uint _2364;
            bool _2365;
            for (;;)
            {
                _2364 = texelFetch(g_lightClassification, int((((_2017 << 5u) + (_2003 << 9u)) + (_2355 << 2u)) >> 2u)).x;
                _2365 = _2364 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2365)
                {
                    frontier_phi_68_pred = _2351;
                    frontier_phi_68_pred_1 = _2354;
                    frontier_phi_68_pred_2 = _2353;
                    frontier_phi_68_pred_3 = _2352;
                    frontier_phi_68_pred_4 = _2350;
                    frontier_phi_68_pred_5 = _2349;
                }
                else
                {
                    float _2494;
                    float _2495;
                    float _2496;
                    float _2497;
                    float _2498;
                    float _2499;
                    uint _2500;
                    _2494 = _2349;
                    _2495 = _2350;
                    _2496 = _2351;
                    _2497 = _2352;
                    _2498 = _2353;
                    _2499 = _2354;
                    _2500 = _2364;
                    float _2421;
                    float _2422;
                    float _2423;
                    float _2424;
                    float _2425;
                    float _2426;
                    for (;;)
                    {
                        uint _2504 = uint(findLSB(_2500)) + (_2355 << 5u);
                        uint _2501 = (_2500 + 4294967295u) & _2500;
                        uint _2506 = _2504 * 48u;
                        vec4 _2520 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2506)).x, texelFetch(g_PointLightRenderingBuffer, int(_2506 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2506 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2506 + 3u)).x));
                        uint _2526 = (_2504 * 48u) + 4u;
                        vec4 _2539 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2526)).x, texelFetch(g_PointLightRenderingBuffer, int(_2526 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2526 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2526 + 3u)).x));
                        uint _2545 = (_2504 * 48u) + 8u;
                        vec3 _2556 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2545)).x, texelFetch(g_PointLightRenderingBuffer, int(_2545 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2545 + 2u)).x));
                        float _2560 = _2520.x - _1977;
                        float _2561 = _2520.y - _1978;
                        float _2562 = _2520.z - _1979;
                        float _2563 = dot(vec3(_2560, _2561, _2562), vec3(_2560, _2561, _2562));
                        float _2566 = inversesqrt(_2563);
                        float _2575 = 1.0 - (_2563 * _2520.w);
                        float _3722 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
                        float _2576 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
                        float _2577 = sqrt(_2563) * _2539.w;
                        float _2580 = 1.39999997615814208984375 / (_2577 + 1.39999997615814208984375);
                        float _2581 = _2580 * _2580;
                        float _2584 = ((1.0 - _2581) * dot(vec3(_355, _358, _361), vec3(_2566 * _2560, _2566 * _2561, _2566 * _2562))) + _2581;
                        float _2587 = _2577 * _2577;
                        float _2591 = ((isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0))) * _2576) / ((_2587 * 0.699999988079071044921875) + 1.0);
                        float _2595 = (-0.0) - _1977;
                        float _2596 = (-0.0) - _1978;
                        float _2597 = (-0.0) - _1979;
                        float _2601 = inversesqrt(dot(vec3(_2595, _2596, _2597), vec3(_2595, _2596, _2597)));
                        float _2605 = dot(vec3(_355, _358, _361), vec3(_2601 * _2595, _2601 * _2596, _2601 * _2597));
                        float _3738 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
                        float _3749 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
                        float _2609 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
                        float _2613 = (0.5 / (((isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) + 9.9999999392252902907785028219223e-09) + _2609)) * _2609;
                        float _3760 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
                        float _2622 = (((isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * 3.1415927410125732421875) / ((_2587 * 2.1991131305694580078125) + 3.141590118408203125)) * _2576;
                        _2424 = (_2591 * _2539.x) + _2497;
                        _2425 = (_2591 * _2539.y) + _2498;
                        _2426 = (_2591 * _2539.z) + _2499;
                        _2421 = (_2622 * _2556.x) + _2494;
                        _2422 = (_2622 * _2556.y) + _2495;
                        _2423 = (_2622 * _2556.z) + _2496;
                        if (_2501 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2494 = _2421;
                            _2495 = _2422;
                            _2496 = _2423;
                            _2497 = _2424;
                            _2498 = _2425;
                            _2499 = _2426;
                            _2500 = _2501;
                        }
                    }
                    frontier_phi_68_pred = _2423;
                    frontier_phi_68_pred_1 = _2426;
                    frontier_phi_68_pred_2 = _2425;
                    frontier_phi_68_pred_3 = _2424;
                    frontier_phi_68_pred_4 = _2422;
                    frontier_phi_68_pred_5 = _2421;
                }
                _2157 = frontier_phi_68_pred;
                _2163 = frontier_phi_68_pred_1;
                _2161 = frontier_phi_68_pred_2;
                _2159 = frontier_phi_68_pred_3;
                _2155 = frontier_phi_68_pred_4;
                _2153 = frontier_phi_68_pred_5;
                uint _2356 = _2355 + 1u;
                if (_2356 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2349 = _2153;
                    _2350 = _2155;
                    _2351 = _2157;
                    _2352 = _2159;
                    _2353 = _2161;
                    _2354 = _2163;
                    _2355 = _2356;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2152 = _2153;
            _2154 = _2155;
            _2156 = _2157;
            _2158 = _2159;
            _2160 = _2161;
            _2162 = _2163;
        }
        uvec4 _2166 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2167 = _2166.z;
        uint _2169 = (_2167 >> 8u) & 15u;
        float _2320;
        float _2322;
        float _2324;
        float _2326;
        float _2328;
        float _2330;
        if (((4294967295u << _2169) & _2023) == 0u)
        {
            _2320 = _2152;
            _2322 = _2154;
            _2324 = _2156;
            _2326 = _2158;
            _2328 = _2160;
            _2330 = _2162;
        }
        else
        {
            float _2345 = inversesqrt(dot(vec3(_1977, _1978, _1979), vec3(_1977, _1978, _1979)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2169 < ((_2167 >> 12u) & 15u))
            {
                float _2321;
                float _2323;
                float _2325;
                float _2327;
                float _2329;
                float _2331;
                float _2477 = _2152;
                float _2478 = _2154;
                float _2479 = _2156;
                float _2480 = _2158;
                float _2481 = _2160;
                float _2482 = _2162;
                uint _2483 = _2169;
                uint _2492;
                bool _2493;
                for (;;)
                {
                    _2492 = texelFetch(g_lightClassification, int((((_2017 << 5u) + (_2003 << 9u)) + (_2483 << 2u)) >> 2u)).x;
                    _2493 = _2492 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2493)
                    {
                        frontier_phi_79_pred = _2482;
                        frontier_phi_79_pred_1 = _2481;
                        frontier_phi_79_pred_2 = _2480;
                        frontier_phi_79_pred_3 = _2479;
                        frontier_phi_79_pred_4 = _2478;
                        frontier_phi_79_pred_5 = _2477;
                    }
                    else
                    {
                        float _2636;
                        float _2637;
                        float _2638;
                        float _2639;
                        float _2640;
                        float _2641;
                        float _2888;
                        float _2889;
                        float _2890;
                        float _2891;
                        float _2892;
                        float _2893;
                        float _2649 = _2477;
                        float _2650 = _2478;
                        float _2651 = _2479;
                        float _2652 = _2480;
                        float _2653 = _2481;
                        float _2654 = _2482;
                        uint _2655 = _2492;
                        uint _2656;
                        vec4 _2681;
                        float _2682;
                        vec4 _2697;
                        vec3 _2709;
                        vec4 _2725;
                        vec4 _2741;
                        float _2788;
                        bool _2789;
                        for (;;)
                        {
                            uint _2666 = ((_2483 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2655));
                            _2656 = (_2655 + 4294967295u) & _2655;
                            uint _2668 = _2666 * 40u;
                            _2681 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2668)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2668 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2668 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2668 + 3u)).x));
                            _2682 = _2681.w;
                            uint _2684 = (_2666 * 40u) + 4u;
                            _2697 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2684)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2684 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2684 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2684 + 3u)).x));
                            uint _2699 = (_2666 * 40u) + 8u;
                            _2709 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2699)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2699 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2699 + 2u)).x));
                            uint _2712 = (_2666 * 40u) + 16u;
                            _2725 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2712)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2712 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2712 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2712 + 3u)).x));
                            uint _2728 = (_2666 * 40u) + 20u;
                            _2741 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2728)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2728 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2728 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2728 + 3u)).x));
                            uint _2744 = (_2666 * 40u) + 24u;
                            vec4 _2757 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2744)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2744 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2744 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2744 + 3u)).x));
                            uint _2763 = (_2666 * 40u) + 28u;
                            vec4 _2776 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2763)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2763 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2763 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2763 + 3u)).x));
                            _2788 = fma(_1979, _2776.z, fma(_1978, _2776.y, _2776.x * _1977)) + _2776.w;
                            _2789 = !((fma(_1979, _2757.z, fma(_1978, _2757.y, _2757.x * _1977)) + _2757.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2789)
                            {
                                float _2816 = _2681.x - _1977;
                                float _2817 = _2681.y - _1978;
                                float _2818 = _2681.z - _1979;
                                float _2819 = dot(vec3(_2816, _2817, _2818), vec3(_2816, _2817, _2818));
                                float _2822 = inversesqrt(_2819);
                                float _2823 = _2822 * _2816;
                                float _2824 = _2822 * _2817;
                                float _2825 = _2822 * _2818;
                                float _2829 = 1.0 - (_2819 / (_2682 * _2682));
                                float _3771 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
                                float _2830 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
                                float _2834 = sqrt(_2819) * _2697.w;
                                float _2836 = 1.39999997615814208984375 / (_2834 + 1.39999997615814208984375);
                                float _2837 = _2836 * _2836;
                                float _2838 = 1.0 - _2837;
                                float _2840 = (_2838 * dot(vec3(_2823, _2824, _2825), vec3(_355, _358, _361))) + _2837;
                                float _2843 = _2834 * _2834;
                                float _2847 = (fma(_1979, _2725.z, fma(_1978, _2725.y, _2725.x * _1977)) + _2725.w) / _2788;
                                float _2848 = (fma(_1979, _2741.z, fma(_1978, _2741.y, _2741.x * _1977)) + _2741.w) / _2788;
                                float _2852 = 1.0 - dot(vec2(_2847, _2848), vec2(_2847, _2848));
                                float _3787 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
                                float _2853 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
                                float _2854 = _2853 * (((isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0))) * _2830) / ((_2843 * 0.699999988079071044921875) + 1.0));
                                float _2864 = dot(vec3(_355, _358, _361), vec3((-0.0) - (_1977 * _2345), (-0.0) - (_1978 * _2345), (-0.0) - (_1979 * _2345)));
                                float _3798 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
                                float _2872 = (_2838 * dot(vec3(_355, _358, _361), vec3(_2823, _2824, _2825))) + _2837;
                                float _3809 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
                                float _2873 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
                                float _2877 = (0.5 / (((isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) + 9.9999999392252902907785028219223e-09) + _2873)) * _2873;
                                float _3820 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
                                float _2884 = (_2853 * _2830) * (((isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * 3.1415927410125732421875) / ((_2843 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_85_pred = _2854 * _2697.z;
                                frontier_phi_85_pred_1 = _2854 * _2697.y;
                                frontier_phi_85_pred_2 = _2854 * _2697.x;
                                frontier_phi_85_pred_3 = _2884 * _2709.z;
                                frontier_phi_85_pred_4 = _2884 * _2709.y;
                                frontier_phi_85_pred_5 = _2884 * _2709.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _2893 = frontier_phi_85_pred;
                            _2892 = frontier_phi_85_pred_1;
                            _2891 = frontier_phi_85_pred_2;
                            _2890 = frontier_phi_85_pred_3;
                            _2889 = frontier_phi_85_pred_4;
                            _2888 = frontier_phi_85_pred_5;
                            _2639 = _2891 + _2652;
                            _2640 = _2892 + _2653;
                            _2641 = _2893 + _2654;
                            _2636 = _2888 + _2649;
                            _2637 = _2889 + _2650;
                            _2638 = _2890 + _2651;
                            if (_2656 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2649 = _2636;
                                _2650 = _2637;
                                _2651 = _2638;
                                _2652 = _2639;
                                _2653 = _2640;
                                _2654 = _2641;
                                _2655 = _2656;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2641;
                        frontier_phi_79_pred_1 = _2640;
                        frontier_phi_79_pred_2 = _2639;
                        frontier_phi_79_pred_3 = _2638;
                        frontier_phi_79_pred_4 = _2637;
                        frontier_phi_79_pred_5 = _2636;
                    }
                    _2331 = frontier_phi_79_pred;
                    _2329 = frontier_phi_79_pred_1;
                    _2327 = frontier_phi_79_pred_2;
                    _2325 = frontier_phi_79_pred_3;
                    _2323 = frontier_phi_79_pred_4;
                    _2321 = frontier_phi_79_pred_5;
                    uint _2484 = _2483 + 1u;
                    if (_2484 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2477 = _2321;
                        _2478 = _2323;
                        _2479 = _2325;
                        _2480 = _2327;
                        _2481 = _2329;
                        _2482 = _2331;
                        _2483 = _2484;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2327;
                frontier_phi_60_61_ladder_1 = _2331;
                frontier_phi_60_61_ladder_2 = _2329;
                frontier_phi_60_61_ladder_3 = _2325;
                frontier_phi_60_61_ladder_4 = _2323;
                frontier_phi_60_61_ladder_5 = _2321;
            }
            else
            {
                frontier_phi_60_61_ladder = _2158;
                frontier_phi_60_61_ladder_1 = _2162;
                frontier_phi_60_61_ladder_2 = _2160;
                frontier_phi_60_61_ladder_3 = _2156;
                frontier_phi_60_61_ladder_4 = _2154;
                frontier_phi_60_61_ladder_5 = _2152;
            }
            _2320 = frontier_phi_60_61_ladder_5;
            _2322 = frontier_phi_60_61_ladder_4;
            _2324 = frontier_phi_60_61_ladder_3;
            _2326 = frontier_phi_60_61_ladder;
            _2328 = frontier_phi_60_61_ladder_2;
            _2330 = frontier_phi_60_61_ladder_1;
        }
        float _2335 = isnan(1.0) ? _400 : (isnan(_400) ? 1.0 : min(_400, 1.0));
        _2035 = (_2335 * _2326) + _1596;
        _2037 = (_2335 * _2328) + _1598;
        _2039 = (_2335 * _2330) + _1600;
        _2041 = ((_2320 * 0.039999999105930328369140625) * _2335) + _1848;
        _2043 = ((_2322 * 0.039999999105930328369140625) * _2335) + _1850;
        _2045 = ((_2324 * 0.039999999105930328369140625) * _2335) + _1852;
    }
    else
    {
        _2035 = _1596;
        _2037 = _1598;
        _2039 = _1600;
        _2041 = _1848;
        _2043 = _1850;
        _2045 = _1852;
    }
    uint _2051 = _376 + uint(cbMatDynParam._m0[0u].w);
    float _2057 = (_220.x * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2051].x;
    float _2058 = (_220.y * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2051].y;
    float _2059 = (_220.z * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2051].z;
    float _3836 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _3847 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _3858 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _2076 = (((isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * (_2035 + ((isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0))) * _400))) + ((_2041 + ((isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))) * _1211)) * cbPerFrame._m0[3u].x)) + _2057;
    float _2078 = (_2058 + ((_2043 + ((isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))) * _1211)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * (_2037 + ((isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0))) * _400)));
    float _2080 = (_2059 + ((_2045 + ((isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))) * _1211)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_2039 + ((isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0))) * _400)));
    float _2081 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2082 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2083 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2089 = cbMtdParam._m0[2u].x * _2057;
    float _2090 = cbMtdParam._m0[2u].y * _2058;
    float _2091 = cbMtdParam._m0[2u].z * _2059;
    float _3884 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2093 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    uint _2094 = _374 + 6u;
    float _2102 = _334 / cbSceneParam._m0[86u].x;
    float _2103 = _335 / cbSceneParam._m0[86u].y;
    vec4 _2117 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2102, _2103, (log2((isnan(cbSceneParam._m0[77u].w) ? _254 : (isnan(_254) ? cbSceneParam._m0[77u].w : min(_254, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2119 = _2117.x;
    float _2120 = _2117.y;
    float _2121 = _2117.z;
    float _2122 = _2117.w;
    float _2214;
    float _2216;
    float _2218;
    float _2220;
    if (_254 > cbSceneParam._m0[78u].w)
    {
        float _2177 = isnan(_254) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _254 : min(cbSceneParam._m0[80u].w, _254));
        float _2178 = _2177 / _254;
        float _2189 = _2178 * _306;
        float _2190 = _307 * _2178;
        float _2191 = (-0.0) - _2190;
        float _2192 = _2178 * _308;
        float _2194 = (cbSceneParam._m0[77u].w * _2191) / _2177;
        float _2195 = _2194 + cbSceneParam._m0[79u].w;
        float _2196 = cbSceneParam._m0[79u].w - _2190;
        float _2202 = sqrt(((_2189 * _2189) + (_2190 * _2190)) + (_2192 * _2192));
        float _2205 = (1.0 - (cbSceneParam._m0[77u].w / _2177)) * _2202;
        float _2210 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2212 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2434;
        if (abs((_2191 - _2194) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2434 = ((((_2195 > 0.0) ? exp2(_2210 * _2195) : (2.0 - exp2(_2212 * _2195))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2205;
        }
        else
        {
            float _2378 = 1.0 / cbSceneParam._m0[80u].x;
            float _2379 = isnan(_2196) ? _2195 : (isnan(_2195) ? _2196 : max(_2195, _2196));
            float _2380 = isnan(_2196) ? _2195 : (isnan(_2195) ? _2196 : min(_2195, _2196));
            float _2389 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : min(_2379, 0.0));
            float _2390 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : min(_2380, 0.0));
            _2434 = ((abs(_2202 / _2191) * cbSceneParam._m0[80u].y) * ((((_2389 - _2390) * 2.0) - ((exp2(_2210 * (isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0)))) - exp2(_2210 * (isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0))))) * _2378)) - ((exp2(_2212 * _2389) - exp2(_2212 * _2390)) * _2378))) + (_2205 * cbSceneParam._m0[80u].z);
        }
        vec4 _2436 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2102, _2103, 1.0), 0.0);
        float _2445 = exp2((_2434 * (-1.44269502162933349609375)) * (1.0 - _2436.w));
        float _2446 = log2(_2445);
        float _2462 = log2(_2122);
        _2214 = (exp2(_2462 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2446 * cbSceneParam._m0[78u].x)) * _2436.x) / cbSceneParam._m0[78u].x)) + _2119;
        _2216 = (exp2(_2462 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2446 * cbSceneParam._m0[78u].y)) * _2436.y) / cbSceneParam._m0[78u].y)) + _2120;
        _2218 = (exp2(_2462 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2446 * cbSceneParam._m0[78u].z)) * _2436.z) / cbSceneParam._m0[78u].z)) + _2121;
        _2220 = _2445 * _2122;
    }
    else
    {
        _2214 = _2119;
        _2216 = _2120;
        _2218 = _2121;
        _2220 = _2122;
    }
    bool _2472;
    float _2278;
    vec4 _2281;
    float _2283;
    vec4 _2285;
    float _2293;
    float _2294;
    float _2295;
    float _2299;
    float _2303;
    float _2307;
    float _2308;
    bool _2319;
    for (;;)
    {
        bool _2233 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2235 = log2(_2220);
        float _2239 = exp2(_2235 * cbSceneParam._m0[78u].x);
        float _2240 = exp2(_2235 * cbSceneParam._m0[78u].y);
        float _2241 = exp2(_2235 * cbSceneParam._m0[78u].z);
        float _2242 = _2239 * _2081;
        float _2243 = _2240 * _2082;
        float _2244 = _2241 * _2083;
        vec4 _2252 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_334, _335));
        float _2254 = _2252.x;
        float _2275 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2254)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2254))) - _254) * 0.100000001490116119384765625;
        float _3935 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2277 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        _2278 = _2277 * cbInstanceData._m0[_2094].w;
        float _2279 = _322 + (-0.5);
        _2281 = cbMtdParam._m0[1u];
        _2283 = _2281.y * _2279;
        _2285 = cbMatDynParam._m0[0u];
        float _2292 = (roundEven(_2285.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2293 = _2292 * (_2233 ? _2242 : (_2242 + (cbSceneParam._m0[72u].w * _2214)));
        _2294 = _2292 * (_2233 ? _2243 : (_2243 + (cbSceneParam._m0[72u].w * _2216)));
        _2295 = _2292 * (_2233 ? _2244 : (_2244 + (cbSceneParam._m0[72u].w * _2218)));
        _2299 = (((_2089 * _2093) * _2239) * _2277) * _2292;
        _2303 = (((_2090 * _2093) * _2240) * _2277) * _2292;
        _2307 = (((_2091 * _2093) * _2241) * _2277) * _2292;
        _2308 = _2279 * 0.999000012874603271484375;
        _2319 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2319)
        {
            if ((cbInstanceData._m0[_374 + 7u].x + _2308) < 0.5)
            {
                _2472 = true;
                break;
            }
        }
        uint _2413 = _376 + uint(_2285.w);
        if ((cbInstanceData._m0[_2413].w < 1.0) && ((cbInstanceData._m0[_2413].w + _2308) < 0.5))
        {
            _2472 = true;
            break;
        }
        if ((_2283 + 1.0) < _2281.x)
        {
            _2472 = true;
            break;
        }
        _2472 = false;
        break;
    }
    float _2627;
    if (_2472)
    {
        discard_state = true;
        _2627 = 0.0;
    }
    else
    {
        _2627 = _2278;
    }
    SV_Target.x = _2293;
    SV_Target.y = _2294;
    SV_Target.z = _2295;
    SV_Target.w = _2627;
    SV_Target_1.x = _2299;
    SV_Target_1.y = _2303;
    SV_Target_1.z = _2307;
    SV_Target_1.w = _2278;
    discard_exit();
}


