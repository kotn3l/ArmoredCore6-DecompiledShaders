#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A_Emissive_Glow_Addition_Soft_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_A_Emissive_Glow_Addition_Soft_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _728;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _171 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _172 = _171 * NORMAL.x;
    float _173 = _171 * NORMAL.y;
    float _174 = _171 * NORMAL.z;
    float _179;
    float _180;
    float _181;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _179 = (-0.0) - _172;
        _180 = (-0.0) - _173;
        _181 = (-0.0) - _174;
    }
    else
    {
        _179 = _172;
        _180 = _173;
        _181 = _174;
    }
    vec4 _195 = texture(sampler2D(S_A_Emissive_Glow_Addition_Soft_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _198 = _195.x;
    float _199 = _195.y;
    float _200 = _195.z;
    vec4 _216 = texture(sampler2D(S_A_Emissive_Glow_Addition_Soft_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _227 = inversesqrt(dot(vec3(_179, _180, _181), vec3(_179, _180, _181)));
    float _228 = _227 * _179;
    float _229 = _227 * _180;
    float _230 = _227 * _181;
    float _2937 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _2948 = isnan(0.0) ? _199 : (isnan(_199) ? 0.0 : max(_199, 0.0));
    float _2959 = isnan(0.0) ? _200 : (isnan(_200) ? 0.0 : max(_200, 0.0));
    float _250 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _292 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _302 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _292);
    float _303 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _292);
    float _304 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _292);
    float _308 = inversesqrt(dot(vec3(_302, _303, _304), vec3(_302, _303, _304)));
    float _309 = _302 * _308;
    float _310 = _303 * _308;
    float _311 = _304 * _308;
    float _317 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _318 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _339 = fma(_230, cbSceneParam._m0[5u].z, fma(_229, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _228));
    float _342 = fma(_230, cbSceneParam._m0[6u].z, fma(_229, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _228));
    float _345 = fma(_230, cbSceneParam._m0[7u].z, fma(_229, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _228));
    uint _358 = uint(roundEven(NORMAL.w)) * 13u;
    uint _360 = _358 + 9u;
    uint _361 = _360 + uint(cbMatDynParam._m0[0u].w);
    float _367 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2937 : (isnan(_2937) ? 1.0 : min(_2937, 1.0)))) * cbInstanceData._m0[_361].x;
    float _368 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2948 : (isnan(_2948) ? 1.0 : min(_2948, 1.0)))) * cbInstanceData._m0[_361].y;
    float _369 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2959 : (isnan(_2959) ? 1.0 : min(_2959, 1.0)))) * cbInstanceData._m0[_361].z;
    float _2970 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _370 = isnan(1.0) ? _2970 : (isnan(_2970) ? 1.0 : min(_2970, 1.0));
    float _2981 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _371 = isnan(1.0) ? _2981 : (isnan(_2981) ? 1.0 : min(_2981, 1.0));
    float _2992 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _372 = isnan(1.0) ? _2992 : (isnan(_2992) ? 1.0 : min(_2992, 1.0));
    vec4 _381 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _317, cbSceneParam._m0[86u].y * _318));
    float _384 = _381.x * TEXCOORD.z;
    float _385 = dot(vec3(_228, _229, _230), vec3(_309, _310, _311));
    float _388 = _385 * 2.0;
    float _393 = (_388 * _228) - _309;
    float _394 = (_388 * _229) - _310;
    float _395 = (_388 * _230) - _311;
    float _417 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _421 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _425 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _727;
    float _729;
    float _730;
    float _731;
    float _732;
    float _733;
    float _734;
    float _735;
    float _736;
    float _737;
    float _738;
    float _739;
    float _740;
    float _741;
    float _742;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _452 = fma(_425, cbModelParam._m0[26u].z, fma(_421, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _417));
        float _456 = fma(_425, cbModelParam._m0[27u].z, fma(_421, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _417));
        float _460 = fma(_425, cbModelParam._m0[28u].z, fma(_421, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _417));
        float _485 = _417 + _228;
        float _486 = _421 + _229;
        float _487 = _425 + _230;
        float _497 = fma(_487, cbModelParam._m0[26u].z, fma(_486, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _485)) - _452;
        float _498 = fma(_487, cbModelParam._m0[27u].z, fma(_486, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _485)) - _456;
        float _499 = fma(_487, cbModelParam._m0[28u].z, fma(_486, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _485)) - _460;
        float _503 = inversesqrt(dot(vec3(_497, _498, _499), vec3(_497, _498, _499)));
        float _516 = ((_503 * _497) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_452 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _517 = ((_503 * _498) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_456 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _518 = ((_503 * _499) / cbModelParam._m0[34u].z) + ((((((_460 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _521 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_516, _517, _518), 0.0);
        vec4 _528 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_516, _517, _518), 0.0);
        vec4 _535 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_516, _517, _518), 0.0);
        vec4 _542 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_516, _517, _518), 0.0);
        float _555 = exp2((_521.w + (-0.5)) * 20.0) * 2.0;
        float _556 = _555 * (_521.x + (-0.5));
        float _557 = _555 * (_521.y + (-0.5));
        float _558 = _555 * (_521.z + (-0.5));
        float _565 = exp2((_528.w + (-0.5)) * 20.0) * 2.0;
        float _566 = _565 * (_528.x + (-0.5));
        float _567 = _565 * (_528.y + (-0.5));
        float _568 = _565 * (_528.z + (-0.5));
        float _575 = exp2((_535.w + (-0.5)) * 20.0) * 2.0;
        float _576 = _575 * (_535.x + (-0.5));
        float _577 = _575 * (_535.y + (-0.5));
        float _578 = _575 * (_535.z + (-0.5));
        float _585 = exp2((_542.w + (-0.5)) * 20.0) * 2.0;
        float _586 = _585 * (_542.x + (-0.5));
        float _587 = _585 * (_542.y + (-0.5));
        float _588 = _585 * (_542.z + (-0.5));
        float _589 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
        float _590 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
        float _591 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
        float _592 = _556 * 0.5;
        float _593 = _566 * 0.5;
        float _594 = _576 * 0.5;
        float _595 = dot(vec3(_592, _593, _594), vec3(_592, _593, _594));
        float _600 = (_595 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_595);
        float _609 = (dot(vec3(_228, _229, _230), vec3(_600 * _592, _600 * _593, _600 * _594)) + 1.0) * 0.5;
        float _3018 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
        float _619 = sqrt(((_593 * _593) + (_592 * _592)) + (_594 * _594)) / (_589 + 9.9999997473787516355514526367188e-06);
        float _3029 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
        float _620 = isnan(1.0) ? _3029 : (isnan(_3029) ? 1.0 : min(_3029, 1.0));
        float _621 = _620 * 2.0;
        float _625 = (1.0 - _620) / (_620 + 1.0);
        float _3040 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
        float _626 = isnan(1.0) ? _3040 : (isnan(_3040) ? 1.0 : min(_3040, 1.0));
        float _635 = ((((1.0 - _626) * (_621 + 2.0)) * exp2(log2(isnan(1.0) ? _3018 : (isnan(_3018) ? 1.0 : min(_3018, 1.0))) * (_621 + 1.0))) + _626) * _589;
        float _636 = _557 * 0.5;
        float _637 = _567 * 0.5;
        float _638 = _577 * 0.5;
        float _639 = dot(vec3(_636, _637, _638), vec3(_636, _637, _638));
        float _644 = (_639 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_639);
        float _652 = (dot(vec3(_228, _229, _230), vec3(_644 * _636, _644 * _637, _644 * _638)) + 1.0) * 0.5;
        float _3051 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
        float _661 = sqrt(((_637 * _637) + (_636 * _636)) + (_638 * _638)) / (_590 + 9.9999997473787516355514526367188e-06);
        float _3062 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
        float _662 = isnan(1.0) ? _3062 : (isnan(_3062) ? 1.0 : min(_3062, 1.0));
        float _663 = _662 * 2.0;
        float _667 = (1.0 - _662) / (_662 + 1.0);
        float _3073 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
        float _668 = isnan(1.0) ? _3073 : (isnan(_3073) ? 1.0 : min(_3073, 1.0));
        float _677 = ((((1.0 - _668) * (_663 + 2.0)) * exp2(log2(isnan(1.0) ? _3051 : (isnan(_3051) ? 1.0 : min(_3051, 1.0))) * (_663 + 1.0))) + _668) * _590;
        float _678 = _558 * 0.5;
        float _679 = _568 * 0.5;
        float _680 = _578 * 0.5;
        float _681 = dot(vec3(_678, _679, _680), vec3(_678, _679, _680));
        float _686 = (_681 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_681);
        float _694 = (dot(vec3(_228, _229, _230), vec3(_686 * _678, _686 * _679, _686 * _680)) + 1.0) * 0.5;
        float _3084 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _703 = sqrt(((_679 * _679) + (_678 * _678)) + (_680 * _680)) / (_591 + 9.9999997473787516355514526367188e-06);
        float _3095 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _704 = isnan(1.0) ? _3095 : (isnan(_3095) ? 1.0 : min(_3095, 1.0));
        float _705 = _704 * 2.0;
        float _709 = (1.0 - _704) / (_704 + 1.0);
        float _3106 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _710 = isnan(1.0) ? _3106 : (isnan(_3106) ? 1.0 : min(_3106, 1.0));
        float _719 = ((((1.0 - _710) * (_705 + 2.0)) * exp2(log2(isnan(1.0) ? _3084 : (isnan(_3084) ? 1.0 : min(_3084, 1.0))) * (_705 + 1.0))) + _710) * _591;
        _727 = _558;
        _729 = _557;
        _730 = _556;
        _731 = _568;
        _732 = _567;
        _733 = _566;
        _734 = _578;
        _735 = _577;
        _736 = _576;
        _737 = _591;
        _738 = _590;
        _739 = _589;
        _740 = cbModelParam._m0[36u].z * (isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0)));
        _741 = cbModelParam._m0[36u].z * (isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0)));
        _742 = cbModelParam._m0[36u].z * (isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0)));
    }
    else
    {
        _727 = _728;
        _729 = _728;
        _730 = _728;
        _731 = _728;
        _732 = _728;
        _733 = _728;
        _734 = _728;
        _735 = _728;
        _736 = _728;
        _737 = _728;
        _738 = _728;
        _739 = _728;
        _740 = 0.0;
        _741 = 0.0;
        _742 = 0.0;
    }
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _768 = fma(_425, cbModelParam._m0[30u].z, fma(_421, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _417));
        float _772 = fma(_425, cbModelParam._m0[31u].z, fma(_421, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _417));
        float _776 = fma(_425, cbModelParam._m0[32u].z, fma(_421, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _417));
        float _799 = _417 + _228;
        float _800 = _421 + _229;
        float _801 = _425 + _230;
        float _811 = fma(_801, cbModelParam._m0[30u].z, fma(_800, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _799)) - _768;
        float _812 = fma(_801, cbModelParam._m0[31u].z, fma(_800, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _799)) - _772;
        float _813 = fma(_801, cbModelParam._m0[32u].z, fma(_800, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _799)) - _776;
        float _817 = inversesqrt(dot(vec3(_811, _812, _813), vec3(_811, _812, _813)));
        float _830 = ((_817 * _811) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_768 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _831 = ((_817 * _812) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_772 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _832 = ((_817 * _813) / cbModelParam._m0[35u].z) + ((((((_776 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _834 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_830, _831, _832), 0.0);
        vec4 _841 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_830, _831, _832), 0.0);
        vec4 _848 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_830, _831, _832), 0.0);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_830, _831, _832), 0.0);
        float _867 = exp2((_834.w + (-0.5)) * 20.0) * 2.0;
        float _868 = _867 * (_834.x + (-0.5));
        float _869 = _867 * (_834.y + (-0.5));
        float _870 = _867 * (_834.z + (-0.5));
        float _877 = exp2((_841.w + (-0.5)) * 20.0) * 2.0;
        float _878 = _877 * (_841.x + (-0.5));
        float _879 = _877 * (_841.y + (-0.5));
        float _880 = _877 * (_841.z + (-0.5));
        float _887 = exp2((_848.w + (-0.5)) * 20.0) * 2.0;
        float _888 = _887 * (_848.x + (-0.5));
        float _889 = _887 * (_848.y + (-0.5));
        float _890 = _887 * (_848.z + (-0.5));
        float _897 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _898 = _897 * (_855.x + (-0.5));
        float _899 = _897 * (_855.y + (-0.5));
        float _900 = _897 * (_855.z + (-0.5));
        float _901 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _902 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _903 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _904 = _868 * 0.5;
        float _905 = _878 * 0.5;
        float _906 = _888 * 0.5;
        float _907 = dot(vec3(_904, _905, _906), vec3(_904, _905, _906));
        float _912 = (_907 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_907);
        float _920 = (dot(vec3(_228, _229, _230), vec3(_912 * _904, _912 * _905, _912 * _906)) + 1.0) * 0.5;
        float _3147 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _929 = sqrt(((_905 * _905) + (_904 * _904)) + (_906 * _906)) / (_901 + 9.9999997473787516355514526367188e-06);
        float _3158 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3158 : (isnan(_3158) ? 1.0 : min(_3158, 1.0));
        float _931 = _930 * 2.0;
        float _935 = (1.0 - _930) / (_930 + 1.0);
        float _3169 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3169 : (isnan(_3169) ? 1.0 : min(_3169, 1.0));
        float _945 = ((((1.0 - _936) * (_931 + 2.0)) * exp2(log2(isnan(1.0) ? _3147 : (isnan(_3147) ? 1.0 : min(_3147, 1.0))) * (_931 + 1.0))) + _936) * _901;
        float _946 = _869 * 0.5;
        float _947 = _879 * 0.5;
        float _948 = _889 * 0.5;
        float _949 = dot(vec3(_946, _947, _948), vec3(_946, _947, _948));
        float _954 = (_949 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_949);
        float _962 = (dot(vec3(_228, _229, _230), vec3(_954 * _946, _954 * _947, _954 * _948)) + 1.0) * 0.5;
        float _3180 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _971 = sqrt(((_947 * _947) + (_946 * _946)) + (_948 * _948)) / (_902 + 9.9999997473787516355514526367188e-06);
        float _3191 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3191 : (isnan(_3191) ? 1.0 : min(_3191, 1.0));
        float _973 = _972 * 2.0;
        float _977 = (1.0 - _972) / (_972 + 1.0);
        float _3202 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3202 : (isnan(_3202) ? 1.0 : min(_3202, 1.0));
        float _987 = ((((1.0 - _978) * (_973 + 2.0)) * exp2(log2(isnan(1.0) ? _3180 : (isnan(_3180) ? 1.0 : min(_3180, 1.0))) * (_973 + 1.0))) + _978) * _902;
        float _988 = _870 * 0.5;
        float _989 = _880 * 0.5;
        float _990 = _890 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1004 = (dot(vec3(_228, _229, _230), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _3213 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1013 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_903 + 9.9999997473787516355514526367188e-06);
        float _3224 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3224 : (isnan(_3224) ? 1.0 : min(_3224, 1.0));
        float _1015 = _1014 * 2.0;
        float _1019 = (1.0 - _1014) / (_1014 + 1.0);
        float _3235 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0));
        float _1029 = ((((1.0 - _1020) * (_1015 + 2.0)) * exp2(log2(isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0))) * (_1015 + 1.0))) + _1020) * _903;
        _1037 = _870;
        _1038 = _869;
        _1039 = _868;
        _1040 = _880;
        _1041 = _879;
        _1042 = _878;
        _1043 = _890;
        _1044 = _889;
        _1045 = _888;
        _1046 = _903;
        _1047 = _902;
        _1048 = _901;
        _1049 = cbModelParam._m0[36u].w * (isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0)));
        _1050 = cbModelParam._m0[36u].w * (isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0)));
        _1051 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0)));
    }
    else
    {
        _1037 = _728;
        _1038 = _728;
        _1039 = _728;
        _1040 = _728;
        _1041 = _728;
        _1042 = _728;
        _1043 = _728;
        _1044 = _728;
        _1045 = _728;
        _1046 = _728;
        _1047 = _728;
        _1048 = _728;
        _1049 = 0.0;
        _1050 = 0.0;
        _1051 = 0.0;
    }
    float _1061 = (cbModelParam._m0[1u].x * (_1049 - _740)) + _740;
    float _1062 = (cbModelParam._m0[1u].x * (_1050 - _741)) + _741;
    float _1063 = (cbModelParam._m0[1u].x * (_1051 - _742)) + _742;
    float _1084 = fma(_1063, cbSceneParam._m0[89u].z, fma(_1062, cbSceneParam._m0[89u].y, _1061 * cbSceneParam._m0[89u].x));
    float _1087 = fma(_1063, cbSceneParam._m0[90u].z, fma(_1062, cbSceneParam._m0[90u].y, _1061 * cbSceneParam._m0[90u].x));
    float _1090 = fma(_1063, cbSceneParam._m0[91u].z, fma(_1062, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1061));
    float _1105 = _393 * 0.5;
    float _1106 = _394 * 0.5;
    float _1107 = _395 * 0.5;
    float _1108 = dot(vec4(_1105, _1106, _1107, 1.0), vec4(_1039, _1042, _1045, _1048));
    float _1111 = dot(vec4(_1105, _1106, _1107, 1.0), vec4(_1038, _1041, _1044, _1047));
    float _1114 = dot(vec4(_1105, _1106, _1107, 1.0), vec4(_1037, _1040, _1043, _1046));
    float _1148;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1121 = dot(vec4(_1105, _1106, _1107, 1.0), vec4(_727, _731, _734, _737));
        float _1125 = dot(vec4(_1105, _1106, _1107, 1.0), vec4(_729, _732, _735, _738));
        float _1129 = dot(vec4(_1105, _1106, _1107, 1.0), vec4(_730, _733, _736, _739));
        float _1136 = dot(vec4(cbModelParam._m0[39u]), vec4(_1105, _1106, _1107, 1.0));
        _1148 = dot(vec3(isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)), isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)), isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1136) ? 0.0 : (isnan(0.0) ? _1136 : max(0.0, _1136))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1148 = 1.0;
    }
    float _1159;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1150 = dot(vec4(cbModelParam._m0[40u]), vec4(_1105, _1106, _1107, 1.0));
        _1159 = dot(vec3(isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)), isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0)), isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1150) ? 0.0 : (isnan(0.0) ? _1150 : max(0.0, _1150))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1159 = 1.0;
    }
    float _1163 = (_1159 * cbModelParam._m0[1u].x) + (_1148 * (1.0 - cbModelParam._m0[1u].x));
    float _1172 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1254;
    float _1256;
    float _1258;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1221 = fma(_425, cbModelParam._m0[13u].z, fma(_421, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _417)) + cbModelParam._m0[13u].w;
        float _1225 = fma(_425, cbModelParam._m0[14u].z, fma(_421, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _417)) + cbModelParam._m0[14u].w;
        float _1229 = fma(_425, cbModelParam._m0[15u].z, fma(_421, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _417)) + cbModelParam._m0[15u].w;
        float _1232 = fma(_395, cbModelParam._m0[13u].z, fma(_394, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _393));
        float _1235 = fma(_395, cbModelParam._m0[14u].z, fma(_394, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _393));
        float _1238 = fma(_395, cbModelParam._m0[15u].z, fma(_394, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _393));
        float _1264;
        if (_1232 > 0.0)
        {
            _1264 = abs((1.0 - _1221) / _1232);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1232 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1221 + 1.0) / _1232);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1264 = frontier_phi_16_14_ladder;
        }
        float _1493;
        if (_1235 > 0.0)
        {
            _1493 = abs((1.0 - _1225) / _1235);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1235 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1225 + 1.0) / _1235);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1493 = frontier_phi_25_21_ladder;
        }
        float _1685;
        if (_1238 > 0.0)
        {
            _1685 = abs((1.0 - _1229) / _1238);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1238 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1229 + 1.0) / _1238);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1685 = frontier_phi_37_32_ladder;
        }
        float _1687 = isnan(_1493) ? _1264 : (isnan(_1264) ? _1493 : min(_1264, _1493));
        float _1688 = isnan(_1685) ? _1687 : (isnan(_1687) ? _1685 : min(_1687, _1685));
        float _1692 = (_1688 * _1232) + _1221;
        float _1693 = (_1688 * _1235) + _1225;
        float _1694 = (_1688 * _1238) + _1229;
        float _1695 = _1688 * 9.9999997473787516355514526367188e-05;
        float _1697 = (-1.0) - _1695;
        float _1699 = _1695 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1694 > _1699) || ((_1694 < _1697) || ((_1693 > _1699) || ((_1693 < _1697) || ((_1692 < _1697) || (_1692 > _1699))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1791 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1694, cbModelParam._m0[9u].z, fma(_1693, cbModelParam._m0[9u].y, _1692 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1694, cbModelParam._m0[10u].z, fma(_1693, cbModelParam._m0[10u].y, _1692 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1694, cbModelParam._m0[11u].z, fma(_1693, cbModelParam._m0[11u].y, _1692 * cbModelParam._m0[11u].x))), _1172);
            frontier_phi_15_37_ladder = _1791.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1791.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1791.x * cbModelParam._m0[1u].y;
        }
        _1254 = frontier_phi_15_37_ladder_2;
        _1256 = frontier_phi_15_37_ladder_1;
        _1258 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1242 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_393, _394, _395), _1172);
        _1254 = _1242.x * cbModelParam._m0[1u].y;
        _1256 = _1242.y * cbModelParam._m0[1u].y;
        _1258 = _1242.z * cbModelParam._m0[1u].y;
    }
    float _1261 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1354;
    float _1356;
    float _1358;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1318 = fma(_425, cbModelParam._m0[21u].z, fma(_421, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _417)) + cbModelParam._m0[21u].w;
        float _1322 = fma(_425, cbModelParam._m0[22u].z, fma(_421, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _417)) + cbModelParam._m0[22u].w;
        float _1326 = fma(_425, cbModelParam._m0[23u].z, fma(_421, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _417)) + cbModelParam._m0[23u].w;
        float _1329 = fma(_395, cbModelParam._m0[21u].z, fma(_394, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _393));
        float _1332 = fma(_395, cbModelParam._m0[22u].z, fma(_394, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _393));
        float _1335 = fma(_395, cbModelParam._m0[23u].z, fma(_394, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _393));
        float _1498;
        if (_1329 > 0.0)
        {
            _1498 = abs((1.0 - _1318) / _1329);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1329 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1318 + 1.0) / _1329);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1498 = frontier_phi_27_23_ladder;
        }
        float _1712;
        if (_1332 > 0.0)
        {
            _1712 = abs((1.0 - _1322) / _1332);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1332 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1322 + 1.0) / _1332);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1712 = frontier_phi_39_34_ladder;
        }
        float _1863;
        if (_1335 > 0.0)
        {
            _1863 = abs((1.0 - _1326) / _1335);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1335 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1326 + 1.0) / _1335);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _1863 = frontier_phi_48_45_ladder;
        }
        float _1865 = isnan(_1712) ? _1498 : (isnan(_1498) ? _1712 : min(_1498, _1712));
        float _1866 = isnan(_1863) ? _1865 : (isnan(_1865) ? _1863 : min(_1865, _1863));
        float _1870 = (_1866 * _1329) + _1318;
        float _1871 = (_1866 * _1332) + _1322;
        float _1872 = (_1866 * _1335) + _1326;
        float _1873 = _1866 * 9.9999997473787516355514526367188e-05;
        float _1874 = (-1.0) - _1873;
        float _1876 = _1873 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1872 > _1876) || ((_1872 < _1874) || ((_1871 > _1876) || ((_1871 < _1874) || ((_1870 < _1874) || (_1870 > _1876))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2099 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1872, cbModelParam._m0[17u].z, fma(_1871, cbModelParam._m0[17u].y, _1870 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1872, cbModelParam._m0[18u].z, fma(_1871, cbModelParam._m0[18u].y, _1870 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1872, cbModelParam._m0[19u].z, fma(_1871, cbModelParam._m0[19u].y, _1870 * cbModelParam._m0[19u].x))), _1261);
            frontier_phi_24_48_ladder = _2099.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2099.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2099.x * cbModelParam._m0[1u].z;
        }
        _1354 = frontier_phi_24_48_ladder_2;
        _1356 = frontier_phi_24_48_ladder_1;
        _1358 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1338 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_393, _394, _395), _1261);
        _1354 = _1338.x * cbModelParam._m0[1u].z;
        _1356 = _1338.y * cbModelParam._m0[1u].z;
        _1358 = _1338.z * cbModelParam._m0[1u].z;
    }
    float _1370 = _384 * 0.01200000010430812835693359375;
    float _1372 = _1370 * ((cbModelParam._m0[1u].w * (_1354 - _1254)) + _1254);
    float _1373 = _1370 * ((cbModelParam._m0[1u].w * (_1356 - _1256)) + _1256);
    float _1374 = _1370 * ((cbModelParam._m0[1u].w * (_1358 - _1258)) + _1258);
    float _1377 = fma(_1374, cbSceneParam._m0[89u].z, fma(_1373, cbSceneParam._m0[89u].y, _1372 * cbSceneParam._m0[89u].x));
    float _1380 = fma(_1374, cbSceneParam._m0[90u].z, fma(_1373, cbSceneParam._m0[90u].y, _1372 * cbSceneParam._m0[90u].x));
    float _1383 = fma(_1374, cbSceneParam._m0[91u].z, fma(_1373, cbSceneParam._m0[91u].y, _1372 * cbSceneParam._m0[91u].x));
    vec4 _1391 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_317, _318));
    float _1393 = _1391.w;
    float _1405 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1393);
    float _1406 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1393);
    float _1407 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1393);
    uvec4 _1411 = floatBitsToUint(cbInstanceData._m0[_358 + 5u]);
    uint _1413 = _1411.x * 14u;
    uint _1414 = _1413 + 13u;
    float _1421 = _384 + (-1.0);
    float _1427 = (cbLight._m0[_1414].x * _1421) + 1.0;
    float _1428 = (cbLight._m0[_1414].y * _1421) + 1.0;
    float _1429 = (cbLight._m0[_1414].z * _1421) + 1.0;
    float _1430 = (cbLight._m0[_1414].w * _1421) + 1.0;
    uint _1431 = _1413 + 5u;
    float _1437 = isnan(1.0) ? _1428 : (isnan(_1428) ? 1.0 : min(_1428, 1.0));
    uint _1441 = _1413 + 4u;
    float _1451 = isnan(1.0) ? _1427 : (isnan(_1427) ? 1.0 : min(_1427, 1.0));
    uint _1455 = _1413 | 1u;
    float _1466 = dot(vec3(cbLight._m0[_1413].xyz), vec3(_228, _229, _230));
    float _1469 = dot(vec3(cbLight._m0[_1455].xyz), vec3(_228, _229, _230));
    float _3371 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
    float _3382 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
    float _1474 = (isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0))) * 0.3183098733425140380859375;
    float _1476 = (isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0))) * 0.3183098733425140380859375;
    float _1483 = ((cbLight._m0[_1431].x * _1437) * _1476) + (((cbLight._m0[_1441].x * _1405) * _1451) * _1474);
    float _1484 = ((_1437 * cbLight._m0[_1431].y) * _1476) + (((cbLight._m0[_1441].y * _1406) * _1451) * _1474);
    float _1485 = ((_1437 * cbLight._m0[_1431].z) * _1476) + (((cbLight._m0[_1441].z * _1407) * _1451) * _1474);
    uvec4 _1490 = floatBitsToUint(cbLight._m0[_1413 + 12u]);
    bool _1492 = _1490.x == 0u;
    float _1503;
    float _1505;
    float _1507;
    if (_1492)
    {
        _1503 = _1483;
        _1505 = _1484;
        _1507 = _1485;
    }
    else
    {
        uint _1511 = _1413 + 6u;
        float _1527 = (dot(vec3(cbLight._m0[_1413 + 2u].xyz), vec3(_228, _229, _230)) * 0.5) + 0.5;
        float _1528 = _1527 * _1527;
        float _3393 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
        float _1530 = isnan(1.0) ? _1429 : (isnan(_1429) ? 1.0 : min(_1429, 1.0));
        _1503 = (((cbLight._m0[_1511].x * 0.3183098733425140380859375) * _1529) * _1530) + _1483;
        _1505 = (((cbLight._m0[_1511].y * 0.3183098733425140380859375) * _1529) * _1530) + _1484;
        _1507 = (((cbLight._m0[_1511].z * 0.3183098733425140380859375) * _1529) * _1530) + _1485;
    }
    bool _1510 = _1490.y == 0u;
    float _1548;
    float _1550;
    float _1552;
    if (_1510)
    {
        _1548 = _1503;
        _1550 = _1505;
        _1552 = _1507;
    }
    else
    {
        uint _1656 = _1413 + 7u;
        float _1672 = (dot(vec3(cbLight._m0[_1413 + 3u].xyz), vec3(_228, _229, _230)) * 0.5) + 0.5;
        float _1673 = _1672 * _1672;
        float _3409 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1674 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
        float _1675 = isnan(1.0) ? _1430 : (isnan(_1430) ? 1.0 : min(_1430, 1.0));
        _1548 = (((cbLight._m0[_1656].x * 0.3183098733425140380859375) * _1674) * _1675) + _1503;
        _1550 = (((cbLight._m0[_1656].y * 0.3183098733425140380859375) * _1674) * _1675) + _1505;
        _1552 = (((cbLight._m0[_1656].z * 0.3183098733425140380859375) * _1674) * _1675) + _1507;
    }
    uint _1554 = _1413 + 8u;
    float _1560 = cbLight._m0[_1413].x + _309;
    float _1561 = cbLight._m0[_1413].y + _310;
    float _1562 = cbLight._m0[_1413].z + _311;
    float _1566 = inversesqrt(dot(vec3(_1560, _1561, _1562), vec3(_1560, _1561, _1562)));
    float _1570 = dot(vec3(_228, _229, _230), vec3(cbLight._m0[_1413].xyz));
    float _3425 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
    float _1573 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
    float _3436 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _1574 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
    float _1575 = dot(vec3(cbLight._m0[_1413].xyz), vec3(_1560 * _1566, _1561 * _1566, _1562 * _1566));
    float _3447 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
    float _1586 = (exp2(log2(1.0 - (isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1592 = (0.5 / ((_1573 + 9.9999999392252902907785028219223e-09) + _1574)) * _1573;
    float _3458 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
    float _1594 = (isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0))) * 0.31831014156341552734375;
    uint _1608 = _1413 + 9u;
    float _1614 = cbLight._m0[_1455].x + _309;
    float _1615 = cbLight._m0[_1455].y + _310;
    float _1616 = cbLight._m0[_1455].z + _311;
    float _1620 = inversesqrt(dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616)));
    float _1624 = dot(vec3(_228, _229, _230), vec3(cbLight._m0[_1455].xyz));
    float _3469 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
    float _1627 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
    float _1628 = dot(vec3(cbLight._m0[_1455].xyz), vec3(_1614 * _1620, _1615 * _1620, _1616 * _1620));
    float _3480 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
    float _1637 = (exp2(log2(1.0 - (isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1641 = (0.5 / ((_1627 + 9.9999999392252902907785028219223e-09) + _1574)) * _1627;
    float _3491 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
    float _1643 = (isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0))) * 0.31831014156341552734375;
    float _1653 = (((_1637 * cbLight._m0[_1608].x) * _1643) * _1437) + ((((cbLight._m0[_1554].x * _1405) * _1586) * _1594) * _1451);
    float _1654 = (((_1637 * cbLight._m0[_1608].y) * _1643) * _1437) + ((((cbLight._m0[_1554].y * _1406) * _1586) * _1594) * _1451);
    float _1655 = (((_1637 * cbLight._m0[_1608].z) * _1643) * _1437) + ((((cbLight._m0[_1554].z * _1407) * _1586) * _1594) * _1451);
    float _1717;
    float _1719;
    float _1721;
    if (_1492)
    {
        _1717 = _1653;
        _1719 = _1654;
        _1721 = _1655;
    }
    else
    {
        uint _1723 = _1413 + 10u;
        uint _1729 = _1413 + 2u;
        float _1735 = cbLight._m0[_1729].x + _309;
        float _1736 = cbLight._m0[_1729].y + _310;
        float _1737 = cbLight._m0[_1729].z + _311;
        float _1741 = inversesqrt(dot(vec3(_1735, _1736, _1737), vec3(_1735, _1736, _1737)));
        float _1745 = dot(vec3(_228, _229, _230), vec3(cbLight._m0[_1729].xyz));
        float _3502 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1748 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
        float _1749 = dot(vec3(cbLight._m0[_1729].xyz), vec3(_1735 * _1741, _1736 * _1741, _1737 * _1741));
        float _3513 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1758 = (exp2(log2(1.0 - (isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1762 = (0.5 / ((_1748 + 9.9999999392252902907785028219223e-09) + _1574)) * _1748;
        float _3524 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1764 = (isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0))) * 0.31831014156341552734375;
        float _1765 = isnan(1.0) ? _1429 : (isnan(_1429) ? 1.0 : min(_1429, 1.0));
        _1717 = (((_1758 * cbLight._m0[_1723].x) * _1764) * _1765) + _1653;
        _1719 = (((_1758 * cbLight._m0[_1723].y) * _1764) * _1765) + _1654;
        _1721 = (((_1758 * cbLight._m0[_1723].z) * _1764) * _1765) + _1655;
    }
    float _1800;
    float _1802;
    float _1804;
    if (_1510)
    {
        _1800 = _1717;
        _1802 = _1719;
        _1804 = _1721;
    }
    else
    {
        uint _1811 = _1413 + 11u;
        uint _1817 = _1413 + 3u;
        float _1823 = cbLight._m0[_1817].x + _309;
        float _1824 = cbLight._m0[_1817].y + _310;
        float _1825 = cbLight._m0[_1817].z + _311;
        float _1829 = inversesqrt(dot(vec3(_1823, _1824, _1825), vec3(_1823, _1824, _1825)));
        float _1833 = dot(vec3(_228, _229, _230), vec3(cbLight._m0[_1817].xyz));
        float _3540 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _1836 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _1837 = dot(vec3(cbLight._m0[_1817].xyz), vec3(_1823 * _1829, _1824 * _1829, _1825 * _1829));
        float _3551 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
        float _1846 = (exp2(log2(1.0 - (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1850 = (0.5 / ((_1836 + 9.9999999392252902907785028219223e-09) + _1574)) * _1836;
        float _3562 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1852 = (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))) * 0.31831014156341552734375;
        float _1853 = isnan(1.0) ? _1430 : (isnan(_1430) ? 1.0 : min(_1430, 1.0));
        _1800 = (((_1846 * cbLight._m0[_1811].x) * _1852) * _1853) + _1717;
        _1802 = (((_1846 * cbLight._m0[_1811].y) * _1852) * _1853) + _1719;
        _1804 = (((_1846 * cbLight._m0[_1811].z) * _1852) * _1853) + _1721;
    }
    float _1987;
    float _1989;
    float _1991;
    float _1993;
    float _1995;
    float _1997;
    if (_1411.y == 0u)
    {
        float _1928 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1929 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1928;
        float _1930 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1928;
        float _1931 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1928;
        uvec4 _1943 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1944 = _1943.x;
        uint _1955 = uint((float(_1943.y) * floor(float(uint(cbSceneParam._m0[85u].y * _318) / _1944))) + floor(float(uint(cbSceneParam._m0[85u].x * _317) / _1944)));
        float _1965 = (log2(_1931 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1966 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
        uint _1969 = uint(isnan(14.0) ? _1966 : (isnan(_1966) ? 14.0 : min(_1966, 14.0)));
        uvec4 _1974 = texelFetch(g_lightClusterGridBuffer, int(((_1969 << 2u) + (_1955 << 6u)) >> 2u));
        uint _1975 = _1974.x;
        uint _1976 = _1943.z;
        float _2104;
        float _2106;
        float _2108;
        float _2110;
        float _2112;
        float _2114;
        if (((((1u << ((_1976 >> 4u) & 15u)) + 4294967295u) & _1975) == 0u) || ((_1976 & 240u) == 0u))
        {
            _2104 = 0.0;
            _2106 = 0.0;
            _2108 = 0.0;
            _2110 = 0.0;
            _2112 = 0.0;
            _2114 = 0.0;
        }
        else
        {
            float _2105;
            float _2107;
            float _2109;
            float _2111;
            float _2113;
            float _2115;
            float _2292 = 0.0;
            float _2293 = 0.0;
            float _2294 = 0.0;
            float _2295 = 0.0;
            float _2296 = 0.0;
            float _2297 = 0.0;
            uint _2298 = 0u;
            uint _2307;
            bool _2308;
            for (;;)
            {
                _2307 = texelFetch(g_lightClassification, int((((_1969 << 5u) + (_1955 << 9u)) + (_2298 << 2u)) >> 2u)).x;
                _2308 = _2307 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2308)
                {
                    frontier_phi_63_pred = _2297;
                    frontier_phi_63_pred_1 = _2296;
                    frontier_phi_63_pred_2 = _2295;
                    frontier_phi_63_pred_3 = _2294;
                    frontier_phi_63_pred_4 = _2293;
                    frontier_phi_63_pred_5 = _2292;
                }
                else
                {
                    float _2416;
                    float _2417;
                    float _2418;
                    float _2419;
                    float _2420;
                    float _2421;
                    uint _2422;
                    _2416 = _2292;
                    _2417 = _2293;
                    _2418 = _2294;
                    _2419 = _2295;
                    _2420 = _2296;
                    _2421 = _2297;
                    _2422 = _2307;
                    float _2348;
                    float _2349;
                    float _2350;
                    float _2351;
                    float _2352;
                    float _2353;
                    for (;;)
                    {
                        uint _2426 = uint(findLSB(_2422)) + (_2298 << 5u);
                        uint _2423 = (_2422 + 4294967295u) & _2422;
                        uint _2428 = _2426 * 48u;
                        vec4 _2442 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2428)).x, texelFetch(g_PointLightRenderingBuffer, int(_2428 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2428 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2428 + 3u)).x));
                        uint _2448 = (_2426 * 48u) + 4u;
                        vec4 _2461 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2448)).x, texelFetch(g_PointLightRenderingBuffer, int(_2448 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2448 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2448 + 3u)).x));
                        uint _2467 = (_2426 * 48u) + 8u;
                        vec3 _2478 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2467)).x, texelFetch(g_PointLightRenderingBuffer, int(_2467 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2467 + 2u)).x));
                        float _2482 = _2442.x - _1929;
                        float _2483 = _2442.y - _1930;
                        float _2484 = _2442.z - _1931;
                        float _2485 = dot(vec3(_2482, _2483, _2484), vec3(_2482, _2483, _2484));
                        float _2488 = inversesqrt(_2485);
                        float _2497 = 1.0 - (_2485 * _2442.w);
                        float _3588 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
                        float _2498 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
                        float _2499 = sqrt(_2485) * _2461.w;
                        float _2502 = 1.39999997615814208984375 / (_2499 + 1.39999997615814208984375);
                        float _2503 = _2502 * _2502;
                        float _2506 = ((1.0 - _2503) * dot(vec3(_339, _342, _345), vec3(_2488 * _2482, _2488 * _2483, _2488 * _2484))) + _2503;
                        float _2509 = _2499 * _2499;
                        float _2513 = ((isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0))) * _2498) / ((_2509 * 0.699999988079071044921875) + 1.0);
                        float _2517 = (-0.0) - _1929;
                        float _2518 = (-0.0) - _1930;
                        float _2519 = (-0.0) - _1931;
                        float _2523 = inversesqrt(dot(vec3(_2517, _2518, _2519), vec3(_2517, _2518, _2519)));
                        float _2527 = dot(vec3(_339, _342, _345), vec3(_2523 * _2517, _2523 * _2518, _2523 * _2519));
                        float _3604 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
                        float _3615 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
                        float _2531 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
                        float _2535 = (0.5 / (((isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0))) + 9.9999999392252902907785028219223e-09) + _2531)) * _2531;
                        float _3626 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
                        float _2544 = (((isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * 3.1415927410125732421875) / ((_2509 * 2.1991131305694580078125) + 3.141590118408203125)) * _2498;
                        _2351 = (_2513 * _2461.x) + _2419;
                        _2352 = (_2513 * _2461.y) + _2420;
                        _2353 = (_2513 * _2461.z) + _2421;
                        _2348 = (_2544 * _2478.x) + _2416;
                        _2349 = (_2544 * _2478.y) + _2417;
                        _2350 = (_2544 * _2478.z) + _2418;
                        if (_2423 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2416 = _2348;
                            _2417 = _2349;
                            _2418 = _2350;
                            _2419 = _2351;
                            _2420 = _2352;
                            _2421 = _2353;
                            _2422 = _2423;
                        }
                    }
                    frontier_phi_63_pred = _2353;
                    frontier_phi_63_pred_1 = _2352;
                    frontier_phi_63_pred_2 = _2351;
                    frontier_phi_63_pred_3 = _2350;
                    frontier_phi_63_pred_4 = _2349;
                    frontier_phi_63_pred_5 = _2348;
                }
                _2115 = frontier_phi_63_pred;
                _2113 = frontier_phi_63_pred_1;
                _2111 = frontier_phi_63_pred_2;
                _2109 = frontier_phi_63_pred_3;
                _2107 = frontier_phi_63_pred_4;
                _2105 = frontier_phi_63_pred_5;
                uint _2299 = _2298 + 1u;
                if (_2299 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2292 = _2105;
                    _2293 = _2107;
                    _2294 = _2109;
                    _2295 = _2111;
                    _2296 = _2113;
                    _2297 = _2115;
                    _2298 = _2299;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2104 = _2105;
            _2106 = _2107;
            _2108 = _2109;
            _2110 = _2111;
            _2112 = _2113;
            _2114 = _2115;
        }
        uvec4 _2118 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2119 = _2118.z;
        uint _2121 = (_2119 >> 8u) & 15u;
        float _2263;
        float _2265;
        float _2267;
        float _2269;
        float _2271;
        float _2273;
        if (((4294967295u << _2121) & _1975) == 0u)
        {
            _2263 = _2104;
            _2265 = _2106;
            _2267 = _2108;
            _2269 = _2110;
            _2271 = _2112;
            _2273 = _2114;
        }
        else
        {
            float _2288 = inversesqrt(dot(vec3(_1929, _1930, _1931), vec3(_1929, _1930, _1931)));
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2121 < ((_2119 >> 12u) & 15u))
            {
                float _2264;
                float _2266;
                float _2268;
                float _2270;
                float _2272;
                float _2274;
                float _2399 = _2104;
                float _2400 = _2106;
                float _2401 = _2108;
                float _2402 = _2110;
                float _2403 = _2112;
                float _2404 = _2114;
                uint _2405 = _2121;
                uint _2414;
                bool _2415;
                for (;;)
                {
                    _2414 = texelFetch(g_lightClassification, int((((_1969 << 5u) + (_1955 << 9u)) + (_2405 << 2u)) >> 2u)).x;
                    _2415 = _2414 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2415)
                    {
                        frontier_phi_69_pred = _2404;
                        frontier_phi_69_pred_1 = _2403;
                        frontier_phi_69_pred_2 = _2402;
                        frontier_phi_69_pred_3 = _2401;
                        frontier_phi_69_pred_4 = _2400;
                        frontier_phi_69_pred_5 = _2399;
                    }
                    else
                    {
                        float _2549;
                        float _2550;
                        float _2551;
                        float _2552;
                        float _2553;
                        float _2554;
                        float _2801;
                        float _2802;
                        float _2803;
                        float _2804;
                        float _2805;
                        float _2806;
                        float _2562 = _2399;
                        float _2563 = _2400;
                        float _2564 = _2401;
                        float _2565 = _2402;
                        float _2566 = _2403;
                        float _2567 = _2404;
                        uint _2568 = _2414;
                        uint _2569;
                        vec4 _2594;
                        float _2595;
                        vec4 _2610;
                        vec3 _2622;
                        vec4 _2638;
                        vec4 _2654;
                        float _2701;
                        bool _2702;
                        for (;;)
                        {
                            uint _2579 = ((_2405 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2568));
                            _2569 = (_2568 + 4294967295u) & _2568;
                            uint _2581 = _2579 * 40u;
                            _2594 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2581)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2581 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2581 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2581 + 3u)).x));
                            _2595 = _2594.w;
                            uint _2597 = (_2579 * 40u) + 4u;
                            _2610 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2597 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2597 + 3u)).x));
                            uint _2612 = (_2579 * 40u) + 8u;
                            _2622 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2612)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2612 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2612 + 2u)).x));
                            uint _2625 = (_2579 * 40u) + 16u;
                            _2638 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2625 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2625 + 3u)).x));
                            uint _2641 = (_2579 * 40u) + 20u;
                            _2654 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2641)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2641 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2641 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2641 + 3u)).x));
                            uint _2657 = (_2579 * 40u) + 24u;
                            vec4 _2670 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2657)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2657 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2657 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2657 + 3u)).x));
                            uint _2676 = (_2579 * 40u) + 28u;
                            vec4 _2689 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2676)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2676 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2676 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2676 + 3u)).x));
                            _2701 = fma(_1931, _2689.z, fma(_1930, _2689.y, _2689.x * _1929)) + _2689.w;
                            _2702 = !((fma(_1931, _2670.z, fma(_1930, _2670.y, _2670.x * _1929)) + _2670.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2702)
                            {
                                float _2729 = _2594.x - _1929;
                                float _2730 = _2594.y - _1930;
                                float _2731 = _2594.z - _1931;
                                float _2732 = dot(vec3(_2729, _2730, _2731), vec3(_2729, _2730, _2731));
                                float _2735 = inversesqrt(_2732);
                                float _2736 = _2735 * _2729;
                                float _2737 = _2735 * _2730;
                                float _2738 = _2735 * _2731;
                                float _2742 = 1.0 - (_2732 / (_2595 * _2595));
                                float _3637 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
                                float _2743 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
                                float _2747 = sqrt(_2732) * _2610.w;
                                float _2749 = 1.39999997615814208984375 / (_2747 + 1.39999997615814208984375);
                                float _2750 = _2749 * _2749;
                                float _2751 = 1.0 - _2750;
                                float _2753 = (_2751 * dot(vec3(_2736, _2737, _2738), vec3(_339, _342, _345))) + _2750;
                                float _2756 = _2747 * _2747;
                                float _2760 = (fma(_1931, _2638.z, fma(_1930, _2638.y, _2638.x * _1929)) + _2638.w) / _2701;
                                float _2761 = (fma(_1931, _2654.z, fma(_1930, _2654.y, _2654.x * _1929)) + _2654.w) / _2701;
                                float _2765 = 1.0 - dot(vec2(_2760, _2761), vec2(_2760, _2761));
                                float _3653 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
                                float _2766 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
                                float _2767 = _2766 * (((isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0))) * _2743) / ((_2756 * 0.699999988079071044921875) + 1.0));
                                float _2777 = dot(vec3(_339, _342, _345), vec3((-0.0) - (_1929 * _2288), (-0.0) - (_1930 * _2288), (-0.0) - (_1931 * _2288)));
                                float _3664 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
                                float _2785 = (_2751 * dot(vec3(_339, _342, _345), vec3(_2736, _2737, _2738))) + _2750;
                                float _3675 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
                                float _2786 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
                                float _2790 = (0.5 / (((isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) + 9.9999999392252902907785028219223e-09) + _2786)) * _2786;
                                float _3686 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
                                float _2797 = (_2766 * _2743) * (((isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * 3.1415927410125732421875) / ((_2756 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_75_pred = _2767 * _2610.z;
                                frontier_phi_75_pred_1 = _2767 * _2610.y;
                                frontier_phi_75_pred_2 = _2767 * _2610.x;
                                frontier_phi_75_pred_3 = _2797 * _2622.z;
                                frontier_phi_75_pred_4 = _2797 * _2622.y;
                                frontier_phi_75_pred_5 = _2797 * _2622.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _2806 = frontier_phi_75_pred;
                            _2805 = frontier_phi_75_pred_1;
                            _2804 = frontier_phi_75_pred_2;
                            _2803 = frontier_phi_75_pred_3;
                            _2802 = frontier_phi_75_pred_4;
                            _2801 = frontier_phi_75_pred_5;
                            _2552 = _2804 + _2565;
                            _2553 = _2805 + _2566;
                            _2554 = _2806 + _2567;
                            _2549 = _2801 + _2562;
                            _2550 = _2802 + _2563;
                            _2551 = _2803 + _2564;
                            if (_2569 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2562 = _2549;
                                _2563 = _2550;
                                _2564 = _2551;
                                _2565 = _2552;
                                _2566 = _2553;
                                _2567 = _2554;
                                _2568 = _2569;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2554;
                        frontier_phi_69_pred_1 = _2553;
                        frontier_phi_69_pred_2 = _2552;
                        frontier_phi_69_pred_3 = _2551;
                        frontier_phi_69_pred_4 = _2550;
                        frontier_phi_69_pred_5 = _2549;
                    }
                    _2274 = frontier_phi_69_pred;
                    _2272 = frontier_phi_69_pred_1;
                    _2270 = frontier_phi_69_pred_2;
                    _2268 = frontier_phi_69_pred_3;
                    _2266 = frontier_phi_69_pred_4;
                    _2264 = frontier_phi_69_pred_5;
                    uint _2406 = _2405 + 1u;
                    if (_2406 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2399 = _2264;
                        _2400 = _2266;
                        _2401 = _2268;
                        _2402 = _2270;
                        _2403 = _2272;
                        _2404 = _2274;
                        _2405 = _2406;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2274;
                frontier_phi_57_58_ladder_1 = _2272;
                frontier_phi_57_58_ladder_2 = _2270;
                frontier_phi_57_58_ladder_3 = _2268;
                frontier_phi_57_58_ladder_4 = _2266;
                frontier_phi_57_58_ladder_5 = _2264;
            }
            else
            {
                frontier_phi_57_58_ladder = _2114;
                frontier_phi_57_58_ladder_1 = _2112;
                frontier_phi_57_58_ladder_2 = _2110;
                frontier_phi_57_58_ladder_3 = _2108;
                frontier_phi_57_58_ladder_4 = _2106;
                frontier_phi_57_58_ladder_5 = _2104;
            }
            _2263 = frontier_phi_57_58_ladder_5;
            _2265 = frontier_phi_57_58_ladder_4;
            _2267 = frontier_phi_57_58_ladder_3;
            _2269 = frontier_phi_57_58_ladder_2;
            _2271 = frontier_phi_57_58_ladder_1;
            _2273 = frontier_phi_57_58_ladder;
        }
        float _2278 = isnan(1.0) ? _384 : (isnan(_384) ? 1.0 : min(_384, 1.0));
        _1987 = (_2278 * _2269) + _1548;
        _1989 = (_2278 * _2271) + _1550;
        _1991 = (_2278 * _2273) + _1552;
        _1993 = ((_2263 * 0.039999999105930328369140625) * _2278) + _1800;
        _1995 = ((_2265 * 0.039999999105930328369140625) * _2278) + _1802;
        _1997 = ((_2267 * 0.039999999105930328369140625) * _2278) + _1804;
    }
    else
    {
        _1987 = _1548;
        _1989 = _1550;
        _1991 = _1552;
        _1993 = _1800;
        _1995 = _1802;
        _1997 = _1804;
    }
    uint _2003 = _360 + uint(cbMatDynParam._m0[0u].w);
    float _2009 = (_216.x * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2003].x;
    float _2010 = (_216.y * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2003].y;
    float _2011 = (_216.z * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2003].z;
    float _3702 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _3713 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _3724 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _2028 = (((isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * (_1987 + ((isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0))) * _384))) + ((_1993 + ((isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))) * _1163)) * cbPerFrame._m0[3u].x)) + _2009;
    float _2030 = (_2010 + ((_1995 + ((isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0))) * _1163)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * (_1989 + ((isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0))) * _384)));
    float _2032 = (_2011 + ((_1997 + ((isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))) * _1163)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_1991 + ((isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0))) * _384)));
    float _3750 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2045 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    float _2054 = _317 / cbSceneParam._m0[86u].x;
    float _2055 = _318 / cbSceneParam._m0[86u].y;
    vec4 _2069 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2054, _2055, (log2((isnan(cbSceneParam._m0[77u].w) ? _250 : (isnan(_250) ? cbSceneParam._m0[77u].w : min(_250, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2071 = _2069.x;
    float _2072 = _2069.y;
    float _2073 = _2069.z;
    float _2074 = _2069.w;
    float _2166;
    float _2168;
    float _2170;
    float _2172;
    if (_250 > cbSceneParam._m0[78u].w)
    {
        float _2129 = isnan(_250) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _250 : min(cbSceneParam._m0[80u].w, _250));
        float _2130 = _2129 / _250;
        float _2141 = _2130 * _302;
        float _2142 = _303 * _2130;
        float _2143 = (-0.0) - _2142;
        float _2144 = _2130 * _304;
        float _2146 = (cbSceneParam._m0[77u].w * _2143) / _2129;
        float _2147 = _2146 + cbSceneParam._m0[79u].w;
        float _2148 = cbSceneParam._m0[79u].w - _2142;
        float _2154 = sqrt(((_2141 * _2141) + (_2142 * _2142)) + (_2144 * _2144));
        float _2157 = (1.0 - (cbSceneParam._m0[77u].w / _2129)) * _2154;
        float _2162 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2164 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2361;
        if (abs((_2143 - _2146) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2361 = ((((_2147 > 0.0) ? exp2(_2162 * _2147) : (2.0 - exp2(_2164 * _2147))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2157;
        }
        else
        {
            float _2321 = 1.0 / cbSceneParam._m0[80u].x;
            float _2322 = isnan(_2148) ? _2147 : (isnan(_2147) ? _2148 : max(_2147, _2148));
            float _2323 = isnan(_2148) ? _2147 : (isnan(_2147) ? _2148 : min(_2147, _2148));
            float _2332 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : min(_2322, 0.0));
            float _2333 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : min(_2323, 0.0));
            _2361 = ((abs(_2154 / _2143) * cbSceneParam._m0[80u].y) * ((((_2332 - _2333) * 2.0) - ((exp2(_2162 * (isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0)))) - exp2(_2162 * (isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0))))) * _2321)) - ((exp2(_2164 * _2332) - exp2(_2164 * _2333)) * _2321))) + (_2157 * cbSceneParam._m0[80u].z);
        }
        vec4 _2363 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2054, _2055, 1.0), 0.0);
        float _2372 = exp2((_2361 * (-1.44269502162933349609375)) * (1.0 - _2363.w));
        float _2373 = log2(_2372);
        float _2389 = log2(_2074);
        _2166 = (exp2(_2389 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2373 * cbSceneParam._m0[78u].x)) * _2363.x) / cbSceneParam._m0[78u].x)) + _2071;
        _2168 = (exp2(_2389 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2373 * cbSceneParam._m0[78u].y)) * _2363.y) / cbSceneParam._m0[78u].y)) + _2072;
        _2170 = (exp2(_2389 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2373 * cbSceneParam._m0[78u].z)) * _2363.z) / cbSceneParam._m0[78u].z)) + _2073;
        _2172 = _2372 * _2074;
    }
    else
    {
        _2166 = _2071;
        _2168 = _2072;
        _2170 = _2073;
        _2172 = _2074;
    }
    bool _2185 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2187 = log2(_2172);
    float _2191 = exp2(_2187 * cbSceneParam._m0[78u].x);
    float _2192 = exp2(_2187 * cbSceneParam._m0[78u].y);
    float _2193 = exp2(_2187 * cbSceneParam._m0[78u].z);
    float _2194 = _2191 * (isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0)));
    float _2195 = _2192 * (isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0)));
    float _2196 = _2193 * (isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0)));
    vec4 _2204 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_317, _318));
    float _2206 = _2204.x;
    float _2227 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2206)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2206))) - _250) * 0.100000001490116119384765625;
    float _3801 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2229 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _2230 = _2229 * cbInstanceData._m0[_358 + 6u].w;
    float _2239 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2239 * (_2185 ? _2194 : (_2194 + (cbSceneParam._m0[72u].w * _2166)));
    SV_Target.y = _2239 * (_2185 ? _2195 : (_2195 + (cbSceneParam._m0[72u].w * _2168)));
    SV_Target.z = _2239 * (_2185 ? _2196 : (_2196 + (cbSceneParam._m0[72u].w * _2170)));
    SV_Target.w = _2230;
    SV_Target_1.x = ((((cbMtdParam._m0[2u].x * _2009) * _2045) * _2191) * _2229) * _2239;
    SV_Target_1.y = ((((cbMtdParam._m0[2u].y * _2010) * _2045) * _2192) * _2229) * _2239;
    SV_Target_1.z = ((((cbMtdParam._m0[2u].z * _2011) * _2045) * _2193) * _2229) * _2239;
    SV_Target_1.w = _2230;
}


