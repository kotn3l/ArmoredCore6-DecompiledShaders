#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A_Emissive_Glow_Addition_Soft_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_A_Emissive_Glow_Addition_Soft_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _730;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _173 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _174 = _173 * NORMAL.x;
    float _175 = _173 * NORMAL.y;
    float _176 = _173 * NORMAL.z;
    float _181;
    float _182;
    float _183;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _181 = (-0.0) - _174;
        _182 = (-0.0) - _175;
        _183 = (-0.0) - _176;
    }
    else
    {
        _181 = _174;
        _182 = _175;
        _183 = _176;
    }
    vec4 _197 = texture(sampler2D(S_A_Emissive_Glow_Addition_Soft_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _200 = _197.x;
    float _201 = _197.y;
    float _202 = _197.z;
    vec4 _218 = texture(sampler2D(S_A_Emissive_Glow_Addition_Soft_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _229 = inversesqrt(dot(vec3(_181, _182, _183), vec3(_181, _182, _183)));
    float _230 = _229 * _181;
    float _231 = _229 * _182;
    float _232 = _229 * _183;
    float _3199 = isnan(0.0) ? _200 : (isnan(_200) ? 0.0 : max(_200, 0.0));
    float _3210 = isnan(0.0) ? _201 : (isnan(_201) ? 0.0 : max(_201, 0.0));
    float _3221 = isnan(0.0) ? _202 : (isnan(_202) ? 0.0 : max(_202, 0.0));
    float _252 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _294 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _304 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _294);
    float _305 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _294);
    float _306 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _294);
    float _310 = inversesqrt(dot(vec3(_304, _305, _306), vec3(_304, _305, _306)));
    float _311 = _304 * _310;
    float _312 = _305 * _310;
    float _313 = _306 * _310;
    float _319 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _320 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _341 = fma(_232, cbSceneParam._m0[5u].z, fma(_231, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _230));
    float _344 = fma(_232, cbSceneParam._m0[6u].z, fma(_231, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _230));
    float _347 = fma(_232, cbSceneParam._m0[7u].z, fma(_231, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _230));
    uint _360 = uint(roundEven(NORMAL.w)) * 13u;
    uint _362 = _360 + 9u;
    uint _363 = _362 + uint(cbMatDynParam._m0[0u].w);
    float _369 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3199 : (isnan(_3199) ? 1.0 : min(_3199, 1.0)))) * cbInstanceData._m0[_363].x;
    float _370 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3210 : (isnan(_3210) ? 1.0 : min(_3210, 1.0)))) * cbInstanceData._m0[_363].y;
    float _371 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3221 : (isnan(_3221) ? 1.0 : min(_3221, 1.0)))) * cbInstanceData._m0[_363].z;
    float _3232 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _372 = isnan(1.0) ? _3232 : (isnan(_3232) ? 1.0 : min(_3232, 1.0));
    float _3243 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _373 = isnan(1.0) ? _3243 : (isnan(_3243) ? 1.0 : min(_3243, 1.0));
    float _3254 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _374 = isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0));
    vec4 _383 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _319, cbSceneParam._m0[86u].y * _320));
    float _386 = _383.x * TEXCOORD.z;
    float _387 = dot(vec3(_230, _231, _232), vec3(_311, _312, _313));
    float _390 = _387 * 2.0;
    float _395 = (_390 * _230) - _311;
    float _396 = (_390 * _231) - _312;
    float _397 = (_390 * _232) - _313;
    float _419 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _423 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _427 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _729;
    float _731;
    float _732;
    float _733;
    float _734;
    float _735;
    float _736;
    float _737;
    float _738;
    float _739;
    float _740;
    float _741;
    float _742;
    float _743;
    float _744;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _454 = fma(_427, cbModelParam._m0[26u].z, fma(_423, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _419));
        float _458 = fma(_427, cbModelParam._m0[27u].z, fma(_423, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _419));
        float _462 = fma(_427, cbModelParam._m0[28u].z, fma(_423, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _419));
        float _487 = _419 + _230;
        float _488 = _423 + _231;
        float _489 = _427 + _232;
        float _499 = fma(_489, cbModelParam._m0[26u].z, fma(_488, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _487)) - _454;
        float _500 = fma(_489, cbModelParam._m0[27u].z, fma(_488, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _487)) - _458;
        float _501 = fma(_489, cbModelParam._m0[28u].z, fma(_488, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _487)) - _462;
        float _505 = inversesqrt(dot(vec3(_499, _500, _501), vec3(_499, _500, _501)));
        float _518 = ((_505 * _499) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_454 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _519 = ((_505 * _500) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_458 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _520 = ((_505 * _501) / cbModelParam._m0[34u].z) + ((((((_462 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _523 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_518, _519, _520), 0.0);
        vec4 _530 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_518, _519, _520), 0.0);
        vec4 _537 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_518, _519, _520), 0.0);
        vec4 _544 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_518, _519, _520), 0.0);
        float _557 = exp2((_523.w + (-0.5)) * 20.0) * 2.0;
        float _558 = _557 * (_523.x + (-0.5));
        float _559 = _557 * (_523.y + (-0.5));
        float _560 = _557 * (_523.z + (-0.5));
        float _567 = exp2((_530.w + (-0.5)) * 20.0) * 2.0;
        float _568 = _567 * (_530.x + (-0.5));
        float _569 = _567 * (_530.y + (-0.5));
        float _570 = _567 * (_530.z + (-0.5));
        float _577 = exp2((_537.w + (-0.5)) * 20.0) * 2.0;
        float _578 = _577 * (_537.x + (-0.5));
        float _579 = _577 * (_537.y + (-0.5));
        float _580 = _577 * (_537.z + (-0.5));
        float _587 = exp2((_544.w + (-0.5)) * 20.0) * 2.0;
        float _588 = _587 * (_544.x + (-0.5));
        float _589 = _587 * (_544.y + (-0.5));
        float _590 = _587 * (_544.z + (-0.5));
        float _591 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
        float _592 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
        float _593 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
        float _594 = _558 * 0.5;
        float _595 = _568 * 0.5;
        float _596 = _578 * 0.5;
        float _597 = dot(vec3(_594, _595, _596), vec3(_594, _595, _596));
        float _602 = (_597 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_597);
        float _611 = (dot(vec3(_230, _231, _232), vec3(_602 * _594, _602 * _595, _602 * _596)) + 1.0) * 0.5;
        float _3280 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
        float _621 = sqrt(((_595 * _595) + (_594 * _594)) + (_596 * _596)) / (_591 + 9.9999997473787516355514526367188e-06);
        float _3291 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
        float _622 = isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0));
        float _623 = _622 * 2.0;
        float _627 = (1.0 - _622) / (_622 + 1.0);
        float _3302 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
        float _628 = isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0));
        float _637 = ((((1.0 - _628) * (_623 + 2.0)) * exp2(log2(isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0))) * (_623 + 1.0))) + _628) * _591;
        float _638 = _559 * 0.5;
        float _639 = _569 * 0.5;
        float _640 = _579 * 0.5;
        float _641 = dot(vec3(_638, _639, _640), vec3(_638, _639, _640));
        float _646 = (_641 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_641);
        float _654 = (dot(vec3(_230, _231, _232), vec3(_646 * _638, _646 * _639, _646 * _640)) + 1.0) * 0.5;
        float _3313 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
        float _663 = sqrt(((_639 * _639) + (_638 * _638)) + (_640 * _640)) / (_592 + 9.9999997473787516355514526367188e-06);
        float _3324 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
        float _664 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
        float _665 = _664 * 2.0;
        float _669 = (1.0 - _664) / (_664 + 1.0);
        float _3335 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
        float _670 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
        float _679 = ((((1.0 - _670) * (_665 + 2.0)) * exp2(log2(isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0))) * (_665 + 1.0))) + _670) * _592;
        float _680 = _560 * 0.5;
        float _681 = _570 * 0.5;
        float _682 = _580 * 0.5;
        float _683 = dot(vec3(_680, _681, _682), vec3(_680, _681, _682));
        float _688 = (_683 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_683);
        float _696 = (dot(vec3(_230, _231, _232), vec3(_688 * _680, _688 * _681, _688 * _682)) + 1.0) * 0.5;
        float _3346 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
        float _705 = sqrt(((_681 * _681) + (_680 * _680)) + (_682 * _682)) / (_593 + 9.9999997473787516355514526367188e-06);
        float _3357 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _706 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
        float _707 = _706 * 2.0;
        float _711 = (1.0 - _706) / (_706 + 1.0);
        float _3368 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        float _712 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
        float _721 = ((((1.0 - _712) * (_707 + 2.0)) * exp2(log2(isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0))) * (_707 + 1.0))) + _712) * _593;
        _729 = _560;
        _731 = _559;
        _732 = _558;
        _733 = _570;
        _734 = _569;
        _735 = _568;
        _736 = _580;
        _737 = _579;
        _738 = _578;
        _739 = _593;
        _740 = _592;
        _741 = _591;
        _742 = cbModelParam._m0[36u].z * (isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0)));
        _743 = cbModelParam._m0[36u].z * (isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0)));
        _744 = cbModelParam._m0[36u].z * (isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0)));
    }
    else
    {
        _729 = _730;
        _731 = _730;
        _732 = _730;
        _733 = _730;
        _734 = _730;
        _735 = _730;
        _736 = _730;
        _737 = _730;
        _738 = _730;
        _739 = _730;
        _740 = _730;
        _741 = _730;
        _742 = 0.0;
        _743 = 0.0;
        _744 = 0.0;
    }
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _770 = fma(_427, cbModelParam._m0[30u].z, fma(_423, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _419));
        float _774 = fma(_427, cbModelParam._m0[31u].z, fma(_423, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _419));
        float _778 = fma(_427, cbModelParam._m0[32u].z, fma(_423, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _419));
        float _801 = _419 + _230;
        float _802 = _423 + _231;
        float _803 = _427 + _232;
        float _813 = fma(_803, cbModelParam._m0[30u].z, fma(_802, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _801)) - _770;
        float _814 = fma(_803, cbModelParam._m0[31u].z, fma(_802, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _801)) - _774;
        float _815 = fma(_803, cbModelParam._m0[32u].z, fma(_802, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _801)) - _778;
        float _819 = inversesqrt(dot(vec3(_813, _814, _815), vec3(_813, _814, _815)));
        float _832 = ((_819 * _813) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_770 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _833 = ((_819 * _814) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_774 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _834 = ((_819 * _815) / cbModelParam._m0[35u].z) + ((((((_778 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_832, _833, _834), 0.0);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_832, _833, _834), 0.0);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_832, _833, _834), 0.0);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_832, _833, _834), 0.0);
        float _869 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _870 = _869 * (_836.x + (-0.5));
        float _871 = _869 * (_836.y + (-0.5));
        float _872 = _869 * (_836.z + (-0.5));
        float _879 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _880 = _879 * (_843.x + (-0.5));
        float _881 = _879 * (_843.y + (-0.5));
        float _882 = _879 * (_843.z + (-0.5));
        float _889 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _890 = _889 * (_850.x + (-0.5));
        float _891 = _889 * (_850.y + (-0.5));
        float _892 = _889 * (_850.z + (-0.5));
        float _899 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _900 = _899 * (_857.x + (-0.5));
        float _901 = _899 * (_857.y + (-0.5));
        float _902 = _899 * (_857.z + (-0.5));
        float _903 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _904 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _905 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _906 = _870 * 0.5;
        float _907 = _880 * 0.5;
        float _908 = _890 * 0.5;
        float _909 = dot(vec3(_906, _907, _908), vec3(_906, _907, _908));
        float _914 = (_909 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_909);
        float _922 = (dot(vec3(_230, _231, _232), vec3(_914 * _906, _914 * _907, _914 * _908)) + 1.0) * 0.5;
        float _3409 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _931 = sqrt(((_907 * _907) + (_906 * _906)) + (_908 * _908)) / (_903 + 9.9999997473787516355514526367188e-06);
        float _3420 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
        float _933 = _932 * 2.0;
        float _937 = (1.0 - _932) / (_932 + 1.0);
        float _3431 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
        float _947 = ((((1.0 - _938) * (_933 + 2.0)) * exp2(log2(isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0))) * (_933 + 1.0))) + _938) * _903;
        float _948 = _871 * 0.5;
        float _949 = _881 * 0.5;
        float _950 = _891 * 0.5;
        float _951 = dot(vec3(_948, _949, _950), vec3(_948, _949, _950));
        float _956 = (_951 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_951);
        float _964 = (dot(vec3(_230, _231, _232), vec3(_956 * _948, _956 * _949, _956 * _950)) + 1.0) * 0.5;
        float _3442 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _973 = sqrt(((_949 * _949) + (_948 * _948)) + (_950 * _950)) / (_904 + 9.9999997473787516355514526367188e-06);
        float _3453 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _975 = _974 * 2.0;
        float _979 = (1.0 - _974) / (_974 + 1.0);
        float _3464 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
        float _989 = ((((1.0 - _980) * (_975 + 2.0)) * exp2(log2(isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0))) * (_975 + 1.0))) + _980) * _904;
        float _990 = _872 * 0.5;
        float _991 = _882 * 0.5;
        float _992 = _892 * 0.5;
        float _993 = dot(vec3(_990, _991, _992), vec3(_990, _991, _992));
        float _998 = (_993 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_993);
        float _1006 = (dot(vec3(_230, _231, _232), vec3(_998 * _990, _998 * _991, _998 * _992)) + 1.0) * 0.5;
        float _3475 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1015 = sqrt(((_991 * _991) + (_990 * _990)) + (_992 * _992)) / (_905 + 9.9999997473787516355514526367188e-06);
        float _3486 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _1017 = _1016 * 2.0;
        float _1021 = (1.0 - _1016) / (_1016 + 1.0);
        float _3497 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
        float _1031 = ((((1.0 - _1022) * (_1017 + 2.0)) * exp2(log2(isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))) * (_1017 + 1.0))) + _1022) * _905;
        _1039 = _872;
        _1040 = _871;
        _1041 = _870;
        _1042 = _882;
        _1043 = _881;
        _1044 = _880;
        _1045 = _892;
        _1046 = _891;
        _1047 = _890;
        _1048 = _905;
        _1049 = _904;
        _1050 = _903;
        _1051 = cbModelParam._m0[36u].w * (isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0)));
        _1052 = cbModelParam._m0[36u].w * (isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0)));
        _1053 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0)));
    }
    else
    {
        _1039 = _730;
        _1040 = _730;
        _1041 = _730;
        _1042 = _730;
        _1043 = _730;
        _1044 = _730;
        _1045 = _730;
        _1046 = _730;
        _1047 = _730;
        _1048 = _730;
        _1049 = _730;
        _1050 = _730;
        _1051 = 0.0;
        _1052 = 0.0;
        _1053 = 0.0;
    }
    float _1063 = (cbModelParam._m0[1u].x * (_1051 - _742)) + _742;
    float _1064 = (cbModelParam._m0[1u].x * (_1052 - _743)) + _743;
    float _1065 = (cbModelParam._m0[1u].x * (_1053 - _744)) + _744;
    float _1086 = fma(_1065, cbSceneParam._m0[89u].z, fma(_1064, cbSceneParam._m0[89u].y, _1063 * cbSceneParam._m0[89u].x));
    float _1089 = fma(_1065, cbSceneParam._m0[90u].z, fma(_1064, cbSceneParam._m0[90u].y, _1063 * cbSceneParam._m0[90u].x));
    float _1092 = fma(_1065, cbSceneParam._m0[91u].z, fma(_1064, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1063));
    float _1107 = _395 * 0.5;
    float _1108 = _396 * 0.5;
    float _1109 = _397 * 0.5;
    float _1110 = dot(vec4(_1107, _1108, _1109, 1.0), vec4(_1041, _1044, _1047, _1050));
    float _1113 = dot(vec4(_1107, _1108, _1109, 1.0), vec4(_1040, _1043, _1046, _1049));
    float _1116 = dot(vec4(_1107, _1108, _1109, 1.0), vec4(_1039, _1042, _1045, _1048));
    float _1150;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1123 = dot(vec4(_1107, _1108, _1109, 1.0), vec4(_729, _733, _736, _739));
        float _1127 = dot(vec4(_1107, _1108, _1109, 1.0), vec4(_731, _734, _737, _740));
        float _1131 = dot(vec4(_1107, _1108, _1109, 1.0), vec4(_732, _735, _738, _741));
        float _1138 = dot(vec4(cbModelParam._m0[39u]), vec4(_1107, _1108, _1109, 1.0));
        _1150 = dot(vec3(isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)), isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)), isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1138) ? 0.0 : (isnan(0.0) ? _1138 : max(0.0, _1138))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1150 = 1.0;
    }
    float _1161;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1152 = dot(vec4(cbModelParam._m0[40u]), vec4(_1107, _1108, _1109, 1.0));
        _1161 = dot(vec3(isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0)), isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)), isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1152) ? 0.0 : (isnan(0.0) ? _1152 : max(0.0, _1152))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1161 = 1.0;
    }
    float _1165 = (_1161 * cbModelParam._m0[1u].x) + (_1150 * (1.0 - cbModelParam._m0[1u].x));
    float _1174 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1256;
    float _1258;
    float _1260;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1223 = fma(_427, cbModelParam._m0[13u].z, fma(_423, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _419)) + cbModelParam._m0[13u].w;
        float _1227 = fma(_427, cbModelParam._m0[14u].z, fma(_423, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _419)) + cbModelParam._m0[14u].w;
        float _1231 = fma(_427, cbModelParam._m0[15u].z, fma(_423, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _419)) + cbModelParam._m0[15u].w;
        float _1234 = fma(_397, cbModelParam._m0[13u].z, fma(_396, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _395));
        float _1237 = fma(_397, cbModelParam._m0[14u].z, fma(_396, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _395));
        float _1240 = fma(_397, cbModelParam._m0[15u].z, fma(_396, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _395));
        float _1266;
        if (_1234 > 0.0)
        {
            _1266 = abs((1.0 - _1223) / _1234);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1234 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1223 + 1.0) / _1234);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1266 = frontier_phi_16_14_ladder;
        }
        float _1441;
        if (_1237 > 0.0)
        {
            _1441 = abs((1.0 - _1227) / _1237);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1237 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1227 + 1.0) / _1237);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1441 = frontier_phi_25_21_ladder;
        }
        float _1738;
        if (_1240 > 0.0)
        {
            _1738 = abs((1.0 - _1231) / _1240);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1240 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1231 + 1.0) / _1240);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1738 = frontier_phi_37_32_ladder;
        }
        float _1740 = isnan(_1441) ? _1266 : (isnan(_1266) ? _1441 : min(_1266, _1441));
        float _1741 = isnan(_1738) ? _1740 : (isnan(_1740) ? _1738 : min(_1740, _1738));
        float _1745 = (_1741 * _1234) + _1223;
        float _1746 = (_1741 * _1237) + _1227;
        float _1747 = (_1741 * _1240) + _1231;
        float _1748 = _1741 * 9.9999997473787516355514526367188e-05;
        float _1750 = (-1.0) - _1748;
        float _1752 = _1748 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1747 > _1752) || ((_1747 < _1750) || ((_1746 > _1752) || ((_1746 < _1750) || ((_1745 < _1750) || (_1745 > _1752))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1892 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1747, cbModelParam._m0[9u].z, fma(_1746, cbModelParam._m0[9u].y, _1745 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1747, cbModelParam._m0[10u].z, fma(_1746, cbModelParam._m0[10u].y, _1745 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1747, cbModelParam._m0[11u].z, fma(_1746, cbModelParam._m0[11u].y, _1745 * cbModelParam._m0[11u].x))), _1174);
            frontier_phi_15_37_ladder = _1892.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1892.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1892.z * cbModelParam._m0[1u].y;
        }
        _1256 = frontier_phi_15_37_ladder_1;
        _1258 = frontier_phi_15_37_ladder;
        _1260 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1244 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_395, _396, _397), _1174);
        _1256 = _1244.x * cbModelParam._m0[1u].y;
        _1258 = _1244.y * cbModelParam._m0[1u].y;
        _1260 = _1244.z * cbModelParam._m0[1u].y;
    }
    float _1263 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1356;
    float _1358;
    float _1360;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1320 = fma(_427, cbModelParam._m0[21u].z, fma(_423, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _419)) + cbModelParam._m0[21u].w;
        float _1324 = fma(_427, cbModelParam._m0[22u].z, fma(_423, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _419)) + cbModelParam._m0[22u].w;
        float _1328 = fma(_427, cbModelParam._m0[23u].z, fma(_423, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _419)) + cbModelParam._m0[23u].w;
        float _1331 = fma(_397, cbModelParam._m0[21u].z, fma(_396, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _395));
        float _1334 = fma(_397, cbModelParam._m0[22u].z, fma(_396, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _395));
        float _1337 = fma(_397, cbModelParam._m0[23u].z, fma(_396, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _395));
        float _1446;
        if (_1331 > 0.0)
        {
            _1446 = abs((1.0 - _1320) / _1331);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1331 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1320 + 1.0) / _1331);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1446 = frontier_phi_27_23_ladder;
        }
        float _1765;
        if (_1334 > 0.0)
        {
            _1765 = abs((1.0 - _1324) / _1334);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1334 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1324 + 1.0) / _1334);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1765 = frontier_phi_39_34_ladder;
        }
        float _2038;
        if (_1337 > 0.0)
        {
            _2038 = abs((1.0 - _1328) / _1337);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1337 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1328 + 1.0) / _1337);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2038 = frontier_phi_49_46_ladder;
        }
        float _2040 = isnan(_1765) ? _1446 : (isnan(_1446) ? _1765 : min(_1446, _1765));
        float _2041 = isnan(_2038) ? _2040 : (isnan(_2040) ? _2038 : min(_2040, _2038));
        float _2045 = (_2041 * _1331) + _1320;
        float _2046 = (_2041 * _1334) + _1324;
        float _2047 = (_2041 * _1337) + _1328;
        float _2048 = _2041 * 9.9999997473787516355514526367188e-05;
        float _2049 = (-1.0) - _2048;
        float _2051 = _2048 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2047 > _2051) || ((_2047 < _2049) || ((_2046 > _2051) || ((_2046 < _2049) || ((_2045 < _2049) || (_2045 > _2051))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2138 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2047, cbModelParam._m0[17u].z, fma(_2046, cbModelParam._m0[17u].y, _2045 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2047, cbModelParam._m0[18u].z, fma(_2046, cbModelParam._m0[18u].y, _2045 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2047, cbModelParam._m0[19u].z, fma(_2046, cbModelParam._m0[19u].y, _2045 * cbModelParam._m0[19u].x))), _1263);
            frontier_phi_24_49_ladder = _2138.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2138.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2138.x * cbModelParam._m0[1u].z;
        }
        _1356 = frontier_phi_24_49_ladder_2;
        _1358 = frontier_phi_24_49_ladder_1;
        _1360 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1340 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_395, _396, _397), _1263);
        _1356 = _1340.x * cbModelParam._m0[1u].z;
        _1358 = _1340.y * cbModelParam._m0[1u].z;
        _1360 = _1340.z * cbModelParam._m0[1u].z;
    }
    float _1372 = _386 * 0.01200000010430812835693359375;
    float _1374 = _1372 * ((cbModelParam._m0[1u].w * (_1356 - _1256)) + _1256);
    float _1375 = _1372 * ((cbModelParam._m0[1u].w * (_1358 - _1258)) + _1258);
    float _1376 = _1372 * ((cbModelParam._m0[1u].w * (_1360 - _1260)) + _1260);
    float _1379 = fma(_1376, cbSceneParam._m0[89u].z, fma(_1375, cbSceneParam._m0[89u].y, _1374 * cbSceneParam._m0[89u].x));
    float _1382 = fma(_1376, cbSceneParam._m0[90u].z, fma(_1375, cbSceneParam._m0[90u].y, _1374 * cbSceneParam._m0[90u].x));
    float _1385 = fma(_1376, cbSceneParam._m0[91u].z, fma(_1375, cbSceneParam._m0[91u].y, _1374 * cbSceneParam._m0[91u].x));
    float _1420 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1424 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1428 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1432 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1433 = _1420 / _1432;
    float _1434 = _1424 / _1432;
    float _1435 = _1428 / _1432;
    float _1582;
    float _1583;
    float _1584;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1462 = ((uint(_1435 > cbSceneParam._m0[59u].y) + uint(_1435 > cbSceneParam._m0[59u].x)) + uint(_1435 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1463 = _1462 + 43u;
        uint _1471 = _1462 + 44u;
        uint _1479 = _1462 + 45u;
        uint _1487 = _1462 + 46u;
        float _1498 = fma(_1432, cbSceneParam._m0[_1463].w, fma(_1428, cbSceneParam._m0[_1463].z, fma(_1424, cbSceneParam._m0[_1463].y, _1420 * cbSceneParam._m0[_1463].x)));
        float _1502 = fma(_1432, cbSceneParam._m0[_1471].w, fma(_1428, cbSceneParam._m0[_1471].z, fma(_1424, cbSceneParam._m0[_1471].y, _1420 * cbSceneParam._m0[_1471].x)));
        float _1510 = fma(_1432, cbSceneParam._m0[_1487].w, fma(_1428, cbSceneParam._m0[_1487].z, fma(_1424, cbSceneParam._m0[_1487].y, _1420 * cbSceneParam._m0[_1487].x)));
        float _1515 = cbSceneParam._m0[33u].z * _1510;
        float _1517 = cbSceneParam._m0[33u].w * _1510;
        float _1520 = fma(_1432, cbSceneParam._m0[_1479].w, fma(_1428, cbSceneParam._m0[_1479].z, fma(_1424, cbSceneParam._m0[_1479].y, _1420 * cbSceneParam._m0[_1479].x))) / _1510;
        float _1568 = (cbSceneParam._m0[33u].x - sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435))) * cbSceneParam._m0[33u].y;
        float _3623 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1575 = (isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1515 + _1498) / _1510, (_1517 + _1502) / _1510), _1520), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1517 + _1498) / _1510, (_1502 - _1515) / _1510), _1520), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1498 - _1515) / _1510, (_1502 - _1517) / _1510), _1520), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1498 - _1517) / _1510, (_1515 + _1502) / _1510), _1520), 0.0)).x), vec4(0.25)));
        _1582 = 1.0 - (_1575 * cbSceneParam._m0[34u].x);
        _1583 = 1.0 - (_1575 * cbSceneParam._m0[34u].y);
        _1584 = 1.0 - (_1575 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1582 = 1.0;
        _1583 = 1.0;
        _1584 = 1.0;
    }
    float _1648;
    float _1650;
    float _1652;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1636 = fma(_1432, cbSceneParam._m0[63u].w, fma(_1428, cbSceneParam._m0[63u].z, fma(_1424, cbSceneParam._m0[63u].y, _1420 * cbSceneParam._m0[63u].x)));
        float _1637 = fma(_1432, cbSceneParam._m0[60u].w, fma(_1428, cbSceneParam._m0[60u].z, fma(_1424, cbSceneParam._m0[60u].y, _1420 * cbSceneParam._m0[60u].x))) / _1636;
        float _1638 = fma(_1432, cbSceneParam._m0[61u].w, fma(_1428, cbSceneParam._m0[61u].z, fma(_1424, cbSceneParam._m0[61u].y, _1420 * cbSceneParam._m0[61u].x))) / _1636;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1637 >= cbSceneParam._m0[64u].x) && (_1638 >= cbSceneParam._m0[64u].y)) && (_1637 <= cbSceneParam._m0[64u].z)) && (_1638 <= cbSceneParam._m0[64u].w))
        {
            float _1778 = fma(_1432, cbSceneParam._m0[62u].w, fma(_1428, cbSceneParam._m0[62u].z, fma(_1424, cbSceneParam._m0[62u].y, _1420 * cbSceneParam._m0[62u].x))) / _1636;
            float _1782 = isnan(cbSceneParam._m0[41u].w) ? _1778 : (isnan(_1778) ? cbSceneParam._m0[41u].w : max(_1778, cbSceneParam._m0[41u].w));
            float _1825 = (cbSceneParam._m0[33u].x - sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435))) * cbSceneParam._m0[33u].y;
            float _3639 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
            float _1832 = (isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1637, cbSceneParam._m0[33u].w + _1638), _1782), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1637, _1638 - cbSceneParam._m0[33u].z), _1782), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1637 - cbSceneParam._m0[33u].z, _1638 - cbSceneParam._m0[33u].w), _1782), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1637 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1638), _1782), 0.0)).x), vec4(0.25)));
            float _1836 = 1.0 - (_1832 * cbSceneParam._m0[34u].x);
            float _1837 = 1.0 - (_1832 * cbSceneParam._m0[34u].y);
            float _1838 = 1.0 - (_1832 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1837) ? _1583 : (isnan(_1583) ? _1837 : min(_1583, _1837));
            frontier_phi_36_35_ladder_1 = isnan(_1838) ? _1584 : (isnan(_1584) ? _1838 : min(_1584, _1838));
            frontier_phi_36_35_ladder_2 = isnan(_1836) ? _1582 : (isnan(_1582) ? _1836 : min(_1582, _1836));
        }
        else
        {
            frontier_phi_36_35_ladder = _1583;
            frontier_phi_36_35_ladder_1 = _1584;
            frontier_phi_36_35_ladder_2 = _1582;
        }
        _1648 = frontier_phi_36_35_ladder_2;
        _1650 = frontier_phi_36_35_ladder;
        _1652 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1648 = _1582;
        _1650 = _1583;
        _1652 = _1584;
    }
    uvec4 _1657 = floatBitsToUint(cbInstanceData._m0[_360 + 5u]);
    uint _1659 = _1657.x * 14u;
    uint _1660 = _1659 + 13u;
    float _1667 = _386 + (-1.0);
    float _1673 = (cbLight._m0[_1660].x * _1667) + 1.0;
    float _1674 = (cbLight._m0[_1660].y * _1667) + 1.0;
    float _1675 = (cbLight._m0[_1660].z * _1667) + 1.0;
    float _1676 = (cbLight._m0[_1660].w * _1667) + 1.0;
    uint _1677 = _1659 + 5u;
    float _1683 = isnan(1.0) ? _1674 : (isnan(_1674) ? 1.0 : min(_1674, 1.0));
    uint _1687 = _1659 + 4u;
    float _1697 = isnan(1.0) ? _1673 : (isnan(_1673) ? 1.0 : min(_1673, 1.0));
    uint _1701 = _1659 | 1u;
    float _1712 = dot(vec3(cbLight._m0[_1659].xyz), vec3(_230, _231, _232));
    float _1715 = dot(vec3(cbLight._m0[_1701].xyz), vec3(_230, _231, _232));
    float _3675 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
    float _3686 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
    float _1720 = (isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * 0.3183098733425140380859375;
    float _1722 = (isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * 0.3183098733425140380859375;
    float _1729 = ((cbLight._m0[_1677].x * _1683) * _1722) + (((cbLight._m0[_1687].x * _1648) * _1697) * _1720);
    float _1730 = ((_1683 * cbLight._m0[_1677].y) * _1722) + (((cbLight._m0[_1687].y * _1650) * _1697) * _1720);
    float _1731 = ((_1683 * cbLight._m0[_1677].z) * _1722) + (((cbLight._m0[_1687].z * _1652) * _1697) * _1720);
    uvec4 _1735 = floatBitsToUint(cbLight._m0[_1659 + 12u]);
    bool _1737 = _1735.x == 0u;
    float _1839;
    float _1841;
    float _1843;
    if (_1737)
    {
        _1839 = _1729;
        _1841 = _1730;
        _1843 = _1731;
    }
    else
    {
        uint _1847 = _1659 + 6u;
        float _1863 = (dot(vec3(cbLight._m0[_1659 + 2u].xyz), vec3(_230, _231, _232)) * 0.5) + 0.5;
        float _1864 = _1863 * _1863;
        float _3697 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1865 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1866 = isnan(1.0) ? _1675 : (isnan(_1675) ? 1.0 : min(_1675, 1.0));
        _1839 = (((cbLight._m0[_1847].x * 0.3183098733425140380859375) * _1865) * _1866) + _1729;
        _1841 = (((cbLight._m0[_1847].y * 0.3183098733425140380859375) * _1865) * _1866) + _1730;
        _1843 = (((cbLight._m0[_1847].z * 0.3183098733425140380859375) * _1865) * _1866) + _1731;
    }
    bool _1846 = _1735.y == 0u;
    float _1901;
    float _1903;
    float _1905;
    if (_1846)
    {
        _1901 = _1839;
        _1903 = _1841;
        _1905 = _1843;
    }
    else
    {
        uint _2009 = _1659 + 7u;
        float _2025 = (dot(vec3(cbLight._m0[_1659 + 3u].xyz), vec3(_230, _231, _232)) * 0.5) + 0.5;
        float _2026 = _2025 * _2025;
        float _3713 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
        float _2027 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _2028 = isnan(1.0) ? _1676 : (isnan(_1676) ? 1.0 : min(_1676, 1.0));
        _1901 = (((cbLight._m0[_2009].x * 0.3183098733425140380859375) * _2027) * _2028) + _1839;
        _1903 = (((cbLight._m0[_2009].y * 0.3183098733425140380859375) * _2027) * _2028) + _1841;
        _1905 = (((cbLight._m0[_2009].z * 0.3183098733425140380859375) * _2027) * _2028) + _1843;
    }
    uint _1907 = _1659 + 8u;
    float _1913 = cbLight._m0[_1659].x + _311;
    float _1914 = cbLight._m0[_1659].y + _312;
    float _1915 = cbLight._m0[_1659].z + _313;
    float _1919 = inversesqrt(dot(vec3(_1913, _1914, _1915), vec3(_1913, _1914, _1915)));
    float _1923 = dot(vec3(_230, _231, _232), vec3(cbLight._m0[_1659].xyz));
    float _3729 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1926 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    float _3740 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _1927 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    float _1928 = dot(vec3(cbLight._m0[_1659].xyz), vec3(_1913 * _1919, _1914 * _1919, _1915 * _1919));
    float _3751 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1939 = (exp2(log2(1.0 - (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1945 = (0.5 / ((_1926 + 9.9999999392252902907785028219223e-09) + _1927)) * _1926;
    float _3762 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1947 = (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * 0.31831014156341552734375;
    uint _1961 = _1659 + 9u;
    float _1967 = cbLight._m0[_1701].x + _311;
    float _1968 = cbLight._m0[_1701].y + _312;
    float _1969 = cbLight._m0[_1701].z + _313;
    float _1973 = inversesqrt(dot(vec3(_1967, _1968, _1969), vec3(_1967, _1968, _1969)));
    float _1977 = dot(vec3(_230, _231, _232), vec3(cbLight._m0[_1701].xyz));
    float _3773 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1980 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _1981 = dot(vec3(cbLight._m0[_1701].xyz), vec3(_1967 * _1973, _1968 * _1973, _1969 * _1973));
    float _3784 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1990 = (exp2(log2(1.0 - (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1994 = (0.5 / ((_1980 + 9.9999999392252902907785028219223e-09) + _1927)) * _1980;
    float _3795 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1996 = (isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * 0.31831014156341552734375;
    float _2006 = (((_1990 * cbLight._m0[_1961].x) * _1996) * _1683) + ((((cbLight._m0[_1907].x * _1648) * _1939) * _1947) * _1697);
    float _2007 = (((_1990 * cbLight._m0[_1961].y) * _1996) * _1683) + ((((cbLight._m0[_1907].y * _1650) * _1939) * _1947) * _1697);
    float _2008 = (((_1990 * cbLight._m0[_1961].z) * _1996) * _1683) + ((((cbLight._m0[_1907].z * _1652) * _1939) * _1947) * _1697);
    float _2064;
    float _2066;
    float _2068;
    if (_1737)
    {
        _2064 = _2006;
        _2066 = _2007;
        _2068 = _2008;
    }
    else
    {
        uint _2070 = _1659 + 10u;
        uint _2076 = _1659 + 2u;
        float _2082 = cbLight._m0[_2076].x + _311;
        float _2083 = cbLight._m0[_2076].y + _312;
        float _2084 = cbLight._m0[_2076].z + _313;
        float _2088 = inversesqrt(dot(vec3(_2082, _2083, _2084), vec3(_2082, _2083, _2084)));
        float _2092 = dot(vec3(_230, _231, _232), vec3(cbLight._m0[_2076].xyz));
        float _3806 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2095 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _2096 = dot(vec3(cbLight._m0[_2076].xyz), vec3(_2082 * _2088, _2083 * _2088, _2084 * _2088));
        float _3817 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2105 = (exp2(log2(1.0 - (isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2109 = (0.5 / ((_2095 + 9.9999999392252902907785028219223e-09) + _1927)) * _2095;
        float _3828 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2111 = (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * 0.31831014156341552734375;
        float _2112 = isnan(1.0) ? _1675 : (isnan(_1675) ? 1.0 : min(_1675, 1.0));
        _2064 = (((_2105 * cbLight._m0[_2070].x) * _2111) * _2112) + _2006;
        _2066 = (((_2105 * cbLight._m0[_2070].y) * _2111) * _2112) + _2007;
        _2068 = (((_2105 * cbLight._m0[_2070].z) * _2111) * _2112) + _2008;
    }
    float _2143;
    float _2145;
    float _2147;
    if (_1846)
    {
        _2143 = _2064;
        _2145 = _2066;
        _2147 = _2068;
    }
    else
    {
        uint _2154 = _1659 + 11u;
        uint _2160 = _1659 + 3u;
        float _2166 = cbLight._m0[_2160].x + _311;
        float _2167 = cbLight._m0[_2160].y + _312;
        float _2168 = cbLight._m0[_2160].z + _313;
        float _2172 = inversesqrt(dot(vec3(_2166, _2167, _2168), vec3(_2166, _2167, _2168)));
        float _2176 = dot(vec3(_230, _231, _232), vec3(cbLight._m0[_2160].xyz));
        float _3844 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2179 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _2180 = dot(vec3(cbLight._m0[_2160].xyz), vec3(_2166 * _2172, _2167 * _2172, _2168 * _2172));
        float _3855 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2189 = (exp2(log2(1.0 - (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2193 = (0.5 / ((_2179 + 9.9999999392252902907785028219223e-09) + _1927)) * _2179;
        float _3866 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2195 = (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * 0.31831014156341552734375;
        float _2196 = isnan(1.0) ? _1676 : (isnan(_1676) ? 1.0 : min(_1676, 1.0));
        _2143 = (((_2189 * cbLight._m0[_2154].x) * _2195) * _2196) + _2064;
        _2145 = (((_2189 * cbLight._m0[_2154].y) * _2195) * _2196) + _2066;
        _2147 = (((_2189 * cbLight._m0[_2154].z) * _2195) * _2196) + _2068;
    }
    float _2261;
    float _2263;
    float _2265;
    float _2267;
    float _2269;
    float _2271;
    if (_1657.y == 0u)
    {
        uvec4 _2217 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2218 = _2217.x;
        uint _2229 = uint((float(_2217.y) * floor(float(uint(cbSceneParam._m0[85u].y * _320) / _2218))) + floor(float(uint(cbSceneParam._m0[85u].x * _319) / _2218)));
        float _2239 = (log2(_1435 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2240 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        uint _2243 = uint(isnan(14.0) ? _2240 : (isnan(_2240) ? 14.0 : min(_2240, 14.0)));
        uvec4 _2248 = texelFetch(g_lightClusterGridBuffer, int(((_2243 << 2u) + (_2229 << 6u)) >> 2u));
        uint _2249 = _2248.x;
        uint _2250 = _2217.z;
        float _2357;
        float _2359;
        float _2361;
        float _2363;
        float _2365;
        float _2367;
        if (((((1u << ((_2250 >> 4u) & 15u)) + 4294967295u) & _2249) == 0u) || ((_2250 & 240u) == 0u))
        {
            _2357 = 0.0;
            _2359 = 0.0;
            _2361 = 0.0;
            _2363 = 0.0;
            _2365 = 0.0;
            _2367 = 0.0;
        }
        else
        {
            float _2358;
            float _2360;
            float _2362;
            float _2364;
            float _2366;
            float _2368;
            float _2545 = 0.0;
            float _2546 = 0.0;
            float _2547 = 0.0;
            float _2548 = 0.0;
            float _2549 = 0.0;
            float _2550 = 0.0;
            uint _2551 = 0u;
            uint _2560;
            bool _2561;
            for (;;)
            {
                _2560 = texelFetch(g_lightClassification, int((((_2243 << 5u) + (_2229 << 9u)) + (_2551 << 2u)) >> 2u)).x;
                _2561 = _2560 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2561)
                {
                    frontier_phi_68_pred = _2550;
                    frontier_phi_68_pred_1 = _2549;
                    frontier_phi_68_pred_2 = _2548;
                    frontier_phi_68_pred_3 = _2546;
                    frontier_phi_68_pred_4 = _2545;
                    frontier_phi_68_pred_5 = _2547;
                }
                else
                {
                    float _2669;
                    float _2670;
                    float _2671;
                    float _2672;
                    float _2673;
                    float _2674;
                    uint _2675;
                    _2669 = _2545;
                    _2670 = _2546;
                    _2671 = _2547;
                    _2672 = _2548;
                    _2673 = _2549;
                    _2674 = _2550;
                    _2675 = _2560;
                    float _2601;
                    float _2602;
                    float _2603;
                    float _2604;
                    float _2605;
                    float _2606;
                    for (;;)
                    {
                        uint _2679 = uint(findLSB(_2675)) + (_2551 << 5u);
                        uint _2676 = (_2675 + 4294967295u) & _2675;
                        uint _2681 = _2679 * 48u;
                        vec4 _2695 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2681)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 3u)).x));
                        uint _2701 = (_2679 * 48u) + 4u;
                        vec4 _2714 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2701)).x, texelFetch(g_PointLightRenderingBuffer, int(_2701 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2701 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2701 + 3u)).x));
                        uint _2720 = (_2679 * 48u) + 8u;
                        vec3 _2731 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2720)).x, texelFetch(g_PointLightRenderingBuffer, int(_2720 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2720 + 2u)).x));
                        float _2735 = _2695.x - _1433;
                        float _2736 = _2695.y - _1434;
                        float _2737 = _2695.z - _1435;
                        float _2738 = dot(vec3(_2735, _2736, _2737), vec3(_2735, _2736, _2737));
                        float _2741 = inversesqrt(_2738);
                        float _2750 = 1.0 - (_2738 * _2695.w);
                        float _3892 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
                        float _2751 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
                        float _2752 = sqrt(_2738) * _2714.w;
                        float _2755 = 1.39999997615814208984375 / (_2752 + 1.39999997615814208984375);
                        float _2756 = _2755 * _2755;
                        float _2759 = ((1.0 - _2756) * dot(vec3(_341, _344, _347), vec3(_2741 * _2735, _2741 * _2736, _2741 * _2737))) + _2756;
                        float _2762 = _2752 * _2752;
                        float _2766 = ((isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0))) * _2751) / ((_2762 * 0.699999988079071044921875) + 1.0);
                        float _2770 = (-0.0) - _1433;
                        float _2771 = (-0.0) - _1434;
                        float _2772 = (-0.0) - _1435;
                        float _2776 = inversesqrt(dot(vec3(_2770, _2771, _2772), vec3(_2770, _2771, _2772)));
                        float _2780 = dot(vec3(_341, _344, _347), vec3(_2776 * _2770, _2776 * _2771, _2776 * _2772));
                        float _3908 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
                        float _3919 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
                        float _2784 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
                        float _2788 = (0.5 / (((isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) + 9.9999999392252902907785028219223e-09) + _2784)) * _2784;
                        float _3930 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
                        float _2797 = (((isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * 3.1415927410125732421875) / ((_2762 * 2.1991131305694580078125) + 3.141590118408203125)) * _2751;
                        _2604 = (_2766 * _2714.x) + _2672;
                        _2605 = (_2766 * _2714.y) + _2673;
                        _2606 = (_2766 * _2714.z) + _2674;
                        _2601 = (_2797 * _2731.x) + _2669;
                        _2602 = (_2797 * _2731.y) + _2670;
                        _2603 = (_2797 * _2731.z) + _2671;
                        if (_2676 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2669 = _2601;
                            _2670 = _2602;
                            _2671 = _2603;
                            _2672 = _2604;
                            _2673 = _2605;
                            _2674 = _2606;
                            _2675 = _2676;
                        }
                    }
                    frontier_phi_68_pred = _2606;
                    frontier_phi_68_pred_1 = _2605;
                    frontier_phi_68_pred_2 = _2604;
                    frontier_phi_68_pred_3 = _2602;
                    frontier_phi_68_pred_4 = _2601;
                    frontier_phi_68_pred_5 = _2603;
                }
                _2368 = frontier_phi_68_pred;
                _2366 = frontier_phi_68_pred_1;
                _2364 = frontier_phi_68_pred_2;
                _2360 = frontier_phi_68_pred_3;
                _2358 = frontier_phi_68_pred_4;
                _2362 = frontier_phi_68_pred_5;
                uint _2552 = _2551 + 1u;
                if (_2552 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2545 = _2358;
                    _2546 = _2360;
                    _2547 = _2362;
                    _2548 = _2364;
                    _2549 = _2366;
                    _2550 = _2368;
                    _2551 = _2552;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2357 = _2358;
            _2359 = _2360;
            _2361 = _2362;
            _2363 = _2364;
            _2365 = _2366;
            _2367 = _2368;
        }
        uvec4 _2371 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2372 = _2371.z;
        uint _2374 = (_2372 >> 8u) & 15u;
        float _2516;
        float _2518;
        float _2520;
        float _2522;
        float _2524;
        float _2526;
        if (((4294967295u << _2374) & _2249) == 0u)
        {
            _2516 = _2357;
            _2518 = _2359;
            _2520 = _2361;
            _2522 = _2363;
            _2524 = _2365;
            _2526 = _2367;
        }
        else
        {
            float _2541 = inversesqrt(dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435)));
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2374 < ((_2372 >> 12u) & 15u))
            {
                float _2517;
                float _2519;
                float _2521;
                float _2523;
                float _2525;
                float _2527;
                float _2652 = _2357;
                float _2653 = _2359;
                float _2654 = _2361;
                float _2655 = _2363;
                float _2656 = _2365;
                float _2657 = _2367;
                uint _2658 = _2374;
                uint _2667;
                bool _2668;
                for (;;)
                {
                    _2667 = texelFetch(g_lightClassification, int((((_2243 << 5u) + (_2229 << 9u)) + (_2658 << 2u)) >> 2u)).x;
                    _2668 = _2667 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2668)
                    {
                        frontier_phi_74_pred = _2654;
                        frontier_phi_74_pred_1 = _2653;
                        frontier_phi_74_pred_2 = _2652;
                        frontier_phi_74_pred_3 = _2657;
                        frontier_phi_74_pred_4 = _2656;
                        frontier_phi_74_pred_5 = _2655;
                    }
                    else
                    {
                        float _2802;
                        float _2803;
                        float _2804;
                        float _2805;
                        float _2806;
                        float _2807;
                        float _3054;
                        float _3055;
                        float _3056;
                        float _3057;
                        float _3058;
                        float _3059;
                        float _2815 = _2652;
                        float _2816 = _2653;
                        float _2817 = _2654;
                        float _2818 = _2655;
                        float _2819 = _2656;
                        float _2820 = _2657;
                        uint _2821 = _2667;
                        uint _2822;
                        vec4 _2847;
                        float _2848;
                        vec4 _2863;
                        vec3 _2875;
                        vec4 _2891;
                        vec4 _2907;
                        float _2954;
                        bool _2955;
                        for (;;)
                        {
                            uint _2832 = ((_2658 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2821));
                            _2822 = (_2821 + 4294967295u) & _2821;
                            uint _2834 = _2832 * 40u;
                            _2847 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2834)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 3u)).x));
                            _2848 = _2847.w;
                            uint _2850 = (_2832 * 40u) + 4u;
                            _2863 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2850)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 3u)).x));
                            uint _2865 = (_2832 * 40u) + 8u;
                            _2875 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2865)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 2u)).x));
                            uint _2878 = (_2832 * 40u) + 16u;
                            _2891 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2878)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 3u)).x));
                            uint _2894 = (_2832 * 40u) + 20u;
                            _2907 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2894)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 3u)).x));
                            uint _2910 = (_2832 * 40u) + 24u;
                            vec4 _2923 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2910)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 3u)).x));
                            uint _2929 = (_2832 * 40u) + 28u;
                            vec4 _2942 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2929)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 3u)).x));
                            _2954 = fma(_1435, _2942.z, fma(_1434, _2942.y, _2942.x * _1433)) + _2942.w;
                            _2955 = !((fma(_1435, _2923.z, fma(_1434, _2923.y, _2923.x * _1433)) + _2923.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_2955)
                            {
                                float _2982 = _2847.x - _1433;
                                float _2983 = _2847.y - _1434;
                                float _2984 = _2847.z - _1435;
                                float _2985 = dot(vec3(_2982, _2983, _2984), vec3(_2982, _2983, _2984));
                                float _2988 = inversesqrt(_2985);
                                float _2989 = _2988 * _2982;
                                float _2990 = _2988 * _2983;
                                float _2991 = _2988 * _2984;
                                float _2995 = 1.0 - (_2985 / (_2848 * _2848));
                                float _3941 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                                float _2996 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
                                float _3000 = sqrt(_2985) * _2863.w;
                                float _3002 = 1.39999997615814208984375 / (_3000 + 1.39999997615814208984375);
                                float _3003 = _3002 * _3002;
                                float _3004 = 1.0 - _3003;
                                float _3006 = (_3004 * dot(vec3(_2989, _2990, _2991), vec3(_341, _344, _347))) + _3003;
                                float _3009 = _3000 * _3000;
                                float _3013 = (fma(_1435, _2891.z, fma(_1434, _2891.y, _2891.x * _1433)) + _2891.w) / _2954;
                                float _3014 = (fma(_1435, _2907.z, fma(_1434, _2907.y, _2907.x * _1433)) + _2907.w) / _2954;
                                float _3018 = 1.0 - dot(vec2(_3013, _3014), vec2(_3013, _3014));
                                float _3957 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                                float _3019 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
                                float _3020 = _3019 * (((isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0))) * _2996) / ((_3009 * 0.699999988079071044921875) + 1.0));
                                float _3030 = dot(vec3(_341, _344, _347), vec3((-0.0) - (_1433 * _2541), (-0.0) - (_1434 * _2541), (-0.0) - (_1435 * _2541)));
                                float _3968 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                                float _3038 = (_3004 * dot(vec3(_341, _344, _347), vec3(_2989, _2990, _2991))) + _3003;
                                float _3979 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                                float _3039 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
                                float _3043 = (0.5 / (((isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) + 9.9999999392252902907785028219223e-09) + _3039)) * _3039;
                                float _3990 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                                float _3050 = (_3019 * _2996) * (((isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * 3.1415927410125732421875) / ((_3009 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_80_pred = _3050 * _2875.z;
                                frontier_phi_80_pred_1 = _3050 * _2875.y;
                                frontier_phi_80_pred_2 = _3050 * _2875.x;
                                frontier_phi_80_pred_3 = _3020 * _2863.z;
                                frontier_phi_80_pred_4 = _3020 * _2863.y;
                                frontier_phi_80_pred_5 = _3020 * _2863.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3056 = frontier_phi_80_pred;
                            _3055 = frontier_phi_80_pred_1;
                            _3054 = frontier_phi_80_pred_2;
                            _3059 = frontier_phi_80_pred_3;
                            _3058 = frontier_phi_80_pred_4;
                            _3057 = frontier_phi_80_pred_5;
                            _2805 = _3057 + _2818;
                            _2806 = _3058 + _2819;
                            _2807 = _3059 + _2820;
                            _2802 = _3054 + _2815;
                            _2803 = _3055 + _2816;
                            _2804 = _3056 + _2817;
                            if (_2822 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2815 = _2802;
                                _2816 = _2803;
                                _2817 = _2804;
                                _2818 = _2805;
                                _2819 = _2806;
                                _2820 = _2807;
                                _2821 = _2822;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _2804;
                        frontier_phi_74_pred_1 = _2803;
                        frontier_phi_74_pred_2 = _2802;
                        frontier_phi_74_pred_3 = _2807;
                        frontier_phi_74_pred_4 = _2806;
                        frontier_phi_74_pred_5 = _2805;
                    }
                    _2521 = frontier_phi_74_pred;
                    _2519 = frontier_phi_74_pred_1;
                    _2517 = frontier_phi_74_pred_2;
                    _2527 = frontier_phi_74_pred_3;
                    _2525 = frontier_phi_74_pred_4;
                    _2523 = frontier_phi_74_pred_5;
                    uint _2659 = _2658 + 1u;
                    if (_2659 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2652 = _2517;
                        _2653 = _2519;
                        _2654 = _2521;
                        _2655 = _2523;
                        _2656 = _2525;
                        _2657 = _2527;
                        _2658 = _2659;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2525;
                frontier_phi_62_63_ladder_1 = _2523;
                frontier_phi_62_63_ladder_2 = _2521;
                frontier_phi_62_63_ladder_3 = _2527;
                frontier_phi_62_63_ladder_4 = _2519;
                frontier_phi_62_63_ladder_5 = _2517;
            }
            else
            {
                frontier_phi_62_63_ladder = _2365;
                frontier_phi_62_63_ladder_1 = _2363;
                frontier_phi_62_63_ladder_2 = _2361;
                frontier_phi_62_63_ladder_3 = _2367;
                frontier_phi_62_63_ladder_4 = _2359;
                frontier_phi_62_63_ladder_5 = _2357;
            }
            _2516 = frontier_phi_62_63_ladder_5;
            _2518 = frontier_phi_62_63_ladder_4;
            _2520 = frontier_phi_62_63_ladder_2;
            _2522 = frontier_phi_62_63_ladder_1;
            _2524 = frontier_phi_62_63_ladder;
            _2526 = frontier_phi_62_63_ladder_3;
        }
        float _2531 = isnan(1.0) ? _386 : (isnan(_386) ? 1.0 : min(_386, 1.0));
        _2261 = (_2531 * _2522) + _1901;
        _2263 = (_2531 * _2524) + _1903;
        _2265 = (_2531 * _2526) + _1905;
        _2267 = ((_2516 * 0.039999999105930328369140625) * _2531) + _2143;
        _2269 = ((_2518 * 0.039999999105930328369140625) * _2531) + _2145;
        _2271 = ((_2520 * 0.039999999105930328369140625) * _2531) + _2147;
    }
    else
    {
        _2261 = _1901;
        _2263 = _1903;
        _2265 = _1905;
        _2267 = _2143;
        _2269 = _2145;
        _2271 = _2147;
    }
    uint _2277 = _362 + uint(cbMatDynParam._m0[0u].w);
    float _2283 = (_218.x * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2277].x;
    float _2284 = (_218.y * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2277].y;
    float _2285 = (_218.z * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2277].z;
    float _4006 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _4017 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _4028 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _2302 = (((isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_2261 + ((isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0))) * _386))) + ((_2267 + ((isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0))) * _1165)) * cbPerFrame._m0[3u].x)) + _2283;
    float _2304 = (_2284 + ((_2269 + ((isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0))) * _1165)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_2263 + ((isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0))) * _386)));
    float _2306 = (_2285 + ((_2271 + ((isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0))) * _1165)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_2265 + ((isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0))) * _386)));
    float _4054 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2319 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _2328 = _319 / cbSceneParam._m0[86u].x;
    float _2329 = _320 / cbSceneParam._m0[86u].y;
    vec4 _2343 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2328, _2329, (log2((isnan(cbSceneParam._m0[77u].w) ? _252 : (isnan(_252) ? cbSceneParam._m0[77u].w : min(_252, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2345 = _2343.x;
    float _2346 = _2343.y;
    float _2347 = _2343.z;
    float _2348 = _2343.w;
    float _2419;
    float _2421;
    float _2423;
    float _2425;
    if (_252 > cbSceneParam._m0[78u].w)
    {
        float _2382 = isnan(_252) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _252 : min(cbSceneParam._m0[80u].w, _252));
        float _2383 = _2382 / _252;
        float _2394 = _2383 * _304;
        float _2395 = _305 * _2383;
        float _2396 = (-0.0) - _2395;
        float _2397 = _2383 * _306;
        float _2399 = (cbSceneParam._m0[77u].w * _2396) / _2382;
        float _2400 = _2399 + cbSceneParam._m0[79u].w;
        float _2401 = cbSceneParam._m0[79u].w - _2395;
        float _2407 = sqrt(((_2394 * _2394) + (_2395 * _2395)) + (_2397 * _2397));
        float _2410 = (1.0 - (cbSceneParam._m0[77u].w / _2382)) * _2407;
        float _2415 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2417 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2614;
        if (abs((_2396 - _2399) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2614 = ((((_2400 > 0.0) ? exp2(_2415 * _2400) : (2.0 - exp2(_2417 * _2400))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2410;
        }
        else
        {
            float _2574 = 1.0 / cbSceneParam._m0[80u].x;
            float _2575 = isnan(_2401) ? _2400 : (isnan(_2400) ? _2401 : max(_2400, _2401));
            float _2576 = isnan(_2401) ? _2400 : (isnan(_2400) ? _2401 : min(_2400, _2401));
            float _2585 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : min(_2575, 0.0));
            float _2586 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : min(_2576, 0.0));
            _2614 = ((abs(_2407 / _2396) * cbSceneParam._m0[80u].y) * ((((_2585 - _2586) * 2.0) - ((exp2(_2415 * (isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0)))) - exp2(_2415 * (isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0))))) * _2574)) - ((exp2(_2417 * _2585) - exp2(_2417 * _2586)) * _2574))) + (_2410 * cbSceneParam._m0[80u].z);
        }
        vec4 _2616 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2328, _2329, 1.0), 0.0);
        float _2625 = exp2((_2614 * (-1.44269502162933349609375)) * (1.0 - _2616.w));
        float _2626 = log2(_2625);
        float _2642 = log2(_2348);
        _2419 = (exp2(_2642 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2626 * cbSceneParam._m0[78u].x)) * _2616.x) / cbSceneParam._m0[78u].x)) + _2345;
        _2421 = (exp2(_2642 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2626 * cbSceneParam._m0[78u].y)) * _2616.y) / cbSceneParam._m0[78u].y)) + _2346;
        _2423 = (exp2(_2642 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2626 * cbSceneParam._m0[78u].z)) * _2616.z) / cbSceneParam._m0[78u].z)) + _2347;
        _2425 = _2625 * _2348;
    }
    else
    {
        _2419 = _2345;
        _2421 = _2346;
        _2423 = _2347;
        _2425 = _2348;
    }
    bool _2438 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2440 = log2(_2425);
    float _2444 = exp2(_2440 * cbSceneParam._m0[78u].x);
    float _2445 = exp2(_2440 * cbSceneParam._m0[78u].y);
    float _2446 = exp2(_2440 * cbSceneParam._m0[78u].z);
    float _2447 = _2444 * (isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0)));
    float _2448 = _2445 * (isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0)));
    float _2449 = _2446 * (isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0)));
    vec4 _2457 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_319, _320));
    float _2459 = _2457.x;
    float _2480 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2459)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2459))) - _252) * 0.100000001490116119384765625;
    float _4105 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
    float _2482 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _2483 = _2482 * cbInstanceData._m0[_360 + 6u].w;
    float _2492 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2492 * (_2438 ? _2447 : (_2447 + (cbSceneParam._m0[72u].w * _2419)));
    SV_Target.y = _2492 * (_2438 ? _2448 : (_2448 + (cbSceneParam._m0[72u].w * _2421)));
    SV_Target.z = _2492 * (_2438 ? _2449 : (_2449 + (cbSceneParam._m0[72u].w * _2423)));
    SV_Target.w = _2483;
    SV_Target_1.x = ((((cbMtdParam._m0[2u].x * _2283) * _2319) * _2444) * _2482) * _2492;
    SV_Target_1.y = ((((cbMtdParam._m0[2u].y * _2284) * _2319) * _2445) * _2482) * _2492;
    SV_Target_1.z = ((((cbMtdParam._m0[2u].z * _2285) * _2319) * _2446) * _2482) * _2492;
    SV_Target_1.w = _2483;
}


