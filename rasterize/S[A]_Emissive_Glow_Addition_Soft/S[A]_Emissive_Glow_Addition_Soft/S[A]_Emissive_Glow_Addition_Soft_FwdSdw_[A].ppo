#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A_Emissive_Glow_Addition_Soft_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_A_Emissive_Glow_Addition_Soft_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _775;
float _3299;
float _3300;
float _3301;
float _3302;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _177 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _178 = _177 * NORMAL.x;
    float _179 = _177 * NORMAL.y;
    float _180 = _177 * NORMAL.z;
    float _185;
    float _186;
    float _187;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _185 = (-0.0) - _178;
        _186 = (-0.0) - _179;
        _187 = (-0.0) - _180;
    }
    else
    {
        _185 = _178;
        _186 = _179;
        _187 = _180;
    }
    vec4 _201 = texture(sampler2D(S_A_Emissive_Glow_Addition_Soft_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _204 = _201.x;
    float _205 = _201.y;
    float _206 = _201.z;
    vec4 _222 = texture(sampler2D(S_A_Emissive_Glow_Addition_Soft_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _233 = inversesqrt(dot(vec3(_185, _186, _187), vec3(_185, _186, _187)));
    float _234 = _233 * _185;
    float _235 = _233 * _186;
    float _236 = _233 * _187;
    float _3311 = isnan(0.0) ? _204 : (isnan(_204) ? 0.0 : max(_204, 0.0));
    float _3322 = isnan(0.0) ? _205 : (isnan(_205) ? 0.0 : max(_205, 0.0));
    float _3333 = isnan(0.0) ? _206 : (isnan(_206) ? 0.0 : max(_206, 0.0));
    float _256 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _298 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _308 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _298);
    float _309 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _298);
    float _310 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _298);
    float _314 = inversesqrt(dot(vec3(_308, _309, _310), vec3(_308, _309, _310)));
    float _315 = _308 * _314;
    float _316 = _309 * _314;
    float _317 = _310 * _314;
    vec4 _322 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _324 = _322.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _454 = sqrt(((_308 * _308) + (_309 * _309)) + (_310 * _310));
        float _460 = (cbMatDynParam._m0[5u].x * _454) + cbMatDynParam._m0[5u].y;
        float _3344 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
        float _461 = isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0));
        float _465 = (cbMatDynParam._m0[5u].z * _454) + cbMatDynParam._m0[5u].w;
        float _3355 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0))) - _461)) + _461) < ((_324 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _336 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _337 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _357 = fma(_236, cbSceneParam._m0[5u].z, fma(_235, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _234));
    float _360 = fma(_236, cbSceneParam._m0[6u].z, fma(_235, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _234));
    float _363 = fma(_236, cbSceneParam._m0[7u].z, fma(_235, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _234));
    uint _376 = uint(roundEven(NORMAL.w)) * 13u;
    uint _378 = _376 + 9u;
    uint _379 = _378 + uint(cbMatDynParam._m0[0u].w);
    float _385 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0)))) * cbInstanceData._m0[_379].x;
    float _386 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0)))) * cbInstanceData._m0[_379].y;
    float _387 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0)))) * cbInstanceData._m0[_379].z;
    float _3366 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _388 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
    float _3377 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _389 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
    float _3388 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _390 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
    vec4 _399 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _336, cbSceneParam._m0[86u].y * _337));
    float _402 = _399.x * TEXCOORD.z;
    float _403 = dot(vec3(_234, _235, _236), vec3(_315, _316, _317));
    float _406 = _403 * 2.0;
    float _411 = (_406 * _234) - _315;
    float _412 = (_406 * _235) - _316;
    float _413 = (_406 * _236) - _317;
    float _435 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _439 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _443 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _774;
    float _776;
    float _777;
    float _778;
    float _779;
    float _780;
    float _781;
    float _782;
    float _783;
    float _784;
    float _785;
    float _786;
    float _787;
    float _788;
    float _789;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _499 = fma(_443, cbModelParam._m0[26u].z, fma(_439, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _435));
        float _503 = fma(_443, cbModelParam._m0[27u].z, fma(_439, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _435));
        float _507 = fma(_443, cbModelParam._m0[28u].z, fma(_439, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _435));
        float _532 = _435 + _234;
        float _533 = _439 + _235;
        float _534 = _443 + _236;
        float _544 = fma(_534, cbModelParam._m0[26u].z, fma(_533, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _532)) - _499;
        float _545 = fma(_534, cbModelParam._m0[27u].z, fma(_533, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _532)) - _503;
        float _546 = fma(_534, cbModelParam._m0[28u].z, fma(_533, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _532)) - _507;
        float _550 = inversesqrt(dot(vec3(_544, _545, _546), vec3(_544, _545, _546)));
        float _563 = ((_550 * _544) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_499 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _564 = ((_550 * _545) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_503 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _565 = ((_550 * _546) / cbModelParam._m0[34u].z) + ((((((_507 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _568 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_563, _564, _565), 0.0);
        vec4 _575 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_563, _564, _565), 0.0);
        vec4 _582 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_563, _564, _565), 0.0);
        vec4 _589 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_563, _564, _565), 0.0);
        float _602 = exp2((_568.w + (-0.5)) * 20.0) * 2.0;
        float _603 = _602 * (_568.x + (-0.5));
        float _604 = _602 * (_568.y + (-0.5));
        float _605 = _602 * (_568.z + (-0.5));
        float _612 = exp2((_575.w + (-0.5)) * 20.0) * 2.0;
        float _613 = _612 * (_575.x + (-0.5));
        float _614 = _612 * (_575.y + (-0.5));
        float _615 = _612 * (_575.z + (-0.5));
        float _622 = exp2((_582.w + (-0.5)) * 20.0) * 2.0;
        float _623 = _622 * (_582.x + (-0.5));
        float _624 = _622 * (_582.y + (-0.5));
        float _625 = _622 * (_582.z + (-0.5));
        float _632 = exp2((_589.w + (-0.5)) * 20.0) * 2.0;
        float _633 = _632 * (_589.x + (-0.5));
        float _634 = _632 * (_589.y + (-0.5));
        float _635 = _632 * (_589.z + (-0.5));
        float _636 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
        float _637 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
        float _638 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
        float _639 = _603 * 0.5;
        float _640 = _613 * 0.5;
        float _641 = _623 * 0.5;
        float _642 = dot(vec3(_639, _640, _641), vec3(_639, _640, _641));
        float _647 = (_642 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_642);
        float _656 = (dot(vec3(_234, _235, _236), vec3(_647 * _639, _647 * _640, _647 * _641)) + 1.0) * 0.5;
        float _3414 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
        float _666 = sqrt(((_640 * _640) + (_639 * _639)) + (_641 * _641)) / (_636 + 9.9999997473787516355514526367188e-06);
        float _3425 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
        float _667 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
        float _668 = _667 * 2.0;
        float _672 = (1.0 - _667) / (_667 + 1.0);
        float _3436 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
        float _673 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
        float _682 = ((((1.0 - _673) * (_668 + 2.0)) * exp2(log2(isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0))) * (_668 + 1.0))) + _673) * _636;
        float _683 = _604 * 0.5;
        float _684 = _614 * 0.5;
        float _685 = _624 * 0.5;
        float _686 = dot(vec3(_683, _684, _685), vec3(_683, _684, _685));
        float _691 = (_686 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_686);
        float _699 = (dot(vec3(_234, _235, _236), vec3(_691 * _683, _691 * _684, _691 * _685)) + 1.0) * 0.5;
        float _3447 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
        float _708 = sqrt(((_684 * _684) + (_683 * _683)) + (_685 * _685)) / (_637 + 9.9999997473787516355514526367188e-06);
        float _3458 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _709 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _710 = _709 * 2.0;
        float _714 = (1.0 - _709) / (_709 + 1.0);
        float _3469 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _715 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
        float _724 = ((((1.0 - _715) * (_710 + 2.0)) * exp2(log2(isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0))) * (_710 + 1.0))) + _715) * _637;
        float _725 = _605 * 0.5;
        float _726 = _615 * 0.5;
        float _727 = _625 * 0.5;
        float _728 = dot(vec3(_725, _726, _727), vec3(_725, _726, _727));
        float _733 = (_728 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_728);
        float _741 = (dot(vec3(_234, _235, _236), vec3(_733 * _725, _733 * _726, _733 * _727)) + 1.0) * 0.5;
        float _3480 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _750 = sqrt(((_726 * _726) + (_725 * _725)) + (_727 * _727)) / (_638 + 9.9999997473787516355514526367188e-06);
        float _3491 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _751 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _752 = _751 * 2.0;
        float _756 = (1.0 - _751) / (_751 + 1.0);
        float _3502 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _757 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
        float _766 = ((((1.0 - _757) * (_752 + 2.0)) * exp2(log2(isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0))) * (_752 + 1.0))) + _757) * _638;
        _774 = _605;
        _776 = _604;
        _777 = _603;
        _778 = _615;
        _779 = _614;
        _780 = _613;
        _781 = _625;
        _782 = _624;
        _783 = _623;
        _784 = _638;
        _785 = _637;
        _786 = _636;
        _787 = cbModelParam._m0[36u].z * (isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0)));
        _788 = cbModelParam._m0[36u].z * (isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0)));
        _789 = cbModelParam._m0[36u].z * (isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0)));
    }
    else
    {
        _774 = _775;
        _776 = _775;
        _777 = _775;
        _778 = _775;
        _779 = _775;
        _780 = _775;
        _781 = _775;
        _782 = _775;
        _783 = _775;
        _784 = _775;
        _785 = _775;
        _786 = _775;
        _787 = 0.0;
        _788 = 0.0;
        _789 = 0.0;
    }
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _818 = fma(_443, cbModelParam._m0[30u].z, fma(_439, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _435));
        float _822 = fma(_443, cbModelParam._m0[31u].z, fma(_439, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _435));
        float _826 = fma(_443, cbModelParam._m0[32u].z, fma(_439, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _435));
        float _849 = _435 + _234;
        float _850 = _439 + _235;
        float _851 = _443 + _236;
        float _861 = fma(_851, cbModelParam._m0[30u].z, fma(_850, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _849)) - _818;
        float _862 = fma(_851, cbModelParam._m0[31u].z, fma(_850, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _849)) - _822;
        float _863 = fma(_851, cbModelParam._m0[32u].z, fma(_850, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _849)) - _826;
        float _867 = inversesqrt(dot(vec3(_861, _862, _863), vec3(_861, _862, _863)));
        float _880 = ((_867 * _861) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_818 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _881 = ((_867 * _862) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_822 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _882 = ((_867 * _863) / cbModelParam._m0[35u].z) + ((((((_826 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _884 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _891 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _898 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        float _917 = exp2((_884.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_884.x + (-0.5));
        float _919 = _917 * (_884.y + (-0.5));
        float _920 = _917 * (_884.z + (-0.5));
        float _927 = exp2((_891.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_891.x + (-0.5));
        float _929 = _927 * (_891.y + (-0.5));
        float _930 = _927 * (_891.z + (-0.5));
        float _937 = exp2((_898.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_898.x + (-0.5));
        float _939 = _937 * (_898.y + (-0.5));
        float _940 = _937 * (_898.z + (-0.5));
        float _947 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_905.x + (-0.5));
        float _949 = _947 * (_905.y + (-0.5));
        float _950 = _947 * (_905.z + (-0.5));
        float _951 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _952 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _953 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _954 = _918 * 0.5;
        float _955 = _928 * 0.5;
        float _956 = _938 * 0.5;
        float _957 = dot(vec3(_954, _955, _956), vec3(_954, _955, _956));
        float _962 = (_957 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_957);
        float _970 = (dot(vec3(_234, _235, _236), vec3(_962 * _954, _962 * _955, _962 * _956)) + 1.0) * 0.5;
        float _3543 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _979 = sqrt(((_955 * _955) + (_954 * _954)) + (_956 * _956)) / (_951 + 9.9999997473787516355514526367188e-06);
        float _3554 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _981 = _980 * 2.0;
        float _985 = (1.0 - _980) / (_980 + 1.0);
        float _3565 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _995 = ((((1.0 - _986) * (_981 + 2.0)) * exp2(log2(isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0))) * (_981 + 1.0))) + _986) * _951;
        float _996 = _919 * 0.5;
        float _997 = _929 * 0.5;
        float _998 = _939 * 0.5;
        float _999 = dot(vec3(_996, _997, _998), vec3(_996, _997, _998));
        float _1004 = (_999 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_999);
        float _1012 = (dot(vec3(_234, _235, _236), vec3(_1004 * _996, _1004 * _997, _1004 * _998)) + 1.0) * 0.5;
        float _3576 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1021 = sqrt(((_997 * _997) + (_996 * _996)) + (_998 * _998)) / (_952 + 9.9999997473787516355514526367188e-06);
        float _3587 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _1023 = _1022 * 2.0;
        float _1027 = (1.0 - _1022) / (_1022 + 1.0);
        float _3598 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _1037 = ((((1.0 - _1028) * (_1023 + 2.0)) * exp2(log2(isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) * (_1023 + 1.0))) + _1028) * _952;
        float _1038 = _920 * 0.5;
        float _1039 = _930 * 0.5;
        float _1040 = _940 * 0.5;
        float _1041 = dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040));
        float _1046 = (_1041 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1041);
        float _1054 = (dot(vec3(_234, _235, _236), vec3(_1046 * _1038, _1046 * _1039, _1046 * _1040)) + 1.0) * 0.5;
        float _3609 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1063 = sqrt(((_1039 * _1039) + (_1038 * _1038)) + (_1040 * _1040)) / (_953 + 9.9999997473787516355514526367188e-06);
        float _3620 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _1065 = _1064 * 2.0;
        float _1069 = (1.0 - _1064) / (_1064 + 1.0);
        float _3631 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _1079 = ((((1.0 - _1070) * (_1065 + 2.0)) * exp2(log2(isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) * (_1065 + 1.0))) + _1070) * _953;
        _1087 = _920;
        _1088 = _919;
        _1089 = _918;
        _1090 = _930;
        _1091 = _929;
        _1092 = _928;
        _1093 = _940;
        _1094 = _939;
        _1095 = _938;
        _1096 = _953;
        _1097 = _952;
        _1098 = _951;
        _1099 = cbModelParam._m0[36u].w * (isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0)));
        _1100 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0)));
        _1101 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)));
    }
    else
    {
        _1087 = _775;
        _1088 = _775;
        _1089 = _775;
        _1090 = _775;
        _1091 = _775;
        _1092 = _775;
        _1093 = _775;
        _1094 = _775;
        _1095 = _775;
        _1096 = _775;
        _1097 = _775;
        _1098 = _775;
        _1099 = 0.0;
        _1100 = 0.0;
        _1101 = 0.0;
    }
    float _1111 = (cbModelParam._m0[1u].x * (_1099 - _787)) + _787;
    float _1112 = (cbModelParam._m0[1u].x * (_1100 - _788)) + _788;
    float _1113 = (cbModelParam._m0[1u].x * (_1101 - _789)) + _789;
    float _1134 = fma(_1113, cbSceneParam._m0[89u].z, fma(_1112, cbSceneParam._m0[89u].y, _1111 * cbSceneParam._m0[89u].x));
    float _1137 = fma(_1113, cbSceneParam._m0[90u].z, fma(_1112, cbSceneParam._m0[90u].y, _1111 * cbSceneParam._m0[90u].x));
    float _1140 = fma(_1113, cbSceneParam._m0[91u].z, fma(_1112, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1111));
    float _1155 = _411 * 0.5;
    float _1156 = _412 * 0.5;
    float _1157 = _413 * 0.5;
    float _1158 = dot(vec4(_1155, _1156, _1157, 1.0), vec4(_1089, _1092, _1095, _1098));
    float _1161 = dot(vec4(_1155, _1156, _1157, 1.0), vec4(_1088, _1091, _1094, _1097));
    float _1164 = dot(vec4(_1155, _1156, _1157, 1.0), vec4(_1087, _1090, _1093, _1096));
    float _1198;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1171 = dot(vec4(_1155, _1156, _1157, 1.0), vec4(_774, _778, _781, _784));
        float _1175 = dot(vec4(_1155, _1156, _1157, 1.0), vec4(_776, _779, _782, _785));
        float _1179 = dot(vec4(_1155, _1156, _1157, 1.0), vec4(_777, _780, _783, _786));
        float _1186 = dot(vec4(cbModelParam._m0[39u]), vec4(_1155, _1156, _1157, 1.0));
        _1198 = dot(vec3(isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)), isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)), isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1186) ? 0.0 : (isnan(0.0) ? _1186 : max(0.0, _1186))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1198 = 1.0;
    }
    float _1209;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1200 = dot(vec4(cbModelParam._m0[40u]), vec4(_1155, _1156, _1157, 1.0));
        _1209 = dot(vec3(isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)), isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)), isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1200) ? 0.0 : (isnan(0.0) ? _1200 : max(0.0, _1200))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1209 = 1.0;
    }
    float _1213 = (_1209 * cbModelParam._m0[1u].x) + (_1198 * (1.0 - cbModelParam._m0[1u].x));
    float _1222 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1304;
    float _1306;
    float _1308;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1271 = fma(_443, cbModelParam._m0[13u].z, fma(_439, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _435)) + cbModelParam._m0[13u].w;
        float _1275 = fma(_443, cbModelParam._m0[14u].z, fma(_439, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _435)) + cbModelParam._m0[14u].w;
        float _1279 = fma(_443, cbModelParam._m0[15u].z, fma(_439, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _435)) + cbModelParam._m0[15u].w;
        float _1282 = fma(_413, cbModelParam._m0[13u].z, fma(_412, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _411));
        float _1285 = fma(_413, cbModelParam._m0[14u].z, fma(_412, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _411));
        float _1288 = fma(_413, cbModelParam._m0[15u].z, fma(_412, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _411));
        float _1314;
        if (_1282 > 0.0)
        {
            _1314 = abs((1.0 - _1271) / _1282);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1282 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1271 + 1.0) / _1282);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1314 = frontier_phi_19_17_ladder;
        }
        float _1489;
        if (_1285 > 0.0)
        {
            _1489 = abs((1.0 - _1275) / _1285);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1285 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1275 + 1.0) / _1285);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1489 = frontier_phi_28_24_ladder;
        }
        float _1786;
        if (_1288 > 0.0)
        {
            _1786 = abs((1.0 - _1279) / _1288);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1288 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1279 + 1.0) / _1288);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1786 = frontier_phi_40_35_ladder;
        }
        float _1788 = isnan(_1489) ? _1314 : (isnan(_1314) ? _1489 : min(_1314, _1489));
        float _1789 = isnan(_1786) ? _1788 : (isnan(_1788) ? _1786 : min(_1788, _1786));
        float _1793 = (_1789 * _1282) + _1271;
        float _1794 = (_1789 * _1285) + _1275;
        float _1795 = (_1789 * _1288) + _1279;
        float _1796 = _1789 * 9.9999997473787516355514526367188e-05;
        float _1798 = (-1.0) - _1796;
        float _1800 = _1796 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1795 > _1800) || ((_1795 < _1798) || ((_1794 > _1800) || ((_1794 < _1798) || ((_1793 < _1798) || (_1793 > _1800))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1940 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1795, cbModelParam._m0[9u].z, fma(_1794, cbModelParam._m0[9u].y, _1793 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1795, cbModelParam._m0[10u].z, fma(_1794, cbModelParam._m0[10u].y, _1793 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1795, cbModelParam._m0[11u].z, fma(_1794, cbModelParam._m0[11u].y, _1793 * cbModelParam._m0[11u].x))), _1222);
            frontier_phi_18_40_ladder = _1940.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1940.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1940.x * cbModelParam._m0[1u].y;
        }
        _1304 = frontier_phi_18_40_ladder_2;
        _1306 = frontier_phi_18_40_ladder_1;
        _1308 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1292 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_411, _412, _413), _1222);
        _1304 = _1292.x * cbModelParam._m0[1u].y;
        _1306 = _1292.y * cbModelParam._m0[1u].y;
        _1308 = _1292.z * cbModelParam._m0[1u].y;
    }
    float _1311 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1404;
    float _1406;
    float _1408;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1368 = fma(_443, cbModelParam._m0[21u].z, fma(_439, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _435)) + cbModelParam._m0[21u].w;
        float _1372 = fma(_443, cbModelParam._m0[22u].z, fma(_439, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _435)) + cbModelParam._m0[22u].w;
        float _1376 = fma(_443, cbModelParam._m0[23u].z, fma(_439, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _435)) + cbModelParam._m0[23u].w;
        float _1379 = fma(_413, cbModelParam._m0[21u].z, fma(_412, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _411));
        float _1382 = fma(_413, cbModelParam._m0[22u].z, fma(_412, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _411));
        float _1385 = fma(_413, cbModelParam._m0[23u].z, fma(_412, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _411));
        float _1494;
        if (_1379 > 0.0)
        {
            _1494 = abs((1.0 - _1368) / _1379);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1379 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1368 + 1.0) / _1379);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1494 = frontier_phi_30_26_ladder;
        }
        float _1813;
        if (_1382 > 0.0)
        {
            _1813 = abs((1.0 - _1372) / _1382);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1382 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1372 + 1.0) / _1382);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1813 = frontier_phi_42_37_ladder;
        }
        float _2086;
        if (_1385 > 0.0)
        {
            _2086 = abs((1.0 - _1376) / _1385);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1385 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1376 + 1.0) / _1385);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2086 = frontier_phi_52_49_ladder;
        }
        float _2088 = isnan(_1813) ? _1494 : (isnan(_1494) ? _1813 : min(_1494, _1813));
        float _2089 = isnan(_2086) ? _2088 : (isnan(_2088) ? _2086 : min(_2088, _2086));
        float _2093 = (_2089 * _1379) + _1368;
        float _2094 = (_2089 * _1382) + _1372;
        float _2095 = (_2089 * _1385) + _1376;
        float _2096 = _2089 * 9.9999997473787516355514526367188e-05;
        float _2097 = (-1.0) - _2096;
        float _2099 = _2096 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2095 > _2099) || ((_2095 < _2097) || ((_2094 > _2099) || ((_2094 < _2097) || ((_2093 < _2097) || (_2093 > _2099))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2186 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2095, cbModelParam._m0[17u].z, fma(_2094, cbModelParam._m0[17u].y, _2093 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2095, cbModelParam._m0[18u].z, fma(_2094, cbModelParam._m0[18u].y, _2093 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2095, cbModelParam._m0[19u].z, fma(_2094, cbModelParam._m0[19u].y, _2093 * cbModelParam._m0[19u].x))), _1311);
            frontier_phi_27_52_ladder = _2186.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2186.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2186.x * cbModelParam._m0[1u].z;
        }
        _1404 = frontier_phi_27_52_ladder_2;
        _1406 = frontier_phi_27_52_ladder_1;
        _1408 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1388 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_411, _412, _413), _1311);
        _1404 = _1388.x * cbModelParam._m0[1u].z;
        _1406 = _1388.y * cbModelParam._m0[1u].z;
        _1408 = _1388.z * cbModelParam._m0[1u].z;
    }
    float _1420 = _402 * 0.01200000010430812835693359375;
    float _1422 = _1420 * ((cbModelParam._m0[1u].w * (_1404 - _1304)) + _1304);
    float _1423 = _1420 * ((cbModelParam._m0[1u].w * (_1406 - _1306)) + _1306);
    float _1424 = _1420 * ((cbModelParam._m0[1u].w * (_1408 - _1308)) + _1308);
    float _1427 = fma(_1424, cbSceneParam._m0[89u].z, fma(_1423, cbSceneParam._m0[89u].y, _1422 * cbSceneParam._m0[89u].x));
    float _1430 = fma(_1424, cbSceneParam._m0[90u].z, fma(_1423, cbSceneParam._m0[90u].y, _1422 * cbSceneParam._m0[90u].x));
    float _1433 = fma(_1424, cbSceneParam._m0[91u].z, fma(_1423, cbSceneParam._m0[91u].y, _1422 * cbSceneParam._m0[91u].x));
    float _1468 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1472 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1476 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1480 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1481 = _1468 / _1480;
    float _1482 = _1472 / _1480;
    float _1483 = _1476 / _1480;
    float _1630;
    float _1631;
    float _1632;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1510 = ((uint(_1483 > cbSceneParam._m0[59u].y) + uint(_1483 > cbSceneParam._m0[59u].x)) + uint(_1483 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1511 = _1510 + 43u;
        uint _1519 = _1510 + 44u;
        uint _1527 = _1510 + 45u;
        uint _1535 = _1510 + 46u;
        float _1546 = fma(_1480, cbSceneParam._m0[_1511].w, fma(_1476, cbSceneParam._m0[_1511].z, fma(_1472, cbSceneParam._m0[_1511].y, _1468 * cbSceneParam._m0[_1511].x)));
        float _1550 = fma(_1480, cbSceneParam._m0[_1519].w, fma(_1476, cbSceneParam._m0[_1519].z, fma(_1472, cbSceneParam._m0[_1519].y, _1468 * cbSceneParam._m0[_1519].x)));
        float _1558 = fma(_1480, cbSceneParam._m0[_1535].w, fma(_1476, cbSceneParam._m0[_1535].z, fma(_1472, cbSceneParam._m0[_1535].y, _1468 * cbSceneParam._m0[_1535].x)));
        float _1563 = cbSceneParam._m0[33u].z * _1558;
        float _1565 = cbSceneParam._m0[33u].w * _1558;
        float _1568 = fma(_1480, cbSceneParam._m0[_1527].w, fma(_1476, cbSceneParam._m0[_1527].z, fma(_1472, cbSceneParam._m0[_1527].y, _1468 * cbSceneParam._m0[_1527].x))) / _1558;
        float _1616 = (cbSceneParam._m0[33u].x - sqrt(((_1482 * _1482) + (_1481 * _1481)) + (_1483 * _1483))) * cbSceneParam._m0[33u].y;
        float _3757 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1623 = (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1563 + _1546) / _1558, (_1565 + _1550) / _1558), _1568), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1565 + _1546) / _1558, (_1550 - _1563) / _1558), _1568), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1546 - _1563) / _1558, (_1550 - _1565) / _1558), _1568), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1546 - _1565) / _1558, (_1563 + _1550) / _1558), _1568), 0.0)).x), vec4(0.25)));
        _1630 = 1.0 - (_1623 * cbSceneParam._m0[34u].x);
        _1631 = 1.0 - (_1623 * cbSceneParam._m0[34u].y);
        _1632 = 1.0 - (_1623 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1630 = 1.0;
        _1631 = 1.0;
        _1632 = 1.0;
    }
    float _1696;
    float _1698;
    float _1700;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1684 = fma(_1480, cbSceneParam._m0[63u].w, fma(_1476, cbSceneParam._m0[63u].z, fma(_1472, cbSceneParam._m0[63u].y, _1468 * cbSceneParam._m0[63u].x)));
        float _1685 = fma(_1480, cbSceneParam._m0[60u].w, fma(_1476, cbSceneParam._m0[60u].z, fma(_1472, cbSceneParam._m0[60u].y, _1468 * cbSceneParam._m0[60u].x))) / _1684;
        float _1686 = fma(_1480, cbSceneParam._m0[61u].w, fma(_1476, cbSceneParam._m0[61u].z, fma(_1472, cbSceneParam._m0[61u].y, _1468 * cbSceneParam._m0[61u].x))) / _1684;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1685 >= cbSceneParam._m0[64u].x) && (_1686 >= cbSceneParam._m0[64u].y)) && (_1685 <= cbSceneParam._m0[64u].z)) && (_1686 <= cbSceneParam._m0[64u].w))
        {
            float _1826 = fma(_1480, cbSceneParam._m0[62u].w, fma(_1476, cbSceneParam._m0[62u].z, fma(_1472, cbSceneParam._m0[62u].y, _1468 * cbSceneParam._m0[62u].x))) / _1684;
            float _1830 = isnan(cbSceneParam._m0[41u].w) ? _1826 : (isnan(_1826) ? cbSceneParam._m0[41u].w : max(_1826, cbSceneParam._m0[41u].w));
            float _1873 = (cbSceneParam._m0[33u].x - sqrt(((_1482 * _1482) + (_1481 * _1481)) + (_1483 * _1483))) * cbSceneParam._m0[33u].y;
            float _3773 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
            float _1880 = (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1685, cbSceneParam._m0[33u].w + _1686), _1830), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1685, _1686 - cbSceneParam._m0[33u].z), _1830), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1685 - cbSceneParam._m0[33u].z, _1686 - cbSceneParam._m0[33u].w), _1830), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1685 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1686), _1830), 0.0)).x), vec4(0.25)));
            float _1884 = 1.0 - (_1880 * cbSceneParam._m0[34u].x);
            float _1885 = 1.0 - (_1880 * cbSceneParam._m0[34u].y);
            float _1886 = 1.0 - (_1880 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_1885) ? _1631 : (isnan(_1631) ? _1885 : min(_1631, _1885));
            frontier_phi_39_38_ladder_1 = isnan(_1884) ? _1630 : (isnan(_1630) ? _1884 : min(_1630, _1884));
            frontier_phi_39_38_ladder_2 = isnan(_1886) ? _1632 : (isnan(_1632) ? _1886 : min(_1632, _1886));
        }
        else
        {
            frontier_phi_39_38_ladder = _1631;
            frontier_phi_39_38_ladder_1 = _1630;
            frontier_phi_39_38_ladder_2 = _1632;
        }
        _1696 = frontier_phi_39_38_ladder_1;
        _1698 = frontier_phi_39_38_ladder;
        _1700 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1696 = _1630;
        _1698 = _1631;
        _1700 = _1632;
    }
    uvec4 _1705 = floatBitsToUint(cbInstanceData._m0[_376 + 5u]);
    uint _1707 = _1705.x * 14u;
    uint _1708 = _1707 + 13u;
    float _1715 = _402 + (-1.0);
    float _1721 = (cbLight._m0[_1708].x * _1715) + 1.0;
    float _1722 = (cbLight._m0[_1708].y * _1715) + 1.0;
    float _1723 = (cbLight._m0[_1708].z * _1715) + 1.0;
    float _1724 = (cbLight._m0[_1708].w * _1715) + 1.0;
    uint _1725 = _1707 + 5u;
    float _1731 = isnan(1.0) ? _1722 : (isnan(_1722) ? 1.0 : min(_1722, 1.0));
    uint _1735 = _1707 + 4u;
    float _1745 = isnan(1.0) ? _1721 : (isnan(_1721) ? 1.0 : min(_1721, 1.0));
    uint _1749 = _1707 | 1u;
    float _1760 = dot(vec3(cbLight._m0[_1707].xyz), vec3(_234, _235, _236));
    float _1763 = dot(vec3(cbLight._m0[_1749].xyz), vec3(_234, _235, _236));
    float _3809 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _3820 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _1768 = (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * 0.3183098733425140380859375;
    float _1770 = (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * 0.3183098733425140380859375;
    float _1777 = ((cbLight._m0[_1725].x * _1731) * _1770) + (((cbLight._m0[_1735].x * _1696) * _1745) * _1768);
    float _1778 = ((_1731 * cbLight._m0[_1725].y) * _1770) + (((cbLight._m0[_1735].y * _1698) * _1745) * _1768);
    float _1779 = ((_1731 * cbLight._m0[_1725].z) * _1770) + (((cbLight._m0[_1735].z * _1700) * _1745) * _1768);
    uvec4 _1783 = floatBitsToUint(cbLight._m0[_1707 + 12u]);
    bool _1785 = _1783.x == 0u;
    float _1887;
    float _1889;
    float _1891;
    if (_1785)
    {
        _1887 = _1777;
        _1889 = _1778;
        _1891 = _1779;
    }
    else
    {
        uint _1895 = _1707 + 6u;
        float _1911 = (dot(vec3(cbLight._m0[_1707 + 2u].xyz), vec3(_234, _235, _236)) * 0.5) + 0.5;
        float _1912 = _1911 * _1911;
        float _3831 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
        float _1913 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1914 = isnan(1.0) ? _1723 : (isnan(_1723) ? 1.0 : min(_1723, 1.0));
        _1887 = (((cbLight._m0[_1895].x * 0.3183098733425140380859375) * _1913) * _1914) + _1777;
        _1889 = (((cbLight._m0[_1895].y * 0.3183098733425140380859375) * _1913) * _1914) + _1778;
        _1891 = (((cbLight._m0[_1895].z * 0.3183098733425140380859375) * _1913) * _1914) + _1779;
    }
    bool _1894 = _1783.y == 0u;
    float _1949;
    float _1951;
    float _1953;
    if (_1894)
    {
        _1949 = _1887;
        _1951 = _1889;
        _1953 = _1891;
    }
    else
    {
        uint _2057 = _1707 + 7u;
        float _2073 = (dot(vec3(cbLight._m0[_1707 + 3u].xyz), vec3(_234, _235, _236)) * 0.5) + 0.5;
        float _2074 = _2073 * _2073;
        float _3847 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2075 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _2076 = isnan(1.0) ? _1724 : (isnan(_1724) ? 1.0 : min(_1724, 1.0));
        _1949 = (((cbLight._m0[_2057].x * 0.3183098733425140380859375) * _2075) * _2076) + _1887;
        _1951 = (((cbLight._m0[_2057].y * 0.3183098733425140380859375) * _2075) * _2076) + _1889;
        _1953 = (((cbLight._m0[_2057].z * 0.3183098733425140380859375) * _2075) * _2076) + _1891;
    }
    uint _1955 = _1707 + 8u;
    float _1961 = cbLight._m0[_1707].x + _315;
    float _1962 = cbLight._m0[_1707].y + _316;
    float _1963 = cbLight._m0[_1707].z + _317;
    float _1967 = inversesqrt(dot(vec3(_1961, _1962, _1963), vec3(_1961, _1962, _1963)));
    float _1971 = dot(vec3(_234, _235, _236), vec3(cbLight._m0[_1707].xyz));
    float _3863 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1974 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _3874 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _1975 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _1976 = dot(vec3(cbLight._m0[_1707].xyz), vec3(_1961 * _1967, _1962 * _1967, _1963 * _1967));
    float _3885 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1987 = (exp2(log2(1.0 - (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1993 = (0.5 / ((_1974 + 9.9999999392252902907785028219223e-09) + _1975)) * _1974;
    float _3896 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1995 = (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * 0.31831014156341552734375;
    uint _2009 = _1707 + 9u;
    float _2015 = cbLight._m0[_1749].x + _315;
    float _2016 = cbLight._m0[_1749].y + _316;
    float _2017 = cbLight._m0[_1749].z + _317;
    float _2021 = inversesqrt(dot(vec3(_2015, _2016, _2017), vec3(_2015, _2016, _2017)));
    float _2025 = dot(vec3(_234, _235, _236), vec3(cbLight._m0[_1749].xyz));
    float _3907 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2028 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _2029 = dot(vec3(cbLight._m0[_1749].xyz), vec3(_2015 * _2021, _2016 * _2021, _2017 * _2021));
    float _3918 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2038 = (exp2(log2(1.0 - (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2042 = (0.5 / ((_2028 + 9.9999999392252902907785028219223e-09) + _1975)) * _2028;
    float _3929 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2044 = (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * 0.31831014156341552734375;
    float _2054 = (((_2038 * cbLight._m0[_2009].x) * _2044) * _1731) + ((((cbLight._m0[_1955].x * _1696) * _1987) * _1995) * _1745);
    float _2055 = (((_2038 * cbLight._m0[_2009].y) * _2044) * _1731) + ((((cbLight._m0[_1955].y * _1698) * _1987) * _1995) * _1745);
    float _2056 = (((_2038 * cbLight._m0[_2009].z) * _2044) * _1731) + ((((cbLight._m0[_1955].z * _1700) * _1987) * _1995) * _1745);
    float _2112;
    float _2114;
    float _2116;
    if (_1785)
    {
        _2112 = _2054;
        _2114 = _2055;
        _2116 = _2056;
    }
    else
    {
        uint _2118 = _1707 + 10u;
        uint _2124 = _1707 + 2u;
        float _2130 = cbLight._m0[_2124].x + _315;
        float _2131 = cbLight._m0[_2124].y + _316;
        float _2132 = cbLight._m0[_2124].z + _317;
        float _2136 = inversesqrt(dot(vec3(_2130, _2131, _2132), vec3(_2130, _2131, _2132)));
        float _2140 = dot(vec3(_234, _235, _236), vec3(cbLight._m0[_2124].xyz));
        float _3940 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
        float _2143 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _2144 = dot(vec3(cbLight._m0[_2124].xyz), vec3(_2130 * _2136, _2131 * _2136, _2132 * _2136));
        float _3951 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2153 = (exp2(log2(1.0 - (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2157 = (0.5 / ((_2143 + 9.9999999392252902907785028219223e-09) + _1975)) * _2143;
        float _3962 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        float _2159 = (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * 0.31831014156341552734375;
        float _2160 = isnan(1.0) ? _1723 : (isnan(_1723) ? 1.0 : min(_1723, 1.0));
        _2112 = (((_2153 * cbLight._m0[_2118].x) * _2159) * _2160) + _2054;
        _2114 = (((_2153 * cbLight._m0[_2118].y) * _2159) * _2160) + _2055;
        _2116 = (((_2153 * cbLight._m0[_2118].z) * _2159) * _2160) + _2056;
    }
    float _2191;
    float _2193;
    float _2195;
    if (_1894)
    {
        _2191 = _2112;
        _2193 = _2114;
        _2195 = _2116;
    }
    else
    {
        uint _2202 = _1707 + 11u;
        uint _2208 = _1707 + 3u;
        float _2214 = cbLight._m0[_2208].x + _315;
        float _2215 = cbLight._m0[_2208].y + _316;
        float _2216 = cbLight._m0[_2208].z + _317;
        float _2220 = inversesqrt(dot(vec3(_2214, _2215, _2216), vec3(_2214, _2215, _2216)));
        float _2224 = dot(vec3(_234, _235, _236), vec3(cbLight._m0[_2208].xyz));
        float _3978 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2227 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _2228 = dot(vec3(cbLight._m0[_2208].xyz), vec3(_2214 * _2220, _2215 * _2220, _2216 * _2220));
        float _3989 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2237 = (exp2(log2(1.0 - (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2241 = (0.5 / ((_2227 + 9.9999999392252902907785028219223e-09) + _1975)) * _2227;
        float _4000 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2243 = (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * 0.31831014156341552734375;
        float _2244 = isnan(1.0) ? _1724 : (isnan(_1724) ? 1.0 : min(_1724, 1.0));
        _2191 = (((_2237 * cbLight._m0[_2202].x) * _2243) * _2244) + _2112;
        _2193 = (((_2237 * cbLight._m0[_2202].y) * _2243) * _2244) + _2114;
        _2195 = (((_2237 * cbLight._m0[_2202].z) * _2243) * _2244) + _2116;
    }
    float _2309;
    float _2311;
    float _2313;
    float _2315;
    float _2317;
    float _2319;
    if (_1705.y == 0u)
    {
        uvec4 _2265 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2266 = _2265.x;
        uint _2277 = uint((float(_2265.y) * floor(float(uint(cbSceneParam._m0[85u].y * _337) / _2266))) + floor(float(uint(cbSceneParam._m0[85u].x * _336) / _2266)));
        float _2287 = (log2(_1483 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2288 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        uint _2291 = uint(isnan(14.0) ? _2288 : (isnan(_2288) ? 14.0 : min(_2288, 14.0)));
        uvec4 _2296 = texelFetch(g_lightClusterGridBuffer, int(((_2291 << 2u) + (_2277 << 6u)) >> 2u));
        uint _2297 = _2296.x;
        uint _2298 = _2265.z;
        float _2405;
        float _2407;
        float _2409;
        float _2411;
        float _2413;
        float _2415;
        if (((((1u << ((_2298 >> 4u) & 15u)) + 4294967295u) & _2297) == 0u) || ((_2298 & 240u) == 0u))
        {
            _2405 = 0.0;
            _2407 = 0.0;
            _2409 = 0.0;
            _2411 = 0.0;
            _2413 = 0.0;
            _2415 = 0.0;
        }
        else
        {
            float _2406;
            float _2408;
            float _2410;
            float _2412;
            float _2414;
            float _2416;
            float _2602 = 0.0;
            float _2603 = 0.0;
            float _2604 = 0.0;
            float _2605 = 0.0;
            float _2606 = 0.0;
            float _2607 = 0.0;
            uint _2608 = 0u;
            uint _2617;
            bool _2618;
            for (;;)
            {
                _2617 = texelFetch(g_lightClassification, int((((_2291 << 5u) + (_2277 << 9u)) + (_2608 << 2u)) >> 2u)).x;
                _2618 = _2617 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2618)
                {
                    frontier_phi_73_pred = _2607;
                    frontier_phi_73_pred_1 = _2606;
                    frontier_phi_73_pred_2 = _2605;
                    frontier_phi_73_pred_3 = _2604;
                    frontier_phi_73_pred_4 = _2603;
                    frontier_phi_73_pred_5 = _2602;
                }
                else
                {
                    float _2747;
                    float _2748;
                    float _2749;
                    float _2750;
                    float _2751;
                    float _2752;
                    uint _2753;
                    _2747 = _2602;
                    _2748 = _2603;
                    _2749 = _2604;
                    _2750 = _2605;
                    _2751 = _2606;
                    _2752 = _2607;
                    _2753 = _2617;
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    float _2679;
                    for (;;)
                    {
                        uint _2757 = uint(findLSB(_2753)) + (_2608 << 5u);
                        uint _2754 = (_2753 + 4294967295u) & _2753;
                        uint _2759 = _2757 * 48u;
                        vec4 _2773 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2759)).x, texelFetch(g_PointLightRenderingBuffer, int(_2759 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2759 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2759 + 3u)).x));
                        uint _2779 = (_2757 * 48u) + 4u;
                        vec4 _2792 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2779)).x, texelFetch(g_PointLightRenderingBuffer, int(_2779 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2779 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2779 + 3u)).x));
                        uint _2798 = (_2757 * 48u) + 8u;
                        vec3 _2809 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2798)).x, texelFetch(g_PointLightRenderingBuffer, int(_2798 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2798 + 2u)).x));
                        float _2813 = _2773.x - _1481;
                        float _2814 = _2773.y - _1482;
                        float _2815 = _2773.z - _1483;
                        float _2816 = dot(vec3(_2813, _2814, _2815), vec3(_2813, _2814, _2815));
                        float _2819 = inversesqrt(_2816);
                        float _2828 = 1.0 - (_2816 * _2773.w);
                        float _4026 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
                        float _2829 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
                        float _2830 = sqrt(_2816) * _2792.w;
                        float _2833 = 1.39999997615814208984375 / (_2830 + 1.39999997615814208984375);
                        float _2834 = _2833 * _2833;
                        float _2837 = ((1.0 - _2834) * dot(vec3(_357, _360, _363), vec3(_2819 * _2813, _2819 * _2814, _2819 * _2815))) + _2834;
                        float _2840 = _2830 * _2830;
                        float _2844 = ((isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0))) * _2829) / ((_2840 * 0.699999988079071044921875) + 1.0);
                        float _2848 = (-0.0) - _1481;
                        float _2849 = (-0.0) - _1482;
                        float _2850 = (-0.0) - _1483;
                        float _2854 = inversesqrt(dot(vec3(_2848, _2849, _2850), vec3(_2848, _2849, _2850)));
                        float _2858 = dot(vec3(_357, _360, _363), vec3(_2854 * _2848, _2854 * _2849, _2854 * _2850));
                        float _4042 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
                        float _4053 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
                        float _2862 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
                        float _2866 = (0.5 / (((isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) + 9.9999999392252902907785028219223e-09) + _2862)) * _2862;
                        float _4064 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
                        float _2875 = (((isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * 3.1415927410125732421875) / ((_2840 * 2.1991131305694580078125) + 3.141590118408203125)) * _2829;
                        _2677 = (_2844 * _2792.x) + _2750;
                        _2678 = (_2844 * _2792.y) + _2751;
                        _2679 = (_2844 * _2792.z) + _2752;
                        _2674 = (_2875 * _2809.x) + _2747;
                        _2675 = (_2875 * _2809.y) + _2748;
                        _2676 = (_2875 * _2809.z) + _2749;
                        if (_2754 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2747 = _2674;
                            _2748 = _2675;
                            _2749 = _2676;
                            _2750 = _2677;
                            _2751 = _2678;
                            _2752 = _2679;
                            _2753 = _2754;
                        }
                    }
                    frontier_phi_73_pred = _2679;
                    frontier_phi_73_pred_1 = _2678;
                    frontier_phi_73_pred_2 = _2677;
                    frontier_phi_73_pred_3 = _2676;
                    frontier_phi_73_pred_4 = _2675;
                    frontier_phi_73_pred_5 = _2674;
                }
                _2416 = frontier_phi_73_pred;
                _2414 = frontier_phi_73_pred_1;
                _2412 = frontier_phi_73_pred_2;
                _2410 = frontier_phi_73_pred_3;
                _2408 = frontier_phi_73_pred_4;
                _2406 = frontier_phi_73_pred_5;
                uint _2609 = _2608 + 1u;
                if (_2609 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2602 = _2406;
                    _2603 = _2408;
                    _2604 = _2410;
                    _2605 = _2412;
                    _2606 = _2414;
                    _2607 = _2416;
                    _2608 = _2609;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2405 = _2406;
            _2407 = _2408;
            _2409 = _2410;
            _2411 = _2412;
            _2413 = _2414;
            _2415 = _2416;
        }
        uvec4 _2419 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2420 = _2419.z;
        uint _2422 = (_2420 >> 8u) & 15u;
        float _2573;
        float _2575;
        float _2577;
        float _2579;
        float _2581;
        float _2583;
        if (((4294967295u << _2422) & _2297) == 0u)
        {
            _2573 = _2405;
            _2575 = _2407;
            _2577 = _2409;
            _2579 = _2411;
            _2581 = _2413;
            _2583 = _2415;
        }
        else
        {
            float _2598 = inversesqrt(dot(vec3(_1481, _1482, _1483), vec3(_1481, _1482, _1483)));
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2422 < ((_2420 >> 12u) & 15u))
            {
                float _2574;
                float _2576;
                float _2578;
                float _2580;
                float _2582;
                float _2584;
                float _2730 = _2405;
                float _2731 = _2407;
                float _2732 = _2409;
                float _2733 = _2411;
                float _2734 = _2413;
                float _2735 = _2415;
                uint _2736 = _2422;
                uint _2745;
                bool _2746;
                for (;;)
                {
                    _2745 = texelFetch(g_lightClassification, int((((_2291 << 5u) + (_2277 << 9u)) + (_2736 << 2u)) >> 2u)).x;
                    _2746 = _2745 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2746)
                    {
                        frontier_phi_84_pred = _2734;
                        frontier_phi_84_pred_1 = _2733;
                        frontier_phi_84_pred_2 = _2732;
                        frontier_phi_84_pred_3 = _2731;
                        frontier_phi_84_pred_4 = _2730;
                        frontier_phi_84_pred_5 = _2735;
                    }
                    else
                    {
                        float _2889;
                        float _2890;
                        float _2891;
                        float _2892;
                        float _2893;
                        float _2894;
                        float _3141;
                        float _3142;
                        float _3143;
                        float _3144;
                        float _3145;
                        float _3146;
                        float _2902 = _2730;
                        float _2903 = _2731;
                        float _2904 = _2732;
                        float _2905 = _2733;
                        float _2906 = _2734;
                        float _2907 = _2735;
                        uint _2908 = _2745;
                        uint _2909;
                        vec4 _2934;
                        float _2935;
                        vec4 _2950;
                        vec3 _2962;
                        vec4 _2978;
                        vec4 _2994;
                        float _3041;
                        bool _3042;
                        for (;;)
                        {
                            uint _2919 = ((_2736 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2908));
                            _2909 = (_2908 + 4294967295u) & _2908;
                            uint _2921 = _2919 * 40u;
                            _2934 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 3u)).x));
                            _2935 = _2934.w;
                            uint _2937 = (_2919 * 40u) + 4u;
                            _2950 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2937)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 3u)).x));
                            uint _2952 = (_2919 * 40u) + 8u;
                            _2962 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2952)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 2u)).x));
                            uint _2965 = (_2919 * 40u) + 16u;
                            _2978 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 3u)).x));
                            uint _2981 = (_2919 * 40u) + 20u;
                            _2994 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2981)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 3u)).x));
                            uint _2997 = (_2919 * 40u) + 24u;
                            vec4 _3010 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2997)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 3u)).x));
                            uint _3016 = (_2919 * 40u) + 28u;
                            vec4 _3029 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3016)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 3u)).x));
                            _3041 = fma(_1483, _3029.z, fma(_1482, _3029.y, _3029.x * _1481)) + _3029.w;
                            _3042 = !((fma(_1483, _3010.z, fma(_1482, _3010.y, _3010.x * _1481)) + _3010.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3042)
                            {
                                float _3069 = _2934.x - _1481;
                                float _3070 = _2934.y - _1482;
                                float _3071 = _2934.z - _1483;
                                float _3072 = dot(vec3(_3069, _3070, _3071), vec3(_3069, _3070, _3071));
                                float _3075 = inversesqrt(_3072);
                                float _3076 = _3075 * _3069;
                                float _3077 = _3075 * _3070;
                                float _3078 = _3075 * _3071;
                                float _3082 = 1.0 - (_3072 / (_2935 * _2935));
                                float _4075 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                                float _3083 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
                                float _3087 = sqrt(_3072) * _2950.w;
                                float _3089 = 1.39999997615814208984375 / (_3087 + 1.39999997615814208984375);
                                float _3090 = _3089 * _3089;
                                float _3091 = 1.0 - _3090;
                                float _3093 = (_3091 * dot(vec3(_3076, _3077, _3078), vec3(_357, _360, _363))) + _3090;
                                float _3096 = _3087 * _3087;
                                float _3100 = (fma(_1483, _2978.z, fma(_1482, _2978.y, _2978.x * _1481)) + _2978.w) / _3041;
                                float _3101 = (fma(_1483, _2994.z, fma(_1482, _2994.y, _2994.x * _1481)) + _2994.w) / _3041;
                                float _3105 = 1.0 - dot(vec2(_3100, _3101), vec2(_3100, _3101));
                                float _4091 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                                float _3106 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
                                float _3107 = _3106 * (((isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0))) * _3083) / ((_3096 * 0.699999988079071044921875) + 1.0));
                                float _3117 = dot(vec3(_357, _360, _363), vec3((-0.0) - (_1481 * _2598), (-0.0) - (_1482 * _2598), (-0.0) - (_1483 * _2598)));
                                float _4102 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                                float _3125 = (_3091 * dot(vec3(_357, _360, _363), vec3(_3076, _3077, _3078))) + _3090;
                                float _4113 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                                float _3126 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
                                float _3130 = (0.5 / (((isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) + 9.9999999392252902907785028219223e-09) + _3126)) * _3126;
                                float _4124 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                                float _3137 = (_3106 * _3083) * (((isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * 3.1415927410125732421875) / ((_3096 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_90_pred = _3107 * _2950.y;
                                frontier_phi_90_pred_1 = _3107 * _2950.x;
                                frontier_phi_90_pred_2 = _3137 * _2962.z;
                                frontier_phi_90_pred_3 = _3137 * _2962.y;
                                frontier_phi_90_pred_4 = _3137 * _2962.x;
                                frontier_phi_90_pred_5 = _3107 * _2950.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3145 = frontier_phi_90_pred;
                            _3144 = frontier_phi_90_pred_1;
                            _3143 = frontier_phi_90_pred_2;
                            _3142 = frontier_phi_90_pred_3;
                            _3141 = frontier_phi_90_pred_4;
                            _3146 = frontier_phi_90_pred_5;
                            _2892 = _3144 + _2905;
                            _2893 = _3145 + _2906;
                            _2894 = _3146 + _2907;
                            _2889 = _3141 + _2902;
                            _2890 = _3142 + _2903;
                            _2891 = _3143 + _2904;
                            if (_2909 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2902 = _2889;
                                _2903 = _2890;
                                _2904 = _2891;
                                _2905 = _2892;
                                _2906 = _2893;
                                _2907 = _2894;
                                _2908 = _2909;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _2893;
                        frontier_phi_84_pred_1 = _2892;
                        frontier_phi_84_pred_2 = _2891;
                        frontier_phi_84_pred_3 = _2890;
                        frontier_phi_84_pred_4 = _2889;
                        frontier_phi_84_pred_5 = _2894;
                    }
                    _2582 = frontier_phi_84_pred;
                    _2580 = frontier_phi_84_pred_1;
                    _2578 = frontier_phi_84_pred_2;
                    _2576 = frontier_phi_84_pred_3;
                    _2574 = frontier_phi_84_pred_4;
                    _2584 = frontier_phi_84_pred_5;
                    uint _2737 = _2736 + 1u;
                    if (_2737 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2730 = _2574;
                        _2731 = _2576;
                        _2732 = _2578;
                        _2733 = _2580;
                        _2734 = _2582;
                        _2735 = _2584;
                        _2736 = _2737;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2584;
                frontier_phi_65_66_ladder_1 = _2580;
                frontier_phi_65_66_ladder_2 = _2582;
                frontier_phi_65_66_ladder_3 = _2576;
                frontier_phi_65_66_ladder_4 = _2574;
                frontier_phi_65_66_ladder_5 = _2578;
            }
            else
            {
                frontier_phi_65_66_ladder = _2415;
                frontier_phi_65_66_ladder_1 = _2411;
                frontier_phi_65_66_ladder_2 = _2413;
                frontier_phi_65_66_ladder_3 = _2407;
                frontier_phi_65_66_ladder_4 = _2405;
                frontier_phi_65_66_ladder_5 = _2409;
            }
            _2573 = frontier_phi_65_66_ladder_4;
            _2575 = frontier_phi_65_66_ladder_3;
            _2577 = frontier_phi_65_66_ladder_5;
            _2579 = frontier_phi_65_66_ladder_1;
            _2581 = frontier_phi_65_66_ladder_2;
            _2583 = frontier_phi_65_66_ladder;
        }
        float _2588 = isnan(1.0) ? _402 : (isnan(_402) ? 1.0 : min(_402, 1.0));
        _2309 = (_2588 * _2579) + _1949;
        _2311 = (_2588 * _2581) + _1951;
        _2313 = (_2588 * _2583) + _1953;
        _2315 = ((_2573 * 0.039999999105930328369140625) * _2588) + _2191;
        _2317 = ((_2575 * 0.039999999105930328369140625) * _2588) + _2193;
        _2319 = ((_2577 * 0.039999999105930328369140625) * _2588) + _2195;
    }
    else
    {
        _2309 = _1949;
        _2311 = _1951;
        _2313 = _1953;
        _2315 = _2191;
        _2317 = _2193;
        _2319 = _2195;
    }
    uint _2325 = _378 + uint(cbMatDynParam._m0[0u].w);
    float _2331 = (_222.x * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2325].x;
    float _2332 = (_222.y * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2325].y;
    float _2333 = (_222.z * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2325].z;
    float _4140 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _4151 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _4162 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _2350 = (((isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_2309 + ((isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0))) * _402))) + ((_2315 + ((isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))) * _1213)) * cbPerFrame._m0[3u].x)) + _2331;
    float _2352 = (_2332 + ((_2317 + ((isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0))) * _1213)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_2311 + ((isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0))) * _402)));
    float _2354 = (_2333 + ((_2319 + ((isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))) * _1213)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_2313 + ((isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0))) * _402)));
    float _2355 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2356 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2357 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2363 = cbMtdParam._m0[2u].x * _2331;
    float _2364 = cbMtdParam._m0[2u].y * _2332;
    float _2365 = cbMtdParam._m0[2u].z * _2333;
    float _4188 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2367 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    uint _2368 = _376 + 6u;
    float _2376 = _336 / cbSceneParam._m0[86u].x;
    float _2377 = _337 / cbSceneParam._m0[86u].y;
    vec4 _2391 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2376, _2377, (log2((isnan(cbSceneParam._m0[77u].w) ? _256 : (isnan(_256) ? cbSceneParam._m0[77u].w : min(_256, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2393 = _2391.x;
    float _2394 = _2391.y;
    float _2395 = _2391.z;
    float _2396 = _2391.w;
    float _2467;
    float _2469;
    float _2471;
    float _2473;
    if (_256 > cbSceneParam._m0[78u].w)
    {
        float _2430 = isnan(_256) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _256 : min(cbSceneParam._m0[80u].w, _256));
        float _2431 = _2430 / _256;
        float _2442 = _2431 * _308;
        float _2443 = _309 * _2431;
        float _2444 = (-0.0) - _2443;
        float _2445 = _2431 * _310;
        float _2447 = (cbSceneParam._m0[77u].w * _2444) / _2430;
        float _2448 = _2447 + cbSceneParam._m0[79u].w;
        float _2449 = cbSceneParam._m0[79u].w - _2443;
        float _2455 = sqrt(((_2442 * _2442) + (_2443 * _2443)) + (_2445 * _2445));
        float _2458 = (1.0 - (cbSceneParam._m0[77u].w / _2430)) * _2455;
        float _2463 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2465 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2687;
        if (abs((_2444 - _2447) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2687 = ((((_2448 > 0.0) ? exp2(_2463 * _2448) : (2.0 - exp2(_2465 * _2448))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2458;
        }
        else
        {
            float _2631 = 1.0 / cbSceneParam._m0[80u].x;
            float _2632 = isnan(_2449) ? _2448 : (isnan(_2448) ? _2449 : max(_2448, _2449));
            float _2633 = isnan(_2449) ? _2448 : (isnan(_2448) ? _2449 : min(_2448, _2449));
            float _2642 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : min(_2632, 0.0));
            float _2643 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : min(_2633, 0.0));
            _2687 = ((abs(_2455 / _2444) * cbSceneParam._m0[80u].y) * ((((_2642 - _2643) * 2.0) - ((exp2(_2463 * (isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0)))) - exp2(_2463 * (isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0))))) * _2631)) - ((exp2(_2465 * _2642) - exp2(_2465 * _2643)) * _2631))) + (_2458 * cbSceneParam._m0[80u].z);
        }
        vec4 _2689 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2376, _2377, 1.0), 0.0);
        float _2698 = exp2((_2687 * (-1.44269502162933349609375)) * (1.0 - _2689.w));
        float _2699 = log2(_2698);
        float _2715 = log2(_2396);
        _2467 = (exp2(_2715 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2699 * cbSceneParam._m0[78u].x)) * _2689.x) / cbSceneParam._m0[78u].x)) + _2393;
        _2469 = (exp2(_2715 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2699 * cbSceneParam._m0[78u].y)) * _2689.y) / cbSceneParam._m0[78u].y)) + _2394;
        _2471 = (exp2(_2715 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2699 * cbSceneParam._m0[78u].z)) * _2689.z) / cbSceneParam._m0[78u].z)) + _2395;
        _2473 = _2698 * _2396;
    }
    else
    {
        _2467 = _2393;
        _2469 = _2394;
        _2471 = _2395;
        _2473 = _2396;
    }
    bool _2725;
    float _2531;
    vec4 _2534;
    float _2536;
    vec4 _2538;
    float _2546;
    float _2547;
    float _2548;
    float _2552;
    float _2556;
    float _2560;
    float _2561;
    bool _2572;
    for (;;)
    {
        bool _2486 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2488 = log2(_2473);
        float _2492 = exp2(_2488 * cbSceneParam._m0[78u].x);
        float _2493 = exp2(_2488 * cbSceneParam._m0[78u].y);
        float _2494 = exp2(_2488 * cbSceneParam._m0[78u].z);
        float _2495 = _2492 * _2355;
        float _2496 = _2493 * _2356;
        float _2497 = _2494 * _2357;
        vec4 _2505 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_336, _337));
        float _2507 = _2505.x;
        float _2528 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2507)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2507))) - _256) * 0.100000001490116119384765625;
        float _4239 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2530 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        _2531 = _2530 * cbInstanceData._m0[_2368].w;
        float _2532 = _324 + (-0.5);
        _2534 = cbMtdParam._m0[1u];
        _2536 = _2534.y * _2532;
        _2538 = cbMatDynParam._m0[0u];
        float _2545 = (roundEven(_2538.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2546 = _2545 * (_2486 ? _2495 : (_2495 + (cbSceneParam._m0[72u].w * _2467)));
        _2547 = _2545 * (_2486 ? _2496 : (_2496 + (cbSceneParam._m0[72u].w * _2469)));
        _2548 = _2545 * (_2486 ? _2497 : (_2497 + (cbSceneParam._m0[72u].w * _2471)));
        _2552 = (((_2363 * _2367) * _2492) * _2530) * _2545;
        _2556 = (((_2364 * _2367) * _2493) * _2530) * _2545;
        _2560 = (((_2365 * _2367) * _2494) * _2530) * _2545;
        _2561 = _2532 * 0.999000012874603271484375;
        _2572 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2572)
        {
            if ((cbInstanceData._m0[_376 + 7u].x + _2561) < 0.5)
            {
                _2725 = true;
                break;
            }
        }
        uint _2666 = _378 + uint(_2538.w);
        if ((cbInstanceData._m0[_2666].w < 1.0) && ((cbInstanceData._m0[_2666].w + _2561) < 0.5))
        {
            _2725 = true;
            break;
        }
        if ((_2536 + 1.0) < _2534.x)
        {
            _2725 = true;
            break;
        }
        _2725 = false;
        break;
    }
    float _2880;
    if (_2725)
    {
        discard_state = true;
        _2880 = 0.0;
    }
    else
    {
        _2880 = _2531;
    }
    SV_Target.x = _2546;
    SV_Target.y = _2547;
    SV_Target.z = _2548;
    SV_Target.w = _2880;
    SV_Target_1.x = _2552;
    SV_Target_1.y = _2556;
    SV_Target_1.z = _2560;
    SV_Target_1.w = _2531;
    discard_exit();
}


