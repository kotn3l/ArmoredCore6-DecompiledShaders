#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A_Emissive_Glow_Addition_Soft_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_A_Emissive_Glow_Addition_Soft_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _726;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _169 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _170 = _169 * NORMAL.x;
    float _171 = _169 * NORMAL.y;
    float _172 = _169 * NORMAL.z;
    float _177;
    float _178;
    float _179;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _177 = (-0.0) - _170;
        _178 = (-0.0) - _171;
        _179 = (-0.0) - _172;
    }
    else
    {
        _177 = _170;
        _178 = _171;
        _179 = _172;
    }
    vec4 _193 = texture(sampler2D(S_A_Emissive_Glow_Addition_Soft_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _196 = _193.x;
    float _197 = _193.y;
    float _198 = _193.z;
    vec4 _214 = texture(sampler2D(S_A_Emissive_Glow_Addition_Soft_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _225 = inversesqrt(dot(vec3(_177, _178, _179), vec3(_177, _178, _179)));
    float _226 = _225 * _177;
    float _227 = _225 * _178;
    float _228 = _225 * _179;
    float _2911 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _2922 = isnan(0.0) ? _197 : (isnan(_197) ? 0.0 : max(_197, 0.0));
    float _2933 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _248 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _290 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _300 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _290);
    float _301 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _290);
    float _302 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _290);
    float _306 = inversesqrt(dot(vec3(_300, _301, _302), vec3(_300, _301, _302)));
    float _307 = _300 * _306;
    float _308 = _301 * _306;
    float _309 = _302 * _306;
    float _315 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _316 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _337 = fma(_228, cbSceneParam._m0[5u].z, fma(_227, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _226));
    float _340 = fma(_228, cbSceneParam._m0[6u].z, fma(_227, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _226));
    float _343 = fma(_228, cbSceneParam._m0[7u].z, fma(_227, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _226));
    uint _356 = uint(roundEven(NORMAL.w)) * 13u;
    uint _358 = _356 + 9u;
    uint _359 = _358 + uint(cbMatDynParam._m0[0u].w);
    float _365 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2911 : (isnan(_2911) ? 1.0 : min(_2911, 1.0)))) * cbInstanceData._m0[_359].x;
    float _366 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2922 : (isnan(_2922) ? 1.0 : min(_2922, 1.0)))) * cbInstanceData._m0[_359].y;
    float _367 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2933 : (isnan(_2933) ? 1.0 : min(_2933, 1.0)))) * cbInstanceData._m0[_359].z;
    float _2944 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _368 = isnan(1.0) ? _2944 : (isnan(_2944) ? 1.0 : min(_2944, 1.0));
    float _2955 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _369 = isnan(1.0) ? _2955 : (isnan(_2955) ? 1.0 : min(_2955, 1.0));
    float _2966 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _370 = isnan(1.0) ? _2966 : (isnan(_2966) ? 1.0 : min(_2966, 1.0));
    vec4 _379 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _315, cbSceneParam._m0[86u].y * _316));
    float _382 = _379.x * TEXCOORD.z;
    float _383 = dot(vec3(_226, _227, _228), vec3(_307, _308, _309));
    float _386 = _383 * 2.0;
    float _391 = (_386 * _226) - _307;
    float _392 = (_386 * _227) - _308;
    float _393 = (_386 * _228) - _309;
    float _415 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _419 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _423 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _725;
    float _727;
    float _728;
    float _729;
    float _730;
    float _731;
    float _732;
    float _733;
    float _734;
    float _735;
    float _736;
    float _737;
    float _738;
    float _739;
    float _740;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _450 = fma(_423, cbModelParam._m0[26u].z, fma(_419, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _415));
        float _454 = fma(_423, cbModelParam._m0[27u].z, fma(_419, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _415));
        float _458 = fma(_423, cbModelParam._m0[28u].z, fma(_419, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _415));
        float _483 = _415 + _226;
        float _484 = _419 + _227;
        float _485 = _423 + _228;
        float _495 = fma(_485, cbModelParam._m0[26u].z, fma(_484, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _483)) - _450;
        float _496 = fma(_485, cbModelParam._m0[27u].z, fma(_484, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _483)) - _454;
        float _497 = fma(_485, cbModelParam._m0[28u].z, fma(_484, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _483)) - _458;
        float _501 = inversesqrt(dot(vec3(_495, _496, _497), vec3(_495, _496, _497)));
        float _514 = ((_501 * _495) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_450 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _515 = ((_501 * _496) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_454 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _516 = ((_501 * _497) / cbModelParam._m0[34u].z) + ((((((_458 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _519 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_514, _515, _516), 0.0);
        vec4 _526 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_514, _515, _516), 0.0);
        vec4 _533 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_514, _515, _516), 0.0);
        vec4 _540 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_514, _515, _516), 0.0);
        float _553 = exp2((_519.w + (-0.5)) * 20.0) * 2.0;
        float _554 = _553 * (_519.x + (-0.5));
        float _555 = _553 * (_519.y + (-0.5));
        float _556 = _553 * (_519.z + (-0.5));
        float _563 = exp2((_526.w + (-0.5)) * 20.0) * 2.0;
        float _564 = _563 * (_526.x + (-0.5));
        float _565 = _563 * (_526.y + (-0.5));
        float _566 = _563 * (_526.z + (-0.5));
        float _573 = exp2((_533.w + (-0.5)) * 20.0) * 2.0;
        float _574 = _573 * (_533.x + (-0.5));
        float _575 = _573 * (_533.y + (-0.5));
        float _576 = _573 * (_533.z + (-0.5));
        float _583 = exp2((_540.w + (-0.5)) * 20.0) * 2.0;
        float _584 = _583 * (_540.x + (-0.5));
        float _585 = _583 * (_540.y + (-0.5));
        float _586 = _583 * (_540.z + (-0.5));
        float _587 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
        float _588 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
        float _589 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
        float _590 = _554 * 0.5;
        float _591 = _564 * 0.5;
        float _592 = _574 * 0.5;
        float _593 = dot(vec3(_590, _591, _592), vec3(_590, _591, _592));
        float _598 = (_593 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_593);
        float _607 = (dot(vec3(_226, _227, _228), vec3(_598 * _590, _598 * _591, _598 * _592)) + 1.0) * 0.5;
        float _2992 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
        float _617 = sqrt(((_591 * _591) + (_590 * _590)) + (_592 * _592)) / (_587 + 9.9999997473787516355514526367188e-06);
        float _3003 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
        float _618 = isnan(1.0) ? _3003 : (isnan(_3003) ? 1.0 : min(_3003, 1.0));
        float _619 = _618 * 2.0;
        float _623 = (1.0 - _618) / (_618 + 1.0);
        float _3014 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
        float _624 = isnan(1.0) ? _3014 : (isnan(_3014) ? 1.0 : min(_3014, 1.0));
        float _633 = ((((1.0 - _624) * (_619 + 2.0)) * exp2(log2(isnan(1.0) ? _2992 : (isnan(_2992) ? 1.0 : min(_2992, 1.0))) * (_619 + 1.0))) + _624) * _587;
        float _634 = _555 * 0.5;
        float _635 = _565 * 0.5;
        float _636 = _575 * 0.5;
        float _637 = dot(vec3(_634, _635, _636), vec3(_634, _635, _636));
        float _642 = (_637 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_637);
        float _650 = (dot(vec3(_226, _227, _228), vec3(_642 * _634, _642 * _635, _642 * _636)) + 1.0) * 0.5;
        float _3025 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
        float _659 = sqrt(((_635 * _635) + (_634 * _634)) + (_636 * _636)) / (_588 + 9.9999997473787516355514526367188e-06);
        float _3036 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        float _660 = isnan(1.0) ? _3036 : (isnan(_3036) ? 1.0 : min(_3036, 1.0));
        float _661 = _660 * 2.0;
        float _665 = (1.0 - _660) / (_660 + 1.0);
        float _3047 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
        float _666 = isnan(1.0) ? _3047 : (isnan(_3047) ? 1.0 : min(_3047, 1.0));
        float _675 = ((((1.0 - _666) * (_661 + 2.0)) * exp2(log2(isnan(1.0) ? _3025 : (isnan(_3025) ? 1.0 : min(_3025, 1.0))) * (_661 + 1.0))) + _666) * _588;
        float _676 = _556 * 0.5;
        float _677 = _566 * 0.5;
        float _678 = _576 * 0.5;
        float _679 = dot(vec3(_676, _677, _678), vec3(_676, _677, _678));
        float _684 = (_679 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_679);
        float _692 = (dot(vec3(_226, _227, _228), vec3(_684 * _676, _684 * _677, _684 * _678)) + 1.0) * 0.5;
        float _3058 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _701 = sqrt(((_677 * _677) + (_676 * _676)) + (_678 * _678)) / (_589 + 9.9999997473787516355514526367188e-06);
        float _3069 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _702 = isnan(1.0) ? _3069 : (isnan(_3069) ? 1.0 : min(_3069, 1.0));
        float _703 = _702 * 2.0;
        float _707 = (1.0 - _702) / (_702 + 1.0);
        float _3080 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _708 = isnan(1.0) ? _3080 : (isnan(_3080) ? 1.0 : min(_3080, 1.0));
        float _717 = ((((1.0 - _708) * (_703 + 2.0)) * exp2(log2(isnan(1.0) ? _3058 : (isnan(_3058) ? 1.0 : min(_3058, 1.0))) * (_703 + 1.0))) + _708) * _589;
        _725 = _556;
        _727 = _555;
        _728 = _554;
        _729 = _566;
        _730 = _565;
        _731 = _564;
        _732 = _576;
        _733 = _575;
        _734 = _574;
        _735 = _589;
        _736 = _588;
        _737 = _587;
        _738 = cbModelParam._m0[36u].z * (isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0)));
        _739 = cbModelParam._m0[36u].z * (isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0)));
        _740 = cbModelParam._m0[36u].z * (isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0)));
    }
    else
    {
        _725 = _726;
        _727 = _726;
        _728 = _726;
        _729 = _726;
        _730 = _726;
        _731 = _726;
        _732 = _726;
        _733 = _726;
        _734 = _726;
        _735 = _726;
        _736 = _726;
        _737 = _726;
        _738 = 0.0;
        _739 = 0.0;
        _740 = 0.0;
    }
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _766 = fma(_423, cbModelParam._m0[30u].z, fma(_419, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _415));
        float _770 = fma(_423, cbModelParam._m0[31u].z, fma(_419, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _415));
        float _774 = fma(_423, cbModelParam._m0[32u].z, fma(_419, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _415));
        float _797 = _415 + _226;
        float _798 = _419 + _227;
        float _799 = _423 + _228;
        float _809 = fma(_799, cbModelParam._m0[30u].z, fma(_798, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _797)) - _766;
        float _810 = fma(_799, cbModelParam._m0[31u].z, fma(_798, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _797)) - _770;
        float _811 = fma(_799, cbModelParam._m0[32u].z, fma(_798, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _797)) - _774;
        float _815 = inversesqrt(dot(vec3(_809, _810, _811), vec3(_809, _810, _811)));
        float _828 = ((_815 * _809) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_766 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _829 = ((_815 * _810) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_770 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _830 = ((_815 * _811) / cbModelParam._m0[35u].z) + ((((((_774 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _832 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        vec4 _839 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        vec4 _846 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        vec4 _853 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        float _865 = exp2((_832.w + (-0.5)) * 20.0) * 2.0;
        float _866 = _865 * (_832.x + (-0.5));
        float _867 = _865 * (_832.y + (-0.5));
        float _868 = _865 * (_832.z + (-0.5));
        float _875 = exp2((_839.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_839.x + (-0.5));
        float _877 = _875 * (_839.y + (-0.5));
        float _878 = _875 * (_839.z + (-0.5));
        float _885 = exp2((_846.w + (-0.5)) * 20.0) * 2.0;
        float _886 = _885 * (_846.x + (-0.5));
        float _887 = _885 * (_846.y + (-0.5));
        float _888 = _885 * (_846.z + (-0.5));
        float _895 = exp2((_853.w + (-0.5)) * 20.0) * 2.0;
        float _896 = _895 * (_853.x + (-0.5));
        float _897 = _895 * (_853.y + (-0.5));
        float _898 = _895 * (_853.z + (-0.5));
        float _899 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _900 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _901 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _902 = _866 * 0.5;
        float _903 = _876 * 0.5;
        float _904 = _886 * 0.5;
        float _905 = dot(vec3(_902, _903, _904), vec3(_902, _903, _904));
        float _910 = (_905 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_905);
        float _918 = (dot(vec3(_226, _227, _228), vec3(_910 * _902, _910 * _903, _910 * _904)) + 1.0) * 0.5;
        float _3121 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _927 = sqrt(((_903 * _903) + (_902 * _902)) + (_904 * _904)) / (_899 + 9.9999997473787516355514526367188e-06);
        float _3132 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3132 : (isnan(_3132) ? 1.0 : min(_3132, 1.0));
        float _929 = _928 * 2.0;
        float _933 = (1.0 - _928) / (_928 + 1.0);
        float _3143 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3143 : (isnan(_3143) ? 1.0 : min(_3143, 1.0));
        float _943 = ((((1.0 - _934) * (_929 + 2.0)) * exp2(log2(isnan(1.0) ? _3121 : (isnan(_3121) ? 1.0 : min(_3121, 1.0))) * (_929 + 1.0))) + _934) * _899;
        float _944 = _867 * 0.5;
        float _945 = _877 * 0.5;
        float _946 = _887 * 0.5;
        float _947 = dot(vec3(_944, _945, _946), vec3(_944, _945, _946));
        float _952 = (_947 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_947);
        float _960 = (dot(vec3(_226, _227, _228), vec3(_952 * _944, _952 * _945, _952 * _946)) + 1.0) * 0.5;
        float _3154 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _969 = sqrt(((_945 * _945) + (_944 * _944)) + (_946 * _946)) / (_900 + 9.9999997473787516355514526367188e-06);
        float _3165 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3165 : (isnan(_3165) ? 1.0 : min(_3165, 1.0));
        float _971 = _970 * 2.0;
        float _975 = (1.0 - _970) / (_970 + 1.0);
        float _3176 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3176 : (isnan(_3176) ? 1.0 : min(_3176, 1.0));
        float _985 = ((((1.0 - _976) * (_971 + 2.0)) * exp2(log2(isnan(1.0) ? _3154 : (isnan(_3154) ? 1.0 : min(_3154, 1.0))) * (_971 + 1.0))) + _976) * _900;
        float _986 = _868 * 0.5;
        float _987 = _878 * 0.5;
        float _988 = _888 * 0.5;
        float _989 = dot(vec3(_986, _987, _988), vec3(_986, _987, _988));
        float _994 = (_989 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_989);
        float _1002 = (dot(vec3(_226, _227, _228), vec3(_994 * _986, _994 * _987, _994 * _988)) + 1.0) * 0.5;
        float _3187 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1011 = sqrt(((_987 * _987) + (_986 * _986)) + (_988 * _988)) / (_901 + 9.9999997473787516355514526367188e-06);
        float _3198 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0));
        float _1013 = _1012 * 2.0;
        float _1017 = (1.0 - _1012) / (_1012 + 1.0);
        float _3209 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0));
        float _1027 = ((((1.0 - _1018) * (_1013 + 2.0)) * exp2(log2(isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0))) * (_1013 + 1.0))) + _1018) * _901;
        _1035 = _868;
        _1036 = _867;
        _1037 = _866;
        _1038 = _878;
        _1039 = _877;
        _1040 = _876;
        _1041 = _888;
        _1042 = _887;
        _1043 = _886;
        _1044 = _901;
        _1045 = _900;
        _1046 = _899;
        _1047 = cbModelParam._m0[36u].w * (isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0)));
        _1048 = cbModelParam._m0[36u].w * (isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0)));
        _1049 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0)));
    }
    else
    {
        _1035 = _726;
        _1036 = _726;
        _1037 = _726;
        _1038 = _726;
        _1039 = _726;
        _1040 = _726;
        _1041 = _726;
        _1042 = _726;
        _1043 = _726;
        _1044 = _726;
        _1045 = _726;
        _1046 = _726;
        _1047 = 0.0;
        _1048 = 0.0;
        _1049 = 0.0;
    }
    float _1059 = (cbModelParam._m0[1u].x * (_1047 - _738)) + _738;
    float _1060 = (cbModelParam._m0[1u].x * (_1048 - _739)) + _739;
    float _1061 = (cbModelParam._m0[1u].x * (_1049 - _740)) + _740;
    float _1082 = fma(_1061, cbSceneParam._m0[89u].z, fma(_1060, cbSceneParam._m0[89u].y, _1059 * cbSceneParam._m0[89u].x));
    float _1085 = fma(_1061, cbSceneParam._m0[90u].z, fma(_1060, cbSceneParam._m0[90u].y, _1059 * cbSceneParam._m0[90u].x));
    float _1088 = fma(_1061, cbSceneParam._m0[91u].z, fma(_1060, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1059));
    float _1103 = _391 * 0.5;
    float _1104 = _392 * 0.5;
    float _1105 = _393 * 0.5;
    float _1106 = dot(vec4(_1103, _1104, _1105, 1.0), vec4(_1037, _1040, _1043, _1046));
    float _1109 = dot(vec4(_1103, _1104, _1105, 1.0), vec4(_1036, _1039, _1042, _1045));
    float _1112 = dot(vec4(_1103, _1104, _1105, 1.0), vec4(_1035, _1038, _1041, _1044));
    float _1146;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1119 = dot(vec4(_1103, _1104, _1105, 1.0), vec4(_725, _729, _732, _735));
        float _1123 = dot(vec4(_1103, _1104, _1105, 1.0), vec4(_727, _730, _733, _736));
        float _1127 = dot(vec4(_1103, _1104, _1105, 1.0), vec4(_728, _731, _734, _737));
        float _1134 = dot(vec4(cbModelParam._m0[39u]), vec4(_1103, _1104, _1105, 1.0));
        _1146 = dot(vec3(isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)), isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)), isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1134) ? 0.0 : (isnan(0.0) ? _1134 : max(0.0, _1134))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1146 = 1.0;
    }
    float _1157;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1148 = dot(vec4(cbModelParam._m0[40u]), vec4(_1103, _1104, _1105, 1.0));
        _1157 = dot(vec3(isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)), isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)), isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1148) ? 0.0 : (isnan(0.0) ? _1148 : max(0.0, _1148))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1157 = 1.0;
    }
    float _1161 = (_1157 * cbModelParam._m0[1u].x) + (_1146 * (1.0 - cbModelParam._m0[1u].x));
    float _1170 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1252;
    float _1254;
    float _1256;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1219 = fma(_423, cbModelParam._m0[13u].z, fma(_419, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _415)) + cbModelParam._m0[13u].w;
        float _1223 = fma(_423, cbModelParam._m0[14u].z, fma(_419, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _415)) + cbModelParam._m0[14u].w;
        float _1227 = fma(_423, cbModelParam._m0[15u].z, fma(_419, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _415)) + cbModelParam._m0[15u].w;
        float _1230 = fma(_393, cbModelParam._m0[13u].z, fma(_392, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _391));
        float _1233 = fma(_393, cbModelParam._m0[14u].z, fma(_392, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _391));
        float _1236 = fma(_393, cbModelParam._m0[15u].z, fma(_392, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _391));
        float _1262;
        if (_1230 > 0.0)
        {
            _1262 = abs((1.0 - _1219) / _1230);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1230 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1219 + 1.0) / _1230);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1262 = frontier_phi_16_14_ladder;
        }
        float _1470;
        if (_1233 > 0.0)
        {
            _1470 = abs((1.0 - _1223) / _1233);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1233 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1223 + 1.0) / _1233);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1470 = frontier_phi_25_21_ladder;
        }
        float _1659;
        if (_1236 > 0.0)
        {
            _1659 = abs((1.0 - _1227) / _1236);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1236 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1227 + 1.0) / _1236);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1659 = frontier_phi_37_32_ladder;
        }
        float _1661 = isnan(_1470) ? _1262 : (isnan(_1262) ? _1470 : min(_1262, _1470));
        float _1662 = isnan(_1659) ? _1661 : (isnan(_1661) ? _1659 : min(_1661, _1659));
        float _1666 = (_1662 * _1230) + _1219;
        float _1667 = (_1662 * _1233) + _1223;
        float _1668 = (_1662 * _1236) + _1227;
        float _1669 = _1662 * 9.9999997473787516355514526367188e-05;
        float _1671 = (-1.0) - _1669;
        float _1673 = _1669 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1668 > _1673) || ((_1668 < _1671) || ((_1667 > _1673) || ((_1667 < _1671) || ((_1666 < _1671) || (_1666 > _1673))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1765 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1668, cbModelParam._m0[9u].z, fma(_1667, cbModelParam._m0[9u].y, _1666 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1668, cbModelParam._m0[10u].z, fma(_1667, cbModelParam._m0[10u].y, _1666 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1668, cbModelParam._m0[11u].z, fma(_1667, cbModelParam._m0[11u].y, _1666 * cbModelParam._m0[11u].x))), _1170);
            frontier_phi_15_37_ladder = _1765.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1765.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1765.x * cbModelParam._m0[1u].y;
        }
        _1252 = frontier_phi_15_37_ladder_2;
        _1254 = frontier_phi_15_37_ladder_1;
        _1256 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1240 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_391, _392, _393), _1170);
        _1252 = _1240.x * cbModelParam._m0[1u].y;
        _1254 = _1240.y * cbModelParam._m0[1u].y;
        _1256 = _1240.z * cbModelParam._m0[1u].y;
    }
    float _1259 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1352;
    float _1354;
    float _1356;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1316 = fma(_423, cbModelParam._m0[21u].z, fma(_419, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _415)) + cbModelParam._m0[21u].w;
        float _1320 = fma(_423, cbModelParam._m0[22u].z, fma(_419, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _415)) + cbModelParam._m0[22u].w;
        float _1324 = fma(_423, cbModelParam._m0[23u].z, fma(_419, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _415)) + cbModelParam._m0[23u].w;
        float _1327 = fma(_393, cbModelParam._m0[21u].z, fma(_392, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _391));
        float _1330 = fma(_393, cbModelParam._m0[22u].z, fma(_392, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _391));
        float _1333 = fma(_393, cbModelParam._m0[23u].z, fma(_392, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _391));
        float _1475;
        if (_1327 > 0.0)
        {
            _1475 = abs((1.0 - _1316) / _1327);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1327 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1316 + 1.0) / _1327);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1475 = frontier_phi_27_23_ladder;
        }
        float _1686;
        if (_1330 > 0.0)
        {
            _1686 = abs((1.0 - _1320) / _1330);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1330 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1320 + 1.0) / _1330);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1686 = frontier_phi_39_34_ladder;
        }
        float _1837;
        if (_1333 > 0.0)
        {
            _1837 = abs((1.0 - _1324) / _1333);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1333 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1324 + 1.0) / _1333);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _1837 = frontier_phi_48_45_ladder;
        }
        float _1839 = isnan(_1686) ? _1475 : (isnan(_1475) ? _1686 : min(_1475, _1686));
        float _1840 = isnan(_1837) ? _1839 : (isnan(_1839) ? _1837 : min(_1839, _1837));
        float _1844 = (_1840 * _1327) + _1316;
        float _1845 = (_1840 * _1330) + _1320;
        float _1846 = (_1840 * _1333) + _1324;
        float _1847 = _1840 * 9.9999997473787516355514526367188e-05;
        float _1848 = (-1.0) - _1847;
        float _1850 = _1847 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1846 > _1850) || ((_1846 < _1848) || ((_1845 > _1850) || ((_1845 < _1848) || ((_1844 < _1848) || (_1844 > _1850))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2073 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1846, cbModelParam._m0[17u].z, fma(_1845, cbModelParam._m0[17u].y, _1844 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1846, cbModelParam._m0[18u].z, fma(_1845, cbModelParam._m0[18u].y, _1844 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1846, cbModelParam._m0[19u].z, fma(_1845, cbModelParam._m0[19u].y, _1844 * cbModelParam._m0[19u].x))), _1259);
            frontier_phi_24_48_ladder = _2073.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2073.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2073.x * cbModelParam._m0[1u].z;
        }
        _1352 = frontier_phi_24_48_ladder_2;
        _1354 = frontier_phi_24_48_ladder_1;
        _1356 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1336 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_391, _392, _393), _1259);
        _1352 = _1336.x * cbModelParam._m0[1u].z;
        _1354 = _1336.y * cbModelParam._m0[1u].z;
        _1356 = _1336.z * cbModelParam._m0[1u].z;
    }
    float _1368 = _382 * 0.01200000010430812835693359375;
    float _1370 = _1368 * ((cbModelParam._m0[1u].w * (_1352 - _1252)) + _1252);
    float _1371 = _1368 * ((cbModelParam._m0[1u].w * (_1354 - _1254)) + _1254);
    float _1372 = _1368 * ((cbModelParam._m0[1u].w * (_1356 - _1256)) + _1256);
    float _1375 = fma(_1372, cbSceneParam._m0[89u].z, fma(_1371, cbSceneParam._m0[89u].y, _1370 * cbSceneParam._m0[89u].x));
    float _1378 = fma(_1372, cbSceneParam._m0[90u].z, fma(_1371, cbSceneParam._m0[90u].y, _1370 * cbSceneParam._m0[90u].x));
    float _1381 = fma(_1372, cbSceneParam._m0[91u].z, fma(_1371, cbSceneParam._m0[91u].y, _1370 * cbSceneParam._m0[91u].x));
    uvec4 _1391 = floatBitsToUint(cbInstanceData._m0[_356 + 5u]);
    uint _1393 = _1391.x * 14u;
    uint _1394 = _1393 + 13u;
    float _1401 = _382 + (-1.0);
    float _1407 = (cbLight._m0[_1394].x * _1401) + 1.0;
    float _1408 = (cbLight._m0[_1394].y * _1401) + 1.0;
    float _1409 = (cbLight._m0[_1394].z * _1401) + 1.0;
    float _1410 = (cbLight._m0[_1394].w * _1401) + 1.0;
    uint _1411 = _1393 + 5u;
    float _1417 = isnan(1.0) ? _1408 : (isnan(_1408) ? 1.0 : min(_1408, 1.0));
    uint _1421 = _1393 + 4u;
    float _1428 = isnan(1.0) ? _1407 : (isnan(_1407) ? 1.0 : min(_1407, 1.0));
    uint _1432 = _1393 | 1u;
    float _1443 = dot(vec3(cbLight._m0[_1393].xyz), vec3(_226, _227, _228));
    float _1446 = dot(vec3(cbLight._m0[_1432].xyz), vec3(_226, _227, _228));
    float _3345 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
    float _3356 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
    float _1451 = (isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0))) * 0.3183098733425140380859375;
    float _1453 = (isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0))) * 0.3183098733425140380859375;
    float _1460 = ((cbLight._m0[_1411].x * _1417) * _1453) + ((cbLight._m0[_1421].x * _1428) * _1451);
    float _1461 = ((_1417 * cbLight._m0[_1411].y) * _1453) + ((_1428 * cbLight._m0[_1421].y) * _1451);
    float _1462 = ((_1417 * cbLight._m0[_1411].z) * _1453) + ((_1428 * cbLight._m0[_1421].z) * _1451);
    uvec4 _1467 = floatBitsToUint(cbLight._m0[_1393 + 12u]);
    bool _1469 = _1467.x == 0u;
    float _1480;
    float _1482;
    float _1484;
    if (_1469)
    {
        _1480 = _1460;
        _1482 = _1461;
        _1484 = _1462;
    }
    else
    {
        uint _1488 = _1393 + 6u;
        float _1504 = (dot(vec3(cbLight._m0[_1393 + 2u].xyz), vec3(_226, _227, _228)) * 0.5) + 0.5;
        float _1505 = _1504 * _1504;
        float _3367 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
        float _1507 = isnan(1.0) ? _1409 : (isnan(_1409) ? 1.0 : min(_1409, 1.0));
        _1480 = (((cbLight._m0[_1488].x * 0.3183098733425140380859375) * _1506) * _1507) + _1460;
        _1482 = (((cbLight._m0[_1488].y * 0.3183098733425140380859375) * _1506) * _1507) + _1461;
        _1484 = (((cbLight._m0[_1488].z * 0.3183098733425140380859375) * _1506) * _1507) + _1462;
    }
    bool _1487 = _1467.y == 0u;
    float _1525;
    float _1527;
    float _1529;
    if (_1487)
    {
        _1525 = _1480;
        _1527 = _1482;
        _1529 = _1484;
    }
    else
    {
        uint _1630 = _1393 + 7u;
        float _1646 = (dot(vec3(cbLight._m0[_1393 + 3u].xyz), vec3(_226, _227, _228)) * 0.5) + 0.5;
        float _1647 = _1646 * _1646;
        float _3383 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
        float _1649 = isnan(1.0) ? _1410 : (isnan(_1410) ? 1.0 : min(_1410, 1.0));
        _1525 = (((cbLight._m0[_1630].x * 0.3183098733425140380859375) * _1648) * _1649) + _1480;
        _1527 = (((cbLight._m0[_1630].y * 0.3183098733425140380859375) * _1648) * _1649) + _1482;
        _1529 = (((cbLight._m0[_1630].z * 0.3183098733425140380859375) * _1648) * _1649) + _1484;
    }
    uint _1531 = _1393 + 8u;
    float _1537 = cbLight._m0[_1393].x + _307;
    float _1538 = cbLight._m0[_1393].y + _308;
    float _1539 = cbLight._m0[_1393].z + _309;
    float _1543 = inversesqrt(dot(vec3(_1537, _1538, _1539), vec3(_1537, _1538, _1539)));
    float _1547 = dot(vec3(_226, _227, _228), vec3(cbLight._m0[_1393].xyz));
    float _3399 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
    float _1550 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
    float _3410 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _1551 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
    float _1552 = dot(vec3(cbLight._m0[_1393].xyz), vec3(_1537 * _1543, _1538 * _1543, _1539 * _1543));
    float _3421 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
    float _1563 = (exp2(log2(1.0 - (isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1569 = (0.5 / ((_1550 + 9.9999999392252902907785028219223e-09) + _1551)) * _1550;
    float _3432 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
    float _1571 = (isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0))) * 0.31831014156341552734375;
    uint _1582 = _1393 + 9u;
    float _1588 = cbLight._m0[_1432].x + _307;
    float _1589 = cbLight._m0[_1432].y + _308;
    float _1590 = cbLight._m0[_1432].z + _309;
    float _1594 = inversesqrt(dot(vec3(_1588, _1589, _1590), vec3(_1588, _1589, _1590)));
    float _1598 = dot(vec3(_226, _227, _228), vec3(cbLight._m0[_1432].xyz));
    float _3443 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
    float _1601 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
    float _1602 = dot(vec3(cbLight._m0[_1432].xyz), vec3(_1588 * _1594, _1589 * _1594, _1590 * _1594));
    float _3454 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
    float _1611 = (exp2(log2(1.0 - (isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1615 = (0.5 / ((_1601 + 9.9999999392252902907785028219223e-09) + _1551)) * _1601;
    float _3465 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
    float _1617 = (isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0))) * 0.31831014156341552734375;
    float _1627 = (((_1611 * cbLight._m0[_1582].x) * _1617) * _1417) + (((_1563 * cbLight._m0[_1531].x) * _1571) * _1428);
    float _1628 = (((_1611 * cbLight._m0[_1582].y) * _1617) * _1417) + (((_1563 * cbLight._m0[_1531].y) * _1571) * _1428);
    float _1629 = (((_1611 * cbLight._m0[_1582].z) * _1617) * _1417) + (((_1563 * cbLight._m0[_1531].z) * _1571) * _1428);
    float _1691;
    float _1693;
    float _1695;
    if (_1469)
    {
        _1691 = _1627;
        _1693 = _1628;
        _1695 = _1629;
    }
    else
    {
        uint _1697 = _1393 + 10u;
        uint _1703 = _1393 + 2u;
        float _1709 = cbLight._m0[_1703].x + _307;
        float _1710 = cbLight._m0[_1703].y + _308;
        float _1711 = cbLight._m0[_1703].z + _309;
        float _1715 = inversesqrt(dot(vec3(_1709, _1710, _1711), vec3(_1709, _1710, _1711)));
        float _1719 = dot(vec3(_226, _227, _228), vec3(cbLight._m0[_1703].xyz));
        float _3476 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1722 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
        float _1723 = dot(vec3(cbLight._m0[_1703].xyz), vec3(_1709 * _1715, _1710 * _1715, _1711 * _1715));
        float _3487 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1732 = (exp2(log2(1.0 - (isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1736 = (0.5 / ((_1722 + 9.9999999392252902907785028219223e-09) + _1551)) * _1722;
        float _3498 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1738 = (isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0))) * 0.31831014156341552734375;
        float _1739 = isnan(1.0) ? _1409 : (isnan(_1409) ? 1.0 : min(_1409, 1.0));
        _1691 = (((_1732 * cbLight._m0[_1697].x) * _1738) * _1739) + _1627;
        _1693 = (((_1732 * cbLight._m0[_1697].y) * _1738) * _1739) + _1628;
        _1695 = (((_1732 * cbLight._m0[_1697].z) * _1738) * _1739) + _1629;
    }
    float _1774;
    float _1776;
    float _1778;
    if (_1487)
    {
        _1774 = _1691;
        _1776 = _1693;
        _1778 = _1695;
    }
    else
    {
        uint _1785 = _1393 + 11u;
        uint _1791 = _1393 + 3u;
        float _1797 = cbLight._m0[_1791].x + _307;
        float _1798 = cbLight._m0[_1791].y + _308;
        float _1799 = cbLight._m0[_1791].z + _309;
        float _1803 = inversesqrt(dot(vec3(_1797, _1798, _1799), vec3(_1797, _1798, _1799)));
        float _1807 = dot(vec3(_226, _227, _228), vec3(cbLight._m0[_1791].xyz));
        float _3514 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1810 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _1811 = dot(vec3(cbLight._m0[_1791].xyz), vec3(_1797 * _1803, _1798 * _1803, _1799 * _1803));
        float _3525 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1820 = (exp2(log2(1.0 - (isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1824 = (0.5 / ((_1810 + 9.9999999392252902907785028219223e-09) + _1551)) * _1810;
        float _3536 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1826 = (isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0))) * 0.31831014156341552734375;
        float _1827 = isnan(1.0) ? _1410 : (isnan(_1410) ? 1.0 : min(_1410, 1.0));
        _1774 = (((_1820 * cbLight._m0[_1785].x) * _1826) * _1827) + _1691;
        _1776 = (((_1820 * cbLight._m0[_1785].y) * _1826) * _1827) + _1693;
        _1778 = (((_1820 * cbLight._m0[_1785].z) * _1826) * _1827) + _1695;
    }
    float _1961;
    float _1963;
    float _1965;
    float _1967;
    float _1969;
    float _1971;
    if (_1391.y == 0u)
    {
        float _1902 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1903 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1902;
        float _1904 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1902;
        float _1905 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1902;
        uvec4 _1917 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1918 = _1917.x;
        uint _1929 = uint((float(_1917.y) * floor(float(uint(cbSceneParam._m0[85u].y * _316) / _1918))) + floor(float(uint(cbSceneParam._m0[85u].x * _315) / _1918)));
        float _1939 = (log2(_1905 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1940 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        uint _1943 = uint(isnan(14.0) ? _1940 : (isnan(_1940) ? 14.0 : min(_1940, 14.0)));
        uvec4 _1948 = texelFetch(g_lightClusterGridBuffer, int(((_1943 << 2u) + (_1929 << 6u)) >> 2u));
        uint _1949 = _1948.x;
        uint _1950 = _1917.z;
        float _2078;
        float _2080;
        float _2082;
        float _2084;
        float _2086;
        float _2088;
        if (((((1u << ((_1950 >> 4u) & 15u)) + 4294967295u) & _1949) == 0u) || ((_1950 & 240u) == 0u))
        {
            _2078 = 0.0;
            _2080 = 0.0;
            _2082 = 0.0;
            _2084 = 0.0;
            _2086 = 0.0;
            _2088 = 0.0;
        }
        else
        {
            float _2079;
            float _2081;
            float _2083;
            float _2085;
            float _2087;
            float _2089;
            float _2266 = 0.0;
            float _2267 = 0.0;
            float _2268 = 0.0;
            float _2269 = 0.0;
            float _2270 = 0.0;
            float _2271 = 0.0;
            uint _2272 = 0u;
            uint _2281;
            bool _2282;
            for (;;)
            {
                _2281 = texelFetch(g_lightClassification, int((((_1943 << 5u) + (_1929 << 9u)) + (_2272 << 2u)) >> 2u)).x;
                _2282 = _2281 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2282)
                {
                    frontier_phi_63_pred = _2271;
                    frontier_phi_63_pred_1 = _2270;
                    frontier_phi_63_pred_2 = _2269;
                    frontier_phi_63_pred_3 = _2268;
                    frontier_phi_63_pred_4 = _2267;
                    frontier_phi_63_pred_5 = _2266;
                }
                else
                {
                    float _2390;
                    float _2391;
                    float _2392;
                    float _2393;
                    float _2394;
                    float _2395;
                    uint _2396;
                    _2390 = _2266;
                    _2391 = _2267;
                    _2392 = _2268;
                    _2393 = _2269;
                    _2394 = _2270;
                    _2395 = _2271;
                    _2396 = _2281;
                    float _2322;
                    float _2323;
                    float _2324;
                    float _2325;
                    float _2326;
                    float _2327;
                    for (;;)
                    {
                        uint _2400 = uint(findLSB(_2396)) + (_2272 << 5u);
                        uint _2397 = (_2396 + 4294967295u) & _2396;
                        uint _2402 = _2400 * 48u;
                        vec4 _2416 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2402)).x, texelFetch(g_PointLightRenderingBuffer, int(_2402 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2402 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2402 + 3u)).x));
                        uint _2422 = (_2400 * 48u) + 4u;
                        vec4 _2435 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2422)).x, texelFetch(g_PointLightRenderingBuffer, int(_2422 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2422 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2422 + 3u)).x));
                        uint _2441 = (_2400 * 48u) + 8u;
                        vec3 _2452 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2441)).x, texelFetch(g_PointLightRenderingBuffer, int(_2441 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2441 + 2u)).x));
                        float _2456 = _2416.x - _1903;
                        float _2457 = _2416.y - _1904;
                        float _2458 = _2416.z - _1905;
                        float _2459 = dot(vec3(_2456, _2457, _2458), vec3(_2456, _2457, _2458));
                        float _2462 = inversesqrt(_2459);
                        float _2471 = 1.0 - (_2459 * _2416.w);
                        float _3562 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
                        float _2472 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
                        float _2473 = sqrt(_2459) * _2435.w;
                        float _2476 = 1.39999997615814208984375 / (_2473 + 1.39999997615814208984375);
                        float _2477 = _2476 * _2476;
                        float _2480 = ((1.0 - _2477) * dot(vec3(_337, _340, _343), vec3(_2462 * _2456, _2462 * _2457, _2462 * _2458))) + _2477;
                        float _2483 = _2473 * _2473;
                        float _2487 = ((isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0))) * _2472) / ((_2483 * 0.699999988079071044921875) + 1.0);
                        float _2491 = (-0.0) - _1903;
                        float _2492 = (-0.0) - _1904;
                        float _2493 = (-0.0) - _1905;
                        float _2497 = inversesqrt(dot(vec3(_2491, _2492, _2493), vec3(_2491, _2492, _2493)));
                        float _2501 = dot(vec3(_337, _340, _343), vec3(_2497 * _2491, _2497 * _2492, _2497 * _2493));
                        float _3578 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
                        float _3589 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
                        float _2505 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
                        float _2509 = (0.5 / (((isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0))) + 9.9999999392252902907785028219223e-09) + _2505)) * _2505;
                        float _3600 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
                        float _2518 = (((isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * 3.1415927410125732421875) / ((_2483 * 2.1991131305694580078125) + 3.141590118408203125)) * _2472;
                        _2325 = (_2487 * _2435.x) + _2393;
                        _2326 = (_2487 * _2435.y) + _2394;
                        _2327 = (_2487 * _2435.z) + _2395;
                        _2322 = (_2518 * _2452.x) + _2390;
                        _2323 = (_2518 * _2452.y) + _2391;
                        _2324 = (_2518 * _2452.z) + _2392;
                        if (_2397 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2390 = _2322;
                            _2391 = _2323;
                            _2392 = _2324;
                            _2393 = _2325;
                            _2394 = _2326;
                            _2395 = _2327;
                            _2396 = _2397;
                        }
                    }
                    frontier_phi_63_pred = _2327;
                    frontier_phi_63_pred_1 = _2326;
                    frontier_phi_63_pred_2 = _2325;
                    frontier_phi_63_pred_3 = _2324;
                    frontier_phi_63_pred_4 = _2323;
                    frontier_phi_63_pred_5 = _2322;
                }
                _2089 = frontier_phi_63_pred;
                _2087 = frontier_phi_63_pred_1;
                _2085 = frontier_phi_63_pred_2;
                _2083 = frontier_phi_63_pred_3;
                _2081 = frontier_phi_63_pred_4;
                _2079 = frontier_phi_63_pred_5;
                uint _2273 = _2272 + 1u;
                if (_2273 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2266 = _2079;
                    _2267 = _2081;
                    _2268 = _2083;
                    _2269 = _2085;
                    _2270 = _2087;
                    _2271 = _2089;
                    _2272 = _2273;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2078 = _2079;
            _2080 = _2081;
            _2082 = _2083;
            _2084 = _2085;
            _2086 = _2087;
            _2088 = _2089;
        }
        uvec4 _2092 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2093 = _2092.z;
        uint _2095 = (_2093 >> 8u) & 15u;
        float _2237;
        float _2239;
        float _2241;
        float _2243;
        float _2245;
        float _2247;
        if (((4294967295u << _2095) & _1949) == 0u)
        {
            _2237 = _2078;
            _2239 = _2080;
            _2241 = _2082;
            _2243 = _2084;
            _2245 = _2086;
            _2247 = _2088;
        }
        else
        {
            float _2262 = inversesqrt(dot(vec3(_1903, _1904, _1905), vec3(_1903, _1904, _1905)));
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2095 < ((_2093 >> 12u) & 15u))
            {
                float _2238;
                float _2240;
                float _2242;
                float _2244;
                float _2246;
                float _2248;
                float _2373 = _2078;
                float _2374 = _2080;
                float _2375 = _2082;
                float _2376 = _2084;
                float _2377 = _2086;
                float _2378 = _2088;
                uint _2379 = _2095;
                uint _2388;
                bool _2389;
                for (;;)
                {
                    _2388 = texelFetch(g_lightClassification, int((((_1943 << 5u) + (_1929 << 9u)) + (_2379 << 2u)) >> 2u)).x;
                    _2389 = _2388 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2389)
                    {
                        frontier_phi_69_pred = _2378;
                        frontier_phi_69_pred_1 = _2377;
                        frontier_phi_69_pred_2 = _2376;
                        frontier_phi_69_pred_3 = _2375;
                        frontier_phi_69_pred_4 = _2374;
                        frontier_phi_69_pred_5 = _2373;
                    }
                    else
                    {
                        float _2523;
                        float _2524;
                        float _2525;
                        float _2526;
                        float _2527;
                        float _2528;
                        float _2775;
                        float _2776;
                        float _2777;
                        float _2778;
                        float _2779;
                        float _2780;
                        float _2536 = _2373;
                        float _2537 = _2374;
                        float _2538 = _2375;
                        float _2539 = _2376;
                        float _2540 = _2377;
                        float _2541 = _2378;
                        uint _2542 = _2388;
                        uint _2543;
                        vec4 _2568;
                        float _2569;
                        vec4 _2584;
                        vec3 _2596;
                        vec4 _2612;
                        vec4 _2628;
                        float _2675;
                        bool _2676;
                        for (;;)
                        {
                            uint _2553 = ((_2379 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2542));
                            _2543 = (_2542 + 4294967295u) & _2542;
                            uint _2555 = _2553 * 40u;
                            _2568 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2555)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2555 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2555 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2555 + 3u)).x));
                            _2569 = _2568.w;
                            uint _2571 = (_2553 * 40u) + 4u;
                            _2584 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2571 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2571 + 3u)).x));
                            uint _2586 = (_2553 * 40u) + 8u;
                            _2596 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2586)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2586 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2586 + 2u)).x));
                            uint _2599 = (_2553 * 40u) + 16u;
                            _2612 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2599)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2599 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2599 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2599 + 3u)).x));
                            uint _2615 = (_2553 * 40u) + 20u;
                            _2628 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2615)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2615 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2615 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2615 + 3u)).x));
                            uint _2631 = (_2553 * 40u) + 24u;
                            vec4 _2644 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2631 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2631 + 3u)).x));
                            uint _2650 = (_2553 * 40u) + 28u;
                            vec4 _2663 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2650)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2650 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2650 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2650 + 3u)).x));
                            _2675 = fma(_1905, _2663.z, fma(_1904, _2663.y, _2663.x * _1903)) + _2663.w;
                            _2676 = !((fma(_1905, _2644.z, fma(_1904, _2644.y, _2644.x * _1903)) + _2644.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2676)
                            {
                                float _2703 = _2568.x - _1903;
                                float _2704 = _2568.y - _1904;
                                float _2705 = _2568.z - _1905;
                                float _2706 = dot(vec3(_2703, _2704, _2705), vec3(_2703, _2704, _2705));
                                float _2709 = inversesqrt(_2706);
                                float _2710 = _2709 * _2703;
                                float _2711 = _2709 * _2704;
                                float _2712 = _2709 * _2705;
                                float _2716 = 1.0 - (_2706 / (_2569 * _2569));
                                float _3611 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
                                float _2717 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
                                float _2721 = sqrt(_2706) * _2584.w;
                                float _2723 = 1.39999997615814208984375 / (_2721 + 1.39999997615814208984375);
                                float _2724 = _2723 * _2723;
                                float _2725 = 1.0 - _2724;
                                float _2727 = (_2725 * dot(vec3(_2710, _2711, _2712), vec3(_337, _340, _343))) + _2724;
                                float _2730 = _2721 * _2721;
                                float _2734 = (fma(_1905, _2612.z, fma(_1904, _2612.y, _2612.x * _1903)) + _2612.w) / _2675;
                                float _2735 = (fma(_1905, _2628.z, fma(_1904, _2628.y, _2628.x * _1903)) + _2628.w) / _2675;
                                float _2739 = 1.0 - dot(vec2(_2734, _2735), vec2(_2734, _2735));
                                float _3627 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
                                float _2740 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
                                float _2741 = _2740 * (((isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0))) * _2717) / ((_2730 * 0.699999988079071044921875) + 1.0));
                                float _2751 = dot(vec3(_337, _340, _343), vec3((-0.0) - (_1903 * _2262), (-0.0) - (_1904 * _2262), (-0.0) - (_1905 * _2262)));
                                float _3638 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
                                float _2759 = (_2725 * dot(vec3(_337, _340, _343), vec3(_2710, _2711, _2712))) + _2724;
                                float _3649 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
                                float _2760 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
                                float _2764 = (0.5 / (((isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) + 9.9999999392252902907785028219223e-09) + _2760)) * _2760;
                                float _3660 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
                                float _2771 = (_2740 * _2717) * (((isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * 3.1415927410125732421875) / ((_2730 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_75_pred = _2741 * _2584.z;
                                frontier_phi_75_pred_1 = _2741 * _2584.y;
                                frontier_phi_75_pred_2 = _2741 * _2584.x;
                                frontier_phi_75_pred_3 = _2771 * _2596.z;
                                frontier_phi_75_pred_4 = _2771 * _2596.y;
                                frontier_phi_75_pred_5 = _2771 * _2596.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _2780 = frontier_phi_75_pred;
                            _2779 = frontier_phi_75_pred_1;
                            _2778 = frontier_phi_75_pred_2;
                            _2777 = frontier_phi_75_pred_3;
                            _2776 = frontier_phi_75_pred_4;
                            _2775 = frontier_phi_75_pred_5;
                            _2526 = _2778 + _2539;
                            _2527 = _2779 + _2540;
                            _2528 = _2780 + _2541;
                            _2523 = _2775 + _2536;
                            _2524 = _2776 + _2537;
                            _2525 = _2777 + _2538;
                            if (_2543 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2536 = _2523;
                                _2537 = _2524;
                                _2538 = _2525;
                                _2539 = _2526;
                                _2540 = _2527;
                                _2541 = _2528;
                                _2542 = _2543;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2528;
                        frontier_phi_69_pred_1 = _2527;
                        frontier_phi_69_pred_2 = _2526;
                        frontier_phi_69_pred_3 = _2525;
                        frontier_phi_69_pred_4 = _2524;
                        frontier_phi_69_pred_5 = _2523;
                    }
                    _2248 = frontier_phi_69_pred;
                    _2246 = frontier_phi_69_pred_1;
                    _2244 = frontier_phi_69_pred_2;
                    _2242 = frontier_phi_69_pred_3;
                    _2240 = frontier_phi_69_pred_4;
                    _2238 = frontier_phi_69_pred_5;
                    uint _2380 = _2379 + 1u;
                    if (_2380 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2373 = _2238;
                        _2374 = _2240;
                        _2375 = _2242;
                        _2376 = _2244;
                        _2377 = _2246;
                        _2378 = _2248;
                        _2379 = _2380;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2248;
                frontier_phi_57_58_ladder_1 = _2246;
                frontier_phi_57_58_ladder_2 = _2244;
                frontier_phi_57_58_ladder_3 = _2242;
                frontier_phi_57_58_ladder_4 = _2240;
                frontier_phi_57_58_ladder_5 = _2238;
            }
            else
            {
                frontier_phi_57_58_ladder = _2088;
                frontier_phi_57_58_ladder_1 = _2086;
                frontier_phi_57_58_ladder_2 = _2084;
                frontier_phi_57_58_ladder_3 = _2082;
                frontier_phi_57_58_ladder_4 = _2080;
                frontier_phi_57_58_ladder_5 = _2078;
            }
            _2237 = frontier_phi_57_58_ladder_5;
            _2239 = frontier_phi_57_58_ladder_4;
            _2241 = frontier_phi_57_58_ladder_3;
            _2243 = frontier_phi_57_58_ladder_2;
            _2245 = frontier_phi_57_58_ladder_1;
            _2247 = frontier_phi_57_58_ladder;
        }
        float _2252 = isnan(1.0) ? _382 : (isnan(_382) ? 1.0 : min(_382, 1.0));
        _1961 = (_2252 * _2243) + _1525;
        _1963 = (_2252 * _2245) + _1527;
        _1965 = (_2252 * _2247) + _1529;
        _1967 = ((_2237 * 0.039999999105930328369140625) * _2252) + _1774;
        _1969 = ((_2239 * 0.039999999105930328369140625) * _2252) + _1776;
        _1971 = ((_2241 * 0.039999999105930328369140625) * _2252) + _1778;
    }
    else
    {
        _1961 = _1525;
        _1963 = _1527;
        _1965 = _1529;
        _1967 = _1774;
        _1969 = _1776;
        _1971 = _1778;
    }
    uint _1977 = _358 + uint(cbMatDynParam._m0[0u].w);
    float _1983 = (_214.x * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_1977].x;
    float _1984 = (_214.y * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_1977].y;
    float _1985 = (_214.z * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_1977].z;
    float _3676 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _3687 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _3698 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _2002 = (((isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * (_1961 + ((isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0))) * _382))) + ((_1967 + ((isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0))) * _1161)) * cbPerFrame._m0[3u].x)) + _1983;
    float _2004 = (_1984 + ((_1969 + ((isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0))) * _1161)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * (_1963 + ((isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0))) * _382)));
    float _2006 = (_1985 + ((_1971 + ((isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))) * _1161)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * (_1965 + ((isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0))) * _382)));
    float _3724 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2019 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _2028 = _315 / cbSceneParam._m0[86u].x;
    float _2029 = _316 / cbSceneParam._m0[86u].y;
    vec4 _2043 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2028, _2029, (log2((isnan(cbSceneParam._m0[77u].w) ? _248 : (isnan(_248) ? cbSceneParam._m0[77u].w : min(_248, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2045 = _2043.x;
    float _2046 = _2043.y;
    float _2047 = _2043.z;
    float _2048 = _2043.w;
    float _2140;
    float _2142;
    float _2144;
    float _2146;
    if (_248 > cbSceneParam._m0[78u].w)
    {
        float _2103 = isnan(_248) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _248 : min(cbSceneParam._m0[80u].w, _248));
        float _2104 = _2103 / _248;
        float _2115 = _2104 * _300;
        float _2116 = _301 * _2104;
        float _2117 = (-0.0) - _2116;
        float _2118 = _2104 * _302;
        float _2120 = (cbSceneParam._m0[77u].w * _2117) / _2103;
        float _2121 = _2120 + cbSceneParam._m0[79u].w;
        float _2122 = cbSceneParam._m0[79u].w - _2116;
        float _2128 = sqrt(((_2115 * _2115) + (_2116 * _2116)) + (_2118 * _2118));
        float _2131 = (1.0 - (cbSceneParam._m0[77u].w / _2103)) * _2128;
        float _2136 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2138 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2335;
        if (abs((_2117 - _2120) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2335 = ((((_2121 > 0.0) ? exp2(_2136 * _2121) : (2.0 - exp2(_2138 * _2121))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2131;
        }
        else
        {
            float _2295 = 1.0 / cbSceneParam._m0[80u].x;
            float _2296 = isnan(_2122) ? _2121 : (isnan(_2121) ? _2122 : max(_2121, _2122));
            float _2297 = isnan(_2122) ? _2121 : (isnan(_2121) ? _2122 : min(_2121, _2122));
            float _2306 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : min(_2296, 0.0));
            float _2307 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : min(_2297, 0.0));
            _2335 = ((abs(_2128 / _2117) * cbSceneParam._m0[80u].y) * ((((_2306 - _2307) * 2.0) - ((exp2(_2136 * (isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0)))) - exp2(_2136 * (isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0))))) * _2295)) - ((exp2(_2138 * _2306) - exp2(_2138 * _2307)) * _2295))) + (_2131 * cbSceneParam._m0[80u].z);
        }
        vec4 _2337 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2028, _2029, 1.0), 0.0);
        float _2346 = exp2((_2335 * (-1.44269502162933349609375)) * (1.0 - _2337.w));
        float _2347 = log2(_2346);
        float _2363 = log2(_2048);
        _2140 = (exp2(_2363 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2347 * cbSceneParam._m0[78u].x)) * _2337.x) / cbSceneParam._m0[78u].x)) + _2045;
        _2142 = (exp2(_2363 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2347 * cbSceneParam._m0[78u].y)) * _2337.y) / cbSceneParam._m0[78u].y)) + _2046;
        _2144 = (exp2(_2363 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2347 * cbSceneParam._m0[78u].z)) * _2337.z) / cbSceneParam._m0[78u].z)) + _2047;
        _2146 = _2346 * _2048;
    }
    else
    {
        _2140 = _2045;
        _2142 = _2046;
        _2144 = _2047;
        _2146 = _2048;
    }
    bool _2159 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2161 = log2(_2146);
    float _2165 = exp2(_2161 * cbSceneParam._m0[78u].x);
    float _2166 = exp2(_2161 * cbSceneParam._m0[78u].y);
    float _2167 = exp2(_2161 * cbSceneParam._m0[78u].z);
    float _2168 = _2165 * (isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0)));
    float _2169 = _2166 * (isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0)));
    float _2170 = _2167 * (isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0)));
    vec4 _2178 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_315, _316));
    float _2180 = _2178.x;
    float _2201 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2180)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2180))) - _248) * 0.100000001490116119384765625;
    float _3775 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2203 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _2204 = _2203 * cbInstanceData._m0[_356 + 6u].w;
    float _2213 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2213 * (_2159 ? _2168 : (_2168 + (cbSceneParam._m0[72u].w * _2140)));
    SV_Target.y = _2213 * (_2159 ? _2169 : (_2169 + (cbSceneParam._m0[72u].w * _2142)));
    SV_Target.z = _2213 * (_2159 ? _2170 : (_2170 + (cbSceneParam._m0[72u].w * _2144)));
    SV_Target.w = _2204;
    SV_Target_1.x = ((((cbMtdParam._m0[2u].x * _1983) * _2019) * _2165) * _2203) * _2213;
    SV_Target_1.y = ((((cbMtdParam._m0[2u].y * _1984) * _2019) * _2166) * _2203) * _2213;
    SV_Target_1.z = ((((cbMtdParam._m0[2u].z * _1985) * _2019) * _2167) * _2203) * _2213;
    SV_Target_1.w = _2204;
}


