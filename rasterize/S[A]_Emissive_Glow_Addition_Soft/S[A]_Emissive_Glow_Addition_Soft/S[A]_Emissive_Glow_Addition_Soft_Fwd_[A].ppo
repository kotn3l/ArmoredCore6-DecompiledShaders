#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_A_Emissive_Glow_Addition_Soft_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_A_Emissive_Glow_Addition_Soft_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _771;
float _3011;
float _3012;
float _3013;
float _3014;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _173 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _174 = _173 * NORMAL.x;
    float _175 = _173 * NORMAL.y;
    float _176 = _173 * NORMAL.z;
    float _181;
    float _182;
    float _183;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _181 = (-0.0) - _174;
        _182 = (-0.0) - _175;
        _183 = (-0.0) - _176;
    }
    else
    {
        _181 = _174;
        _182 = _175;
        _183 = _176;
    }
    vec4 _197 = texture(sampler2D(S_A_Emissive_Glow_Addition_Soft_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _200 = _197.x;
    float _201 = _197.y;
    float _202 = _197.z;
    vec4 _218 = texture(sampler2D(S_A_Emissive_Glow_Addition_Soft_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _229 = inversesqrt(dot(vec3(_181, _182, _183), vec3(_181, _182, _183)));
    float _230 = _229 * _181;
    float _231 = _229 * _182;
    float _232 = _229 * _183;
    float _3023 = isnan(0.0) ? _200 : (isnan(_200) ? 0.0 : max(_200, 0.0));
    float _3034 = isnan(0.0) ? _201 : (isnan(_201) ? 0.0 : max(_201, 0.0));
    float _3045 = isnan(0.0) ? _202 : (isnan(_202) ? 0.0 : max(_202, 0.0));
    float _252 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _294 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _304 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _294);
    float _305 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _294);
    float _306 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _294);
    float _310 = inversesqrt(dot(vec3(_304, _305, _306), vec3(_304, _305, _306)));
    float _311 = _304 * _310;
    float _312 = _305 * _310;
    float _313 = _306 * _310;
    vec4 _318 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _320 = _318.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _450 = sqrt(((_304 * _304) + (_305 * _305)) + (_306 * _306));
        float _456 = (cbMatDynParam._m0[5u].x * _450) + cbMatDynParam._m0[5u].y;
        float _3056 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
        float _457 = isnan(1.0) ? _3056 : (isnan(_3056) ? 1.0 : min(_3056, 1.0));
        float _461 = (cbMatDynParam._m0[5u].z * _450) + cbMatDynParam._m0[5u].w;
        float _3067 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3067 : (isnan(_3067) ? 1.0 : min(_3067, 1.0))) - _457)) + _457) < ((_320 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _332 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _333 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _353 = fma(_232, cbSceneParam._m0[5u].z, fma(_231, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _230));
    float _356 = fma(_232, cbSceneParam._m0[6u].z, fma(_231, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _230));
    float _359 = fma(_232, cbSceneParam._m0[7u].z, fma(_231, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _230));
    uint _372 = uint(roundEven(NORMAL.w)) * 13u;
    uint _374 = _372 + 9u;
    uint _375 = _374 + uint(cbMatDynParam._m0[0u].w);
    float _381 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3023 : (isnan(_3023) ? 1.0 : min(_3023, 1.0)))) * cbInstanceData._m0[_375].x;
    float _382 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3034 : (isnan(_3034) ? 1.0 : min(_3034, 1.0)))) * cbInstanceData._m0[_375].y;
    float _383 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3045 : (isnan(_3045) ? 1.0 : min(_3045, 1.0)))) * cbInstanceData._m0[_375].z;
    float _3078 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _384 = isnan(1.0) ? _3078 : (isnan(_3078) ? 1.0 : min(_3078, 1.0));
    float _3089 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _385 = isnan(1.0) ? _3089 : (isnan(_3089) ? 1.0 : min(_3089, 1.0));
    float _3100 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _386 = isnan(1.0) ? _3100 : (isnan(_3100) ? 1.0 : min(_3100, 1.0));
    vec4 _395 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _332, cbSceneParam._m0[86u].y * _333));
    float _398 = _395.x * TEXCOORD.z;
    float _399 = dot(vec3(_230, _231, _232), vec3(_311, _312, _313));
    float _402 = _399 * 2.0;
    float _407 = (_402 * _230) - _311;
    float _408 = (_402 * _231) - _312;
    float _409 = (_402 * _232) - _313;
    float _431 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _435 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _439 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _770;
    float _772;
    float _773;
    float _774;
    float _775;
    float _776;
    float _777;
    float _778;
    float _779;
    float _780;
    float _781;
    float _782;
    float _783;
    float _784;
    float _785;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _495 = fma(_439, cbModelParam._m0[26u].z, fma(_435, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _431));
        float _499 = fma(_439, cbModelParam._m0[27u].z, fma(_435, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _431));
        float _503 = fma(_439, cbModelParam._m0[28u].z, fma(_435, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _431));
        float _528 = _431 + _230;
        float _529 = _435 + _231;
        float _530 = _439 + _232;
        float _540 = fma(_530, cbModelParam._m0[26u].z, fma(_529, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _528)) - _495;
        float _541 = fma(_530, cbModelParam._m0[27u].z, fma(_529, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _528)) - _499;
        float _542 = fma(_530, cbModelParam._m0[28u].z, fma(_529, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _528)) - _503;
        float _546 = inversesqrt(dot(vec3(_540, _541, _542), vec3(_540, _541, _542)));
        float _559 = ((_546 * _540) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_495 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _560 = ((_546 * _541) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_499 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _561 = ((_546 * _542) / cbModelParam._m0[34u].z) + ((((((_503 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _564 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_559, _560, _561), 0.0);
        vec4 _571 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_559, _560, _561), 0.0);
        vec4 _578 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_559, _560, _561), 0.0);
        vec4 _585 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_559, _560, _561), 0.0);
        float _598 = exp2((_564.w + (-0.5)) * 20.0) * 2.0;
        float _599 = _598 * (_564.x + (-0.5));
        float _600 = _598 * (_564.y + (-0.5));
        float _601 = _598 * (_564.z + (-0.5));
        float _608 = exp2((_571.w + (-0.5)) * 20.0) * 2.0;
        float _609 = _608 * (_571.x + (-0.5));
        float _610 = _608 * (_571.y + (-0.5));
        float _611 = _608 * (_571.z + (-0.5));
        float _618 = exp2((_578.w + (-0.5)) * 20.0) * 2.0;
        float _619 = _618 * (_578.x + (-0.5));
        float _620 = _618 * (_578.y + (-0.5));
        float _621 = _618 * (_578.z + (-0.5));
        float _628 = exp2((_585.w + (-0.5)) * 20.0) * 2.0;
        float _629 = _628 * (_585.x + (-0.5));
        float _630 = _628 * (_585.y + (-0.5));
        float _631 = _628 * (_585.z + (-0.5));
        float _632 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
        float _633 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
        float _634 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
        float _635 = _599 * 0.5;
        float _636 = _609 * 0.5;
        float _637 = _619 * 0.5;
        float _638 = dot(vec3(_635, _636, _637), vec3(_635, _636, _637));
        float _643 = (_638 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_638);
        float _652 = (dot(vec3(_230, _231, _232), vec3(_643 * _635, _643 * _636, _643 * _637)) + 1.0) * 0.5;
        float _3126 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
        float _662 = sqrt(((_636 * _636) + (_635 * _635)) + (_637 * _637)) / (_632 + 9.9999997473787516355514526367188e-06);
        float _3137 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        float _663 = isnan(1.0) ? _3137 : (isnan(_3137) ? 1.0 : min(_3137, 1.0));
        float _664 = _663 * 2.0;
        float _668 = (1.0 - _663) / (_663 + 1.0);
        float _3148 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        float _669 = isnan(1.0) ? _3148 : (isnan(_3148) ? 1.0 : min(_3148, 1.0));
        float _678 = ((((1.0 - _669) * (_664 + 2.0)) * exp2(log2(isnan(1.0) ? _3126 : (isnan(_3126) ? 1.0 : min(_3126, 1.0))) * (_664 + 1.0))) + _669) * _632;
        float _679 = _600 * 0.5;
        float _680 = _610 * 0.5;
        float _681 = _620 * 0.5;
        float _682 = dot(vec3(_679, _680, _681), vec3(_679, _680, _681));
        float _687 = (_682 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_682);
        float _695 = (dot(vec3(_230, _231, _232), vec3(_687 * _679, _687 * _680, _687 * _681)) + 1.0) * 0.5;
        float _3159 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
        float _704 = sqrt(((_680 * _680) + (_679 * _679)) + (_681 * _681)) / (_633 + 9.9999997473787516355514526367188e-06);
        float _3170 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _705 = isnan(1.0) ? _3170 : (isnan(_3170) ? 1.0 : min(_3170, 1.0));
        float _706 = _705 * 2.0;
        float _710 = (1.0 - _705) / (_705 + 1.0);
        float _3181 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _711 = isnan(1.0) ? _3181 : (isnan(_3181) ? 1.0 : min(_3181, 1.0));
        float _720 = ((((1.0 - _711) * (_706 + 2.0)) * exp2(log2(isnan(1.0) ? _3159 : (isnan(_3159) ? 1.0 : min(_3159, 1.0))) * (_706 + 1.0))) + _711) * _633;
        float _721 = _601 * 0.5;
        float _722 = _611 * 0.5;
        float _723 = _621 * 0.5;
        float _724 = dot(vec3(_721, _722, _723), vec3(_721, _722, _723));
        float _729 = (_724 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_724);
        float _737 = (dot(vec3(_230, _231, _232), vec3(_729 * _721, _729 * _722, _729 * _723)) + 1.0) * 0.5;
        float _3192 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _746 = sqrt(((_722 * _722) + (_721 * _721)) + (_723 * _723)) / (_634 + 9.9999997473787516355514526367188e-06);
        float _3203 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _747 = isnan(1.0) ? _3203 : (isnan(_3203) ? 1.0 : min(_3203, 1.0));
        float _748 = _747 * 2.0;
        float _752 = (1.0 - _747) / (_747 + 1.0);
        float _3214 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _3214 : (isnan(_3214) ? 1.0 : min(_3214, 1.0));
        float _762 = ((((1.0 - _753) * (_748 + 2.0)) * exp2(log2(isnan(1.0) ? _3192 : (isnan(_3192) ? 1.0 : min(_3192, 1.0))) * (_748 + 1.0))) + _753) * _634;
        _770 = _601;
        _772 = _600;
        _773 = _599;
        _774 = _611;
        _775 = _610;
        _776 = _609;
        _777 = _621;
        _778 = _620;
        _779 = _619;
        _780 = _634;
        _781 = _633;
        _782 = _632;
        _783 = cbModelParam._m0[36u].z * (isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0)));
        _784 = cbModelParam._m0[36u].z * (isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0)));
        _785 = cbModelParam._m0[36u].z * (isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0)));
    }
    else
    {
        _770 = _771;
        _772 = _771;
        _773 = _771;
        _774 = _771;
        _775 = _771;
        _776 = _771;
        _777 = _771;
        _778 = _771;
        _779 = _771;
        _780 = _771;
        _781 = _771;
        _782 = _771;
        _783 = 0.0;
        _784 = 0.0;
        _785 = 0.0;
    }
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _814 = fma(_439, cbModelParam._m0[30u].z, fma(_435, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _431));
        float _818 = fma(_439, cbModelParam._m0[31u].z, fma(_435, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _431));
        float _822 = fma(_439, cbModelParam._m0[32u].z, fma(_435, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _431));
        float _845 = _431 + _230;
        float _846 = _435 + _231;
        float _847 = _439 + _232;
        float _857 = fma(_847, cbModelParam._m0[30u].z, fma(_846, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _845)) - _814;
        float _858 = fma(_847, cbModelParam._m0[31u].z, fma(_846, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _845)) - _818;
        float _859 = fma(_847, cbModelParam._m0[32u].z, fma(_846, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _845)) - _822;
        float _863 = inversesqrt(dot(vec3(_857, _858, _859), vec3(_857, _858, _859)));
        float _876 = ((_863 * _857) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_814 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _877 = ((_863 * _858) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_818 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _878 = ((_863 * _859) / cbModelParam._m0[35u].z) + ((((((_822 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        float _913 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _914 = _913 * (_880.x + (-0.5));
        float _915 = _913 * (_880.y + (-0.5));
        float _916 = _913 * (_880.z + (-0.5));
        float _923 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_887.x + (-0.5));
        float _925 = _923 * (_887.y + (-0.5));
        float _926 = _923 * (_887.z + (-0.5));
        float _933 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_894.x + (-0.5));
        float _935 = _933 * (_894.y + (-0.5));
        float _936 = _933 * (_894.z + (-0.5));
        float _943 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_901.x + (-0.5));
        float _945 = _943 * (_901.y + (-0.5));
        float _946 = _943 * (_901.z + (-0.5));
        float _947 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _948 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _949 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _950 = _914 * 0.5;
        float _951 = _924 * 0.5;
        float _952 = _934 * 0.5;
        float _953 = dot(vec3(_950, _951, _952), vec3(_950, _951, _952));
        float _958 = (_953 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_953);
        float _966 = (dot(vec3(_230, _231, _232), vec3(_958 * _950, _958 * _951, _958 * _952)) + 1.0) * 0.5;
        float _3255 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _975 = sqrt(((_951 * _951) + (_950 * _950)) + (_952 * _952)) / (_947 + 9.9999997473787516355514526367188e-06);
        float _3266 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0));
        float _977 = _976 * 2.0;
        float _981 = (1.0 - _976) / (_976 + 1.0);
        float _3277 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0));
        float _991 = ((((1.0 - _982) * (_977 + 2.0)) * exp2(log2(isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0))) * (_977 + 1.0))) + _982) * _947;
        float _992 = _915 * 0.5;
        float _993 = _925 * 0.5;
        float _994 = _935 * 0.5;
        float _995 = dot(vec3(_992, _993, _994), vec3(_992, _993, _994));
        float _1000 = (_995 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_995);
        float _1008 = (dot(vec3(_230, _231, _232), vec3(_1000 * _992, _1000 * _993, _1000 * _994)) + 1.0) * 0.5;
        float _3288 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1017 = sqrt(((_993 * _993) + (_992 * _992)) + (_994 * _994)) / (_948 + 9.9999997473787516355514526367188e-06);
        float _3299 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0));
        float _1019 = _1018 * 2.0;
        float _1023 = (1.0 - _1018) / (_1018 + 1.0);
        float _3310 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0));
        float _1033 = ((((1.0 - _1024) * (_1019 + 2.0)) * exp2(log2(isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0))) * (_1019 + 1.0))) + _1024) * _948;
        float _1034 = _916 * 0.5;
        float _1035 = _926 * 0.5;
        float _1036 = _936 * 0.5;
        float _1037 = dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036));
        float _1042 = (_1037 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1037);
        float _1050 = (dot(vec3(_230, _231, _232), vec3(_1042 * _1034, _1042 * _1035, _1042 * _1036)) + 1.0) * 0.5;
        float _3321 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1059 = sqrt(((_1035 * _1035) + (_1034 * _1034)) + (_1036 * _1036)) / (_949 + 9.9999997473787516355514526367188e-06);
        float _3332 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0));
        float _1061 = _1060 * 2.0;
        float _1065 = (1.0 - _1060) / (_1060 + 1.0);
        float _3343 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0));
        float _1075 = ((((1.0 - _1066) * (_1061 + 2.0)) * exp2(log2(isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0))) * (_1061 + 1.0))) + _1066) * _949;
        _1083 = _916;
        _1084 = _915;
        _1085 = _914;
        _1086 = _926;
        _1087 = _925;
        _1088 = _924;
        _1089 = _936;
        _1090 = _935;
        _1091 = _934;
        _1092 = _949;
        _1093 = _948;
        _1094 = _947;
        _1095 = cbModelParam._m0[36u].w * (isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0)));
        _1096 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0)));
        _1097 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)));
    }
    else
    {
        _1083 = _771;
        _1084 = _771;
        _1085 = _771;
        _1086 = _771;
        _1087 = _771;
        _1088 = _771;
        _1089 = _771;
        _1090 = _771;
        _1091 = _771;
        _1092 = _771;
        _1093 = _771;
        _1094 = _771;
        _1095 = 0.0;
        _1096 = 0.0;
        _1097 = 0.0;
    }
    float _1107 = (cbModelParam._m0[1u].x * (_1095 - _783)) + _783;
    float _1108 = (cbModelParam._m0[1u].x * (_1096 - _784)) + _784;
    float _1109 = (cbModelParam._m0[1u].x * (_1097 - _785)) + _785;
    float _1130 = fma(_1109, cbSceneParam._m0[89u].z, fma(_1108, cbSceneParam._m0[89u].y, _1107 * cbSceneParam._m0[89u].x));
    float _1133 = fma(_1109, cbSceneParam._m0[90u].z, fma(_1108, cbSceneParam._m0[90u].y, _1107 * cbSceneParam._m0[90u].x));
    float _1136 = fma(_1109, cbSceneParam._m0[91u].z, fma(_1108, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1107));
    float _1151 = _407 * 0.5;
    float _1152 = _408 * 0.5;
    float _1153 = _409 * 0.5;
    float _1154 = dot(vec4(_1151, _1152, _1153, 1.0), vec4(_1085, _1088, _1091, _1094));
    float _1157 = dot(vec4(_1151, _1152, _1153, 1.0), vec4(_1084, _1087, _1090, _1093));
    float _1160 = dot(vec4(_1151, _1152, _1153, 1.0), vec4(_1083, _1086, _1089, _1092));
    float _1194;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1167 = dot(vec4(_1151, _1152, _1153, 1.0), vec4(_770, _774, _777, _780));
        float _1171 = dot(vec4(_1151, _1152, _1153, 1.0), vec4(_772, _775, _778, _781));
        float _1175 = dot(vec4(_1151, _1152, _1153, 1.0), vec4(_773, _776, _779, _782));
        float _1182 = dot(vec4(cbModelParam._m0[39u]), vec4(_1151, _1152, _1153, 1.0));
        _1194 = dot(vec3(isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)), isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)), isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1182) ? 0.0 : (isnan(0.0) ? _1182 : max(0.0, _1182))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1194 = 1.0;
    }
    float _1205;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1196 = dot(vec4(cbModelParam._m0[40u]), vec4(_1151, _1152, _1153, 1.0));
        _1205 = dot(vec3(isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)), isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)), isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1196) ? 0.0 : (isnan(0.0) ? _1196 : max(0.0, _1196))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1205 = 1.0;
    }
    float _1209 = (_1205 * cbModelParam._m0[1u].x) + (_1194 * (1.0 - cbModelParam._m0[1u].x));
    float _1218 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1300;
    float _1302;
    float _1304;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1267 = fma(_439, cbModelParam._m0[13u].z, fma(_435, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _431)) + cbModelParam._m0[13u].w;
        float _1271 = fma(_439, cbModelParam._m0[14u].z, fma(_435, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _431)) + cbModelParam._m0[14u].w;
        float _1275 = fma(_439, cbModelParam._m0[15u].z, fma(_435, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _431)) + cbModelParam._m0[15u].w;
        float _1278 = fma(_409, cbModelParam._m0[13u].z, fma(_408, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _407));
        float _1281 = fma(_409, cbModelParam._m0[14u].z, fma(_408, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _407));
        float _1284 = fma(_409, cbModelParam._m0[15u].z, fma(_408, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _407));
        float _1310;
        if (_1278 > 0.0)
        {
            _1310 = abs((1.0 - _1267) / _1278);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1278 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1267 + 1.0) / _1278);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1310 = frontier_phi_19_17_ladder;
        }
        float _1518;
        if (_1281 > 0.0)
        {
            _1518 = abs((1.0 - _1271) / _1281);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1281 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1271 + 1.0) / _1281);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1518 = frontier_phi_28_24_ladder;
        }
        float _1707;
        if (_1284 > 0.0)
        {
            _1707 = abs((1.0 - _1275) / _1284);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1284 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1275 + 1.0) / _1284);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1707 = frontier_phi_40_35_ladder;
        }
        float _1709 = isnan(_1518) ? _1310 : (isnan(_1310) ? _1518 : min(_1310, _1518));
        float _1710 = isnan(_1707) ? _1709 : (isnan(_1709) ? _1707 : min(_1709, _1707));
        float _1714 = (_1710 * _1278) + _1267;
        float _1715 = (_1710 * _1281) + _1271;
        float _1716 = (_1710 * _1284) + _1275;
        float _1717 = _1710 * 9.9999997473787516355514526367188e-05;
        float _1719 = (-1.0) - _1717;
        float _1721 = _1717 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1716 > _1721) || ((_1716 < _1719) || ((_1715 > _1721) || ((_1715 < _1719) || ((_1714 < _1719) || (_1714 > _1721))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1813 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1716, cbModelParam._m0[9u].z, fma(_1715, cbModelParam._m0[9u].y, _1714 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1716, cbModelParam._m0[10u].z, fma(_1715, cbModelParam._m0[10u].y, _1714 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1716, cbModelParam._m0[11u].z, fma(_1715, cbModelParam._m0[11u].y, _1714 * cbModelParam._m0[11u].x))), _1218);
            frontier_phi_18_40_ladder = _1813.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1813.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1813.x * cbModelParam._m0[1u].y;
        }
        _1300 = frontier_phi_18_40_ladder_2;
        _1302 = frontier_phi_18_40_ladder_1;
        _1304 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1288 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_407, _408, _409), _1218);
        _1300 = _1288.x * cbModelParam._m0[1u].y;
        _1302 = _1288.y * cbModelParam._m0[1u].y;
        _1304 = _1288.z * cbModelParam._m0[1u].y;
    }
    float _1307 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1400;
    float _1402;
    float _1404;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1364 = fma(_439, cbModelParam._m0[21u].z, fma(_435, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _431)) + cbModelParam._m0[21u].w;
        float _1368 = fma(_439, cbModelParam._m0[22u].z, fma(_435, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _431)) + cbModelParam._m0[22u].w;
        float _1372 = fma(_439, cbModelParam._m0[23u].z, fma(_435, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _431)) + cbModelParam._m0[23u].w;
        float _1375 = fma(_409, cbModelParam._m0[21u].z, fma(_408, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _407));
        float _1378 = fma(_409, cbModelParam._m0[22u].z, fma(_408, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _407));
        float _1381 = fma(_409, cbModelParam._m0[23u].z, fma(_408, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _407));
        float _1523;
        if (_1375 > 0.0)
        {
            _1523 = abs((1.0 - _1364) / _1375);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1375 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1364 + 1.0) / _1375);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1523 = frontier_phi_30_26_ladder;
        }
        float _1734;
        if (_1378 > 0.0)
        {
            _1734 = abs((1.0 - _1368) / _1378);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1378 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1368 + 1.0) / _1378);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1734 = frontier_phi_42_37_ladder;
        }
        float _1885;
        if (_1381 > 0.0)
        {
            _1885 = abs((1.0 - _1372) / _1381);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1381 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1372 + 1.0) / _1381);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _1885 = frontier_phi_51_48_ladder;
        }
        float _1887 = isnan(_1734) ? _1523 : (isnan(_1523) ? _1734 : min(_1523, _1734));
        float _1888 = isnan(_1885) ? _1887 : (isnan(_1887) ? _1885 : min(_1887, _1885));
        float _1892 = (_1888 * _1375) + _1364;
        float _1893 = (_1888 * _1378) + _1368;
        float _1894 = (_1888 * _1381) + _1372;
        float _1895 = _1888 * 9.9999997473787516355514526367188e-05;
        float _1896 = (-1.0) - _1895;
        float _1898 = _1895 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_1894 > _1898) || ((_1894 < _1896) || ((_1893 > _1898) || ((_1893 < _1896) || ((_1892 < _1896) || (_1892 > _1898))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2121 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1894, cbModelParam._m0[17u].z, fma(_1893, cbModelParam._m0[17u].y, _1892 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1894, cbModelParam._m0[18u].z, fma(_1893, cbModelParam._m0[18u].y, _1892 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1894, cbModelParam._m0[19u].z, fma(_1893, cbModelParam._m0[19u].y, _1892 * cbModelParam._m0[19u].x))), _1307);
            frontier_phi_27_51_ladder = _2121.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2121.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2121.x * cbModelParam._m0[1u].z;
        }
        _1400 = frontier_phi_27_51_ladder_2;
        _1402 = frontier_phi_27_51_ladder_1;
        _1404 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1384 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_407, _408, _409), _1307);
        _1400 = _1384.x * cbModelParam._m0[1u].z;
        _1402 = _1384.y * cbModelParam._m0[1u].z;
        _1404 = _1384.z * cbModelParam._m0[1u].z;
    }
    float _1416 = _398 * 0.01200000010430812835693359375;
    float _1418 = _1416 * ((cbModelParam._m0[1u].w * (_1400 - _1300)) + _1300);
    float _1419 = _1416 * ((cbModelParam._m0[1u].w * (_1402 - _1302)) + _1302);
    float _1420 = _1416 * ((cbModelParam._m0[1u].w * (_1404 - _1304)) + _1304);
    float _1423 = fma(_1420, cbSceneParam._m0[89u].z, fma(_1419, cbSceneParam._m0[89u].y, _1418 * cbSceneParam._m0[89u].x));
    float _1426 = fma(_1420, cbSceneParam._m0[90u].z, fma(_1419, cbSceneParam._m0[90u].y, _1418 * cbSceneParam._m0[90u].x));
    float _1429 = fma(_1420, cbSceneParam._m0[91u].z, fma(_1419, cbSceneParam._m0[91u].y, _1418 * cbSceneParam._m0[91u].x));
    uvec4 _1439 = floatBitsToUint(cbInstanceData._m0[_372 + 5u]);
    uint _1441 = _1439.x * 14u;
    uint _1442 = _1441 + 13u;
    float _1449 = _398 + (-1.0);
    float _1455 = (cbLight._m0[_1442].x * _1449) + 1.0;
    float _1456 = (cbLight._m0[_1442].y * _1449) + 1.0;
    float _1457 = (cbLight._m0[_1442].z * _1449) + 1.0;
    float _1458 = (cbLight._m0[_1442].w * _1449) + 1.0;
    uint _1459 = _1441 + 5u;
    float _1465 = isnan(1.0) ? _1456 : (isnan(_1456) ? 1.0 : min(_1456, 1.0));
    uint _1469 = _1441 + 4u;
    float _1476 = isnan(1.0) ? _1455 : (isnan(_1455) ? 1.0 : min(_1455, 1.0));
    uint _1480 = _1441 | 1u;
    float _1491 = dot(vec3(cbLight._m0[_1441].xyz), vec3(_230, _231, _232));
    float _1494 = dot(vec3(cbLight._m0[_1480].xyz), vec3(_230, _231, _232));
    float _3479 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
    float _3490 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
    float _1499 = (isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0))) * 0.3183098733425140380859375;
    float _1501 = (isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0))) * 0.3183098733425140380859375;
    float _1508 = ((cbLight._m0[_1459].x * _1465) * _1501) + ((cbLight._m0[_1469].x * _1476) * _1499);
    float _1509 = ((_1465 * cbLight._m0[_1459].y) * _1501) + ((_1476 * cbLight._m0[_1469].y) * _1499);
    float _1510 = ((_1465 * cbLight._m0[_1459].z) * _1501) + ((_1476 * cbLight._m0[_1469].z) * _1499);
    uvec4 _1515 = floatBitsToUint(cbLight._m0[_1441 + 12u]);
    bool _1517 = _1515.x == 0u;
    float _1528;
    float _1530;
    float _1532;
    if (_1517)
    {
        _1528 = _1508;
        _1530 = _1509;
        _1532 = _1510;
    }
    else
    {
        uint _1536 = _1441 + 6u;
        float _1552 = (dot(vec3(cbLight._m0[_1441 + 2u].xyz), vec3(_230, _231, _232)) * 0.5) + 0.5;
        float _1553 = _1552 * _1552;
        float _3501 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
        float _1555 = isnan(1.0) ? _1457 : (isnan(_1457) ? 1.0 : min(_1457, 1.0));
        _1528 = (((cbLight._m0[_1536].x * 0.3183098733425140380859375) * _1554) * _1555) + _1508;
        _1530 = (((cbLight._m0[_1536].y * 0.3183098733425140380859375) * _1554) * _1555) + _1509;
        _1532 = (((cbLight._m0[_1536].z * 0.3183098733425140380859375) * _1554) * _1555) + _1510;
    }
    bool _1535 = _1515.y == 0u;
    float _1573;
    float _1575;
    float _1577;
    if (_1535)
    {
        _1573 = _1528;
        _1575 = _1530;
        _1577 = _1532;
    }
    else
    {
        uint _1678 = _1441 + 7u;
        float _1694 = (dot(vec3(cbLight._m0[_1441 + 3u].xyz), vec3(_230, _231, _232)) * 0.5) + 0.5;
        float _1695 = _1694 * _1694;
        float _3517 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _1697 = isnan(1.0) ? _1458 : (isnan(_1458) ? 1.0 : min(_1458, 1.0));
        _1573 = (((cbLight._m0[_1678].x * 0.3183098733425140380859375) * _1696) * _1697) + _1528;
        _1575 = (((cbLight._m0[_1678].y * 0.3183098733425140380859375) * _1696) * _1697) + _1530;
        _1577 = (((cbLight._m0[_1678].z * 0.3183098733425140380859375) * _1696) * _1697) + _1532;
    }
    uint _1579 = _1441 + 8u;
    float _1585 = cbLight._m0[_1441].x + _311;
    float _1586 = cbLight._m0[_1441].y + _312;
    float _1587 = cbLight._m0[_1441].z + _313;
    float _1591 = inversesqrt(dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587)));
    float _1595 = dot(vec3(_230, _231, _232), vec3(cbLight._m0[_1441].xyz));
    float _3533 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
    float _1598 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
    float _3544 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _1599 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    float _1600 = dot(vec3(cbLight._m0[_1441].xyz), vec3(_1585 * _1591, _1586 * _1591, _1587 * _1591));
    float _3555 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
    float _1611 = (exp2(log2(1.0 - (isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1617 = (0.5 / ((_1598 + 9.9999999392252902907785028219223e-09) + _1599)) * _1598;
    float _3566 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
    float _1619 = (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0))) * 0.31831014156341552734375;
    uint _1630 = _1441 + 9u;
    float _1636 = cbLight._m0[_1480].x + _311;
    float _1637 = cbLight._m0[_1480].y + _312;
    float _1638 = cbLight._m0[_1480].z + _313;
    float _1642 = inversesqrt(dot(vec3(_1636, _1637, _1638), vec3(_1636, _1637, _1638)));
    float _1646 = dot(vec3(_230, _231, _232), vec3(cbLight._m0[_1480].xyz));
    float _3577 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
    float _1649 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
    float _1650 = dot(vec3(cbLight._m0[_1480].xyz), vec3(_1636 * _1642, _1637 * _1642, _1638 * _1642));
    float _3588 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
    float _1659 = (exp2(log2(1.0 - (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1663 = (0.5 / ((_1649 + 9.9999999392252902907785028219223e-09) + _1599)) * _1649;
    float _3599 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
    float _1665 = (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) * 0.31831014156341552734375;
    float _1675 = (((_1659 * cbLight._m0[_1630].x) * _1665) * _1465) + (((_1611 * cbLight._m0[_1579].x) * _1619) * _1476);
    float _1676 = (((_1659 * cbLight._m0[_1630].y) * _1665) * _1465) + (((_1611 * cbLight._m0[_1579].y) * _1619) * _1476);
    float _1677 = (((_1659 * cbLight._m0[_1630].z) * _1665) * _1465) + (((_1611 * cbLight._m0[_1579].z) * _1619) * _1476);
    float _1739;
    float _1741;
    float _1743;
    if (_1517)
    {
        _1739 = _1675;
        _1741 = _1676;
        _1743 = _1677;
    }
    else
    {
        uint _1745 = _1441 + 10u;
        uint _1751 = _1441 + 2u;
        float _1757 = cbLight._m0[_1751].x + _311;
        float _1758 = cbLight._m0[_1751].y + _312;
        float _1759 = cbLight._m0[_1751].z + _313;
        float _1763 = inversesqrt(dot(vec3(_1757, _1758, _1759), vec3(_1757, _1758, _1759)));
        float _1767 = dot(vec3(_230, _231, _232), vec3(cbLight._m0[_1751].xyz));
        float _3610 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1770 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _1771 = dot(vec3(cbLight._m0[_1751].xyz), vec3(_1757 * _1763, _1758 * _1763, _1759 * _1763));
        float _3621 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1780 = (exp2(log2(1.0 - (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1784 = (0.5 / ((_1770 + 9.9999999392252902907785028219223e-09) + _1599)) * _1770;
        float _3632 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1786 = (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * 0.31831014156341552734375;
        float _1787 = isnan(1.0) ? _1457 : (isnan(_1457) ? 1.0 : min(_1457, 1.0));
        _1739 = (((_1780 * cbLight._m0[_1745].x) * _1786) * _1787) + _1675;
        _1741 = (((_1780 * cbLight._m0[_1745].y) * _1786) * _1787) + _1676;
        _1743 = (((_1780 * cbLight._m0[_1745].z) * _1786) * _1787) + _1677;
    }
    float _1822;
    float _1824;
    float _1826;
    if (_1535)
    {
        _1822 = _1739;
        _1824 = _1741;
        _1826 = _1743;
    }
    else
    {
        uint _1833 = _1441 + 11u;
        uint _1839 = _1441 + 3u;
        float _1845 = cbLight._m0[_1839].x + _311;
        float _1846 = cbLight._m0[_1839].y + _312;
        float _1847 = cbLight._m0[_1839].z + _313;
        float _1851 = inversesqrt(dot(vec3(_1845, _1846, _1847), vec3(_1845, _1846, _1847)));
        float _1855 = dot(vec3(_230, _231, _232), vec3(cbLight._m0[_1839].xyz));
        float _3648 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1858 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _1859 = dot(vec3(cbLight._m0[_1839].xyz), vec3(_1845 * _1851, _1846 * _1851, _1847 * _1851));
        float _3659 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
        float _1868 = (exp2(log2(1.0 - (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1872 = (0.5 / ((_1858 + 9.9999999392252902907785028219223e-09) + _1599)) * _1858;
        float _3670 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
        float _1874 = (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * 0.31831014156341552734375;
        float _1875 = isnan(1.0) ? _1458 : (isnan(_1458) ? 1.0 : min(_1458, 1.0));
        _1822 = (((_1868 * cbLight._m0[_1833].x) * _1874) * _1875) + _1739;
        _1824 = (((_1868 * cbLight._m0[_1833].y) * _1874) * _1875) + _1741;
        _1826 = (((_1868 * cbLight._m0[_1833].z) * _1874) * _1875) + _1743;
    }
    float _2009;
    float _2011;
    float _2013;
    float _2015;
    float _2017;
    float _2019;
    if (_1439.y == 0u)
    {
        float _1950 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1951 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1950;
        float _1952 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1950;
        float _1953 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1950;
        uvec4 _1965 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1966 = _1965.x;
        uint _1977 = uint((float(_1965.y) * floor(float(uint(cbSceneParam._m0[85u].y * _333) / _1966))) + floor(float(uint(cbSceneParam._m0[85u].x * _332) / _1966)));
        float _1987 = (log2(_1953 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1988 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
        uint _1991 = uint(isnan(14.0) ? _1988 : (isnan(_1988) ? 14.0 : min(_1988, 14.0)));
        uvec4 _1996 = texelFetch(g_lightClusterGridBuffer, int(((_1991 << 2u) + (_1977 << 6u)) >> 2u));
        uint _1997 = _1996.x;
        uint _1998 = _1965.z;
        float _2126;
        float _2128;
        float _2130;
        float _2132;
        float _2134;
        float _2136;
        if (((((1u << ((_1998 >> 4u) & 15u)) + 4294967295u) & _1997) == 0u) || ((_1998 & 240u) == 0u))
        {
            _2126 = 0.0;
            _2128 = 0.0;
            _2130 = 0.0;
            _2132 = 0.0;
            _2134 = 0.0;
            _2136 = 0.0;
        }
        else
        {
            float _2127;
            float _2129;
            float _2131;
            float _2133;
            float _2135;
            float _2137;
            float _2323 = 0.0;
            float _2324 = 0.0;
            float _2325 = 0.0;
            float _2326 = 0.0;
            float _2327 = 0.0;
            float _2328 = 0.0;
            uint _2329 = 0u;
            uint _2338;
            bool _2339;
            for (;;)
            {
                _2338 = texelFetch(g_lightClassification, int((((_1991 << 5u) + (_1977 << 9u)) + (_2329 << 2u)) >> 2u)).x;
                _2339 = _2338 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2339)
                {
                    frontier_phi_68_pred = _2325;
                    frontier_phi_68_pred_1 = _2328;
                    frontier_phi_68_pred_2 = _2327;
                    frontier_phi_68_pred_3 = _2326;
                    frontier_phi_68_pred_4 = _2324;
                    frontier_phi_68_pred_5 = _2323;
                }
                else
                {
                    float _2468;
                    float _2469;
                    float _2470;
                    float _2471;
                    float _2472;
                    float _2473;
                    uint _2474;
                    _2468 = _2323;
                    _2469 = _2324;
                    _2470 = _2325;
                    _2471 = _2326;
                    _2472 = _2327;
                    _2473 = _2328;
                    _2474 = _2338;
                    float _2395;
                    float _2396;
                    float _2397;
                    float _2398;
                    float _2399;
                    float _2400;
                    for (;;)
                    {
                        uint _2478 = uint(findLSB(_2474)) + (_2329 << 5u);
                        uint _2475 = (_2474 + 4294967295u) & _2474;
                        uint _2480 = _2478 * 48u;
                        vec4 _2494 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2480)).x, texelFetch(g_PointLightRenderingBuffer, int(_2480 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2480 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2480 + 3u)).x));
                        uint _2500 = (_2478 * 48u) + 4u;
                        vec4 _2513 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2500)).x, texelFetch(g_PointLightRenderingBuffer, int(_2500 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2500 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2500 + 3u)).x));
                        uint _2519 = (_2478 * 48u) + 8u;
                        vec3 _2530 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2519)).x, texelFetch(g_PointLightRenderingBuffer, int(_2519 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2519 + 2u)).x));
                        float _2534 = _2494.x - _1951;
                        float _2535 = _2494.y - _1952;
                        float _2536 = _2494.z - _1953;
                        float _2537 = dot(vec3(_2534, _2535, _2536), vec3(_2534, _2535, _2536));
                        float _2540 = inversesqrt(_2537);
                        float _2549 = 1.0 - (_2537 * _2494.w);
                        float _3696 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
                        float _2550 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
                        float _2551 = sqrt(_2537) * _2513.w;
                        float _2554 = 1.39999997615814208984375 / (_2551 + 1.39999997615814208984375);
                        float _2555 = _2554 * _2554;
                        float _2558 = ((1.0 - _2555) * dot(vec3(_353, _356, _359), vec3(_2540 * _2534, _2540 * _2535, _2540 * _2536))) + _2555;
                        float _2561 = _2551 * _2551;
                        float _2565 = ((isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0))) * _2550) / ((_2561 * 0.699999988079071044921875) + 1.0);
                        float _2569 = (-0.0) - _1951;
                        float _2570 = (-0.0) - _1952;
                        float _2571 = (-0.0) - _1953;
                        float _2575 = inversesqrt(dot(vec3(_2569, _2570, _2571), vec3(_2569, _2570, _2571)));
                        float _2579 = dot(vec3(_353, _356, _359), vec3(_2575 * _2569, _2575 * _2570, _2575 * _2571));
                        float _3712 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
                        float _3723 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
                        float _2583 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
                        float _2587 = (0.5 / (((isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) + 9.9999999392252902907785028219223e-09) + _2583)) * _2583;
                        float _3734 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
                        float _2596 = (((isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * 3.1415927410125732421875) / ((_2561 * 2.1991131305694580078125) + 3.141590118408203125)) * _2550;
                        _2398 = (_2565 * _2513.x) + _2471;
                        _2399 = (_2565 * _2513.y) + _2472;
                        _2400 = (_2565 * _2513.z) + _2473;
                        _2395 = (_2596 * _2530.x) + _2468;
                        _2396 = (_2596 * _2530.y) + _2469;
                        _2397 = (_2596 * _2530.z) + _2470;
                        if (_2475 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2468 = _2395;
                            _2469 = _2396;
                            _2470 = _2397;
                            _2471 = _2398;
                            _2472 = _2399;
                            _2473 = _2400;
                            _2474 = _2475;
                        }
                    }
                    frontier_phi_68_pred = _2397;
                    frontier_phi_68_pred_1 = _2400;
                    frontier_phi_68_pred_2 = _2399;
                    frontier_phi_68_pred_3 = _2398;
                    frontier_phi_68_pred_4 = _2396;
                    frontier_phi_68_pred_5 = _2395;
                }
                _2131 = frontier_phi_68_pred;
                _2137 = frontier_phi_68_pred_1;
                _2135 = frontier_phi_68_pred_2;
                _2133 = frontier_phi_68_pred_3;
                _2129 = frontier_phi_68_pred_4;
                _2127 = frontier_phi_68_pred_5;
                uint _2330 = _2329 + 1u;
                if (_2330 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2323 = _2127;
                    _2324 = _2129;
                    _2325 = _2131;
                    _2326 = _2133;
                    _2327 = _2135;
                    _2328 = _2137;
                    _2329 = _2330;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2126 = _2127;
            _2128 = _2129;
            _2130 = _2131;
            _2132 = _2133;
            _2134 = _2135;
            _2136 = _2137;
        }
        uvec4 _2140 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2141 = _2140.z;
        uint _2143 = (_2141 >> 8u) & 15u;
        float _2294;
        float _2296;
        float _2298;
        float _2300;
        float _2302;
        float _2304;
        if (((4294967295u << _2143) & _1997) == 0u)
        {
            _2294 = _2126;
            _2296 = _2128;
            _2298 = _2130;
            _2300 = _2132;
            _2302 = _2134;
            _2304 = _2136;
        }
        else
        {
            float _2319 = inversesqrt(dot(vec3(_1951, _1952, _1953), vec3(_1951, _1952, _1953)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2143 < ((_2141 >> 12u) & 15u))
            {
                float _2295;
                float _2297;
                float _2299;
                float _2301;
                float _2303;
                float _2305;
                float _2451 = _2126;
                float _2452 = _2128;
                float _2453 = _2130;
                float _2454 = _2132;
                float _2455 = _2134;
                float _2456 = _2136;
                uint _2457 = _2143;
                uint _2466;
                bool _2467;
                for (;;)
                {
                    _2466 = texelFetch(g_lightClassification, int((((_1991 << 5u) + (_1977 << 9u)) + (_2457 << 2u)) >> 2u)).x;
                    _2467 = _2466 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2467)
                    {
                        frontier_phi_79_pred = _2456;
                        frontier_phi_79_pred_1 = _2455;
                        frontier_phi_79_pred_2 = _2454;
                        frontier_phi_79_pred_3 = _2453;
                        frontier_phi_79_pred_4 = _2452;
                        frontier_phi_79_pred_5 = _2451;
                    }
                    else
                    {
                        float _2610;
                        float _2611;
                        float _2612;
                        float _2613;
                        float _2614;
                        float _2615;
                        float _2862;
                        float _2863;
                        float _2864;
                        float _2865;
                        float _2866;
                        float _2867;
                        float _2623 = _2451;
                        float _2624 = _2452;
                        float _2625 = _2453;
                        float _2626 = _2454;
                        float _2627 = _2455;
                        float _2628 = _2456;
                        uint _2629 = _2466;
                        uint _2630;
                        vec4 _2655;
                        float _2656;
                        vec4 _2671;
                        vec3 _2683;
                        vec4 _2699;
                        vec4 _2715;
                        float _2762;
                        bool _2763;
                        for (;;)
                        {
                            uint _2640 = ((_2457 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2629));
                            _2630 = (_2629 + 4294967295u) & _2629;
                            uint _2642 = _2640 * 40u;
                            _2655 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2642 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2642 + 3u)).x));
                            _2656 = _2655.w;
                            uint _2658 = (_2640 * 40u) + 4u;
                            _2671 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2658 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2658 + 3u)).x));
                            uint _2673 = (_2640 * 40u) + 8u;
                            _2683 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2673)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2673 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2673 + 2u)).x));
                            uint _2686 = (_2640 * 40u) + 16u;
                            _2699 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2686)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2686 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2686 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2686 + 3u)).x));
                            uint _2702 = (_2640 * 40u) + 20u;
                            _2715 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2702)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2702 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2702 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2702 + 3u)).x));
                            uint _2718 = (_2640 * 40u) + 24u;
                            vec4 _2731 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2718)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 3u)).x));
                            uint _2737 = (_2640 * 40u) + 28u;
                            vec4 _2750 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2737)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 3u)).x));
                            _2762 = fma(_1953, _2750.z, fma(_1952, _2750.y, _2750.x * _1951)) + _2750.w;
                            _2763 = !((fma(_1953, _2731.z, fma(_1952, _2731.y, _2731.x * _1951)) + _2731.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2763)
                            {
                                float _2790 = _2655.x - _1951;
                                float _2791 = _2655.y - _1952;
                                float _2792 = _2655.z - _1953;
                                float _2793 = dot(vec3(_2790, _2791, _2792), vec3(_2790, _2791, _2792));
                                float _2796 = inversesqrt(_2793);
                                float _2797 = _2796 * _2790;
                                float _2798 = _2796 * _2791;
                                float _2799 = _2796 * _2792;
                                float _2803 = 1.0 - (_2793 / (_2656 * _2656));
                                float _3745 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
                                float _2804 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
                                float _2808 = sqrt(_2793) * _2671.w;
                                float _2810 = 1.39999997615814208984375 / (_2808 + 1.39999997615814208984375);
                                float _2811 = _2810 * _2810;
                                float _2812 = 1.0 - _2811;
                                float _2814 = (_2812 * dot(vec3(_2797, _2798, _2799), vec3(_353, _356, _359))) + _2811;
                                float _2817 = _2808 * _2808;
                                float _2821 = (fma(_1953, _2699.z, fma(_1952, _2699.y, _2699.x * _1951)) + _2699.w) / _2762;
                                float _2822 = (fma(_1953, _2715.z, fma(_1952, _2715.y, _2715.x * _1951)) + _2715.w) / _2762;
                                float _2826 = 1.0 - dot(vec2(_2821, _2822), vec2(_2821, _2822));
                                float _3761 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
                                float _2827 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
                                float _2828 = _2827 * (((isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0))) * _2804) / ((_2817 * 0.699999988079071044921875) + 1.0));
                                float _2838 = dot(vec3(_353, _356, _359), vec3((-0.0) - (_1951 * _2319), (-0.0) - (_1952 * _2319), (-0.0) - (_1953 * _2319)));
                                float _3772 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
                                float _2846 = (_2812 * dot(vec3(_353, _356, _359), vec3(_2797, _2798, _2799))) + _2811;
                                float _3783 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
                                float _2847 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
                                float _2851 = (0.5 / (((isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) + 9.9999999392252902907785028219223e-09) + _2847)) * _2847;
                                float _3794 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
                                float _2858 = (_2827 * _2804) * (((isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * 3.1415927410125732421875) / ((_2817 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_85_pred = _2828 * _2671.z;
                                frontier_phi_85_pred_1 = _2828 * _2671.y;
                                frontier_phi_85_pred_2 = _2828 * _2671.x;
                                frontier_phi_85_pred_3 = _2858 * _2683.z;
                                frontier_phi_85_pred_4 = _2858 * _2683.y;
                                frontier_phi_85_pred_5 = _2858 * _2683.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _2867 = frontier_phi_85_pred;
                            _2866 = frontier_phi_85_pred_1;
                            _2865 = frontier_phi_85_pred_2;
                            _2864 = frontier_phi_85_pred_3;
                            _2863 = frontier_phi_85_pred_4;
                            _2862 = frontier_phi_85_pred_5;
                            _2613 = _2865 + _2626;
                            _2614 = _2866 + _2627;
                            _2615 = _2867 + _2628;
                            _2610 = _2862 + _2623;
                            _2611 = _2863 + _2624;
                            _2612 = _2864 + _2625;
                            if (_2630 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2623 = _2610;
                                _2624 = _2611;
                                _2625 = _2612;
                                _2626 = _2613;
                                _2627 = _2614;
                                _2628 = _2615;
                                _2629 = _2630;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2615;
                        frontier_phi_79_pred_1 = _2614;
                        frontier_phi_79_pred_2 = _2613;
                        frontier_phi_79_pred_3 = _2612;
                        frontier_phi_79_pred_4 = _2611;
                        frontier_phi_79_pred_5 = _2610;
                    }
                    _2305 = frontier_phi_79_pred;
                    _2303 = frontier_phi_79_pred_1;
                    _2301 = frontier_phi_79_pred_2;
                    _2299 = frontier_phi_79_pred_3;
                    _2297 = frontier_phi_79_pred_4;
                    _2295 = frontier_phi_79_pred_5;
                    uint _2458 = _2457 + 1u;
                    if (_2458 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2451 = _2295;
                        _2452 = _2297;
                        _2453 = _2299;
                        _2454 = _2301;
                        _2455 = _2303;
                        _2456 = _2305;
                        _2457 = _2458;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2301;
                frontier_phi_60_61_ladder_1 = _2305;
                frontier_phi_60_61_ladder_2 = _2303;
                frontier_phi_60_61_ladder_3 = _2299;
                frontier_phi_60_61_ladder_4 = _2297;
                frontier_phi_60_61_ladder_5 = _2295;
            }
            else
            {
                frontier_phi_60_61_ladder = _2132;
                frontier_phi_60_61_ladder_1 = _2136;
                frontier_phi_60_61_ladder_2 = _2134;
                frontier_phi_60_61_ladder_3 = _2130;
                frontier_phi_60_61_ladder_4 = _2128;
                frontier_phi_60_61_ladder_5 = _2126;
            }
            _2294 = frontier_phi_60_61_ladder_5;
            _2296 = frontier_phi_60_61_ladder_4;
            _2298 = frontier_phi_60_61_ladder_3;
            _2300 = frontier_phi_60_61_ladder;
            _2302 = frontier_phi_60_61_ladder_2;
            _2304 = frontier_phi_60_61_ladder_1;
        }
        float _2309 = isnan(1.0) ? _398 : (isnan(_398) ? 1.0 : min(_398, 1.0));
        _2009 = (_2309 * _2300) + _1573;
        _2011 = (_2309 * _2302) + _1575;
        _2013 = (_2309 * _2304) + _1577;
        _2015 = ((_2294 * 0.039999999105930328369140625) * _2309) + _1822;
        _2017 = ((_2296 * 0.039999999105930328369140625) * _2309) + _1824;
        _2019 = ((_2298 * 0.039999999105930328369140625) * _2309) + _1826;
    }
    else
    {
        _2009 = _1573;
        _2011 = _1575;
        _2013 = _1577;
        _2015 = _1822;
        _2017 = _1824;
        _2019 = _1826;
    }
    uint _2025 = _374 + uint(cbMatDynParam._m0[0u].w);
    float _2031 = (_218.x * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2025].x;
    float _2032 = (_218.y * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2025].y;
    float _2033 = (_218.z * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2025].z;
    float _3810 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _3821 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _3832 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _2050 = (((isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * (_2009 + ((isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0))) * _398))) + ((_2015 + ((isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))) * _1209)) * cbPerFrame._m0[3u].x)) + _2031;
    float _2052 = (_2032 + ((_2017 + ((isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))) * _1209)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_2011 + ((isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0))) * _398)));
    float _2054 = (_2033 + ((_2019 + ((isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))) * _1209)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (_2013 + ((isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0))) * _398)));
    float _2055 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2056 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2057 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2063 = cbMtdParam._m0[2u].x * _2031;
    float _2064 = cbMtdParam._m0[2u].y * _2032;
    float _2065 = cbMtdParam._m0[2u].z * _2033;
    float _3858 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2067 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    uint _2068 = _372 + 6u;
    float _2076 = _332 / cbSceneParam._m0[86u].x;
    float _2077 = _333 / cbSceneParam._m0[86u].y;
    vec4 _2091 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2076, _2077, (log2((isnan(cbSceneParam._m0[77u].w) ? _252 : (isnan(_252) ? cbSceneParam._m0[77u].w : min(_252, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2093 = _2091.x;
    float _2094 = _2091.y;
    float _2095 = _2091.z;
    float _2096 = _2091.w;
    float _2188;
    float _2190;
    float _2192;
    float _2194;
    if (_252 > cbSceneParam._m0[78u].w)
    {
        float _2151 = isnan(_252) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _252 : min(cbSceneParam._m0[80u].w, _252));
        float _2152 = _2151 / _252;
        float _2163 = _2152 * _304;
        float _2164 = _305 * _2152;
        float _2165 = (-0.0) - _2164;
        float _2166 = _2152 * _306;
        float _2168 = (cbSceneParam._m0[77u].w * _2165) / _2151;
        float _2169 = _2168 + cbSceneParam._m0[79u].w;
        float _2170 = cbSceneParam._m0[79u].w - _2164;
        float _2176 = sqrt(((_2163 * _2163) + (_2164 * _2164)) + (_2166 * _2166));
        float _2179 = (1.0 - (cbSceneParam._m0[77u].w / _2151)) * _2176;
        float _2184 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2186 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2408;
        if (abs((_2165 - _2168) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2408 = ((((_2169 > 0.0) ? exp2(_2184 * _2169) : (2.0 - exp2(_2186 * _2169))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2179;
        }
        else
        {
            float _2352 = 1.0 / cbSceneParam._m0[80u].x;
            float _2353 = isnan(_2170) ? _2169 : (isnan(_2169) ? _2170 : max(_2169, _2170));
            float _2354 = isnan(_2170) ? _2169 : (isnan(_2169) ? _2170 : min(_2169, _2170));
            float _2363 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : min(_2353, 0.0));
            float _2364 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : min(_2354, 0.0));
            _2408 = ((abs(_2176 / _2165) * cbSceneParam._m0[80u].y) * ((((_2363 - _2364) * 2.0) - ((exp2(_2184 * (isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0)))) - exp2(_2184 * (isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0))))) * _2352)) - ((exp2(_2186 * _2363) - exp2(_2186 * _2364)) * _2352))) + (_2179 * cbSceneParam._m0[80u].z);
        }
        vec4 _2410 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2076, _2077, 1.0), 0.0);
        float _2419 = exp2((_2408 * (-1.44269502162933349609375)) * (1.0 - _2410.w));
        float _2420 = log2(_2419);
        float _2436 = log2(_2096);
        _2188 = (exp2(_2436 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2420 * cbSceneParam._m0[78u].x)) * _2410.x) / cbSceneParam._m0[78u].x)) + _2093;
        _2190 = (exp2(_2436 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2420 * cbSceneParam._m0[78u].y)) * _2410.y) / cbSceneParam._m0[78u].y)) + _2094;
        _2192 = (exp2(_2436 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2420 * cbSceneParam._m0[78u].z)) * _2410.z) / cbSceneParam._m0[78u].z)) + _2095;
        _2194 = _2419 * _2096;
    }
    else
    {
        _2188 = _2093;
        _2190 = _2094;
        _2192 = _2095;
        _2194 = _2096;
    }
    bool _2446;
    float _2252;
    vec4 _2255;
    float _2257;
    vec4 _2259;
    float _2267;
    float _2268;
    float _2269;
    float _2273;
    float _2277;
    float _2281;
    float _2282;
    bool _2293;
    for (;;)
    {
        bool _2207 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2209 = log2(_2194);
        float _2213 = exp2(_2209 * cbSceneParam._m0[78u].x);
        float _2214 = exp2(_2209 * cbSceneParam._m0[78u].y);
        float _2215 = exp2(_2209 * cbSceneParam._m0[78u].z);
        float _2216 = _2213 * _2055;
        float _2217 = _2214 * _2056;
        float _2218 = _2215 * _2057;
        vec4 _2226 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_332, _333));
        float _2228 = _2226.x;
        float _2249 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2228)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2228))) - _252) * 0.100000001490116119384765625;
        float _3909 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2251 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        _2252 = _2251 * cbInstanceData._m0[_2068].w;
        float _2253 = _320 + (-0.5);
        _2255 = cbMtdParam._m0[1u];
        _2257 = _2255.y * _2253;
        _2259 = cbMatDynParam._m0[0u];
        float _2266 = (roundEven(_2259.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2267 = _2266 * (_2207 ? _2216 : (_2216 + (cbSceneParam._m0[72u].w * _2188)));
        _2268 = _2266 * (_2207 ? _2217 : (_2217 + (cbSceneParam._m0[72u].w * _2190)));
        _2269 = _2266 * (_2207 ? _2218 : (_2218 + (cbSceneParam._m0[72u].w * _2192)));
        _2273 = (((_2063 * _2067) * _2213) * _2251) * _2266;
        _2277 = (((_2064 * _2067) * _2214) * _2251) * _2266;
        _2281 = (((_2065 * _2067) * _2215) * _2251) * _2266;
        _2282 = _2253 * 0.999000012874603271484375;
        _2293 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2293)
        {
            if ((cbInstanceData._m0[_372 + 7u].x + _2282) < 0.5)
            {
                _2446 = true;
                break;
            }
        }
        uint _2387 = _374 + uint(_2259.w);
        if ((cbInstanceData._m0[_2387].w < 1.0) && ((cbInstanceData._m0[_2387].w + _2282) < 0.5))
        {
            _2446 = true;
            break;
        }
        if ((_2257 + 1.0) < _2255.x)
        {
            _2446 = true;
            break;
        }
        _2446 = false;
        break;
    }
    float _2601;
    if (_2446)
    {
        discard_state = true;
        _2601 = 0.0;
    }
    else
    {
        _2601 = _2252;
    }
    SV_Target.x = _2267;
    SV_Target.y = _2268;
    SV_Target.z = _2269;
    SV_Target.w = _2601;
    SV_Target_1.x = _2273;
    SV_Target_1.y = _2277;
    SV_Target_1.z = _2281;
    SV_Target_1.w = _2252;
    discard_exit();
}


