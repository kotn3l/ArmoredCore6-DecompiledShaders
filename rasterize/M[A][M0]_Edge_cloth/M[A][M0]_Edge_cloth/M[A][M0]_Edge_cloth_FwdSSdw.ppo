#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _706;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _163 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _164 = _163 * NORMAL.x;
    float _165 = _163 * NORMAL.y;
    float _166 = _163 * NORMAL.z;
    float _171;
    float _172;
    float _173;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _171 = (-0.0) - _164;
        _172 = (-0.0) - _165;
        _173 = (-0.0) - _166;
    }
    else
    {
        _171 = _164;
        _172 = _165;
        _173 = _166;
    }
    vec4 _193 = texture(sampler2D(M_A_M0_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _199 = _193.x * cbMtdParam._m0[9u].x;
    float _200 = _193.y * cbMtdParam._m0[9u].y;
    float _201 = _193.z * cbMtdParam._m0[9u].z;
    float _205 = inversesqrt(dot(vec3(_171, _172, _173), vec3(_171, _172, _173)));
    float _206 = _205 * _171;
    float _207 = _205 * _172;
    float _208 = _205 * _173;
    float _2840 = isnan(0.0) ? _199 : (isnan(_199) ? 0.0 : max(_199, 0.0));
    float _2851 = isnan(0.0) ? _200 : (isnan(_200) ? 0.0 : max(_200, 0.0));
    float _2862 = isnan(0.0) ? _201 : (isnan(_201) ? 0.0 : max(_201, 0.0));
    float _228 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _270 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _280 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _270);
    float _281 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _270);
    float _282 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _270);
    float _286 = inversesqrt(dot(vec3(_280, _281, _282), vec3(_280, _281, _282)));
    float _287 = _280 * _286;
    float _288 = _281 * _286;
    float _289 = _282 * _286;
    float _295 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _296 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _317 = fma(_208, cbSceneParam._m0[5u].z, fma(_207, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _206));
    float _320 = fma(_208, cbSceneParam._m0[6u].z, fma(_207, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _206));
    float _323 = fma(_208, cbSceneParam._m0[7u].z, fma(_207, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _206));
    uint _336 = uint(roundEven(NORMAL.w)) * 13u;
    uint _339 = (_336 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _345 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2840 : (isnan(_2840) ? 1.0 : min(_2840, 1.0)))) * cbInstanceData._m0[_339].x;
    float _346 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2851 : (isnan(_2851) ? 1.0 : min(_2851, 1.0)))) * cbInstanceData._m0[_339].y;
    float _347 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2862 : (isnan(_2862) ? 1.0 : min(_2862, 1.0)))) * cbInstanceData._m0[_339].z;
    float _2873 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _348 = isnan(1.0) ? _2873 : (isnan(_2873) ? 1.0 : min(_2873, 1.0));
    float _2884 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _349 = isnan(1.0) ? _2884 : (isnan(_2884) ? 1.0 : min(_2884, 1.0));
    float _2895 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _350 = isnan(1.0) ? _2895 : (isnan(_2895) ? 1.0 : min(_2895, 1.0));
    vec4 _359 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _295, cbSceneParam._m0[86u].y * _296));
    float _362 = _359.x * TEXCOORD.z;
    float _363 = dot(vec3(_206, _207, _208), vec3(_287, _288, _289));
    float _366 = _363 * 2.0;
    float _371 = (_366 * _206) - _287;
    float _372 = (_366 * _207) - _288;
    float _373 = (_366 * _208) - _289;
    float _395 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _399 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _403 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _705;
    float _707;
    float _708;
    float _709;
    float _710;
    float _711;
    float _712;
    float _713;
    float _714;
    float _715;
    float _716;
    float _717;
    float _718;
    float _719;
    float _720;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _430 = fma(_403, cbModelParam._m0[26u].z, fma(_399, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _395));
        float _434 = fma(_403, cbModelParam._m0[27u].z, fma(_399, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _395));
        float _438 = fma(_403, cbModelParam._m0[28u].z, fma(_399, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _395));
        float _463 = _395 + _206;
        float _464 = _399 + _207;
        float _465 = _403 + _208;
        float _475 = fma(_465, cbModelParam._m0[26u].z, fma(_464, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _463)) - _430;
        float _476 = fma(_465, cbModelParam._m0[27u].z, fma(_464, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _463)) - _434;
        float _477 = fma(_465, cbModelParam._m0[28u].z, fma(_464, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _463)) - _438;
        float _481 = inversesqrt(dot(vec3(_475, _476, _477), vec3(_475, _476, _477)));
        float _494 = ((_481 * _475) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_430 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _495 = ((_481 * _476) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_434 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _496 = ((_481 * _477) / cbModelParam._m0[34u].z) + ((((((_438 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _499 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_494, _495, _496), 0.0);
        vec4 _506 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_494, _495, _496), 0.0);
        vec4 _513 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_494, _495, _496), 0.0);
        vec4 _520 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_494, _495, _496), 0.0);
        float _533 = exp2((_499.w + (-0.5)) * 20.0) * 2.0;
        float _534 = _533 * (_499.x + (-0.5));
        float _535 = _533 * (_499.y + (-0.5));
        float _536 = _533 * (_499.z + (-0.5));
        float _543 = exp2((_506.w + (-0.5)) * 20.0) * 2.0;
        float _544 = _543 * (_506.x + (-0.5));
        float _545 = _543 * (_506.y + (-0.5));
        float _546 = _543 * (_506.z + (-0.5));
        float _553 = exp2((_513.w + (-0.5)) * 20.0) * 2.0;
        float _554 = _553 * (_513.x + (-0.5));
        float _555 = _553 * (_513.y + (-0.5));
        float _556 = _553 * (_513.z + (-0.5));
        float _563 = exp2((_520.w + (-0.5)) * 20.0) * 2.0;
        float _564 = _563 * (_520.x + (-0.5));
        float _565 = _563 * (_520.y + (-0.5));
        float _566 = _563 * (_520.z + (-0.5));
        float _567 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
        float _568 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
        float _569 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
        float _570 = _534 * 0.5;
        float _571 = _544 * 0.5;
        float _572 = _554 * 0.5;
        float _573 = dot(vec3(_570, _571, _572), vec3(_570, _571, _572));
        float _578 = (_573 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_573);
        float _587 = (dot(vec3(_206, _207, _208), vec3(_578 * _570, _578 * _571, _578 * _572)) + 1.0) * 0.5;
        float _2921 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
        float _597 = sqrt(((_571 * _571) + (_570 * _570)) + (_572 * _572)) / (_567 + 9.9999997473787516355514526367188e-06);
        float _2932 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
        float _598 = isnan(1.0) ? _2932 : (isnan(_2932) ? 1.0 : min(_2932, 1.0));
        float _599 = _598 * 2.0;
        float _603 = (1.0 - _598) / (_598 + 1.0);
        float _2943 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
        float _604 = isnan(1.0) ? _2943 : (isnan(_2943) ? 1.0 : min(_2943, 1.0));
        float _613 = ((((1.0 - _604) * (_599 + 2.0)) * exp2(log2(isnan(1.0) ? _2921 : (isnan(_2921) ? 1.0 : min(_2921, 1.0))) * (_599 + 1.0))) + _604) * _567;
        float _614 = _535 * 0.5;
        float _615 = _545 * 0.5;
        float _616 = _555 * 0.5;
        float _617 = dot(vec3(_614, _615, _616), vec3(_614, _615, _616));
        float _622 = (_617 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_617);
        float _630 = (dot(vec3(_206, _207, _208), vec3(_622 * _614, _622 * _615, _622 * _616)) + 1.0) * 0.5;
        float _2954 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
        float _639 = sqrt(((_615 * _615) + (_614 * _614)) + (_616 * _616)) / (_568 + 9.9999997473787516355514526367188e-06);
        float _2965 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
        float _640 = isnan(1.0) ? _2965 : (isnan(_2965) ? 1.0 : min(_2965, 1.0));
        float _641 = _640 * 2.0;
        float _645 = (1.0 - _640) / (_640 + 1.0);
        float _2976 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
        float _646 = isnan(1.0) ? _2976 : (isnan(_2976) ? 1.0 : min(_2976, 1.0));
        float _655 = ((((1.0 - _646) * (_641 + 2.0)) * exp2(log2(isnan(1.0) ? _2954 : (isnan(_2954) ? 1.0 : min(_2954, 1.0))) * (_641 + 1.0))) + _646) * _568;
        float _656 = _536 * 0.5;
        float _657 = _546 * 0.5;
        float _658 = _556 * 0.5;
        float _659 = dot(vec3(_656, _657, _658), vec3(_656, _657, _658));
        float _664 = (_659 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_659);
        float _672 = (dot(vec3(_206, _207, _208), vec3(_664 * _656, _664 * _657, _664 * _658)) + 1.0) * 0.5;
        float _2987 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
        float _681 = sqrt(((_657 * _657) + (_656 * _656)) + (_658 * _658)) / (_569 + 9.9999997473787516355514526367188e-06);
        float _2998 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
        float _682 = isnan(1.0) ? _2998 : (isnan(_2998) ? 1.0 : min(_2998, 1.0));
        float _683 = _682 * 2.0;
        float _687 = (1.0 - _682) / (_682 + 1.0);
        float _3009 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
        float _688 = isnan(1.0) ? _3009 : (isnan(_3009) ? 1.0 : min(_3009, 1.0));
        float _697 = ((((1.0 - _688) * (_683 + 2.0)) * exp2(log2(isnan(1.0) ? _2987 : (isnan(_2987) ? 1.0 : min(_2987, 1.0))) * (_683 + 1.0))) + _688) * _569;
        _705 = _536;
        _707 = _535;
        _708 = _534;
        _709 = _546;
        _710 = _545;
        _711 = _544;
        _712 = _556;
        _713 = _555;
        _714 = _554;
        _715 = _569;
        _716 = _568;
        _717 = _567;
        _718 = cbModelParam._m0[36u].z * (isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0)));
        _719 = cbModelParam._m0[36u].z * (isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0)));
        _720 = cbModelParam._m0[36u].z * (isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0)));
    }
    else
    {
        _705 = _706;
        _707 = _706;
        _708 = _706;
        _709 = _706;
        _710 = _706;
        _711 = _706;
        _712 = _706;
        _713 = _706;
        _714 = _706;
        _715 = _706;
        _716 = _706;
        _717 = _706;
        _718 = 0.0;
        _719 = 0.0;
        _720 = 0.0;
    }
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _746 = fma(_403, cbModelParam._m0[30u].z, fma(_399, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _395));
        float _750 = fma(_403, cbModelParam._m0[31u].z, fma(_399, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _395));
        float _754 = fma(_403, cbModelParam._m0[32u].z, fma(_399, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _395));
        float _777 = _395 + _206;
        float _778 = _399 + _207;
        float _779 = _403 + _208;
        float _789 = fma(_779, cbModelParam._m0[30u].z, fma(_778, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _777)) - _746;
        float _790 = fma(_779, cbModelParam._m0[31u].z, fma(_778, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _777)) - _750;
        float _791 = fma(_779, cbModelParam._m0[32u].z, fma(_778, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _777)) - _754;
        float _795 = inversesqrt(dot(vec3(_789, _790, _791), vec3(_789, _790, _791)));
        float _808 = ((_795 * _789) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_746 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _809 = ((_795 * _790) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_750 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _810 = ((_795 * _791) / cbModelParam._m0[35u].z) + ((((((_754 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _812 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_808, _809, _810), 0.0);
        vec4 _819 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_808, _809, _810), 0.0);
        vec4 _826 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_808, _809, _810), 0.0);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_808, _809, _810), 0.0);
        float _845 = exp2((_812.w + (-0.5)) * 20.0) * 2.0;
        float _846 = _845 * (_812.x + (-0.5));
        float _847 = _845 * (_812.y + (-0.5));
        float _848 = _845 * (_812.z + (-0.5));
        float _855 = exp2((_819.w + (-0.5)) * 20.0) * 2.0;
        float _856 = _855 * (_819.x + (-0.5));
        float _857 = _855 * (_819.y + (-0.5));
        float _858 = _855 * (_819.z + (-0.5));
        float _865 = exp2((_826.w + (-0.5)) * 20.0) * 2.0;
        float _866 = _865 * (_826.x + (-0.5));
        float _867 = _865 * (_826.y + (-0.5));
        float _868 = _865 * (_826.z + (-0.5));
        float _875 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_833.x + (-0.5));
        float _877 = _875 * (_833.y + (-0.5));
        float _878 = _875 * (_833.z + (-0.5));
        float _879 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _880 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _881 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _882 = _846 * 0.5;
        float _883 = _856 * 0.5;
        float _884 = _866 * 0.5;
        float _885 = dot(vec3(_882, _883, _884), vec3(_882, _883, _884));
        float _890 = (_885 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_885);
        float _898 = (dot(vec3(_206, _207, _208), vec3(_890 * _882, _890 * _883, _890 * _884)) + 1.0) * 0.5;
        float _3050 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _907 = sqrt(((_883 * _883) + (_882 * _882)) + (_884 * _884)) / (_879 + 9.9999997473787516355514526367188e-06);
        float _3061 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3061 : (isnan(_3061) ? 1.0 : min(_3061, 1.0));
        float _909 = _908 * 2.0;
        float _913 = (1.0 - _908) / (_908 + 1.0);
        float _3072 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3072 : (isnan(_3072) ? 1.0 : min(_3072, 1.0));
        float _923 = ((((1.0 - _914) * (_909 + 2.0)) * exp2(log2(isnan(1.0) ? _3050 : (isnan(_3050) ? 1.0 : min(_3050, 1.0))) * (_909 + 1.0))) + _914) * _879;
        float _924 = _847 * 0.5;
        float _925 = _857 * 0.5;
        float _926 = _867 * 0.5;
        float _927 = dot(vec3(_924, _925, _926), vec3(_924, _925, _926));
        float _932 = (_927 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_927);
        float _940 = (dot(vec3(_206, _207, _208), vec3(_932 * _924, _932 * _925, _932 * _926)) + 1.0) * 0.5;
        float _3083 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _949 = sqrt(((_925 * _925) + (_924 * _924)) + (_926 * _926)) / (_880 + 9.9999997473787516355514526367188e-06);
        float _3094 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3094 : (isnan(_3094) ? 1.0 : min(_3094, 1.0));
        float _951 = _950 * 2.0;
        float _955 = (1.0 - _950) / (_950 + 1.0);
        float _3105 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3105 : (isnan(_3105) ? 1.0 : min(_3105, 1.0));
        float _965 = ((((1.0 - _956) * (_951 + 2.0)) * exp2(log2(isnan(1.0) ? _3083 : (isnan(_3083) ? 1.0 : min(_3083, 1.0))) * (_951 + 1.0))) + _956) * _880;
        float _966 = _848 * 0.5;
        float _967 = _858 * 0.5;
        float _968 = _868 * 0.5;
        float _969 = dot(vec3(_966, _967, _968), vec3(_966, _967, _968));
        float _974 = (_969 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_969);
        float _982 = (dot(vec3(_206, _207, _208), vec3(_974 * _966, _974 * _967, _974 * _968)) + 1.0) * 0.5;
        float _3116 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _991 = sqrt(((_967 * _967) + (_966 * _966)) + (_968 * _968)) / (_881 + 9.9999997473787516355514526367188e-06);
        float _3127 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3127 : (isnan(_3127) ? 1.0 : min(_3127, 1.0));
        float _993 = _992 * 2.0;
        float _997 = (1.0 - _992) / (_992 + 1.0);
        float _3138 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3138 : (isnan(_3138) ? 1.0 : min(_3138, 1.0));
        float _1007 = ((((1.0 - _998) * (_993 + 2.0)) * exp2(log2(isnan(1.0) ? _3116 : (isnan(_3116) ? 1.0 : min(_3116, 1.0))) * (_993 + 1.0))) + _998) * _881;
        _1015 = _848;
        _1016 = _847;
        _1017 = _846;
        _1018 = _858;
        _1019 = _857;
        _1020 = _856;
        _1021 = _868;
        _1022 = _867;
        _1023 = _866;
        _1024 = _881;
        _1025 = _880;
        _1026 = _879;
        _1027 = cbModelParam._m0[36u].w * (isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0)));
        _1028 = cbModelParam._m0[36u].w * (isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0)));
        _1029 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0)));
    }
    else
    {
        _1015 = _706;
        _1016 = _706;
        _1017 = _706;
        _1018 = _706;
        _1019 = _706;
        _1020 = _706;
        _1021 = _706;
        _1022 = _706;
        _1023 = _706;
        _1024 = _706;
        _1025 = _706;
        _1026 = _706;
        _1027 = 0.0;
        _1028 = 0.0;
        _1029 = 0.0;
    }
    float _1039 = (cbModelParam._m0[1u].x * (_1027 - _718)) + _718;
    float _1040 = (cbModelParam._m0[1u].x * (_1028 - _719)) + _719;
    float _1041 = (cbModelParam._m0[1u].x * (_1029 - _720)) + _720;
    float _1062 = fma(_1041, cbSceneParam._m0[89u].z, fma(_1040, cbSceneParam._m0[89u].y, _1039 * cbSceneParam._m0[89u].x));
    float _1065 = fma(_1041, cbSceneParam._m0[90u].z, fma(_1040, cbSceneParam._m0[90u].y, _1039 * cbSceneParam._m0[90u].x));
    float _1068 = fma(_1041, cbSceneParam._m0[91u].z, fma(_1040, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1039));
    float _1083 = _371 * 0.5;
    float _1084 = _372 * 0.5;
    float _1085 = _373 * 0.5;
    float _1086 = dot(vec4(_1083, _1084, _1085, 1.0), vec4(_1017, _1020, _1023, _1026));
    float _1089 = dot(vec4(_1083, _1084, _1085, 1.0), vec4(_1016, _1019, _1022, _1025));
    float _1092 = dot(vec4(_1083, _1084, _1085, 1.0), vec4(_1015, _1018, _1021, _1024));
    float _1126;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1099 = dot(vec4(_1083, _1084, _1085, 1.0), vec4(_705, _709, _712, _715));
        float _1103 = dot(vec4(_1083, _1084, _1085, 1.0), vec4(_707, _710, _713, _716));
        float _1107 = dot(vec4(_1083, _1084, _1085, 1.0), vec4(_708, _711, _714, _717));
        float _1114 = dot(vec4(cbModelParam._m0[39u]), vec4(_1083, _1084, _1085, 1.0));
        _1126 = dot(vec3(isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)), isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)), isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1114) ? 0.0 : (isnan(0.0) ? _1114 : max(0.0, _1114))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1126 = 1.0;
    }
    float _1137;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1128 = dot(vec4(cbModelParam._m0[40u]), vec4(_1083, _1084, _1085, 1.0));
        _1137 = dot(vec3(isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0)), isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0)), isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1128) ? 0.0 : (isnan(0.0) ? _1128 : max(0.0, _1128))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1137 = 1.0;
    }
    float _1141 = (_1137 * cbModelParam._m0[1u].x) + (_1126 * (1.0 - cbModelParam._m0[1u].x));
    float _1150 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1232;
    float _1234;
    float _1236;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1199 = fma(_403, cbModelParam._m0[13u].z, fma(_399, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _395)) + cbModelParam._m0[13u].w;
        float _1203 = fma(_403, cbModelParam._m0[14u].z, fma(_399, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _395)) + cbModelParam._m0[14u].w;
        float _1207 = fma(_403, cbModelParam._m0[15u].z, fma(_399, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _395)) + cbModelParam._m0[15u].w;
        float _1210 = fma(_373, cbModelParam._m0[13u].z, fma(_372, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _371));
        float _1213 = fma(_373, cbModelParam._m0[14u].z, fma(_372, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _371));
        float _1216 = fma(_373, cbModelParam._m0[15u].z, fma(_372, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _371));
        float _1242;
        if (_1210 > 0.0)
        {
            _1242 = abs((1.0 - _1199) / _1210);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1210 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1199 + 1.0) / _1210);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1242 = frontier_phi_16_14_ladder;
        }
        float _1471;
        if (_1213 > 0.0)
        {
            _1471 = abs((1.0 - _1203) / _1213);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1213 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1203 + 1.0) / _1213);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1471 = frontier_phi_25_21_ladder;
        }
        float _1663;
        if (_1216 > 0.0)
        {
            _1663 = abs((1.0 - _1207) / _1216);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1216 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1207 + 1.0) / _1216);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1663 = frontier_phi_37_32_ladder;
        }
        float _1665 = isnan(_1471) ? _1242 : (isnan(_1242) ? _1471 : min(_1242, _1471));
        float _1666 = isnan(_1663) ? _1665 : (isnan(_1665) ? _1663 : min(_1665, _1663));
        float _1670 = (_1666 * _1210) + _1199;
        float _1671 = (_1666 * _1213) + _1203;
        float _1672 = (_1666 * _1216) + _1207;
        float _1673 = _1666 * 9.9999997473787516355514526367188e-05;
        float _1675 = (-1.0) - _1673;
        float _1677 = _1673 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1672 > _1677) || ((_1672 < _1675) || ((_1671 > _1677) || ((_1671 < _1675) || ((_1670 < _1675) || (_1670 > _1677))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1769 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1672, cbModelParam._m0[9u].z, fma(_1671, cbModelParam._m0[9u].y, _1670 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1672, cbModelParam._m0[10u].z, fma(_1671, cbModelParam._m0[10u].y, _1670 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1672, cbModelParam._m0[11u].z, fma(_1671, cbModelParam._m0[11u].y, _1670 * cbModelParam._m0[11u].x))), _1150);
            frontier_phi_15_37_ladder = _1769.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1769.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1769.x * cbModelParam._m0[1u].y;
        }
        _1232 = frontier_phi_15_37_ladder_2;
        _1234 = frontier_phi_15_37_ladder_1;
        _1236 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1220 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_371, _372, _373), _1150);
        _1232 = _1220.x * cbModelParam._m0[1u].y;
        _1234 = _1220.y * cbModelParam._m0[1u].y;
        _1236 = _1220.z * cbModelParam._m0[1u].y;
    }
    float _1239 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1332;
    float _1334;
    float _1336;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1296 = fma(_403, cbModelParam._m0[21u].z, fma(_399, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _395)) + cbModelParam._m0[21u].w;
        float _1300 = fma(_403, cbModelParam._m0[22u].z, fma(_399, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _395)) + cbModelParam._m0[22u].w;
        float _1304 = fma(_403, cbModelParam._m0[23u].z, fma(_399, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _395)) + cbModelParam._m0[23u].w;
        float _1307 = fma(_373, cbModelParam._m0[21u].z, fma(_372, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _371));
        float _1310 = fma(_373, cbModelParam._m0[22u].z, fma(_372, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _371));
        float _1313 = fma(_373, cbModelParam._m0[23u].z, fma(_372, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _371));
        float _1476;
        if (_1307 > 0.0)
        {
            _1476 = abs((1.0 - _1296) / _1307);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1307 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1296 + 1.0) / _1307);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1476 = frontier_phi_27_23_ladder;
        }
        float _1690;
        if (_1310 > 0.0)
        {
            _1690 = abs((1.0 - _1300) / _1310);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1310 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1300 + 1.0) / _1310);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1690 = frontier_phi_39_34_ladder;
        }
        float _1841;
        if (_1313 > 0.0)
        {
            _1841 = abs((1.0 - _1304) / _1313);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1313 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1304 + 1.0) / _1313);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _1841 = frontier_phi_48_45_ladder;
        }
        float _1843 = isnan(_1690) ? _1476 : (isnan(_1476) ? _1690 : min(_1476, _1690));
        float _1844 = isnan(_1841) ? _1843 : (isnan(_1843) ? _1841 : min(_1843, _1841));
        float _1848 = (_1844 * _1307) + _1296;
        float _1849 = (_1844 * _1310) + _1300;
        float _1850 = (_1844 * _1313) + _1304;
        float _1851 = _1844 * 9.9999997473787516355514526367188e-05;
        float _1852 = (-1.0) - _1851;
        float _1854 = _1851 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1850 > _1854) || ((_1850 < _1852) || ((_1849 > _1854) || ((_1849 < _1852) || ((_1848 < _1852) || (_1848 > _1854))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2048 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1850, cbModelParam._m0[17u].z, fma(_1849, cbModelParam._m0[17u].y, _1848 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1850, cbModelParam._m0[18u].z, fma(_1849, cbModelParam._m0[18u].y, _1848 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1850, cbModelParam._m0[19u].z, fma(_1849, cbModelParam._m0[19u].y, _1848 * cbModelParam._m0[19u].x))), _1239);
            frontier_phi_24_48_ladder = _2048.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2048.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2048.x * cbModelParam._m0[1u].z;
        }
        _1332 = frontier_phi_24_48_ladder_2;
        _1334 = frontier_phi_24_48_ladder_1;
        _1336 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1316 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_371, _372, _373), _1239);
        _1332 = _1316.x * cbModelParam._m0[1u].z;
        _1334 = _1316.y * cbModelParam._m0[1u].z;
        _1336 = _1316.z * cbModelParam._m0[1u].z;
    }
    float _1348 = _362 * 0.01200000010430812835693359375;
    float _1350 = _1348 * ((cbModelParam._m0[1u].w * (_1332 - _1232)) + _1232);
    float _1351 = _1348 * ((cbModelParam._m0[1u].w * (_1334 - _1234)) + _1234);
    float _1352 = _1348 * ((cbModelParam._m0[1u].w * (_1336 - _1236)) + _1236);
    float _1355 = fma(_1352, cbSceneParam._m0[89u].z, fma(_1351, cbSceneParam._m0[89u].y, _1350 * cbSceneParam._m0[89u].x));
    float _1358 = fma(_1352, cbSceneParam._m0[90u].z, fma(_1351, cbSceneParam._m0[90u].y, _1350 * cbSceneParam._m0[90u].x));
    float _1361 = fma(_1352, cbSceneParam._m0[91u].z, fma(_1351, cbSceneParam._m0[91u].y, _1350 * cbSceneParam._m0[91u].x));
    vec4 _1369 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_295, _296));
    float _1371 = _1369.w;
    float _1383 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1371);
    float _1384 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1371);
    float _1385 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1371);
    uvec4 _1389 = floatBitsToUint(cbInstanceData._m0[_336 + 5u]);
    uint _1391 = _1389.x * 14u;
    uint _1392 = _1391 + 13u;
    float _1399 = _362 + (-1.0);
    float _1405 = (cbLight._m0[_1392].x * _1399) + 1.0;
    float _1406 = (cbLight._m0[_1392].y * _1399) + 1.0;
    float _1407 = (cbLight._m0[_1392].z * _1399) + 1.0;
    float _1408 = (cbLight._m0[_1392].w * _1399) + 1.0;
    uint _1409 = _1391 + 5u;
    float _1415 = isnan(1.0) ? _1406 : (isnan(_1406) ? 1.0 : min(_1406, 1.0));
    uint _1419 = _1391 + 4u;
    float _1429 = isnan(1.0) ? _1405 : (isnan(_1405) ? 1.0 : min(_1405, 1.0));
    uint _1433 = _1391 | 1u;
    float _1444 = dot(vec3(cbLight._m0[_1391].xyz), vec3(_206, _207, _208));
    float _1447 = dot(vec3(cbLight._m0[_1433].xyz), vec3(_206, _207, _208));
    float _3274 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
    float _3285 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
    float _1452 = (isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0))) * 0.3183098733425140380859375;
    float _1454 = (isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0))) * 0.3183098733425140380859375;
    float _1461 = ((cbLight._m0[_1409].x * _1415) * _1454) + (((cbLight._m0[_1419].x * _1383) * _1429) * _1452);
    float _1462 = ((_1415 * cbLight._m0[_1409].y) * _1454) + (((cbLight._m0[_1419].y * _1384) * _1429) * _1452);
    float _1463 = ((_1415 * cbLight._m0[_1409].z) * _1454) + (((cbLight._m0[_1419].z * _1385) * _1429) * _1452);
    uvec4 _1468 = floatBitsToUint(cbLight._m0[_1391 + 12u]);
    bool _1470 = _1468.x == 0u;
    float _1481;
    float _1483;
    float _1485;
    if (_1470)
    {
        _1481 = _1461;
        _1483 = _1462;
        _1485 = _1463;
    }
    else
    {
        uint _1489 = _1391 + 6u;
        float _1505 = (dot(vec3(cbLight._m0[_1391 + 2u].xyz), vec3(_206, _207, _208)) * 0.5) + 0.5;
        float _1506 = _1505 * _1505;
        float _3296 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
        float _1508 = isnan(1.0) ? _1407 : (isnan(_1407) ? 1.0 : min(_1407, 1.0));
        _1481 = (((cbLight._m0[_1489].x * 0.3183098733425140380859375) * _1507) * _1508) + _1461;
        _1483 = (((cbLight._m0[_1489].y * 0.3183098733425140380859375) * _1507) * _1508) + _1462;
        _1485 = (((cbLight._m0[_1489].z * 0.3183098733425140380859375) * _1507) * _1508) + _1463;
    }
    bool _1488 = _1468.y == 0u;
    float _1526;
    float _1528;
    float _1530;
    if (_1488)
    {
        _1526 = _1481;
        _1528 = _1483;
        _1530 = _1485;
    }
    else
    {
        uint _1634 = _1391 + 7u;
        float _1650 = (dot(vec3(cbLight._m0[_1391 + 3u].xyz), vec3(_206, _207, _208)) * 0.5) + 0.5;
        float _1651 = _1650 * _1650;
        float _3312 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
        float _1653 = isnan(1.0) ? _1408 : (isnan(_1408) ? 1.0 : min(_1408, 1.0));
        _1526 = (((cbLight._m0[_1634].x * 0.3183098733425140380859375) * _1652) * _1653) + _1481;
        _1528 = (((cbLight._m0[_1634].y * 0.3183098733425140380859375) * _1652) * _1653) + _1483;
        _1530 = (((cbLight._m0[_1634].z * 0.3183098733425140380859375) * _1652) * _1653) + _1485;
    }
    uint _1532 = _1391 + 8u;
    float _1538 = cbLight._m0[_1391].x + _287;
    float _1539 = cbLight._m0[_1391].y + _288;
    float _1540 = cbLight._m0[_1391].z + _289;
    float _1544 = inversesqrt(dot(vec3(_1538, _1539, _1540), vec3(_1538, _1539, _1540)));
    float _1548 = dot(vec3(_206, _207, _208), vec3(cbLight._m0[_1391].xyz));
    float _3328 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
    float _1551 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
    float _3339 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _1552 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
    float _1553 = dot(vec3(cbLight._m0[_1391].xyz), vec3(_1538 * _1544, _1539 * _1544, _1540 * _1544));
    float _3350 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
    float _1564 = (exp2(log2(1.0 - (isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1570 = (0.5 / ((_1551 + 9.9999999392252902907785028219223e-09) + _1552)) * _1551;
    float _3361 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
    float _1572 = (isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0))) * 0.31831014156341552734375;
    uint _1586 = _1391 + 9u;
    float _1592 = cbLight._m0[_1433].x + _287;
    float _1593 = cbLight._m0[_1433].y + _288;
    float _1594 = cbLight._m0[_1433].z + _289;
    float _1598 = inversesqrt(dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594)));
    float _1602 = dot(vec3(_206, _207, _208), vec3(cbLight._m0[_1433].xyz));
    float _3372 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
    float _1605 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
    float _1606 = dot(vec3(cbLight._m0[_1433].xyz), vec3(_1592 * _1598, _1593 * _1598, _1594 * _1598));
    float _3383 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
    float _1615 = (exp2(log2(1.0 - (isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1619 = (0.5 / ((_1605 + 9.9999999392252902907785028219223e-09) + _1552)) * _1605;
    float _3394 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
    float _1621 = (isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0))) * 0.31831014156341552734375;
    float _1631 = (((_1615 * cbLight._m0[_1586].x) * _1621) * _1415) + ((((cbLight._m0[_1532].x * _1383) * _1564) * _1572) * _1429);
    float _1632 = (((_1615 * cbLight._m0[_1586].y) * _1621) * _1415) + ((((cbLight._m0[_1532].y * _1384) * _1564) * _1572) * _1429);
    float _1633 = (((_1615 * cbLight._m0[_1586].z) * _1621) * _1415) + ((((cbLight._m0[_1532].z * _1385) * _1564) * _1572) * _1429);
    float _1695;
    float _1697;
    float _1699;
    if (_1470)
    {
        _1695 = _1631;
        _1697 = _1632;
        _1699 = _1633;
    }
    else
    {
        uint _1701 = _1391 + 10u;
        uint _1707 = _1391 + 2u;
        float _1713 = cbLight._m0[_1707].x + _287;
        float _1714 = cbLight._m0[_1707].y + _288;
        float _1715 = cbLight._m0[_1707].z + _289;
        float _1719 = inversesqrt(dot(vec3(_1713, _1714, _1715), vec3(_1713, _1714, _1715)));
        float _1723 = dot(vec3(_206, _207, _208), vec3(cbLight._m0[_1707].xyz));
        float _3405 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1726 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
        float _1727 = dot(vec3(cbLight._m0[_1707].xyz), vec3(_1713 * _1719, _1714 * _1719, _1715 * _1719));
        float _3416 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1736 = (exp2(log2(1.0 - (isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1740 = (0.5 / ((_1726 + 9.9999999392252902907785028219223e-09) + _1552)) * _1726;
        float _3427 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1742 = (isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0))) * 0.31831014156341552734375;
        float _1743 = isnan(1.0) ? _1407 : (isnan(_1407) ? 1.0 : min(_1407, 1.0));
        _1695 = (((_1736 * cbLight._m0[_1701].x) * _1742) * _1743) + _1631;
        _1697 = (((_1736 * cbLight._m0[_1701].y) * _1742) * _1743) + _1632;
        _1699 = (((_1736 * cbLight._m0[_1701].z) * _1742) * _1743) + _1633;
    }
    float _1778;
    float _1780;
    float _1782;
    if (_1488)
    {
        _1778 = _1695;
        _1780 = _1697;
        _1782 = _1699;
    }
    else
    {
        uint _1789 = _1391 + 11u;
        uint _1795 = _1391 + 3u;
        float _1801 = cbLight._m0[_1795].x + _287;
        float _1802 = cbLight._m0[_1795].y + _288;
        float _1803 = cbLight._m0[_1795].z + _289;
        float _1807 = inversesqrt(dot(vec3(_1801, _1802, _1803), vec3(_1801, _1802, _1803)));
        float _1811 = dot(vec3(_206, _207, _208), vec3(cbLight._m0[_1795].xyz));
        float _3443 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1814 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
        float _1815 = dot(vec3(cbLight._m0[_1795].xyz), vec3(_1801 * _1807, _1802 * _1807, _1803 * _1807));
        float _3454 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1824 = (exp2(log2(1.0 - (isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1828 = (0.5 / ((_1814 + 9.9999999392252902907785028219223e-09) + _1552)) * _1814;
        float _3465 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
        float _1830 = (isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0))) * 0.31831014156341552734375;
        float _1831 = isnan(1.0) ? _1408 : (isnan(_1408) ? 1.0 : min(_1408, 1.0));
        _1778 = (((_1824 * cbLight._m0[_1789].x) * _1830) * _1831) + _1695;
        _1780 = (((_1824 * cbLight._m0[_1789].y) * _1830) * _1831) + _1697;
        _1782 = (((_1824 * cbLight._m0[_1789].z) * _1830) * _1831) + _1699;
    }
    float _1965;
    float _1967;
    float _1969;
    float _1971;
    float _1973;
    float _1975;
    if (_1389.y == 0u)
    {
        float _1906 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1907 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1906;
        float _1908 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1906;
        float _1909 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1906;
        uvec4 _1921 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1922 = _1921.x;
        uint _1933 = uint((float(_1921.y) * floor(float(uint(cbSceneParam._m0[85u].y * _296) / _1922))) + floor(float(uint(cbSceneParam._m0[85u].x * _295) / _1922)));
        float _1943 = (log2(_1909 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1944 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        uint _1947 = uint(isnan(14.0) ? _1944 : (isnan(_1944) ? 14.0 : min(_1944, 14.0)));
        uvec4 _1952 = texelFetch(g_lightClusterGridBuffer, int(((_1947 << 2u) + (_1933 << 6u)) >> 2u));
        uint _1953 = _1952.x;
        uint _1954 = _1921.z;
        float _2053;
        float _2055;
        float _2057;
        float _2059;
        float _2061;
        float _2063;
        if (((((1u << ((_1954 >> 4u) & 15u)) + 4294967295u) & _1953) == 0u) || ((_1954 & 240u) == 0u))
        {
            _2053 = 0.0;
            _2055 = 0.0;
            _2057 = 0.0;
            _2059 = 0.0;
            _2061 = 0.0;
            _2063 = 0.0;
        }
        else
        {
            float _2054;
            float _2056;
            float _2058;
            float _2060;
            float _2062;
            float _2064;
            float _2195 = 0.0;
            float _2196 = 0.0;
            float _2197 = 0.0;
            float _2198 = 0.0;
            float _2199 = 0.0;
            float _2200 = 0.0;
            uint _2201 = 0u;
            uint _2210;
            bool _2211;
            for (;;)
            {
                _2210 = texelFetch(g_lightClassification, int((((_1947 << 5u) + (_1933 << 9u)) + (_2201 << 2u)) >> 2u)).x;
                _2211 = _2210 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2211)
                {
                    frontier_phi_63_pred = _2200;
                    frontier_phi_63_pred_1 = _2199;
                    frontier_phi_63_pred_2 = _2198;
                    frontier_phi_63_pred_3 = _2197;
                    frontier_phi_63_pred_4 = _2196;
                    frontier_phi_63_pred_5 = _2195;
                }
                else
                {
                    float _2319;
                    float _2320;
                    float _2321;
                    float _2322;
                    float _2323;
                    float _2324;
                    uint _2325;
                    _2319 = _2195;
                    _2320 = _2196;
                    _2321 = _2197;
                    _2322 = _2198;
                    _2323 = _2199;
                    _2324 = _2200;
                    _2325 = _2210;
                    float _2251;
                    float _2252;
                    float _2253;
                    float _2254;
                    float _2255;
                    float _2256;
                    for (;;)
                    {
                        uint _2329 = uint(findLSB(_2325)) + (_2201 << 5u);
                        uint _2326 = (_2325 + 4294967295u) & _2325;
                        uint _2331 = _2329 * 48u;
                        vec4 _2345 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2331)).x, texelFetch(g_PointLightRenderingBuffer, int(_2331 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2331 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2331 + 3u)).x));
                        uint _2351 = (_2329 * 48u) + 4u;
                        vec4 _2364 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2351)).x, texelFetch(g_PointLightRenderingBuffer, int(_2351 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2351 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2351 + 3u)).x));
                        uint _2370 = (_2329 * 48u) + 8u;
                        vec3 _2381 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2370)).x, texelFetch(g_PointLightRenderingBuffer, int(_2370 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2370 + 2u)).x));
                        float _2385 = _2345.x - _1907;
                        float _2386 = _2345.y - _1908;
                        float _2387 = _2345.z - _1909;
                        float _2388 = dot(vec3(_2385, _2386, _2387), vec3(_2385, _2386, _2387));
                        float _2391 = inversesqrt(_2388);
                        float _2400 = 1.0 - (_2388 * _2345.w);
                        float _3491 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
                        float _2401 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
                        float _2402 = sqrt(_2388) * _2364.w;
                        float _2405 = 1.39999997615814208984375 / (_2402 + 1.39999997615814208984375);
                        float _2406 = _2405 * _2405;
                        float _2409 = ((1.0 - _2406) * dot(vec3(_317, _320, _323), vec3(_2391 * _2385, _2391 * _2386, _2391 * _2387))) + _2406;
                        float _2412 = _2402 * _2402;
                        float _2416 = ((isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0))) * _2401) / ((_2412 * 0.699999988079071044921875) + 1.0);
                        float _2420 = (-0.0) - _1907;
                        float _2421 = (-0.0) - _1908;
                        float _2422 = (-0.0) - _1909;
                        float _2426 = inversesqrt(dot(vec3(_2420, _2421, _2422), vec3(_2420, _2421, _2422)));
                        float _2430 = dot(vec3(_317, _320, _323), vec3(_2426 * _2420, _2426 * _2421, _2426 * _2422));
                        float _3507 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
                        float _3518 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
                        float _2434 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
                        float _2438 = (0.5 / (((isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))) + 9.9999999392252902907785028219223e-09) + _2434)) * _2434;
                        float _3529 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
                        float _2447 = (((isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) * 3.1415927410125732421875) / ((_2412 * 2.1991131305694580078125) + 3.141590118408203125)) * _2401;
                        _2254 = (_2416 * _2364.x) + _2322;
                        _2255 = (_2416 * _2364.y) + _2323;
                        _2256 = (_2416 * _2364.z) + _2324;
                        _2251 = (_2447 * _2381.x) + _2319;
                        _2252 = (_2447 * _2381.y) + _2320;
                        _2253 = (_2447 * _2381.z) + _2321;
                        if (_2326 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2319 = _2251;
                            _2320 = _2252;
                            _2321 = _2253;
                            _2322 = _2254;
                            _2323 = _2255;
                            _2324 = _2256;
                            _2325 = _2326;
                        }
                    }
                    frontier_phi_63_pred = _2256;
                    frontier_phi_63_pred_1 = _2255;
                    frontier_phi_63_pred_2 = _2254;
                    frontier_phi_63_pred_3 = _2253;
                    frontier_phi_63_pred_4 = _2252;
                    frontier_phi_63_pred_5 = _2251;
                }
                _2064 = frontier_phi_63_pred;
                _2062 = frontier_phi_63_pred_1;
                _2060 = frontier_phi_63_pred_2;
                _2058 = frontier_phi_63_pred_3;
                _2056 = frontier_phi_63_pred_4;
                _2054 = frontier_phi_63_pred_5;
                uint _2202 = _2201 + 1u;
                if (_2202 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2195 = _2054;
                    _2196 = _2056;
                    _2197 = _2058;
                    _2198 = _2060;
                    _2199 = _2062;
                    _2200 = _2064;
                    _2201 = _2202;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2053 = _2054;
            _2055 = _2056;
            _2057 = _2058;
            _2059 = _2060;
            _2061 = _2062;
            _2063 = _2064;
        }
        uvec4 _2067 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2068 = _2067.z;
        uint _2070 = (_2068 >> 8u) & 15u;
        float _2166;
        float _2168;
        float _2170;
        float _2172;
        float _2174;
        float _2176;
        if (((4294967295u << _2070) & _1953) == 0u)
        {
            _2166 = _2053;
            _2168 = _2055;
            _2170 = _2057;
            _2172 = _2059;
            _2174 = _2061;
            _2176 = _2063;
        }
        else
        {
            float _2191 = inversesqrt(dot(vec3(_1907, _1908, _1909), vec3(_1907, _1908, _1909)));
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2070 < ((_2068 >> 12u) & 15u))
            {
                float _2167;
                float _2169;
                float _2171;
                float _2173;
                float _2175;
                float _2177;
                float _2302 = _2053;
                float _2303 = _2055;
                float _2304 = _2057;
                float _2305 = _2059;
                float _2306 = _2061;
                float _2307 = _2063;
                uint _2308 = _2070;
                uint _2317;
                bool _2318;
                for (;;)
                {
                    _2317 = texelFetch(g_lightClassification, int((((_1947 << 5u) + (_1933 << 9u)) + (_2308 << 2u)) >> 2u)).x;
                    _2318 = _2317 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2318)
                    {
                        frontier_phi_69_pred = _2307;
                        frontier_phi_69_pred_1 = _2306;
                        frontier_phi_69_pred_2 = _2305;
                        frontier_phi_69_pred_3 = _2304;
                        frontier_phi_69_pred_4 = _2303;
                        frontier_phi_69_pred_5 = _2302;
                    }
                    else
                    {
                        float _2452;
                        float _2453;
                        float _2454;
                        float _2455;
                        float _2456;
                        float _2457;
                        float _2704;
                        float _2705;
                        float _2706;
                        float _2707;
                        float _2708;
                        float _2709;
                        float _2465 = _2302;
                        float _2466 = _2303;
                        float _2467 = _2304;
                        float _2468 = _2305;
                        float _2469 = _2306;
                        float _2470 = _2307;
                        uint _2471 = _2317;
                        uint _2472;
                        vec4 _2497;
                        float _2498;
                        vec4 _2513;
                        vec3 _2525;
                        vec4 _2541;
                        vec4 _2557;
                        float _2604;
                        bool _2605;
                        for (;;)
                        {
                            uint _2482 = ((_2308 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2471));
                            _2472 = (_2471 + 4294967295u) & _2471;
                            uint _2484 = _2482 * 40u;
                            _2497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2484 + 3u)).x));
                            _2498 = _2497.w;
                            uint _2500 = (_2482 * 40u) + 4u;
                            _2513 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2500 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2500 + 3u)).x));
                            uint _2515 = (_2482 * 40u) + 8u;
                            _2525 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2515 + 2u)).x));
                            uint _2528 = (_2482 * 40u) + 16u;
                            _2541 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2528 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2528 + 3u)).x));
                            uint _2544 = (_2482 * 40u) + 20u;
                            _2557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2544 + 3u)).x));
                            uint _2560 = (_2482 * 40u) + 24u;
                            vec4 _2573 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2560)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2560 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2560 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2560 + 3u)).x));
                            uint _2579 = (_2482 * 40u) + 28u;
                            vec4 _2592 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2579 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2579 + 3u)).x));
                            _2604 = fma(_1909, _2592.z, fma(_1908, _2592.y, _2592.x * _1907)) + _2592.w;
                            _2605 = !((fma(_1909, _2573.z, fma(_1908, _2573.y, _2573.x * _1907)) + _2573.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2605)
                            {
                                float _2632 = _2497.x - _1907;
                                float _2633 = _2497.y - _1908;
                                float _2634 = _2497.z - _1909;
                                float _2635 = dot(vec3(_2632, _2633, _2634), vec3(_2632, _2633, _2634));
                                float _2638 = inversesqrt(_2635);
                                float _2639 = _2638 * _2632;
                                float _2640 = _2638 * _2633;
                                float _2641 = _2638 * _2634;
                                float _2645 = 1.0 - (_2635 / (_2498 * _2498));
                                float _3540 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
                                float _2646 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
                                float _2650 = sqrt(_2635) * _2513.w;
                                float _2652 = 1.39999997615814208984375 / (_2650 + 1.39999997615814208984375);
                                float _2653 = _2652 * _2652;
                                float _2654 = 1.0 - _2653;
                                float _2656 = (_2654 * dot(vec3(_2639, _2640, _2641), vec3(_317, _320, _323))) + _2653;
                                float _2659 = _2650 * _2650;
                                float _2663 = (fma(_1909, _2541.z, fma(_1908, _2541.y, _2541.x * _1907)) + _2541.w) / _2604;
                                float _2664 = (fma(_1909, _2557.z, fma(_1908, _2557.y, _2557.x * _1907)) + _2557.w) / _2604;
                                float _2668 = 1.0 - dot(vec2(_2663, _2664), vec2(_2663, _2664));
                                float _3556 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
                                float _2669 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
                                float _2670 = _2669 * (((isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0))) * _2646) / ((_2659 * 0.699999988079071044921875) + 1.0));
                                float _2680 = dot(vec3(_317, _320, _323), vec3((-0.0) - (_1907 * _2191), (-0.0) - (_1908 * _2191), (-0.0) - (_1909 * _2191)));
                                float _3567 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
                                float _2688 = (_2654 * dot(vec3(_317, _320, _323), vec3(_2639, _2640, _2641))) + _2653;
                                float _3578 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
                                float _2689 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
                                float _2693 = (0.5 / (((isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) + 9.9999999392252902907785028219223e-09) + _2689)) * _2689;
                                float _3589 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
                                float _2700 = (_2669 * _2646) * (((isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * 3.1415927410125732421875) / ((_2659 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_75_pred = _2670 * _2513.z;
                                frontier_phi_75_pred_1 = _2670 * _2513.y;
                                frontier_phi_75_pred_2 = _2670 * _2513.x;
                                frontier_phi_75_pred_3 = _2700 * _2525.z;
                                frontier_phi_75_pred_4 = _2700 * _2525.y;
                                frontier_phi_75_pred_5 = _2700 * _2525.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _2709 = frontier_phi_75_pred;
                            _2708 = frontier_phi_75_pred_1;
                            _2707 = frontier_phi_75_pred_2;
                            _2706 = frontier_phi_75_pred_3;
                            _2705 = frontier_phi_75_pred_4;
                            _2704 = frontier_phi_75_pred_5;
                            _2455 = _2707 + _2468;
                            _2456 = _2708 + _2469;
                            _2457 = _2709 + _2470;
                            _2452 = _2704 + _2465;
                            _2453 = _2705 + _2466;
                            _2454 = _2706 + _2467;
                            if (_2472 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2465 = _2452;
                                _2466 = _2453;
                                _2467 = _2454;
                                _2468 = _2455;
                                _2469 = _2456;
                                _2470 = _2457;
                                _2471 = _2472;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2457;
                        frontier_phi_69_pred_1 = _2456;
                        frontier_phi_69_pred_2 = _2455;
                        frontier_phi_69_pred_3 = _2454;
                        frontier_phi_69_pred_4 = _2453;
                        frontier_phi_69_pred_5 = _2452;
                    }
                    _2177 = frontier_phi_69_pred;
                    _2175 = frontier_phi_69_pred_1;
                    _2173 = frontier_phi_69_pred_2;
                    _2171 = frontier_phi_69_pred_3;
                    _2169 = frontier_phi_69_pred_4;
                    _2167 = frontier_phi_69_pred_5;
                    uint _2309 = _2308 + 1u;
                    if (_2309 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2302 = _2167;
                        _2303 = _2169;
                        _2304 = _2171;
                        _2305 = _2173;
                        _2306 = _2175;
                        _2307 = _2177;
                        _2308 = _2309;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2177;
                frontier_phi_57_58_ladder_1 = _2175;
                frontier_phi_57_58_ladder_2 = _2173;
                frontier_phi_57_58_ladder_3 = _2171;
                frontier_phi_57_58_ladder_4 = _2169;
                frontier_phi_57_58_ladder_5 = _2167;
            }
            else
            {
                frontier_phi_57_58_ladder = _2063;
                frontier_phi_57_58_ladder_1 = _2061;
                frontier_phi_57_58_ladder_2 = _2059;
                frontier_phi_57_58_ladder_3 = _2057;
                frontier_phi_57_58_ladder_4 = _2055;
                frontier_phi_57_58_ladder_5 = _2053;
            }
            _2166 = frontier_phi_57_58_ladder_5;
            _2168 = frontier_phi_57_58_ladder_4;
            _2170 = frontier_phi_57_58_ladder_3;
            _2172 = frontier_phi_57_58_ladder_2;
            _2174 = frontier_phi_57_58_ladder_1;
            _2176 = frontier_phi_57_58_ladder;
        }
        float _2181 = isnan(1.0) ? _362 : (isnan(_362) ? 1.0 : min(_362, 1.0));
        _1965 = (_2181 * _2172) + _1526;
        _1967 = (_2181 * _2174) + _1528;
        _1969 = (_2181 * _2176) + _1530;
        _1971 = ((_2166 * 0.039999999105930328369140625) * _2181) + _1778;
        _1973 = ((_2168 * 0.039999999105930328369140625) * _2181) + _1780;
        _1975 = ((_2170 * 0.039999999105930328369140625) * _2181) + _1782;
    }
    else
    {
        _1965 = _1526;
        _1967 = _1528;
        _1969 = _1530;
        _1971 = _1778;
        _1973 = _1780;
        _1975 = _1782;
    }
    float _3605 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _3616 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _3627 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    uint _1995 = _336 + 6u;
    float _2003 = _295 / cbSceneParam._m0[86u].x;
    float _2004 = _296 / cbSceneParam._m0[86u].y;
    vec4 _2018 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2003, _2004, (log2((isnan(cbSceneParam._m0[77u].w) ? _228 : (isnan(_228) ? cbSceneParam._m0[77u].w : min(_228, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2020 = _2018.x;
    float _2021 = _2018.y;
    float _2022 = _2018.z;
    float _2023 = _2018.w;
    float _2115;
    float _2117;
    float _2119;
    float _2121;
    if (_228 > cbSceneParam._m0[78u].w)
    {
        float _2078 = isnan(_228) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _228 : min(cbSceneParam._m0[80u].w, _228));
        float _2079 = _2078 / _228;
        float _2090 = _2079 * _280;
        float _2091 = _281 * _2079;
        float _2092 = (-0.0) - _2091;
        float _2093 = _2079 * _282;
        float _2095 = (cbSceneParam._m0[77u].w * _2092) / _2078;
        float _2096 = _2095 + cbSceneParam._m0[79u].w;
        float _2097 = cbSceneParam._m0[79u].w - _2091;
        float _2103 = sqrt(((_2090 * _2090) + (_2091 * _2091)) + (_2093 * _2093));
        float _2106 = (1.0 - (cbSceneParam._m0[77u].w / _2078)) * _2103;
        float _2111 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2113 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2264;
        if (abs((_2092 - _2095) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2264 = ((((_2096 > 0.0) ? exp2(_2111 * _2096) : (2.0 - exp2(_2113 * _2096))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2106;
        }
        else
        {
            float _2224 = 1.0 / cbSceneParam._m0[80u].x;
            float _2225 = isnan(_2097) ? _2096 : (isnan(_2096) ? _2097 : max(_2096, _2097));
            float _2226 = isnan(_2097) ? _2096 : (isnan(_2096) ? _2097 : min(_2096, _2097));
            float _2235 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : min(_2225, 0.0));
            float _2236 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : min(_2226, 0.0));
            _2264 = ((abs(_2103 / _2092) * cbSceneParam._m0[80u].y) * ((((_2235 - _2236) * 2.0) - ((exp2(_2111 * (isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0)))) - exp2(_2111 * (isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0))))) * _2224)) - ((exp2(_2113 * _2235) - exp2(_2113 * _2236)) * _2224))) + (_2106 * cbSceneParam._m0[80u].z);
        }
        vec4 _2266 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2003, _2004, 1.0), 0.0);
        float _2275 = exp2((_2264 * (-1.44269502162933349609375)) * (1.0 - _2266.w));
        float _2276 = log2(_2275);
        float _2292 = log2(_2023);
        _2115 = (exp2(_2292 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2276 * cbSceneParam._m0[78u].x)) * _2266.x) / cbSceneParam._m0[78u].x)) + _2020;
        _2117 = (exp2(_2292 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2276 * cbSceneParam._m0[78u].y)) * _2266.y) / cbSceneParam._m0[78u].y)) + _2021;
        _2119 = (exp2(_2292 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2276 * cbSceneParam._m0[78u].z)) * _2266.z) / cbSceneParam._m0[78u].z)) + _2022;
        _2121 = _2275 * _2023;
    }
    else
    {
        _2115 = _2020;
        _2117 = _2021;
        _2119 = _2022;
        _2121 = _2023;
    }
    float _2133 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2134 = _2133 == 3.0;
    float _2136 = log2(_2121);
    float _2143 = exp2(_2136 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * (_1965 + ((isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0))) * _362))) + ((_1971 + ((isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0))) * _1141)) * cbPerFrame._m0[3u].x));
    float _2144 = exp2(_2136 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) * (_1967 + ((isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0))) * _362))) + ((_1973 + ((isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0))) * _1141)) * cbPerFrame._m0[3u].x));
    float _2145 = exp2(_2136 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) * (_1969 + ((isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0))) * _362))) + ((_1975 + ((isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0))) * _1141)) * cbPerFrame._m0[3u].x));
    float _2154 = (_2133 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2154 * (_2134 ? _2143 : (_2143 + (cbSceneParam._m0[72u].w * _2115)));
    SV_Target.y = _2154 * (_2134 ? _2144 : (_2144 + (cbSceneParam._m0[72u].w * _2117)));
    SV_Target.z = _2154 * (_2134 ? _2145 : (_2145 + (cbSceneParam._m0[72u].w * _2119)));
    SV_Target.w = cbInstanceData._m0[_1995].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1995].w;
}


