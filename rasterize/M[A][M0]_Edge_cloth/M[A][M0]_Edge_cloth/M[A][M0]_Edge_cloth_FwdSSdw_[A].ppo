#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _752;
float _2941;
float _2942;
float _2943;
float _2944;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _167 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _168 = _167 * NORMAL.x;
    float _169 = _167 * NORMAL.y;
    float _170 = _167 * NORMAL.z;
    float _175;
    float _176;
    float _177;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _175 = (-0.0) - _168;
        _176 = (-0.0) - _169;
        _177 = (-0.0) - _170;
    }
    else
    {
        _175 = _168;
        _176 = _169;
        _177 = _170;
    }
    vec4 _197 = texture(sampler2D(M_A_M0_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _203 = _197.w;
    float _204 = _197.x * cbMtdParam._m0[9u].x;
    float _205 = _197.y * cbMtdParam._m0[9u].y;
    float _206 = _197.z * cbMtdParam._m0[9u].z;
    float _210 = inversesqrt(dot(vec3(_175, _176, _177), vec3(_175, _176, _177)));
    float _211 = _210 * _175;
    float _212 = _210 * _176;
    float _213 = _210 * _177;
    float _2953 = isnan(0.0) ? _204 : (isnan(_204) ? 0.0 : max(_204, 0.0));
    float _2964 = isnan(0.0) ? _205 : (isnan(_205) ? 0.0 : max(_205, 0.0));
    float _2975 = isnan(0.0) ? _206 : (isnan(_206) ? 0.0 : max(_206, 0.0));
    float _233 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _275 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _285 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _275);
    float _286 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _275);
    float _287 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _275);
    float _291 = inversesqrt(dot(vec3(_285, _286, _287), vec3(_285, _286, _287)));
    float _292 = _285 * _291;
    float _293 = _286 * _291;
    float _294 = _287 * _291;
    vec4 _299 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _301 = _299.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _431 = sqrt(((_285 * _285) + (_286 * _286)) + (_287 * _287));
        float _437 = (cbMatDynParam._m0[5u].x * _431) + cbMatDynParam._m0[5u].y;
        float _2986 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
        float _438 = isnan(1.0) ? _2986 : (isnan(_2986) ? 1.0 : min(_2986, 1.0));
        float _442 = (cbMatDynParam._m0[5u].z * _431) + cbMatDynParam._m0[5u].w;
        float _2997 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2997 : (isnan(_2997) ? 1.0 : min(_2997, 1.0))) - _438)) + _438) < ((_301 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _313 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _314 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _334 = fma(_213, cbSceneParam._m0[5u].z, fma(_212, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _211));
    float _337 = fma(_213, cbSceneParam._m0[6u].z, fma(_212, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _211));
    float _340 = fma(_213, cbSceneParam._m0[7u].z, fma(_212, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _211));
    uint _353 = uint(roundEven(NORMAL.w)) * 13u;
    uint _355 = _353 + 9u;
    uint _356 = _355 + uint(cbMatDynParam._m0[0u].w);
    float _362 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2953 : (isnan(_2953) ? 1.0 : min(_2953, 1.0)))) * cbInstanceData._m0[_356].x;
    float _363 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2964 : (isnan(_2964) ? 1.0 : min(_2964, 1.0)))) * cbInstanceData._m0[_356].y;
    float _364 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2975 : (isnan(_2975) ? 1.0 : min(_2975, 1.0)))) * cbInstanceData._m0[_356].z;
    float _3008 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _365 = isnan(1.0) ? _3008 : (isnan(_3008) ? 1.0 : min(_3008, 1.0));
    float _3019 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _366 = isnan(1.0) ? _3019 : (isnan(_3019) ? 1.0 : min(_3019, 1.0));
    float _3030 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _367 = isnan(1.0) ? _3030 : (isnan(_3030) ? 1.0 : min(_3030, 1.0));
    vec4 _376 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _313, cbSceneParam._m0[86u].y * _314));
    float _379 = _376.x * TEXCOORD.z;
    float _380 = dot(vec3(_211, _212, _213), vec3(_292, _293, _294));
    float _383 = _380 * 2.0;
    float _388 = (_383 * _211) - _292;
    float _389 = (_383 * _212) - _293;
    float _390 = (_383 * _213) - _294;
    float _412 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _416 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _420 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _751;
    float _753;
    float _754;
    float _755;
    float _756;
    float _757;
    float _758;
    float _759;
    float _760;
    float _761;
    float _762;
    float _763;
    float _764;
    float _765;
    float _766;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _476 = fma(_420, cbModelParam._m0[26u].z, fma(_416, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _412));
        float _480 = fma(_420, cbModelParam._m0[27u].z, fma(_416, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _412));
        float _484 = fma(_420, cbModelParam._m0[28u].z, fma(_416, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _412));
        float _509 = _412 + _211;
        float _510 = _416 + _212;
        float _511 = _420 + _213;
        float _521 = fma(_511, cbModelParam._m0[26u].z, fma(_510, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _509)) - _476;
        float _522 = fma(_511, cbModelParam._m0[27u].z, fma(_510, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _509)) - _480;
        float _523 = fma(_511, cbModelParam._m0[28u].z, fma(_510, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _509)) - _484;
        float _527 = inversesqrt(dot(vec3(_521, _522, _523), vec3(_521, _522, _523)));
        float _540 = ((_527 * _521) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_476 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _541 = ((_527 * _522) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_480 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _542 = ((_527 * _523) / cbModelParam._m0[34u].z) + ((((((_484 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _545 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_540, _541, _542), 0.0);
        vec4 _552 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_540, _541, _542), 0.0);
        vec4 _559 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_540, _541, _542), 0.0);
        vec4 _566 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_540, _541, _542), 0.0);
        float _579 = exp2((_545.w + (-0.5)) * 20.0) * 2.0;
        float _580 = _579 * (_545.x + (-0.5));
        float _581 = _579 * (_545.y + (-0.5));
        float _582 = _579 * (_545.z + (-0.5));
        float _589 = exp2((_552.w + (-0.5)) * 20.0) * 2.0;
        float _590 = _589 * (_552.x + (-0.5));
        float _591 = _589 * (_552.y + (-0.5));
        float _592 = _589 * (_552.z + (-0.5));
        float _599 = exp2((_559.w + (-0.5)) * 20.0) * 2.0;
        float _600 = _599 * (_559.x + (-0.5));
        float _601 = _599 * (_559.y + (-0.5));
        float _602 = _599 * (_559.z + (-0.5));
        float _609 = exp2((_566.w + (-0.5)) * 20.0) * 2.0;
        float _610 = _609 * (_566.x + (-0.5));
        float _611 = _609 * (_566.y + (-0.5));
        float _612 = _609 * (_566.z + (-0.5));
        float _613 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
        float _614 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
        float _615 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
        float _616 = _580 * 0.5;
        float _617 = _590 * 0.5;
        float _618 = _600 * 0.5;
        float _619 = dot(vec3(_616, _617, _618), vec3(_616, _617, _618));
        float _624 = (_619 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_619);
        float _633 = (dot(vec3(_211, _212, _213), vec3(_624 * _616, _624 * _617, _624 * _618)) + 1.0) * 0.5;
        float _3056 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
        float _643 = sqrt(((_617 * _617) + (_616 * _616)) + (_618 * _618)) / (_613 + 9.9999997473787516355514526367188e-06);
        float _3067 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
        float _644 = isnan(1.0) ? _3067 : (isnan(_3067) ? 1.0 : min(_3067, 1.0));
        float _645 = _644 * 2.0;
        float _649 = (1.0 - _644) / (_644 + 1.0);
        float _3078 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
        float _650 = isnan(1.0) ? _3078 : (isnan(_3078) ? 1.0 : min(_3078, 1.0));
        float _659 = ((((1.0 - _650) * (_645 + 2.0)) * exp2(log2(isnan(1.0) ? _3056 : (isnan(_3056) ? 1.0 : min(_3056, 1.0))) * (_645 + 1.0))) + _650) * _613;
        float _660 = _581 * 0.5;
        float _661 = _591 * 0.5;
        float _662 = _601 * 0.5;
        float _663 = dot(vec3(_660, _661, _662), vec3(_660, _661, _662));
        float _668 = (_663 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_663);
        float _676 = (dot(vec3(_211, _212, _213), vec3(_668 * _660, _668 * _661, _668 * _662)) + 1.0) * 0.5;
        float _3089 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
        float _685 = sqrt(((_661 * _661) + (_660 * _660)) + (_662 * _662)) / (_614 + 9.9999997473787516355514526367188e-06);
        float _3100 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        float _686 = isnan(1.0) ? _3100 : (isnan(_3100) ? 1.0 : min(_3100, 1.0));
        float _687 = _686 * 2.0;
        float _691 = (1.0 - _686) / (_686 + 1.0);
        float _3111 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        float _692 = isnan(1.0) ? _3111 : (isnan(_3111) ? 1.0 : min(_3111, 1.0));
        float _701 = ((((1.0 - _692) * (_687 + 2.0)) * exp2(log2(isnan(1.0) ? _3089 : (isnan(_3089) ? 1.0 : min(_3089, 1.0))) * (_687 + 1.0))) + _692) * _614;
        float _702 = _582 * 0.5;
        float _703 = _592 * 0.5;
        float _704 = _602 * 0.5;
        float _705 = dot(vec3(_702, _703, _704), vec3(_702, _703, _704));
        float _710 = (_705 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_705);
        float _718 = (dot(vec3(_211, _212, _213), vec3(_710 * _702, _710 * _703, _710 * _704)) + 1.0) * 0.5;
        float _3122 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _727 = sqrt(((_703 * _703) + (_702 * _702)) + (_704 * _704)) / (_615 + 9.9999997473787516355514526367188e-06);
        float _3133 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _728 = isnan(1.0) ? _3133 : (isnan(_3133) ? 1.0 : min(_3133, 1.0));
        float _729 = _728 * 2.0;
        float _733 = (1.0 - _728) / (_728 + 1.0);
        float _3144 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _734 = isnan(1.0) ? _3144 : (isnan(_3144) ? 1.0 : min(_3144, 1.0));
        float _743 = ((((1.0 - _734) * (_729 + 2.0)) * exp2(log2(isnan(1.0) ? _3122 : (isnan(_3122) ? 1.0 : min(_3122, 1.0))) * (_729 + 1.0))) + _734) * _615;
        _751 = _582;
        _753 = _581;
        _754 = _580;
        _755 = _592;
        _756 = _591;
        _757 = _590;
        _758 = _602;
        _759 = _601;
        _760 = _600;
        _761 = _615;
        _762 = _614;
        _763 = _613;
        _764 = cbModelParam._m0[36u].z * (isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0)));
        _765 = cbModelParam._m0[36u].z * (isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0)));
        _766 = cbModelParam._m0[36u].z * (isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0)));
    }
    else
    {
        _751 = _752;
        _753 = _752;
        _754 = _752;
        _755 = _752;
        _756 = _752;
        _757 = _752;
        _758 = _752;
        _759 = _752;
        _760 = _752;
        _761 = _752;
        _762 = _752;
        _763 = _752;
        _764 = 0.0;
        _765 = 0.0;
        _766 = 0.0;
    }
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _795 = fma(_420, cbModelParam._m0[30u].z, fma(_416, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _412));
        float _799 = fma(_420, cbModelParam._m0[31u].z, fma(_416, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _412));
        float _803 = fma(_420, cbModelParam._m0[32u].z, fma(_416, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _412));
        float _826 = _412 + _211;
        float _827 = _416 + _212;
        float _828 = _420 + _213;
        float _838 = fma(_828, cbModelParam._m0[30u].z, fma(_827, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _826)) - _795;
        float _839 = fma(_828, cbModelParam._m0[31u].z, fma(_827, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _826)) - _799;
        float _840 = fma(_828, cbModelParam._m0[32u].z, fma(_827, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _826)) - _803;
        float _844 = inversesqrt(dot(vec3(_838, _839, _840), vec3(_838, _839, _840)));
        float _857 = ((_844 * _838) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_795 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _858 = ((_844 * _839) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_799 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _859 = ((_844 * _840) / cbModelParam._m0[35u].z) + ((((((_803 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_857, _858, _859), 0.0);
        vec4 _868 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_857, _858, _859), 0.0);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_857, _858, _859), 0.0);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_857, _858, _859), 0.0);
        float _894 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_861.x + (-0.5));
        float _896 = _894 * (_861.y + (-0.5));
        float _897 = _894 * (_861.z + (-0.5));
        float _904 = exp2((_868.w + (-0.5)) * 20.0) * 2.0;
        float _905 = _904 * (_868.x + (-0.5));
        float _906 = _904 * (_868.y + (-0.5));
        float _907 = _904 * (_868.z + (-0.5));
        float _914 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _915 = _914 * (_875.x + (-0.5));
        float _916 = _914 * (_875.y + (-0.5));
        float _917 = _914 * (_875.z + (-0.5));
        float _924 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _925 = _924 * (_882.x + (-0.5));
        float _926 = _924 * (_882.y + (-0.5));
        float _927 = _924 * (_882.z + (-0.5));
        float _928 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _929 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _930 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _931 = _895 * 0.5;
        float _932 = _905 * 0.5;
        float _933 = _915 * 0.5;
        float _934 = dot(vec3(_931, _932, _933), vec3(_931, _932, _933));
        float _939 = (_934 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_934);
        float _947 = (dot(vec3(_211, _212, _213), vec3(_939 * _931, _939 * _932, _939 * _933)) + 1.0) * 0.5;
        float _3185 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _956 = sqrt(((_932 * _932) + (_931 * _931)) + (_933 * _933)) / (_928 + 9.9999997473787516355514526367188e-06);
        float _3196 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3196 : (isnan(_3196) ? 1.0 : min(_3196, 1.0));
        float _958 = _957 * 2.0;
        float _962 = (1.0 - _957) / (_957 + 1.0);
        float _3207 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3207 : (isnan(_3207) ? 1.0 : min(_3207, 1.0));
        float _972 = ((((1.0 - _963) * (_958 + 2.0)) * exp2(log2(isnan(1.0) ? _3185 : (isnan(_3185) ? 1.0 : min(_3185, 1.0))) * (_958 + 1.0))) + _963) * _928;
        float _973 = _896 * 0.5;
        float _974 = _906 * 0.5;
        float _975 = _916 * 0.5;
        float _976 = dot(vec3(_973, _974, _975), vec3(_973, _974, _975));
        float _981 = (_976 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_976);
        float _989 = (dot(vec3(_211, _212, _213), vec3(_981 * _973, _981 * _974, _981 * _975)) + 1.0) * 0.5;
        float _3218 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _998 = sqrt(((_974 * _974) + (_973 * _973)) + (_975 * _975)) / (_929 + 9.9999997473787516355514526367188e-06);
        float _3229 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3229 : (isnan(_3229) ? 1.0 : min(_3229, 1.0));
        float _1000 = _999 * 2.0;
        float _1004 = (1.0 - _999) / (_999 + 1.0);
        float _3240 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0));
        float _1014 = ((((1.0 - _1005) * (_1000 + 2.0)) * exp2(log2(isnan(1.0) ? _3218 : (isnan(_3218) ? 1.0 : min(_3218, 1.0))) * (_1000 + 1.0))) + _1005) * _929;
        float _1015 = _897 * 0.5;
        float _1016 = _907 * 0.5;
        float _1017 = _917 * 0.5;
        float _1018 = dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017));
        float _1023 = (_1018 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1018);
        float _1031 = (dot(vec3(_211, _212, _213), vec3(_1023 * _1015, _1023 * _1016, _1023 * _1017)) + 1.0) * 0.5;
        float _3251 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1040 = sqrt(((_1016 * _1016) + (_1015 * _1015)) + (_1017 * _1017)) / (_930 + 9.9999997473787516355514526367188e-06);
        float _3262 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0));
        float _1042 = _1041 * 2.0;
        float _1046 = (1.0 - _1041) / (_1041 + 1.0);
        float _3273 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0));
        float _1056 = ((((1.0 - _1047) * (_1042 + 2.0)) * exp2(log2(isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0))) * (_1042 + 1.0))) + _1047) * _930;
        _1064 = _897;
        _1065 = _896;
        _1066 = _895;
        _1067 = _907;
        _1068 = _906;
        _1069 = _905;
        _1070 = _917;
        _1071 = _916;
        _1072 = _915;
        _1073 = _930;
        _1074 = _929;
        _1075 = _928;
        _1076 = cbModelParam._m0[36u].w * (isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0)));
        _1077 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0)));
        _1078 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0)));
    }
    else
    {
        _1064 = _752;
        _1065 = _752;
        _1066 = _752;
        _1067 = _752;
        _1068 = _752;
        _1069 = _752;
        _1070 = _752;
        _1071 = _752;
        _1072 = _752;
        _1073 = _752;
        _1074 = _752;
        _1075 = _752;
        _1076 = 0.0;
        _1077 = 0.0;
        _1078 = 0.0;
    }
    float _1088 = (cbModelParam._m0[1u].x * (_1076 - _764)) + _764;
    float _1089 = (cbModelParam._m0[1u].x * (_1077 - _765)) + _765;
    float _1090 = (cbModelParam._m0[1u].x * (_1078 - _766)) + _766;
    float _1111 = fma(_1090, cbSceneParam._m0[89u].z, fma(_1089, cbSceneParam._m0[89u].y, _1088 * cbSceneParam._m0[89u].x));
    float _1114 = fma(_1090, cbSceneParam._m0[90u].z, fma(_1089, cbSceneParam._m0[90u].y, _1088 * cbSceneParam._m0[90u].x));
    float _1117 = fma(_1090, cbSceneParam._m0[91u].z, fma(_1089, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1088));
    float _1132 = _388 * 0.5;
    float _1133 = _389 * 0.5;
    float _1134 = _390 * 0.5;
    float _1135 = dot(vec4(_1132, _1133, _1134, 1.0), vec4(_1066, _1069, _1072, _1075));
    float _1138 = dot(vec4(_1132, _1133, _1134, 1.0), vec4(_1065, _1068, _1071, _1074));
    float _1141 = dot(vec4(_1132, _1133, _1134, 1.0), vec4(_1064, _1067, _1070, _1073));
    float _1175;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1148 = dot(vec4(_1132, _1133, _1134, 1.0), vec4(_751, _755, _758, _761));
        float _1152 = dot(vec4(_1132, _1133, _1134, 1.0), vec4(_753, _756, _759, _762));
        float _1156 = dot(vec4(_1132, _1133, _1134, 1.0), vec4(_754, _757, _760, _763));
        float _1163 = dot(vec4(cbModelParam._m0[39u]), vec4(_1132, _1133, _1134, 1.0));
        _1175 = dot(vec3(isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)), isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)), isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1163) ? 0.0 : (isnan(0.0) ? _1163 : max(0.0, _1163))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1175 = 1.0;
    }
    float _1186;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1177 = dot(vec4(cbModelParam._m0[40u]), vec4(_1132, _1133, _1134, 1.0));
        _1186 = dot(vec3(isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)), isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0)), isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1177) ? 0.0 : (isnan(0.0) ? _1177 : max(0.0, _1177))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1186 = 1.0;
    }
    float _1190 = (_1186 * cbModelParam._m0[1u].x) + (_1175 * (1.0 - cbModelParam._m0[1u].x));
    float _1199 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1281;
    float _1283;
    float _1285;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1248 = fma(_420, cbModelParam._m0[13u].z, fma(_416, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _412)) + cbModelParam._m0[13u].w;
        float _1252 = fma(_420, cbModelParam._m0[14u].z, fma(_416, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _412)) + cbModelParam._m0[14u].w;
        float _1256 = fma(_420, cbModelParam._m0[15u].z, fma(_416, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _412)) + cbModelParam._m0[15u].w;
        float _1259 = fma(_390, cbModelParam._m0[13u].z, fma(_389, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _388));
        float _1262 = fma(_390, cbModelParam._m0[14u].z, fma(_389, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _388));
        float _1265 = fma(_390, cbModelParam._m0[15u].z, fma(_389, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _388));
        float _1291;
        if (_1259 > 0.0)
        {
            _1291 = abs((1.0 - _1248) / _1259);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1259 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1248 + 1.0) / _1259);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1291 = frontier_phi_19_17_ladder;
        }
        float _1520;
        if (_1262 > 0.0)
        {
            _1520 = abs((1.0 - _1252) / _1262);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1262 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1252 + 1.0) / _1262);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1520 = frontier_phi_28_24_ladder;
        }
        float _1712;
        if (_1265 > 0.0)
        {
            _1712 = abs((1.0 - _1256) / _1265);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1265 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1256 + 1.0) / _1265);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1712 = frontier_phi_40_35_ladder;
        }
        float _1714 = isnan(_1520) ? _1291 : (isnan(_1291) ? _1520 : min(_1291, _1520));
        float _1715 = isnan(_1712) ? _1714 : (isnan(_1714) ? _1712 : min(_1714, _1712));
        float _1719 = (_1715 * _1259) + _1248;
        float _1720 = (_1715 * _1262) + _1252;
        float _1721 = (_1715 * _1265) + _1256;
        float _1722 = _1715 * 9.9999997473787516355514526367188e-05;
        float _1724 = (-1.0) - _1722;
        float _1726 = _1722 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1721 > _1726) || ((_1721 < _1724) || ((_1720 > _1726) || ((_1720 < _1724) || ((_1719 < _1724) || (_1719 > _1726))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1818 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1721, cbModelParam._m0[9u].z, fma(_1720, cbModelParam._m0[9u].y, _1719 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1721, cbModelParam._m0[10u].z, fma(_1720, cbModelParam._m0[10u].y, _1719 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1721, cbModelParam._m0[11u].z, fma(_1720, cbModelParam._m0[11u].y, _1719 * cbModelParam._m0[11u].x))), _1199);
            frontier_phi_18_40_ladder = _1818.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1818.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1818.x * cbModelParam._m0[1u].y;
        }
        _1281 = frontier_phi_18_40_ladder_2;
        _1283 = frontier_phi_18_40_ladder_1;
        _1285 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1269 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_388, _389, _390), _1199);
        _1281 = _1269.x * cbModelParam._m0[1u].y;
        _1283 = _1269.y * cbModelParam._m0[1u].y;
        _1285 = _1269.z * cbModelParam._m0[1u].y;
    }
    float _1288 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1381;
    float _1383;
    float _1385;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1345 = fma(_420, cbModelParam._m0[21u].z, fma(_416, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _412)) + cbModelParam._m0[21u].w;
        float _1349 = fma(_420, cbModelParam._m0[22u].z, fma(_416, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _412)) + cbModelParam._m0[22u].w;
        float _1353 = fma(_420, cbModelParam._m0[23u].z, fma(_416, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _412)) + cbModelParam._m0[23u].w;
        float _1356 = fma(_390, cbModelParam._m0[21u].z, fma(_389, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _388));
        float _1359 = fma(_390, cbModelParam._m0[22u].z, fma(_389, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _388));
        float _1362 = fma(_390, cbModelParam._m0[23u].z, fma(_389, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _388));
        float _1525;
        if (_1356 > 0.0)
        {
            _1525 = abs((1.0 - _1345) / _1356);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1356 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1345 + 1.0) / _1356);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1525 = frontier_phi_30_26_ladder;
        }
        float _1739;
        if (_1359 > 0.0)
        {
            _1739 = abs((1.0 - _1349) / _1359);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1359 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1349 + 1.0) / _1359);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1739 = frontier_phi_42_37_ladder;
        }
        float _1890;
        if (_1362 > 0.0)
        {
            _1890 = abs((1.0 - _1353) / _1362);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1362 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1353 + 1.0) / _1362);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _1890 = frontier_phi_51_48_ladder;
        }
        float _1892 = isnan(_1739) ? _1525 : (isnan(_1525) ? _1739 : min(_1525, _1739));
        float _1893 = isnan(_1890) ? _1892 : (isnan(_1892) ? _1890 : min(_1892, _1890));
        float _1897 = (_1893 * _1356) + _1345;
        float _1898 = (_1893 * _1359) + _1349;
        float _1899 = (_1893 * _1362) + _1353;
        float _1900 = _1893 * 9.9999997473787516355514526367188e-05;
        float _1901 = (-1.0) - _1900;
        float _1903 = _1900 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_1899 > _1903) || ((_1899 < _1901) || ((_1898 > _1903) || ((_1898 < _1901) || ((_1897 < _1901) || (_1897 > _1903))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2097 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1899, cbModelParam._m0[17u].z, fma(_1898, cbModelParam._m0[17u].y, _1897 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1899, cbModelParam._m0[18u].z, fma(_1898, cbModelParam._m0[18u].y, _1897 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1899, cbModelParam._m0[19u].z, fma(_1898, cbModelParam._m0[19u].y, _1897 * cbModelParam._m0[19u].x))), _1288);
            frontier_phi_27_51_ladder = _2097.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2097.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2097.x * cbModelParam._m0[1u].z;
        }
        _1381 = frontier_phi_27_51_ladder_2;
        _1383 = frontier_phi_27_51_ladder_1;
        _1385 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1365 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_388, _389, _390), _1288);
        _1381 = _1365.x * cbModelParam._m0[1u].z;
        _1383 = _1365.y * cbModelParam._m0[1u].z;
        _1385 = _1365.z * cbModelParam._m0[1u].z;
    }
    float _1397 = _379 * 0.01200000010430812835693359375;
    float _1399 = _1397 * ((cbModelParam._m0[1u].w * (_1381 - _1281)) + _1281);
    float _1400 = _1397 * ((cbModelParam._m0[1u].w * (_1383 - _1283)) + _1283);
    float _1401 = _1397 * ((cbModelParam._m0[1u].w * (_1385 - _1285)) + _1285);
    float _1404 = fma(_1401, cbSceneParam._m0[89u].z, fma(_1400, cbSceneParam._m0[89u].y, _1399 * cbSceneParam._m0[89u].x));
    float _1407 = fma(_1401, cbSceneParam._m0[90u].z, fma(_1400, cbSceneParam._m0[90u].y, _1399 * cbSceneParam._m0[90u].x));
    float _1410 = fma(_1401, cbSceneParam._m0[91u].z, fma(_1400, cbSceneParam._m0[91u].y, _1399 * cbSceneParam._m0[91u].x));
    vec4 _1418 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_313, _314));
    float _1420 = _1418.w;
    float _1432 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1420);
    float _1433 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1420);
    float _1434 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1420);
    uvec4 _1438 = floatBitsToUint(cbInstanceData._m0[_353 + 5u]);
    uint _1440 = _1438.x * 14u;
    uint _1441 = _1440 + 13u;
    float _1448 = _379 + (-1.0);
    float _1454 = (cbLight._m0[_1441].x * _1448) + 1.0;
    float _1455 = (cbLight._m0[_1441].y * _1448) + 1.0;
    float _1456 = (cbLight._m0[_1441].z * _1448) + 1.0;
    float _1457 = (cbLight._m0[_1441].w * _1448) + 1.0;
    uint _1458 = _1440 + 5u;
    float _1464 = isnan(1.0) ? _1455 : (isnan(_1455) ? 1.0 : min(_1455, 1.0));
    uint _1468 = _1440 + 4u;
    float _1478 = isnan(1.0) ? _1454 : (isnan(_1454) ? 1.0 : min(_1454, 1.0));
    uint _1482 = _1440 | 1u;
    float _1493 = dot(vec3(cbLight._m0[_1440].xyz), vec3(_211, _212, _213));
    float _1496 = dot(vec3(cbLight._m0[_1482].xyz), vec3(_211, _212, _213));
    float _3409 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
    float _3420 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
    float _1501 = (isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0))) * 0.3183098733425140380859375;
    float _1503 = (isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0))) * 0.3183098733425140380859375;
    float _1510 = ((cbLight._m0[_1458].x * _1464) * _1503) + (((cbLight._m0[_1468].x * _1432) * _1478) * _1501);
    float _1511 = ((_1464 * cbLight._m0[_1458].y) * _1503) + (((cbLight._m0[_1468].y * _1433) * _1478) * _1501);
    float _1512 = ((_1464 * cbLight._m0[_1458].z) * _1503) + (((cbLight._m0[_1468].z * _1434) * _1478) * _1501);
    uvec4 _1517 = floatBitsToUint(cbLight._m0[_1440 + 12u]);
    bool _1519 = _1517.x == 0u;
    float _1530;
    float _1532;
    float _1534;
    if (_1519)
    {
        _1530 = _1510;
        _1532 = _1511;
        _1534 = _1512;
    }
    else
    {
        uint _1538 = _1440 + 6u;
        float _1554 = (dot(vec3(cbLight._m0[_1440 + 2u].xyz), vec3(_211, _212, _213)) * 0.5) + 0.5;
        float _1555 = _1554 * _1554;
        float _3431 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
        float _1557 = isnan(1.0) ? _1456 : (isnan(_1456) ? 1.0 : min(_1456, 1.0));
        _1530 = (((cbLight._m0[_1538].x * 0.3183098733425140380859375) * _1556) * _1557) + _1510;
        _1532 = (((cbLight._m0[_1538].y * 0.3183098733425140380859375) * _1556) * _1557) + _1511;
        _1534 = (((cbLight._m0[_1538].z * 0.3183098733425140380859375) * _1556) * _1557) + _1512;
    }
    bool _1537 = _1517.y == 0u;
    float _1575;
    float _1577;
    float _1579;
    if (_1537)
    {
        _1575 = _1530;
        _1577 = _1532;
        _1579 = _1534;
    }
    else
    {
        uint _1683 = _1440 + 7u;
        float _1699 = (dot(vec3(cbLight._m0[_1440 + 3u].xyz), vec3(_211, _212, _213)) * 0.5) + 0.5;
        float _1700 = _1699 * _1699;
        float _3447 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
        float _1702 = isnan(1.0) ? _1457 : (isnan(_1457) ? 1.0 : min(_1457, 1.0));
        _1575 = (((cbLight._m0[_1683].x * 0.3183098733425140380859375) * _1701) * _1702) + _1530;
        _1577 = (((cbLight._m0[_1683].y * 0.3183098733425140380859375) * _1701) * _1702) + _1532;
        _1579 = (((cbLight._m0[_1683].z * 0.3183098733425140380859375) * _1701) * _1702) + _1534;
    }
    uint _1581 = _1440 + 8u;
    float _1587 = cbLight._m0[_1440].x + _292;
    float _1588 = cbLight._m0[_1440].y + _293;
    float _1589 = cbLight._m0[_1440].z + _294;
    float _1593 = inversesqrt(dot(vec3(_1587, _1588, _1589), vec3(_1587, _1588, _1589)));
    float _1597 = dot(vec3(_211, _212, _213), vec3(cbLight._m0[_1440].xyz));
    float _3463 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
    float _1600 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
    float _3474 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _1601 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
    float _1602 = dot(vec3(cbLight._m0[_1440].xyz), vec3(_1587 * _1593, _1588 * _1593, _1589 * _1593));
    float _3485 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
    float _1613 = (exp2(log2(1.0 - (isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1619 = (0.5 / ((_1600 + 9.9999999392252902907785028219223e-09) + _1601)) * _1600;
    float _3496 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
    float _1621 = (isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))) * 0.31831014156341552734375;
    uint _1635 = _1440 + 9u;
    float _1641 = cbLight._m0[_1482].x + _292;
    float _1642 = cbLight._m0[_1482].y + _293;
    float _1643 = cbLight._m0[_1482].z + _294;
    float _1647 = inversesqrt(dot(vec3(_1641, _1642, _1643), vec3(_1641, _1642, _1643)));
    float _1651 = dot(vec3(_211, _212, _213), vec3(cbLight._m0[_1482].xyz));
    float _3507 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
    float _1654 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
    float _1655 = dot(vec3(cbLight._m0[_1482].xyz), vec3(_1641 * _1647, _1642 * _1647, _1643 * _1647));
    float _3518 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
    float _1664 = (exp2(log2(1.0 - (isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1668 = (0.5 / ((_1654 + 9.9999999392252902907785028219223e-09) + _1601)) * _1654;
    float _3529 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
    float _1670 = (isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) * 0.31831014156341552734375;
    float _1680 = (((_1664 * cbLight._m0[_1635].x) * _1670) * _1464) + ((((cbLight._m0[_1581].x * _1432) * _1613) * _1621) * _1478);
    float _1681 = (((_1664 * cbLight._m0[_1635].y) * _1670) * _1464) + ((((cbLight._m0[_1581].y * _1433) * _1613) * _1621) * _1478);
    float _1682 = (((_1664 * cbLight._m0[_1635].z) * _1670) * _1464) + ((((cbLight._m0[_1581].z * _1434) * _1613) * _1621) * _1478);
    float _1744;
    float _1746;
    float _1748;
    if (_1519)
    {
        _1744 = _1680;
        _1746 = _1681;
        _1748 = _1682;
    }
    else
    {
        uint _1750 = _1440 + 10u;
        uint _1756 = _1440 + 2u;
        float _1762 = cbLight._m0[_1756].x + _292;
        float _1763 = cbLight._m0[_1756].y + _293;
        float _1764 = cbLight._m0[_1756].z + _294;
        float _1768 = inversesqrt(dot(vec3(_1762, _1763, _1764), vec3(_1762, _1763, _1764)));
        float _1772 = dot(vec3(_211, _212, _213), vec3(cbLight._m0[_1756].xyz));
        float _3540 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1775 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _1776 = dot(vec3(cbLight._m0[_1756].xyz), vec3(_1762 * _1768, _1763 * _1768, _1764 * _1768));
        float _3551 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1785 = (exp2(log2(1.0 - (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1789 = (0.5 / ((_1775 + 9.9999999392252902907785028219223e-09) + _1601)) * _1775;
        float _3562 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1791 = (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))) * 0.31831014156341552734375;
        float _1792 = isnan(1.0) ? _1456 : (isnan(_1456) ? 1.0 : min(_1456, 1.0));
        _1744 = (((_1785 * cbLight._m0[_1750].x) * _1791) * _1792) + _1680;
        _1746 = (((_1785 * cbLight._m0[_1750].y) * _1791) * _1792) + _1681;
        _1748 = (((_1785 * cbLight._m0[_1750].z) * _1791) * _1792) + _1682;
    }
    float _1827;
    float _1829;
    float _1831;
    if (_1537)
    {
        _1827 = _1744;
        _1829 = _1746;
        _1831 = _1748;
    }
    else
    {
        uint _1838 = _1440 + 11u;
        uint _1844 = _1440 + 3u;
        float _1850 = cbLight._m0[_1844].x + _292;
        float _1851 = cbLight._m0[_1844].y + _293;
        float _1852 = cbLight._m0[_1844].z + _294;
        float _1856 = inversesqrt(dot(vec3(_1850, _1851, _1852), vec3(_1850, _1851, _1852)));
        float _1860 = dot(vec3(_211, _212, _213), vec3(cbLight._m0[_1844].xyz));
        float _3578 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
        float _1863 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _1864 = dot(vec3(cbLight._m0[_1844].xyz), vec3(_1850 * _1856, _1851 * _1856, _1852 * _1856));
        float _3589 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1873 = (exp2(log2(1.0 - (isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1877 = (0.5 / ((_1863 + 9.9999999392252902907785028219223e-09) + _1601)) * _1863;
        float _3600 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
        float _1879 = (isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * 0.31831014156341552734375;
        float _1880 = isnan(1.0) ? _1457 : (isnan(_1457) ? 1.0 : min(_1457, 1.0));
        _1827 = (((_1873 * cbLight._m0[_1838].x) * _1879) * _1880) + _1744;
        _1829 = (((_1873 * cbLight._m0[_1838].y) * _1879) * _1880) + _1746;
        _1831 = (((_1873 * cbLight._m0[_1838].z) * _1879) * _1880) + _1748;
    }
    float _2014;
    float _2016;
    float _2018;
    float _2020;
    float _2022;
    float _2024;
    if (_1438.y == 0u)
    {
        float _1955 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1956 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1955;
        float _1957 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1955;
        float _1958 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1955;
        uvec4 _1970 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1971 = _1970.x;
        uint _1982 = uint((float(_1970.y) * floor(float(uint(cbSceneParam._m0[85u].y * _314) / _1971))) + floor(float(uint(cbSceneParam._m0[85u].x * _313) / _1971)));
        float _1992 = (log2(_1958 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1993 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        uint _1996 = uint(isnan(14.0) ? _1993 : (isnan(_1993) ? 14.0 : min(_1993, 14.0)));
        uvec4 _2001 = texelFetch(g_lightClusterGridBuffer, int(((_1996 << 2u) + (_1982 << 6u)) >> 2u));
        uint _2002 = _2001.x;
        uint _2003 = _1970.z;
        float _2102;
        float _2104;
        float _2106;
        float _2108;
        float _2110;
        float _2112;
        if (((((1u << ((_2003 >> 4u) & 15u)) + 4294967295u) & _2002) == 0u) || ((_2003 & 240u) == 0u))
        {
            _2102 = 0.0;
            _2104 = 0.0;
            _2106 = 0.0;
            _2108 = 0.0;
            _2110 = 0.0;
            _2112 = 0.0;
        }
        else
        {
            float _2103;
            float _2105;
            float _2107;
            float _2109;
            float _2111;
            float _2113;
            float _2253 = 0.0;
            float _2254 = 0.0;
            float _2255 = 0.0;
            float _2256 = 0.0;
            float _2257 = 0.0;
            float _2258 = 0.0;
            uint _2259 = 0u;
            uint _2268;
            bool _2269;
            for (;;)
            {
                _2268 = texelFetch(g_lightClassification, int((((_1996 << 5u) + (_1982 << 9u)) + (_2259 << 2u)) >> 2u)).x;
                _2269 = _2268 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2269)
                {
                    frontier_phi_68_pred = _2255;
                    frontier_phi_68_pred_1 = _2258;
                    frontier_phi_68_pred_2 = _2257;
                    frontier_phi_68_pred_3 = _2256;
                    frontier_phi_68_pred_4 = _2254;
                    frontier_phi_68_pred_5 = _2253;
                }
                else
                {
                    float _2398;
                    float _2399;
                    float _2400;
                    float _2401;
                    float _2402;
                    float _2403;
                    uint _2404;
                    _2398 = _2253;
                    _2399 = _2254;
                    _2400 = _2255;
                    _2401 = _2256;
                    _2402 = _2257;
                    _2403 = _2258;
                    _2404 = _2268;
                    float _2325;
                    float _2326;
                    float _2327;
                    float _2328;
                    float _2329;
                    float _2330;
                    for (;;)
                    {
                        uint _2408 = uint(findLSB(_2404)) + (_2259 << 5u);
                        uint _2405 = (_2404 + 4294967295u) & _2404;
                        uint _2410 = _2408 * 48u;
                        vec4 _2424 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2410)).x, texelFetch(g_PointLightRenderingBuffer, int(_2410 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2410 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2410 + 3u)).x));
                        uint _2430 = (_2408 * 48u) + 4u;
                        vec4 _2443 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2430)).x, texelFetch(g_PointLightRenderingBuffer, int(_2430 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2430 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2430 + 3u)).x));
                        uint _2449 = (_2408 * 48u) + 8u;
                        vec3 _2460 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2449)).x, texelFetch(g_PointLightRenderingBuffer, int(_2449 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2449 + 2u)).x));
                        float _2464 = _2424.x - _1956;
                        float _2465 = _2424.y - _1957;
                        float _2466 = _2424.z - _1958;
                        float _2467 = dot(vec3(_2464, _2465, _2466), vec3(_2464, _2465, _2466));
                        float _2470 = inversesqrt(_2467);
                        float _2479 = 1.0 - (_2467 * _2424.w);
                        float _3626 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
                        float _2480 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
                        float _2481 = sqrt(_2467) * _2443.w;
                        float _2484 = 1.39999997615814208984375 / (_2481 + 1.39999997615814208984375);
                        float _2485 = _2484 * _2484;
                        float _2488 = ((1.0 - _2485) * dot(vec3(_334, _337, _340), vec3(_2470 * _2464, _2470 * _2465, _2470 * _2466))) + _2485;
                        float _2491 = _2481 * _2481;
                        float _2495 = ((isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0))) * _2480) / ((_2491 * 0.699999988079071044921875) + 1.0);
                        float _2499 = (-0.0) - _1956;
                        float _2500 = (-0.0) - _1957;
                        float _2501 = (-0.0) - _1958;
                        float _2505 = inversesqrt(dot(vec3(_2499, _2500, _2501), vec3(_2499, _2500, _2501)));
                        float _2509 = dot(vec3(_334, _337, _340), vec3(_2505 * _2499, _2505 * _2500, _2505 * _2501));
                        float _3642 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
                        float _3653 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
                        float _2513 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
                        float _2517 = (0.5 / (((isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) + 9.9999999392252902907785028219223e-09) + _2513)) * _2513;
                        float _3664 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
                        float _2526 = (((isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * 3.1415927410125732421875) / ((_2491 * 2.1991131305694580078125) + 3.141590118408203125)) * _2480;
                        _2328 = (_2495 * _2443.x) + _2401;
                        _2329 = (_2495 * _2443.y) + _2402;
                        _2330 = (_2495 * _2443.z) + _2403;
                        _2325 = (_2526 * _2460.x) + _2398;
                        _2326 = (_2526 * _2460.y) + _2399;
                        _2327 = (_2526 * _2460.z) + _2400;
                        if (_2405 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2398 = _2325;
                            _2399 = _2326;
                            _2400 = _2327;
                            _2401 = _2328;
                            _2402 = _2329;
                            _2403 = _2330;
                            _2404 = _2405;
                        }
                    }
                    frontier_phi_68_pred = _2327;
                    frontier_phi_68_pred_1 = _2330;
                    frontier_phi_68_pred_2 = _2329;
                    frontier_phi_68_pred_3 = _2328;
                    frontier_phi_68_pred_4 = _2326;
                    frontier_phi_68_pred_5 = _2325;
                }
                _2107 = frontier_phi_68_pred;
                _2113 = frontier_phi_68_pred_1;
                _2111 = frontier_phi_68_pred_2;
                _2109 = frontier_phi_68_pred_3;
                _2105 = frontier_phi_68_pred_4;
                _2103 = frontier_phi_68_pred_5;
                uint _2260 = _2259 + 1u;
                if (_2260 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2253 = _2103;
                    _2254 = _2105;
                    _2255 = _2107;
                    _2256 = _2109;
                    _2257 = _2111;
                    _2258 = _2113;
                    _2259 = _2260;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2102 = _2103;
            _2104 = _2105;
            _2106 = _2107;
            _2108 = _2109;
            _2110 = _2111;
            _2112 = _2113;
        }
        uvec4 _2116 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2117 = _2116.z;
        uint _2119 = (_2117 >> 8u) & 15u;
        float _2224;
        float _2226;
        float _2228;
        float _2230;
        float _2232;
        float _2234;
        if (((4294967295u << _2119) & _2002) == 0u)
        {
            _2224 = _2102;
            _2226 = _2104;
            _2228 = _2106;
            _2230 = _2108;
            _2232 = _2110;
            _2234 = _2112;
        }
        else
        {
            float _2249 = inversesqrt(dot(vec3(_1956, _1957, _1958), vec3(_1956, _1957, _1958)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2119 < ((_2117 >> 12u) & 15u))
            {
                float _2225;
                float _2227;
                float _2229;
                float _2231;
                float _2233;
                float _2235;
                float _2381 = _2102;
                float _2382 = _2104;
                float _2383 = _2106;
                float _2384 = _2108;
                float _2385 = _2110;
                float _2386 = _2112;
                uint _2387 = _2119;
                uint _2396;
                bool _2397;
                for (;;)
                {
                    _2396 = texelFetch(g_lightClassification, int((((_1996 << 5u) + (_1982 << 9u)) + (_2387 << 2u)) >> 2u)).x;
                    _2397 = _2396 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2397)
                    {
                        frontier_phi_79_pred = _2386;
                        frontier_phi_79_pred_1 = _2385;
                        frontier_phi_79_pred_2 = _2384;
                        frontier_phi_79_pred_3 = _2383;
                        frontier_phi_79_pred_4 = _2382;
                        frontier_phi_79_pred_5 = _2381;
                    }
                    else
                    {
                        float _2540;
                        float _2541;
                        float _2542;
                        float _2543;
                        float _2544;
                        float _2545;
                        float _2792;
                        float _2793;
                        float _2794;
                        float _2795;
                        float _2796;
                        float _2797;
                        float _2553 = _2381;
                        float _2554 = _2382;
                        float _2555 = _2383;
                        float _2556 = _2384;
                        float _2557 = _2385;
                        float _2558 = _2386;
                        uint _2559 = _2396;
                        uint _2560;
                        vec4 _2585;
                        float _2586;
                        vec4 _2601;
                        vec3 _2613;
                        vec4 _2629;
                        vec4 _2645;
                        float _2692;
                        bool _2693;
                        for (;;)
                        {
                            uint _2570 = ((_2387 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2559));
                            _2560 = (_2559 + 4294967295u) & _2559;
                            uint _2572 = _2570 * 40u;
                            _2585 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2572)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2572 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2572 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2572 + 3u)).x));
                            _2586 = _2585.w;
                            uint _2588 = (_2570 * 40u) + 4u;
                            _2601 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2588)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2588 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2588 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2588 + 3u)).x));
                            uint _2603 = (_2570 * 40u) + 8u;
                            _2613 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2603 + 2u)).x));
                            uint _2616 = (_2570 * 40u) + 16u;
                            _2629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2616 + 3u)).x));
                            uint _2632 = (_2570 * 40u) + 20u;
                            _2645 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2632 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2632 + 3u)).x));
                            uint _2648 = (_2570 * 40u) + 24u;
                            vec4 _2661 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2648)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2648 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2648 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2648 + 3u)).x));
                            uint _2667 = (_2570 * 40u) + 28u;
                            vec4 _2680 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2667)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2667 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2667 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2667 + 3u)).x));
                            _2692 = fma(_1958, _2680.z, fma(_1957, _2680.y, _2680.x * _1956)) + _2680.w;
                            _2693 = !((fma(_1958, _2661.z, fma(_1957, _2661.y, _2661.x * _1956)) + _2661.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2693)
                            {
                                float _2720 = _2585.x - _1956;
                                float _2721 = _2585.y - _1957;
                                float _2722 = _2585.z - _1958;
                                float _2723 = dot(vec3(_2720, _2721, _2722), vec3(_2720, _2721, _2722));
                                float _2726 = inversesqrt(_2723);
                                float _2727 = _2726 * _2720;
                                float _2728 = _2726 * _2721;
                                float _2729 = _2726 * _2722;
                                float _2733 = 1.0 - (_2723 / (_2586 * _2586));
                                float _3675 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
                                float _2734 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
                                float _2738 = sqrt(_2723) * _2601.w;
                                float _2740 = 1.39999997615814208984375 / (_2738 + 1.39999997615814208984375);
                                float _2741 = _2740 * _2740;
                                float _2742 = 1.0 - _2741;
                                float _2744 = (_2742 * dot(vec3(_2727, _2728, _2729), vec3(_334, _337, _340))) + _2741;
                                float _2747 = _2738 * _2738;
                                float _2751 = (fma(_1958, _2629.z, fma(_1957, _2629.y, _2629.x * _1956)) + _2629.w) / _2692;
                                float _2752 = (fma(_1958, _2645.z, fma(_1957, _2645.y, _2645.x * _1956)) + _2645.w) / _2692;
                                float _2756 = 1.0 - dot(vec2(_2751, _2752), vec2(_2751, _2752));
                                float _3691 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
                                float _2757 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
                                float _2758 = _2757 * (((isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0))) * _2734) / ((_2747 * 0.699999988079071044921875) + 1.0));
                                float _2768 = dot(vec3(_334, _337, _340), vec3((-0.0) - (_1956 * _2249), (-0.0) - (_1957 * _2249), (-0.0) - (_1958 * _2249)));
                                float _3702 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
                                float _2776 = (_2742 * dot(vec3(_334, _337, _340), vec3(_2727, _2728, _2729))) + _2741;
                                float _3713 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
                                float _2777 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
                                float _2781 = (0.5 / (((isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) + 9.9999999392252902907785028219223e-09) + _2777)) * _2777;
                                float _3724 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
                                float _2788 = (_2757 * _2734) * (((isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * 3.1415927410125732421875) / ((_2747 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_85_pred = _2758 * _2601.z;
                                frontier_phi_85_pred_1 = _2758 * _2601.y;
                                frontier_phi_85_pred_2 = _2758 * _2601.x;
                                frontier_phi_85_pred_3 = _2788 * _2613.z;
                                frontier_phi_85_pred_4 = _2788 * _2613.y;
                                frontier_phi_85_pred_5 = _2788 * _2613.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _2797 = frontier_phi_85_pred;
                            _2796 = frontier_phi_85_pred_1;
                            _2795 = frontier_phi_85_pred_2;
                            _2794 = frontier_phi_85_pred_3;
                            _2793 = frontier_phi_85_pred_4;
                            _2792 = frontier_phi_85_pred_5;
                            _2543 = _2795 + _2556;
                            _2544 = _2796 + _2557;
                            _2545 = _2797 + _2558;
                            _2540 = _2792 + _2553;
                            _2541 = _2793 + _2554;
                            _2542 = _2794 + _2555;
                            if (_2560 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2553 = _2540;
                                _2554 = _2541;
                                _2555 = _2542;
                                _2556 = _2543;
                                _2557 = _2544;
                                _2558 = _2545;
                                _2559 = _2560;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2545;
                        frontier_phi_79_pred_1 = _2544;
                        frontier_phi_79_pred_2 = _2543;
                        frontier_phi_79_pred_3 = _2542;
                        frontier_phi_79_pred_4 = _2541;
                        frontier_phi_79_pred_5 = _2540;
                    }
                    _2235 = frontier_phi_79_pred;
                    _2233 = frontier_phi_79_pred_1;
                    _2231 = frontier_phi_79_pred_2;
                    _2229 = frontier_phi_79_pred_3;
                    _2227 = frontier_phi_79_pred_4;
                    _2225 = frontier_phi_79_pred_5;
                    uint _2388 = _2387 + 1u;
                    if (_2388 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2381 = _2225;
                        _2382 = _2227;
                        _2383 = _2229;
                        _2384 = _2231;
                        _2385 = _2233;
                        _2386 = _2235;
                        _2387 = _2388;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2231;
                frontier_phi_60_61_ladder_1 = _2235;
                frontier_phi_60_61_ladder_2 = _2233;
                frontier_phi_60_61_ladder_3 = _2229;
                frontier_phi_60_61_ladder_4 = _2227;
                frontier_phi_60_61_ladder_5 = _2225;
            }
            else
            {
                frontier_phi_60_61_ladder = _2108;
                frontier_phi_60_61_ladder_1 = _2112;
                frontier_phi_60_61_ladder_2 = _2110;
                frontier_phi_60_61_ladder_3 = _2106;
                frontier_phi_60_61_ladder_4 = _2104;
                frontier_phi_60_61_ladder_5 = _2102;
            }
            _2224 = frontier_phi_60_61_ladder_5;
            _2226 = frontier_phi_60_61_ladder_4;
            _2228 = frontier_phi_60_61_ladder_3;
            _2230 = frontier_phi_60_61_ladder;
            _2232 = frontier_phi_60_61_ladder_2;
            _2234 = frontier_phi_60_61_ladder_1;
        }
        float _2239 = isnan(1.0) ? _379 : (isnan(_379) ? 1.0 : min(_379, 1.0));
        _2014 = (_2239 * _2230) + _1575;
        _2016 = (_2239 * _2232) + _1577;
        _2018 = (_2239 * _2234) + _1579;
        _2020 = ((_2224 * 0.039999999105930328369140625) * _2239) + _1827;
        _2022 = ((_2226 * 0.039999999105930328369140625) * _2239) + _1829;
        _2024 = ((_2228 * 0.039999999105930328369140625) * _2239) + _1831;
    }
    else
    {
        _2014 = _1575;
        _2016 = _1577;
        _2018 = _1579;
        _2020 = _1827;
        _2022 = _1829;
        _2024 = _1831;
    }
    float _3740 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _3751 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _3762 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _2041 = ((isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * (_2014 + ((isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0))) * _379))) + ((_2020 + ((isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))) * _1190)) * cbPerFrame._m0[3u].x);
    float _2042 = ((isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * (_2016 + ((isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0))) * _379))) + ((_2022 + ((isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))) * _1190)) * cbPerFrame._m0[3u].x);
    float _2043 = ((isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_2018 + ((isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0))) * _379))) + ((_2024 + ((isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))) * _1190)) * cbPerFrame._m0[3u].x);
    uint _2044 = _353 + 6u;
    float _2052 = _313 / cbSceneParam._m0[86u].x;
    float _2053 = _314 / cbSceneParam._m0[86u].y;
    vec4 _2067 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2052, _2053, (log2((isnan(cbSceneParam._m0[77u].w) ? _233 : (isnan(_233) ? cbSceneParam._m0[77u].w : min(_233, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2069 = _2067.x;
    float _2070 = _2067.y;
    float _2071 = _2067.z;
    float _2072 = _2067.w;
    float _2164;
    float _2166;
    float _2168;
    float _2170;
    if (_233 > cbSceneParam._m0[78u].w)
    {
        float _2127 = isnan(_233) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _233 : min(cbSceneParam._m0[80u].w, _233));
        float _2128 = _2127 / _233;
        float _2139 = _2128 * _285;
        float _2140 = _286 * _2128;
        float _2141 = (-0.0) - _2140;
        float _2142 = _2128 * _287;
        float _2144 = (cbSceneParam._m0[77u].w * _2141) / _2127;
        float _2145 = _2144 + cbSceneParam._m0[79u].w;
        float _2146 = cbSceneParam._m0[79u].w - _2140;
        float _2152 = sqrt(((_2139 * _2139) + (_2140 * _2140)) + (_2142 * _2142));
        float _2155 = (1.0 - (cbSceneParam._m0[77u].w / _2127)) * _2152;
        float _2160 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2162 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2338;
        if (abs((_2141 - _2144) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2338 = ((((_2145 > 0.0) ? exp2(_2160 * _2145) : (2.0 - exp2(_2162 * _2145))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2155;
        }
        else
        {
            float _2282 = 1.0 / cbSceneParam._m0[80u].x;
            float _2283 = isnan(_2146) ? _2145 : (isnan(_2145) ? _2146 : max(_2145, _2146));
            float _2284 = isnan(_2146) ? _2145 : (isnan(_2145) ? _2146 : min(_2145, _2146));
            float _2293 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : min(_2283, 0.0));
            float _2294 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : min(_2284, 0.0));
            _2338 = ((abs(_2152 / _2141) * cbSceneParam._m0[80u].y) * ((((_2293 - _2294) * 2.0) - ((exp2(_2160 * (isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0)))) - exp2(_2160 * (isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0))))) * _2282)) - ((exp2(_2162 * _2293) - exp2(_2162 * _2294)) * _2282))) + (_2155 * cbSceneParam._m0[80u].z);
        }
        vec4 _2340 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2052, _2053, 1.0), 0.0);
        float _2349 = exp2((_2338 * (-1.44269502162933349609375)) * (1.0 - _2340.w));
        float _2350 = log2(_2349);
        float _2366 = log2(_2072);
        _2164 = (exp2(_2366 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2350 * cbSceneParam._m0[78u].x)) * _2340.x) / cbSceneParam._m0[78u].x)) + _2069;
        _2166 = (exp2(_2366 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2350 * cbSceneParam._m0[78u].y)) * _2340.y) / cbSceneParam._m0[78u].y)) + _2070;
        _2168 = (exp2(_2366 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2350 * cbSceneParam._m0[78u].z)) * _2340.z) / cbSceneParam._m0[78u].z)) + _2071;
        _2170 = _2349 * _2072;
    }
    else
    {
        _2164 = _2069;
        _2166 = _2070;
        _2168 = _2071;
        _2170 = _2072;
    }
    bool _2376;
    vec4 _2180;
    vec4 _2203;
    float _2205;
    float _2209;
    float _2210;
    float _2211;
    float _2212;
    bool _2223;
    for (;;)
    {
        _2180 = cbMatDynParam._m0[0u];
        float _2182 = roundEven(_2180.y);
        bool _2183 = _2182 == 3.0;
        float _2185 = log2(_2170);
        float _2192 = exp2(_2185 * cbSceneParam._m0[78u].x) * _2041;
        float _2193 = exp2(_2185 * cbSceneParam._m0[78u].y) * _2042;
        float _2194 = exp2(_2185 * cbSceneParam._m0[78u].z) * _2043;
        float _2201 = _301 + (-0.5);
        _2203 = cbMtdParam._m0[1u];
        _2205 = _2203.y * _2201;
        float _2208 = (_2182 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2209 = _2208 * (_2183 ? _2192 : (_2192 + (cbSceneParam._m0[72u].w * _2164)));
        _2210 = _2208 * (_2183 ? _2193 : (_2193 + (cbSceneParam._m0[72u].w * _2166)));
        _2211 = _2208 * (_2183 ? _2194 : (_2194 + (cbSceneParam._m0[72u].w * _2168)));
        _2212 = _2201 * 0.999000012874603271484375;
        _2223 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2223)
        {
            if ((cbInstanceData._m0[_353 + 7u].x + _2212) < 0.5)
            {
                _2376 = true;
                break;
            }
        }
        uint _2317 = _355 + uint(_2180.w);
        if ((cbInstanceData._m0[_2317].w < 1.0) && ((cbInstanceData._m0[_2317].w + _2212) < 0.5))
        {
            _2376 = true;
            break;
        }
        if ((_2205 + _203) < _2203.x)
        {
            _2376 = true;
            break;
        }
        _2376 = false;
        break;
    }
    float _2531;
    if (_2376)
    {
        discard_state = true;
        _2531 = 0.0;
    }
    else
    {
        _2531 = cbInstanceData._m0[_2044].w;
    }
    SV_Target.x = _2209;
    SV_Target.y = _2210;
    SV_Target.z = _2211;
    SV_Target.w = _2531;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2044].w;
    discard_exit();
}


