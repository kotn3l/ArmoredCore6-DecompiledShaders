#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _895;
float _3350;
float _3351;
float _3352;
float _3353;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    vec4 _232 = texture(sampler2D(M_AMSN_V_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _235 = _232.x;
    float _236 = _232.y;
    float _237 = _232.z;
    float _238 = _232.w;
    float _239 = _238 * TEXCOORD_1.z;
    vec4 _255 = texture(sampler2D(M_AMSN_V_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _259 = _255.z;
    float _263 = (_255.x * 2.0) + (-1.0);
    float _265 = (_255.y * 2.0) + (-1.0);
    float _266 = dot(vec2(_263, _265), vec2(_263, _265));
    float _3362 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _272 = sqrt(1.0 - (isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0))));
    vec4 _285 = texture(sampler2D(M_AMSN_V_Emissive_Glow_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _295 = fma(_272, _216, fma(_265, _208 * TANGENT.x, (_194 * _186) * _263));
    float _298 = fma(_272, _217, fma(_265, _208 * TANGENT.y, (_194 * _187) * _263));
    float _301 = fma(_272, _218, fma(_265, _208 * TANGENT.z, (_194 * _188) * _263));
    float _305 = inversesqrt(dot(vec3(_295, _298, _301), vec3(_295, _298, _301)));
    float _306 = _305 * _295;
    float _307 = _305 * _298;
    float _308 = _305 * _301;
    float _3373 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _309 = isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0));
    float _3384 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _310 = isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0));
    float _3395 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3406 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3417 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3428 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _314 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
    float _330 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _372 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _382 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _372);
    float _383 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _372);
    float _384 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _372);
    float _388 = inversesqrt(dot(vec3(_382, _383, _384), vec3(_382, _383, _384)));
    float _389 = _382 * _388;
    float _390 = _383 * _388;
    float _391 = _384 * _388;
    vec4 _396 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _398 = _396.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _574 = sqrt(((_382 * _382) + (_383 * _383)) + (_384 * _384));
        float _580 = (cbMatDynParam._m0[5u].x * _574) + cbMatDynParam._m0[5u].y;
        float _3439 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
        float _581 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
        float _585 = (cbMatDynParam._m0[5u].z * _574) + cbMatDynParam._m0[5u].w;
        float _3450 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0))) - _581)) + _581) < ((_398 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _410 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _411 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _431 = fma(_308, cbSceneParam._m0[5u].z, fma(_307, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _306));
    float _434 = fma(_308, cbSceneParam._m0[6u].z, fma(_307, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _306));
    float _437 = fma(_308, cbSceneParam._m0[7u].z, fma(_307, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _306));
    uint _450 = uint(roundEven(NORMAL.w)) * 13u;
    uint _452 = _450 + 9u;
    uint _453 = _452 + uint(cbMatDynParam._m0[0u].w);
    float _459 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0)))) * cbInstanceData._m0[_453].x;
    float _460 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0)))) * cbInstanceData._m0[_453].y;
    float _461 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0)))) * cbInstanceData._m0[_453].z;
    float _3461 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _462 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
    float _3472 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _463 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
    float _3483 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _464 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
    float _465 = 1.0 - _314;
    float _466 = _462 * _465;
    float _467 = _463 * _465;
    float _468 = _464 * _465;
    float _473 = (_462 + (-0.039999999105930328369140625)) * _314;
    float _474 = (_463 + (-0.039999999105930328369140625)) * _314;
    float _475 = (_464 + (-0.039999999105930328369140625)) * _314;
    float _476 = _473 + 0.039999999105930328369140625;
    float _478 = _474 + 0.039999999105930328369140625;
    float _479 = _475 + 0.039999999105930328369140625;
    vec4 _488 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _410, cbSceneParam._m0[86u].y * _411));
    float _491 = _488.x * TEXCOORD_1.w;
    float _492 = dot(vec3(_306, _307, _308), vec3(_389, _390, _391));
    float _495 = _492 * 2.0;
    float _499 = (_495 * _306) - _389;
    float _500 = (_495 * _307) - _390;
    float _501 = (_495 * _308) - _391;
    float _505 = abs(dot(vec3(_389, _390, _391), vec3(_306, _307, _308)));
    float _3494 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _507 = sqrt(_310);
    float _520 = exp2((_507 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_507 * 3.0));
    float _526 = (1.0 - _520) * ((_507 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _527 = _520 * _507;
    float _555 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _559 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _563 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _894;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _619 = fma(_563, cbModelParam._m0[26u].z, fma(_559, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _555));
        float _623 = fma(_563, cbModelParam._m0[27u].z, fma(_559, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _555));
        float _627 = fma(_563, cbModelParam._m0[28u].z, fma(_559, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _555));
        float _652 = _555 + _306;
        float _653 = _559 + _307;
        float _654 = _563 + _308;
        float _664 = fma(_654, cbModelParam._m0[26u].z, fma(_653, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _652)) - _619;
        float _665 = fma(_654, cbModelParam._m0[27u].z, fma(_653, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _652)) - _623;
        float _666 = fma(_654, cbModelParam._m0[28u].z, fma(_653, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _652)) - _627;
        float _670 = inversesqrt(dot(vec3(_664, _665, _666), vec3(_664, _665, _666)));
        float _683 = ((_670 * _664) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_619 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _684 = ((_670 * _665) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_623 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _685 = ((_670 * _666) / cbModelParam._m0[34u].z) + ((((((_627 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _688 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_683, _684, _685), 0.0);
        vec4 _695 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_683, _684, _685), 0.0);
        vec4 _702 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_683, _684, _685), 0.0);
        vec4 _709 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_683, _684, _685), 0.0);
        float _722 = exp2((_688.w + (-0.5)) * 20.0) * 2.0;
        float _723 = _722 * (_688.x + (-0.5));
        float _724 = _722 * (_688.y + (-0.5));
        float _725 = _722 * (_688.z + (-0.5));
        float _732 = exp2((_695.w + (-0.5)) * 20.0) * 2.0;
        float _733 = _732 * (_695.x + (-0.5));
        float _734 = _732 * (_695.y + (-0.5));
        float _735 = _732 * (_695.z + (-0.5));
        float _742 = exp2((_702.w + (-0.5)) * 20.0) * 2.0;
        float _743 = _742 * (_702.x + (-0.5));
        float _744 = _742 * (_702.y + (-0.5));
        float _745 = _742 * (_702.z + (-0.5));
        float _752 = exp2((_709.w + (-0.5)) * 20.0) * 2.0;
        float _753 = _752 * (_709.x + (-0.5));
        float _754 = _752 * (_709.y + (-0.5));
        float _755 = _752 * (_709.z + (-0.5));
        float _756 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _757 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _758 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _759 = _723 * 0.5;
        float _760 = _733 * 0.5;
        float _761 = _743 * 0.5;
        float _762 = dot(vec3(_759, _760, _761), vec3(_759, _760, _761));
        float _767 = (_762 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_762);
        float _776 = (dot(vec3(_306, _307, _308), vec3(_767 * _759, _767 * _760, _767 * _761)) + 1.0) * 0.5;
        float _3520 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _786 = sqrt(((_760 * _760) + (_759 * _759)) + (_761 * _761)) / (_756 + 9.9999997473787516355514526367188e-06);
        float _3531 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _787 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
        float _788 = _787 * 2.0;
        float _792 = (1.0 - _787) / (_787 + 1.0);
        float _3542 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _793 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
        float _802 = ((((1.0 - _793) * (_788 + 2.0)) * exp2(log2(isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0))) * (_788 + 1.0))) + _793) * _756;
        float _803 = _724 * 0.5;
        float _804 = _734 * 0.5;
        float _805 = _744 * 0.5;
        float _806 = dot(vec3(_803, _804, _805), vec3(_803, _804, _805));
        float _811 = (_806 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_806);
        float _819 = (dot(vec3(_306, _307, _308), vec3(_811 * _803, _811 * _804, _811 * _805)) + 1.0) * 0.5;
        float _3553 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _828 = sqrt(((_804 * _804) + (_803 * _803)) + (_805 * _805)) / (_757 + 9.9999997473787516355514526367188e-06);
        float _3564 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
        float _830 = _829 * 2.0;
        float _834 = (1.0 - _829) / (_829 + 1.0);
        float _3575 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _835 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
        float _844 = ((((1.0 - _835) * (_830 + 2.0)) * exp2(log2(isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0))) * (_830 + 1.0))) + _835) * _757;
        float _845 = _725 * 0.5;
        float _846 = _735 * 0.5;
        float _847 = _745 * 0.5;
        float _848 = dot(vec3(_845, _846, _847), vec3(_845, _846, _847));
        float _853 = (_848 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_848);
        float _861 = (dot(vec3(_306, _307, _308), vec3(_853 * _845, _853 * _846, _853 * _847)) + 1.0) * 0.5;
        float _3586 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _870 = sqrt(((_846 * _846) + (_845 * _845)) + (_847 * _847)) / (_758 + 9.9999997473787516355514526367188e-06);
        float _3597 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _871 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
        float _872 = _871 * 2.0;
        float _876 = (1.0 - _871) / (_871 + 1.0);
        float _3608 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _877 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _886 = ((((1.0 - _877) * (_872 + 2.0)) * exp2(log2(isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0))) * (_872 + 1.0))) + _877) * _758;
        _894 = _725;
        _896 = _724;
        _897 = _723;
        _898 = _735;
        _899 = _734;
        _900 = _733;
        _901 = _745;
        _902 = _744;
        _903 = _743;
        _904 = _758;
        _905 = _757;
        _906 = _756;
        _907 = cbModelParam._m0[36u].z * (isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0)));
        _908 = cbModelParam._m0[36u].z * (isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0)));
        _909 = cbModelParam._m0[36u].z * (isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0)));
    }
    else
    {
        _894 = _895;
        _896 = _895;
        _897 = _895;
        _898 = _895;
        _899 = _895;
        _900 = _895;
        _901 = _895;
        _902 = _895;
        _903 = _895;
        _904 = _895;
        _905 = _895;
        _906 = _895;
        _907 = 0.0;
        _908 = 0.0;
        _909 = 0.0;
    }
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _938 = fma(_563, cbModelParam._m0[30u].z, fma(_559, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _555));
        float _942 = fma(_563, cbModelParam._m0[31u].z, fma(_559, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _555));
        float _946 = fma(_563, cbModelParam._m0[32u].z, fma(_559, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _555));
        float _969 = _555 + _306;
        float _970 = _559 + _307;
        float _971 = _563 + _308;
        float _981 = fma(_971, cbModelParam._m0[30u].z, fma(_970, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _969)) - _938;
        float _982 = fma(_971, cbModelParam._m0[31u].z, fma(_970, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _969)) - _942;
        float _983 = fma(_971, cbModelParam._m0[32u].z, fma(_970, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _969)) - _946;
        float _987 = inversesqrt(dot(vec3(_981, _982, _983), vec3(_981, _982, _983)));
        float _1000 = ((_987 * _981) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_938 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1001 = ((_987 * _982) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_942 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1002 = ((_987 * _983) / cbModelParam._m0[35u].z) + ((((((_946 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        float _1037 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_1004.x + (-0.5));
        float _1039 = _1037 * (_1004.y + (-0.5));
        float _1040 = _1037 * (_1004.z + (-0.5));
        float _1047 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1011.x + (-0.5));
        float _1049 = _1047 * (_1011.y + (-0.5));
        float _1050 = _1047 * (_1011.z + (-0.5));
        float _1057 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1018.x + (-0.5));
        float _1059 = _1057 * (_1018.y + (-0.5));
        float _1060 = _1057 * (_1018.z + (-0.5));
        float _1067 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1025.x + (-0.5));
        float _1069 = _1067 * (_1025.y + (-0.5));
        float _1070 = _1067 * (_1025.z + (-0.5));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1073 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1074 = _1038 * 0.5;
        float _1075 = _1048 * 0.5;
        float _1076 = _1058 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1090 = (dot(vec3(_306, _307, _308), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _3649 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1099 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _3660 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _3671 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))) * (_1101 + 1.0))) + _1106) * _1071;
        float _1116 = _1039 * 0.5;
        float _1117 = _1049 * 0.5;
        float _1118 = _1059 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1132 = (dot(vec3(_306, _307, _308), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _3682 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1141 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1072 + 9.9999997473787516355514526367188e-06);
        float _3693 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _1143 = _1142 * 2.0;
        float _1147 = (1.0 - _1142) / (_1142 + 1.0);
        float _3704 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _1157 = ((((1.0 - _1148) * (_1143 + 2.0)) * exp2(log2(isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * (_1143 + 1.0))) + _1148) * _1072;
        float _1158 = _1040 * 0.5;
        float _1159 = _1050 * 0.5;
        float _1160 = _1060 * 0.5;
        float _1161 = dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160));
        float _1166 = (_1161 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1161);
        float _1174 = (dot(vec3(_306, _307, _308), vec3(_1166 * _1158, _1166 * _1159, _1166 * _1160)) + 1.0) * 0.5;
        float _3715 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1183 = sqrt(((_1159 * _1159) + (_1158 * _1158)) + (_1160 * _1160)) / (_1073 + 9.9999997473787516355514526367188e-06);
        float _3726 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1185 = _1184 * 2.0;
        float _1189 = (1.0 - _1184) / (_1184 + 1.0);
        float _3737 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1199 = ((((1.0 - _1190) * (_1185 + 2.0)) * exp2(log2(isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))) * (_1185 + 1.0))) + _1190) * _1073;
        _1207 = _1040;
        _1208 = _1039;
        _1209 = _1038;
        _1210 = _1050;
        _1211 = _1049;
        _1212 = _1048;
        _1213 = _1060;
        _1214 = _1059;
        _1215 = _1058;
        _1216 = _1073;
        _1217 = _1072;
        _1218 = _1071;
        _1219 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
        _1220 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)));
        _1221 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)));
    }
    else
    {
        _1207 = _895;
        _1208 = _895;
        _1209 = _895;
        _1210 = _895;
        _1211 = _895;
        _1212 = _895;
        _1213 = _895;
        _1214 = _895;
        _1215 = _895;
        _1216 = _895;
        _1217 = _895;
        _1218 = _895;
        _1219 = 0.0;
        _1220 = 0.0;
        _1221 = 0.0;
    }
    float _1231 = (cbModelParam._m0[1u].x * (_1219 - _907)) + _907;
    float _1232 = (cbModelParam._m0[1u].x * (_1220 - _908)) + _908;
    float _1233 = (cbModelParam._m0[1u].x * (_1221 - _909)) + _909;
    float _1254 = fma(_1233, cbSceneParam._m0[89u].z, fma(_1232, cbSceneParam._m0[89u].y, _1231 * cbSceneParam._m0[89u].x));
    float _1257 = fma(_1233, cbSceneParam._m0[90u].z, fma(_1232, cbSceneParam._m0[90u].y, _1231 * cbSceneParam._m0[90u].x));
    float _1260 = fma(_1233, cbSceneParam._m0[91u].z, fma(_1232, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1231));
    float _1275 = _499 * 0.5;
    float _1276 = _500 * 0.5;
    float _1277 = _501 * 0.5;
    float _1278 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_1209, _1212, _1215, _1218));
    float _1281 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_1208, _1211, _1214, _1217));
    float _1284 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_1207, _1210, _1213, _1216));
    float _1318;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1291 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_894, _898, _901, _904));
        float _1295 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_896, _899, _902, _905));
        float _1299 = dot(vec4(_1275, _1276, _1277, 1.0), vec4(_897, _900, _903, _906));
        float _1306 = dot(vec4(cbModelParam._m0[39u]), vec4(_1275, _1276, _1277, 1.0));
        _1318 = dot(vec3(isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)), isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)), isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1306) ? 0.0 : (isnan(0.0) ? _1306 : max(0.0, _1306))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1318 = 1.0;
    }
    float _1329;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1320 = dot(vec4(cbModelParam._m0[40u]), vec4(_1275, _1276, _1277, 1.0));
        _1329 = dot(vec3(isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)), isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)), isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1320) ? 0.0 : (isnan(0.0) ? _1320 : max(0.0, _1320))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1329 = 1.0;
    }
    float _1333 = (_1329 * cbModelParam._m0[1u].x) + (_1318 * (1.0 - cbModelParam._m0[1u].x));
    float _1343 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _310);
    float _1344 = isnan(_1343) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1343 : min(cbModelParam._m0[25u].z, _1343));
    float _1426;
    float _1428;
    float _1430;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1393 = fma(_563, cbModelParam._m0[13u].z, fma(_559, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _555)) + cbModelParam._m0[13u].w;
        float _1397 = fma(_563, cbModelParam._m0[14u].z, fma(_559, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _555)) + cbModelParam._m0[14u].w;
        float _1401 = fma(_563, cbModelParam._m0[15u].z, fma(_559, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _555)) + cbModelParam._m0[15u].w;
        float _1404 = fma(_501, cbModelParam._m0[13u].z, fma(_500, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _499));
        float _1407 = fma(_501, cbModelParam._m0[14u].z, fma(_500, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _499));
        float _1410 = fma(_501, cbModelParam._m0[15u].z, fma(_500, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _499));
        float _1438;
        if (_1404 > 0.0)
        {
            _1438 = abs((1.0 - _1393) / _1404);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1404 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1393 + 1.0) / _1404);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1438 = frontier_phi_19_17_ladder;
        }
        float _1667;
        if (_1407 > 0.0)
        {
            _1667 = abs((1.0 - _1397) / _1407);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1407 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1397 + 1.0) / _1407);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1667 = frontier_phi_28_24_ladder;
        }
        float _1924;
        if (_1410 > 0.0)
        {
            _1924 = abs((1.0 - _1401) / _1410);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1410 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1401 + 1.0) / _1410);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1924 = frontier_phi_40_35_ladder;
        }
        float _1926 = isnan(_1667) ? _1438 : (isnan(_1438) ? _1667 : min(_1438, _1667));
        float _1927 = isnan(_1924) ? _1926 : (isnan(_1926) ? _1924 : min(_1926, _1924));
        float _1931 = (_1927 * _1404) + _1393;
        float _1932 = (_1927 * _1407) + _1397;
        float _1933 = (_1927 * _1410) + _1401;
        float _1934 = _1927 * 9.9999997473787516355514526367188e-05;
        float _1936 = (-1.0) - _1934;
        float _1938 = _1934 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1933 > _1938) || ((_1933 < _1936) || ((_1932 > _1938) || ((_1932 < _1936) || ((_1931 < _1936) || (_1931 > _1938))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2061 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1933, cbModelParam._m0[9u].z, fma(_1932, cbModelParam._m0[9u].y, _1931 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1933, cbModelParam._m0[10u].z, fma(_1932, cbModelParam._m0[10u].y, _1931 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1933, cbModelParam._m0[11u].z, fma(_1932, cbModelParam._m0[11u].y, _1931 * cbModelParam._m0[11u].x))), _1344);
            frontier_phi_18_40_ladder = _2061.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2061.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2061.x * cbModelParam._m0[1u].y;
        }
        _1426 = frontier_phi_18_40_ladder_2;
        _1428 = frontier_phi_18_40_ladder_1;
        _1430 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1414 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_499, _500, _501), _1344);
        _1426 = _1414.x * cbModelParam._m0[1u].y;
        _1428 = _1414.y * cbModelParam._m0[1u].y;
        _1430 = _1414.z * cbModelParam._m0[1u].y;
    }
    float _1434 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _310);
    float _1435 = isnan(_1434) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1434 : min(cbModelParam._m0[25u].w, _1434));
    float _1528;
    float _1530;
    float _1532;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1492 = fma(_563, cbModelParam._m0[21u].z, fma(_559, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _555)) + cbModelParam._m0[21u].w;
        float _1496 = fma(_563, cbModelParam._m0[22u].z, fma(_559, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _555)) + cbModelParam._m0[22u].w;
        float _1500 = fma(_563, cbModelParam._m0[23u].z, fma(_559, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _555)) + cbModelParam._m0[23u].w;
        float _1503 = fma(_501, cbModelParam._m0[21u].z, fma(_500, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _499));
        float _1506 = fma(_501, cbModelParam._m0[22u].z, fma(_500, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _499));
        float _1509 = fma(_501, cbModelParam._m0[23u].z, fma(_500, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _499));
        float _1672;
        if (_1503 > 0.0)
        {
            _1672 = abs((1.0 - _1492) / _1503);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1492 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1672 = frontier_phi_30_26_ladder;
        }
        float _1951;
        if (_1506 > 0.0)
        {
            _1951 = abs((1.0 - _1496) / _1506);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1506 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1496 + 1.0) / _1506);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1951 = frontier_phi_42_37_ladder;
        }
        float _2164;
        if (_1509 > 0.0)
        {
            _2164 = abs((1.0 - _1500) / _1509);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1509 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1500 + 1.0) / _1509);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2164 = frontier_phi_51_48_ladder;
        }
        float _2166 = isnan(_1951) ? _1672 : (isnan(_1672) ? _1951 : min(_1672, _1951));
        float _2167 = isnan(_2164) ? _2166 : (isnan(_2166) ? _2164 : min(_2166, _2164));
        float _2171 = (_2167 * _1503) + _1492;
        float _2172 = (_2167 * _1506) + _1496;
        float _2173 = (_2167 * _1509) + _1500;
        float _2174 = _2167 * 9.9999997473787516355514526367188e-05;
        float _2175 = (-1.0) - _2174;
        float _2177 = _2174 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2173 > _2177) || ((_2173 < _2175) || ((_2172 > _2177) || ((_2172 < _2175) || ((_2171 < _2175) || (_2171 > _2177))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2402 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2173, cbModelParam._m0[17u].z, fma(_2172, cbModelParam._m0[17u].y, _2171 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2173, cbModelParam._m0[18u].z, fma(_2172, cbModelParam._m0[18u].y, _2171 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2173, cbModelParam._m0[19u].z, fma(_2172, cbModelParam._m0[19u].y, _2171 * cbModelParam._m0[19u].x))), _1435);
            frontier_phi_27_51_ladder = _2402.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2402.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2402.x * cbModelParam._m0[1u].z;
        }
        _1528 = frontier_phi_27_51_ladder_2;
        _1530 = frontier_phi_27_51_ladder_1;
        _1532 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1512 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_499, _500, _501), _1435);
        _1528 = _1512.x * cbModelParam._m0[1u].z;
        _1530 = _1512.y * cbModelParam._m0[1u].z;
        _1532 = _1512.z * cbModelParam._m0[1u].z;
    }
    float _1545 = (((_526 * _476) + _527) * _491) * ((cbModelParam._m0[1u].w * (_1528 - _1426)) + _1426);
    float _1547 = (((_526 * _478) + _527) * _491) * ((cbModelParam._m0[1u].w * (_1530 - _1428)) + _1428);
    float _1549 = (((_526 * _479) + _527) * _491) * ((cbModelParam._m0[1u].w * (_1532 - _1430)) + _1430);
    float _1552 = fma(_1549, cbSceneParam._m0[89u].z, fma(_1547, cbSceneParam._m0[89u].y, _1545 * cbSceneParam._m0[89u].x));
    float _1555 = fma(_1549, cbSceneParam._m0[90u].z, fma(_1547, cbSceneParam._m0[90u].y, _1545 * cbSceneParam._m0[90u].x));
    float _1558 = fma(_1549, cbSceneParam._m0[91u].z, fma(_1547, cbSceneParam._m0[91u].y, _1545 * cbSceneParam._m0[91u].x));
    vec4 _1566 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_410, _411));
    float _1568 = _1566.w;
    float _1580 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1568);
    float _1581 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1568);
    float _1582 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1568);
    uvec4 _1586 = floatBitsToUint(cbInstanceData._m0[_450 + 5u]);
    uint _1588 = _1586.x * 14u;
    uint _1589 = _1588 + 13u;
    float _1596 = _491 + (-1.0);
    float _1601 = (cbLight._m0[_1589].x * _1596) + 1.0;
    float _1602 = (cbLight._m0[_1589].y * _1596) + 1.0;
    float _1603 = (cbLight._m0[_1589].z * _1596) + 1.0;
    float _1604 = (cbLight._m0[_1589].w * _1596) + 1.0;
    uint _1605 = _1588 + 5u;
    float _1611 = isnan(1.0) ? _1602 : (isnan(_1602) ? 1.0 : min(_1602, 1.0));
    uint _1615 = _1588 + 4u;
    float _1625 = isnan(1.0) ? _1601 : (isnan(_1601) ? 1.0 : min(_1601, 1.0));
    uint _1629 = _1588 | 1u;
    float _1640 = dot(vec3(cbLight._m0[_1588].xyz), vec3(_306, _307, _308));
    float _1643 = dot(vec3(cbLight._m0[_1629].xyz), vec3(_306, _307, _308));
    float _3873 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
    float _3884 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
    float _1648 = (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * 0.3183098733425140380859375;
    float _1650 = (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * 0.3183098733425140380859375;
    float _1657 = ((cbLight._m0[_1605].x * _1611) * _1650) + (((cbLight._m0[_1615].x * _1580) * _1625) * _1648);
    float _1658 = ((_1611 * cbLight._m0[_1605].y) * _1650) + (((cbLight._m0[_1615].y * _1581) * _1625) * _1648);
    float _1659 = ((_1611 * cbLight._m0[_1605].z) * _1650) + (((cbLight._m0[_1615].z * _1582) * _1625) * _1648);
    uvec4 _1664 = floatBitsToUint(cbLight._m0[_1588 + 12u]);
    bool _1666 = _1664.x == 0u;
    float _1677;
    float _1679;
    float _1681;
    if (_1666)
    {
        _1677 = _1657;
        _1679 = _1658;
        _1681 = _1659;
    }
    else
    {
        uint _1685 = _1588 + 6u;
        float _1701 = (dot(vec3(cbLight._m0[_1588 + 2u].xyz), vec3(_306, _307, _308)) * 0.5) + 0.5;
        float _1702 = _1701 * _1701;
        float _3895 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1704 = isnan(1.0) ? _1603 : (isnan(_1603) ? 1.0 : min(_1603, 1.0));
        _1677 = (((cbLight._m0[_1685].x * 0.3183098733425140380859375) * _1703) * _1704) + _1657;
        _1679 = (((cbLight._m0[_1685].y * 0.3183098733425140380859375) * _1703) * _1704) + _1658;
        _1681 = (((cbLight._m0[_1685].z * 0.3183098733425140380859375) * _1703) * _1704) + _1659;
    }
    bool _1684 = _1664.y == 0u;
    float _1722;
    float _1724;
    float _1726;
    if (_1684)
    {
        _1722 = _1677;
        _1724 = _1679;
        _1726 = _1681;
    }
    else
    {
        uint _1895 = _1588 + 7u;
        float _1911 = (dot(vec3(cbLight._m0[_1588 + 3u].xyz), vec3(_306, _307, _308)) * 0.5) + 0.5;
        float _1912 = _1911 * _1911;
        float _3911 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
        float _1913 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1914 = isnan(1.0) ? _1604 : (isnan(_1604) ? 1.0 : min(_1604, 1.0));
        _1722 = (((cbLight._m0[_1895].x * 0.3183098733425140380859375) * _1913) * _1914) + _1677;
        _1724 = (((cbLight._m0[_1895].y * 0.3183098733425140380859375) * _1913) * _1914) + _1679;
        _1726 = (((cbLight._m0[_1895].z * 0.3183098733425140380859375) * _1913) * _1914) + _1681;
    }
    uint _1729 = _1588 + 8u;
    float _1742 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1588].w)) * _310) * 0.949999988079071044921875);
    float _1743 = _1742 * _1742;
    float _1744 = cbLight._m0[_1588].x + _389;
    float _1745 = cbLight._m0[_1588].y + _390;
    float _1746 = cbLight._m0[_1588].z + _391;
    float _1750 = inversesqrt(dot(vec3(_1744, _1745, _1746), vec3(_1744, _1745, _1746)));
    float _1751 = _1750 * _1744;
    float _1752 = _1750 * _1745;
    float _1753 = _1750 * _1746;
    float _1754 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_1588].xyz));
    float _3927 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _1757 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _3938 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _1758 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _1759 = dot(vec3(_306, _307, _308), vec3(_1751, _1752, _1753));
    float _3949 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
    float _1762 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _1763 = dot(vec3(cbLight._m0[_1588].xyz), vec3(_1751, _1752, _1753));
    float _3960 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _1767 = _1743 * _1743;
    float _1771 = ((_1762 * _1762) * (_1767 + (-1.0))) + 1.0;
    float _1779 = exp2(log2(1.0 - (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0)))) * 5.0);
    float _1780 = 0.959999978542327880859375 - _473;
    float _1782 = 0.959999978542327880859375 - _474;
    float _1783 = 0.959999978542327880859375 - _475;
    float _1790 = 1.0 - _1743;
    float _1801 = (0.5 / (((_1758 * ((_1757 * _1790) + _1743)) + 9.9999999392252902907785028219223e-09) + (((_1758 * _1790) + _1743) * _1757))) * _1757;
    float _3971 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _1803 = (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_1767 / ((_1771 * _1771) * 3.141590118408203125));
    uint _1817 = _1588 + 9u;
    float _1828 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1629].w)) * _310) * 0.949999988079071044921875);
    float _1829 = _1828 * _1828;
    float _1830 = cbLight._m0[_1629].x + _389;
    float _1831 = cbLight._m0[_1629].y + _390;
    float _1832 = cbLight._m0[_1629].z + _391;
    float _1836 = inversesqrt(dot(vec3(_1830, _1831, _1832), vec3(_1830, _1831, _1832)));
    float _1837 = _1836 * _1830;
    float _1838 = _1836 * _1831;
    float _1839 = _1836 * _1832;
    float _1840 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_1629].xyz));
    float _3982 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1843 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _1844 = dot(vec3(_306, _307, _308), vec3(_1837, _1838, _1839));
    float _3993 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1847 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _1848 = dot(vec3(cbLight._m0[_1629].xyz), vec3(_1837, _1838, _1839));
    float _4004 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1852 = _1829 * _1829;
    float _1856 = ((_1847 * _1847) * (_1852 + (-1.0))) + 1.0;
    float _1863 = exp2(log2(1.0 - (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) * 5.0);
    float _1870 = 1.0 - _1829;
    float _1880 = (0.5 / (((_1758 * ((_1843 * _1870) + _1829)) + 9.9999999392252902907785028219223e-09) + (((_1758 * _1870) + _1829) * _1843))) * _1843;
    float _4015 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1882 = (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1852 / ((_1856 * _1856) * 3.141590118408203125));
    float _1892 = (((((_1863 * _1780) + _476) * cbLight._m0[_1817].x) * _1882) * _1611) + ((((cbLight._m0[_1729].x * _1580) * ((_1779 * _1780) + _476)) * _1803) * _1625);
    float _1893 = (((((_1863 * _1782) + _478) * cbLight._m0[_1817].y) * _1882) * _1611) + ((((cbLight._m0[_1729].y * _1581) * ((_1779 * _1782) + _478)) * _1803) * _1625);
    float _1894 = (((((_1863 * _1783) + _479) * cbLight._m0[_1817].z) * _1882) * _1611) + ((((cbLight._m0[_1729].z * _1582) * ((_1779 * _1783) + _479)) * _1803) * _1625);
    float _1956;
    float _1958;
    float _1960;
    if (_1666)
    {
        _1956 = _1892;
        _1958 = _1893;
        _1960 = _1894;
    }
    else
    {
        uint _1962 = _1588 + 2u;
        uint _1966 = _1588 + 10u;
        float _1980 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1962].w)) * _310) * 0.949999988079071044921875);
        float _1981 = _1980 * _1980;
        float _1982 = cbLight._m0[_1962].x + _389;
        float _1983 = cbLight._m0[_1962].y + _390;
        float _1984 = cbLight._m0[_1962].z + _391;
        float _1988 = inversesqrt(dot(vec3(_1982, _1983, _1984), vec3(_1982, _1983, _1984)));
        float _1989 = _1988 * _1982;
        float _1990 = _1988 * _1983;
        float _1991 = _1988 * _1984;
        float _1992 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_1962].xyz));
        float _4026 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        float _1995 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1996 = dot(vec3(_306, _307, _308), vec3(_1989, _1990, _1991));
        float _4037 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        float _1999 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _2000 = dot(vec3(cbLight._m0[_1962].xyz), vec3(_1989, _1990, _1991));
        float _4048 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
        float _2004 = _1981 * _1981;
        float _2008 = ((_1999 * _1999) * (_2004 + (-1.0))) + 1.0;
        float _2015 = exp2(log2(1.0 - (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) * 5.0);
        float _2022 = 1.0 - _1981;
        float _2032 = (0.5 / (((_1758 * ((_1995 * _2022) + _1981)) + 9.9999999392252902907785028219223e-09) + (((_1758 * _2022) + _1981) * _1995))) * _1995;
        float _4059 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
        float _2034 = (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_2004 / ((_2008 * _2008) * 3.141590118408203125));
        float _2035 = isnan(1.0) ? _1603 : (isnan(_1603) ? 1.0 : min(_1603, 1.0));
        _1956 = (((((_2015 * _1780) + _476) * cbLight._m0[_1966].x) * _2034) * _2035) + _1892;
        _1958 = (((((_2015 * _1782) + _478) * cbLight._m0[_1966].y) * _2034) * _2035) + _1893;
        _1960 = (((((_2015 * _1783) + _479) * cbLight._m0[_1966].z) * _2034) * _2035) + _1894;
    }
    float _2070;
    float _2072;
    float _2074;
    if (_1684)
    {
        _2070 = _1956;
        _2072 = _1958;
        _2074 = _1960;
    }
    else
    {
        uint _2081 = _1588 + 3u;
        uint _2085 = _1588 + 11u;
        float _2099 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2081].w)) * _310) * 0.949999988079071044921875);
        float _2100 = _2099 * _2099;
        float _2101 = cbLight._m0[_2081].x + _389;
        float _2102 = cbLight._m0[_2081].y + _390;
        float _2103 = cbLight._m0[_2081].z + _391;
        float _2107 = inversesqrt(dot(vec3(_2101, _2102, _2103), vec3(_2101, _2102, _2103)));
        float _2108 = _2107 * _2101;
        float _2109 = _2107 * _2102;
        float _2110 = _2107 * _2103;
        float _2111 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_2081].xyz));
        float _4075 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2114 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _2115 = dot(vec3(_306, _307, _308), vec3(_2108, _2109, _2110));
        float _4086 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2118 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _2119 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_2108, _2109, _2110));
        float _4097 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2123 = _2100 * _2100;
        float _2127 = ((_2118 * _2118) * (_2123 + (-1.0))) + 1.0;
        float _2134 = exp2(log2(1.0 - (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) * 5.0);
        float _2141 = 1.0 - _2100;
        float _2151 = (0.5 / (((_1758 * ((_2114 * _2141) + _2100)) + 9.9999999392252902907785028219223e-09) + (((_1758 * _2141) + _2100) * _2114))) * _2114;
        float _4108 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2153 = (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_2123 / ((_2127 * _2127) * 3.141590118408203125));
        float _2154 = isnan(1.0) ? _1604 : (isnan(_1604) ? 1.0 : min(_1604, 1.0));
        _2070 = (((((_2134 * _1780) + _476) * cbLight._m0[_2085].x) * _2153) * _2154) + _1956;
        _2072 = (((((_2134 * _1782) + _478) * cbLight._m0[_2085].y) * _2153) * _2154) + _1958;
        _2074 = (((((_2134 * _1783) + _479) * cbLight._m0[_2085].z) * _2153) * _2154) + _1960;
    }
    float _2288;
    float _2290;
    float _2292;
    float _2294;
    float _2296;
    float _2298;
    if (_1586.y == 0u)
    {
        float _2229 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2230 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2229;
        float _2231 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2229;
        float _2232 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2229;
        uvec4 _2244 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2245 = _2244.x;
        uint _2256 = uint((float(_2244.y) * floor(float(uint(cbSceneParam._m0[85u].y * _411) / _2245))) + floor(float(uint(cbSceneParam._m0[85u].x * _410) / _2245)));
        float _2266 = (log2(_2232 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2267 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        uint _2270 = uint(isnan(14.0) ? _2267 : (isnan(_2267) ? 14.0 : min(_2267, 14.0)));
        uvec4 _2275 = texelFetch(g_lightClusterGridBuffer, int(((_2270 << 2u) + (_2256 << 6u)) >> 2u));
        uint _2276 = _2275.x;
        uint _2277 = _2244.z;
        float _2407;
        float _2409;
        float _2411;
        float _2413;
        float _2415;
        float _2417;
        if (((((1u << ((_2277 >> 4u) & 15u)) + 4294967295u) & _2276) == 0u) || ((_2277 & 240u) == 0u))
        {
            _2407 = 0.0;
            _2409 = 0.0;
            _2411 = 0.0;
            _2413 = 0.0;
            _2415 = 0.0;
            _2417 = 0.0;
        }
        else
        {
            float _2408;
            float _2410;
            float _2412;
            float _2414;
            float _2416;
            float _2418;
            float _2568 = 0.0;
            float _2569 = 0.0;
            float _2570 = 0.0;
            float _2571 = 0.0;
            float _2572 = 0.0;
            float _2573 = 0.0;
            uint _2574 = 0u;
            uint _2583;
            bool _2584;
            for (;;)
            {
                _2583 = texelFetch(g_lightClassification, int((((_2270 << 5u) + (_2256 << 9u)) + (_2574 << 2u)) >> 2u)).x;
                _2584 = _2583 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2584)
                {
                    frontier_phi_68_pred = _2570;
                    frontier_phi_68_pred_1 = _2573;
                    frontier_phi_68_pred_2 = _2572;
                    frontier_phi_68_pred_3 = _2571;
                    frontier_phi_68_pred_4 = _2569;
                    frontier_phi_68_pred_5 = _2568;
                }
                else
                {
                    float _2713;
                    float _2714;
                    float _2715;
                    float _2716;
                    float _2717;
                    float _2718;
                    uint _2719;
                    _2713 = _2568;
                    _2714 = _2569;
                    _2715 = _2570;
                    _2716 = _2571;
                    _2717 = _2572;
                    _2718 = _2573;
                    _2719 = _2583;
                    float _2640;
                    float _2641;
                    float _2642;
                    float _2643;
                    float _2644;
                    float _2645;
                    for (;;)
                    {
                        uint _2723 = uint(findLSB(_2719)) + (_2574 << 5u);
                        uint _2720 = (_2719 + 4294967295u) & _2719;
                        uint _2725 = _2723 * 48u;
                        vec4 _2739 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2725)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 3u)).x));
                        uint _2745 = (_2723 * 48u) + 4u;
                        vec4 _2758 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2745)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 3u)).x));
                        uint _2764 = (_2723 * 48u) + 8u;
                        vec3 _2775 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2764)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 2u)).x));
                        float _2779 = _2739.x - _2230;
                        float _2780 = _2739.y - _2231;
                        float _2781 = _2739.z - _2232;
                        float _2782 = dot(vec3(_2779, _2780, _2781), vec3(_2779, _2780, _2781));
                        float _2785 = inversesqrt(_2782);
                        float _2786 = _2785 * _2779;
                        float _2787 = _2785 * _2780;
                        float _2788 = _2785 * _2781;
                        float _2789 = dot(vec3(_431, _434, _437), vec3(_2786, _2787, _2788));
                        float _2794 = 1.0 - (_2782 * _2739.w);
                        float _4134 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
                        float _2795 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
                        float _2796 = sqrt(_2782) * _2758.w;
                        float _2799 = 1.39999997615814208984375 / (_2796 + 1.39999997615814208984375);
                        float _2800 = _2799 * _2799;
                        float _2803 = ((1.0 - _2800) * _2789) + _2800;
                        float _2806 = _2796 * _2796;
                        float _2810 = ((isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0))) * _2795) / ((_2806 * 0.699999988079071044921875) + 1.0);
                        float _2814 = (-0.0) - _2230;
                        float _2815 = (-0.0) - _2231;
                        float _2816 = (-0.0) - _2232;
                        float _2820 = inversesqrt(dot(vec3(_2814, _2815, _2816), vec3(_2814, _2815, _2816)));
                        float _2821 = _2820 * _2814;
                        float _2822 = _2820 * _2815;
                        float _2823 = _2820 * _2816;
                        float _2831 = exp2(log2(1.0 / ((_2806 * 3.5) + 5.0)) * 0.25);
                        float _2832 = 1.0 - _507;
                        float _2839 = sqrt(1.0 - ((1.0 - (_2832 * _2832)) * (1.0 - (_2831 * _2831))));
                        float _2840 = _2839 * _2839;
                        float _2841 = _2840 * _2840;
                        float _2842 = _2821 + _2786;
                        float _2843 = _2822 + _2787;
                        float _2844 = _2823 + _2788;
                        float _2848 = inversesqrt(dot(vec3(_2842, _2843, _2844), vec3(_2842, _2843, _2844)));
                        float _2852 = dot(vec3(_431, _434, _437), vec3(_2821, _2822, _2823));
                        float _4150 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
                        float _2855 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
                        float _2856 = dot(vec3(_431, _434, _437), vec3(_2848 * _2842, _2848 * _2843, _2848 * _2844));
                        float _4161 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
                        float _2859 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
                        float _2863 = ((_2859 * _2859) * (_2841 + (-1.0))) + 1.0;
                        float _2864 = _2799 * _2840;
                        float _2865 = _2864 * _2864;
                        float _2868 = ((1.0 - _2865) * _2789) + _2865;
                        float _4172 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
                        float _2869 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
                        float _2870 = 1.0 - _2840;
                        float _2880 = (0.5 / (((_2869 * ((_2855 * _2870) + _2840)) + 9.9999999392252902907785028219223e-09) + (((_2869 * _2870) + _2840) * _2855))) * _2869;
                        float _4183 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
                        float _2891 = (((_2841 * 3.1415927410125732421875) * (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0)))) / ((_2863 * _2863) * ((_2806 * 2.1991131305694580078125) + 3.141590118408203125))) * _2795;
                        _2643 = (_2810 * _2758.x) + _2716;
                        _2644 = (_2810 * _2758.y) + _2717;
                        _2645 = (_2810 * _2758.z) + _2718;
                        _2640 = (_2891 * _2775.x) + _2713;
                        _2641 = (_2891 * _2775.y) + _2714;
                        _2642 = (_2891 * _2775.z) + _2715;
                        if (_2720 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2713 = _2640;
                            _2714 = _2641;
                            _2715 = _2642;
                            _2716 = _2643;
                            _2717 = _2644;
                            _2718 = _2645;
                            _2719 = _2720;
                        }
                    }
                    frontier_phi_68_pred = _2642;
                    frontier_phi_68_pred_1 = _2645;
                    frontier_phi_68_pred_2 = _2644;
                    frontier_phi_68_pred_3 = _2643;
                    frontier_phi_68_pred_4 = _2641;
                    frontier_phi_68_pred_5 = _2640;
                }
                _2412 = frontier_phi_68_pred;
                _2418 = frontier_phi_68_pred_1;
                _2416 = frontier_phi_68_pred_2;
                _2414 = frontier_phi_68_pred_3;
                _2410 = frontier_phi_68_pred_4;
                _2408 = frontier_phi_68_pred_5;
                uint _2575 = _2574 + 1u;
                if (_2575 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2568 = _2408;
                    _2569 = _2410;
                    _2570 = _2412;
                    _2571 = _2414;
                    _2572 = _2416;
                    _2573 = _2418;
                    _2574 = _2575;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2407 = _2408;
            _2409 = _2410;
            _2411 = _2412;
            _2413 = _2414;
            _2415 = _2416;
            _2417 = _2418;
        }
        uvec4 _2421 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2422 = _2421.z;
        uint _2424 = (_2422 >> 8u) & 15u;
        float _2536;
        float _2538;
        float _2540;
        float _2542;
        float _2544;
        float _2546;
        if (((4294967295u << _2424) & _2276) == 0u)
        {
            _2536 = _2407;
            _2538 = _2409;
            _2540 = _2411;
            _2542 = _2413;
            _2544 = _2415;
            _2546 = _2417;
        }
        else
        {
            float _2561 = inversesqrt(dot(vec3(_2230, _2231, _2232), vec3(_2230, _2231, _2232)));
            float _2562 = _2561 * _2230;
            float _2563 = _2561 * _2231;
            float _2564 = _2561 * _2232;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2424 < ((_2422 >> 12u) & 15u))
            {
                float _2537;
                float _2539;
                float _2541;
                float _2543;
                float _2545;
                float _2547;
                float _2696 = _2407;
                float _2697 = _2409;
                float _2698 = _2411;
                float _2699 = _2413;
                float _2700 = _2415;
                float _2701 = _2417;
                uint _2702 = _2424;
                uint _2711;
                bool _2712;
                for (;;)
                {
                    _2711 = texelFetch(g_lightClassification, int((((_2270 << 5u) + (_2256 << 9u)) + (_2702 << 2u)) >> 2u)).x;
                    _2712 = _2711 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2712)
                    {
                        frontier_phi_79_pred = _2701;
                        frontier_phi_79_pred_1 = _2700;
                        frontier_phi_79_pred_2 = _2699;
                        frontier_phi_79_pred_3 = _2698;
                        frontier_phi_79_pred_4 = _2697;
                        frontier_phi_79_pred_5 = _2696;
                    }
                    else
                    {
                        float _2905;
                        float _2906;
                        float _2907;
                        float _2908;
                        float _2909;
                        float _2910;
                        float _3201;
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3205;
                        float _3206;
                        float _2918 = _2696;
                        float _2919 = _2697;
                        float _2920 = _2698;
                        float _2921 = _2699;
                        float _2922 = _2700;
                        float _2923 = _2701;
                        uint _2924 = _2711;
                        uint _2925;
                        vec4 _2950;
                        float _2951;
                        vec4 _2966;
                        vec3 _2978;
                        vec4 _2994;
                        vec4 _3010;
                        float _3057;
                        bool _3058;
                        for (;;)
                        {
                            uint _2935 = ((_2702 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2924));
                            _2925 = (_2924 + 4294967295u) & _2924;
                            uint _2937 = _2935 * 40u;
                            _2950 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2937)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 3u)).x));
                            _2951 = _2950.w;
                            uint _2953 = (_2935 * 40u) + 4u;
                            _2966 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2953)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 3u)).x));
                            uint _2968 = (_2935 * 40u) + 8u;
                            _2978 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2968)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 2u)).x));
                            uint _2981 = (_2935 * 40u) + 16u;
                            _2994 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2981)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 3u)).x));
                            uint _2997 = (_2935 * 40u) + 20u;
                            _3010 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2997)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 3u)).x));
                            uint _3013 = (_2935 * 40u) + 24u;
                            vec4 _3026 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3013)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 3u)).x));
                            uint _3032 = (_2935 * 40u) + 28u;
                            vec4 _3045 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 3u)).x));
                            _3057 = fma(_2232, _3045.z, fma(_2231, _3045.y, _3045.x * _2230)) + _3045.w;
                            _3058 = !((fma(_2232, _3026.z, fma(_2231, _3026.y, _3026.x * _2230)) + _3026.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3058)
                            {
                                float _3085 = _2950.x - _2230;
                                float _3086 = _2950.y - _2231;
                                float _3087 = _2950.z - _2232;
                                float _3088 = dot(vec3(_3085, _3086, _3087), vec3(_3085, _3086, _3087));
                                float _3091 = inversesqrt(_3088);
                                float _3092 = _3091 * _3085;
                                float _3093 = _3091 * _3086;
                                float _3094 = _3091 * _3087;
                                float _3098 = 1.0 - (_3088 / (_2951 * _2951));
                                float _4194 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                                float _3099 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
                                float _3103 = sqrt(_3088) * _2966.w;
                                float _3105 = 1.39999997615814208984375 / (_3103 + 1.39999997615814208984375);
                                float _3106 = _3105 * _3105;
                                float _3109 = ((1.0 - _3106) * dot(vec3(_3092, _3093, _3094), vec3(_431, _434, _437))) + _3106;
                                float _3112 = _3103 * _3103;
                                float _3116 = (fma(_2232, _2994.z, fma(_2231, _2994.y, _2994.x * _2230)) + _2994.w) / _3057;
                                float _3117 = (fma(_2232, _3010.z, fma(_2231, _3010.y, _3010.x * _2230)) + _3010.w) / _3057;
                                float _3121 = 1.0 - dot(vec2(_3116, _3117), vec2(_3116, _3117));
                                float _4210 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                                float _3122 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
                                float _3123 = _3122 * (((isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0))) * _3099) / ((_3112 * 0.699999988079071044921875) + 1.0));
                                float _3135 = exp2(log2(1.0 / ((_3112 * 3.5) + 5.0)) * 0.25);
                                float _3136 = 1.0 - _507;
                                float _3143 = sqrt(1.0 - ((1.0 - (_3136 * _3136)) * (1.0 - (_3135 * _3135))));
                                float _3144 = _3143 * _3143;
                                float _3145 = _3144 * _3144;
                                float _3146 = _3092 - _2562;
                                float _3147 = _3093 - _2563;
                                float _3148 = _3094 - _2564;
                                float _3152 = inversesqrt(dot(vec3(_3146, _3147, _3148), vec3(_3146, _3147, _3148)));
                                float _3156 = dot(vec3(_431, _434, _437), vec3((-0.0) - _2562, (-0.0) - _2563, (-0.0) - _2564));
                                float _4221 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                                float _3159 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
                                float _3160 = dot(vec3(_431, _434, _437), vec3(_3152 * _3146, _3152 * _3147, _3152 * _3148));
                                float _4232 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                                float _3163 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
                                float _3167 = ((_3163 * _3163) * (_3145 + (-1.0))) + 1.0;
                                float _3168 = _3105 * _3144;
                                float _3169 = _3168 * _3168;
                                float _3175 = ((1.0 - _3169) * dot(vec3(_431, _434, _437), vec3(_3092, _3093, _3094))) + _3169;
                                float _4243 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                                float _3176 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
                                float _3177 = 1.0 - _3144;
                                float _3187 = (0.5 / (((_3176 * ((_3159 * _3177) + _3144)) + 9.9999999392252902907785028219223e-09) + (((_3176 * _3177) + _3144) * _3159))) * _3176;
                                float _4254 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                                float _3197 = (_3122 * _3099) * (((_3145 * 3.1415927410125732421875) * (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0)))) / ((_3167 * _3167) * ((_3112 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3123 * _2966.z;
                                frontier_phi_85_pred_1 = _3123 * _2966.y;
                                frontier_phi_85_pred_2 = _3123 * _2966.x;
                                frontier_phi_85_pred_3 = _3197 * _2978.z;
                                frontier_phi_85_pred_4 = _3197 * _2978.y;
                                frontier_phi_85_pred_5 = _3197 * _2978.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3206 = frontier_phi_85_pred;
                            _3205 = frontier_phi_85_pred_1;
                            _3204 = frontier_phi_85_pred_2;
                            _3203 = frontier_phi_85_pred_3;
                            _3202 = frontier_phi_85_pred_4;
                            _3201 = frontier_phi_85_pred_5;
                            _2908 = _3204 + _2921;
                            _2909 = _3205 + _2922;
                            _2910 = _3206 + _2923;
                            _2905 = _3201 + _2918;
                            _2906 = _3202 + _2919;
                            _2907 = _3203 + _2920;
                            if (_2925 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2918 = _2905;
                                _2919 = _2906;
                                _2920 = _2907;
                                _2921 = _2908;
                                _2922 = _2909;
                                _2923 = _2910;
                                _2924 = _2925;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2910;
                        frontier_phi_79_pred_1 = _2909;
                        frontier_phi_79_pred_2 = _2908;
                        frontier_phi_79_pred_3 = _2907;
                        frontier_phi_79_pred_4 = _2906;
                        frontier_phi_79_pred_5 = _2905;
                    }
                    _2547 = frontier_phi_79_pred;
                    _2545 = frontier_phi_79_pred_1;
                    _2543 = frontier_phi_79_pred_2;
                    _2541 = frontier_phi_79_pred_3;
                    _2539 = frontier_phi_79_pred_4;
                    _2537 = frontier_phi_79_pred_5;
                    uint _2703 = _2702 + 1u;
                    if (_2703 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2696 = _2537;
                        _2697 = _2539;
                        _2698 = _2541;
                        _2699 = _2543;
                        _2700 = _2545;
                        _2701 = _2547;
                        _2702 = _2703;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2543;
                frontier_phi_60_61_ladder_1 = _2547;
                frontier_phi_60_61_ladder_2 = _2545;
                frontier_phi_60_61_ladder_3 = _2541;
                frontier_phi_60_61_ladder_4 = _2539;
                frontier_phi_60_61_ladder_5 = _2537;
            }
            else
            {
                frontier_phi_60_61_ladder = _2413;
                frontier_phi_60_61_ladder_1 = _2417;
                frontier_phi_60_61_ladder_2 = _2415;
                frontier_phi_60_61_ladder_3 = _2411;
                frontier_phi_60_61_ladder_4 = _2409;
                frontier_phi_60_61_ladder_5 = _2407;
            }
            _2536 = frontier_phi_60_61_ladder_5;
            _2538 = frontier_phi_60_61_ladder_4;
            _2540 = frontier_phi_60_61_ladder_3;
            _2542 = frontier_phi_60_61_ladder;
            _2544 = frontier_phi_60_61_ladder_2;
            _2546 = frontier_phi_60_61_ladder_1;
        }
        float _2551 = isnan(1.0) ? _491 : (isnan(_491) ? 1.0 : min(_491, 1.0));
        _2288 = (_2551 * _2542) + _1722;
        _2290 = (_2551 * _2544) + _1724;
        _2292 = (_2551 * _2546) + _1726;
        _2294 = ((_2536 * _476) * _2551) + _2070;
        _2296 = ((_2538 * _478) * _2551) + _2072;
        _2298 = ((_2540 * _479) * _2551) + _2074;
    }
    else
    {
        _2288 = _1722;
        _2290 = _1724;
        _2292 = _1726;
        _2294 = _2070;
        _2296 = _2072;
        _2298 = _2074;
    }
    uint _2304 = _452 + uint(cbMatDynParam._m0[0u].w);
    float _2310 = (_285.x * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2304].x;
    float _2311 = (_285.y * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2304].y;
    float _2312 = (_285.z * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2304].z;
    float _4270 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _4281 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _4292 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _4303 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _2330 = (((isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_2288 + ((isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0))) * _491))) + ((_2294 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _1333)) * cbPerFrame._m0[3u].x)) + _2310;
    float _2332 = (_2311 + ((_2296 + ((isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))) * _1333)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_2290 + ((isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0))) * _491)));
    float _2334 = (_2312 + ((_2298 + ((isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))) * _1333)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_2292 + ((isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0))) * _491)));
    float _2335 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2336 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2337 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2343 = cbMtdParam._m0[2u].x * _2310;
    float _2344 = cbMtdParam._m0[2u].y * _2311;
    float _2345 = cbMtdParam._m0[2u].z * _2312;
    float _4329 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2347 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
    float _2352 = cbInstanceData._m0[_450 + 6u].w * (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0)));
    float _2357 = _410 / cbSceneParam._m0[86u].x;
    float _2358 = _411 / cbSceneParam._m0[86u].y;
    vec4 _2372 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2357, _2358, (log2((isnan(cbSceneParam._m0[77u].w) ? _330 : (isnan(_330) ? cbSceneParam._m0[77u].w : min(_330, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2374 = _2372.x;
    float _2375 = _2372.y;
    float _2376 = _2372.z;
    float _2377 = _2372.w;
    float _2469;
    float _2471;
    float _2473;
    float _2475;
    if (_330 > cbSceneParam._m0[78u].w)
    {
        float _2432 = isnan(_330) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _330 : min(cbSceneParam._m0[80u].w, _330));
        float _2433 = _2432 / _330;
        float _2444 = _2433 * _382;
        float _2445 = _383 * _2433;
        float _2446 = (-0.0) - _2445;
        float _2447 = _2433 * _384;
        float _2449 = (cbSceneParam._m0[77u].w * _2446) / _2432;
        float _2450 = _2449 + cbSceneParam._m0[79u].w;
        float _2451 = cbSceneParam._m0[79u].w - _2445;
        float _2457 = sqrt(((_2444 * _2444) + (_2445 * _2445)) + (_2447 * _2447));
        float _2460 = (1.0 - (cbSceneParam._m0[77u].w / _2432)) * _2457;
        float _2465 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2467 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2653;
        if (abs((_2446 - _2449) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2653 = ((((_2450 > 0.0) ? exp2(_2465 * _2450) : (2.0 - exp2(_2467 * _2450))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2460;
        }
        else
        {
            float _2597 = 1.0 / cbSceneParam._m0[80u].x;
            float _2598 = isnan(_2451) ? _2450 : (isnan(_2450) ? _2451 : max(_2450, _2451));
            float _2599 = isnan(_2451) ? _2450 : (isnan(_2450) ? _2451 : min(_2450, _2451));
            float _2608 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : min(_2598, 0.0));
            float _2609 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : min(_2599, 0.0));
            _2653 = ((abs(_2457 / _2446) * cbSceneParam._m0[80u].y) * ((((_2608 - _2609) * 2.0) - ((exp2(_2465 * (isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0)))) - exp2(_2465 * (isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0))))) * _2597)) - ((exp2(_2467 * _2608) - exp2(_2467 * _2609)) * _2597))) + (_2460 * cbSceneParam._m0[80u].z);
        }
        vec4 _2655 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2357, _2358, 1.0), 0.0);
        float _2664 = exp2((_2653 * (-1.44269502162933349609375)) * (1.0 - _2655.w));
        float _2665 = log2(_2664);
        float _2681 = log2(_2377);
        _2469 = (exp2(_2681 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2665 * cbSceneParam._m0[78u].x)) * _2655.x) / cbSceneParam._m0[78u].x)) + _2374;
        _2471 = (exp2(_2681 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2665 * cbSceneParam._m0[78u].y)) * _2655.y) / cbSceneParam._m0[78u].y)) + _2375;
        _2473 = (exp2(_2681 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2665 * cbSceneParam._m0[78u].z)) * _2655.z) / cbSceneParam._m0[78u].z)) + _2376;
        _2475 = _2664 * _2377;
    }
    else
    {
        _2469 = _2374;
        _2471 = _2375;
        _2473 = _2376;
        _2475 = _2377;
    }
    bool _2691;
    vec4 _2485;
    vec4 _2507;
    float _2509;
    float _2513;
    float _2514;
    float _2515;
    float _2518;
    float _2521;
    float _2524;
    float _2525;
    bool _2535;
    for (;;)
    {
        _2485 = cbMatDynParam._m0[0u];
        float _2487 = roundEven(_2485.y);
        bool _2488 = _2487 == 3.0;
        float _2489 = log2(_2475);
        float _2493 = exp2(_2489 * cbSceneParam._m0[78u].x);
        float _2494 = exp2(_2489 * cbSceneParam._m0[78u].y);
        float _2495 = exp2(_2489 * cbSceneParam._m0[78u].z);
        float _2496 = _2493 * _2335;
        float _2497 = _2494 * _2336;
        float _2498 = _2495 * _2337;
        float _2505 = _398 + (-0.5);
        _2507 = cbMtdParam._m0[1u];
        _2509 = _2507.y * _2505;
        float _2512 = (_2487 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2513 = _2512 * (_2488 ? _2496 : (_2496 + (cbSceneParam._m0[72u].w * _2469)));
        _2514 = _2512 * (_2488 ? _2497 : (_2497 + (cbSceneParam._m0[72u].w * _2471)));
        _2515 = _2512 * (_2488 ? _2498 : (_2498 + (cbSceneParam._m0[72u].w * _2473)));
        _2518 = ((_2343 * _2347) * _2493) * _2512;
        _2521 = ((_2344 * _2347) * _2494) * _2512;
        _2524 = ((_2345 * _2347) * _2495) * _2512;
        _2525 = _2505 * 0.999000012874603271484375;
        _2535 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2535)
        {
            if ((cbInstanceData._m0[_450 + 7u].x + _2525) < 0.5)
            {
                _2691 = true;
                break;
            }
        }
        uint _2632 = _452 + uint(_2485.w);
        if ((cbInstanceData._m0[_2632].w < 1.0) && ((cbInstanceData._m0[_2632].w + _2525) < 0.5))
        {
            _2691 = true;
            break;
        }
        if ((_2509 + _238) < _2507.x)
        {
            _2691 = true;
            break;
        }
        _2691 = false;
        break;
    }
    float _2896;
    if (_2691)
    {
        discard_state = true;
        _2896 = 0.0;
    }
    else
    {
        _2896 = _2352;
    }
    SV_Target.x = _2513;
    SV_Target.y = _2514;
    SV_Target.z = _2515;
    SV_Target.w = _2896;
    SV_Target_1.x = _2518;
    SV_Target_1.y = _2521;
    SV_Target_1.z = _2524;
    SV_Target_1.w = _2352;
    discard_exit();
}


