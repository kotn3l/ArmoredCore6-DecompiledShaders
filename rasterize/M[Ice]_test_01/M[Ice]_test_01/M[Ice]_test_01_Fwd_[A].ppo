#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Ice_test_01_snp_0_Texture2D_10;
layout(set = 0, binding = 1) uniform texture2D M_Ice_test_01_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _967;
float _3487;
float _3488;
float _3489;
float _3490;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _193 = _192 * _184;
    float _194 = _192 * _185;
    float _195 = _192 * _186;
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _246 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _250 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _254 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _264 = cbSceneParam._m0[71u].x - (_242 / _254);
    float _265 = cbSceneParam._m0[71u].y - (_246 / _254);
    float _266 = cbSceneParam._m0[71u].z - (_250 / _254);
    float _289 = inversesqrt(dot(vec3(_264, _265, _266), vec3(_264, _265, _266)));
    float _290 = _289 * _264;
    float _291 = _289 * _265;
    float _292 = _289 * _266;
    float _296 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _300 = dot(vec4(_290, _291, _292, 0.0), vec4(_296 * _200, _296 * _201, _296 * _202, 0.0));
    float _3499 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _308 = exp2(log2(1.0 - (isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0)))) * cbMtdParam._m0[12u].y);
    float _3510 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _309 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
    float _316 = (_309 * (cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].x)) + cbMtdParam._m0[10u].x;
    float _317 = (_309 * (cbMtdParam._m0[11u].y - cbMtdParam._m0[10u].y)) + cbMtdParam._m0[10u].y;
    float _318 = (_309 * (cbMtdParam._m0[11u].z - cbMtdParam._m0[10u].z)) + cbMtdParam._m0[10u].z;
    vec4 _338 = texture(sampler2D(M_Ice_test_01_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _346 = (_338.x * 2.0) + (-1.0);
    float _348 = (_338.y * 2.0) + (-1.0);
    float _349 = dot(vec2(_346, _348), vec2(_346, _348));
    float _3521 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _354 = sqrt(1.0 - (isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0))));
    float _355 = abs(_200);
    float _356 = abs(_201);
    float _357 = abs(_202);
    float _358 = _355 * _355;
    float _359 = _356 * _356;
    float _360 = _357 * _357;
    float _363 = _246 * 0.0500000007450580596923828125;
    float _373 = (cbTextureTilingScale._m0[1u].x * (_242 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[1u].z;
    vec4 _376 = texture(sampler2D(M_Ice_test_01_snp_0_Texture2D_9, SS_BumpMap), vec2(_373, (cbTextureTilingScale._m0[1u].y * _363) + cbTextureTilingScale._m0[1u].w));
    float _383 = (cbTextureTilingScale._m0[1u].y * (_250 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[1u].w;
    vec4 _384 = texture(sampler2D(M_Ice_test_01_snp_0_Texture2D_9, SS_BumpMap), vec2(_373, _383));
    vec4 _394 = texture(sampler2D(M_Ice_test_01_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _363) + cbTextureTilingScale._m0[1u].z, _383));
    float _408 = ((((((_384.x * _359) + (_376.x * _360)) + (_394.x * _358)) * 2.0) + (-1.0)) * cbMtdParam._m0[12u].w) + _346;
    float _409 = ((((((_384.y * _359) + (_376.y * _360)) + (_394.y * _358)) * 2.0) + (-1.0)) * cbMtdParam._m0[12u].w) + _348;
    float _412 = fma(_354, _200, fma(_409, _206 * TANGENT.x, _408 * _193));
    float _415 = fma(_354, _201, fma(_409, _206 * TANGENT.y, _408 * _194));
    float _418 = fma(_354, _202, fma(_409, _206 * TANGENT.z, _408 * _195));
    float _422 = inversesqrt(dot(vec3(_412, _415, _418), vec3(_412, _415, _418)));
    float _423 = _422 * _412;
    float _424 = _422 * _415;
    float _425 = _422 * _418;
    float _433 = cbMtdParam._m0[13u].x + dot(vec4(_423, _424, _425, 0.0), vec4(cbMtdParam._m0[14u].xyz, 0.0));
    float _3532 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _435 = (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * TEXCOORD_3.x;
    float _3543 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _436 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
    float _443 = (_436 * (cbMtdParam._m0[9u].x - _316)) + _316;
    float _444 = (_436 * (cbMtdParam._m0[9u].y - _317)) + _317;
    float _445 = (_436 * (cbMtdParam._m0[9u].z - _318)) + _318;
    float _450 = ((cbMtdParam._m0[13u].w - cbMtdParam._m0[12u].x) * _436) + cbMtdParam._m0[12u].x;
    float _453 = cbMtdParam._m0[13u].z + _436;
    float _3554 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _454 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
    float _3565 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _456 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    float _3576 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _3587 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _3598 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _475 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _480 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _482 = _480.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _646 = sqrt(((_264 * _264) + (_265 * _265)) + (_266 * _266));
        float _652 = (cbMatDynParam._m0[5u].x * _646) + cbMatDynParam._m0[5u].y;
        float _3609 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
        float _653 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _657 = (cbMatDynParam._m0[5u].z * _646) + cbMatDynParam._m0[5u].w;
        float _3620 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0))) - _653)) + _653) < ((_482 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _494 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _495 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _515 = fma(_425, cbSceneParam._m0[5u].z, fma(_424, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _423));
    float _518 = fma(_425, cbSceneParam._m0[6u].z, fma(_424, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _423));
    float _521 = fma(_425, cbSceneParam._m0[7u].z, fma(_424, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _423));
    uint _534 = uint(roundEven(NORMAL.w)) * 13u;
    uint _535 = _534 + 9u;
    uint _536 = _535 + uint(cbMatDynParam._m0[0u].w);
    float _542 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0)))) * cbInstanceData._m0[_536].x;
    float _543 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0)))) * cbInstanceData._m0[_536].y;
    float _544 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0)))) * cbInstanceData._m0[_536].z;
    float _3631 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _545 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    float _3642 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _546 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
    float _3653 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _547 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
    vec4 _556 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _494, cbSceneParam._m0[86u].y * _495));
    float _559 = _556.x * TEXCOORD_3.w;
    float _560 = dot(vec3(_423, _424, _425), vec3(_290, _291, _292));
    float _563 = _560 * 2.0;
    float _567 = (_563 * _423) - _290;
    float _568 = (_563 * _424) - _291;
    float _569 = (_563 * _425) - _292;
    float _573 = abs(dot(vec3(_290, _291, _292), vec3(_423, _424, _425)));
    float _3664 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _574 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _582 = 10.0 / (_475 + 10.0);
    float _583 = sqrt(_456);
    float _595 = exp2((_583 * 5.0) * log2(1.0 - (_574 * 0.999000012874603271484375))) / (4.0 - (_583 * 3.0));
    float _627 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _631 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _635 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _966;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _691 = fma(_635, cbModelParam._m0[26u].z, fma(_631, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _627));
        float _695 = fma(_635, cbModelParam._m0[27u].z, fma(_631, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _627));
        float _699 = fma(_635, cbModelParam._m0[28u].z, fma(_631, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _627));
        float _724 = _627 + _423;
        float _725 = _631 + _424;
        float _726 = _635 + _425;
        float _736 = fma(_726, cbModelParam._m0[26u].z, fma(_725, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _724)) - _691;
        float _737 = fma(_726, cbModelParam._m0[27u].z, fma(_725, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _724)) - _695;
        float _738 = fma(_726, cbModelParam._m0[28u].z, fma(_725, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _724)) - _699;
        float _742 = inversesqrt(dot(vec3(_736, _737, _738), vec3(_736, _737, _738)));
        float _755 = ((_742 * _736) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_691 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _756 = ((_742 * _737) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_695 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _757 = ((_742 * _738) / cbModelParam._m0[34u].z) + ((((((_699 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _760 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_755, _756, _757), 0.0);
        vec4 _767 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_755, _756, _757), 0.0);
        vec4 _774 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_755, _756, _757), 0.0);
        vec4 _781 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_755, _756, _757), 0.0);
        float _794 = exp2((_760.w + (-0.5)) * 20.0) * 2.0;
        float _795 = _794 * (_760.x + (-0.5));
        float _796 = _794 * (_760.y + (-0.5));
        float _797 = _794 * (_760.z + (-0.5));
        float _804 = exp2((_767.w + (-0.5)) * 20.0) * 2.0;
        float _805 = _804 * (_767.x + (-0.5));
        float _806 = _804 * (_767.y + (-0.5));
        float _807 = _804 * (_767.z + (-0.5));
        float _814 = exp2((_774.w + (-0.5)) * 20.0) * 2.0;
        float _815 = _814 * (_774.x + (-0.5));
        float _816 = _814 * (_774.y + (-0.5));
        float _817 = _814 * (_774.z + (-0.5));
        float _824 = exp2((_781.w + (-0.5)) * 20.0) * 2.0;
        float _825 = _824 * (_781.x + (-0.5));
        float _826 = _824 * (_781.y + (-0.5));
        float _827 = _824 * (_781.z + (-0.5));
        float _828 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _829 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _830 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _831 = _795 * 0.5;
        float _832 = _805 * 0.5;
        float _833 = _815 * 0.5;
        float _834 = dot(vec3(_831, _832, _833), vec3(_831, _832, _833));
        float _839 = (_834 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_834);
        float _848 = (dot(vec3(_423, _424, _425), vec3(_839 * _831, _839 * _832, _839 * _833)) + 1.0) * 0.5;
        float _3690 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _858 = sqrt(((_832 * _832) + (_831 * _831)) + (_833 * _833)) / (_828 + 9.9999997473787516355514526367188e-06);
        float _3701 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _859 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _860 = _859 * 2.0;
        float _864 = (1.0 - _859) / (_859 + 1.0);
        float _3712 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _865 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _874 = ((((1.0 - _865) * (_860 + 2.0)) * exp2(log2(isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) * (_860 + 1.0))) + _865) * _828;
        float _875 = _796 * 0.5;
        float _876 = _806 * 0.5;
        float _877 = _816 * 0.5;
        float _878 = dot(vec3(_875, _876, _877), vec3(_875, _876, _877));
        float _883 = (_878 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_878);
        float _891 = (dot(vec3(_423, _424, _425), vec3(_883 * _875, _883 * _876, _883 * _877)) + 1.0) * 0.5;
        float _3723 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _900 = sqrt(((_876 * _876) + (_875 * _875)) + (_877 * _877)) / (_829 + 9.9999997473787516355514526367188e-06);
        float _3734 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _901 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _902 = _901 * 2.0;
        float _906 = (1.0 - _901) / (_901 + 1.0);
        float _3745 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _907 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _916 = ((((1.0 - _907) * (_902 + 2.0)) * exp2(log2(isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * (_902 + 1.0))) + _907) * _829;
        float _917 = _797 * 0.5;
        float _918 = _807 * 0.5;
        float _919 = _817 * 0.5;
        float _920 = dot(vec3(_917, _918, _919), vec3(_917, _918, _919));
        float _925 = (_920 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_920);
        float _933 = (dot(vec3(_423, _424, _425), vec3(_925 * _917, _925 * _918, _925 * _919)) + 1.0) * 0.5;
        float _3756 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _942 = sqrt(((_918 * _918) + (_917 * _917)) + (_919 * _919)) / (_830 + 9.9999997473787516355514526367188e-06);
        float _3767 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _944 = _943 * 2.0;
        float _948 = (1.0 - _943) / (_943 + 1.0);
        float _3778 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _958 = ((((1.0 - _949) * (_944 + 2.0)) * exp2(log2(isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * (_944 + 1.0))) + _949) * _830;
        _966 = _797;
        _968 = _796;
        _969 = _795;
        _970 = _807;
        _971 = _806;
        _972 = _805;
        _973 = _817;
        _974 = _816;
        _975 = _815;
        _976 = _830;
        _977 = _829;
        _978 = _828;
        _979 = cbModelParam._m0[36u].z * (isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0)));
        _980 = cbModelParam._m0[36u].z * (isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0)));
        _981 = cbModelParam._m0[36u].z * (isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0)));
    }
    else
    {
        _966 = _967;
        _968 = _967;
        _969 = _967;
        _970 = _967;
        _971 = _967;
        _972 = _967;
        _973 = _967;
        _974 = _967;
        _975 = _967;
        _976 = _967;
        _977 = _967;
        _978 = _967;
        _979 = 0.0;
        _980 = 0.0;
        _981 = 0.0;
    }
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1010 = fma(_635, cbModelParam._m0[30u].z, fma(_631, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _627));
        float _1014 = fma(_635, cbModelParam._m0[31u].z, fma(_631, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _627));
        float _1018 = fma(_635, cbModelParam._m0[32u].z, fma(_631, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _627));
        float _1041 = _627 + _423;
        float _1042 = _631 + _424;
        float _1043 = _635 + _425;
        float _1053 = fma(_1043, cbModelParam._m0[30u].z, fma(_1042, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1041)) - _1010;
        float _1054 = fma(_1043, cbModelParam._m0[31u].z, fma(_1042, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1041)) - _1014;
        float _1055 = fma(_1043, cbModelParam._m0[32u].z, fma(_1042, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1041)) - _1018;
        float _1059 = inversesqrt(dot(vec3(_1053, _1054, _1055), vec3(_1053, _1054, _1055)));
        float _1072 = ((_1059 * _1053) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1010 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1073 = ((_1059 * _1054) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1014 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1074 = ((_1059 * _1055) / cbModelParam._m0[35u].z) + ((((((_1018 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        float _1109 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1076.x + (-0.5));
        float _1111 = _1109 * (_1076.y + (-0.5));
        float _1112 = _1109 * (_1076.z + (-0.5));
        float _1119 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1083.x + (-0.5));
        float _1121 = _1119 * (_1083.y + (-0.5));
        float _1122 = _1119 * (_1083.z + (-0.5));
        float _1129 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1090.x + (-0.5));
        float _1131 = _1129 * (_1090.y + (-0.5));
        float _1132 = _1129 * (_1090.z + (-0.5));
        float _1139 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1097.x + (-0.5));
        float _1141 = _1139 * (_1097.y + (-0.5));
        float _1142 = _1139 * (_1097.z + (-0.5));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = _1110 * 0.5;
        float _1147 = _1120 * 0.5;
        float _1148 = _1130 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1162 = (dot(vec3(_423, _424, _425), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _3819 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1171 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _3830 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _3841 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_1173 + 1.0))) + _1178) * _1143;
        float _1188 = _1111 * 0.5;
        float _1189 = _1121 * 0.5;
        float _1190 = _1131 * 0.5;
        float _1191 = dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190));
        float _1196 = (_1191 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1191);
        float _1204 = (dot(vec3(_423, _424, _425), vec3(_1196 * _1188, _1196 * _1189, _1196 * _1190)) + 1.0) * 0.5;
        float _3852 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1213 = sqrt(((_1189 * _1189) + (_1188 * _1188)) + (_1190 * _1190)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _3863 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1215 = _1214 * 2.0;
        float _1219 = (1.0 - _1214) / (_1214 + 1.0);
        float _3874 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1229 = ((((1.0 - _1220) * (_1215 + 2.0)) * exp2(log2(isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_1215 + 1.0))) + _1220) * _1144;
        float _1230 = _1112 * 0.5;
        float _1231 = _1122 * 0.5;
        float _1232 = _1132 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1246 = (dot(vec3(_423, _424, _425), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _3885 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1255 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _3896 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _3907 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_1257 + 1.0))) + _1262) * _1145;
        _1279 = _1112;
        _1280 = _1111;
        _1281 = _1110;
        _1282 = _1122;
        _1283 = _1121;
        _1284 = _1120;
        _1285 = _1132;
        _1286 = _1131;
        _1287 = _1130;
        _1288 = _1145;
        _1289 = _1144;
        _1290 = _1143;
        _1291 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
        _1292 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)));
        _1293 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
    }
    else
    {
        _1279 = _967;
        _1280 = _967;
        _1281 = _967;
        _1282 = _967;
        _1283 = _967;
        _1284 = _967;
        _1285 = _967;
        _1286 = _967;
        _1287 = _967;
        _1288 = _967;
        _1289 = _967;
        _1290 = _967;
        _1291 = 0.0;
        _1292 = 0.0;
        _1293 = 0.0;
    }
    float _1303 = (cbModelParam._m0[1u].x * (_1291 - _979)) + _979;
    float _1304 = (cbModelParam._m0[1u].x * (_1292 - _980)) + _980;
    float _1305 = (cbModelParam._m0[1u].x * (_1293 - _981)) + _981;
    float _1326 = fma(_1305, cbSceneParam._m0[89u].z, fma(_1304, cbSceneParam._m0[89u].y, _1303 * cbSceneParam._m0[89u].x));
    float _1329 = fma(_1305, cbSceneParam._m0[90u].z, fma(_1304, cbSceneParam._m0[90u].y, _1303 * cbSceneParam._m0[90u].x));
    float _1332 = fma(_1305, cbSceneParam._m0[91u].z, fma(_1304, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1303));
    float _1347 = _567 * 0.5;
    float _1348 = _568 * 0.5;
    float _1349 = _569 * 0.5;
    float _1350 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_1281, _1284, _1287, _1290));
    float _1353 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_1280, _1283, _1286, _1289));
    float _1356 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_1279, _1282, _1285, _1288));
    float _1390;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1363 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_966, _970, _973, _976));
        float _1367 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_968, _971, _974, _977));
        float _1371 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_969, _972, _975, _978));
        float _1378 = dot(vec4(cbModelParam._m0[39u]), vec4(_1347, _1348, _1349, 1.0));
        _1390 = dot(vec3(isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)), isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)), isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1378) ? 0.0 : (isnan(0.0) ? _1378 : max(0.0, _1378))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1390 = 1.0;
    }
    float _1401;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1392 = dot(vec4(cbModelParam._m0[40u]), vec4(_1347, _1348, _1349, 1.0));
        _1401 = dot(vec3(isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)), isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)), isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1392) ? 0.0 : (isnan(0.0) ? _1392 : max(0.0, _1392))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1401 = 1.0;
    }
    float _1405 = (_1401 * cbModelParam._m0[1u].x) + (_1390 * (1.0 - cbModelParam._m0[1u].x));
    float _1415 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _456);
    float _1416 = isnan(_1415) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1415 : min(cbModelParam._m0[25u].z, _1415));
    float _1496;
    float _1498;
    float _1500;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1463 = fma(_635, cbModelParam._m0[13u].z, fma(_631, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _627)) + cbModelParam._m0[13u].w;
        float _1467 = fma(_635, cbModelParam._m0[14u].z, fma(_631, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _627)) + cbModelParam._m0[14u].w;
        float _1471 = fma(_635, cbModelParam._m0[15u].z, fma(_631, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _627)) + cbModelParam._m0[15u].w;
        float _1474 = fma(_569, cbModelParam._m0[13u].z, fma(_568, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _567));
        float _1477 = fma(_569, cbModelParam._m0[14u].z, fma(_568, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _567));
        float _1480 = fma(_569, cbModelParam._m0[15u].z, fma(_568, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _567));
        float _1508;
        if (_1474 > 0.0)
        {
            _1508 = abs((1.0 - _1463) / _1474);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1474 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1463 + 1.0) / _1474);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1508 = frontier_phi_17_15_ladder;
        }
        float _1765;
        if (_1477 > 0.0)
        {
            _1765 = abs((1.0 - _1467) / _1477);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1477 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1467 + 1.0) / _1477);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1765 = frontier_phi_26_22_ladder;
        }
        float _2008;
        if (_1480 > 0.0)
        {
            _2008 = abs((1.0 - _1471) / _1480);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1480 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1471 + 1.0) / _1480);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2008 = frontier_phi_38_33_ladder;
        }
        float _2010 = isnan(_1765) ? _1508 : (isnan(_1508) ? _1765 : min(_1508, _1765));
        float _2011 = isnan(_2008) ? _2010 : (isnan(_2010) ? _2008 : min(_2010, _2008));
        float _2015 = (_2011 * _1474) + _1463;
        float _2016 = (_2011 * _1477) + _1467;
        float _2017 = (_2011 * _1480) + _1471;
        float _2018 = _2011 * 9.9999997473787516355514526367188e-05;
        float _2020 = (-1.0) - _2018;
        float _2022 = _2018 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2017 > _2022) || ((_2017 < _2020) || ((_2016 > _2022) || ((_2016 < _2020) || ((_2015 < _2020) || (_2015 > _2022))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2141 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2017, cbModelParam._m0[9u].z, fma(_2016, cbModelParam._m0[9u].y, _2015 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2017, cbModelParam._m0[10u].z, fma(_2016, cbModelParam._m0[10u].y, _2015 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2017, cbModelParam._m0[11u].z, fma(_2016, cbModelParam._m0[11u].y, _2015 * cbModelParam._m0[11u].x))), _1416);
            frontier_phi_16_38_ladder = _2141.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2141.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2141.x * cbModelParam._m0[1u].y;
        }
        _1496 = frontier_phi_16_38_ladder_2;
        _1498 = frontier_phi_16_38_ladder_1;
        _1500 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1484 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_567, _568, _569), _1416);
        _1496 = _1484.x * cbModelParam._m0[1u].y;
        _1498 = _1484.y * cbModelParam._m0[1u].y;
        _1500 = _1484.z * cbModelParam._m0[1u].y;
    }
    float _1504 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _456);
    float _1505 = isnan(_1504) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1504 : min(cbModelParam._m0[25u].w, _1504));
    float _1598;
    float _1600;
    float _1602;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1562 = fma(_635, cbModelParam._m0[21u].z, fma(_631, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _627)) + cbModelParam._m0[21u].w;
        float _1566 = fma(_635, cbModelParam._m0[22u].z, fma(_631, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _627)) + cbModelParam._m0[22u].w;
        float _1570 = fma(_635, cbModelParam._m0[23u].z, fma(_631, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _627)) + cbModelParam._m0[23u].w;
        float _1573 = fma(_569, cbModelParam._m0[21u].z, fma(_568, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _567));
        float _1576 = fma(_569, cbModelParam._m0[22u].z, fma(_568, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _567));
        float _1579 = fma(_569, cbModelParam._m0[23u].z, fma(_568, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _567));
        float _1770;
        if (_1573 > 0.0)
        {
            _1770 = abs((1.0 - _1562) / _1573);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1573 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1562 + 1.0) / _1573);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1770 = frontier_phi_28_24_ladder;
        }
        float _2035;
        if (_1576 > 0.0)
        {
            _2035 = abs((1.0 - _1566) / _1576);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1576 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1566 + 1.0) / _1576);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2035 = frontier_phi_40_35_ladder;
        }
        float _2240;
        if (_1579 > 0.0)
        {
            _2240 = abs((1.0 - _1570) / _1579);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1579 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1570 + 1.0) / _1579);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2240 = frontier_phi_49_46_ladder;
        }
        float _2242 = isnan(_2035) ? _1770 : (isnan(_1770) ? _2035 : min(_1770, _2035));
        float _2243 = isnan(_2240) ? _2242 : (isnan(_2242) ? _2240 : min(_2242, _2240));
        float _2247 = (_2243 * _1573) + _1562;
        float _2248 = (_2243 * _1576) + _1566;
        float _2249 = (_2243 * _1579) + _1570;
        float _2250 = _2243 * 9.9999997473787516355514526367188e-05;
        float _2251 = (-1.0) - _2250;
        float _2253 = _2250 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2249 > _2253) || ((_2249 < _2251) || ((_2248 > _2253) || ((_2248 < _2251) || ((_2247 < _2251) || (_2247 > _2253))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2518 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2249, cbModelParam._m0[17u].z, fma(_2248, cbModelParam._m0[17u].y, _2247 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2249, cbModelParam._m0[18u].z, fma(_2248, cbModelParam._m0[18u].y, _2247 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2249, cbModelParam._m0[19u].z, fma(_2248, cbModelParam._m0[19u].y, _2247 * cbModelParam._m0[19u].x))), _1505);
            frontier_phi_25_49_ladder = _2518.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2518.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2518.x * cbModelParam._m0[1u].z;
        }
        _1598 = frontier_phi_25_49_ladder_2;
        _1600 = frontier_phi_25_49_ladder_1;
        _1602 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1582 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_567, _568, _569), _1505);
        _1598 = _1582.x * cbModelParam._m0[1u].z;
        _1600 = _1582.y * cbModelParam._m0[1u].z;
        _1602 = _1582.z * cbModelParam._m0[1u].z;
    }
    float _1614 = ((((1.0 - _595) * ((_583 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_595 * _583)) * _559;
    float _1615 = _1614 * ((cbModelParam._m0[1u].w * (_1598 - _1496)) + _1496);
    float _1616 = _1614 * ((cbModelParam._m0[1u].w * (_1600 - _1498)) + _1498);
    float _1617 = _1614 * ((cbModelParam._m0[1u].w * (_1602 - _1500)) + _1500);
    float _1620 = fma(_1617, cbSceneParam._m0[89u].z, fma(_1616, cbSceneParam._m0[89u].y, _1615 * cbSceneParam._m0[89u].x));
    float _1623 = fma(_1617, cbSceneParam._m0[90u].z, fma(_1616, cbSceneParam._m0[90u].y, _1615 * cbSceneParam._m0[90u].x));
    float _1626 = fma(_1617, cbSceneParam._m0[91u].z, fma(_1616, cbSceneParam._m0[91u].y, _1615 * cbSceneParam._m0[91u].x));
    float _1637 = _494 / cbSceneParam._m0[86u].x;
    float _1645 = (cbSceneParam._m0[88u].y * (1.0 - _456)) + cbSceneParam._m0[88u].z;
    float _4033 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
    float _1647 = (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * 5.0;
    float _1652 = (_582 * cbMtdParam._m0[12u].z) * dot(vec3(_423, _424, _425), vec3(1.0, 0.0, 0.0));
    vec4 _1662 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1652 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1652 + _1637) * cbSceneParam._m0[86u].x, _495), _1647).w) + _1637) * cbSceneParam._m0[86u].x, _495), _1647);
    float _1678 = 1.0 - _1662.w;
    uvec4 _1688 = floatBitsToUint(cbInstanceData._m0[_534 + 5u]);
    uint _1690 = _1688.x * 14u;
    uint _1691 = _1690 + 13u;
    float _1698 = _559 + (-1.0);
    float _1703 = (cbLight._m0[_1691].x * _1698) + 1.0;
    float _1704 = (cbLight._m0[_1691].y * _1698) + 1.0;
    float _1705 = (cbLight._m0[_1691].z * _1698) + 1.0;
    float _1706 = (cbLight._m0[_1691].w * _1698) + 1.0;
    uint _1707 = _1690 + 5u;
    float _1713 = isnan(1.0) ? _1704 : (isnan(_1704) ? 1.0 : min(_1704, 1.0));
    uint _1717 = _1690 + 4u;
    float _1724 = isnan(1.0) ? _1703 : (isnan(_1703) ? 1.0 : min(_1703, 1.0));
    uint _1728 = _1690 | 1u;
    float _1739 = dot(vec3(cbLight._m0[_1690].xyz), vec3(_423, _424, _425));
    float _1742 = dot(vec3(cbLight._m0[_1728].xyz), vec3(_423, _424, _425));
    float _4054 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
    float _4065 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
    float _1747 = (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * 0.3183098733425140380859375;
    float _1749 = (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * 0.3183098733425140380859375;
    float _1756 = ((cbLight._m0[_1707].x * _1713) * _1749) + ((cbLight._m0[_1717].x * _1724) * _1747);
    float _1757 = ((_1713 * cbLight._m0[_1707].y) * _1749) + ((_1724 * cbLight._m0[_1717].y) * _1747);
    float _1758 = ((_1713 * cbLight._m0[_1707].z) * _1749) + ((_1724 * cbLight._m0[_1717].z) * _1747);
    uvec4 _1762 = floatBitsToUint(cbLight._m0[_1690 + 12u]);
    bool _1764 = _1762.x == 0u;
    float _1775;
    float _1777;
    float _1779;
    if (_1764)
    {
        _1775 = _1756;
        _1777 = _1757;
        _1779 = _1758;
    }
    else
    {
        uint _1783 = _1690 + 6u;
        float _1799 = (dot(vec3(cbLight._m0[_1690 + 2u].xyz), vec3(_423, _424, _425)) * 0.5) + 0.5;
        float _1800 = _1799 * _1799;
        float _4076 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1801 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1802 = isnan(1.0) ? _1705 : (isnan(_1705) ? 1.0 : min(_1705, 1.0));
        _1775 = (((cbLight._m0[_1783].x * 0.3183098733425140380859375) * _1801) * _1802) + _1756;
        _1777 = (((cbLight._m0[_1783].y * 0.3183098733425140380859375) * _1801) * _1802) + _1757;
        _1779 = (((cbLight._m0[_1783].z * 0.3183098733425140380859375) * _1801) * _1802) + _1758;
    }
    bool _1782 = _1762.y == 0u;
    float _1820;
    float _1822;
    float _1824;
    if (_1782)
    {
        _1820 = _1775;
        _1822 = _1777;
        _1824 = _1779;
    }
    else
    {
        uint _1979 = _1690 + 7u;
        float _1995 = (dot(vec3(cbLight._m0[_1690 + 3u].xyz), vec3(_423, _424, _425)) * 0.5) + 0.5;
        float _1996 = _1995 * _1995;
        float _4092 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        float _1997 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1998 = isnan(1.0) ? _1706 : (isnan(_1706) ? 1.0 : min(_1706, 1.0));
        _1820 = (((cbLight._m0[_1979].x * 0.3183098733425140380859375) * _1997) * _1998) + _1775;
        _1822 = (((cbLight._m0[_1979].y * 0.3183098733425140380859375) * _1997) * _1998) + _1777;
        _1824 = (((cbLight._m0[_1979].z * 0.3183098733425140380859375) * _1997) * _1998) + _1779;
    }
    uint _1827 = _1690 + 8u;
    float _1840 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1690].w)) * _456) * 0.949999988079071044921875);
    float _1841 = _1840 * _1840;
    float _1842 = cbLight._m0[_1690].x + _290;
    float _1843 = cbLight._m0[_1690].y + _291;
    float _1844 = cbLight._m0[_1690].z + _292;
    float _1848 = inversesqrt(dot(vec3(_1842, _1843, _1844), vec3(_1842, _1843, _1844)));
    float _1849 = _1848 * _1842;
    float _1850 = _1848 * _1843;
    float _1851 = _1848 * _1844;
    float _1852 = dot(vec3(_423, _424, _425), vec3(cbLight._m0[_1690].xyz));
    float _4108 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1855 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _4119 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _1856 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _1857 = dot(vec3(_423, _424, _425), vec3(_1849, _1850, _1851));
    float _4130 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1860 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _1861 = dot(vec3(cbLight._m0[_1690].xyz), vec3(_1849, _1850, _1851));
    float _4141 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1865 = _1841 * _1841;
    float _1869 = ((_1860 * _1860) * (_1865 + (-1.0))) + 1.0;
    float _1880 = (exp2(log2(1.0 - (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1881 = 1.0 - _1841;
    float _1892 = (0.5 / (((_1856 * ((_1855 * _1881) + _1841)) + 9.9999999392252902907785028219223e-09) + (((_1856 * _1881) + _1841) * _1855))) * _1855;
    float _4152 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1894 = (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_1865 / ((_1869 * _1869) * 3.141590118408203125));
    uint _1905 = _1690 + 9u;
    float _1916 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1728].w)) * _456) * 0.949999988079071044921875);
    float _1917 = _1916 * _1916;
    float _1918 = cbLight._m0[_1728].x + _290;
    float _1919 = cbLight._m0[_1728].y + _291;
    float _1920 = cbLight._m0[_1728].z + _292;
    float _1924 = inversesqrt(dot(vec3(_1918, _1919, _1920), vec3(_1918, _1919, _1920)));
    float _1925 = _1924 * _1918;
    float _1926 = _1924 * _1919;
    float _1927 = _1924 * _1920;
    float _1928 = dot(vec3(_423, _424, _425), vec3(cbLight._m0[_1728].xyz));
    float _4163 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1931 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _1932 = dot(vec3(_423, _424, _425), vec3(_1925, _1926, _1927));
    float _4174 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _1935 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
    float _1936 = dot(vec3(cbLight._m0[_1728].xyz), vec3(_1925, _1926, _1927));
    float _4185 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1940 = _1917 * _1917;
    float _1944 = ((_1935 * _1935) * (_1940 + (-1.0))) + 1.0;
    float _1953 = (exp2(log2(1.0 - (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1954 = 1.0 - _1917;
    float _1964 = (0.5 / (((_1856 * ((_1931 * _1954) + _1917)) + 9.9999999392252902907785028219223e-09) + (((_1856 * _1954) + _1917) * _1931))) * _1931;
    float _4196 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1966 = (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_1940 / ((_1944 * _1944) * 3.141590118408203125));
    float _1976 = (((_1953 * cbLight._m0[_1905].x) * _1966) * _1713) + (((_1880 * cbLight._m0[_1827].x) * _1894) * _1724);
    float _1977 = (((_1953 * cbLight._m0[_1905].y) * _1966) * _1713) + (((_1880 * cbLight._m0[_1827].y) * _1894) * _1724);
    float _1978 = (((_1953 * cbLight._m0[_1905].z) * _1966) * _1713) + (((_1880 * cbLight._m0[_1827].z) * _1894) * _1724);
    float _2040;
    float _2042;
    float _2044;
    if (_1764)
    {
        _2040 = _1976;
        _2042 = _1977;
        _2044 = _1978;
    }
    else
    {
        uint _2046 = _1690 + 2u;
        uint _2050 = _1690 + 10u;
        float _2064 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2046].w)) * _456) * 0.949999988079071044921875);
        float _2065 = _2064 * _2064;
        float _2066 = cbLight._m0[_2046].x + _290;
        float _2067 = cbLight._m0[_2046].y + _291;
        float _2068 = cbLight._m0[_2046].z + _292;
        float _2072 = inversesqrt(dot(vec3(_2066, _2067, _2068), vec3(_2066, _2067, _2068)));
        float _2073 = _2072 * _2066;
        float _2074 = _2072 * _2067;
        float _2075 = _2072 * _2068;
        float _2076 = dot(vec3(_423, _424, _425), vec3(cbLight._m0[_2046].xyz));
        float _4207 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
        float _2079 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _2080 = dot(vec3(_423, _424, _425), vec3(_2073, _2074, _2075));
        float _4218 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2083 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _2084 = dot(vec3(cbLight._m0[_2046].xyz), vec3(_2073, _2074, _2075));
        float _4229 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2088 = _2065 * _2065;
        float _2092 = ((_2083 * _2083) * (_2088 + (-1.0))) + 1.0;
        float _2101 = (exp2(log2(1.0 - (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2102 = 1.0 - _2065;
        float _2112 = (0.5 / (((_1856 * ((_2079 * _2102) + _2065)) + 9.9999999392252902907785028219223e-09) + (((_1856 * _2102) + _2065) * _2079))) * _2079;
        float _4240 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        float _2114 = (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_2088 / ((_2092 * _2092) * 3.141590118408203125));
        float _2115 = isnan(1.0) ? _1705 : (isnan(_1705) ? 1.0 : min(_1705, 1.0));
        _2040 = (((_2101 * cbLight._m0[_2050].x) * _2114) * _2115) + _1976;
        _2042 = (((_2101 * cbLight._m0[_2050].y) * _2114) * _2115) + _1977;
        _2044 = (((_2101 * cbLight._m0[_2050].z) * _2114) * _2115) + _1978;
    }
    float _2150;
    float _2152;
    float _2154;
    if (_1782)
    {
        _2150 = _2040;
        _2152 = _2042;
        _2154 = _2044;
    }
    else
    {
        uint _2161 = _1690 + 3u;
        uint _2165 = _1690 + 11u;
        float _2179 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2161].w)) * _456) * 0.949999988079071044921875);
        float _2180 = _2179 * _2179;
        float _2181 = cbLight._m0[_2161].x + _290;
        float _2182 = cbLight._m0[_2161].y + _291;
        float _2183 = cbLight._m0[_2161].z + _292;
        float _2187 = inversesqrt(dot(vec3(_2181, _2182, _2183), vec3(_2181, _2182, _2183)));
        float _2188 = _2187 * _2181;
        float _2189 = _2187 * _2182;
        float _2190 = _2187 * _2183;
        float _2191 = dot(vec3(_423, _424, _425), vec3(cbLight._m0[_2161].xyz));
        float _4256 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2194 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _2195 = dot(vec3(_423, _424, _425), vec3(_2188, _2189, _2190));
        float _4267 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2198 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _2199 = dot(vec3(cbLight._m0[_2161].xyz), vec3(_2188, _2189, _2190));
        float _4278 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2203 = _2180 * _2180;
        float _2207 = ((_2198 * _2198) * (_2203 + (-1.0))) + 1.0;
        float _2216 = (exp2(log2(1.0 - (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2217 = 1.0 - _2180;
        float _2227 = (0.5 / (((_1856 * ((_2194 * _2217) + _2180)) + 9.9999999392252902907785028219223e-09) + (((_1856 * _2217) + _2180) * _2194))) * _2194;
        float _4289 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
        float _2229 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_2203 / ((_2207 * _2207) * 3.141590118408203125));
        float _2230 = isnan(1.0) ? _1706 : (isnan(_1706) ? 1.0 : min(_1706, 1.0));
        _2150 = (((_2216 * cbLight._m0[_2165].x) * _2229) * _2230) + _2040;
        _2152 = (((_2216 * cbLight._m0[_2165].y) * _2229) * _2230) + _2042;
        _2154 = (((_2216 * cbLight._m0[_2165].z) * _2229) * _2230) + _2044;
    }
    float _2365;
    float _2367;
    float _2369;
    float _2371;
    float _2373;
    float _2375;
    if (_1688.y == 0u)
    {
        float _2305 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2306 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2305;
        float _2307 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2305;
        float _2308 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2305;
        uvec4 _2320 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2321 = _2320.x;
        uint _2332 = uint((float(_2320.y) * floor(float(uint(cbSceneParam._m0[85u].y * _495) / _2321))) + floor(float(uint(cbSceneParam._m0[85u].x * _494) / _2321)));
        float _2342 = (log2(_2308 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2343 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        uint _2346 = uint(isnan(14.0) ? _2343 : (isnan(_2343) ? 14.0 : min(_2343, 14.0)));
        uvec4 _2351 = texelFetch(g_lightClusterGridBuffer, int(((_2346 << 2u) + (_2332 << 6u)) >> 2u));
        uint _2352 = _2351.x;
        uint _2353 = _2320.z;
        float _2523;
        float _2525;
        float _2527;
        float _2529;
        float _2531;
        float _2533;
        if (((((1u << ((_2353 >> 4u) & 15u)) + 4294967295u) & _2352) == 0u) || ((_2353 & 240u) == 0u))
        {
            _2523 = 0.0;
            _2525 = 0.0;
            _2527 = 0.0;
            _2529 = 0.0;
            _2531 = 0.0;
            _2533 = 0.0;
        }
        else
        {
            float _2524;
            float _2526;
            float _2528;
            float _2530;
            float _2532;
            float _2534;
            float _2707 = 0.0;
            float _2708 = 0.0;
            float _2709 = 0.0;
            float _2710 = 0.0;
            float _2711 = 0.0;
            float _2712 = 0.0;
            uint _2713 = 0u;
            uint _2722;
            bool _2723;
            for (;;)
            {
                _2722 = texelFetch(g_lightClassification, int((((_2346 << 5u) + (_2332 << 9u)) + (_2713 << 2u)) >> 2u)).x;
                _2723 = _2722 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2723)
                {
                    frontier_phi_66_pred = _2707;
                    frontier_phi_66_pred_1 = _2712;
                    frontier_phi_66_pred_2 = _2711;
                    frontier_phi_66_pred_3 = _2710;
                    frontier_phi_66_pred_4 = _2709;
                    frontier_phi_66_pred_5 = _2708;
                }
                else
                {
                    float _2852;
                    float _2853;
                    float _2854;
                    float _2855;
                    float _2856;
                    float _2857;
                    uint _2858;
                    _2852 = _2707;
                    _2853 = _2708;
                    _2854 = _2709;
                    _2855 = _2710;
                    _2856 = _2711;
                    _2857 = _2712;
                    _2858 = _2722;
                    float _2779;
                    float _2780;
                    float _2781;
                    float _2782;
                    float _2783;
                    float _2784;
                    for (;;)
                    {
                        uint _2862 = uint(findLSB(_2858)) + (_2713 << 5u);
                        uint _2859 = (_2858 + 4294967295u) & _2858;
                        uint _2864 = _2862 * 48u;
                        vec4 _2878 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2864)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 3u)).x));
                        uint _2884 = (_2862 * 48u) + 4u;
                        vec4 _2897 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2884)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 3u)).x));
                        uint _2903 = (_2862 * 48u) + 8u;
                        vec3 _2914 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2903)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 2u)).x));
                        float _2918 = _2878.x - _2306;
                        float _2919 = _2878.y - _2307;
                        float _2920 = _2878.z - _2308;
                        float _2921 = dot(vec3(_2918, _2919, _2920), vec3(_2918, _2919, _2920));
                        float _2924 = inversesqrt(_2921);
                        float _2925 = _2924 * _2918;
                        float _2926 = _2924 * _2919;
                        float _2927 = _2924 * _2920;
                        float _2928 = dot(vec3(_515, _518, _521), vec3(_2925, _2926, _2927));
                        float _2933 = 1.0 - (_2921 * _2878.w);
                        float _4315 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
                        float _2934 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
                        float _2935 = sqrt(_2921) * _2897.w;
                        float _2938 = 1.39999997615814208984375 / (_2935 + 1.39999997615814208984375);
                        float _2939 = _2938 * _2938;
                        float _2942 = ((1.0 - _2939) * _2928) + _2939;
                        float _2945 = _2935 * _2935;
                        float _2949 = ((isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0))) * _2934) / ((_2945 * 0.699999988079071044921875) + 1.0);
                        float _2953 = (-0.0) - _2306;
                        float _2954 = (-0.0) - _2307;
                        float _2955 = (-0.0) - _2308;
                        float _2959 = inversesqrt(dot(vec3(_2953, _2954, _2955), vec3(_2953, _2954, _2955)));
                        float _2960 = _2959 * _2953;
                        float _2961 = _2959 * _2954;
                        float _2962 = _2959 * _2955;
                        float _2970 = exp2(log2(1.0 / ((_2945 * 3.5) + 5.0)) * 0.25);
                        float _2971 = 1.0 - _583;
                        float _2978 = sqrt(1.0 - ((1.0 - (_2971 * _2971)) * (1.0 - (_2970 * _2970))));
                        float _2979 = _2978 * _2978;
                        float _2980 = _2979 * _2979;
                        float _2981 = _2960 + _2925;
                        float _2982 = _2961 + _2926;
                        float _2983 = _2962 + _2927;
                        float _2987 = inversesqrt(dot(vec3(_2981, _2982, _2983), vec3(_2981, _2982, _2983)));
                        float _2991 = dot(vec3(_515, _518, _521), vec3(_2960, _2961, _2962));
                        float _4331 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                        float _2994 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
                        float _2995 = dot(vec3(_515, _518, _521), vec3(_2987 * _2981, _2987 * _2982, _2987 * _2983));
                        float _4342 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                        float _2998 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                        float _3002 = ((_2998 * _2998) * (_2980 + (-1.0))) + 1.0;
                        float _3003 = _2938 * _2979;
                        float _3004 = _3003 * _3003;
                        float _3007 = ((1.0 - _3004) * _2928) + _3004;
                        float _4353 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                        float _3008 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                        float _3009 = 1.0 - _2979;
                        float _3019 = (0.5 / (((_3008 * ((_2994 * _3009) + _2979)) + 9.9999999392252902907785028219223e-09) + (((_3008 * _3009) + _2979) * _2994))) * _3008;
                        float _4364 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
                        float _3030 = (((_2980 * 3.1415927410125732421875) * (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0)))) / ((_3002 * _3002) * ((_2945 * 2.1991131305694580078125) + 3.141590118408203125))) * _2934;
                        _2782 = (_2949 * _2897.x) + _2855;
                        _2783 = (_2949 * _2897.y) + _2856;
                        _2784 = (_2949 * _2897.z) + _2857;
                        _2779 = (_3030 * _2914.x) + _2852;
                        _2780 = (_3030 * _2914.y) + _2853;
                        _2781 = (_3030 * _2914.z) + _2854;
                        if (_2859 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2852 = _2779;
                            _2853 = _2780;
                            _2854 = _2781;
                            _2855 = _2782;
                            _2856 = _2783;
                            _2857 = _2784;
                            _2858 = _2859;
                        }
                    }
                    frontier_phi_66_pred = _2779;
                    frontier_phi_66_pred_1 = _2784;
                    frontier_phi_66_pred_2 = _2783;
                    frontier_phi_66_pred_3 = _2782;
                    frontier_phi_66_pred_4 = _2781;
                    frontier_phi_66_pred_5 = _2780;
                }
                _2524 = frontier_phi_66_pred;
                _2534 = frontier_phi_66_pred_1;
                _2532 = frontier_phi_66_pred_2;
                _2530 = frontier_phi_66_pred_3;
                _2528 = frontier_phi_66_pred_4;
                _2526 = frontier_phi_66_pred_5;
                uint _2714 = _2713 + 1u;
                if (_2714 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2707 = _2524;
                    _2708 = _2526;
                    _2709 = _2528;
                    _2710 = _2530;
                    _2711 = _2532;
                    _2712 = _2534;
                    _2713 = _2714;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2523 = _2524;
            _2525 = _2526;
            _2527 = _2528;
            _2529 = _2530;
            _2531 = _2532;
            _2533 = _2534;
        }
        uvec4 _2537 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2538 = _2537.z;
        uint _2540 = (_2538 >> 8u) & 15u;
        float _2675;
        float _2677;
        float _2679;
        float _2681;
        float _2683;
        float _2685;
        if (((4294967295u << _2540) & _2352) == 0u)
        {
            _2675 = _2523;
            _2677 = _2525;
            _2679 = _2527;
            _2681 = _2529;
            _2683 = _2531;
            _2685 = _2533;
        }
        else
        {
            float _2700 = inversesqrt(dot(vec3(_2306, _2307, _2308), vec3(_2306, _2307, _2308)));
            float _2701 = _2700 * _2306;
            float _2702 = _2700 * _2307;
            float _2703 = _2700 * _2308;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2540 < ((_2538 >> 12u) & 15u))
            {
                float _2676;
                float _2678;
                float _2680;
                float _2682;
                float _2684;
                float _2686;
                float _2835 = _2523;
                float _2836 = _2525;
                float _2837 = _2527;
                float _2838 = _2529;
                float _2839 = _2531;
                float _2840 = _2533;
                uint _2841 = _2540;
                uint _2850;
                bool _2851;
                for (;;)
                {
                    _2850 = texelFetch(g_lightClassification, int((((_2346 << 5u) + (_2332 << 9u)) + (_2841 << 2u)) >> 2u)).x;
                    _2851 = _2850 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2851)
                    {
                        frontier_phi_77_pred = _2840;
                        frontier_phi_77_pred_1 = _2839;
                        frontier_phi_77_pred_2 = _2838;
                        frontier_phi_77_pred_3 = _2837;
                        frontier_phi_77_pred_4 = _2836;
                        frontier_phi_77_pred_5 = _2835;
                    }
                    else
                    {
                        float _3044;
                        float _3045;
                        float _3046;
                        float _3047;
                        float _3048;
                        float _3049;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3057 = _2835;
                        float _3058 = _2836;
                        float _3059 = _2837;
                        float _3060 = _2838;
                        float _3061 = _2839;
                        float _3062 = _2840;
                        uint _3063 = _2850;
                        uint _3064;
                        vec4 _3089;
                        float _3090;
                        vec4 _3105;
                        vec3 _3117;
                        vec4 _3133;
                        vec4 _3149;
                        float _3196;
                        bool _3197;
                        for (;;)
                        {
                            uint _3074 = ((_2841 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3063));
                            _3064 = (_3063 + 4294967295u) & _3063;
                            uint _3076 = _3074 * 40u;
                            _3089 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3076)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 3u)).x));
                            _3090 = _3089.w;
                            uint _3092 = (_3074 * 40u) + 4u;
                            _3105 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 3u)).x));
                            uint _3107 = (_3074 * 40u) + 8u;
                            _3117 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 2u)).x));
                            uint _3120 = (_3074 * 40u) + 16u;
                            _3133 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3120)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 3u)).x));
                            uint _3136 = (_3074 * 40u) + 20u;
                            _3149 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 3u)).x));
                            uint _3152 = (_3074 * 40u) + 24u;
                            vec4 _3165 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3152)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 3u)).x));
                            uint _3171 = (_3074 * 40u) + 28u;
                            vec4 _3184 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 3u)).x));
                            _3196 = fma(_2308, _3184.z, fma(_2307, _3184.y, _3184.x * _2306)) + _3184.w;
                            _3197 = !((fma(_2308, _3165.z, fma(_2307, _3165.y, _3165.x * _2306)) + _3165.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3197)
                            {
                                float _3224 = _3089.x - _2306;
                                float _3225 = _3089.y - _2307;
                                float _3226 = _3089.z - _2308;
                                float _3227 = dot(vec3(_3224, _3225, _3226), vec3(_3224, _3225, _3226));
                                float _3230 = inversesqrt(_3227);
                                float _3231 = _3230 * _3224;
                                float _3232 = _3230 * _3225;
                                float _3233 = _3230 * _3226;
                                float _3237 = 1.0 - (_3227 / (_3090 * _3090));
                                float _4375 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                                float _3238 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
                                float _3242 = sqrt(_3227) * _3105.w;
                                float _3244 = 1.39999997615814208984375 / (_3242 + 1.39999997615814208984375);
                                float _3245 = _3244 * _3244;
                                float _3248 = ((1.0 - _3245) * dot(vec3(_3231, _3232, _3233), vec3(_515, _518, _521))) + _3245;
                                float _3251 = _3242 * _3242;
                                float _3255 = (fma(_2308, _3133.z, fma(_2307, _3133.y, _3133.x * _2306)) + _3133.w) / _3196;
                                float _3256 = (fma(_2308, _3149.z, fma(_2307, _3149.y, _3149.x * _2306)) + _3149.w) / _3196;
                                float _3260 = 1.0 - dot(vec2(_3255, _3256), vec2(_3255, _3256));
                                float _4391 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                                float _3261 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                                float _3262 = _3261 * (((isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0))) * _3238) / ((_3251 * 0.699999988079071044921875) + 1.0));
                                float _3274 = exp2(log2(1.0 / ((_3251 * 3.5) + 5.0)) * 0.25);
                                float _3275 = 1.0 - _583;
                                float _3282 = sqrt(1.0 - ((1.0 - (_3275 * _3275)) * (1.0 - (_3274 * _3274))));
                                float _3283 = _3282 * _3282;
                                float _3284 = _3283 * _3283;
                                float _3285 = _3231 - _2701;
                                float _3286 = _3232 - _2702;
                                float _3287 = _3233 - _2703;
                                float _3291 = inversesqrt(dot(vec3(_3285, _3286, _3287), vec3(_3285, _3286, _3287)));
                                float _3295 = dot(vec3(_515, _518, _521), vec3((-0.0) - _2701, (-0.0) - _2702, (-0.0) - _2703));
                                float _4402 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                                float _3298 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                                float _3299 = dot(vec3(_515, _518, _521), vec3(_3291 * _3285, _3291 * _3286, _3291 * _3287));
                                float _4413 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                                float _3302 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                                float _3306 = ((_3302 * _3302) * (_3284 + (-1.0))) + 1.0;
                                float _3307 = _3244 * _3283;
                                float _3308 = _3307 * _3307;
                                float _3314 = ((1.0 - _3308) * dot(vec3(_515, _518, _521), vec3(_3231, _3232, _3233))) + _3308;
                                float _4424 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                                float _3315 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                                float _3316 = 1.0 - _3283;
                                float _3326 = (0.5 / (((_3315 * ((_3298 * _3316) + _3283)) + 9.9999999392252902907785028219223e-09) + (((_3315 * _3316) + _3283) * _3298))) * _3315;
                                float _4435 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                                float _3336 = (_3261 * _3238) * (((_3284 * 3.1415927410125732421875) * (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)))) / ((_3306 * _3306) * ((_3251 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3262 * _3105.y;
                                frontier_phi_83_pred_1 = _3262 * _3105.x;
                                frontier_phi_83_pred_2 = _3336 * _3117.z;
                                frontier_phi_83_pred_3 = _3336 * _3117.y;
                                frontier_phi_83_pred_4 = _3336 * _3117.x;
                                frontier_phi_83_pred_5 = _3262 * _3105.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3344 = frontier_phi_83_pred;
                            _3343 = frontier_phi_83_pred_1;
                            _3342 = frontier_phi_83_pred_2;
                            _3341 = frontier_phi_83_pred_3;
                            _3340 = frontier_phi_83_pred_4;
                            _3345 = frontier_phi_83_pred_5;
                            _3047 = _3343 + _3060;
                            _3048 = _3344 + _3061;
                            _3049 = _3345 + _3062;
                            _3044 = _3340 + _3057;
                            _3045 = _3341 + _3058;
                            _3046 = _3342 + _3059;
                            if (_3064 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3057 = _3044;
                                _3058 = _3045;
                                _3059 = _3046;
                                _3060 = _3047;
                                _3061 = _3048;
                                _3062 = _3049;
                                _3063 = _3064;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3049;
                        frontier_phi_77_pred_1 = _3048;
                        frontier_phi_77_pred_2 = _3047;
                        frontier_phi_77_pred_3 = _3046;
                        frontier_phi_77_pred_4 = _3045;
                        frontier_phi_77_pred_5 = _3044;
                    }
                    _2686 = frontier_phi_77_pred;
                    _2684 = frontier_phi_77_pred_1;
                    _2682 = frontier_phi_77_pred_2;
                    _2680 = frontier_phi_77_pred_3;
                    _2678 = frontier_phi_77_pred_4;
                    _2676 = frontier_phi_77_pred_5;
                    uint _2842 = _2841 + 1u;
                    if (_2842 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2835 = _2676;
                        _2836 = _2678;
                        _2837 = _2680;
                        _2838 = _2682;
                        _2839 = _2684;
                        _2840 = _2686;
                        _2841 = _2842;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2680;
                frontier_phi_58_59_ladder_1 = _2686;
                frontier_phi_58_59_ladder_2 = _2684;
                frontier_phi_58_59_ladder_3 = _2682;
                frontier_phi_58_59_ladder_4 = _2678;
                frontier_phi_58_59_ladder_5 = _2676;
            }
            else
            {
                frontier_phi_58_59_ladder = _2527;
                frontier_phi_58_59_ladder_1 = _2533;
                frontier_phi_58_59_ladder_2 = _2531;
                frontier_phi_58_59_ladder_3 = _2529;
                frontier_phi_58_59_ladder_4 = _2525;
                frontier_phi_58_59_ladder_5 = _2523;
            }
            _2675 = frontier_phi_58_59_ladder_5;
            _2677 = frontier_phi_58_59_ladder_4;
            _2679 = frontier_phi_58_59_ladder;
            _2681 = frontier_phi_58_59_ladder_3;
            _2683 = frontier_phi_58_59_ladder_2;
            _2685 = frontier_phi_58_59_ladder_1;
        }
        float _2690 = isnan(1.0) ? _559 : (isnan(_559) ? 1.0 : min(_559, 1.0));
        _2365 = (_2690 * _2681) + _1820;
        _2367 = (_2690 * _2683) + _1822;
        _2369 = (_2690 * _2685) + _1824;
        _2371 = ((_2675 * 0.039999999105930328369140625) * _2690) + _2150;
        _2373 = ((_2677 * 0.039999999105930328369140625) * _2690) + _2152;
        _2375 = ((_2679 * 0.039999999105930328369140625) * _2690) + _2154;
    }
    else
    {
        _2365 = _1820;
        _2367 = _1822;
        _2369 = _1824;
        _2371 = _2150;
        _2373 = _2152;
        _2375 = _2154;
    }
    float _2389 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2390 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2391 = cbSceneParam._m0[86u].x * (_1637 + ((_582 * cbMtdParam._m0[13u].y) * dot(vec3(_423, _424, _425), vec3(_193, _194, _195))));
    float _2392 = isnan(_2389) ? _2391 : (isnan(_2391) ? _2389 : min(_2391, _2389));
    float _2393 = isnan(_2390) ? _495 : (isnan(_495) ? _2390 : min(_495, _2390));
    vec4 _2395 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2392, _2393), 0.0);
    float _2397 = _2395.x;
    bool _2418 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2397)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2397))) > _475;
    vec4 _2422 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2418 ? _2392 : _494, _2418 ? _2393 : _495));
    float _4461 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _4472 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _4483 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _2446 = 0.959999978542327880859375 - (exp2(log2(1.0 - _574) * 5.0) * 0.959999978542327880859375);
    float _2448 = (_2422.x * _2446) * cbSceneParam._m0[72u].w;
    float _2450 = (_2422.y * _2446) * cbSceneParam._m0[72u].w;
    float _2452 = (_2422.z * _2446) * cbSceneParam._m0[72u].w;
    float _2460 = (_2448 + (((((_1614 * _1662.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))) * _1405) * _1678)) + _2371) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2365 + ((isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0))) * _559))) - _2448) * _454);
    float _2462 = (_2450 + (((((_1614 * _1662.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))) * _1405) * _1678)) + _2373) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_2367 + ((isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0))) * _559))) - _2450) * _454);
    float _2464 = (_2452 + (((((_1614 * _1662.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _1405) * _1678)) + _2375) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (_2369 + ((isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0))) * _559))) - _2452) * _454);
    uint _2465 = _534 + 6u;
    float _2473 = _494 / cbSceneParam._m0[86u].x;
    float _2474 = _495 / cbSceneParam._m0[86u].y;
    vec4 _2488 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2473, _2474, (log2((isnan(cbSceneParam._m0[77u].w) ? _475 : (isnan(_475) ? cbSceneParam._m0[77u].w : min(_475, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2490 = _2488.x;
    float _2491 = _2488.y;
    float _2492 = _2488.z;
    float _2493 = _2488.w;
    float _2585;
    float _2587;
    float _2589;
    float _2591;
    if (_475 > cbSceneParam._m0[78u].w)
    {
        float _2548 = isnan(_475) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _475 : min(cbSceneParam._m0[80u].w, _475));
        float _2549 = _2548 / _475;
        float _2560 = _2549 * _264;
        float _2561 = _265 * _2549;
        float _2562 = (-0.0) - _2561;
        float _2563 = _2549 * _266;
        float _2565 = (cbSceneParam._m0[77u].w * _2562) / _2548;
        float _2566 = _2565 + cbSceneParam._m0[79u].w;
        float _2567 = cbSceneParam._m0[79u].w - _2561;
        float _2573 = sqrt(((_2560 * _2560) + (_2561 * _2561)) + (_2563 * _2563));
        float _2576 = (1.0 - (cbSceneParam._m0[77u].w / _2548)) * _2573;
        float _2581 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2583 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2792;
        if (abs((_2562 - _2565) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2792 = ((((_2566 > 0.0) ? exp2(_2581 * _2566) : (2.0 - exp2(_2583 * _2566))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2576;
        }
        else
        {
            float _2736 = 1.0 / cbSceneParam._m0[80u].x;
            float _2737 = isnan(_2567) ? _2566 : (isnan(_2566) ? _2567 : max(_2566, _2567));
            float _2738 = isnan(_2567) ? _2566 : (isnan(_2566) ? _2567 : min(_2566, _2567));
            float _2747 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : min(_2737, 0.0));
            float _2748 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : min(_2738, 0.0));
            _2792 = ((abs(_2573 / _2562) * cbSceneParam._m0[80u].y) * ((((_2747 - _2748) * 2.0) - ((exp2(_2581 * (isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0)))) - exp2(_2581 * (isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0))))) * _2736)) - ((exp2(_2583 * _2747) - exp2(_2583 * _2748)) * _2736))) + (_2576 * cbSceneParam._m0[80u].z);
        }
        vec4 _2794 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2473, _2474, 1.0), 0.0);
        float _2803 = exp2((_2792 * (-1.44269502162933349609375)) * (1.0 - _2794.w));
        float _2804 = log2(_2803);
        float _2820 = log2(_2493);
        _2585 = (exp2(_2820 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2804 * cbSceneParam._m0[78u].x)) * _2794.x) / cbSceneParam._m0[78u].x)) + _2490;
        _2587 = (exp2(_2820 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2804 * cbSceneParam._m0[78u].y)) * _2794.y) / cbSceneParam._m0[78u].y)) + _2491;
        _2589 = (exp2(_2820 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2804 * cbSceneParam._m0[78u].z)) * _2794.z) / cbSceneParam._m0[78u].z)) + _2492;
        _2591 = _2803 * _2493;
    }
    else
    {
        _2585 = _2490;
        _2587 = _2491;
        _2589 = _2492;
        _2591 = _2493;
    }
    bool _2830;
    float _2646;
    vec4 _2649;
    float _2651;
    vec4 _2653;
    float _2661;
    float _2662;
    float _2663;
    float _2664;
    bool _2674;
    for (;;)
    {
        bool _2603 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2604 = log2(_2591);
        float _2611 = exp2(_2604 * cbSceneParam._m0[78u].x) * _2460;
        float _2612 = exp2(_2604 * cbSceneParam._m0[78u].y) * _2462;
        float _2613 = exp2(_2604 * cbSceneParam._m0[78u].z) * _2464;
        vec4 _2621 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_494, _495));
        float _2623 = _2621.x;
        float _2644 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2623)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2623))) - _475) * 3.0;
        float _4534 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        _2646 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * cbInstanceData._m0[_2465].w;
        float _2647 = _482 + (-0.5);
        _2649 = cbMtdParam._m0[1u];
        _2651 = _2649.y * _2647;
        _2653 = cbMatDynParam._m0[0u];
        float _2660 = (roundEven(_2653.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2661 = _2660 * (_2603 ? _2611 : (_2611 + (cbSceneParam._m0[72u].w * _2585)));
        _2662 = _2660 * (_2603 ? _2612 : (_2612 + (cbSceneParam._m0[72u].w * _2587)));
        _2663 = _2660 * (_2603 ? _2613 : (_2613 + (cbSceneParam._m0[72u].w * _2589)));
        _2664 = _2647 * 0.999000012874603271484375;
        _2674 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2674)
        {
            if ((cbInstanceData._m0[_534 + 7u].x + _2664) < 0.5)
            {
                _2830 = true;
                break;
            }
        }
        uint _2771 = _535 + uint(_2653.w);
        if ((cbInstanceData._m0[_2771].w < 1.0) && ((cbInstanceData._m0[_2771].w + _2664) < 0.5))
        {
            _2830 = true;
            break;
        }
        if ((_2651 + 1.0) < _2649.x)
        {
            _2830 = true;
            break;
        }
        _2830 = false;
        break;
    }
    float _3035;
    if (_2830)
    {
        discard_state = true;
        _3035 = 0.0;
    }
    else
    {
        _3035 = _2646;
    }
    SV_Target.x = _2661;
    SV_Target.y = _2662;
    SV_Target.z = _2663;
    SV_Target.w = _3035;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2646;
    discard_exit();
}


