#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Ice_test_01_snp_0_Texture2D_10;
layout(set = 0, binding = 1) uniform texture2D M_Ice_test_01_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _969;
float _3519;
float _3520;
float _3521;
float _3522;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _195 = _194 * _186;
    float _196 = _194 * _187;
    float _197 = _194 * _188;
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _248 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _252 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _256 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _266 = cbSceneParam._m0[71u].x - (_244 / _256);
    float _267 = cbSceneParam._m0[71u].y - (_248 / _256);
    float _268 = cbSceneParam._m0[71u].z - (_252 / _256);
    float _291 = inversesqrt(dot(vec3(_266, _267, _268), vec3(_266, _267, _268)));
    float _292 = _291 * _266;
    float _293 = _291 * _267;
    float _294 = _291 * _268;
    float _298 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _302 = dot(vec4(_292, _293, _294, 0.0), vec4(_298 * _202, _298 * _203, _298 * _204, 0.0));
    float _3531 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _310 = exp2(log2(1.0 - (isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0)))) * cbMtdParam._m0[12u].y);
    float _3542 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _311 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
    float _318 = (_311 * (cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].x)) + cbMtdParam._m0[10u].x;
    float _319 = (_311 * (cbMtdParam._m0[11u].y - cbMtdParam._m0[10u].y)) + cbMtdParam._m0[10u].y;
    float _320 = (_311 * (cbMtdParam._m0[11u].z - cbMtdParam._m0[10u].z)) + cbMtdParam._m0[10u].z;
    vec4 _340 = texture(sampler2D(M_Ice_test_01_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _348 = (_340.x * 2.0) + (-1.0);
    float _350 = (_340.y * 2.0) + (-1.0);
    float _351 = dot(vec2(_348, _350), vec2(_348, _350));
    float _3553 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _356 = sqrt(1.0 - (isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0))));
    float _357 = abs(_202);
    float _358 = abs(_203);
    float _359 = abs(_204);
    float _360 = _357 * _357;
    float _361 = _358 * _358;
    float _362 = _359 * _359;
    float _365 = _248 * 0.0500000007450580596923828125;
    float _375 = (cbTextureTilingScale._m0[1u].x * (_244 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[1u].z;
    vec4 _378 = texture(sampler2D(M_Ice_test_01_snp_0_Texture2D_9, SS_BumpMap), vec2(_375, (cbTextureTilingScale._m0[1u].y * _365) + cbTextureTilingScale._m0[1u].w));
    float _385 = (cbTextureTilingScale._m0[1u].y * (_252 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[1u].w;
    vec4 _386 = texture(sampler2D(M_Ice_test_01_snp_0_Texture2D_9, SS_BumpMap), vec2(_375, _385));
    vec4 _396 = texture(sampler2D(M_Ice_test_01_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _365) + cbTextureTilingScale._m0[1u].z, _385));
    float _410 = ((((((_386.x * _361) + (_378.x * _362)) + (_396.x * _360)) * 2.0) + (-1.0)) * cbMtdParam._m0[12u].w) + _348;
    float _411 = ((((((_386.y * _361) + (_378.y * _362)) + (_396.y * _360)) * 2.0) + (-1.0)) * cbMtdParam._m0[12u].w) + _350;
    float _414 = fma(_356, _202, fma(_411, _208 * TANGENT.x, _410 * _195));
    float _417 = fma(_356, _203, fma(_411, _208 * TANGENT.y, _410 * _196));
    float _420 = fma(_356, _204, fma(_411, _208 * TANGENT.z, _410 * _197));
    float _424 = inversesqrt(dot(vec3(_414, _417, _420), vec3(_414, _417, _420)));
    float _425 = _424 * _414;
    float _426 = _424 * _417;
    float _427 = _424 * _420;
    float _435 = cbMtdParam._m0[13u].x + dot(vec4(_425, _426, _427, 0.0), vec4(cbMtdParam._m0[14u].xyz, 0.0));
    float _3564 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _437 = (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0))) * TEXCOORD_3.x;
    float _3575 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _438 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
    float _445 = (_438 * (cbMtdParam._m0[9u].x - _318)) + _318;
    float _446 = (_438 * (cbMtdParam._m0[9u].y - _319)) + _319;
    float _447 = (_438 * (cbMtdParam._m0[9u].z - _320)) + _320;
    float _452 = ((cbMtdParam._m0[13u].w - cbMtdParam._m0[12u].x) * _438) + cbMtdParam._m0[12u].x;
    float _455 = cbMtdParam._m0[13u].z + _438;
    float _3586 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _456 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
    float _3597 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _458 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
    float _3608 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _3619 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _3630 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _477 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _482 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _484 = _482.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _648 = sqrt(((_266 * _266) + (_267 * _267)) + (_268 * _268));
        float _654 = (cbMatDynParam._m0[5u].x * _648) + cbMatDynParam._m0[5u].y;
        float _3641 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
        float _655 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _659 = (cbMatDynParam._m0[5u].z * _648) + cbMatDynParam._m0[5u].w;
        float _3652 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0))) - _655)) + _655) < ((_484 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _496 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _497 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _517 = fma(_427, cbSceneParam._m0[5u].z, fma(_426, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _425));
    float _520 = fma(_427, cbSceneParam._m0[6u].z, fma(_426, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _425));
    float _523 = fma(_427, cbSceneParam._m0[7u].z, fma(_426, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _425));
    uint _536 = uint(roundEven(NORMAL.w)) * 13u;
    uint _537 = _536 + 9u;
    uint _538 = _537 + uint(cbMatDynParam._m0[0u].w);
    float _544 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0)))) * cbInstanceData._m0[_538].x;
    float _545 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0)))) * cbInstanceData._m0[_538].y;
    float _546 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0)))) * cbInstanceData._m0[_538].z;
    float _3663 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _547 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _3674 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _548 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
    float _3685 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _549 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    vec4 _558 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _496, cbSceneParam._m0[86u].y * _497));
    float _561 = _558.x * TEXCOORD_3.w;
    float _562 = dot(vec3(_425, _426, _427), vec3(_292, _293, _294));
    float _565 = _562 * 2.0;
    float _569 = (_565 * _425) - _292;
    float _570 = (_565 * _426) - _293;
    float _571 = (_565 * _427) - _294;
    float _575 = abs(dot(vec3(_292, _293, _294), vec3(_425, _426, _427)));
    float _3696 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _576 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _584 = 10.0 / (_477 + 10.0);
    float _585 = sqrt(_458);
    float _597 = exp2((_585 * 5.0) * log2(1.0 - (_576 * 0.999000012874603271484375))) / (4.0 - (_585 * 3.0));
    float _629 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _633 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _637 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _968;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _693 = fma(_637, cbModelParam._m0[26u].z, fma(_633, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _629));
        float _697 = fma(_637, cbModelParam._m0[27u].z, fma(_633, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _629));
        float _701 = fma(_637, cbModelParam._m0[28u].z, fma(_633, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _629));
        float _726 = _629 + _425;
        float _727 = _633 + _426;
        float _728 = _637 + _427;
        float _738 = fma(_728, cbModelParam._m0[26u].z, fma(_727, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _726)) - _693;
        float _739 = fma(_728, cbModelParam._m0[27u].z, fma(_727, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _726)) - _697;
        float _740 = fma(_728, cbModelParam._m0[28u].z, fma(_727, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _726)) - _701;
        float _744 = inversesqrt(dot(vec3(_738, _739, _740), vec3(_738, _739, _740)));
        float _757 = ((_744 * _738) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_693 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _758 = ((_744 * _739) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_697 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _759 = ((_744 * _740) / cbModelParam._m0[34u].z) + ((((((_701 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _762 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_757, _758, _759), 0.0);
        vec4 _769 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_757, _758, _759), 0.0);
        vec4 _776 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_757, _758, _759), 0.0);
        vec4 _783 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_757, _758, _759), 0.0);
        float _796 = exp2((_762.w + (-0.5)) * 20.0) * 2.0;
        float _797 = _796 * (_762.x + (-0.5));
        float _798 = _796 * (_762.y + (-0.5));
        float _799 = _796 * (_762.z + (-0.5));
        float _806 = exp2((_769.w + (-0.5)) * 20.0) * 2.0;
        float _807 = _806 * (_769.x + (-0.5));
        float _808 = _806 * (_769.y + (-0.5));
        float _809 = _806 * (_769.z + (-0.5));
        float _816 = exp2((_776.w + (-0.5)) * 20.0) * 2.0;
        float _817 = _816 * (_776.x + (-0.5));
        float _818 = _816 * (_776.y + (-0.5));
        float _819 = _816 * (_776.z + (-0.5));
        float _826 = exp2((_783.w + (-0.5)) * 20.0) * 2.0;
        float _827 = _826 * (_783.x + (-0.5));
        float _828 = _826 * (_783.y + (-0.5));
        float _829 = _826 * (_783.z + (-0.5));
        float _830 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _831 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _832 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _833 = _797 * 0.5;
        float _834 = _807 * 0.5;
        float _835 = _817 * 0.5;
        float _836 = dot(vec3(_833, _834, _835), vec3(_833, _834, _835));
        float _841 = (_836 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_836);
        float _850 = (dot(vec3(_425, _426, _427), vec3(_841 * _833, _841 * _834, _841 * _835)) + 1.0) * 0.5;
        float _3722 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _860 = sqrt(((_834 * _834) + (_833 * _833)) + (_835 * _835)) / (_830 + 9.9999997473787516355514526367188e-06);
        float _3733 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _861 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _862 = _861 * 2.0;
        float _866 = (1.0 - _861) / (_861 + 1.0);
        float _3744 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _867 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _876 = ((((1.0 - _867) * (_862 + 2.0)) * exp2(log2(isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * (_862 + 1.0))) + _867) * _830;
        float _877 = _798 * 0.5;
        float _878 = _808 * 0.5;
        float _879 = _818 * 0.5;
        float _880 = dot(vec3(_877, _878, _879), vec3(_877, _878, _879));
        float _885 = (_880 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_880);
        float _893 = (dot(vec3(_425, _426, _427), vec3(_885 * _877, _885 * _878, _885 * _879)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _902 = sqrt(((_878 * _878) + (_877 * _877)) + (_879 * _879)) / (_831 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _903 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _904 = _903 * 2.0;
        float _908 = (1.0 - _903) / (_903 + 1.0);
        float _3777 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _909 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _918 = ((((1.0 - _909) * (_904 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_904 + 1.0))) + _909) * _831;
        float _919 = _799 * 0.5;
        float _920 = _809 * 0.5;
        float _921 = _819 * 0.5;
        float _922 = dot(vec3(_919, _920, _921), vec3(_919, _920, _921));
        float _927 = (_922 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_922);
        float _935 = (dot(vec3(_425, _426, _427), vec3(_927 * _919, _927 * _920, _927 * _921)) + 1.0) * 0.5;
        float _3788 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _944 = sqrt(((_920 * _920) + (_919 * _919)) + (_921 * _921)) / (_832 + 9.9999997473787516355514526367188e-06);
        float _3799 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _946 = _945 * 2.0;
        float _950 = (1.0 - _945) / (_945 + 1.0);
        float _3810 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _951 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _960 = ((((1.0 - _951) * (_946 + 2.0)) * exp2(log2(isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_946 + 1.0))) + _951) * _832;
        _968 = _799;
        _970 = _798;
        _971 = _797;
        _972 = _809;
        _973 = _808;
        _974 = _807;
        _975 = _819;
        _976 = _818;
        _977 = _817;
        _978 = _832;
        _979 = _831;
        _980 = _830;
        _981 = cbModelParam._m0[36u].z * (isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0)));
        _982 = cbModelParam._m0[36u].z * (isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0)));
        _983 = cbModelParam._m0[36u].z * (isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0)));
    }
    else
    {
        _968 = _969;
        _970 = _969;
        _971 = _969;
        _972 = _969;
        _973 = _969;
        _974 = _969;
        _975 = _969;
        _976 = _969;
        _977 = _969;
        _978 = _969;
        _979 = _969;
        _980 = _969;
        _981 = 0.0;
        _982 = 0.0;
        _983 = 0.0;
    }
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1012 = fma(_637, cbModelParam._m0[30u].z, fma(_633, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _629));
        float _1016 = fma(_637, cbModelParam._m0[31u].z, fma(_633, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _629));
        float _1020 = fma(_637, cbModelParam._m0[32u].z, fma(_633, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _629));
        float _1043 = _629 + _425;
        float _1044 = _633 + _426;
        float _1045 = _637 + _427;
        float _1055 = fma(_1045, cbModelParam._m0[30u].z, fma(_1044, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1043)) - _1012;
        float _1056 = fma(_1045, cbModelParam._m0[31u].z, fma(_1044, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1043)) - _1016;
        float _1057 = fma(_1045, cbModelParam._m0[32u].z, fma(_1044, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1043)) - _1020;
        float _1061 = inversesqrt(dot(vec3(_1055, _1056, _1057), vec3(_1055, _1056, _1057)));
        float _1074 = ((_1061 * _1055) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1012 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1075 = ((_1061 * _1056) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1016 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1076 = ((_1061 * _1057) / cbModelParam._m0[35u].z) + ((((((_1020 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        float _1111 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1078.x + (-0.5));
        float _1113 = _1111 * (_1078.y + (-0.5));
        float _1114 = _1111 * (_1078.z + (-0.5));
        float _1121 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1085.x + (-0.5));
        float _1123 = _1121 * (_1085.y + (-0.5));
        float _1124 = _1121 * (_1085.z + (-0.5));
        float _1131 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1092.x + (-0.5));
        float _1133 = _1131 * (_1092.y + (-0.5));
        float _1134 = _1131 * (_1092.z + (-0.5));
        float _1141 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1099.x + (-0.5));
        float _1143 = _1141 * (_1099.y + (-0.5));
        float _1144 = _1141 * (_1099.z + (-0.5));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = _1112 * 0.5;
        float _1149 = _1122 * 0.5;
        float _1150 = _1132 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1164 = (dot(vec3(_425, _426, _427), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _3851 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1173 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _3862 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _3873 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * (_1175 + 1.0))) + _1180) * _1145;
        float _1190 = _1113 * 0.5;
        float _1191 = _1123 * 0.5;
        float _1192 = _1133 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1206 = (dot(vec3(_425, _426, _427), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _3884 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1215 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _3895 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _3906 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_1217 + 1.0))) + _1222) * _1146;
        float _1232 = _1114 * 0.5;
        float _1233 = _1124 * 0.5;
        float _1234 = _1134 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1248 = (dot(vec3(_425, _426, _427), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _3917 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1257 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _3928 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _3939 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1259 + 1.0))) + _1264) * _1147;
        _1281 = _1114;
        _1282 = _1113;
        _1283 = _1112;
        _1284 = _1124;
        _1285 = _1123;
        _1286 = _1122;
        _1287 = _1134;
        _1288 = _1133;
        _1289 = _1132;
        _1290 = _1147;
        _1291 = _1146;
        _1292 = _1145;
        _1293 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
        _1294 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
        _1295 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
    }
    else
    {
        _1281 = _969;
        _1282 = _969;
        _1283 = _969;
        _1284 = _969;
        _1285 = _969;
        _1286 = _969;
        _1287 = _969;
        _1288 = _969;
        _1289 = _969;
        _1290 = _969;
        _1291 = _969;
        _1292 = _969;
        _1293 = 0.0;
        _1294 = 0.0;
        _1295 = 0.0;
    }
    float _1305 = (cbModelParam._m0[1u].x * (_1293 - _981)) + _981;
    float _1306 = (cbModelParam._m0[1u].x * (_1294 - _982)) + _982;
    float _1307 = (cbModelParam._m0[1u].x * (_1295 - _983)) + _983;
    float _1328 = fma(_1307, cbSceneParam._m0[89u].z, fma(_1306, cbSceneParam._m0[89u].y, _1305 * cbSceneParam._m0[89u].x));
    float _1331 = fma(_1307, cbSceneParam._m0[90u].z, fma(_1306, cbSceneParam._m0[90u].y, _1305 * cbSceneParam._m0[90u].x));
    float _1334 = fma(_1307, cbSceneParam._m0[91u].z, fma(_1306, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1305));
    float _1349 = _569 * 0.5;
    float _1350 = _570 * 0.5;
    float _1351 = _571 * 0.5;
    float _1352 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_1283, _1286, _1289, _1292));
    float _1355 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_1282, _1285, _1288, _1291));
    float _1358 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_1281, _1284, _1287, _1290));
    float _1392;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1365 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_968, _972, _975, _978));
        float _1369 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_970, _973, _976, _979));
        float _1373 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_971, _974, _977, _980));
        float _1380 = dot(vec4(cbModelParam._m0[39u]), vec4(_1349, _1350, _1351, 1.0));
        _1392 = dot(vec3(isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)), isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)), isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1380) ? 0.0 : (isnan(0.0) ? _1380 : max(0.0, _1380))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1392 = 1.0;
    }
    float _1403;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1394 = dot(vec4(cbModelParam._m0[40u]), vec4(_1349, _1350, _1351, 1.0));
        _1403 = dot(vec3(isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)), isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)), isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1394) ? 0.0 : (isnan(0.0) ? _1394 : max(0.0, _1394))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1403 = 1.0;
    }
    float _1407 = (_1403 * cbModelParam._m0[1u].x) + (_1392 * (1.0 - cbModelParam._m0[1u].x));
    float _1417 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _458);
    float _1418 = isnan(_1417) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1417 : min(cbModelParam._m0[25u].z, _1417));
    float _1498;
    float _1500;
    float _1502;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1465 = fma(_637, cbModelParam._m0[13u].z, fma(_633, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _629)) + cbModelParam._m0[13u].w;
        float _1469 = fma(_637, cbModelParam._m0[14u].z, fma(_633, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _629)) + cbModelParam._m0[14u].w;
        float _1473 = fma(_637, cbModelParam._m0[15u].z, fma(_633, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _629)) + cbModelParam._m0[15u].w;
        float _1476 = fma(_571, cbModelParam._m0[13u].z, fma(_570, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _569));
        float _1479 = fma(_571, cbModelParam._m0[14u].z, fma(_570, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _569));
        float _1482 = fma(_571, cbModelParam._m0[15u].z, fma(_570, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _569));
        float _1510;
        if (_1476 > 0.0)
        {
            _1510 = abs((1.0 - _1465) / _1476);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1476 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1465 + 1.0) / _1476);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1510 = frontier_phi_17_15_ladder;
        }
        float _1788;
        if (_1479 > 0.0)
        {
            _1788 = abs((1.0 - _1469) / _1479);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1479 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1469 + 1.0) / _1479);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1788 = frontier_phi_26_22_ladder;
        }
        float _2034;
        if (_1482 > 0.0)
        {
            _2034 = abs((1.0 - _1473) / _1482);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1482 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1473 + 1.0) / _1482);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2034 = frontier_phi_38_33_ladder;
        }
        float _2036 = isnan(_1788) ? _1510 : (isnan(_1510) ? _1788 : min(_1510, _1788));
        float _2037 = isnan(_2034) ? _2036 : (isnan(_2036) ? _2034 : min(_2036, _2034));
        float _2041 = (_2037 * _1476) + _1465;
        float _2042 = (_2037 * _1479) + _1469;
        float _2043 = (_2037 * _1482) + _1473;
        float _2044 = _2037 * 9.9999997473787516355514526367188e-05;
        float _2046 = (-1.0) - _2044;
        float _2048 = _2044 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2043 > _2048) || ((_2043 < _2046) || ((_2042 > _2048) || ((_2042 < _2046) || ((_2041 < _2046) || (_2041 > _2048))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2167 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2043, cbModelParam._m0[9u].z, fma(_2042, cbModelParam._m0[9u].y, _2041 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2043, cbModelParam._m0[10u].z, fma(_2042, cbModelParam._m0[10u].y, _2041 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2043, cbModelParam._m0[11u].z, fma(_2042, cbModelParam._m0[11u].y, _2041 * cbModelParam._m0[11u].x))), _1418);
            frontier_phi_16_38_ladder = _2167.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2167.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2167.x * cbModelParam._m0[1u].y;
        }
        _1498 = frontier_phi_16_38_ladder_2;
        _1500 = frontier_phi_16_38_ladder_1;
        _1502 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1486 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_569, _570, _571), _1418);
        _1498 = _1486.x * cbModelParam._m0[1u].y;
        _1500 = _1486.y * cbModelParam._m0[1u].y;
        _1502 = _1486.z * cbModelParam._m0[1u].y;
    }
    float _1506 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _458);
    float _1507 = isnan(_1506) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1506 : min(cbModelParam._m0[25u].w, _1506));
    float _1600;
    float _1602;
    float _1604;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1564 = fma(_637, cbModelParam._m0[21u].z, fma(_633, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _629)) + cbModelParam._m0[21u].w;
        float _1568 = fma(_637, cbModelParam._m0[22u].z, fma(_633, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _629)) + cbModelParam._m0[22u].w;
        float _1572 = fma(_637, cbModelParam._m0[23u].z, fma(_633, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _629)) + cbModelParam._m0[23u].w;
        float _1575 = fma(_571, cbModelParam._m0[21u].z, fma(_570, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _569));
        float _1578 = fma(_571, cbModelParam._m0[22u].z, fma(_570, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _569));
        float _1581 = fma(_571, cbModelParam._m0[23u].z, fma(_570, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _569));
        float _1793;
        if (_1575 > 0.0)
        {
            _1793 = abs((1.0 - _1564) / _1575);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1575 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1564 + 1.0) / _1575);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1793 = frontier_phi_28_24_ladder;
        }
        float _2061;
        if (_1578 > 0.0)
        {
            _2061 = abs((1.0 - _1568) / _1578);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1578 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1568 + 1.0) / _1578);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2061 = frontier_phi_40_35_ladder;
        }
        float _2266;
        if (_1581 > 0.0)
        {
            _2266 = abs((1.0 - _1572) / _1581);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1572 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2266 = frontier_phi_49_46_ladder;
        }
        float _2268 = isnan(_2061) ? _1793 : (isnan(_1793) ? _2061 : min(_1793, _2061));
        float _2269 = isnan(_2266) ? _2268 : (isnan(_2268) ? _2266 : min(_2268, _2266));
        float _2273 = (_2269 * _1575) + _1564;
        float _2274 = (_2269 * _1578) + _1568;
        float _2275 = (_2269 * _1581) + _1572;
        float _2276 = _2269 * 9.9999997473787516355514526367188e-05;
        float _2277 = (-1.0) - _2276;
        float _2279 = _2276 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2275 > _2279) || ((_2275 < _2277) || ((_2274 > _2279) || ((_2274 < _2277) || ((_2273 < _2277) || (_2273 > _2279))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2550 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2275, cbModelParam._m0[17u].z, fma(_2274, cbModelParam._m0[17u].y, _2273 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2275, cbModelParam._m0[18u].z, fma(_2274, cbModelParam._m0[18u].y, _2273 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2275, cbModelParam._m0[19u].z, fma(_2274, cbModelParam._m0[19u].y, _2273 * cbModelParam._m0[19u].x))), _1507);
            frontier_phi_25_49_ladder = _2550.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2550.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2550.x * cbModelParam._m0[1u].z;
        }
        _1600 = frontier_phi_25_49_ladder_2;
        _1602 = frontier_phi_25_49_ladder_1;
        _1604 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1584 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_569, _570, _571), _1507);
        _1600 = _1584.x * cbModelParam._m0[1u].z;
        _1602 = _1584.y * cbModelParam._m0[1u].z;
        _1604 = _1584.z * cbModelParam._m0[1u].z;
    }
    float _1616 = ((((1.0 - _597) * ((_585 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_597 * _585)) * _561;
    float _1617 = _1616 * ((cbModelParam._m0[1u].w * (_1600 - _1498)) + _1498);
    float _1618 = _1616 * ((cbModelParam._m0[1u].w * (_1602 - _1500)) + _1500);
    float _1619 = _1616 * ((cbModelParam._m0[1u].w * (_1604 - _1502)) + _1502);
    float _1622 = fma(_1619, cbSceneParam._m0[89u].z, fma(_1618, cbSceneParam._m0[89u].y, _1617 * cbSceneParam._m0[89u].x));
    float _1625 = fma(_1619, cbSceneParam._m0[90u].z, fma(_1618, cbSceneParam._m0[90u].y, _1617 * cbSceneParam._m0[90u].x));
    float _1628 = fma(_1619, cbSceneParam._m0[91u].z, fma(_1618, cbSceneParam._m0[91u].y, _1617 * cbSceneParam._m0[91u].x));
    float _1639 = _496 / cbSceneParam._m0[86u].x;
    float _1647 = (cbSceneParam._m0[88u].y * (1.0 - _458)) + cbSceneParam._m0[88u].z;
    float _4065 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
    float _1649 = (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * 5.0;
    float _1654 = (_584 * cbMtdParam._m0[12u].z) * dot(vec3(_425, _426, _427), vec3(1.0, 0.0, 0.0));
    vec4 _1664 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1654 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1654 + _1639) * cbSceneParam._m0[86u].x, _497), _1649).w) + _1639) * cbSceneParam._m0[86u].x, _497), _1649);
    float _1680 = 1.0 - _1664.w;
    vec4 _1688 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_496, _497));
    float _1690 = _1688.w;
    float _1702 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1690);
    float _1703 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1690);
    float _1704 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1690);
    uvec4 _1708 = floatBitsToUint(cbInstanceData._m0[_536 + 5u]);
    uint _1710 = _1708.x * 14u;
    uint _1711 = _1710 + 13u;
    float _1718 = _561 + (-1.0);
    float _1723 = (cbLight._m0[_1711].x * _1718) + 1.0;
    float _1724 = (cbLight._m0[_1711].y * _1718) + 1.0;
    float _1725 = (cbLight._m0[_1711].z * _1718) + 1.0;
    float _1726 = (cbLight._m0[_1711].w * _1718) + 1.0;
    uint _1727 = _1710 + 5u;
    float _1733 = isnan(1.0) ? _1724 : (isnan(_1724) ? 1.0 : min(_1724, 1.0));
    uint _1737 = _1710 + 4u;
    float _1747 = isnan(1.0) ? _1723 : (isnan(_1723) ? 1.0 : min(_1723, 1.0));
    uint _1751 = _1710 | 1u;
    float _1762 = dot(vec3(cbLight._m0[_1710].xyz), vec3(_425, _426, _427));
    float _1765 = dot(vec3(cbLight._m0[_1751].xyz), vec3(_425, _426, _427));
    float _4086 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _4097 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _1770 = (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * 0.3183098733425140380859375;
    float _1772 = (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * 0.3183098733425140380859375;
    float _1779 = ((cbLight._m0[_1727].x * _1733) * _1772) + (((cbLight._m0[_1737].x * _1702) * _1747) * _1770);
    float _1780 = ((_1733 * cbLight._m0[_1727].y) * _1772) + (((cbLight._m0[_1737].y * _1703) * _1747) * _1770);
    float _1781 = ((_1733 * cbLight._m0[_1727].z) * _1772) + (((cbLight._m0[_1737].z * _1704) * _1747) * _1770);
    uvec4 _1785 = floatBitsToUint(cbLight._m0[_1710 + 12u]);
    bool _1787 = _1785.x == 0u;
    float _1798;
    float _1800;
    float _1802;
    if (_1787)
    {
        _1798 = _1779;
        _1800 = _1780;
        _1802 = _1781;
    }
    else
    {
        uint _1806 = _1710 + 6u;
        float _1822 = (dot(vec3(cbLight._m0[_1710 + 2u].xyz), vec3(_425, _426, _427)) * 0.5) + 0.5;
        float _1823 = _1822 * _1822;
        float _4108 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1824 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1825 = isnan(1.0) ? _1725 : (isnan(_1725) ? 1.0 : min(_1725, 1.0));
        _1798 = (((cbLight._m0[_1806].x * 0.3183098733425140380859375) * _1824) * _1825) + _1779;
        _1800 = (((cbLight._m0[_1806].y * 0.3183098733425140380859375) * _1824) * _1825) + _1780;
        _1802 = (((cbLight._m0[_1806].z * 0.3183098733425140380859375) * _1824) * _1825) + _1781;
    }
    bool _1805 = _1785.y == 0u;
    float _1843;
    float _1845;
    float _1847;
    if (_1805)
    {
        _1843 = _1798;
        _1845 = _1800;
        _1847 = _1802;
    }
    else
    {
        uint _2005 = _1710 + 7u;
        float _2021 = (dot(vec3(cbLight._m0[_1710 + 3u].xyz), vec3(_425, _426, _427)) * 0.5) + 0.5;
        float _2022 = _2021 * _2021;
        float _4124 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
        float _2023 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _2024 = isnan(1.0) ? _1726 : (isnan(_1726) ? 1.0 : min(_1726, 1.0));
        _1843 = (((cbLight._m0[_2005].x * 0.3183098733425140380859375) * _2023) * _2024) + _1798;
        _1845 = (((cbLight._m0[_2005].y * 0.3183098733425140380859375) * _2023) * _2024) + _1800;
        _1847 = (((cbLight._m0[_2005].z * 0.3183098733425140380859375) * _2023) * _2024) + _1802;
    }
    uint _1850 = _1710 + 8u;
    float _1863 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1710].w)) * _458) * 0.949999988079071044921875);
    float _1864 = _1863 * _1863;
    float _1865 = cbLight._m0[_1710].x + _292;
    float _1866 = cbLight._m0[_1710].y + _293;
    float _1867 = cbLight._m0[_1710].z + _294;
    float _1871 = inversesqrt(dot(vec3(_1865, _1866, _1867), vec3(_1865, _1866, _1867)));
    float _1872 = _1871 * _1865;
    float _1873 = _1871 * _1866;
    float _1874 = _1871 * _1867;
    float _1875 = dot(vec3(_425, _426, _427), vec3(cbLight._m0[_1710].xyz));
    float _4140 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1878 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _4151 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _1879 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _1880 = dot(vec3(_425, _426, _427), vec3(_1872, _1873, _1874));
    float _4162 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1883 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _1884 = dot(vec3(cbLight._m0[_1710].xyz), vec3(_1872, _1873, _1874));
    float _4173 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _1888 = _1864 * _1864;
    float _1892 = ((_1883 * _1883) * (_1888 + (-1.0))) + 1.0;
    float _1903 = (exp2(log2(1.0 - (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1904 = 1.0 - _1864;
    float _1915 = (0.5 / (((_1879 * ((_1878 * _1904) + _1864)) + 9.9999999392252902907785028219223e-09) + (((_1879 * _1904) + _1864) * _1878))) * _1878;
    float _4184 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1917 = (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_1888 / ((_1892 * _1892) * 3.141590118408203125));
    uint _1931 = _1710 + 9u;
    float _1942 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1751].w)) * _458) * 0.949999988079071044921875);
    float _1943 = _1942 * _1942;
    float _1944 = cbLight._m0[_1751].x + _292;
    float _1945 = cbLight._m0[_1751].y + _293;
    float _1946 = cbLight._m0[_1751].z + _294;
    float _1950 = inversesqrt(dot(vec3(_1944, _1945, _1946), vec3(_1944, _1945, _1946)));
    float _1951 = _1950 * _1944;
    float _1952 = _1950 * _1945;
    float _1953 = _1950 * _1946;
    float _1954 = dot(vec3(_425, _426, _427), vec3(cbLight._m0[_1751].xyz));
    float _4195 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1957 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _1958 = dot(vec3(_425, _426, _427), vec3(_1951, _1952, _1953));
    float _4206 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1961 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _1962 = dot(vec3(cbLight._m0[_1751].xyz), vec3(_1951, _1952, _1953));
    float _4217 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1966 = _1943 * _1943;
    float _1970 = ((_1961 * _1961) * (_1966 + (-1.0))) + 1.0;
    float _1979 = (exp2(log2(1.0 - (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1980 = 1.0 - _1943;
    float _1990 = (0.5 / (((_1879 * ((_1957 * _1980) + _1943)) + 9.9999999392252902907785028219223e-09) + (((_1879 * _1980) + _1943) * _1957))) * _1957;
    float _4228 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1992 = (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_1966 / ((_1970 * _1970) * 3.141590118408203125));
    float _2002 = (((_1979 * cbLight._m0[_1931].x) * _1992) * _1733) + ((((cbLight._m0[_1850].x * _1702) * _1903) * _1917) * _1747);
    float _2003 = (((_1979 * cbLight._m0[_1931].y) * _1992) * _1733) + ((((cbLight._m0[_1850].y * _1703) * _1903) * _1917) * _1747);
    float _2004 = (((_1979 * cbLight._m0[_1931].z) * _1992) * _1733) + ((((cbLight._m0[_1850].z * _1704) * _1903) * _1917) * _1747);
    float _2066;
    float _2068;
    float _2070;
    if (_1787)
    {
        _2066 = _2002;
        _2068 = _2003;
        _2070 = _2004;
    }
    else
    {
        uint _2072 = _1710 + 2u;
        uint _2076 = _1710 + 10u;
        float _2090 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2072].w)) * _458) * 0.949999988079071044921875);
        float _2091 = _2090 * _2090;
        float _2092 = cbLight._m0[_2072].x + _292;
        float _2093 = cbLight._m0[_2072].y + _293;
        float _2094 = cbLight._m0[_2072].z + _294;
        float _2098 = inversesqrt(dot(vec3(_2092, _2093, _2094), vec3(_2092, _2093, _2094)));
        float _2099 = _2098 * _2092;
        float _2100 = _2098 * _2093;
        float _2101 = _2098 * _2094;
        float _2102 = dot(vec3(_425, _426, _427), vec3(cbLight._m0[_2072].xyz));
        float _4239 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2105 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _2106 = dot(vec3(_425, _426, _427), vec3(_2099, _2100, _2101));
        float _4250 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2109 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _2110 = dot(vec3(cbLight._m0[_2072].xyz), vec3(_2099, _2100, _2101));
        float _4261 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2114 = _2091 * _2091;
        float _2118 = ((_2109 * _2109) * (_2114 + (-1.0))) + 1.0;
        float _2127 = (exp2(log2(1.0 - (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2128 = 1.0 - _2091;
        float _2138 = (0.5 / (((_1879 * ((_2105 * _2128) + _2091)) + 9.9999999392252902907785028219223e-09) + (((_1879 * _2128) + _2091) * _2105))) * _2105;
        float _4272 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2140 = (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_2114 / ((_2118 * _2118) * 3.141590118408203125));
        float _2141 = isnan(1.0) ? _1725 : (isnan(_1725) ? 1.0 : min(_1725, 1.0));
        _2066 = (((_2127 * cbLight._m0[_2076].x) * _2140) * _2141) + _2002;
        _2068 = (((_2127 * cbLight._m0[_2076].y) * _2140) * _2141) + _2003;
        _2070 = (((_2127 * cbLight._m0[_2076].z) * _2140) * _2141) + _2004;
    }
    float _2176;
    float _2178;
    float _2180;
    if (_1805)
    {
        _2176 = _2066;
        _2178 = _2068;
        _2180 = _2070;
    }
    else
    {
        uint _2187 = _1710 + 3u;
        uint _2191 = _1710 + 11u;
        float _2205 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2187].w)) * _458) * 0.949999988079071044921875);
        float _2206 = _2205 * _2205;
        float _2207 = cbLight._m0[_2187].x + _292;
        float _2208 = cbLight._m0[_2187].y + _293;
        float _2209 = cbLight._m0[_2187].z + _294;
        float _2213 = inversesqrt(dot(vec3(_2207, _2208, _2209), vec3(_2207, _2208, _2209)));
        float _2214 = _2213 * _2207;
        float _2215 = _2213 * _2208;
        float _2216 = _2213 * _2209;
        float _2217 = dot(vec3(_425, _426, _427), vec3(cbLight._m0[_2187].xyz));
        float _4288 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2220 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _2221 = dot(vec3(_425, _426, _427), vec3(_2214, _2215, _2216));
        float _4299 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2224 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _2225 = dot(vec3(cbLight._m0[_2187].xyz), vec3(_2214, _2215, _2216));
        float _4310 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2229 = _2206 * _2206;
        float _2233 = ((_2224 * _2224) * (_2229 + (-1.0))) + 1.0;
        float _2242 = (exp2(log2(1.0 - (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2243 = 1.0 - _2206;
        float _2253 = (0.5 / (((_1879 * ((_2220 * _2243) + _2206)) + 9.9999999392252902907785028219223e-09) + (((_1879 * _2243) + _2206) * _2220))) * _2220;
        float _4321 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2255 = (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_2229 / ((_2233 * _2233) * 3.141590118408203125));
        float _2256 = isnan(1.0) ? _1726 : (isnan(_1726) ? 1.0 : min(_1726, 1.0));
        _2176 = (((_2242 * cbLight._m0[_2191].x) * _2255) * _2256) + _2066;
        _2178 = (((_2242 * cbLight._m0[_2191].y) * _2255) * _2256) + _2068;
        _2180 = (((_2242 * cbLight._m0[_2191].z) * _2255) * _2256) + _2070;
    }
    float _2391;
    float _2393;
    float _2395;
    float _2397;
    float _2399;
    float _2401;
    if (_1708.y == 0u)
    {
        float _2331 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2332 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2331;
        float _2333 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2331;
        float _2334 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2331;
        uvec4 _2346 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2347 = _2346.x;
        uint _2358 = uint((float(_2346.y) * floor(float(uint(cbSceneParam._m0[85u].y * _497) / _2347))) + floor(float(uint(cbSceneParam._m0[85u].x * _496) / _2347)));
        float _2368 = (log2(_2334 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2369 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        uint _2372 = uint(isnan(14.0) ? _2369 : (isnan(_2369) ? 14.0 : min(_2369, 14.0)));
        uvec4 _2377 = texelFetch(g_lightClusterGridBuffer, int(((_2372 << 2u) + (_2358 << 6u)) >> 2u));
        uint _2378 = _2377.x;
        uint _2379 = _2346.z;
        float _2555;
        float _2557;
        float _2559;
        float _2561;
        float _2563;
        float _2565;
        if (((((1u << ((_2379 >> 4u) & 15u)) + 4294967295u) & _2378) == 0u) || ((_2379 & 240u) == 0u))
        {
            _2555 = 0.0;
            _2557 = 0.0;
            _2559 = 0.0;
            _2561 = 0.0;
            _2563 = 0.0;
            _2565 = 0.0;
        }
        else
        {
            float _2556;
            float _2558;
            float _2560;
            float _2562;
            float _2564;
            float _2566;
            float _2739 = 0.0;
            float _2740 = 0.0;
            float _2741 = 0.0;
            float _2742 = 0.0;
            float _2743 = 0.0;
            float _2744 = 0.0;
            uint _2745 = 0u;
            uint _2754;
            bool _2755;
            for (;;)
            {
                _2754 = texelFetch(g_lightClassification, int((((_2372 << 5u) + (_2358 << 9u)) + (_2745 << 2u)) >> 2u)).x;
                _2755 = _2754 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2755)
                {
                    frontier_phi_66_pred = _2739;
                    frontier_phi_66_pred_1 = _2744;
                    frontier_phi_66_pred_2 = _2743;
                    frontier_phi_66_pred_3 = _2742;
                    frontier_phi_66_pred_4 = _2741;
                    frontier_phi_66_pred_5 = _2740;
                }
                else
                {
                    float _2884;
                    float _2885;
                    float _2886;
                    float _2887;
                    float _2888;
                    float _2889;
                    uint _2890;
                    _2884 = _2739;
                    _2885 = _2740;
                    _2886 = _2741;
                    _2887 = _2742;
                    _2888 = _2743;
                    _2889 = _2744;
                    _2890 = _2754;
                    float _2811;
                    float _2812;
                    float _2813;
                    float _2814;
                    float _2815;
                    float _2816;
                    for (;;)
                    {
                        uint _2894 = uint(findLSB(_2890)) + (_2745 << 5u);
                        uint _2891 = (_2890 + 4294967295u) & _2890;
                        uint _2896 = _2894 * 48u;
                        vec4 _2910 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2896)).x, texelFetch(g_PointLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2896 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2896 + 3u)).x));
                        uint _2916 = (_2894 * 48u) + 4u;
                        vec4 _2929 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2916)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 3u)).x));
                        uint _2935 = (_2894 * 48u) + 8u;
                        vec3 _2946 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2935)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 2u)).x));
                        float _2950 = _2910.x - _2332;
                        float _2951 = _2910.y - _2333;
                        float _2952 = _2910.z - _2334;
                        float _2953 = dot(vec3(_2950, _2951, _2952), vec3(_2950, _2951, _2952));
                        float _2956 = inversesqrt(_2953);
                        float _2957 = _2956 * _2950;
                        float _2958 = _2956 * _2951;
                        float _2959 = _2956 * _2952;
                        float _2960 = dot(vec3(_517, _520, _523), vec3(_2957, _2958, _2959));
                        float _2965 = 1.0 - (_2953 * _2910.w);
                        float _4347 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                        float _2966 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                        float _2967 = sqrt(_2953) * _2929.w;
                        float _2970 = 1.39999997615814208984375 / (_2967 + 1.39999997615814208984375);
                        float _2971 = _2970 * _2970;
                        float _2974 = ((1.0 - _2971) * _2960) + _2971;
                        float _2977 = _2967 * _2967;
                        float _2981 = ((isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0))) * _2966) / ((_2977 * 0.699999988079071044921875) + 1.0);
                        float _2985 = (-0.0) - _2332;
                        float _2986 = (-0.0) - _2333;
                        float _2987 = (-0.0) - _2334;
                        float _2991 = inversesqrt(dot(vec3(_2985, _2986, _2987), vec3(_2985, _2986, _2987)));
                        float _2992 = _2991 * _2985;
                        float _2993 = _2991 * _2986;
                        float _2994 = _2991 * _2987;
                        float _3002 = exp2(log2(1.0 / ((_2977 * 3.5) + 5.0)) * 0.25);
                        float _3003 = 1.0 - _585;
                        float _3010 = sqrt(1.0 - ((1.0 - (_3003 * _3003)) * (1.0 - (_3002 * _3002))));
                        float _3011 = _3010 * _3010;
                        float _3012 = _3011 * _3011;
                        float _3013 = _2992 + _2957;
                        float _3014 = _2993 + _2958;
                        float _3015 = _2994 + _2959;
                        float _3019 = inversesqrt(dot(vec3(_3013, _3014, _3015), vec3(_3013, _3014, _3015)));
                        float _3023 = dot(vec3(_517, _520, _523), vec3(_2992, _2993, _2994));
                        float _4363 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                        float _3026 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                        float _3027 = dot(vec3(_517, _520, _523), vec3(_3019 * _3013, _3019 * _3014, _3019 * _3015));
                        float _4374 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                        float _3030 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                        float _3034 = ((_3030 * _3030) * (_3012 + (-1.0))) + 1.0;
                        float _3035 = _2970 * _3011;
                        float _3036 = _3035 * _3035;
                        float _3039 = ((1.0 - _3036) * _2960) + _3036;
                        float _4385 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                        float _3040 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                        float _3041 = 1.0 - _3011;
                        float _3051 = (0.5 / (((_3040 * ((_3026 * _3041) + _3011)) + 9.9999999392252902907785028219223e-09) + (((_3040 * _3041) + _3011) * _3026))) * _3040;
                        float _4396 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                        float _3062 = (((_3012 * 3.1415927410125732421875) * (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0)))) / ((_3034 * _3034) * ((_2977 * 2.1991131305694580078125) + 3.141590118408203125))) * _2966;
                        _2814 = (_2981 * _2929.x) + _2887;
                        _2815 = (_2981 * _2929.y) + _2888;
                        _2816 = (_2981 * _2929.z) + _2889;
                        _2811 = (_3062 * _2946.x) + _2884;
                        _2812 = (_3062 * _2946.y) + _2885;
                        _2813 = (_3062 * _2946.z) + _2886;
                        if (_2891 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2884 = _2811;
                            _2885 = _2812;
                            _2886 = _2813;
                            _2887 = _2814;
                            _2888 = _2815;
                            _2889 = _2816;
                            _2890 = _2891;
                        }
                    }
                    frontier_phi_66_pred = _2811;
                    frontier_phi_66_pred_1 = _2816;
                    frontier_phi_66_pred_2 = _2815;
                    frontier_phi_66_pred_3 = _2814;
                    frontier_phi_66_pred_4 = _2813;
                    frontier_phi_66_pred_5 = _2812;
                }
                _2556 = frontier_phi_66_pred;
                _2566 = frontier_phi_66_pred_1;
                _2564 = frontier_phi_66_pred_2;
                _2562 = frontier_phi_66_pred_3;
                _2560 = frontier_phi_66_pred_4;
                _2558 = frontier_phi_66_pred_5;
                uint _2746 = _2745 + 1u;
                if (_2746 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2739 = _2556;
                    _2740 = _2558;
                    _2741 = _2560;
                    _2742 = _2562;
                    _2743 = _2564;
                    _2744 = _2566;
                    _2745 = _2746;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2555 = _2556;
            _2557 = _2558;
            _2559 = _2560;
            _2561 = _2562;
            _2563 = _2564;
            _2565 = _2566;
        }
        uvec4 _2569 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2570 = _2569.z;
        uint _2572 = (_2570 >> 8u) & 15u;
        float _2707;
        float _2709;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        if (((4294967295u << _2572) & _2378) == 0u)
        {
            _2707 = _2555;
            _2709 = _2557;
            _2711 = _2559;
            _2713 = _2561;
            _2715 = _2563;
            _2717 = _2565;
        }
        else
        {
            float _2732 = inversesqrt(dot(vec3(_2332, _2333, _2334), vec3(_2332, _2333, _2334)));
            float _2733 = _2732 * _2332;
            float _2734 = _2732 * _2333;
            float _2735 = _2732 * _2334;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2572 < ((_2570 >> 12u) & 15u))
            {
                float _2708;
                float _2710;
                float _2712;
                float _2714;
                float _2716;
                float _2718;
                float _2867 = _2555;
                float _2868 = _2557;
                float _2869 = _2559;
                float _2870 = _2561;
                float _2871 = _2563;
                float _2872 = _2565;
                uint _2873 = _2572;
                uint _2882;
                bool _2883;
                for (;;)
                {
                    _2882 = texelFetch(g_lightClassification, int((((_2372 << 5u) + (_2358 << 9u)) + (_2873 << 2u)) >> 2u)).x;
                    _2883 = _2882 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2883)
                    {
                        frontier_phi_77_pred = _2872;
                        frontier_phi_77_pred_1 = _2871;
                        frontier_phi_77_pred_2 = _2870;
                        frontier_phi_77_pred_3 = _2869;
                        frontier_phi_77_pred_4 = _2868;
                        frontier_phi_77_pred_5 = _2867;
                    }
                    else
                    {
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3079;
                        float _3080;
                        float _3081;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3089 = _2867;
                        float _3090 = _2868;
                        float _3091 = _2869;
                        float _3092 = _2870;
                        float _3093 = _2871;
                        float _3094 = _2872;
                        uint _3095 = _2882;
                        uint _3096;
                        vec4 _3121;
                        float _3122;
                        vec4 _3137;
                        vec3 _3149;
                        vec4 _3165;
                        vec4 _3181;
                        float _3228;
                        bool _3229;
                        for (;;)
                        {
                            uint _3106 = ((_2873 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3095));
                            _3096 = (_3095 + 4294967295u) & _3095;
                            uint _3108 = _3106 * 40u;
                            _3121 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3108)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 3u)).x));
                            _3122 = _3121.w;
                            uint _3124 = (_3106 * 40u) + 4u;
                            _3137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 3u)).x));
                            uint _3139 = (_3106 * 40u) + 8u;
                            _3149 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x));
                            uint _3152 = (_3106 * 40u) + 16u;
                            _3165 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3152)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 3u)).x));
                            uint _3168 = (_3106 * 40u) + 20u;
                            _3181 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 3u)).x));
                            uint _3184 = (_3106 * 40u) + 24u;
                            vec4 _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            uint _3203 = (_3106 * 40u) + 28u;
                            vec4 _3216 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 3u)).x));
                            _3228 = fma(_2334, _3216.z, fma(_2333, _3216.y, _3216.x * _2332)) + _3216.w;
                            _3229 = !((fma(_2334, _3197.z, fma(_2333, _3197.y, _3197.x * _2332)) + _3197.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3229)
                            {
                                float _3256 = _3121.x - _2332;
                                float _3257 = _3121.y - _2333;
                                float _3258 = _3121.z - _2334;
                                float _3259 = dot(vec3(_3256, _3257, _3258), vec3(_3256, _3257, _3258));
                                float _3262 = inversesqrt(_3259);
                                float _3263 = _3262 * _3256;
                                float _3264 = _3262 * _3257;
                                float _3265 = _3262 * _3258;
                                float _3269 = 1.0 - (_3259 / (_3122 * _3122));
                                float _4407 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                                float _3270 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                                float _3274 = sqrt(_3259) * _3137.w;
                                float _3276 = 1.39999997615814208984375 / (_3274 + 1.39999997615814208984375);
                                float _3277 = _3276 * _3276;
                                float _3280 = ((1.0 - _3277) * dot(vec3(_3263, _3264, _3265), vec3(_517, _520, _523))) + _3277;
                                float _3283 = _3274 * _3274;
                                float _3287 = (fma(_2334, _3165.z, fma(_2333, _3165.y, _3165.x * _2332)) + _3165.w) / _3228;
                                float _3288 = (fma(_2334, _3181.z, fma(_2333, _3181.y, _3181.x * _2332)) + _3181.w) / _3228;
                                float _3292 = 1.0 - dot(vec2(_3287, _3288), vec2(_3287, _3288));
                                float _4423 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                                float _3293 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                                float _3294 = _3293 * (((isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0))) * _3270) / ((_3283 * 0.699999988079071044921875) + 1.0));
                                float _3306 = exp2(log2(1.0 / ((_3283 * 3.5) + 5.0)) * 0.25);
                                float _3307 = 1.0 - _585;
                                float _3314 = sqrt(1.0 - ((1.0 - (_3307 * _3307)) * (1.0 - (_3306 * _3306))));
                                float _3315 = _3314 * _3314;
                                float _3316 = _3315 * _3315;
                                float _3317 = _3263 - _2733;
                                float _3318 = _3264 - _2734;
                                float _3319 = _3265 - _2735;
                                float _3323 = inversesqrt(dot(vec3(_3317, _3318, _3319), vec3(_3317, _3318, _3319)));
                                float _3327 = dot(vec3(_517, _520, _523), vec3((-0.0) - _2733, (-0.0) - _2734, (-0.0) - _2735));
                                float _4434 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3330 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                                float _3331 = dot(vec3(_517, _520, _523), vec3(_3323 * _3317, _3323 * _3318, _3323 * _3319));
                                float _4445 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3334 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                                float _3338 = ((_3334 * _3334) * (_3316 + (-1.0))) + 1.0;
                                float _3339 = _3276 * _3315;
                                float _3340 = _3339 * _3339;
                                float _3346 = ((1.0 - _3340) * dot(vec3(_517, _520, _523), vec3(_3263, _3264, _3265))) + _3340;
                                float _4456 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                                float _3347 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                                float _3348 = 1.0 - _3315;
                                float _3358 = (0.5 / (((_3347 * ((_3330 * _3348) + _3315)) + 9.9999999392252902907785028219223e-09) + (((_3347 * _3348) + _3315) * _3330))) * _3347;
                                float _4467 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                                float _3368 = (_3293 * _3270) * (((_3316 * 3.1415927410125732421875) * (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0)))) / ((_3338 * _3338) * ((_3283 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3294 * _3137.y;
                                frontier_phi_83_pred_1 = _3294 * _3137.x;
                                frontier_phi_83_pred_2 = _3368 * _3149.z;
                                frontier_phi_83_pred_3 = _3368 * _3149.y;
                                frontier_phi_83_pred_4 = _3368 * _3149.x;
                                frontier_phi_83_pred_5 = _3294 * _3137.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3376 = frontier_phi_83_pred;
                            _3375 = frontier_phi_83_pred_1;
                            _3374 = frontier_phi_83_pred_2;
                            _3373 = frontier_phi_83_pred_3;
                            _3372 = frontier_phi_83_pred_4;
                            _3377 = frontier_phi_83_pred_5;
                            _3079 = _3375 + _3092;
                            _3080 = _3376 + _3093;
                            _3081 = _3377 + _3094;
                            _3076 = _3372 + _3089;
                            _3077 = _3373 + _3090;
                            _3078 = _3374 + _3091;
                            if (_3096 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3089 = _3076;
                                _3090 = _3077;
                                _3091 = _3078;
                                _3092 = _3079;
                                _3093 = _3080;
                                _3094 = _3081;
                                _3095 = _3096;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3081;
                        frontier_phi_77_pred_1 = _3080;
                        frontier_phi_77_pred_2 = _3079;
                        frontier_phi_77_pred_3 = _3078;
                        frontier_phi_77_pred_4 = _3077;
                        frontier_phi_77_pred_5 = _3076;
                    }
                    _2718 = frontier_phi_77_pred;
                    _2716 = frontier_phi_77_pred_1;
                    _2714 = frontier_phi_77_pred_2;
                    _2712 = frontier_phi_77_pred_3;
                    _2710 = frontier_phi_77_pred_4;
                    _2708 = frontier_phi_77_pred_5;
                    uint _2874 = _2873 + 1u;
                    if (_2874 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2867 = _2708;
                        _2868 = _2710;
                        _2869 = _2712;
                        _2870 = _2714;
                        _2871 = _2716;
                        _2872 = _2718;
                        _2873 = _2874;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2712;
                frontier_phi_58_59_ladder_1 = _2718;
                frontier_phi_58_59_ladder_2 = _2716;
                frontier_phi_58_59_ladder_3 = _2714;
                frontier_phi_58_59_ladder_4 = _2710;
                frontier_phi_58_59_ladder_5 = _2708;
            }
            else
            {
                frontier_phi_58_59_ladder = _2559;
                frontier_phi_58_59_ladder_1 = _2565;
                frontier_phi_58_59_ladder_2 = _2563;
                frontier_phi_58_59_ladder_3 = _2561;
                frontier_phi_58_59_ladder_4 = _2557;
                frontier_phi_58_59_ladder_5 = _2555;
            }
            _2707 = frontier_phi_58_59_ladder_5;
            _2709 = frontier_phi_58_59_ladder_4;
            _2711 = frontier_phi_58_59_ladder;
            _2713 = frontier_phi_58_59_ladder_3;
            _2715 = frontier_phi_58_59_ladder_2;
            _2717 = frontier_phi_58_59_ladder_1;
        }
        float _2722 = isnan(1.0) ? _561 : (isnan(_561) ? 1.0 : min(_561, 1.0));
        _2391 = (_2722 * _2713) + _1843;
        _2393 = (_2722 * _2715) + _1845;
        _2395 = (_2722 * _2717) + _1847;
        _2397 = ((_2707 * 0.039999999105930328369140625) * _2722) + _2176;
        _2399 = ((_2709 * 0.039999999105930328369140625) * _2722) + _2178;
        _2401 = ((_2711 * 0.039999999105930328369140625) * _2722) + _2180;
    }
    else
    {
        _2391 = _1843;
        _2393 = _1845;
        _2395 = _1847;
        _2397 = _2176;
        _2399 = _2178;
        _2401 = _2180;
    }
    float _2421 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2422 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2423 = cbSceneParam._m0[86u].x * ((_496 / cbSceneParam._m0[86u].x) + ((_584 * cbMtdParam._m0[13u].y) * dot(vec3(_425, _426, _427), vec3(_195, _196, _197))));
    float _2424 = isnan(_2421) ? _2423 : (isnan(_2423) ? _2421 : min(_2423, _2421));
    float _2425 = isnan(_2422) ? _497 : (isnan(_497) ? _2422 : min(_497, _2422));
    vec4 _2427 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2424, _2425), 0.0);
    float _2429 = _2427.x;
    bool _2450 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2429)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2429))) > _477;
    vec4 _2454 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2450 ? _2424 : _496, _2450 ? _2425 : _497));
    float _4493 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _4504 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _4515 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _2478 = 0.959999978542327880859375 - (exp2(log2(1.0 - _576) * 5.0) * 0.959999978542327880859375);
    float _2480 = (_2454.x * _2478) * cbSceneParam._m0[72u].w;
    float _2482 = (_2454.y * _2478) * cbSceneParam._m0[72u].w;
    float _2484 = (_2454.z * _2478) * cbSceneParam._m0[72u].w;
    float _2492 = (_2480 + (((((_1616 * _1664.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))) * _1407) * _1680)) + _2397) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (_2391 + ((isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0))) * _561))) - _2480) * _456);
    float _2494 = (_2482 + (((((_1616 * _1664.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))) * _1407) * _1680)) + _2399) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_2393 + ((isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0))) * _561))) - _2482) * _456);
    float _2496 = (_2484 + (((((_1616 * _1664.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _1407) * _1680)) + _2401) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (_2395 + ((isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0))) * _561))) - _2484) * _456);
    uint _2497 = _536 + 6u;
    float _2505 = _496 / cbSceneParam._m0[86u].x;
    float _2506 = _497 / cbSceneParam._m0[86u].y;
    vec4 _2520 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2505, _2506, (log2((isnan(cbSceneParam._m0[77u].w) ? _477 : (isnan(_477) ? cbSceneParam._m0[77u].w : min(_477, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2522 = _2520.x;
    float _2523 = _2520.y;
    float _2524 = _2520.z;
    float _2525 = _2520.w;
    float _2617;
    float _2619;
    float _2621;
    float _2623;
    if (_477 > cbSceneParam._m0[78u].w)
    {
        float _2580 = isnan(_477) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _477 : min(cbSceneParam._m0[80u].w, _477));
        float _2581 = _2580 / _477;
        float _2592 = _2581 * _266;
        float _2593 = _267 * _2581;
        float _2594 = (-0.0) - _2593;
        float _2595 = _2581 * _268;
        float _2597 = (cbSceneParam._m0[77u].w * _2594) / _2580;
        float _2598 = _2597 + cbSceneParam._m0[79u].w;
        float _2599 = cbSceneParam._m0[79u].w - _2593;
        float _2605 = sqrt(((_2592 * _2592) + (_2593 * _2593)) + (_2595 * _2595));
        float _2608 = (1.0 - (cbSceneParam._m0[77u].w / _2580)) * _2605;
        float _2613 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2615 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2824;
        if (abs((_2594 - _2597) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2824 = ((((_2598 > 0.0) ? exp2(_2613 * _2598) : (2.0 - exp2(_2615 * _2598))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2608;
        }
        else
        {
            float _2768 = 1.0 / cbSceneParam._m0[80u].x;
            float _2769 = isnan(_2599) ? _2598 : (isnan(_2598) ? _2599 : max(_2598, _2599));
            float _2770 = isnan(_2599) ? _2598 : (isnan(_2598) ? _2599 : min(_2598, _2599));
            float _2779 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : min(_2769, 0.0));
            float _2780 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : min(_2770, 0.0));
            _2824 = ((abs(_2605 / _2594) * cbSceneParam._m0[80u].y) * ((((_2779 - _2780) * 2.0) - ((exp2(_2613 * (isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0)))) - exp2(_2613 * (isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0))))) * _2768)) - ((exp2(_2615 * _2779) - exp2(_2615 * _2780)) * _2768))) + (_2608 * cbSceneParam._m0[80u].z);
        }
        vec4 _2826 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2505, _2506, 1.0), 0.0);
        float _2835 = exp2((_2824 * (-1.44269502162933349609375)) * (1.0 - _2826.w));
        float _2836 = log2(_2835);
        float _2852 = log2(_2525);
        _2617 = (exp2(_2852 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2836 * cbSceneParam._m0[78u].x)) * _2826.x) / cbSceneParam._m0[78u].x)) + _2522;
        _2619 = (exp2(_2852 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2836 * cbSceneParam._m0[78u].y)) * _2826.y) / cbSceneParam._m0[78u].y)) + _2523;
        _2621 = (exp2(_2852 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2836 * cbSceneParam._m0[78u].z)) * _2826.z) / cbSceneParam._m0[78u].z)) + _2524;
        _2623 = _2835 * _2525;
    }
    else
    {
        _2617 = _2522;
        _2619 = _2523;
        _2621 = _2524;
        _2623 = _2525;
    }
    bool _2862;
    float _2678;
    vec4 _2681;
    float _2683;
    vec4 _2685;
    float _2693;
    float _2694;
    float _2695;
    float _2696;
    bool _2706;
    for (;;)
    {
        bool _2635 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2636 = log2(_2623);
        float _2643 = exp2(_2636 * cbSceneParam._m0[78u].x) * _2492;
        float _2644 = exp2(_2636 * cbSceneParam._m0[78u].y) * _2494;
        float _2645 = exp2(_2636 * cbSceneParam._m0[78u].z) * _2496;
        vec4 _2653 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_496, _497));
        float _2655 = _2653.x;
        float _2676 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2655)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2655))) - _477) * 3.0;
        float _4566 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        _2678 = (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * cbInstanceData._m0[_2497].w;
        float _2679 = _484 + (-0.5);
        _2681 = cbMtdParam._m0[1u];
        _2683 = _2681.y * _2679;
        _2685 = cbMatDynParam._m0[0u];
        float _2692 = (roundEven(_2685.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2693 = _2692 * (_2635 ? _2643 : (_2643 + (cbSceneParam._m0[72u].w * _2617)));
        _2694 = _2692 * (_2635 ? _2644 : (_2644 + (cbSceneParam._m0[72u].w * _2619)));
        _2695 = _2692 * (_2635 ? _2645 : (_2645 + (cbSceneParam._m0[72u].w * _2621)));
        _2696 = _2679 * 0.999000012874603271484375;
        _2706 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2706)
        {
            if ((cbInstanceData._m0[_536 + 7u].x + _2696) < 0.5)
            {
                _2862 = true;
                break;
            }
        }
        uint _2803 = _537 + uint(_2685.w);
        if ((cbInstanceData._m0[_2803].w < 1.0) && ((cbInstanceData._m0[_2803].w + _2696) < 0.5))
        {
            _2862 = true;
            break;
        }
        if ((_2683 + 1.0) < _2681.x)
        {
            _2862 = true;
            break;
        }
        _2862 = false;
        break;
    }
    float _3067;
    if (_2862)
    {
        discard_state = true;
        _3067 = 0.0;
    }
    else
    {
        _3067 = _2678;
    }
    SV_Target.x = _2693;
    SV_Target.y = _2694;
    SV_Target.z = _2695;
    SV_Target.w = _3067;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2678;
    discard_exit();
}


