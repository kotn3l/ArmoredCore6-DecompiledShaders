#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Ice_test_01_snp_0_Texture2D_10;
layout(set = 0, binding = 1) uniform texture2D M_Ice_test_01_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _924;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _191 = _190 * _182;
    float _192 = _190 * _183;
    float _193 = _190 * _184;
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = _197 * NORMAL.x;
    float _199 = _197 * NORMAL.y;
    float _200 = _197 * NORMAL.z;
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _244 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _248 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _252 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _262 = cbSceneParam._m0[71u].x - (_240 / _252);
    float _263 = cbSceneParam._m0[71u].y - (_244 / _252);
    float _264 = cbSceneParam._m0[71u].z - (_248 / _252);
    float _287 = inversesqrt(dot(vec3(_262, _263, _264), vec3(_262, _263, _264)));
    float _288 = _287 * _262;
    float _289 = _287 * _263;
    float _290 = _287 * _264;
    float _294 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _298 = dot(vec4(_288, _289, _290, 0.0), vec4(_294 * _198, _294 * _199, _294 * _200, 0.0));
    float _3420 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _306 = exp2(log2(1.0 - (isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0)))) * cbMtdParam._m0[12u].y);
    float _3431 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _307 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
    float _314 = (_307 * (cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].x)) + cbMtdParam._m0[10u].x;
    float _315 = (_307 * (cbMtdParam._m0[11u].y - cbMtdParam._m0[10u].y)) + cbMtdParam._m0[10u].y;
    float _316 = (_307 * (cbMtdParam._m0[11u].z - cbMtdParam._m0[10u].z)) + cbMtdParam._m0[10u].z;
    vec4 _336 = texture(sampler2D(M_Ice_test_01_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _344 = (_336.x * 2.0) + (-1.0);
    float _346 = (_336.y * 2.0) + (-1.0);
    float _347 = dot(vec2(_344, _346), vec2(_344, _346));
    float _3442 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _352 = sqrt(1.0 - (isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0))));
    float _353 = abs(_198);
    float _354 = abs(_199);
    float _355 = abs(_200);
    float _356 = _353 * _353;
    float _357 = _354 * _354;
    float _358 = _355 * _355;
    float _361 = _244 * 0.0500000007450580596923828125;
    float _371 = (cbTextureTilingScale._m0[1u].x * (_240 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[1u].z;
    vec4 _374 = texture(sampler2D(M_Ice_test_01_snp_0_Texture2D_9, SS_BumpMap), vec2(_371, (cbTextureTilingScale._m0[1u].y * _361) + cbTextureTilingScale._m0[1u].w));
    float _381 = (cbTextureTilingScale._m0[1u].y * (_248 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[1u].w;
    vec4 _382 = texture(sampler2D(M_Ice_test_01_snp_0_Texture2D_9, SS_BumpMap), vec2(_371, _381));
    vec4 _392 = texture(sampler2D(M_Ice_test_01_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _361) + cbTextureTilingScale._m0[1u].z, _381));
    float _406 = ((((((_382.x * _357) + (_374.x * _358)) + (_392.x * _356)) * 2.0) + (-1.0)) * cbMtdParam._m0[12u].w) + _344;
    float _407 = ((((((_382.y * _357) + (_374.y * _358)) + (_392.y * _356)) * 2.0) + (-1.0)) * cbMtdParam._m0[12u].w) + _346;
    float _410 = fma(_352, _198, fma(_407, _204 * TANGENT.x, _406 * _191));
    float _413 = fma(_352, _199, fma(_407, _204 * TANGENT.y, _406 * _192));
    float _416 = fma(_352, _200, fma(_407, _204 * TANGENT.z, _406 * _193));
    float _420 = inversesqrt(dot(vec3(_410, _413, _416), vec3(_410, _413, _416)));
    float _421 = _420 * _410;
    float _422 = _420 * _413;
    float _423 = _420 * _416;
    float _431 = cbMtdParam._m0[13u].x + dot(vec4(_421, _422, _423, 0.0), vec4(cbMtdParam._m0[14u].xyz, 0.0));
    float _3453 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _433 = (isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0))) * TEXCOORD_3.x;
    float _3464 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
    float _441 = (_434 * (cbMtdParam._m0[9u].x - _314)) + _314;
    float _442 = (_434 * (cbMtdParam._m0[9u].y - _315)) + _315;
    float _443 = (_434 * (cbMtdParam._m0[9u].z - _316)) + _316;
    float _448 = ((cbMtdParam._m0[13u].w - cbMtdParam._m0[12u].x) * _434) + cbMtdParam._m0[12u].x;
    float _451 = cbMtdParam._m0[13u].z + _434;
    float _3475 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _452 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
    float _3486 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _454 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
    float _3497 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _3508 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _3519 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _473 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _479 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _480 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _501 = fma(_423, cbSceneParam._m0[5u].z, fma(_422, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _421));
    float _504 = fma(_423, cbSceneParam._m0[6u].z, fma(_422, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _421));
    float _507 = fma(_423, cbSceneParam._m0[7u].z, fma(_422, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _421));
    uint _520 = uint(roundEven(NORMAL.w)) * 13u;
    uint _522 = (_520 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _528 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0)))) * cbInstanceData._m0[_522].x;
    float _529 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0)))) * cbInstanceData._m0[_522].y;
    float _530 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0)))) * cbInstanceData._m0[_522].z;
    float _3530 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _531 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
    float _3541 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _532 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
    float _3552 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _533 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
    vec4 _542 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _479, cbSceneParam._m0[86u].y * _480));
    float _545 = _542.x * TEXCOORD_3.w;
    float _546 = dot(vec3(_421, _422, _423), vec3(_288, _289, _290));
    float _549 = _546 * 2.0;
    float _553 = (_549 * _421) - _288;
    float _554 = (_549 * _422) - _289;
    float _555 = (_549 * _423) - _290;
    float _559 = abs(dot(vec3(_288, _289, _290), vec3(_421, _422, _423)));
    float _3563 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _560 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
    float _568 = 10.0 / (_473 + 10.0);
    float _569 = sqrt(_454);
    float _581 = exp2((_569 * 5.0) * log2(1.0 - (_560 * 0.999000012874603271484375))) / (4.0 - (_569 * 3.0));
    float _613 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _617 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _621 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _923;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _648 = fma(_621, cbModelParam._m0[26u].z, fma(_617, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _613));
        float _652 = fma(_621, cbModelParam._m0[27u].z, fma(_617, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _613));
        float _656 = fma(_621, cbModelParam._m0[28u].z, fma(_617, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _613));
        float _681 = _613 + _421;
        float _682 = _617 + _422;
        float _683 = _621 + _423;
        float _693 = fma(_683, cbModelParam._m0[26u].z, fma(_682, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _681)) - _648;
        float _694 = fma(_683, cbModelParam._m0[27u].z, fma(_682, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _681)) - _652;
        float _695 = fma(_683, cbModelParam._m0[28u].z, fma(_682, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _681)) - _656;
        float _699 = inversesqrt(dot(vec3(_693, _694, _695), vec3(_693, _694, _695)));
        float _712 = ((_699 * _693) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_648 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _713 = ((_699 * _694) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_652 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _714 = ((_699 * _695) / cbModelParam._m0[34u].z) + ((((((_656 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _717 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_712, _713, _714), 0.0);
        vec4 _724 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_712, _713, _714), 0.0);
        vec4 _731 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_712, _713, _714), 0.0);
        vec4 _738 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_712, _713, _714), 0.0);
        float _751 = exp2((_717.w + (-0.5)) * 20.0) * 2.0;
        float _752 = _751 * (_717.x + (-0.5));
        float _753 = _751 * (_717.y + (-0.5));
        float _754 = _751 * (_717.z + (-0.5));
        float _761 = exp2((_724.w + (-0.5)) * 20.0) * 2.0;
        float _762 = _761 * (_724.x + (-0.5));
        float _763 = _761 * (_724.y + (-0.5));
        float _764 = _761 * (_724.z + (-0.5));
        float _771 = exp2((_731.w + (-0.5)) * 20.0) * 2.0;
        float _772 = _771 * (_731.x + (-0.5));
        float _773 = _771 * (_731.y + (-0.5));
        float _774 = _771 * (_731.z + (-0.5));
        float _781 = exp2((_738.w + (-0.5)) * 20.0) * 2.0;
        float _782 = _781 * (_738.x + (-0.5));
        float _783 = _781 * (_738.y + (-0.5));
        float _784 = _781 * (_738.z + (-0.5));
        float _785 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _786 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _787 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _788 = _752 * 0.5;
        float _789 = _762 * 0.5;
        float _790 = _772 * 0.5;
        float _791 = dot(vec3(_788, _789, _790), vec3(_788, _789, _790));
        float _796 = (_791 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_791);
        float _805 = (dot(vec3(_421, _422, _423), vec3(_796 * _788, _796 * _789, _796 * _790)) + 1.0) * 0.5;
        float _3589 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _815 = sqrt(((_789 * _789) + (_788 * _788)) + (_790 * _790)) / (_785 + 9.9999997473787516355514526367188e-06);
        float _3600 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _816 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _817 = _816 * 2.0;
        float _821 = (1.0 - _816) / (_816 + 1.0);
        float _3611 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _822 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _831 = ((((1.0 - _822) * (_817 + 2.0)) * exp2(log2(isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * (_817 + 1.0))) + _822) * _785;
        float _832 = _753 * 0.5;
        float _833 = _763 * 0.5;
        float _834 = _773 * 0.5;
        float _835 = dot(vec3(_832, _833, _834), vec3(_832, _833, _834));
        float _840 = (_835 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_835);
        float _848 = (dot(vec3(_421, _422, _423), vec3(_840 * _832, _840 * _833, _840 * _834)) + 1.0) * 0.5;
        float _3622 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _857 = sqrt(((_833 * _833) + (_832 * _832)) + (_834 * _834)) / (_786 + 9.9999997473787516355514526367188e-06);
        float _3633 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _858 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _859 = _858 * 2.0;
        float _863 = (1.0 - _858) / (_858 + 1.0);
        float _3644 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _864 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _873 = ((((1.0 - _864) * (_859 + 2.0)) * exp2(log2(isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * (_859 + 1.0))) + _864) * _786;
        float _874 = _754 * 0.5;
        float _875 = _764 * 0.5;
        float _876 = _774 * 0.5;
        float _877 = dot(vec3(_874, _875, _876), vec3(_874, _875, _876));
        float _882 = (_877 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_877);
        float _890 = (dot(vec3(_421, _422, _423), vec3(_882 * _874, _882 * _875, _882 * _876)) + 1.0) * 0.5;
        float _3655 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _899 = sqrt(((_875 * _875) + (_874 * _874)) + (_876 * _876)) / (_787 + 9.9999997473787516355514526367188e-06);
        float _3666 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _900 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _901 = _900 * 2.0;
        float _905 = (1.0 - _900) / (_900 + 1.0);
        float _3677 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _915 = ((((1.0 - _906) * (_901 + 2.0)) * exp2(log2(isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * (_901 + 1.0))) + _906) * _787;
        _923 = _754;
        _925 = _753;
        _926 = _752;
        _927 = _764;
        _928 = _763;
        _929 = _762;
        _930 = _774;
        _931 = _773;
        _932 = _772;
        _933 = _787;
        _934 = _786;
        _935 = _785;
        _936 = cbModelParam._m0[36u].z * (isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0)));
        _937 = cbModelParam._m0[36u].z * (isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0)));
        _938 = cbModelParam._m0[36u].z * (isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0)));
    }
    else
    {
        _923 = _924;
        _925 = _924;
        _926 = _924;
        _927 = _924;
        _928 = _924;
        _929 = _924;
        _930 = _924;
        _931 = _924;
        _932 = _924;
        _933 = _924;
        _934 = _924;
        _935 = _924;
        _936 = 0.0;
        _937 = 0.0;
        _938 = 0.0;
    }
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _964 = fma(_621, cbModelParam._m0[30u].z, fma(_617, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _613));
        float _968 = fma(_621, cbModelParam._m0[31u].z, fma(_617, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _613));
        float _972 = fma(_621, cbModelParam._m0[32u].z, fma(_617, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _613));
        float _995 = _613 + _421;
        float _996 = _617 + _422;
        float _997 = _621 + _423;
        float _1007 = fma(_997, cbModelParam._m0[30u].z, fma(_996, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _995)) - _964;
        float _1008 = fma(_997, cbModelParam._m0[31u].z, fma(_996, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _995)) - _968;
        float _1009 = fma(_997, cbModelParam._m0[32u].z, fma(_996, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _995)) - _972;
        float _1013 = inversesqrt(dot(vec3(_1007, _1008, _1009), vec3(_1007, _1008, _1009)));
        float _1026 = ((_1013 * _1007) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_964 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1027 = ((_1013 * _1008) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_968 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1028 = ((_1013 * _1009) / cbModelParam._m0[35u].z) + ((((((_972 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        float _1063 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1030.x + (-0.5));
        float _1065 = _1063 * (_1030.y + (-0.5));
        float _1066 = _1063 * (_1030.z + (-0.5));
        float _1073 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1037.x + (-0.5));
        float _1075 = _1073 * (_1037.y + (-0.5));
        float _1076 = _1073 * (_1037.z + (-0.5));
        float _1083 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1044.x + (-0.5));
        float _1085 = _1083 * (_1044.y + (-0.5));
        float _1086 = _1083 * (_1044.z + (-0.5));
        float _1093 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1051.x + (-0.5));
        float _1095 = _1093 * (_1051.y + (-0.5));
        float _1096 = _1093 * (_1051.z + (-0.5));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1100 = _1064 * 0.5;
        float _1101 = _1074 * 0.5;
        float _1102 = _1084 * 0.5;
        float _1103 = dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102));
        float _1108 = (_1103 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1103);
        float _1116 = (dot(vec3(_421, _422, _423), vec3(_1108 * _1100, _1108 * _1101, _1108 * _1102)) + 1.0) * 0.5;
        float _3718 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1125 = sqrt(((_1101 * _1101) + (_1100 * _1100)) + (_1102 * _1102)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _3729 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _1127 = _1126 * 2.0;
        float _1131 = (1.0 - _1126) / (_1126 + 1.0);
        float _3740 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1141 = ((((1.0 - _1132) * (_1127 + 2.0)) * exp2(log2(isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * (_1127 + 1.0))) + _1132) * _1097;
        float _1142 = _1065 * 0.5;
        float _1143 = _1075 * 0.5;
        float _1144 = _1085 * 0.5;
        float _1145 = dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144));
        float _1150 = (_1145 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1145);
        float _1158 = (dot(vec3(_421, _422, _423), vec3(_1150 * _1142, _1150 * _1143, _1150 * _1144)) + 1.0) * 0.5;
        float _3751 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1167 = sqrt(((_1143 * _1143) + (_1142 * _1142)) + (_1144 * _1144)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _3762 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _3773 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * (_1169 + 1.0))) + _1174) * _1098;
        float _1184 = _1066 * 0.5;
        float _1185 = _1076 * 0.5;
        float _1186 = _1086 * 0.5;
        float _1187 = dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186));
        float _1192 = (_1187 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1187);
        float _1200 = (dot(vec3(_421, _422, _423), vec3(_1192 * _1184, _1192 * _1185, _1192 * _1186)) + 1.0) * 0.5;
        float _3784 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1209 = sqrt(((_1185 * _1185) + (_1184 * _1184)) + (_1186 * _1186)) / (_1099 + 9.9999997473787516355514526367188e-06);
        float _3795 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1211 = _1210 * 2.0;
        float _1215 = (1.0 - _1210) / (_1210 + 1.0);
        float _3806 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1225 = ((((1.0 - _1216) * (_1211 + 2.0)) * exp2(log2(isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (_1211 + 1.0))) + _1216) * _1099;
        _1233 = _1066;
        _1234 = _1065;
        _1235 = _1064;
        _1236 = _1076;
        _1237 = _1075;
        _1238 = _1074;
        _1239 = _1086;
        _1240 = _1085;
        _1241 = _1084;
        _1242 = _1099;
        _1243 = _1098;
        _1244 = _1097;
        _1245 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)));
        _1246 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
        _1247 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)));
    }
    else
    {
        _1233 = _924;
        _1234 = _924;
        _1235 = _924;
        _1236 = _924;
        _1237 = _924;
        _1238 = _924;
        _1239 = _924;
        _1240 = _924;
        _1241 = _924;
        _1242 = _924;
        _1243 = _924;
        _1244 = _924;
        _1245 = 0.0;
        _1246 = 0.0;
        _1247 = 0.0;
    }
    float _1257 = (cbModelParam._m0[1u].x * (_1245 - _936)) + _936;
    float _1258 = (cbModelParam._m0[1u].x * (_1246 - _937)) + _937;
    float _1259 = (cbModelParam._m0[1u].x * (_1247 - _938)) + _938;
    float _1280 = fma(_1259, cbSceneParam._m0[89u].z, fma(_1258, cbSceneParam._m0[89u].y, _1257 * cbSceneParam._m0[89u].x));
    float _1283 = fma(_1259, cbSceneParam._m0[90u].z, fma(_1258, cbSceneParam._m0[90u].y, _1257 * cbSceneParam._m0[90u].x));
    float _1286 = fma(_1259, cbSceneParam._m0[91u].z, fma(_1258, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1257));
    float _1301 = _553 * 0.5;
    float _1302 = _554 * 0.5;
    float _1303 = _555 * 0.5;
    float _1304 = dot(vec4(_1301, _1302, _1303, 1.0), vec4(_1235, _1238, _1241, _1244));
    float _1307 = dot(vec4(_1301, _1302, _1303, 1.0), vec4(_1234, _1237, _1240, _1243));
    float _1310 = dot(vec4(_1301, _1302, _1303, 1.0), vec4(_1233, _1236, _1239, _1242));
    float _1344;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1317 = dot(vec4(_1301, _1302, _1303, 1.0), vec4(_923, _927, _930, _933));
        float _1321 = dot(vec4(_1301, _1302, _1303, 1.0), vec4(_925, _928, _931, _934));
        float _1325 = dot(vec4(_1301, _1302, _1303, 1.0), vec4(_926, _929, _932, _935));
        float _1332 = dot(vec4(cbModelParam._m0[39u]), vec4(_1301, _1302, _1303, 1.0));
        _1344 = dot(vec3(isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)), isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)), isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1332) ? 0.0 : (isnan(0.0) ? _1332 : max(0.0, _1332))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1344 = 1.0;
    }
    float _1355;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1346 = dot(vec4(cbModelParam._m0[40u]), vec4(_1301, _1302, _1303, 1.0));
        _1355 = dot(vec3(isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)), isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)), isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1346) ? 0.0 : (isnan(0.0) ? _1346 : max(0.0, _1346))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1355 = 1.0;
    }
    float _1359 = (_1355 * cbModelParam._m0[1u].x) + (_1344 * (1.0 - cbModelParam._m0[1u].x));
    float _1369 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _454);
    float _1370 = isnan(_1369) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1369 : min(cbModelParam._m0[25u].z, _1369));
    float _1450;
    float _1452;
    float _1454;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1417 = fma(_621, cbModelParam._m0[13u].z, fma(_617, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _613)) + cbModelParam._m0[13u].w;
        float _1421 = fma(_621, cbModelParam._m0[14u].z, fma(_617, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _613)) + cbModelParam._m0[14u].w;
        float _1425 = fma(_621, cbModelParam._m0[15u].z, fma(_617, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _613)) + cbModelParam._m0[15u].w;
        float _1428 = fma(_555, cbModelParam._m0[13u].z, fma(_554, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _553));
        float _1431 = fma(_555, cbModelParam._m0[14u].z, fma(_554, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _553));
        float _1434 = fma(_555, cbModelParam._m0[15u].z, fma(_554, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _553));
        float _1462;
        if (_1428 > 0.0)
        {
            _1462 = abs((1.0 - _1417) / _1428);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1428 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1417 + 1.0) / _1428);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1462 = frontier_phi_14_12_ladder;
        }
        float _1740;
        if (_1431 > 0.0)
        {
            _1740 = abs((1.0 - _1421) / _1431);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1431 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1421 + 1.0) / _1431);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1740 = frontier_phi_23_19_ladder;
        }
        float _1986;
        if (_1434 > 0.0)
        {
            _1986 = abs((1.0 - _1425) / _1434);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1434 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1425 + 1.0) / _1434);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1986 = frontier_phi_35_30_ladder;
        }
        float _1988 = isnan(_1740) ? _1462 : (isnan(_1462) ? _1740 : min(_1462, _1740));
        float _1989 = isnan(_1986) ? _1988 : (isnan(_1988) ? _1986 : min(_1988, _1986));
        float _1993 = (_1989 * _1428) + _1417;
        float _1994 = (_1989 * _1431) + _1421;
        float _1995 = (_1989 * _1434) + _1425;
        float _1996 = _1989 * 9.9999997473787516355514526367188e-05;
        float _1998 = (-1.0) - _1996;
        float _2000 = _1996 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1995 > _2000) || ((_1995 < _1998) || ((_1994 > _2000) || ((_1994 < _1998) || ((_1993 < _1998) || (_1993 > _2000))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2119 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1995, cbModelParam._m0[9u].z, fma(_1994, cbModelParam._m0[9u].y, _1993 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1995, cbModelParam._m0[10u].z, fma(_1994, cbModelParam._m0[10u].y, _1993 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1995, cbModelParam._m0[11u].z, fma(_1994, cbModelParam._m0[11u].y, _1993 * cbModelParam._m0[11u].x))), _1370);
            frontier_phi_13_35_ladder = _2119.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2119.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2119.x * cbModelParam._m0[1u].y;
        }
        _1450 = frontier_phi_13_35_ladder_2;
        _1452 = frontier_phi_13_35_ladder_1;
        _1454 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1438 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_553, _554, _555), _1370);
        _1450 = _1438.x * cbModelParam._m0[1u].y;
        _1452 = _1438.y * cbModelParam._m0[1u].y;
        _1454 = _1438.z * cbModelParam._m0[1u].y;
    }
    float _1458 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _454);
    float _1459 = isnan(_1458) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1458 : min(cbModelParam._m0[25u].w, _1458));
    float _1552;
    float _1554;
    float _1556;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1516 = fma(_621, cbModelParam._m0[21u].z, fma(_617, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _613)) + cbModelParam._m0[21u].w;
        float _1520 = fma(_621, cbModelParam._m0[22u].z, fma(_617, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _613)) + cbModelParam._m0[22u].w;
        float _1524 = fma(_621, cbModelParam._m0[23u].z, fma(_617, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _613)) + cbModelParam._m0[23u].w;
        float _1527 = fma(_555, cbModelParam._m0[21u].z, fma(_554, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _553));
        float _1530 = fma(_555, cbModelParam._m0[22u].z, fma(_554, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _553));
        float _1533 = fma(_555, cbModelParam._m0[23u].z, fma(_554, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _553));
        float _1745;
        if (_1527 > 0.0)
        {
            _1745 = abs((1.0 - _1516) / _1527);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1527 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1516 + 1.0) / _1527);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1745 = frontier_phi_25_21_ladder;
        }
        float _2013;
        if (_1530 > 0.0)
        {
            _2013 = abs((1.0 - _1520) / _1530);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1530 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1520 + 1.0) / _1530);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2013 = frontier_phi_37_32_ladder;
        }
        float _2218;
        if (_1533 > 0.0)
        {
            _2218 = abs((1.0 - _1524) / _1533);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1533 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1524 + 1.0) / _1533);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2218 = frontier_phi_46_43_ladder;
        }
        float _2220 = isnan(_2013) ? _1745 : (isnan(_1745) ? _2013 : min(_1745, _2013));
        float _2221 = isnan(_2218) ? _2220 : (isnan(_2220) ? _2218 : min(_2220, _2218));
        float _2225 = (_2221 * _1527) + _1516;
        float _2226 = (_2221 * _1530) + _1520;
        float _2227 = (_2221 * _1533) + _1524;
        float _2228 = _2221 * 9.9999997473787516355514526367188e-05;
        float _2229 = (-1.0) - _2228;
        float _2231 = _2228 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2227 > _2231) || ((_2227 < _2229) || ((_2226 > _2231) || ((_2226 < _2229) || ((_2225 < _2229) || (_2225 > _2231))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2502 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2227, cbModelParam._m0[17u].z, fma(_2226, cbModelParam._m0[17u].y, _2225 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2227, cbModelParam._m0[18u].z, fma(_2226, cbModelParam._m0[18u].y, _2225 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2227, cbModelParam._m0[19u].z, fma(_2226, cbModelParam._m0[19u].y, _2225 * cbModelParam._m0[19u].x))), _1459);
            frontier_phi_22_46_ladder = _2502.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2502.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2502.x * cbModelParam._m0[1u].z;
        }
        _1552 = frontier_phi_22_46_ladder_2;
        _1554 = frontier_phi_22_46_ladder_1;
        _1556 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1536 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_553, _554, _555), _1459);
        _1552 = _1536.x * cbModelParam._m0[1u].z;
        _1554 = _1536.y * cbModelParam._m0[1u].z;
        _1556 = _1536.z * cbModelParam._m0[1u].z;
    }
    float _1568 = ((((1.0 - _581) * ((_569 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_581 * _569)) * _545;
    float _1569 = _1568 * ((cbModelParam._m0[1u].w * (_1552 - _1450)) + _1450);
    float _1570 = _1568 * ((cbModelParam._m0[1u].w * (_1554 - _1452)) + _1452);
    float _1571 = _1568 * ((cbModelParam._m0[1u].w * (_1556 - _1454)) + _1454);
    float _1574 = fma(_1571, cbSceneParam._m0[89u].z, fma(_1570, cbSceneParam._m0[89u].y, _1569 * cbSceneParam._m0[89u].x));
    float _1577 = fma(_1571, cbSceneParam._m0[90u].z, fma(_1570, cbSceneParam._m0[90u].y, _1569 * cbSceneParam._m0[90u].x));
    float _1580 = fma(_1571, cbSceneParam._m0[91u].z, fma(_1570, cbSceneParam._m0[91u].y, _1569 * cbSceneParam._m0[91u].x));
    float _1591 = _479 / cbSceneParam._m0[86u].x;
    float _1599 = (cbSceneParam._m0[88u].y * (1.0 - _454)) + cbSceneParam._m0[88u].z;
    float _3932 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
    float _1601 = (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * 5.0;
    float _1606 = (_568 * cbMtdParam._m0[12u].z) * dot(vec3(_421, _422, _423), vec3(1.0, 0.0, 0.0));
    vec4 _1616 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1606 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1606 + _1591) * cbSceneParam._m0[86u].x, _480), _1601).w) + _1591) * cbSceneParam._m0[86u].x, _480), _1601);
    float _1632 = 1.0 - _1616.w;
    vec4 _1640 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_479, _480));
    float _1642 = _1640.w;
    float _1654 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1642);
    float _1655 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1642);
    float _1656 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1642);
    uvec4 _1660 = floatBitsToUint(cbInstanceData._m0[_520 + 5u]);
    uint _1662 = _1660.x * 14u;
    uint _1663 = _1662 + 13u;
    float _1670 = _545 + (-1.0);
    float _1675 = (cbLight._m0[_1663].x * _1670) + 1.0;
    float _1676 = (cbLight._m0[_1663].y * _1670) + 1.0;
    float _1677 = (cbLight._m0[_1663].z * _1670) + 1.0;
    float _1678 = (cbLight._m0[_1663].w * _1670) + 1.0;
    uint _1679 = _1662 + 5u;
    float _1685 = isnan(1.0) ? _1676 : (isnan(_1676) ? 1.0 : min(_1676, 1.0));
    uint _1689 = _1662 + 4u;
    float _1699 = isnan(1.0) ? _1675 : (isnan(_1675) ? 1.0 : min(_1675, 1.0));
    uint _1703 = _1662 | 1u;
    float _1714 = dot(vec3(cbLight._m0[_1662].xyz), vec3(_421, _422, _423));
    float _1717 = dot(vec3(cbLight._m0[_1703].xyz), vec3(_421, _422, _423));
    float _3953 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
    float _3964 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
    float _1722 = (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * 0.3183098733425140380859375;
    float _1724 = (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * 0.3183098733425140380859375;
    float _1731 = ((cbLight._m0[_1679].x * _1685) * _1724) + (((cbLight._m0[_1689].x * _1654) * _1699) * _1722);
    float _1732 = ((_1685 * cbLight._m0[_1679].y) * _1724) + (((cbLight._m0[_1689].y * _1655) * _1699) * _1722);
    float _1733 = ((_1685 * cbLight._m0[_1679].z) * _1724) + (((cbLight._m0[_1689].z * _1656) * _1699) * _1722);
    uvec4 _1737 = floatBitsToUint(cbLight._m0[_1662 + 12u]);
    bool _1739 = _1737.x == 0u;
    float _1750;
    float _1752;
    float _1754;
    if (_1739)
    {
        _1750 = _1731;
        _1752 = _1732;
        _1754 = _1733;
    }
    else
    {
        uint _1758 = _1662 + 6u;
        float _1774 = (dot(vec3(cbLight._m0[_1662 + 2u].xyz), vec3(_421, _422, _423)) * 0.5) + 0.5;
        float _1775 = _1774 * _1774;
        float _3975 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1777 = isnan(1.0) ? _1677 : (isnan(_1677) ? 1.0 : min(_1677, 1.0));
        _1750 = (((cbLight._m0[_1758].x * 0.3183098733425140380859375) * _1776) * _1777) + _1731;
        _1752 = (((cbLight._m0[_1758].y * 0.3183098733425140380859375) * _1776) * _1777) + _1732;
        _1754 = (((cbLight._m0[_1758].z * 0.3183098733425140380859375) * _1776) * _1777) + _1733;
    }
    bool _1757 = _1737.y == 0u;
    float _1795;
    float _1797;
    float _1799;
    if (_1757)
    {
        _1795 = _1750;
        _1797 = _1752;
        _1799 = _1754;
    }
    else
    {
        uint _1957 = _1662 + 7u;
        float _1973 = (dot(vec3(cbLight._m0[_1662 + 3u].xyz), vec3(_421, _422, _423)) * 0.5) + 0.5;
        float _1974 = _1973 * _1973;
        float _3991 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        float _1975 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1976 = isnan(1.0) ? _1678 : (isnan(_1678) ? 1.0 : min(_1678, 1.0));
        _1795 = (((cbLight._m0[_1957].x * 0.3183098733425140380859375) * _1975) * _1976) + _1750;
        _1797 = (((cbLight._m0[_1957].y * 0.3183098733425140380859375) * _1975) * _1976) + _1752;
        _1799 = (((cbLight._m0[_1957].z * 0.3183098733425140380859375) * _1975) * _1976) + _1754;
    }
    uint _1802 = _1662 + 8u;
    float _1815 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1662].w)) * _454) * 0.949999988079071044921875);
    float _1816 = _1815 * _1815;
    float _1817 = cbLight._m0[_1662].x + _288;
    float _1818 = cbLight._m0[_1662].y + _289;
    float _1819 = cbLight._m0[_1662].z + _290;
    float _1823 = inversesqrt(dot(vec3(_1817, _1818, _1819), vec3(_1817, _1818, _1819)));
    float _1824 = _1823 * _1817;
    float _1825 = _1823 * _1818;
    float _1826 = _1823 * _1819;
    float _1827 = dot(vec3(_421, _422, _423), vec3(cbLight._m0[_1662].xyz));
    float _4007 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1830 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _4018 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _1831 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _1832 = dot(vec3(_421, _422, _423), vec3(_1824, _1825, _1826));
    float _4029 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1835 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _1836 = dot(vec3(cbLight._m0[_1662].xyz), vec3(_1824, _1825, _1826));
    float _4040 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1840 = _1816 * _1816;
    float _1844 = ((_1835 * _1835) * (_1840 + (-1.0))) + 1.0;
    float _1855 = (exp2(log2(1.0 - (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1856 = 1.0 - _1816;
    float _1867 = (0.5 / (((_1831 * ((_1830 * _1856) + _1816)) + 9.9999999392252902907785028219223e-09) + (((_1831 * _1856) + _1816) * _1830))) * _1830;
    float _4051 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1869 = (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1840 / ((_1844 * _1844) * 3.141590118408203125));
    uint _1883 = _1662 + 9u;
    float _1894 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1703].w)) * _454) * 0.949999988079071044921875);
    float _1895 = _1894 * _1894;
    float _1896 = cbLight._m0[_1703].x + _288;
    float _1897 = cbLight._m0[_1703].y + _289;
    float _1898 = cbLight._m0[_1703].z + _290;
    float _1902 = inversesqrt(dot(vec3(_1896, _1897, _1898), vec3(_1896, _1897, _1898)));
    float _1903 = _1902 * _1896;
    float _1904 = _1902 * _1897;
    float _1905 = _1902 * _1898;
    float _1906 = dot(vec3(_421, _422, _423), vec3(cbLight._m0[_1703].xyz));
    float _4062 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1909 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _1910 = dot(vec3(_421, _422, _423), vec3(_1903, _1904, _1905));
    float _4073 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1913 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _1914 = dot(vec3(cbLight._m0[_1703].xyz), vec3(_1903, _1904, _1905));
    float _4084 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1918 = _1895 * _1895;
    float _1922 = ((_1913 * _1913) * (_1918 + (-1.0))) + 1.0;
    float _1931 = (exp2(log2(1.0 - (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1932 = 1.0 - _1895;
    float _1942 = (0.5 / (((_1831 * ((_1909 * _1932) + _1895)) + 9.9999999392252902907785028219223e-09) + (((_1831 * _1932) + _1895) * _1909))) * _1909;
    float _4095 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1944 = (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_1918 / ((_1922 * _1922) * 3.141590118408203125));
    float _1954 = (((_1931 * cbLight._m0[_1883].x) * _1944) * _1685) + ((((cbLight._m0[_1802].x * _1654) * _1855) * _1869) * _1699);
    float _1955 = (((_1931 * cbLight._m0[_1883].y) * _1944) * _1685) + ((((cbLight._m0[_1802].y * _1655) * _1855) * _1869) * _1699);
    float _1956 = (((_1931 * cbLight._m0[_1883].z) * _1944) * _1685) + ((((cbLight._m0[_1802].z * _1656) * _1855) * _1869) * _1699);
    float _2018;
    float _2020;
    float _2022;
    if (_1739)
    {
        _2018 = _1954;
        _2020 = _1955;
        _2022 = _1956;
    }
    else
    {
        uint _2024 = _1662 + 2u;
        uint _2028 = _1662 + 10u;
        float _2042 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2024].w)) * _454) * 0.949999988079071044921875);
        float _2043 = _2042 * _2042;
        float _2044 = cbLight._m0[_2024].x + _288;
        float _2045 = cbLight._m0[_2024].y + _289;
        float _2046 = cbLight._m0[_2024].z + _290;
        float _2050 = inversesqrt(dot(vec3(_2044, _2045, _2046), vec3(_2044, _2045, _2046)));
        float _2051 = _2050 * _2044;
        float _2052 = _2050 * _2045;
        float _2053 = _2050 * _2046;
        float _2054 = dot(vec3(_421, _422, _423), vec3(cbLight._m0[_2024].xyz));
        float _4106 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2057 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _2058 = dot(vec3(_421, _422, _423), vec3(_2051, _2052, _2053));
        float _4117 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2061 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _2062 = dot(vec3(cbLight._m0[_2024].xyz), vec3(_2051, _2052, _2053));
        float _4128 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2066 = _2043 * _2043;
        float _2070 = ((_2061 * _2061) * (_2066 + (-1.0))) + 1.0;
        float _2079 = (exp2(log2(1.0 - (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2080 = 1.0 - _2043;
        float _2090 = (0.5 / (((_1831 * ((_2057 * _2080) + _2043)) + 9.9999999392252902907785028219223e-09) + (((_1831 * _2080) + _2043) * _2057))) * _2057;
        float _4139 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
        float _2092 = (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_2066 / ((_2070 * _2070) * 3.141590118408203125));
        float _2093 = isnan(1.0) ? _1677 : (isnan(_1677) ? 1.0 : min(_1677, 1.0));
        _2018 = (((_2079 * cbLight._m0[_2028].x) * _2092) * _2093) + _1954;
        _2020 = (((_2079 * cbLight._m0[_2028].y) * _2092) * _2093) + _1955;
        _2022 = (((_2079 * cbLight._m0[_2028].z) * _2092) * _2093) + _1956;
    }
    float _2128;
    float _2130;
    float _2132;
    if (_1757)
    {
        _2128 = _2018;
        _2130 = _2020;
        _2132 = _2022;
    }
    else
    {
        uint _2139 = _1662 + 3u;
        uint _2143 = _1662 + 11u;
        float _2157 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2139].w)) * _454) * 0.949999988079071044921875);
        float _2158 = _2157 * _2157;
        float _2159 = cbLight._m0[_2139].x + _288;
        float _2160 = cbLight._m0[_2139].y + _289;
        float _2161 = cbLight._m0[_2139].z + _290;
        float _2165 = inversesqrt(dot(vec3(_2159, _2160, _2161), vec3(_2159, _2160, _2161)));
        float _2166 = _2165 * _2159;
        float _2167 = _2165 * _2160;
        float _2168 = _2165 * _2161;
        float _2169 = dot(vec3(_421, _422, _423), vec3(cbLight._m0[_2139].xyz));
        float _4155 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        float _2172 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _2173 = dot(vec3(_421, _422, _423), vec3(_2166, _2167, _2168));
        float _4166 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2176 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _2177 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_2166, _2167, _2168));
        float _4177 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2181 = _2158 * _2158;
        float _2185 = ((_2176 * _2176) * (_2181 + (-1.0))) + 1.0;
        float _2194 = (exp2(log2(1.0 - (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2195 = 1.0 - _2158;
        float _2205 = (0.5 / (((_1831 * ((_2172 * _2195) + _2158)) + 9.9999999392252902907785028219223e-09) + (((_1831 * _2195) + _2158) * _2172))) * _2172;
        float _4188 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
        float _2207 = (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_2181 / ((_2185 * _2185) * 3.141590118408203125));
        float _2208 = isnan(1.0) ? _1678 : (isnan(_1678) ? 1.0 : min(_1678, 1.0));
        _2128 = (((_2194 * cbLight._m0[_2143].x) * _2207) * _2208) + _2018;
        _2130 = (((_2194 * cbLight._m0[_2143].y) * _2207) * _2208) + _2020;
        _2132 = (((_2194 * cbLight._m0[_2143].z) * _2207) * _2208) + _2022;
    }
    float _2343;
    float _2345;
    float _2347;
    float _2349;
    float _2351;
    float _2353;
    if (_1660.y == 0u)
    {
        float _2283 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2284 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2283;
        float _2285 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2283;
        float _2286 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2283;
        uvec4 _2298 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2299 = _2298.x;
        uint _2310 = uint((float(_2298.y) * floor(float(uint(cbSceneParam._m0[85u].y * _480) / _2299))) + floor(float(uint(cbSceneParam._m0[85u].x * _479) / _2299)));
        float _2320 = (log2(_2286 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2321 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        uint _2324 = uint(isnan(14.0) ? _2321 : (isnan(_2321) ? 14.0 : min(_2321, 14.0)));
        uvec4 _2329 = texelFetch(g_lightClusterGridBuffer, int(((_2324 << 2u) + (_2310 << 6u)) >> 2u));
        uint _2330 = _2329.x;
        uint _2331 = _2298.z;
        float _2507;
        float _2509;
        float _2511;
        float _2513;
        float _2515;
        float _2517;
        if (((((1u << ((_2331 >> 4u) & 15u)) + 4294967295u) & _2330) == 0u) || ((_2331 & 240u) == 0u))
        {
            _2507 = 0.0;
            _2509 = 0.0;
            _2511 = 0.0;
            _2513 = 0.0;
            _2515 = 0.0;
            _2517 = 0.0;
        }
        else
        {
            float _2508;
            float _2510;
            float _2512;
            float _2514;
            float _2516;
            float _2518;
            float _2683 = 0.0;
            float _2684 = 0.0;
            float _2685 = 0.0;
            float _2686 = 0.0;
            float _2687 = 0.0;
            float _2688 = 0.0;
            uint _2689 = 0u;
            uint _2698;
            bool _2699;
            for (;;)
            {
                _2698 = texelFetch(g_lightClassification, int((((_2324 << 5u) + (_2310 << 9u)) + (_2689 << 2u)) >> 2u)).x;
                _2699 = _2698 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2699)
                {
                    frontier_phi_61_pred = _2683;
                    frontier_phi_61_pred_1 = _2688;
                    frontier_phi_61_pred_2 = _2687;
                    frontier_phi_61_pred_3 = _2686;
                    frontier_phi_61_pred_4 = _2685;
                    frontier_phi_61_pred_5 = _2684;
                }
                else
                {
                    float _2807;
                    float _2808;
                    float _2809;
                    float _2810;
                    float _2811;
                    float _2812;
                    uint _2813;
                    _2807 = _2683;
                    _2808 = _2684;
                    _2809 = _2685;
                    _2810 = _2686;
                    _2811 = _2687;
                    _2812 = _2688;
                    _2813 = _2698;
                    float _2739;
                    float _2740;
                    float _2741;
                    float _2742;
                    float _2743;
                    float _2744;
                    for (;;)
                    {
                        uint _2817 = uint(findLSB(_2813)) + (_2689 << 5u);
                        uint _2814 = (_2813 + 4294967295u) & _2813;
                        uint _2819 = _2817 * 48u;
                        vec4 _2833 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2819)).x, texelFetch(g_PointLightRenderingBuffer, int(_2819 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2819 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2819 + 3u)).x));
                        uint _2839 = (_2817 * 48u) + 4u;
                        vec4 _2852 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2839)).x, texelFetch(g_PointLightRenderingBuffer, int(_2839 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2839 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2839 + 3u)).x));
                        uint _2858 = (_2817 * 48u) + 8u;
                        vec3 _2869 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2858)).x, texelFetch(g_PointLightRenderingBuffer, int(_2858 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2858 + 2u)).x));
                        float _2873 = _2833.x - _2284;
                        float _2874 = _2833.y - _2285;
                        float _2875 = _2833.z - _2286;
                        float _2876 = dot(vec3(_2873, _2874, _2875), vec3(_2873, _2874, _2875));
                        float _2879 = inversesqrt(_2876);
                        float _2880 = _2879 * _2873;
                        float _2881 = _2879 * _2874;
                        float _2882 = _2879 * _2875;
                        float _2883 = dot(vec3(_501, _504, _507), vec3(_2880, _2881, _2882));
                        float _2888 = 1.0 - (_2876 * _2833.w);
                        float _4214 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
                        float _2889 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                        float _2890 = sqrt(_2876) * _2852.w;
                        float _2893 = 1.39999997615814208984375 / (_2890 + 1.39999997615814208984375);
                        float _2894 = _2893 * _2893;
                        float _2897 = ((1.0 - _2894) * _2883) + _2894;
                        float _2900 = _2890 * _2890;
                        float _2904 = ((isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0))) * _2889) / ((_2900 * 0.699999988079071044921875) + 1.0);
                        float _2908 = (-0.0) - _2284;
                        float _2909 = (-0.0) - _2285;
                        float _2910 = (-0.0) - _2286;
                        float _2914 = inversesqrt(dot(vec3(_2908, _2909, _2910), vec3(_2908, _2909, _2910)));
                        float _2915 = _2914 * _2908;
                        float _2916 = _2914 * _2909;
                        float _2917 = _2914 * _2910;
                        float _2925 = exp2(log2(1.0 / ((_2900 * 3.5) + 5.0)) * 0.25);
                        float _2926 = 1.0 - _569;
                        float _2933 = sqrt(1.0 - ((1.0 - (_2926 * _2926)) * (1.0 - (_2925 * _2925))));
                        float _2934 = _2933 * _2933;
                        float _2935 = _2934 * _2934;
                        float _2936 = _2915 + _2880;
                        float _2937 = _2916 + _2881;
                        float _2938 = _2917 + _2882;
                        float _2942 = inversesqrt(dot(vec3(_2936, _2937, _2938), vec3(_2936, _2937, _2938)));
                        float _2946 = dot(vec3(_501, _504, _507), vec3(_2915, _2916, _2917));
                        float _4230 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
                        float _2949 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                        float _2950 = dot(vec3(_501, _504, _507), vec3(_2942 * _2936, _2942 * _2937, _2942 * _2938));
                        float _4241 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
                        float _2953 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                        float _2957 = ((_2953 * _2953) * (_2935 + (-1.0))) + 1.0;
                        float _2958 = _2893 * _2934;
                        float _2959 = _2958 * _2958;
                        float _2962 = ((1.0 - _2959) * _2883) + _2959;
                        float _4252 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                        float _2963 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                        float _2964 = 1.0 - _2934;
                        float _2974 = (0.5 / (((_2963 * ((_2949 * _2964) + _2934)) + 9.9999999392252902907785028219223e-09) + (((_2963 * _2964) + _2934) * _2949))) * _2963;
                        float _4263 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                        float _2985 = (((_2935 * 3.1415927410125732421875) * (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) / ((_2957 * _2957) * ((_2900 * 2.1991131305694580078125) + 3.141590118408203125))) * _2889;
                        _2742 = (_2904 * _2852.x) + _2810;
                        _2743 = (_2904 * _2852.y) + _2811;
                        _2744 = (_2904 * _2852.z) + _2812;
                        _2739 = (_2985 * _2869.x) + _2807;
                        _2740 = (_2985 * _2869.y) + _2808;
                        _2741 = (_2985 * _2869.z) + _2809;
                        if (_2814 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2807 = _2739;
                            _2808 = _2740;
                            _2809 = _2741;
                            _2810 = _2742;
                            _2811 = _2743;
                            _2812 = _2744;
                            _2813 = _2814;
                        }
                    }
                    frontier_phi_61_pred = _2739;
                    frontier_phi_61_pred_1 = _2744;
                    frontier_phi_61_pred_2 = _2743;
                    frontier_phi_61_pred_3 = _2742;
                    frontier_phi_61_pred_4 = _2741;
                    frontier_phi_61_pred_5 = _2740;
                }
                _2508 = frontier_phi_61_pred;
                _2518 = frontier_phi_61_pred_1;
                _2516 = frontier_phi_61_pred_2;
                _2514 = frontier_phi_61_pred_3;
                _2512 = frontier_phi_61_pred_4;
                _2510 = frontier_phi_61_pred_5;
                uint _2690 = _2689 + 1u;
                if (_2690 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2683 = _2508;
                    _2684 = _2510;
                    _2685 = _2512;
                    _2686 = _2514;
                    _2687 = _2516;
                    _2688 = _2518;
                    _2689 = _2690;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2507 = _2508;
            _2509 = _2510;
            _2511 = _2512;
            _2513 = _2514;
            _2515 = _2516;
            _2517 = _2518;
        }
        uvec4 _2521 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2522 = _2521.z;
        uint _2524 = (_2522 >> 8u) & 15u;
        float _2651;
        float _2653;
        float _2655;
        float _2657;
        float _2659;
        float _2661;
        if (((4294967295u << _2524) & _2330) == 0u)
        {
            _2651 = _2507;
            _2653 = _2509;
            _2655 = _2511;
            _2657 = _2513;
            _2659 = _2515;
            _2661 = _2517;
        }
        else
        {
            float _2676 = inversesqrt(dot(vec3(_2284, _2285, _2286), vec3(_2284, _2285, _2286)));
            float _2677 = _2676 * _2284;
            float _2678 = _2676 * _2285;
            float _2679 = _2676 * _2286;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2524 < ((_2522 >> 12u) & 15u))
            {
                float _2652;
                float _2654;
                float _2656;
                float _2658;
                float _2660;
                float _2662;
                float _2790 = _2507;
                float _2791 = _2509;
                float _2792 = _2511;
                float _2793 = _2513;
                float _2794 = _2515;
                float _2795 = _2517;
                uint _2796 = _2524;
                uint _2805;
                bool _2806;
                for (;;)
                {
                    _2805 = texelFetch(g_lightClassification, int((((_2324 << 5u) + (_2310 << 9u)) + (_2796 << 2u)) >> 2u)).x;
                    _2806 = _2805 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2806)
                    {
                        frontier_phi_67_pred = _2793;
                        frontier_phi_67_pred_1 = _2794;
                        frontier_phi_67_pred_2 = _2795;
                        frontier_phi_67_pred_3 = _2792;
                        frontier_phi_67_pred_4 = _2791;
                        frontier_phi_67_pred_5 = _2790;
                    }
                    else
                    {
                        float _2990;
                        float _2991;
                        float _2992;
                        float _2993;
                        float _2994;
                        float _2995;
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3003 = _2790;
                        float _3004 = _2791;
                        float _3005 = _2792;
                        float _3006 = _2793;
                        float _3007 = _2794;
                        float _3008 = _2795;
                        uint _3009 = _2805;
                        uint _3010;
                        vec4 _3035;
                        float _3036;
                        vec4 _3051;
                        vec3 _3063;
                        vec4 _3079;
                        vec4 _3095;
                        float _3142;
                        bool _3143;
                        for (;;)
                        {
                            uint _3020 = ((_2796 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3009));
                            _3010 = (_3009 + 4294967295u) & _3009;
                            uint _3022 = _3020 * 40u;
                            _3035 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3022)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 3u)).x));
                            _3036 = _3035.w;
                            uint _3038 = (_3020 * 40u) + 4u;
                            _3051 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3038)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 3u)).x));
                            uint _3053 = (_3020 * 40u) + 8u;
                            _3063 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x));
                            uint _3066 = (_3020 * 40u) + 16u;
                            _3079 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3066)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 3u)).x));
                            uint _3082 = (_3020 * 40u) + 20u;
                            _3095 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3082)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 3u)).x));
                            uint _3098 = (_3020 * 40u) + 24u;
                            vec4 _3111 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3098)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 3u)).x));
                            uint _3117 = (_3020 * 40u) + 28u;
                            vec4 _3130 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3117)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 3u)).x));
                            _3142 = fma(_2286, _3130.z, fma(_2285, _3130.y, _3130.x * _2284)) + _3130.w;
                            _3143 = !((fma(_2286, _3111.z, fma(_2285, _3111.y, _3111.x * _2284)) + _3111.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3143)
                            {
                                float _3170 = _3035.x - _2284;
                                float _3171 = _3035.y - _2285;
                                float _3172 = _3035.z - _2286;
                                float _3173 = dot(vec3(_3170, _3171, _3172), vec3(_3170, _3171, _3172));
                                float _3176 = inversesqrt(_3173);
                                float _3177 = _3176 * _3170;
                                float _3178 = _3176 * _3171;
                                float _3179 = _3176 * _3172;
                                float _3183 = 1.0 - (_3173 / (_3036 * _3036));
                                float _4274 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                                float _3184 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                                float _3188 = sqrt(_3173) * _3051.w;
                                float _3190 = 1.39999997615814208984375 / (_3188 + 1.39999997615814208984375);
                                float _3191 = _3190 * _3190;
                                float _3194 = ((1.0 - _3191) * dot(vec3(_3177, _3178, _3179), vec3(_501, _504, _507))) + _3191;
                                float _3197 = _3188 * _3188;
                                float _3201 = (fma(_2286, _3079.z, fma(_2285, _3079.y, _3079.x * _2284)) + _3079.w) / _3142;
                                float _3202 = (fma(_2286, _3095.z, fma(_2285, _3095.y, _3095.x * _2284)) + _3095.w) / _3142;
                                float _3206 = 1.0 - dot(vec2(_3201, _3202), vec2(_3201, _3202));
                                float _4290 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                                float _3207 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                                float _3208 = _3207 * (((isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0))) * _3184) / ((_3197 * 0.699999988079071044921875) + 1.0));
                                float _3220 = exp2(log2(1.0 / ((_3197 * 3.5) + 5.0)) * 0.25);
                                float _3221 = 1.0 - _569;
                                float _3228 = sqrt(1.0 - ((1.0 - (_3221 * _3221)) * (1.0 - (_3220 * _3220))));
                                float _3229 = _3228 * _3228;
                                float _3230 = _3229 * _3229;
                                float _3231 = _3177 - _2677;
                                float _3232 = _3178 - _2678;
                                float _3233 = _3179 - _2679;
                                float _3237 = inversesqrt(dot(vec3(_3231, _3232, _3233), vec3(_3231, _3232, _3233)));
                                float _3241 = dot(vec3(_501, _504, _507), vec3((-0.0) - _2677, (-0.0) - _2678, (-0.0) - _2679));
                                float _4301 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                                float _3244 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
                                float _3245 = dot(vec3(_501, _504, _507), vec3(_3237 * _3231, _3237 * _3232, _3237 * _3233));
                                float _4312 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                                float _3248 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
                                float _3252 = ((_3248 * _3248) * (_3230 + (-1.0))) + 1.0;
                                float _3253 = _3190 * _3229;
                                float _3254 = _3253 * _3253;
                                float _3260 = ((1.0 - _3254) * dot(vec3(_501, _504, _507), vec3(_3177, _3178, _3179))) + _3254;
                                float _4323 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                                float _3261 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                                float _3262 = 1.0 - _3229;
                                float _3272 = (0.5 / (((_3261 * ((_3244 * _3262) + _3229)) + 9.9999999392252902907785028219223e-09) + (((_3261 * _3262) + _3229) * _3244))) * _3261;
                                float _4334 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                                float _3282 = (_3207 * _3184) * (((_3230 * 3.1415927410125732421875) * (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) / ((_3252 * _3252) * ((_3197 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3282 * _3063.x;
                                frontier_phi_73_pred_1 = _3282 * _3063.y;
                                frontier_phi_73_pred_2 = _3208 * _3051.z;
                                frontier_phi_73_pred_3 = _3208 * _3051.y;
                                frontier_phi_73_pred_4 = _3208 * _3051.x;
                                frontier_phi_73_pred_5 = _3282 * _3063.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3286 = frontier_phi_73_pred;
                            _3287 = frontier_phi_73_pred_1;
                            _3291 = frontier_phi_73_pred_2;
                            _3290 = frontier_phi_73_pred_3;
                            _3289 = frontier_phi_73_pred_4;
                            _3288 = frontier_phi_73_pred_5;
                            _2993 = _3289 + _3006;
                            _2994 = _3290 + _3007;
                            _2995 = _3291 + _3008;
                            _2990 = _3286 + _3003;
                            _2991 = _3287 + _3004;
                            _2992 = _3288 + _3005;
                            if (_3010 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3003 = _2990;
                                _3004 = _2991;
                                _3005 = _2992;
                                _3006 = _2993;
                                _3007 = _2994;
                                _3008 = _2995;
                                _3009 = _3010;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2993;
                        frontier_phi_67_pred_1 = _2994;
                        frontier_phi_67_pred_2 = _2995;
                        frontier_phi_67_pred_3 = _2992;
                        frontier_phi_67_pred_4 = _2991;
                        frontier_phi_67_pred_5 = _2990;
                    }
                    _2658 = frontier_phi_67_pred;
                    _2660 = frontier_phi_67_pred_1;
                    _2662 = frontier_phi_67_pred_2;
                    _2656 = frontier_phi_67_pred_3;
                    _2654 = frontier_phi_67_pred_4;
                    _2652 = frontier_phi_67_pred_5;
                    uint _2797 = _2796 + 1u;
                    if (_2797 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2790 = _2652;
                        _2791 = _2654;
                        _2792 = _2656;
                        _2793 = _2658;
                        _2794 = _2660;
                        _2795 = _2662;
                        _2796 = _2797;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2660;
                frontier_phi_55_56_ladder_1 = _2662;
                frontier_phi_55_56_ladder_2 = _2658;
                frontier_phi_55_56_ladder_3 = _2656;
                frontier_phi_55_56_ladder_4 = _2654;
                frontier_phi_55_56_ladder_5 = _2652;
            }
            else
            {
                frontier_phi_55_56_ladder = _2515;
                frontier_phi_55_56_ladder_1 = _2517;
                frontier_phi_55_56_ladder_2 = _2513;
                frontier_phi_55_56_ladder_3 = _2511;
                frontier_phi_55_56_ladder_4 = _2509;
                frontier_phi_55_56_ladder_5 = _2507;
            }
            _2651 = frontier_phi_55_56_ladder_5;
            _2653 = frontier_phi_55_56_ladder_4;
            _2655 = frontier_phi_55_56_ladder_3;
            _2657 = frontier_phi_55_56_ladder_2;
            _2659 = frontier_phi_55_56_ladder;
            _2661 = frontier_phi_55_56_ladder_1;
        }
        float _2666 = isnan(1.0) ? _545 : (isnan(_545) ? 1.0 : min(_545, 1.0));
        _2343 = (_2666 * _2657) + _1795;
        _2345 = (_2666 * _2659) + _1797;
        _2347 = (_2666 * _2661) + _1799;
        _2349 = ((_2651 * 0.039999999105930328369140625) * _2666) + _2128;
        _2351 = ((_2653 * 0.039999999105930328369140625) * _2666) + _2130;
        _2353 = ((_2655 * 0.039999999105930328369140625) * _2666) + _2132;
    }
    else
    {
        _2343 = _1795;
        _2345 = _1797;
        _2347 = _1799;
        _2349 = _2128;
        _2351 = _2130;
        _2353 = _2132;
    }
    float _2373 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2374 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2375 = cbSceneParam._m0[86u].x * ((_479 / cbSceneParam._m0[86u].x) + ((_568 * cbMtdParam._m0[13u].y) * dot(vec3(_421, _422, _423), vec3(_191, _192, _193))));
    float _2376 = isnan(_2373) ? _2375 : (isnan(_2375) ? _2373 : min(_2375, _2373));
    float _2377 = isnan(_2374) ? _480 : (isnan(_480) ? _2374 : min(_480, _2374));
    vec4 _2379 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2376, _2377), 0.0);
    float _2381 = _2379.x;
    bool _2402 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2381)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2381))) > _473;
    vec4 _2406 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2402 ? _2376 : _479, _2402 ? _2377 : _480));
    float _4360 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _4371 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _4382 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _2430 = 0.959999978542327880859375 - (exp2(log2(1.0 - _560) * 5.0) * 0.959999978542327880859375);
    float _2432 = (_2406.x * _2430) * cbSceneParam._m0[72u].w;
    float _2434 = (_2406.y * _2430) * cbSceneParam._m0[72u].w;
    float _2436 = (_2406.z * _2430) * cbSceneParam._m0[72u].w;
    float _2457 = _479 / cbSceneParam._m0[86u].x;
    float _2458 = _480 / cbSceneParam._m0[86u].y;
    vec4 _2472 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2457, _2458, (log2((isnan(cbSceneParam._m0[77u].w) ? _473 : (isnan(_473) ? cbSceneParam._m0[77u].w : min(_473, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2474 = _2472.x;
    float _2475 = _2472.y;
    float _2476 = _2472.z;
    float _2477 = _2472.w;
    float _2569;
    float _2571;
    float _2573;
    float _2575;
    if (_473 > cbSceneParam._m0[78u].w)
    {
        float _2532 = isnan(_473) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _473 : min(cbSceneParam._m0[80u].w, _473));
        float _2533 = _2532 / _473;
        float _2544 = _2533 * _262;
        float _2545 = _263 * _2533;
        float _2546 = (-0.0) - _2545;
        float _2547 = _2533 * _264;
        float _2549 = (cbSceneParam._m0[77u].w * _2546) / _2532;
        float _2550 = _2549 + cbSceneParam._m0[79u].w;
        float _2551 = cbSceneParam._m0[79u].w - _2545;
        float _2557 = sqrt(((_2544 * _2544) + (_2545 * _2545)) + (_2547 * _2547));
        float _2560 = (1.0 - (cbSceneParam._m0[77u].w / _2532)) * _2557;
        float _2565 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2567 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2752;
        if (abs((_2546 - _2549) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2752 = ((((_2550 > 0.0) ? exp2(_2565 * _2550) : (2.0 - exp2(_2567 * _2550))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2560;
        }
        else
        {
            float _2712 = 1.0 / cbSceneParam._m0[80u].x;
            float _2713 = isnan(_2551) ? _2550 : (isnan(_2550) ? _2551 : max(_2550, _2551));
            float _2714 = isnan(_2551) ? _2550 : (isnan(_2550) ? _2551 : min(_2550, _2551));
            float _2723 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : min(_2713, 0.0));
            float _2724 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : min(_2714, 0.0));
            _2752 = ((abs(_2557 / _2546) * cbSceneParam._m0[80u].y) * ((((_2723 - _2724) * 2.0) - ((exp2(_2565 * (isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0)))) - exp2(_2565 * (isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0))))) * _2712)) - ((exp2(_2567 * _2723) - exp2(_2567 * _2724)) * _2712))) + (_2560 * cbSceneParam._m0[80u].z);
        }
        vec4 _2754 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2457, _2458, 1.0), 0.0);
        float _2763 = exp2((_2752 * (-1.44269502162933349609375)) * (1.0 - _2754.w));
        float _2764 = log2(_2763);
        float _2780 = log2(_2477);
        _2569 = (exp2(_2780 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2764 * cbSceneParam._m0[78u].x)) * _2754.x) / cbSceneParam._m0[78u].x)) + _2474;
        _2571 = (exp2(_2780 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2764 * cbSceneParam._m0[78u].y)) * _2754.y) / cbSceneParam._m0[78u].y)) + _2475;
        _2573 = (exp2(_2780 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2764 * cbSceneParam._m0[78u].z)) * _2754.z) / cbSceneParam._m0[78u].z)) + _2476;
        _2575 = _2763 * _2477;
    }
    else
    {
        _2569 = _2474;
        _2571 = _2475;
        _2573 = _2476;
        _2575 = _2477;
    }
    bool _2587 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2588 = log2(_2575);
    float _2595 = exp2(_2588 * cbSceneParam._m0[78u].x) * ((_2432 + (((((_1568 * _1616.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))) * _1359) * _1632)) + _2349) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_2343 + ((isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0))) * _545))) - _2432) * _452));
    float _2596 = exp2(_2588 * cbSceneParam._m0[78u].y) * ((_2434 + (((((_1568 * _1616.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))) * _1359) * _1632)) + _2351) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_2345 + ((isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0))) * _545))) - _2434) * _452));
    float _2597 = exp2(_2588 * cbSceneParam._m0[78u].z) * ((_2436 + (((((_1568 * _1616.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))) * _1359) * _1632)) + _2353) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * (_2347 + ((isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0))) * _545))) - _2436) * _452));
    vec4 _2605 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_479, _480));
    float _2607 = _2605.x;
    float _2628 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2607)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2607))) - _473) * 3.0;
    float _4433 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
    float _2630 = (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * cbInstanceData._m0[_520 + 6u].w;
    float _2639 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2639 * (_2587 ? _2595 : (_2595 + (cbSceneParam._m0[72u].w * _2569)));
    SV_Target.y = _2639 * (_2587 ? _2596 : (_2596 + (cbSceneParam._m0[72u].w * _2571)));
    SV_Target.z = _2639 * (_2587 ? _2597 : (_2597 + (cbSceneParam._m0[72u].w * _2573)));
    SV_Target.w = _2630;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2630;
}


