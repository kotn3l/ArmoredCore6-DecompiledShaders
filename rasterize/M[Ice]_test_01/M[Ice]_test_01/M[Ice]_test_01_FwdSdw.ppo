#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Ice_test_01_snp_0_Texture2D_10;
layout(set = 0, binding = 1) uniform texture2D M_Ice_test_01_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _926;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _193 = _192 * _184;
    float _194 = _192 * _185;
    float _195 = _192 * _186;
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _246 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _250 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _254 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _264 = cbSceneParam._m0[71u].x - (_242 / _254);
    float _265 = cbSceneParam._m0[71u].y - (_246 / _254);
    float _266 = cbSceneParam._m0[71u].z - (_250 / _254);
    float _289 = inversesqrt(dot(vec3(_264, _265, _266), vec3(_264, _265, _266)));
    float _290 = _289 * _264;
    float _291 = _289 * _265;
    float _292 = _289 * _266;
    float _296 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _300 = dot(vec4(_290, _291, _292, 0.0), vec4(_296 * _200, _296 * _201, _296 * _202, 0.0));
    float _3675 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _308 = exp2(log2(1.0 - (isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0)))) * cbMtdParam._m0[12u].y);
    float _3686 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _309 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    float _316 = (_309 * (cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].x)) + cbMtdParam._m0[10u].x;
    float _317 = (_309 * (cbMtdParam._m0[11u].y - cbMtdParam._m0[10u].y)) + cbMtdParam._m0[10u].y;
    float _318 = (_309 * (cbMtdParam._m0[11u].z - cbMtdParam._m0[10u].z)) + cbMtdParam._m0[10u].z;
    vec4 _338 = texture(sampler2D(M_Ice_test_01_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _346 = (_338.x * 2.0) + (-1.0);
    float _348 = (_338.y * 2.0) + (-1.0);
    float _349 = dot(vec2(_346, _348), vec2(_346, _348));
    float _3697 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _354 = sqrt(1.0 - (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))));
    float _355 = abs(_200);
    float _356 = abs(_201);
    float _357 = abs(_202);
    float _358 = _355 * _355;
    float _359 = _356 * _356;
    float _360 = _357 * _357;
    float _363 = _246 * 0.0500000007450580596923828125;
    float _373 = (cbTextureTilingScale._m0[1u].x * (_242 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[1u].z;
    vec4 _376 = texture(sampler2D(M_Ice_test_01_snp_0_Texture2D_9, SS_BumpMap), vec2(_373, (cbTextureTilingScale._m0[1u].y * _363) + cbTextureTilingScale._m0[1u].w));
    float _383 = (cbTextureTilingScale._m0[1u].y * (_250 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[1u].w;
    vec4 _384 = texture(sampler2D(M_Ice_test_01_snp_0_Texture2D_9, SS_BumpMap), vec2(_373, _383));
    vec4 _394 = texture(sampler2D(M_Ice_test_01_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _363) + cbTextureTilingScale._m0[1u].z, _383));
    float _408 = ((((((_384.x * _359) + (_376.x * _360)) + (_394.x * _358)) * 2.0) + (-1.0)) * cbMtdParam._m0[12u].w) + _346;
    float _409 = ((((((_384.y * _359) + (_376.y * _360)) + (_394.y * _358)) * 2.0) + (-1.0)) * cbMtdParam._m0[12u].w) + _348;
    float _412 = fma(_354, _200, fma(_409, _206 * TANGENT.x, _408 * _193));
    float _415 = fma(_354, _201, fma(_409, _206 * TANGENT.y, _408 * _194));
    float _418 = fma(_354, _202, fma(_409, _206 * TANGENT.z, _408 * _195));
    float _422 = inversesqrt(dot(vec3(_412, _415, _418), vec3(_412, _415, _418)));
    float _423 = _422 * _412;
    float _424 = _422 * _415;
    float _425 = _422 * _418;
    float _433 = cbMtdParam._m0[13u].x + dot(vec4(_423, _424, _425, 0.0), vec4(cbMtdParam._m0[14u].xyz, 0.0));
    float _3708 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _435 = (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * TEXCOORD_3.x;
    float _3719 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _436 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _443 = (_436 * (cbMtdParam._m0[9u].x - _316)) + _316;
    float _444 = (_436 * (cbMtdParam._m0[9u].y - _317)) + _317;
    float _445 = (_436 * (cbMtdParam._m0[9u].z - _318)) + _318;
    float _450 = ((cbMtdParam._m0[13u].w - cbMtdParam._m0[12u].x) * _436) + cbMtdParam._m0[12u].x;
    float _453 = cbMtdParam._m0[13u].z + _436;
    float _3730 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _454 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    float _3741 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _456 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _3752 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _3763 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _3774 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _475 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _481 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _482 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _503 = fma(_425, cbSceneParam._m0[5u].z, fma(_424, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _423));
    float _506 = fma(_425, cbSceneParam._m0[6u].z, fma(_424, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _423));
    float _509 = fma(_425, cbSceneParam._m0[7u].z, fma(_424, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _423));
    uint _522 = uint(roundEven(NORMAL.w)) * 13u;
    uint _524 = (_522 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _530 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0)))) * cbInstanceData._m0[_524].x;
    float _531 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0)))) * cbInstanceData._m0[_524].y;
    float _532 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0)))) * cbInstanceData._m0[_524].z;
    float _3785 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _533 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _3796 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _534 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _3807 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _535 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    vec4 _544 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _481, cbSceneParam._m0[86u].y * _482));
    float _547 = _544.x * TEXCOORD_3.w;
    float _548 = dot(vec3(_423, _424, _425), vec3(_290, _291, _292));
    float _551 = _548 * 2.0;
    float _555 = (_551 * _423) - _290;
    float _556 = (_551 * _424) - _291;
    float _557 = (_551 * _425) - _292;
    float _561 = abs(dot(vec3(_290, _291, _292), vec3(_423, _424, _425)));
    float _3818 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _562 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _570 = 10.0 / (_475 + 10.0);
    float _571 = sqrt(_456);
    float _583 = exp2((_571 * 5.0) * log2(1.0 - (_562 * 0.999000012874603271484375))) / (4.0 - (_571 * 3.0));
    float _615 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _619 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _623 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _925;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _650 = fma(_623, cbModelParam._m0[26u].z, fma(_619, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _615));
        float _654 = fma(_623, cbModelParam._m0[27u].z, fma(_619, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _615));
        float _658 = fma(_623, cbModelParam._m0[28u].z, fma(_619, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _615));
        float _683 = _615 + _423;
        float _684 = _619 + _424;
        float _685 = _623 + _425;
        float _695 = fma(_685, cbModelParam._m0[26u].z, fma(_684, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _683)) - _650;
        float _696 = fma(_685, cbModelParam._m0[27u].z, fma(_684, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _683)) - _654;
        float _697 = fma(_685, cbModelParam._m0[28u].z, fma(_684, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _683)) - _658;
        float _701 = inversesqrt(dot(vec3(_695, _696, _697), vec3(_695, _696, _697)));
        float _714 = ((_701 * _695) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_650 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _715 = ((_701 * _696) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_654 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _716 = ((_701 * _697) / cbModelParam._m0[34u].z) + ((((((_658 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _719 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_714, _715, _716), 0.0);
        vec4 _726 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_714, _715, _716), 0.0);
        vec4 _733 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_714, _715, _716), 0.0);
        vec4 _740 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_714, _715, _716), 0.0);
        float _753 = exp2((_719.w + (-0.5)) * 20.0) * 2.0;
        float _754 = _753 * (_719.x + (-0.5));
        float _755 = _753 * (_719.y + (-0.5));
        float _756 = _753 * (_719.z + (-0.5));
        float _763 = exp2((_726.w + (-0.5)) * 20.0) * 2.0;
        float _764 = _763 * (_726.x + (-0.5));
        float _765 = _763 * (_726.y + (-0.5));
        float _766 = _763 * (_726.z + (-0.5));
        float _773 = exp2((_733.w + (-0.5)) * 20.0) * 2.0;
        float _774 = _773 * (_733.x + (-0.5));
        float _775 = _773 * (_733.y + (-0.5));
        float _776 = _773 * (_733.z + (-0.5));
        float _783 = exp2((_740.w + (-0.5)) * 20.0) * 2.0;
        float _784 = _783 * (_740.x + (-0.5));
        float _785 = _783 * (_740.y + (-0.5));
        float _786 = _783 * (_740.z + (-0.5));
        float _787 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _788 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _789 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _790 = _754 * 0.5;
        float _791 = _764 * 0.5;
        float _792 = _774 * 0.5;
        float _793 = dot(vec3(_790, _791, _792), vec3(_790, _791, _792));
        float _798 = (_793 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_793);
        float _807 = (dot(vec3(_423, _424, _425), vec3(_798 * _790, _798 * _791, _798 * _792)) + 1.0) * 0.5;
        float _3844 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _817 = sqrt(((_791 * _791) + (_790 * _790)) + (_792 * _792)) / (_787 + 9.9999997473787516355514526367188e-06);
        float _3855 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _818 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _819 = _818 * 2.0;
        float _823 = (1.0 - _818) / (_818 + 1.0);
        float _3866 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _833 = ((((1.0 - _824) * (_819 + 2.0)) * exp2(log2(isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * (_819 + 1.0))) + _824) * _787;
        float _834 = _755 * 0.5;
        float _835 = _765 * 0.5;
        float _836 = _775 * 0.5;
        float _837 = dot(vec3(_834, _835, _836), vec3(_834, _835, _836));
        float _842 = (_837 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_837);
        float _850 = (dot(vec3(_423, _424, _425), vec3(_842 * _834, _842 * _835, _842 * _836)) + 1.0) * 0.5;
        float _3877 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _859 = sqrt(((_835 * _835) + (_834 * _834)) + (_836 * _836)) / (_788 + 9.9999997473787516355514526367188e-06);
        float _3888 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _860 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _861 = _860 * 2.0;
        float _865 = (1.0 - _860) / (_860 + 1.0);
        float _3899 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _866 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _875 = ((((1.0 - _866) * (_861 + 2.0)) * exp2(log2(isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (_861 + 1.0))) + _866) * _788;
        float _876 = _756 * 0.5;
        float _877 = _766 * 0.5;
        float _878 = _776 * 0.5;
        float _879 = dot(vec3(_876, _877, _878), vec3(_876, _877, _878));
        float _884 = (_879 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_879);
        float _892 = (dot(vec3(_423, _424, _425), vec3(_884 * _876, _884 * _877, _884 * _878)) + 1.0) * 0.5;
        float _3910 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _901 = sqrt(((_877 * _877) + (_876 * _876)) + (_878 * _878)) / (_789 + 9.9999997473787516355514526367188e-06);
        float _3921 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _903 = _902 * 2.0;
        float _907 = (1.0 - _902) / (_902 + 1.0);
        float _3932 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _917 = ((((1.0 - _908) * (_903 + 2.0)) * exp2(log2(isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_903 + 1.0))) + _908) * _789;
        _925 = _756;
        _927 = _755;
        _928 = _754;
        _929 = _766;
        _930 = _765;
        _931 = _764;
        _932 = _776;
        _933 = _775;
        _934 = _774;
        _935 = _789;
        _936 = _788;
        _937 = _787;
        _938 = cbModelParam._m0[36u].z * (isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0)));
        _939 = cbModelParam._m0[36u].z * (isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0)));
        _940 = cbModelParam._m0[36u].z * (isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0)));
    }
    else
    {
        _925 = _926;
        _927 = _926;
        _928 = _926;
        _929 = _926;
        _930 = _926;
        _931 = _926;
        _932 = _926;
        _933 = _926;
        _934 = _926;
        _935 = _926;
        _936 = _926;
        _937 = _926;
        _938 = 0.0;
        _939 = 0.0;
        _940 = 0.0;
    }
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _966 = fma(_623, cbModelParam._m0[30u].z, fma(_619, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _615));
        float _970 = fma(_623, cbModelParam._m0[31u].z, fma(_619, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _615));
        float _974 = fma(_623, cbModelParam._m0[32u].z, fma(_619, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _615));
        float _997 = _615 + _423;
        float _998 = _619 + _424;
        float _999 = _623 + _425;
        float _1009 = fma(_999, cbModelParam._m0[30u].z, fma(_998, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _997)) - _966;
        float _1010 = fma(_999, cbModelParam._m0[31u].z, fma(_998, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _997)) - _970;
        float _1011 = fma(_999, cbModelParam._m0[32u].z, fma(_998, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _997)) - _974;
        float _1015 = inversesqrt(dot(vec3(_1009, _1010, _1011), vec3(_1009, _1010, _1011)));
        float _1028 = ((_1015 * _1009) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_966 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1029 = ((_1015 * _1010) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_970 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1030 = ((_1015 * _1011) / cbModelParam._m0[35u].z) + ((((((_974 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        float _1065 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1032.x + (-0.5));
        float _1067 = _1065 * (_1032.y + (-0.5));
        float _1068 = _1065 * (_1032.z + (-0.5));
        float _1075 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1039.x + (-0.5));
        float _1077 = _1075 * (_1039.y + (-0.5));
        float _1078 = _1075 * (_1039.z + (-0.5));
        float _1085 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1046.x + (-0.5));
        float _1087 = _1085 * (_1046.y + (-0.5));
        float _1088 = _1085 * (_1046.z + (-0.5));
        float _1095 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1053.x + (-0.5));
        float _1097 = _1095 * (_1053.y + (-0.5));
        float _1098 = _1095 * (_1053.z + (-0.5));
        float _1099 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1100 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1101 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1102 = _1066 * 0.5;
        float _1103 = _1076 * 0.5;
        float _1104 = _1086 * 0.5;
        float _1105 = dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104));
        float _1110 = (_1105 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1105);
        float _1118 = (dot(vec3(_423, _424, _425), vec3(_1110 * _1102, _1110 * _1103, _1110 * _1104)) + 1.0) * 0.5;
        float _3973 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1127 = sqrt(((_1103 * _1103) + (_1102 * _1102)) + (_1104 * _1104)) / (_1099 + 9.9999997473787516355514526367188e-06);
        float _3984 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1129 = _1128 * 2.0;
        float _1133 = (1.0 - _1128) / (_1128 + 1.0);
        float _3995 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1143 = ((((1.0 - _1134) * (_1129 + 2.0)) * exp2(log2(isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1129 + 1.0))) + _1134) * _1099;
        float _1144 = _1067 * 0.5;
        float _1145 = _1077 * 0.5;
        float _1146 = _1087 * 0.5;
        float _1147 = dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146));
        float _1152 = (_1147 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1147);
        float _1160 = (dot(vec3(_423, _424, _425), vec3(_1152 * _1144, _1152 * _1145, _1152 * _1146)) + 1.0) * 0.5;
        float _4006 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1169 = sqrt(((_1145 * _1145) + (_1144 * _1144)) + (_1146 * _1146)) / (_1100 + 9.9999997473787516355514526367188e-06);
        float _4017 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1171 = _1170 * 2.0;
        float _1175 = (1.0 - _1170) / (_1170 + 1.0);
        float _4028 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1185 = ((((1.0 - _1176) * (_1171 + 2.0)) * exp2(log2(isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1171 + 1.0))) + _1176) * _1100;
        float _1186 = _1068 * 0.5;
        float _1187 = _1078 * 0.5;
        float _1188 = _1088 * 0.5;
        float _1189 = dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188));
        float _1194 = (_1189 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1189);
        float _1202 = (dot(vec3(_423, _424, _425), vec3(_1194 * _1186, _1194 * _1187, _1194 * _1188)) + 1.0) * 0.5;
        float _4039 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1211 = sqrt(((_1187 * _1187) + (_1186 * _1186)) + (_1188 * _1188)) / (_1101 + 9.9999997473787516355514526367188e-06);
        float _4050 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1213 = _1212 * 2.0;
        float _1217 = (1.0 - _1212) / (_1212 + 1.0);
        float _4061 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1227 = ((((1.0 - _1218) * (_1213 + 2.0)) * exp2(log2(isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_1213 + 1.0))) + _1218) * _1101;
        _1235 = _1068;
        _1236 = _1067;
        _1237 = _1066;
        _1238 = _1078;
        _1239 = _1077;
        _1240 = _1076;
        _1241 = _1088;
        _1242 = _1087;
        _1243 = _1086;
        _1244 = _1101;
        _1245 = _1100;
        _1246 = _1099;
        _1247 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)));
        _1248 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)));
        _1249 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)));
    }
    else
    {
        _1235 = _926;
        _1236 = _926;
        _1237 = _926;
        _1238 = _926;
        _1239 = _926;
        _1240 = _926;
        _1241 = _926;
        _1242 = _926;
        _1243 = _926;
        _1244 = _926;
        _1245 = _926;
        _1246 = _926;
        _1247 = 0.0;
        _1248 = 0.0;
        _1249 = 0.0;
    }
    float _1259 = (cbModelParam._m0[1u].x * (_1247 - _938)) + _938;
    float _1260 = (cbModelParam._m0[1u].x * (_1248 - _939)) + _939;
    float _1261 = (cbModelParam._m0[1u].x * (_1249 - _940)) + _940;
    float _1282 = fma(_1261, cbSceneParam._m0[89u].z, fma(_1260, cbSceneParam._m0[89u].y, _1259 * cbSceneParam._m0[89u].x));
    float _1285 = fma(_1261, cbSceneParam._m0[90u].z, fma(_1260, cbSceneParam._m0[90u].y, _1259 * cbSceneParam._m0[90u].x));
    float _1288 = fma(_1261, cbSceneParam._m0[91u].z, fma(_1260, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1259));
    float _1303 = _555 * 0.5;
    float _1304 = _556 * 0.5;
    float _1305 = _557 * 0.5;
    float _1306 = dot(vec4(_1303, _1304, _1305, 1.0), vec4(_1237, _1240, _1243, _1246));
    float _1309 = dot(vec4(_1303, _1304, _1305, 1.0), vec4(_1236, _1239, _1242, _1245));
    float _1312 = dot(vec4(_1303, _1304, _1305, 1.0), vec4(_1235, _1238, _1241, _1244));
    float _1346;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1319 = dot(vec4(_1303, _1304, _1305, 1.0), vec4(_925, _929, _932, _935));
        float _1323 = dot(vec4(_1303, _1304, _1305, 1.0), vec4(_927, _930, _933, _936));
        float _1327 = dot(vec4(_1303, _1304, _1305, 1.0), vec4(_928, _931, _934, _937));
        float _1334 = dot(vec4(cbModelParam._m0[39u]), vec4(_1303, _1304, _1305, 1.0));
        _1346 = dot(vec3(isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)), isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)), isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1334) ? 0.0 : (isnan(0.0) ? _1334 : max(0.0, _1334))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1346 = 1.0;
    }
    float _1357;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1348 = dot(vec4(cbModelParam._m0[40u]), vec4(_1303, _1304, _1305, 1.0));
        _1357 = dot(vec3(isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)), isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)), isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1348) ? 0.0 : (isnan(0.0) ? _1348 : max(0.0, _1348))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1357 = 1.0;
    }
    float _1361 = (_1357 * cbModelParam._m0[1u].x) + (_1346 * (1.0 - cbModelParam._m0[1u].x));
    float _1371 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _456);
    float _1372 = isnan(_1371) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1371 : min(cbModelParam._m0[25u].z, _1371));
    float _1452;
    float _1454;
    float _1456;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1419 = fma(_623, cbModelParam._m0[13u].z, fma(_619, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _615)) + cbModelParam._m0[13u].w;
        float _1423 = fma(_623, cbModelParam._m0[14u].z, fma(_619, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _615)) + cbModelParam._m0[14u].w;
        float _1427 = fma(_623, cbModelParam._m0[15u].z, fma(_619, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _615)) + cbModelParam._m0[15u].w;
        float _1430 = fma(_557, cbModelParam._m0[13u].z, fma(_556, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _555));
        float _1433 = fma(_557, cbModelParam._m0[14u].z, fma(_556, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _555));
        float _1436 = fma(_557, cbModelParam._m0[15u].z, fma(_556, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _555));
        float _1464;
        if (_1430 > 0.0)
        {
            _1464 = abs((1.0 - _1419) / _1430);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1430 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1419 + 1.0) / _1430);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1464 = frontier_phi_14_12_ladder;
        }
        float _1689;
        if (_1433 > 0.0)
        {
            _1689 = abs((1.0 - _1423) / _1433);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1433 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1423 + 1.0) / _1433);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1689 = frontier_phi_23_19_ladder;
        }
        float _1985;
        if (_1436 > 0.0)
        {
            _1985 = abs((1.0 - _1427) / _1436);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1436 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1427 + 1.0) / _1436);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1985 = frontier_phi_35_30_ladder;
        }
        float _1987 = isnan(_1689) ? _1464 : (isnan(_1464) ? _1689 : min(_1464, _1689));
        float _1988 = isnan(_1985) ? _1987 : (isnan(_1987) ? _1985 : min(_1987, _1985));
        float _1992 = (_1988 * _1430) + _1419;
        float _1993 = (_1988 * _1433) + _1423;
        float _1994 = (_1988 * _1436) + _1427;
        float _1995 = _1988 * 9.9999997473787516355514526367188e-05;
        float _1997 = (-1.0) - _1995;
        float _1999 = _1995 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1994 > _1999) || ((_1994 < _1997) || ((_1993 > _1999) || ((_1993 < _1997) || ((_1992 < _1997) || (_1992 > _1999))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2139 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1994, cbModelParam._m0[9u].z, fma(_1993, cbModelParam._m0[9u].y, _1992 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1994, cbModelParam._m0[10u].z, fma(_1993, cbModelParam._m0[10u].y, _1992 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1994, cbModelParam._m0[11u].z, fma(_1993, cbModelParam._m0[11u].y, _1992 * cbModelParam._m0[11u].x))), _1372);
            frontier_phi_13_35_ladder = _2139.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2139.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2139.x * cbModelParam._m0[1u].y;
        }
        _1452 = frontier_phi_13_35_ladder_2;
        _1454 = frontier_phi_13_35_ladder_1;
        _1456 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1440 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_555, _556, _557), _1372);
        _1452 = _1440.x * cbModelParam._m0[1u].y;
        _1454 = _1440.y * cbModelParam._m0[1u].y;
        _1456 = _1440.z * cbModelParam._m0[1u].y;
    }
    float _1460 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _456);
    float _1461 = isnan(_1460) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1460 : min(cbModelParam._m0[25u].w, _1460));
    float _1554;
    float _1556;
    float _1558;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1518 = fma(_623, cbModelParam._m0[21u].z, fma(_619, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _615)) + cbModelParam._m0[21u].w;
        float _1522 = fma(_623, cbModelParam._m0[22u].z, fma(_619, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _615)) + cbModelParam._m0[22u].w;
        float _1526 = fma(_623, cbModelParam._m0[23u].z, fma(_619, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _615)) + cbModelParam._m0[23u].w;
        float _1529 = fma(_557, cbModelParam._m0[21u].z, fma(_556, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _555));
        float _1532 = fma(_557, cbModelParam._m0[22u].z, fma(_556, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _555));
        float _1535 = fma(_557, cbModelParam._m0[23u].z, fma(_556, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _555));
        float _1694;
        if (_1529 > 0.0)
        {
            _1694 = abs((1.0 - _1518) / _1529);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1529 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1518 + 1.0) / _1529);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1694 = frontier_phi_25_21_ladder;
        }
        float _2012;
        if (_1532 > 0.0)
        {
            _2012 = abs((1.0 - _1522) / _1532);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1532 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1522 + 1.0) / _1532);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2012 = frontier_phi_37_32_ladder;
        }
        float _2339;
        if (_1535 > 0.0)
        {
            _2339 = abs((1.0 - _1526) / _1535);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1535 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1526 + 1.0) / _1535);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2339 = frontier_phi_47_44_ladder;
        }
        float _2341 = isnan(_2012) ? _1694 : (isnan(_1694) ? _2012 : min(_1694, _2012));
        float _2342 = isnan(_2339) ? _2341 : (isnan(_2341) ? _2339 : min(_2341, _2339));
        float _2346 = (_2342 * _1529) + _1518;
        float _2347 = (_2342 * _1532) + _1522;
        float _2348 = (_2342 * _1535) + _1526;
        float _2349 = _2342 * 9.9999997473787516355514526367188e-05;
        float _2350 = (-1.0) - _2349;
        float _2352 = _2349 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2348 > _2352) || ((_2348 < _2350) || ((_2347 > _2352) || ((_2347 < _2350) || ((_2346 < _2350) || (_2346 > _2352))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2466 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2348, cbModelParam._m0[17u].z, fma(_2347, cbModelParam._m0[17u].y, _2346 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2348, cbModelParam._m0[18u].z, fma(_2347, cbModelParam._m0[18u].y, _2346 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2348, cbModelParam._m0[19u].z, fma(_2347, cbModelParam._m0[19u].y, _2346 * cbModelParam._m0[19u].x))), _1461);
            frontier_phi_22_47_ladder = _2466.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2466.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2466.x * cbModelParam._m0[1u].z;
        }
        _1554 = frontier_phi_22_47_ladder_2;
        _1556 = frontier_phi_22_47_ladder_1;
        _1558 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1538 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_555, _556, _557), _1461);
        _1554 = _1538.x * cbModelParam._m0[1u].z;
        _1556 = _1538.y * cbModelParam._m0[1u].z;
        _1558 = _1538.z * cbModelParam._m0[1u].z;
    }
    float _1570 = ((((1.0 - _583) * ((_571 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_583 * _571)) * _547;
    float _1571 = _1570 * ((cbModelParam._m0[1u].w * (_1554 - _1452)) + _1452);
    float _1572 = _1570 * ((cbModelParam._m0[1u].w * (_1556 - _1454)) + _1454);
    float _1573 = _1570 * ((cbModelParam._m0[1u].w * (_1558 - _1456)) + _1456);
    float _1576 = fma(_1573, cbSceneParam._m0[89u].z, fma(_1572, cbSceneParam._m0[89u].y, _1571 * cbSceneParam._m0[89u].x));
    float _1579 = fma(_1573, cbSceneParam._m0[90u].z, fma(_1572, cbSceneParam._m0[90u].y, _1571 * cbSceneParam._m0[90u].x));
    float _1582 = fma(_1573, cbSceneParam._m0[91u].z, fma(_1572, cbSceneParam._m0[91u].y, _1571 * cbSceneParam._m0[91u].x));
    float _1593 = _481 / cbSceneParam._m0[86u].x;
    float _1601 = (cbSceneParam._m0[88u].y * (1.0 - _456)) + cbSceneParam._m0[88u].z;
    float _4187 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
    float _1603 = (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * 5.0;
    float _1608 = (_570 * cbMtdParam._m0[12u].z) * dot(vec3(_423, _424, _425), vec3(1.0, 0.0, 0.0));
    vec4 _1618 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1608 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1608 + _1593) * cbSceneParam._m0[86u].x, _482), _1603).w) + _1593) * cbSceneParam._m0[86u].x, _482), _1603);
    float _1634 = 1.0 - _1618.w;
    float _1668 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1672 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1676 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1680 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1681 = _1668 / _1680;
    float _1682 = _1672 / _1680;
    float _1683 = _1676 / _1680;
    float _1830;
    float _1831;
    float _1832;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1710 = ((uint(_1683 > cbSceneParam._m0[59u].y) + uint(_1683 > cbSceneParam._m0[59u].x)) + uint(_1683 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1711 = _1710 + 43u;
        uint _1719 = _1710 + 44u;
        uint _1727 = _1710 + 45u;
        uint _1735 = _1710 + 46u;
        float _1746 = fma(_1680, cbSceneParam._m0[_1711].w, fma(_1676, cbSceneParam._m0[_1711].z, fma(_1672, cbSceneParam._m0[_1711].y, _1668 * cbSceneParam._m0[_1711].x)));
        float _1750 = fma(_1680, cbSceneParam._m0[_1719].w, fma(_1676, cbSceneParam._m0[_1719].z, fma(_1672, cbSceneParam._m0[_1719].y, _1668 * cbSceneParam._m0[_1719].x)));
        float _1758 = fma(_1680, cbSceneParam._m0[_1735].w, fma(_1676, cbSceneParam._m0[_1735].z, fma(_1672, cbSceneParam._m0[_1735].y, _1668 * cbSceneParam._m0[_1735].x)));
        float _1763 = cbSceneParam._m0[33u].z * _1758;
        float _1765 = cbSceneParam._m0[33u].w * _1758;
        float _1768 = fma(_1680, cbSceneParam._m0[_1727].w, fma(_1676, cbSceneParam._m0[_1727].z, fma(_1672, cbSceneParam._m0[_1727].y, _1668 * cbSceneParam._m0[_1727].x))) / _1758;
        float _1816 = (cbSceneParam._m0[33u].x - sqrt(((_1682 * _1682) + (_1681 * _1681)) + (_1683 * _1683))) * cbSceneParam._m0[33u].y;
        float _4198 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1823 = (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1763 + _1746) / _1758, (_1765 + _1750) / _1758), _1768), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1765 + _1746) / _1758, (_1750 - _1763) / _1758), _1768), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1746 - _1763) / _1758, (_1750 - _1765) / _1758), _1768), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1746 - _1765) / _1758, (_1763 + _1750) / _1758), _1768), 0.0)).x), vec4(0.25)));
        _1830 = 1.0 - (_1823 * cbSceneParam._m0[34u].x);
        _1831 = 1.0 - (_1823 * cbSceneParam._m0[34u].y);
        _1832 = 1.0 - (_1823 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1830 = 1.0;
        _1831 = 1.0;
        _1832 = 1.0;
    }
    float _1896;
    float _1898;
    float _1900;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1884 = fma(_1680, cbSceneParam._m0[63u].w, fma(_1676, cbSceneParam._m0[63u].z, fma(_1672, cbSceneParam._m0[63u].y, _1668 * cbSceneParam._m0[63u].x)));
        float _1885 = fma(_1680, cbSceneParam._m0[60u].w, fma(_1676, cbSceneParam._m0[60u].z, fma(_1672, cbSceneParam._m0[60u].y, _1668 * cbSceneParam._m0[60u].x))) / _1884;
        float _1886 = fma(_1680, cbSceneParam._m0[61u].w, fma(_1676, cbSceneParam._m0[61u].z, fma(_1672, cbSceneParam._m0[61u].y, _1668 * cbSceneParam._m0[61u].x))) / _1884;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1885 >= cbSceneParam._m0[64u].x) && (_1886 >= cbSceneParam._m0[64u].y)) && (_1885 <= cbSceneParam._m0[64u].z)) && (_1886 <= cbSceneParam._m0[64u].w))
        {
            float _2025 = fma(_1680, cbSceneParam._m0[62u].w, fma(_1676, cbSceneParam._m0[62u].z, fma(_1672, cbSceneParam._m0[62u].y, _1668 * cbSceneParam._m0[62u].x))) / _1884;
            float _2029 = isnan(cbSceneParam._m0[41u].w) ? _2025 : (isnan(_2025) ? cbSceneParam._m0[41u].w : max(_2025, cbSceneParam._m0[41u].w));
            float _2072 = (cbSceneParam._m0[33u].x - sqrt(((_1682 * _1682) + (_1681 * _1681)) + (_1683 * _1683))) * cbSceneParam._m0[33u].y;
            float _4214 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
            float _2079 = (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1885, cbSceneParam._m0[33u].w + _1886), _2029), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1885, _1886 - cbSceneParam._m0[33u].z), _2029), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1885 - cbSceneParam._m0[33u].z, _1886 - cbSceneParam._m0[33u].w), _2029), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1885 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1886), _2029), 0.0)).x), vec4(0.25)));
            float _2083 = 1.0 - (_2079 * cbSceneParam._m0[34u].x);
            float _2084 = 1.0 - (_2079 * cbSceneParam._m0[34u].y);
            float _2085 = 1.0 - (_2079 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2085) ? _1832 : (isnan(_1832) ? _2085 : min(_1832, _2085));
            frontier_phi_34_33_ladder_1 = isnan(_2084) ? _1831 : (isnan(_1831) ? _2084 : min(_1831, _2084));
            frontier_phi_34_33_ladder_2 = isnan(_2083) ? _1830 : (isnan(_1830) ? _2083 : min(_1830, _2083));
        }
        else
        {
            frontier_phi_34_33_ladder = _1832;
            frontier_phi_34_33_ladder_1 = _1831;
            frontier_phi_34_33_ladder_2 = _1830;
        }
        _1896 = frontier_phi_34_33_ladder_2;
        _1898 = frontier_phi_34_33_ladder_1;
        _1900 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1896 = _1830;
        _1898 = _1831;
        _1900 = _1832;
    }
    uvec4 _1905 = floatBitsToUint(cbInstanceData._m0[_522 + 5u]);
    uint _1907 = _1905.x * 14u;
    uint _1908 = _1907 + 13u;
    float _1915 = _547 + (-1.0);
    float _1920 = (cbLight._m0[_1908].x * _1915) + 1.0;
    float _1921 = (cbLight._m0[_1908].y * _1915) + 1.0;
    float _1922 = (cbLight._m0[_1908].z * _1915) + 1.0;
    float _1923 = (cbLight._m0[_1908].w * _1915) + 1.0;
    uint _1924 = _1907 + 5u;
    float _1930 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
    uint _1934 = _1907 + 4u;
    float _1944 = isnan(1.0) ? _1920 : (isnan(_1920) ? 1.0 : min(_1920, 1.0));
    uint _1948 = _1907 | 1u;
    float _1959 = dot(vec3(cbLight._m0[_1907].xyz), vec3(_423, _424, _425));
    float _1962 = dot(vec3(cbLight._m0[_1948].xyz), vec3(_423, _424, _425));
    float _4250 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _4261 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1967 = (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * 0.3183098733425140380859375;
    float _1969 = (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * 0.3183098733425140380859375;
    float _1976 = ((cbLight._m0[_1924].x * _1930) * _1969) + (((cbLight._m0[_1934].x * _1896) * _1944) * _1967);
    float _1977 = ((_1930 * cbLight._m0[_1924].y) * _1969) + (((cbLight._m0[_1934].y * _1898) * _1944) * _1967);
    float _1978 = ((_1930 * cbLight._m0[_1924].z) * _1969) + (((cbLight._m0[_1934].z * _1900) * _1944) * _1967);
    uvec4 _1982 = floatBitsToUint(cbLight._m0[_1907 + 12u]);
    bool _1984 = _1982.x == 0u;
    float _2086;
    float _2088;
    float _2090;
    if (_1984)
    {
        _2086 = _1976;
        _2088 = _1977;
        _2090 = _1978;
    }
    else
    {
        uint _2094 = _1907 + 6u;
        float _2110 = (dot(vec3(cbLight._m0[_1907 + 2u].xyz), vec3(_423, _424, _425)) * 0.5) + 0.5;
        float _2111 = _2110 * _2110;
        float _4272 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2112 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _2113 = isnan(1.0) ? _1922 : (isnan(_1922) ? 1.0 : min(_1922, 1.0));
        _2086 = (((cbLight._m0[_2094].x * 0.3183098733425140380859375) * _2112) * _2113) + _1976;
        _2088 = (((cbLight._m0[_2094].y * 0.3183098733425140380859375) * _2112) * _2113) + _1977;
        _2090 = (((cbLight._m0[_2094].z * 0.3183098733425140380859375) * _2112) * _2113) + _1978;
    }
    bool _2093 = _1982.y == 0u;
    float _2148;
    float _2150;
    float _2152;
    if (_2093)
    {
        _2148 = _2086;
        _2150 = _2088;
        _2152 = _2090;
    }
    else
    {
        uint _2310 = _1907 + 7u;
        float _2326 = (dot(vec3(cbLight._m0[_1907 + 3u].xyz), vec3(_423, _424, _425)) * 0.5) + 0.5;
        float _2327 = _2326 * _2326;
        float _4288 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2328 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _2329 = isnan(1.0) ? _1923 : (isnan(_1923) ? 1.0 : min(_1923, 1.0));
        _2148 = (((cbLight._m0[_2310].x * 0.3183098733425140380859375) * _2328) * _2329) + _2086;
        _2150 = (((cbLight._m0[_2310].y * 0.3183098733425140380859375) * _2328) * _2329) + _2088;
        _2152 = (((cbLight._m0[_2310].z * 0.3183098733425140380859375) * _2328) * _2329) + _2090;
    }
    uint _2155 = _1907 + 8u;
    float _2168 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1907].w)) * _456) * 0.949999988079071044921875);
    float _2169 = _2168 * _2168;
    float _2170 = cbLight._m0[_1907].x + _290;
    float _2171 = cbLight._m0[_1907].y + _291;
    float _2172 = cbLight._m0[_1907].z + _292;
    float _2176 = inversesqrt(dot(vec3(_2170, _2171, _2172), vec3(_2170, _2171, _2172)));
    float _2177 = _2176 * _2170;
    float _2178 = _2176 * _2171;
    float _2179 = _2176 * _2172;
    float _2180 = dot(vec3(_423, _424, _425), vec3(cbLight._m0[_1907].xyz));
    float _4304 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2183 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
    float _4315 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _2184 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _2185 = dot(vec3(_423, _424, _425), vec3(_2177, _2178, _2179));
    float _4326 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2188 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _2189 = dot(vec3(cbLight._m0[_1907].xyz), vec3(_2177, _2178, _2179));
    float _4337 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2193 = _2169 * _2169;
    float _2197 = ((_2188 * _2188) * (_2193 + (-1.0))) + 1.0;
    float _2208 = (exp2(log2(1.0 - (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2209 = 1.0 - _2169;
    float _2220 = (0.5 / (((_2184 * ((_2183 * _2209) + _2169)) + 9.9999999392252902907785028219223e-09) + (((_2184 * _2209) + _2169) * _2183))) * _2183;
    float _4348 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2222 = (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_2193 / ((_2197 * _2197) * 3.141590118408203125));
    uint _2236 = _1907 + 9u;
    float _2247 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1948].w)) * _456) * 0.949999988079071044921875);
    float _2248 = _2247 * _2247;
    float _2249 = cbLight._m0[_1948].x + _290;
    float _2250 = cbLight._m0[_1948].y + _291;
    float _2251 = cbLight._m0[_1948].z + _292;
    float _2255 = inversesqrt(dot(vec3(_2249, _2250, _2251), vec3(_2249, _2250, _2251)));
    float _2256 = _2255 * _2249;
    float _2257 = _2255 * _2250;
    float _2258 = _2255 * _2251;
    float _2259 = dot(vec3(_423, _424, _425), vec3(cbLight._m0[_1948].xyz));
    float _4359 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2262 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    float _2263 = dot(vec3(_423, _424, _425), vec3(_2256, _2257, _2258));
    float _4370 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2266 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
    float _2267 = dot(vec3(cbLight._m0[_1948].xyz), vec3(_2256, _2257, _2258));
    float _4381 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2271 = _2248 * _2248;
    float _2275 = ((_2266 * _2266) * (_2271 + (-1.0))) + 1.0;
    float _2284 = (exp2(log2(1.0 - (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2285 = 1.0 - _2248;
    float _2295 = (0.5 / (((_2184 * ((_2262 * _2285) + _2248)) + 9.9999999392252902907785028219223e-09) + (((_2184 * _2285) + _2248) * _2262))) * _2262;
    float _4392 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2297 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_2271 / ((_2275 * _2275) * 3.141590118408203125));
    float _2307 = (((_2284 * cbLight._m0[_2236].x) * _2297) * _1930) + ((((cbLight._m0[_2155].x * _1896) * _2208) * _2222) * _1944);
    float _2308 = (((_2284 * cbLight._m0[_2236].y) * _2297) * _1930) + ((((cbLight._m0[_2155].y * _1898) * _2208) * _2222) * _1944);
    float _2309 = (((_2284 * cbLight._m0[_2236].z) * _2297) * _1930) + ((((cbLight._m0[_2155].z * _1900) * _2208) * _2222) * _1944);
    float _2365;
    float _2367;
    float _2369;
    if (_1984)
    {
        _2365 = _2307;
        _2367 = _2308;
        _2369 = _2309;
    }
    else
    {
        uint _2371 = _1907 + 2u;
        uint _2375 = _1907 + 10u;
        float _2389 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2371].w)) * _456) * 0.949999988079071044921875);
        float _2390 = _2389 * _2389;
        float _2391 = cbLight._m0[_2371].x + _290;
        float _2392 = cbLight._m0[_2371].y + _291;
        float _2393 = cbLight._m0[_2371].z + _292;
        float _2397 = inversesqrt(dot(vec3(_2391, _2392, _2393), vec3(_2391, _2392, _2393)));
        float _2398 = _2397 * _2391;
        float _2399 = _2397 * _2392;
        float _2400 = _2397 * _2393;
        float _2401 = dot(vec3(_423, _424, _425), vec3(cbLight._m0[_2371].xyz));
        float _4403 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2404 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _2405 = dot(vec3(_423, _424, _425), vec3(_2398, _2399, _2400));
        float _4414 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2408 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _2409 = dot(vec3(cbLight._m0[_2371].xyz), vec3(_2398, _2399, _2400));
        float _4425 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2413 = _2390 * _2390;
        float _2417 = ((_2408 * _2408) * (_2413 + (-1.0))) + 1.0;
        float _2426 = (exp2(log2(1.0 - (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2427 = 1.0 - _2390;
        float _2437 = (0.5 / (((_2184 * ((_2404 * _2427) + _2390)) + 9.9999999392252902907785028219223e-09) + (((_2184 * _2427) + _2390) * _2404))) * _2404;
        float _4436 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2439 = (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_2413 / ((_2417 * _2417) * 3.141590118408203125));
        float _2440 = isnan(1.0) ? _1922 : (isnan(_1922) ? 1.0 : min(_1922, 1.0));
        _2365 = (((_2426 * cbLight._m0[_2375].x) * _2439) * _2440) + _2307;
        _2367 = (((_2426 * cbLight._m0[_2375].y) * _2439) * _2440) + _2308;
        _2369 = (((_2426 * cbLight._m0[_2375].z) * _2439) * _2440) + _2309;
    }
    float _2471;
    float _2473;
    float _2475;
    if (_2093)
    {
        _2471 = _2365;
        _2473 = _2367;
        _2475 = _2369;
    }
    else
    {
        uint _2482 = _1907 + 3u;
        uint _2486 = _1907 + 11u;
        float _2500 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2482].w)) * _456) * 0.949999988079071044921875);
        float _2501 = _2500 * _2500;
        float _2502 = cbLight._m0[_2482].x + _290;
        float _2503 = cbLight._m0[_2482].y + _291;
        float _2504 = cbLight._m0[_2482].z + _292;
        float _2508 = inversesqrt(dot(vec3(_2502, _2503, _2504), vec3(_2502, _2503, _2504)));
        float _2509 = _2508 * _2502;
        float _2510 = _2508 * _2503;
        float _2511 = _2508 * _2504;
        float _2512 = dot(vec3(_423, _424, _425), vec3(cbLight._m0[_2482].xyz));
        float _4452 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2515 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _2516 = dot(vec3(_423, _424, _425), vec3(_2509, _2510, _2511));
        float _4463 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2519 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _2520 = dot(vec3(cbLight._m0[_2482].xyz), vec3(_2509, _2510, _2511));
        float _4474 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2524 = _2501 * _2501;
        float _2528 = ((_2519 * _2519) * (_2524 + (-1.0))) + 1.0;
        float _2537 = (exp2(log2(1.0 - (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2538 = 1.0 - _2501;
        float _2548 = (0.5 / (((_2184 * ((_2515 * _2538) + _2501)) + 9.9999999392252902907785028219223e-09) + (((_2184 * _2538) + _2501) * _2515))) * _2515;
        float _4485 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2550 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_2524 / ((_2528 * _2528) * 3.141590118408203125));
        float _2551 = isnan(1.0) ? _1923 : (isnan(_1923) ? 1.0 : min(_1923, 1.0));
        _2471 = (((_2537 * cbLight._m0[_2486].x) * _2550) * _2551) + _2365;
        _2473 = (((_2537 * cbLight._m0[_2486].y) * _2550) * _2551) + _2367;
        _2475 = (((_2537 * cbLight._m0[_2486].z) * _2550) * _2551) + _2369;
    }
    float _2617;
    float _2619;
    float _2621;
    float _2623;
    float _2625;
    float _2627;
    if (_1905.y == 0u)
    {
        uvec4 _2572 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2573 = _2572.x;
        uint _2584 = uint((float(_2572.y) * floor(float(uint(cbSceneParam._m0[85u].y * _482) / _2573))) + floor(float(uint(cbSceneParam._m0[85u].x * _481) / _2573)));
        float _2594 = (log2(_1683 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2595 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        uint _2598 = uint(isnan(14.0) ? _2595 : (isnan(_2595) ? 14.0 : min(_2595, 14.0)));
        uvec4 _2603 = texelFetch(g_lightClusterGridBuffer, int(((_2598 << 2u) + (_2584 << 6u)) >> 2u));
        uint _2604 = _2603.x;
        uint _2605 = _2572.z;
        float _2754;
        float _2756;
        float _2758;
        float _2760;
        float _2762;
        float _2764;
        if (((((1u << ((_2605 >> 4u) & 15u)) + 4294967295u) & _2604) == 0u) || ((_2605 & 240u) == 0u))
        {
            _2754 = 0.0;
            _2756 = 0.0;
            _2758 = 0.0;
            _2760 = 0.0;
            _2762 = 0.0;
            _2764 = 0.0;
        }
        else
        {
            float _2755;
            float _2757;
            float _2759;
            float _2761;
            float _2763;
            float _2765;
            float _2930 = 0.0;
            float _2931 = 0.0;
            float _2932 = 0.0;
            float _2933 = 0.0;
            float _2934 = 0.0;
            float _2935 = 0.0;
            uint _2936 = 0u;
            uint _2945;
            bool _2946;
            for (;;)
            {
                _2945 = texelFetch(g_lightClassification, int((((_2598 << 5u) + (_2584 << 9u)) + (_2936 << 2u)) >> 2u)).x;
                _2946 = _2945 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2946)
                {
                    frontier_phi_66_pred = _2935;
                    frontier_phi_66_pred_1 = _2934;
                    frontier_phi_66_pred_2 = _2933;
                    frontier_phi_66_pred_3 = _2932;
                    frontier_phi_66_pred_4 = _2931;
                    frontier_phi_66_pred_5 = _2930;
                }
                else
                {
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    float _3058;
                    float _3059;
                    uint _3060;
                    _3054 = _2930;
                    _3055 = _2931;
                    _3056 = _2932;
                    _3057 = _2933;
                    _3058 = _2934;
                    _3059 = _2935;
                    _3060 = _2945;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    float _2991;
                    for (;;)
                    {
                        uint _3064 = uint(findLSB(_3060)) + (_2936 << 5u);
                        uint _3061 = (_3060 + 4294967295u) & _3060;
                        uint _3066 = _3064 * 48u;
                        vec4 _3080 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3066)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 3u)).x));
                        uint _3086 = (_3064 * 48u) + 4u;
                        vec4 _3099 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3086)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 3u)).x));
                        uint _3105 = (_3064 * 48u) + 8u;
                        vec3 _3116 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3105)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 2u)).x));
                        float _3120 = _3080.x - _1681;
                        float _3121 = _3080.y - _1682;
                        float _3122 = _3080.z - _1683;
                        float _3123 = dot(vec3(_3120, _3121, _3122), vec3(_3120, _3121, _3122));
                        float _3126 = inversesqrt(_3123);
                        float _3127 = _3126 * _3120;
                        float _3128 = _3126 * _3121;
                        float _3129 = _3126 * _3122;
                        float _3130 = dot(vec3(_503, _506, _509), vec3(_3127, _3128, _3129));
                        float _3135 = 1.0 - (_3123 * _3080.w);
                        float _4511 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                        float _3136 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                        float _3137 = sqrt(_3123) * _3099.w;
                        float _3140 = 1.39999997615814208984375 / (_3137 + 1.39999997615814208984375);
                        float _3141 = _3140 * _3140;
                        float _3144 = ((1.0 - _3141) * _3130) + _3141;
                        float _3147 = _3137 * _3137;
                        float _3151 = ((isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0))) * _3136) / ((_3147 * 0.699999988079071044921875) + 1.0);
                        float _3155 = (-0.0) - _1681;
                        float _3156 = (-0.0) - _1682;
                        float _3157 = (-0.0) - _1683;
                        float _3161 = inversesqrt(dot(vec3(_3155, _3156, _3157), vec3(_3155, _3156, _3157)));
                        float _3162 = _3161 * _3155;
                        float _3163 = _3161 * _3156;
                        float _3164 = _3161 * _3157;
                        float _3171 = exp2(log2(1.0 / ((_3147 * 3.5) + 5.0)) * 0.25);
                        float _3172 = 1.0 - _571;
                        float _3179 = sqrt(1.0 - ((1.0 - (_3172 * _3172)) * (1.0 - (_3171 * _3171))));
                        float _3180 = _3179 * _3179;
                        float _3181 = _3180 * _3180;
                        float _3182 = _3162 + _3127;
                        float _3183 = _3163 + _3128;
                        float _3184 = _3164 + _3129;
                        float _3188 = inversesqrt(dot(vec3(_3182, _3183, _3184), vec3(_3182, _3183, _3184)));
                        float _3192 = dot(vec3(_503, _506, _509), vec3(_3162, _3163, _3164));
                        float _4527 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                        float _3195 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                        float _3196 = dot(vec3(_503, _506, _509), vec3(_3188 * _3182, _3188 * _3183, _3188 * _3184));
                        float _4538 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                        float _3199 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
                        float _3203 = ((_3199 * _3199) * (_3181 + (-1.0))) + 1.0;
                        float _3204 = _3140 * _3180;
                        float _3205 = _3204 * _3204;
                        float _3208 = ((1.0 - _3205) * _3130) + _3205;
                        float _4549 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                        float _3209 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                        float _3210 = 1.0 - _3180;
                        float _3220 = (0.5 / (((_3209 * ((_3195 * _3210) + _3180)) + 9.9999999392252902907785028219223e-09) + (((_3209 * _3210) + _3180) * _3195))) * _3209;
                        float _4560 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                        float _3231 = (((_3181 * 3.1415927410125732421875) * (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0)))) / ((_3203 * _3203) * ((_3147 * 2.1991131305694580078125) + 3.141590118408203125))) * _3136;
                        _2989 = (_3151 * _3099.x) + _3057;
                        _2990 = (_3151 * _3099.y) + _3058;
                        _2991 = (_3151 * _3099.z) + _3059;
                        _2986 = (_3231 * _3116.x) + _3054;
                        _2987 = (_3231 * _3116.y) + _3055;
                        _2988 = (_3231 * _3116.z) + _3056;
                        if (_3061 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3054 = _2986;
                            _3055 = _2987;
                            _3056 = _2988;
                            _3057 = _2989;
                            _3058 = _2990;
                            _3059 = _2991;
                            _3060 = _3061;
                        }
                    }
                    frontier_phi_66_pred = _2991;
                    frontier_phi_66_pred_1 = _2990;
                    frontier_phi_66_pred_2 = _2989;
                    frontier_phi_66_pred_3 = _2988;
                    frontier_phi_66_pred_4 = _2987;
                    frontier_phi_66_pred_5 = _2986;
                }
                _2765 = frontier_phi_66_pred;
                _2763 = frontier_phi_66_pred_1;
                _2761 = frontier_phi_66_pred_2;
                _2759 = frontier_phi_66_pred_3;
                _2757 = frontier_phi_66_pred_4;
                _2755 = frontier_phi_66_pred_5;
                uint _2937 = _2936 + 1u;
                if (_2937 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2930 = _2755;
                    _2931 = _2757;
                    _2932 = _2759;
                    _2933 = _2761;
                    _2934 = _2763;
                    _2935 = _2765;
                    _2936 = _2937;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2754 = _2755;
            _2756 = _2757;
            _2758 = _2759;
            _2760 = _2761;
            _2762 = _2763;
            _2764 = _2765;
        }
        uvec4 _2768 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2769 = _2768.z;
        uint _2771 = (_2769 >> 8u) & 15u;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        if (((4294967295u << _2771) & _2604) == 0u)
        {
            _2898 = _2754;
            _2900 = _2756;
            _2902 = _2758;
            _2904 = _2760;
            _2906 = _2762;
            _2908 = _2764;
        }
        else
        {
            float _2923 = inversesqrt(dot(vec3(_1681, _1682, _1683), vec3(_1681, _1682, _1683)));
            float _2924 = _2923 * _1681;
            float _2925 = _2923 * _1682;
            float _2926 = _2923 * _1683;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2771 < ((_2769 >> 12u) & 15u))
            {
                float _2899;
                float _2901;
                float _2903;
                float _2905;
                float _2907;
                float _2909;
                float _3037 = _2754;
                float _3038 = _2756;
                float _3039 = _2758;
                float _3040 = _2760;
                float _3041 = _2762;
                float _3042 = _2764;
                uint _3043 = _2771;
                uint _3052;
                bool _3053;
                for (;;)
                {
                    _3052 = texelFetch(g_lightClassification, int((((_2598 << 5u) + (_2584 << 9u)) + (_3043 << 2u)) >> 2u)).x;
                    _3053 = _3052 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3053)
                    {
                        frontier_phi_72_pred = _3042;
                        frontier_phi_72_pred_1 = _3041;
                        frontier_phi_72_pred_2 = _3040;
                        frontier_phi_72_pred_3 = _3039;
                        frontier_phi_72_pred_4 = _3038;
                        frontier_phi_72_pred_5 = _3037;
                    }
                    else
                    {
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3249 = _3037;
                        float _3250 = _3038;
                        float _3251 = _3039;
                        float _3252 = _3040;
                        float _3253 = _3041;
                        float _3254 = _3042;
                        uint _3255 = _3052;
                        uint _3256;
                        vec4 _3281;
                        float _3282;
                        vec4 _3297;
                        vec3 _3309;
                        vec4 _3325;
                        vec4 _3341;
                        float _3388;
                        bool _3389;
                        for (;;)
                        {
                            uint _3266 = ((_3043 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3255));
                            _3256 = (_3255 + 4294967295u) & _3255;
                            uint _3268 = _3266 * 40u;
                            _3281 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3268)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 3u)).x));
                            _3282 = _3281.w;
                            uint _3284 = (_3266 * 40u) + 4u;
                            _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            uint _3299 = (_3266 * 40u) + 8u;
                            _3309 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x));
                            uint _3312 = (_3266 * 40u) + 16u;
                            _3325 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3312)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 3u)).x));
                            uint _3328 = (_3266 * 40u) + 20u;
                            _3341 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 3u)).x));
                            uint _3344 = (_3266 * 40u) + 24u;
                            vec4 _3357 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3344)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 3u)).x));
                            uint _3363 = (_3266 * 40u) + 28u;
                            vec4 _3376 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 3u)).x));
                            _3388 = fma(_1683, _3376.z, fma(_1682, _3376.y, _3376.x * _1681)) + _3376.w;
                            _3389 = !((fma(_1683, _3357.z, fma(_1682, _3357.y, _3357.x * _1681)) + _3357.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3389)
                            {
                                float _3416 = _3281.x - _1681;
                                float _3417 = _3281.y - _1682;
                                float _3418 = _3281.z - _1683;
                                float _3419 = dot(vec3(_3416, _3417, _3418), vec3(_3416, _3417, _3418));
                                float _3422 = inversesqrt(_3419);
                                float _3423 = _3422 * _3416;
                                float _3424 = _3422 * _3417;
                                float _3425 = _3422 * _3418;
                                float _3429 = 1.0 - (_3419 / (_3282 * _3282));
                                float _4571 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                                float _3430 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                                float _3434 = sqrt(_3419) * _3297.w;
                                float _3436 = 1.39999997615814208984375 / (_3434 + 1.39999997615814208984375);
                                float _3437 = _3436 * _3436;
                                float _3440 = ((1.0 - _3437) * dot(vec3(_3423, _3424, _3425), vec3(_503, _506, _509))) + _3437;
                                float _3443 = _3434 * _3434;
                                float _3447 = (fma(_1683, _3325.z, fma(_1682, _3325.y, _3325.x * _1681)) + _3325.w) / _3388;
                                float _3448 = (fma(_1683, _3341.z, fma(_1682, _3341.y, _3341.x * _1681)) + _3341.w) / _3388;
                                float _3452 = 1.0 - dot(vec2(_3447, _3448), vec2(_3447, _3448));
                                float _4587 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                                float _3453 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                                float _3454 = _3453 * (((isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0))) * _3430) / ((_3443 * 0.699999988079071044921875) + 1.0));
                                float _3466 = exp2(log2(1.0 / ((_3443 * 3.5) + 5.0)) * 0.25);
                                float _3467 = 1.0 - _571;
                                float _3474 = sqrt(1.0 - ((1.0 - (_3467 * _3467)) * (1.0 - (_3466 * _3466))));
                                float _3475 = _3474 * _3474;
                                float _3476 = _3475 * _3475;
                                float _3477 = _3423 - _2924;
                                float _3478 = _3424 - _2925;
                                float _3479 = _3425 - _2926;
                                float _3483 = inversesqrt(dot(vec3(_3477, _3478, _3479), vec3(_3477, _3478, _3479)));
                                float _3487 = dot(vec3(_503, _506, _509), vec3((-0.0) - _2924, (-0.0) - _2925, (-0.0) - _2926));
                                float _4598 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                                float _3490 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
                                float _3491 = dot(vec3(_503, _506, _509), vec3(_3483 * _3477, _3483 * _3478, _3483 * _3479));
                                float _4609 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3494 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                                float _3498 = ((_3494 * _3494) * (_3476 + (-1.0))) + 1.0;
                                float _3499 = _3436 * _3475;
                                float _3500 = _3499 * _3499;
                                float _3506 = ((1.0 - _3500) * dot(vec3(_503, _506, _509), vec3(_3423, _3424, _3425))) + _3500;
                                float _4620 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                                float _3507 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                                float _3508 = 1.0 - _3475;
                                float _3518 = (0.5 / (((_3507 * ((_3490 * _3508) + _3475)) + 9.9999999392252902907785028219223e-09) + (((_3507 * _3508) + _3475) * _3490))) * _3507;
                                float _4631 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3528 = (_3453 * _3430) * (((_3476 * 3.1415927410125732421875) * (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0)))) / ((_3498 * _3498) * ((_3443 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3454 * _3297.y;
                                frontier_phi_78_pred_1 = _3454 * _3297.x;
                                frontier_phi_78_pred_2 = _3528 * _3309.z;
                                frontier_phi_78_pred_3 = _3528 * _3309.y;
                                frontier_phi_78_pred_4 = _3528 * _3309.x;
                                frontier_phi_78_pred_5 = _3454 * _3297.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3536 = frontier_phi_78_pred;
                            _3535 = frontier_phi_78_pred_1;
                            _3534 = frontier_phi_78_pred_2;
                            _3533 = frontier_phi_78_pred_3;
                            _3532 = frontier_phi_78_pred_4;
                            _3537 = frontier_phi_78_pred_5;
                            _3239 = _3535 + _3252;
                            _3240 = _3536 + _3253;
                            _3241 = _3537 + _3254;
                            _3236 = _3532 + _3249;
                            _3237 = _3533 + _3250;
                            _3238 = _3534 + _3251;
                            if (_3256 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3249 = _3236;
                                _3250 = _3237;
                                _3251 = _3238;
                                _3252 = _3239;
                                _3253 = _3240;
                                _3254 = _3241;
                                _3255 = _3256;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3241;
                        frontier_phi_72_pred_1 = _3240;
                        frontier_phi_72_pred_2 = _3239;
                        frontier_phi_72_pred_3 = _3238;
                        frontier_phi_72_pred_4 = _3237;
                        frontier_phi_72_pred_5 = _3236;
                    }
                    _2909 = frontier_phi_72_pred;
                    _2907 = frontier_phi_72_pred_1;
                    _2905 = frontier_phi_72_pred_2;
                    _2903 = frontier_phi_72_pred_3;
                    _2901 = frontier_phi_72_pred_4;
                    _2899 = frontier_phi_72_pred_5;
                    uint _3044 = _3043 + 1u;
                    if (_3044 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3037 = _2899;
                        _3038 = _2901;
                        _3039 = _2903;
                        _3040 = _2905;
                        _3041 = _2907;
                        _3042 = _2909;
                        _3043 = _3044;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2909;
                frontier_phi_60_61_ladder_1 = _2907;
                frontier_phi_60_61_ladder_2 = _2903;
                frontier_phi_60_61_ladder_3 = _2901;
                frontier_phi_60_61_ladder_4 = _2899;
                frontier_phi_60_61_ladder_5 = _2905;
            }
            else
            {
                frontier_phi_60_61_ladder = _2764;
                frontier_phi_60_61_ladder_1 = _2762;
                frontier_phi_60_61_ladder_2 = _2758;
                frontier_phi_60_61_ladder_3 = _2756;
                frontier_phi_60_61_ladder_4 = _2754;
                frontier_phi_60_61_ladder_5 = _2760;
            }
            _2898 = frontier_phi_60_61_ladder_4;
            _2900 = frontier_phi_60_61_ladder_3;
            _2902 = frontier_phi_60_61_ladder_2;
            _2904 = frontier_phi_60_61_ladder_5;
            _2906 = frontier_phi_60_61_ladder_1;
            _2908 = frontier_phi_60_61_ladder;
        }
        float _2913 = isnan(1.0) ? _547 : (isnan(_547) ? 1.0 : min(_547, 1.0));
        _2617 = (_2913 * _2904) + _2148;
        _2619 = (_2913 * _2906) + _2150;
        _2621 = (_2913 * _2908) + _2152;
        _2623 = ((_2898 * 0.039999999105930328369140625) * _2913) + _2471;
        _2625 = ((_2900 * 0.039999999105930328369140625) * _2913) + _2473;
        _2627 = ((_2902 * 0.039999999105930328369140625) * _2913) + _2475;
    }
    else
    {
        _2617 = _2148;
        _2619 = _2150;
        _2621 = _2152;
        _2623 = _2471;
        _2625 = _2473;
        _2627 = _2475;
    }
    float _2641 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2642 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2643 = cbSceneParam._m0[86u].x * (_1593 + ((_570 * cbMtdParam._m0[13u].y) * dot(vec3(_423, _424, _425), vec3(_193, _194, _195))));
    float _2644 = isnan(_2641) ? _2643 : (isnan(_2643) ? _2641 : min(_2643, _2641));
    float _2645 = isnan(_2642) ? _482 : (isnan(_482) ? _2642 : min(_482, _2642));
    vec4 _2647 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2644, _2645), 0.0);
    float _2649 = _2647.x;
    bool _2670 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2649)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2649))) > _475;
    vec4 _2674 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2670 ? _2644 : _481, _2670 ? _2645 : _482));
    float _4657 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _4668 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _4679 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _2698 = 0.959999978542327880859375 - (exp2(log2(1.0 - _562) * 5.0) * 0.959999978542327880859375);
    float _2700 = (_2674.x * _2698) * cbSceneParam._m0[72u].w;
    float _2702 = (_2674.y * _2698) * cbSceneParam._m0[72u].w;
    float _2704 = (_2674.z * _2698) * cbSceneParam._m0[72u].w;
    float _2725 = _481 / cbSceneParam._m0[86u].x;
    float _2726 = _482 / cbSceneParam._m0[86u].y;
    vec4 _2740 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2725, _2726, (log2((isnan(cbSceneParam._m0[77u].w) ? _475 : (isnan(_475) ? cbSceneParam._m0[77u].w : min(_475, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2742 = _2740.x;
    float _2743 = _2740.y;
    float _2744 = _2740.z;
    float _2745 = _2740.w;
    float _2816;
    float _2818;
    float _2820;
    float _2822;
    if (_475 > cbSceneParam._m0[78u].w)
    {
        float _2779 = isnan(_475) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _475 : min(cbSceneParam._m0[80u].w, _475));
        float _2780 = _2779 / _475;
        float _2791 = _2780 * _264;
        float _2792 = _265 * _2780;
        float _2793 = (-0.0) - _2792;
        float _2794 = _2780 * _266;
        float _2796 = (cbSceneParam._m0[77u].w * _2793) / _2779;
        float _2797 = _2796 + cbSceneParam._m0[79u].w;
        float _2798 = cbSceneParam._m0[79u].w - _2792;
        float _2804 = sqrt(((_2791 * _2791) + (_2792 * _2792)) + (_2794 * _2794));
        float _2807 = (1.0 - (cbSceneParam._m0[77u].w / _2779)) * _2804;
        float _2812 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2814 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2999;
        if (abs((_2793 - _2796) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2999 = ((((_2797 > 0.0) ? exp2(_2812 * _2797) : (2.0 - exp2(_2814 * _2797))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2807;
        }
        else
        {
            float _2959 = 1.0 / cbSceneParam._m0[80u].x;
            float _2960 = isnan(_2798) ? _2797 : (isnan(_2797) ? _2798 : max(_2797, _2798));
            float _2961 = isnan(_2798) ? _2797 : (isnan(_2797) ? _2798 : min(_2797, _2798));
            float _2970 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : min(_2960, 0.0));
            float _2971 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : min(_2961, 0.0));
            _2999 = ((abs(_2804 / _2793) * cbSceneParam._m0[80u].y) * ((((_2970 - _2971) * 2.0) - ((exp2(_2812 * (isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0)))) - exp2(_2812 * (isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0))))) * _2959)) - ((exp2(_2814 * _2970) - exp2(_2814 * _2971)) * _2959))) + (_2807 * cbSceneParam._m0[80u].z);
        }
        vec4 _3001 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2725, _2726, 1.0), 0.0);
        float _3010 = exp2((_2999 * (-1.44269502162933349609375)) * (1.0 - _3001.w));
        float _3011 = log2(_3010);
        float _3027 = log2(_2745);
        _2816 = (exp2(_3027 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3011 * cbSceneParam._m0[78u].x)) * _3001.x) / cbSceneParam._m0[78u].x)) + _2742;
        _2818 = (exp2(_3027 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3011 * cbSceneParam._m0[78u].y)) * _3001.y) / cbSceneParam._m0[78u].y)) + _2743;
        _2820 = (exp2(_3027 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3011 * cbSceneParam._m0[78u].z)) * _3001.z) / cbSceneParam._m0[78u].z)) + _2744;
        _2822 = _3010 * _2745;
    }
    else
    {
        _2816 = _2742;
        _2818 = _2743;
        _2820 = _2744;
        _2822 = _2745;
    }
    bool _2834 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2835 = log2(_2822);
    float _2842 = exp2(_2835 * cbSceneParam._m0[78u].x) * ((_2700 + (((((_1570 * _1618.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))) * _1361) * _1634)) + _2623) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0))) * (_2617 + ((isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0))) * _547))) - _2700) * _454));
    float _2843 = exp2(_2835 * cbSceneParam._m0[78u].y) * ((_2702 + (((((_1570 * _1618.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))) * _1361) * _1634)) + _2625) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_2619 + ((isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0))) * _547))) - _2702) * _454));
    float _2844 = exp2(_2835 * cbSceneParam._m0[78u].z) * ((_2704 + (((((_1570 * _1618.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))) * _1361) * _1634)) + _2627) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * (_2621 + ((isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0))) * _547))) - _2704) * _454));
    vec4 _2852 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_481, _482));
    float _2854 = _2852.x;
    float _2875 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2854)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2854))) - _475) * 3.0;
    float _4730 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
    float _2877 = (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * cbInstanceData._m0[_522 + 6u].w;
    float _2886 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2886 * (_2834 ? _2842 : (_2842 + (cbSceneParam._m0[72u].w * _2816)));
    SV_Target.y = _2886 * (_2834 ? _2843 : (_2843 + (cbSceneParam._m0[72u].w * _2818)));
    SV_Target.z = _2886 * (_2834 ? _2844 : (_2844 + (cbSceneParam._m0[72u].w * _2820)));
    SV_Target.w = _2877;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2877;
}


