#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Ice_test_01_snp_0_Texture2D_10;
layout(set = 0, binding = 1) uniform texture2D M_Ice_test_01_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _922;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _188 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _189 = _188 * _180;
    float _190 = _188 * _181;
    float _191 = _188 * _182;
    float _195 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _196 = _195 * NORMAL.x;
    float _197 = _195 * NORMAL.y;
    float _198 = _195 * NORMAL.z;
    float _202 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _242 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _246 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _250 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _260 = cbSceneParam._m0[71u].x - (_238 / _250);
    float _261 = cbSceneParam._m0[71u].y - (_242 / _250);
    float _262 = cbSceneParam._m0[71u].z - (_246 / _250);
    float _285 = inversesqrt(dot(vec3(_260, _261, _262), vec3(_260, _261, _262)));
    float _286 = _285 * _260;
    float _287 = _285 * _261;
    float _288 = _285 * _262;
    float _292 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _296 = dot(vec4(_286, _287, _288, 0.0), vec4(_292 * _196, _292 * _197, _292 * _198, 0.0));
    float _3388 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _304 = exp2(log2(1.0 - (isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0)))) * cbMtdParam._m0[12u].y);
    float _3399 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _305 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
    float _312 = (_305 * (cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].x)) + cbMtdParam._m0[10u].x;
    float _313 = (_305 * (cbMtdParam._m0[11u].y - cbMtdParam._m0[10u].y)) + cbMtdParam._m0[10u].y;
    float _314 = (_305 * (cbMtdParam._m0[11u].z - cbMtdParam._m0[10u].z)) + cbMtdParam._m0[10u].z;
    vec4 _334 = texture(sampler2D(M_Ice_test_01_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _342 = (_334.x * 2.0) + (-1.0);
    float _344 = (_334.y * 2.0) + (-1.0);
    float _345 = dot(vec2(_342, _344), vec2(_342, _344));
    float _3410 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _350 = sqrt(1.0 - (isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0))));
    float _351 = abs(_196);
    float _352 = abs(_197);
    float _353 = abs(_198);
    float _354 = _351 * _351;
    float _355 = _352 * _352;
    float _356 = _353 * _353;
    float _359 = _242 * 0.0500000007450580596923828125;
    float _369 = (cbTextureTilingScale._m0[1u].x * (_238 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[1u].z;
    vec4 _372 = texture(sampler2D(M_Ice_test_01_snp_0_Texture2D_9, SS_BumpMap), vec2(_369, (cbTextureTilingScale._m0[1u].y * _359) + cbTextureTilingScale._m0[1u].w));
    float _379 = (cbTextureTilingScale._m0[1u].y * (_246 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[1u].w;
    vec4 _380 = texture(sampler2D(M_Ice_test_01_snp_0_Texture2D_9, SS_BumpMap), vec2(_369, _379));
    vec4 _390 = texture(sampler2D(M_Ice_test_01_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _359) + cbTextureTilingScale._m0[1u].z, _379));
    float _404 = ((((((_380.x * _355) + (_372.x * _356)) + (_390.x * _354)) * 2.0) + (-1.0)) * cbMtdParam._m0[12u].w) + _342;
    float _405 = ((((((_380.y * _355) + (_372.y * _356)) + (_390.y * _354)) * 2.0) + (-1.0)) * cbMtdParam._m0[12u].w) + _344;
    float _408 = fma(_350, _196, fma(_405, _202 * TANGENT.x, _404 * _189));
    float _411 = fma(_350, _197, fma(_405, _202 * TANGENT.y, _404 * _190));
    float _414 = fma(_350, _198, fma(_405, _202 * TANGENT.z, _404 * _191));
    float _418 = inversesqrt(dot(vec3(_408, _411, _414), vec3(_408, _411, _414)));
    float _419 = _418 * _408;
    float _420 = _418 * _411;
    float _421 = _418 * _414;
    float _429 = cbMtdParam._m0[13u].x + dot(vec4(_419, _420, _421, 0.0), vec4(cbMtdParam._m0[14u].xyz, 0.0));
    float _3421 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _431 = (isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0))) * TEXCOORD_3.x;
    float _3432 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _432 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
    float _439 = (_432 * (cbMtdParam._m0[9u].x - _312)) + _312;
    float _440 = (_432 * (cbMtdParam._m0[9u].y - _313)) + _313;
    float _441 = (_432 * (cbMtdParam._m0[9u].z - _314)) + _314;
    float _446 = ((cbMtdParam._m0[13u].w - cbMtdParam._m0[12u].x) * _432) + cbMtdParam._m0[12u].x;
    float _449 = cbMtdParam._m0[13u].z + _432;
    float _3443 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _450 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
    float _3454 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _452 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
    float _3465 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _3476 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _3487 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _471 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _477 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _478 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _499 = fma(_421, cbSceneParam._m0[5u].z, fma(_420, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _419));
    float _502 = fma(_421, cbSceneParam._m0[6u].z, fma(_420, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _419));
    float _505 = fma(_421, cbSceneParam._m0[7u].z, fma(_420, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _419));
    uint _518 = uint(roundEven(NORMAL.w)) * 13u;
    uint _520 = (_518 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _526 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0)))) * cbInstanceData._m0[_520].x;
    float _527 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0)))) * cbInstanceData._m0[_520].y;
    float _528 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0)))) * cbInstanceData._m0[_520].z;
    float _3498 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _529 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
    float _3509 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _530 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
    float _3520 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _531 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
    vec4 _540 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _477, cbSceneParam._m0[86u].y * _478));
    float _543 = _540.x * TEXCOORD_3.w;
    float _544 = dot(vec3(_419, _420, _421), vec3(_286, _287, _288));
    float _547 = _544 * 2.0;
    float _551 = (_547 * _419) - _286;
    float _552 = (_547 * _420) - _287;
    float _553 = (_547 * _421) - _288;
    float _557 = abs(dot(vec3(_286, _287, _288), vec3(_419, _420, _421)));
    float _3531 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _558 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
    float _566 = 10.0 / (_471 + 10.0);
    float _567 = sqrt(_452);
    float _579 = exp2((_567 * 5.0) * log2(1.0 - (_558 * 0.999000012874603271484375))) / (4.0 - (_567 * 3.0));
    float _611 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _615 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _619 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _921;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _646 = fma(_619, cbModelParam._m0[26u].z, fma(_615, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _611));
        float _650 = fma(_619, cbModelParam._m0[27u].z, fma(_615, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _611));
        float _654 = fma(_619, cbModelParam._m0[28u].z, fma(_615, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _611));
        float _679 = _611 + _419;
        float _680 = _615 + _420;
        float _681 = _619 + _421;
        float _691 = fma(_681, cbModelParam._m0[26u].z, fma(_680, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _679)) - _646;
        float _692 = fma(_681, cbModelParam._m0[27u].z, fma(_680, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _679)) - _650;
        float _693 = fma(_681, cbModelParam._m0[28u].z, fma(_680, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _679)) - _654;
        float _697 = inversesqrt(dot(vec3(_691, _692, _693), vec3(_691, _692, _693)));
        float _710 = ((_697 * _691) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_646 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _711 = ((_697 * _692) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_650 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _712 = ((_697 * _693) / cbModelParam._m0[34u].z) + ((((((_654 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _715 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_710, _711, _712), 0.0);
        vec4 _722 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_710, _711, _712), 0.0);
        vec4 _729 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_710, _711, _712), 0.0);
        vec4 _736 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_710, _711, _712), 0.0);
        float _749 = exp2((_715.w + (-0.5)) * 20.0) * 2.0;
        float _750 = _749 * (_715.x + (-0.5));
        float _751 = _749 * (_715.y + (-0.5));
        float _752 = _749 * (_715.z + (-0.5));
        float _759 = exp2((_722.w + (-0.5)) * 20.0) * 2.0;
        float _760 = _759 * (_722.x + (-0.5));
        float _761 = _759 * (_722.y + (-0.5));
        float _762 = _759 * (_722.z + (-0.5));
        float _769 = exp2((_729.w + (-0.5)) * 20.0) * 2.0;
        float _770 = _769 * (_729.x + (-0.5));
        float _771 = _769 * (_729.y + (-0.5));
        float _772 = _769 * (_729.z + (-0.5));
        float _779 = exp2((_736.w + (-0.5)) * 20.0) * 2.0;
        float _780 = _779 * (_736.x + (-0.5));
        float _781 = _779 * (_736.y + (-0.5));
        float _782 = _779 * (_736.z + (-0.5));
        float _783 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _784 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _785 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _786 = _750 * 0.5;
        float _787 = _760 * 0.5;
        float _788 = _770 * 0.5;
        float _789 = dot(vec3(_786, _787, _788), vec3(_786, _787, _788));
        float _794 = (_789 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_789);
        float _803 = (dot(vec3(_419, _420, _421), vec3(_794 * _786, _794 * _787, _794 * _788)) + 1.0) * 0.5;
        float _3557 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _813 = sqrt(((_787 * _787) + (_786 * _786)) + (_788 * _788)) / (_783 + 9.9999997473787516355514526367188e-06);
        float _3568 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _814 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
        float _815 = _814 * 2.0;
        float _819 = (1.0 - _814) / (_814 + 1.0);
        float _3579 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _820 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _829 = ((((1.0 - _820) * (_815 + 2.0)) * exp2(log2(isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0))) * (_815 + 1.0))) + _820) * _783;
        float _830 = _751 * 0.5;
        float _831 = _761 * 0.5;
        float _832 = _771 * 0.5;
        float _833 = dot(vec3(_830, _831, _832), vec3(_830, _831, _832));
        float _838 = (_833 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_833);
        float _846 = (dot(vec3(_419, _420, _421), vec3(_838 * _830, _838 * _831, _838 * _832)) + 1.0) * 0.5;
        float _3590 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _855 = sqrt(((_831 * _831) + (_830 * _830)) + (_832 * _832)) / (_784 + 9.9999997473787516355514526367188e-06);
        float _3601 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _856 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
        float _857 = _856 * 2.0;
        float _861 = (1.0 - _856) / (_856 + 1.0);
        float _3612 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _862 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _871 = ((((1.0 - _862) * (_857 + 2.0)) * exp2(log2(isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0))) * (_857 + 1.0))) + _862) * _784;
        float _872 = _752 * 0.5;
        float _873 = _762 * 0.5;
        float _874 = _772 * 0.5;
        float _875 = dot(vec3(_872, _873, _874), vec3(_872, _873, _874));
        float _880 = (_875 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_875);
        float _888 = (dot(vec3(_419, _420, _421), vec3(_880 * _872, _880 * _873, _880 * _874)) + 1.0) * 0.5;
        float _3623 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _897 = sqrt(((_873 * _873) + (_872 * _872)) + (_874 * _874)) / (_785 + 9.9999997473787516355514526367188e-06);
        float _3634 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
        float _899 = _898 * 2.0;
        float _903 = (1.0 - _898) / (_898 + 1.0);
        float _3645 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _904 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _913 = ((((1.0 - _904) * (_899 + 2.0)) * exp2(log2(isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0))) * (_899 + 1.0))) + _904) * _785;
        _921 = _752;
        _923 = _751;
        _924 = _750;
        _925 = _762;
        _926 = _761;
        _927 = _760;
        _928 = _772;
        _929 = _771;
        _930 = _770;
        _931 = _785;
        _932 = _784;
        _933 = _783;
        _934 = cbModelParam._m0[36u].z * (isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0)));
        _935 = cbModelParam._m0[36u].z * (isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0)));
        _936 = cbModelParam._m0[36u].z * (isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0)));
    }
    else
    {
        _921 = _922;
        _923 = _922;
        _924 = _922;
        _925 = _922;
        _926 = _922;
        _927 = _922;
        _928 = _922;
        _929 = _922;
        _930 = _922;
        _931 = _922;
        _932 = _922;
        _933 = _922;
        _934 = 0.0;
        _935 = 0.0;
        _936 = 0.0;
    }
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _962 = fma(_619, cbModelParam._m0[30u].z, fma(_615, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _611));
        float _966 = fma(_619, cbModelParam._m0[31u].z, fma(_615, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _611));
        float _970 = fma(_619, cbModelParam._m0[32u].z, fma(_615, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _611));
        float _993 = _611 + _419;
        float _994 = _615 + _420;
        float _995 = _619 + _421;
        float _1005 = fma(_995, cbModelParam._m0[30u].z, fma(_994, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _993)) - _962;
        float _1006 = fma(_995, cbModelParam._m0[31u].z, fma(_994, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _993)) - _966;
        float _1007 = fma(_995, cbModelParam._m0[32u].z, fma(_994, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _993)) - _970;
        float _1011 = inversesqrt(dot(vec3(_1005, _1006, _1007), vec3(_1005, _1006, _1007)));
        float _1024 = ((_1011 * _1005) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_962 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1025 = ((_1011 * _1006) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_966 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1026 = ((_1011 * _1007) / cbModelParam._m0[35u].z) + ((((((_970 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        float _1061 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1028.x + (-0.5));
        float _1063 = _1061 * (_1028.y + (-0.5));
        float _1064 = _1061 * (_1028.z + (-0.5));
        float _1071 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1035.x + (-0.5));
        float _1073 = _1071 * (_1035.y + (-0.5));
        float _1074 = _1071 * (_1035.z + (-0.5));
        float _1081 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1042.x + (-0.5));
        float _1083 = _1081 * (_1042.y + (-0.5));
        float _1084 = _1081 * (_1042.z + (-0.5));
        float _1091 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1049.x + (-0.5));
        float _1093 = _1091 * (_1049.y + (-0.5));
        float _1094 = _1091 * (_1049.z + (-0.5));
        float _1095 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1096 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = _1062 * 0.5;
        float _1099 = _1072 * 0.5;
        float _1100 = _1082 * 0.5;
        float _1101 = dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100));
        float _1106 = (_1101 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1101);
        float _1114 = (dot(vec3(_419, _420, _421), vec3(_1106 * _1098, _1106 * _1099, _1106 * _1100)) + 1.0) * 0.5;
        float _3686 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1123 = sqrt(((_1099 * _1099) + (_1098 * _1098)) + (_1100 * _1100)) / (_1095 + 9.9999997473787516355514526367188e-06);
        float _3697 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1125 = _1124 * 2.0;
        float _1129 = (1.0 - _1124) / (_1124 + 1.0);
        float _3708 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1139 = ((((1.0 - _1130) * (_1125 + 2.0)) * exp2(log2(isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * (_1125 + 1.0))) + _1130) * _1095;
        float _1140 = _1063 * 0.5;
        float _1141 = _1073 * 0.5;
        float _1142 = _1083 * 0.5;
        float _1143 = dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142));
        float _1148 = (_1143 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1143);
        float _1156 = (dot(vec3(_419, _420, _421), vec3(_1148 * _1140, _1148 * _1141, _1148 * _1142)) + 1.0) * 0.5;
        float _3719 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1165 = sqrt(((_1141 * _1141) + (_1140 * _1140)) + (_1142 * _1142)) / (_1096 + 9.9999997473787516355514526367188e-06);
        float _3730 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1167 = _1166 * 2.0;
        float _1171 = (1.0 - _1166) / (_1166 + 1.0);
        float _3741 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1181 = ((((1.0 - _1172) * (_1167 + 2.0)) * exp2(log2(isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))) * (_1167 + 1.0))) + _1172) * _1096;
        float _1182 = _1064 * 0.5;
        float _1183 = _1074 * 0.5;
        float _1184 = _1084 * 0.5;
        float _1185 = dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184));
        float _1190 = (_1185 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1185);
        float _1198 = (dot(vec3(_419, _420, _421), vec3(_1190 * _1182, _1190 * _1183, _1190 * _1184)) + 1.0) * 0.5;
        float _3752 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1207 = sqrt(((_1183 * _1183) + (_1182 * _1182)) + (_1184 * _1184)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _3763 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1209 = _1208 * 2.0;
        float _1213 = (1.0 - _1208) / (_1208 + 1.0);
        float _3774 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1223 = ((((1.0 - _1214) * (_1209 + 2.0)) * exp2(log2(isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * (_1209 + 1.0))) + _1214) * _1097;
        _1231 = _1064;
        _1232 = _1063;
        _1233 = _1062;
        _1234 = _1074;
        _1235 = _1073;
        _1236 = _1072;
        _1237 = _1084;
        _1238 = _1083;
        _1239 = _1082;
        _1240 = _1097;
        _1241 = _1096;
        _1242 = _1095;
        _1243 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0)));
        _1244 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)));
        _1245 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)));
    }
    else
    {
        _1231 = _922;
        _1232 = _922;
        _1233 = _922;
        _1234 = _922;
        _1235 = _922;
        _1236 = _922;
        _1237 = _922;
        _1238 = _922;
        _1239 = _922;
        _1240 = _922;
        _1241 = _922;
        _1242 = _922;
        _1243 = 0.0;
        _1244 = 0.0;
        _1245 = 0.0;
    }
    float _1255 = (cbModelParam._m0[1u].x * (_1243 - _934)) + _934;
    float _1256 = (cbModelParam._m0[1u].x * (_1244 - _935)) + _935;
    float _1257 = (cbModelParam._m0[1u].x * (_1245 - _936)) + _936;
    float _1278 = fma(_1257, cbSceneParam._m0[89u].z, fma(_1256, cbSceneParam._m0[89u].y, _1255 * cbSceneParam._m0[89u].x));
    float _1281 = fma(_1257, cbSceneParam._m0[90u].z, fma(_1256, cbSceneParam._m0[90u].y, _1255 * cbSceneParam._m0[90u].x));
    float _1284 = fma(_1257, cbSceneParam._m0[91u].z, fma(_1256, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1255));
    float _1299 = _551 * 0.5;
    float _1300 = _552 * 0.5;
    float _1301 = _553 * 0.5;
    float _1302 = dot(vec4(_1299, _1300, _1301, 1.0), vec4(_1233, _1236, _1239, _1242));
    float _1305 = dot(vec4(_1299, _1300, _1301, 1.0), vec4(_1232, _1235, _1238, _1241));
    float _1308 = dot(vec4(_1299, _1300, _1301, 1.0), vec4(_1231, _1234, _1237, _1240));
    float _1342;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1315 = dot(vec4(_1299, _1300, _1301, 1.0), vec4(_921, _925, _928, _931));
        float _1319 = dot(vec4(_1299, _1300, _1301, 1.0), vec4(_923, _926, _929, _932));
        float _1323 = dot(vec4(_1299, _1300, _1301, 1.0), vec4(_924, _927, _930, _933));
        float _1330 = dot(vec4(cbModelParam._m0[39u]), vec4(_1299, _1300, _1301, 1.0));
        _1342 = dot(vec3(isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)), isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)), isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1330) ? 0.0 : (isnan(0.0) ? _1330 : max(0.0, _1330))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1342 = 1.0;
    }
    float _1353;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1344 = dot(vec4(cbModelParam._m0[40u]), vec4(_1299, _1300, _1301, 1.0));
        _1353 = dot(vec3(isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)), isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)), isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1344) ? 0.0 : (isnan(0.0) ? _1344 : max(0.0, _1344))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1353 = 1.0;
    }
    float _1357 = (_1353 * cbModelParam._m0[1u].x) + (_1342 * (1.0 - cbModelParam._m0[1u].x));
    float _1367 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _452);
    float _1368 = isnan(_1367) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1367 : min(cbModelParam._m0[25u].z, _1367));
    float _1448;
    float _1450;
    float _1452;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1415 = fma(_619, cbModelParam._m0[13u].z, fma(_615, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _611)) + cbModelParam._m0[13u].w;
        float _1419 = fma(_619, cbModelParam._m0[14u].z, fma(_615, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _611)) + cbModelParam._m0[14u].w;
        float _1423 = fma(_619, cbModelParam._m0[15u].z, fma(_615, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _611)) + cbModelParam._m0[15u].w;
        float _1426 = fma(_553, cbModelParam._m0[13u].z, fma(_552, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _551));
        float _1429 = fma(_553, cbModelParam._m0[14u].z, fma(_552, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _551));
        float _1432 = fma(_553, cbModelParam._m0[15u].z, fma(_552, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _551));
        float _1460;
        if (_1426 > 0.0)
        {
            _1460 = abs((1.0 - _1415) / _1426);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1426 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1415 + 1.0) / _1426);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1460 = frontier_phi_14_12_ladder;
        }
        float _1717;
        if (_1429 > 0.0)
        {
            _1717 = abs((1.0 - _1419) / _1429);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1429 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1419 + 1.0) / _1429);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1717 = frontier_phi_23_19_ladder;
        }
        float _1960;
        if (_1432 > 0.0)
        {
            _1960 = abs((1.0 - _1423) / _1432);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1432 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1423 + 1.0) / _1432);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1960 = frontier_phi_35_30_ladder;
        }
        float _1962 = isnan(_1717) ? _1460 : (isnan(_1460) ? _1717 : min(_1460, _1717));
        float _1963 = isnan(_1960) ? _1962 : (isnan(_1962) ? _1960 : min(_1962, _1960));
        float _1967 = (_1963 * _1426) + _1415;
        float _1968 = (_1963 * _1429) + _1419;
        float _1969 = (_1963 * _1432) + _1423;
        float _1970 = _1963 * 9.9999997473787516355514526367188e-05;
        float _1972 = (-1.0) - _1970;
        float _1974 = _1970 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1969 > _1974) || ((_1969 < _1972) || ((_1968 > _1974) || ((_1968 < _1972) || ((_1967 < _1972) || (_1967 > _1974))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2093 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1969, cbModelParam._m0[9u].z, fma(_1968, cbModelParam._m0[9u].y, _1967 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1969, cbModelParam._m0[10u].z, fma(_1968, cbModelParam._m0[10u].y, _1967 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1969, cbModelParam._m0[11u].z, fma(_1968, cbModelParam._m0[11u].y, _1967 * cbModelParam._m0[11u].x))), _1368);
            frontier_phi_13_35_ladder = _2093.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2093.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2093.x * cbModelParam._m0[1u].y;
        }
        _1448 = frontier_phi_13_35_ladder_2;
        _1450 = frontier_phi_13_35_ladder_1;
        _1452 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1436 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_551, _552, _553), _1368);
        _1448 = _1436.x * cbModelParam._m0[1u].y;
        _1450 = _1436.y * cbModelParam._m0[1u].y;
        _1452 = _1436.z * cbModelParam._m0[1u].y;
    }
    float _1456 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _452);
    float _1457 = isnan(_1456) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1456 : min(cbModelParam._m0[25u].w, _1456));
    float _1550;
    float _1552;
    float _1554;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1514 = fma(_619, cbModelParam._m0[21u].z, fma(_615, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _611)) + cbModelParam._m0[21u].w;
        float _1518 = fma(_619, cbModelParam._m0[22u].z, fma(_615, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _611)) + cbModelParam._m0[22u].w;
        float _1522 = fma(_619, cbModelParam._m0[23u].z, fma(_615, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _611)) + cbModelParam._m0[23u].w;
        float _1525 = fma(_553, cbModelParam._m0[21u].z, fma(_552, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _551));
        float _1528 = fma(_553, cbModelParam._m0[22u].z, fma(_552, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _551));
        float _1531 = fma(_553, cbModelParam._m0[23u].z, fma(_552, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _551));
        float _1722;
        if (_1525 > 0.0)
        {
            _1722 = abs((1.0 - _1514) / _1525);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1525 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1514 + 1.0) / _1525);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1722 = frontier_phi_25_21_ladder;
        }
        float _1987;
        if (_1528 > 0.0)
        {
            _1987 = abs((1.0 - _1518) / _1528);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1528 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1518 + 1.0) / _1528);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1987 = frontier_phi_37_32_ladder;
        }
        float _2192;
        if (_1531 > 0.0)
        {
            _2192 = abs((1.0 - _1522) / _1531);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1531 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1522 + 1.0) / _1531);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2192 = frontier_phi_46_43_ladder;
        }
        float _2194 = isnan(_1987) ? _1722 : (isnan(_1722) ? _1987 : min(_1722, _1987));
        float _2195 = isnan(_2192) ? _2194 : (isnan(_2194) ? _2192 : min(_2194, _2192));
        float _2199 = (_2195 * _1525) + _1514;
        float _2200 = (_2195 * _1528) + _1518;
        float _2201 = (_2195 * _1531) + _1522;
        float _2202 = _2195 * 9.9999997473787516355514526367188e-05;
        float _2203 = (-1.0) - _2202;
        float _2205 = _2202 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2201 > _2205) || ((_2201 < _2203) || ((_2200 > _2205) || ((_2200 < _2203) || ((_2199 < _2203) || (_2199 > _2205))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2470 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2201, cbModelParam._m0[17u].z, fma(_2200, cbModelParam._m0[17u].y, _2199 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2201, cbModelParam._m0[18u].z, fma(_2200, cbModelParam._m0[18u].y, _2199 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2201, cbModelParam._m0[19u].z, fma(_2200, cbModelParam._m0[19u].y, _2199 * cbModelParam._m0[19u].x))), _1457);
            frontier_phi_22_46_ladder = _2470.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2470.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2470.x * cbModelParam._m0[1u].z;
        }
        _1550 = frontier_phi_22_46_ladder_2;
        _1552 = frontier_phi_22_46_ladder_1;
        _1554 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1534 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_551, _552, _553), _1457);
        _1550 = _1534.x * cbModelParam._m0[1u].z;
        _1552 = _1534.y * cbModelParam._m0[1u].z;
        _1554 = _1534.z * cbModelParam._m0[1u].z;
    }
    float _1566 = ((((1.0 - _579) * ((_567 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_579 * _567)) * _543;
    float _1567 = _1566 * ((cbModelParam._m0[1u].w * (_1550 - _1448)) + _1448);
    float _1568 = _1566 * ((cbModelParam._m0[1u].w * (_1552 - _1450)) + _1450);
    float _1569 = _1566 * ((cbModelParam._m0[1u].w * (_1554 - _1452)) + _1452);
    float _1572 = fma(_1569, cbSceneParam._m0[89u].z, fma(_1568, cbSceneParam._m0[89u].y, _1567 * cbSceneParam._m0[89u].x));
    float _1575 = fma(_1569, cbSceneParam._m0[90u].z, fma(_1568, cbSceneParam._m0[90u].y, _1567 * cbSceneParam._m0[90u].x));
    float _1578 = fma(_1569, cbSceneParam._m0[91u].z, fma(_1568, cbSceneParam._m0[91u].y, _1567 * cbSceneParam._m0[91u].x));
    float _1589 = _477 / cbSceneParam._m0[86u].x;
    float _1597 = (cbSceneParam._m0[88u].y * (1.0 - _452)) + cbSceneParam._m0[88u].z;
    float _3900 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
    float _1599 = (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * 5.0;
    float _1604 = (_566 * cbMtdParam._m0[12u].z) * dot(vec3(_419, _420, _421), vec3(1.0, 0.0, 0.0));
    vec4 _1614 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1604 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1604 + _1589) * cbSceneParam._m0[86u].x, _478), _1599).w) + _1589) * cbSceneParam._m0[86u].x, _478), _1599);
    float _1630 = 1.0 - _1614.w;
    uvec4 _1640 = floatBitsToUint(cbInstanceData._m0[_518 + 5u]);
    uint _1642 = _1640.x * 14u;
    uint _1643 = _1642 + 13u;
    float _1650 = _543 + (-1.0);
    float _1655 = (cbLight._m0[_1643].x * _1650) + 1.0;
    float _1656 = (cbLight._m0[_1643].y * _1650) + 1.0;
    float _1657 = (cbLight._m0[_1643].z * _1650) + 1.0;
    float _1658 = (cbLight._m0[_1643].w * _1650) + 1.0;
    uint _1659 = _1642 + 5u;
    float _1665 = isnan(1.0) ? _1656 : (isnan(_1656) ? 1.0 : min(_1656, 1.0));
    uint _1669 = _1642 + 4u;
    float _1676 = isnan(1.0) ? _1655 : (isnan(_1655) ? 1.0 : min(_1655, 1.0));
    uint _1680 = _1642 | 1u;
    float _1691 = dot(vec3(cbLight._m0[_1642].xyz), vec3(_419, _420, _421));
    float _1694 = dot(vec3(cbLight._m0[_1680].xyz), vec3(_419, _420, _421));
    float _3921 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
    float _3932 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
    float _1699 = (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * 0.3183098733425140380859375;
    float _1701 = (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * 0.3183098733425140380859375;
    float _1708 = ((cbLight._m0[_1659].x * _1665) * _1701) + ((cbLight._m0[_1669].x * _1676) * _1699);
    float _1709 = ((_1665 * cbLight._m0[_1659].y) * _1701) + ((_1676 * cbLight._m0[_1669].y) * _1699);
    float _1710 = ((_1665 * cbLight._m0[_1659].z) * _1701) + ((_1676 * cbLight._m0[_1669].z) * _1699);
    uvec4 _1714 = floatBitsToUint(cbLight._m0[_1642 + 12u]);
    bool _1716 = _1714.x == 0u;
    float _1727;
    float _1729;
    float _1731;
    if (_1716)
    {
        _1727 = _1708;
        _1729 = _1709;
        _1731 = _1710;
    }
    else
    {
        uint _1735 = _1642 + 6u;
        float _1751 = (dot(vec3(cbLight._m0[_1642 + 2u].xyz), vec3(_419, _420, _421)) * 0.5) + 0.5;
        float _1752 = _1751 * _1751;
        float _3943 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1753 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1754 = isnan(1.0) ? _1657 : (isnan(_1657) ? 1.0 : min(_1657, 1.0));
        _1727 = (((cbLight._m0[_1735].x * 0.3183098733425140380859375) * _1753) * _1754) + _1708;
        _1729 = (((cbLight._m0[_1735].y * 0.3183098733425140380859375) * _1753) * _1754) + _1709;
        _1731 = (((cbLight._m0[_1735].z * 0.3183098733425140380859375) * _1753) * _1754) + _1710;
    }
    bool _1734 = _1714.y == 0u;
    float _1772;
    float _1774;
    float _1776;
    if (_1734)
    {
        _1772 = _1727;
        _1774 = _1729;
        _1776 = _1731;
    }
    else
    {
        uint _1931 = _1642 + 7u;
        float _1947 = (dot(vec3(cbLight._m0[_1642 + 3u].xyz), vec3(_419, _420, _421)) * 0.5) + 0.5;
        float _1948 = _1947 * _1947;
        float _3959 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
        float _1949 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1950 = isnan(1.0) ? _1658 : (isnan(_1658) ? 1.0 : min(_1658, 1.0));
        _1772 = (((cbLight._m0[_1931].x * 0.3183098733425140380859375) * _1949) * _1950) + _1727;
        _1774 = (((cbLight._m0[_1931].y * 0.3183098733425140380859375) * _1949) * _1950) + _1729;
        _1776 = (((cbLight._m0[_1931].z * 0.3183098733425140380859375) * _1949) * _1950) + _1731;
    }
    uint _1779 = _1642 + 8u;
    float _1792 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1642].w)) * _452) * 0.949999988079071044921875);
    float _1793 = _1792 * _1792;
    float _1794 = cbLight._m0[_1642].x + _286;
    float _1795 = cbLight._m0[_1642].y + _287;
    float _1796 = cbLight._m0[_1642].z + _288;
    float _1800 = inversesqrt(dot(vec3(_1794, _1795, _1796), vec3(_1794, _1795, _1796)));
    float _1801 = _1800 * _1794;
    float _1802 = _1800 * _1795;
    float _1803 = _1800 * _1796;
    float _1804 = dot(vec3(_419, _420, _421), vec3(cbLight._m0[_1642].xyz));
    float _3975 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1807 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _3986 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _1808 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _1809 = dot(vec3(_419, _420, _421), vec3(_1801, _1802, _1803));
    float _3997 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1812 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _1813 = dot(vec3(cbLight._m0[_1642].xyz), vec3(_1801, _1802, _1803));
    float _4008 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _1817 = _1793 * _1793;
    float _1821 = ((_1812 * _1812) * (_1817 + (-1.0))) + 1.0;
    float _1832 = (exp2(log2(1.0 - (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1833 = 1.0 - _1793;
    float _1844 = (0.5 / (((_1808 * ((_1807 * _1833) + _1793)) + 9.9999999392252902907785028219223e-09) + (((_1808 * _1833) + _1793) * _1807))) * _1807;
    float _4019 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1846 = (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1817 / ((_1821 * _1821) * 3.141590118408203125));
    uint _1857 = _1642 + 9u;
    float _1868 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1680].w)) * _452) * 0.949999988079071044921875);
    float _1869 = _1868 * _1868;
    float _1870 = cbLight._m0[_1680].x + _286;
    float _1871 = cbLight._m0[_1680].y + _287;
    float _1872 = cbLight._m0[_1680].z + _288;
    float _1876 = inversesqrt(dot(vec3(_1870, _1871, _1872), vec3(_1870, _1871, _1872)));
    float _1877 = _1876 * _1870;
    float _1878 = _1876 * _1871;
    float _1879 = _1876 * _1872;
    float _1880 = dot(vec3(_419, _420, _421), vec3(cbLight._m0[_1680].xyz));
    float _4030 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1883 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _1884 = dot(vec3(_419, _420, _421), vec3(_1877, _1878, _1879));
    float _4041 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _1887 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _1888 = dot(vec3(cbLight._m0[_1680].xyz), vec3(_1877, _1878, _1879));
    float _4052 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1892 = _1869 * _1869;
    float _1896 = ((_1887 * _1887) * (_1892 + (-1.0))) + 1.0;
    float _1905 = (exp2(log2(1.0 - (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1906 = 1.0 - _1869;
    float _1916 = (0.5 / (((_1808 * ((_1883 * _1906) + _1869)) + 9.9999999392252902907785028219223e-09) + (((_1808 * _1906) + _1869) * _1883))) * _1883;
    float _4063 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _1918 = (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_1892 / ((_1896 * _1896) * 3.141590118408203125));
    float _1928 = (((_1905 * cbLight._m0[_1857].x) * _1918) * _1665) + (((_1832 * cbLight._m0[_1779].x) * _1846) * _1676);
    float _1929 = (((_1905 * cbLight._m0[_1857].y) * _1918) * _1665) + (((_1832 * cbLight._m0[_1779].y) * _1846) * _1676);
    float _1930 = (((_1905 * cbLight._m0[_1857].z) * _1918) * _1665) + (((_1832 * cbLight._m0[_1779].z) * _1846) * _1676);
    float _1992;
    float _1994;
    float _1996;
    if (_1716)
    {
        _1992 = _1928;
        _1994 = _1929;
        _1996 = _1930;
    }
    else
    {
        uint _1998 = _1642 + 2u;
        uint _2002 = _1642 + 10u;
        float _2016 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1998].w)) * _452) * 0.949999988079071044921875);
        float _2017 = _2016 * _2016;
        float _2018 = cbLight._m0[_1998].x + _286;
        float _2019 = cbLight._m0[_1998].y + _287;
        float _2020 = cbLight._m0[_1998].z + _288;
        float _2024 = inversesqrt(dot(vec3(_2018, _2019, _2020), vec3(_2018, _2019, _2020)));
        float _2025 = _2024 * _2018;
        float _2026 = _2024 * _2019;
        float _2027 = _2024 * _2020;
        float _2028 = dot(vec3(_419, _420, _421), vec3(cbLight._m0[_1998].xyz));
        float _4074 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
        float _2031 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _2032 = dot(vec3(_419, _420, _421), vec3(_2025, _2026, _2027));
        float _4085 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
        float _2035 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _2036 = dot(vec3(cbLight._m0[_1998].xyz), vec3(_2025, _2026, _2027));
        float _4096 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
        float _2040 = _2017 * _2017;
        float _2044 = ((_2035 * _2035) * (_2040 + (-1.0))) + 1.0;
        float _2053 = (exp2(log2(1.0 - (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2054 = 1.0 - _2017;
        float _2064 = (0.5 / (((_1808 * ((_2031 * _2054) + _2017)) + 9.9999999392252902907785028219223e-09) + (((_1808 * _2054) + _2017) * _2031))) * _2031;
        float _4107 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
        float _2066 = (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_2040 / ((_2044 * _2044) * 3.141590118408203125));
        float _2067 = isnan(1.0) ? _1657 : (isnan(_1657) ? 1.0 : min(_1657, 1.0));
        _1992 = (((_2053 * cbLight._m0[_2002].x) * _2066) * _2067) + _1928;
        _1994 = (((_2053 * cbLight._m0[_2002].y) * _2066) * _2067) + _1929;
        _1996 = (((_2053 * cbLight._m0[_2002].z) * _2066) * _2067) + _1930;
    }
    float _2102;
    float _2104;
    float _2106;
    if (_1734)
    {
        _2102 = _1992;
        _2104 = _1994;
        _2106 = _1996;
    }
    else
    {
        uint _2113 = _1642 + 3u;
        uint _2117 = _1642 + 11u;
        float _2131 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2113].w)) * _452) * 0.949999988079071044921875);
        float _2132 = _2131 * _2131;
        float _2133 = cbLight._m0[_2113].x + _286;
        float _2134 = cbLight._m0[_2113].y + _287;
        float _2135 = cbLight._m0[_2113].z + _288;
        float _2139 = inversesqrt(dot(vec3(_2133, _2134, _2135), vec3(_2133, _2134, _2135)));
        float _2140 = _2139 * _2133;
        float _2141 = _2139 * _2134;
        float _2142 = _2139 * _2135;
        float _2143 = dot(vec3(_419, _420, _421), vec3(cbLight._m0[_2113].xyz));
        float _4123 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        float _2146 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _2147 = dot(vec3(_419, _420, _421), vec3(_2140, _2141, _2142));
        float _4134 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2150 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _2151 = dot(vec3(cbLight._m0[_2113].xyz), vec3(_2140, _2141, _2142));
        float _4145 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2155 = _2132 * _2132;
        float _2159 = ((_2150 * _2150) * (_2155 + (-1.0))) + 1.0;
        float _2168 = (exp2(log2(1.0 - (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2169 = 1.0 - _2132;
        float _2179 = (0.5 / (((_1808 * ((_2146 * _2169) + _2132)) + 9.9999999392252902907785028219223e-09) + (((_1808 * _2169) + _2132) * _2146))) * _2146;
        float _4156 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2181 = (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_2155 / ((_2159 * _2159) * 3.141590118408203125));
        float _2182 = isnan(1.0) ? _1658 : (isnan(_1658) ? 1.0 : min(_1658, 1.0));
        _2102 = (((_2168 * cbLight._m0[_2117].x) * _2181) * _2182) + _1992;
        _2104 = (((_2168 * cbLight._m0[_2117].y) * _2181) * _2182) + _1994;
        _2106 = (((_2168 * cbLight._m0[_2117].z) * _2181) * _2182) + _1996;
    }
    float _2317;
    float _2319;
    float _2321;
    float _2323;
    float _2325;
    float _2327;
    if (_1640.y == 0u)
    {
        float _2257 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2258 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2257;
        float _2259 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2257;
        float _2260 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2257;
        uvec4 _2272 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2273 = _2272.x;
        uint _2284 = uint((float(_2272.y) * floor(float(uint(cbSceneParam._m0[85u].y * _478) / _2273))) + floor(float(uint(cbSceneParam._m0[85u].x * _477) / _2273)));
        float _2294 = (log2(_2260 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2295 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        uint _2298 = uint(isnan(14.0) ? _2295 : (isnan(_2295) ? 14.0 : min(_2295, 14.0)));
        uvec4 _2303 = texelFetch(g_lightClusterGridBuffer, int(((_2298 << 2u) + (_2284 << 6u)) >> 2u));
        uint _2304 = _2303.x;
        uint _2305 = _2272.z;
        float _2475;
        float _2477;
        float _2479;
        float _2481;
        float _2483;
        float _2485;
        if (((((1u << ((_2305 >> 4u) & 15u)) + 4294967295u) & _2304) == 0u) || ((_2305 & 240u) == 0u))
        {
            _2475 = 0.0;
            _2477 = 0.0;
            _2479 = 0.0;
            _2481 = 0.0;
            _2483 = 0.0;
            _2485 = 0.0;
        }
        else
        {
            float _2476;
            float _2478;
            float _2480;
            float _2482;
            float _2484;
            float _2486;
            float _2651 = 0.0;
            float _2652 = 0.0;
            float _2653 = 0.0;
            float _2654 = 0.0;
            float _2655 = 0.0;
            float _2656 = 0.0;
            uint _2657 = 0u;
            uint _2666;
            bool _2667;
            for (;;)
            {
                _2666 = texelFetch(g_lightClassification, int((((_2298 << 5u) + (_2284 << 9u)) + (_2657 << 2u)) >> 2u)).x;
                _2667 = _2666 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2667)
                {
                    frontier_phi_61_pred = _2651;
                    frontier_phi_61_pred_1 = _2656;
                    frontier_phi_61_pred_2 = _2655;
                    frontier_phi_61_pred_3 = _2654;
                    frontier_phi_61_pred_4 = _2653;
                    frontier_phi_61_pred_5 = _2652;
                }
                else
                {
                    float _2775;
                    float _2776;
                    float _2777;
                    float _2778;
                    float _2779;
                    float _2780;
                    uint _2781;
                    _2775 = _2651;
                    _2776 = _2652;
                    _2777 = _2653;
                    _2778 = _2654;
                    _2779 = _2655;
                    _2780 = _2656;
                    _2781 = _2666;
                    float _2707;
                    float _2708;
                    float _2709;
                    float _2710;
                    float _2711;
                    float _2712;
                    for (;;)
                    {
                        uint _2785 = uint(findLSB(_2781)) + (_2657 << 5u);
                        uint _2782 = (_2781 + 4294967295u) & _2781;
                        uint _2787 = _2785 * 48u;
                        vec4 _2801 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2787)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 3u)).x));
                        uint _2807 = (_2785 * 48u) + 4u;
                        vec4 _2820 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2807)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 3u)).x));
                        uint _2826 = (_2785 * 48u) + 8u;
                        vec3 _2837 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2826)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 2u)).x));
                        float _2841 = _2801.x - _2258;
                        float _2842 = _2801.y - _2259;
                        float _2843 = _2801.z - _2260;
                        float _2844 = dot(vec3(_2841, _2842, _2843), vec3(_2841, _2842, _2843));
                        float _2847 = inversesqrt(_2844);
                        float _2848 = _2847 * _2841;
                        float _2849 = _2847 * _2842;
                        float _2850 = _2847 * _2843;
                        float _2851 = dot(vec3(_499, _502, _505), vec3(_2848, _2849, _2850));
                        float _2856 = 1.0 - (_2844 * _2801.w);
                        float _4182 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
                        float _2857 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                        float _2858 = sqrt(_2844) * _2820.w;
                        float _2861 = 1.39999997615814208984375 / (_2858 + 1.39999997615814208984375);
                        float _2862 = _2861 * _2861;
                        float _2865 = ((1.0 - _2862) * _2851) + _2862;
                        float _2868 = _2858 * _2858;
                        float _2872 = ((isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0))) * _2857) / ((_2868 * 0.699999988079071044921875) + 1.0);
                        float _2876 = (-0.0) - _2258;
                        float _2877 = (-0.0) - _2259;
                        float _2878 = (-0.0) - _2260;
                        float _2882 = inversesqrt(dot(vec3(_2876, _2877, _2878), vec3(_2876, _2877, _2878)));
                        float _2883 = _2882 * _2876;
                        float _2884 = _2882 * _2877;
                        float _2885 = _2882 * _2878;
                        float _2893 = exp2(log2(1.0 / ((_2868 * 3.5) + 5.0)) * 0.25);
                        float _2894 = 1.0 - _567;
                        float _2901 = sqrt(1.0 - ((1.0 - (_2894 * _2894)) * (1.0 - (_2893 * _2893))));
                        float _2902 = _2901 * _2901;
                        float _2903 = _2902 * _2902;
                        float _2904 = _2883 + _2848;
                        float _2905 = _2884 + _2849;
                        float _2906 = _2885 + _2850;
                        float _2910 = inversesqrt(dot(vec3(_2904, _2905, _2906), vec3(_2904, _2905, _2906)));
                        float _2914 = dot(vec3(_499, _502, _505), vec3(_2883, _2884, _2885));
                        float _4198 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
                        float _2917 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
                        float _2918 = dot(vec3(_499, _502, _505), vec3(_2910 * _2904, _2910 * _2905, _2910 * _2906));
                        float _4209 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
                        float _2921 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
                        float _2925 = ((_2921 * _2921) * (_2903 + (-1.0))) + 1.0;
                        float _2926 = _2861 * _2902;
                        float _2927 = _2926 * _2926;
                        float _2930 = ((1.0 - _2927) * _2851) + _2927;
                        float _4220 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                        float _2931 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
                        float _2932 = 1.0 - _2902;
                        float _2942 = (0.5 / (((_2931 * ((_2917 * _2932) + _2902)) + 9.9999999392252902907785028219223e-09) + (((_2931 * _2932) + _2902) * _2917))) * _2931;
                        float _4231 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
                        float _2953 = (((_2903 * 3.1415927410125732421875) * (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0)))) / ((_2925 * _2925) * ((_2868 * 2.1991131305694580078125) + 3.141590118408203125))) * _2857;
                        _2710 = (_2872 * _2820.x) + _2778;
                        _2711 = (_2872 * _2820.y) + _2779;
                        _2712 = (_2872 * _2820.z) + _2780;
                        _2707 = (_2953 * _2837.x) + _2775;
                        _2708 = (_2953 * _2837.y) + _2776;
                        _2709 = (_2953 * _2837.z) + _2777;
                        if (_2782 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2775 = _2707;
                            _2776 = _2708;
                            _2777 = _2709;
                            _2778 = _2710;
                            _2779 = _2711;
                            _2780 = _2712;
                            _2781 = _2782;
                        }
                    }
                    frontier_phi_61_pred = _2707;
                    frontier_phi_61_pred_1 = _2712;
                    frontier_phi_61_pred_2 = _2711;
                    frontier_phi_61_pred_3 = _2710;
                    frontier_phi_61_pred_4 = _2709;
                    frontier_phi_61_pred_5 = _2708;
                }
                _2476 = frontier_phi_61_pred;
                _2486 = frontier_phi_61_pred_1;
                _2484 = frontier_phi_61_pred_2;
                _2482 = frontier_phi_61_pred_3;
                _2480 = frontier_phi_61_pred_4;
                _2478 = frontier_phi_61_pred_5;
                uint _2658 = _2657 + 1u;
                if (_2658 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2651 = _2476;
                    _2652 = _2478;
                    _2653 = _2480;
                    _2654 = _2482;
                    _2655 = _2484;
                    _2656 = _2486;
                    _2657 = _2658;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2475 = _2476;
            _2477 = _2478;
            _2479 = _2480;
            _2481 = _2482;
            _2483 = _2484;
            _2485 = _2486;
        }
        uvec4 _2489 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2490 = _2489.z;
        uint _2492 = (_2490 >> 8u) & 15u;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        if (((4294967295u << _2492) & _2304) == 0u)
        {
            _2619 = _2475;
            _2621 = _2477;
            _2623 = _2479;
            _2625 = _2481;
            _2627 = _2483;
            _2629 = _2485;
        }
        else
        {
            float _2644 = inversesqrt(dot(vec3(_2258, _2259, _2260), vec3(_2258, _2259, _2260)));
            float _2645 = _2644 * _2258;
            float _2646 = _2644 * _2259;
            float _2647 = _2644 * _2260;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2492 < ((_2490 >> 12u) & 15u))
            {
                float _2620;
                float _2622;
                float _2624;
                float _2626;
                float _2628;
                float _2630;
                float _2758 = _2475;
                float _2759 = _2477;
                float _2760 = _2479;
                float _2761 = _2481;
                float _2762 = _2483;
                float _2763 = _2485;
                uint _2764 = _2492;
                uint _2773;
                bool _2774;
                for (;;)
                {
                    _2773 = texelFetch(g_lightClassification, int((((_2298 << 5u) + (_2284 << 9u)) + (_2764 << 2u)) >> 2u)).x;
                    _2774 = _2773 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2774)
                    {
                        frontier_phi_67_pred = _2761;
                        frontier_phi_67_pred_1 = _2762;
                        frontier_phi_67_pred_2 = _2763;
                        frontier_phi_67_pred_3 = _2760;
                        frontier_phi_67_pred_4 = _2759;
                        frontier_phi_67_pred_5 = _2758;
                    }
                    else
                    {
                        float _2958;
                        float _2959;
                        float _2960;
                        float _2961;
                        float _2962;
                        float _2963;
                        float _3254;
                        float _3255;
                        float _3256;
                        float _3257;
                        float _3258;
                        float _3259;
                        float _2971 = _2758;
                        float _2972 = _2759;
                        float _2973 = _2760;
                        float _2974 = _2761;
                        float _2975 = _2762;
                        float _2976 = _2763;
                        uint _2977 = _2773;
                        uint _2978;
                        vec4 _3003;
                        float _3004;
                        vec4 _3019;
                        vec3 _3031;
                        vec4 _3047;
                        vec4 _3063;
                        float _3110;
                        bool _3111;
                        for (;;)
                        {
                            uint _2988 = ((_2764 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2977));
                            _2978 = (_2977 + 4294967295u) & _2977;
                            uint _2990 = _2988 * 40u;
                            _3003 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2990)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 3u)).x));
                            _3004 = _3003.w;
                            uint _3006 = (_2988 * 40u) + 4u;
                            _3019 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3006)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 3u)).x));
                            uint _3021 = (_2988 * 40u) + 8u;
                            _3031 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3021)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 2u)).x));
                            uint _3034 = (_2988 * 40u) + 16u;
                            _3047 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3034)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 3u)).x));
                            uint _3050 = (_2988 * 40u) + 20u;
                            _3063 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3050)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 3u)).x));
                            uint _3066 = (_2988 * 40u) + 24u;
                            vec4 _3079 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3066)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 3u)).x));
                            uint _3085 = (_2988 * 40u) + 28u;
                            vec4 _3098 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3085)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 3u)).x));
                            _3110 = fma(_2260, _3098.z, fma(_2259, _3098.y, _3098.x * _2258)) + _3098.w;
                            _3111 = !((fma(_2260, _3079.z, fma(_2259, _3079.y, _3079.x * _2258)) + _3079.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3111)
                            {
                                float _3138 = _3003.x - _2258;
                                float _3139 = _3003.y - _2259;
                                float _3140 = _3003.z - _2260;
                                float _3141 = dot(vec3(_3138, _3139, _3140), vec3(_3138, _3139, _3140));
                                float _3144 = inversesqrt(_3141);
                                float _3145 = _3144 * _3138;
                                float _3146 = _3144 * _3139;
                                float _3147 = _3144 * _3140;
                                float _3151 = 1.0 - (_3141 / (_3004 * _3004));
                                float _4242 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                                float _3152 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
                                float _3156 = sqrt(_3141) * _3019.w;
                                float _3158 = 1.39999997615814208984375 / (_3156 + 1.39999997615814208984375);
                                float _3159 = _3158 * _3158;
                                float _3162 = ((1.0 - _3159) * dot(vec3(_3145, _3146, _3147), vec3(_499, _502, _505))) + _3159;
                                float _3165 = _3156 * _3156;
                                float _3169 = (fma(_2260, _3047.z, fma(_2259, _3047.y, _3047.x * _2258)) + _3047.w) / _3110;
                                float _3170 = (fma(_2260, _3063.z, fma(_2259, _3063.y, _3063.x * _2258)) + _3063.w) / _3110;
                                float _3174 = 1.0 - dot(vec2(_3169, _3170), vec2(_3169, _3170));
                                float _4258 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                                float _3175 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
                                float _3176 = _3175 * (((isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0))) * _3152) / ((_3165 * 0.699999988079071044921875) + 1.0));
                                float _3188 = exp2(log2(1.0 / ((_3165 * 3.5) + 5.0)) * 0.25);
                                float _3189 = 1.0 - _567;
                                float _3196 = sqrt(1.0 - ((1.0 - (_3189 * _3189)) * (1.0 - (_3188 * _3188))));
                                float _3197 = _3196 * _3196;
                                float _3198 = _3197 * _3197;
                                float _3199 = _3145 - _2645;
                                float _3200 = _3146 - _2646;
                                float _3201 = _3147 - _2647;
                                float _3205 = inversesqrt(dot(vec3(_3199, _3200, _3201), vec3(_3199, _3200, _3201)));
                                float _3209 = dot(vec3(_499, _502, _505), vec3((-0.0) - _2645, (-0.0) - _2646, (-0.0) - _2647));
                                float _4269 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                                float _3212 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                                float _3213 = dot(vec3(_499, _502, _505), vec3(_3205 * _3199, _3205 * _3200, _3205 * _3201));
                                float _4280 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                                float _3216 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                                float _3220 = ((_3216 * _3216) * (_3198 + (-1.0))) + 1.0;
                                float _3221 = _3158 * _3197;
                                float _3222 = _3221 * _3221;
                                float _3228 = ((1.0 - _3222) * dot(vec3(_499, _502, _505), vec3(_3145, _3146, _3147))) + _3222;
                                float _4291 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                                float _3229 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                                float _3230 = 1.0 - _3197;
                                float _3240 = (0.5 / (((_3229 * ((_3212 * _3230) + _3197)) + 9.9999999392252902907785028219223e-09) + (((_3229 * _3230) + _3197) * _3212))) * _3229;
                                float _4302 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                                float _3250 = (_3175 * _3152) * (((_3198 * 3.1415927410125732421875) * (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) / ((_3220 * _3220) * ((_3165 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3250 * _3031.x;
                                frontier_phi_73_pred_1 = _3250 * _3031.y;
                                frontier_phi_73_pred_2 = _3176 * _3019.z;
                                frontier_phi_73_pred_3 = _3176 * _3019.y;
                                frontier_phi_73_pred_4 = _3176 * _3019.x;
                                frontier_phi_73_pred_5 = _3250 * _3031.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3254 = frontier_phi_73_pred;
                            _3255 = frontier_phi_73_pred_1;
                            _3259 = frontier_phi_73_pred_2;
                            _3258 = frontier_phi_73_pred_3;
                            _3257 = frontier_phi_73_pred_4;
                            _3256 = frontier_phi_73_pred_5;
                            _2961 = _3257 + _2974;
                            _2962 = _3258 + _2975;
                            _2963 = _3259 + _2976;
                            _2958 = _3254 + _2971;
                            _2959 = _3255 + _2972;
                            _2960 = _3256 + _2973;
                            if (_2978 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2971 = _2958;
                                _2972 = _2959;
                                _2973 = _2960;
                                _2974 = _2961;
                                _2975 = _2962;
                                _2976 = _2963;
                                _2977 = _2978;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2961;
                        frontier_phi_67_pred_1 = _2962;
                        frontier_phi_67_pred_2 = _2963;
                        frontier_phi_67_pred_3 = _2960;
                        frontier_phi_67_pred_4 = _2959;
                        frontier_phi_67_pred_5 = _2958;
                    }
                    _2626 = frontier_phi_67_pred;
                    _2628 = frontier_phi_67_pred_1;
                    _2630 = frontier_phi_67_pred_2;
                    _2624 = frontier_phi_67_pred_3;
                    _2622 = frontier_phi_67_pred_4;
                    _2620 = frontier_phi_67_pred_5;
                    uint _2765 = _2764 + 1u;
                    if (_2765 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2758 = _2620;
                        _2759 = _2622;
                        _2760 = _2624;
                        _2761 = _2626;
                        _2762 = _2628;
                        _2763 = _2630;
                        _2764 = _2765;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2628;
                frontier_phi_55_56_ladder_1 = _2630;
                frontier_phi_55_56_ladder_2 = _2626;
                frontier_phi_55_56_ladder_3 = _2624;
                frontier_phi_55_56_ladder_4 = _2622;
                frontier_phi_55_56_ladder_5 = _2620;
            }
            else
            {
                frontier_phi_55_56_ladder = _2483;
                frontier_phi_55_56_ladder_1 = _2485;
                frontier_phi_55_56_ladder_2 = _2481;
                frontier_phi_55_56_ladder_3 = _2479;
                frontier_phi_55_56_ladder_4 = _2477;
                frontier_phi_55_56_ladder_5 = _2475;
            }
            _2619 = frontier_phi_55_56_ladder_5;
            _2621 = frontier_phi_55_56_ladder_4;
            _2623 = frontier_phi_55_56_ladder_3;
            _2625 = frontier_phi_55_56_ladder_2;
            _2627 = frontier_phi_55_56_ladder;
            _2629 = frontier_phi_55_56_ladder_1;
        }
        float _2634 = isnan(1.0) ? _543 : (isnan(_543) ? 1.0 : min(_543, 1.0));
        _2317 = (_2634 * _2625) + _1772;
        _2319 = (_2634 * _2627) + _1774;
        _2321 = (_2634 * _2629) + _1776;
        _2323 = ((_2619 * 0.039999999105930328369140625) * _2634) + _2102;
        _2325 = ((_2621 * 0.039999999105930328369140625) * _2634) + _2104;
        _2327 = ((_2623 * 0.039999999105930328369140625) * _2634) + _2106;
    }
    else
    {
        _2317 = _1772;
        _2319 = _1774;
        _2321 = _1776;
        _2323 = _2102;
        _2325 = _2104;
        _2327 = _2106;
    }
    float _2341 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2342 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2343 = cbSceneParam._m0[86u].x * (_1589 + ((_566 * cbMtdParam._m0[13u].y) * dot(vec3(_419, _420, _421), vec3(_189, _190, _191))));
    float _2344 = isnan(_2341) ? _2343 : (isnan(_2343) ? _2341 : min(_2343, _2341));
    float _2345 = isnan(_2342) ? _478 : (isnan(_478) ? _2342 : min(_478, _2342));
    vec4 _2347 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2344, _2345), 0.0);
    float _2349 = _2347.x;
    bool _2370 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2349)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2349))) > _471;
    vec4 _2374 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2370 ? _2344 : _477, _2370 ? _2345 : _478));
    float _4328 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _4339 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _4350 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _2398 = 0.959999978542327880859375 - (exp2(log2(1.0 - _558) * 5.0) * 0.959999978542327880859375);
    float _2400 = (_2374.x * _2398) * cbSceneParam._m0[72u].w;
    float _2402 = (_2374.y * _2398) * cbSceneParam._m0[72u].w;
    float _2404 = (_2374.z * _2398) * cbSceneParam._m0[72u].w;
    float _2425 = _477 / cbSceneParam._m0[86u].x;
    float _2426 = _478 / cbSceneParam._m0[86u].y;
    vec4 _2440 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2425, _2426, (log2((isnan(cbSceneParam._m0[77u].w) ? _471 : (isnan(_471) ? cbSceneParam._m0[77u].w : min(_471, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2442 = _2440.x;
    float _2443 = _2440.y;
    float _2444 = _2440.z;
    float _2445 = _2440.w;
    float _2537;
    float _2539;
    float _2541;
    float _2543;
    if (_471 > cbSceneParam._m0[78u].w)
    {
        float _2500 = isnan(_471) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _471 : min(cbSceneParam._m0[80u].w, _471));
        float _2501 = _2500 / _471;
        float _2512 = _2501 * _260;
        float _2513 = _261 * _2501;
        float _2514 = (-0.0) - _2513;
        float _2515 = _2501 * _262;
        float _2517 = (cbSceneParam._m0[77u].w * _2514) / _2500;
        float _2518 = _2517 + cbSceneParam._m0[79u].w;
        float _2519 = cbSceneParam._m0[79u].w - _2513;
        float _2525 = sqrt(((_2512 * _2512) + (_2513 * _2513)) + (_2515 * _2515));
        float _2528 = (1.0 - (cbSceneParam._m0[77u].w / _2500)) * _2525;
        float _2533 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2535 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2720;
        if (abs((_2514 - _2517) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2720 = ((((_2518 > 0.0) ? exp2(_2533 * _2518) : (2.0 - exp2(_2535 * _2518))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2528;
        }
        else
        {
            float _2680 = 1.0 / cbSceneParam._m0[80u].x;
            float _2681 = isnan(_2519) ? _2518 : (isnan(_2518) ? _2519 : max(_2518, _2519));
            float _2682 = isnan(_2519) ? _2518 : (isnan(_2518) ? _2519 : min(_2518, _2519));
            float _2691 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : min(_2681, 0.0));
            float _2692 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : min(_2682, 0.0));
            _2720 = ((abs(_2525 / _2514) * cbSceneParam._m0[80u].y) * ((((_2691 - _2692) * 2.0) - ((exp2(_2533 * (isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0)))) - exp2(_2533 * (isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0))))) * _2680)) - ((exp2(_2535 * _2691) - exp2(_2535 * _2692)) * _2680))) + (_2528 * cbSceneParam._m0[80u].z);
        }
        vec4 _2722 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2425, _2426, 1.0), 0.0);
        float _2731 = exp2((_2720 * (-1.44269502162933349609375)) * (1.0 - _2722.w));
        float _2732 = log2(_2731);
        float _2748 = log2(_2445);
        _2537 = (exp2(_2748 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2732 * cbSceneParam._m0[78u].x)) * _2722.x) / cbSceneParam._m0[78u].x)) + _2442;
        _2539 = (exp2(_2748 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2732 * cbSceneParam._m0[78u].y)) * _2722.y) / cbSceneParam._m0[78u].y)) + _2443;
        _2541 = (exp2(_2748 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2732 * cbSceneParam._m0[78u].z)) * _2722.z) / cbSceneParam._m0[78u].z)) + _2444;
        _2543 = _2731 * _2445;
    }
    else
    {
        _2537 = _2442;
        _2539 = _2443;
        _2541 = _2444;
        _2543 = _2445;
    }
    bool _2555 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2556 = log2(_2543);
    float _2563 = exp2(_2556 * cbSceneParam._m0[78u].x) * ((_2400 + (((((_1566 * _1614.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))) * _1357) * _1630)) + _2323) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_2317 + ((isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0))) * _543))) - _2400) * _450));
    float _2564 = exp2(_2556 * cbSceneParam._m0[78u].y) * ((_2402 + (((((_1566 * _1614.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _1357) * _1630)) + _2325) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2319 + ((isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0))) * _543))) - _2402) * _450));
    float _2565 = exp2(_2556 * cbSceneParam._m0[78u].z) * ((_2404 + (((((_1566 * _1614.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))) * _1357) * _1630)) + _2327) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_2321 + ((isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0))) * _543))) - _2404) * _450));
    vec4 _2573 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_477, _478));
    float _2575 = _2573.x;
    float _2596 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2575)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2575))) - _471) * 3.0;
    float _4401 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
    float _2598 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * cbInstanceData._m0[_518 + 6u].w;
    float _2607 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2607 * (_2555 ? _2563 : (_2563 + (cbSceneParam._m0[72u].w * _2537)));
    SV_Target.y = _2607 * (_2555 ? _2564 : (_2564 + (cbSceneParam._m0[72u].w * _2539)));
    SV_Target.z = _2607 * (_2555 ? _2565 : (_2565 + (cbSceneParam._m0[72u].w * _2541)));
    SV_Target.w = _2598;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2598;
}


