#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Ice_test_01_snp_0_Texture2D_10;
layout(set = 0, binding = 1) uniform texture2D M_Ice_test_01_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _971;
float _3774;
float _3775;
float _3776;
float _3777;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _197 = _196 * _188;
    float _198 = _196 * _189;
    float _199 = _196 * _190;
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _250 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _254 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _258 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _268 = cbSceneParam._m0[71u].x - (_246 / _258);
    float _269 = cbSceneParam._m0[71u].y - (_250 / _258);
    float _270 = cbSceneParam._m0[71u].z - (_254 / _258);
    float _293 = inversesqrt(dot(vec3(_268, _269, _270), vec3(_268, _269, _270)));
    float _294 = _293 * _268;
    float _295 = _293 * _269;
    float _296 = _293 * _270;
    float _300 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _304 = dot(vec4(_294, _295, _296, 0.0), vec4(_300 * _204, _300 * _205, _300 * _206, 0.0));
    float _3786 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _312 = exp2(log2(1.0 - (isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0)))) * cbMtdParam._m0[12u].y);
    float _3797 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _313 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _320 = (_313 * (cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].x)) + cbMtdParam._m0[10u].x;
    float _321 = (_313 * (cbMtdParam._m0[11u].y - cbMtdParam._m0[10u].y)) + cbMtdParam._m0[10u].y;
    float _322 = (_313 * (cbMtdParam._m0[11u].z - cbMtdParam._m0[10u].z)) + cbMtdParam._m0[10u].z;
    vec4 _342 = texture(sampler2D(M_Ice_test_01_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _350 = (_342.x * 2.0) + (-1.0);
    float _352 = (_342.y * 2.0) + (-1.0);
    float _353 = dot(vec2(_350, _352), vec2(_350, _352));
    float _3808 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _358 = sqrt(1.0 - (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))));
    float _359 = abs(_204);
    float _360 = abs(_205);
    float _361 = abs(_206);
    float _362 = _359 * _359;
    float _363 = _360 * _360;
    float _364 = _361 * _361;
    float _367 = _250 * 0.0500000007450580596923828125;
    float _377 = (cbTextureTilingScale._m0[1u].x * (_246 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[1u].z;
    vec4 _380 = texture(sampler2D(M_Ice_test_01_snp_0_Texture2D_9, SS_BumpMap), vec2(_377, (cbTextureTilingScale._m0[1u].y * _367) + cbTextureTilingScale._m0[1u].w));
    float _387 = (cbTextureTilingScale._m0[1u].y * (_254 * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[1u].w;
    vec4 _388 = texture(sampler2D(M_Ice_test_01_snp_0_Texture2D_9, SS_BumpMap), vec2(_377, _387));
    vec4 _398 = texture(sampler2D(M_Ice_test_01_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _367) + cbTextureTilingScale._m0[1u].z, _387));
    float _412 = ((((((_388.x * _363) + (_380.x * _364)) + (_398.x * _362)) * 2.0) + (-1.0)) * cbMtdParam._m0[12u].w) + _350;
    float _413 = ((((((_388.y * _363) + (_380.y * _364)) + (_398.y * _362)) * 2.0) + (-1.0)) * cbMtdParam._m0[12u].w) + _352;
    float _416 = fma(_358, _204, fma(_413, _210 * TANGENT.x, _412 * _197));
    float _419 = fma(_358, _205, fma(_413, _210 * TANGENT.y, _412 * _198));
    float _422 = fma(_358, _206, fma(_413, _210 * TANGENT.z, _412 * _199));
    float _426 = inversesqrt(dot(vec3(_416, _419, _422), vec3(_416, _419, _422)));
    float _427 = _426 * _416;
    float _428 = _426 * _419;
    float _429 = _426 * _422;
    float _437 = cbMtdParam._m0[13u].x + dot(vec4(_427, _428, _429, 0.0), vec4(cbMtdParam._m0[14u].xyz, 0.0));
    float _3819 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _439 = (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * TEXCOORD_3.x;
    float _3830 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _440 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _447 = (_440 * (cbMtdParam._m0[9u].x - _320)) + _320;
    float _448 = (_440 * (cbMtdParam._m0[9u].y - _321)) + _321;
    float _449 = (_440 * (cbMtdParam._m0[9u].z - _322)) + _322;
    float _454 = ((cbMtdParam._m0[13u].w - cbMtdParam._m0[12u].x) * _440) + cbMtdParam._m0[12u].x;
    float _457 = cbMtdParam._m0[13u].z + _440;
    float _3841 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _458 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _3852 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _460 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _3863 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _3874 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _3885 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _479 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _484 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _486 = _484.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _650 = sqrt(((_268 * _268) + (_269 * _269)) + (_270 * _270));
        float _656 = (cbMatDynParam._m0[5u].x * _650) + cbMatDynParam._m0[5u].y;
        float _3896 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
        float _657 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _661 = (cbMatDynParam._m0[5u].z * _650) + cbMatDynParam._m0[5u].w;
        float _3907 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) - _657)) + _657) < ((_486 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _498 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _499 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _519 = fma(_429, cbSceneParam._m0[5u].z, fma(_428, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _427));
    float _522 = fma(_429, cbSceneParam._m0[6u].z, fma(_428, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _427));
    float _525 = fma(_429, cbSceneParam._m0[7u].z, fma(_428, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _427));
    uint _538 = uint(roundEven(NORMAL.w)) * 13u;
    uint _539 = _538 + 9u;
    uint _540 = _539 + uint(cbMatDynParam._m0[0u].w);
    float _546 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0)))) * cbInstanceData._m0[_540].x;
    float _547 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) * cbInstanceData._m0[_540].y;
    float _548 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) * cbInstanceData._m0[_540].z;
    float _3918 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _549 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _3929 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _550 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _3940 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _551 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    vec4 _560 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _498, cbSceneParam._m0[86u].y * _499));
    float _563 = _560.x * TEXCOORD_3.w;
    float _564 = dot(vec3(_427, _428, _429), vec3(_294, _295, _296));
    float _567 = _564 * 2.0;
    float _571 = (_567 * _427) - _294;
    float _572 = (_567 * _428) - _295;
    float _573 = (_567 * _429) - _296;
    float _577 = abs(dot(vec3(_294, _295, _296), vec3(_427, _428, _429)));
    float _3951 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _578 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _586 = 10.0 / (_479 + 10.0);
    float _587 = sqrt(_460);
    float _599 = exp2((_587 * 5.0) * log2(1.0 - (_578 * 0.999000012874603271484375))) / (4.0 - (_587 * 3.0));
    float _631 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _635 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _639 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _970;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _695 = fma(_639, cbModelParam._m0[26u].z, fma(_635, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _631));
        float _699 = fma(_639, cbModelParam._m0[27u].z, fma(_635, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _631));
        float _703 = fma(_639, cbModelParam._m0[28u].z, fma(_635, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _631));
        float _728 = _631 + _427;
        float _729 = _635 + _428;
        float _730 = _639 + _429;
        float _740 = fma(_730, cbModelParam._m0[26u].z, fma(_729, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _728)) - _695;
        float _741 = fma(_730, cbModelParam._m0[27u].z, fma(_729, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _728)) - _699;
        float _742 = fma(_730, cbModelParam._m0[28u].z, fma(_729, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _728)) - _703;
        float _746 = inversesqrt(dot(vec3(_740, _741, _742), vec3(_740, _741, _742)));
        float _759 = ((_746 * _740) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_695 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _760 = ((_746 * _741) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_699 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _761 = ((_746 * _742) / cbModelParam._m0[34u].z) + ((((((_703 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _764 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_759, _760, _761), 0.0);
        vec4 _771 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_759, _760, _761), 0.0);
        vec4 _778 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_759, _760, _761), 0.0);
        vec4 _785 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_759, _760, _761), 0.0);
        float _798 = exp2((_764.w + (-0.5)) * 20.0) * 2.0;
        float _799 = _798 * (_764.x + (-0.5));
        float _800 = _798 * (_764.y + (-0.5));
        float _801 = _798 * (_764.z + (-0.5));
        float _808 = exp2((_771.w + (-0.5)) * 20.0) * 2.0;
        float _809 = _808 * (_771.x + (-0.5));
        float _810 = _808 * (_771.y + (-0.5));
        float _811 = _808 * (_771.z + (-0.5));
        float _818 = exp2((_778.w + (-0.5)) * 20.0) * 2.0;
        float _819 = _818 * (_778.x + (-0.5));
        float _820 = _818 * (_778.y + (-0.5));
        float _821 = _818 * (_778.z + (-0.5));
        float _828 = exp2((_785.w + (-0.5)) * 20.0) * 2.0;
        float _829 = _828 * (_785.x + (-0.5));
        float _830 = _828 * (_785.y + (-0.5));
        float _831 = _828 * (_785.z + (-0.5));
        float _832 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _833 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _834 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _835 = _799 * 0.5;
        float _836 = _809 * 0.5;
        float _837 = _819 * 0.5;
        float _838 = dot(vec3(_835, _836, _837), vec3(_835, _836, _837));
        float _843 = (_838 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_838);
        float _852 = (dot(vec3(_427, _428, _429), vec3(_843 * _835, _843 * _836, _843 * _837)) + 1.0) * 0.5;
        float _3977 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _862 = sqrt(((_836 * _836) + (_835 * _835)) + (_837 * _837)) / (_832 + 9.9999997473787516355514526367188e-06);
        float _3988 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _863 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _864 = _863 * 2.0;
        float _868 = (1.0 - _863) / (_863 + 1.0);
        float _3999 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _869 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _878 = ((((1.0 - _869) * (_864 + 2.0)) * exp2(log2(isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_864 + 1.0))) + _869) * _832;
        float _879 = _800 * 0.5;
        float _880 = _810 * 0.5;
        float _881 = _820 * 0.5;
        float _882 = dot(vec3(_879, _880, _881), vec3(_879, _880, _881));
        float _887 = (_882 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_882);
        float _895 = (dot(vec3(_427, _428, _429), vec3(_887 * _879, _887 * _880, _887 * _881)) + 1.0) * 0.5;
        float _4010 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _904 = sqrt(((_880 * _880) + (_879 * _879)) + (_881 * _881)) / (_833 + 9.9999997473787516355514526367188e-06);
        float _4021 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _905 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _906 = _905 * 2.0;
        float _910 = (1.0 - _905) / (_905 + 1.0);
        float _4032 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _911 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _920 = ((((1.0 - _911) * (_906 + 2.0)) * exp2(log2(isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_906 + 1.0))) + _911) * _833;
        float _921 = _801 * 0.5;
        float _922 = _811 * 0.5;
        float _923 = _821 * 0.5;
        float _924 = dot(vec3(_921, _922, _923), vec3(_921, _922, _923));
        float _929 = (_924 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_924);
        float _937 = (dot(vec3(_427, _428, _429), vec3(_929 * _921, _929 * _922, _929 * _923)) + 1.0) * 0.5;
        float _4043 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _946 = sqrt(((_922 * _922) + (_921 * _921)) + (_923 * _923)) / (_834 + 9.9999997473787516355514526367188e-06);
        float _4054 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _948 = _947 * 2.0;
        float _952 = (1.0 - _947) / (_947 + 1.0);
        float _4065 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _953 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _962 = ((((1.0 - _953) * (_948 + 2.0)) * exp2(log2(isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_948 + 1.0))) + _953) * _834;
        _970 = _801;
        _972 = _800;
        _973 = _799;
        _974 = _811;
        _975 = _810;
        _976 = _809;
        _977 = _821;
        _978 = _820;
        _979 = _819;
        _980 = _834;
        _981 = _833;
        _982 = _832;
        _983 = cbModelParam._m0[36u].z * (isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0)));
        _984 = cbModelParam._m0[36u].z * (isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0)));
        _985 = cbModelParam._m0[36u].z * (isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0)));
    }
    else
    {
        _970 = _971;
        _972 = _971;
        _973 = _971;
        _974 = _971;
        _975 = _971;
        _976 = _971;
        _977 = _971;
        _978 = _971;
        _979 = _971;
        _980 = _971;
        _981 = _971;
        _982 = _971;
        _983 = 0.0;
        _984 = 0.0;
        _985 = 0.0;
    }
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1014 = fma(_639, cbModelParam._m0[30u].z, fma(_635, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _631));
        float _1018 = fma(_639, cbModelParam._m0[31u].z, fma(_635, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _631));
        float _1022 = fma(_639, cbModelParam._m0[32u].z, fma(_635, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _631));
        float _1045 = _631 + _427;
        float _1046 = _635 + _428;
        float _1047 = _639 + _429;
        float _1057 = fma(_1047, cbModelParam._m0[30u].z, fma(_1046, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1045)) - _1014;
        float _1058 = fma(_1047, cbModelParam._m0[31u].z, fma(_1046, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1045)) - _1018;
        float _1059 = fma(_1047, cbModelParam._m0[32u].z, fma(_1046, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1045)) - _1022;
        float _1063 = inversesqrt(dot(vec3(_1057, _1058, _1059), vec3(_1057, _1058, _1059)));
        float _1076 = ((_1063 * _1057) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1014 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1077 = ((_1063 * _1058) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1018 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1078 = ((_1063 * _1059) / cbModelParam._m0[35u].z) + ((((((_1022 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        float _1113 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1080.x + (-0.5));
        float _1115 = _1113 * (_1080.y + (-0.5));
        float _1116 = _1113 * (_1080.z + (-0.5));
        float _1123 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1087.x + (-0.5));
        float _1125 = _1123 * (_1087.y + (-0.5));
        float _1126 = _1123 * (_1087.z + (-0.5));
        float _1133 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1094.x + (-0.5));
        float _1135 = _1133 * (_1094.y + (-0.5));
        float _1136 = _1133 * (_1094.z + (-0.5));
        float _1143 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1101.x + (-0.5));
        float _1145 = _1143 * (_1101.y + (-0.5));
        float _1146 = _1143 * (_1101.z + (-0.5));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1149 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1150 = _1114 * 0.5;
        float _1151 = _1124 * 0.5;
        float _1152 = _1134 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1166 = (dot(vec3(_427, _428, _429), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _4106 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1175 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _4117 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _4128 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_1177 + 1.0))) + _1182) * _1147;
        float _1192 = _1115 * 0.5;
        float _1193 = _1125 * 0.5;
        float _1194 = _1135 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1208 = (dot(vec3(_427, _428, _429), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _4139 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1217 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1148 + 9.9999997473787516355514526367188e-06);
        float _4150 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _4161 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_1219 + 1.0))) + _1224) * _1148;
        float _1234 = _1116 * 0.5;
        float _1235 = _1126 * 0.5;
        float _1236 = _1136 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1250 = (dot(vec3(_427, _428, _429), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _4172 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1259 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1149 + 9.9999997473787516355514526367188e-06);
        float _4183 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _4194 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_1261 + 1.0))) + _1266) * _1149;
        _1283 = _1116;
        _1284 = _1115;
        _1285 = _1114;
        _1286 = _1126;
        _1287 = _1125;
        _1288 = _1124;
        _1289 = _1136;
        _1290 = _1135;
        _1291 = _1134;
        _1292 = _1149;
        _1293 = _1148;
        _1294 = _1147;
        _1295 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
        _1296 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
        _1297 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
    }
    else
    {
        _1283 = _971;
        _1284 = _971;
        _1285 = _971;
        _1286 = _971;
        _1287 = _971;
        _1288 = _971;
        _1289 = _971;
        _1290 = _971;
        _1291 = _971;
        _1292 = _971;
        _1293 = _971;
        _1294 = _971;
        _1295 = 0.0;
        _1296 = 0.0;
        _1297 = 0.0;
    }
    float _1307 = (cbModelParam._m0[1u].x * (_1295 - _983)) + _983;
    float _1308 = (cbModelParam._m0[1u].x * (_1296 - _984)) + _984;
    float _1309 = (cbModelParam._m0[1u].x * (_1297 - _985)) + _985;
    float _1330 = fma(_1309, cbSceneParam._m0[89u].z, fma(_1308, cbSceneParam._m0[89u].y, _1307 * cbSceneParam._m0[89u].x));
    float _1333 = fma(_1309, cbSceneParam._m0[90u].z, fma(_1308, cbSceneParam._m0[90u].y, _1307 * cbSceneParam._m0[90u].x));
    float _1336 = fma(_1309, cbSceneParam._m0[91u].z, fma(_1308, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1307));
    float _1351 = _571 * 0.5;
    float _1352 = _572 * 0.5;
    float _1353 = _573 * 0.5;
    float _1354 = dot(vec4(_1351, _1352, _1353, 1.0), vec4(_1285, _1288, _1291, _1294));
    float _1357 = dot(vec4(_1351, _1352, _1353, 1.0), vec4(_1284, _1287, _1290, _1293));
    float _1360 = dot(vec4(_1351, _1352, _1353, 1.0), vec4(_1283, _1286, _1289, _1292));
    float _1394;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1367 = dot(vec4(_1351, _1352, _1353, 1.0), vec4(_970, _974, _977, _980));
        float _1371 = dot(vec4(_1351, _1352, _1353, 1.0), vec4(_972, _975, _978, _981));
        float _1375 = dot(vec4(_1351, _1352, _1353, 1.0), vec4(_973, _976, _979, _982));
        float _1382 = dot(vec4(cbModelParam._m0[39u]), vec4(_1351, _1352, _1353, 1.0));
        _1394 = dot(vec3(isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)), isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)), isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1382) ? 0.0 : (isnan(0.0) ? _1382 : max(0.0, _1382))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1394 = 1.0;
    }
    float _1405;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1396 = dot(vec4(cbModelParam._m0[40u]), vec4(_1351, _1352, _1353, 1.0));
        _1405 = dot(vec3(isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)), isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)), isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1396) ? 0.0 : (isnan(0.0) ? _1396 : max(0.0, _1396))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1405 = 1.0;
    }
    float _1409 = (_1405 * cbModelParam._m0[1u].x) + (_1394 * (1.0 - cbModelParam._m0[1u].x));
    float _1419 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _460);
    float _1420 = isnan(_1419) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1419 : min(cbModelParam._m0[25u].z, _1419));
    float _1500;
    float _1502;
    float _1504;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1467 = fma(_639, cbModelParam._m0[13u].z, fma(_635, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _631)) + cbModelParam._m0[13u].w;
        float _1471 = fma(_639, cbModelParam._m0[14u].z, fma(_635, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _631)) + cbModelParam._m0[14u].w;
        float _1475 = fma(_639, cbModelParam._m0[15u].z, fma(_635, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _631)) + cbModelParam._m0[15u].w;
        float _1478 = fma(_573, cbModelParam._m0[13u].z, fma(_572, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _571));
        float _1481 = fma(_573, cbModelParam._m0[14u].z, fma(_572, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _571));
        float _1484 = fma(_573, cbModelParam._m0[15u].z, fma(_572, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _571));
        float _1512;
        if (_1478 > 0.0)
        {
            _1512 = abs((1.0 - _1467) / _1478);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1478 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1467 + 1.0) / _1478);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1512 = frontier_phi_17_15_ladder;
        }
        float _1737;
        if (_1481 > 0.0)
        {
            _1737 = abs((1.0 - _1471) / _1481);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1481 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1471 + 1.0) / _1481);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1737 = frontier_phi_26_22_ladder;
        }
        float _2033;
        if (_1484 > 0.0)
        {
            _2033 = abs((1.0 - _1475) / _1484);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1484 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1475 + 1.0) / _1484);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2033 = frontier_phi_38_33_ladder;
        }
        float _2035 = isnan(_1737) ? _1512 : (isnan(_1512) ? _1737 : min(_1512, _1737));
        float _2036 = isnan(_2033) ? _2035 : (isnan(_2035) ? _2033 : min(_2035, _2033));
        float _2040 = (_2036 * _1478) + _1467;
        float _2041 = (_2036 * _1481) + _1471;
        float _2042 = (_2036 * _1484) + _1475;
        float _2043 = _2036 * 9.9999997473787516355514526367188e-05;
        float _2045 = (-1.0) - _2043;
        float _2047 = _2043 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2042 > _2047) || ((_2042 < _2045) || ((_2041 > _2047) || ((_2041 < _2045) || ((_2040 < _2045) || (_2040 > _2047))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2187 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2042, cbModelParam._m0[9u].z, fma(_2041, cbModelParam._m0[9u].y, _2040 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2042, cbModelParam._m0[10u].z, fma(_2041, cbModelParam._m0[10u].y, _2040 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2042, cbModelParam._m0[11u].z, fma(_2041, cbModelParam._m0[11u].y, _2040 * cbModelParam._m0[11u].x))), _1420);
            frontier_phi_16_38_ladder = _2187.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2187.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2187.x * cbModelParam._m0[1u].y;
        }
        _1500 = frontier_phi_16_38_ladder_2;
        _1502 = frontier_phi_16_38_ladder_1;
        _1504 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1488 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_571, _572, _573), _1420);
        _1500 = _1488.x * cbModelParam._m0[1u].y;
        _1502 = _1488.y * cbModelParam._m0[1u].y;
        _1504 = _1488.z * cbModelParam._m0[1u].y;
    }
    float _1508 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _460);
    float _1509 = isnan(_1508) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1508 : min(cbModelParam._m0[25u].w, _1508));
    float _1602;
    float _1604;
    float _1606;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1566 = fma(_639, cbModelParam._m0[21u].z, fma(_635, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _631)) + cbModelParam._m0[21u].w;
        float _1570 = fma(_639, cbModelParam._m0[22u].z, fma(_635, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _631)) + cbModelParam._m0[22u].w;
        float _1574 = fma(_639, cbModelParam._m0[23u].z, fma(_635, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _631)) + cbModelParam._m0[23u].w;
        float _1577 = fma(_573, cbModelParam._m0[21u].z, fma(_572, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _571));
        float _1580 = fma(_573, cbModelParam._m0[22u].z, fma(_572, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _571));
        float _1583 = fma(_573, cbModelParam._m0[23u].z, fma(_572, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _571));
        float _1742;
        if (_1577 > 0.0)
        {
            _1742 = abs((1.0 - _1566) / _1577);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1577 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1566 + 1.0) / _1577);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1742 = frontier_phi_28_24_ladder;
        }
        float _2060;
        if (_1580 > 0.0)
        {
            _2060 = abs((1.0 - _1570) / _1580);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1570 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2060 = frontier_phi_40_35_ladder;
        }
        float _2387;
        if (_1583 > 0.0)
        {
            _2387 = abs((1.0 - _1574) / _1583);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1583 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1574 + 1.0) / _1583);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2387 = frontier_phi_50_47_ladder;
        }
        float _2389 = isnan(_2060) ? _1742 : (isnan(_1742) ? _2060 : min(_1742, _2060));
        float _2390 = isnan(_2387) ? _2389 : (isnan(_2389) ? _2387 : min(_2389, _2387));
        float _2394 = (_2390 * _1577) + _1566;
        float _2395 = (_2390 * _1580) + _1570;
        float _2396 = (_2390 * _1583) + _1574;
        float _2397 = _2390 * 9.9999997473787516355514526367188e-05;
        float _2398 = (-1.0) - _2397;
        float _2400 = _2397 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2396 > _2400) || ((_2396 < _2398) || ((_2395 > _2400) || ((_2395 < _2398) || ((_2394 < _2398) || (_2394 > _2400))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2514 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2396, cbModelParam._m0[17u].z, fma(_2395, cbModelParam._m0[17u].y, _2394 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2396, cbModelParam._m0[18u].z, fma(_2395, cbModelParam._m0[18u].y, _2394 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2396, cbModelParam._m0[19u].z, fma(_2395, cbModelParam._m0[19u].y, _2394 * cbModelParam._m0[19u].x))), _1509);
            frontier_phi_25_50_ladder = _2514.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2514.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2514.x * cbModelParam._m0[1u].z;
        }
        _1602 = frontier_phi_25_50_ladder_2;
        _1604 = frontier_phi_25_50_ladder_1;
        _1606 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1586 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_571, _572, _573), _1509);
        _1602 = _1586.x * cbModelParam._m0[1u].z;
        _1604 = _1586.y * cbModelParam._m0[1u].z;
        _1606 = _1586.z * cbModelParam._m0[1u].z;
    }
    float _1618 = ((((1.0 - _599) * ((_587 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_599 * _587)) * _563;
    float _1619 = _1618 * ((cbModelParam._m0[1u].w * (_1602 - _1500)) + _1500);
    float _1620 = _1618 * ((cbModelParam._m0[1u].w * (_1604 - _1502)) + _1502);
    float _1621 = _1618 * ((cbModelParam._m0[1u].w * (_1606 - _1504)) + _1504);
    float _1624 = fma(_1621, cbSceneParam._m0[89u].z, fma(_1620, cbSceneParam._m0[89u].y, _1619 * cbSceneParam._m0[89u].x));
    float _1627 = fma(_1621, cbSceneParam._m0[90u].z, fma(_1620, cbSceneParam._m0[90u].y, _1619 * cbSceneParam._m0[90u].x));
    float _1630 = fma(_1621, cbSceneParam._m0[91u].z, fma(_1620, cbSceneParam._m0[91u].y, _1619 * cbSceneParam._m0[91u].x));
    float _1641 = _498 / cbSceneParam._m0[86u].x;
    float _1649 = (cbSceneParam._m0[88u].y * (1.0 - _460)) + cbSceneParam._m0[88u].z;
    float _4320 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
    float _1651 = (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * 5.0;
    float _1656 = (_586 * cbMtdParam._m0[12u].z) * dot(vec3(_427, _428, _429), vec3(1.0, 0.0, 0.0));
    vec4 _1666 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1656 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1656 + _1641) * cbSceneParam._m0[86u].x, _499), _1651).w) + _1641) * cbSceneParam._m0[86u].x, _499), _1651);
    float _1682 = 1.0 - _1666.w;
    float _1716 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1720 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1724 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1728 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1729 = _1716 / _1728;
    float _1730 = _1720 / _1728;
    float _1731 = _1724 / _1728;
    float _1878;
    float _1879;
    float _1880;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1758 = ((uint(_1731 > cbSceneParam._m0[59u].y) + uint(_1731 > cbSceneParam._m0[59u].x)) + uint(_1731 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1759 = _1758 + 43u;
        uint _1767 = _1758 + 44u;
        uint _1775 = _1758 + 45u;
        uint _1783 = _1758 + 46u;
        float _1794 = fma(_1728, cbSceneParam._m0[_1759].w, fma(_1724, cbSceneParam._m0[_1759].z, fma(_1720, cbSceneParam._m0[_1759].y, _1716 * cbSceneParam._m0[_1759].x)));
        float _1798 = fma(_1728, cbSceneParam._m0[_1767].w, fma(_1724, cbSceneParam._m0[_1767].z, fma(_1720, cbSceneParam._m0[_1767].y, _1716 * cbSceneParam._m0[_1767].x)));
        float _1806 = fma(_1728, cbSceneParam._m0[_1783].w, fma(_1724, cbSceneParam._m0[_1783].z, fma(_1720, cbSceneParam._m0[_1783].y, _1716 * cbSceneParam._m0[_1783].x)));
        float _1811 = cbSceneParam._m0[33u].z * _1806;
        float _1813 = cbSceneParam._m0[33u].w * _1806;
        float _1816 = fma(_1728, cbSceneParam._m0[_1775].w, fma(_1724, cbSceneParam._m0[_1775].z, fma(_1720, cbSceneParam._m0[_1775].y, _1716 * cbSceneParam._m0[_1775].x))) / _1806;
        float _1864 = (cbSceneParam._m0[33u].x - sqrt(((_1730 * _1730) + (_1729 * _1729)) + (_1731 * _1731))) * cbSceneParam._m0[33u].y;
        float _4331 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1871 = (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1811 + _1794) / _1806, (_1813 + _1798) / _1806), _1816), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1813 + _1794) / _1806, (_1798 - _1811) / _1806), _1816), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1794 - _1811) / _1806, (_1798 - _1813) / _1806), _1816), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1794 - _1813) / _1806, (_1811 + _1798) / _1806), _1816), 0.0)).x), vec4(0.25)));
        _1878 = 1.0 - (_1871 * cbSceneParam._m0[34u].x);
        _1879 = 1.0 - (_1871 * cbSceneParam._m0[34u].y);
        _1880 = 1.0 - (_1871 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1878 = 1.0;
        _1879 = 1.0;
        _1880 = 1.0;
    }
    float _1944;
    float _1946;
    float _1948;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1932 = fma(_1728, cbSceneParam._m0[63u].w, fma(_1724, cbSceneParam._m0[63u].z, fma(_1720, cbSceneParam._m0[63u].y, _1716 * cbSceneParam._m0[63u].x)));
        float _1933 = fma(_1728, cbSceneParam._m0[60u].w, fma(_1724, cbSceneParam._m0[60u].z, fma(_1720, cbSceneParam._m0[60u].y, _1716 * cbSceneParam._m0[60u].x))) / _1932;
        float _1934 = fma(_1728, cbSceneParam._m0[61u].w, fma(_1724, cbSceneParam._m0[61u].z, fma(_1720, cbSceneParam._m0[61u].y, _1716 * cbSceneParam._m0[61u].x))) / _1932;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1933 >= cbSceneParam._m0[64u].x) && (_1934 >= cbSceneParam._m0[64u].y)) && (_1933 <= cbSceneParam._m0[64u].z)) && (_1934 <= cbSceneParam._m0[64u].w))
        {
            float _2073 = fma(_1728, cbSceneParam._m0[62u].w, fma(_1724, cbSceneParam._m0[62u].z, fma(_1720, cbSceneParam._m0[62u].y, _1716 * cbSceneParam._m0[62u].x))) / _1932;
            float _2077 = isnan(cbSceneParam._m0[41u].w) ? _2073 : (isnan(_2073) ? cbSceneParam._m0[41u].w : max(_2073, cbSceneParam._m0[41u].w));
            float _2120 = (cbSceneParam._m0[33u].x - sqrt(((_1730 * _1730) + (_1729 * _1729)) + (_1731 * _1731))) * cbSceneParam._m0[33u].y;
            float _4347 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
            float _2127 = (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1933, cbSceneParam._m0[33u].w + _1934), _2077), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1933, _1934 - cbSceneParam._m0[33u].z), _2077), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1933 - cbSceneParam._m0[33u].z, _1934 - cbSceneParam._m0[33u].w), _2077), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1933 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1934), _2077), 0.0)).x), vec4(0.25)));
            float _2131 = 1.0 - (_2127 * cbSceneParam._m0[34u].x);
            float _2132 = 1.0 - (_2127 * cbSceneParam._m0[34u].y);
            float _2133 = 1.0 - (_2127 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2133) ? _1880 : (isnan(_1880) ? _2133 : min(_1880, _2133));
            frontier_phi_37_36_ladder_1 = isnan(_2132) ? _1879 : (isnan(_1879) ? _2132 : min(_1879, _2132));
            frontier_phi_37_36_ladder_2 = isnan(_2131) ? _1878 : (isnan(_1878) ? _2131 : min(_1878, _2131));
        }
        else
        {
            frontier_phi_37_36_ladder = _1880;
            frontier_phi_37_36_ladder_1 = _1879;
            frontier_phi_37_36_ladder_2 = _1878;
        }
        _1944 = frontier_phi_37_36_ladder_2;
        _1946 = frontier_phi_37_36_ladder_1;
        _1948 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1944 = _1878;
        _1946 = _1879;
        _1948 = _1880;
    }
    uvec4 _1953 = floatBitsToUint(cbInstanceData._m0[_538 + 5u]);
    uint _1955 = _1953.x * 14u;
    uint _1956 = _1955 + 13u;
    float _1963 = _563 + (-1.0);
    float _1968 = (cbLight._m0[_1956].x * _1963) + 1.0;
    float _1969 = (cbLight._m0[_1956].y * _1963) + 1.0;
    float _1970 = (cbLight._m0[_1956].z * _1963) + 1.0;
    float _1971 = (cbLight._m0[_1956].w * _1963) + 1.0;
    uint _1972 = _1955 + 5u;
    float _1978 = isnan(1.0) ? _1969 : (isnan(_1969) ? 1.0 : min(_1969, 1.0));
    uint _1982 = _1955 + 4u;
    float _1992 = isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0));
    uint _1996 = _1955 | 1u;
    float _2007 = dot(vec3(cbLight._m0[_1955].xyz), vec3(_427, _428, _429));
    float _2010 = dot(vec3(cbLight._m0[_1996].xyz), vec3(_427, _428, _429));
    float _4383 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _4394 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2015 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * 0.3183098733425140380859375;
    float _2017 = (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * 0.3183098733425140380859375;
    float _2024 = ((cbLight._m0[_1972].x * _1978) * _2017) + (((cbLight._m0[_1982].x * _1944) * _1992) * _2015);
    float _2025 = ((_1978 * cbLight._m0[_1972].y) * _2017) + (((cbLight._m0[_1982].y * _1946) * _1992) * _2015);
    float _2026 = ((_1978 * cbLight._m0[_1972].z) * _2017) + (((cbLight._m0[_1982].z * _1948) * _1992) * _2015);
    uvec4 _2030 = floatBitsToUint(cbLight._m0[_1955 + 12u]);
    bool _2032 = _2030.x == 0u;
    float _2134;
    float _2136;
    float _2138;
    if (_2032)
    {
        _2134 = _2024;
        _2136 = _2025;
        _2138 = _2026;
    }
    else
    {
        uint _2142 = _1955 + 6u;
        float _2158 = (dot(vec3(cbLight._m0[_1955 + 2u].xyz), vec3(_427, _428, _429)) * 0.5) + 0.5;
        float _2159 = _2158 * _2158;
        float _4405 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2160 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _2161 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
        _2134 = (((cbLight._m0[_2142].x * 0.3183098733425140380859375) * _2160) * _2161) + _2024;
        _2136 = (((cbLight._m0[_2142].y * 0.3183098733425140380859375) * _2160) * _2161) + _2025;
        _2138 = (((cbLight._m0[_2142].z * 0.3183098733425140380859375) * _2160) * _2161) + _2026;
    }
    bool _2141 = _2030.y == 0u;
    float _2196;
    float _2198;
    float _2200;
    if (_2141)
    {
        _2196 = _2134;
        _2198 = _2136;
        _2200 = _2138;
    }
    else
    {
        uint _2358 = _1955 + 7u;
        float _2374 = (dot(vec3(cbLight._m0[_1955 + 3u].xyz), vec3(_427, _428, _429)) * 0.5) + 0.5;
        float _2375 = _2374 * _2374;
        float _4421 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2376 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _2377 = isnan(1.0) ? _1971 : (isnan(_1971) ? 1.0 : min(_1971, 1.0));
        _2196 = (((cbLight._m0[_2358].x * 0.3183098733425140380859375) * _2376) * _2377) + _2134;
        _2198 = (((cbLight._m0[_2358].y * 0.3183098733425140380859375) * _2376) * _2377) + _2136;
        _2200 = (((cbLight._m0[_2358].z * 0.3183098733425140380859375) * _2376) * _2377) + _2138;
    }
    uint _2203 = _1955 + 8u;
    float _2216 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1955].w)) * _460) * 0.949999988079071044921875);
    float _2217 = _2216 * _2216;
    float _2218 = cbLight._m0[_1955].x + _294;
    float _2219 = cbLight._m0[_1955].y + _295;
    float _2220 = cbLight._m0[_1955].z + _296;
    float _2224 = inversesqrt(dot(vec3(_2218, _2219, _2220), vec3(_2218, _2219, _2220)));
    float _2225 = _2224 * _2218;
    float _2226 = _2224 * _2219;
    float _2227 = _2224 * _2220;
    float _2228 = dot(vec3(_427, _428, _429), vec3(cbLight._m0[_1955].xyz));
    float _4437 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2231 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
    float _4448 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _2232 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
    float _2233 = dot(vec3(_427, _428, _429), vec3(_2225, _2226, _2227));
    float _4459 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2236 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _2237 = dot(vec3(cbLight._m0[_1955].xyz), vec3(_2225, _2226, _2227));
    float _4470 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _2241 = _2217 * _2217;
    float _2245 = ((_2236 * _2236) * (_2241 + (-1.0))) + 1.0;
    float _2256 = (exp2(log2(1.0 - (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2257 = 1.0 - _2217;
    float _2268 = (0.5 / (((_2232 * ((_2231 * _2257) + _2217)) + 9.9999999392252902907785028219223e-09) + (((_2232 * _2257) + _2217) * _2231))) * _2231;
    float _4481 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2270 = (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2241 / ((_2245 * _2245) * 3.141590118408203125));
    uint _2284 = _1955 + 9u;
    float _2295 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1996].w)) * _460) * 0.949999988079071044921875);
    float _2296 = _2295 * _2295;
    float _2297 = cbLight._m0[_1996].x + _294;
    float _2298 = cbLight._m0[_1996].y + _295;
    float _2299 = cbLight._m0[_1996].z + _296;
    float _2303 = inversesqrt(dot(vec3(_2297, _2298, _2299), vec3(_2297, _2298, _2299)));
    float _2304 = _2303 * _2297;
    float _2305 = _2303 * _2298;
    float _2306 = _2303 * _2299;
    float _2307 = dot(vec3(_427, _428, _429), vec3(cbLight._m0[_1996].xyz));
    float _4492 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2310 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
    float _2311 = dot(vec3(_427, _428, _429), vec3(_2304, _2305, _2306));
    float _4503 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2314 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
    float _2315 = dot(vec3(cbLight._m0[_1996].xyz), vec3(_2304, _2305, _2306));
    float _4514 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2319 = _2296 * _2296;
    float _2323 = ((_2314 * _2314) * (_2319 + (-1.0))) + 1.0;
    float _2332 = (exp2(log2(1.0 - (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2333 = 1.0 - _2296;
    float _2343 = (0.5 / (((_2232 * ((_2310 * _2333) + _2296)) + 9.9999999392252902907785028219223e-09) + (((_2232 * _2333) + _2296) * _2310))) * _2310;
    float _4525 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2345 = (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_2319 / ((_2323 * _2323) * 3.141590118408203125));
    float _2355 = (((_2332 * cbLight._m0[_2284].x) * _2345) * _1978) + ((((cbLight._m0[_2203].x * _1944) * _2256) * _2270) * _1992);
    float _2356 = (((_2332 * cbLight._m0[_2284].y) * _2345) * _1978) + ((((cbLight._m0[_2203].y * _1946) * _2256) * _2270) * _1992);
    float _2357 = (((_2332 * cbLight._m0[_2284].z) * _2345) * _1978) + ((((cbLight._m0[_2203].z * _1948) * _2256) * _2270) * _1992);
    float _2413;
    float _2415;
    float _2417;
    if (_2032)
    {
        _2413 = _2355;
        _2415 = _2356;
        _2417 = _2357;
    }
    else
    {
        uint _2419 = _1955 + 2u;
        uint _2423 = _1955 + 10u;
        float _2437 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2419].w)) * _460) * 0.949999988079071044921875);
        float _2438 = _2437 * _2437;
        float _2439 = cbLight._m0[_2419].x + _294;
        float _2440 = cbLight._m0[_2419].y + _295;
        float _2441 = cbLight._m0[_2419].z + _296;
        float _2445 = inversesqrt(dot(vec3(_2439, _2440, _2441), vec3(_2439, _2440, _2441)));
        float _2446 = _2445 * _2439;
        float _2447 = _2445 * _2440;
        float _2448 = _2445 * _2441;
        float _2449 = dot(vec3(_427, _428, _429), vec3(cbLight._m0[_2419].xyz));
        float _4536 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2452 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _2453 = dot(vec3(_427, _428, _429), vec3(_2446, _2447, _2448));
        float _4547 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2456 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _2457 = dot(vec3(cbLight._m0[_2419].xyz), vec3(_2446, _2447, _2448));
        float _4558 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2461 = _2438 * _2438;
        float _2465 = ((_2456 * _2456) * (_2461 + (-1.0))) + 1.0;
        float _2474 = (exp2(log2(1.0 - (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2475 = 1.0 - _2438;
        float _2485 = (0.5 / (((_2232 * ((_2452 * _2475) + _2438)) + 9.9999999392252902907785028219223e-09) + (((_2232 * _2475) + _2438) * _2452))) * _2452;
        float _4569 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2487 = (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_2461 / ((_2465 * _2465) * 3.141590118408203125));
        float _2488 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
        _2413 = (((_2474 * cbLight._m0[_2423].x) * _2487) * _2488) + _2355;
        _2415 = (((_2474 * cbLight._m0[_2423].y) * _2487) * _2488) + _2356;
        _2417 = (((_2474 * cbLight._m0[_2423].z) * _2487) * _2488) + _2357;
    }
    float _2519;
    float _2521;
    float _2523;
    if (_2141)
    {
        _2519 = _2413;
        _2521 = _2415;
        _2523 = _2417;
    }
    else
    {
        uint _2530 = _1955 + 3u;
        uint _2534 = _1955 + 11u;
        float _2548 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2530].w)) * _460) * 0.949999988079071044921875);
        float _2549 = _2548 * _2548;
        float _2550 = cbLight._m0[_2530].x + _294;
        float _2551 = cbLight._m0[_2530].y + _295;
        float _2552 = cbLight._m0[_2530].z + _296;
        float _2556 = inversesqrt(dot(vec3(_2550, _2551, _2552), vec3(_2550, _2551, _2552)));
        float _2557 = _2556 * _2550;
        float _2558 = _2556 * _2551;
        float _2559 = _2556 * _2552;
        float _2560 = dot(vec3(_427, _428, _429), vec3(cbLight._m0[_2530].xyz));
        float _4585 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2563 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
        float _2564 = dot(vec3(_427, _428, _429), vec3(_2557, _2558, _2559));
        float _4596 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2567 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
        float _2568 = dot(vec3(cbLight._m0[_2530].xyz), vec3(_2557, _2558, _2559));
        float _4607 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2572 = _2549 * _2549;
        float _2576 = ((_2567 * _2567) * (_2572 + (-1.0))) + 1.0;
        float _2585 = (exp2(log2(1.0 - (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2586 = 1.0 - _2549;
        float _2596 = (0.5 / (((_2232 * ((_2563 * _2586) + _2549)) + 9.9999999392252902907785028219223e-09) + (((_2232 * _2586) + _2549) * _2563))) * _2563;
        float _4618 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2598 = (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2572 / ((_2576 * _2576) * 3.141590118408203125));
        float _2599 = isnan(1.0) ? _1971 : (isnan(_1971) ? 1.0 : min(_1971, 1.0));
        _2519 = (((_2585 * cbLight._m0[_2534].x) * _2598) * _2599) + _2413;
        _2521 = (((_2585 * cbLight._m0[_2534].y) * _2598) * _2599) + _2415;
        _2523 = (((_2585 * cbLight._m0[_2534].z) * _2598) * _2599) + _2417;
    }
    float _2665;
    float _2667;
    float _2669;
    float _2671;
    float _2673;
    float _2675;
    if (_1953.y == 0u)
    {
        uvec4 _2620 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2621 = _2620.x;
        uint _2632 = uint((float(_2620.y) * floor(float(uint(cbSceneParam._m0[85u].y * _499) / _2621))) + floor(float(uint(cbSceneParam._m0[85u].x * _498) / _2621)));
        float _2642 = (log2(_1731 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2643 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        uint _2646 = uint(isnan(14.0) ? _2643 : (isnan(_2643) ? 14.0 : min(_2643, 14.0)));
        uvec4 _2651 = texelFetch(g_lightClusterGridBuffer, int(((_2646 << 2u) + (_2632 << 6u)) >> 2u));
        uint _2652 = _2651.x;
        uint _2653 = _2620.z;
        float _2802;
        float _2804;
        float _2806;
        float _2808;
        float _2810;
        float _2812;
        if (((((1u << ((_2653 >> 4u) & 15u)) + 4294967295u) & _2652) == 0u) || ((_2653 & 240u) == 0u))
        {
            _2802 = 0.0;
            _2804 = 0.0;
            _2806 = 0.0;
            _2808 = 0.0;
            _2810 = 0.0;
            _2812 = 0.0;
        }
        else
        {
            float _2803;
            float _2805;
            float _2807;
            float _2809;
            float _2811;
            float _2813;
            float _2986 = 0.0;
            float _2987 = 0.0;
            float _2988 = 0.0;
            float _2989 = 0.0;
            float _2990 = 0.0;
            float _2991 = 0.0;
            uint _2992 = 0u;
            uint _3001;
            bool _3002;
            for (;;)
            {
                _3001 = texelFetch(g_lightClassification, int((((_2646 << 5u) + (_2632 << 9u)) + (_2992 << 2u)) >> 2u)).x;
                _3002 = _3001 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3002)
                {
                    frontier_phi_71_pred = _2991;
                    frontier_phi_71_pred_1 = _2990;
                    frontier_phi_71_pred_2 = _2989;
                    frontier_phi_71_pred_3 = _2988;
                    frontier_phi_71_pred_4 = _2987;
                    frontier_phi_71_pred_5 = _2986;
                }
                else
                {
                    float _3131;
                    float _3132;
                    float _3133;
                    float _3134;
                    float _3135;
                    float _3136;
                    uint _3137;
                    _3131 = _2986;
                    _3132 = _2987;
                    _3133 = _2988;
                    _3134 = _2989;
                    _3135 = _2990;
                    _3136 = _2991;
                    _3137 = _3001;
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    for (;;)
                    {
                        uint _3141 = uint(findLSB(_3137)) + (_2992 << 5u);
                        uint _3138 = (_3137 + 4294967295u) & _3137;
                        uint _3143 = _3141 * 48u;
                        vec4 _3157 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3143)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 3u)).x));
                        uint _3163 = (_3141 * 48u) + 4u;
                        vec4 _3176 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3163)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 3u)).x));
                        uint _3182 = (_3141 * 48u) + 8u;
                        vec3 _3193 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3182)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 2u)).x));
                        float _3197 = _3157.x - _1729;
                        float _3198 = _3157.y - _1730;
                        float _3199 = _3157.z - _1731;
                        float _3200 = dot(vec3(_3197, _3198, _3199), vec3(_3197, _3198, _3199));
                        float _3203 = inversesqrt(_3200);
                        float _3204 = _3203 * _3197;
                        float _3205 = _3203 * _3198;
                        float _3206 = _3203 * _3199;
                        float _3207 = dot(vec3(_519, _522, _525), vec3(_3204, _3205, _3206));
                        float _3212 = 1.0 - (_3200 * _3157.w);
                        float _4644 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                        float _3213 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                        float _3214 = sqrt(_3200) * _3176.w;
                        float _3217 = 1.39999997615814208984375 / (_3214 + 1.39999997615814208984375);
                        float _3218 = _3217 * _3217;
                        float _3221 = ((1.0 - _3218) * _3207) + _3218;
                        float _3224 = _3214 * _3214;
                        float _3228 = ((isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0))) * _3213) / ((_3224 * 0.699999988079071044921875) + 1.0);
                        float _3232 = (-0.0) - _1729;
                        float _3233 = (-0.0) - _1730;
                        float _3234 = (-0.0) - _1731;
                        float _3238 = inversesqrt(dot(vec3(_3232, _3233, _3234), vec3(_3232, _3233, _3234)));
                        float _3239 = _3238 * _3232;
                        float _3240 = _3238 * _3233;
                        float _3241 = _3238 * _3234;
                        float _3248 = exp2(log2(1.0 / ((_3224 * 3.5) + 5.0)) * 0.25);
                        float _3249 = 1.0 - _587;
                        float _3256 = sqrt(1.0 - ((1.0 - (_3249 * _3249)) * (1.0 - (_3248 * _3248))));
                        float _3257 = _3256 * _3256;
                        float _3258 = _3257 * _3257;
                        float _3259 = _3239 + _3204;
                        float _3260 = _3240 + _3205;
                        float _3261 = _3241 + _3206;
                        float _3265 = inversesqrt(dot(vec3(_3259, _3260, _3261), vec3(_3259, _3260, _3261)));
                        float _3269 = dot(vec3(_519, _522, _525), vec3(_3239, _3240, _3241));
                        float _4660 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                        float _3272 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                        float _3273 = dot(vec3(_519, _522, _525), vec3(_3265 * _3259, _3265 * _3260, _3265 * _3261));
                        float _4671 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                        float _3276 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                        float _3280 = ((_3276 * _3276) * (_3258 + (-1.0))) + 1.0;
                        float _3281 = _3217 * _3257;
                        float _3282 = _3281 * _3281;
                        float _3285 = ((1.0 - _3282) * _3207) + _3282;
                        float _4682 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                        float _3286 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                        float _3287 = 1.0 - _3257;
                        float _3297 = (0.5 / (((_3286 * ((_3272 * _3287) + _3257)) + 9.9999999392252902907785028219223e-09) + (((_3286 * _3287) + _3257) * _3272))) * _3286;
                        float _4693 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                        float _3308 = (((_3258 * 3.1415927410125732421875) * (isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0)))) / ((_3280 * _3280) * ((_3224 * 2.1991131305694580078125) + 3.141590118408203125))) * _3213;
                        _3061 = (_3228 * _3176.x) + _3134;
                        _3062 = (_3228 * _3176.y) + _3135;
                        _3063 = (_3228 * _3176.z) + _3136;
                        _3058 = (_3308 * _3193.x) + _3131;
                        _3059 = (_3308 * _3193.y) + _3132;
                        _3060 = (_3308 * _3193.z) + _3133;
                        if (_3138 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3131 = _3058;
                            _3132 = _3059;
                            _3133 = _3060;
                            _3134 = _3061;
                            _3135 = _3062;
                            _3136 = _3063;
                            _3137 = _3138;
                        }
                    }
                    frontier_phi_71_pred = _3063;
                    frontier_phi_71_pred_1 = _3062;
                    frontier_phi_71_pred_2 = _3061;
                    frontier_phi_71_pred_3 = _3060;
                    frontier_phi_71_pred_4 = _3059;
                    frontier_phi_71_pred_5 = _3058;
                }
                _2813 = frontier_phi_71_pred;
                _2811 = frontier_phi_71_pred_1;
                _2809 = frontier_phi_71_pred_2;
                _2807 = frontier_phi_71_pred_3;
                _2805 = frontier_phi_71_pred_4;
                _2803 = frontier_phi_71_pred_5;
                uint _2993 = _2992 + 1u;
                if (_2993 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2986 = _2803;
                    _2987 = _2805;
                    _2988 = _2807;
                    _2989 = _2809;
                    _2990 = _2811;
                    _2991 = _2813;
                    _2992 = _2993;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2802 = _2803;
            _2804 = _2805;
            _2806 = _2807;
            _2808 = _2809;
            _2810 = _2811;
            _2812 = _2813;
        }
        uvec4 _2816 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2817 = _2816.z;
        uint _2819 = (_2817 >> 8u) & 15u;
        float _2954;
        float _2956;
        float _2958;
        float _2960;
        float _2962;
        float _2964;
        if (((4294967295u << _2819) & _2652) == 0u)
        {
            _2954 = _2802;
            _2956 = _2804;
            _2958 = _2806;
            _2960 = _2808;
            _2962 = _2810;
            _2964 = _2812;
        }
        else
        {
            float _2979 = inversesqrt(dot(vec3(_1729, _1730, _1731), vec3(_1729, _1730, _1731)));
            float _2980 = _2979 * _1729;
            float _2981 = _2979 * _1730;
            float _2982 = _2979 * _1731;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2819 < ((_2817 >> 12u) & 15u))
            {
                float _2955;
                float _2957;
                float _2959;
                float _2961;
                float _2963;
                float _2965;
                float _3114 = _2802;
                float _3115 = _2804;
                float _3116 = _2806;
                float _3117 = _2808;
                float _3118 = _2810;
                float _3119 = _2812;
                uint _3120 = _2819;
                uint _3129;
                bool _3130;
                for (;;)
                {
                    _3129 = texelFetch(g_lightClassification, int((((_2646 << 5u) + (_2632 << 9u)) + (_3120 << 2u)) >> 2u)).x;
                    _3130 = _3129 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3130)
                    {
                        frontier_phi_82_pred = _3119;
                        frontier_phi_82_pred_1 = _3118;
                        frontier_phi_82_pred_2 = _3117;
                        frontier_phi_82_pred_3 = _3116;
                        frontier_phi_82_pred_4 = _3115;
                        frontier_phi_82_pred_5 = _3114;
                    }
                    else
                    {
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3618;
                        float _3619;
                        float _3620;
                        float _3621;
                        float _3622;
                        float _3623;
                        float _3335 = _3114;
                        float _3336 = _3115;
                        float _3337 = _3116;
                        float _3338 = _3117;
                        float _3339 = _3118;
                        float _3340 = _3119;
                        uint _3341 = _3129;
                        uint _3342;
                        vec4 _3367;
                        float _3368;
                        vec4 _3383;
                        vec3 _3395;
                        vec4 _3411;
                        vec4 _3427;
                        float _3474;
                        bool _3475;
                        for (;;)
                        {
                            uint _3352 = ((_3120 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3341));
                            _3342 = (_3341 + 4294967295u) & _3341;
                            uint _3354 = _3352 * 40u;
                            _3367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 3u)).x));
                            _3368 = _3367.w;
                            uint _3370 = (_3352 * 40u) + 4u;
                            _3383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 3u)).x));
                            uint _3385 = (_3352 * 40u) + 8u;
                            _3395 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x));
                            uint _3398 = (_3352 * 40u) + 16u;
                            _3411 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3398)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 3u)).x));
                            uint _3414 = (_3352 * 40u) + 20u;
                            _3427 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 3u)).x));
                            uint _3430 = (_3352 * 40u) + 24u;
                            vec4 _3443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 3u)).x));
                            uint _3449 = (_3352 * 40u) + 28u;
                            vec4 _3462 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 3u)).x));
                            _3474 = fma(_1731, _3462.z, fma(_1730, _3462.y, _3462.x * _1729)) + _3462.w;
                            _3475 = !((fma(_1731, _3443.z, fma(_1730, _3443.y, _3443.x * _1729)) + _3443.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3475)
                            {
                                float _3502 = _3367.x - _1729;
                                float _3503 = _3367.y - _1730;
                                float _3504 = _3367.z - _1731;
                                float _3505 = dot(vec3(_3502, _3503, _3504), vec3(_3502, _3503, _3504));
                                float _3508 = inversesqrt(_3505);
                                float _3509 = _3508 * _3502;
                                float _3510 = _3508 * _3503;
                                float _3511 = _3508 * _3504;
                                float _3515 = 1.0 - (_3505 / (_3368 * _3368));
                                float _4704 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                                float _3516 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3520 = sqrt(_3505) * _3383.w;
                                float _3522 = 1.39999997615814208984375 / (_3520 + 1.39999997615814208984375);
                                float _3523 = _3522 * _3522;
                                float _3526 = ((1.0 - _3523) * dot(vec3(_3509, _3510, _3511), vec3(_519, _522, _525))) + _3523;
                                float _3529 = _3520 * _3520;
                                float _3533 = (fma(_1731, _3411.z, fma(_1730, _3411.y, _3411.x * _1729)) + _3411.w) / _3474;
                                float _3534 = (fma(_1731, _3427.z, fma(_1730, _3427.y, _3427.x * _1729)) + _3427.w) / _3474;
                                float _3538 = 1.0 - dot(vec2(_3533, _3534), vec2(_3533, _3534));
                                float _4720 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3539 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                                float _3540 = _3539 * (((isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0))) * _3516) / ((_3529 * 0.699999988079071044921875) + 1.0));
                                float _3552 = exp2(log2(1.0 / ((_3529 * 3.5) + 5.0)) * 0.25);
                                float _3553 = 1.0 - _587;
                                float _3560 = sqrt(1.0 - ((1.0 - (_3553 * _3553)) * (1.0 - (_3552 * _3552))));
                                float _3561 = _3560 * _3560;
                                float _3562 = _3561 * _3561;
                                float _3563 = _3509 - _2980;
                                float _3564 = _3510 - _2981;
                                float _3565 = _3511 - _2982;
                                float _3569 = inversesqrt(dot(vec3(_3563, _3564, _3565), vec3(_3563, _3564, _3565)));
                                float _3573 = dot(vec3(_519, _522, _525), vec3((-0.0) - _2980, (-0.0) - _2981, (-0.0) - _2982));
                                float _4731 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                                float _3576 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                                float _3577 = dot(vec3(_519, _522, _525), vec3(_3569 * _3563, _3569 * _3564, _3569 * _3565));
                                float _4742 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                                float _3580 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                                float _3584 = ((_3580 * _3580) * (_3562 + (-1.0))) + 1.0;
                                float _3585 = _3522 * _3561;
                                float _3586 = _3585 * _3585;
                                float _3592 = ((1.0 - _3586) * dot(vec3(_519, _522, _525), vec3(_3509, _3510, _3511))) + _3586;
                                float _4753 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                                float _3593 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                                float _3594 = 1.0 - _3561;
                                float _3604 = (0.5 / (((_3593 * ((_3576 * _3594) + _3561)) + 9.9999999392252902907785028219223e-09) + (((_3593 * _3594) + _3561) * _3576))) * _3593;
                                float _4764 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                                float _3614 = (_3539 * _3516) * (((_3562 * 3.1415927410125732421875) * (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0)))) / ((_3584 * _3584) * ((_3529 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3540 * _3383.z;
                                frontier_phi_88_pred_1 = _3540 * _3383.y;
                                frontier_phi_88_pred_2 = _3540 * _3383.x;
                                frontier_phi_88_pred_3 = _3614 * _3395.z;
                                frontier_phi_88_pred_4 = _3614 * _3395.y;
                                frontier_phi_88_pred_5 = _3614 * _3395.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3623 = frontier_phi_88_pred;
                            _3622 = frontier_phi_88_pred_1;
                            _3621 = frontier_phi_88_pred_2;
                            _3620 = frontier_phi_88_pred_3;
                            _3619 = frontier_phi_88_pred_4;
                            _3618 = frontier_phi_88_pred_5;
                            _3325 = _3621 + _3338;
                            _3326 = _3622 + _3339;
                            _3327 = _3623 + _3340;
                            _3322 = _3618 + _3335;
                            _3323 = _3619 + _3336;
                            _3324 = _3620 + _3337;
                            if (_3342 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3335 = _3322;
                                _3336 = _3323;
                                _3337 = _3324;
                                _3338 = _3325;
                                _3339 = _3326;
                                _3340 = _3327;
                                _3341 = _3342;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3327;
                        frontier_phi_82_pred_1 = _3326;
                        frontier_phi_82_pred_2 = _3325;
                        frontier_phi_82_pred_3 = _3324;
                        frontier_phi_82_pred_4 = _3323;
                        frontier_phi_82_pred_5 = _3322;
                    }
                    _2965 = frontier_phi_82_pred;
                    _2963 = frontier_phi_82_pred_1;
                    _2961 = frontier_phi_82_pred_2;
                    _2959 = frontier_phi_82_pred_3;
                    _2957 = frontier_phi_82_pred_4;
                    _2955 = frontier_phi_82_pred_5;
                    uint _3121 = _3120 + 1u;
                    if (_3121 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3114 = _2955;
                        _3115 = _2957;
                        _3116 = _2959;
                        _3117 = _2961;
                        _3118 = _2963;
                        _3119 = _2965;
                        _3120 = _3121;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2961;
                frontier_phi_63_64_ladder_1 = _2965;
                frontier_phi_63_64_ladder_2 = _2963;
                frontier_phi_63_64_ladder_3 = _2959;
                frontier_phi_63_64_ladder_4 = _2957;
                frontier_phi_63_64_ladder_5 = _2955;
            }
            else
            {
                frontier_phi_63_64_ladder = _2808;
                frontier_phi_63_64_ladder_1 = _2812;
                frontier_phi_63_64_ladder_2 = _2810;
                frontier_phi_63_64_ladder_3 = _2806;
                frontier_phi_63_64_ladder_4 = _2804;
                frontier_phi_63_64_ladder_5 = _2802;
            }
            _2954 = frontier_phi_63_64_ladder_5;
            _2956 = frontier_phi_63_64_ladder_4;
            _2958 = frontier_phi_63_64_ladder_3;
            _2960 = frontier_phi_63_64_ladder;
            _2962 = frontier_phi_63_64_ladder_2;
            _2964 = frontier_phi_63_64_ladder_1;
        }
        float _2969 = isnan(1.0) ? _563 : (isnan(_563) ? 1.0 : min(_563, 1.0));
        _2665 = (_2969 * _2960) + _2196;
        _2667 = (_2969 * _2962) + _2198;
        _2669 = (_2969 * _2964) + _2200;
        _2671 = ((_2954 * 0.039999999105930328369140625) * _2969) + _2519;
        _2673 = ((_2956 * 0.039999999105930328369140625) * _2969) + _2521;
        _2675 = ((_2958 * 0.039999999105930328369140625) * _2969) + _2523;
    }
    else
    {
        _2665 = _2196;
        _2667 = _2198;
        _2669 = _2200;
        _2671 = _2519;
        _2673 = _2521;
        _2675 = _2523;
    }
    float _2689 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2690 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2691 = cbSceneParam._m0[86u].x * (_1641 + ((_586 * cbMtdParam._m0[13u].y) * dot(vec3(_427, _428, _429), vec3(_197, _198, _199))));
    float _2692 = isnan(_2689) ? _2691 : (isnan(_2691) ? _2689 : min(_2691, _2689));
    float _2693 = isnan(_2690) ? _499 : (isnan(_499) ? _2690 : min(_499, _2690));
    vec4 _2695 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2692, _2693), 0.0);
    float _2697 = _2695.x;
    bool _2718 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2697)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2697))) > _479;
    vec4 _2722 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2718 ? _2692 : _498, _2718 ? _2693 : _499));
    float _4790 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _4801 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _4812 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _2746 = 0.959999978542327880859375 - (exp2(log2(1.0 - _578) * 5.0) * 0.959999978542327880859375);
    float _2748 = (_2722.x * _2746) * cbSceneParam._m0[72u].w;
    float _2750 = (_2722.y * _2746) * cbSceneParam._m0[72u].w;
    float _2752 = (_2722.z * _2746) * cbSceneParam._m0[72u].w;
    float _2760 = (_2748 + (((((_1618 * _1666.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))) * _1409) * _1682)) + _2671) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * (_2665 + ((isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0))) * _563))) - _2748) * _458);
    float _2762 = (_2750 + (((((_1618 * _1666.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))) * _1409) * _1682)) + _2673) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0))) * (_2667 + ((isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0))) * _563))) - _2750) * _458);
    float _2764 = (_2752 + (((((_1618 * _1666.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))) * _1409) * _1682)) + _2675) * cbPerFrame._m0[3u].x)) + ((((isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0))) * (_2669 + ((isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0))) * _563))) - _2752) * _458);
    uint _2765 = _538 + 6u;
    float _2773 = _498 / cbSceneParam._m0[86u].x;
    float _2774 = _499 / cbSceneParam._m0[86u].y;
    vec4 _2788 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2773, _2774, (log2((isnan(cbSceneParam._m0[77u].w) ? _479 : (isnan(_479) ? cbSceneParam._m0[77u].w : min(_479, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2790 = _2788.x;
    float _2791 = _2788.y;
    float _2792 = _2788.z;
    float _2793 = _2788.w;
    float _2864;
    float _2866;
    float _2868;
    float _2870;
    if (_479 > cbSceneParam._m0[78u].w)
    {
        float _2827 = isnan(_479) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _479 : min(cbSceneParam._m0[80u].w, _479));
        float _2828 = _2827 / _479;
        float _2839 = _2828 * _268;
        float _2840 = _269 * _2828;
        float _2841 = (-0.0) - _2840;
        float _2842 = _2828 * _270;
        float _2844 = (cbSceneParam._m0[77u].w * _2841) / _2827;
        float _2845 = _2844 + cbSceneParam._m0[79u].w;
        float _2846 = cbSceneParam._m0[79u].w - _2840;
        float _2852 = sqrt(((_2839 * _2839) + (_2840 * _2840)) + (_2842 * _2842));
        float _2855 = (1.0 - (cbSceneParam._m0[77u].w / _2827)) * _2852;
        float _2860 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2862 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3071;
        if (abs((_2841 - _2844) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3071 = ((((_2845 > 0.0) ? exp2(_2860 * _2845) : (2.0 - exp2(_2862 * _2845))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2855;
        }
        else
        {
            float _3015 = 1.0 / cbSceneParam._m0[80u].x;
            float _3016 = isnan(_2846) ? _2845 : (isnan(_2845) ? _2846 : max(_2845, _2846));
            float _3017 = isnan(_2846) ? _2845 : (isnan(_2845) ? _2846 : min(_2845, _2846));
            float _3026 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : min(_3016, 0.0));
            float _3027 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : min(_3017, 0.0));
            _3071 = ((abs(_2852 / _2841) * cbSceneParam._m0[80u].y) * ((((_3026 - _3027) * 2.0) - ((exp2(_2860 * (isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0)))) - exp2(_2860 * (isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0))))) * _3015)) - ((exp2(_2862 * _3026) - exp2(_2862 * _3027)) * _3015))) + (_2855 * cbSceneParam._m0[80u].z);
        }
        vec4 _3073 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2773, _2774, 1.0), 0.0);
        float _3082 = exp2((_3071 * (-1.44269502162933349609375)) * (1.0 - _3073.w));
        float _3083 = log2(_3082);
        float _3099 = log2(_2793);
        _2864 = (exp2(_3099 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3083 * cbSceneParam._m0[78u].x)) * _3073.x) / cbSceneParam._m0[78u].x)) + _2790;
        _2866 = (exp2(_3099 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3083 * cbSceneParam._m0[78u].y)) * _3073.y) / cbSceneParam._m0[78u].y)) + _2791;
        _2868 = (exp2(_3099 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3083 * cbSceneParam._m0[78u].z)) * _3073.z) / cbSceneParam._m0[78u].z)) + _2792;
        _2870 = _3082 * _2793;
    }
    else
    {
        _2864 = _2790;
        _2866 = _2791;
        _2868 = _2792;
        _2870 = _2793;
    }
    bool _3109;
    float _2925;
    vec4 _2928;
    float _2930;
    vec4 _2932;
    float _2940;
    float _2941;
    float _2942;
    float _2943;
    bool _2953;
    for (;;)
    {
        bool _2882 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2883 = log2(_2870);
        float _2890 = exp2(_2883 * cbSceneParam._m0[78u].x) * _2760;
        float _2891 = exp2(_2883 * cbSceneParam._m0[78u].y) * _2762;
        float _2892 = exp2(_2883 * cbSceneParam._m0[78u].z) * _2764;
        vec4 _2900 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_498, _499));
        float _2902 = _2900.x;
        float _2923 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2902)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2902))) - _479) * 3.0;
        float _4863 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
        _2925 = (isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0))) * cbInstanceData._m0[_2765].w;
        float _2926 = _486 + (-0.5);
        _2928 = cbMtdParam._m0[1u];
        _2930 = _2928.y * _2926;
        _2932 = cbMatDynParam._m0[0u];
        float _2939 = (roundEven(_2932.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2940 = _2939 * (_2882 ? _2890 : (_2890 + (cbSceneParam._m0[72u].w * _2864)));
        _2941 = _2939 * (_2882 ? _2891 : (_2891 + (cbSceneParam._m0[72u].w * _2866)));
        _2942 = _2939 * (_2882 ? _2892 : (_2892 + (cbSceneParam._m0[72u].w * _2868)));
        _2943 = _2926 * 0.999000012874603271484375;
        _2953 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2953)
        {
            if ((cbInstanceData._m0[_538 + 7u].x + _2943) < 0.5)
            {
                _3109 = true;
                break;
            }
        }
        uint _3050 = _539 + uint(_2932.w);
        if ((cbInstanceData._m0[_3050].w < 1.0) && ((cbInstanceData._m0[_3050].w + _2943) < 0.5))
        {
            _3109 = true;
            break;
        }
        if ((_2930 + 1.0) < _2928.x)
        {
            _3109 = true;
            break;
        }
        _3109 = false;
        break;
    }
    float _3313;
    if (_3109)
    {
        discard_state = true;
        _3313 = 0.0;
    }
    else
    {
        _3313 = _2925;
    }
    SV_Target.x = _2940;
    SV_Target.y = _2941;
    SV_Target.z = _2942;
    SV_Target.w = _3313;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2925;
    discard_exit();
}


