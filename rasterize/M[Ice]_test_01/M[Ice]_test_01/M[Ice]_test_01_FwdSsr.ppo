#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 0, std140) uniform cbPerSceneUBO
{
    vec4 _m0[39];
} cbPerScene;

layout(set = 0, binding = 26) uniform texture2D g_PrevFrameTexture;
layout(set = 0, binding = 27) uniform texture2D g_ConvertedDepthTexture;
layout(set = 0, binding = 0) uniform texture2D M_Ice_test_01_snp_0_Texture2D_10;
layout(set = 0, binding = 1) uniform texture2D M_Ice_test_01_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    float _105 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _106 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _107 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _113 = inversesqrt(dot(vec3(_105, _106, _107), vec3(_105, _106, _107)));
    float _120 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _121 = _120 * NORMAL.x;
    float _122 = _120 * NORMAL.y;
    float _123 = _120 * NORMAL.z;
    float _127 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _154 = texture(sampler2D(M_Ice_test_01_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _162 = (_154.x * 2.0) + (-1.0);
    float _164 = (_154.y * 2.0) + (-1.0);
    float _165 = dot(vec2(_162, _164), vec2(_162, _164));
    float _840 = isnan(0.0) ? _165 : (isnan(_165) ? 0.0 : max(_165, 0.0));
    float _171 = sqrt(1.0 - (isnan(1.0) ? _840 : (isnan(_840) ? 1.0 : min(_840, 1.0))));
    float _172 = abs(_121);
    float _173 = abs(_122);
    float _174 = abs(_123);
    float _175 = _172 * _172;
    float _176 = _173 * _173;
    float _177 = _174 * _174;
    float _213 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) * 0.0500000007450580596923828125;
    float _223 = (cbTextureTilingScale._m0[1u].x * (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[1u].z;
    vec4 _226 = texture(sampler2D(M_Ice_test_01_snp_0_Texture2D_9, SS_BumpMap), vec2(_223, (cbTextureTilingScale._m0[1u].y * _213) + cbTextureTilingScale._m0[1u].w));
    float _233 = (cbTextureTilingScale._m0[1u].y * (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) * 0.0500000007450580596923828125)) + cbTextureTilingScale._m0[1u].w;
    vec4 _234 = texture(sampler2D(M_Ice_test_01_snp_0_Texture2D_9, SS_BumpMap), vec2(_223, _233));
    vec4 _244 = texture(sampler2D(M_Ice_test_01_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _213) + cbTextureTilingScale._m0[1u].z, _233));
    float _258 = ((((((_234.x * _176) + (_226.x * _177)) + (_244.x * _175)) * 2.0) + (-1.0)) * cbMtdParam._m0[12u].w) + _162;
    float _259 = ((((((_234.y * _176) + (_226.y * _177)) + (_244.y * _175)) * 2.0) + (-1.0)) * cbMtdParam._m0[12u].w) + _164;
    float _262 = fma(_171, _121, fma(_259, _127 * TANGENT.x, (_113 * _105) * _258));
    float _265 = fma(_171, _122, fma(_259, _127 * TANGENT.y, (_113 * _106) * _258));
    float _268 = fma(_171, _123, fma(_259, _127 * TANGENT.z, (_113 * _107) * _258));
    float _272 = inversesqrt(dot(vec3(_262, _265, _268), vec3(_262, _265, _268)));
    float _283 = cbMtdParam._m0[13u].x + dot(vec4(_272 * _262, _272 * _265, _272 * _268, 0.0), vec4(cbMtdParam._m0[14u].xyz, 0.0));
    float _851 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _285 = (isnan(1.0) ? _851 : (isnan(_851) ? 1.0 : min(_851, 1.0))) * TEXCOORD_3.x;
    float _862 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _291 = ((cbMtdParam._m0[13u].w - cbMtdParam._m0[12u].x) * (isnan(1.0) ? _862 : (isnan(_862) ? 1.0 : min(_862, 1.0)))) + cbMtdParam._m0[12u].x;
    float _873 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _292 = isnan(1.0) ? _873 : (isnan(_873) ? 1.0 : min(_873, 1.0));
    float _306 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _307 = POSITION_1.x / POSITION_1.w;
    float _308 = POSITION_1.y / POSITION_1.w;
    float _312 = (_307 * 0.5) + 0.5;
    float _313 = 0.5 - (_308 * 0.5);
    float _319;
    float _321;
    float _323;
    float _325;
    if (_292 < cbPerScene._m0[22u].z)
    {
        _319 = 0.0;
        _321 = 0.0;
        _323 = 0.0;
        _325 = 0.0;
    }
    else
    {
        float _331 = 1.0 / _306;
        float frontier_phi_1_2_ladder;
        float frontier_phi_1_2_ladder_1;
        float frontier_phi_1_2_ladder_2;
        float frontier_phi_1_2_ladder_3;
        if (!(cbPerScene._m0[21u].y >= _331))
        {
            float _354 = fma(_123, cbPerScene._m0[8u].z, fma(_122, cbPerScene._m0[8u].y, cbPerScene._m0[8u].x * _121));
            float _357 = fma(_123, cbPerScene._m0[9u].z, fma(_122, cbPerScene._m0[9u].y, cbPerScene._m0[9u].x * _121));
            float _360 = fma(_123, cbPerScene._m0[10u].z, fma(_122, cbPerScene._m0[10u].y, cbPerScene._m0[10u].x * _121));
            float _367 = (_306 * _307) * cbPerScene._m0[28u].x;
            float _369 = (_306 * _308) * cbPerScene._m0[28u].y;
            float _373 = inversesqrt(dot(vec3(_367, _369, _306), vec3(_367, _369, _306)));
            float _374 = _367 * _373;
            float _375 = _369 * _373;
            float _376 = _373 * _306;
            float _380 = dot(vec3(_374, _375, _376), vec3(_354, _357, _360)) * 2.0;
            float _384 = _374 - (_380 * _354);
            float _385 = _375 - (_380 * _357);
            float _386 = _376 - (_380 * _360);
            float _390 = inversesqrt(dot(vec3(_384, _385, _386), vec3(_384, _385, _386)));
            float _393 = _386 * _390;
            float frontier_phi_1_2_ladder_3_ladder;
            float frontier_phi_1_2_ladder_3_ladder_1;
            float frontier_phi_1_2_ladder_3_ladder_2;
            float frontier_phi_1_2_ladder_3_ladder_3;
            if (_393 < cbPerScene._m0[16u].x)
            {
                frontier_phi_1_2_ladder_3_ladder = 0.0;
                frontier_phi_1_2_ladder_3_ladder_1 = 0.0;
                frontier_phi_1_2_ladder_3_ladder_2 = 0.0;
                frontier_phi_1_2_ladder_3_ladder_3 = 0.0;
            }
            else
            {
                float _406 = abs(dot(vec3((-0.0) - _374, (-0.0) - _375, (-0.0) - _376), vec3(_354, _357, _360)));
                float _884 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
                float _417 = (((_292 * _292) * 0.959999978542327880859375) * exp2(log2(1.0 - (isnan(1.0) ? _884 : (isnan(_884) ? 1.0 : min(_884, 1.0)))) * 5.0)) + 0.039999999105930328369140625;
                float _426 = (cbPerScene._m0[29u].x * (1.0 - _292)) + cbPerScene._m0[29u].y;
                float _895 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
                float _435 = ((cbPerScene._m0[23u].w - cbPerScene._m0[23u].z) * (isnan(1.0) ? _895 : (isnan(_895) ? 1.0 : min(_895, 1.0)))) + cbPerScene._m0[23u].z;
                float frontier_phi_1_2_ladder_3_ladder_4_ladder;
                float frontier_phi_1_2_ladder_3_ladder_4_ladder_1;
                float frontier_phi_1_2_ladder_3_ladder_4_ladder_2;
                float frontier_phi_1_2_ladder_3_ladder_4_ladder_3;
                if (_417 < cbPerScene._m0[22u].x)
                {
                    frontier_phi_1_2_ladder_3_ladder_4_ladder = 0.0;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_1 = 0.0;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_2 = 0.0;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_3 = 0.0;
                }
                else
                {
                    float _438 = _393 - cbPerScene._m0[16u].x;
                    float _906 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
                    float _439 = isnan(1.0) ? _906 : (isnan(_906) ? 1.0 : min(_906, 1.0));
                    float _440 = _439 * _439;
                    float _442 = (_417 - cbPerScene._m0[22u].x) * 10.0;
                    float _917 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
                    float _444 = isnan(1.0) ? _917 : (isnan(_917) ? 1.0 : min(_917, 1.0));
                    float _445 = isnan(_444) ? _440 : (isnan(_440) ? _444 : min(_440, _444));
                    float _449 = (cbPerScene._m0[21u].x - _306) * cbPerScene._m0[21u].z;
                    float _933 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
                    float _450 = isnan(1.0) ? _933 : (isnan(_933) ? 1.0 : min(_933, 1.0));
                    float _451 = isnan(_450) ? _445 : (isnan(_445) ? _450 : min(_445, _450));
                    float _452 = (_384 * _390) + _367;
                    float _453 = (_385 * _390) + _369;
                    float _454 = _393 + _306;
                    float _487 = fma(_454, cbPerScene._m0[7u].z, fma(_453, cbPerScene._m0[7u].y, cbPerScene._m0[7u].x * _452)) + cbPerScene._m0[7u].w;
                    float _491 = ((fma(_454, cbPerScene._m0[4u].z, fma(_453, cbPerScene._m0[4u].y, cbPerScene._m0[4u].x * _452)) + cbPerScene._m0[4u].w) / _487) - _312;
                    float _492 = ((fma(_454, cbPerScene._m0[5u].z, fma(_453, cbPerScene._m0[5u].y, cbPerScene._m0[5u].x * _452)) + cbPerScene._m0[5u].w) / _487) - _313;
                    float _499 = cbPerScene._m0[18u].x * _491;
                    float _500 = cbPerScene._m0[18u].y * _492;
                    float _505 = sqrt((_499 * _499) + (_500 * _500)) + 9.9999997473787516355514526367188e-06;
                    float _510 = (_491 / _505) * _435;
                    float _511 = (_492 / _505) * _435;
                    float _512 = (((1.0 / _454) - _331) / _505) * _435;
                    float _541 = abs(float(_510 > 0.0) - _312) / (abs(_510) + 1.0000000116860974230803549289703e-07);
                    float _542 = abs(float(_511 > 0.0) - _313) / (abs(_511) + 1.0000000116860974230803549289703e-07);
                    float _544 = (abs(((_512 > 0.0) ? cbPerScene._m0[20u].x : cbPerScene._m0[20u].y) - _331) / (abs(_512) + 1.0000000116860974230803549289703e-07)) + 2.0;
                    float _545 = isnan(_542) ? _541 : (isnan(_541) ? _542 : min(_541, _542));
                    float _546 = isnan(_544) ? _545 : (isnan(_545) ? _544 : min(_545, _544));
                    uint _549 = uint(int(isnan(cbPerScene._m0[23u].y) ? _546 : (isnan(_546) ? cbPerScene._m0[23u].y : min(_546, cbPerScene._m0[23u].y))));
                    float _326;
                    float _554;
                    float _556;
                    float _558;
                    if (int(_549) > int(0u))
                    {
                        float _551 = _512 + _331;
                        float _552 = _511 + _313;
                        float _553 = _510 + _312;
                        float _555;
                        float _557;
                        float _559;
                        float _560;
                        uint _571;
                        float _573;
                        float _575;
                        float _577;
                        float _579;
                        float _581;
                        float _583;
                        float _585;
                        uint _587;
                        float _589;
                        float _591;
                        float _593;
                        float _566 = 0.0;
                        float _567 = 0.0;
                        float _568 = 0.0;
                        float _569 = 0.0;
                        uint _570 = 0u;
                        float _572 = _331;
                        float _574 = _553;
                        float _576 = _552;
                        float _578 = _551;
                        float _580 = _312;
                        float _582 = _313;
                        float _584 = _331;
                        uint _586 = 1u;
                        float _588 = 0.0;
                        float _590 = 0.0;
                        float _592 = 0.0;
                        float _604;
                        float _611;
                        float _612;
                        float _613;
                        float _614;
                        float _615;
                        float _616;
                        uint _617;
                        float _618;
                        bool _624;
                        for (;;)
                        {
                            _604 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _574, cbSceneParam._m0[86u].y * _576), 0.0).x;
                            bool _610 = _570 == (_549 + 4294967295u);
                            _611 = _610 ? _588 : _574;
                            _612 = _610 ? _590 : _576;
                            _613 = _610 ? _592 : _578;
                            _614 = _610 ? _588 : _580;
                            _615 = _610 ? _590 : _582;
                            _616 = _610 ? _592 : _584;
                            _617 = _610 ? 1u : _586;
                            _618 = _610 ? (-1.0) : (_578 - _604);
                            _624 = (_617 != 0u) && ((_618 <= 0.0) && ((_610 ? (-1.0) : (_604 - (_572 * cbPerScene._m0[19u].y))) < 0.0));
                            float frontier_phi_14_pred;
                            float frontier_phi_14_pred_1;
                            float frontier_phi_14_pred_2;
                            uint frontier_phi_14_pred_3;
                            float frontier_phi_14_pred_4;
                            float frontier_phi_14_pred_5;
                            float frontier_phi_14_pred_6;
                            float frontier_phi_14_pred_7;
                            float frontier_phi_14_pred_8;
                            float frontier_phi_14_pred_9;
                            float frontier_phi_14_pred_10;
                            float frontier_phi_14_pred_11;
                            float frontier_phi_14_pred_12;
                            float frontier_phi_14_pred_13;
                            float frontier_phi_14_pred_14;
                            uint frontier_phi_14_pred_15;
                            if (_624)
                            {
                                uint _634 = uint(int(log2(_435) + 0.999000012874603271484375));
                                float _645;
                                float _647;
                                float _649;
                                float _651;
                                float _653;
                                float _655;
                                float _657;
                                if (int(_634) > int(0u))
                                {
                                    uint _755;
                                    float _757;
                                    float _758;
                                    float _759;
                                    float _760;
                                    float _761;
                                    float _762;
                                    float _763;
                                    _755 = 0u;
                                    _757 = _611;
                                    _758 = _612;
                                    _759 = _613;
                                    _760 = _614;
                                    _761 = _615;
                                    _762 = _616;
                                    _763 = _604;
                                    float _646;
                                    float _648;
                                    float _650;
                                    float _652;
                                    float _654;
                                    float _656;
                                    float _658;
                                    for (;;)
                                    {
                                        float _767 = (_760 + _757) * 0.5;
                                        float _768 = (_761 + _758) * 0.5;
                                        float _769 = (_762 + _759) * 0.5;
                                        vec4 _777 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _767, cbSceneParam._m0[86u].y * _768), 0.0);
                                        float _779 = _777.x;
                                        bool _781 = (_769 - _779) < 0.0;
                                        _646 = _781 ? _767 : _757;
                                        _648 = _781 ? _768 : _758;
                                        _650 = _781 ? _769 : _759;
                                        _652 = _781 ? _760 : _767;
                                        _654 = _781 ? _761 : _768;
                                        _656 = _781 ? _762 : _769;
                                        _658 = _781 ? _779 : _763;
                                        uint _756 = _755 + 1u;
                                        if (_756 == _634)
                                        {
                                            break;
                                        }
                                        else
                                        {
                                            _755 = _756;
                                            _757 = _646;
                                            _758 = _648;
                                            _759 = _650;
                                            _760 = _652;
                                            _761 = _654;
                                            _762 = _656;
                                            _763 = _658;
                                        }
                                    }
                                    _645 = _646;
                                    _647 = _648;
                                    _649 = _650;
                                    _651 = _652;
                                    _653 = _654;
                                    _655 = _656;
                                    _657 = _658;
                                }
                                else
                                {
                                    _645 = _611;
                                    _647 = _612;
                                    _649 = _613;
                                    _651 = _614;
                                    _653 = _615;
                                    _655 = _616;
                                    _657 = _604;
                                }
                                float _667 = cbPerScene._m0[28u].x * ((_645 * 2.0) + (-1.0));
                                float _668 = cbPerScene._m0[28u].y * (1.0 - (_647 * 2.0));
                                float _700 = fma(_657, cbPerScene._m0[27u].w, fma(_668, cbPerScene._m0[27u].y, cbPerScene._m0[27u].x * _667) + cbPerScene._m0[27u].z);
                                float _701 = fma(_657, cbPerScene._m0[24u].w, fma(_668, cbPerScene._m0[24u].y, _667 * cbPerScene._m0[24u].x) + cbPerScene._m0[24u].z) / _700;
                                float _702 = fma(_657, cbPerScene._m0[25u].w, fma(_668, cbPerScene._m0[25u].y, cbPerScene._m0[25u].x * _667) + cbPerScene._m0[25u].z) / _700;
                                vec4 _711 = textureLod(sampler2D(g_PrevFrameTexture, SS_ClampLinear), vec2(cbSceneParam._m0[87u].z * _701, cbSceneParam._m0[87u].w * _702), 0.0);
                                float _716 = isnan(_451) ? 1.0 : (isnan(1.0) ? _451 : min(1.0, _451));
                                float _717 = 0.5 - _701;
                                float _718 = 0.5 - _702;
                                float _719 = _717 * 2.0;
                                float _720 = _718 * 2.0;
                                float _721 = _719 * _719;
                                float _722 = _720 * _720;
                                float _969 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
                                float _980 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
                                float _731 = inversesqrt(dot(vec2(_510, _511), vec2(_510, _511)));
                                float _737 = inversesqrt(dot(vec2(_719, _720), vec2(_719, _720)));
                                float _743 = dot(vec2((_717 * (-2.0)) * _737, (_718 * (-2.0)) * _737), vec2(_731 * _510, _731 * _511));
                                float _991 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
                                float _750 = ((1.0 - (isnan(1.0) ? _980 : (isnan(_980) ? 1.0 : min(_980, 1.0)))) * (1.0 - (isnan(1.0) ? _969 : (isnan(_969) ? 1.0 : min(_969, 1.0))))) * (4.0 - ((isnan(1.0) ? _991 : (isnan(_991) ? 1.0 : min(_991, 1.0))) * 2.0));
                                float _1002 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
                                float _751 = isnan(1.0) ? _1002 : (isnan(_1002) ? 1.0 : min(_1002, 1.0));
                                float _752 = _751 * _751;
                                frontier_phi_14_pred = _592;
                                frontier_phi_14_pred_1 = _590;
                                frontier_phi_14_pred_2 = _588;
                                frontier_phi_14_pred_3 = _617;
                                frontier_phi_14_pred_4 = _655;
                                frontier_phi_14_pred_5 = _653;
                                frontier_phi_14_pred_6 = _651;
                                frontier_phi_14_pred_7 = _649;
                                frontier_phi_14_pred_8 = _647;
                                frontier_phi_14_pred_9 = _645;
                                frontier_phi_14_pred_10 = _572;
                                frontier_phi_14_pred_11 = isnan(_752) ? _716 : (isnan(_716) ? _752 : min(_716, _752));
                                frontier_phi_14_pred_12 = _711.z;
                                frontier_phi_14_pred_13 = _711.y;
                                frontier_phi_14_pred_14 = _711.x;
                                frontier_phi_14_pred_15 = _549;
                            }
                            else
                            {
                                bool _636 = _618 > 0.0;
                                frontier_phi_14_pred = _636 ? _613 : _592;
                                frontier_phi_14_pred_1 = _636 ? _612 : _590;
                                frontier_phi_14_pred_2 = _636 ? _611 : _588;
                                frontier_phi_14_pred_3 = uint(_636);
                                frontier_phi_14_pred_4 = _613;
                                frontier_phi_14_pred_5 = _612;
                                frontier_phi_14_pred_6 = _611;
                                frontier_phi_14_pred_7 = _613 + _512;
                                frontier_phi_14_pred_8 = _612 + _511;
                                frontier_phi_14_pred_9 = _611 + _510;
                                frontier_phi_14_pred_10 = _604;
                                frontier_phi_14_pred_11 = _569;
                                frontier_phi_14_pred_12 = _568;
                                frontier_phi_14_pred_13 = _567;
                                frontier_phi_14_pred_14 = _566;
                                frontier_phi_14_pred_15 = _570 + 1u;
                            }
                            _593 = frontier_phi_14_pred;
                            _591 = frontier_phi_14_pred_1;
                            _589 = frontier_phi_14_pred_2;
                            _587 = frontier_phi_14_pred_3;
                            _585 = frontier_phi_14_pred_4;
                            _583 = frontier_phi_14_pred_5;
                            _581 = frontier_phi_14_pred_6;
                            _579 = frontier_phi_14_pred_7;
                            _577 = frontier_phi_14_pred_8;
                            _575 = frontier_phi_14_pred_9;
                            _573 = frontier_phi_14_pred_10;
                            _560 = frontier_phi_14_pred_11;
                            _559 = frontier_phi_14_pred_12;
                            _557 = frontier_phi_14_pred_13;
                            _555 = frontier_phi_14_pred_14;
                            _571 = frontier_phi_14_pred_15;
                            if (int(_571) < int(_549))
                            {
                                _566 = _555;
                                _567 = _557;
                                _568 = _559;
                                _569 = _560;
                                _570 = _571;
                                _572 = _573;
                                _574 = _575;
                                _576 = _577;
                                _578 = _579;
                                _580 = _581;
                                _582 = _583;
                                _584 = _585;
                                _586 = _587;
                                _588 = _589;
                                _590 = _591;
                                _592 = _593;
                                continue;
                            }
                            else
                            {
                                break;
                            }
                        }
                        _554 = _555;
                        _556 = _557;
                        _558 = _559;
                        _326 = _560;
                    }
                    else
                    {
                        _554 = 0.0;
                        _556 = 0.0;
                        _558 = 0.0;
                        _326 = 0.0;
                    }
                    float frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder;
                    float frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_1;
                    float frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_2;
                    float frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_3;
                    if ((isnan(_554) || isnan(_556)) || isnan(_558))
                    {
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder = 0.0;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_1 = 0.0;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_2 = 0.0;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_3 = 0.0;
                    }
                    else
                    {
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder = (_326 * _554) * cbPerScene._m0[28u].w;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_1 = _326;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_2 = (_326 * _558) * cbPerScene._m0[28u].w;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_3 = (_326 * _556) * cbPerScene._m0[28u].w;
                    }
                    frontier_phi_1_2_ladder_3_ladder_4_ladder = frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_1 = frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_1;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_2 = frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_2;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_3 = frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_3;
                }
                frontier_phi_1_2_ladder_3_ladder = frontier_phi_1_2_ladder_3_ladder_4_ladder;
                frontier_phi_1_2_ladder_3_ladder_1 = frontier_phi_1_2_ladder_3_ladder_4_ladder_1;
                frontier_phi_1_2_ladder_3_ladder_2 = frontier_phi_1_2_ladder_3_ladder_4_ladder_2;
                frontier_phi_1_2_ladder_3_ladder_3 = frontier_phi_1_2_ladder_3_ladder_4_ladder_3;
            }
            frontier_phi_1_2_ladder = frontier_phi_1_2_ladder_3_ladder;
            frontier_phi_1_2_ladder_1 = frontier_phi_1_2_ladder_3_ladder_1;
            frontier_phi_1_2_ladder_2 = frontier_phi_1_2_ladder_3_ladder_2;
            frontier_phi_1_2_ladder_3 = frontier_phi_1_2_ladder_3_ladder_3;
        }
        else
        {
            frontier_phi_1_2_ladder = 0.0;
            frontier_phi_1_2_ladder_1 = 0.0;
            frontier_phi_1_2_ladder_2 = 0.0;
            frontier_phi_1_2_ladder_3 = 0.0;
        }
        _319 = frontier_phi_1_2_ladder;
        _321 = frontier_phi_1_2_ladder_3;
        _323 = frontier_phi_1_2_ladder_2;
        _325 = frontier_phi_1_2_ladder_1;
    }
    SV_Target.x = _319;
    SV_Target.y = _321;
    SV_Target.z = _323;
    SV_Target.w = _325;
}


