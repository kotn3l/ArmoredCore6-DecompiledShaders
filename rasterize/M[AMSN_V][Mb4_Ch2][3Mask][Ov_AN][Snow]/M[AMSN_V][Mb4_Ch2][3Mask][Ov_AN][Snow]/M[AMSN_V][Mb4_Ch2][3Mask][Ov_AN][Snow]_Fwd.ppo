#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_10;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1208;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234;
    float _235;
    float _236;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
    }
    else
    {
        _234 = _220;
        _235 = _221;
        _236 = _222;
    }
    vec4 _256 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _285 = cbMtdParam._m0[15u].x * texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w)).x;
    float _293 = ((cbMtdParam._m0[14u].z * (-1.39999997615814208984375)) * (((1.0 - _256.x) * 2.0) - _285)) + 1.0;
    float _3519 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _294 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
    vec4 _306 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _323 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _325 = _323.x;
    float _326 = _323.y;
    float _327 = _323.z;
    float _334 = ((_306.x - _325) * _294) + _325;
    float _335 = ((_306.y - _326) * _294) + _326;
    float _336 = ((_306.z - _327) * _294) + _327;
    float _342 = (((((1.0 - _256.y) * 2.0) - _285) * (-1.39999997615814208984375)) * cbMtdParam._m0[15u].z) + 1.0;
    float _3530 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _343 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
    vec4 _355 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _366 = ((_355.x - _334) * _343) + _334;
    float _367 = ((_355.y - _335) * _343) + _335;
    float _368 = ((_355.z - _336) * _343) + _336;
    float _374 = (((((1.0 - _256.z) * 2.0) - _285) * (-1.39999997615814208984375)) * cbMtdParam._m0[15u].y) + 1.0;
    float _3541 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _375 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
    vec4 _388 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _401 = ((_388.z - _368) * _375) + _368;
    float _404 = ((((_388.x - _366) * _375) + _366) * 2.0) + (-1.0);
    float _406 = ((((_388.y - _367) * _375) + _367) * 2.0) + (-1.0);
    float _407 = dot(vec2(_404, _406), vec2(_404, _406));
    float _3552 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _412 = sqrt(1.0 - (isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0))));
    float _413 = fma(_412, _234, 0.0);
    float _414 = fma(_412, _235, 0.0);
    float _415 = fma(_412, _236, 0.0);
    float _424 = exp2(log2(inversesqrt(dot(vec3(_413, _414, _415), vec3(_413, _414, _415))) * _414) * cbMtdParam._m0[14u].x) * cbMtdParam._m0[14u].y;
    float _3563 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _425 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
    vec4 _443 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _448 = _443.x * cbMtdParam._m0[10u].x;
    float _449 = _443.y * cbMtdParam._m0[10u].y;
    float _450 = _443.z * cbMtdParam._m0[10u].z;
    vec4 _468 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _482 = (((_468.x * cbMtdParam._m0[11u].x) - _448) * _294) + _448;
    float _483 = (((_468.y * cbMtdParam._m0[11u].y) - _449) * _294) + _449;
    float _484 = (((_468.z * cbMtdParam._m0[11u].z) - _450) * _294) + _450;
    vec4 _501 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _515 = (((_501.x * cbMtdParam._m0[12u].x) - _482) * _343) + _482;
    float _516 = (((_501.y * cbMtdParam._m0[12u].y) - _483) * _343) + _483;
    float _517 = (((_501.z * cbMtdParam._m0[12u].z) - _484) * _343) + _484;
    vec4 _535 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    vec4 _569 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _577 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * ((((_535.x * cbMtdParam._m0[13u].x) - _515) * _375) + _515)) * _569.x;
    float _580 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * ((((_535.y * cbMtdParam._m0[13u].y) - _516) * _375) + _516)) * _569.y;
    float _583 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * ((((_535.z * cbMtdParam._m0[13u].z) - _517) * _375) + _517)) * _569.z;
    vec4 _595 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _606 = ((_595.x - _577) * _425) + _577;
    float _607 = ((_595.y - _580) * _425) + _580;
    float _608 = ((_595.z - _583) * _425) + _583;
    vec4 _621 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _628 = (_621.x * 2.0) + (-1.0);
    float _629 = (_621.y * 2.0) + (-1.0);
    float _630 = dot(vec2(_628, _629), vec2(_628, _629));
    float _3574 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _638 = ((_621.z - _401) * _425) + _401;
    float _647 = ((sqrt(1.0 - (isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0)))) - _412) * _425) + _412;
    vec4 _661 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _671 = (((_628 - _404) * _425) + _404) + (((_661.x * 2.0) + (-1.0)) * cbMtdParam._m0[14u].w);
    float _672 = (((_629 - _406) * _425) + _406) + (((_661.y * 2.0) + (-1.0)) * cbMtdParam._m0[14u].w);
    float _675 = fma(_647, _234, fma(_672, _226 * TANGENT.x, (_212 * _204) * _671));
    float _678 = fma(_647, _235, fma(_672, _226 * TANGENT.y, (_212 * _205) * _671));
    float _681 = fma(_647, _236, fma(_672, _226 * TANGENT.z, (_212 * _206) * _671));
    float _685 = inversesqrt(dot(vec3(_675, _678, _681), vec3(_675, _678, _681)));
    float _686 = _685 * _675;
    float _687 = _685 * _678;
    float _688 = _685 * _681;
    float _3585 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _689 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
    float _3596 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _3607 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _3618 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _708 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _748 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _758 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _748);
    float _759 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _748);
    float _760 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _748);
    float _764 = inversesqrt(dot(vec3(_758, _759, _760), vec3(_758, _759, _760)));
    float _765 = _758 * _764;
    float _766 = _759 * _764;
    float _767 = _760 * _764;
    float _773 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _774 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _792 = fma(_688, cbSceneParam._m0[5u].z, fma(_687, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _686));
    float _795 = fma(_688, cbSceneParam._m0[6u].z, fma(_687, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _686));
    float _798 = fma(_688, cbSceneParam._m0[7u].z, fma(_687, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _686));
    uint _811 = uint(roundEven(NORMAL.w)) * 13u;
    uint _813 = (_811 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _819 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0)))) * cbInstanceData._m0[_813].x;
    float _820 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0)))) * cbInstanceData._m0[_813].y;
    float _821 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0)))) * cbInstanceData._m0[_813].z;
    float _3629 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _822 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    float _3640 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _823 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    float _3651 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _824 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    vec4 _833 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _773, cbSceneParam._m0[86u].y * _774));
    float _836 = _833.x * TEXCOORD_4;
    float _837 = dot(vec3(_686, _687, _688), vec3(_765, _766, _767));
    float _840 = _837 * 2.0;
    float _844 = (_840 * _686) - _765;
    float _845 = (_840 * _687) - _766;
    float _846 = (_840 * _688) - _767;
    float _850 = abs(dot(vec3(_765, _766, _767), vec3(_686, _687, _688)));
    float _3662 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _852 = sqrt(_689);
    float _865 = exp2((_852 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_852 * 3.0));
    float _897 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _901 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _905 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1207;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _932 = fma(_905, cbModelParam._m0[26u].z, fma(_901, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _897));
        float _936 = fma(_905, cbModelParam._m0[27u].z, fma(_901, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _897));
        float _940 = fma(_905, cbModelParam._m0[28u].z, fma(_901, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _897));
        float _965 = _897 + _686;
        float _966 = _901 + _687;
        float _967 = _905 + _688;
        float _977 = fma(_967, cbModelParam._m0[26u].z, fma(_966, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _965)) - _932;
        float _978 = fma(_967, cbModelParam._m0[27u].z, fma(_966, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _965)) - _936;
        float _979 = fma(_967, cbModelParam._m0[28u].z, fma(_966, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _965)) - _940;
        float _983 = inversesqrt(dot(vec3(_977, _978, _979), vec3(_977, _978, _979)));
        float _996 = ((_983 * _977) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_932 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _997 = ((_983 * _978) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_936 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _998 = ((_983 * _979) / cbModelParam._m0[34u].z) + ((((((_940 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        float _1035 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_1001.x + (-0.5));
        float _1037 = _1035 * (_1001.y + (-0.5));
        float _1038 = _1035 * (_1001.z + (-0.5));
        float _1045 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1008.x + (-0.5));
        float _1047 = _1045 * (_1008.y + (-0.5));
        float _1048 = _1045 * (_1008.z + (-0.5));
        float _1055 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1015.x + (-0.5));
        float _1057 = _1055 * (_1015.y + (-0.5));
        float _1058 = _1055 * (_1015.z + (-0.5));
        float _1065 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1022.x + (-0.5));
        float _1067 = _1065 * (_1022.y + (-0.5));
        float _1068 = _1065 * (_1022.z + (-0.5));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = _1036 * 0.5;
        float _1073 = _1046 * 0.5;
        float _1074 = _1056 * 0.5;
        float _1075 = dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074));
        float _1080 = (_1075 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1075);
        float _1089 = (dot(vec3(_686, _687, _688), vec3(_1080 * _1072, _1080 * _1073, _1080 * _1074)) + 1.0) * 0.5;
        float _3688 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1099 = sqrt(((_1073 * _1073) + (_1072 * _1072)) + (_1074 * _1074)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _3699 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _3710 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * (_1101 + 1.0))) + _1106) * _1069;
        float _1116 = _1037 * 0.5;
        float _1117 = _1047 * 0.5;
        float _1118 = _1057 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1132 = (dot(vec3(_686, _687, _688), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _3721 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1141 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1070 + 9.9999997473787516355514526367188e-06);
        float _3732 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1143 = _1142 * 2.0;
        float _1147 = (1.0 - _1142) / (_1142 + 1.0);
        float _3743 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1157 = ((((1.0 - _1148) * (_1143 + 2.0)) * exp2(log2(isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * (_1143 + 1.0))) + _1148) * _1070;
        float _1158 = _1038 * 0.5;
        float _1159 = _1048 * 0.5;
        float _1160 = _1058 * 0.5;
        float _1161 = dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160));
        float _1166 = (_1161 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1161);
        float _1174 = (dot(vec3(_686, _687, _688), vec3(_1166 * _1158, _1166 * _1159, _1166 * _1160)) + 1.0) * 0.5;
        float _3754 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1183 = sqrt(((_1159 * _1159) + (_1158 * _1158)) + (_1160 * _1160)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _3765 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1185 = _1184 * 2.0;
        float _1189 = (1.0 - _1184) / (_1184 + 1.0);
        float _3776 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1199 = ((((1.0 - _1190) * (_1185 + 2.0)) * exp2(log2(isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * (_1185 + 1.0))) + _1190) * _1071;
        _1207 = _1038;
        _1209 = _1037;
        _1210 = _1036;
        _1211 = _1048;
        _1212 = _1047;
        _1213 = _1046;
        _1214 = _1058;
        _1215 = _1057;
        _1216 = _1056;
        _1217 = _1071;
        _1218 = _1070;
        _1219 = _1069;
        _1220 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
        _1221 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)));
        _1222 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)));
    }
    else
    {
        _1207 = _1208;
        _1209 = _1208;
        _1210 = _1208;
        _1211 = _1208;
        _1212 = _1208;
        _1213 = _1208;
        _1214 = _1208;
        _1215 = _1208;
        _1216 = _1208;
        _1217 = _1208;
        _1218 = _1208;
        _1219 = _1208;
        _1220 = 0.0;
        _1221 = 0.0;
        _1222 = 0.0;
    }
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1248 = fma(_905, cbModelParam._m0[30u].z, fma(_901, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _897));
        float _1252 = fma(_905, cbModelParam._m0[31u].z, fma(_901, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _897));
        float _1256 = fma(_905, cbModelParam._m0[32u].z, fma(_901, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _897));
        float _1279 = _897 + _686;
        float _1280 = _901 + _687;
        float _1281 = _905 + _688;
        float _1291 = fma(_1281, cbModelParam._m0[30u].z, fma(_1280, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1279)) - _1248;
        float _1292 = fma(_1281, cbModelParam._m0[31u].z, fma(_1280, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1279)) - _1252;
        float _1293 = fma(_1281, cbModelParam._m0[32u].z, fma(_1280, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1279)) - _1256;
        float _1297 = inversesqrt(dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293)));
        float _1310 = ((_1297 * _1291) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1248 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1311 = ((_1297 * _1292) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1252 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1312 = ((_1297 * _1293) / cbModelParam._m0[35u].z) + ((((((_1256 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        float _1347 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1348 = _1347 * (_1314.x + (-0.5));
        float _1349 = _1347 * (_1314.y + (-0.5));
        float _1350 = _1347 * (_1314.z + (-0.5));
        float _1357 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1321.x + (-0.5));
        float _1359 = _1357 * (_1321.y + (-0.5));
        float _1360 = _1357 * (_1321.z + (-0.5));
        float _1367 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1328.x + (-0.5));
        float _1369 = _1367 * (_1328.y + (-0.5));
        float _1370 = _1367 * (_1328.z + (-0.5));
        float _1377 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1335.x + (-0.5));
        float _1379 = _1377 * (_1335.y + (-0.5));
        float _1380 = _1377 * (_1335.z + (-0.5));
        float _1381 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1382 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1383 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1384 = _1348 * 0.5;
        float _1385 = _1358 * 0.5;
        float _1386 = _1368 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1400 = (dot(vec3(_686, _687, _688), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _3817 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1409 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1381 + 9.9999997473787516355514526367188e-06);
        float _3828 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1411 = _1410 * 2.0;
        float _1415 = (1.0 - _1410) / (_1410 + 1.0);
        float _3839 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1425 = ((((1.0 - _1416) * (_1411 + 2.0)) * exp2(log2(isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_1411 + 1.0))) + _1416) * _1381;
        float _1426 = _1349 * 0.5;
        float _1427 = _1359 * 0.5;
        float _1428 = _1369 * 0.5;
        float _1429 = dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428));
        float _1434 = (_1429 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1429);
        float _1442 = (dot(vec3(_686, _687, _688), vec3(_1434 * _1426, _1434 * _1427, _1434 * _1428)) + 1.0) * 0.5;
        float _3850 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1451 = sqrt(((_1427 * _1427) + (_1426 * _1426)) + (_1428 * _1428)) / (_1382 + 9.9999997473787516355514526367188e-06);
        float _3861 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1453 = _1452 * 2.0;
        float _1457 = (1.0 - _1452) / (_1452 + 1.0);
        float _3872 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1467 = ((((1.0 - _1458) * (_1453 + 2.0)) * exp2(log2(isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_1453 + 1.0))) + _1458) * _1382;
        float _1468 = _1350 * 0.5;
        float _1469 = _1360 * 0.5;
        float _1470 = _1370 * 0.5;
        float _1471 = dot(vec3(_1468, _1469, _1470), vec3(_1468, _1469, _1470));
        float _1476 = (_1471 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1471);
        float _1484 = (dot(vec3(_686, _687, _688), vec3(_1476 * _1468, _1476 * _1469, _1476 * _1470)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1493 = sqrt(((_1469 * _1469) + (_1468 * _1468)) + (_1470 * _1470)) / (_1383 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1495 = _1494 * 2.0;
        float _1499 = (1.0 - _1494) / (_1494 + 1.0);
        float _3905 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1509 = ((((1.0 - _1500) * (_1495 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1495 + 1.0))) + _1500) * _1383;
        _1517 = _1350;
        _1518 = _1349;
        _1519 = _1348;
        _1520 = _1360;
        _1521 = _1359;
        _1522 = _1358;
        _1523 = _1370;
        _1524 = _1369;
        _1525 = _1368;
        _1526 = _1383;
        _1527 = _1382;
        _1528 = _1381;
        _1529 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)));
        _1530 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)));
        _1531 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)));
    }
    else
    {
        _1517 = _1208;
        _1518 = _1208;
        _1519 = _1208;
        _1520 = _1208;
        _1521 = _1208;
        _1522 = _1208;
        _1523 = _1208;
        _1524 = _1208;
        _1525 = _1208;
        _1526 = _1208;
        _1527 = _1208;
        _1528 = _1208;
        _1529 = 0.0;
        _1530 = 0.0;
        _1531 = 0.0;
    }
    float _1541 = (cbModelParam._m0[1u].x * (_1529 - _1220)) + _1220;
    float _1542 = (cbModelParam._m0[1u].x * (_1530 - _1221)) + _1221;
    float _1543 = (cbModelParam._m0[1u].x * (_1531 - _1222)) + _1222;
    float _1564 = fma(_1543, cbSceneParam._m0[89u].z, fma(_1542, cbSceneParam._m0[89u].y, _1541 * cbSceneParam._m0[89u].x));
    float _1567 = fma(_1543, cbSceneParam._m0[90u].z, fma(_1542, cbSceneParam._m0[90u].y, _1541 * cbSceneParam._m0[90u].x));
    float _1570 = fma(_1543, cbSceneParam._m0[91u].z, fma(_1542, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1541));
    float _1585 = _844 * 0.5;
    float _1586 = _845 * 0.5;
    float _1587 = _846 * 0.5;
    float _1588 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1519, _1522, _1525, _1528));
    float _1591 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1518, _1521, _1524, _1527));
    float _1594 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1517, _1520, _1523, _1526));
    float _1628;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1601 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1207, _1211, _1214, _1217));
        float _1605 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1209, _1212, _1215, _1218));
        float _1609 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1210, _1213, _1216, _1219));
        float _1616 = dot(vec4(cbModelParam._m0[39u]), vec4(_1585, _1586, _1587, 1.0));
        _1628 = dot(vec3(isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)), isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)), isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1616) ? 0.0 : (isnan(0.0) ? _1616 : max(0.0, _1616))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1628 = 1.0;
    }
    float _1639;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1630 = dot(vec4(cbModelParam._m0[40u]), vec4(_1585, _1586, _1587, 1.0));
        _1639 = dot(vec3(isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)), isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)), isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1630) ? 0.0 : (isnan(0.0) ? _1630 : max(0.0, _1630))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1639 = 1.0;
    }
    float _1643 = (_1639 * cbModelParam._m0[1u].x) + (_1628 * (1.0 - cbModelParam._m0[1u].x));
    float _1653 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _689);
    float _1654 = isnan(_1653) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1653 : min(cbModelParam._m0[25u].z, _1653));
    float _1734;
    float _1736;
    float _1738;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1701 = fma(_905, cbModelParam._m0[13u].z, fma(_901, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _897)) + cbModelParam._m0[13u].w;
        float _1705 = fma(_905, cbModelParam._m0[14u].z, fma(_901, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _897)) + cbModelParam._m0[14u].w;
        float _1709 = fma(_905, cbModelParam._m0[15u].z, fma(_901, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _897)) + cbModelParam._m0[15u].w;
        float _1712 = fma(_846, cbModelParam._m0[13u].z, fma(_845, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _844));
        float _1715 = fma(_846, cbModelParam._m0[14u].z, fma(_845, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _844));
        float _1718 = fma(_846, cbModelParam._m0[15u].z, fma(_845, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _844));
        float _1746;
        if (_1712 > 0.0)
        {
            _1746 = abs((1.0 - _1701) / _1712);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1712 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1701 + 1.0) / _1712);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1746 = frontier_phi_16_14_ladder;
        }
        float _1950;
        if (_1715 > 0.0)
        {
            _1950 = abs((1.0 - _1705) / _1715);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1715 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1705 + 1.0) / _1715);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1950 = frontier_phi_25_21_ladder;
        }
        float _2193;
        if (_1718 > 0.0)
        {
            _2193 = abs((1.0 - _1709) / _1718);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1709 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2193 = frontier_phi_37_32_ladder;
        }
        float _2195 = isnan(_1950) ? _1746 : (isnan(_1746) ? _1950 : min(_1746, _1950));
        float _2196 = isnan(_2193) ? _2195 : (isnan(_2195) ? _2193 : min(_2195, _2193));
        float _2200 = (_2196 * _1712) + _1701;
        float _2201 = (_2196 * _1715) + _1705;
        float _2202 = (_2196 * _1718) + _1709;
        float _2203 = _2196 * 9.9999997473787516355514526367188e-05;
        float _2205 = (-1.0) - _2203;
        float _2207 = _2203 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2202 > _2207) || ((_2202 < _2205) || ((_2201 > _2207) || ((_2201 < _2205) || ((_2200 < _2205) || (_2200 > _2207))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2326 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2202, cbModelParam._m0[9u].z, fma(_2201, cbModelParam._m0[9u].y, _2200 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2202, cbModelParam._m0[10u].z, fma(_2201, cbModelParam._m0[10u].y, _2200 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2202, cbModelParam._m0[11u].z, fma(_2201, cbModelParam._m0[11u].y, _2200 * cbModelParam._m0[11u].x))), _1654);
            frontier_phi_15_37_ladder = _2326.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2326.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2326.x * cbModelParam._m0[1u].y;
        }
        _1734 = frontier_phi_15_37_ladder_2;
        _1736 = frontier_phi_15_37_ladder_1;
        _1738 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1722 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_844, _845, _846), _1654);
        _1734 = _1722.x * cbModelParam._m0[1u].y;
        _1736 = _1722.y * cbModelParam._m0[1u].y;
        _1738 = _1722.z * cbModelParam._m0[1u].y;
    }
    float _1742 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _689);
    float _1743 = isnan(_1742) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1742 : min(cbModelParam._m0[25u].w, _1742));
    float _1836;
    float _1838;
    float _1840;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1800 = fma(_905, cbModelParam._m0[21u].z, fma(_901, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _897)) + cbModelParam._m0[21u].w;
        float _1804 = fma(_905, cbModelParam._m0[22u].z, fma(_901, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _897)) + cbModelParam._m0[22u].w;
        float _1808 = fma(_905, cbModelParam._m0[23u].z, fma(_901, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _897)) + cbModelParam._m0[23u].w;
        float _1811 = fma(_846, cbModelParam._m0[21u].z, fma(_845, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _844));
        float _1814 = fma(_846, cbModelParam._m0[22u].z, fma(_845, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _844));
        float _1817 = fma(_846, cbModelParam._m0[23u].z, fma(_845, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _844));
        float _1955;
        if (_1811 > 0.0)
        {
            _1955 = abs((1.0 - _1800) / _1811);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1811 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1800 + 1.0) / _1811);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1955 = frontier_phi_27_23_ladder;
        }
        float _2220;
        if (_1814 > 0.0)
        {
            _2220 = abs((1.0 - _1804) / _1814);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1804 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2220 = frontier_phi_39_34_ladder;
        }
        float _2425;
        if (_1817 > 0.0)
        {
            _2425 = abs((1.0 - _1808) / _1817);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1817 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1808 + 1.0) / _1817);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2425 = frontier_phi_48_45_ladder;
        }
        float _2427 = isnan(_2220) ? _1955 : (isnan(_1955) ? _2220 : min(_1955, _2220));
        float _2428 = isnan(_2425) ? _2427 : (isnan(_2427) ? _2425 : min(_2427, _2425));
        float _2432 = (_2428 * _1811) + _1800;
        float _2433 = (_2428 * _1814) + _1804;
        float _2434 = (_2428 * _1817) + _1808;
        float _2435 = _2428 * 9.9999997473787516355514526367188e-05;
        float _2436 = (-1.0) - _2435;
        float _2438 = _2435 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2434 > _2438) || ((_2434 < _2436) || ((_2433 > _2438) || ((_2433 < _2436) || ((_2432 < _2436) || (_2432 > _2438))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2632 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2434, cbModelParam._m0[17u].z, fma(_2433, cbModelParam._m0[17u].y, _2432 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2434, cbModelParam._m0[18u].z, fma(_2433, cbModelParam._m0[18u].y, _2432 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2434, cbModelParam._m0[19u].z, fma(_2433, cbModelParam._m0[19u].y, _2432 * cbModelParam._m0[19u].x))), _1743);
            frontier_phi_24_48_ladder = _2632.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2632.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2632.x * cbModelParam._m0[1u].z;
        }
        _1836 = frontier_phi_24_48_ladder_2;
        _1838 = frontier_phi_24_48_ladder_1;
        _1840 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1820 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_844, _845, _846), _1743);
        _1836 = _1820.x * cbModelParam._m0[1u].z;
        _1838 = _1820.y * cbModelParam._m0[1u].z;
        _1840 = _1820.z * cbModelParam._m0[1u].z;
    }
    float _1852 = ((((1.0 - _865) * ((_852 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_865 * _852)) * _836;
    float _1853 = _1852 * ((cbModelParam._m0[1u].w * (_1836 - _1734)) + _1734);
    float _1854 = _1852 * ((cbModelParam._m0[1u].w * (_1838 - _1736)) + _1736);
    float _1855 = _1852 * ((cbModelParam._m0[1u].w * (_1840 - _1738)) + _1738);
    float _1858 = fma(_1855, cbSceneParam._m0[89u].z, fma(_1854, cbSceneParam._m0[89u].y, _1853 * cbSceneParam._m0[89u].x));
    float _1861 = fma(_1855, cbSceneParam._m0[90u].z, fma(_1854, cbSceneParam._m0[90u].y, _1853 * cbSceneParam._m0[90u].x));
    float _1864 = fma(_1855, cbSceneParam._m0[91u].z, fma(_1854, cbSceneParam._m0[91u].y, _1853 * cbSceneParam._m0[91u].x));
    uvec4 _1874 = floatBitsToUint(cbInstanceData._m0[_811 + 5u]);
    uint _1876 = _1874.x * 14u;
    uint _1877 = _1876 + 13u;
    float _1884 = _836 + (-1.0);
    float _1889 = (cbLight._m0[_1877].x * _1884) + 1.0;
    float _1890 = (cbLight._m0[_1877].y * _1884) + 1.0;
    float _1891 = (cbLight._m0[_1877].z * _1884) + 1.0;
    float _1892 = (cbLight._m0[_1877].w * _1884) + 1.0;
    uint _1893 = _1876 + 5u;
    float _1899 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
    uint _1903 = _1876 + 4u;
    float _1909 = isnan(1.0) ? _1889 : (isnan(_1889) ? 1.0 : min(_1889, 1.0));
    uint _1913 = _1876 | 1u;
    float _1924 = dot(vec3(cbLight._m0[_1876].xyz), vec3(_686, _687, _688));
    float _1927 = dot(vec3(cbLight._m0[_1913].xyz), vec3(_686, _687, _688));
    float _4041 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _4052 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1932 = (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * 0.3183098733425140380859375;
    float _1934 = (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * 0.3183098733425140380859375;
    float _1941 = ((cbLight._m0[_1893].x * _1899) * _1934) + ((cbLight._m0[_1903].x * _1909) * _1932);
    float _1942 = ((_1899 * cbLight._m0[_1893].y) * _1934) + ((_1909 * cbLight._m0[_1903].y) * _1932);
    float _1943 = ((_1899 * cbLight._m0[_1893].z) * _1934) + ((_1909 * cbLight._m0[_1903].z) * _1932);
    uvec4 _1947 = floatBitsToUint(cbLight._m0[_1876 + 12u]);
    bool _1949 = _1947.x == 0u;
    float _1960;
    float _1962;
    float _1964;
    if (_1949)
    {
        _1960 = _1941;
        _1962 = _1942;
        _1964 = _1943;
    }
    else
    {
        uint _1968 = _1876 + 6u;
        float _1984 = (dot(vec3(cbLight._m0[_1876 + 2u].xyz), vec3(_686, _687, _688)) * 0.5) + 0.5;
        float _1985 = _1984 * _1984;
        float _4063 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
        float _1986 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1987 = isnan(1.0) ? _1891 : (isnan(_1891) ? 1.0 : min(_1891, 1.0));
        _1960 = (((cbLight._m0[_1968].x * 0.3183098733425140380859375) * _1986) * _1987) + _1941;
        _1962 = (((cbLight._m0[_1968].y * 0.3183098733425140380859375) * _1986) * _1987) + _1942;
        _1964 = (((cbLight._m0[_1968].z * 0.3183098733425140380859375) * _1986) * _1987) + _1943;
    }
    bool _1967 = _1947.y == 0u;
    float _2005;
    float _2007;
    float _2009;
    if (_1967)
    {
        _2005 = _1960;
        _2007 = _1962;
        _2009 = _1964;
    }
    else
    {
        uint _2164 = _1876 + 7u;
        float _2180 = (dot(vec3(cbLight._m0[_1876 + 3u].xyz), vec3(_686, _687, _688)) * 0.5) + 0.5;
        float _2181 = _2180 * _2180;
        float _4079 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2182 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _2183 = isnan(1.0) ? _1892 : (isnan(_1892) ? 1.0 : min(_1892, 1.0));
        _2005 = (((cbLight._m0[_2164].x * 0.3183098733425140380859375) * _2182) * _2183) + _1960;
        _2007 = (((cbLight._m0[_2164].y * 0.3183098733425140380859375) * _2182) * _2183) + _1962;
        _2009 = (((cbLight._m0[_2164].z * 0.3183098733425140380859375) * _2182) * _2183) + _1964;
    }
    uint _2012 = _1876 + 8u;
    float _2025 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1876].w)) * _689) * 0.949999988079071044921875);
    float _2026 = _2025 * _2025;
    float _2027 = cbLight._m0[_1876].x + _765;
    float _2028 = cbLight._m0[_1876].y + _766;
    float _2029 = cbLight._m0[_1876].z + _767;
    float _2033 = inversesqrt(dot(vec3(_2027, _2028, _2029), vec3(_2027, _2028, _2029)));
    float _2034 = _2033 * _2027;
    float _2035 = _2033 * _2028;
    float _2036 = _2033 * _2029;
    float _2037 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_1876].xyz));
    float _4095 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2040 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _4106 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _2041 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _2042 = dot(vec3(_686, _687, _688), vec3(_2034, _2035, _2036));
    float _4117 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2045 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _2046 = dot(vec3(cbLight._m0[_1876].xyz), vec3(_2034, _2035, _2036));
    float _4128 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2050 = _2026 * _2026;
    float _2054 = ((_2045 * _2045) * (_2050 + (-1.0))) + 1.0;
    float _2065 = (exp2(log2(1.0 - (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2066 = 1.0 - _2026;
    float _2077 = (0.5 / (((_2041 * ((_2040 * _2066) + _2026)) + 9.9999999392252902907785028219223e-09) + (((_2041 * _2066) + _2026) * _2040))) * _2040;
    float _4139 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2079 = (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_2050 / ((_2054 * _2054) * 3.141590118408203125));
    uint _2090 = _1876 + 9u;
    float _2101 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1913].w)) * _689) * 0.949999988079071044921875);
    float _2102 = _2101 * _2101;
    float _2103 = cbLight._m0[_1913].x + _765;
    float _2104 = cbLight._m0[_1913].y + _766;
    float _2105 = cbLight._m0[_1913].z + _767;
    float _2109 = inversesqrt(dot(vec3(_2103, _2104, _2105), vec3(_2103, _2104, _2105)));
    float _2110 = _2109 * _2103;
    float _2111 = _2109 * _2104;
    float _2112 = _2109 * _2105;
    float _2113 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_1913].xyz));
    float _4150 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2116 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _2117 = dot(vec3(_686, _687, _688), vec3(_2110, _2111, _2112));
    float _4161 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2120 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _2121 = dot(vec3(cbLight._m0[_1913].xyz), vec3(_2110, _2111, _2112));
    float _4172 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2125 = _2102 * _2102;
    float _2129 = ((_2120 * _2120) * (_2125 + (-1.0))) + 1.0;
    float _2138 = (exp2(log2(1.0 - (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2139 = 1.0 - _2102;
    float _2149 = (0.5 / (((_2041 * ((_2116 * _2139) + _2102)) + 9.9999999392252902907785028219223e-09) + (((_2041 * _2139) + _2102) * _2116))) * _2116;
    float _4183 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2151 = (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_2125 / ((_2129 * _2129) * 3.141590118408203125));
    float _2161 = (((_2138 * cbLight._m0[_2090].x) * _2151) * _1899) + (((_2065 * cbLight._m0[_2012].x) * _2079) * _1909);
    float _2162 = (((_2138 * cbLight._m0[_2090].y) * _2151) * _1899) + (((_2065 * cbLight._m0[_2012].y) * _2079) * _1909);
    float _2163 = (((_2138 * cbLight._m0[_2090].z) * _2151) * _1899) + (((_2065 * cbLight._m0[_2012].z) * _2079) * _1909);
    float _2225;
    float _2227;
    float _2229;
    if (_1949)
    {
        _2225 = _2161;
        _2227 = _2162;
        _2229 = _2163;
    }
    else
    {
        uint _2231 = _1876 + 2u;
        uint _2235 = _1876 + 10u;
        float _2249 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2231].w)) * _689) * 0.949999988079071044921875);
        float _2250 = _2249 * _2249;
        float _2251 = cbLight._m0[_2231].x + _765;
        float _2252 = cbLight._m0[_2231].y + _766;
        float _2253 = cbLight._m0[_2231].z + _767;
        float _2257 = inversesqrt(dot(vec3(_2251, _2252, _2253), vec3(_2251, _2252, _2253)));
        float _2258 = _2257 * _2251;
        float _2259 = _2257 * _2252;
        float _2260 = _2257 * _2253;
        float _2261 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_2231].xyz));
        float _4194 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2264 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _2265 = dot(vec3(_686, _687, _688), vec3(_2258, _2259, _2260));
        float _4205 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2268 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _2269 = dot(vec3(cbLight._m0[_2231].xyz), vec3(_2258, _2259, _2260));
        float _4216 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2273 = _2250 * _2250;
        float _2277 = ((_2268 * _2268) * (_2273 + (-1.0))) + 1.0;
        float _2286 = (exp2(log2(1.0 - (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2287 = 1.0 - _2250;
        float _2297 = (0.5 / (((_2041 * ((_2264 * _2287) + _2250)) + 9.9999999392252902907785028219223e-09) + (((_2041 * _2287) + _2250) * _2264))) * _2264;
        float _4227 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2299 = (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_2273 / ((_2277 * _2277) * 3.141590118408203125));
        float _2300 = isnan(1.0) ? _1891 : (isnan(_1891) ? 1.0 : min(_1891, 1.0));
        _2225 = (((_2286 * cbLight._m0[_2235].x) * _2299) * _2300) + _2161;
        _2227 = (((_2286 * cbLight._m0[_2235].y) * _2299) * _2300) + _2162;
        _2229 = (((_2286 * cbLight._m0[_2235].z) * _2299) * _2300) + _2163;
    }
    float _2335;
    float _2337;
    float _2339;
    if (_1967)
    {
        _2335 = _2225;
        _2337 = _2227;
        _2339 = _2229;
    }
    else
    {
        uint _2346 = _1876 + 3u;
        uint _2350 = _1876 + 11u;
        float _2364 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2346].w)) * _689) * 0.949999988079071044921875);
        float _2365 = _2364 * _2364;
        float _2366 = cbLight._m0[_2346].x + _765;
        float _2367 = cbLight._m0[_2346].y + _766;
        float _2368 = cbLight._m0[_2346].z + _767;
        float _2372 = inversesqrt(dot(vec3(_2366, _2367, _2368), vec3(_2366, _2367, _2368)));
        float _2373 = _2372 * _2366;
        float _2374 = _2372 * _2367;
        float _2375 = _2372 * _2368;
        float _2376 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_2346].xyz));
        float _4243 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2379 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _2380 = dot(vec3(_686, _687, _688), vec3(_2373, _2374, _2375));
        float _4254 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2383 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _2384 = dot(vec3(cbLight._m0[_2346].xyz), vec3(_2373, _2374, _2375));
        float _4265 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2388 = _2365 * _2365;
        float _2392 = ((_2383 * _2383) * (_2388 + (-1.0))) + 1.0;
        float _2401 = (exp2(log2(1.0 - (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2402 = 1.0 - _2365;
        float _2412 = (0.5 / (((_2041 * ((_2379 * _2402) + _2365)) + 9.9999999392252902907785028219223e-09) + (((_2041 * _2402) + _2365) * _2379))) * _2379;
        float _4276 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2414 = (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_2388 / ((_2392 * _2392) * 3.141590118408203125));
        float _2415 = isnan(1.0) ? _1892 : (isnan(_1892) ? 1.0 : min(_1892, 1.0));
        _2335 = (((_2401 * cbLight._m0[_2350].x) * _2414) * _2415) + _2225;
        _2337 = (((_2401 * cbLight._m0[_2350].y) * _2414) * _2415) + _2227;
        _2339 = (((_2401 * cbLight._m0[_2350].z) * _2414) * _2415) + _2229;
    }
    float _2549;
    float _2551;
    float _2553;
    float _2555;
    float _2557;
    float _2559;
    if (_1874.y == 0u)
    {
        float _2490 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2491 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2490;
        float _2492 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2490;
        float _2493 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2490;
        uvec4 _2505 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2506 = _2505.x;
        uint _2517 = uint((float(_2505.y) * floor(float(uint(cbSceneParam._m0[85u].y * _774) / _2506))) + floor(float(uint(cbSceneParam._m0[85u].x * _773) / _2506)));
        float _2527 = (log2(_2493 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2528 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        uint _2531 = uint(isnan(14.0) ? _2528 : (isnan(_2528) ? 14.0 : min(_2528, 14.0)));
        uvec4 _2536 = texelFetch(g_lightClusterGridBuffer, int(((_2531 << 2u) + (_2517 << 6u)) >> 2u));
        uint _2537 = _2536.x;
        uint _2538 = _2505.z;
        float _2637;
        float _2639;
        float _2641;
        float _2643;
        float _2645;
        float _2647;
        if (((((1u << ((_2538 >> 4u) & 15u)) + 4294967295u) & _2537) == 0u) || ((_2538 & 240u) == 0u))
        {
            _2637 = 0.0;
            _2639 = 0.0;
            _2641 = 0.0;
            _2643 = 0.0;
            _2645 = 0.0;
            _2647 = 0.0;
        }
        else
        {
            float _2638;
            float _2640;
            float _2642;
            float _2644;
            float _2646;
            float _2648;
            float _2781 = 0.0;
            float _2782 = 0.0;
            float _2783 = 0.0;
            float _2784 = 0.0;
            float _2785 = 0.0;
            float _2786 = 0.0;
            uint _2787 = 0u;
            uint _2796;
            bool _2797;
            for (;;)
            {
                _2796 = texelFetch(g_lightClassification, int((((_2531 << 5u) + (_2517 << 9u)) + (_2787 << 2u)) >> 2u)).x;
                _2797 = _2796 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2797)
                {
                    frontier_phi_63_pred = _2786;
                    frontier_phi_63_pred_1 = _2785;
                    frontier_phi_63_pred_2 = _2784;
                    frontier_phi_63_pred_3 = _2783;
                    frontier_phi_63_pred_4 = _2782;
                    frontier_phi_63_pred_5 = _2781;
                }
                else
                {
                    float _2905;
                    float _2906;
                    float _2907;
                    float _2908;
                    float _2909;
                    float _2910;
                    uint _2911;
                    _2905 = _2781;
                    _2906 = _2782;
                    _2907 = _2783;
                    _2908 = _2784;
                    _2909 = _2785;
                    _2910 = _2786;
                    _2911 = _2796;
                    float _2837;
                    float _2838;
                    float _2839;
                    float _2840;
                    float _2841;
                    float _2842;
                    for (;;)
                    {
                        uint _2915 = uint(findLSB(_2911)) + (_2787 << 5u);
                        uint _2912 = (_2911 + 4294967295u) & _2911;
                        uint _2917 = _2915 * 48u;
                        vec4 _2931 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2917)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 3u)).x));
                        uint _2937 = (_2915 * 48u) + 4u;
                        vec4 _2950 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2937)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 3u)).x));
                        uint _2956 = (_2915 * 48u) + 8u;
                        vec3 _2967 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2956)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 2u)).x));
                        float _2971 = _2931.x - _2491;
                        float _2972 = _2931.y - _2492;
                        float _2973 = _2931.z - _2493;
                        float _2974 = dot(vec3(_2971, _2972, _2973), vec3(_2971, _2972, _2973));
                        float _2977 = inversesqrt(_2974);
                        float _2978 = _2977 * _2971;
                        float _2979 = _2977 * _2972;
                        float _2980 = _2977 * _2973;
                        float _2981 = dot(vec3(_792, _795, _798), vec3(_2978, _2979, _2980));
                        float _2986 = 1.0 - (_2974 * _2931.w);
                        float _4302 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
                        float _2987 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
                        float _2988 = sqrt(_2974) * _2950.w;
                        float _2991 = 1.39999997615814208984375 / (_2988 + 1.39999997615814208984375);
                        float _2992 = _2991 * _2991;
                        float _2995 = ((1.0 - _2992) * _2981) + _2992;
                        float _2998 = _2988 * _2988;
                        float _3002 = ((isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0))) * _2987) / ((_2998 * 0.699999988079071044921875) + 1.0);
                        float _3006 = (-0.0) - _2491;
                        float _3007 = (-0.0) - _2492;
                        float _3008 = (-0.0) - _2493;
                        float _3012 = inversesqrt(dot(vec3(_3006, _3007, _3008), vec3(_3006, _3007, _3008)));
                        float _3013 = _3012 * _3006;
                        float _3014 = _3012 * _3007;
                        float _3015 = _3012 * _3008;
                        float _3023 = exp2(log2(1.0 / ((_2998 * 3.5) + 5.0)) * 0.25);
                        float _3024 = 1.0 - _852;
                        float _3031 = sqrt(1.0 - ((1.0 - (_3024 * _3024)) * (1.0 - (_3023 * _3023))));
                        float _3032 = _3031 * _3031;
                        float _3033 = _3032 * _3032;
                        float _3034 = _3013 + _2978;
                        float _3035 = _3014 + _2979;
                        float _3036 = _3015 + _2980;
                        float _3040 = inversesqrt(dot(vec3(_3034, _3035, _3036), vec3(_3034, _3035, _3036)));
                        float _3044 = dot(vec3(_792, _795, _798), vec3(_3013, _3014, _3015));
                        float _4318 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                        float _3047 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                        float _3048 = dot(vec3(_792, _795, _798), vec3(_3040 * _3034, _3040 * _3035, _3040 * _3036));
                        float _4329 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                        float _3051 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
                        float _3055 = ((_3051 * _3051) * (_3033 + (-1.0))) + 1.0;
                        float _3056 = _2991 * _3032;
                        float _3057 = _3056 * _3056;
                        float _3060 = ((1.0 - _3057) * _2981) + _3057;
                        float _4340 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                        float _3061 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                        float _3062 = 1.0 - _3032;
                        float _3072 = (0.5 / (((_3061 * ((_3047 * _3062) + _3032)) + 9.9999999392252902907785028219223e-09) + (((_3061 * _3062) + _3032) * _3047))) * _3061;
                        float _4351 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                        float _3083 = (((_3033 * 3.1415927410125732421875) * (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0)))) / ((_3055 * _3055) * ((_2998 * 2.1991131305694580078125) + 3.141590118408203125))) * _2987;
                        _2840 = (_3002 * _2950.x) + _2908;
                        _2841 = (_3002 * _2950.y) + _2909;
                        _2842 = (_3002 * _2950.z) + _2910;
                        _2837 = (_3083 * _2967.x) + _2905;
                        _2838 = (_3083 * _2967.y) + _2906;
                        _2839 = (_3083 * _2967.z) + _2907;
                        if (_2912 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2905 = _2837;
                            _2906 = _2838;
                            _2907 = _2839;
                            _2908 = _2840;
                            _2909 = _2841;
                            _2910 = _2842;
                            _2911 = _2912;
                        }
                    }
                    frontier_phi_63_pred = _2842;
                    frontier_phi_63_pred_1 = _2841;
                    frontier_phi_63_pred_2 = _2840;
                    frontier_phi_63_pred_3 = _2839;
                    frontier_phi_63_pred_4 = _2838;
                    frontier_phi_63_pred_5 = _2837;
                }
                _2648 = frontier_phi_63_pred;
                _2646 = frontier_phi_63_pred_1;
                _2644 = frontier_phi_63_pred_2;
                _2642 = frontier_phi_63_pred_3;
                _2640 = frontier_phi_63_pred_4;
                _2638 = frontier_phi_63_pred_5;
                uint _2788 = _2787 + 1u;
                if (_2788 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2781 = _2638;
                    _2782 = _2640;
                    _2783 = _2642;
                    _2784 = _2644;
                    _2785 = _2646;
                    _2786 = _2648;
                    _2787 = _2788;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2637 = _2638;
            _2639 = _2640;
            _2641 = _2642;
            _2643 = _2644;
            _2645 = _2646;
            _2647 = _2648;
        }
        uvec4 _2651 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2652 = _2651.z;
        uint _2654 = (_2652 >> 8u) & 15u;
        float _2749;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        if (((4294967295u << _2654) & _2537) == 0u)
        {
            _2749 = _2637;
            _2751 = _2639;
            _2753 = _2641;
            _2755 = _2643;
            _2757 = _2645;
            _2759 = _2647;
        }
        else
        {
            float _2774 = inversesqrt(dot(vec3(_2491, _2492, _2493), vec3(_2491, _2492, _2493)));
            float _2775 = _2774 * _2491;
            float _2776 = _2774 * _2492;
            float _2777 = _2774 * _2493;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2654 < ((_2652 >> 12u) & 15u))
            {
                float _2750;
                float _2752;
                float _2754;
                float _2756;
                float _2758;
                float _2760;
                float _2888 = _2637;
                float _2889 = _2639;
                float _2890 = _2641;
                float _2891 = _2643;
                float _2892 = _2645;
                float _2893 = _2647;
                uint _2894 = _2654;
                uint _2903;
                bool _2904;
                for (;;)
                {
                    _2903 = texelFetch(g_lightClassification, int((((_2531 << 5u) + (_2517 << 9u)) + (_2894 << 2u)) >> 2u)).x;
                    _2904 = _2903 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2904)
                    {
                        frontier_phi_69_pred = _2893;
                        frontier_phi_69_pred_1 = _2892;
                        frontier_phi_69_pred_2 = _2891;
                        frontier_phi_69_pred_3 = _2890;
                        frontier_phi_69_pred_4 = _2889;
                        frontier_phi_69_pred_5 = _2888;
                    }
                    else
                    {
                        float _3088;
                        float _3089;
                        float _3090;
                        float _3091;
                        float _3092;
                        float _3093;
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3101 = _2888;
                        float _3102 = _2889;
                        float _3103 = _2890;
                        float _3104 = _2891;
                        float _3105 = _2892;
                        float _3106 = _2893;
                        uint _3107 = _2903;
                        uint _3108;
                        vec4 _3133;
                        float _3134;
                        vec4 _3149;
                        vec3 _3161;
                        vec4 _3176;
                        vec4 _3192;
                        float _3239;
                        bool _3240;
                        for (;;)
                        {
                            uint _3118 = ((_2894 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3107));
                            _3108 = (_3107 + 4294967295u) & _3107;
                            uint _3120 = _3118 * 40u;
                            _3133 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3120)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 3u)).x));
                            _3134 = _3133.w;
                            uint _3136 = (_3118 * 40u) + 4u;
                            _3149 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 3u)).x));
                            uint _3151 = (_3118 * 40u) + 8u;
                            _3161 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 2u)).x));
                            uint _3163 = (_3118 * 40u) + 16u;
                            _3176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 3u)).x));
                            uint _3179 = (_3118 * 40u) + 20u;
                            _3192 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3179)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 3u)).x));
                            uint _3195 = (_3118 * 40u) + 24u;
                            vec4 _3208 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 3u)).x));
                            uint _3214 = (_3118 * 40u) + 28u;
                            vec4 _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            _3239 = fma(_2493, _3227.z, fma(_2492, _3227.y, _3227.x * _2491)) + _3227.w;
                            _3240 = !((fma(_2493, _3208.z, fma(_2492, _3208.y, _3208.x * _2491)) + _3208.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3240)
                            {
                                float _3267 = _3133.x - _2491;
                                float _3268 = _3133.y - _2492;
                                float _3269 = _3133.z - _2493;
                                float _3270 = dot(vec3(_3267, _3268, _3269), vec3(_3267, _3268, _3269));
                                float _3273 = inversesqrt(_3270);
                                float _3274 = _3273 * _3267;
                                float _3275 = _3273 * _3268;
                                float _3276 = _3273 * _3269;
                                float _3280 = 1.0 - (_3270 / (_3134 * _3134));
                                float _4362 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                                float _3281 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                                float _3285 = sqrt(_3270) * _3149.w;
                                float _3287 = 1.39999997615814208984375 / (_3285 + 1.39999997615814208984375);
                                float _3288 = _3287 * _3287;
                                float _3291 = ((1.0 - _3288) * dot(vec3(_3274, _3275, _3276), vec3(_792, _795, _798))) + _3288;
                                float _3294 = _3285 * _3285;
                                float _3298 = (fma(_2493, _3176.z, fma(_2492, _3176.y, _3176.x * _2491)) + _3176.w) / _3239;
                                float _3299 = (fma(_2493, _3192.z, fma(_2492, _3192.y, _3192.x * _2491)) + _3192.w) / _3239;
                                float _3303 = 1.0 - dot(vec2(_3298, _3299), vec2(_3298, _3299));
                                float _4378 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3304 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                                float _3305 = _3304 * (((isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0))) * _3281) / ((_3294 * 0.699999988079071044921875) + 1.0));
                                float _3317 = exp2(log2(1.0 / ((_3294 * 3.5) + 5.0)) * 0.25);
                                float _3318 = 1.0 - _852;
                                float _3325 = sqrt(1.0 - ((1.0 - (_3318 * _3318)) * (1.0 - (_3317 * _3317))));
                                float _3326 = _3325 * _3325;
                                float _3327 = _3326 * _3326;
                                float _3328 = _3274 - _2775;
                                float _3329 = _3275 - _2776;
                                float _3330 = _3276 - _2777;
                                float _3334 = inversesqrt(dot(vec3(_3328, _3329, _3330), vec3(_3328, _3329, _3330)));
                                float _3338 = dot(vec3(_792, _795, _798), vec3((-0.0) - _2775, (-0.0) - _2776, (-0.0) - _2777));
                                float _4389 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                                float _3341 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                                float _3342 = dot(vec3(_792, _795, _798), vec3(_3334 * _3328, _3334 * _3329, _3334 * _3330));
                                float _4400 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                                float _3345 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                                float _3349 = ((_3345 * _3345) * (_3327 + (-1.0))) + 1.0;
                                float _3350 = _3287 * _3326;
                                float _3351 = _3350 * _3350;
                                float _3357 = ((1.0 - _3351) * dot(vec3(_792, _795, _798), vec3(_3274, _3275, _3276))) + _3351;
                                float _4411 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                                float _3358 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                                float _3359 = 1.0 - _3326;
                                float _3369 = (0.5 / (((_3358 * ((_3341 * _3359) + _3326)) + 9.9999999392252902907785028219223e-09) + (((_3358 * _3359) + _3326) * _3341))) * _3358;
                                float _4422 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                                float _3379 = (_3304 * _3281) * (((_3327 * 3.1415927410125732421875) * (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0)))) / ((_3349 * _3349) * ((_3294 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3305 * _3149.z;
                                frontier_phi_75_pred_1 = _3305 * _3149.y;
                                frontier_phi_75_pred_2 = _3305 * _3149.x;
                                frontier_phi_75_pred_3 = _3379 * _3161.z;
                                frontier_phi_75_pred_4 = _3379 * _3161.y;
                                frontier_phi_75_pred_5 = _3379 * _3161.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3388 = frontier_phi_75_pred;
                            _3387 = frontier_phi_75_pred_1;
                            _3386 = frontier_phi_75_pred_2;
                            _3385 = frontier_phi_75_pred_3;
                            _3384 = frontier_phi_75_pred_4;
                            _3383 = frontier_phi_75_pred_5;
                            _3091 = _3386 + _3104;
                            _3092 = _3387 + _3105;
                            _3093 = _3388 + _3106;
                            _3088 = _3383 + _3101;
                            _3089 = _3384 + _3102;
                            _3090 = _3385 + _3103;
                            if (_3108 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3101 = _3088;
                                _3102 = _3089;
                                _3103 = _3090;
                                _3104 = _3091;
                                _3105 = _3092;
                                _3106 = _3093;
                                _3107 = _3108;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3093;
                        frontier_phi_69_pred_1 = _3092;
                        frontier_phi_69_pred_2 = _3091;
                        frontier_phi_69_pred_3 = _3090;
                        frontier_phi_69_pred_4 = _3089;
                        frontier_phi_69_pred_5 = _3088;
                    }
                    _2760 = frontier_phi_69_pred;
                    _2758 = frontier_phi_69_pred_1;
                    _2756 = frontier_phi_69_pred_2;
                    _2754 = frontier_phi_69_pred_3;
                    _2752 = frontier_phi_69_pred_4;
                    _2750 = frontier_phi_69_pred_5;
                    uint _2895 = _2894 + 1u;
                    if (_2895 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2888 = _2750;
                        _2889 = _2752;
                        _2890 = _2754;
                        _2891 = _2756;
                        _2892 = _2758;
                        _2893 = _2760;
                        _2894 = _2895;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2760;
                frontier_phi_57_58_ladder_1 = _2758;
                frontier_phi_57_58_ladder_2 = _2756;
                frontier_phi_57_58_ladder_3 = _2754;
                frontier_phi_57_58_ladder_4 = _2752;
                frontier_phi_57_58_ladder_5 = _2750;
            }
            else
            {
                frontier_phi_57_58_ladder = _2647;
                frontier_phi_57_58_ladder_1 = _2645;
                frontier_phi_57_58_ladder_2 = _2643;
                frontier_phi_57_58_ladder_3 = _2641;
                frontier_phi_57_58_ladder_4 = _2639;
                frontier_phi_57_58_ladder_5 = _2637;
            }
            _2749 = frontier_phi_57_58_ladder_5;
            _2751 = frontier_phi_57_58_ladder_4;
            _2753 = frontier_phi_57_58_ladder_3;
            _2755 = frontier_phi_57_58_ladder_2;
            _2757 = frontier_phi_57_58_ladder_1;
            _2759 = frontier_phi_57_58_ladder;
        }
        float _2764 = isnan(1.0) ? _836 : (isnan(_836) ? 1.0 : min(_836, 1.0));
        _2549 = (_2764 * _2755) + _2005;
        _2551 = (_2764 * _2757) + _2007;
        _2553 = (_2764 * _2759) + _2009;
        _2555 = ((_2749 * 0.039999999105930328369140625) * _2764) + _2335;
        _2557 = ((_2751 * 0.039999999105930328369140625) * _2764) + _2337;
        _2559 = ((_2753 * 0.039999999105930328369140625) * _2764) + _2339;
    }
    else
    {
        _2549 = _2005;
        _2551 = _2007;
        _2553 = _2009;
        _2555 = _2335;
        _2557 = _2337;
        _2559 = _2339;
    }
    float _4438 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _4449 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _4460 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    uint _2579 = _811 + 6u;
    float _2587 = _773 / cbSceneParam._m0[86u].x;
    float _2588 = _774 / cbSceneParam._m0[86u].y;
    vec4 _2602 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2587, _2588, (log2((isnan(cbSceneParam._m0[77u].w) ? _708 : (isnan(_708) ? cbSceneParam._m0[77u].w : min(_708, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2604 = _2602.x;
    float _2605 = _2602.y;
    float _2606 = _2602.z;
    float _2607 = _2602.w;
    float _2699;
    float _2701;
    float _2703;
    float _2705;
    if (_708 > cbSceneParam._m0[78u].w)
    {
        float _2662 = isnan(_708) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _708 : min(cbSceneParam._m0[80u].w, _708));
        float _2663 = _2662 / _708;
        float _2674 = _2663 * _758;
        float _2675 = _759 * _2663;
        float _2676 = (-0.0) - _2675;
        float _2677 = _2663 * _760;
        float _2679 = (cbSceneParam._m0[77u].w * _2676) / _2662;
        float _2680 = _2679 + cbSceneParam._m0[79u].w;
        float _2681 = cbSceneParam._m0[79u].w - _2675;
        float _2687 = sqrt(((_2674 * _2674) + (_2675 * _2675)) + (_2677 * _2677));
        float _2690 = (1.0 - (cbSceneParam._m0[77u].w / _2662)) * _2687;
        float _2695 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2697 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2850;
        if (abs((_2676 - _2679) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2850 = ((((_2680 > 0.0) ? exp2(_2695 * _2680) : (2.0 - exp2(_2697 * _2680))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2690;
        }
        else
        {
            float _2810 = 1.0 / cbSceneParam._m0[80u].x;
            float _2811 = isnan(_2681) ? _2680 : (isnan(_2680) ? _2681 : max(_2680, _2681));
            float _2812 = isnan(_2681) ? _2680 : (isnan(_2680) ? _2681 : min(_2680, _2681));
            float _2821 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : min(_2811, 0.0));
            float _2822 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : min(_2812, 0.0));
            _2850 = ((abs(_2687 / _2676) * cbSceneParam._m0[80u].y) * ((((_2821 - _2822) * 2.0) - ((exp2(_2695 * (isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0)))) - exp2(_2695 * (isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0))))) * _2810)) - ((exp2(_2697 * _2821) - exp2(_2697 * _2822)) * _2810))) + (_2690 * cbSceneParam._m0[80u].z);
        }
        vec4 _2852 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2587, _2588, 1.0), 0.0);
        float _2861 = exp2((_2850 * (-1.44269502162933349609375)) * (1.0 - _2852.w));
        float _2862 = log2(_2861);
        float _2878 = log2(_2607);
        _2699 = (exp2(_2878 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2862 * cbSceneParam._m0[78u].x)) * _2852.x) / cbSceneParam._m0[78u].x)) + _2604;
        _2701 = (exp2(_2878 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2862 * cbSceneParam._m0[78u].y)) * _2852.y) / cbSceneParam._m0[78u].y)) + _2605;
        _2703 = (exp2(_2878 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2862 * cbSceneParam._m0[78u].z)) * _2852.z) / cbSceneParam._m0[78u].z)) + _2606;
        _2705 = _2861 * _2607;
    }
    else
    {
        _2699 = _2604;
        _2701 = _2605;
        _2703 = _2606;
        _2705 = _2607;
    }
    float _2717 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2718 = _2717 == 3.0;
    float _2719 = log2(_2705);
    float _2726 = exp2(_2719 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2549 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _836))) + ((_2555 + ((isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))) * _1643)) * cbPerFrame._m0[3u].x));
    float _2727 = exp2(_2719 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_2551 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _836))) + ((_2557 + ((isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))) * _1643)) * cbPerFrame._m0[3u].x));
    float _2728 = exp2(_2719 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_2553 + ((isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))) * _836))) + ((_2559 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1643)) * cbPerFrame._m0[3u].x));
    float _2737 = (_2717 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2737 * (_2718 ? _2726 : (_2726 + (cbSceneParam._m0[72u].w * _2699)));
    SV_Target.y = _2737 * (_2718 ? _2727 : (_2727 + (cbSceneParam._m0[72u].w * _2701)));
    SV_Target.z = _2737 * (_2718 ? _2728 : (_2728 + (cbSceneParam._m0[72u].w * _2703)));
    SV_Target.w = cbInstanceData._m0[_2579].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2579].w;
}


