#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_10;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1257;
float _3905;
float _3906;
float _3907;
float _3908;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = _227 * NORMAL.x;
    float _229 = _227 * NORMAL.y;
    float _230 = _227 * NORMAL.z;
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242;
    float _243;
    float _244;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
        _244 = (-0.0) - _230;
    }
    else
    {
        _242 = _228;
        _243 = _229;
        _244 = _230;
    }
    vec4 _264 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _293 = cbMtdParam._m0[15u].x * texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w)).x;
    float _301 = ((cbMtdParam._m0[14u].z * (-1.39999997615814208984375)) * (((1.0 - _264.x) * 2.0) - _293)) + 1.0;
    float _3917 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _302 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    vec4 _314 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _331 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _333 = _331.x;
    float _334 = _331.y;
    float _335 = _331.z;
    float _342 = ((_314.x - _333) * _302) + _333;
    float _343 = ((_314.y - _334) * _302) + _334;
    float _344 = ((_314.z - _335) * _302) + _335;
    float _350 = (((((1.0 - _264.y) * 2.0) - _293) * (-1.39999997615814208984375)) * cbMtdParam._m0[15u].z) + 1.0;
    float _3928 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _351 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    vec4 _363 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _374 = ((_363.x - _342) * _351) + _342;
    float _375 = ((_363.y - _343) * _351) + _343;
    float _376 = ((_363.z - _344) * _351) + _344;
    float _382 = (((((1.0 - _264.z) * 2.0) - _293) * (-1.39999997615814208984375)) * cbMtdParam._m0[15u].y) + 1.0;
    float _3939 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _383 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    vec4 _396 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _409 = ((_396.z - _376) * _383) + _376;
    float _412 = ((((_396.x - _374) * _383) + _374) * 2.0) + (-1.0);
    float _414 = ((((_396.y - _375) * _383) + _375) * 2.0) + (-1.0);
    float _415 = dot(vec2(_412, _414), vec2(_412, _414));
    float _3950 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _420 = sqrt(1.0 - (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))));
    float _421 = fma(_420, _242, 0.0);
    float _422 = fma(_420, _243, 0.0);
    float _423 = fma(_420, _244, 0.0);
    float _432 = exp2(log2(inversesqrt(dot(vec3(_421, _422, _423), vec3(_421, _422, _423))) * _422) * cbMtdParam._m0[14u].x) * cbMtdParam._m0[14u].y;
    float _3961 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _433 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    vec4 _451 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _456 = _451.x * cbMtdParam._m0[10u].x;
    float _457 = _451.y * cbMtdParam._m0[10u].y;
    float _458 = _451.z * cbMtdParam._m0[10u].z;
    vec4 _476 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _490 = (((_476.x * cbMtdParam._m0[11u].x) - _456) * _302) + _456;
    float _491 = (((_476.y * cbMtdParam._m0[11u].y) - _457) * _302) + _457;
    float _492 = (((_476.z * cbMtdParam._m0[11u].z) - _458) * _302) + _458;
    vec4 _509 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _523 = (((_509.x * cbMtdParam._m0[12u].x) - _490) * _351) + _490;
    float _524 = (((_509.y * cbMtdParam._m0[12u].y) - _491) * _351) + _491;
    float _525 = (((_509.z * cbMtdParam._m0[12u].z) - _492) * _351) + _492;
    vec4 _543 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    vec4 _577 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _585 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * ((((_543.x * cbMtdParam._m0[13u].x) - _523) * _383) + _523)) * _577.x;
    float _588 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * ((((_543.y * cbMtdParam._m0[13u].y) - _524) * _383) + _524)) * _577.y;
    float _591 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * ((((_543.z * cbMtdParam._m0[13u].z) - _525) * _383) + _525)) * _577.z;
    vec4 _603 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _614 = ((_603.x - _585) * _433) + _585;
    float _615 = ((_603.y - _588) * _433) + _588;
    float _616 = ((_603.z - _591) * _433) + _591;
    vec4 _629 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _636 = (_629.x * 2.0) + (-1.0);
    float _637 = (_629.y * 2.0) + (-1.0);
    float _638 = dot(vec2(_636, _637), vec2(_636, _637));
    float _3972 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _646 = ((_629.z - _409) * _433) + _409;
    float _655 = ((sqrt(1.0 - (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) - _420) * _433) + _420;
    vec4 _669 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _679 = (((_636 - _412) * _433) + _412) + (((_669.x * 2.0) + (-1.0)) * cbMtdParam._m0[14u].w);
    float _680 = (((_637 - _414) * _433) + _414) + (((_669.y * 2.0) + (-1.0)) * cbMtdParam._m0[14u].w);
    float _683 = fma(_655, _242, fma(_680, _234 * TANGENT.x, (_220 * _212) * _679));
    float _686 = fma(_655, _243, fma(_680, _234 * TANGENT.y, (_220 * _213) * _679));
    float _689 = fma(_655, _244, fma(_680, _234 * TANGENT.z, (_220 * _214) * _679));
    float _693 = inversesqrt(dot(vec3(_683, _686, _689), vec3(_683, _686, _689)));
    float _694 = _693 * _683;
    float _695 = _693 * _686;
    float _696 = _693 * _689;
    float _3983 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _697 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _3994 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _4005 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _4016 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _716 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _756 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _766 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _756);
    float _767 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _756);
    float _768 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _756);
    float _772 = inversesqrt(dot(vec3(_766, _767, _768), vec3(_766, _767, _768)));
    float _773 = _766 * _772;
    float _774 = _767 * _772;
    float _775 = _768 * _772;
    vec4 _780 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _782 = _780.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _936 = sqrt(((_766 * _766) + (_767 * _767)) + (_768 * _768));
        float _942 = (cbMatDynParam._m0[5u].x * _936) + cbMatDynParam._m0[5u].y;
        float _4027 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _947 = (cbMatDynParam._m0[5u].z * _936) + cbMatDynParam._m0[5u].w;
        float _4038 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) - _943)) + _943) < ((_782 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _793 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _794 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _812 = fma(_696, cbSceneParam._m0[5u].z, fma(_695, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _694));
    float _815 = fma(_696, cbSceneParam._m0[6u].z, fma(_695, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _694));
    float _818 = fma(_696, cbSceneParam._m0[7u].z, fma(_695, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _694));
    uint _831 = uint(roundEven(NORMAL.w)) * 13u;
    uint _832 = _831 + 9u;
    uint _833 = _832 + uint(cbMatDynParam._m0[0u].w);
    float _839 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0)))) * cbInstanceData._m0[_833].x;
    float _840 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) * cbInstanceData._m0[_833].y;
    float _841 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) * cbInstanceData._m0[_833].z;
    float _4049 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _842 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _4060 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _843 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _4071 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _844 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    vec4 _853 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _793, cbSceneParam._m0[86u].y * _794));
    float _856 = _853.x * TEXCOORD_4;
    float _857 = dot(vec3(_694, _695, _696), vec3(_773, _774, _775));
    float _860 = _857 * 2.0;
    float _864 = (_860 * _694) - _773;
    float _865 = (_860 * _695) - _774;
    float _866 = (_860 * _696) - _775;
    float _870 = abs(dot(vec3(_773, _774, _775), vec3(_694, _695, _696)));
    float _4082 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _872 = sqrt(_697);
    float _885 = exp2((_872 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_872 * 3.0));
    float _917 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _921 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _925 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1256;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _981 = fma(_925, cbModelParam._m0[26u].z, fma(_921, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _917));
        float _985 = fma(_925, cbModelParam._m0[27u].z, fma(_921, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _917));
        float _989 = fma(_925, cbModelParam._m0[28u].z, fma(_921, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _917));
        float _1014 = _917 + _694;
        float _1015 = _921 + _695;
        float _1016 = _925 + _696;
        float _1026 = fma(_1016, cbModelParam._m0[26u].z, fma(_1015, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1014)) - _981;
        float _1027 = fma(_1016, cbModelParam._m0[27u].z, fma(_1015, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1014)) - _985;
        float _1028 = fma(_1016, cbModelParam._m0[28u].z, fma(_1015, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1014)) - _989;
        float _1032 = inversesqrt(dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028)));
        float _1045 = ((_1032 * _1026) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_981 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1046 = ((_1032 * _1027) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_985 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1047 = ((_1032 * _1028) / cbModelParam._m0[34u].z) + ((((((_989 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        float _1084 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1050.x + (-0.5));
        float _1086 = _1084 * (_1050.y + (-0.5));
        float _1087 = _1084 * (_1050.z + (-0.5));
        float _1094 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1057.x + (-0.5));
        float _1096 = _1094 * (_1057.y + (-0.5));
        float _1097 = _1094 * (_1057.z + (-0.5));
        float _1104 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1064.x + (-0.5));
        float _1106 = _1104 * (_1064.y + (-0.5));
        float _1107 = _1104 * (_1064.z + (-0.5));
        float _1114 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1071.x + (-0.5));
        float _1116 = _1114 * (_1071.y + (-0.5));
        float _1117 = _1114 * (_1071.z + (-0.5));
        float _1118 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1119 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1120 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1121 = _1085 * 0.5;
        float _1122 = _1095 * 0.5;
        float _1123 = _1105 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1138 = (dot(vec3(_694, _695, _696), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _4108 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1148 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1118 + 9.9999997473787516355514526367188e-06);
        float _4119 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _4130 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_1150 + 1.0))) + _1155) * _1118;
        float _1165 = _1086 * 0.5;
        float _1166 = _1096 * 0.5;
        float _1167 = _1106 * 0.5;
        float _1168 = dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167));
        float _1173 = (_1168 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1168);
        float _1181 = (dot(vec3(_694, _695, _696), vec3(_1173 * _1165, _1173 * _1166, _1173 * _1167)) + 1.0) * 0.5;
        float _4141 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1190 = sqrt(((_1166 * _1166) + (_1165 * _1165)) + (_1167 * _1167)) / (_1119 + 9.9999997473787516355514526367188e-06);
        float _4152 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1192 = _1191 * 2.0;
        float _1196 = (1.0 - _1191) / (_1191 + 1.0);
        float _4163 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1206 = ((((1.0 - _1197) * (_1192 + 2.0)) * exp2(log2(isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_1192 + 1.0))) + _1197) * _1119;
        float _1207 = _1087 * 0.5;
        float _1208 = _1097 * 0.5;
        float _1209 = _1107 * 0.5;
        float _1210 = dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209));
        float _1215 = (_1210 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1210);
        float _1223 = (dot(vec3(_694, _695, _696), vec3(_1215 * _1207, _1215 * _1208, _1215 * _1209)) + 1.0) * 0.5;
        float _4174 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1232 = sqrt(((_1208 * _1208) + (_1207 * _1207)) + (_1209 * _1209)) / (_1120 + 9.9999997473787516355514526367188e-06);
        float _4185 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1234 = _1233 * 2.0;
        float _1238 = (1.0 - _1233) / (_1233 + 1.0);
        float _4196 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1248 = ((((1.0 - _1239) * (_1234 + 2.0)) * exp2(log2(isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_1234 + 1.0))) + _1239) * _1120;
        _1256 = _1087;
        _1258 = _1086;
        _1259 = _1085;
        _1260 = _1097;
        _1261 = _1096;
        _1262 = _1095;
        _1263 = _1107;
        _1264 = _1106;
        _1265 = _1105;
        _1266 = _1120;
        _1267 = _1119;
        _1268 = _1118;
        _1269 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
        _1270 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)));
        _1271 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)));
    }
    else
    {
        _1256 = _1257;
        _1258 = _1257;
        _1259 = _1257;
        _1260 = _1257;
        _1261 = _1257;
        _1262 = _1257;
        _1263 = _1257;
        _1264 = _1257;
        _1265 = _1257;
        _1266 = _1257;
        _1267 = _1257;
        _1268 = _1257;
        _1269 = 0.0;
        _1270 = 0.0;
        _1271 = 0.0;
    }
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1300 = fma(_925, cbModelParam._m0[30u].z, fma(_921, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _917));
        float _1304 = fma(_925, cbModelParam._m0[31u].z, fma(_921, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _917));
        float _1308 = fma(_925, cbModelParam._m0[32u].z, fma(_921, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _917));
        float _1331 = _917 + _694;
        float _1332 = _921 + _695;
        float _1333 = _925 + _696;
        float _1343 = fma(_1333, cbModelParam._m0[30u].z, fma(_1332, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1331)) - _1300;
        float _1344 = fma(_1333, cbModelParam._m0[31u].z, fma(_1332, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1331)) - _1304;
        float _1345 = fma(_1333, cbModelParam._m0[32u].z, fma(_1332, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1331)) - _1308;
        float _1349 = inversesqrt(dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345)));
        float _1362 = ((_1349 * _1343) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1300 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1363 = ((_1349 * _1344) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1304 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1364 = ((_1349 * _1345) / cbModelParam._m0[35u].z) + ((((((_1308 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        vec4 _1380 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        vec4 _1387 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        float _1399 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1366.x + (-0.5));
        float _1401 = _1399 * (_1366.y + (-0.5));
        float _1402 = _1399 * (_1366.z + (-0.5));
        float _1409 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1373.x + (-0.5));
        float _1411 = _1409 * (_1373.y + (-0.5));
        float _1412 = _1409 * (_1373.z + (-0.5));
        float _1419 = exp2((_1380.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1380.x + (-0.5));
        float _1421 = _1419 * (_1380.y + (-0.5));
        float _1422 = _1419 * (_1380.z + (-0.5));
        float _1429 = exp2((_1387.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1387.x + (-0.5));
        float _1431 = _1429 * (_1387.y + (-0.5));
        float _1432 = _1429 * (_1387.z + (-0.5));
        float _1433 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1434 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1435 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1436 = _1400 * 0.5;
        float _1437 = _1410 * 0.5;
        float _1438 = _1420 * 0.5;
        float _1439 = dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438));
        float _1444 = (_1439 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1439);
        float _1452 = (dot(vec3(_694, _695, _696), vec3(_1444 * _1436, _1444 * _1437, _1444 * _1438)) + 1.0) * 0.5;
        float _4237 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1461 = sqrt(((_1437 * _1437) + (_1436 * _1436)) + (_1438 * _1438)) / (_1433 + 9.9999997473787516355514526367188e-06);
        float _4248 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _1463 = _1462 * 2.0;
        float _1467 = (1.0 - _1462) / (_1462 + 1.0);
        float _4259 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1477 = ((((1.0 - _1468) * (_1463 + 2.0)) * exp2(log2(isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (_1463 + 1.0))) + _1468) * _1433;
        float _1478 = _1401 * 0.5;
        float _1479 = _1411 * 0.5;
        float _1480 = _1421 * 0.5;
        float _1481 = dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480));
        float _1486 = (_1481 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1481);
        float _1494 = (dot(vec3(_694, _695, _696), vec3(_1486 * _1478, _1486 * _1479, _1486 * _1480)) + 1.0) * 0.5;
        float _4270 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1503 = sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480)) / (_1434 + 9.9999997473787516355514526367188e-06);
        float _4281 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1505 = _1504 * 2.0;
        float _1509 = (1.0 - _1504) / (_1504 + 1.0);
        float _4292 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1519 = ((((1.0 - _1510) * (_1505 + 2.0)) * exp2(log2(isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_1505 + 1.0))) + _1510) * _1434;
        float _1520 = _1402 * 0.5;
        float _1521 = _1412 * 0.5;
        float _1522 = _1422 * 0.5;
        float _1523 = dot(vec3(_1520, _1521, _1522), vec3(_1520, _1521, _1522));
        float _1528 = (_1523 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1523);
        float _1536 = (dot(vec3(_694, _695, _696), vec3(_1528 * _1520, _1528 * _1521, _1528 * _1522)) + 1.0) * 0.5;
        float _4303 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1545 = sqrt(((_1521 * _1521) + (_1520 * _1520)) + (_1522 * _1522)) / (_1435 + 9.9999997473787516355514526367188e-06);
        float _4314 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1547 = _1546 * 2.0;
        float _1551 = (1.0 - _1546) / (_1546 + 1.0);
        float _4325 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1561 = ((((1.0 - _1552) * (_1547 + 2.0)) * exp2(log2(isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_1547 + 1.0))) + _1552) * _1435;
        _1569 = _1402;
        _1570 = _1401;
        _1571 = _1400;
        _1572 = _1412;
        _1573 = _1411;
        _1574 = _1410;
        _1575 = _1422;
        _1576 = _1421;
        _1577 = _1420;
        _1578 = _1435;
        _1579 = _1434;
        _1580 = _1433;
        _1581 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)));
        _1582 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)));
        _1583 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)));
    }
    else
    {
        _1569 = _1257;
        _1570 = _1257;
        _1571 = _1257;
        _1572 = _1257;
        _1573 = _1257;
        _1574 = _1257;
        _1575 = _1257;
        _1576 = _1257;
        _1577 = _1257;
        _1578 = _1257;
        _1579 = _1257;
        _1580 = _1257;
        _1581 = 0.0;
        _1582 = 0.0;
        _1583 = 0.0;
    }
    float _1593 = (cbModelParam._m0[1u].x * (_1581 - _1269)) + _1269;
    float _1594 = (cbModelParam._m0[1u].x * (_1582 - _1270)) + _1270;
    float _1595 = (cbModelParam._m0[1u].x * (_1583 - _1271)) + _1271;
    float _1616 = fma(_1595, cbSceneParam._m0[89u].z, fma(_1594, cbSceneParam._m0[89u].y, _1593 * cbSceneParam._m0[89u].x));
    float _1619 = fma(_1595, cbSceneParam._m0[90u].z, fma(_1594, cbSceneParam._m0[90u].y, _1593 * cbSceneParam._m0[90u].x));
    float _1622 = fma(_1595, cbSceneParam._m0[91u].z, fma(_1594, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1593));
    float _1637 = _864 * 0.5;
    float _1638 = _865 * 0.5;
    float _1639 = _866 * 0.5;
    float _1640 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1571, _1574, _1577, _1580));
    float _1643 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1570, _1573, _1576, _1579));
    float _1646 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1569, _1572, _1575, _1578));
    float _1680;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1653 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1256, _1260, _1263, _1266));
        float _1657 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1258, _1261, _1264, _1267));
        float _1661 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1259, _1262, _1265, _1268));
        float _1668 = dot(vec4(cbModelParam._m0[39u]), vec4(_1637, _1638, _1639, 1.0));
        _1680 = dot(vec3(isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)), isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)), isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1668) ? 0.0 : (isnan(0.0) ? _1668 : max(0.0, _1668))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1680 = 1.0;
    }
    float _1691;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1682 = dot(vec4(cbModelParam._m0[40u]), vec4(_1637, _1638, _1639, 1.0));
        _1691 = dot(vec3(isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)), isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)), isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1682) ? 0.0 : (isnan(0.0) ? _1682 : max(0.0, _1682))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1691 = 1.0;
    }
    float _1695 = (_1691 * cbModelParam._m0[1u].x) + (_1680 * (1.0 - cbModelParam._m0[1u].x));
    float _1705 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _697);
    float _1706 = isnan(_1705) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1705 : min(cbModelParam._m0[25u].z, _1705));
    float _1786;
    float _1788;
    float _1790;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1753 = fma(_925, cbModelParam._m0[13u].z, fma(_921, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _917)) + cbModelParam._m0[13u].w;
        float _1757 = fma(_925, cbModelParam._m0[14u].z, fma(_921, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _917)) + cbModelParam._m0[14u].w;
        float _1761 = fma(_925, cbModelParam._m0[15u].z, fma(_921, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _917)) + cbModelParam._m0[15u].w;
        float _1764 = fma(_866, cbModelParam._m0[13u].z, fma(_865, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _864));
        float _1767 = fma(_866, cbModelParam._m0[14u].z, fma(_865, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _864));
        float _1770 = fma(_866, cbModelParam._m0[15u].z, fma(_865, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _864));
        float _1798;
        if (_1764 > 0.0)
        {
            _1798 = abs((1.0 - _1753) / _1764);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1753 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1798 = frontier_phi_19_17_ladder;
        }
        float _1971;
        if (_1767 > 0.0)
        {
            _1971 = abs((1.0 - _1757) / _1767);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1757 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1971 = frontier_phi_28_24_ladder;
        }
        float _2266;
        if (_1770 > 0.0)
        {
            _2266 = abs((1.0 - _1761) / _1770);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1761 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2266 = frontier_phi_40_35_ladder;
        }
        float _2268 = isnan(_1971) ? _1798 : (isnan(_1798) ? _1971 : min(_1798, _1971));
        float _2269 = isnan(_2266) ? _2268 : (isnan(_2268) ? _2266 : min(_2268, _2266));
        float _2273 = (_2269 * _1764) + _1753;
        float _2274 = (_2269 * _1767) + _1757;
        float _2275 = (_2269 * _1770) + _1761;
        float _2276 = _2269 * 9.9999997473787516355514526367188e-05;
        float _2278 = (-1.0) - _2276;
        float _2280 = _2276 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2275 > _2280) || ((_2275 < _2278) || ((_2274 > _2280) || ((_2274 < _2278) || ((_2273 < _2278) || (_2273 > _2280))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2420 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2275, cbModelParam._m0[9u].z, fma(_2274, cbModelParam._m0[9u].y, _2273 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2275, cbModelParam._m0[10u].z, fma(_2274, cbModelParam._m0[10u].y, _2273 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2275, cbModelParam._m0[11u].z, fma(_2274, cbModelParam._m0[11u].y, _2273 * cbModelParam._m0[11u].x))), _1706);
            frontier_phi_18_40_ladder = _2420.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2420.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2420.x * cbModelParam._m0[1u].y;
        }
        _1786 = frontier_phi_18_40_ladder_2;
        _1788 = frontier_phi_18_40_ladder_1;
        _1790 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1774 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_864, _865, _866), _1706);
        _1786 = _1774.x * cbModelParam._m0[1u].y;
        _1788 = _1774.y * cbModelParam._m0[1u].y;
        _1790 = _1774.z * cbModelParam._m0[1u].y;
    }
    float _1794 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _697);
    float _1795 = isnan(_1794) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1794 : min(cbModelParam._m0[25u].w, _1794));
    float _1888;
    float _1890;
    float _1892;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1852 = fma(_925, cbModelParam._m0[21u].z, fma(_921, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _917)) + cbModelParam._m0[21u].w;
        float _1856 = fma(_925, cbModelParam._m0[22u].z, fma(_921, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _917)) + cbModelParam._m0[22u].w;
        float _1860 = fma(_925, cbModelParam._m0[23u].z, fma(_921, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _917)) + cbModelParam._m0[23u].w;
        float _1863 = fma(_866, cbModelParam._m0[21u].z, fma(_865, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _864));
        float _1866 = fma(_866, cbModelParam._m0[22u].z, fma(_865, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _864));
        float _1869 = fma(_866, cbModelParam._m0[23u].z, fma(_865, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _864));
        float _1976;
        if (_1863 > 0.0)
        {
            _1976 = abs((1.0 - _1852) / _1863);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1852 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1976 = frontier_phi_30_26_ladder;
        }
        float _2293;
        if (_1866 > 0.0)
        {
            _2293 = abs((1.0 - _1856) / _1866);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1856 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2293 = frontier_phi_42_37_ladder;
        }
        float _2620;
        if (_1869 > 0.0)
        {
            _2620 = abs((1.0 - _1860) / _1869);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1860 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2620 = frontier_phi_52_49_ladder;
        }
        float _2622 = isnan(_2293) ? _1976 : (isnan(_1976) ? _2293 : min(_1976, _2293));
        float _2623 = isnan(_2620) ? _2622 : (isnan(_2622) ? _2620 : min(_2622, _2620));
        float _2627 = (_2623 * _1863) + _1852;
        float _2628 = (_2623 * _1866) + _1856;
        float _2629 = (_2623 * _1869) + _1860;
        float _2630 = _2623 * 9.9999997473787516355514526367188e-05;
        float _2631 = (-1.0) - _2630;
        float _2633 = _2630 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2629 > _2633) || ((_2629 < _2631) || ((_2628 > _2633) || ((_2628 < _2631) || ((_2627 < _2631) || (_2627 > _2633))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2747 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2629, cbModelParam._m0[17u].z, fma(_2628, cbModelParam._m0[17u].y, _2627 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2629, cbModelParam._m0[18u].z, fma(_2628, cbModelParam._m0[18u].y, _2627 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2629, cbModelParam._m0[19u].z, fma(_2628, cbModelParam._m0[19u].y, _2627 * cbModelParam._m0[19u].x))), _1795);
            frontier_phi_27_52_ladder = _2747.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2747.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2747.x * cbModelParam._m0[1u].z;
        }
        _1888 = frontier_phi_27_52_ladder_2;
        _1890 = frontier_phi_27_52_ladder_1;
        _1892 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1872 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_864, _865, _866), _1795);
        _1888 = _1872.x * cbModelParam._m0[1u].z;
        _1890 = _1872.y * cbModelParam._m0[1u].z;
        _1892 = _1872.z * cbModelParam._m0[1u].z;
    }
    float _1904 = ((((1.0 - _885) * ((_872 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_885 * _872)) * _856;
    float _1905 = _1904 * ((cbModelParam._m0[1u].w * (_1888 - _1786)) + _1786);
    float _1906 = _1904 * ((cbModelParam._m0[1u].w * (_1890 - _1788)) + _1788);
    float _1907 = _1904 * ((cbModelParam._m0[1u].w * (_1892 - _1790)) + _1790);
    float _1910 = fma(_1907, cbSceneParam._m0[89u].z, fma(_1906, cbSceneParam._m0[89u].y, _1905 * cbSceneParam._m0[89u].x));
    float _1913 = fma(_1907, cbSceneParam._m0[90u].z, fma(_1906, cbSceneParam._m0[90u].y, _1905 * cbSceneParam._m0[90u].x));
    float _1916 = fma(_1907, cbSceneParam._m0[91u].z, fma(_1906, cbSceneParam._m0[91u].y, _1905 * cbSceneParam._m0[91u].x));
    float _1950 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1954 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1958 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1962 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1963 = _1950 / _1962;
    float _1964 = _1954 / _1962;
    float _1965 = _1958 / _1962;
    float _2112;
    float _2113;
    float _2114;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1992 = ((uint(_1965 > cbSceneParam._m0[59u].y) + uint(_1965 > cbSceneParam._m0[59u].x)) + uint(_1965 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1993 = _1992 + 43u;
        uint _2001 = _1992 + 44u;
        uint _2009 = _1992 + 45u;
        uint _2017 = _1992 + 46u;
        float _2028 = fma(_1962, cbSceneParam._m0[_1993].w, fma(_1958, cbSceneParam._m0[_1993].z, fma(_1954, cbSceneParam._m0[_1993].y, _1950 * cbSceneParam._m0[_1993].x)));
        float _2032 = fma(_1962, cbSceneParam._m0[_2001].w, fma(_1958, cbSceneParam._m0[_2001].z, fma(_1954, cbSceneParam._m0[_2001].y, _1950 * cbSceneParam._m0[_2001].x)));
        float _2040 = fma(_1962, cbSceneParam._m0[_2017].w, fma(_1958, cbSceneParam._m0[_2017].z, fma(_1954, cbSceneParam._m0[_2017].y, _1950 * cbSceneParam._m0[_2017].x)));
        float _2045 = cbSceneParam._m0[33u].z * _2040;
        float _2047 = cbSceneParam._m0[33u].w * _2040;
        float _2050 = fma(_1962, cbSceneParam._m0[_2009].w, fma(_1958, cbSceneParam._m0[_2009].z, fma(_1954, cbSceneParam._m0[_2009].y, _1950 * cbSceneParam._m0[_2009].x))) / _2040;
        float _2098 = (cbSceneParam._m0[33u].x - sqrt(((_1964 * _1964) + (_1963 * _1963)) + (_1965 * _1965))) * cbSceneParam._m0[33u].y;
        float _4451 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2105 = (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2045 + _2028) / _2040, (_2047 + _2032) / _2040), _2050), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2047 + _2028) / _2040, (_2032 - _2045) / _2040), _2050), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2028 - _2045) / _2040, (_2032 - _2047) / _2040), _2050), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2028 - _2047) / _2040, (_2045 + _2032) / _2040), _2050), 0.0)).x), vec4(0.25)));
        _2112 = 1.0 - (_2105 * cbSceneParam._m0[34u].x);
        _2113 = 1.0 - (_2105 * cbSceneParam._m0[34u].y);
        _2114 = 1.0 - (_2105 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2112 = 1.0;
        _2113 = 1.0;
        _2114 = 1.0;
    }
    float _2178;
    float _2180;
    float _2182;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2166 = fma(_1962, cbSceneParam._m0[63u].w, fma(_1958, cbSceneParam._m0[63u].z, fma(_1954, cbSceneParam._m0[63u].y, _1950 * cbSceneParam._m0[63u].x)));
        float _2167 = fma(_1962, cbSceneParam._m0[60u].w, fma(_1958, cbSceneParam._m0[60u].z, fma(_1954, cbSceneParam._m0[60u].y, _1950 * cbSceneParam._m0[60u].x))) / _2166;
        float _2168 = fma(_1962, cbSceneParam._m0[61u].w, fma(_1958, cbSceneParam._m0[61u].z, fma(_1954, cbSceneParam._m0[61u].y, _1950 * cbSceneParam._m0[61u].x))) / _2166;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2167 >= cbSceneParam._m0[64u].x) && (_2168 >= cbSceneParam._m0[64u].y)) && (_2167 <= cbSceneParam._m0[64u].z)) && (_2168 <= cbSceneParam._m0[64u].w))
        {
            float _2306 = fma(_1962, cbSceneParam._m0[62u].w, fma(_1958, cbSceneParam._m0[62u].z, fma(_1954, cbSceneParam._m0[62u].y, _1950 * cbSceneParam._m0[62u].x))) / _2166;
            float _2310 = isnan(cbSceneParam._m0[41u].w) ? _2306 : (isnan(_2306) ? cbSceneParam._m0[41u].w : max(_2306, cbSceneParam._m0[41u].w));
            float _2353 = (cbSceneParam._m0[33u].x - sqrt(((_1964 * _1964) + (_1963 * _1963)) + (_1965 * _1965))) * cbSceneParam._m0[33u].y;
            float _4467 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
            float _2360 = (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2167, cbSceneParam._m0[33u].w + _2168), _2310), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2167, _2168 - cbSceneParam._m0[33u].z), _2310), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2167 - cbSceneParam._m0[33u].z, _2168 - cbSceneParam._m0[33u].w), _2310), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2167 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2168), _2310), 0.0)).x), vec4(0.25)));
            float _2364 = 1.0 - (_2360 * cbSceneParam._m0[34u].x);
            float _2365 = 1.0 - (_2360 * cbSceneParam._m0[34u].y);
            float _2366 = 1.0 - (_2360 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2365) ? _2113 : (isnan(_2113) ? _2365 : min(_2113, _2365));
            frontier_phi_39_38_ladder_1 = isnan(_2364) ? _2112 : (isnan(_2112) ? _2364 : min(_2112, _2364));
            frontier_phi_39_38_ladder_2 = isnan(_2366) ? _2114 : (isnan(_2114) ? _2366 : min(_2114, _2366));
        }
        else
        {
            frontier_phi_39_38_ladder = _2113;
            frontier_phi_39_38_ladder_1 = _2112;
            frontier_phi_39_38_ladder_2 = _2114;
        }
        _2178 = frontier_phi_39_38_ladder_1;
        _2180 = frontier_phi_39_38_ladder;
        _2182 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2178 = _2112;
        _2180 = _2113;
        _2182 = _2114;
    }
    uvec4 _2187 = floatBitsToUint(cbInstanceData._m0[_831 + 5u]);
    uint _2189 = _2187.x * 14u;
    uint _2190 = _2189 + 13u;
    float _2197 = _856 + (-1.0);
    float _2202 = (cbLight._m0[_2190].x * _2197) + 1.0;
    float _2203 = (cbLight._m0[_2190].y * _2197) + 1.0;
    float _2204 = (cbLight._m0[_2190].z * _2197) + 1.0;
    float _2205 = (cbLight._m0[_2190].w * _2197) + 1.0;
    uint _2206 = _2189 + 5u;
    float _2212 = isnan(1.0) ? _2203 : (isnan(_2203) ? 1.0 : min(_2203, 1.0));
    uint _2216 = _2189 + 4u;
    float _2225 = isnan(1.0) ? _2202 : (isnan(_2202) ? 1.0 : min(_2202, 1.0));
    uint _2229 = _2189 | 1u;
    float _2240 = dot(vec3(cbLight._m0[_2189].xyz), vec3(_694, _695, _696));
    float _2243 = dot(vec3(cbLight._m0[_2229].xyz), vec3(_694, _695, _696));
    float _4503 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _4514 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2248 = (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * 0.3183098733425140380859375;
    float _2250 = (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * 0.3183098733425140380859375;
    float _2257 = ((cbLight._m0[_2206].x * _2212) * _2250) + (((cbLight._m0[_2216].x * _2178) * _2225) * _2248);
    float _2258 = ((_2212 * cbLight._m0[_2206].y) * _2250) + (((cbLight._m0[_2216].y * _2180) * _2225) * _2248);
    float _2259 = ((_2212 * cbLight._m0[_2206].z) * _2250) + (((cbLight._m0[_2216].z * _2182) * _2225) * _2248);
    uvec4 _2263 = floatBitsToUint(cbLight._m0[_2189 + 12u]);
    bool _2265 = _2263.x == 0u;
    float _2367;
    float _2369;
    float _2371;
    if (_2265)
    {
        _2367 = _2257;
        _2369 = _2258;
        _2371 = _2259;
    }
    else
    {
        uint _2375 = _2189 + 6u;
        float _2391 = (dot(vec3(cbLight._m0[_2189 + 2u].xyz), vec3(_694, _695, _696)) * 0.5) + 0.5;
        float _2392 = _2391 * _2391;
        float _4525 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2393 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _2394 = isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0));
        _2367 = (((cbLight._m0[_2375].x * 0.3183098733425140380859375) * _2393) * _2394) + _2257;
        _2369 = (((cbLight._m0[_2375].y * 0.3183098733425140380859375) * _2393) * _2394) + _2258;
        _2371 = (((cbLight._m0[_2375].z * 0.3183098733425140380859375) * _2393) * _2394) + _2259;
    }
    bool _2374 = _2263.y == 0u;
    float _2429;
    float _2431;
    float _2433;
    if (_2374)
    {
        _2429 = _2367;
        _2431 = _2369;
        _2433 = _2371;
    }
    else
    {
        uint _2591 = _2189 + 7u;
        float _2607 = (dot(vec3(cbLight._m0[_2189 + 3u].xyz), vec3(_694, _695, _696)) * 0.5) + 0.5;
        float _2608 = _2607 * _2607;
        float _4541 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2609 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _2610 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
        _2429 = (((cbLight._m0[_2591].x * 0.3183098733425140380859375) * _2609) * _2610) + _2367;
        _2431 = (((cbLight._m0[_2591].y * 0.3183098733425140380859375) * _2609) * _2610) + _2369;
        _2433 = (((cbLight._m0[_2591].z * 0.3183098733425140380859375) * _2609) * _2610) + _2371;
    }
    uint _2436 = _2189 + 8u;
    float _2449 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2189].w)) * _697) * 0.949999988079071044921875);
    float _2450 = _2449 * _2449;
    float _2451 = cbLight._m0[_2189].x + _773;
    float _2452 = cbLight._m0[_2189].y + _774;
    float _2453 = cbLight._m0[_2189].z + _775;
    float _2457 = inversesqrt(dot(vec3(_2451, _2452, _2453), vec3(_2451, _2452, _2453)));
    float _2458 = _2457 * _2451;
    float _2459 = _2457 * _2452;
    float _2460 = _2457 * _2453;
    float _2461 = dot(vec3(_694, _695, _696), vec3(cbLight._m0[_2189].xyz));
    float _4557 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2464 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
    float _4568 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _2465 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
    float _2466 = dot(vec3(_694, _695, _696), vec3(_2458, _2459, _2460));
    float _4579 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _2469 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
    float _2470 = dot(vec3(cbLight._m0[_2189].xyz), vec3(_2458, _2459, _2460));
    float _4590 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2474 = _2450 * _2450;
    float _2478 = ((_2469 * _2469) * (_2474 + (-1.0))) + 1.0;
    float _2489 = (exp2(log2(1.0 - (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2490 = 1.0 - _2450;
    float _2501 = (0.5 / (((_2465 * ((_2464 * _2490) + _2450)) + 9.9999999392252902907785028219223e-09) + (((_2465 * _2490) + _2450) * _2464))) * _2464;
    float _4601 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
    float _2503 = (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_2474 / ((_2478 * _2478) * 3.141590118408203125));
    uint _2517 = _2189 + 9u;
    float _2528 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2229].w)) * _697) * 0.949999988079071044921875);
    float _2529 = _2528 * _2528;
    float _2530 = cbLight._m0[_2229].x + _773;
    float _2531 = cbLight._m0[_2229].y + _774;
    float _2532 = cbLight._m0[_2229].z + _775;
    float _2536 = inversesqrt(dot(vec3(_2530, _2531, _2532), vec3(_2530, _2531, _2532)));
    float _2537 = _2536 * _2530;
    float _2538 = _2536 * _2531;
    float _2539 = _2536 * _2532;
    float _2540 = dot(vec3(_694, _695, _696), vec3(cbLight._m0[_2229].xyz));
    float _4612 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
    float _2543 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
    float _2544 = dot(vec3(_694, _695, _696), vec3(_2537, _2538, _2539));
    float _4623 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2547 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
    float _2548 = dot(vec3(cbLight._m0[_2229].xyz), vec3(_2537, _2538, _2539));
    float _4634 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
    float _2552 = _2529 * _2529;
    float _2556 = ((_2547 * _2547) * (_2552 + (-1.0))) + 1.0;
    float _2565 = (exp2(log2(1.0 - (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2566 = 1.0 - _2529;
    float _2576 = (0.5 / (((_2465 * ((_2543 * _2566) + _2529)) + 9.9999999392252902907785028219223e-09) + (((_2465 * _2566) + _2529) * _2543))) * _2543;
    float _4645 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
    float _2578 = (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (_2552 / ((_2556 * _2556) * 3.141590118408203125));
    float _2588 = (((_2565 * cbLight._m0[_2517].x) * _2578) * _2212) + ((((cbLight._m0[_2436].x * _2178) * _2489) * _2503) * _2225);
    float _2589 = (((_2565 * cbLight._m0[_2517].y) * _2578) * _2212) + ((((cbLight._m0[_2436].y * _2180) * _2489) * _2503) * _2225);
    float _2590 = (((_2565 * cbLight._m0[_2517].z) * _2578) * _2212) + ((((cbLight._m0[_2436].z * _2182) * _2489) * _2503) * _2225);
    float _2646;
    float _2648;
    float _2650;
    if (_2265)
    {
        _2646 = _2588;
        _2648 = _2589;
        _2650 = _2590;
    }
    else
    {
        uint _2652 = _2189 + 2u;
        uint _2656 = _2189 + 10u;
        float _2670 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2652].w)) * _697) * 0.949999988079071044921875);
        float _2671 = _2670 * _2670;
        float _2672 = cbLight._m0[_2652].x + _773;
        float _2673 = cbLight._m0[_2652].y + _774;
        float _2674 = cbLight._m0[_2652].z + _775;
        float _2678 = inversesqrt(dot(vec3(_2672, _2673, _2674), vec3(_2672, _2673, _2674)));
        float _2679 = _2678 * _2672;
        float _2680 = _2678 * _2673;
        float _2681 = _2678 * _2674;
        float _2682 = dot(vec3(_694, _695, _696), vec3(cbLight._m0[_2652].xyz));
        float _4656 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2685 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
        float _2686 = dot(vec3(_694, _695, _696), vec3(_2679, _2680, _2681));
        float _4667 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2689 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
        float _2690 = dot(vec3(cbLight._m0[_2652].xyz), vec3(_2679, _2680, _2681));
        float _4678 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        float _2694 = _2671 * _2671;
        float _2698 = ((_2689 * _2689) * (_2694 + (-1.0))) + 1.0;
        float _2707 = (exp2(log2(1.0 - (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2708 = 1.0 - _2671;
        float _2718 = (0.5 / (((_2465 * ((_2685 * _2708) + _2671)) + 9.9999999392252902907785028219223e-09) + (((_2465 * _2708) + _2671) * _2685))) * _2685;
        float _4689 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2720 = (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0))) * (_2694 / ((_2698 * _2698) * 3.141590118408203125));
        float _2721 = isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0));
        _2646 = (((_2707 * cbLight._m0[_2656].x) * _2720) * _2721) + _2588;
        _2648 = (((_2707 * cbLight._m0[_2656].y) * _2720) * _2721) + _2589;
        _2650 = (((_2707 * cbLight._m0[_2656].z) * _2720) * _2721) + _2590;
    }
    float _2752;
    float _2754;
    float _2756;
    if (_2374)
    {
        _2752 = _2646;
        _2754 = _2648;
        _2756 = _2650;
    }
    else
    {
        uint _2763 = _2189 + 3u;
        uint _2767 = _2189 + 11u;
        float _2781 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2763].w)) * _697) * 0.949999988079071044921875);
        float _2782 = _2781 * _2781;
        float _2783 = cbLight._m0[_2763].x + _773;
        float _2784 = cbLight._m0[_2763].y + _774;
        float _2785 = cbLight._m0[_2763].z + _775;
        float _2789 = inversesqrt(dot(vec3(_2783, _2784, _2785), vec3(_2783, _2784, _2785)));
        float _2790 = _2789 * _2783;
        float _2791 = _2789 * _2784;
        float _2792 = _2789 * _2785;
        float _2793 = dot(vec3(_694, _695, _696), vec3(cbLight._m0[_2763].xyz));
        float _4705 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        float _2796 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
        float _2797 = dot(vec3(_694, _695, _696), vec3(_2790, _2791, _2792));
        float _4716 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
        float _2800 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
        float _2801 = dot(vec3(cbLight._m0[_2763].xyz), vec3(_2790, _2791, _2792));
        float _4727 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
        float _2805 = _2782 * _2782;
        float _2809 = ((_2800 * _2800) * (_2805 + (-1.0))) + 1.0;
        float _2818 = (exp2(log2(1.0 - (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2819 = 1.0 - _2782;
        float _2829 = (0.5 / (((_2465 * ((_2796 * _2819) + _2782)) + 9.9999999392252902907785028219223e-09) + (((_2465 * _2819) + _2782) * _2796))) * _2796;
        float _4738 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
        float _2831 = (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (_2805 / ((_2809 * _2809) * 3.141590118408203125));
        float _2832 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
        _2752 = (((_2818 * cbLight._m0[_2767].x) * _2831) * _2832) + _2646;
        _2754 = (((_2818 * cbLight._m0[_2767].y) * _2831) * _2832) + _2648;
        _2756 = (((_2818 * cbLight._m0[_2767].z) * _2831) * _2832) + _2650;
    }
    float _2897;
    float _2899;
    float _2901;
    float _2903;
    float _2905;
    float _2907;
    if (_2187.y == 0u)
    {
        uvec4 _2853 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2854 = _2853.x;
        uint _2865 = uint((float(_2853.y) * floor(float(uint(cbSceneParam._m0[85u].y * _794) / _2854))) + floor(float(uint(cbSceneParam._m0[85u].x * _793) / _2854)));
        float _2875 = (log2(_1965 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2876 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
        uint _2879 = uint(isnan(14.0) ? _2876 : (isnan(_2876) ? 14.0 : min(_2876, 14.0)));
        uvec4 _2884 = texelFetch(g_lightClusterGridBuffer, int(((_2879 << 2u) + (_2865 << 6u)) >> 2u));
        uint _2885 = _2884.x;
        uint _2886 = _2853.z;
        float _2964;
        float _2966;
        float _2968;
        float _2970;
        float _2972;
        float _2974;
        if (((((1u << ((_2886 >> 4u) & 15u)) + 4294967295u) & _2885) == 0u) || ((_2886 & 240u) == 0u))
        {
            _2964 = 0.0;
            _2966 = 0.0;
            _2968 = 0.0;
            _2970 = 0.0;
            _2972 = 0.0;
            _2974 = 0.0;
        }
        else
        {
            float _2965;
            float _2967;
            float _2969;
            float _2971;
            float _2973;
            float _2975;
            float _3116 = 0.0;
            float _3117 = 0.0;
            float _3118 = 0.0;
            float _3119 = 0.0;
            float _3120 = 0.0;
            float _3121 = 0.0;
            uint _3122 = 0u;
            uint _3131;
            bool _3132;
            for (;;)
            {
                _3131 = texelFetch(g_lightClassification, int((((_2879 << 5u) + (_2865 << 9u)) + (_3122 << 2u)) >> 2u)).x;
                _3132 = _3131 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3132)
                {
                    frontier_phi_73_pred = _3121;
                    frontier_phi_73_pred_1 = _3120;
                    frontier_phi_73_pred_2 = _3119;
                    frontier_phi_73_pred_3 = _3118;
                    frontier_phi_73_pred_4 = _3117;
                    frontier_phi_73_pred_5 = _3116;
                }
                else
                {
                    float _3261;
                    float _3262;
                    float _3263;
                    float _3264;
                    float _3265;
                    float _3266;
                    uint _3267;
                    _3261 = _3116;
                    _3262 = _3117;
                    _3263 = _3118;
                    _3264 = _3119;
                    _3265 = _3120;
                    _3266 = _3121;
                    _3267 = _3131;
                    float _3188;
                    float _3189;
                    float _3190;
                    float _3191;
                    float _3192;
                    float _3193;
                    for (;;)
                    {
                        uint _3271 = uint(findLSB(_3267)) + (_3122 << 5u);
                        uint _3268 = (_3267 + 4294967295u) & _3267;
                        uint _3273 = _3271 * 48u;
                        vec4 _3287 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3273)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 3u)).x));
                        uint _3293 = (_3271 * 48u) + 4u;
                        vec4 _3306 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3293)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 3u)).x));
                        uint _3312 = (_3271 * 48u) + 8u;
                        vec3 _3323 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3312)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 2u)).x));
                        float _3327 = _3287.x - _1963;
                        float _3328 = _3287.y - _1964;
                        float _3329 = _3287.z - _1965;
                        float _3330 = dot(vec3(_3327, _3328, _3329), vec3(_3327, _3328, _3329));
                        float _3333 = inversesqrt(_3330);
                        float _3334 = _3333 * _3327;
                        float _3335 = _3333 * _3328;
                        float _3336 = _3333 * _3329;
                        float _3337 = dot(vec3(_812, _815, _818), vec3(_3334, _3335, _3336));
                        float _3342 = 1.0 - (_3330 * _3287.w);
                        float _4764 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                        float _3343 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                        float _3344 = sqrt(_3330) * _3306.w;
                        float _3347 = 1.39999997615814208984375 / (_3344 + 1.39999997615814208984375);
                        float _3348 = _3347 * _3347;
                        float _3351 = ((1.0 - _3348) * _3337) + _3348;
                        float _3354 = _3344 * _3344;
                        float _3358 = ((isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0))) * _3343) / ((_3354 * 0.699999988079071044921875) + 1.0);
                        float _3362 = (-0.0) - _1963;
                        float _3363 = (-0.0) - _1964;
                        float _3364 = (-0.0) - _1965;
                        float _3368 = inversesqrt(dot(vec3(_3362, _3363, _3364), vec3(_3362, _3363, _3364)));
                        float _3369 = _3368 * _3362;
                        float _3370 = _3368 * _3363;
                        float _3371 = _3368 * _3364;
                        float _3378 = exp2(log2(1.0 / ((_3354 * 3.5) + 5.0)) * 0.25);
                        float _3379 = 1.0 - _872;
                        float _3386 = sqrt(1.0 - ((1.0 - (_3379 * _3379)) * (1.0 - (_3378 * _3378))));
                        float _3387 = _3386 * _3386;
                        float _3388 = _3387 * _3387;
                        float _3389 = _3369 + _3334;
                        float _3390 = _3370 + _3335;
                        float _3391 = _3371 + _3336;
                        float _3395 = inversesqrt(dot(vec3(_3389, _3390, _3391), vec3(_3389, _3390, _3391)));
                        float _3399 = dot(vec3(_812, _815, _818), vec3(_3369, _3370, _3371));
                        float _4780 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                        float _3402 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                        float _3403 = dot(vec3(_812, _815, _818), vec3(_3395 * _3389, _3395 * _3390, _3395 * _3391));
                        float _4791 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                        float _3406 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                        float _3410 = ((_3406 * _3406) * (_3388 + (-1.0))) + 1.0;
                        float _3411 = _3347 * _3387;
                        float _3412 = _3411 * _3411;
                        float _3415 = ((1.0 - _3412) * _3337) + _3412;
                        float _4802 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                        float _3416 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                        float _3417 = 1.0 - _3387;
                        float _3427 = (0.5 / (((_3416 * ((_3402 * _3417) + _3387)) + 9.9999999392252902907785028219223e-09) + (((_3416 * _3417) + _3387) * _3402))) * _3416;
                        float _4813 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                        float _3438 = (((_3388 * 3.1415927410125732421875) * (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0)))) / ((_3410 * _3410) * ((_3354 * 2.1991131305694580078125) + 3.141590118408203125))) * _3343;
                        _3191 = (_3358 * _3306.x) + _3264;
                        _3192 = (_3358 * _3306.y) + _3265;
                        _3193 = (_3358 * _3306.z) + _3266;
                        _3188 = (_3438 * _3323.x) + _3261;
                        _3189 = (_3438 * _3323.y) + _3262;
                        _3190 = (_3438 * _3323.z) + _3263;
                        if (_3268 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3261 = _3188;
                            _3262 = _3189;
                            _3263 = _3190;
                            _3264 = _3191;
                            _3265 = _3192;
                            _3266 = _3193;
                            _3267 = _3268;
                        }
                    }
                    frontier_phi_73_pred = _3193;
                    frontier_phi_73_pred_1 = _3192;
                    frontier_phi_73_pred_2 = _3191;
                    frontier_phi_73_pred_3 = _3190;
                    frontier_phi_73_pred_4 = _3189;
                    frontier_phi_73_pred_5 = _3188;
                }
                _2975 = frontier_phi_73_pred;
                _2973 = frontier_phi_73_pred_1;
                _2971 = frontier_phi_73_pred_2;
                _2969 = frontier_phi_73_pred_3;
                _2967 = frontier_phi_73_pred_4;
                _2965 = frontier_phi_73_pred_5;
                uint _3123 = _3122 + 1u;
                if (_3123 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3116 = _2965;
                    _3117 = _2967;
                    _3118 = _2969;
                    _3119 = _2971;
                    _3120 = _2973;
                    _3121 = _2975;
                    _3122 = _3123;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2964 = _2965;
            _2966 = _2967;
            _2968 = _2969;
            _2970 = _2971;
            _2972 = _2973;
            _2974 = _2975;
        }
        uvec4 _2978 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2979 = _2978.z;
        uint _2981 = (_2979 >> 8u) & 15u;
        float _3084;
        float _3086;
        float _3088;
        float _3090;
        float _3092;
        float _3094;
        if (((4294967295u << _2981) & _2885) == 0u)
        {
            _3084 = _2964;
            _3086 = _2966;
            _3088 = _2968;
            _3090 = _2970;
            _3092 = _2972;
            _3094 = _2974;
        }
        else
        {
            float _3109 = inversesqrt(dot(vec3(_1963, _1964, _1965), vec3(_1963, _1964, _1965)));
            float _3110 = _3109 * _1963;
            float _3111 = _3109 * _1964;
            float _3112 = _3109 * _1965;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2981 < ((_2979 >> 12u) & 15u))
            {
                float _3085;
                float _3087;
                float _3089;
                float _3091;
                float _3093;
                float _3095;
                float _3244 = _2964;
                float _3245 = _2966;
                float _3246 = _2968;
                float _3247 = _2970;
                float _3248 = _2972;
                float _3249 = _2974;
                uint _3250 = _2981;
                uint _3259;
                bool _3260;
                for (;;)
                {
                    _3259 = texelFetch(g_lightClassification, int((((_2879 << 5u) + (_2865 << 9u)) + (_3250 << 2u)) >> 2u)).x;
                    _3260 = _3259 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3260)
                    {
                        frontier_phi_84_pred = _3248;
                        frontier_phi_84_pred_1 = _3247;
                        frontier_phi_84_pred_2 = _3246;
                        frontier_phi_84_pred_3 = _3245;
                        frontier_phi_84_pred_4 = _3244;
                        frontier_phi_84_pred_5 = _3249;
                    }
                    else
                    {
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3747;
                        float _3748;
                        float _3749;
                        float _3750;
                        float _3751;
                        float _3752;
                        float _3465 = _3244;
                        float _3466 = _3245;
                        float _3467 = _3246;
                        float _3468 = _3247;
                        float _3469 = _3248;
                        float _3470 = _3249;
                        uint _3471 = _3259;
                        uint _3472;
                        vec4 _3497;
                        float _3498;
                        vec4 _3513;
                        vec3 _3525;
                        vec4 _3540;
                        vec4 _3556;
                        float _3603;
                        bool _3604;
                        for (;;)
                        {
                            uint _3482 = ((_3250 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3471));
                            _3472 = (_3471 + 4294967295u) & _3471;
                            uint _3484 = _3482 * 40u;
                            _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            _3498 = _3497.w;
                            uint _3500 = (_3482 * 40u) + 4u;
                            _3513 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 3u)).x));
                            uint _3515 = (_3482 * 40u) + 8u;
                            _3525 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 2u)).x));
                            uint _3527 = (_3482 * 40u) + 16u;
                            _3540 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3527)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 3u)).x));
                            uint _3543 = (_3482 * 40u) + 20u;
                            _3556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 3u)).x));
                            uint _3559 = (_3482 * 40u) + 24u;
                            vec4 _3572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 3u)).x));
                            uint _3578 = (_3482 * 40u) + 28u;
                            vec4 _3591 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 3u)).x));
                            _3603 = fma(_1965, _3591.z, fma(_1964, _3591.y, _3591.x * _1963)) + _3591.w;
                            _3604 = !((fma(_1965, _3572.z, fma(_1964, _3572.y, _3572.x * _1963)) + _3572.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3604)
                            {
                                float _3631 = _3497.x - _1963;
                                float _3632 = _3497.y - _1964;
                                float _3633 = _3497.z - _1965;
                                float _3634 = dot(vec3(_3631, _3632, _3633), vec3(_3631, _3632, _3633));
                                float _3637 = inversesqrt(_3634);
                                float _3638 = _3637 * _3631;
                                float _3639 = _3637 * _3632;
                                float _3640 = _3637 * _3633;
                                float _3644 = 1.0 - (_3634 / (_3498 * _3498));
                                float _4824 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                                float _3645 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
                                float _3649 = sqrt(_3634) * _3513.w;
                                float _3651 = 1.39999997615814208984375 / (_3649 + 1.39999997615814208984375);
                                float _3652 = _3651 * _3651;
                                float _3655 = ((1.0 - _3652) * dot(vec3(_3638, _3639, _3640), vec3(_812, _815, _818))) + _3652;
                                float _3658 = _3649 * _3649;
                                float _3662 = (fma(_1965, _3540.z, fma(_1964, _3540.y, _3540.x * _1963)) + _3540.w) / _3603;
                                float _3663 = (fma(_1965, _3556.z, fma(_1964, _3556.y, _3556.x * _1963)) + _3556.w) / _3603;
                                float _3667 = 1.0 - dot(vec2(_3662, _3663), vec2(_3662, _3663));
                                float _4840 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                                float _3668 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
                                float _3669 = _3668 * (((isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0))) * _3645) / ((_3658 * 0.699999988079071044921875) + 1.0));
                                float _3681 = exp2(log2(1.0 / ((_3658 * 3.5) + 5.0)) * 0.25);
                                float _3682 = 1.0 - _872;
                                float _3689 = sqrt(1.0 - ((1.0 - (_3682 * _3682)) * (1.0 - (_3681 * _3681))));
                                float _3690 = _3689 * _3689;
                                float _3691 = _3690 * _3690;
                                float _3692 = _3638 - _3110;
                                float _3693 = _3639 - _3111;
                                float _3694 = _3640 - _3112;
                                float _3698 = inversesqrt(dot(vec3(_3692, _3693, _3694), vec3(_3692, _3693, _3694)));
                                float _3702 = dot(vec3(_812, _815, _818), vec3((-0.0) - _3110, (-0.0) - _3111, (-0.0) - _3112));
                                float _4851 = isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0));
                                float _3705 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
                                float _3706 = dot(vec3(_812, _815, _818), vec3(_3698 * _3692, _3698 * _3693, _3698 * _3694));
                                float _4862 = isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0));
                                float _3709 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
                                float _3713 = ((_3709 * _3709) * (_3691 + (-1.0))) + 1.0;
                                float _3714 = _3651 * _3690;
                                float _3715 = _3714 * _3714;
                                float _3721 = ((1.0 - _3715) * dot(vec3(_812, _815, _818), vec3(_3638, _3639, _3640))) + _3715;
                                float _4873 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                                float _3722 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
                                float _3723 = 1.0 - _3690;
                                float _3733 = (0.5 / (((_3722 * ((_3705 * _3723) + _3690)) + 9.9999999392252902907785028219223e-09) + (((_3722 * _3723) + _3690) * _3705))) * _3722;
                                float _4884 = isnan(0.0) ? _3733 : (isnan(_3733) ? 0.0 : max(_3733, 0.0));
                                float _3743 = (_3668 * _3645) * (((_3691 * 3.1415927410125732421875) * (isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0)))) / ((_3713 * _3713) * ((_3658 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3669 * _3513.y;
                                frontier_phi_90_pred_1 = _3669 * _3513.x;
                                frontier_phi_90_pred_2 = _3743 * _3525.z;
                                frontier_phi_90_pred_3 = _3743 * _3525.y;
                                frontier_phi_90_pred_4 = _3743 * _3525.x;
                                frontier_phi_90_pred_5 = _3669 * _3513.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3751 = frontier_phi_90_pred;
                            _3750 = frontier_phi_90_pred_1;
                            _3749 = frontier_phi_90_pred_2;
                            _3748 = frontier_phi_90_pred_3;
                            _3747 = frontier_phi_90_pred_4;
                            _3752 = frontier_phi_90_pred_5;
                            _3455 = _3750 + _3468;
                            _3456 = _3751 + _3469;
                            _3457 = _3752 + _3470;
                            _3452 = _3747 + _3465;
                            _3453 = _3748 + _3466;
                            _3454 = _3749 + _3467;
                            if (_3472 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3465 = _3452;
                                _3466 = _3453;
                                _3467 = _3454;
                                _3468 = _3455;
                                _3469 = _3456;
                                _3470 = _3457;
                                _3471 = _3472;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3456;
                        frontier_phi_84_pred_1 = _3455;
                        frontier_phi_84_pred_2 = _3454;
                        frontier_phi_84_pred_3 = _3453;
                        frontier_phi_84_pred_4 = _3452;
                        frontier_phi_84_pred_5 = _3457;
                    }
                    _3093 = frontier_phi_84_pred;
                    _3091 = frontier_phi_84_pred_1;
                    _3089 = frontier_phi_84_pred_2;
                    _3087 = frontier_phi_84_pred_3;
                    _3085 = frontier_phi_84_pred_4;
                    _3095 = frontier_phi_84_pred_5;
                    uint _3251 = _3250 + 1u;
                    if (_3251 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3244 = _3085;
                        _3245 = _3087;
                        _3246 = _3089;
                        _3247 = _3091;
                        _3248 = _3093;
                        _3249 = _3095;
                        _3250 = _3251;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3095;
                frontier_phi_65_66_ladder_1 = _3091;
                frontier_phi_65_66_ladder_2 = _3093;
                frontier_phi_65_66_ladder_3 = _3087;
                frontier_phi_65_66_ladder_4 = _3085;
                frontier_phi_65_66_ladder_5 = _3089;
            }
            else
            {
                frontier_phi_65_66_ladder = _2974;
                frontier_phi_65_66_ladder_1 = _2970;
                frontier_phi_65_66_ladder_2 = _2972;
                frontier_phi_65_66_ladder_3 = _2966;
                frontier_phi_65_66_ladder_4 = _2964;
                frontier_phi_65_66_ladder_5 = _2968;
            }
            _3084 = frontier_phi_65_66_ladder_4;
            _3086 = frontier_phi_65_66_ladder_3;
            _3088 = frontier_phi_65_66_ladder_5;
            _3090 = frontier_phi_65_66_ladder_1;
            _3092 = frontier_phi_65_66_ladder_2;
            _3094 = frontier_phi_65_66_ladder;
        }
        float _3099 = isnan(1.0) ? _856 : (isnan(_856) ? 1.0 : min(_856, 1.0));
        _2897 = (_3099 * _3090) + _2429;
        _2899 = (_3099 * _3092) + _2431;
        _2901 = (_3099 * _3094) + _2433;
        _2903 = ((_3084 * 0.039999999105930328369140625) * _3099) + _2752;
        _2905 = ((_3086 * 0.039999999105930328369140625) * _3099) + _2754;
        _2907 = ((_3088 * 0.039999999105930328369140625) * _3099) + _2756;
    }
    else
    {
        _2897 = _2429;
        _2899 = _2431;
        _2901 = _2433;
        _2903 = _2752;
        _2905 = _2754;
        _2907 = _2756;
    }
    float _4900 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _4911 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _4922 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _2924 = ((isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0))) * (_2897 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _856))) + ((_2903 + ((isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))) * _1695)) * cbPerFrame._m0[3u].x);
    float _2925 = ((isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0))) * (_2899 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _856))) + ((_2905 + ((isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0))) * _1695)) * cbPerFrame._m0[3u].x);
    float _2926 = ((isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0))) * (_2901 + ((isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))) * _856))) + ((_2907 + ((isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))) * _1695)) * cbPerFrame._m0[3u].x);
    uint _2927 = _831 + 6u;
    float _2935 = _793 / cbSceneParam._m0[86u].x;
    float _2936 = _794 / cbSceneParam._m0[86u].y;
    vec4 _2950 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2935, _2936, (log2((isnan(cbSceneParam._m0[77u].w) ? _716 : (isnan(_716) ? cbSceneParam._m0[77u].w : min(_716, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2952 = _2950.x;
    float _2953 = _2950.y;
    float _2954 = _2950.z;
    float _2955 = _2950.w;
    float _3026;
    float _3028;
    float _3030;
    float _3032;
    if (_716 > cbSceneParam._m0[78u].w)
    {
        float _2989 = isnan(_716) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _716 : min(cbSceneParam._m0[80u].w, _716));
        float _2990 = _2989 / _716;
        float _3001 = _2990 * _766;
        float _3002 = _767 * _2990;
        float _3003 = (-0.0) - _3002;
        float _3004 = _2990 * _768;
        float _3006 = (cbSceneParam._m0[77u].w * _3003) / _2989;
        float _3007 = _3006 + cbSceneParam._m0[79u].w;
        float _3008 = cbSceneParam._m0[79u].w - _3002;
        float _3014 = sqrt(((_3001 * _3001) + (_3002 * _3002)) + (_3004 * _3004));
        float _3017 = (1.0 - (cbSceneParam._m0[77u].w / _2989)) * _3014;
        float _3022 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3024 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3201;
        if (abs((_3003 - _3006) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3201 = ((((_3007 > 0.0) ? exp2(_3022 * _3007) : (2.0 - exp2(_3024 * _3007))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3017;
        }
        else
        {
            float _3145 = 1.0 / cbSceneParam._m0[80u].x;
            float _3146 = isnan(_3008) ? _3007 : (isnan(_3007) ? _3008 : max(_3007, _3008));
            float _3147 = isnan(_3008) ? _3007 : (isnan(_3007) ? _3008 : min(_3007, _3008));
            float _3156 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : min(_3146, 0.0));
            float _3157 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : min(_3147, 0.0));
            _3201 = ((abs(_3014 / _3003) * cbSceneParam._m0[80u].y) * ((((_3156 - _3157) * 2.0) - ((exp2(_3022 * (isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0)))) - exp2(_3022 * (isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0))))) * _3145)) - ((exp2(_3024 * _3156) - exp2(_3024 * _3157)) * _3145))) + (_3017 * cbSceneParam._m0[80u].z);
        }
        vec4 _3203 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2935, _2936, 1.0), 0.0);
        float _3212 = exp2((_3201 * (-1.44269502162933349609375)) * (1.0 - _3203.w));
        float _3213 = log2(_3212);
        float _3229 = log2(_2955);
        _3026 = (exp2(_3229 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3213 * cbSceneParam._m0[78u].x)) * _3203.x) / cbSceneParam._m0[78u].x)) + _2952;
        _3028 = (exp2(_3229 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3213 * cbSceneParam._m0[78u].y)) * _3203.y) / cbSceneParam._m0[78u].y)) + _2953;
        _3030 = (exp2(_3229 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3213 * cbSceneParam._m0[78u].z)) * _3203.z) / cbSceneParam._m0[78u].z)) + _2954;
        _3032 = _3212 * _2955;
    }
    else
    {
        _3026 = _2952;
        _3028 = _2953;
        _3030 = _2954;
        _3032 = _2955;
    }
    bool _3239;
    vec4 _3042;
    vec4 _3064;
    float _3066;
    float _3070;
    float _3071;
    float _3072;
    float _3073;
    bool _3083;
    for (;;)
    {
        _3042 = cbMatDynParam._m0[0u];
        float _3044 = roundEven(_3042.y);
        bool _3045 = _3044 == 3.0;
        float _3046 = log2(_3032);
        float _3053 = exp2(_3046 * cbSceneParam._m0[78u].x) * _2924;
        float _3054 = exp2(_3046 * cbSceneParam._m0[78u].y) * _2925;
        float _3055 = exp2(_3046 * cbSceneParam._m0[78u].z) * _2926;
        float _3062 = _782 + (-0.5);
        _3064 = cbMtdParam._m0[1u];
        _3066 = _3064.y * _3062;
        float _3069 = (_3044 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3070 = _3069 * (_3045 ? _3053 : (_3053 + (cbSceneParam._m0[72u].w * _3026)));
        _3071 = _3069 * (_3045 ? _3054 : (_3054 + (cbSceneParam._m0[72u].w * _3028)));
        _3072 = _3069 * (_3045 ? _3055 : (_3055 + (cbSceneParam._m0[72u].w * _3030)));
        _3073 = _3062 * 0.999000012874603271484375;
        _3083 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3083)
        {
            if ((cbInstanceData._m0[_831 + 7u].x + _3073) < 0.5)
            {
                _3239 = true;
                break;
            }
        }
        uint _3180 = _832 + uint(_3042.w);
        if ((cbInstanceData._m0[_3180].w < 1.0) && ((cbInstanceData._m0[_3180].w + _3073) < 0.5))
        {
            _3239 = true;
            break;
        }
        if ((_3066 + 1.0) < _3064.x)
        {
            _3239 = true;
            break;
        }
        _3239 = false;
        break;
    }
    float _3443;
    if (_3239)
    {
        discard_state = true;
        _3443 = 0.0;
    }
    else
    {
        _3443 = cbInstanceData._m0[_2927].w;
    }
    SV_Target.x = _3070;
    SV_Target.y = _3071;
    SV_Target.z = _3072;
    SV_Target.w = _3443;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2927].w;
    discard_exit();
}


