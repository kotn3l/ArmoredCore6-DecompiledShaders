#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24;
layout(set = 0, binding = 12) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 13) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 18) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in float TEXCOORD_8;
layout(location = 7, component = 1) in float TEXCOORD_9;
layout(location = 7, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1537;
float _4199;
float _4200;
float _4201;
float _4202;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _298 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _302 = _298.z;
    float _315 = exp2(log2((1.0 - _302) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _316 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _317 = isnan(1.0) ? _316 : (isnan(_316) ? 1.0 : min(_316, 1.0));
    vec4 _334 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _346 = exp2(log2(_334.w * cbMtdParam._m0[29u].y) * cbMtdParam._m0[23u].x);
    float _347 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _348 = isnan(1.0) ? _347 : (isnan(_347) ? 1.0 : min(_347, 1.0));
    float _357 = exp2(log2(cbMtdParam._m0[23u].y * _302) * cbMtdParam._m0[22u].y);
    float _358 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _359 = isnan(1.0) ? _358 : (isnan(_358) ? 1.0 : min(_358, 1.0));
    vec4 _371 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _374 = _371.y;
    float _377 = (_371.x + (-0.02500000037252902984619140625)) * 8.0;
    float _381 = roundEven(5.0 - _377);
    float _382 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _383 = isnan(4.0) ? _382 : (isnan(_382) ? 4.0 : min(_382, 4.0));
    float _395 = floor(_383);
    vec4 _398 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w, _395));
    float _210[6];
    float _211[6];
    float _212[6];
    _210[0u] = cbMtdParam._m0[17u].x;
    _211[0u] = cbMtdParam._m0[17u].y;
    _212[0u] = cbMtdParam._m0[17u].z;
    _210[1u] = cbMtdParam._m0[15u].x;
    _211[1u] = cbMtdParam._m0[15u].y;
    _212[1u] = cbMtdParam._m0[15u].z;
    _210[2u] = cbMtdParam._m0[14u].x;
    _211[2u] = cbMtdParam._m0[14u].y;
    _212[2u] = cbMtdParam._m0[14u].z;
    _210[3u] = cbMtdParam._m0[13u].x;
    _211[3u] = cbMtdParam._m0[13u].y;
    _212[3u] = cbMtdParam._m0[13u].z;
    _210[4u] = cbMtdParam._m0[12u].x;
    _211[4u] = cbMtdParam._m0[12u].y;
    _212[4u] = cbMtdParam._m0[12u].z;
    _210[5u] = cbMtdParam._m0[18u].x;
    _211[5u] = cbMtdParam._m0[18u].y;
    _212[5u] = cbMtdParam._m0[18u].z;
    float _462 = roundEven(_377);
    float _463 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    uint _465 = uint(int(isnan(5.0) ? _463 : (isnan(_463) ? 5.0 : min(_463, 5.0))));
    vec4 _495 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _506 = cbMtdParam._m0[9u].x * _495.x;
    float _507 = cbMtdParam._m0[9u].y * _495.y;
    float _508 = cbMtdParam._m0[9u].z * _495.z;
    float _515 = ((((((_210[_465] - cbMtdParam._m0[10u].x) * _374) + cbMtdParam._m0[10u].x) * _398.x) - _506) * _359) + _506;
    float _516 = ((((((_211[_465] - cbMtdParam._m0[10u].y) * _374) + cbMtdParam._m0[10u].y) * _398.y) - _507) * _359) + _507;
    float _517 = ((((((_212[_465] - cbMtdParam._m0[10u].z) * _374) + cbMtdParam._m0[10u].z) * _398.z) - _508) * _359) + _508;
    float _523 = exp2(log2(_298.w) * cbMtdParam._m0[23u].w);
    vec4 _536 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _556 = (((cbMtdParam._m0[16u].x * _536.x) - _515) * _523) + _515;
    float _557 = (((cbMtdParam._m0[16u].y * _536.y) - _516) * _523) + _516;
    float _558 = (((cbMtdParam._m0[16u].z * _536.z) - _517) * _523) + _517;
    vec4 _570 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _590 = (((cbMtdParam._m0[19u].x * _570.x) - _556) * _348) + _556;
    float _591 = (((cbMtdParam._m0[19u].y * _570.y) - _557) * _348) + _557;
    float _592 = (((cbMtdParam._m0[19u].z * _570.z) - _558) * _348) + _558;
    vec4 _604 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _629 = (_334.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _604.x) - _590) * _317) + _590);
    float _631 = (_334.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _604.y) - _591) * _317) + _591);
    float _633 = (_334.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _604.z) - _592) * _317) + _592);
    float _637 = cbMtdParam._m0[28u].x * TEXCOORD_8;
    float _646 = (_637 - (((texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _637))) * (cbMtdParam._m0[27u].w + 1.0);
    float _4261 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _647 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _654 = ((cbMtdParam._m0[21u].x - _629) * _647) + _629;
    float _655 = ((cbMtdParam._m0[21u].y - _631) * _647) + _631;
    float _656 = ((cbMtdParam._m0[21u].z - _633) * _647) + _633;
    vec4 _670 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24, SS_ClampLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.z) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.w) + cbTextureTilingScale._m0[11u].w));
    float _678 = (_670.x + (-1.0)) + (cbMtdParam._m0[28u].y * 2.0);
    float _4272 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _684 = exp2(log2(cbMtdParam._m0[28u].w * (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0)))) * cbMtdParam._m0[28u].z);
    float _4283 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _685 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _205[5];
    float _206[5];
    _205[0u] = cbMtdParam._m0[29u].z;
    _206[0u] = cbMtdParam._m0[29u].w;
    _205[1u] = cbMtdParam._m0[31u].z;
    _206[1u] = cbMtdParam._m0[31u].w;
    _205[2u] = cbMtdParam._m0[31u].x;
    _206[2u] = cbMtdParam._m0[31u].y;
    _205[3u] = cbMtdParam._m0[30u].z;
    _206[3u] = cbMtdParam._m0[30u].w;
    _205[4u] = cbMtdParam._m0[30u].x;
    _206[4u] = cbMtdParam._m0[30u].y;
    float _724 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    uint _726 = uint(int(isnan(4.0) ? _724 : (isnan(_724) ? 4.0 : min(_724, 4.0))));
    float _733 = ((_206[_726] - cbMtdParam._m0[22u].z) * _359) + cbMtdParam._m0[22u].z;
    float _736 = ((cbMtdParam._m0[22u].w - _733) * _523) + _733;
    float _739 = ((cbMtdParam._m0[25u].x - _736) * _348) + _736;
    float _742 = ((cbMtdParam._m0[26u].x - _739) * _317) + _739;
    float _744 = _742 - (_742 * _637);
    vec4 _760 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w, _395));
    vec4 _777 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _779 = _777.x;
    float _780 = _777.y;
    float _785 = cbMtdParam._m0[22u].x + _777.z;
    float _788 = (((_760.z + _205[_726]) - _785) * _359) + _785;
    vec4 _800 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _811 = (((_800.z - _788) + cbMtdParam._m0[29u].x) * _523) + _788;
    float _816 = ((((_302 * 2.0) * _811) - _811) * cbMtdParam._m0[24u].w) + _811;
    vec4 _828 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _839 = (((cbMtdParam._m0[23u].z + _828.z) - _816) * _348) + _816;
    vec4 _852 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _863 = (((_852.z - _839) + cbMtdParam._m0[26u].y) * _317) + _839;
    vec4 _878 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _892 = ((cbMtdParam._m0[27u].y * _637) * ((_878.z * cbMtdParam._m0[27u].x) - _863)) + _863;
    float _904 = ((_760.x - _779) * _359) + _779;
    float _905 = ((_760.y - _780) * _359) + _780;
    float _910 = ((_800.x - _904) * _523) + _904;
    float _911 = ((_800.y - _905) * _523) + _905;
    float _916 = ((_828.x - _910) * _348) + _910;
    float _917 = ((_828.y - _911) * _348) + _911;
    float _926 = ((((_852.x - _916) * _317) + _916) * 2.0) + (-1.0);
    float _927 = ((((_852.y - _917) * _317) + _917) * 2.0) + (-1.0);
    float _928 = dot(vec2(_926, _927), vec2(_926, _927));
    float _4304 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _933 = sqrt(1.0 - (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))));
    float _943 = ((cbMtdParam._m0[25u].y * ((_298.x * 2.0) + (-1.0))) + _926) + ((((_878.x * 2.0) + (-1.0)) * _637) * cbMtdParam._m0[26u].w);
    float _944 = ((cbMtdParam._m0[25u].y * ((_298.y * 2.0) + (-1.0))) + _927) + (((cbMtdParam._m0[28u].x * TEXCOORD_9) * ((_878.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _947 = fma(_933, _247 * NORMAL.x, fma(_944, _254 * TANGENT.x, (_240 * _232) * _943));
    float _950 = fma(_933, _247 * NORMAL.y, fma(_944, _254 * TANGENT.y, (_240 * _233) * _943));
    float _953 = fma(_933, _247 * NORMAL.z, fma(_944, _254 * TANGENT.z, (_240 * _234) * _943));
    float _957 = inversesqrt(dot(vec3(_947, _950, _953), vec3(_947, _950, _953)));
    float _958 = _957 * _947;
    float _959 = _957 * _950;
    float _960 = _957 * _953;
    float _4315 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _961 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _4326 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _962 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _4337 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _4348 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _4359 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _4370 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _966 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
    float _982 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1022 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1032 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1022);
    float _1033 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1022);
    float _1034 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1022);
    float _1038 = inversesqrt(dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034)));
    float _1039 = _1032 * _1038;
    float _1040 = _1033 * _1038;
    float _1041 = _1034 * _1038;
    vec4 _1046 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1048 = _1046.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1218 = sqrt(((_1032 * _1032) + (_1033 * _1033)) + (_1034 * _1034));
        float _1224 = (cbMatDynParam._m0[5u].x * _1218) + cbMatDynParam._m0[5u].y;
        float _4381 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _1229 = (cbMatDynParam._m0[5u].z * _1218) + cbMatDynParam._m0[5u].w;
        float _4392 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) - _1225)) + _1225) < ((_1048 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1059 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1060 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1078 = fma(_960, cbSceneParam._m0[5u].z, fma(_959, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _958));
    float _1081 = fma(_960, cbSceneParam._m0[6u].z, fma(_959, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _958));
    float _1084 = fma(_960, cbSceneParam._m0[7u].z, fma(_959, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _958));
    uint _1097 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1098 = _1097 + 9u;
    uint _1099 = _1098 + uint(cbMatDynParam._m0[0u].w);
    float _1105 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0)))) * cbInstanceData._m0[_1099].x;
    float _1106 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0)))) * cbInstanceData._m0[_1099].y;
    float _1107 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0)))) * cbInstanceData._m0[_1099].z;
    float _4403 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _1108 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
    float _4414 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
    float _1109 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
    float _4425 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _1110 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
    float _1111 = 1.0 - _966;
    float _1112 = _1108 * _1111;
    float _1113 = _1109 * _1111;
    float _1114 = _1110 * _1111;
    float _1119 = (_1108 + (-0.039999999105930328369140625)) * _966;
    float _1120 = (_1109 + (-0.039999999105930328369140625)) * _966;
    float _1121 = (_1110 + (-0.039999999105930328369140625)) * _966;
    float _1122 = _1119 + 0.039999999105930328369140625;
    float _1124 = _1120 + 0.039999999105930328369140625;
    float _1125 = _1121 + 0.039999999105930328369140625;
    vec4 _1134 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1059, cbSceneParam._m0[86u].y * _1060));
    float _1137 = _1134.x * TEXCOORD_5.w;
    float _1138 = dot(vec3(_958, _959, _960), vec3(_1039, _1040, _1041));
    float _1141 = _1138 * 2.0;
    float _1145 = (_1141 * _958) - _1039;
    float _1146 = (_1141 * _959) - _1040;
    float _1147 = (_1141 * _960) - _1041;
    float _1151 = abs(dot(vec3(_1039, _1040, _1041), vec3(_958, _959, _960)));
    float _4436 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
    float _1153 = sqrt(_962);
    float _1164 = exp2((_1153 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1153 * 3.0));
    float _1170 = (1.0 - _1164) * ((_1153 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1171 = _1164 * _1153;
    float _1199 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1203 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1207 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1536;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1261 = fma(_1207, cbModelParam._m0[26u].z, fma(_1203, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1199));
        float _1265 = fma(_1207, cbModelParam._m0[27u].z, fma(_1203, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1199));
        float _1269 = fma(_1207, cbModelParam._m0[28u].z, fma(_1203, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1199));
        float _1294 = _1199 + _958;
        float _1295 = _1203 + _959;
        float _1296 = _1207 + _960;
        float _1306 = fma(_1296, cbModelParam._m0[26u].z, fma(_1295, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1294)) - _1261;
        float _1307 = fma(_1296, cbModelParam._m0[27u].z, fma(_1295, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1294)) - _1265;
        float _1308 = fma(_1296, cbModelParam._m0[28u].z, fma(_1295, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1294)) - _1269;
        float _1312 = inversesqrt(dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308)));
        float _1325 = ((_1312 * _1306) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1261 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1326 = ((_1312 * _1307) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1265 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1327 = ((_1312 * _1308) / cbModelParam._m0[34u].z) + ((((((_1269 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1325, _1326, _1327), 0.0);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1325, _1326, _1327), 0.0);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1325, _1326, _1327), 0.0);
        vec4 _1351 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1325, _1326, _1327), 0.0);
        float _1364 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1365 = _1364 * (_1330.x + (-0.5));
        float _1366 = _1364 * (_1330.y + (-0.5));
        float _1367 = _1364 * (_1330.z + (-0.5));
        float _1374 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1375 = _1374 * (_1337.x + (-0.5));
        float _1376 = _1374 * (_1337.y + (-0.5));
        float _1377 = _1374 * (_1337.z + (-0.5));
        float _1384 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1385 = _1384 * (_1344.x + (-0.5));
        float _1386 = _1384 * (_1344.y + (-0.5));
        float _1387 = _1384 * (_1344.z + (-0.5));
        float _1394 = exp2((_1351.w + (-0.5)) * 20.0) * 2.0;
        float _1395 = _1394 * (_1351.x + (-0.5));
        float _1396 = _1394 * (_1351.y + (-0.5));
        float _1397 = _1394 * (_1351.z + (-0.5));
        float _1398 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1399 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1400 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1401 = _1365 * 0.5;
        float _1402 = _1375 * 0.5;
        float _1403 = _1385 * 0.5;
        float _1404 = dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403));
        float _1409 = (_1404 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1404);
        float _1418 = (dot(vec3(_958, _959, _960), vec3(_1409 * _1401, _1409 * _1402, _1409 * _1403)) + 1.0) * 0.5;
        float _4462 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1428 = sqrt(((_1402 * _1402) + (_1401 * _1401)) + (_1403 * _1403)) / (_1398 + 9.9999997473787516355514526367188e-06);
        float _4473 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _1430 = _1429 * 2.0;
        float _1434 = (1.0 - _1429) / (_1429 + 1.0);
        float _4484 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _1444 = ((((1.0 - _1435) * (_1430 + 2.0)) * exp2(log2(isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_1430 + 1.0))) + _1435) * _1398;
        float _1445 = _1366 * 0.5;
        float _1446 = _1376 * 0.5;
        float _1447 = _1386 * 0.5;
        float _1448 = dot(vec3(_1445, _1446, _1447), vec3(_1445, _1446, _1447));
        float _1453 = (_1448 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1448);
        float _1461 = (dot(vec3(_958, _959, _960), vec3(_1453 * _1445, _1453 * _1446, _1453 * _1447)) + 1.0) * 0.5;
        float _4495 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1470 = sqrt(((_1446 * _1446) + (_1445 * _1445)) + (_1447 * _1447)) / (_1399 + 9.9999997473787516355514526367188e-06);
        float _4506 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _1472 = _1471 * 2.0;
        float _1476 = (1.0 - _1471) / (_1471 + 1.0);
        float _4517 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _1486 = ((((1.0 - _1477) * (_1472 + 2.0)) * exp2(log2(isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_1472 + 1.0))) + _1477) * _1399;
        float _1487 = _1367 * 0.5;
        float _1488 = _1377 * 0.5;
        float _1489 = _1387 * 0.5;
        float _1490 = dot(vec3(_1487, _1488, _1489), vec3(_1487, _1488, _1489));
        float _1495 = (_1490 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1490);
        float _1503 = (dot(vec3(_958, _959, _960), vec3(_1495 * _1487, _1495 * _1488, _1495 * _1489)) + 1.0) * 0.5;
        float _4528 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1512 = sqrt(((_1488 * _1488) + (_1487 * _1487)) + (_1489 * _1489)) / (_1400 + 9.9999997473787516355514526367188e-06);
        float _4539 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _1514 = _1513 * 2.0;
        float _1518 = (1.0 - _1513) / (_1513 + 1.0);
        float _4550 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _1528 = ((((1.0 - _1519) * (_1514 + 2.0)) * exp2(log2(isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * (_1514 + 1.0))) + _1519) * _1400;
        _1536 = _1367;
        _1538 = _1366;
        _1539 = _1365;
        _1540 = _1377;
        _1541 = _1376;
        _1542 = _1375;
        _1543 = _1387;
        _1544 = _1386;
        _1545 = _1385;
        _1546 = _1400;
        _1547 = _1399;
        _1548 = _1398;
        _1549 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)));
        _1550 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)));
        _1551 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)));
    }
    else
    {
        _1536 = _1537;
        _1538 = _1537;
        _1539 = _1537;
        _1540 = _1537;
        _1541 = _1537;
        _1542 = _1537;
        _1543 = _1537;
        _1544 = _1537;
        _1545 = _1537;
        _1546 = _1537;
        _1547 = _1537;
        _1548 = _1537;
        _1549 = 0.0;
        _1550 = 0.0;
        _1551 = 0.0;
    }
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    float _1856;
    float _1857;
    float _1858;
    float _1859;
    float _1860;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1577 = fma(_1207, cbModelParam._m0[30u].z, fma(_1203, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1199));
        float _1581 = fma(_1207, cbModelParam._m0[31u].z, fma(_1203, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1199));
        float _1585 = fma(_1207, cbModelParam._m0[32u].z, fma(_1203, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1199));
        float _1608 = _1199 + _958;
        float _1609 = _1203 + _959;
        float _1610 = _1207 + _960;
        float _1620 = fma(_1610, cbModelParam._m0[30u].z, fma(_1609, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1608)) - _1577;
        float _1621 = fma(_1610, cbModelParam._m0[31u].z, fma(_1609, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1608)) - _1581;
        float _1622 = fma(_1610, cbModelParam._m0[32u].z, fma(_1609, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1608)) - _1585;
        float _1626 = inversesqrt(dot(vec3(_1620, _1621, _1622), vec3(_1620, _1621, _1622)));
        float _1639 = ((_1626 * _1620) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1577 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1640 = ((_1626 * _1621) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1581 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1641 = ((_1626 * _1622) / cbModelParam._m0[35u].z) + ((((((_1585 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1643 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1639, _1640, _1641), 0.0);
        vec4 _1650 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1639, _1640, _1641), 0.0);
        vec4 _1657 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1639, _1640, _1641), 0.0);
        vec4 _1664 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1639, _1640, _1641), 0.0);
        float _1676 = exp2((_1643.w + (-0.5)) * 20.0) * 2.0;
        float _1677 = _1676 * (_1643.x + (-0.5));
        float _1678 = _1676 * (_1643.y + (-0.5));
        float _1679 = _1676 * (_1643.z + (-0.5));
        float _1686 = exp2((_1650.w + (-0.5)) * 20.0) * 2.0;
        float _1687 = _1686 * (_1650.x + (-0.5));
        float _1688 = _1686 * (_1650.y + (-0.5));
        float _1689 = _1686 * (_1650.z + (-0.5));
        float _1696 = exp2((_1657.w + (-0.5)) * 20.0) * 2.0;
        float _1697 = _1696 * (_1657.x + (-0.5));
        float _1698 = _1696 * (_1657.y + (-0.5));
        float _1699 = _1696 * (_1657.z + (-0.5));
        float _1706 = exp2((_1664.w + (-0.5)) * 20.0) * 2.0;
        float _1707 = _1706 * (_1664.x + (-0.5));
        float _1708 = _1706 * (_1664.y + (-0.5));
        float _1709 = _1706 * (_1664.z + (-0.5));
        float _1710 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1711 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1712 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1713 = _1677 * 0.5;
        float _1714 = _1687 * 0.5;
        float _1715 = _1697 * 0.5;
        float _1716 = dot(vec3(_1713, _1714, _1715), vec3(_1713, _1714, _1715));
        float _1721 = (_1716 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1716);
        float _1729 = (dot(vec3(_958, _959, _960), vec3(_1721 * _1713, _1721 * _1714, _1721 * _1715)) + 1.0) * 0.5;
        float _4591 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1738 = sqrt(((_1714 * _1714) + (_1713 * _1713)) + (_1715 * _1715)) / (_1710 + 9.9999997473787516355514526367188e-06);
        float _4602 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1739 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
        float _1740 = _1739 * 2.0;
        float _1744 = (1.0 - _1739) / (_1739 + 1.0);
        float _4613 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1745 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
        float _1754 = ((((1.0 - _1745) * (_1740 + 2.0)) * exp2(log2(isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (_1740 + 1.0))) + _1745) * _1710;
        float _1755 = _1678 * 0.5;
        float _1756 = _1688 * 0.5;
        float _1757 = _1698 * 0.5;
        float _1758 = dot(vec3(_1755, _1756, _1757), vec3(_1755, _1756, _1757));
        float _1763 = (_1758 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1758);
        float _1771 = (dot(vec3(_958, _959, _960), vec3(_1763 * _1755, _1763 * _1756, _1763 * _1757)) + 1.0) * 0.5;
        float _4624 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1780 = sqrt(((_1756 * _1756) + (_1755 * _1755)) + (_1757 * _1757)) / (_1711 + 9.9999997473787516355514526367188e-06);
        float _4635 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1781 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _1782 = _1781 * 2.0;
        float _1786 = (1.0 - _1781) / (_1781 + 1.0);
        float _4646 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1787 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _1796 = ((((1.0 - _1787) * (_1782 + 2.0)) * exp2(log2(isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (_1782 + 1.0))) + _1787) * _1711;
        float _1797 = _1679 * 0.5;
        float _1798 = _1689 * 0.5;
        float _1799 = _1699 * 0.5;
        float _1800 = dot(vec3(_1797, _1798, _1799), vec3(_1797, _1798, _1799));
        float _1805 = (_1800 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1800);
        float _1813 = (dot(vec3(_958, _959, _960), vec3(_1805 * _1797, _1805 * _1798, _1805 * _1799)) + 1.0) * 0.5;
        float _4657 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1822 = sqrt(((_1798 * _1798) + (_1797 * _1797)) + (_1799 * _1799)) / (_1712 + 9.9999997473787516355514526367188e-06);
        float _4668 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1823 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
        float _1824 = _1823 * 2.0;
        float _1828 = (1.0 - _1823) / (_1823 + 1.0);
        float _4679 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
        float _1829 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
        float _1838 = ((((1.0 - _1829) * (_1824 + 2.0)) * exp2(log2(isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0))) * (_1824 + 1.0))) + _1829) * _1712;
        _1846 = _1679;
        _1847 = _1678;
        _1848 = _1677;
        _1849 = _1689;
        _1850 = _1688;
        _1851 = _1687;
        _1852 = _1699;
        _1853 = _1698;
        _1854 = _1697;
        _1855 = _1712;
        _1856 = _1711;
        _1857 = _1710;
        _1858 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)));
        _1859 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0)));
        _1860 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0)));
    }
    else
    {
        _1846 = _1537;
        _1847 = _1537;
        _1848 = _1537;
        _1849 = _1537;
        _1850 = _1537;
        _1851 = _1537;
        _1852 = _1537;
        _1853 = _1537;
        _1854 = _1537;
        _1855 = _1537;
        _1856 = _1537;
        _1857 = _1537;
        _1858 = 0.0;
        _1859 = 0.0;
        _1860 = 0.0;
    }
    float _1870 = (cbModelParam._m0[1u].x * (_1858 - _1549)) + _1549;
    float _1871 = (cbModelParam._m0[1u].x * (_1859 - _1550)) + _1550;
    float _1872 = (cbModelParam._m0[1u].x * (_1860 - _1551)) + _1551;
    float _1893 = fma(_1872, cbSceneParam._m0[89u].z, fma(_1871, cbSceneParam._m0[89u].y, _1870 * cbSceneParam._m0[89u].x));
    float _1896 = fma(_1872, cbSceneParam._m0[90u].z, fma(_1871, cbSceneParam._m0[90u].y, _1870 * cbSceneParam._m0[90u].x));
    float _1899 = fma(_1872, cbSceneParam._m0[91u].z, fma(_1871, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1870));
    float _1914 = _1145 * 0.5;
    float _1915 = _1146 * 0.5;
    float _1916 = _1147 * 0.5;
    float _1917 = dot(vec4(_1914, _1915, _1916, 1.0), vec4(_1848, _1851, _1854, _1857));
    float _1920 = dot(vec4(_1914, _1915, _1916, 1.0), vec4(_1847, _1850, _1853, _1856));
    float _1923 = dot(vec4(_1914, _1915, _1916, 1.0), vec4(_1846, _1849, _1852, _1855));
    float _1957;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1930 = dot(vec4(_1914, _1915, _1916, 1.0), vec4(_1536, _1540, _1543, _1546));
        float _1934 = dot(vec4(_1914, _1915, _1916, 1.0), vec4(_1538, _1541, _1544, _1547));
        float _1938 = dot(vec4(_1914, _1915, _1916, 1.0), vec4(_1539, _1542, _1545, _1548));
        float _1945 = dot(vec4(cbModelParam._m0[39u]), vec4(_1914, _1915, _1916, 1.0));
        _1957 = dot(vec3(isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0)), isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0)), isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1945) ? 0.0 : (isnan(0.0) ? _1945 : max(0.0, _1945))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1957 = 1.0;
    }
    float _1968;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1959 = dot(vec4(cbModelParam._m0[40u]), vec4(_1914, _1915, _1916, 1.0));
        _1968 = dot(vec3(isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0)), isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0)), isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1959) ? 0.0 : (isnan(0.0) ? _1959 : max(0.0, _1959))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1968 = 1.0;
    }
    float _1972 = (_1968 * cbModelParam._m0[1u].x) + (_1957 * (1.0 - cbModelParam._m0[1u].x));
    float _1982 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _962);
    float _1983 = isnan(_1982) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1982 : min(cbModelParam._m0[25u].z, _1982));
    float _2063;
    float _2065;
    float _2067;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2030 = fma(_1207, cbModelParam._m0[13u].z, fma(_1203, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1199)) + cbModelParam._m0[13u].w;
        float _2034 = fma(_1207, cbModelParam._m0[14u].z, fma(_1203, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1199)) + cbModelParam._m0[14u].w;
        float _2038 = fma(_1207, cbModelParam._m0[15u].z, fma(_1203, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1199)) + cbModelParam._m0[15u].w;
        float _2041 = fma(_1147, cbModelParam._m0[13u].z, fma(_1146, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1145));
        float _2044 = fma(_1147, cbModelParam._m0[14u].z, fma(_1146, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1145));
        float _2047 = fma(_1147, cbModelParam._m0[15u].z, fma(_1146, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1145));
        float _2075;
        if (_2041 > 0.0)
        {
            _2075 = abs((1.0 - _2030) / _2041);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2041 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2030 + 1.0) / _2041);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2075 = frontier_phi_17_15_ladder;
        }
        float _2246;
        if (_2044 > 0.0)
        {
            _2246 = abs((1.0 - _2034) / _2044);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2044 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2034 + 1.0) / _2044);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2246 = frontier_phi_26_22_ladder;
        }
        float _2541;
        if (_2047 > 0.0)
        {
            _2541 = abs((1.0 - _2038) / _2047);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2047 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2038 + 1.0) / _2047);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2541 = frontier_phi_38_33_ladder;
        }
        float _2543 = isnan(_2246) ? _2075 : (isnan(_2075) ? _2246 : min(_2075, _2246));
        float _2544 = isnan(_2541) ? _2543 : (isnan(_2543) ? _2541 : min(_2543, _2541));
        float _2548 = (_2544 * _2041) + _2030;
        float _2549 = (_2544 * _2044) + _2034;
        float _2550 = (_2544 * _2047) + _2038;
        float _2551 = _2544 * 9.9999997473787516355514526367188e-05;
        float _2553 = (-1.0) - _2551;
        float _2555 = _2551 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2550 > _2555) || ((_2550 < _2553) || ((_2549 > _2555) || ((_2549 < _2553) || ((_2548 < _2553) || (_2548 > _2555))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2695 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2550, cbModelParam._m0[9u].z, fma(_2549, cbModelParam._m0[9u].y, _2548 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2550, cbModelParam._m0[10u].z, fma(_2549, cbModelParam._m0[10u].y, _2548 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2550, cbModelParam._m0[11u].z, fma(_2549, cbModelParam._m0[11u].y, _2548 * cbModelParam._m0[11u].x))), _1983);
            frontier_phi_16_38_ladder = _2695.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2695.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2695.x * cbModelParam._m0[1u].y;
        }
        _2063 = frontier_phi_16_38_ladder_2;
        _2065 = frontier_phi_16_38_ladder_1;
        _2067 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2051 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1145, _1146, _1147), _1983);
        _2063 = _2051.x * cbModelParam._m0[1u].y;
        _2065 = _2051.y * cbModelParam._m0[1u].y;
        _2067 = _2051.z * cbModelParam._m0[1u].y;
    }
    float _2071 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _962);
    float _2072 = isnan(_2071) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2071 : min(cbModelParam._m0[25u].w, _2071));
    float _2161;
    float _2163;
    float _2165;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2125 = fma(_1207, cbModelParam._m0[21u].z, fma(_1203, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1199)) + cbModelParam._m0[21u].w;
        float _2129 = fma(_1207, cbModelParam._m0[22u].z, fma(_1203, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1199)) + cbModelParam._m0[22u].w;
        float _2133 = fma(_1207, cbModelParam._m0[23u].z, fma(_1203, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1199)) + cbModelParam._m0[23u].w;
        float _2136 = fma(_1147, cbModelParam._m0[21u].z, fma(_1146, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1145));
        float _2139 = fma(_1147, cbModelParam._m0[22u].z, fma(_1146, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1145));
        float _2142 = fma(_1147, cbModelParam._m0[23u].z, fma(_1146, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1145));
        float _2251;
        if (_2136 > 0.0)
        {
            _2251 = abs((1.0 - _2125) / _2136);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2136 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2125 + 1.0) / _2136);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2251 = frontier_phi_28_24_ladder;
        }
        float _2568;
        if (_2139 > 0.0)
        {
            _2568 = abs((1.0 - _2129) / _2139);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2139 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2129 + 1.0) / _2139);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2568 = frontier_phi_40_35_ladder;
        }
        float _2906;
        if (_2142 > 0.0)
        {
            _2906 = abs((1.0 - _2133) / _2142);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2142 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2133 + 1.0) / _2142);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2906 = frontier_phi_50_47_ladder;
        }
        float _2908 = isnan(_2568) ? _2251 : (isnan(_2251) ? _2568 : min(_2251, _2568));
        float _2909 = isnan(_2906) ? _2908 : (isnan(_2908) ? _2906 : min(_2908, _2906));
        float _2913 = (_2909 * _2136) + _2125;
        float _2914 = (_2909 * _2139) + _2129;
        float _2915 = (_2909 * _2142) + _2133;
        float _2916 = _2909 * 9.9999997473787516355514526367188e-05;
        float _2917 = (-1.0) - _2916;
        float _2919 = _2916 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2915 > _2919) || ((_2915 < _2917) || ((_2914 > _2919) || ((_2914 < _2917) || ((_2913 < _2917) || (_2913 > _2919))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3037 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2915, cbModelParam._m0[17u].z, fma(_2914, cbModelParam._m0[17u].y, _2913 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2915, cbModelParam._m0[18u].z, fma(_2914, cbModelParam._m0[18u].y, _2913 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2915, cbModelParam._m0[19u].z, fma(_2914, cbModelParam._m0[19u].y, _2913 * cbModelParam._m0[19u].x))), _2072);
            frontier_phi_25_50_ladder = _3037.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3037.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3037.x * cbModelParam._m0[1u].z;
        }
        _2161 = frontier_phi_25_50_ladder_2;
        _2163 = frontier_phi_25_50_ladder_1;
        _2165 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2145 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1145, _1146, _1147), _2072);
        _2161 = _2145.x * cbModelParam._m0[1u].z;
        _2163 = _2145.y * cbModelParam._m0[1u].z;
        _2165 = _2145.z * cbModelParam._m0[1u].z;
    }
    float _2178 = (((_1170 * _1122) + _1171) * _1137) * ((cbModelParam._m0[1u].w * (_2161 - _2063)) + _2063);
    float _2180 = (((_1170 * _1124) + _1171) * _1137) * ((cbModelParam._m0[1u].w * (_2163 - _2065)) + _2065);
    float _2182 = (((_1170 * _1125) + _1171) * _1137) * ((cbModelParam._m0[1u].w * (_2165 - _2067)) + _2067);
    float _2185 = fma(_2182, cbSceneParam._m0[89u].z, fma(_2180, cbSceneParam._m0[89u].y, _2178 * cbSceneParam._m0[89u].x));
    float _2188 = fma(_2182, cbSceneParam._m0[90u].z, fma(_2180, cbSceneParam._m0[90u].y, _2178 * cbSceneParam._m0[90u].x));
    float _2191 = fma(_2182, cbSceneParam._m0[91u].z, fma(_2180, cbSceneParam._m0[91u].y, _2178 * cbSceneParam._m0[91u].x));
    float _2225 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2229 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2233 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2237 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2238 = _2225 / _2237;
    float _2239 = _2229 / _2237;
    float _2240 = _2233 / _2237;
    float _2387;
    float _2388;
    float _2389;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2267 = ((uint(_2240 > cbSceneParam._m0[59u].y) + uint(_2240 > cbSceneParam._m0[59u].x)) + uint(_2240 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2268 = _2267 + 43u;
        uint _2276 = _2267 + 44u;
        uint _2284 = _2267 + 45u;
        uint _2292 = _2267 + 46u;
        float _2303 = fma(_2237, cbSceneParam._m0[_2268].w, fma(_2233, cbSceneParam._m0[_2268].z, fma(_2229, cbSceneParam._m0[_2268].y, _2225 * cbSceneParam._m0[_2268].x)));
        float _2307 = fma(_2237, cbSceneParam._m0[_2276].w, fma(_2233, cbSceneParam._m0[_2276].z, fma(_2229, cbSceneParam._m0[_2276].y, _2225 * cbSceneParam._m0[_2276].x)));
        float _2315 = fma(_2237, cbSceneParam._m0[_2292].w, fma(_2233, cbSceneParam._m0[_2292].z, fma(_2229, cbSceneParam._m0[_2292].y, _2225 * cbSceneParam._m0[_2292].x)));
        float _2320 = cbSceneParam._m0[33u].z * _2315;
        float _2322 = cbSceneParam._m0[33u].w * _2315;
        float _2325 = fma(_2237, cbSceneParam._m0[_2284].w, fma(_2233, cbSceneParam._m0[_2284].z, fma(_2229, cbSceneParam._m0[_2284].y, _2225 * cbSceneParam._m0[_2284].x))) / _2315;
        float _2373 = (cbSceneParam._m0[33u].x - sqrt(((_2239 * _2239) + (_2238 * _2238)) + (_2240 * _2240))) * cbSceneParam._m0[33u].y;
        float _4805 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2380 = (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2320 + _2303) / _2315, (_2322 + _2307) / _2315), _2325), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2322 + _2303) / _2315, (_2307 - _2320) / _2315), _2325), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2303 - _2320) / _2315, (_2307 - _2322) / _2315), _2325), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2303 - _2322) / _2315, (_2320 + _2307) / _2315), _2325), 0.0)).x), vec4(0.25)));
        _2387 = 1.0 - (_2380 * cbSceneParam._m0[34u].x);
        _2388 = 1.0 - (_2380 * cbSceneParam._m0[34u].y);
        _2389 = 1.0 - (_2380 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2387 = 1.0;
        _2388 = 1.0;
        _2389 = 1.0;
    }
    float _2453;
    float _2455;
    float _2457;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2441 = fma(_2237, cbSceneParam._m0[63u].w, fma(_2233, cbSceneParam._m0[63u].z, fma(_2229, cbSceneParam._m0[63u].y, _2225 * cbSceneParam._m0[63u].x)));
        float _2442 = fma(_2237, cbSceneParam._m0[60u].w, fma(_2233, cbSceneParam._m0[60u].z, fma(_2229, cbSceneParam._m0[60u].y, _2225 * cbSceneParam._m0[60u].x))) / _2441;
        float _2443 = fma(_2237, cbSceneParam._m0[61u].w, fma(_2233, cbSceneParam._m0[61u].z, fma(_2229, cbSceneParam._m0[61u].y, _2225 * cbSceneParam._m0[61u].x))) / _2441;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2442 >= cbSceneParam._m0[64u].x) && (_2443 >= cbSceneParam._m0[64u].y)) && (_2442 <= cbSceneParam._m0[64u].z)) && (_2443 <= cbSceneParam._m0[64u].w))
        {
            float _2581 = fma(_2237, cbSceneParam._m0[62u].w, fma(_2233, cbSceneParam._m0[62u].z, fma(_2229, cbSceneParam._m0[62u].y, _2225 * cbSceneParam._m0[62u].x))) / _2441;
            float _2585 = isnan(cbSceneParam._m0[41u].w) ? _2581 : (isnan(_2581) ? cbSceneParam._m0[41u].w : max(_2581, cbSceneParam._m0[41u].w));
            float _2628 = (cbSceneParam._m0[33u].x - sqrt(((_2239 * _2239) + (_2238 * _2238)) + (_2240 * _2240))) * cbSceneParam._m0[33u].y;
            float _4821 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
            float _2635 = (isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2442, cbSceneParam._m0[33u].w + _2443), _2585), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2442, _2443 - cbSceneParam._m0[33u].z), _2585), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2442 - cbSceneParam._m0[33u].z, _2443 - cbSceneParam._m0[33u].w), _2585), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2442 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2443), _2585), 0.0)).x), vec4(0.25)));
            float _2639 = 1.0 - (_2635 * cbSceneParam._m0[34u].x);
            float _2640 = 1.0 - (_2635 * cbSceneParam._m0[34u].y);
            float _2641 = 1.0 - (_2635 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2641) ? _2389 : (isnan(_2389) ? _2641 : min(_2389, _2641));
            frontier_phi_37_36_ladder_1 = isnan(_2640) ? _2388 : (isnan(_2388) ? _2640 : min(_2388, _2640));
            frontier_phi_37_36_ladder_2 = isnan(_2639) ? _2387 : (isnan(_2387) ? _2639 : min(_2387, _2639));
        }
        else
        {
            frontier_phi_37_36_ladder = _2389;
            frontier_phi_37_36_ladder_1 = _2388;
            frontier_phi_37_36_ladder_2 = _2387;
        }
        _2453 = frontier_phi_37_36_ladder_2;
        _2455 = frontier_phi_37_36_ladder_1;
        _2457 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2453 = _2387;
        _2455 = _2388;
        _2457 = _2389;
    }
    uvec4 _2462 = floatBitsToUint(cbInstanceData._m0[_1097 + 5u]);
    uint _2464 = _2462.x * 14u;
    uint _2465 = _2464 + 13u;
    float _2472 = _1137 + (-1.0);
    float _2477 = (cbLight._m0[_2465].x * _2472) + 1.0;
    float _2478 = (cbLight._m0[_2465].y * _2472) + 1.0;
    float _2479 = (cbLight._m0[_2465].z * _2472) + 1.0;
    float _2480 = (cbLight._m0[_2465].w * _2472) + 1.0;
    uint _2481 = _2464 + 5u;
    float _2487 = isnan(1.0) ? _2478 : (isnan(_2478) ? 1.0 : min(_2478, 1.0));
    uint _2491 = _2464 + 4u;
    float _2500 = isnan(1.0) ? _2477 : (isnan(_2477) ? 1.0 : min(_2477, 1.0));
    uint _2504 = _2464 | 1u;
    float _2515 = dot(vec3(cbLight._m0[_2464].xyz), vec3(_958, _959, _960));
    float _2518 = dot(vec3(cbLight._m0[_2504].xyz), vec3(_958, _959, _960));
    float _4857 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
    float _4868 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
    float _2523 = (isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0))) * 0.3183098733425140380859375;
    float _2525 = (isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0))) * 0.3183098733425140380859375;
    float _2532 = ((cbLight._m0[_2481].x * _2487) * _2525) + (((cbLight._m0[_2491].x * _2453) * _2500) * _2523);
    float _2533 = ((_2487 * cbLight._m0[_2481].y) * _2525) + (((cbLight._m0[_2491].y * _2455) * _2500) * _2523);
    float _2534 = ((_2487 * cbLight._m0[_2481].z) * _2525) + (((cbLight._m0[_2491].z * _2457) * _2500) * _2523);
    uvec4 _2538 = floatBitsToUint(cbLight._m0[_2464 + 12u]);
    bool _2540 = _2538.x == 0u;
    float _2642;
    float _2644;
    float _2646;
    if (_2540)
    {
        _2642 = _2532;
        _2644 = _2533;
        _2646 = _2534;
    }
    else
    {
        uint _2650 = _2464 + 6u;
        float _2666 = (dot(vec3(cbLight._m0[_2464 + 2u].xyz), vec3(_958, _959, _960)) * 0.5) + 0.5;
        float _2667 = _2666 * _2666;
        float _4879 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2668 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
        float _2669 = isnan(1.0) ? _2479 : (isnan(_2479) ? 1.0 : min(_2479, 1.0));
        _2642 = (((cbLight._m0[_2650].x * 0.3183098733425140380859375) * _2668) * _2669) + _2532;
        _2644 = (((cbLight._m0[_2650].y * 0.3183098733425140380859375) * _2668) * _2669) + _2533;
        _2646 = (((cbLight._m0[_2650].z * 0.3183098733425140380859375) * _2668) * _2669) + _2534;
    }
    bool _2649 = _2538.y == 0u;
    float _2704;
    float _2706;
    float _2708;
    if (_2649)
    {
        _2704 = _2642;
        _2706 = _2644;
        _2708 = _2646;
    }
    else
    {
        uint _2877 = _2464 + 7u;
        float _2893 = (dot(vec3(cbLight._m0[_2464 + 3u].xyz), vec3(_958, _959, _960)) * 0.5) + 0.5;
        float _2894 = _2893 * _2893;
        float _4895 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
        float _2895 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
        float _2896 = isnan(1.0) ? _2480 : (isnan(_2480) ? 1.0 : min(_2480, 1.0));
        _2704 = (((cbLight._m0[_2877].x * 0.3183098733425140380859375) * _2895) * _2896) + _2642;
        _2706 = (((cbLight._m0[_2877].y * 0.3183098733425140380859375) * _2895) * _2896) + _2644;
        _2708 = (((cbLight._m0[_2877].z * 0.3183098733425140380859375) * _2895) * _2896) + _2646;
    }
    uint _2711 = _2464 + 8u;
    float _2724 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2464].w)) * _962) * 0.949999988079071044921875);
    float _2725 = _2724 * _2724;
    float _2726 = cbLight._m0[_2464].x + _1039;
    float _2727 = cbLight._m0[_2464].y + _1040;
    float _2728 = cbLight._m0[_2464].z + _1041;
    float _2732 = inversesqrt(dot(vec3(_2726, _2727, _2728), vec3(_2726, _2727, _2728)));
    float _2733 = _2732 * _2726;
    float _2734 = _2732 * _2727;
    float _2735 = _2732 * _2728;
    float _2736 = dot(vec3(_958, _959, _960), vec3(cbLight._m0[_2464].xyz));
    float _4911 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
    float _2739 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
    float _4922 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
    float _2740 = isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0));
    float _2741 = dot(vec3(_958, _959, _960), vec3(_2733, _2734, _2735));
    float _4933 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
    float _2744 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
    float _2745 = dot(vec3(cbLight._m0[_2464].xyz), vec3(_2733, _2734, _2735));
    float _4944 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
    float _2749 = _2725 * _2725;
    float _2753 = ((_2744 * _2744) * (_2749 + (-1.0))) + 1.0;
    float _2761 = exp2(log2(1.0 - (isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0)))) * 5.0);
    float _2762 = 0.959999978542327880859375 - _1119;
    float _2764 = 0.959999978542327880859375 - _1120;
    float _2765 = 0.959999978542327880859375 - _1121;
    float _2772 = 1.0 - _2725;
    float _2783 = (0.5 / (((_2740 * ((_2739 * _2772) + _2725)) + 9.9999999392252902907785028219223e-09) + (((_2740 * _2772) + _2725) * _2739))) * _2739;
    float _4955 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
    float _2785 = (isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0))) * (_2749 / ((_2753 * _2753) * 3.141590118408203125));
    uint _2799 = _2464 + 9u;
    float _2810 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2504].w)) * _962) * 0.949999988079071044921875);
    float _2811 = _2810 * _2810;
    float _2812 = cbLight._m0[_2504].x + _1039;
    float _2813 = cbLight._m0[_2504].y + _1040;
    float _2814 = cbLight._m0[_2504].z + _1041;
    float _2818 = inversesqrt(dot(vec3(_2812, _2813, _2814), vec3(_2812, _2813, _2814)));
    float _2819 = _2818 * _2812;
    float _2820 = _2818 * _2813;
    float _2821 = _2818 * _2814;
    float _2822 = dot(vec3(_958, _959, _960), vec3(cbLight._m0[_2504].xyz));
    float _4966 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
    float _2825 = isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0));
    float _2826 = dot(vec3(_958, _959, _960), vec3(_2819, _2820, _2821));
    float _4977 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
    float _2829 = isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0));
    float _2830 = dot(vec3(cbLight._m0[_2504].xyz), vec3(_2819, _2820, _2821));
    float _4988 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
    float _2834 = _2811 * _2811;
    float _2838 = ((_2829 * _2829) * (_2834 + (-1.0))) + 1.0;
    float _2845 = exp2(log2(1.0 - (isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0)))) * 5.0);
    float _2852 = 1.0 - _2811;
    float _2862 = (0.5 / (((_2740 * ((_2825 * _2852) + _2811)) + 9.9999999392252902907785028219223e-09) + (((_2740 * _2852) + _2811) * _2825))) * _2825;
    float _4999 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
    float _2864 = (isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0))) * (_2834 / ((_2838 * _2838) * 3.141590118408203125));
    float _2874 = (((((_2845 * _2762) + _1122) * cbLight._m0[_2799].x) * _2864) * _2487) + ((((cbLight._m0[_2711].x * _2453) * ((_2761 * _2762) + _1122)) * _2785) * _2500);
    float _2875 = (((((_2845 * _2764) + _1124) * cbLight._m0[_2799].y) * _2864) * _2487) + ((((cbLight._m0[_2711].y * _2455) * ((_2761 * _2764) + _1124)) * _2785) * _2500);
    float _2876 = (((((_2845 * _2765) + _1125) * cbLight._m0[_2799].z) * _2864) * _2487) + ((((cbLight._m0[_2711].z * _2457) * ((_2761 * _2765) + _1125)) * _2785) * _2500);
    float _2932;
    float _2934;
    float _2936;
    if (_2540)
    {
        _2932 = _2874;
        _2934 = _2875;
        _2936 = _2876;
    }
    else
    {
        uint _2938 = _2464 + 2u;
        uint _2942 = _2464 + 10u;
        float _2956 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2938].w)) * _962) * 0.949999988079071044921875);
        float _2957 = _2956 * _2956;
        float _2958 = cbLight._m0[_2938].x + _1039;
        float _2959 = cbLight._m0[_2938].y + _1040;
        float _2960 = cbLight._m0[_2938].z + _1041;
        float _2964 = inversesqrt(dot(vec3(_2958, _2959, _2960), vec3(_2958, _2959, _2960)));
        float _2965 = _2964 * _2958;
        float _2966 = _2964 * _2959;
        float _2967 = _2964 * _2960;
        float _2968 = dot(vec3(_958, _959, _960), vec3(cbLight._m0[_2938].xyz));
        float _5010 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
        float _2971 = isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0));
        float _2972 = dot(vec3(_958, _959, _960), vec3(_2965, _2966, _2967));
        float _5021 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
        float _2975 = isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0));
        float _2976 = dot(vec3(cbLight._m0[_2938].xyz), vec3(_2965, _2966, _2967));
        float _5032 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
        float _2980 = _2957 * _2957;
        float _2984 = ((_2975 * _2975) * (_2980 + (-1.0))) + 1.0;
        float _2991 = exp2(log2(1.0 - (isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0)))) * 5.0);
        float _2998 = 1.0 - _2957;
        float _3008 = (0.5 / (((_2740 * ((_2971 * _2998) + _2957)) + 9.9999999392252902907785028219223e-09) + (((_2740 * _2998) + _2957) * _2971))) * _2971;
        float _5043 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
        float _3010 = (isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0))) * (_2980 / ((_2984 * _2984) * 3.141590118408203125));
        float _3011 = isnan(1.0) ? _2479 : (isnan(_2479) ? 1.0 : min(_2479, 1.0));
        _2932 = (((((_2991 * _2762) + _1122) * cbLight._m0[_2942].x) * _3010) * _3011) + _2874;
        _2934 = (((((_2991 * _2764) + _1124) * cbLight._m0[_2942].y) * _3010) * _3011) + _2875;
        _2936 = (((((_2991 * _2765) + _1125) * cbLight._m0[_2942].z) * _3010) * _3011) + _2876;
    }
    float _3042;
    float _3044;
    float _3046;
    if (_2649)
    {
        _3042 = _2932;
        _3044 = _2934;
        _3046 = _2936;
    }
    else
    {
        uint _3053 = _2464 + 3u;
        uint _3057 = _2464 + 11u;
        float _3071 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3053].w)) * _962) * 0.949999988079071044921875);
        float _3072 = _3071 * _3071;
        float _3073 = cbLight._m0[_3053].x + _1039;
        float _3074 = cbLight._m0[_3053].y + _1040;
        float _3075 = cbLight._m0[_3053].z + _1041;
        float _3079 = inversesqrt(dot(vec3(_3073, _3074, _3075), vec3(_3073, _3074, _3075)));
        float _3080 = _3079 * _3073;
        float _3081 = _3079 * _3074;
        float _3082 = _3079 * _3075;
        float _3083 = dot(vec3(_958, _959, _960), vec3(cbLight._m0[_3053].xyz));
        float _5059 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
        float _3086 = isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0));
        float _3087 = dot(vec3(_958, _959, _960), vec3(_3080, _3081, _3082));
        float _5070 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
        float _3090 = isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0));
        float _3091 = dot(vec3(cbLight._m0[_3053].xyz), vec3(_3080, _3081, _3082));
        float _5081 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
        float _3095 = _3072 * _3072;
        float _3099 = ((_3090 * _3090) * (_3095 + (-1.0))) + 1.0;
        float _3106 = exp2(log2(1.0 - (isnan(1.0) ? _5081 : (isnan(_5081) ? 1.0 : min(_5081, 1.0)))) * 5.0);
        float _3113 = 1.0 - _3072;
        float _3123 = (0.5 / (((_2740 * ((_3086 * _3113) + _3072)) + 9.9999999392252902907785028219223e-09) + (((_2740 * _3113) + _3072) * _3086))) * _3086;
        float _5092 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
        float _3125 = (isnan(1.0) ? _5092 : (isnan(_5092) ? 1.0 : min(_5092, 1.0))) * (_3095 / ((_3099 * _3099) * 3.141590118408203125));
        float _3126 = isnan(1.0) ? _2480 : (isnan(_2480) ? 1.0 : min(_2480, 1.0));
        _3042 = (((((_3106 * _2762) + _1122) * cbLight._m0[_3057].x) * _3125) * _3126) + _2932;
        _3044 = (((((_3106 * _2764) + _1124) * cbLight._m0[_3057].y) * _3125) * _3126) + _2934;
        _3046 = (((((_3106 * _2765) + _1125) * cbLight._m0[_3057].z) * _3125) * _3126) + _2936;
    }
    float _3192;
    float _3194;
    float _3196;
    float _3198;
    float _3200;
    float _3202;
    if (_2462.y == 0u)
    {
        uvec4 _3147 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3148 = _3147.x;
        uint _3159 = uint((float(_3147.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1060) / _3148))) + floor(float(uint(cbSceneParam._m0[85u].x * _1059) / _3148)));
        float _3169 = (log2(_2240 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3170 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
        uint _3173 = uint(isnan(14.0) ? _3170 : (isnan(_3170) ? 14.0 : min(_3170, 14.0)));
        uvec4 _3178 = texelFetch(g_lightClusterGridBuffer, int(((_3173 << 2u) + (_3159 << 6u)) >> 2u));
        uint _3179 = _3178.x;
        uint _3180 = _3147.z;
        float _3261;
        float _3263;
        float _3265;
        float _3267;
        float _3269;
        float _3271;
        if (((((1u << ((_3180 >> 4u) & 15u)) + 4294967295u) & _3179) == 0u) || ((_3180 & 240u) == 0u))
        {
            _3261 = 0.0;
            _3263 = 0.0;
            _3265 = 0.0;
            _3267 = 0.0;
            _3269 = 0.0;
            _3271 = 0.0;
        }
        else
        {
            float _3262;
            float _3264;
            float _3266;
            float _3268;
            float _3270;
            float _3272;
            float _3414 = 0.0;
            float _3415 = 0.0;
            float _3416 = 0.0;
            float _3417 = 0.0;
            float _3418 = 0.0;
            float _3419 = 0.0;
            uint _3420 = 0u;
            uint _3429;
            bool _3430;
            for (;;)
            {
                _3429 = texelFetch(g_lightClassification, int((((_3173 << 5u) + (_3159 << 9u)) + (_3420 << 2u)) >> 2u)).x;
                _3430 = _3429 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3430)
                {
                    frontier_phi_71_pred = _3419;
                    frontier_phi_71_pred_1 = _3418;
                    frontier_phi_71_pred_2 = _3417;
                    frontier_phi_71_pred_3 = _3416;
                    frontier_phi_71_pred_4 = _3415;
                    frontier_phi_71_pred_5 = _3414;
                }
                else
                {
                    float _3559;
                    float _3560;
                    float _3561;
                    float _3562;
                    float _3563;
                    float _3564;
                    uint _3565;
                    _3559 = _3414;
                    _3560 = _3415;
                    _3561 = _3416;
                    _3562 = _3417;
                    _3563 = _3418;
                    _3564 = _3419;
                    _3565 = _3429;
                    float _3486;
                    float _3487;
                    float _3488;
                    float _3489;
                    float _3490;
                    float _3491;
                    for (;;)
                    {
                        uint _3569 = uint(findLSB(_3565)) + (_3420 << 5u);
                        uint _3566 = (_3565 + 4294967295u) & _3565;
                        uint _3571 = _3569 * 48u;
                        vec4 _3585 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3571)).x, texelFetch(g_PointLightRenderingBuffer, int(_3571 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3571 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3571 + 3u)).x));
                        uint _3591 = (_3569 * 48u) + 4u;
                        vec4 _3604 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3591)).x, texelFetch(g_PointLightRenderingBuffer, int(_3591 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3591 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3591 + 3u)).x));
                        uint _3610 = (_3569 * 48u) + 8u;
                        vec3 _3621 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3610)).x, texelFetch(g_PointLightRenderingBuffer, int(_3610 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3610 + 2u)).x));
                        float _3625 = _3585.x - _2238;
                        float _3626 = _3585.y - _2239;
                        float _3627 = _3585.z - _2240;
                        float _3628 = dot(vec3(_3625, _3626, _3627), vec3(_3625, _3626, _3627));
                        float _3631 = inversesqrt(_3628);
                        float _3632 = _3631 * _3625;
                        float _3633 = _3631 * _3626;
                        float _3634 = _3631 * _3627;
                        float _3635 = dot(vec3(_1078, _1081, _1084), vec3(_3632, _3633, _3634));
                        float _3640 = 1.0 - (_3628 * _3585.w);
                        float _5118 = isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0));
                        float _3641 = isnan(1.0) ? _5118 : (isnan(_5118) ? 1.0 : min(_5118, 1.0));
                        float _3642 = sqrt(_3628) * _3604.w;
                        float _3645 = 1.39999997615814208984375 / (_3642 + 1.39999997615814208984375);
                        float _3646 = _3645 * _3645;
                        float _3649 = ((1.0 - _3646) * _3635) + _3646;
                        float _3652 = _3642 * _3642;
                        float _3656 = ((isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0))) * _3641) / ((_3652 * 0.699999988079071044921875) + 1.0);
                        float _3660 = (-0.0) - _2238;
                        float _3661 = (-0.0) - _2239;
                        float _3662 = (-0.0) - _2240;
                        float _3666 = inversesqrt(dot(vec3(_3660, _3661, _3662), vec3(_3660, _3661, _3662)));
                        float _3667 = _3666 * _3660;
                        float _3668 = _3666 * _3661;
                        float _3669 = _3666 * _3662;
                        float _3676 = exp2(log2(1.0 / ((_3652 * 3.5) + 5.0)) * 0.25);
                        float _3677 = 1.0 - _1153;
                        float _3684 = sqrt(1.0 - ((1.0 - (_3677 * _3677)) * (1.0 - (_3676 * _3676))));
                        float _3685 = _3684 * _3684;
                        float _3686 = _3685 * _3685;
                        float _3687 = _3667 + _3632;
                        float _3688 = _3668 + _3633;
                        float _3689 = _3669 + _3634;
                        float _3693 = inversesqrt(dot(vec3(_3687, _3688, _3689), vec3(_3687, _3688, _3689)));
                        float _3697 = dot(vec3(_1078, _1081, _1084), vec3(_3667, _3668, _3669));
                        float _5134 = isnan(0.0) ? _3697 : (isnan(_3697) ? 0.0 : max(_3697, 0.0));
                        float _3700 = isnan(1.0) ? _5134 : (isnan(_5134) ? 1.0 : min(_5134, 1.0));
                        float _3701 = dot(vec3(_1078, _1081, _1084), vec3(_3693 * _3687, _3693 * _3688, _3693 * _3689));
                        float _5145 = isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0));
                        float _3704 = isnan(1.0) ? _5145 : (isnan(_5145) ? 1.0 : min(_5145, 1.0));
                        float _3708 = ((_3704 * _3704) * (_3686 + (-1.0))) + 1.0;
                        float _3709 = _3645 * _3685;
                        float _3710 = _3709 * _3709;
                        float _3713 = ((1.0 - _3710) * _3635) + _3710;
                        float _5156 = isnan(0.0) ? _3713 : (isnan(_3713) ? 0.0 : max(_3713, 0.0));
                        float _3714 = isnan(1.0) ? _5156 : (isnan(_5156) ? 1.0 : min(_5156, 1.0));
                        float _3715 = 1.0 - _3685;
                        float _3725 = (0.5 / (((_3714 * ((_3700 * _3715) + _3685)) + 9.9999999392252902907785028219223e-09) + (((_3714 * _3715) + _3685) * _3700))) * _3714;
                        float _5167 = isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0));
                        float _3736 = (((_3686 * 3.1415927410125732421875) * (isnan(1.0) ? _5167 : (isnan(_5167) ? 1.0 : min(_5167, 1.0)))) / ((_3708 * _3708) * ((_3652 * 2.1991131305694580078125) + 3.141590118408203125))) * _3641;
                        _3489 = (_3656 * _3604.x) + _3562;
                        _3490 = (_3656 * _3604.y) + _3563;
                        _3491 = (_3656 * _3604.z) + _3564;
                        _3486 = (_3736 * _3621.x) + _3559;
                        _3487 = (_3736 * _3621.y) + _3560;
                        _3488 = (_3736 * _3621.z) + _3561;
                        if (_3566 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3559 = _3486;
                            _3560 = _3487;
                            _3561 = _3488;
                            _3562 = _3489;
                            _3563 = _3490;
                            _3564 = _3491;
                            _3565 = _3566;
                        }
                    }
                    frontier_phi_71_pred = _3491;
                    frontier_phi_71_pred_1 = _3490;
                    frontier_phi_71_pred_2 = _3489;
                    frontier_phi_71_pred_3 = _3488;
                    frontier_phi_71_pred_4 = _3487;
                    frontier_phi_71_pred_5 = _3486;
                }
                _3272 = frontier_phi_71_pred;
                _3270 = frontier_phi_71_pred_1;
                _3268 = frontier_phi_71_pred_2;
                _3266 = frontier_phi_71_pred_3;
                _3264 = frontier_phi_71_pred_4;
                _3262 = frontier_phi_71_pred_5;
                uint _3421 = _3420 + 1u;
                if (_3421 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3414 = _3262;
                    _3415 = _3264;
                    _3416 = _3266;
                    _3417 = _3268;
                    _3418 = _3270;
                    _3419 = _3272;
                    _3420 = _3421;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3261 = _3262;
            _3263 = _3264;
            _3265 = _3266;
            _3267 = _3268;
            _3269 = _3270;
            _3271 = _3272;
        }
        uvec4 _3275 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3276 = _3275.z;
        uint _3278 = (_3276 >> 8u) & 15u;
        float _3382;
        float _3384;
        float _3386;
        float _3388;
        float _3390;
        float _3392;
        if (((4294967295u << _3278) & _3179) == 0u)
        {
            _3382 = _3261;
            _3384 = _3263;
            _3386 = _3265;
            _3388 = _3267;
            _3390 = _3269;
            _3392 = _3271;
        }
        else
        {
            float _3407 = inversesqrt(dot(vec3(_2238, _2239, _2240), vec3(_2238, _2239, _2240)));
            float _3408 = _3407 * _2238;
            float _3409 = _3407 * _2239;
            float _3410 = _3407 * _2240;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3278 < ((_3276 >> 12u) & 15u))
            {
                float _3383;
                float _3385;
                float _3387;
                float _3389;
                float _3391;
                float _3393;
                float _3542 = _3261;
                float _3543 = _3263;
                float _3544 = _3265;
                float _3545 = _3267;
                float _3546 = _3269;
                float _3547 = _3271;
                uint _3548 = _3278;
                uint _3557;
                bool _3558;
                for (;;)
                {
                    _3557 = texelFetch(g_lightClassification, int((((_3173 << 5u) + (_3159 << 9u)) + (_3548 << 2u)) >> 2u)).x;
                    _3558 = _3557 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3558)
                    {
                        frontier_phi_82_pred = _3547;
                        frontier_phi_82_pred_1 = _3546;
                        frontier_phi_82_pred_2 = _3545;
                        frontier_phi_82_pred_3 = _3544;
                        frontier_phi_82_pred_4 = _3543;
                        frontier_phi_82_pred_5 = _3542;
                    }
                    else
                    {
                        float _3750;
                        float _3751;
                        float _3752;
                        float _3753;
                        float _3754;
                        float _3755;
                        float _4043;
                        float _4044;
                        float _4045;
                        float _4046;
                        float _4047;
                        float _4048;
                        float _3763 = _3542;
                        float _3764 = _3543;
                        float _3765 = _3544;
                        float _3766 = _3545;
                        float _3767 = _3546;
                        float _3768 = _3547;
                        uint _3769 = _3557;
                        uint _3770;
                        vec4 _3795;
                        float _3796;
                        vec4 _3811;
                        vec3 _3823;
                        vec4 _3838;
                        vec4 _3853;
                        float _3899;
                        bool _3900;
                        for (;;)
                        {
                            uint _3780 = ((_3548 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3769));
                            _3770 = (_3769 + 4294967295u) & _3769;
                            uint _3782 = _3780 * 40u;
                            _3795 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3782)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3782 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3782 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3782 + 3u)).x));
                            _3796 = _3795.w;
                            uint _3798 = (_3780 * 40u) + 4u;
                            _3811 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3798)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 3u)).x));
                            uint _3813 = (_3780 * 40u) + 8u;
                            _3823 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3813)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3813 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3813 + 2u)).x));
                            uint _3825 = (_3780 * 40u) + 16u;
                            _3838 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3825)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3825 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3825 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3825 + 3u)).x));
                            uint _3840 = (_3780 * 40u) + 20u;
                            _3853 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3840)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3840 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3840 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3840 + 3u)).x));
                            uint _3855 = (_3780 * 40u) + 24u;
                            vec4 _3868 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3855)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3855 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3855 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3855 + 3u)).x));
                            uint _3874 = (_3780 * 40u) + 28u;
                            vec4 _3887 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3874)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3874 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3874 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3874 + 3u)).x));
                            _3899 = fma(_2240, _3887.z, fma(_2239, _3887.y, _3887.x * _2238)) + _3887.w;
                            _3900 = !((fma(_2240, _3868.z, fma(_2239, _3868.y, _3868.x * _2238)) + _3868.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3900)
                            {
                                float _3927 = _3795.x - _2238;
                                float _3928 = _3795.y - _2239;
                                float _3929 = _3795.z - _2240;
                                float _3930 = dot(vec3(_3927, _3928, _3929), vec3(_3927, _3928, _3929));
                                float _3933 = inversesqrt(_3930);
                                float _3934 = _3933 * _3927;
                                float _3935 = _3933 * _3928;
                                float _3936 = _3933 * _3929;
                                float _3940 = 1.0 - (_3930 / (_3796 * _3796));
                                float _5178 = isnan(0.0) ? _3940 : (isnan(_3940) ? 0.0 : max(_3940, 0.0));
                                float _3941 = isnan(1.0) ? _5178 : (isnan(_5178) ? 1.0 : min(_5178, 1.0));
                                float _3945 = sqrt(_3930) * _3811.w;
                                float _3947 = 1.39999997615814208984375 / (_3945 + 1.39999997615814208984375);
                                float _3948 = _3947 * _3947;
                                float _3951 = ((1.0 - _3948) * dot(vec3(_3934, _3935, _3936), vec3(_1078, _1081, _1084))) + _3948;
                                float _3954 = _3945 * _3945;
                                float _3958 = (fma(_2240, _3838.z, fma(_2239, _3838.y, _3838.x * _2238)) + _3838.w) / _3899;
                                float _3959 = (fma(_2240, _3853.z, fma(_2239, _3853.y, _3853.x * _2238)) + _3853.w) / _3899;
                                float _3963 = 1.0 - dot(vec2(_3958, _3959), vec2(_3958, _3959));
                                float _5194 = isnan(0.0) ? _3963 : (isnan(_3963) ? 0.0 : max(_3963, 0.0));
                                float _3964 = isnan(1.0) ? _5194 : (isnan(_5194) ? 1.0 : min(_5194, 1.0));
                                float _3965 = _3964 * (((isnan(0.0) ? _3951 : (isnan(_3951) ? 0.0 : max(_3951, 0.0))) * _3941) / ((_3954 * 0.699999988079071044921875) + 1.0));
                                float _3977 = exp2(log2(1.0 / ((_3954 * 3.5) + 5.0)) * 0.25);
                                float _3978 = 1.0 - _1153;
                                float _3985 = sqrt(1.0 - ((1.0 - (_3978 * _3978)) * (1.0 - (_3977 * _3977))));
                                float _3986 = _3985 * _3985;
                                float _3987 = _3986 * _3986;
                                float _3988 = _3934 - _3408;
                                float _3989 = _3935 - _3409;
                                float _3990 = _3936 - _3410;
                                float _3994 = inversesqrt(dot(vec3(_3988, _3989, _3990), vec3(_3988, _3989, _3990)));
                                float _3998 = dot(vec3(_1078, _1081, _1084), vec3((-0.0) - _3408, (-0.0) - _3409, (-0.0) - _3410));
                                float _5205 = isnan(0.0) ? _3998 : (isnan(_3998) ? 0.0 : max(_3998, 0.0));
                                float _4001 = isnan(1.0) ? _5205 : (isnan(_5205) ? 1.0 : min(_5205, 1.0));
                                float _4002 = dot(vec3(_1078, _1081, _1084), vec3(_3994 * _3988, _3994 * _3989, _3994 * _3990));
                                float _5216 = isnan(0.0) ? _4002 : (isnan(_4002) ? 0.0 : max(_4002, 0.0));
                                float _4005 = isnan(1.0) ? _5216 : (isnan(_5216) ? 1.0 : min(_5216, 1.0));
                                float _4009 = ((_4005 * _4005) * (_3987 + (-1.0))) + 1.0;
                                float _4010 = _3947 * _3986;
                                float _4011 = _4010 * _4010;
                                float _4017 = ((1.0 - _4011) * dot(vec3(_1078, _1081, _1084), vec3(_3934, _3935, _3936))) + _4011;
                                float _5227 = isnan(0.0) ? _4017 : (isnan(_4017) ? 0.0 : max(_4017, 0.0));
                                float _4018 = isnan(1.0) ? _5227 : (isnan(_5227) ? 1.0 : min(_5227, 1.0));
                                float _4019 = 1.0 - _3986;
                                float _4029 = (0.5 / (((_4018 * ((_4001 * _4019) + _3986)) + 9.9999999392252902907785028219223e-09) + (((_4018 * _4019) + _3986) * _4001))) * _4018;
                                float _5238 = isnan(0.0) ? _4029 : (isnan(_4029) ? 0.0 : max(_4029, 0.0));
                                float _4039 = (_3964 * _3941) * (((_3987 * 3.1415927410125732421875) * (isnan(1.0) ? _5238 : (isnan(_5238) ? 1.0 : min(_5238, 1.0)))) / ((_4009 * _4009) * ((_3954 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3965 * _3811.z;
                                frontier_phi_88_pred_1 = _3965 * _3811.y;
                                frontier_phi_88_pred_2 = _3965 * _3811.x;
                                frontier_phi_88_pred_3 = _4039 * _3823.z;
                                frontier_phi_88_pred_4 = _4039 * _3823.y;
                                frontier_phi_88_pred_5 = _4039 * _3823.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4048 = frontier_phi_88_pred;
                            _4047 = frontier_phi_88_pred_1;
                            _4046 = frontier_phi_88_pred_2;
                            _4045 = frontier_phi_88_pred_3;
                            _4044 = frontier_phi_88_pred_4;
                            _4043 = frontier_phi_88_pred_5;
                            _3753 = _4046 + _3766;
                            _3754 = _4047 + _3767;
                            _3755 = _4048 + _3768;
                            _3750 = _4043 + _3763;
                            _3751 = _4044 + _3764;
                            _3752 = _4045 + _3765;
                            if (_3770 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3763 = _3750;
                                _3764 = _3751;
                                _3765 = _3752;
                                _3766 = _3753;
                                _3767 = _3754;
                                _3768 = _3755;
                                _3769 = _3770;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3755;
                        frontier_phi_82_pred_1 = _3754;
                        frontier_phi_82_pred_2 = _3753;
                        frontier_phi_82_pred_3 = _3752;
                        frontier_phi_82_pred_4 = _3751;
                        frontier_phi_82_pred_5 = _3750;
                    }
                    _3393 = frontier_phi_82_pred;
                    _3391 = frontier_phi_82_pred_1;
                    _3389 = frontier_phi_82_pred_2;
                    _3387 = frontier_phi_82_pred_3;
                    _3385 = frontier_phi_82_pred_4;
                    _3383 = frontier_phi_82_pred_5;
                    uint _3549 = _3548 + 1u;
                    if (_3549 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3542 = _3383;
                        _3543 = _3385;
                        _3544 = _3387;
                        _3545 = _3389;
                        _3546 = _3391;
                        _3547 = _3393;
                        _3548 = _3549;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3389;
                frontier_phi_63_64_ladder_1 = _3393;
                frontier_phi_63_64_ladder_2 = _3391;
                frontier_phi_63_64_ladder_3 = _3387;
                frontier_phi_63_64_ladder_4 = _3385;
                frontier_phi_63_64_ladder_5 = _3383;
            }
            else
            {
                frontier_phi_63_64_ladder = _3267;
                frontier_phi_63_64_ladder_1 = _3271;
                frontier_phi_63_64_ladder_2 = _3269;
                frontier_phi_63_64_ladder_3 = _3265;
                frontier_phi_63_64_ladder_4 = _3263;
                frontier_phi_63_64_ladder_5 = _3261;
            }
            _3382 = frontier_phi_63_64_ladder_5;
            _3384 = frontier_phi_63_64_ladder_4;
            _3386 = frontier_phi_63_64_ladder_3;
            _3388 = frontier_phi_63_64_ladder;
            _3390 = frontier_phi_63_64_ladder_2;
            _3392 = frontier_phi_63_64_ladder_1;
        }
        float _3397 = isnan(1.0) ? _1137 : (isnan(_1137) ? 1.0 : min(_1137, 1.0));
        _3192 = (_3397 * _3388) + _2704;
        _3194 = (_3397 * _3390) + _2706;
        _3196 = (_3397 * _3392) + _2708;
        _3198 = ((_3382 * _1122) * _3397) + _3042;
        _3200 = ((_3384 * _1124) * _3397) + _3044;
        _3202 = ((_3386 * _1125) * _3397) + _3046;
    }
    else
    {
        _3192 = _2704;
        _3194 = _2706;
        _3196 = _2708;
        _3198 = _3042;
        _3200 = _3044;
        _3202 = _3046;
    }
    float _5254 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
    float _5265 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
    float _5276 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
    float _5287 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _3220 = ((isnan(1.0) ? _5254 : (isnan(_5254) ? 1.0 : min(_5254, 1.0))) * (_3192 + ((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1137))) + ((_3198 + ((isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0))) * _1972)) * cbPerFrame._m0[3u].x);
    float _3221 = ((isnan(1.0) ? _5265 : (isnan(_5265) ? 1.0 : min(_5265, 1.0))) * (_3194 + ((isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0))) * _1137))) + ((_3200 + ((isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0))) * _1972)) * cbPerFrame._m0[3u].x);
    float _3222 = ((isnan(1.0) ? _5276 : (isnan(_5276) ? 1.0 : min(_5276, 1.0))) * (_3196 + ((isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0))) * _1137))) + ((_3202 + ((isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0))) * _1972)) * cbPerFrame._m0[3u].x);
    float _3227 = cbInstanceData._m0[_1097 + 6u].w * (isnan(1.0) ? _5287 : (isnan(_5287) ? 1.0 : min(_5287, 1.0)));
    float _3232 = _1059 / cbSceneParam._m0[86u].x;
    float _3233 = _1060 / cbSceneParam._m0[86u].y;
    vec4 _3247 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3232, _3233, (log2((isnan(cbSceneParam._m0[77u].w) ? _982 : (isnan(_982) ? cbSceneParam._m0[77u].w : min(_982, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3249 = _3247.x;
    float _3250 = _3247.y;
    float _3251 = _3247.z;
    float _3252 = _3247.w;
    float _3324;
    float _3326;
    float _3328;
    float _3330;
    if (_982 > cbSceneParam._m0[78u].w)
    {
        float _3286 = isnan(_982) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _982 : min(cbSceneParam._m0[80u].w, _982));
        float _3287 = _3286 / _982;
        float _3298 = _3287 * _1032;
        float _3299 = _1033 * _3287;
        float _3300 = (-0.0) - _3299;
        float _3302 = _3287 * _1034;
        float _3304 = (cbSceneParam._m0[77u].w * _3300) / _3286;
        float _3305 = _3304 + cbSceneParam._m0[79u].w;
        float _3306 = cbSceneParam._m0[79u].w - _3299;
        float _3312 = sqrt(((_3298 * _3298) + (_3299 * _3299)) + (_3302 * _3302));
        float _3315 = (1.0 - (cbSceneParam._m0[77u].w / _3286)) * _3312;
        float _3320 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3322 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3499;
        if (abs((_3300 - _3304) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3499 = ((((_3305 > 0.0) ? exp2(_3320 * _3305) : (2.0 - exp2(_3322 * _3305))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3315;
        }
        else
        {
            float _3443 = 1.0 / cbSceneParam._m0[80u].x;
            float _3444 = isnan(_3306) ? _3305 : (isnan(_3305) ? _3306 : max(_3305, _3306));
            float _3445 = isnan(_3306) ? _3305 : (isnan(_3305) ? _3306 : min(_3305, _3306));
            float _3454 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : min(_3444, 0.0));
            float _3455 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : min(_3445, 0.0));
            _3499 = ((abs(_3312 / _3300) * cbSceneParam._m0[80u].y) * ((((_3454 - _3455) * 2.0) - ((exp2(_3320 * (isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0)))) - exp2(_3320 * (isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0))))) * _3443)) - ((exp2(_3322 * _3454) - exp2(_3322 * _3455)) * _3443))) + (_3315 * cbSceneParam._m0[80u].z);
        }
        vec4 _3501 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3232, _3233, 1.0), 0.0);
        float _3510 = exp2((_3499 * (-1.44269502162933349609375)) * (1.0 - _3501.w));
        float _3511 = log2(_3510);
        float _3527 = log2(_3252);
        _3324 = (exp2(_3527 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3511 * cbSceneParam._m0[78u].x)) * _3501.x) / cbSceneParam._m0[78u].x)) + _3249;
        _3326 = (exp2(_3527 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3511 * cbSceneParam._m0[78u].y)) * _3501.y) / cbSceneParam._m0[78u].y)) + _3250;
        _3328 = (exp2(_3527 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3511 * cbSceneParam._m0[78u].z)) * _3501.z) / cbSceneParam._m0[78u].z)) + _3251;
        _3330 = _3510 * _3252;
    }
    else
    {
        _3324 = _3249;
        _3326 = _3250;
        _3328 = _3251;
        _3330 = _3252;
    }
    bool _3537;
    vec4 _3340;
    vec4 _3362;
    float _3364;
    float _3368;
    float _3369;
    float _3370;
    float _3371;
    bool _3381;
    for (;;)
    {
        _3340 = cbMatDynParam._m0[0u];
        float _3342 = roundEven(_3340.y);
        bool _3343 = _3342 == 3.0;
        float _3344 = log2(_3330);
        float _3351 = exp2(_3344 * cbSceneParam._m0[78u].x) * _3220;
        float _3352 = exp2(_3344 * cbSceneParam._m0[78u].y) * _3221;
        float _3353 = exp2(_3344 * cbSceneParam._m0[78u].z) * _3222;
        float _3360 = _1048 + (-0.5);
        _3362 = cbMtdParam._m0[1u];
        _3364 = _3362.y * _3360;
        float _3367 = (_3342 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3368 = _3367 * (_3343 ? _3351 : (_3351 + (cbSceneParam._m0[72u].w * _3324)));
        _3369 = _3367 * (_3343 ? _3352 : (_3352 + (cbSceneParam._m0[72u].w * _3326)));
        _3370 = _3367 * (_3343 ? _3353 : (_3353 + (cbSceneParam._m0[72u].w * _3328)));
        _3371 = _3360 * 0.999000012874603271484375;
        _3381 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3381)
        {
            if ((cbInstanceData._m0[_1097 + 7u].x + _3371) < 0.5)
            {
                _3537 = true;
                break;
            }
        }
        uint _3478 = _1098 + uint(_3340.w);
        if ((cbInstanceData._m0[_3478].w < 1.0) && ((cbInstanceData._m0[_3478].w + _3371) < 0.5))
        {
            _3537 = true;
            break;
        }
        if ((_3364 + 1.0) < _3362.x)
        {
            _3537 = true;
            break;
        }
        _3537 = false;
        break;
    }
    float _3741;
    if (_3537)
    {
        discard_state = true;
        _3741 = 0.0;
    }
    else
    {
        _3741 = _3227;
    }
    SV_Target.x = _3368;
    SV_Target.y = _3369;
    SV_Target.z = _3370;
    SV_Target.w = _3741;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3227;
    discard_exit();
}


