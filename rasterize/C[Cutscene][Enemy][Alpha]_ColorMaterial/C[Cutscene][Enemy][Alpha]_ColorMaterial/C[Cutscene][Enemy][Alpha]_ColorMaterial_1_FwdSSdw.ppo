#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24;
layout(set = 0, binding = 12) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 13) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 18) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in float TEXCOORD_8;
layout(location = 7, component = 1) in float TEXCOORD_9;
layout(location = 7, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1418;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _286 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _290 = _286.z;
    float _303 = exp2(log2((1.0 - _290) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _304 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _305 = isnan(1.0) ? _304 : (isnan(_304) ? 1.0 : min(_304, 1.0));
    vec4 _322 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _334 = exp2(log2(_322.w * cbMtdParam._m0[29u].y) * cbMtdParam._m0[23u].x);
    float _335 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _336 = isnan(1.0) ? _335 : (isnan(_335) ? 1.0 : min(_335, 1.0));
    float _345 = exp2(log2(cbMtdParam._m0[23u].y * _290) * cbMtdParam._m0[22u].y);
    float _346 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _347 = isnan(1.0) ? _346 : (isnan(_346) ? 1.0 : min(_346, 1.0));
    float _368 = roundEven(5.0 - ((texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _369 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _370 = isnan(4.0) ? _369 : (isnan(_369) ? 4.0 : min(_369, 4.0));
    float _382 = floor(_370);
    vec4 _385 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w, _382));
    vec4 _409 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _420 = cbMtdParam._m0[9u].x * _409.x;
    float _421 = cbMtdParam._m0[9u].y * _409.y;
    float _422 = cbMtdParam._m0[9u].z * _409.z;
    float _429 = (((cbMtdParam._m0[10u].x * _385.x) - _420) * _347) + _420;
    float _430 = (((cbMtdParam._m0[10u].y * _385.y) - _421) * _347) + _421;
    float _431 = (((cbMtdParam._m0[10u].z * _385.z) - _422) * _347) + _422;
    float _437 = exp2(log2(_286.w) * cbMtdParam._m0[23u].w);
    vec4 _450 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _470 = (((cbMtdParam._m0[16u].x * _450.x) - _429) * _437) + _429;
    float _471 = (((cbMtdParam._m0[16u].y * _450.y) - _430) * _437) + _430;
    float _472 = (((cbMtdParam._m0[16u].z * _450.z) - _431) * _437) + _431;
    vec4 _485 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _505 = (((cbMtdParam._m0[19u].x * _485.x) - _470) * _336) + _470;
    float _506 = (((cbMtdParam._m0[19u].y * _485.y) - _471) * _336) + _471;
    float _507 = (((cbMtdParam._m0[19u].z * _485.z) - _472) * _336) + _472;
    vec4 _520 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _545 = (_322.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _520.x) - _505) * _305) + _505);
    float _547 = (_322.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _520.y) - _506) * _305) + _506);
    float _549 = (_322.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _520.z) - _507) * _305) + _507);
    float _553 = cbMtdParam._m0[28u].x * TEXCOORD_8;
    float _562 = (_553 - (((texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _553))) * (cbMtdParam._m0[27u].w + 1.0);
    float _3807 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _563 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _570 = ((cbMtdParam._m0[21u].x - _545) * _563) + _545;
    float _571 = ((cbMtdParam._m0[21u].y - _547) * _563) + _547;
    float _572 = ((cbMtdParam._m0[21u].z - _549) * _563) + _549;
    vec4 _586 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24, SS_ClampLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.z) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.w) + cbTextureTilingScale._m0[11u].w));
    float _594 = (_586.x + (-1.0)) + (cbMtdParam._m0[28u].y * 2.0);
    float _3818 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _600 = exp2(log2(cbMtdParam._m0[28u].w * (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0)))) * cbMtdParam._m0[28u].z);
    float _3829 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _601 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _199[5];
    float _200[5];
    _199[0u] = cbMtdParam._m0[29u].z;
    _200[0u] = cbMtdParam._m0[29u].w;
    _199[1u] = cbMtdParam._m0[31u].z;
    _200[1u] = cbMtdParam._m0[31u].w;
    _199[2u] = cbMtdParam._m0[31u].x;
    _200[2u] = cbMtdParam._m0[31u].y;
    _199[3u] = cbMtdParam._m0[30u].z;
    _200[3u] = cbMtdParam._m0[30u].w;
    _199[4u] = cbMtdParam._m0[30u].x;
    _200[4u] = cbMtdParam._m0[30u].y;
    float _642 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    uint _644 = uint(int(isnan(4.0) ? _642 : (isnan(_642) ? 4.0 : min(_642, 4.0))));
    float _651 = ((_200[_644] - cbMtdParam._m0[22u].z) * _347) + cbMtdParam._m0[22u].z;
    float _654 = ((cbMtdParam._m0[22u].w - _651) * _437) + _651;
    float _657 = ((cbMtdParam._m0[25u].x - _654) * _336) + _654;
    float _660 = ((cbMtdParam._m0[26u].x - _657) * _305) + _657;
    float _662 = _660 - (_660 * _553);
    vec4 _679 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w, _382));
    vec4 _697 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _699 = _697.x;
    float _700 = _697.y;
    float _705 = cbMtdParam._m0[22u].x + _697.z;
    float _708 = (((_679.z + _199[_644]) - _705) * _347) + _705;
    vec4 _721 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _732 = (((_721.z - _708) + cbMtdParam._m0[29u].x) * _437) + _708;
    float _737 = ((((_290 * 2.0) * _732) - _732) * cbMtdParam._m0[24u].w) + _732;
    vec4 _749 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _760 = (((cbMtdParam._m0[23u].z + _749.z) - _737) * _336) + _737;
    vec4 _773 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _784 = (((_773.z - _760) + cbMtdParam._m0[26u].y) * _305) + _760;
    vec4 _799 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _813 = ((cbMtdParam._m0[27u].y * _553) * ((_799.z * cbMtdParam._m0[27u].x) - _784)) + _784;
    float _825 = ((_679.x - _699) * _347) + _699;
    float _826 = ((_679.y - _700) * _347) + _700;
    float _831 = ((_721.x - _825) * _437) + _825;
    float _832 = ((_721.y - _826) * _437) + _826;
    float _837 = ((_749.x - _831) * _336) + _831;
    float _838 = ((_749.y - _832) * _336) + _832;
    float _847 = ((((_773.x - _837) * _305) + _837) * 2.0) + (-1.0);
    float _848 = ((((_773.y - _838) * _305) + _838) * 2.0) + (-1.0);
    float _849 = dot(vec2(_847, _848), vec2(_847, _848));
    float _3850 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _854 = sqrt(1.0 - (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))));
    float _864 = ((cbMtdParam._m0[25u].y * ((_286.x * 2.0) + (-1.0))) + _847) + ((((_799.x * 2.0) + (-1.0)) * _553) * cbMtdParam._m0[26u].w);
    float _865 = ((cbMtdParam._m0[25u].y * ((_286.y * 2.0) + (-1.0))) + _848) + (((cbMtdParam._m0[28u].x * TEXCOORD_9) * ((_799.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _868 = fma(_854, _235 * NORMAL.x, fma(_865, _242 * TANGENT.x, (_228 * _220) * _864));
    float _871 = fma(_854, _235 * NORMAL.y, fma(_865, _242 * TANGENT.y, (_228 * _221) * _864));
    float _874 = fma(_854, _235 * NORMAL.z, fma(_865, _242 * TANGENT.z, (_228 * _222) * _864));
    float _878 = inversesqrt(dot(vec3(_868, _871, _874), vec3(_868, _871, _874)));
    float _879 = _878 * _868;
    float _880 = _878 * _871;
    float _881 = _878 * _874;
    float _3861 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _882 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _3872 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _883 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _3883 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _3894 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _3905 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _3916 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _887 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _903 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _943 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _953 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _943);
    float _954 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _943);
    float _955 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _943);
    float _959 = inversesqrt(dot(vec3(_953, _954, _955), vec3(_953, _954, _955)));
    float _960 = _953 * _959;
    float _961 = _954 * _959;
    float _962 = _955 * _959;
    float _968 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _969 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _987 = fma(_881, cbSceneParam._m0[5u].z, fma(_880, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _879));
    float _990 = fma(_881, cbSceneParam._m0[6u].z, fma(_880, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _879));
    float _993 = fma(_881, cbSceneParam._m0[7u].z, fma(_880, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _879));
    uint _1006 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1008 = (_1006 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1014 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0)))) * cbInstanceData._m0[_1008].x;
    float _1015 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0)))) * cbInstanceData._m0[_1008].y;
    float _1016 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) * cbInstanceData._m0[_1008].z;
    float _3927 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _1017 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _3938 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _1018 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _3949 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _1019 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _1020 = 1.0 - _887;
    float _1021 = _1017 * _1020;
    float _1022 = _1018 * _1020;
    float _1023 = _1019 * _1020;
    float _1028 = (_1017 + (-0.039999999105930328369140625)) * _887;
    float _1029 = (_1018 + (-0.039999999105930328369140625)) * _887;
    float _1030 = (_1019 + (-0.039999999105930328369140625)) * _887;
    float _1031 = _1028 + 0.039999999105930328369140625;
    float _1033 = _1029 + 0.039999999105930328369140625;
    float _1034 = _1030 + 0.039999999105930328369140625;
    vec4 _1043 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _968, cbSceneParam._m0[86u].y * _969));
    float _1046 = _1043.x * TEXCOORD_5.w;
    float _1047 = dot(vec3(_879, _880, _881), vec3(_960, _961, _962));
    float _1050 = _1047 * 2.0;
    float _1054 = (_1050 * _879) - _960;
    float _1055 = (_1050 * _880) - _961;
    float _1056 = (_1050 * _881) - _962;
    float _1060 = abs(dot(vec3(_960, _961, _962), vec3(_879, _880, _881)));
    float _3960 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _1062 = sqrt(_883);
    float _1073 = exp2((_1062 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1062 * 3.0));
    float _1079 = (1.0 - _1073) * ((_1062 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1080 = _1073 * _1062;
    float _1108 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1112 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1116 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1417;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1142 = fma(_1116, cbModelParam._m0[26u].z, fma(_1112, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1108));
        float _1146 = fma(_1116, cbModelParam._m0[27u].z, fma(_1112, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1108));
        float _1150 = fma(_1116, cbModelParam._m0[28u].z, fma(_1112, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1108));
        float _1175 = _1108 + _879;
        float _1176 = _1112 + _880;
        float _1177 = _1116 + _881;
        float _1187 = fma(_1177, cbModelParam._m0[26u].z, fma(_1176, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1175)) - _1142;
        float _1188 = fma(_1177, cbModelParam._m0[27u].z, fma(_1176, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1175)) - _1146;
        float _1189 = fma(_1177, cbModelParam._m0[28u].z, fma(_1176, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1175)) - _1150;
        float _1193 = inversesqrt(dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189)));
        float _1206 = ((_1193 * _1187) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1142 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1207 = ((_1193 * _1188) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1146 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1208 = ((_1193 * _1189) / cbModelParam._m0[34u].z) + ((((((_1150 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        float _1245 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1246 = _1245 * (_1211.x + (-0.5));
        float _1247 = _1245 * (_1211.y + (-0.5));
        float _1248 = _1245 * (_1211.z + (-0.5));
        float _1255 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1256 = _1255 * (_1218.x + (-0.5));
        float _1257 = _1255 * (_1218.y + (-0.5));
        float _1258 = _1255 * (_1218.z + (-0.5));
        float _1265 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1225.x + (-0.5));
        float _1267 = _1265 * (_1225.y + (-0.5));
        float _1268 = _1265 * (_1225.z + (-0.5));
        float _1275 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1232.x + (-0.5));
        float _1277 = _1275 * (_1232.y + (-0.5));
        float _1278 = _1275 * (_1232.z + (-0.5));
        float _1279 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1280 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1281 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1282 = _1246 * 0.5;
        float _1283 = _1256 * 0.5;
        float _1284 = _1266 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1299 = (dot(vec3(_879, _880, _881), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _3986 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1309 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1279 + 9.9999997473787516355514526367188e-06);
        float _3997 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _4008 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_1311 + 1.0))) + _1316) * _1279;
        float _1326 = _1247 * 0.5;
        float _1327 = _1257 * 0.5;
        float _1328 = _1267 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1342 = (dot(vec3(_879, _880, _881), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1351 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1280 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _4041 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1353 + 1.0))) + _1358) * _1280;
        float _1368 = _1248 * 0.5;
        float _1369 = _1258 * 0.5;
        float _1370 = _1268 * 0.5;
        float _1371 = dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370));
        float _1376 = (_1371 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1371);
        float _1384 = (dot(vec3(_879, _880, _881), vec3(_1376 * _1368, _1376 * _1369, _1376 * _1370)) + 1.0) * 0.5;
        float _4052 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1393 = sqrt(((_1369 * _1369) + (_1368 * _1368)) + (_1370 * _1370)) / (_1281 + 9.9999997473787516355514526367188e-06);
        float _4063 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1395 = _1394 * 2.0;
        float _1399 = (1.0 - _1394) / (_1394 + 1.0);
        float _4074 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1409 = ((((1.0 - _1400) * (_1395 + 2.0)) * exp2(log2(isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1395 + 1.0))) + _1400) * _1281;
        _1417 = _1248;
        _1419 = _1247;
        _1420 = _1246;
        _1421 = _1258;
        _1422 = _1257;
        _1423 = _1256;
        _1424 = _1268;
        _1425 = _1267;
        _1426 = _1266;
        _1427 = _1281;
        _1428 = _1280;
        _1429 = _1279;
        _1430 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
        _1431 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
        _1432 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)));
    }
    else
    {
        _1417 = _1418;
        _1419 = _1418;
        _1420 = _1418;
        _1421 = _1418;
        _1422 = _1418;
        _1423 = _1418;
        _1424 = _1418;
        _1425 = _1418;
        _1426 = _1418;
        _1427 = _1418;
        _1428 = _1418;
        _1429 = _1418;
        _1430 = 0.0;
        _1431 = 0.0;
        _1432 = 0.0;
    }
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1455 = fma(_1116, cbModelParam._m0[30u].z, fma(_1112, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1108));
        float _1459 = fma(_1116, cbModelParam._m0[31u].z, fma(_1112, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1108));
        float _1463 = fma(_1116, cbModelParam._m0[32u].z, fma(_1112, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1108));
        float _1486 = _1108 + _879;
        float _1487 = _1112 + _880;
        float _1488 = _1116 + _881;
        float _1498 = fma(_1488, cbModelParam._m0[30u].z, fma(_1487, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1486)) - _1455;
        float _1499 = fma(_1488, cbModelParam._m0[31u].z, fma(_1487, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1486)) - _1459;
        float _1500 = fma(_1488, cbModelParam._m0[32u].z, fma(_1487, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1486)) - _1463;
        float _1504 = inversesqrt(dot(vec3(_1498, _1499, _1500), vec3(_1498, _1499, _1500)));
        float _1517 = ((_1504 * _1498) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1455 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1518 = ((_1504 * _1499) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1459 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1519 = ((_1504 * _1500) / cbModelParam._m0[35u].z) + ((((((_1463 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1521 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1517, _1518, _1519), 0.0);
        vec4 _1528 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1517, _1518, _1519), 0.0);
        vec4 _1535 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1517, _1518, _1519), 0.0);
        vec4 _1542 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1517, _1518, _1519), 0.0);
        float _1554 = exp2((_1521.w + (-0.5)) * 20.0) * 2.0;
        float _1555 = _1554 * (_1521.x + (-0.5));
        float _1556 = _1554 * (_1521.y + (-0.5));
        float _1557 = _1554 * (_1521.z + (-0.5));
        float _1564 = exp2((_1528.w + (-0.5)) * 20.0) * 2.0;
        float _1565 = _1564 * (_1528.x + (-0.5));
        float _1566 = _1564 * (_1528.y + (-0.5));
        float _1567 = _1564 * (_1528.z + (-0.5));
        float _1574 = exp2((_1535.w + (-0.5)) * 20.0) * 2.0;
        float _1575 = _1574 * (_1535.x + (-0.5));
        float _1576 = _1574 * (_1535.y + (-0.5));
        float _1577 = _1574 * (_1535.z + (-0.5));
        float _1584 = exp2((_1542.w + (-0.5)) * 20.0) * 2.0;
        float _1585 = _1584 * (_1542.x + (-0.5));
        float _1586 = _1584 * (_1542.y + (-0.5));
        float _1587 = _1584 * (_1542.z + (-0.5));
        float _1588 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1589 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1590 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1591 = _1555 * 0.5;
        float _1592 = _1565 * 0.5;
        float _1593 = _1575 * 0.5;
        float _1594 = dot(vec3(_1591, _1592, _1593), vec3(_1591, _1592, _1593));
        float _1599 = (_1594 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1594);
        float _1607 = (dot(vec3(_879, _880, _881), vec3(_1599 * _1591, _1599 * _1592, _1599 * _1593)) + 1.0) * 0.5;
        float _4115 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1616 = sqrt(((_1592 * _1592) + (_1591 * _1591)) + (_1593 * _1593)) / (_1588 + 9.9999997473787516355514526367188e-06);
        float _4126 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1618 = _1617 * 2.0;
        float _1622 = (1.0 - _1617) / (_1617 + 1.0);
        float _4137 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1632 = ((((1.0 - _1623) * (_1618 + 2.0)) * exp2(log2(isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_1618 + 1.0))) + _1623) * _1588;
        float _1633 = _1556 * 0.5;
        float _1634 = _1566 * 0.5;
        float _1635 = _1576 * 0.5;
        float _1636 = dot(vec3(_1633, _1634, _1635), vec3(_1633, _1634, _1635));
        float _1641 = (_1636 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1636);
        float _1649 = (dot(vec3(_879, _880, _881), vec3(_1641 * _1633, _1641 * _1634, _1641 * _1635)) + 1.0) * 0.5;
        float _4148 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1658 = sqrt(((_1634 * _1634) + (_1633 * _1633)) + (_1635 * _1635)) / (_1589 + 9.9999997473787516355514526367188e-06);
        float _4159 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1660 = _1659 * 2.0;
        float _1664 = (1.0 - _1659) / (_1659 + 1.0);
        float _4170 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1674 = ((((1.0 - _1665) * (_1660 + 2.0)) * exp2(log2(isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1660 + 1.0))) + _1665) * _1589;
        float _1675 = _1557 * 0.5;
        float _1676 = _1567 * 0.5;
        float _1677 = _1577 * 0.5;
        float _1678 = dot(vec3(_1675, _1676, _1677), vec3(_1675, _1676, _1677));
        float _1683 = (_1678 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1678);
        float _1691 = (dot(vec3(_879, _880, _881), vec3(_1683 * _1675, _1683 * _1676, _1683 * _1677)) + 1.0) * 0.5;
        float _4181 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1700 = sqrt(((_1676 * _1676) + (_1675 * _1675)) + (_1677 * _1677)) / (_1590 + 9.9999997473787516355514526367188e-06);
        float _4192 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1702 = _1701 * 2.0;
        float _1706 = (1.0 - _1701) / (_1701 + 1.0);
        float _4203 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1707 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1716 = ((((1.0 - _1707) * (_1702 + 2.0)) * exp2(log2(isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_1702 + 1.0))) + _1707) * _1590;
        _1724 = _1557;
        _1725 = _1556;
        _1726 = _1555;
        _1727 = _1567;
        _1728 = _1566;
        _1729 = _1565;
        _1730 = _1577;
        _1731 = _1576;
        _1732 = _1575;
        _1733 = _1590;
        _1734 = _1589;
        _1735 = _1588;
        _1736 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)));
        _1737 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)));
        _1738 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)));
    }
    else
    {
        _1724 = _1418;
        _1725 = _1418;
        _1726 = _1418;
        _1727 = _1418;
        _1728 = _1418;
        _1729 = _1418;
        _1730 = _1418;
        _1731 = _1418;
        _1732 = _1418;
        _1733 = _1418;
        _1734 = _1418;
        _1735 = _1418;
        _1736 = 0.0;
        _1737 = 0.0;
        _1738 = 0.0;
    }
    float _1748 = (cbModelParam._m0[1u].x * (_1736 - _1430)) + _1430;
    float _1749 = (cbModelParam._m0[1u].x * (_1737 - _1431)) + _1431;
    float _1750 = (cbModelParam._m0[1u].x * (_1738 - _1432)) + _1432;
    float _1771 = fma(_1750, cbSceneParam._m0[89u].z, fma(_1749, cbSceneParam._m0[89u].y, _1748 * cbSceneParam._m0[89u].x));
    float _1774 = fma(_1750, cbSceneParam._m0[90u].z, fma(_1749, cbSceneParam._m0[90u].y, _1748 * cbSceneParam._m0[90u].x));
    float _1777 = fma(_1750, cbSceneParam._m0[91u].z, fma(_1749, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1748));
    float _1792 = _1054 * 0.5;
    float _1793 = _1055 * 0.5;
    float _1794 = _1056 * 0.5;
    float _1795 = dot(vec4(_1792, _1793, _1794, 1.0), vec4(_1726, _1729, _1732, _1735));
    float _1798 = dot(vec4(_1792, _1793, _1794, 1.0), vec4(_1725, _1728, _1731, _1734));
    float _1801 = dot(vec4(_1792, _1793, _1794, 1.0), vec4(_1724, _1727, _1730, _1733));
    float _1835;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1808 = dot(vec4(_1792, _1793, _1794, 1.0), vec4(_1417, _1421, _1424, _1427));
        float _1812 = dot(vec4(_1792, _1793, _1794, 1.0), vec4(_1419, _1422, _1425, _1428));
        float _1816 = dot(vec4(_1792, _1793, _1794, 1.0), vec4(_1420, _1423, _1426, _1429));
        float _1823 = dot(vec4(cbModelParam._m0[39u]), vec4(_1792, _1793, _1794, 1.0));
        _1835 = dot(vec3(isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0)), isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0)), isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1823) ? 0.0 : (isnan(0.0) ? _1823 : max(0.0, _1823))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1835 = 1.0;
    }
    float _1846;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1837 = dot(vec4(cbModelParam._m0[40u]), vec4(_1792, _1793, _1794, 1.0));
        _1846 = dot(vec3(isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0)), isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0)), isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1837) ? 0.0 : (isnan(0.0) ? _1837 : max(0.0, _1837))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1846 = 1.0;
    }
    float _1850 = (_1846 * cbModelParam._m0[1u].x) + (_1835 * (1.0 - cbModelParam._m0[1u].x));
    float _1860 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _883);
    float _1861 = isnan(_1860) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1860 : min(cbModelParam._m0[25u].z, _1860));
    float _1941;
    float _1943;
    float _1945;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1908 = fma(_1116, cbModelParam._m0[13u].z, fma(_1112, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1108)) + cbModelParam._m0[13u].w;
        float _1912 = fma(_1116, cbModelParam._m0[14u].z, fma(_1112, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1108)) + cbModelParam._m0[14u].w;
        float _1916 = fma(_1116, cbModelParam._m0[15u].z, fma(_1112, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1108)) + cbModelParam._m0[15u].w;
        float _1919 = fma(_1056, cbModelParam._m0[13u].z, fma(_1055, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1054));
        float _1922 = fma(_1056, cbModelParam._m0[14u].z, fma(_1055, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1054));
        float _1925 = fma(_1056, cbModelParam._m0[15u].z, fma(_1055, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1054));
        float _1953;
        if (_1919 > 0.0)
        {
            _1953 = abs((1.0 - _1908) / _1919);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1908 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1953 = frontier_phi_14_12_ladder;
        }
        float _2176;
        if (_1922 > 0.0)
        {
            _2176 = abs((1.0 - _1912) / _1922);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1912 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2176 = frontier_phi_23_19_ladder;
        }
        float _2433;
        if (_1925 > 0.0)
        {
            _2433 = abs((1.0 - _1916) / _1925);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1925 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1916 + 1.0) / _1925);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2433 = frontier_phi_35_30_ladder;
        }
        float _2435 = isnan(_2176) ? _1953 : (isnan(_1953) ? _2176 : min(_1953, _2176));
        float _2436 = isnan(_2433) ? _2435 : (isnan(_2435) ? _2433 : min(_2435, _2433));
        float _2440 = (_2436 * _1919) + _1908;
        float _2441 = (_2436 * _1922) + _1912;
        float _2442 = (_2436 * _1925) + _1916;
        float _2443 = _2436 * 9.9999997473787516355514526367188e-05;
        float _2445 = (-1.0) - _2443;
        float _2447 = _2443 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2442 > _2447) || ((_2442 < _2445) || ((_2441 > _2447) || ((_2441 < _2445) || ((_2440 < _2445) || (_2440 > _2447))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2570 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2442, cbModelParam._m0[9u].z, fma(_2441, cbModelParam._m0[9u].y, _2440 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2442, cbModelParam._m0[10u].z, fma(_2441, cbModelParam._m0[10u].y, _2440 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2442, cbModelParam._m0[11u].z, fma(_2441, cbModelParam._m0[11u].y, _2440 * cbModelParam._m0[11u].x))), _1861);
            frontier_phi_13_35_ladder = _2570.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2570.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2570.x * cbModelParam._m0[1u].y;
        }
        _1941 = frontier_phi_13_35_ladder_2;
        _1943 = frontier_phi_13_35_ladder_1;
        _1945 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1929 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1054, _1055, _1056), _1861);
        _1941 = _1929.x * cbModelParam._m0[1u].y;
        _1943 = _1929.y * cbModelParam._m0[1u].y;
        _1945 = _1929.z * cbModelParam._m0[1u].y;
    }
    float _1949 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _883);
    float _1950 = isnan(_1949) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1949 : min(cbModelParam._m0[25u].w, _1949));
    float _2039;
    float _2041;
    float _2043;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2003 = fma(_1116, cbModelParam._m0[21u].z, fma(_1112, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1108)) + cbModelParam._m0[21u].w;
        float _2007 = fma(_1116, cbModelParam._m0[22u].z, fma(_1112, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1108)) + cbModelParam._m0[22u].w;
        float _2011 = fma(_1116, cbModelParam._m0[23u].z, fma(_1112, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1108)) + cbModelParam._m0[23u].w;
        float _2014 = fma(_1056, cbModelParam._m0[21u].z, fma(_1055, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1054));
        float _2017 = fma(_1056, cbModelParam._m0[22u].z, fma(_1055, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1054));
        float _2020 = fma(_1056, cbModelParam._m0[23u].z, fma(_1055, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1054));
        float _2181;
        if (_2014 > 0.0)
        {
            _2181 = abs((1.0 - _2003) / _2014);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2014 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2003 + 1.0) / _2014);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2181 = frontier_phi_25_21_ladder;
        }
        float _2460;
        if (_2017 > 0.0)
        {
            _2460 = abs((1.0 - _2007) / _2017);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2017 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2007 + 1.0) / _2017);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2460 = frontier_phi_37_32_ladder;
        }
        float _2673;
        if (_2020 > 0.0)
        {
            _2673 = abs((1.0 - _2011) / _2020);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2020 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2011 + 1.0) / _2020);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2673 = frontier_phi_46_43_ladder;
        }
        float _2675 = isnan(_2460) ? _2181 : (isnan(_2181) ? _2460 : min(_2181, _2460));
        float _2676 = isnan(_2673) ? _2675 : (isnan(_2675) ? _2673 : min(_2675, _2673));
        float _2680 = (_2676 * _2014) + _2003;
        float _2681 = (_2676 * _2017) + _2007;
        float _2682 = (_2676 * _2020) + _2011;
        float _2683 = _2676 * 9.9999997473787516355514526367188e-05;
        float _2684 = (-1.0) - _2683;
        float _2686 = _2683 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2682 > _2686) || ((_2682 < _2684) || ((_2681 > _2686) || ((_2681 < _2684) || ((_2680 < _2684) || (_2680 > _2686))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2883 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2682, cbModelParam._m0[17u].z, fma(_2681, cbModelParam._m0[17u].y, _2680 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2682, cbModelParam._m0[18u].z, fma(_2681, cbModelParam._m0[18u].y, _2680 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2682, cbModelParam._m0[19u].z, fma(_2681, cbModelParam._m0[19u].y, _2680 * cbModelParam._m0[19u].x))), _1950);
            frontier_phi_22_46_ladder = _2883.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2883.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2883.x * cbModelParam._m0[1u].z;
        }
        _2039 = frontier_phi_22_46_ladder_2;
        _2041 = frontier_phi_22_46_ladder_1;
        _2043 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2023 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1054, _1055, _1056), _1950);
        _2039 = _2023.x * cbModelParam._m0[1u].z;
        _2041 = _2023.y * cbModelParam._m0[1u].z;
        _2043 = _2023.z * cbModelParam._m0[1u].z;
    }
    float _2056 = (((_1079 * _1031) + _1080) * _1046) * ((cbModelParam._m0[1u].w * (_2039 - _1941)) + _1941);
    float _2058 = (((_1079 * _1033) + _1080) * _1046) * ((cbModelParam._m0[1u].w * (_2041 - _1943)) + _1943);
    float _2060 = (((_1079 * _1034) + _1080) * _1046) * ((cbModelParam._m0[1u].w * (_2043 - _1945)) + _1945);
    float _2063 = fma(_2060, cbSceneParam._m0[89u].z, fma(_2058, cbSceneParam._m0[89u].y, _2056 * cbSceneParam._m0[89u].x));
    float _2066 = fma(_2060, cbSceneParam._m0[90u].z, fma(_2058, cbSceneParam._m0[90u].y, _2056 * cbSceneParam._m0[90u].x));
    float _2069 = fma(_2060, cbSceneParam._m0[91u].z, fma(_2058, cbSceneParam._m0[91u].y, _2056 * cbSceneParam._m0[91u].x));
    vec4 _2077 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_968, _969));
    float _2079 = _2077.w;
    float _2091 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2079);
    float _2092 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2079);
    float _2093 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2079);
    uvec4 _2097 = floatBitsToUint(cbInstanceData._m0[_1006 + 5u]);
    uint _2099 = _2097.x * 14u;
    uint _2100 = _2099 + 13u;
    float _2107 = _1046 + (-1.0);
    float _2112 = (cbLight._m0[_2100].x * _2107) + 1.0;
    float _2113 = (cbLight._m0[_2100].y * _2107) + 1.0;
    float _2114 = (cbLight._m0[_2100].z * _2107) + 1.0;
    float _2115 = (cbLight._m0[_2100].w * _2107) + 1.0;
    uint _2116 = _2099 + 5u;
    float _2122 = isnan(1.0) ? _2113 : (isnan(_2113) ? 1.0 : min(_2113, 1.0));
    uint _2126 = _2099 + 4u;
    float _2135 = isnan(1.0) ? _2112 : (isnan(_2112) ? 1.0 : min(_2112, 1.0));
    uint _2139 = _2099 | 1u;
    float _2150 = dot(vec3(cbLight._m0[_2099].xyz), vec3(_879, _880, _881));
    float _2153 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_879, _880, _881));
    float _4339 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _4350 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2158 = (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * 0.3183098733425140380859375;
    float _2160 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * 0.3183098733425140380859375;
    float _2167 = ((cbLight._m0[_2116].x * _2122) * _2160) + (((cbLight._m0[_2126].x * _2091) * _2135) * _2158);
    float _2168 = ((_2122 * cbLight._m0[_2116].y) * _2160) + (((cbLight._m0[_2126].y * _2092) * _2135) * _2158);
    float _2169 = ((_2122 * cbLight._m0[_2116].z) * _2160) + (((cbLight._m0[_2126].z * _2093) * _2135) * _2158);
    uvec4 _2173 = floatBitsToUint(cbLight._m0[_2099 + 12u]);
    bool _2175 = _2173.x == 0u;
    float _2186;
    float _2188;
    float _2190;
    if (_2175)
    {
        _2186 = _2167;
        _2188 = _2168;
        _2190 = _2169;
    }
    else
    {
        uint _2194 = _2099 + 6u;
        float _2210 = (dot(vec3(cbLight._m0[_2099 + 2u].xyz), vec3(_879, _880, _881)) * 0.5) + 0.5;
        float _2211 = _2210 * _2210;
        float _4361 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2212 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _2213 = isnan(1.0) ? _2114 : (isnan(_2114) ? 1.0 : min(_2114, 1.0));
        _2186 = (((cbLight._m0[_2194].x * 0.3183098733425140380859375) * _2212) * _2213) + _2167;
        _2188 = (((cbLight._m0[_2194].y * 0.3183098733425140380859375) * _2212) * _2213) + _2168;
        _2190 = (((cbLight._m0[_2194].z * 0.3183098733425140380859375) * _2212) * _2213) + _2169;
    }
    bool _2193 = _2173.y == 0u;
    float _2231;
    float _2233;
    float _2235;
    if (_2193)
    {
        _2231 = _2186;
        _2233 = _2188;
        _2235 = _2190;
    }
    else
    {
        uint _2404 = _2099 + 7u;
        float _2420 = (dot(vec3(cbLight._m0[_2099 + 3u].xyz), vec3(_879, _880, _881)) * 0.5) + 0.5;
        float _2421 = _2420 * _2420;
        float _4377 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2422 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _2423 = isnan(1.0) ? _2115 : (isnan(_2115) ? 1.0 : min(_2115, 1.0));
        _2231 = (((cbLight._m0[_2404].x * 0.3183098733425140380859375) * _2422) * _2423) + _2186;
        _2233 = (((cbLight._m0[_2404].y * 0.3183098733425140380859375) * _2422) * _2423) + _2188;
        _2235 = (((cbLight._m0[_2404].z * 0.3183098733425140380859375) * _2422) * _2423) + _2190;
    }
    uint _2238 = _2099 + 8u;
    float _2251 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2099].w)) * _883) * 0.949999988079071044921875);
    float _2252 = _2251 * _2251;
    float _2253 = cbLight._m0[_2099].x + _960;
    float _2254 = cbLight._m0[_2099].y + _961;
    float _2255 = cbLight._m0[_2099].z + _962;
    float _2259 = inversesqrt(dot(vec3(_2253, _2254, _2255), vec3(_2253, _2254, _2255)));
    float _2260 = _2259 * _2253;
    float _2261 = _2259 * _2254;
    float _2262 = _2259 * _2255;
    float _2263 = dot(vec3(_879, _880, _881), vec3(cbLight._m0[_2099].xyz));
    float _4393 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2266 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
    float _4404 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _2267 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
    float _2268 = dot(vec3(_879, _880, _881), vec3(_2260, _2261, _2262));
    float _4415 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2271 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
    float _2272 = dot(vec3(cbLight._m0[_2099].xyz), vec3(_2260, _2261, _2262));
    float _4426 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2276 = _2252 * _2252;
    float _2280 = ((_2271 * _2271) * (_2276 + (-1.0))) + 1.0;
    float _2288 = exp2(log2(1.0 - (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0)))) * 5.0);
    float _2289 = 0.959999978542327880859375 - _1028;
    float _2291 = 0.959999978542327880859375 - _1029;
    float _2292 = 0.959999978542327880859375 - _1030;
    float _2299 = 1.0 - _2252;
    float _2310 = (0.5 / (((_2267 * ((_2266 * _2299) + _2252)) + 9.9999999392252902907785028219223e-09) + (((_2267 * _2299) + _2252) * _2266))) * _2266;
    float _4437 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2312 = (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_2276 / ((_2280 * _2280) * 3.141590118408203125));
    uint _2326 = _2099 + 9u;
    float _2337 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2139].w)) * _883) * 0.949999988079071044921875);
    float _2338 = _2337 * _2337;
    float _2339 = cbLight._m0[_2139].x + _960;
    float _2340 = cbLight._m0[_2139].y + _961;
    float _2341 = cbLight._m0[_2139].z + _962;
    float _2345 = inversesqrt(dot(vec3(_2339, _2340, _2341), vec3(_2339, _2340, _2341)));
    float _2346 = _2345 * _2339;
    float _2347 = _2345 * _2340;
    float _2348 = _2345 * _2341;
    float _2349 = dot(vec3(_879, _880, _881), vec3(cbLight._m0[_2139].xyz));
    float _4448 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2352 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
    float _2353 = dot(vec3(_879, _880, _881), vec3(_2346, _2347, _2348));
    float _4459 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2356 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _2357 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_2346, _2347, _2348));
    float _4470 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2361 = _2338 * _2338;
    float _2365 = ((_2356 * _2356) * (_2361 + (-1.0))) + 1.0;
    float _2372 = exp2(log2(1.0 - (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0)))) * 5.0);
    float _2379 = 1.0 - _2338;
    float _2389 = (0.5 / (((_2267 * ((_2352 * _2379) + _2338)) + 9.9999999392252902907785028219223e-09) + (((_2267 * _2379) + _2338) * _2352))) * _2352;
    float _4481 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2391 = (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2361 / ((_2365 * _2365) * 3.141590118408203125));
    float _2401 = (((((_2372 * _2289) + _1031) * cbLight._m0[_2326].x) * _2391) * _2122) + ((((cbLight._m0[_2238].x * _2091) * ((_2288 * _2289) + _1031)) * _2312) * _2135);
    float _2402 = (((((_2372 * _2291) + _1033) * cbLight._m0[_2326].y) * _2391) * _2122) + ((((cbLight._m0[_2238].y * _2092) * ((_2288 * _2291) + _1033)) * _2312) * _2135);
    float _2403 = (((((_2372 * _2292) + _1034) * cbLight._m0[_2326].z) * _2391) * _2122) + ((((cbLight._m0[_2238].z * _2093) * ((_2288 * _2292) + _1034)) * _2312) * _2135);
    float _2465;
    float _2467;
    float _2469;
    if (_2175)
    {
        _2465 = _2401;
        _2467 = _2402;
        _2469 = _2403;
    }
    else
    {
        uint _2471 = _2099 + 2u;
        uint _2475 = _2099 + 10u;
        float _2489 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2471].w)) * _883) * 0.949999988079071044921875);
        float _2490 = _2489 * _2489;
        float _2491 = cbLight._m0[_2471].x + _960;
        float _2492 = cbLight._m0[_2471].y + _961;
        float _2493 = cbLight._m0[_2471].z + _962;
        float _2497 = inversesqrt(dot(vec3(_2491, _2492, _2493), vec3(_2491, _2492, _2493)));
        float _2498 = _2497 * _2491;
        float _2499 = _2497 * _2492;
        float _2500 = _2497 * _2493;
        float _2501 = dot(vec3(_879, _880, _881), vec3(cbLight._m0[_2471].xyz));
        float _4492 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2504 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _2505 = dot(vec3(_879, _880, _881), vec3(_2498, _2499, _2500));
        float _4503 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2508 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _2509 = dot(vec3(cbLight._m0[_2471].xyz), vec3(_2498, _2499, _2500));
        float _4514 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2513 = _2490 * _2490;
        float _2517 = ((_2508 * _2508) * (_2513 + (-1.0))) + 1.0;
        float _2524 = exp2(log2(1.0 - (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0)))) * 5.0);
        float _2531 = 1.0 - _2490;
        float _2541 = (0.5 / (((_2267 * ((_2504 * _2531) + _2490)) + 9.9999999392252902907785028219223e-09) + (((_2267 * _2531) + _2490) * _2504))) * _2504;
        float _4525 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2543 = (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_2513 / ((_2517 * _2517) * 3.141590118408203125));
        float _2544 = isnan(1.0) ? _2114 : (isnan(_2114) ? 1.0 : min(_2114, 1.0));
        _2465 = (((((_2524 * _2289) + _1031) * cbLight._m0[_2475].x) * _2543) * _2544) + _2401;
        _2467 = (((((_2524 * _2291) + _1033) * cbLight._m0[_2475].y) * _2543) * _2544) + _2402;
        _2469 = (((((_2524 * _2292) + _1034) * cbLight._m0[_2475].z) * _2543) * _2544) + _2403;
    }
    float _2579;
    float _2581;
    float _2583;
    if (_2193)
    {
        _2579 = _2465;
        _2581 = _2467;
        _2583 = _2469;
    }
    else
    {
        uint _2590 = _2099 + 3u;
        uint _2594 = _2099 + 11u;
        float _2608 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2590].w)) * _883) * 0.949999988079071044921875);
        float _2609 = _2608 * _2608;
        float _2610 = cbLight._m0[_2590].x + _960;
        float _2611 = cbLight._m0[_2590].y + _961;
        float _2612 = cbLight._m0[_2590].z + _962;
        float _2616 = inversesqrt(dot(vec3(_2610, _2611, _2612), vec3(_2610, _2611, _2612)));
        float _2617 = _2616 * _2610;
        float _2618 = _2616 * _2611;
        float _2619 = _2616 * _2612;
        float _2620 = dot(vec3(_879, _880, _881), vec3(cbLight._m0[_2590].xyz));
        float _4541 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2623 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _2624 = dot(vec3(_879, _880, _881), vec3(_2617, _2618, _2619));
        float _4552 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2627 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _2628 = dot(vec3(cbLight._m0[_2590].xyz), vec3(_2617, _2618, _2619));
        float _4563 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2632 = _2609 * _2609;
        float _2636 = ((_2627 * _2627) * (_2632 + (-1.0))) + 1.0;
        float _2643 = exp2(log2(1.0 - (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0)))) * 5.0);
        float _2650 = 1.0 - _2609;
        float _2660 = (0.5 / (((_2267 * ((_2623 * _2650) + _2609)) + 9.9999999392252902907785028219223e-09) + (((_2267 * _2650) + _2609) * _2623))) * _2623;
        float _4574 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2662 = (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (_2632 / ((_2636 * _2636) * 3.141590118408203125));
        float _2663 = isnan(1.0) ? _2115 : (isnan(_2115) ? 1.0 : min(_2115, 1.0));
        _2579 = (((((_2643 * _2289) + _1031) * cbLight._m0[_2594].x) * _2662) * _2663) + _2465;
        _2581 = (((((_2643 * _2291) + _1033) * cbLight._m0[_2594].y) * _2662) * _2663) + _2467;
        _2583 = (((((_2643 * _2292) + _1034) * cbLight._m0[_2594].z) * _2662) * _2663) + _2469;
    }
    float _2798;
    float _2800;
    float _2802;
    float _2804;
    float _2806;
    float _2808;
    if (_2097.y == 0u)
    {
        float _2738 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2739 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2738;
        float _2740 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2738;
        float _2741 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2738;
        uvec4 _2753 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2754 = _2753.x;
        uint _2765 = uint((float(_2753.y) * floor(float(uint(cbSceneParam._m0[85u].y * _969) / _2754))) + floor(float(uint(cbSceneParam._m0[85u].x * _968) / _2754)));
        float _2775 = (log2(_2741 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2776 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
        uint _2779 = uint(isnan(14.0) ? _2776 : (isnan(_2776) ? 14.0 : min(_2776, 14.0)));
        uvec4 _2784 = texelFetch(g_lightClusterGridBuffer, int(((_2779 << 2u) + (_2765 << 6u)) >> 2u));
        uint _2785 = _2784.x;
        uint _2786 = _2753.z;
        float _2888;
        float _2890;
        float _2892;
        float _2894;
        float _2896;
        float _2898;
        if (((((1u << ((_2786 >> 4u) & 15u)) + 4294967295u) & _2785) == 0u) || ((_2786 & 240u) == 0u))
        {
            _2888 = 0.0;
            _2890 = 0.0;
            _2892 = 0.0;
            _2894 = 0.0;
            _2896 = 0.0;
            _2898 = 0.0;
        }
        else
        {
            float _2889;
            float _2891;
            float _2893;
            float _2895;
            float _2897;
            float _2899;
            float _3033 = 0.0;
            float _3034 = 0.0;
            float _3035 = 0.0;
            float _3036 = 0.0;
            float _3037 = 0.0;
            float _3038 = 0.0;
            uint _3039 = 0u;
            uint _3048;
            bool _3049;
            for (;;)
            {
                _3048 = texelFetch(g_lightClassification, int((((_2779 << 5u) + (_2765 << 9u)) + (_3039 << 2u)) >> 2u)).x;
                _3049 = _3048 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3049)
                {
                    frontier_phi_61_pred = _3033;
                    frontier_phi_61_pred_1 = _3038;
                    frontier_phi_61_pred_2 = _3037;
                    frontier_phi_61_pred_3 = _3036;
                    frontier_phi_61_pred_4 = _3035;
                    frontier_phi_61_pred_5 = _3034;
                }
                else
                {
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    float _3162;
                    uint _3163;
                    _3157 = _3033;
                    _3158 = _3034;
                    _3159 = _3035;
                    _3160 = _3036;
                    _3161 = _3037;
                    _3162 = _3038;
                    _3163 = _3048;
                    float _3089;
                    float _3090;
                    float _3091;
                    float _3092;
                    float _3093;
                    float _3094;
                    for (;;)
                    {
                        uint _3167 = uint(findLSB(_3163)) + (_3039 << 5u);
                        uint _3164 = (_3163 + 4294967295u) & _3163;
                        uint _3169 = _3167 * 48u;
                        vec4 _3183 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3169)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 3u)).x));
                        uint _3189 = (_3167 * 48u) + 4u;
                        vec4 _3202 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3189)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 3u)).x));
                        uint _3208 = (_3167 * 48u) + 8u;
                        vec3 _3219 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3208)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 2u)).x));
                        float _3223 = _3183.x - _2739;
                        float _3224 = _3183.y - _2740;
                        float _3225 = _3183.z - _2741;
                        float _3226 = dot(vec3(_3223, _3224, _3225), vec3(_3223, _3224, _3225));
                        float _3229 = inversesqrt(_3226);
                        float _3230 = _3229 * _3223;
                        float _3231 = _3229 * _3224;
                        float _3232 = _3229 * _3225;
                        float _3233 = dot(vec3(_987, _990, _993), vec3(_3230, _3231, _3232));
                        float _3238 = 1.0 - (_3226 * _3183.w);
                        float _4600 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                        float _3239 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                        float _3240 = sqrt(_3226) * _3202.w;
                        float _3243 = 1.39999997615814208984375 / (_3240 + 1.39999997615814208984375);
                        float _3244 = _3243 * _3243;
                        float _3247 = ((1.0 - _3244) * _3233) + _3244;
                        float _3250 = _3240 * _3240;
                        float _3254 = ((isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0))) * _3239) / ((_3250 * 0.699999988079071044921875) + 1.0);
                        float _3258 = (-0.0) - _2739;
                        float _3259 = (-0.0) - _2740;
                        float _3260 = (-0.0) - _2741;
                        float _3264 = inversesqrt(dot(vec3(_3258, _3259, _3260), vec3(_3258, _3259, _3260)));
                        float _3265 = _3264 * _3258;
                        float _3266 = _3264 * _3259;
                        float _3267 = _3264 * _3260;
                        float _3275 = exp2(log2(1.0 / ((_3250 * 3.5) + 5.0)) * 0.25);
                        float _3276 = 1.0 - _1062;
                        float _3283 = sqrt(1.0 - ((1.0 - (_3276 * _3276)) * (1.0 - (_3275 * _3275))));
                        float _3284 = _3283 * _3283;
                        float _3285 = _3284 * _3284;
                        float _3286 = _3265 + _3230;
                        float _3287 = _3266 + _3231;
                        float _3288 = _3267 + _3232;
                        float _3292 = inversesqrt(dot(vec3(_3286, _3287, _3288), vec3(_3286, _3287, _3288)));
                        float _3296 = dot(vec3(_987, _990, _993), vec3(_3265, _3266, _3267));
                        float _4616 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                        float _3299 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
                        float _3300 = dot(vec3(_987, _990, _993), vec3(_3292 * _3286, _3292 * _3287, _3292 * _3288));
                        float _4627 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                        float _3303 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                        float _3307 = ((_3303 * _3303) * (_3285 + (-1.0))) + 1.0;
                        float _3308 = _3243 * _3284;
                        float _3309 = _3308 * _3308;
                        float _3312 = ((1.0 - _3309) * _3233) + _3309;
                        float _4638 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                        float _3313 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                        float _3314 = 1.0 - _3284;
                        float _3324 = (0.5 / (((_3313 * ((_3299 * _3314) + _3284)) + 9.9999999392252902907785028219223e-09) + (((_3313 * _3314) + _3284) * _3299))) * _3313;
                        float _4649 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                        float _3335 = (((_3285 * 3.1415927410125732421875) * (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0)))) / ((_3307 * _3307) * ((_3250 * 2.1991131305694580078125) + 3.141590118408203125))) * _3239;
                        _3092 = (_3254 * _3202.x) + _3160;
                        _3093 = (_3254 * _3202.y) + _3161;
                        _3094 = (_3254 * _3202.z) + _3162;
                        _3089 = (_3335 * _3219.x) + _3157;
                        _3090 = (_3335 * _3219.y) + _3158;
                        _3091 = (_3335 * _3219.z) + _3159;
                        if (_3164 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3157 = _3089;
                            _3158 = _3090;
                            _3159 = _3091;
                            _3160 = _3092;
                            _3161 = _3093;
                            _3162 = _3094;
                            _3163 = _3164;
                        }
                    }
                    frontier_phi_61_pred = _3089;
                    frontier_phi_61_pred_1 = _3094;
                    frontier_phi_61_pred_2 = _3093;
                    frontier_phi_61_pred_3 = _3092;
                    frontier_phi_61_pred_4 = _3091;
                    frontier_phi_61_pred_5 = _3090;
                }
                _2889 = frontier_phi_61_pred;
                _2899 = frontier_phi_61_pred_1;
                _2897 = frontier_phi_61_pred_2;
                _2895 = frontier_phi_61_pred_3;
                _2893 = frontier_phi_61_pred_4;
                _2891 = frontier_phi_61_pred_5;
                uint _3040 = _3039 + 1u;
                if (_3040 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3033 = _2889;
                    _3034 = _2891;
                    _3035 = _2893;
                    _3036 = _2895;
                    _3037 = _2897;
                    _3038 = _2899;
                    _3039 = _3040;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2888 = _2889;
            _2890 = _2891;
            _2892 = _2893;
            _2894 = _2895;
            _2896 = _2897;
            _2898 = _2899;
        }
        uvec4 _2902 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2903 = _2902.z;
        uint _2905 = (_2903 >> 8u) & 15u;
        float _3001;
        float _3003;
        float _3005;
        float _3007;
        float _3009;
        float _3011;
        if (((4294967295u << _2905) & _2785) == 0u)
        {
            _3001 = _2888;
            _3003 = _2890;
            _3005 = _2892;
            _3007 = _2894;
            _3009 = _2896;
            _3011 = _2898;
        }
        else
        {
            float _3026 = inversesqrt(dot(vec3(_2739, _2740, _2741), vec3(_2739, _2740, _2741)));
            float _3027 = _3026 * _2739;
            float _3028 = _3026 * _2740;
            float _3029 = _3026 * _2741;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2905 < ((_2903 >> 12u) & 15u))
            {
                float _3002;
                float _3004;
                float _3006;
                float _3008;
                float _3010;
                float _3012;
                float _3140 = _2888;
                float _3141 = _2890;
                float _3142 = _2892;
                float _3143 = _2894;
                float _3144 = _2896;
                float _3145 = _2898;
                uint _3146 = _2905;
                uint _3155;
                bool _3156;
                for (;;)
                {
                    _3155 = texelFetch(g_lightClassification, int((((_2779 << 5u) + (_2765 << 9u)) + (_3146 << 2u)) >> 2u)).x;
                    _3156 = _3155 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3156)
                    {
                        frontier_phi_67_pred = _3143;
                        frontier_phi_67_pred_1 = _3144;
                        frontier_phi_67_pred_2 = _3145;
                        frontier_phi_67_pred_3 = _3142;
                        frontier_phi_67_pred_4 = _3141;
                        frontier_phi_67_pred_5 = _3140;
                    }
                    else
                    {
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3636;
                        float _3637;
                        float _3638;
                        float _3353 = _3140;
                        float _3354 = _3141;
                        float _3355 = _3142;
                        float _3356 = _3143;
                        float _3357 = _3144;
                        float _3358 = _3145;
                        uint _3359 = _3155;
                        uint _3360;
                        vec4 _3385;
                        float _3386;
                        vec4 _3401;
                        vec3 _3413;
                        vec4 _3428;
                        vec4 _3443;
                        float _3489;
                        bool _3490;
                        for (;;)
                        {
                            uint _3370 = ((_3146 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3359));
                            _3360 = (_3359 + 4294967295u) & _3359;
                            uint _3372 = _3370 * 40u;
                            _3385 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3372)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 3u)).x));
                            _3386 = _3385.w;
                            uint _3388 = (_3370 * 40u) + 4u;
                            _3401 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3388)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 3u)).x));
                            uint _3403 = (_3370 * 40u) + 8u;
                            _3413 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x));
                            uint _3415 = (_3370 * 40u) + 16u;
                            _3428 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3415)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 3u)).x));
                            uint _3430 = (_3370 * 40u) + 20u;
                            _3443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 3u)).x));
                            uint _3445 = (_3370 * 40u) + 24u;
                            vec4 _3458 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3445)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 3u)).x));
                            uint _3464 = (_3370 * 40u) + 28u;
                            vec4 _3477 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 3u)).x));
                            _3489 = fma(_2741, _3477.z, fma(_2740, _3477.y, _3477.x * _2739)) + _3477.w;
                            _3490 = !((fma(_2741, _3458.z, fma(_2740, _3458.y, _3458.x * _2739)) + _3458.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3490)
                            {
                                float _3517 = _3385.x - _2739;
                                float _3518 = _3385.y - _2740;
                                float _3519 = _3385.z - _2741;
                                float _3520 = dot(vec3(_3517, _3518, _3519), vec3(_3517, _3518, _3519));
                                float _3523 = inversesqrt(_3520);
                                float _3524 = _3523 * _3517;
                                float _3525 = _3523 * _3518;
                                float _3526 = _3523 * _3519;
                                float _3530 = 1.0 - (_3520 / (_3386 * _3386));
                                float _4660 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3531 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                                float _3535 = sqrt(_3520) * _3401.w;
                                float _3537 = 1.39999997615814208984375 / (_3535 + 1.39999997615814208984375);
                                float _3538 = _3537 * _3537;
                                float _3541 = ((1.0 - _3538) * dot(vec3(_3524, _3525, _3526), vec3(_987, _990, _993))) + _3538;
                                float _3544 = _3535 * _3535;
                                float _3548 = (fma(_2741, _3428.z, fma(_2740, _3428.y, _3428.x * _2739)) + _3428.w) / _3489;
                                float _3549 = (fma(_2741, _3443.z, fma(_2740, _3443.y, _3443.x * _2739)) + _3443.w) / _3489;
                                float _3553 = 1.0 - dot(vec2(_3548, _3549), vec2(_3548, _3549));
                                float _4676 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                                float _3554 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
                                float _3555 = _3554 * (((isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0))) * _3531) / ((_3544 * 0.699999988079071044921875) + 1.0));
                                float _3567 = exp2(log2(1.0 / ((_3544 * 3.5) + 5.0)) * 0.25);
                                float _3568 = 1.0 - _1062;
                                float _3575 = sqrt(1.0 - ((1.0 - (_3568 * _3568)) * (1.0 - (_3567 * _3567))));
                                float _3576 = _3575 * _3575;
                                float _3577 = _3576 * _3576;
                                float _3578 = _3524 - _3027;
                                float _3579 = _3525 - _3028;
                                float _3580 = _3526 - _3029;
                                float _3584 = inversesqrt(dot(vec3(_3578, _3579, _3580), vec3(_3578, _3579, _3580)));
                                float _3588 = dot(vec3(_987, _990, _993), vec3((-0.0) - _3027, (-0.0) - _3028, (-0.0) - _3029));
                                float _4687 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3591 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                                float _3592 = dot(vec3(_987, _990, _993), vec3(_3584 * _3578, _3584 * _3579, _3584 * _3580));
                                float _4698 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                                float _3595 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                                float _3599 = ((_3595 * _3595) * (_3577 + (-1.0))) + 1.0;
                                float _3600 = _3537 * _3576;
                                float _3601 = _3600 * _3600;
                                float _3607 = ((1.0 - _3601) * dot(vec3(_987, _990, _993), vec3(_3524, _3525, _3526))) + _3601;
                                float _4709 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3608 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                                float _3609 = 1.0 - _3576;
                                float _3619 = (0.5 / (((_3608 * ((_3591 * _3609) + _3576)) + 9.9999999392252902907785028219223e-09) + (((_3608 * _3609) + _3576) * _3591))) * _3608;
                                float _4720 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                                float _3629 = (_3554 * _3531) * (((_3577 * 3.1415927410125732421875) * (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0)))) / ((_3599 * _3599) * ((_3544 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3629 * _3413.x;
                                frontier_phi_73_pred_1 = _3629 * _3413.y;
                                frontier_phi_73_pred_2 = _3555 * _3401.z;
                                frontier_phi_73_pred_3 = _3555 * _3401.y;
                                frontier_phi_73_pred_4 = _3555 * _3401.x;
                                frontier_phi_73_pred_5 = _3629 * _3413.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3633 = frontier_phi_73_pred;
                            _3634 = frontier_phi_73_pred_1;
                            _3638 = frontier_phi_73_pred_2;
                            _3637 = frontier_phi_73_pred_3;
                            _3636 = frontier_phi_73_pred_4;
                            _3635 = frontier_phi_73_pred_5;
                            _3343 = _3636 + _3356;
                            _3344 = _3637 + _3357;
                            _3345 = _3638 + _3358;
                            _3340 = _3633 + _3353;
                            _3341 = _3634 + _3354;
                            _3342 = _3635 + _3355;
                            if (_3360 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3353 = _3340;
                                _3354 = _3341;
                                _3355 = _3342;
                                _3356 = _3343;
                                _3357 = _3344;
                                _3358 = _3345;
                                _3359 = _3360;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3343;
                        frontier_phi_67_pred_1 = _3344;
                        frontier_phi_67_pred_2 = _3345;
                        frontier_phi_67_pred_3 = _3342;
                        frontier_phi_67_pred_4 = _3341;
                        frontier_phi_67_pred_5 = _3340;
                    }
                    _3008 = frontier_phi_67_pred;
                    _3010 = frontier_phi_67_pred_1;
                    _3012 = frontier_phi_67_pred_2;
                    _3006 = frontier_phi_67_pred_3;
                    _3004 = frontier_phi_67_pred_4;
                    _3002 = frontier_phi_67_pred_5;
                    uint _3147 = _3146 + 1u;
                    if (_3147 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3140 = _3002;
                        _3141 = _3004;
                        _3142 = _3006;
                        _3143 = _3008;
                        _3144 = _3010;
                        _3145 = _3012;
                        _3146 = _3147;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3010;
                frontier_phi_55_56_ladder_1 = _3012;
                frontier_phi_55_56_ladder_2 = _3008;
                frontier_phi_55_56_ladder_3 = _3006;
                frontier_phi_55_56_ladder_4 = _3004;
                frontier_phi_55_56_ladder_5 = _3002;
            }
            else
            {
                frontier_phi_55_56_ladder = _2896;
                frontier_phi_55_56_ladder_1 = _2898;
                frontier_phi_55_56_ladder_2 = _2894;
                frontier_phi_55_56_ladder_3 = _2892;
                frontier_phi_55_56_ladder_4 = _2890;
                frontier_phi_55_56_ladder_5 = _2888;
            }
            _3001 = frontier_phi_55_56_ladder_5;
            _3003 = frontier_phi_55_56_ladder_4;
            _3005 = frontier_phi_55_56_ladder_3;
            _3007 = frontier_phi_55_56_ladder_2;
            _3009 = frontier_phi_55_56_ladder;
            _3011 = frontier_phi_55_56_ladder_1;
        }
        float _3016 = isnan(1.0) ? _1046 : (isnan(_1046) ? 1.0 : min(_1046, 1.0));
        _2798 = (_3016 * _3007) + _2231;
        _2800 = (_3016 * _3009) + _2233;
        _2802 = (_3016 * _3011) + _2235;
        _2804 = ((_3001 * _1031) * _3016) + _2579;
        _2806 = ((_3003 * _1033) * _3016) + _2581;
        _2808 = ((_3005 * _1034) * _3016) + _2583;
    }
    else
    {
        _2798 = _2231;
        _2800 = _2233;
        _2802 = _2235;
        _2804 = _2579;
        _2806 = _2581;
        _2808 = _2583;
    }
    float _4736 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _4747 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _4758 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _4769 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _2833 = cbInstanceData._m0[_1006 + 6u].w * (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0)));
    float _2838 = _968 / cbSceneParam._m0[86u].x;
    float _2839 = _969 / cbSceneParam._m0[86u].y;
    vec4 _2853 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2838, _2839, (log2((isnan(cbSceneParam._m0[77u].w) ? _903 : (isnan(_903) ? cbSceneParam._m0[77u].w : min(_903, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2855 = _2853.x;
    float _2856 = _2853.y;
    float _2857 = _2853.z;
    float _2858 = _2853.w;
    float _2951;
    float _2953;
    float _2955;
    float _2957;
    if (_903 > cbSceneParam._m0[78u].w)
    {
        float _2913 = isnan(_903) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _903 : min(cbSceneParam._m0[80u].w, _903));
        float _2914 = _2913 / _903;
        float _2925 = _2914 * _953;
        float _2926 = _954 * _2914;
        float _2927 = (-0.0) - _2926;
        float _2929 = _2914 * _955;
        float _2931 = (cbSceneParam._m0[77u].w * _2927) / _2913;
        float _2932 = _2931 + cbSceneParam._m0[79u].w;
        float _2933 = cbSceneParam._m0[79u].w - _2926;
        float _2939 = sqrt(((_2925 * _2925) + (_2926 * _2926)) + (_2929 * _2929));
        float _2942 = (1.0 - (cbSceneParam._m0[77u].w / _2913)) * _2939;
        float _2947 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2949 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3102;
        if (abs((_2927 - _2931) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3102 = ((((_2932 > 0.0) ? exp2(_2947 * _2932) : (2.0 - exp2(_2949 * _2932))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2942;
        }
        else
        {
            float _3062 = 1.0 / cbSceneParam._m0[80u].x;
            float _3063 = isnan(_2933) ? _2932 : (isnan(_2932) ? _2933 : max(_2932, _2933));
            float _3064 = isnan(_2933) ? _2932 : (isnan(_2932) ? _2933 : min(_2932, _2933));
            float _3073 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : min(_3063, 0.0));
            float _3074 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : min(_3064, 0.0));
            _3102 = ((abs(_2939 / _2927) * cbSceneParam._m0[80u].y) * ((((_3073 - _3074) * 2.0) - ((exp2(_2947 * (isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0)))) - exp2(_2947 * (isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0))))) * _3062)) - ((exp2(_2949 * _3073) - exp2(_2949 * _3074)) * _3062))) + (_2942 * cbSceneParam._m0[80u].z);
        }
        vec4 _3104 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2838, _2839, 1.0), 0.0);
        float _3113 = exp2((_3102 * (-1.44269502162933349609375)) * (1.0 - _3104.w));
        float _3114 = log2(_3113);
        float _3130 = log2(_2858);
        _2951 = (exp2(_3130 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3114 * cbSceneParam._m0[78u].x)) * _3104.x) / cbSceneParam._m0[78u].x)) + _2855;
        _2953 = (exp2(_3130 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3114 * cbSceneParam._m0[78u].y)) * _3104.y) / cbSceneParam._m0[78u].y)) + _2856;
        _2955 = (exp2(_3130 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3114 * cbSceneParam._m0[78u].z)) * _3104.z) / cbSceneParam._m0[78u].z)) + _2857;
        _2957 = _3113 * _2858;
    }
    else
    {
        _2951 = _2855;
        _2953 = _2856;
        _2955 = _2857;
        _2957 = _2858;
    }
    float _2969 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2970 = _2969 == 3.0;
    float _2971 = log2(_2957);
    float _2978 = exp2(_2971 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0))) * (_2798 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1046))) + ((_2804 + ((isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0))) * _1850)) * cbPerFrame._m0[3u].x));
    float _2979 = exp2(_2971 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * (_2800 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1046))) + ((_2806 + ((isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0))) * _1850)) * cbPerFrame._m0[3u].x));
    float _2980 = exp2(_2971 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2802 + ((isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))) * _1046))) + ((_2808 + ((isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0))) * _1850)) * cbPerFrame._m0[3u].x));
    float _2989 = (_2969 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2989 * (_2970 ? _2978 : (_2978 + (cbSceneParam._m0[72u].w * _2951)));
    SV_Target.y = _2989 * (_2970 ? _2979 : (_2979 + (cbSceneParam._m0[72u].w * _2953)));
    SV_Target.z = _2989 * (_2970 ? _2980 : (_2980 + (cbSceneParam._m0[72u].w * _2955)));
    SV_Target.w = _2833;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2833;
}


