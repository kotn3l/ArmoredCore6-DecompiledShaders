#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24;
layout(set = 0, binding = 12) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 13) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 18) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in float TEXCOORD_8;
layout(location = 7, component = 1) in float TEXCOORD_9;
layout(location = 7, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1411;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _284 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _288 = _284.z;
    float _301 = exp2(log2((1.0 - _288) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _302 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _303 = isnan(1.0) ? _302 : (isnan(_302) ? 1.0 : min(_302, 1.0));
    vec4 _316 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _324 = log2(0.0);
    float _326 = exp2(_324 * cbMtdParam._m0[23u].x);
    float _327 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _328 = isnan(1.0) ? _327 : (isnan(_327) ? 1.0 : min(_327, 1.0));
    float _337 = exp2(log2(cbMtdParam._m0[23u].y * _288) * cbMtdParam._m0[22u].y);
    float _338 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _339 = isnan(1.0) ? _338 : (isnan(_338) ? 1.0 : min(_338, 1.0));
    float _360 = roundEven(5.0 - ((texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _361 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _362 = isnan(4.0) ? _361 : (isnan(_361) ? 4.0 : min(_361, 4.0));
    float _374 = floor(_362);
    vec4 _377 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w, _374));
    vec4 _401 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _412 = cbMtdParam._m0[9u].x * _401.x;
    float _413 = cbMtdParam._m0[9u].y * _401.y;
    float _414 = cbMtdParam._m0[9u].z * _401.z;
    float _421 = (((cbMtdParam._m0[10u].x * _377.x) - _412) * _339) + _412;
    float _422 = (((cbMtdParam._m0[10u].y * _377.y) - _413) * _339) + _413;
    float _423 = (((cbMtdParam._m0[10u].z * _377.z) - _414) * _339) + _414;
    float _429 = exp2(log2(_284.w) * cbMtdParam._m0[23u].w);
    vec4 _442 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _462 = (((cbMtdParam._m0[16u].x * _442.x) - _421) * _429) + _421;
    float _463 = (((cbMtdParam._m0[16u].y * _442.y) - _422) * _429) + _422;
    float _464 = (((cbMtdParam._m0[16u].z * _442.z) - _423) * _429) + _423;
    vec4 _477 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _497 = (((cbMtdParam._m0[19u].x * _477.x) - _462) * _328) + _462;
    float _498 = (((cbMtdParam._m0[19u].y * _477.y) - _463) * _328) + _463;
    float _499 = (((cbMtdParam._m0[19u].z * _477.z) - _464) * _328) + _464;
    vec4 _512 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _537 = (_316.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _512.x) - _497) * _303) + _497);
    float _539 = (_316.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _512.y) - _498) * _303) + _498);
    float _541 = (_316.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _512.z) - _499) * _303) + _499);
    float _545 = cbMtdParam._m0[28u].x * TEXCOORD_8;
    float _554 = (_545 - (((texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _545))) * (cbMtdParam._m0[27u].w + 1.0);
    float _3776 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _555 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _562 = ((cbMtdParam._m0[21u].x - _537) * _555) + _537;
    float _563 = ((cbMtdParam._m0[21u].y - _539) * _555) + _539;
    float _564 = ((cbMtdParam._m0[21u].z - _541) * _555) + _541;
    vec4 _578 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24, SS_ClampLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.z) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.w) + cbTextureTilingScale._m0[11u].w));
    float _586 = (_578.x + (-1.0)) + (cbMtdParam._m0[28u].y * 2.0);
    float _3787 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _592 = exp2(log2(cbMtdParam._m0[28u].w * (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0)))) * cbMtdParam._m0[28u].z);
    float _3798 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _593 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _197[5];
    float _198[5];
    _197[0u] = cbMtdParam._m0[29u].z;
    _198[0u] = cbMtdParam._m0[29u].w;
    _197[1u] = cbMtdParam._m0[31u].z;
    _198[1u] = cbMtdParam._m0[31u].w;
    _197[2u] = cbMtdParam._m0[31u].x;
    _198[2u] = cbMtdParam._m0[31u].y;
    _197[3u] = cbMtdParam._m0[30u].z;
    _198[3u] = cbMtdParam._m0[30u].w;
    _197[4u] = cbMtdParam._m0[30u].x;
    _198[4u] = cbMtdParam._m0[30u].y;
    float _635 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    uint _637 = uint(int(isnan(4.0) ? _635 : (isnan(_635) ? 4.0 : min(_635, 4.0))));
    float _644 = ((_198[_637] - cbMtdParam._m0[22u].z) * _339) + cbMtdParam._m0[22u].z;
    float _647 = ((cbMtdParam._m0[22u].w - _644) * _429) + _644;
    float _650 = ((cbMtdParam._m0[25u].x - _647) * _328) + _647;
    float _653 = ((cbMtdParam._m0[26u].x - _650) * _303) + _650;
    float _655 = _653 - (_653 * _545);
    vec4 _672 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w, _374));
    vec4 _690 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _692 = _690.x;
    float _693 = _690.y;
    float _698 = cbMtdParam._m0[22u].x + _690.z;
    float _701 = (((_672.z + _197[_637]) - _698) * _339) + _698;
    vec4 _714 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _725 = (((_714.z - _701) + cbMtdParam._m0[29u].x) * _429) + _701;
    float _730 = ((((_288 * 2.0) * _725) - _725) * cbMtdParam._m0[24u].w) + _725;
    vec4 _742 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _753 = (((cbMtdParam._m0[23u].z + _742.z) - _730) * _328) + _730;
    vec4 _766 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _777 = (((_766.z - _753) + cbMtdParam._m0[26u].y) * _303) + _753;
    vec4 _792 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _806 = ((cbMtdParam._m0[27u].y * _545) * ((_792.z * cbMtdParam._m0[27u].x) - _777)) + _777;
    float _818 = ((_672.x - _692) * _339) + _692;
    float _819 = ((_672.y - _693) * _339) + _693;
    float _824 = ((_714.x - _818) * _429) + _818;
    float _825 = ((_714.y - _819) * _429) + _819;
    float _830 = ((_742.x - _824) * _328) + _824;
    float _831 = ((_742.y - _825) * _328) + _825;
    float _840 = ((((_766.x - _830) * _303) + _830) * 2.0) + (-1.0);
    float _841 = ((((_766.y - _831) * _303) + _831) * 2.0) + (-1.0);
    float _842 = dot(vec2(_840, _841), vec2(_840, _841));
    float _3819 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _847 = sqrt(1.0 - (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))));
    float _857 = ((cbMtdParam._m0[25u].y * ((_284.x * 2.0) + (-1.0))) + _840) + ((((_792.x * 2.0) + (-1.0)) * _545) * cbMtdParam._m0[26u].w);
    float _858 = ((cbMtdParam._m0[25u].y * ((_284.y * 2.0) + (-1.0))) + _841) + (((cbMtdParam._m0[28u].x * TEXCOORD_9) * ((_792.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _861 = fma(_847, _233 * NORMAL.x, fma(_858, _240 * TANGENT.x, (_226 * _218) * _857));
    float _864 = fma(_847, _233 * NORMAL.y, fma(_858, _240 * TANGENT.y, (_226 * _219) * _857));
    float _867 = fma(_847, _233 * NORMAL.z, fma(_858, _240 * TANGENT.z, (_226 * _220) * _857));
    float _871 = inversesqrt(dot(vec3(_861, _864, _867), vec3(_861, _864, _867)));
    float _872 = _871 * _861;
    float _873 = _871 * _864;
    float _874 = _871 * _867;
    float _3830 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _875 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _3841 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _876 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _3852 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _3863 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _3874 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _3885 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _880 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _896 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _936 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _946 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _936);
    float _947 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _936);
    float _948 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _936);
    float _952 = inversesqrt(dot(vec3(_946, _947, _948), vec3(_946, _947, _948)));
    float _953 = _946 * _952;
    float _954 = _947 * _952;
    float _955 = _948 * _952;
    float _961 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _962 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _980 = fma(_874, cbSceneParam._m0[5u].z, fma(_873, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _872));
    float _983 = fma(_874, cbSceneParam._m0[6u].z, fma(_873, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _872));
    float _986 = fma(_874, cbSceneParam._m0[7u].z, fma(_873, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _872));
    uint _999 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1001 = (_999 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1007 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0)))) * cbInstanceData._m0[_1001].x;
    float _1008 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0)))) * cbInstanceData._m0[_1001].y;
    float _1009 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) * cbInstanceData._m0[_1001].z;
    float _3896 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _1010 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _3907 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _1011 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _3918 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _1012 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _1013 = 1.0 - _880;
    float _1014 = _1010 * _1013;
    float _1015 = _1011 * _1013;
    float _1016 = _1012 * _1013;
    float _1021 = (_1010 + (-0.039999999105930328369140625)) * _880;
    float _1022 = (_1011 + (-0.039999999105930328369140625)) * _880;
    float _1023 = (_1012 + (-0.039999999105930328369140625)) * _880;
    float _1024 = _1021 + 0.039999999105930328369140625;
    float _1026 = _1022 + 0.039999999105930328369140625;
    float _1027 = _1023 + 0.039999999105930328369140625;
    vec4 _1036 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _961, cbSceneParam._m0[86u].y * _962));
    float _1039 = _1036.x * TEXCOORD_5.w;
    float _1040 = dot(vec3(_872, _873, _874), vec3(_953, _954, _955));
    float _1043 = _1040 * 2.0;
    float _1047 = (_1043 * _872) - _953;
    float _1048 = (_1043 * _873) - _954;
    float _1049 = (_1043 * _874) - _955;
    float _1053 = abs(dot(vec3(_953, _954, _955), vec3(_872, _873, _874)));
    float _3929 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _1055 = sqrt(_876);
    float _1066 = exp2((_1055 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1055 * 3.0));
    float _1072 = (1.0 - _1066) * ((_1055 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1073 = _1066 * _1055;
    float _1101 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1105 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1109 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1410;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1135 = fma(_1109, cbModelParam._m0[26u].z, fma(_1105, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1101));
        float _1139 = fma(_1109, cbModelParam._m0[27u].z, fma(_1105, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1101));
        float _1143 = fma(_1109, cbModelParam._m0[28u].z, fma(_1105, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1101));
        float _1168 = _1101 + _872;
        float _1169 = _1105 + _873;
        float _1170 = _1109 + _874;
        float _1180 = fma(_1170, cbModelParam._m0[26u].z, fma(_1169, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1168)) - _1135;
        float _1181 = fma(_1170, cbModelParam._m0[27u].z, fma(_1169, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1168)) - _1139;
        float _1182 = fma(_1170, cbModelParam._m0[28u].z, fma(_1169, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1168)) - _1143;
        float _1186 = inversesqrt(dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182)));
        float _1199 = ((_1186 * _1180) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1135 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1200 = ((_1186 * _1181) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1139 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1201 = ((_1186 * _1182) / cbModelParam._m0[34u].z) + ((((((_1143 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        float _1238 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1204.x + (-0.5));
        float _1240 = _1238 * (_1204.y + (-0.5));
        float _1241 = _1238 * (_1204.z + (-0.5));
        float _1248 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1211.x + (-0.5));
        float _1250 = _1248 * (_1211.y + (-0.5));
        float _1251 = _1248 * (_1211.z + (-0.5));
        float _1258 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1218.x + (-0.5));
        float _1260 = _1258 * (_1218.y + (-0.5));
        float _1261 = _1258 * (_1218.z + (-0.5));
        float _1268 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1225.x + (-0.5));
        float _1270 = _1268 * (_1225.y + (-0.5));
        float _1271 = _1268 * (_1225.z + (-0.5));
        float _1272 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1275 = _1239 * 0.5;
        float _1276 = _1249 * 0.5;
        float _1277 = _1259 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1292 = (dot(vec3(_872, _873, _874), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _3955 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1302 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1272 + 9.9999997473787516355514526367188e-06);
        float _3966 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _3977 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_1304 + 1.0))) + _1309) * _1272;
        float _1319 = _1240 * 0.5;
        float _1320 = _1250 * 0.5;
        float _1321 = _1260 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1335 = (dot(vec3(_872, _873, _874), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _3988 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1344 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _3999 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1346 = _1345 * 2.0;
        float _1350 = (1.0 - _1345) / (_1345 + 1.0);
        float _4010 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1360 = ((((1.0 - _1351) * (_1346 + 2.0)) * exp2(log2(isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_1346 + 1.0))) + _1351) * _1273;
        float _1361 = _1241 * 0.5;
        float _1362 = _1251 * 0.5;
        float _1363 = _1261 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1377 = (dot(vec3(_872, _873, _874), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _4021 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1386 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1274 + 9.9999997473787516355514526367188e-06);
        float _4032 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1388 = _1387 * 2.0;
        float _1392 = (1.0 - _1387) / (_1387 + 1.0);
        float _4043 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1402 = ((((1.0 - _1393) * (_1388 + 2.0)) * exp2(log2(isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1388 + 1.0))) + _1393) * _1274;
        _1410 = _1241;
        _1412 = _1240;
        _1413 = _1239;
        _1414 = _1251;
        _1415 = _1250;
        _1416 = _1249;
        _1417 = _1261;
        _1418 = _1260;
        _1419 = _1259;
        _1420 = _1274;
        _1421 = _1273;
        _1422 = _1272;
        _1423 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
        _1424 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)));
        _1425 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)));
    }
    else
    {
        _1410 = _1411;
        _1412 = _1411;
        _1413 = _1411;
        _1414 = _1411;
        _1415 = _1411;
        _1416 = _1411;
        _1417 = _1411;
        _1418 = _1411;
        _1419 = _1411;
        _1420 = _1411;
        _1421 = _1411;
        _1422 = _1411;
        _1423 = 0.0;
        _1424 = 0.0;
        _1425 = 0.0;
    }
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1448 = fma(_1109, cbModelParam._m0[30u].z, fma(_1105, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1101));
        float _1452 = fma(_1109, cbModelParam._m0[31u].z, fma(_1105, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1101));
        float _1456 = fma(_1109, cbModelParam._m0[32u].z, fma(_1105, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1101));
        float _1479 = _1101 + _872;
        float _1480 = _1105 + _873;
        float _1481 = _1109 + _874;
        float _1491 = fma(_1481, cbModelParam._m0[30u].z, fma(_1480, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1479)) - _1448;
        float _1492 = fma(_1481, cbModelParam._m0[31u].z, fma(_1480, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1479)) - _1452;
        float _1493 = fma(_1481, cbModelParam._m0[32u].z, fma(_1480, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1479)) - _1456;
        float _1497 = inversesqrt(dot(vec3(_1491, _1492, _1493), vec3(_1491, _1492, _1493)));
        float _1510 = ((_1497 * _1491) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1448 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1511 = ((_1497 * _1492) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1452 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1512 = ((_1497 * _1493) / cbModelParam._m0[35u].z) + ((((((_1456 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1514 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1510, _1511, _1512), 0.0);
        vec4 _1521 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1510, _1511, _1512), 0.0);
        vec4 _1528 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1510, _1511, _1512), 0.0);
        vec4 _1535 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1510, _1511, _1512), 0.0);
        float _1547 = exp2((_1514.w + (-0.5)) * 20.0) * 2.0;
        float _1548 = _1547 * (_1514.x + (-0.5));
        float _1549 = _1547 * (_1514.y + (-0.5));
        float _1550 = _1547 * (_1514.z + (-0.5));
        float _1557 = exp2((_1521.w + (-0.5)) * 20.0) * 2.0;
        float _1558 = _1557 * (_1521.x + (-0.5));
        float _1559 = _1557 * (_1521.y + (-0.5));
        float _1560 = _1557 * (_1521.z + (-0.5));
        float _1567 = exp2((_1528.w + (-0.5)) * 20.0) * 2.0;
        float _1568 = _1567 * (_1528.x + (-0.5));
        float _1569 = _1567 * (_1528.y + (-0.5));
        float _1570 = _1567 * (_1528.z + (-0.5));
        float _1577 = exp2((_1535.w + (-0.5)) * 20.0) * 2.0;
        float _1578 = _1577 * (_1535.x + (-0.5));
        float _1579 = _1577 * (_1535.y + (-0.5));
        float _1580 = _1577 * (_1535.z + (-0.5));
        float _1581 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1582 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1583 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1584 = _1548 * 0.5;
        float _1585 = _1558 * 0.5;
        float _1586 = _1568 * 0.5;
        float _1587 = dot(vec3(_1584, _1585, _1586), vec3(_1584, _1585, _1586));
        float _1592 = (_1587 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1587);
        float _1600 = (dot(vec3(_872, _873, _874), vec3(_1592 * _1584, _1592 * _1585, _1592 * _1586)) + 1.0) * 0.5;
        float _4084 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1609 = sqrt(((_1585 * _1585) + (_1584 * _1584)) + (_1586 * _1586)) / (_1581 + 9.9999997473787516355514526367188e-06);
        float _4095 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1611 = _1610 * 2.0;
        float _1615 = (1.0 - _1610) / (_1610 + 1.0);
        float _4106 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1625 = ((((1.0 - _1616) * (_1611 + 2.0)) * exp2(log2(isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1611 + 1.0))) + _1616) * _1581;
        float _1626 = _1549 * 0.5;
        float _1627 = _1559 * 0.5;
        float _1628 = _1569 * 0.5;
        float _1629 = dot(vec3(_1626, _1627, _1628), vec3(_1626, _1627, _1628));
        float _1634 = (_1629 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1629);
        float _1642 = (dot(vec3(_872, _873, _874), vec3(_1634 * _1626, _1634 * _1627, _1634 * _1628)) + 1.0) * 0.5;
        float _4117 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1651 = sqrt(((_1627 * _1627) + (_1626 * _1626)) + (_1628 * _1628)) / (_1582 + 9.9999997473787516355514526367188e-06);
        float _4128 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1653 = _1652 * 2.0;
        float _1657 = (1.0 - _1652) / (_1652 + 1.0);
        float _4139 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1667 = ((((1.0 - _1658) * (_1653 + 2.0)) * exp2(log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_1653 + 1.0))) + _1658) * _1582;
        float _1668 = _1550 * 0.5;
        float _1669 = _1560 * 0.5;
        float _1670 = _1570 * 0.5;
        float _1671 = dot(vec3(_1668, _1669, _1670), vec3(_1668, _1669, _1670));
        float _1676 = (_1671 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1671);
        float _1684 = (dot(vec3(_872, _873, _874), vec3(_1676 * _1668, _1676 * _1669, _1676 * _1670)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1693 = sqrt(((_1669 * _1669) + (_1668 * _1668)) + (_1670 * _1670)) / (_1583 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1695 = _1694 * 2.0;
        float _1699 = (1.0 - _1694) / (_1694 + 1.0);
        float _4172 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1709 = ((((1.0 - _1700) * (_1695 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1695 + 1.0))) + _1700) * _1583;
        _1717 = _1550;
        _1718 = _1549;
        _1719 = _1548;
        _1720 = _1560;
        _1721 = _1559;
        _1722 = _1558;
        _1723 = _1570;
        _1724 = _1569;
        _1725 = _1568;
        _1726 = _1583;
        _1727 = _1582;
        _1728 = _1581;
        _1729 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)));
        _1730 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)));
        _1731 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)));
    }
    else
    {
        _1717 = _1411;
        _1718 = _1411;
        _1719 = _1411;
        _1720 = _1411;
        _1721 = _1411;
        _1722 = _1411;
        _1723 = _1411;
        _1724 = _1411;
        _1725 = _1411;
        _1726 = _1411;
        _1727 = _1411;
        _1728 = _1411;
        _1729 = 0.0;
        _1730 = 0.0;
        _1731 = 0.0;
    }
    float _1741 = (cbModelParam._m0[1u].x * (_1729 - _1423)) + _1423;
    float _1742 = (cbModelParam._m0[1u].x * (_1730 - _1424)) + _1424;
    float _1743 = (cbModelParam._m0[1u].x * (_1731 - _1425)) + _1425;
    float _1764 = fma(_1743, cbSceneParam._m0[89u].z, fma(_1742, cbSceneParam._m0[89u].y, _1741 * cbSceneParam._m0[89u].x));
    float _1767 = fma(_1743, cbSceneParam._m0[90u].z, fma(_1742, cbSceneParam._m0[90u].y, _1741 * cbSceneParam._m0[90u].x));
    float _1770 = fma(_1743, cbSceneParam._m0[91u].z, fma(_1742, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1741));
    float _1785 = _1047 * 0.5;
    float _1786 = _1048 * 0.5;
    float _1787 = _1049 * 0.5;
    float _1788 = dot(vec4(_1785, _1786, _1787, 1.0), vec4(_1719, _1722, _1725, _1728));
    float _1791 = dot(vec4(_1785, _1786, _1787, 1.0), vec4(_1718, _1721, _1724, _1727));
    float _1794 = dot(vec4(_1785, _1786, _1787, 1.0), vec4(_1717, _1720, _1723, _1726));
    float _1828;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1801 = dot(vec4(_1785, _1786, _1787, 1.0), vec4(_1410, _1414, _1417, _1420));
        float _1805 = dot(vec4(_1785, _1786, _1787, 1.0), vec4(_1412, _1415, _1418, _1421));
        float _1809 = dot(vec4(_1785, _1786, _1787, 1.0), vec4(_1413, _1416, _1419, _1422));
        float _1816 = dot(vec4(cbModelParam._m0[39u]), vec4(_1785, _1786, _1787, 1.0));
        _1828 = dot(vec3(isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)), isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)), isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1816) ? 0.0 : (isnan(0.0) ? _1816 : max(0.0, _1816))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1828 = 1.0;
    }
    float _1839;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1830 = dot(vec4(cbModelParam._m0[40u]), vec4(_1785, _1786, _1787, 1.0));
        _1839 = dot(vec3(isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0)), isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)), isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1830) ? 0.0 : (isnan(0.0) ? _1830 : max(0.0, _1830))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1839 = 1.0;
    }
    float _1843 = (_1839 * cbModelParam._m0[1u].x) + (_1828 * (1.0 - cbModelParam._m0[1u].x));
    float _1853 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _876);
    float _1854 = isnan(_1853) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1853 : min(cbModelParam._m0[25u].z, _1853));
    float _1934;
    float _1936;
    float _1938;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1901 = fma(_1109, cbModelParam._m0[13u].z, fma(_1105, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1101)) + cbModelParam._m0[13u].w;
        float _1905 = fma(_1109, cbModelParam._m0[14u].z, fma(_1105, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1101)) + cbModelParam._m0[14u].w;
        float _1909 = fma(_1109, cbModelParam._m0[15u].z, fma(_1105, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1101)) + cbModelParam._m0[15u].w;
        float _1912 = fma(_1049, cbModelParam._m0[13u].z, fma(_1048, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1047));
        float _1915 = fma(_1049, cbModelParam._m0[14u].z, fma(_1048, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1047));
        float _1918 = fma(_1049, cbModelParam._m0[15u].z, fma(_1048, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1047));
        float _1946;
        if (_1912 > 0.0)
        {
            _1946 = abs((1.0 - _1901) / _1912);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1912 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1901 + 1.0) / _1912);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1946 = frontier_phi_14_12_ladder;
        }
        float _2148;
        if (_1915 > 0.0)
        {
            _2148 = abs((1.0 - _1905) / _1915);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1915 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1905 + 1.0) / _1915);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2148 = frontier_phi_23_19_ladder;
        }
        float _2402;
        if (_1918 > 0.0)
        {
            _2402 = abs((1.0 - _1909) / _1918);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1909 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2402 = frontier_phi_35_30_ladder;
        }
        float _2404 = isnan(_2148) ? _1946 : (isnan(_1946) ? _2148 : min(_1946, _2148));
        float _2405 = isnan(_2402) ? _2404 : (isnan(_2404) ? _2402 : min(_2404, _2402));
        float _2409 = (_2405 * _1912) + _1901;
        float _2410 = (_2405 * _1915) + _1905;
        float _2411 = (_2405 * _1918) + _1909;
        float _2412 = _2405 * 9.9999997473787516355514526367188e-05;
        float _2414 = (-1.0) - _2412;
        float _2416 = _2412 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2411 > _2416) || ((_2411 < _2414) || ((_2410 > _2416) || ((_2410 < _2414) || ((_2409 < _2414) || (_2409 > _2416))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2539 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2411, cbModelParam._m0[9u].z, fma(_2410, cbModelParam._m0[9u].y, _2409 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2411, cbModelParam._m0[10u].z, fma(_2410, cbModelParam._m0[10u].y, _2409 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2411, cbModelParam._m0[11u].z, fma(_2410, cbModelParam._m0[11u].y, _2409 * cbModelParam._m0[11u].x))), _1854);
            frontier_phi_13_35_ladder = _2539.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2539.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2539.x * cbModelParam._m0[1u].y;
        }
        _1934 = frontier_phi_13_35_ladder_2;
        _1936 = frontier_phi_13_35_ladder_1;
        _1938 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1922 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1047, _1048, _1049), _1854);
        _1934 = _1922.x * cbModelParam._m0[1u].y;
        _1936 = _1922.y * cbModelParam._m0[1u].y;
        _1938 = _1922.z * cbModelParam._m0[1u].y;
    }
    float _1942 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _876);
    float _1943 = isnan(_1942) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1942 : min(cbModelParam._m0[25u].w, _1942));
    float _2032;
    float _2034;
    float _2036;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1996 = fma(_1109, cbModelParam._m0[21u].z, fma(_1105, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1101)) + cbModelParam._m0[21u].w;
        float _2000 = fma(_1109, cbModelParam._m0[22u].z, fma(_1105, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1101)) + cbModelParam._m0[22u].w;
        float _2004 = fma(_1109, cbModelParam._m0[23u].z, fma(_1105, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1101)) + cbModelParam._m0[23u].w;
        float _2007 = fma(_1049, cbModelParam._m0[21u].z, fma(_1048, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1047));
        float _2010 = fma(_1049, cbModelParam._m0[22u].z, fma(_1048, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1047));
        float _2013 = fma(_1049, cbModelParam._m0[23u].z, fma(_1048, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1047));
        float _2153;
        if (_2007 > 0.0)
        {
            _2153 = abs((1.0 - _1996) / _2007);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2007 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1996 + 1.0) / _2007);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2153 = frontier_phi_25_21_ladder;
        }
        float _2429;
        if (_2010 > 0.0)
        {
            _2429 = abs((1.0 - _2000) / _2010);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2010 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2000 + 1.0) / _2010);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2429 = frontier_phi_37_32_ladder;
        }
        float _2642;
        if (_2013 > 0.0)
        {
            _2642 = abs((1.0 - _2004) / _2013);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2013 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2004 + 1.0) / _2013);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2642 = frontier_phi_46_43_ladder;
        }
        float _2644 = isnan(_2429) ? _2153 : (isnan(_2153) ? _2429 : min(_2153, _2429));
        float _2645 = isnan(_2642) ? _2644 : (isnan(_2644) ? _2642 : min(_2644, _2642));
        float _2649 = (_2645 * _2007) + _1996;
        float _2650 = (_2645 * _2010) + _2000;
        float _2651 = (_2645 * _2013) + _2004;
        float _2652 = _2645 * 9.9999997473787516355514526367188e-05;
        float _2653 = (-1.0) - _2652;
        float _2655 = _2652 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2651 > _2655) || ((_2651 < _2653) || ((_2650 > _2655) || ((_2650 < _2653) || ((_2649 < _2653) || (_2649 > _2655))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2852 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2651, cbModelParam._m0[17u].z, fma(_2650, cbModelParam._m0[17u].y, _2649 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2651, cbModelParam._m0[18u].z, fma(_2650, cbModelParam._m0[18u].y, _2649 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2651, cbModelParam._m0[19u].z, fma(_2650, cbModelParam._m0[19u].y, _2649 * cbModelParam._m0[19u].x))), _1943);
            frontier_phi_22_46_ladder = _2852.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2852.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2852.x * cbModelParam._m0[1u].z;
        }
        _2032 = frontier_phi_22_46_ladder_2;
        _2034 = frontier_phi_22_46_ladder_1;
        _2036 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2016 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1047, _1048, _1049), _1943);
        _2032 = _2016.x * cbModelParam._m0[1u].z;
        _2034 = _2016.y * cbModelParam._m0[1u].z;
        _2036 = _2016.z * cbModelParam._m0[1u].z;
    }
    float _2049 = (((_1072 * _1024) + _1073) * _1039) * ((cbModelParam._m0[1u].w * (_2032 - _1934)) + _1934);
    float _2051 = (((_1072 * _1026) + _1073) * _1039) * ((cbModelParam._m0[1u].w * (_2034 - _1936)) + _1936);
    float _2053 = (((_1072 * _1027) + _1073) * _1039) * ((cbModelParam._m0[1u].w * (_2036 - _1938)) + _1938);
    float _2056 = fma(_2053, cbSceneParam._m0[89u].z, fma(_2051, cbSceneParam._m0[89u].y, _2049 * cbSceneParam._m0[89u].x));
    float _2059 = fma(_2053, cbSceneParam._m0[90u].z, fma(_2051, cbSceneParam._m0[90u].y, _2049 * cbSceneParam._m0[90u].x));
    float _2062 = fma(_2053, cbSceneParam._m0[91u].z, fma(_2051, cbSceneParam._m0[91u].y, _2049 * cbSceneParam._m0[91u].x));
    uvec4 _2072 = floatBitsToUint(cbInstanceData._m0[_999 + 5u]);
    uint _2074 = _2072.x * 14u;
    uint _2075 = _2074 + 13u;
    float _2082 = _1039 + (-1.0);
    float _2087 = (cbLight._m0[_2075].x * _2082) + 1.0;
    float _2088 = (cbLight._m0[_2075].y * _2082) + 1.0;
    float _2089 = (cbLight._m0[_2075].z * _2082) + 1.0;
    float _2090 = (cbLight._m0[_2075].w * _2082) + 1.0;
    uint _2091 = _2074 + 5u;
    float _2097 = isnan(1.0) ? _2088 : (isnan(_2088) ? 1.0 : min(_2088, 1.0));
    uint _2101 = _2074 + 4u;
    float _2107 = isnan(1.0) ? _2087 : (isnan(_2087) ? 1.0 : min(_2087, 1.0));
    uint _2111 = _2074 | 1u;
    float _2122 = dot(vec3(cbLight._m0[_2074].xyz), vec3(_872, _873, _874));
    float _2125 = dot(vec3(cbLight._m0[_2111].xyz), vec3(_872, _873, _874));
    float _4308 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _4319 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2130 = (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * 0.3183098733425140380859375;
    float _2132 = (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * 0.3183098733425140380859375;
    float _2139 = ((cbLight._m0[_2091].x * _2097) * _2132) + ((cbLight._m0[_2101].x * _2107) * _2130);
    float _2140 = ((_2097 * cbLight._m0[_2091].y) * _2132) + ((_2107 * cbLight._m0[_2101].y) * _2130);
    float _2141 = ((_2097 * cbLight._m0[_2091].z) * _2132) + ((_2107 * cbLight._m0[_2101].z) * _2130);
    uvec4 _2145 = floatBitsToUint(cbLight._m0[_2074 + 12u]);
    bool _2147 = _2145.x == 0u;
    float _2158;
    float _2160;
    float _2162;
    if (_2147)
    {
        _2158 = _2139;
        _2160 = _2140;
        _2162 = _2141;
    }
    else
    {
        uint _2166 = _2074 + 6u;
        float _2182 = (dot(vec3(cbLight._m0[_2074 + 2u].xyz), vec3(_872, _873, _874)) * 0.5) + 0.5;
        float _2183 = _2182 * _2182;
        float _4330 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
        float _2184 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _2185 = isnan(1.0) ? _2089 : (isnan(_2089) ? 1.0 : min(_2089, 1.0));
        _2158 = (((cbLight._m0[_2166].x * 0.3183098733425140380859375) * _2184) * _2185) + _2139;
        _2160 = (((cbLight._m0[_2166].y * 0.3183098733425140380859375) * _2184) * _2185) + _2140;
        _2162 = (((cbLight._m0[_2166].z * 0.3183098733425140380859375) * _2184) * _2185) + _2141;
    }
    bool _2165 = _2145.y == 0u;
    float _2203;
    float _2205;
    float _2207;
    if (_2165)
    {
        _2203 = _2158;
        _2205 = _2160;
        _2207 = _2162;
    }
    else
    {
        uint _2373 = _2074 + 7u;
        float _2389 = (dot(vec3(cbLight._m0[_2074 + 3u].xyz), vec3(_872, _873, _874)) * 0.5) + 0.5;
        float _2390 = _2389 * _2389;
        float _4346 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2391 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _2392 = isnan(1.0) ? _2090 : (isnan(_2090) ? 1.0 : min(_2090, 1.0));
        _2203 = (((cbLight._m0[_2373].x * 0.3183098733425140380859375) * _2391) * _2392) + _2158;
        _2205 = (((cbLight._m0[_2373].y * 0.3183098733425140380859375) * _2391) * _2392) + _2160;
        _2207 = (((cbLight._m0[_2373].z * 0.3183098733425140380859375) * _2391) * _2392) + _2162;
    }
    uint _2210 = _2074 + 8u;
    float _2223 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2074].w)) * _876) * 0.949999988079071044921875);
    float _2224 = _2223 * _2223;
    float _2225 = cbLight._m0[_2074].x + _953;
    float _2226 = cbLight._m0[_2074].y + _954;
    float _2227 = cbLight._m0[_2074].z + _955;
    float _2231 = inversesqrt(dot(vec3(_2225, _2226, _2227), vec3(_2225, _2226, _2227)));
    float _2232 = _2231 * _2225;
    float _2233 = _2231 * _2226;
    float _2234 = _2231 * _2227;
    float _2235 = dot(vec3(_872, _873, _874), vec3(cbLight._m0[_2074].xyz));
    float _4362 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2238 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
    float _4373 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _2239 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
    float _2240 = dot(vec3(_872, _873, _874), vec3(_2232, _2233, _2234));
    float _4384 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2243 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
    float _2244 = dot(vec3(cbLight._m0[_2074].xyz), vec3(_2232, _2233, _2234));
    float _4395 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2248 = _2224 * _2224;
    float _2252 = ((_2243 * _2243) * (_2248 + (-1.0))) + 1.0;
    float _2260 = exp2(log2(1.0 - (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0)))) * 5.0);
    float _2261 = 0.959999978542327880859375 - _1021;
    float _2263 = 0.959999978542327880859375 - _1022;
    float _2264 = 0.959999978542327880859375 - _1023;
    float _2271 = 1.0 - _2224;
    float _2282 = (0.5 / (((_2239 * ((_2238 * _2271) + _2224)) + 9.9999999392252902907785028219223e-09) + (((_2239 * _2271) + _2224) * _2238))) * _2238;
    float _4406 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2284 = (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_2248 / ((_2252 * _2252) * 3.141590118408203125));
    uint _2295 = _2074 + 9u;
    float _2306 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2111].w)) * _876) * 0.949999988079071044921875);
    float _2307 = _2306 * _2306;
    float _2308 = cbLight._m0[_2111].x + _953;
    float _2309 = cbLight._m0[_2111].y + _954;
    float _2310 = cbLight._m0[_2111].z + _955;
    float _2314 = inversesqrt(dot(vec3(_2308, _2309, _2310), vec3(_2308, _2309, _2310)));
    float _2315 = _2314 * _2308;
    float _2316 = _2314 * _2309;
    float _2317 = _2314 * _2310;
    float _2318 = dot(vec3(_872, _873, _874), vec3(cbLight._m0[_2111].xyz));
    float _4417 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2321 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
    float _2322 = dot(vec3(_872, _873, _874), vec3(_2315, _2316, _2317));
    float _4428 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2325 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
    float _2326 = dot(vec3(cbLight._m0[_2111].xyz), vec3(_2315, _2316, _2317));
    float _4439 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2330 = _2307 * _2307;
    float _2334 = ((_2325 * _2325) * (_2330 + (-1.0))) + 1.0;
    float _2341 = exp2(log2(1.0 - (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0)))) * 5.0);
    float _2348 = 1.0 - _2307;
    float _2358 = (0.5 / (((_2239 * ((_2321 * _2348) + _2307)) + 9.9999999392252902907785028219223e-09) + (((_2239 * _2348) + _2307) * _2321))) * _2321;
    float _4450 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2360 = (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2330 / ((_2334 * _2334) * 3.141590118408203125));
    float _2370 = (((((_2341 * _2261) + _1024) * cbLight._m0[_2295].x) * _2360) * _2097) + (((((_2260 * _2261) + _1024) * cbLight._m0[_2210].x) * _2284) * _2107);
    float _2371 = (((((_2341 * _2263) + _1026) * cbLight._m0[_2295].y) * _2360) * _2097) + (((((_2260 * _2263) + _1026) * cbLight._m0[_2210].y) * _2284) * _2107);
    float _2372 = (((((_2341 * _2264) + _1027) * cbLight._m0[_2295].z) * _2360) * _2097) + (((((_2260 * _2264) + _1027) * cbLight._m0[_2210].z) * _2284) * _2107);
    float _2434;
    float _2436;
    float _2438;
    if (_2147)
    {
        _2434 = _2370;
        _2436 = _2371;
        _2438 = _2372;
    }
    else
    {
        uint _2440 = _2074 + 2u;
        uint _2444 = _2074 + 10u;
        float _2458 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2440].w)) * _876) * 0.949999988079071044921875);
        float _2459 = _2458 * _2458;
        float _2460 = cbLight._m0[_2440].x + _953;
        float _2461 = cbLight._m0[_2440].y + _954;
        float _2462 = cbLight._m0[_2440].z + _955;
        float _2466 = inversesqrt(dot(vec3(_2460, _2461, _2462), vec3(_2460, _2461, _2462)));
        float _2467 = _2466 * _2460;
        float _2468 = _2466 * _2461;
        float _2469 = _2466 * _2462;
        float _2470 = dot(vec3(_872, _873, _874), vec3(cbLight._m0[_2440].xyz));
        float _4461 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2473 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _2474 = dot(vec3(_872, _873, _874), vec3(_2467, _2468, _2469));
        float _4472 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2477 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _2478 = dot(vec3(cbLight._m0[_2440].xyz), vec3(_2467, _2468, _2469));
        float _4483 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2482 = _2459 * _2459;
        float _2486 = ((_2477 * _2477) * (_2482 + (-1.0))) + 1.0;
        float _2493 = exp2(log2(1.0 - (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0)))) * 5.0);
        float _2500 = 1.0 - _2459;
        float _2510 = (0.5 / (((_2239 * ((_2473 * _2500) + _2459)) + 9.9999999392252902907785028219223e-09) + (((_2239 * _2500) + _2459) * _2473))) * _2473;
        float _4494 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        float _2512 = (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_2482 / ((_2486 * _2486) * 3.141590118408203125));
        float _2513 = isnan(1.0) ? _2089 : (isnan(_2089) ? 1.0 : min(_2089, 1.0));
        _2434 = (((((_2493 * _2261) + _1024) * cbLight._m0[_2444].x) * _2512) * _2513) + _2370;
        _2436 = (((((_2493 * _2263) + _1026) * cbLight._m0[_2444].y) * _2512) * _2513) + _2371;
        _2438 = (((((_2493 * _2264) + _1027) * cbLight._m0[_2444].z) * _2512) * _2513) + _2372;
    }
    float _2548;
    float _2550;
    float _2552;
    if (_2165)
    {
        _2548 = _2434;
        _2550 = _2436;
        _2552 = _2438;
    }
    else
    {
        uint _2559 = _2074 + 3u;
        uint _2563 = _2074 + 11u;
        float _2577 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2559].w)) * _876) * 0.949999988079071044921875);
        float _2578 = _2577 * _2577;
        float _2579 = cbLight._m0[_2559].x + _953;
        float _2580 = cbLight._m0[_2559].y + _954;
        float _2581 = cbLight._m0[_2559].z + _955;
        float _2585 = inversesqrt(dot(vec3(_2579, _2580, _2581), vec3(_2579, _2580, _2581)));
        float _2586 = _2585 * _2579;
        float _2587 = _2585 * _2580;
        float _2588 = _2585 * _2581;
        float _2589 = dot(vec3(_872, _873, _874), vec3(cbLight._m0[_2559].xyz));
        float _4510 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2592 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _2593 = dot(vec3(_872, _873, _874), vec3(_2586, _2587, _2588));
        float _4521 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        float _2596 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _2597 = dot(vec3(cbLight._m0[_2559].xyz), vec3(_2586, _2587, _2588));
        float _4532 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2601 = _2578 * _2578;
        float _2605 = ((_2596 * _2596) * (_2601 + (-1.0))) + 1.0;
        float _2612 = exp2(log2(1.0 - (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0)))) * 5.0);
        float _2619 = 1.0 - _2578;
        float _2629 = (0.5 / (((_2239 * ((_2592 * _2619) + _2578)) + 9.9999999392252902907785028219223e-09) + (((_2239 * _2619) + _2578) * _2592))) * _2592;
        float _4543 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2631 = (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_2601 / ((_2605 * _2605) * 3.141590118408203125));
        float _2632 = isnan(1.0) ? _2090 : (isnan(_2090) ? 1.0 : min(_2090, 1.0));
        _2548 = (((((_2612 * _2261) + _1024) * cbLight._m0[_2563].x) * _2631) * _2632) + _2434;
        _2550 = (((((_2612 * _2263) + _1026) * cbLight._m0[_2563].y) * _2631) * _2632) + _2436;
        _2552 = (((((_2612 * _2264) + _1027) * cbLight._m0[_2563].z) * _2631) * _2632) + _2438;
    }
    float _2767;
    float _2769;
    float _2771;
    float _2773;
    float _2775;
    float _2777;
    if (_2072.y == 0u)
    {
        float _2707 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2708 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2707;
        float _2709 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2707;
        float _2710 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2707;
        uvec4 _2722 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2723 = _2722.x;
        uint _2734 = uint((float(_2722.y) * floor(float(uint(cbSceneParam._m0[85u].y * _962) / _2723))) + floor(float(uint(cbSceneParam._m0[85u].x * _961) / _2723)));
        float _2744 = (log2(_2710 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2745 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
        uint _2748 = uint(isnan(14.0) ? _2745 : (isnan(_2745) ? 14.0 : min(_2745, 14.0)));
        uvec4 _2753 = texelFetch(g_lightClusterGridBuffer, int(((_2748 << 2u) + (_2734 << 6u)) >> 2u));
        uint _2754 = _2753.x;
        uint _2755 = _2722.z;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        float _2865;
        float _2867;
        if (((((1u << ((_2755 >> 4u) & 15u)) + 4294967295u) & _2754) == 0u) || ((_2755 & 240u) == 0u))
        {
            _2857 = 0.0;
            _2859 = 0.0;
            _2861 = 0.0;
            _2863 = 0.0;
            _2865 = 0.0;
            _2867 = 0.0;
        }
        else
        {
            float _2858;
            float _2860;
            float _2862;
            float _2864;
            float _2866;
            float _2868;
            float _3002 = 0.0;
            float _3003 = 0.0;
            float _3004 = 0.0;
            float _3005 = 0.0;
            float _3006 = 0.0;
            float _3007 = 0.0;
            uint _3008 = 0u;
            uint _3017;
            bool _3018;
            for (;;)
            {
                _3017 = texelFetch(g_lightClassification, int((((_2748 << 5u) + (_2734 << 9u)) + (_3008 << 2u)) >> 2u)).x;
                _3018 = _3017 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3018)
                {
                    frontier_phi_61_pred = _3002;
                    frontier_phi_61_pred_1 = _3007;
                    frontier_phi_61_pred_2 = _3006;
                    frontier_phi_61_pred_3 = _3005;
                    frontier_phi_61_pred_4 = _3004;
                    frontier_phi_61_pred_5 = _3003;
                }
                else
                {
                    float _3126;
                    float _3127;
                    float _3128;
                    float _3129;
                    float _3130;
                    float _3131;
                    uint _3132;
                    _3126 = _3002;
                    _3127 = _3003;
                    _3128 = _3004;
                    _3129 = _3005;
                    _3130 = _3006;
                    _3131 = _3007;
                    _3132 = _3017;
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    for (;;)
                    {
                        uint _3136 = uint(findLSB(_3132)) + (_3008 << 5u);
                        uint _3133 = (_3132 + 4294967295u) & _3132;
                        uint _3138 = _3136 * 48u;
                        vec4 _3152 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3138)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 3u)).x));
                        uint _3158 = (_3136 * 48u) + 4u;
                        vec4 _3171 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3158)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 3u)).x));
                        uint _3177 = (_3136 * 48u) + 8u;
                        vec3 _3188 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3177)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 2u)).x));
                        float _3192 = _3152.x - _2708;
                        float _3193 = _3152.y - _2709;
                        float _3194 = _3152.z - _2710;
                        float _3195 = dot(vec3(_3192, _3193, _3194), vec3(_3192, _3193, _3194));
                        float _3198 = inversesqrt(_3195);
                        float _3199 = _3198 * _3192;
                        float _3200 = _3198 * _3193;
                        float _3201 = _3198 * _3194;
                        float _3202 = dot(vec3(_980, _983, _986), vec3(_3199, _3200, _3201));
                        float _3207 = 1.0 - (_3195 * _3152.w);
                        float _4569 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                        float _3208 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                        float _3209 = sqrt(_3195) * _3171.w;
                        float _3212 = 1.39999997615814208984375 / (_3209 + 1.39999997615814208984375);
                        float _3213 = _3212 * _3212;
                        float _3216 = ((1.0 - _3213) * _3202) + _3213;
                        float _3219 = _3209 * _3209;
                        float _3223 = ((isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0))) * _3208) / ((_3219 * 0.699999988079071044921875) + 1.0);
                        float _3227 = (-0.0) - _2708;
                        float _3228 = (-0.0) - _2709;
                        float _3229 = (-0.0) - _2710;
                        float _3233 = inversesqrt(dot(vec3(_3227, _3228, _3229), vec3(_3227, _3228, _3229)));
                        float _3234 = _3233 * _3227;
                        float _3235 = _3233 * _3228;
                        float _3236 = _3233 * _3229;
                        float _3244 = exp2(log2(1.0 / ((_3219 * 3.5) + 5.0)) * 0.25);
                        float _3245 = 1.0 - _1055;
                        float _3252 = sqrt(1.0 - ((1.0 - (_3245 * _3245)) * (1.0 - (_3244 * _3244))));
                        float _3253 = _3252 * _3252;
                        float _3254 = _3253 * _3253;
                        float _3255 = _3234 + _3199;
                        float _3256 = _3235 + _3200;
                        float _3257 = _3236 + _3201;
                        float _3261 = inversesqrt(dot(vec3(_3255, _3256, _3257), vec3(_3255, _3256, _3257)));
                        float _3265 = dot(vec3(_980, _983, _986), vec3(_3234, _3235, _3236));
                        float _4585 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                        float _3268 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                        float _3269 = dot(vec3(_980, _983, _986), vec3(_3261 * _3255, _3261 * _3256, _3261 * _3257));
                        float _4596 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                        float _3272 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                        float _3276 = ((_3272 * _3272) * (_3254 + (-1.0))) + 1.0;
                        float _3277 = _3212 * _3253;
                        float _3278 = _3277 * _3277;
                        float _3281 = ((1.0 - _3278) * _3202) + _3278;
                        float _4607 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                        float _3282 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                        float _3283 = 1.0 - _3253;
                        float _3293 = (0.5 / (((_3282 * ((_3268 * _3283) + _3253)) + 9.9999999392252902907785028219223e-09) + (((_3282 * _3283) + _3253) * _3268))) * _3282;
                        float _4618 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                        float _3304 = (((_3254 * 3.1415927410125732421875) * (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0)))) / ((_3276 * _3276) * ((_3219 * 2.1991131305694580078125) + 3.141590118408203125))) * _3208;
                        _3061 = (_3223 * _3171.x) + _3129;
                        _3062 = (_3223 * _3171.y) + _3130;
                        _3063 = (_3223 * _3171.z) + _3131;
                        _3058 = (_3304 * _3188.x) + _3126;
                        _3059 = (_3304 * _3188.y) + _3127;
                        _3060 = (_3304 * _3188.z) + _3128;
                        if (_3133 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3126 = _3058;
                            _3127 = _3059;
                            _3128 = _3060;
                            _3129 = _3061;
                            _3130 = _3062;
                            _3131 = _3063;
                            _3132 = _3133;
                        }
                    }
                    frontier_phi_61_pred = _3058;
                    frontier_phi_61_pred_1 = _3063;
                    frontier_phi_61_pred_2 = _3062;
                    frontier_phi_61_pred_3 = _3061;
                    frontier_phi_61_pred_4 = _3060;
                    frontier_phi_61_pred_5 = _3059;
                }
                _2858 = frontier_phi_61_pred;
                _2868 = frontier_phi_61_pred_1;
                _2866 = frontier_phi_61_pred_2;
                _2864 = frontier_phi_61_pred_3;
                _2862 = frontier_phi_61_pred_4;
                _2860 = frontier_phi_61_pred_5;
                uint _3009 = _3008 + 1u;
                if (_3009 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3002 = _2858;
                    _3003 = _2860;
                    _3004 = _2862;
                    _3005 = _2864;
                    _3006 = _2866;
                    _3007 = _2868;
                    _3008 = _3009;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2857 = _2858;
            _2859 = _2860;
            _2861 = _2862;
            _2863 = _2864;
            _2865 = _2866;
            _2867 = _2868;
        }
        uvec4 _2871 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2872 = _2871.z;
        uint _2874 = (_2872 >> 8u) & 15u;
        float _2970;
        float _2972;
        float _2974;
        float _2976;
        float _2978;
        float _2980;
        if (((4294967295u << _2874) & _2754) == 0u)
        {
            _2970 = _2857;
            _2972 = _2859;
            _2974 = _2861;
            _2976 = _2863;
            _2978 = _2865;
            _2980 = _2867;
        }
        else
        {
            float _2995 = inversesqrt(dot(vec3(_2708, _2709, _2710), vec3(_2708, _2709, _2710)));
            float _2996 = _2995 * _2708;
            float _2997 = _2995 * _2709;
            float _2998 = _2995 * _2710;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2874 < ((_2872 >> 12u) & 15u))
            {
                float _2971;
                float _2973;
                float _2975;
                float _2977;
                float _2979;
                float _2981;
                float _3109 = _2857;
                float _3110 = _2859;
                float _3111 = _2861;
                float _3112 = _2863;
                float _3113 = _2865;
                float _3114 = _2867;
                uint _3115 = _2874;
                uint _3124;
                bool _3125;
                for (;;)
                {
                    _3124 = texelFetch(g_lightClassification, int((((_2748 << 5u) + (_2734 << 9u)) + (_3115 << 2u)) >> 2u)).x;
                    _3125 = _3124 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3125)
                    {
                        frontier_phi_67_pred = _3112;
                        frontier_phi_67_pred_1 = _3113;
                        frontier_phi_67_pred_2 = _3114;
                        frontier_phi_67_pred_3 = _3111;
                        frontier_phi_67_pred_4 = _3110;
                        frontier_phi_67_pred_5 = _3109;
                    }
                    else
                    {
                        float _3309;
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3314;
                        float _3602;
                        float _3603;
                        float _3604;
                        float _3605;
                        float _3606;
                        float _3607;
                        float _3322 = _3109;
                        float _3323 = _3110;
                        float _3324 = _3111;
                        float _3325 = _3112;
                        float _3326 = _3113;
                        float _3327 = _3114;
                        uint _3328 = _3124;
                        uint _3329;
                        vec4 _3354;
                        float _3355;
                        vec4 _3370;
                        vec3 _3382;
                        vec4 _3397;
                        vec4 _3412;
                        float _3458;
                        bool _3459;
                        for (;;)
                        {
                            uint _3339 = ((_3115 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3328));
                            _3329 = (_3328 + 4294967295u) & _3328;
                            uint _3341 = _3339 * 40u;
                            _3354 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3341)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 3u)).x));
                            _3355 = _3354.w;
                            uint _3357 = (_3339 * 40u) + 4u;
                            _3370 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3357)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 3u)).x));
                            uint _3372 = (_3339 * 40u) + 8u;
                            _3382 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3372)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 2u)).x));
                            uint _3384 = (_3339 * 40u) + 16u;
                            _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            uint _3399 = (_3339 * 40u) + 20u;
                            _3412 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 3u)).x));
                            uint _3414 = (_3339 * 40u) + 24u;
                            vec4 _3427 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 3u)).x));
                            uint _3433 = (_3339 * 40u) + 28u;
                            vec4 _3446 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 3u)).x));
                            _3458 = fma(_2710, _3446.z, fma(_2709, _3446.y, _3446.x * _2708)) + _3446.w;
                            _3459 = !((fma(_2710, _3427.z, fma(_2709, _3427.y, _3427.x * _2708)) + _3427.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3459)
                            {
                                float _3486 = _3354.x - _2708;
                                float _3487 = _3354.y - _2709;
                                float _3488 = _3354.z - _2710;
                                float _3489 = dot(vec3(_3486, _3487, _3488), vec3(_3486, _3487, _3488));
                                float _3492 = inversesqrt(_3489);
                                float _3493 = _3492 * _3486;
                                float _3494 = _3492 * _3487;
                                float _3495 = _3492 * _3488;
                                float _3499 = 1.0 - (_3489 / (_3355 * _3355));
                                float _4629 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                                float _3500 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                                float _3504 = sqrt(_3489) * _3370.w;
                                float _3506 = 1.39999997615814208984375 / (_3504 + 1.39999997615814208984375);
                                float _3507 = _3506 * _3506;
                                float _3510 = ((1.0 - _3507) * dot(vec3(_3493, _3494, _3495), vec3(_980, _983, _986))) + _3507;
                                float _3513 = _3504 * _3504;
                                float _3517 = (fma(_2710, _3397.z, fma(_2709, _3397.y, _3397.x * _2708)) + _3397.w) / _3458;
                                float _3518 = (fma(_2710, _3412.z, fma(_2709, _3412.y, _3412.x * _2708)) + _3412.w) / _3458;
                                float _3522 = 1.0 - dot(vec2(_3517, _3518), vec2(_3517, _3518));
                                float _4645 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                                float _3523 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                                float _3524 = _3523 * (((isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0))) * _3500) / ((_3513 * 0.699999988079071044921875) + 1.0));
                                float _3536 = exp2(log2(1.0 / ((_3513 * 3.5) + 5.0)) * 0.25);
                                float _3537 = 1.0 - _1055;
                                float _3544 = sqrt(1.0 - ((1.0 - (_3537 * _3537)) * (1.0 - (_3536 * _3536))));
                                float _3545 = _3544 * _3544;
                                float _3546 = _3545 * _3545;
                                float _3547 = _3493 - _2996;
                                float _3548 = _3494 - _2997;
                                float _3549 = _3495 - _2998;
                                float _3553 = inversesqrt(dot(vec3(_3547, _3548, _3549), vec3(_3547, _3548, _3549)));
                                float _3557 = dot(vec3(_980, _983, _986), vec3((-0.0) - _2996, (-0.0) - _2997, (-0.0) - _2998));
                                float _4656 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                                float _3560 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                                float _3561 = dot(vec3(_980, _983, _986), vec3(_3553 * _3547, _3553 * _3548, _3553 * _3549));
                                float _4667 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                                float _3564 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                                float _3568 = ((_3564 * _3564) * (_3546 + (-1.0))) + 1.0;
                                float _3569 = _3506 * _3545;
                                float _3570 = _3569 * _3569;
                                float _3576 = ((1.0 - _3570) * dot(vec3(_980, _983, _986), vec3(_3493, _3494, _3495))) + _3570;
                                float _4678 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3577 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                                float _3578 = 1.0 - _3545;
                                float _3588 = (0.5 / (((_3577 * ((_3560 * _3578) + _3545)) + 9.9999999392252902907785028219223e-09) + (((_3577 * _3578) + _3545) * _3560))) * _3577;
                                float _4689 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3598 = (_3523 * _3500) * (((_3546 * 3.1415927410125732421875) * (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0)))) / ((_3568 * _3568) * ((_3513 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3598 * _3382.x;
                                frontier_phi_73_pred_1 = _3598 * _3382.y;
                                frontier_phi_73_pred_2 = _3524 * _3370.z;
                                frontier_phi_73_pred_3 = _3524 * _3370.y;
                                frontier_phi_73_pred_4 = _3524 * _3370.x;
                                frontier_phi_73_pred_5 = _3598 * _3382.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3602 = frontier_phi_73_pred;
                            _3603 = frontier_phi_73_pred_1;
                            _3607 = frontier_phi_73_pred_2;
                            _3606 = frontier_phi_73_pred_3;
                            _3605 = frontier_phi_73_pred_4;
                            _3604 = frontier_phi_73_pred_5;
                            _3312 = _3605 + _3325;
                            _3313 = _3606 + _3326;
                            _3314 = _3607 + _3327;
                            _3309 = _3602 + _3322;
                            _3310 = _3603 + _3323;
                            _3311 = _3604 + _3324;
                            if (_3329 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3322 = _3309;
                                _3323 = _3310;
                                _3324 = _3311;
                                _3325 = _3312;
                                _3326 = _3313;
                                _3327 = _3314;
                                _3328 = _3329;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3312;
                        frontier_phi_67_pred_1 = _3313;
                        frontier_phi_67_pred_2 = _3314;
                        frontier_phi_67_pred_3 = _3311;
                        frontier_phi_67_pred_4 = _3310;
                        frontier_phi_67_pred_5 = _3309;
                    }
                    _2977 = frontier_phi_67_pred;
                    _2979 = frontier_phi_67_pred_1;
                    _2981 = frontier_phi_67_pred_2;
                    _2975 = frontier_phi_67_pred_3;
                    _2973 = frontier_phi_67_pred_4;
                    _2971 = frontier_phi_67_pred_5;
                    uint _3116 = _3115 + 1u;
                    if (_3116 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3109 = _2971;
                        _3110 = _2973;
                        _3111 = _2975;
                        _3112 = _2977;
                        _3113 = _2979;
                        _3114 = _2981;
                        _3115 = _3116;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2979;
                frontier_phi_55_56_ladder_1 = _2981;
                frontier_phi_55_56_ladder_2 = _2977;
                frontier_phi_55_56_ladder_3 = _2975;
                frontier_phi_55_56_ladder_4 = _2973;
                frontier_phi_55_56_ladder_5 = _2971;
            }
            else
            {
                frontier_phi_55_56_ladder = _2865;
                frontier_phi_55_56_ladder_1 = _2867;
                frontier_phi_55_56_ladder_2 = _2863;
                frontier_phi_55_56_ladder_3 = _2861;
                frontier_phi_55_56_ladder_4 = _2859;
                frontier_phi_55_56_ladder_5 = _2857;
            }
            _2970 = frontier_phi_55_56_ladder_5;
            _2972 = frontier_phi_55_56_ladder_4;
            _2974 = frontier_phi_55_56_ladder_3;
            _2976 = frontier_phi_55_56_ladder_2;
            _2978 = frontier_phi_55_56_ladder;
            _2980 = frontier_phi_55_56_ladder_1;
        }
        float _2985 = isnan(1.0) ? _1039 : (isnan(_1039) ? 1.0 : min(_1039, 1.0));
        _2767 = (_2985 * _2976) + _2203;
        _2769 = (_2985 * _2978) + _2205;
        _2771 = (_2985 * _2980) + _2207;
        _2773 = ((_2970 * _1024) * _2985) + _2548;
        _2775 = ((_2972 * _1026) * _2985) + _2550;
        _2777 = ((_2974 * _1027) * _2985) + _2552;
    }
    else
    {
        _2767 = _2203;
        _2769 = _2205;
        _2771 = _2207;
        _2773 = _2548;
        _2775 = _2550;
        _2777 = _2552;
    }
    float _4705 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _4716 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _4727 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _4738 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _2802 = cbInstanceData._m0[_999 + 6u].w * (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0)));
    float _2807 = _961 / cbSceneParam._m0[86u].x;
    float _2808 = _962 / cbSceneParam._m0[86u].y;
    vec4 _2822 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2807, _2808, (log2((isnan(cbSceneParam._m0[77u].w) ? _896 : (isnan(_896) ? cbSceneParam._m0[77u].w : min(_896, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2824 = _2822.x;
    float _2825 = _2822.y;
    float _2826 = _2822.z;
    float _2827 = _2822.w;
    float _2920;
    float _2922;
    float _2924;
    float _2926;
    if (_896 > cbSceneParam._m0[78u].w)
    {
        float _2882 = isnan(_896) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _896 : min(cbSceneParam._m0[80u].w, _896));
        float _2883 = _2882 / _896;
        float _2894 = _2883 * _946;
        float _2895 = _947 * _2883;
        float _2896 = (-0.0) - _2895;
        float _2898 = _2883 * _948;
        float _2900 = (cbSceneParam._m0[77u].w * _2896) / _2882;
        float _2901 = _2900 + cbSceneParam._m0[79u].w;
        float _2902 = cbSceneParam._m0[79u].w - _2895;
        float _2908 = sqrt(((_2894 * _2894) + (_2895 * _2895)) + (_2898 * _2898));
        float _2911 = (1.0 - (cbSceneParam._m0[77u].w / _2882)) * _2908;
        float _2916 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2918 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3071;
        if (abs((_2896 - _2900) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3071 = ((((_2901 > 0.0) ? exp2(_2916 * _2901) : (2.0 - exp2(_2918 * _2901))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2911;
        }
        else
        {
            float _3031 = 1.0 / cbSceneParam._m0[80u].x;
            float _3032 = isnan(_2902) ? _2901 : (isnan(_2901) ? _2902 : max(_2901, _2902));
            float _3033 = isnan(_2902) ? _2901 : (isnan(_2901) ? _2902 : min(_2901, _2902));
            float _3042 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : min(_3032, 0.0));
            float _3043 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : min(_3033, 0.0));
            _3071 = ((abs(_2908 / _2896) * cbSceneParam._m0[80u].y) * ((((_3042 - _3043) * 2.0) - ((exp2(_2916 * (isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0)))) - exp2(_2916 * (isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0))))) * _3031)) - ((exp2(_2918 * _3042) - exp2(_2918 * _3043)) * _3031))) + (_2911 * cbSceneParam._m0[80u].z);
        }
        vec4 _3073 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2807, _2808, 1.0), 0.0);
        float _3082 = exp2((_3071 * (-1.44269502162933349609375)) * (1.0 - _3073.w));
        float _3083 = log2(_3082);
        float _3099 = log2(_2827);
        _2920 = (exp2(_3099 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3083 * cbSceneParam._m0[78u].x)) * _3073.x) / cbSceneParam._m0[78u].x)) + _2824;
        _2922 = (exp2(_3099 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3083 * cbSceneParam._m0[78u].y)) * _3073.y) / cbSceneParam._m0[78u].y)) + _2825;
        _2924 = (exp2(_3099 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3083 * cbSceneParam._m0[78u].z)) * _3073.z) / cbSceneParam._m0[78u].z)) + _2826;
        _2926 = _3082 * _2827;
    }
    else
    {
        _2920 = _2824;
        _2922 = _2825;
        _2924 = _2826;
        _2926 = _2827;
    }
    float _2938 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2939 = _2938 == 3.0;
    float _2940 = log2(_2926);
    float _2947 = exp2(_2940 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0))) * (_2767 + ((isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))) * _1039))) + ((_2773 + ((isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0))) * _1843)) * cbPerFrame._m0[3u].x));
    float _2948 = exp2(_2940 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))) * (_2769 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1039))) + ((_2775 + ((isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0))) * _1843)) * cbPerFrame._m0[3u].x));
    float _2949 = exp2(_2940 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0))) * (_2771 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1039))) + ((_2777 + ((isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0))) * _1843)) * cbPerFrame._m0[3u].x));
    float _2958 = (_2938 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2958 * (_2939 ? _2947 : (_2947 + (cbSceneParam._m0[72u].w * _2920)));
    SV_Target.y = _2958 * (_2939 ? _2948 : (_2948 + (cbSceneParam._m0[72u].w * _2922)));
    SV_Target.z = _2958 * (_2939 ? _2949 : (_2949 + (cbSceneParam._m0[72u].w * _2924)));
    SV_Target.w = _2802;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2802;
}


