#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24;
layout(set = 0, binding = 12) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 13) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 18) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in float TEXCOORD_8;
layout(location = 7, component = 1) in float TEXCOORD_9;
layout(location = 7, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1642;
float _4045;
float _4046;
float _4047;
float _4048;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _291 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _325 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _329 = _325.z;
    float _342 = exp2(log2((1.0 - _329) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _343 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _344 = isnan(1.0) ? _343 : (isnan(_343) ? 1.0 : min(_343, 1.0));
    vec4 _361 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _373 = exp2(log2(_361.w * cbMtdParam._m0[29u].y) * cbMtdParam._m0[23u].x);
    float _374 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _375 = isnan(1.0) ? _374 : (isnan(_374) ? 1.0 : min(_374, 1.0));
    float _384 = exp2(log2(cbMtdParam._m0[23u].y * _329) * cbMtdParam._m0[22u].y);
    float _385 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _386 = isnan(1.0) ? _385 : (isnan(_385) ? 1.0 : min(_385, 1.0));
    vec4 _398 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _401 = _398.y;
    float _404 = (_398.x + (-0.02500000037252902984619140625)) * 8.0;
    float _408 = roundEven(5.0 - _404);
    float _409 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _410 = isnan(4.0) ? _409 : (isnan(_409) ? 4.0 : min(_409, 4.0));
    float _422 = floor(_410);
    vec4 _425 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w, _422));
    float _218[6];
    float _219[6];
    float _220[6];
    _218[0u] = cbMtdParam._m0[17u].x;
    _219[0u] = cbMtdParam._m0[17u].y;
    _220[0u] = cbMtdParam._m0[17u].z;
    _218[1u] = cbMtdParam._m0[15u].x;
    _219[1u] = cbMtdParam._m0[15u].y;
    _220[1u] = cbMtdParam._m0[15u].z;
    _218[2u] = cbMtdParam._m0[14u].x;
    _219[2u] = cbMtdParam._m0[14u].y;
    _220[2u] = cbMtdParam._m0[14u].z;
    _218[3u] = cbMtdParam._m0[13u].x;
    _219[3u] = cbMtdParam._m0[13u].y;
    _220[3u] = cbMtdParam._m0[13u].z;
    _218[4u] = cbMtdParam._m0[12u].x;
    _219[4u] = cbMtdParam._m0[12u].y;
    _220[4u] = cbMtdParam._m0[12u].z;
    _218[5u] = cbMtdParam._m0[18u].x;
    _219[5u] = cbMtdParam._m0[18u].y;
    _220[5u] = cbMtdParam._m0[18u].z;
    float _489 = roundEven(_404);
    float _490 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    uint _492 = uint(int(isnan(5.0) ? _490 : (isnan(_490) ? 5.0 : min(_490, 5.0))));
    vec4 _522 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _533 = cbMtdParam._m0[9u].x * _522.x;
    float _534 = cbMtdParam._m0[9u].y * _522.y;
    float _535 = cbMtdParam._m0[9u].z * _522.z;
    float _542 = ((((((_218[_492] - cbMtdParam._m0[10u].x) * _401) + cbMtdParam._m0[10u].x) * _425.x) - _533) * _386) + _533;
    float _543 = ((((((_219[_492] - cbMtdParam._m0[10u].y) * _401) + cbMtdParam._m0[10u].y) * _425.y) - _534) * _386) + _534;
    float _544 = ((((((_220[_492] - cbMtdParam._m0[10u].z) * _401) + cbMtdParam._m0[10u].z) * _425.z) - _535) * _386) + _535;
    float _550 = exp2(log2(_325.w) * cbMtdParam._m0[23u].w);
    vec4 _563 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _583 = (((cbMtdParam._m0[16u].x * _563.x) - _542) * _550) + _542;
    float _584 = (((cbMtdParam._m0[16u].y * _563.y) - _543) * _550) + _543;
    float _585 = (((cbMtdParam._m0[16u].z * _563.z) - _544) * _550) + _544;
    vec4 _597 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _617 = (((cbMtdParam._m0[19u].x * _597.x) - _583) * _375) + _583;
    float _618 = (((cbMtdParam._m0[19u].y * _597.y) - _584) * _375) + _584;
    float _619 = (((cbMtdParam._m0[19u].z * _597.z) - _585) * _375) + _585;
    vec4 _631 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _656 = (_361.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _631.x) - _617) * _344) + _617);
    float _658 = (_361.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _631.y) - _618) * _344) + _618);
    float _660 = (_361.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _631.z) - _619) * _344) + _619);
    vec4 _672 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _691 = TEXCOORD_5.x - ((cbMtdParam._m0[24u].x * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625));
    float _693 = _691 * (cbMtdParam._m0[24u].z + 1.0);
    float _4107 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _694 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _701 = (_694 * ((cbMtdParam._m0[11u].x * _672.x) - _656)) + _656;
    float _702 = (((cbMtdParam._m0[11u].y * _672.y) - _658) * _694) + _658;
    float _703 = (((cbMtdParam._m0[11u].z * _672.z) - _660) * _694) + _660;
    float _707 = cbMtdParam._m0[28u].x * TEXCOORD_8;
    float _715 = (_707 - (((_291.x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _707))) * (cbMtdParam._m0[27u].w + 1.0);
    float _4118 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _716 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _723 = ((cbMtdParam._m0[21u].x - _701) * _716) + _701;
    float _724 = ((cbMtdParam._m0[21u].y - _702) * _716) + _702;
    float _725 = ((cbMtdParam._m0[21u].z - _703) * _716) + _703;
    vec4 _738 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24, SS_ClampLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.z) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.w) + cbTextureTilingScale._m0[11u].w));
    float _746 = (_738.x + (-1.0)) + (cbMtdParam._m0[28u].y * 2.0);
    float _4129 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _752 = exp2(log2(cbMtdParam._m0[28u].w * (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) * cbMtdParam._m0[28u].z);
    float _4140 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _753 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _213[5];
    float _214[5];
    _213[0u] = cbMtdParam._m0[29u].z;
    _214[0u] = cbMtdParam._m0[29u].w;
    _213[1u] = cbMtdParam._m0[31u].z;
    _214[1u] = cbMtdParam._m0[31u].w;
    _213[2u] = cbMtdParam._m0[31u].x;
    _214[2u] = cbMtdParam._m0[31u].y;
    _213[3u] = cbMtdParam._m0[30u].z;
    _214[3u] = cbMtdParam._m0[30u].w;
    _213[4u] = cbMtdParam._m0[30u].x;
    _214[4u] = cbMtdParam._m0[30u].y;
    float _792 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    uint _794 = uint(int(isnan(4.0) ? _792 : (isnan(_792) ? 4.0 : min(_792, 4.0))));
    float _801 = ((_214[_794] - cbMtdParam._m0[22u].z) * _386) + cbMtdParam._m0[22u].z;
    float _804 = ((cbMtdParam._m0[22u].w - _801) * _550) + _801;
    float _807 = ((cbMtdParam._m0[25u].x - _804) * _375) + _804;
    float _810 = ((cbMtdParam._m0[26u].x - _807) * _344) + _807;
    float _815 = (cbMtdParam._m0[24u].y + 1.0) * _691;
    float _4161 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _816 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _818 = _810 - (_810 * _816);
    float _820 = _818 - (_818 * _707);
    vec4 _833 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w, _422));
    vec4 _850 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _852 = _850.x;
    float _853 = _850.y;
    float _858 = cbMtdParam._m0[22u].x + _850.z;
    float _861 = (((_833.z + _213[_794]) - _858) * _386) + _858;
    vec4 _873 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _884 = (((_873.z - _861) + cbMtdParam._m0[29u].x) * _550) + _861;
    float _889 = ((((_329 * 2.0) * _884) - _884) * cbMtdParam._m0[24u].w) + _884;
    vec4 _901 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _912 = (((cbMtdParam._m0[23u].z + _901.z) - _889) * _375) + _889;
    vec4 _925 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _936 = (((_925.z - _912) + cbMtdParam._m0[26u].y) * _344) + _912;
    vec4 _948 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _959 = ((_948.z - _936) * _816) + _936;
    vec4 _974 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _988 = ((cbMtdParam._m0[27u].y * _707) * ((_974.z * cbMtdParam._m0[27u].x) - _959)) + _959;
    float _1003 = ((_833.x - _852) * _386) + _852;
    float _1004 = ((_833.y - _853) * _386) + _853;
    float _1009 = ((_873.x - _1003) * _550) + _1003;
    float _1010 = ((_873.y - _1004) * _550) + _1004;
    float _1015 = ((_901.x - _1009) * _375) + _1009;
    float _1016 = ((_901.y - _1010) * _375) + _1010;
    float _1025 = ((((_925.x - _1015) * _344) + _1015) * 2.0) + (-1.0);
    float _1026 = ((((_925.y - _1016) * _344) + _1016) * 2.0) + (-1.0);
    float _1027 = dot(vec2(_1025, _1026), vec2(_1025, _1026));
    float _4172 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _1032 = sqrt(1.0 - (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))));
    float _1048 = (((cbMtdParam._m0[25u].y * ((_325.x * 2.0) + (-1.0))) + _1025) + (((((_948.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[25u].z) * _816)) + ((((_974.x * 2.0) + (-1.0)) * _707) * cbMtdParam._m0[26u].w);
    float _1049 = (((cbMtdParam._m0[25u].y * ((_325.y * 2.0) + (-1.0))) + _1026) + (((((_948.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[25u].z) * _816)) + (((cbMtdParam._m0[28u].x * TEXCOORD_9) * ((_974.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _1052 = fma(_1032, _255 * NORMAL.x, fma(_1049, _262 * TANGENT.x, (_248 * _240) * _1048));
    float _1055 = fma(_1032, _255 * NORMAL.y, fma(_1049, _262 * TANGENT.y, (_248 * _241) * _1048));
    float _1058 = fma(_1032, _255 * NORMAL.z, fma(_1049, _262 * TANGENT.z, (_248 * _242) * _1048));
    float _1062 = inversesqrt(dot(vec3(_1052, _1055, _1058), vec3(_1052, _1055, _1058)));
    float _1063 = _1062 * _1052;
    float _1064 = _1062 * _1055;
    float _1065 = _1062 * _1058;
    float _4183 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _1066 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _4194 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _1067 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _4205 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _4216 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _4227 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _4238 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _1071 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _1087 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1127 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1137 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1127);
    float _1138 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1127);
    float _1139 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1127);
    float _1143 = inversesqrt(dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139)));
    float _1144 = _1137 * _1143;
    float _1145 = _1138 * _1143;
    float _1146 = _1139 * _1143;
    vec4 _1151 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1153 = _1151.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1323 = sqrt(((_1137 * _1137) + (_1138 * _1138)) + (_1139 * _1139));
        float _1329 = (cbMatDynParam._m0[5u].x * _1323) + cbMatDynParam._m0[5u].y;
        float _4249 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1334 = (cbMatDynParam._m0[5u].z * _1323) + cbMatDynParam._m0[5u].w;
        float _4260 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) - _1330)) + _1330) < ((_1153 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1164 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1165 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1183 = fma(_1065, cbSceneParam._m0[5u].z, fma(_1064, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1063));
    float _1186 = fma(_1065, cbSceneParam._m0[6u].z, fma(_1064, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1063));
    float _1189 = fma(_1065, cbSceneParam._m0[7u].z, fma(_1064, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1063));
    uint _1202 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1203 = _1202 + 9u;
    uint _1204 = _1203 + uint(cbMatDynParam._m0[0u].w);
    float _1210 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) * cbInstanceData._m0[_1204].x;
    float _1211 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) * cbInstanceData._m0[_1204].y;
    float _1212 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0)))) * cbInstanceData._m0[_1204].z;
    float _4271 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
    float _1213 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
    float _4282 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
    float _1214 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    float _4293 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
    float _1215 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
    float _1216 = 1.0 - _1071;
    float _1217 = _1213 * _1216;
    float _1218 = _1214 * _1216;
    float _1219 = _1215 * _1216;
    float _1224 = (_1213 + (-0.039999999105930328369140625)) * _1071;
    float _1225 = (_1214 + (-0.039999999105930328369140625)) * _1071;
    float _1226 = (_1215 + (-0.039999999105930328369140625)) * _1071;
    float _1227 = _1224 + 0.039999999105930328369140625;
    float _1229 = _1225 + 0.039999999105930328369140625;
    float _1230 = _1226 + 0.039999999105930328369140625;
    vec4 _1239 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1164, cbSceneParam._m0[86u].y * _1165));
    float _1242 = _1239.x * TEXCOORD_5.w;
    float _1243 = dot(vec3(_1063, _1064, _1065), vec3(_1144, _1145, _1146));
    float _1246 = _1243 * 2.0;
    float _1250 = (_1246 * _1063) - _1144;
    float _1251 = (_1246 * _1064) - _1145;
    float _1252 = (_1246 * _1065) - _1146;
    float _1256 = abs(dot(vec3(_1144, _1145, _1146), vec3(_1063, _1064, _1065)));
    float _4304 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
    float _1258 = sqrt(_1067);
    float _1269 = exp2((_1258 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1258 * 3.0));
    float _1275 = (1.0 - _1269) * ((_1258 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1276 = _1269 * _1258;
    float _1304 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1308 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1312 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1641;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1366 = fma(_1312, cbModelParam._m0[26u].z, fma(_1308, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1304));
        float _1370 = fma(_1312, cbModelParam._m0[27u].z, fma(_1308, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1304));
        float _1374 = fma(_1312, cbModelParam._m0[28u].z, fma(_1308, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1304));
        float _1399 = _1304 + _1063;
        float _1400 = _1308 + _1064;
        float _1401 = _1312 + _1065;
        float _1411 = fma(_1401, cbModelParam._m0[26u].z, fma(_1400, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1399)) - _1366;
        float _1412 = fma(_1401, cbModelParam._m0[27u].z, fma(_1400, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1399)) - _1370;
        float _1413 = fma(_1401, cbModelParam._m0[28u].z, fma(_1400, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1399)) - _1374;
        float _1417 = inversesqrt(dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413)));
        float _1430 = ((_1417 * _1411) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1366 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1431 = ((_1417 * _1412) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1370 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1432 = ((_1417 * _1413) / cbModelParam._m0[34u].z) + ((((((_1374 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1435 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        vec4 _1442 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        vec4 _1449 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        vec4 _1456 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        float _1469 = exp2((_1435.w + (-0.5)) * 20.0) * 2.0;
        float _1470 = _1469 * (_1435.x + (-0.5));
        float _1471 = _1469 * (_1435.y + (-0.5));
        float _1472 = _1469 * (_1435.z + (-0.5));
        float _1479 = exp2((_1442.w + (-0.5)) * 20.0) * 2.0;
        float _1480 = _1479 * (_1442.x + (-0.5));
        float _1481 = _1479 * (_1442.y + (-0.5));
        float _1482 = _1479 * (_1442.z + (-0.5));
        float _1489 = exp2((_1449.w + (-0.5)) * 20.0) * 2.0;
        float _1490 = _1489 * (_1449.x + (-0.5));
        float _1491 = _1489 * (_1449.y + (-0.5));
        float _1492 = _1489 * (_1449.z + (-0.5));
        float _1499 = exp2((_1456.w + (-0.5)) * 20.0) * 2.0;
        float _1500 = _1499 * (_1456.x + (-0.5));
        float _1501 = _1499 * (_1456.y + (-0.5));
        float _1502 = _1499 * (_1456.z + (-0.5));
        float _1503 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1504 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1505 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1506 = _1470 * 0.5;
        float _1507 = _1480 * 0.5;
        float _1508 = _1490 * 0.5;
        float _1509 = dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508));
        float _1514 = (_1509 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1509);
        float _1523 = (dot(vec3(_1063, _1064, _1065), vec3(_1514 * _1506, _1514 * _1507, _1514 * _1508)) + 1.0) * 0.5;
        float _4330 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1533 = sqrt(((_1507 * _1507) + (_1506 * _1506)) + (_1508 * _1508)) / (_1503 + 9.9999997473787516355514526367188e-06);
        float _4341 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1535 = _1534 * 2.0;
        float _1539 = (1.0 - _1534) / (_1534 + 1.0);
        float _4352 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1549 = ((((1.0 - _1540) * (_1535 + 2.0)) * exp2(log2(isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_1535 + 1.0))) + _1540) * _1503;
        float _1550 = _1471 * 0.5;
        float _1551 = _1481 * 0.5;
        float _1552 = _1491 * 0.5;
        float _1553 = dot(vec3(_1550, _1551, _1552), vec3(_1550, _1551, _1552));
        float _1558 = (_1553 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1553);
        float _1566 = (dot(vec3(_1063, _1064, _1065), vec3(_1558 * _1550, _1558 * _1551, _1558 * _1552)) + 1.0) * 0.5;
        float _4363 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1575 = sqrt(((_1551 * _1551) + (_1550 * _1550)) + (_1552 * _1552)) / (_1504 + 9.9999997473787516355514526367188e-06);
        float _4374 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1577 = _1576 * 2.0;
        float _1581 = (1.0 - _1576) / (_1576 + 1.0);
        float _4385 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _1591 = ((((1.0 - _1582) * (_1577 + 2.0)) * exp2(log2(isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_1577 + 1.0))) + _1582) * _1504;
        float _1592 = _1472 * 0.5;
        float _1593 = _1482 * 0.5;
        float _1594 = _1492 * 0.5;
        float _1595 = dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594));
        float _1600 = (_1595 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1595);
        float _1608 = (dot(vec3(_1063, _1064, _1065), vec3(_1600 * _1592, _1600 * _1593, _1600 * _1594)) + 1.0) * 0.5;
        float _4396 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1617 = sqrt(((_1593 * _1593) + (_1592 * _1592)) + (_1594 * _1594)) / (_1505 + 9.9999997473787516355514526367188e-06);
        float _4407 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _1619 = _1618 * 2.0;
        float _1623 = (1.0 - _1618) / (_1618 + 1.0);
        float _4418 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _1633 = ((((1.0 - _1624) * (_1619 + 2.0)) * exp2(log2(isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_1619 + 1.0))) + _1624) * _1505;
        _1641 = _1472;
        _1643 = _1471;
        _1644 = _1470;
        _1645 = _1482;
        _1646 = _1481;
        _1647 = _1480;
        _1648 = _1492;
        _1649 = _1491;
        _1650 = _1490;
        _1651 = _1505;
        _1652 = _1504;
        _1653 = _1503;
        _1654 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)));
        _1655 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)));
        _1656 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)));
    }
    else
    {
        _1641 = _1642;
        _1643 = _1642;
        _1644 = _1642;
        _1645 = _1642;
        _1646 = _1642;
        _1647 = _1642;
        _1648 = _1642;
        _1649 = _1642;
        _1650 = _1642;
        _1651 = _1642;
        _1652 = _1642;
        _1653 = _1642;
        _1654 = 0.0;
        _1655 = 0.0;
        _1656 = 0.0;
    }
    float _1951;
    float _1952;
    float _1953;
    float _1954;
    float _1955;
    float _1956;
    float _1957;
    float _1958;
    float _1959;
    float _1960;
    float _1961;
    float _1962;
    float _1963;
    float _1964;
    float _1965;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1682 = fma(_1312, cbModelParam._m0[30u].z, fma(_1308, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1304));
        float _1686 = fma(_1312, cbModelParam._m0[31u].z, fma(_1308, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1304));
        float _1690 = fma(_1312, cbModelParam._m0[32u].z, fma(_1308, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1304));
        float _1713 = _1304 + _1063;
        float _1714 = _1308 + _1064;
        float _1715 = _1312 + _1065;
        float _1725 = fma(_1715, cbModelParam._m0[30u].z, fma(_1714, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1713)) - _1682;
        float _1726 = fma(_1715, cbModelParam._m0[31u].z, fma(_1714, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1713)) - _1686;
        float _1727 = fma(_1715, cbModelParam._m0[32u].z, fma(_1714, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1713)) - _1690;
        float _1731 = inversesqrt(dot(vec3(_1725, _1726, _1727), vec3(_1725, _1726, _1727)));
        float _1744 = ((_1731 * _1725) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1682 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1745 = ((_1731 * _1726) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1686 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1746 = ((_1731 * _1727) / cbModelParam._m0[35u].z) + ((((((_1690 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1748 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1744, _1745, _1746), 0.0);
        vec4 _1755 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1744, _1745, _1746), 0.0);
        vec4 _1762 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1744, _1745, _1746), 0.0);
        vec4 _1769 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1744, _1745, _1746), 0.0);
        float _1781 = exp2((_1748.w + (-0.5)) * 20.0) * 2.0;
        float _1782 = _1781 * (_1748.x + (-0.5));
        float _1783 = _1781 * (_1748.y + (-0.5));
        float _1784 = _1781 * (_1748.z + (-0.5));
        float _1791 = exp2((_1755.w + (-0.5)) * 20.0) * 2.0;
        float _1792 = _1791 * (_1755.x + (-0.5));
        float _1793 = _1791 * (_1755.y + (-0.5));
        float _1794 = _1791 * (_1755.z + (-0.5));
        float _1801 = exp2((_1762.w + (-0.5)) * 20.0) * 2.0;
        float _1802 = _1801 * (_1762.x + (-0.5));
        float _1803 = _1801 * (_1762.y + (-0.5));
        float _1804 = _1801 * (_1762.z + (-0.5));
        float _1811 = exp2((_1769.w + (-0.5)) * 20.0) * 2.0;
        float _1812 = _1811 * (_1769.x + (-0.5));
        float _1813 = _1811 * (_1769.y + (-0.5));
        float _1814 = _1811 * (_1769.z + (-0.5));
        float _1815 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
        float _1816 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1817 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1818 = _1782 * 0.5;
        float _1819 = _1792 * 0.5;
        float _1820 = _1802 * 0.5;
        float _1821 = dot(vec3(_1818, _1819, _1820), vec3(_1818, _1819, _1820));
        float _1826 = (_1821 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1821);
        float _1834 = (dot(vec3(_1063, _1064, _1065), vec3(_1826 * _1818, _1826 * _1819, _1826 * _1820)) + 1.0) * 0.5;
        float _4459 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
        float _1843 = sqrt(((_1819 * _1819) + (_1818 * _1818)) + (_1820 * _1820)) / (_1815 + 9.9999997473787516355514526367188e-06);
        float _4470 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
        float _1844 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _1845 = _1844 * 2.0;
        float _1849 = (1.0 - _1844) / (_1844 + 1.0);
        float _4481 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        float _1850 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _1859 = ((((1.0 - _1850) * (_1845 + 2.0)) * exp2(log2(isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_1845 + 1.0))) + _1850) * _1815;
        float _1860 = _1783 * 0.5;
        float _1861 = _1793 * 0.5;
        float _1862 = _1803 * 0.5;
        float _1863 = dot(vec3(_1860, _1861, _1862), vec3(_1860, _1861, _1862));
        float _1868 = (_1863 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1863);
        float _1876 = (dot(vec3(_1063, _1064, _1065), vec3(_1868 * _1860, _1868 * _1861, _1868 * _1862)) + 1.0) * 0.5;
        float _4492 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
        float _1885 = sqrt(((_1861 * _1861) + (_1860 * _1860)) + (_1862 * _1862)) / (_1816 + 9.9999997473787516355514526367188e-06);
        float _4503 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
        float _1886 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _1887 = _1886 * 2.0;
        float _1891 = (1.0 - _1886) / (_1886 + 1.0);
        float _4514 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
        float _1892 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _1901 = ((((1.0 - _1892) * (_1887 + 2.0)) * exp2(log2(isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_1887 + 1.0))) + _1892) * _1816;
        float _1902 = _1784 * 0.5;
        float _1903 = _1794 * 0.5;
        float _1904 = _1804 * 0.5;
        float _1905 = dot(vec3(_1902, _1903, _1904), vec3(_1902, _1903, _1904));
        float _1910 = (_1905 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1905);
        float _1918 = (dot(vec3(_1063, _1064, _1065), vec3(_1910 * _1902, _1910 * _1903, _1910 * _1904)) + 1.0) * 0.5;
        float _4525 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1927 = sqrt(((_1903 * _1903) + (_1902 * _1902)) + (_1904 * _1904)) / (_1817 + 9.9999997473787516355514526367188e-06);
        float _4536 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
        float _1928 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _1929 = _1928 * 2.0;
        float _1933 = (1.0 - _1928) / (_1928 + 1.0);
        float _4547 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
        float _1934 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _1943 = ((((1.0 - _1934) * (_1929 + 2.0)) * exp2(log2(isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_1929 + 1.0))) + _1934) * _1817;
        _1951 = _1784;
        _1952 = _1783;
        _1953 = _1782;
        _1954 = _1794;
        _1955 = _1793;
        _1956 = _1792;
        _1957 = _1804;
        _1958 = _1803;
        _1959 = _1802;
        _1960 = _1817;
        _1961 = _1816;
        _1962 = _1815;
        _1963 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0)));
        _1964 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0)));
        _1965 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0)));
    }
    else
    {
        _1951 = _1642;
        _1952 = _1642;
        _1953 = _1642;
        _1954 = _1642;
        _1955 = _1642;
        _1956 = _1642;
        _1957 = _1642;
        _1958 = _1642;
        _1959 = _1642;
        _1960 = _1642;
        _1961 = _1642;
        _1962 = _1642;
        _1963 = 0.0;
        _1964 = 0.0;
        _1965 = 0.0;
    }
    float _1975 = (cbModelParam._m0[1u].x * (_1963 - _1654)) + _1654;
    float _1976 = (cbModelParam._m0[1u].x * (_1964 - _1655)) + _1655;
    float _1977 = (cbModelParam._m0[1u].x * (_1965 - _1656)) + _1656;
    float _1998 = fma(_1977, cbSceneParam._m0[89u].z, fma(_1976, cbSceneParam._m0[89u].y, _1975 * cbSceneParam._m0[89u].x));
    float _2001 = fma(_1977, cbSceneParam._m0[90u].z, fma(_1976, cbSceneParam._m0[90u].y, _1975 * cbSceneParam._m0[90u].x));
    float _2004 = fma(_1977, cbSceneParam._m0[91u].z, fma(_1976, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1975));
    float _2019 = _1250 * 0.5;
    float _2020 = _1251 * 0.5;
    float _2021 = _1252 * 0.5;
    float _2022 = dot(vec4(_2019, _2020, _2021, 1.0), vec4(_1953, _1956, _1959, _1962));
    float _2025 = dot(vec4(_2019, _2020, _2021, 1.0), vec4(_1952, _1955, _1958, _1961));
    float _2028 = dot(vec4(_2019, _2020, _2021, 1.0), vec4(_1951, _1954, _1957, _1960));
    float _2062;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2035 = dot(vec4(_2019, _2020, _2021, 1.0), vec4(_1641, _1645, _1648, _1651));
        float _2039 = dot(vec4(_2019, _2020, _2021, 1.0), vec4(_1643, _1646, _1649, _1652));
        float _2043 = dot(vec4(_2019, _2020, _2021, 1.0), vec4(_1644, _1647, _1650, _1653));
        float _2050 = dot(vec4(cbModelParam._m0[39u]), vec4(_2019, _2020, _2021, 1.0));
        _2062 = dot(vec3(isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0)), isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0)), isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2050) ? 0.0 : (isnan(0.0) ? _2050 : max(0.0, _2050))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2062 = 1.0;
    }
    float _2073;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2064 = dot(vec4(cbModelParam._m0[40u]), vec4(_2019, _2020, _2021, 1.0));
        _2073 = dot(vec3(isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0)), isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0)), isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2064) ? 0.0 : (isnan(0.0) ? _2064 : max(0.0, _2064))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2073 = 1.0;
    }
    float _2077 = (_2073 * cbModelParam._m0[1u].x) + (_2062 * (1.0 - cbModelParam._m0[1u].x));
    float _2087 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1067);
    float _2088 = isnan(_2087) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2087 : min(cbModelParam._m0[25u].z, _2087));
    float _2168;
    float _2170;
    float _2172;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2135 = fma(_1312, cbModelParam._m0[13u].z, fma(_1308, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1304)) + cbModelParam._m0[13u].w;
        float _2139 = fma(_1312, cbModelParam._m0[14u].z, fma(_1308, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1304)) + cbModelParam._m0[14u].w;
        float _2143 = fma(_1312, cbModelParam._m0[15u].z, fma(_1308, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1304)) + cbModelParam._m0[15u].w;
        float _2146 = fma(_1252, cbModelParam._m0[13u].z, fma(_1251, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1250));
        float _2149 = fma(_1252, cbModelParam._m0[14u].z, fma(_1251, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1250));
        float _2152 = fma(_1252, cbModelParam._m0[15u].z, fma(_1251, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1250));
        float _2180;
        if (_2146 > 0.0)
        {
            _2180 = abs((1.0 - _2135) / _2146);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2146 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2135 + 1.0) / _2146);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2180 = frontier_phi_17_15_ladder;
        }
        float _2403;
        if (_2149 > 0.0)
        {
            _2403 = abs((1.0 - _2139) / _2149);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2149 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2139 + 1.0) / _2149);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2403 = frontier_phi_26_22_ladder;
        }
        float _2660;
        if (_2152 > 0.0)
        {
            _2660 = abs((1.0 - _2143) / _2152);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2152 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2143 + 1.0) / _2152);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2660 = frontier_phi_38_33_ladder;
        }
        float _2662 = isnan(_2403) ? _2180 : (isnan(_2180) ? _2403 : min(_2180, _2403));
        float _2663 = isnan(_2660) ? _2662 : (isnan(_2662) ? _2660 : min(_2662, _2660));
        float _2667 = (_2663 * _2146) + _2135;
        float _2668 = (_2663 * _2149) + _2139;
        float _2669 = (_2663 * _2152) + _2143;
        float _2670 = _2663 * 9.9999997473787516355514526367188e-05;
        float _2672 = (-1.0) - _2670;
        float _2674 = _2670 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2669 > _2674) || ((_2669 < _2672) || ((_2668 > _2674) || ((_2668 < _2672) || ((_2667 < _2672) || (_2667 > _2674))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2797 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2669, cbModelParam._m0[9u].z, fma(_2668, cbModelParam._m0[9u].y, _2667 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2669, cbModelParam._m0[10u].z, fma(_2668, cbModelParam._m0[10u].y, _2667 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2669, cbModelParam._m0[11u].z, fma(_2668, cbModelParam._m0[11u].y, _2667 * cbModelParam._m0[11u].x))), _2088);
            frontier_phi_16_38_ladder = _2797.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2797.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2797.x * cbModelParam._m0[1u].y;
        }
        _2168 = frontier_phi_16_38_ladder_2;
        _2170 = frontier_phi_16_38_ladder_1;
        _2172 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2156 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1250, _1251, _1252), _2088);
        _2168 = _2156.x * cbModelParam._m0[1u].y;
        _2170 = _2156.y * cbModelParam._m0[1u].y;
        _2172 = _2156.z * cbModelParam._m0[1u].y;
    }
    float _2176 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1067);
    float _2177 = isnan(_2176) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2176 : min(cbModelParam._m0[25u].w, _2176));
    float _2266;
    float _2268;
    float _2270;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2230 = fma(_1312, cbModelParam._m0[21u].z, fma(_1308, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1304)) + cbModelParam._m0[21u].w;
        float _2234 = fma(_1312, cbModelParam._m0[22u].z, fma(_1308, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1304)) + cbModelParam._m0[22u].w;
        float _2238 = fma(_1312, cbModelParam._m0[23u].z, fma(_1308, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1304)) + cbModelParam._m0[23u].w;
        float _2241 = fma(_1252, cbModelParam._m0[21u].z, fma(_1251, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1250));
        float _2244 = fma(_1252, cbModelParam._m0[22u].z, fma(_1251, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1250));
        float _2247 = fma(_1252, cbModelParam._m0[23u].z, fma(_1251, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1250));
        float _2408;
        if (_2241 > 0.0)
        {
            _2408 = abs((1.0 - _2230) / _2241);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2241 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2230 + 1.0) / _2241);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2408 = frontier_phi_28_24_ladder;
        }
        float _2687;
        if (_2244 > 0.0)
        {
            _2687 = abs((1.0 - _2234) / _2244);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2244 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2234 + 1.0) / _2244);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2687 = frontier_phi_40_35_ladder;
        }
        float _2900;
        if (_2247 > 0.0)
        {
            _2900 = abs((1.0 - _2238) / _2247);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2247 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2238 + 1.0) / _2247);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2900 = frontier_phi_49_46_ladder;
        }
        float _2902 = isnan(_2687) ? _2408 : (isnan(_2408) ? _2687 : min(_2408, _2687));
        float _2903 = isnan(_2900) ? _2902 : (isnan(_2902) ? _2900 : min(_2902, _2900));
        float _2907 = (_2903 * _2241) + _2230;
        float _2908 = (_2903 * _2244) + _2234;
        float _2909 = (_2903 * _2247) + _2238;
        float _2910 = _2903 * 9.9999997473787516355514526367188e-05;
        float _2911 = (-1.0) - _2910;
        float _2913 = _2910 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2909 > _2913) || ((_2909 < _2911) || ((_2908 > _2913) || ((_2908 < _2911) || ((_2907 < _2911) || (_2907 > _2913))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3110 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2909, cbModelParam._m0[17u].z, fma(_2908, cbModelParam._m0[17u].y, _2907 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2909, cbModelParam._m0[18u].z, fma(_2908, cbModelParam._m0[18u].y, _2907 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2909, cbModelParam._m0[19u].z, fma(_2908, cbModelParam._m0[19u].y, _2907 * cbModelParam._m0[19u].x))), _2177);
            frontier_phi_25_49_ladder = _3110.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3110.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3110.x * cbModelParam._m0[1u].z;
        }
        _2266 = frontier_phi_25_49_ladder_2;
        _2268 = frontier_phi_25_49_ladder_1;
        _2270 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2250 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1250, _1251, _1252), _2177);
        _2266 = _2250.x * cbModelParam._m0[1u].z;
        _2268 = _2250.y * cbModelParam._m0[1u].z;
        _2270 = _2250.z * cbModelParam._m0[1u].z;
    }
    float _2283 = (((_1275 * _1227) + _1276) * _1242) * ((cbModelParam._m0[1u].w * (_2266 - _2168)) + _2168);
    float _2285 = (((_1275 * _1229) + _1276) * _1242) * ((cbModelParam._m0[1u].w * (_2268 - _2170)) + _2170);
    float _2287 = (((_1275 * _1230) + _1276) * _1242) * ((cbModelParam._m0[1u].w * (_2270 - _2172)) + _2172);
    float _2290 = fma(_2287, cbSceneParam._m0[89u].z, fma(_2285, cbSceneParam._m0[89u].y, _2283 * cbSceneParam._m0[89u].x));
    float _2293 = fma(_2287, cbSceneParam._m0[90u].z, fma(_2285, cbSceneParam._m0[90u].y, _2283 * cbSceneParam._m0[90u].x));
    float _2296 = fma(_2287, cbSceneParam._m0[91u].z, fma(_2285, cbSceneParam._m0[91u].y, _2283 * cbSceneParam._m0[91u].x));
    vec4 _2304 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1164, _1165));
    float _2306 = _2304.w;
    float _2318 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2306);
    float _2319 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2306);
    float _2320 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2306);
    uvec4 _2324 = floatBitsToUint(cbInstanceData._m0[_1202 + 5u]);
    uint _2326 = _2324.x * 14u;
    uint _2327 = _2326 + 13u;
    float _2334 = _1242 + (-1.0);
    float _2339 = (cbLight._m0[_2327].x * _2334) + 1.0;
    float _2340 = (cbLight._m0[_2327].y * _2334) + 1.0;
    float _2341 = (cbLight._m0[_2327].z * _2334) + 1.0;
    float _2342 = (cbLight._m0[_2327].w * _2334) + 1.0;
    uint _2343 = _2326 + 5u;
    float _2349 = isnan(1.0) ? _2340 : (isnan(_2340) ? 1.0 : min(_2340, 1.0));
    uint _2353 = _2326 + 4u;
    float _2362 = isnan(1.0) ? _2339 : (isnan(_2339) ? 1.0 : min(_2339, 1.0));
    uint _2366 = _2326 | 1u;
    float _2377 = dot(vec3(cbLight._m0[_2326].xyz), vec3(_1063, _1064, _1065));
    float _2380 = dot(vec3(cbLight._m0[_2366].xyz), vec3(_1063, _1064, _1065));
    float _4683 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _4694 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2385 = (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0))) * 0.3183098733425140380859375;
    float _2387 = (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0))) * 0.3183098733425140380859375;
    float _2394 = ((cbLight._m0[_2343].x * _2349) * _2387) + (((cbLight._m0[_2353].x * _2318) * _2362) * _2385);
    float _2395 = ((_2349 * cbLight._m0[_2343].y) * _2387) + (((cbLight._m0[_2353].y * _2319) * _2362) * _2385);
    float _2396 = ((_2349 * cbLight._m0[_2343].z) * _2387) + (((cbLight._m0[_2353].z * _2320) * _2362) * _2385);
    uvec4 _2400 = floatBitsToUint(cbLight._m0[_2326 + 12u]);
    bool _2402 = _2400.x == 0u;
    float _2413;
    float _2415;
    float _2417;
    if (_2402)
    {
        _2413 = _2394;
        _2415 = _2395;
        _2417 = _2396;
    }
    else
    {
        uint _2421 = _2326 + 6u;
        float _2437 = (dot(vec3(cbLight._m0[_2326 + 2u].xyz), vec3(_1063, _1064, _1065)) * 0.5) + 0.5;
        float _2438 = _2437 * _2437;
        float _4705 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2439 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
        float _2440 = isnan(1.0) ? _2341 : (isnan(_2341) ? 1.0 : min(_2341, 1.0));
        _2413 = (((cbLight._m0[_2421].x * 0.3183098733425140380859375) * _2439) * _2440) + _2394;
        _2415 = (((cbLight._m0[_2421].y * 0.3183098733425140380859375) * _2439) * _2440) + _2395;
        _2417 = (((cbLight._m0[_2421].z * 0.3183098733425140380859375) * _2439) * _2440) + _2396;
    }
    bool _2420 = _2400.y == 0u;
    float _2458;
    float _2460;
    float _2462;
    if (_2420)
    {
        _2458 = _2413;
        _2460 = _2415;
        _2462 = _2417;
    }
    else
    {
        uint _2631 = _2326 + 7u;
        float _2647 = (dot(vec3(cbLight._m0[_2326 + 3u].xyz), vec3(_1063, _1064, _1065)) * 0.5) + 0.5;
        float _2648 = _2647 * _2647;
        float _4721 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2649 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
        float _2650 = isnan(1.0) ? _2342 : (isnan(_2342) ? 1.0 : min(_2342, 1.0));
        _2458 = (((cbLight._m0[_2631].x * 0.3183098733425140380859375) * _2649) * _2650) + _2413;
        _2460 = (((cbLight._m0[_2631].y * 0.3183098733425140380859375) * _2649) * _2650) + _2415;
        _2462 = (((cbLight._m0[_2631].z * 0.3183098733425140380859375) * _2649) * _2650) + _2417;
    }
    uint _2465 = _2326 + 8u;
    float _2478 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2326].w)) * _1067) * 0.949999988079071044921875);
    float _2479 = _2478 * _2478;
    float _2480 = cbLight._m0[_2326].x + _1144;
    float _2481 = cbLight._m0[_2326].y + _1145;
    float _2482 = cbLight._m0[_2326].z + _1146;
    float _2486 = inversesqrt(dot(vec3(_2480, _2481, _2482), vec3(_2480, _2481, _2482)));
    float _2487 = _2486 * _2480;
    float _2488 = _2486 * _2481;
    float _2489 = _2486 * _2482;
    float _2490 = dot(vec3(_1063, _1064, _1065), vec3(cbLight._m0[_2326].xyz));
    float _4737 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2493 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
    float _4748 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
    float _2494 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
    float _2495 = dot(vec3(_1063, _1064, _1065), vec3(_2487, _2488, _2489));
    float _4759 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
    float _2498 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
    float _2499 = dot(vec3(cbLight._m0[_2326].xyz), vec3(_2487, _2488, _2489));
    float _4770 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
    float _2503 = _2479 * _2479;
    float _2507 = ((_2498 * _2498) * (_2503 + (-1.0))) + 1.0;
    float _2515 = exp2(log2(1.0 - (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0)))) * 5.0);
    float _2516 = 0.959999978542327880859375 - _1224;
    float _2518 = 0.959999978542327880859375 - _1225;
    float _2519 = 0.959999978542327880859375 - _1226;
    float _2526 = 1.0 - _2479;
    float _2537 = (0.5 / (((_2494 * ((_2493 * _2526) + _2479)) + 9.9999999392252902907785028219223e-09) + (((_2494 * _2526) + _2479) * _2493))) * _2493;
    float _4781 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
    float _2539 = (isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0))) * (_2503 / ((_2507 * _2507) * 3.141590118408203125));
    uint _2553 = _2326 + 9u;
    float _2564 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2366].w)) * _1067) * 0.949999988079071044921875);
    float _2565 = _2564 * _2564;
    float _2566 = cbLight._m0[_2366].x + _1144;
    float _2567 = cbLight._m0[_2366].y + _1145;
    float _2568 = cbLight._m0[_2366].z + _1146;
    float _2572 = inversesqrt(dot(vec3(_2566, _2567, _2568), vec3(_2566, _2567, _2568)));
    float _2573 = _2572 * _2566;
    float _2574 = _2572 * _2567;
    float _2575 = _2572 * _2568;
    float _2576 = dot(vec3(_1063, _1064, _1065), vec3(cbLight._m0[_2366].xyz));
    float _4792 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
    float _2579 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
    float _2580 = dot(vec3(_1063, _1064, _1065), vec3(_2573, _2574, _2575));
    float _4803 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
    float _2583 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
    float _2584 = dot(vec3(cbLight._m0[_2366].xyz), vec3(_2573, _2574, _2575));
    float _4814 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
    float _2588 = _2565 * _2565;
    float _2592 = ((_2583 * _2583) * (_2588 + (-1.0))) + 1.0;
    float _2599 = exp2(log2(1.0 - (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0)))) * 5.0);
    float _2606 = 1.0 - _2565;
    float _2616 = (0.5 / (((_2494 * ((_2579 * _2606) + _2565)) + 9.9999999392252902907785028219223e-09) + (((_2494 * _2606) + _2565) * _2579))) * _2579;
    float _4825 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
    float _2618 = (isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0))) * (_2588 / ((_2592 * _2592) * 3.141590118408203125));
    float _2628 = (((((_2599 * _2516) + _1227) * cbLight._m0[_2553].x) * _2618) * _2349) + ((((cbLight._m0[_2465].x * _2318) * ((_2515 * _2516) + _1227)) * _2539) * _2362);
    float _2629 = (((((_2599 * _2518) + _1229) * cbLight._m0[_2553].y) * _2618) * _2349) + ((((cbLight._m0[_2465].y * _2319) * ((_2515 * _2518) + _1229)) * _2539) * _2362);
    float _2630 = (((((_2599 * _2519) + _1230) * cbLight._m0[_2553].z) * _2618) * _2349) + ((((cbLight._m0[_2465].z * _2320) * ((_2515 * _2519) + _1230)) * _2539) * _2362);
    float _2692;
    float _2694;
    float _2696;
    if (_2402)
    {
        _2692 = _2628;
        _2694 = _2629;
        _2696 = _2630;
    }
    else
    {
        uint _2698 = _2326 + 2u;
        uint _2702 = _2326 + 10u;
        float _2716 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2698].w)) * _1067) * 0.949999988079071044921875);
        float _2717 = _2716 * _2716;
        float _2718 = cbLight._m0[_2698].x + _1144;
        float _2719 = cbLight._m0[_2698].y + _1145;
        float _2720 = cbLight._m0[_2698].z + _1146;
        float _2724 = inversesqrt(dot(vec3(_2718, _2719, _2720), vec3(_2718, _2719, _2720)));
        float _2725 = _2724 * _2718;
        float _2726 = _2724 * _2719;
        float _2727 = _2724 * _2720;
        float _2728 = dot(vec3(_1063, _1064, _1065), vec3(cbLight._m0[_2698].xyz));
        float _4836 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        float _2731 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
        float _2732 = dot(vec3(_1063, _1064, _1065), vec3(_2725, _2726, _2727));
        float _4847 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2735 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
        float _2736 = dot(vec3(cbLight._m0[_2698].xyz), vec3(_2725, _2726, _2727));
        float _4858 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        float _2740 = _2717 * _2717;
        float _2744 = ((_2735 * _2735) * (_2740 + (-1.0))) + 1.0;
        float _2751 = exp2(log2(1.0 - (isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0)))) * 5.0);
        float _2758 = 1.0 - _2717;
        float _2768 = (0.5 / (((_2494 * ((_2731 * _2758) + _2717)) + 9.9999999392252902907785028219223e-09) + (((_2494 * _2758) + _2717) * _2731))) * _2731;
        float _4869 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
        float _2770 = (isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0))) * (_2740 / ((_2744 * _2744) * 3.141590118408203125));
        float _2771 = isnan(1.0) ? _2341 : (isnan(_2341) ? 1.0 : min(_2341, 1.0));
        _2692 = (((((_2751 * _2516) + _1227) * cbLight._m0[_2702].x) * _2770) * _2771) + _2628;
        _2694 = (((((_2751 * _2518) + _1229) * cbLight._m0[_2702].y) * _2770) * _2771) + _2629;
        _2696 = (((((_2751 * _2519) + _1230) * cbLight._m0[_2702].z) * _2770) * _2771) + _2630;
    }
    float _2806;
    float _2808;
    float _2810;
    if (_2420)
    {
        _2806 = _2692;
        _2808 = _2694;
        _2810 = _2696;
    }
    else
    {
        uint _2817 = _2326 + 3u;
        uint _2821 = _2326 + 11u;
        float _2835 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2817].w)) * _1067) * 0.949999988079071044921875);
        float _2836 = _2835 * _2835;
        float _2837 = cbLight._m0[_2817].x + _1144;
        float _2838 = cbLight._m0[_2817].y + _1145;
        float _2839 = cbLight._m0[_2817].z + _1146;
        float _2843 = inversesqrt(dot(vec3(_2837, _2838, _2839), vec3(_2837, _2838, _2839)));
        float _2844 = _2843 * _2837;
        float _2845 = _2843 * _2838;
        float _2846 = _2843 * _2839;
        float _2847 = dot(vec3(_1063, _1064, _1065), vec3(cbLight._m0[_2817].xyz));
        float _4885 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
        float _2850 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
        float _2851 = dot(vec3(_1063, _1064, _1065), vec3(_2844, _2845, _2846));
        float _4896 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
        float _2854 = isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0));
        float _2855 = dot(vec3(cbLight._m0[_2817].xyz), vec3(_2844, _2845, _2846));
        float _4907 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
        float _2859 = _2836 * _2836;
        float _2863 = ((_2854 * _2854) * (_2859 + (-1.0))) + 1.0;
        float _2870 = exp2(log2(1.0 - (isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0)))) * 5.0);
        float _2877 = 1.0 - _2836;
        float _2887 = (0.5 / (((_2494 * ((_2850 * _2877) + _2836)) + 9.9999999392252902907785028219223e-09) + (((_2494 * _2877) + _2836) * _2850))) * _2850;
        float _4918 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
        float _2889 = (isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0))) * (_2859 / ((_2863 * _2863) * 3.141590118408203125));
        float _2890 = isnan(1.0) ? _2342 : (isnan(_2342) ? 1.0 : min(_2342, 1.0));
        _2806 = (((((_2870 * _2516) + _1227) * cbLight._m0[_2821].x) * _2889) * _2890) + _2692;
        _2808 = (((((_2870 * _2518) + _1229) * cbLight._m0[_2821].y) * _2889) * _2890) + _2694;
        _2810 = (((((_2870 * _2519) + _1230) * cbLight._m0[_2821].z) * _2889) * _2890) + _2696;
    }
    float _3025;
    float _3027;
    float _3029;
    float _3031;
    float _3033;
    float _3035;
    if (_2324.y == 0u)
    {
        float _2965 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2966 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2965;
        float _2967 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2965;
        float _2968 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2965;
        uvec4 _2980 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2981 = _2980.x;
        uint _2992 = uint((float(_2980.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1165) / _2981))) + floor(float(uint(cbSceneParam._m0[85u].x * _1164) / _2981)));
        float _3002 = (log2(_2968 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3003 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
        uint _3006 = uint(isnan(14.0) ? _3003 : (isnan(_3003) ? 14.0 : min(_3003, 14.0)));
        uvec4 _3011 = texelFetch(g_lightClusterGridBuffer, int(((_3006 << 2u) + (_2992 << 6u)) >> 2u));
        uint _3012 = _3011.x;
        uint _3013 = _2980.z;
        float _3115;
        float _3117;
        float _3119;
        float _3121;
        float _3123;
        float _3125;
        if (((((1u << ((_3013 >> 4u) & 15u)) + 4294967295u) & _3012) == 0u) || ((_3013 & 240u) == 0u))
        {
            _3115 = 0.0;
            _3117 = 0.0;
            _3119 = 0.0;
            _3121 = 0.0;
            _3123 = 0.0;
            _3125 = 0.0;
        }
        else
        {
            float _3116;
            float _3118;
            float _3120;
            float _3122;
            float _3124;
            float _3126;
            float _3268 = 0.0;
            float _3269 = 0.0;
            float _3270 = 0.0;
            float _3271 = 0.0;
            float _3272 = 0.0;
            float _3273 = 0.0;
            uint _3274 = 0u;
            uint _3283;
            bool _3284;
            for (;;)
            {
                _3283 = texelFetch(g_lightClassification, int((((_3006 << 5u) + (_2992 << 9u)) + (_3274 << 2u)) >> 2u)).x;
                _3284 = _3283 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3284)
                {
                    frontier_phi_66_pred = _3268;
                    frontier_phi_66_pred_1 = _3273;
                    frontier_phi_66_pred_2 = _3272;
                    frontier_phi_66_pred_3 = _3271;
                    frontier_phi_66_pred_4 = _3270;
                    frontier_phi_66_pred_5 = _3269;
                }
                else
                {
                    float _3413;
                    float _3414;
                    float _3415;
                    float _3416;
                    float _3417;
                    float _3418;
                    uint _3419;
                    _3413 = _3268;
                    _3414 = _3269;
                    _3415 = _3270;
                    _3416 = _3271;
                    _3417 = _3272;
                    _3418 = _3273;
                    _3419 = _3283;
                    float _3340;
                    float _3341;
                    float _3342;
                    float _3343;
                    float _3344;
                    float _3345;
                    for (;;)
                    {
                        uint _3423 = uint(findLSB(_3419)) + (_3274 << 5u);
                        uint _3420 = (_3419 + 4294967295u) & _3419;
                        uint _3425 = _3423 * 48u;
                        vec4 _3439 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3425)).x, texelFetch(g_PointLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3425 + 3u)).x));
                        uint _3445 = (_3423 * 48u) + 4u;
                        vec4 _3458 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3445)).x, texelFetch(g_PointLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3445 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3445 + 3u)).x));
                        uint _3464 = (_3423 * 48u) + 8u;
                        vec3 _3475 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3464)).x, texelFetch(g_PointLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3464 + 2u)).x));
                        float _3479 = _3439.x - _2966;
                        float _3480 = _3439.y - _2967;
                        float _3481 = _3439.z - _2968;
                        float _3482 = dot(vec3(_3479, _3480, _3481), vec3(_3479, _3480, _3481));
                        float _3485 = inversesqrt(_3482);
                        float _3486 = _3485 * _3479;
                        float _3487 = _3485 * _3480;
                        float _3488 = _3485 * _3481;
                        float _3489 = dot(vec3(_1183, _1186, _1189), vec3(_3486, _3487, _3488));
                        float _3494 = 1.0 - (_3482 * _3439.w);
                        float _4944 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                        float _3495 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
                        float _3496 = sqrt(_3482) * _3458.w;
                        float _3499 = 1.39999997615814208984375 / (_3496 + 1.39999997615814208984375);
                        float _3500 = _3499 * _3499;
                        float _3503 = ((1.0 - _3500) * _3489) + _3500;
                        float _3506 = _3496 * _3496;
                        float _3510 = ((isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0))) * _3495) / ((_3506 * 0.699999988079071044921875) + 1.0);
                        float _3514 = (-0.0) - _2966;
                        float _3515 = (-0.0) - _2967;
                        float _3516 = (-0.0) - _2968;
                        float _3520 = inversesqrt(dot(vec3(_3514, _3515, _3516), vec3(_3514, _3515, _3516)));
                        float _3521 = _3520 * _3514;
                        float _3522 = _3520 * _3515;
                        float _3523 = _3520 * _3516;
                        float _3531 = exp2(log2(1.0 / ((_3506 * 3.5) + 5.0)) * 0.25);
                        float _3532 = 1.0 - _1258;
                        float _3539 = sqrt(1.0 - ((1.0 - (_3532 * _3532)) * (1.0 - (_3531 * _3531))));
                        float _3540 = _3539 * _3539;
                        float _3541 = _3540 * _3540;
                        float _3542 = _3521 + _3486;
                        float _3543 = _3522 + _3487;
                        float _3544 = _3523 + _3488;
                        float _3548 = inversesqrt(dot(vec3(_3542, _3543, _3544), vec3(_3542, _3543, _3544)));
                        float _3552 = dot(vec3(_1183, _1186, _1189), vec3(_3521, _3522, _3523));
                        float _4960 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                        float _3555 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
                        float _3556 = dot(vec3(_1183, _1186, _1189), vec3(_3548 * _3542, _3548 * _3543, _3548 * _3544));
                        float _4971 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                        float _3559 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
                        float _3563 = ((_3559 * _3559) * (_3541 + (-1.0))) + 1.0;
                        float _3564 = _3499 * _3540;
                        float _3565 = _3564 * _3564;
                        float _3568 = ((1.0 - _3565) * _3489) + _3565;
                        float _4982 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                        float _3569 = isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0));
                        float _3570 = 1.0 - _3540;
                        float _3580 = (0.5 / (((_3569 * ((_3555 * _3570) + _3540)) + 9.9999999392252902907785028219223e-09) + (((_3569 * _3570) + _3540) * _3555))) * _3569;
                        float _4993 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                        float _3591 = (((_3541 * 3.1415927410125732421875) * (isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0)))) / ((_3563 * _3563) * ((_3506 * 2.1991131305694580078125) + 3.141590118408203125))) * _3495;
                        _3343 = (_3510 * _3458.x) + _3416;
                        _3344 = (_3510 * _3458.y) + _3417;
                        _3345 = (_3510 * _3458.z) + _3418;
                        _3340 = (_3591 * _3475.x) + _3413;
                        _3341 = (_3591 * _3475.y) + _3414;
                        _3342 = (_3591 * _3475.z) + _3415;
                        if (_3420 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3413 = _3340;
                            _3414 = _3341;
                            _3415 = _3342;
                            _3416 = _3343;
                            _3417 = _3344;
                            _3418 = _3345;
                            _3419 = _3420;
                        }
                    }
                    frontier_phi_66_pred = _3340;
                    frontier_phi_66_pred_1 = _3345;
                    frontier_phi_66_pred_2 = _3344;
                    frontier_phi_66_pred_3 = _3343;
                    frontier_phi_66_pred_4 = _3342;
                    frontier_phi_66_pred_5 = _3341;
                }
                _3116 = frontier_phi_66_pred;
                _3126 = frontier_phi_66_pred_1;
                _3124 = frontier_phi_66_pred_2;
                _3122 = frontier_phi_66_pred_3;
                _3120 = frontier_phi_66_pred_4;
                _3118 = frontier_phi_66_pred_5;
                uint _3275 = _3274 + 1u;
                if (_3275 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3268 = _3116;
                    _3269 = _3118;
                    _3270 = _3120;
                    _3271 = _3122;
                    _3272 = _3124;
                    _3273 = _3126;
                    _3274 = _3275;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3115 = _3116;
            _3117 = _3118;
            _3119 = _3120;
            _3121 = _3122;
            _3123 = _3124;
            _3125 = _3126;
        }
        uvec4 _3129 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3130 = _3129.z;
        uint _3132 = (_3130 >> 8u) & 15u;
        float _3236;
        float _3238;
        float _3240;
        float _3242;
        float _3244;
        float _3246;
        if (((4294967295u << _3132) & _3012) == 0u)
        {
            _3236 = _3115;
            _3238 = _3117;
            _3240 = _3119;
            _3242 = _3121;
            _3244 = _3123;
            _3246 = _3125;
        }
        else
        {
            float _3261 = inversesqrt(dot(vec3(_2966, _2967, _2968), vec3(_2966, _2967, _2968)));
            float _3262 = _3261 * _2966;
            float _3263 = _3261 * _2967;
            float _3264 = _3261 * _2968;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3132 < ((_3130 >> 12u) & 15u))
            {
                float _3237;
                float _3239;
                float _3241;
                float _3243;
                float _3245;
                float _3247;
                float _3396 = _3115;
                float _3397 = _3117;
                float _3398 = _3119;
                float _3399 = _3121;
                float _3400 = _3123;
                float _3401 = _3125;
                uint _3402 = _3132;
                uint _3411;
                bool _3412;
                for (;;)
                {
                    _3411 = texelFetch(g_lightClassification, int((((_3006 << 5u) + (_2992 << 9u)) + (_3402 << 2u)) >> 2u)).x;
                    _3412 = _3411 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3412)
                    {
                        frontier_phi_77_pred = _3401;
                        frontier_phi_77_pred_1 = _3400;
                        frontier_phi_77_pred_2 = _3399;
                        frontier_phi_77_pred_3 = _3398;
                        frontier_phi_77_pred_4 = _3397;
                        frontier_phi_77_pred_5 = _3396;
                    }
                    else
                    {
                        float _3605;
                        float _3606;
                        float _3607;
                        float _3608;
                        float _3609;
                        float _3610;
                        float _3898;
                        float _3899;
                        float _3900;
                        float _3901;
                        float _3902;
                        float _3903;
                        float _3618 = _3396;
                        float _3619 = _3397;
                        float _3620 = _3398;
                        float _3621 = _3399;
                        float _3622 = _3400;
                        float _3623 = _3401;
                        uint _3624 = _3411;
                        uint _3625;
                        vec4 _3650;
                        float _3651;
                        vec4 _3666;
                        vec3 _3678;
                        vec4 _3693;
                        vec4 _3708;
                        float _3754;
                        bool _3755;
                        for (;;)
                        {
                            uint _3635 = ((_3402 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3624));
                            _3625 = (_3624 + 4294967295u) & _3624;
                            uint _3637 = _3635 * 40u;
                            _3650 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 3u)).x));
                            _3651 = _3650.w;
                            uint _3653 = (_3635 * 40u) + 4u;
                            _3666 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3653)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 3u)).x));
                            uint _3668 = (_3635 * 40u) + 8u;
                            _3678 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3668)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 2u)).x));
                            uint _3680 = (_3635 * 40u) + 16u;
                            _3693 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3680)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 3u)).x));
                            uint _3695 = (_3635 * 40u) + 20u;
                            _3708 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3695)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 3u)).x));
                            uint _3710 = (_3635 * 40u) + 24u;
                            vec4 _3723 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3710)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 3u)).x));
                            uint _3729 = (_3635 * 40u) + 28u;
                            vec4 _3742 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3729)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 3u)).x));
                            _3754 = fma(_2968, _3742.z, fma(_2967, _3742.y, _3742.x * _2966)) + _3742.w;
                            _3755 = !((fma(_2968, _3723.z, fma(_2967, _3723.y, _3723.x * _2966)) + _3723.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3755)
                            {
                                float _3782 = _3650.x - _2966;
                                float _3783 = _3650.y - _2967;
                                float _3784 = _3650.z - _2968;
                                float _3785 = dot(vec3(_3782, _3783, _3784), vec3(_3782, _3783, _3784));
                                float _3788 = inversesqrt(_3785);
                                float _3789 = _3788 * _3782;
                                float _3790 = _3788 * _3783;
                                float _3791 = _3788 * _3784;
                                float _3795 = 1.0 - (_3785 / (_3651 * _3651));
                                float _5004 = isnan(0.0) ? _3795 : (isnan(_3795) ? 0.0 : max(_3795, 0.0));
                                float _3796 = isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0));
                                float _3800 = sqrt(_3785) * _3666.w;
                                float _3802 = 1.39999997615814208984375 / (_3800 + 1.39999997615814208984375);
                                float _3803 = _3802 * _3802;
                                float _3806 = ((1.0 - _3803) * dot(vec3(_3789, _3790, _3791), vec3(_1183, _1186, _1189))) + _3803;
                                float _3809 = _3800 * _3800;
                                float _3813 = (fma(_2968, _3693.z, fma(_2967, _3693.y, _3693.x * _2966)) + _3693.w) / _3754;
                                float _3814 = (fma(_2968, _3708.z, fma(_2967, _3708.y, _3708.x * _2966)) + _3708.w) / _3754;
                                float _3818 = 1.0 - dot(vec2(_3813, _3814), vec2(_3813, _3814));
                                float _5020 = isnan(0.0) ? _3818 : (isnan(_3818) ? 0.0 : max(_3818, 0.0));
                                float _3819 = isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0));
                                float _3820 = _3819 * (((isnan(0.0) ? _3806 : (isnan(_3806) ? 0.0 : max(_3806, 0.0))) * _3796) / ((_3809 * 0.699999988079071044921875) + 1.0));
                                float _3832 = exp2(log2(1.0 / ((_3809 * 3.5) + 5.0)) * 0.25);
                                float _3833 = 1.0 - _1258;
                                float _3840 = sqrt(1.0 - ((1.0 - (_3833 * _3833)) * (1.0 - (_3832 * _3832))));
                                float _3841 = _3840 * _3840;
                                float _3842 = _3841 * _3841;
                                float _3843 = _3789 - _3262;
                                float _3844 = _3790 - _3263;
                                float _3845 = _3791 - _3264;
                                float _3849 = inversesqrt(dot(vec3(_3843, _3844, _3845), vec3(_3843, _3844, _3845)));
                                float _3853 = dot(vec3(_1183, _1186, _1189), vec3((-0.0) - _3262, (-0.0) - _3263, (-0.0) - _3264));
                                float _5031 = isnan(0.0) ? _3853 : (isnan(_3853) ? 0.0 : max(_3853, 0.0));
                                float _3856 = isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0));
                                float _3857 = dot(vec3(_1183, _1186, _1189), vec3(_3849 * _3843, _3849 * _3844, _3849 * _3845));
                                float _5042 = isnan(0.0) ? _3857 : (isnan(_3857) ? 0.0 : max(_3857, 0.0));
                                float _3860 = isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0));
                                float _3864 = ((_3860 * _3860) * (_3842 + (-1.0))) + 1.0;
                                float _3865 = _3802 * _3841;
                                float _3866 = _3865 * _3865;
                                float _3872 = ((1.0 - _3866) * dot(vec3(_1183, _1186, _1189), vec3(_3789, _3790, _3791))) + _3866;
                                float _5053 = isnan(0.0) ? _3872 : (isnan(_3872) ? 0.0 : max(_3872, 0.0));
                                float _3873 = isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0));
                                float _3874 = 1.0 - _3841;
                                float _3884 = (0.5 / (((_3873 * ((_3856 * _3874) + _3841)) + 9.9999999392252902907785028219223e-09) + (((_3873 * _3874) + _3841) * _3856))) * _3873;
                                float _5064 = isnan(0.0) ? _3884 : (isnan(_3884) ? 0.0 : max(_3884, 0.0));
                                float _3894 = (_3819 * _3796) * (((_3842 * 3.1415927410125732421875) * (isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0)))) / ((_3864 * _3864) * ((_3809 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3820 * _3666.y;
                                frontier_phi_83_pred_1 = _3820 * _3666.x;
                                frontier_phi_83_pred_2 = _3894 * _3678.z;
                                frontier_phi_83_pred_3 = _3894 * _3678.y;
                                frontier_phi_83_pred_4 = _3894 * _3678.x;
                                frontier_phi_83_pred_5 = _3820 * _3666.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3902 = frontier_phi_83_pred;
                            _3901 = frontier_phi_83_pred_1;
                            _3900 = frontier_phi_83_pred_2;
                            _3899 = frontier_phi_83_pred_3;
                            _3898 = frontier_phi_83_pred_4;
                            _3903 = frontier_phi_83_pred_5;
                            _3608 = _3901 + _3621;
                            _3609 = _3902 + _3622;
                            _3610 = _3903 + _3623;
                            _3605 = _3898 + _3618;
                            _3606 = _3899 + _3619;
                            _3607 = _3900 + _3620;
                            if (_3625 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3618 = _3605;
                                _3619 = _3606;
                                _3620 = _3607;
                                _3621 = _3608;
                                _3622 = _3609;
                                _3623 = _3610;
                                _3624 = _3625;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3610;
                        frontier_phi_77_pred_1 = _3609;
                        frontier_phi_77_pred_2 = _3608;
                        frontier_phi_77_pred_3 = _3607;
                        frontier_phi_77_pred_4 = _3606;
                        frontier_phi_77_pred_5 = _3605;
                    }
                    _3247 = frontier_phi_77_pred;
                    _3245 = frontier_phi_77_pred_1;
                    _3243 = frontier_phi_77_pred_2;
                    _3241 = frontier_phi_77_pred_3;
                    _3239 = frontier_phi_77_pred_4;
                    _3237 = frontier_phi_77_pred_5;
                    uint _3403 = _3402 + 1u;
                    if (_3403 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3396 = _3237;
                        _3397 = _3239;
                        _3398 = _3241;
                        _3399 = _3243;
                        _3400 = _3245;
                        _3401 = _3247;
                        _3402 = _3403;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3241;
                frontier_phi_58_59_ladder_1 = _3247;
                frontier_phi_58_59_ladder_2 = _3245;
                frontier_phi_58_59_ladder_3 = _3243;
                frontier_phi_58_59_ladder_4 = _3239;
                frontier_phi_58_59_ladder_5 = _3237;
            }
            else
            {
                frontier_phi_58_59_ladder = _3119;
                frontier_phi_58_59_ladder_1 = _3125;
                frontier_phi_58_59_ladder_2 = _3123;
                frontier_phi_58_59_ladder_3 = _3121;
                frontier_phi_58_59_ladder_4 = _3117;
                frontier_phi_58_59_ladder_5 = _3115;
            }
            _3236 = frontier_phi_58_59_ladder_5;
            _3238 = frontier_phi_58_59_ladder_4;
            _3240 = frontier_phi_58_59_ladder;
            _3242 = frontier_phi_58_59_ladder_3;
            _3244 = frontier_phi_58_59_ladder_2;
            _3246 = frontier_phi_58_59_ladder_1;
        }
        float _3251 = isnan(1.0) ? _1242 : (isnan(_1242) ? 1.0 : min(_1242, 1.0));
        _3025 = (_3251 * _3242) + _2458;
        _3027 = (_3251 * _3244) + _2460;
        _3029 = (_3251 * _3246) + _2462;
        _3031 = ((_3236 * _1227) * _3251) + _2806;
        _3033 = ((_3238 * _1229) * _3251) + _2808;
        _3035 = ((_3240 * _1230) * _3251) + _2810;
    }
    else
    {
        _3025 = _2458;
        _3027 = _2460;
        _3029 = _2462;
        _3031 = _2806;
        _3033 = _2808;
        _3035 = _2810;
    }
    float _5080 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
    float _5091 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
    float _5102 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
    float _5113 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _3053 = ((isnan(1.0) ? _5080 : (isnan(_5080) ? 1.0 : min(_5080, 1.0))) * (_3025 + ((isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0))) * _1242))) + ((_3031 + ((isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0))) * _2077)) * cbPerFrame._m0[3u].x);
    float _3054 = ((isnan(1.0) ? _5091 : (isnan(_5091) ? 1.0 : min(_5091, 1.0))) * (_3027 + ((isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0))) * _1242))) + ((_3033 + ((isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0))) * _2077)) * cbPerFrame._m0[3u].x);
    float _3055 = ((isnan(1.0) ? _5102 : (isnan(_5102) ? 1.0 : min(_5102, 1.0))) * (_3029 + ((isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0))) * _1242))) + ((_3035 + ((isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0))) * _2077)) * cbPerFrame._m0[3u].x);
    float _3060 = cbInstanceData._m0[_1202 + 6u].w * (isnan(1.0) ? _5113 : (isnan(_5113) ? 1.0 : min(_5113, 1.0)));
    float _3065 = _1164 / cbSceneParam._m0[86u].x;
    float _3066 = _1165 / cbSceneParam._m0[86u].y;
    vec4 _3080 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3065, _3066, (log2((isnan(cbSceneParam._m0[77u].w) ? _1087 : (isnan(_1087) ? cbSceneParam._m0[77u].w : min(_1087, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3082 = _3080.x;
    float _3083 = _3080.y;
    float _3084 = _3080.z;
    float _3085 = _3080.w;
    float _3178;
    float _3180;
    float _3182;
    float _3184;
    if (_1087 > cbSceneParam._m0[78u].w)
    {
        float _3140 = isnan(_1087) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1087 : min(cbSceneParam._m0[80u].w, _1087));
        float _3141 = _3140 / _1087;
        float _3152 = _3141 * _1137;
        float _3153 = _1138 * _3141;
        float _3154 = (-0.0) - _3153;
        float _3156 = _3141 * _1139;
        float _3158 = (cbSceneParam._m0[77u].w * _3154) / _3140;
        float _3159 = _3158 + cbSceneParam._m0[79u].w;
        float _3160 = cbSceneParam._m0[79u].w - _3153;
        float _3166 = sqrt(((_3152 * _3152) + (_3153 * _3153)) + (_3156 * _3156));
        float _3169 = (1.0 - (cbSceneParam._m0[77u].w / _3140)) * _3166;
        float _3174 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3176 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3353;
        if (abs((_3154 - _3158) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3353 = ((((_3159 > 0.0) ? exp2(_3174 * _3159) : (2.0 - exp2(_3176 * _3159))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3169;
        }
        else
        {
            float _3297 = 1.0 / cbSceneParam._m0[80u].x;
            float _3298 = isnan(_3160) ? _3159 : (isnan(_3159) ? _3160 : max(_3159, _3160));
            float _3299 = isnan(_3160) ? _3159 : (isnan(_3159) ? _3160 : min(_3159, _3160));
            float _3308 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : min(_3298, 0.0));
            float _3309 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : min(_3299, 0.0));
            _3353 = ((abs(_3166 / _3154) * cbSceneParam._m0[80u].y) * ((((_3308 - _3309) * 2.0) - ((exp2(_3174 * (isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0)))) - exp2(_3174 * (isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0))))) * _3297)) - ((exp2(_3176 * _3308) - exp2(_3176 * _3309)) * _3297))) + (_3169 * cbSceneParam._m0[80u].z);
        }
        vec4 _3355 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3065, _3066, 1.0), 0.0);
        float _3364 = exp2((_3353 * (-1.44269502162933349609375)) * (1.0 - _3355.w));
        float _3365 = log2(_3364);
        float _3381 = log2(_3085);
        _3178 = (exp2(_3381 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3365 * cbSceneParam._m0[78u].x)) * _3355.x) / cbSceneParam._m0[78u].x)) + _3082;
        _3180 = (exp2(_3381 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3365 * cbSceneParam._m0[78u].y)) * _3355.y) / cbSceneParam._m0[78u].y)) + _3083;
        _3182 = (exp2(_3381 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3365 * cbSceneParam._m0[78u].z)) * _3355.z) / cbSceneParam._m0[78u].z)) + _3084;
        _3184 = _3364 * _3085;
    }
    else
    {
        _3178 = _3082;
        _3180 = _3083;
        _3182 = _3084;
        _3184 = _3085;
    }
    bool _3391;
    vec4 _3194;
    vec4 _3216;
    float _3218;
    float _3222;
    float _3223;
    float _3224;
    float _3225;
    bool _3235;
    for (;;)
    {
        _3194 = cbMatDynParam._m0[0u];
        float _3196 = roundEven(_3194.y);
        bool _3197 = _3196 == 3.0;
        float _3198 = log2(_3184);
        float _3205 = exp2(_3198 * cbSceneParam._m0[78u].x) * _3053;
        float _3206 = exp2(_3198 * cbSceneParam._m0[78u].y) * _3054;
        float _3207 = exp2(_3198 * cbSceneParam._m0[78u].z) * _3055;
        float _3214 = _1153 + (-0.5);
        _3216 = cbMtdParam._m0[1u];
        _3218 = _3216.y * _3214;
        float _3221 = (_3196 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3222 = _3221 * (_3197 ? _3205 : (_3205 + (cbSceneParam._m0[72u].w * _3178)));
        _3223 = _3221 * (_3197 ? _3206 : (_3206 + (cbSceneParam._m0[72u].w * _3180)));
        _3224 = _3221 * (_3197 ? _3207 : (_3207 + (cbSceneParam._m0[72u].w * _3182)));
        _3225 = _3214 * 0.999000012874603271484375;
        _3235 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3235)
        {
            if ((cbInstanceData._m0[_1202 + 7u].x + _3225) < 0.5)
            {
                _3391 = true;
                break;
            }
        }
        uint _3332 = _1203 + uint(_3194.w);
        if ((cbInstanceData._m0[_3332].w < 1.0) && ((cbInstanceData._m0[_3332].w + _3225) < 0.5))
        {
            _3391 = true;
            break;
        }
        if ((_3218 + 1.0) < _3216.x)
        {
            _3391 = true;
            break;
        }
        _3391 = false;
        break;
    }
    float _3596;
    if (_3391)
    {
        discard_state = true;
        _3596 = 0.0;
    }
    else
    {
        _3596 = _3060;
    }
    SV_Target.x = _3222;
    SV_Target.y = _3223;
    SV_Target.z = _3224;
    SV_Target.w = _3596;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3060;
    discard_exit();
}


