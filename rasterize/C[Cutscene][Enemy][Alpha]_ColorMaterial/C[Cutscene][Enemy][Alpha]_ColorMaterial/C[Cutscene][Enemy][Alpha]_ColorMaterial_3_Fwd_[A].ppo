#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24;
layout(set = 0, binding = 12) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 13) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 18) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in float TEXCOORD_8;
layout(location = 7, component = 1) in float TEXCOORD_9;
layout(location = 7, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1528;
float _3907;
float _3908;
float _3909;
float _3910;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _294 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _298 = _294.z;
    float _311 = exp2(log2((1.0 - _298) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _312 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _313 = isnan(1.0) ? _312 : (isnan(_312) ? 1.0 : min(_312, 1.0));
    vec4 _326 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _334 = log2(0.0);
    float _336 = exp2(_334 * cbMtdParam._m0[23u].x);
    float _337 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _338 = isnan(1.0) ? _337 : (isnan(_337) ? 1.0 : min(_337, 1.0));
    float _347 = exp2(log2(cbMtdParam._m0[23u].y * _298) * cbMtdParam._m0[22u].y);
    float _348 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _349 = isnan(1.0) ? _348 : (isnan(_348) ? 1.0 : min(_348, 1.0));
    vec4 _361 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _364 = _361.y;
    float _367 = (_361.x + (-0.02500000037252902984619140625)) * 8.0;
    float _371 = roundEven(5.0 - _367);
    float _372 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _373 = isnan(4.0) ? _372 : (isnan(_372) ? 4.0 : min(_372, 4.0));
    float _385 = floor(_373);
    vec4 _388 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w, _385));
    float _206[6];
    float _207[6];
    float _208[6];
    _206[0u] = cbMtdParam._m0[17u].x;
    _207[0u] = cbMtdParam._m0[17u].y;
    _208[0u] = cbMtdParam._m0[17u].z;
    _206[1u] = cbMtdParam._m0[15u].x;
    _207[1u] = cbMtdParam._m0[15u].y;
    _208[1u] = cbMtdParam._m0[15u].z;
    _206[2u] = cbMtdParam._m0[14u].x;
    _207[2u] = cbMtdParam._m0[14u].y;
    _208[2u] = cbMtdParam._m0[14u].z;
    _206[3u] = cbMtdParam._m0[13u].x;
    _207[3u] = cbMtdParam._m0[13u].y;
    _208[3u] = cbMtdParam._m0[13u].z;
    _206[4u] = cbMtdParam._m0[12u].x;
    _207[4u] = cbMtdParam._m0[12u].y;
    _208[4u] = cbMtdParam._m0[12u].z;
    _206[5u] = cbMtdParam._m0[18u].x;
    _207[5u] = cbMtdParam._m0[18u].y;
    _208[5u] = cbMtdParam._m0[18u].z;
    float _452 = roundEven(_367);
    float _453 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    uint _455 = uint(int(isnan(5.0) ? _453 : (isnan(_453) ? 5.0 : min(_453, 5.0))));
    vec4 _485 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _496 = cbMtdParam._m0[9u].x * _485.x;
    float _497 = cbMtdParam._m0[9u].y * _485.y;
    float _498 = cbMtdParam._m0[9u].z * _485.z;
    float _505 = ((((((_206[_455] - cbMtdParam._m0[10u].x) * _364) + cbMtdParam._m0[10u].x) * _388.x) - _496) * _349) + _496;
    float _506 = ((((((_207[_455] - cbMtdParam._m0[10u].y) * _364) + cbMtdParam._m0[10u].y) * _388.y) - _497) * _349) + _497;
    float _507 = ((((((_208[_455] - cbMtdParam._m0[10u].z) * _364) + cbMtdParam._m0[10u].z) * _388.z) - _498) * _349) + _498;
    float _513 = exp2(log2(_294.w) * cbMtdParam._m0[23u].w);
    vec4 _526 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _546 = (((cbMtdParam._m0[16u].x * _526.x) - _505) * _513) + _505;
    float _547 = (((cbMtdParam._m0[16u].y * _526.y) - _506) * _513) + _506;
    float _548 = (((cbMtdParam._m0[16u].z * _526.z) - _507) * _513) + _507;
    vec4 _560 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _580 = (((cbMtdParam._m0[19u].x * _560.x) - _546) * _338) + _546;
    float _581 = (((cbMtdParam._m0[19u].y * _560.y) - _547) * _338) + _547;
    float _582 = (((cbMtdParam._m0[19u].z * _560.z) - _548) * _338) + _548;
    vec4 _594 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _619 = (_326.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _594.x) - _580) * _313) + _580);
    float _621 = (_326.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _594.y) - _581) * _313) + _581);
    float _623 = (_326.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _594.z) - _582) * _313) + _582);
    float _627 = cbMtdParam._m0[28u].x * TEXCOORD_8;
    float _636 = (_627 - (((texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _627))) * (cbMtdParam._m0[27u].w + 1.0);
    float _3969 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _637 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _644 = ((cbMtdParam._m0[21u].x - _619) * _637) + _619;
    float _645 = ((cbMtdParam._m0[21u].y - _621) * _637) + _621;
    float _646 = ((cbMtdParam._m0[21u].z - _623) * _637) + _623;
    vec4 _660 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24, SS_ClampLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.z) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.w) + cbTextureTilingScale._m0[11u].w));
    float _668 = (_660.x + (-1.0)) + (cbMtdParam._m0[28u].y * 2.0);
    float _3980 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _674 = exp2(log2(cbMtdParam._m0[28u].w * (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0)))) * cbMtdParam._m0[28u].z);
    float _3991 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _675 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _201[5];
    float _202[5];
    _201[0u] = cbMtdParam._m0[29u].z;
    _202[0u] = cbMtdParam._m0[29u].w;
    _201[1u] = cbMtdParam._m0[31u].z;
    _202[1u] = cbMtdParam._m0[31u].w;
    _201[2u] = cbMtdParam._m0[31u].x;
    _202[2u] = cbMtdParam._m0[31u].y;
    _201[3u] = cbMtdParam._m0[30u].z;
    _202[3u] = cbMtdParam._m0[30u].w;
    _201[4u] = cbMtdParam._m0[30u].x;
    _202[4u] = cbMtdParam._m0[30u].y;
    float _715 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    uint _717 = uint(int(isnan(4.0) ? _715 : (isnan(_715) ? 4.0 : min(_715, 4.0))));
    float _724 = ((_202[_717] - cbMtdParam._m0[22u].z) * _349) + cbMtdParam._m0[22u].z;
    float _727 = ((cbMtdParam._m0[22u].w - _724) * _513) + _724;
    float _730 = ((cbMtdParam._m0[25u].x - _727) * _338) + _727;
    float _733 = ((cbMtdParam._m0[26u].x - _730) * _313) + _730;
    float _735 = _733 - (_733 * _627);
    vec4 _751 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w, _385));
    vec4 _768 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _770 = _768.x;
    float _771 = _768.y;
    float _776 = cbMtdParam._m0[22u].x + _768.z;
    float _779 = (((_751.z + _201[_717]) - _776) * _349) + _776;
    vec4 _791 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _802 = (((_791.z - _779) + cbMtdParam._m0[29u].x) * _513) + _779;
    float _807 = ((((_298 * 2.0) * _802) - _802) * cbMtdParam._m0[24u].w) + _802;
    vec4 _819 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _830 = (((cbMtdParam._m0[23u].z + _819.z) - _807) * _338) + _807;
    vec4 _843 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _854 = (((_843.z - _830) + cbMtdParam._m0[26u].y) * _313) + _830;
    vec4 _869 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _883 = ((cbMtdParam._m0[27u].y * _627) * ((_869.z * cbMtdParam._m0[27u].x) - _854)) + _854;
    float _895 = ((_751.x - _770) * _349) + _770;
    float _896 = ((_751.y - _771) * _349) + _771;
    float _901 = ((_791.x - _895) * _513) + _895;
    float _902 = ((_791.y - _896) * _513) + _896;
    float _907 = ((_819.x - _901) * _338) + _901;
    float _908 = ((_819.y - _902) * _338) + _902;
    float _917 = ((((_843.x - _907) * _313) + _907) * 2.0) + (-1.0);
    float _918 = ((((_843.y - _908) * _313) + _908) * 2.0) + (-1.0);
    float _919 = dot(vec2(_917, _918), vec2(_917, _918));
    float _4012 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _924 = sqrt(1.0 - (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))));
    float _934 = ((cbMtdParam._m0[25u].y * ((_294.x * 2.0) + (-1.0))) + _917) + ((((_869.x * 2.0) + (-1.0)) * _627) * cbMtdParam._m0[26u].w);
    float _935 = ((cbMtdParam._m0[25u].y * ((_294.y * 2.0) + (-1.0))) + _918) + (((cbMtdParam._m0[28u].x * TEXCOORD_9) * ((_869.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _938 = fma(_924, _243 * NORMAL.x, fma(_935, _250 * TANGENT.x, (_236 * _228) * _934));
    float _941 = fma(_924, _243 * NORMAL.y, fma(_935, _250 * TANGENT.y, (_236 * _229) * _934));
    float _944 = fma(_924, _243 * NORMAL.z, fma(_935, _250 * TANGENT.z, (_236 * _230) * _934));
    float _948 = inversesqrt(dot(vec3(_938, _941, _944), vec3(_938, _941, _944)));
    float _949 = _948 * _938;
    float _950 = _948 * _941;
    float _951 = _948 * _944;
    float _4023 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _952 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _4034 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _953 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _4045 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _4056 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _4067 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _4078 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _957 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _973 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1013 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1023 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1013);
    float _1024 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1013);
    float _1025 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1013);
    float _1029 = inversesqrt(dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025)));
    float _1030 = _1023 * _1029;
    float _1031 = _1024 * _1029;
    float _1032 = _1025 * _1029;
    vec4 _1037 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1039 = _1037.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1209 = sqrt(((_1023 * _1023) + (_1024 * _1024)) + (_1025 * _1025));
        float _1215 = (cbMatDynParam._m0[5u].x * _1209) + cbMatDynParam._m0[5u].y;
        float _4089 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1220 = (cbMatDynParam._m0[5u].z * _1209) + cbMatDynParam._m0[5u].w;
        float _4100 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) - _1216)) + _1216) < ((_1039 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1050 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1051 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1069 = fma(_951, cbSceneParam._m0[5u].z, fma(_950, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _949));
    float _1072 = fma(_951, cbSceneParam._m0[6u].z, fma(_950, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _949));
    float _1075 = fma(_951, cbSceneParam._m0[7u].z, fma(_950, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _949));
    uint _1088 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1089 = _1088 + 9u;
    uint _1090 = _1089 + uint(cbMatDynParam._m0[0u].w);
    float _1096 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0)))) * cbInstanceData._m0[_1090].x;
    float _1097 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) * cbInstanceData._m0[_1090].y;
    float _1098 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0)))) * cbInstanceData._m0[_1090].z;
    float _4111 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _1099 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _4122 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
    float _1100 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _4133 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _1101 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _1102 = 1.0 - _957;
    float _1103 = _1099 * _1102;
    float _1104 = _1100 * _1102;
    float _1105 = _1101 * _1102;
    float _1110 = (_1099 + (-0.039999999105930328369140625)) * _957;
    float _1111 = (_1100 + (-0.039999999105930328369140625)) * _957;
    float _1112 = (_1101 + (-0.039999999105930328369140625)) * _957;
    float _1113 = _1110 + 0.039999999105930328369140625;
    float _1115 = _1111 + 0.039999999105930328369140625;
    float _1116 = _1112 + 0.039999999105930328369140625;
    vec4 _1125 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1050, cbSceneParam._m0[86u].y * _1051));
    float _1128 = _1125.x * TEXCOORD_5.w;
    float _1129 = dot(vec3(_949, _950, _951), vec3(_1030, _1031, _1032));
    float _1132 = _1129 * 2.0;
    float _1136 = (_1132 * _949) - _1030;
    float _1137 = (_1132 * _950) - _1031;
    float _1138 = (_1132 * _951) - _1032;
    float _1142 = abs(dot(vec3(_1030, _1031, _1032), vec3(_949, _950, _951)));
    float _4144 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
    float _1144 = sqrt(_953);
    float _1155 = exp2((_1144 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1144 * 3.0));
    float _1161 = (1.0 - _1155) * ((_1144 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1162 = _1155 * _1144;
    float _1190 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1194 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1198 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1527;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1252 = fma(_1198, cbModelParam._m0[26u].z, fma(_1194, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1190));
        float _1256 = fma(_1198, cbModelParam._m0[27u].z, fma(_1194, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1190));
        float _1260 = fma(_1198, cbModelParam._m0[28u].z, fma(_1194, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1190));
        float _1285 = _1190 + _949;
        float _1286 = _1194 + _950;
        float _1287 = _1198 + _951;
        float _1297 = fma(_1287, cbModelParam._m0[26u].z, fma(_1286, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1285)) - _1252;
        float _1298 = fma(_1287, cbModelParam._m0[27u].z, fma(_1286, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1285)) - _1256;
        float _1299 = fma(_1287, cbModelParam._m0[28u].z, fma(_1286, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1285)) - _1260;
        float _1303 = inversesqrt(dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299)));
        float _1316 = ((_1303 * _1297) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1252 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1317 = ((_1303 * _1298) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1256 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1318 = ((_1303 * _1299) / cbModelParam._m0[34u].z) + ((((((_1260 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        vec4 _1342 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        float _1355 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1321.x + (-0.5));
        float _1357 = _1355 * (_1321.y + (-0.5));
        float _1358 = _1355 * (_1321.z + (-0.5));
        float _1365 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1328.x + (-0.5));
        float _1367 = _1365 * (_1328.y + (-0.5));
        float _1368 = _1365 * (_1328.z + (-0.5));
        float _1375 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1376 = _1375 * (_1335.x + (-0.5));
        float _1377 = _1375 * (_1335.y + (-0.5));
        float _1378 = _1375 * (_1335.z + (-0.5));
        float _1385 = exp2((_1342.w + (-0.5)) * 20.0) * 2.0;
        float _1386 = _1385 * (_1342.x + (-0.5));
        float _1387 = _1385 * (_1342.y + (-0.5));
        float _1388 = _1385 * (_1342.z + (-0.5));
        float _1389 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1390 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = _1356 * 0.5;
        float _1393 = _1366 * 0.5;
        float _1394 = _1376 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1409 = (dot(vec3(_949, _950, _951), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _4170 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1419 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1389 + 9.9999997473787516355514526367188e-06);
        float _4181 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1421 = _1420 * 2.0;
        float _1425 = (1.0 - _1420) / (_1420 + 1.0);
        float _4192 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1435 = ((((1.0 - _1426) * (_1421 + 2.0)) * exp2(log2(isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_1421 + 1.0))) + _1426) * _1389;
        float _1436 = _1357 * 0.5;
        float _1437 = _1367 * 0.5;
        float _1438 = _1377 * 0.5;
        float _1439 = dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438));
        float _1444 = (_1439 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1439);
        float _1452 = (dot(vec3(_949, _950, _951), vec3(_1444 * _1436, _1444 * _1437, _1444 * _1438)) + 1.0) * 0.5;
        float _4203 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1461 = sqrt(((_1437 * _1437) + (_1436 * _1436)) + (_1438 * _1438)) / (_1390 + 9.9999997473787516355514526367188e-06);
        float _4214 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1463 = _1462 * 2.0;
        float _1467 = (1.0 - _1462) / (_1462 + 1.0);
        float _4225 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1477 = ((((1.0 - _1468) * (_1463 + 2.0)) * exp2(log2(isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_1463 + 1.0))) + _1468) * _1390;
        float _1478 = _1358 * 0.5;
        float _1479 = _1368 * 0.5;
        float _1480 = _1378 * 0.5;
        float _1481 = dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480));
        float _1486 = (_1481 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1481);
        float _1494 = (dot(vec3(_949, _950, _951), vec3(_1486 * _1478, _1486 * _1479, _1486 * _1480)) + 1.0) * 0.5;
        float _4236 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1503 = sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _4247 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1505 = _1504 * 2.0;
        float _1509 = (1.0 - _1504) / (_1504 + 1.0);
        float _4258 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1519 = ((((1.0 - _1510) * (_1505 + 2.0)) * exp2(log2(isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_1505 + 1.0))) + _1510) * _1391;
        _1527 = _1358;
        _1529 = _1357;
        _1530 = _1356;
        _1531 = _1368;
        _1532 = _1367;
        _1533 = _1366;
        _1534 = _1378;
        _1535 = _1377;
        _1536 = _1376;
        _1537 = _1391;
        _1538 = _1390;
        _1539 = _1389;
        _1540 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)));
        _1541 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)));
        _1542 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)));
    }
    else
    {
        _1527 = _1528;
        _1529 = _1528;
        _1530 = _1528;
        _1531 = _1528;
        _1532 = _1528;
        _1533 = _1528;
        _1534 = _1528;
        _1535 = _1528;
        _1536 = _1528;
        _1537 = _1528;
        _1538 = _1528;
        _1539 = _1528;
        _1540 = 0.0;
        _1541 = 0.0;
        _1542 = 0.0;
    }
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1568 = fma(_1198, cbModelParam._m0[30u].z, fma(_1194, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1190));
        float _1572 = fma(_1198, cbModelParam._m0[31u].z, fma(_1194, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1190));
        float _1576 = fma(_1198, cbModelParam._m0[32u].z, fma(_1194, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1190));
        float _1599 = _1190 + _949;
        float _1600 = _1194 + _950;
        float _1601 = _1198 + _951;
        float _1611 = fma(_1601, cbModelParam._m0[30u].z, fma(_1600, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1599)) - _1568;
        float _1612 = fma(_1601, cbModelParam._m0[31u].z, fma(_1600, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1599)) - _1572;
        float _1613 = fma(_1601, cbModelParam._m0[32u].z, fma(_1600, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1599)) - _1576;
        float _1617 = inversesqrt(dot(vec3(_1611, _1612, _1613), vec3(_1611, _1612, _1613)));
        float _1630 = ((_1617 * _1611) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1568 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1631 = ((_1617 * _1612) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1572 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1632 = ((_1617 * _1613) / cbModelParam._m0[35u].z) + ((((((_1576 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1634 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1630, _1631, _1632), 0.0);
        vec4 _1641 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1630, _1631, _1632), 0.0);
        vec4 _1648 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1630, _1631, _1632), 0.0);
        vec4 _1655 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1630, _1631, _1632), 0.0);
        float _1667 = exp2((_1634.w + (-0.5)) * 20.0) * 2.0;
        float _1668 = _1667 * (_1634.x + (-0.5));
        float _1669 = _1667 * (_1634.y + (-0.5));
        float _1670 = _1667 * (_1634.z + (-0.5));
        float _1677 = exp2((_1641.w + (-0.5)) * 20.0) * 2.0;
        float _1678 = _1677 * (_1641.x + (-0.5));
        float _1679 = _1677 * (_1641.y + (-0.5));
        float _1680 = _1677 * (_1641.z + (-0.5));
        float _1687 = exp2((_1648.w + (-0.5)) * 20.0) * 2.0;
        float _1688 = _1687 * (_1648.x + (-0.5));
        float _1689 = _1687 * (_1648.y + (-0.5));
        float _1690 = _1687 * (_1648.z + (-0.5));
        float _1697 = exp2((_1655.w + (-0.5)) * 20.0) * 2.0;
        float _1698 = _1697 * (_1655.x + (-0.5));
        float _1699 = _1697 * (_1655.y + (-0.5));
        float _1700 = _1697 * (_1655.z + (-0.5));
        float _1701 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1702 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1703 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1704 = _1668 * 0.5;
        float _1705 = _1678 * 0.5;
        float _1706 = _1688 * 0.5;
        float _1707 = dot(vec3(_1704, _1705, _1706), vec3(_1704, _1705, _1706));
        float _1712 = (_1707 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1707);
        float _1720 = (dot(vec3(_949, _950, _951), vec3(_1712 * _1704, _1712 * _1705, _1712 * _1706)) + 1.0) * 0.5;
        float _4299 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1729 = sqrt(((_1705 * _1705) + (_1704 * _1704)) + (_1706 * _1706)) / (_1701 + 9.9999997473787516355514526367188e-06);
        float _4310 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1730 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1731 = _1730 * 2.0;
        float _1735 = (1.0 - _1730) / (_1730 + 1.0);
        float _4321 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1736 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1745 = ((((1.0 - _1736) * (_1731 + 2.0)) * exp2(log2(isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_1731 + 1.0))) + _1736) * _1701;
        float _1746 = _1669 * 0.5;
        float _1747 = _1679 * 0.5;
        float _1748 = _1689 * 0.5;
        float _1749 = dot(vec3(_1746, _1747, _1748), vec3(_1746, _1747, _1748));
        float _1754 = (_1749 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1749);
        float _1762 = (dot(vec3(_949, _950, _951), vec3(_1754 * _1746, _1754 * _1747, _1754 * _1748)) + 1.0) * 0.5;
        float _4332 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1771 = sqrt(((_1747 * _1747) + (_1746 * _1746)) + (_1748 * _1748)) / (_1702 + 9.9999997473787516355514526367188e-06);
        float _4343 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1772 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1773 = _1772 * 2.0;
        float _1777 = (1.0 - _1772) / (_1772 + 1.0);
        float _4354 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1778 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1787 = ((((1.0 - _1778) * (_1773 + 2.0)) * exp2(log2(isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_1773 + 1.0))) + _1778) * _1702;
        float _1788 = _1670 * 0.5;
        float _1789 = _1680 * 0.5;
        float _1790 = _1690 * 0.5;
        float _1791 = dot(vec3(_1788, _1789, _1790), vec3(_1788, _1789, _1790));
        float _1796 = (_1791 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1791);
        float _1804 = (dot(vec3(_949, _950, _951), vec3(_1796 * _1788, _1796 * _1789, _1796 * _1790)) + 1.0) * 0.5;
        float _4365 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1813 = sqrt(((_1789 * _1789) + (_1788 * _1788)) + (_1790 * _1790)) / (_1703 + 9.9999997473787516355514526367188e-06);
        float _4376 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1814 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _1815 = _1814 * 2.0;
        float _1819 = (1.0 - _1814) / (_1814 + 1.0);
        float _4387 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1820 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _1829 = ((((1.0 - _1820) * (_1815 + 2.0)) * exp2(log2(isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_1815 + 1.0))) + _1820) * _1703;
        _1837 = _1670;
        _1838 = _1669;
        _1839 = _1668;
        _1840 = _1680;
        _1841 = _1679;
        _1842 = _1678;
        _1843 = _1690;
        _1844 = _1689;
        _1845 = _1688;
        _1846 = _1703;
        _1847 = _1702;
        _1848 = _1701;
        _1849 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)));
        _1850 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)));
        _1851 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0)));
    }
    else
    {
        _1837 = _1528;
        _1838 = _1528;
        _1839 = _1528;
        _1840 = _1528;
        _1841 = _1528;
        _1842 = _1528;
        _1843 = _1528;
        _1844 = _1528;
        _1845 = _1528;
        _1846 = _1528;
        _1847 = _1528;
        _1848 = _1528;
        _1849 = 0.0;
        _1850 = 0.0;
        _1851 = 0.0;
    }
    float _1861 = (cbModelParam._m0[1u].x * (_1849 - _1540)) + _1540;
    float _1862 = (cbModelParam._m0[1u].x * (_1850 - _1541)) + _1541;
    float _1863 = (cbModelParam._m0[1u].x * (_1851 - _1542)) + _1542;
    float _1884 = fma(_1863, cbSceneParam._m0[89u].z, fma(_1862, cbSceneParam._m0[89u].y, _1861 * cbSceneParam._m0[89u].x));
    float _1887 = fma(_1863, cbSceneParam._m0[90u].z, fma(_1862, cbSceneParam._m0[90u].y, _1861 * cbSceneParam._m0[90u].x));
    float _1890 = fma(_1863, cbSceneParam._m0[91u].z, fma(_1862, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1861));
    float _1905 = _1136 * 0.5;
    float _1906 = _1137 * 0.5;
    float _1907 = _1138 * 0.5;
    float _1908 = dot(vec4(_1905, _1906, _1907, 1.0), vec4(_1839, _1842, _1845, _1848));
    float _1911 = dot(vec4(_1905, _1906, _1907, 1.0), vec4(_1838, _1841, _1844, _1847));
    float _1914 = dot(vec4(_1905, _1906, _1907, 1.0), vec4(_1837, _1840, _1843, _1846));
    float _1948;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1921 = dot(vec4(_1905, _1906, _1907, 1.0), vec4(_1527, _1531, _1534, _1537));
        float _1925 = dot(vec4(_1905, _1906, _1907, 1.0), vec4(_1529, _1532, _1535, _1538));
        float _1929 = dot(vec4(_1905, _1906, _1907, 1.0), vec4(_1530, _1533, _1536, _1539));
        float _1936 = dot(vec4(cbModelParam._m0[39u]), vec4(_1905, _1906, _1907, 1.0));
        _1948 = dot(vec3(isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0)), isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0)), isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1936) ? 0.0 : (isnan(0.0) ? _1936 : max(0.0, _1936))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1948 = 1.0;
    }
    float _1959;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1950 = dot(vec4(cbModelParam._m0[40u]), vec4(_1905, _1906, _1907, 1.0));
        _1959 = dot(vec3(isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0)), isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0)), isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1950) ? 0.0 : (isnan(0.0) ? _1950 : max(0.0, _1950))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1959 = 1.0;
    }
    float _1963 = (_1959 * cbModelParam._m0[1u].x) + (_1948 * (1.0 - cbModelParam._m0[1u].x));
    float _1973 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _953);
    float _1974 = isnan(_1973) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1973 : min(cbModelParam._m0[25u].z, _1973));
    float _2054;
    float _2056;
    float _2058;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2021 = fma(_1198, cbModelParam._m0[13u].z, fma(_1194, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1190)) + cbModelParam._m0[13u].w;
        float _2025 = fma(_1198, cbModelParam._m0[14u].z, fma(_1194, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1190)) + cbModelParam._m0[14u].w;
        float _2029 = fma(_1198, cbModelParam._m0[15u].z, fma(_1194, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1190)) + cbModelParam._m0[15u].w;
        float _2032 = fma(_1138, cbModelParam._m0[13u].z, fma(_1137, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1136));
        float _2035 = fma(_1138, cbModelParam._m0[14u].z, fma(_1137, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1136));
        float _2038 = fma(_1138, cbModelParam._m0[15u].z, fma(_1137, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1136));
        float _2066;
        if (_2032 > 0.0)
        {
            _2066 = abs((1.0 - _2021) / _2032);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2032 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2021 + 1.0) / _2032);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2066 = frontier_phi_17_15_ladder;
        }
        float _2268;
        if (_2035 > 0.0)
        {
            _2268 = abs((1.0 - _2025) / _2035);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2035 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2025 + 1.0) / _2035);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2268 = frontier_phi_26_22_ladder;
        }
        float _2522;
        if (_2038 > 0.0)
        {
            _2522 = abs((1.0 - _2029) / _2038);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2038 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2029 + 1.0) / _2038);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2522 = frontier_phi_38_33_ladder;
        }
        float _2524 = isnan(_2268) ? _2066 : (isnan(_2066) ? _2268 : min(_2066, _2268));
        float _2525 = isnan(_2522) ? _2524 : (isnan(_2524) ? _2522 : min(_2524, _2522));
        float _2529 = (_2525 * _2032) + _2021;
        float _2530 = (_2525 * _2035) + _2025;
        float _2531 = (_2525 * _2038) + _2029;
        float _2532 = _2525 * 9.9999997473787516355514526367188e-05;
        float _2534 = (-1.0) - _2532;
        float _2536 = _2532 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2531 > _2536) || ((_2531 < _2534) || ((_2530 > _2536) || ((_2530 < _2534) || ((_2529 < _2534) || (_2529 > _2536))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2659 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2531, cbModelParam._m0[9u].z, fma(_2530, cbModelParam._m0[9u].y, _2529 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2531, cbModelParam._m0[10u].z, fma(_2530, cbModelParam._m0[10u].y, _2529 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2531, cbModelParam._m0[11u].z, fma(_2530, cbModelParam._m0[11u].y, _2529 * cbModelParam._m0[11u].x))), _1974);
            frontier_phi_16_38_ladder = _2659.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2659.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2659.x * cbModelParam._m0[1u].y;
        }
        _2054 = frontier_phi_16_38_ladder_2;
        _2056 = frontier_phi_16_38_ladder_1;
        _2058 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2042 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1136, _1137, _1138), _1974);
        _2054 = _2042.x * cbModelParam._m0[1u].y;
        _2056 = _2042.y * cbModelParam._m0[1u].y;
        _2058 = _2042.z * cbModelParam._m0[1u].y;
    }
    float _2062 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _953);
    float _2063 = isnan(_2062) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2062 : min(cbModelParam._m0[25u].w, _2062));
    float _2152;
    float _2154;
    float _2156;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2116 = fma(_1198, cbModelParam._m0[21u].z, fma(_1194, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1190)) + cbModelParam._m0[21u].w;
        float _2120 = fma(_1198, cbModelParam._m0[22u].z, fma(_1194, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1190)) + cbModelParam._m0[22u].w;
        float _2124 = fma(_1198, cbModelParam._m0[23u].z, fma(_1194, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1190)) + cbModelParam._m0[23u].w;
        float _2127 = fma(_1138, cbModelParam._m0[21u].z, fma(_1137, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1136));
        float _2130 = fma(_1138, cbModelParam._m0[22u].z, fma(_1137, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1136));
        float _2133 = fma(_1138, cbModelParam._m0[23u].z, fma(_1137, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1136));
        float _2273;
        if (_2127 > 0.0)
        {
            _2273 = abs((1.0 - _2116) / _2127);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2127 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2116 + 1.0) / _2127);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2273 = frontier_phi_28_24_ladder;
        }
        float _2549;
        if (_2130 > 0.0)
        {
            _2549 = abs((1.0 - _2120) / _2130);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2130 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2120 + 1.0) / _2130);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2549 = frontier_phi_40_35_ladder;
        }
        float _2762;
        if (_2133 > 0.0)
        {
            _2762 = abs((1.0 - _2124) / _2133);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2133 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2124 + 1.0) / _2133);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2762 = frontier_phi_49_46_ladder;
        }
        float _2764 = isnan(_2549) ? _2273 : (isnan(_2273) ? _2549 : min(_2273, _2549));
        float _2765 = isnan(_2762) ? _2764 : (isnan(_2764) ? _2762 : min(_2764, _2762));
        float _2769 = (_2765 * _2127) + _2116;
        float _2770 = (_2765 * _2130) + _2120;
        float _2771 = (_2765 * _2133) + _2124;
        float _2772 = _2765 * 9.9999997473787516355514526367188e-05;
        float _2773 = (-1.0) - _2772;
        float _2775 = _2772 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2771 > _2775) || ((_2771 < _2773) || ((_2770 > _2775) || ((_2770 < _2773) || ((_2769 < _2773) || (_2769 > _2775))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2972 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2771, cbModelParam._m0[17u].z, fma(_2770, cbModelParam._m0[17u].y, _2769 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2771, cbModelParam._m0[18u].z, fma(_2770, cbModelParam._m0[18u].y, _2769 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2771, cbModelParam._m0[19u].z, fma(_2770, cbModelParam._m0[19u].y, _2769 * cbModelParam._m0[19u].x))), _2063);
            frontier_phi_25_49_ladder = _2972.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2972.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2972.x * cbModelParam._m0[1u].z;
        }
        _2152 = frontier_phi_25_49_ladder_2;
        _2154 = frontier_phi_25_49_ladder_1;
        _2156 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2136 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1136, _1137, _1138), _2063);
        _2152 = _2136.x * cbModelParam._m0[1u].z;
        _2154 = _2136.y * cbModelParam._m0[1u].z;
        _2156 = _2136.z * cbModelParam._m0[1u].z;
    }
    float _2169 = (((_1161 * _1113) + _1162) * _1128) * ((cbModelParam._m0[1u].w * (_2152 - _2054)) + _2054);
    float _2171 = (((_1161 * _1115) + _1162) * _1128) * ((cbModelParam._m0[1u].w * (_2154 - _2056)) + _2056);
    float _2173 = (((_1161 * _1116) + _1162) * _1128) * ((cbModelParam._m0[1u].w * (_2156 - _2058)) + _2058);
    float _2176 = fma(_2173, cbSceneParam._m0[89u].z, fma(_2171, cbSceneParam._m0[89u].y, _2169 * cbSceneParam._m0[89u].x));
    float _2179 = fma(_2173, cbSceneParam._m0[90u].z, fma(_2171, cbSceneParam._m0[90u].y, _2169 * cbSceneParam._m0[90u].x));
    float _2182 = fma(_2173, cbSceneParam._m0[91u].z, fma(_2171, cbSceneParam._m0[91u].y, _2169 * cbSceneParam._m0[91u].x));
    uvec4 _2192 = floatBitsToUint(cbInstanceData._m0[_1088 + 5u]);
    uint _2194 = _2192.x * 14u;
    uint _2195 = _2194 + 13u;
    float _2202 = _1128 + (-1.0);
    float _2207 = (cbLight._m0[_2195].x * _2202) + 1.0;
    float _2208 = (cbLight._m0[_2195].y * _2202) + 1.0;
    float _2209 = (cbLight._m0[_2195].z * _2202) + 1.0;
    float _2210 = (cbLight._m0[_2195].w * _2202) + 1.0;
    uint _2211 = _2194 + 5u;
    float _2217 = isnan(1.0) ? _2208 : (isnan(_2208) ? 1.0 : min(_2208, 1.0));
    uint _2221 = _2194 + 4u;
    float _2227 = isnan(1.0) ? _2207 : (isnan(_2207) ? 1.0 : min(_2207, 1.0));
    uint _2231 = _2194 | 1u;
    float _2242 = dot(vec3(cbLight._m0[_2194].xyz), vec3(_949, _950, _951));
    float _2245 = dot(vec3(cbLight._m0[_2231].xyz), vec3(_949, _950, _951));
    float _4523 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _4534 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2250 = (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * 0.3183098733425140380859375;
    float _2252 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * 0.3183098733425140380859375;
    float _2259 = ((cbLight._m0[_2211].x * _2217) * _2252) + ((cbLight._m0[_2221].x * _2227) * _2250);
    float _2260 = ((_2217 * cbLight._m0[_2211].y) * _2252) + ((_2227 * cbLight._m0[_2221].y) * _2250);
    float _2261 = ((_2217 * cbLight._m0[_2211].z) * _2252) + ((_2227 * cbLight._m0[_2221].z) * _2250);
    uvec4 _2265 = floatBitsToUint(cbLight._m0[_2194 + 12u]);
    bool _2267 = _2265.x == 0u;
    float _2278;
    float _2280;
    float _2282;
    if (_2267)
    {
        _2278 = _2259;
        _2280 = _2260;
        _2282 = _2261;
    }
    else
    {
        uint _2286 = _2194 + 6u;
        float _2302 = (dot(vec3(cbLight._m0[_2194 + 2u].xyz), vec3(_949, _950, _951)) * 0.5) + 0.5;
        float _2303 = _2302 * _2302;
        float _4545 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2304 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
        float _2305 = isnan(1.0) ? _2209 : (isnan(_2209) ? 1.0 : min(_2209, 1.0));
        _2278 = (((cbLight._m0[_2286].x * 0.3183098733425140380859375) * _2304) * _2305) + _2259;
        _2280 = (((cbLight._m0[_2286].y * 0.3183098733425140380859375) * _2304) * _2305) + _2260;
        _2282 = (((cbLight._m0[_2286].z * 0.3183098733425140380859375) * _2304) * _2305) + _2261;
    }
    bool _2285 = _2265.y == 0u;
    float _2323;
    float _2325;
    float _2327;
    if (_2285)
    {
        _2323 = _2278;
        _2325 = _2280;
        _2327 = _2282;
    }
    else
    {
        uint _2493 = _2194 + 7u;
        float _2509 = (dot(vec3(cbLight._m0[_2194 + 3u].xyz), vec3(_949, _950, _951)) * 0.5) + 0.5;
        float _2510 = _2509 * _2509;
        float _4561 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        float _2511 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _2512 = isnan(1.0) ? _2210 : (isnan(_2210) ? 1.0 : min(_2210, 1.0));
        _2323 = (((cbLight._m0[_2493].x * 0.3183098733425140380859375) * _2511) * _2512) + _2278;
        _2325 = (((cbLight._m0[_2493].y * 0.3183098733425140380859375) * _2511) * _2512) + _2280;
        _2327 = (((cbLight._m0[_2493].z * 0.3183098733425140380859375) * _2511) * _2512) + _2282;
    }
    uint _2330 = _2194 + 8u;
    float _2343 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2194].w)) * _953) * 0.949999988079071044921875);
    float _2344 = _2343 * _2343;
    float _2345 = cbLight._m0[_2194].x + _1030;
    float _2346 = cbLight._m0[_2194].y + _1031;
    float _2347 = cbLight._m0[_2194].z + _1032;
    float _2351 = inversesqrt(dot(vec3(_2345, _2346, _2347), vec3(_2345, _2346, _2347)));
    float _2352 = _2351 * _2345;
    float _2353 = _2351 * _2346;
    float _2354 = _2351 * _2347;
    float _2355 = dot(vec3(_949, _950, _951), vec3(cbLight._m0[_2194].xyz));
    float _4577 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2358 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
    float _4588 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
    float _2359 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
    float _2360 = dot(vec3(_949, _950, _951), vec3(_2352, _2353, _2354));
    float _4599 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2363 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
    float _2364 = dot(vec3(cbLight._m0[_2194].xyz), vec3(_2352, _2353, _2354));
    float _4610 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2368 = _2344 * _2344;
    float _2372 = ((_2363 * _2363) * (_2368 + (-1.0))) + 1.0;
    float _2380 = exp2(log2(1.0 - (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0)))) * 5.0);
    float _2381 = 0.959999978542327880859375 - _1110;
    float _2383 = 0.959999978542327880859375 - _1111;
    float _2384 = 0.959999978542327880859375 - _1112;
    float _2391 = 1.0 - _2344;
    float _2402 = (0.5 / (((_2359 * ((_2358 * _2391) + _2344)) + 9.9999999392252902907785028219223e-09) + (((_2359 * _2391) + _2344) * _2358))) * _2358;
    float _4621 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _2404 = (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2368 / ((_2372 * _2372) * 3.141590118408203125));
    uint _2415 = _2194 + 9u;
    float _2426 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2231].w)) * _953) * 0.949999988079071044921875);
    float _2427 = _2426 * _2426;
    float _2428 = cbLight._m0[_2231].x + _1030;
    float _2429 = cbLight._m0[_2231].y + _1031;
    float _2430 = cbLight._m0[_2231].z + _1032;
    float _2434 = inversesqrt(dot(vec3(_2428, _2429, _2430), vec3(_2428, _2429, _2430)));
    float _2435 = _2434 * _2428;
    float _2436 = _2434 * _2429;
    float _2437 = _2434 * _2430;
    float _2438 = dot(vec3(_949, _950, _951), vec3(cbLight._m0[_2231].xyz));
    float _4632 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2441 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
    float _2442 = dot(vec3(_949, _950, _951), vec3(_2435, _2436, _2437));
    float _4643 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2445 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
    float _2446 = dot(vec3(cbLight._m0[_2231].xyz), vec3(_2435, _2436, _2437));
    float _4654 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2450 = _2427 * _2427;
    float _2454 = ((_2445 * _2445) * (_2450 + (-1.0))) + 1.0;
    float _2461 = exp2(log2(1.0 - (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0)))) * 5.0);
    float _2468 = 1.0 - _2427;
    float _2478 = (0.5 / (((_2359 * ((_2441 * _2468) + _2427)) + 9.9999999392252902907785028219223e-09) + (((_2359 * _2468) + _2427) * _2441))) * _2441;
    float _4665 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
    float _2480 = (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2450 / ((_2454 * _2454) * 3.141590118408203125));
    float _2490 = (((((_2461 * _2381) + _1113) * cbLight._m0[_2415].x) * _2480) * _2217) + (((((_2380 * _2381) + _1113) * cbLight._m0[_2330].x) * _2404) * _2227);
    float _2491 = (((((_2461 * _2383) + _1115) * cbLight._m0[_2415].y) * _2480) * _2217) + (((((_2380 * _2383) + _1115) * cbLight._m0[_2330].y) * _2404) * _2227);
    float _2492 = (((((_2461 * _2384) + _1116) * cbLight._m0[_2415].z) * _2480) * _2217) + (((((_2380 * _2384) + _1116) * cbLight._m0[_2330].z) * _2404) * _2227);
    float _2554;
    float _2556;
    float _2558;
    if (_2267)
    {
        _2554 = _2490;
        _2556 = _2491;
        _2558 = _2492;
    }
    else
    {
        uint _2560 = _2194 + 2u;
        uint _2564 = _2194 + 10u;
        float _2578 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2560].w)) * _953) * 0.949999988079071044921875);
        float _2579 = _2578 * _2578;
        float _2580 = cbLight._m0[_2560].x + _1030;
        float _2581 = cbLight._m0[_2560].y + _1031;
        float _2582 = cbLight._m0[_2560].z + _1032;
        float _2586 = inversesqrt(dot(vec3(_2580, _2581, _2582), vec3(_2580, _2581, _2582)));
        float _2587 = _2586 * _2580;
        float _2588 = _2586 * _2581;
        float _2589 = _2586 * _2582;
        float _2590 = dot(vec3(_949, _950, _951), vec3(cbLight._m0[_2560].xyz));
        float _4676 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2593 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
        float _2594 = dot(vec3(_949, _950, _951), vec3(_2587, _2588, _2589));
        float _4687 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2597 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
        float _2598 = dot(vec3(cbLight._m0[_2560].xyz), vec3(_2587, _2588, _2589));
        float _4698 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        float _2602 = _2579 * _2579;
        float _2606 = ((_2597 * _2597) * (_2602 + (-1.0))) + 1.0;
        float _2613 = exp2(log2(1.0 - (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0)))) * 5.0);
        float _2620 = 1.0 - _2579;
        float _2630 = (0.5 / (((_2359 * ((_2593 * _2620) + _2579)) + 9.9999999392252902907785028219223e-09) + (((_2359 * _2620) + _2579) * _2593))) * _2593;
        float _4709 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2632 = (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (_2602 / ((_2606 * _2606) * 3.141590118408203125));
        float _2633 = isnan(1.0) ? _2209 : (isnan(_2209) ? 1.0 : min(_2209, 1.0));
        _2554 = (((((_2613 * _2381) + _1113) * cbLight._m0[_2564].x) * _2632) * _2633) + _2490;
        _2556 = (((((_2613 * _2383) + _1115) * cbLight._m0[_2564].y) * _2632) * _2633) + _2491;
        _2558 = (((((_2613 * _2384) + _1116) * cbLight._m0[_2564].z) * _2632) * _2633) + _2492;
    }
    float _2668;
    float _2670;
    float _2672;
    if (_2285)
    {
        _2668 = _2554;
        _2670 = _2556;
        _2672 = _2558;
    }
    else
    {
        uint _2679 = _2194 + 3u;
        uint _2683 = _2194 + 11u;
        float _2697 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2679].w)) * _953) * 0.949999988079071044921875);
        float _2698 = _2697 * _2697;
        float _2699 = cbLight._m0[_2679].x + _1030;
        float _2700 = cbLight._m0[_2679].y + _1031;
        float _2701 = cbLight._m0[_2679].z + _1032;
        float _2705 = inversesqrt(dot(vec3(_2699, _2700, _2701), vec3(_2699, _2700, _2701)));
        float _2706 = _2705 * _2699;
        float _2707 = _2705 * _2700;
        float _2708 = _2705 * _2701;
        float _2709 = dot(vec3(_949, _950, _951), vec3(cbLight._m0[_2679].xyz));
        float _4725 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        float _2712 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
        float _2713 = dot(vec3(_949, _950, _951), vec3(_2706, _2707, _2708));
        float _4736 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2716 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
        float _2717 = dot(vec3(cbLight._m0[_2679].xyz), vec3(_2706, _2707, _2708));
        float _4747 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        float _2721 = _2698 * _2698;
        float _2725 = ((_2716 * _2716) * (_2721 + (-1.0))) + 1.0;
        float _2732 = exp2(log2(1.0 - (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0)))) * 5.0);
        float _2739 = 1.0 - _2698;
        float _2749 = (0.5 / (((_2359 * ((_2712 * _2739) + _2698)) + 9.9999999392252902907785028219223e-09) + (((_2359 * _2739) + _2698) * _2712))) * _2712;
        float _4758 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
        float _2751 = (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2721 / ((_2725 * _2725) * 3.141590118408203125));
        float _2752 = isnan(1.0) ? _2210 : (isnan(_2210) ? 1.0 : min(_2210, 1.0));
        _2668 = (((((_2732 * _2381) + _1113) * cbLight._m0[_2683].x) * _2751) * _2752) + _2554;
        _2670 = (((((_2732 * _2383) + _1115) * cbLight._m0[_2683].y) * _2751) * _2752) + _2556;
        _2672 = (((((_2732 * _2384) + _1116) * cbLight._m0[_2683].z) * _2751) * _2752) + _2558;
    }
    float _2887;
    float _2889;
    float _2891;
    float _2893;
    float _2895;
    float _2897;
    if (_2192.y == 0u)
    {
        float _2827 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2828 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2827;
        float _2829 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2827;
        float _2830 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2827;
        uvec4 _2842 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2843 = _2842.x;
        uint _2854 = uint((float(_2842.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1051) / _2843))) + floor(float(uint(cbSceneParam._m0[85u].x * _1050) / _2843)));
        float _2864 = (log2(_2830 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2865 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
        uint _2868 = uint(isnan(14.0) ? _2865 : (isnan(_2865) ? 14.0 : min(_2865, 14.0)));
        uvec4 _2873 = texelFetch(g_lightClusterGridBuffer, int(((_2868 << 2u) + (_2854 << 6u)) >> 2u));
        uint _2874 = _2873.x;
        uint _2875 = _2842.z;
        float _2977;
        float _2979;
        float _2981;
        float _2983;
        float _2985;
        float _2987;
        if (((((1u << ((_2875 >> 4u) & 15u)) + 4294967295u) & _2874) == 0u) || ((_2875 & 240u) == 0u))
        {
            _2977 = 0.0;
            _2979 = 0.0;
            _2981 = 0.0;
            _2983 = 0.0;
            _2985 = 0.0;
            _2987 = 0.0;
        }
        else
        {
            float _2978;
            float _2980;
            float _2982;
            float _2984;
            float _2986;
            float _2988;
            float _3130 = 0.0;
            float _3131 = 0.0;
            float _3132 = 0.0;
            float _3133 = 0.0;
            float _3134 = 0.0;
            float _3135 = 0.0;
            uint _3136 = 0u;
            uint _3145;
            bool _3146;
            for (;;)
            {
                _3145 = texelFetch(g_lightClassification, int((((_2868 << 5u) + (_2854 << 9u)) + (_3136 << 2u)) >> 2u)).x;
                _3146 = _3145 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3146)
                {
                    frontier_phi_66_pred = _3130;
                    frontier_phi_66_pred_1 = _3135;
                    frontier_phi_66_pred_2 = _3134;
                    frontier_phi_66_pred_3 = _3133;
                    frontier_phi_66_pred_4 = _3132;
                    frontier_phi_66_pred_5 = _3131;
                }
                else
                {
                    float _3275;
                    float _3276;
                    float _3277;
                    float _3278;
                    float _3279;
                    float _3280;
                    uint _3281;
                    _3275 = _3130;
                    _3276 = _3131;
                    _3277 = _3132;
                    _3278 = _3133;
                    _3279 = _3134;
                    _3280 = _3135;
                    _3281 = _3145;
                    float _3202;
                    float _3203;
                    float _3204;
                    float _3205;
                    float _3206;
                    float _3207;
                    for (;;)
                    {
                        uint _3285 = uint(findLSB(_3281)) + (_3136 << 5u);
                        uint _3282 = (_3281 + 4294967295u) & _3281;
                        uint _3287 = _3285 * 48u;
                        vec4 _3301 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3287)).x, texelFetch(g_PointLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3287 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3287 + 3u)).x));
                        uint _3307 = (_3285 * 48u) + 4u;
                        vec4 _3320 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3307)).x, texelFetch(g_PointLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3307 + 3u)).x));
                        uint _3326 = (_3285 * 48u) + 8u;
                        vec3 _3337 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3326)).x, texelFetch(g_PointLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3326 + 2u)).x));
                        float _3341 = _3301.x - _2828;
                        float _3342 = _3301.y - _2829;
                        float _3343 = _3301.z - _2830;
                        float _3344 = dot(vec3(_3341, _3342, _3343), vec3(_3341, _3342, _3343));
                        float _3347 = inversesqrt(_3344);
                        float _3348 = _3347 * _3341;
                        float _3349 = _3347 * _3342;
                        float _3350 = _3347 * _3343;
                        float _3351 = dot(vec3(_1069, _1072, _1075), vec3(_3348, _3349, _3350));
                        float _3356 = 1.0 - (_3344 * _3301.w);
                        float _4784 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                        float _3357 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
                        float _3358 = sqrt(_3344) * _3320.w;
                        float _3361 = 1.39999997615814208984375 / (_3358 + 1.39999997615814208984375);
                        float _3362 = _3361 * _3361;
                        float _3365 = ((1.0 - _3362) * _3351) + _3362;
                        float _3368 = _3358 * _3358;
                        float _3372 = ((isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0))) * _3357) / ((_3368 * 0.699999988079071044921875) + 1.0);
                        float _3376 = (-0.0) - _2828;
                        float _3377 = (-0.0) - _2829;
                        float _3378 = (-0.0) - _2830;
                        float _3382 = inversesqrt(dot(vec3(_3376, _3377, _3378), vec3(_3376, _3377, _3378)));
                        float _3383 = _3382 * _3376;
                        float _3384 = _3382 * _3377;
                        float _3385 = _3382 * _3378;
                        float _3393 = exp2(log2(1.0 / ((_3368 * 3.5) + 5.0)) * 0.25);
                        float _3394 = 1.0 - _1144;
                        float _3401 = sqrt(1.0 - ((1.0 - (_3394 * _3394)) * (1.0 - (_3393 * _3393))));
                        float _3402 = _3401 * _3401;
                        float _3403 = _3402 * _3402;
                        float _3404 = _3383 + _3348;
                        float _3405 = _3384 + _3349;
                        float _3406 = _3385 + _3350;
                        float _3410 = inversesqrt(dot(vec3(_3404, _3405, _3406), vec3(_3404, _3405, _3406)));
                        float _3414 = dot(vec3(_1069, _1072, _1075), vec3(_3383, _3384, _3385));
                        float _4800 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                        float _3417 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                        float _3418 = dot(vec3(_1069, _1072, _1075), vec3(_3410 * _3404, _3410 * _3405, _3410 * _3406));
                        float _4811 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                        float _3421 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                        float _3425 = ((_3421 * _3421) * (_3403 + (-1.0))) + 1.0;
                        float _3426 = _3361 * _3402;
                        float _3427 = _3426 * _3426;
                        float _3430 = ((1.0 - _3427) * _3351) + _3427;
                        float _4822 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                        float _3431 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                        float _3432 = 1.0 - _3402;
                        float _3442 = (0.5 / (((_3431 * ((_3417 * _3432) + _3402)) + 9.9999999392252902907785028219223e-09) + (((_3431 * _3432) + _3402) * _3417))) * _3431;
                        float _4833 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                        float _3453 = (((_3403 * 3.1415927410125732421875) * (isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0)))) / ((_3425 * _3425) * ((_3368 * 2.1991131305694580078125) + 3.141590118408203125))) * _3357;
                        _3205 = (_3372 * _3320.x) + _3278;
                        _3206 = (_3372 * _3320.y) + _3279;
                        _3207 = (_3372 * _3320.z) + _3280;
                        _3202 = (_3453 * _3337.x) + _3275;
                        _3203 = (_3453 * _3337.y) + _3276;
                        _3204 = (_3453 * _3337.z) + _3277;
                        if (_3282 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3275 = _3202;
                            _3276 = _3203;
                            _3277 = _3204;
                            _3278 = _3205;
                            _3279 = _3206;
                            _3280 = _3207;
                            _3281 = _3282;
                        }
                    }
                    frontier_phi_66_pred = _3202;
                    frontier_phi_66_pred_1 = _3207;
                    frontier_phi_66_pred_2 = _3206;
                    frontier_phi_66_pred_3 = _3205;
                    frontier_phi_66_pred_4 = _3204;
                    frontier_phi_66_pred_5 = _3203;
                }
                _2978 = frontier_phi_66_pred;
                _2988 = frontier_phi_66_pred_1;
                _2986 = frontier_phi_66_pred_2;
                _2984 = frontier_phi_66_pred_3;
                _2982 = frontier_phi_66_pred_4;
                _2980 = frontier_phi_66_pred_5;
                uint _3137 = _3136 + 1u;
                if (_3137 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3130 = _2978;
                    _3131 = _2980;
                    _3132 = _2982;
                    _3133 = _2984;
                    _3134 = _2986;
                    _3135 = _2988;
                    _3136 = _3137;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2977 = _2978;
            _2979 = _2980;
            _2981 = _2982;
            _2983 = _2984;
            _2985 = _2986;
            _2987 = _2988;
        }
        uvec4 _2991 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2992 = _2991.z;
        uint _2994 = (_2992 >> 8u) & 15u;
        float _3098;
        float _3100;
        float _3102;
        float _3104;
        float _3106;
        float _3108;
        if (((4294967295u << _2994) & _2874) == 0u)
        {
            _3098 = _2977;
            _3100 = _2979;
            _3102 = _2981;
            _3104 = _2983;
            _3106 = _2985;
            _3108 = _2987;
        }
        else
        {
            float _3123 = inversesqrt(dot(vec3(_2828, _2829, _2830), vec3(_2828, _2829, _2830)));
            float _3124 = _3123 * _2828;
            float _3125 = _3123 * _2829;
            float _3126 = _3123 * _2830;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2994 < ((_2992 >> 12u) & 15u))
            {
                float _3099;
                float _3101;
                float _3103;
                float _3105;
                float _3107;
                float _3109;
                float _3258 = _2977;
                float _3259 = _2979;
                float _3260 = _2981;
                float _3261 = _2983;
                float _3262 = _2985;
                float _3263 = _2987;
                uint _3264 = _2994;
                uint _3273;
                bool _3274;
                for (;;)
                {
                    _3273 = texelFetch(g_lightClassification, int((((_2868 << 5u) + (_2854 << 9u)) + (_3264 << 2u)) >> 2u)).x;
                    _3274 = _3273 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3274)
                    {
                        frontier_phi_77_pred = _3263;
                        frontier_phi_77_pred_1 = _3262;
                        frontier_phi_77_pred_2 = _3261;
                        frontier_phi_77_pred_3 = _3260;
                        frontier_phi_77_pred_4 = _3259;
                        frontier_phi_77_pred_5 = _3258;
                    }
                    else
                    {
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3760;
                        float _3761;
                        float _3762;
                        float _3763;
                        float _3764;
                        float _3765;
                        float _3480 = _3258;
                        float _3481 = _3259;
                        float _3482 = _3260;
                        float _3483 = _3261;
                        float _3484 = _3262;
                        float _3485 = _3263;
                        uint _3486 = _3273;
                        uint _3487;
                        vec4 _3512;
                        float _3513;
                        vec4 _3528;
                        vec3 _3540;
                        vec4 _3555;
                        vec4 _3570;
                        float _3616;
                        bool _3617;
                        for (;;)
                        {
                            uint _3497 = ((_3264 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3486));
                            _3487 = (_3486 + 4294967295u) & _3486;
                            uint _3499 = _3497 * 40u;
                            _3512 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 3u)).x));
                            _3513 = _3512.w;
                            uint _3515 = (_3497 * 40u) + 4u;
                            _3528 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 3u)).x));
                            uint _3530 = (_3497 * 40u) + 8u;
                            _3540 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 2u)).x));
                            uint _3542 = (_3497 * 40u) + 16u;
                            _3555 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3542)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 3u)).x));
                            uint _3557 = (_3497 * 40u) + 20u;
                            _3570 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3557)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 3u)).x));
                            uint _3572 = (_3497 * 40u) + 24u;
                            vec4 _3585 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3572)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 3u)).x));
                            uint _3591 = (_3497 * 40u) + 28u;
                            vec4 _3604 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3591)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 3u)).x));
                            _3616 = fma(_2830, _3604.z, fma(_2829, _3604.y, _3604.x * _2828)) + _3604.w;
                            _3617 = !((fma(_2830, _3585.z, fma(_2829, _3585.y, _3585.x * _2828)) + _3585.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3617)
                            {
                                float _3644 = _3512.x - _2828;
                                float _3645 = _3512.y - _2829;
                                float _3646 = _3512.z - _2830;
                                float _3647 = dot(vec3(_3644, _3645, _3646), vec3(_3644, _3645, _3646));
                                float _3650 = inversesqrt(_3647);
                                float _3651 = _3650 * _3644;
                                float _3652 = _3650 * _3645;
                                float _3653 = _3650 * _3646;
                                float _3657 = 1.0 - (_3647 / (_3513 * _3513));
                                float _4844 = isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0));
                                float _3658 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
                                float _3662 = sqrt(_3647) * _3528.w;
                                float _3664 = 1.39999997615814208984375 / (_3662 + 1.39999997615814208984375);
                                float _3665 = _3664 * _3664;
                                float _3668 = ((1.0 - _3665) * dot(vec3(_3651, _3652, _3653), vec3(_1069, _1072, _1075))) + _3665;
                                float _3671 = _3662 * _3662;
                                float _3675 = (fma(_2830, _3555.z, fma(_2829, _3555.y, _3555.x * _2828)) + _3555.w) / _3616;
                                float _3676 = (fma(_2830, _3570.z, fma(_2829, _3570.y, _3570.x * _2828)) + _3570.w) / _3616;
                                float _3680 = 1.0 - dot(vec2(_3675, _3676), vec2(_3675, _3676));
                                float _4860 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                                float _3681 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                                float _3682 = _3681 * (((isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0))) * _3658) / ((_3671 * 0.699999988079071044921875) + 1.0));
                                float _3694 = exp2(log2(1.0 / ((_3671 * 3.5) + 5.0)) * 0.25);
                                float _3695 = 1.0 - _1144;
                                float _3702 = sqrt(1.0 - ((1.0 - (_3695 * _3695)) * (1.0 - (_3694 * _3694))));
                                float _3703 = _3702 * _3702;
                                float _3704 = _3703 * _3703;
                                float _3705 = _3651 - _3124;
                                float _3706 = _3652 - _3125;
                                float _3707 = _3653 - _3126;
                                float _3711 = inversesqrt(dot(vec3(_3705, _3706, _3707), vec3(_3705, _3706, _3707)));
                                float _3715 = dot(vec3(_1069, _1072, _1075), vec3((-0.0) - _3124, (-0.0) - _3125, (-0.0) - _3126));
                                float _4871 = isnan(0.0) ? _3715 : (isnan(_3715) ? 0.0 : max(_3715, 0.0));
                                float _3718 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
                                float _3719 = dot(vec3(_1069, _1072, _1075), vec3(_3711 * _3705, _3711 * _3706, _3711 * _3707));
                                float _4882 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                                float _3722 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
                                float _3726 = ((_3722 * _3722) * (_3704 + (-1.0))) + 1.0;
                                float _3727 = _3664 * _3703;
                                float _3728 = _3727 * _3727;
                                float _3734 = ((1.0 - _3728) * dot(vec3(_1069, _1072, _1075), vec3(_3651, _3652, _3653))) + _3728;
                                float _4893 = isnan(0.0) ? _3734 : (isnan(_3734) ? 0.0 : max(_3734, 0.0));
                                float _3735 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
                                float _3736 = 1.0 - _3703;
                                float _3746 = (0.5 / (((_3735 * ((_3718 * _3736) + _3703)) + 9.9999999392252902907785028219223e-09) + (((_3735 * _3736) + _3703) * _3718))) * _3735;
                                float _4904 = isnan(0.0) ? _3746 : (isnan(_3746) ? 0.0 : max(_3746, 0.0));
                                float _3756 = (_3681 * _3658) * (((_3704 * 3.1415927410125732421875) * (isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0)))) / ((_3726 * _3726) * ((_3671 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3682 * _3528.y;
                                frontier_phi_83_pred_1 = _3682 * _3528.x;
                                frontier_phi_83_pred_2 = _3756 * _3540.z;
                                frontier_phi_83_pred_3 = _3756 * _3540.y;
                                frontier_phi_83_pred_4 = _3756 * _3540.x;
                                frontier_phi_83_pred_5 = _3682 * _3528.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3764 = frontier_phi_83_pred;
                            _3763 = frontier_phi_83_pred_1;
                            _3762 = frontier_phi_83_pred_2;
                            _3761 = frontier_phi_83_pred_3;
                            _3760 = frontier_phi_83_pred_4;
                            _3765 = frontier_phi_83_pred_5;
                            _3470 = _3763 + _3483;
                            _3471 = _3764 + _3484;
                            _3472 = _3765 + _3485;
                            _3467 = _3760 + _3480;
                            _3468 = _3761 + _3481;
                            _3469 = _3762 + _3482;
                            if (_3487 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3480 = _3467;
                                _3481 = _3468;
                                _3482 = _3469;
                                _3483 = _3470;
                                _3484 = _3471;
                                _3485 = _3472;
                                _3486 = _3487;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3472;
                        frontier_phi_77_pred_1 = _3471;
                        frontier_phi_77_pred_2 = _3470;
                        frontier_phi_77_pred_3 = _3469;
                        frontier_phi_77_pred_4 = _3468;
                        frontier_phi_77_pred_5 = _3467;
                    }
                    _3109 = frontier_phi_77_pred;
                    _3107 = frontier_phi_77_pred_1;
                    _3105 = frontier_phi_77_pred_2;
                    _3103 = frontier_phi_77_pred_3;
                    _3101 = frontier_phi_77_pred_4;
                    _3099 = frontier_phi_77_pred_5;
                    uint _3265 = _3264 + 1u;
                    if (_3265 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3258 = _3099;
                        _3259 = _3101;
                        _3260 = _3103;
                        _3261 = _3105;
                        _3262 = _3107;
                        _3263 = _3109;
                        _3264 = _3265;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3103;
                frontier_phi_58_59_ladder_1 = _3109;
                frontier_phi_58_59_ladder_2 = _3107;
                frontier_phi_58_59_ladder_3 = _3105;
                frontier_phi_58_59_ladder_4 = _3101;
                frontier_phi_58_59_ladder_5 = _3099;
            }
            else
            {
                frontier_phi_58_59_ladder = _2981;
                frontier_phi_58_59_ladder_1 = _2987;
                frontier_phi_58_59_ladder_2 = _2985;
                frontier_phi_58_59_ladder_3 = _2983;
                frontier_phi_58_59_ladder_4 = _2979;
                frontier_phi_58_59_ladder_5 = _2977;
            }
            _3098 = frontier_phi_58_59_ladder_5;
            _3100 = frontier_phi_58_59_ladder_4;
            _3102 = frontier_phi_58_59_ladder;
            _3104 = frontier_phi_58_59_ladder_3;
            _3106 = frontier_phi_58_59_ladder_2;
            _3108 = frontier_phi_58_59_ladder_1;
        }
        float _3113 = isnan(1.0) ? _1128 : (isnan(_1128) ? 1.0 : min(_1128, 1.0));
        _2887 = (_3113 * _3104) + _2323;
        _2889 = (_3113 * _3106) + _2325;
        _2891 = (_3113 * _3108) + _2327;
        _2893 = ((_3098 * _1113) * _3113) + _2668;
        _2895 = ((_3100 * _1115) * _3113) + _2670;
        _2897 = ((_3102 * _1116) * _3113) + _2672;
    }
    else
    {
        _2887 = _2323;
        _2889 = _2325;
        _2891 = _2327;
        _2893 = _2668;
        _2895 = _2670;
        _2897 = _2672;
    }
    float _4920 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _4931 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
    float _4942 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _4953 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _2915 = ((isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0))) * (_2887 + ((isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))) * _1128))) + ((_2893 + ((isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0))) * _1963)) * cbPerFrame._m0[3u].x);
    float _2916 = ((isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0))) * (_2889 + ((isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))) * _1128))) + ((_2895 + ((isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0))) * _1963)) * cbPerFrame._m0[3u].x);
    float _2917 = ((isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0))) * (_2891 + ((isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))) * _1128))) + ((_2897 + ((isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0))) * _1963)) * cbPerFrame._m0[3u].x);
    float _2922 = cbInstanceData._m0[_1088 + 6u].w * (isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0)));
    float _2927 = _1050 / cbSceneParam._m0[86u].x;
    float _2928 = _1051 / cbSceneParam._m0[86u].y;
    vec4 _2942 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2927, _2928, (log2((isnan(cbSceneParam._m0[77u].w) ? _973 : (isnan(_973) ? cbSceneParam._m0[77u].w : min(_973, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2944 = _2942.x;
    float _2945 = _2942.y;
    float _2946 = _2942.z;
    float _2947 = _2942.w;
    float _3040;
    float _3042;
    float _3044;
    float _3046;
    if (_973 > cbSceneParam._m0[78u].w)
    {
        float _3002 = isnan(_973) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _973 : min(cbSceneParam._m0[80u].w, _973));
        float _3003 = _3002 / _973;
        float _3014 = _3003 * _1023;
        float _3015 = _1024 * _3003;
        float _3016 = (-0.0) - _3015;
        float _3018 = _3003 * _1025;
        float _3020 = (cbSceneParam._m0[77u].w * _3016) / _3002;
        float _3021 = _3020 + cbSceneParam._m0[79u].w;
        float _3022 = cbSceneParam._m0[79u].w - _3015;
        float _3028 = sqrt(((_3014 * _3014) + (_3015 * _3015)) + (_3018 * _3018));
        float _3031 = (1.0 - (cbSceneParam._m0[77u].w / _3002)) * _3028;
        float _3036 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3038 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3215;
        if (abs((_3016 - _3020) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3215 = ((((_3021 > 0.0) ? exp2(_3036 * _3021) : (2.0 - exp2(_3038 * _3021))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3031;
        }
        else
        {
            float _3159 = 1.0 / cbSceneParam._m0[80u].x;
            float _3160 = isnan(_3022) ? _3021 : (isnan(_3021) ? _3022 : max(_3021, _3022));
            float _3161 = isnan(_3022) ? _3021 : (isnan(_3021) ? _3022 : min(_3021, _3022));
            float _3170 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : min(_3160, 0.0));
            float _3171 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : min(_3161, 0.0));
            _3215 = ((abs(_3028 / _3016) * cbSceneParam._m0[80u].y) * ((((_3170 - _3171) * 2.0) - ((exp2(_3036 * (isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0)))) - exp2(_3036 * (isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0))))) * _3159)) - ((exp2(_3038 * _3170) - exp2(_3038 * _3171)) * _3159))) + (_3031 * cbSceneParam._m0[80u].z);
        }
        vec4 _3217 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2927, _2928, 1.0), 0.0);
        float _3226 = exp2((_3215 * (-1.44269502162933349609375)) * (1.0 - _3217.w));
        float _3227 = log2(_3226);
        float _3243 = log2(_2947);
        _3040 = (exp2(_3243 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3227 * cbSceneParam._m0[78u].x)) * _3217.x) / cbSceneParam._m0[78u].x)) + _2944;
        _3042 = (exp2(_3243 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3227 * cbSceneParam._m0[78u].y)) * _3217.y) / cbSceneParam._m0[78u].y)) + _2945;
        _3044 = (exp2(_3243 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3227 * cbSceneParam._m0[78u].z)) * _3217.z) / cbSceneParam._m0[78u].z)) + _2946;
        _3046 = _3226 * _2947;
    }
    else
    {
        _3040 = _2944;
        _3042 = _2945;
        _3044 = _2946;
        _3046 = _2947;
    }
    bool _3253;
    vec4 _3056;
    vec4 _3078;
    float _3080;
    float _3084;
    float _3085;
    float _3086;
    float _3087;
    bool _3097;
    for (;;)
    {
        _3056 = cbMatDynParam._m0[0u];
        float _3058 = roundEven(_3056.y);
        bool _3059 = _3058 == 3.0;
        float _3060 = log2(_3046);
        float _3067 = exp2(_3060 * cbSceneParam._m0[78u].x) * _2915;
        float _3068 = exp2(_3060 * cbSceneParam._m0[78u].y) * _2916;
        float _3069 = exp2(_3060 * cbSceneParam._m0[78u].z) * _2917;
        float _3076 = _1039 + (-0.5);
        _3078 = cbMtdParam._m0[1u];
        _3080 = _3078.y * _3076;
        float _3083 = (_3058 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3084 = _3083 * (_3059 ? _3067 : (_3067 + (cbSceneParam._m0[72u].w * _3040)));
        _3085 = _3083 * (_3059 ? _3068 : (_3068 + (cbSceneParam._m0[72u].w * _3042)));
        _3086 = _3083 * (_3059 ? _3069 : (_3069 + (cbSceneParam._m0[72u].w * _3044)));
        _3087 = _3076 * 0.999000012874603271484375;
        _3097 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3097)
        {
            if ((cbInstanceData._m0[_1088 + 7u].x + _3087) < 0.5)
            {
                _3253 = true;
                break;
            }
        }
        uint _3194 = _1089 + uint(_3056.w);
        if ((cbInstanceData._m0[_3194].w < 1.0) && ((cbInstanceData._m0[_3194].w + _3087) < 0.5))
        {
            _3253 = true;
            break;
        }
        if ((_3080 + 1.0) < _3078.x)
        {
            _3253 = true;
            break;
        }
        _3253 = false;
        break;
    }
    float _3458;
    if (_3253)
    {
        discard_state = true;
        _3458 = 0.0;
    }
    else
    {
        _3458 = _2922;
    }
    SV_Target.x = _3084;
    SV_Target.y = _3085;
    SV_Target.z = _3086;
    SV_Target.w = _3458;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2922;
    discard_exit();
}


