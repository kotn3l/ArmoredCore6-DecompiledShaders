#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24;
layout(set = 0, binding = 12) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 13) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 18) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in float TEXCOORD_8;
layout(location = 7, component = 1) in float TEXCOORD_9;
layout(location = 7, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1530;
float _3933;
float _3934;
float _3935;
float _3936;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _296 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _300 = _296.z;
    float _313 = exp2(log2((1.0 - _300) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _314 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _315 = isnan(1.0) ? _314 : (isnan(_314) ? 1.0 : min(_314, 1.0));
    vec4 _328 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _336 = log2(0.0);
    float _338 = exp2(_336 * cbMtdParam._m0[23u].x);
    float _339 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _340 = isnan(1.0) ? _339 : (isnan(_339) ? 1.0 : min(_339, 1.0));
    float _349 = exp2(log2(cbMtdParam._m0[23u].y * _300) * cbMtdParam._m0[22u].y);
    float _350 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _351 = isnan(1.0) ? _350 : (isnan(_350) ? 1.0 : min(_350, 1.0));
    vec4 _363 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _366 = _363.y;
    float _369 = (_363.x + (-0.02500000037252902984619140625)) * 8.0;
    float _373 = roundEven(5.0 - _369);
    float _374 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _375 = isnan(4.0) ? _374 : (isnan(_374) ? 4.0 : min(_374, 4.0));
    float _387 = floor(_375);
    vec4 _390 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w, _387));
    float _208[6];
    float _209[6];
    float _210[6];
    _208[0u] = cbMtdParam._m0[17u].x;
    _209[0u] = cbMtdParam._m0[17u].y;
    _210[0u] = cbMtdParam._m0[17u].z;
    _208[1u] = cbMtdParam._m0[15u].x;
    _209[1u] = cbMtdParam._m0[15u].y;
    _210[1u] = cbMtdParam._m0[15u].z;
    _208[2u] = cbMtdParam._m0[14u].x;
    _209[2u] = cbMtdParam._m0[14u].y;
    _210[2u] = cbMtdParam._m0[14u].z;
    _208[3u] = cbMtdParam._m0[13u].x;
    _209[3u] = cbMtdParam._m0[13u].y;
    _210[3u] = cbMtdParam._m0[13u].z;
    _208[4u] = cbMtdParam._m0[12u].x;
    _209[4u] = cbMtdParam._m0[12u].y;
    _210[4u] = cbMtdParam._m0[12u].z;
    _208[5u] = cbMtdParam._m0[18u].x;
    _209[5u] = cbMtdParam._m0[18u].y;
    _210[5u] = cbMtdParam._m0[18u].z;
    float _454 = roundEven(_369);
    float _455 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    uint _457 = uint(int(isnan(5.0) ? _455 : (isnan(_455) ? 5.0 : min(_455, 5.0))));
    vec4 _487 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _498 = cbMtdParam._m0[9u].x * _487.x;
    float _499 = cbMtdParam._m0[9u].y * _487.y;
    float _500 = cbMtdParam._m0[9u].z * _487.z;
    float _507 = ((((((_208[_457] - cbMtdParam._m0[10u].x) * _366) + cbMtdParam._m0[10u].x) * _390.x) - _498) * _351) + _498;
    float _508 = ((((((_209[_457] - cbMtdParam._m0[10u].y) * _366) + cbMtdParam._m0[10u].y) * _390.y) - _499) * _351) + _499;
    float _509 = ((((((_210[_457] - cbMtdParam._m0[10u].z) * _366) + cbMtdParam._m0[10u].z) * _390.z) - _500) * _351) + _500;
    float _515 = exp2(log2(_296.w) * cbMtdParam._m0[23u].w);
    vec4 _528 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _548 = (((cbMtdParam._m0[16u].x * _528.x) - _507) * _515) + _507;
    float _549 = (((cbMtdParam._m0[16u].y * _528.y) - _508) * _515) + _508;
    float _550 = (((cbMtdParam._m0[16u].z * _528.z) - _509) * _515) + _509;
    vec4 _562 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _582 = (((cbMtdParam._m0[19u].x * _562.x) - _548) * _340) + _548;
    float _583 = (((cbMtdParam._m0[19u].y * _562.y) - _549) * _340) + _549;
    float _584 = (((cbMtdParam._m0[19u].z * _562.z) - _550) * _340) + _550;
    vec4 _596 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _621 = (_328.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _596.x) - _582) * _315) + _582);
    float _623 = (_328.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _596.y) - _583) * _315) + _583);
    float _625 = (_328.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _596.z) - _584) * _315) + _584);
    float _629 = cbMtdParam._m0[28u].x * TEXCOORD_8;
    float _638 = (_629 - (((texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _629))) * (cbMtdParam._m0[27u].w + 1.0);
    float _3995 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _639 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _646 = ((cbMtdParam._m0[21u].x - _621) * _639) + _621;
    float _647 = ((cbMtdParam._m0[21u].y - _623) * _639) + _623;
    float _648 = ((cbMtdParam._m0[21u].z - _625) * _639) + _625;
    vec4 _662 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24, SS_ClampLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.z) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.w) + cbTextureTilingScale._m0[11u].w));
    float _670 = (_662.x + (-1.0)) + (cbMtdParam._m0[28u].y * 2.0);
    float _4006 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _676 = exp2(log2(cbMtdParam._m0[28u].w * (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0)))) * cbMtdParam._m0[28u].z);
    float _4017 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _677 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _203[5];
    float _204[5];
    _203[0u] = cbMtdParam._m0[29u].z;
    _204[0u] = cbMtdParam._m0[29u].w;
    _203[1u] = cbMtdParam._m0[31u].z;
    _204[1u] = cbMtdParam._m0[31u].w;
    _203[2u] = cbMtdParam._m0[31u].x;
    _204[2u] = cbMtdParam._m0[31u].y;
    _203[3u] = cbMtdParam._m0[30u].z;
    _204[3u] = cbMtdParam._m0[30u].w;
    _203[4u] = cbMtdParam._m0[30u].x;
    _204[4u] = cbMtdParam._m0[30u].y;
    float _717 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    uint _719 = uint(int(isnan(4.0) ? _717 : (isnan(_717) ? 4.0 : min(_717, 4.0))));
    float _726 = ((_204[_719] - cbMtdParam._m0[22u].z) * _351) + cbMtdParam._m0[22u].z;
    float _729 = ((cbMtdParam._m0[22u].w - _726) * _515) + _726;
    float _732 = ((cbMtdParam._m0[25u].x - _729) * _340) + _729;
    float _735 = ((cbMtdParam._m0[26u].x - _732) * _315) + _732;
    float _737 = _735 - (_735 * _629);
    vec4 _753 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w, _387));
    vec4 _770 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _772 = _770.x;
    float _773 = _770.y;
    float _778 = cbMtdParam._m0[22u].x + _770.z;
    float _781 = (((_753.z + _203[_719]) - _778) * _351) + _778;
    vec4 _793 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _804 = (((_793.z - _781) + cbMtdParam._m0[29u].x) * _515) + _781;
    float _809 = ((((_300 * 2.0) * _804) - _804) * cbMtdParam._m0[24u].w) + _804;
    vec4 _821 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _832 = (((cbMtdParam._m0[23u].z + _821.z) - _809) * _340) + _809;
    vec4 _845 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _856 = (((_845.z - _832) + cbMtdParam._m0[26u].y) * _315) + _832;
    vec4 _871 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _885 = ((cbMtdParam._m0[27u].y * _629) * ((_871.z * cbMtdParam._m0[27u].x) - _856)) + _856;
    float _897 = ((_753.x - _772) * _351) + _772;
    float _898 = ((_753.y - _773) * _351) + _773;
    float _903 = ((_793.x - _897) * _515) + _897;
    float _904 = ((_793.y - _898) * _515) + _898;
    float _909 = ((_821.x - _903) * _340) + _903;
    float _910 = ((_821.y - _904) * _340) + _904;
    float _919 = ((((_845.x - _909) * _315) + _909) * 2.0) + (-1.0);
    float _920 = ((((_845.y - _910) * _315) + _910) * 2.0) + (-1.0);
    float _921 = dot(vec2(_919, _920), vec2(_919, _920));
    float _4038 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _926 = sqrt(1.0 - (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))));
    float _936 = ((cbMtdParam._m0[25u].y * ((_296.x * 2.0) + (-1.0))) + _919) + ((((_871.x * 2.0) + (-1.0)) * _629) * cbMtdParam._m0[26u].w);
    float _937 = ((cbMtdParam._m0[25u].y * ((_296.y * 2.0) + (-1.0))) + _920) + (((cbMtdParam._m0[28u].x * TEXCOORD_9) * ((_871.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _940 = fma(_926, _245 * NORMAL.x, fma(_937, _252 * TANGENT.x, (_238 * _230) * _936));
    float _943 = fma(_926, _245 * NORMAL.y, fma(_937, _252 * TANGENT.y, (_238 * _231) * _936));
    float _946 = fma(_926, _245 * NORMAL.z, fma(_937, _252 * TANGENT.z, (_238 * _232) * _936));
    float _950 = inversesqrt(dot(vec3(_940, _943, _946), vec3(_940, _943, _946)));
    float _951 = _950 * _940;
    float _952 = _950 * _943;
    float _953 = _950 * _946;
    float _4049 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _954 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _4060 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _955 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _4071 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _4082 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _4093 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _4104 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _959 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _975 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1015 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1025 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1015);
    float _1026 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1015);
    float _1027 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1015);
    float _1031 = inversesqrt(dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027)));
    float _1032 = _1025 * _1031;
    float _1033 = _1026 * _1031;
    float _1034 = _1027 * _1031;
    vec4 _1039 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1041 = _1039.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1211 = sqrt(((_1025 * _1025) + (_1026 * _1026)) + (_1027 * _1027));
        float _1217 = (cbMatDynParam._m0[5u].x * _1211) + cbMatDynParam._m0[5u].y;
        float _4115 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1222 = (cbMatDynParam._m0[5u].z * _1211) + cbMatDynParam._m0[5u].w;
        float _4126 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) - _1218)) + _1218) < ((_1041 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1052 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1053 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1071 = fma(_953, cbSceneParam._m0[5u].z, fma(_952, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _951));
    float _1074 = fma(_953, cbSceneParam._m0[6u].z, fma(_952, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _951));
    float _1077 = fma(_953, cbSceneParam._m0[7u].z, fma(_952, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _951));
    uint _1090 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1091 = _1090 + 9u;
    uint _1092 = _1091 + uint(cbMatDynParam._m0[0u].w);
    float _1098 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0)))) * cbInstanceData._m0[_1092].x;
    float _1099 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0)))) * cbInstanceData._m0[_1092].y;
    float _1100 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0)))) * cbInstanceData._m0[_1092].z;
    float _4137 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _1101 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _4148 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _1102 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _4159 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _1103 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
    float _1104 = 1.0 - _959;
    float _1105 = _1101 * _1104;
    float _1106 = _1102 * _1104;
    float _1107 = _1103 * _1104;
    float _1112 = (_1101 + (-0.039999999105930328369140625)) * _959;
    float _1113 = (_1102 + (-0.039999999105930328369140625)) * _959;
    float _1114 = (_1103 + (-0.039999999105930328369140625)) * _959;
    float _1115 = _1112 + 0.039999999105930328369140625;
    float _1117 = _1113 + 0.039999999105930328369140625;
    float _1118 = _1114 + 0.039999999105930328369140625;
    vec4 _1127 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1052, cbSceneParam._m0[86u].y * _1053));
    float _1130 = _1127.x * TEXCOORD_5.w;
    float _1131 = dot(vec3(_951, _952, _953), vec3(_1032, _1033, _1034));
    float _1134 = _1131 * 2.0;
    float _1138 = (_1134 * _951) - _1032;
    float _1139 = (_1134 * _952) - _1033;
    float _1140 = (_1134 * _953) - _1034;
    float _1144 = abs(dot(vec3(_1032, _1033, _1034), vec3(_951, _952, _953)));
    float _4170 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
    float _1146 = sqrt(_955);
    float _1157 = exp2((_1146 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1146 * 3.0));
    float _1163 = (1.0 - _1157) * ((_1146 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1164 = _1157 * _1146;
    float _1192 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1196 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1200 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1529;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1254 = fma(_1200, cbModelParam._m0[26u].z, fma(_1196, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1192));
        float _1258 = fma(_1200, cbModelParam._m0[27u].z, fma(_1196, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1192));
        float _1262 = fma(_1200, cbModelParam._m0[28u].z, fma(_1196, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1192));
        float _1287 = _1192 + _951;
        float _1288 = _1196 + _952;
        float _1289 = _1200 + _953;
        float _1299 = fma(_1289, cbModelParam._m0[26u].z, fma(_1288, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1287)) - _1254;
        float _1300 = fma(_1289, cbModelParam._m0[27u].z, fma(_1288, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1287)) - _1258;
        float _1301 = fma(_1289, cbModelParam._m0[28u].z, fma(_1288, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1287)) - _1262;
        float _1305 = inversesqrt(dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301)));
        float _1318 = ((_1305 * _1299) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1254 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1319 = ((_1305 * _1300) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1258 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1320 = ((_1305 * _1301) / cbModelParam._m0[34u].z) + ((((((_1262 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        float _1357 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1323.x + (-0.5));
        float _1359 = _1357 * (_1323.y + (-0.5));
        float _1360 = _1357 * (_1323.z + (-0.5));
        float _1367 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1330.x + (-0.5));
        float _1369 = _1367 * (_1330.y + (-0.5));
        float _1370 = _1367 * (_1330.z + (-0.5));
        float _1377 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1337.x + (-0.5));
        float _1379 = _1377 * (_1337.y + (-0.5));
        float _1380 = _1377 * (_1337.z + (-0.5));
        float _1387 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1344.x + (-0.5));
        float _1389 = _1387 * (_1344.y + (-0.5));
        float _1390 = _1387 * (_1344.z + (-0.5));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = _1358 * 0.5;
        float _1395 = _1368 * 0.5;
        float _1396 = _1378 * 0.5;
        float _1397 = dot(vec3(_1394, _1395, _1396), vec3(_1394, _1395, _1396));
        float _1402 = (_1397 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1397);
        float _1411 = (dot(vec3(_951, _952, _953), vec3(_1402 * _1394, _1402 * _1395, _1402 * _1396)) + 1.0) * 0.5;
        float _4196 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1421 = sqrt(((_1395 * _1395) + (_1394 * _1394)) + (_1396 * _1396)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _4207 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1423 = _1422 * 2.0;
        float _1427 = (1.0 - _1422) / (_1422 + 1.0);
        float _4218 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1437 = ((((1.0 - _1428) * (_1423 + 2.0)) * exp2(log2(isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_1423 + 1.0))) + _1428) * _1391;
        float _1438 = _1359 * 0.5;
        float _1439 = _1369 * 0.5;
        float _1440 = _1379 * 0.5;
        float _1441 = dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440));
        float _1446 = (_1441 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1441);
        float _1454 = (dot(vec3(_951, _952, _953), vec3(_1446 * _1438, _1446 * _1439, _1446 * _1440)) + 1.0) * 0.5;
        float _4229 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1463 = sqrt(((_1439 * _1439) + (_1438 * _1438)) + (_1440 * _1440)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _4240 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1465 = _1464 * 2.0;
        float _1469 = (1.0 - _1464) / (_1464 + 1.0);
        float _4251 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1479 = ((((1.0 - _1470) * (_1465 + 2.0)) * exp2(log2(isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_1465 + 1.0))) + _1470) * _1392;
        float _1480 = _1360 * 0.5;
        float _1481 = _1370 * 0.5;
        float _1482 = _1380 * 0.5;
        float _1483 = dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482));
        float _1488 = (_1483 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1483);
        float _1496 = (dot(vec3(_951, _952, _953), vec3(_1488 * _1480, _1488 * _1481, _1488 * _1482)) + 1.0) * 0.5;
        float _4262 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1505 = sqrt(((_1481 * _1481) + (_1480 * _1480)) + (_1482 * _1482)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _4273 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1507 = _1506 * 2.0;
        float _1511 = (1.0 - _1506) / (_1506 + 1.0);
        float _4284 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1521 = ((((1.0 - _1512) * (_1507 + 2.0)) * exp2(log2(isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_1507 + 1.0))) + _1512) * _1393;
        _1529 = _1360;
        _1531 = _1359;
        _1532 = _1358;
        _1533 = _1370;
        _1534 = _1369;
        _1535 = _1368;
        _1536 = _1380;
        _1537 = _1379;
        _1538 = _1378;
        _1539 = _1393;
        _1540 = _1392;
        _1541 = _1391;
        _1542 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)));
        _1543 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)));
        _1544 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)));
    }
    else
    {
        _1529 = _1530;
        _1531 = _1530;
        _1532 = _1530;
        _1533 = _1530;
        _1534 = _1530;
        _1535 = _1530;
        _1536 = _1530;
        _1537 = _1530;
        _1538 = _1530;
        _1539 = _1530;
        _1540 = _1530;
        _1541 = _1530;
        _1542 = 0.0;
        _1543 = 0.0;
        _1544 = 0.0;
    }
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1570 = fma(_1200, cbModelParam._m0[30u].z, fma(_1196, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1192));
        float _1574 = fma(_1200, cbModelParam._m0[31u].z, fma(_1196, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1192));
        float _1578 = fma(_1200, cbModelParam._m0[32u].z, fma(_1196, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1192));
        float _1601 = _1192 + _951;
        float _1602 = _1196 + _952;
        float _1603 = _1200 + _953;
        float _1613 = fma(_1603, cbModelParam._m0[30u].z, fma(_1602, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1601)) - _1570;
        float _1614 = fma(_1603, cbModelParam._m0[31u].z, fma(_1602, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1601)) - _1574;
        float _1615 = fma(_1603, cbModelParam._m0[32u].z, fma(_1602, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1601)) - _1578;
        float _1619 = inversesqrt(dot(vec3(_1613, _1614, _1615), vec3(_1613, _1614, _1615)));
        float _1632 = ((_1619 * _1613) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1570 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1633 = ((_1619 * _1614) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1574 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1634 = ((_1619 * _1615) / cbModelParam._m0[35u].z) + ((((((_1578 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1636 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1632, _1633, _1634), 0.0);
        vec4 _1643 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1632, _1633, _1634), 0.0);
        vec4 _1650 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1632, _1633, _1634), 0.0);
        vec4 _1657 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1632, _1633, _1634), 0.0);
        float _1669 = exp2((_1636.w + (-0.5)) * 20.0) * 2.0;
        float _1670 = _1669 * (_1636.x + (-0.5));
        float _1671 = _1669 * (_1636.y + (-0.5));
        float _1672 = _1669 * (_1636.z + (-0.5));
        float _1679 = exp2((_1643.w + (-0.5)) * 20.0) * 2.0;
        float _1680 = _1679 * (_1643.x + (-0.5));
        float _1681 = _1679 * (_1643.y + (-0.5));
        float _1682 = _1679 * (_1643.z + (-0.5));
        float _1689 = exp2((_1650.w + (-0.5)) * 20.0) * 2.0;
        float _1690 = _1689 * (_1650.x + (-0.5));
        float _1691 = _1689 * (_1650.y + (-0.5));
        float _1692 = _1689 * (_1650.z + (-0.5));
        float _1699 = exp2((_1657.w + (-0.5)) * 20.0) * 2.0;
        float _1700 = _1699 * (_1657.x + (-0.5));
        float _1701 = _1699 * (_1657.y + (-0.5));
        float _1702 = _1699 * (_1657.z + (-0.5));
        float _1703 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1704 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1705 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1706 = _1670 * 0.5;
        float _1707 = _1680 * 0.5;
        float _1708 = _1690 * 0.5;
        float _1709 = dot(vec3(_1706, _1707, _1708), vec3(_1706, _1707, _1708));
        float _1714 = (_1709 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1709);
        float _1722 = (dot(vec3(_951, _952, _953), vec3(_1714 * _1706, _1714 * _1707, _1714 * _1708)) + 1.0) * 0.5;
        float _4325 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1731 = sqrt(((_1707 * _1707) + (_1706 * _1706)) + (_1708 * _1708)) / (_1703 + 9.9999997473787516355514526367188e-06);
        float _4336 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1732 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _1733 = _1732 * 2.0;
        float _1737 = (1.0 - _1732) / (_1732 + 1.0);
        float _4347 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1738 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _1747 = ((((1.0 - _1738) * (_1733 + 2.0)) * exp2(log2(isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (_1733 + 1.0))) + _1738) * _1703;
        float _1748 = _1671 * 0.5;
        float _1749 = _1681 * 0.5;
        float _1750 = _1691 * 0.5;
        float _1751 = dot(vec3(_1748, _1749, _1750), vec3(_1748, _1749, _1750));
        float _1756 = (_1751 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1751);
        float _1764 = (dot(vec3(_951, _952, _953), vec3(_1756 * _1748, _1756 * _1749, _1756 * _1750)) + 1.0) * 0.5;
        float _4358 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1773 = sqrt(((_1749 * _1749) + (_1748 * _1748)) + (_1750 * _1750)) / (_1704 + 9.9999997473787516355514526367188e-06);
        float _4369 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1774 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _1775 = _1774 * 2.0;
        float _1779 = (1.0 - _1774) / (_1774 + 1.0);
        float _4380 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1780 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _1789 = ((((1.0 - _1780) * (_1775 + 2.0)) * exp2(log2(isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_1775 + 1.0))) + _1780) * _1704;
        float _1790 = _1672 * 0.5;
        float _1791 = _1682 * 0.5;
        float _1792 = _1692 * 0.5;
        float _1793 = dot(vec3(_1790, _1791, _1792), vec3(_1790, _1791, _1792));
        float _1798 = (_1793 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1793);
        float _1806 = (dot(vec3(_951, _952, _953), vec3(_1798 * _1790, _1798 * _1791, _1798 * _1792)) + 1.0) * 0.5;
        float _4391 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1815 = sqrt(((_1791 * _1791) + (_1790 * _1790)) + (_1792 * _1792)) / (_1705 + 9.9999997473787516355514526367188e-06);
        float _4402 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1816 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _1817 = _1816 * 2.0;
        float _1821 = (1.0 - _1816) / (_1816 + 1.0);
        float _4413 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1822 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _1831 = ((((1.0 - _1822) * (_1817 + 2.0)) * exp2(log2(isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * (_1817 + 1.0))) + _1822) * _1705;
        _1839 = _1672;
        _1840 = _1671;
        _1841 = _1670;
        _1842 = _1682;
        _1843 = _1681;
        _1844 = _1680;
        _1845 = _1692;
        _1846 = _1691;
        _1847 = _1690;
        _1848 = _1705;
        _1849 = _1704;
        _1850 = _1703;
        _1851 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)));
        _1852 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0)));
        _1853 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0)));
    }
    else
    {
        _1839 = _1530;
        _1840 = _1530;
        _1841 = _1530;
        _1842 = _1530;
        _1843 = _1530;
        _1844 = _1530;
        _1845 = _1530;
        _1846 = _1530;
        _1847 = _1530;
        _1848 = _1530;
        _1849 = _1530;
        _1850 = _1530;
        _1851 = 0.0;
        _1852 = 0.0;
        _1853 = 0.0;
    }
    float _1863 = (cbModelParam._m0[1u].x * (_1851 - _1542)) + _1542;
    float _1864 = (cbModelParam._m0[1u].x * (_1852 - _1543)) + _1543;
    float _1865 = (cbModelParam._m0[1u].x * (_1853 - _1544)) + _1544;
    float _1886 = fma(_1865, cbSceneParam._m0[89u].z, fma(_1864, cbSceneParam._m0[89u].y, _1863 * cbSceneParam._m0[89u].x));
    float _1889 = fma(_1865, cbSceneParam._m0[90u].z, fma(_1864, cbSceneParam._m0[90u].y, _1863 * cbSceneParam._m0[90u].x));
    float _1892 = fma(_1865, cbSceneParam._m0[91u].z, fma(_1864, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1863));
    float _1907 = _1138 * 0.5;
    float _1908 = _1139 * 0.5;
    float _1909 = _1140 * 0.5;
    float _1910 = dot(vec4(_1907, _1908, _1909, 1.0), vec4(_1841, _1844, _1847, _1850));
    float _1913 = dot(vec4(_1907, _1908, _1909, 1.0), vec4(_1840, _1843, _1846, _1849));
    float _1916 = dot(vec4(_1907, _1908, _1909, 1.0), vec4(_1839, _1842, _1845, _1848));
    float _1950;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1923 = dot(vec4(_1907, _1908, _1909, 1.0), vec4(_1529, _1533, _1536, _1539));
        float _1927 = dot(vec4(_1907, _1908, _1909, 1.0), vec4(_1531, _1534, _1537, _1540));
        float _1931 = dot(vec4(_1907, _1908, _1909, 1.0), vec4(_1532, _1535, _1538, _1541));
        float _1938 = dot(vec4(cbModelParam._m0[39u]), vec4(_1907, _1908, _1909, 1.0));
        _1950 = dot(vec3(isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0)), isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0)), isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1938) ? 0.0 : (isnan(0.0) ? _1938 : max(0.0, _1938))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1950 = 1.0;
    }
    float _1961;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1952 = dot(vec4(cbModelParam._m0[40u]), vec4(_1907, _1908, _1909, 1.0));
        _1961 = dot(vec3(isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0)), isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0)), isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1952) ? 0.0 : (isnan(0.0) ? _1952 : max(0.0, _1952))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1961 = 1.0;
    }
    float _1965 = (_1961 * cbModelParam._m0[1u].x) + (_1950 * (1.0 - cbModelParam._m0[1u].x));
    float _1975 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _955);
    float _1976 = isnan(_1975) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1975 : min(cbModelParam._m0[25u].z, _1975));
    float _2056;
    float _2058;
    float _2060;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2023 = fma(_1200, cbModelParam._m0[13u].z, fma(_1196, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1192)) + cbModelParam._m0[13u].w;
        float _2027 = fma(_1200, cbModelParam._m0[14u].z, fma(_1196, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1192)) + cbModelParam._m0[14u].w;
        float _2031 = fma(_1200, cbModelParam._m0[15u].z, fma(_1196, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1192)) + cbModelParam._m0[15u].w;
        float _2034 = fma(_1140, cbModelParam._m0[13u].z, fma(_1139, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1138));
        float _2037 = fma(_1140, cbModelParam._m0[14u].z, fma(_1139, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1138));
        float _2040 = fma(_1140, cbModelParam._m0[15u].z, fma(_1139, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1138));
        float _2068;
        if (_2034 > 0.0)
        {
            _2068 = abs((1.0 - _2023) / _2034);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2034 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2023 + 1.0) / _2034);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2068 = frontier_phi_17_15_ladder;
        }
        float _2291;
        if (_2037 > 0.0)
        {
            _2291 = abs((1.0 - _2027) / _2037);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2037 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2027 + 1.0) / _2037);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2291 = frontier_phi_26_22_ladder;
        }
        float _2548;
        if (_2040 > 0.0)
        {
            _2548 = abs((1.0 - _2031) / _2040);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2040 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2031 + 1.0) / _2040);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2548 = frontier_phi_38_33_ladder;
        }
        float _2550 = isnan(_2291) ? _2068 : (isnan(_2068) ? _2291 : min(_2068, _2291));
        float _2551 = isnan(_2548) ? _2550 : (isnan(_2550) ? _2548 : min(_2550, _2548));
        float _2555 = (_2551 * _2034) + _2023;
        float _2556 = (_2551 * _2037) + _2027;
        float _2557 = (_2551 * _2040) + _2031;
        float _2558 = _2551 * 9.9999997473787516355514526367188e-05;
        float _2560 = (-1.0) - _2558;
        float _2562 = _2558 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2557 > _2562) || ((_2557 < _2560) || ((_2556 > _2562) || ((_2556 < _2560) || ((_2555 < _2560) || (_2555 > _2562))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2685 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2557, cbModelParam._m0[9u].z, fma(_2556, cbModelParam._m0[9u].y, _2555 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2557, cbModelParam._m0[10u].z, fma(_2556, cbModelParam._m0[10u].y, _2555 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2557, cbModelParam._m0[11u].z, fma(_2556, cbModelParam._m0[11u].y, _2555 * cbModelParam._m0[11u].x))), _1976);
            frontier_phi_16_38_ladder = _2685.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2685.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2685.x * cbModelParam._m0[1u].y;
        }
        _2056 = frontier_phi_16_38_ladder_2;
        _2058 = frontier_phi_16_38_ladder_1;
        _2060 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2044 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1138, _1139, _1140), _1976);
        _2056 = _2044.x * cbModelParam._m0[1u].y;
        _2058 = _2044.y * cbModelParam._m0[1u].y;
        _2060 = _2044.z * cbModelParam._m0[1u].y;
    }
    float _2064 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _955);
    float _2065 = isnan(_2064) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2064 : min(cbModelParam._m0[25u].w, _2064));
    float _2154;
    float _2156;
    float _2158;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2118 = fma(_1200, cbModelParam._m0[21u].z, fma(_1196, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1192)) + cbModelParam._m0[21u].w;
        float _2122 = fma(_1200, cbModelParam._m0[22u].z, fma(_1196, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1192)) + cbModelParam._m0[22u].w;
        float _2126 = fma(_1200, cbModelParam._m0[23u].z, fma(_1196, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1192)) + cbModelParam._m0[23u].w;
        float _2129 = fma(_1140, cbModelParam._m0[21u].z, fma(_1139, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1138));
        float _2132 = fma(_1140, cbModelParam._m0[22u].z, fma(_1139, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1138));
        float _2135 = fma(_1140, cbModelParam._m0[23u].z, fma(_1139, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1138));
        float _2296;
        if (_2129 > 0.0)
        {
            _2296 = abs((1.0 - _2118) / _2129);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2129 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2118 + 1.0) / _2129);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2296 = frontier_phi_28_24_ladder;
        }
        float _2575;
        if (_2132 > 0.0)
        {
            _2575 = abs((1.0 - _2122) / _2132);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2132 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2122 + 1.0) / _2132);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2575 = frontier_phi_40_35_ladder;
        }
        float _2788;
        if (_2135 > 0.0)
        {
            _2788 = abs((1.0 - _2126) / _2135);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2135 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2126 + 1.0) / _2135);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2788 = frontier_phi_49_46_ladder;
        }
        float _2790 = isnan(_2575) ? _2296 : (isnan(_2296) ? _2575 : min(_2296, _2575));
        float _2791 = isnan(_2788) ? _2790 : (isnan(_2790) ? _2788 : min(_2790, _2788));
        float _2795 = (_2791 * _2129) + _2118;
        float _2796 = (_2791 * _2132) + _2122;
        float _2797 = (_2791 * _2135) + _2126;
        float _2798 = _2791 * 9.9999997473787516355514526367188e-05;
        float _2799 = (-1.0) - _2798;
        float _2801 = _2798 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2797 > _2801) || ((_2797 < _2799) || ((_2796 > _2801) || ((_2796 < _2799) || ((_2795 < _2799) || (_2795 > _2801))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2998 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2797, cbModelParam._m0[17u].z, fma(_2796, cbModelParam._m0[17u].y, _2795 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2797, cbModelParam._m0[18u].z, fma(_2796, cbModelParam._m0[18u].y, _2795 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2797, cbModelParam._m0[19u].z, fma(_2796, cbModelParam._m0[19u].y, _2795 * cbModelParam._m0[19u].x))), _2065);
            frontier_phi_25_49_ladder = _2998.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2998.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2998.x * cbModelParam._m0[1u].z;
        }
        _2154 = frontier_phi_25_49_ladder_2;
        _2156 = frontier_phi_25_49_ladder_1;
        _2158 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2138 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1138, _1139, _1140), _2065);
        _2154 = _2138.x * cbModelParam._m0[1u].z;
        _2156 = _2138.y * cbModelParam._m0[1u].z;
        _2158 = _2138.z * cbModelParam._m0[1u].z;
    }
    float _2171 = (((_1163 * _1115) + _1164) * _1130) * ((cbModelParam._m0[1u].w * (_2154 - _2056)) + _2056);
    float _2173 = (((_1163 * _1117) + _1164) * _1130) * ((cbModelParam._m0[1u].w * (_2156 - _2058)) + _2058);
    float _2175 = (((_1163 * _1118) + _1164) * _1130) * ((cbModelParam._m0[1u].w * (_2158 - _2060)) + _2060);
    float _2178 = fma(_2175, cbSceneParam._m0[89u].z, fma(_2173, cbSceneParam._m0[89u].y, _2171 * cbSceneParam._m0[89u].x));
    float _2181 = fma(_2175, cbSceneParam._m0[90u].z, fma(_2173, cbSceneParam._m0[90u].y, _2171 * cbSceneParam._m0[90u].x));
    float _2184 = fma(_2175, cbSceneParam._m0[91u].z, fma(_2173, cbSceneParam._m0[91u].y, _2171 * cbSceneParam._m0[91u].x));
    vec4 _2192 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1052, _1053));
    float _2194 = _2192.w;
    float _2206 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2194);
    float _2207 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2194);
    float _2208 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2194);
    uvec4 _2212 = floatBitsToUint(cbInstanceData._m0[_1090 + 5u]);
    uint _2214 = _2212.x * 14u;
    uint _2215 = _2214 + 13u;
    float _2222 = _1130 + (-1.0);
    float _2227 = (cbLight._m0[_2215].x * _2222) + 1.0;
    float _2228 = (cbLight._m0[_2215].y * _2222) + 1.0;
    float _2229 = (cbLight._m0[_2215].z * _2222) + 1.0;
    float _2230 = (cbLight._m0[_2215].w * _2222) + 1.0;
    uint _2231 = _2214 + 5u;
    float _2237 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
    uint _2241 = _2214 + 4u;
    float _2250 = isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0));
    uint _2254 = _2214 | 1u;
    float _2265 = dot(vec3(cbLight._m0[_2214].xyz), vec3(_951, _952, _953));
    float _2268 = dot(vec3(cbLight._m0[_2254].xyz), vec3(_951, _952, _953));
    float _4549 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _4560 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2273 = (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * 0.3183098733425140380859375;
    float _2275 = (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * 0.3183098733425140380859375;
    float _2282 = ((cbLight._m0[_2231].x * _2237) * _2275) + (((cbLight._m0[_2241].x * _2206) * _2250) * _2273);
    float _2283 = ((_2237 * cbLight._m0[_2231].y) * _2275) + (((cbLight._m0[_2241].y * _2207) * _2250) * _2273);
    float _2284 = ((_2237 * cbLight._m0[_2231].z) * _2275) + (((cbLight._m0[_2241].z * _2208) * _2250) * _2273);
    uvec4 _2288 = floatBitsToUint(cbLight._m0[_2214 + 12u]);
    bool _2290 = _2288.x == 0u;
    float _2301;
    float _2303;
    float _2305;
    if (_2290)
    {
        _2301 = _2282;
        _2303 = _2283;
        _2305 = _2284;
    }
    else
    {
        uint _2309 = _2214 + 6u;
        float _2325 = (dot(vec3(cbLight._m0[_2214 + 2u].xyz), vec3(_951, _952, _953)) * 0.5) + 0.5;
        float _2326 = _2325 * _2325;
        float _4571 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2327 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _2328 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
        _2301 = (((cbLight._m0[_2309].x * 0.3183098733425140380859375) * _2327) * _2328) + _2282;
        _2303 = (((cbLight._m0[_2309].y * 0.3183098733425140380859375) * _2327) * _2328) + _2283;
        _2305 = (((cbLight._m0[_2309].z * 0.3183098733425140380859375) * _2327) * _2328) + _2284;
    }
    bool _2308 = _2288.y == 0u;
    float _2346;
    float _2348;
    float _2350;
    if (_2308)
    {
        _2346 = _2301;
        _2348 = _2303;
        _2350 = _2305;
    }
    else
    {
        uint _2519 = _2214 + 7u;
        float _2535 = (dot(vec3(cbLight._m0[_2214 + 3u].xyz), vec3(_951, _952, _953)) * 0.5) + 0.5;
        float _2536 = _2535 * _2535;
        float _4587 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2537 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
        float _2538 = isnan(1.0) ? _2230 : (isnan(_2230) ? 1.0 : min(_2230, 1.0));
        _2346 = (((cbLight._m0[_2519].x * 0.3183098733425140380859375) * _2537) * _2538) + _2301;
        _2348 = (((cbLight._m0[_2519].y * 0.3183098733425140380859375) * _2537) * _2538) + _2303;
        _2350 = (((cbLight._m0[_2519].z * 0.3183098733425140380859375) * _2537) * _2538) + _2305;
    }
    uint _2353 = _2214 + 8u;
    float _2366 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2214].w)) * _955) * 0.949999988079071044921875);
    float _2367 = _2366 * _2366;
    float _2368 = cbLight._m0[_2214].x + _1032;
    float _2369 = cbLight._m0[_2214].y + _1033;
    float _2370 = cbLight._m0[_2214].z + _1034;
    float _2374 = inversesqrt(dot(vec3(_2368, _2369, _2370), vec3(_2368, _2369, _2370)));
    float _2375 = _2374 * _2368;
    float _2376 = _2374 * _2369;
    float _2377 = _2374 * _2370;
    float _2378 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2214].xyz));
    float _4603 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2381 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
    float _4614 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
    float _2382 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
    float _2383 = dot(vec3(_951, _952, _953), vec3(_2375, _2376, _2377));
    float _4625 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2386 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
    float _2387 = dot(vec3(cbLight._m0[_2214].xyz), vec3(_2375, _2376, _2377));
    float _4636 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2391 = _2367 * _2367;
    float _2395 = ((_2386 * _2386) * (_2391 + (-1.0))) + 1.0;
    float _2403 = exp2(log2(1.0 - (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0)))) * 5.0);
    float _2404 = 0.959999978542327880859375 - _1112;
    float _2406 = 0.959999978542327880859375 - _1113;
    float _2407 = 0.959999978542327880859375 - _1114;
    float _2414 = 1.0 - _2367;
    float _2425 = (0.5 / (((_2382 * ((_2381 * _2414) + _2367)) + 9.9999999392252902907785028219223e-09) + (((_2382 * _2414) + _2367) * _2381))) * _2381;
    float _4647 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2427 = (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * (_2391 / ((_2395 * _2395) * 3.141590118408203125));
    uint _2441 = _2214 + 9u;
    float _2452 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2254].w)) * _955) * 0.949999988079071044921875);
    float _2453 = _2452 * _2452;
    float _2454 = cbLight._m0[_2254].x + _1032;
    float _2455 = cbLight._m0[_2254].y + _1033;
    float _2456 = cbLight._m0[_2254].z + _1034;
    float _2460 = inversesqrt(dot(vec3(_2454, _2455, _2456), vec3(_2454, _2455, _2456)));
    float _2461 = _2460 * _2454;
    float _2462 = _2460 * _2455;
    float _2463 = _2460 * _2456;
    float _2464 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2254].xyz));
    float _4658 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2467 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
    float _2468 = dot(vec3(_951, _952, _953), vec3(_2461, _2462, _2463));
    float _4669 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2471 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
    float _2472 = dot(vec3(cbLight._m0[_2254].xyz), vec3(_2461, _2462, _2463));
    float _4680 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _2476 = _2453 * _2453;
    float _2480 = ((_2471 * _2471) * (_2476 + (-1.0))) + 1.0;
    float _2487 = exp2(log2(1.0 - (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0)))) * 5.0);
    float _2494 = 1.0 - _2453;
    float _2504 = (0.5 / (((_2382 * ((_2467 * _2494) + _2453)) + 9.9999999392252902907785028219223e-09) + (((_2382 * _2494) + _2453) * _2467))) * _2467;
    float _4691 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
    float _2506 = (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * (_2476 / ((_2480 * _2480) * 3.141590118408203125));
    float _2516 = (((((_2487 * _2404) + _1115) * cbLight._m0[_2441].x) * _2506) * _2237) + ((((cbLight._m0[_2353].x * _2206) * ((_2403 * _2404) + _1115)) * _2427) * _2250);
    float _2517 = (((((_2487 * _2406) + _1117) * cbLight._m0[_2441].y) * _2506) * _2237) + ((((cbLight._m0[_2353].y * _2207) * ((_2403 * _2406) + _1117)) * _2427) * _2250);
    float _2518 = (((((_2487 * _2407) + _1118) * cbLight._m0[_2441].z) * _2506) * _2237) + ((((cbLight._m0[_2353].z * _2208) * ((_2403 * _2407) + _1118)) * _2427) * _2250);
    float _2580;
    float _2582;
    float _2584;
    if (_2290)
    {
        _2580 = _2516;
        _2582 = _2517;
        _2584 = _2518;
    }
    else
    {
        uint _2586 = _2214 + 2u;
        uint _2590 = _2214 + 10u;
        float _2604 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2586].w)) * _955) * 0.949999988079071044921875);
        float _2605 = _2604 * _2604;
        float _2606 = cbLight._m0[_2586].x + _1032;
        float _2607 = cbLight._m0[_2586].y + _1033;
        float _2608 = cbLight._m0[_2586].z + _1034;
        float _2612 = inversesqrt(dot(vec3(_2606, _2607, _2608), vec3(_2606, _2607, _2608)));
        float _2613 = _2612 * _2606;
        float _2614 = _2612 * _2607;
        float _2615 = _2612 * _2608;
        float _2616 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2586].xyz));
        float _4702 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2619 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
        float _2620 = dot(vec3(_951, _952, _953), vec3(_2613, _2614, _2615));
        float _4713 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2623 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
        float _2624 = dot(vec3(cbLight._m0[_2586].xyz), vec3(_2613, _2614, _2615));
        float _4724 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2628 = _2605 * _2605;
        float _2632 = ((_2623 * _2623) * (_2628 + (-1.0))) + 1.0;
        float _2639 = exp2(log2(1.0 - (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0)))) * 5.0);
        float _2646 = 1.0 - _2605;
        float _2656 = (0.5 / (((_2382 * ((_2619 * _2646) + _2605)) + 9.9999999392252902907785028219223e-09) + (((_2382 * _2646) + _2605) * _2619))) * _2619;
        float _4735 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2658 = (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2628 / ((_2632 * _2632) * 3.141590118408203125));
        float _2659 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
        _2580 = (((((_2639 * _2404) + _1115) * cbLight._m0[_2590].x) * _2658) * _2659) + _2516;
        _2582 = (((((_2639 * _2406) + _1117) * cbLight._m0[_2590].y) * _2658) * _2659) + _2517;
        _2584 = (((((_2639 * _2407) + _1118) * cbLight._m0[_2590].z) * _2658) * _2659) + _2518;
    }
    float _2694;
    float _2696;
    float _2698;
    if (_2308)
    {
        _2694 = _2580;
        _2696 = _2582;
        _2698 = _2584;
    }
    else
    {
        uint _2705 = _2214 + 3u;
        uint _2709 = _2214 + 11u;
        float _2723 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2705].w)) * _955) * 0.949999988079071044921875);
        float _2724 = _2723 * _2723;
        float _2725 = cbLight._m0[_2705].x + _1032;
        float _2726 = cbLight._m0[_2705].y + _1033;
        float _2727 = cbLight._m0[_2705].z + _1034;
        float _2731 = inversesqrt(dot(vec3(_2725, _2726, _2727), vec3(_2725, _2726, _2727)));
        float _2732 = _2731 * _2725;
        float _2733 = _2731 * _2726;
        float _2734 = _2731 * _2727;
        float _2735 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2705].xyz));
        float _4751 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
        float _2738 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
        float _2739 = dot(vec3(_951, _952, _953), vec3(_2732, _2733, _2734));
        float _4762 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2742 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
        float _2743 = dot(vec3(cbLight._m0[_2705].xyz), vec3(_2732, _2733, _2734));
        float _4773 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2747 = _2724 * _2724;
        float _2751 = ((_2742 * _2742) * (_2747 + (-1.0))) + 1.0;
        float _2758 = exp2(log2(1.0 - (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0)))) * 5.0);
        float _2765 = 1.0 - _2724;
        float _2775 = (0.5 / (((_2382 * ((_2738 * _2765) + _2724)) + 9.9999999392252902907785028219223e-09) + (((_2382 * _2765) + _2724) * _2738))) * _2738;
        float _4784 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
        float _2777 = (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0))) * (_2747 / ((_2751 * _2751) * 3.141590118408203125));
        float _2778 = isnan(1.0) ? _2230 : (isnan(_2230) ? 1.0 : min(_2230, 1.0));
        _2694 = (((((_2758 * _2404) + _1115) * cbLight._m0[_2709].x) * _2777) * _2778) + _2580;
        _2696 = (((((_2758 * _2406) + _1117) * cbLight._m0[_2709].y) * _2777) * _2778) + _2582;
        _2698 = (((((_2758 * _2407) + _1118) * cbLight._m0[_2709].z) * _2777) * _2778) + _2584;
    }
    float _2913;
    float _2915;
    float _2917;
    float _2919;
    float _2921;
    float _2923;
    if (_2212.y == 0u)
    {
        float _2853 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2854 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2853;
        float _2855 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2853;
        float _2856 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2853;
        uvec4 _2868 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2869 = _2868.x;
        uint _2880 = uint((float(_2868.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1053) / _2869))) + floor(float(uint(cbSceneParam._m0[85u].x * _1052) / _2869)));
        float _2890 = (log2(_2856 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2891 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
        uint _2894 = uint(isnan(14.0) ? _2891 : (isnan(_2891) ? 14.0 : min(_2891, 14.0)));
        uvec4 _2899 = texelFetch(g_lightClusterGridBuffer, int(((_2894 << 2u) + (_2880 << 6u)) >> 2u));
        uint _2900 = _2899.x;
        uint _2901 = _2868.z;
        float _3003;
        float _3005;
        float _3007;
        float _3009;
        float _3011;
        float _3013;
        if (((((1u << ((_2901 >> 4u) & 15u)) + 4294967295u) & _2900) == 0u) || ((_2901 & 240u) == 0u))
        {
            _3003 = 0.0;
            _3005 = 0.0;
            _3007 = 0.0;
            _3009 = 0.0;
            _3011 = 0.0;
            _3013 = 0.0;
        }
        else
        {
            float _3004;
            float _3006;
            float _3008;
            float _3010;
            float _3012;
            float _3014;
            float _3156 = 0.0;
            float _3157 = 0.0;
            float _3158 = 0.0;
            float _3159 = 0.0;
            float _3160 = 0.0;
            float _3161 = 0.0;
            uint _3162 = 0u;
            uint _3171;
            bool _3172;
            for (;;)
            {
                _3171 = texelFetch(g_lightClassification, int((((_2894 << 5u) + (_2880 << 9u)) + (_3162 << 2u)) >> 2u)).x;
                _3172 = _3171 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3172)
                {
                    frontier_phi_66_pred = _3156;
                    frontier_phi_66_pred_1 = _3161;
                    frontier_phi_66_pred_2 = _3160;
                    frontier_phi_66_pred_3 = _3159;
                    frontier_phi_66_pred_4 = _3158;
                    frontier_phi_66_pred_5 = _3157;
                }
                else
                {
                    float _3301;
                    float _3302;
                    float _3303;
                    float _3304;
                    float _3305;
                    float _3306;
                    uint _3307;
                    _3301 = _3156;
                    _3302 = _3157;
                    _3303 = _3158;
                    _3304 = _3159;
                    _3305 = _3160;
                    _3306 = _3161;
                    _3307 = _3171;
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    for (;;)
                    {
                        uint _3311 = uint(findLSB(_3307)) + (_3162 << 5u);
                        uint _3308 = (_3307 + 4294967295u) & _3307;
                        uint _3313 = _3311 * 48u;
                        vec4 _3327 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3313)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 3u)).x));
                        uint _3333 = (_3311 * 48u) + 4u;
                        vec4 _3346 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3333)).x, texelFetch(g_PointLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3333 + 3u)).x));
                        uint _3352 = (_3311 * 48u) + 8u;
                        vec3 _3363 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3352)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 2u)).x));
                        float _3367 = _3327.x - _2854;
                        float _3368 = _3327.y - _2855;
                        float _3369 = _3327.z - _2856;
                        float _3370 = dot(vec3(_3367, _3368, _3369), vec3(_3367, _3368, _3369));
                        float _3373 = inversesqrt(_3370);
                        float _3374 = _3373 * _3367;
                        float _3375 = _3373 * _3368;
                        float _3376 = _3373 * _3369;
                        float _3377 = dot(vec3(_1071, _1074, _1077), vec3(_3374, _3375, _3376));
                        float _3382 = 1.0 - (_3370 * _3327.w);
                        float _4810 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                        float _3383 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                        float _3384 = sqrt(_3370) * _3346.w;
                        float _3387 = 1.39999997615814208984375 / (_3384 + 1.39999997615814208984375);
                        float _3388 = _3387 * _3387;
                        float _3391 = ((1.0 - _3388) * _3377) + _3388;
                        float _3394 = _3384 * _3384;
                        float _3398 = ((isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0))) * _3383) / ((_3394 * 0.699999988079071044921875) + 1.0);
                        float _3402 = (-0.0) - _2854;
                        float _3403 = (-0.0) - _2855;
                        float _3404 = (-0.0) - _2856;
                        float _3408 = inversesqrt(dot(vec3(_3402, _3403, _3404), vec3(_3402, _3403, _3404)));
                        float _3409 = _3408 * _3402;
                        float _3410 = _3408 * _3403;
                        float _3411 = _3408 * _3404;
                        float _3419 = exp2(log2(1.0 / ((_3394 * 3.5) + 5.0)) * 0.25);
                        float _3420 = 1.0 - _1146;
                        float _3427 = sqrt(1.0 - ((1.0 - (_3420 * _3420)) * (1.0 - (_3419 * _3419))));
                        float _3428 = _3427 * _3427;
                        float _3429 = _3428 * _3428;
                        float _3430 = _3409 + _3374;
                        float _3431 = _3410 + _3375;
                        float _3432 = _3411 + _3376;
                        float _3436 = inversesqrt(dot(vec3(_3430, _3431, _3432), vec3(_3430, _3431, _3432)));
                        float _3440 = dot(vec3(_1071, _1074, _1077), vec3(_3409, _3410, _3411));
                        float _4826 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                        float _3443 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                        float _3444 = dot(vec3(_1071, _1074, _1077), vec3(_3436 * _3430, _3436 * _3431, _3436 * _3432));
                        float _4837 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                        float _3447 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                        float _3451 = ((_3447 * _3447) * (_3429 + (-1.0))) + 1.0;
                        float _3452 = _3387 * _3428;
                        float _3453 = _3452 * _3452;
                        float _3456 = ((1.0 - _3453) * _3377) + _3453;
                        float _4848 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                        float _3457 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                        float _3458 = 1.0 - _3428;
                        float _3468 = (0.5 / (((_3457 * ((_3443 * _3458) + _3428)) + 9.9999999392252902907785028219223e-09) + (((_3457 * _3458) + _3428) * _3443))) * _3457;
                        float _4859 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                        float _3479 = (((_3429 * 3.1415927410125732421875) * (isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0)))) / ((_3451 * _3451) * ((_3394 * 2.1991131305694580078125) + 3.141590118408203125))) * _3383;
                        _3231 = (_3398 * _3346.x) + _3304;
                        _3232 = (_3398 * _3346.y) + _3305;
                        _3233 = (_3398 * _3346.z) + _3306;
                        _3228 = (_3479 * _3363.x) + _3301;
                        _3229 = (_3479 * _3363.y) + _3302;
                        _3230 = (_3479 * _3363.z) + _3303;
                        if (_3308 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3301 = _3228;
                            _3302 = _3229;
                            _3303 = _3230;
                            _3304 = _3231;
                            _3305 = _3232;
                            _3306 = _3233;
                            _3307 = _3308;
                        }
                    }
                    frontier_phi_66_pred = _3228;
                    frontier_phi_66_pred_1 = _3233;
                    frontier_phi_66_pred_2 = _3232;
                    frontier_phi_66_pred_3 = _3231;
                    frontier_phi_66_pred_4 = _3230;
                    frontier_phi_66_pred_5 = _3229;
                }
                _3004 = frontier_phi_66_pred;
                _3014 = frontier_phi_66_pred_1;
                _3012 = frontier_phi_66_pred_2;
                _3010 = frontier_phi_66_pred_3;
                _3008 = frontier_phi_66_pred_4;
                _3006 = frontier_phi_66_pred_5;
                uint _3163 = _3162 + 1u;
                if (_3163 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3156 = _3004;
                    _3157 = _3006;
                    _3158 = _3008;
                    _3159 = _3010;
                    _3160 = _3012;
                    _3161 = _3014;
                    _3162 = _3163;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3003 = _3004;
            _3005 = _3006;
            _3007 = _3008;
            _3009 = _3010;
            _3011 = _3012;
            _3013 = _3014;
        }
        uvec4 _3017 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3018 = _3017.z;
        uint _3020 = (_3018 >> 8u) & 15u;
        float _3124;
        float _3126;
        float _3128;
        float _3130;
        float _3132;
        float _3134;
        if (((4294967295u << _3020) & _2900) == 0u)
        {
            _3124 = _3003;
            _3126 = _3005;
            _3128 = _3007;
            _3130 = _3009;
            _3132 = _3011;
            _3134 = _3013;
        }
        else
        {
            float _3149 = inversesqrt(dot(vec3(_2854, _2855, _2856), vec3(_2854, _2855, _2856)));
            float _3150 = _3149 * _2854;
            float _3151 = _3149 * _2855;
            float _3152 = _3149 * _2856;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3020 < ((_3018 >> 12u) & 15u))
            {
                float _3125;
                float _3127;
                float _3129;
                float _3131;
                float _3133;
                float _3135;
                float _3284 = _3003;
                float _3285 = _3005;
                float _3286 = _3007;
                float _3287 = _3009;
                float _3288 = _3011;
                float _3289 = _3013;
                uint _3290 = _3020;
                uint _3299;
                bool _3300;
                for (;;)
                {
                    _3299 = texelFetch(g_lightClassification, int((((_2894 << 5u) + (_2880 << 9u)) + (_3290 << 2u)) >> 2u)).x;
                    _3300 = _3299 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3300)
                    {
                        frontier_phi_77_pred = _3289;
                        frontier_phi_77_pred_1 = _3288;
                        frontier_phi_77_pred_2 = _3287;
                        frontier_phi_77_pred_3 = _3286;
                        frontier_phi_77_pred_4 = _3285;
                        frontier_phi_77_pred_5 = _3284;
                    }
                    else
                    {
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3786;
                        float _3787;
                        float _3788;
                        float _3789;
                        float _3790;
                        float _3791;
                        float _3506 = _3284;
                        float _3507 = _3285;
                        float _3508 = _3286;
                        float _3509 = _3287;
                        float _3510 = _3288;
                        float _3511 = _3289;
                        uint _3512 = _3299;
                        uint _3513;
                        vec4 _3538;
                        float _3539;
                        vec4 _3554;
                        vec3 _3566;
                        vec4 _3581;
                        vec4 _3596;
                        float _3642;
                        bool _3643;
                        for (;;)
                        {
                            uint _3523 = ((_3290 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3512));
                            _3513 = (_3512 + 4294967295u) & _3512;
                            uint _3525 = _3523 * 40u;
                            _3538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 3u)).x));
                            _3539 = _3538.w;
                            uint _3541 = (_3523 * 40u) + 4u;
                            _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            uint _3556 = (_3523 * 40u) + 8u;
                            _3566 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 2u)).x));
                            uint _3568 = (_3523 * 40u) + 16u;
                            _3581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 3u)).x));
                            uint _3583 = (_3523 * 40u) + 20u;
                            _3596 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 3u)).x));
                            uint _3598 = (_3523 * 40u) + 24u;
                            vec4 _3611 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 3u)).x));
                            uint _3617 = (_3523 * 40u) + 28u;
                            vec4 _3630 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 3u)).x));
                            _3642 = fma(_2856, _3630.z, fma(_2855, _3630.y, _3630.x * _2854)) + _3630.w;
                            _3643 = !((fma(_2856, _3611.z, fma(_2855, _3611.y, _3611.x * _2854)) + _3611.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3643)
                            {
                                float _3670 = _3538.x - _2854;
                                float _3671 = _3538.y - _2855;
                                float _3672 = _3538.z - _2856;
                                float _3673 = dot(vec3(_3670, _3671, _3672), vec3(_3670, _3671, _3672));
                                float _3676 = inversesqrt(_3673);
                                float _3677 = _3676 * _3670;
                                float _3678 = _3676 * _3671;
                                float _3679 = _3676 * _3672;
                                float _3683 = 1.0 - (_3673 / (_3539 * _3539));
                                float _4870 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                                float _3684 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                                float _3688 = sqrt(_3673) * _3554.w;
                                float _3690 = 1.39999997615814208984375 / (_3688 + 1.39999997615814208984375);
                                float _3691 = _3690 * _3690;
                                float _3694 = ((1.0 - _3691) * dot(vec3(_3677, _3678, _3679), vec3(_1071, _1074, _1077))) + _3691;
                                float _3697 = _3688 * _3688;
                                float _3701 = (fma(_2856, _3581.z, fma(_2855, _3581.y, _3581.x * _2854)) + _3581.w) / _3642;
                                float _3702 = (fma(_2856, _3596.z, fma(_2855, _3596.y, _3596.x * _2854)) + _3596.w) / _3642;
                                float _3706 = 1.0 - dot(vec2(_3701, _3702), vec2(_3701, _3702));
                                float _4886 = isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0));
                                float _3707 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                                float _3708 = _3707 * (((isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0))) * _3684) / ((_3697 * 0.699999988079071044921875) + 1.0));
                                float _3720 = exp2(log2(1.0 / ((_3697 * 3.5) + 5.0)) * 0.25);
                                float _3721 = 1.0 - _1146;
                                float _3728 = sqrt(1.0 - ((1.0 - (_3721 * _3721)) * (1.0 - (_3720 * _3720))));
                                float _3729 = _3728 * _3728;
                                float _3730 = _3729 * _3729;
                                float _3731 = _3677 - _3150;
                                float _3732 = _3678 - _3151;
                                float _3733 = _3679 - _3152;
                                float _3737 = inversesqrt(dot(vec3(_3731, _3732, _3733), vec3(_3731, _3732, _3733)));
                                float _3741 = dot(vec3(_1071, _1074, _1077), vec3((-0.0) - _3150, (-0.0) - _3151, (-0.0) - _3152));
                                float _4897 = isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0));
                                float _3744 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
                                float _3745 = dot(vec3(_1071, _1074, _1077), vec3(_3737 * _3731, _3737 * _3732, _3737 * _3733));
                                float _4908 = isnan(0.0) ? _3745 : (isnan(_3745) ? 0.0 : max(_3745, 0.0));
                                float _3748 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                                float _3752 = ((_3748 * _3748) * (_3730 + (-1.0))) + 1.0;
                                float _3753 = _3690 * _3729;
                                float _3754 = _3753 * _3753;
                                float _3760 = ((1.0 - _3754) * dot(vec3(_1071, _1074, _1077), vec3(_3677, _3678, _3679))) + _3754;
                                float _4919 = isnan(0.0) ? _3760 : (isnan(_3760) ? 0.0 : max(_3760, 0.0));
                                float _3761 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
                                float _3762 = 1.0 - _3729;
                                float _3772 = (0.5 / (((_3761 * ((_3744 * _3762) + _3729)) + 9.9999999392252902907785028219223e-09) + (((_3761 * _3762) + _3729) * _3744))) * _3761;
                                float _4930 = isnan(0.0) ? _3772 : (isnan(_3772) ? 0.0 : max(_3772, 0.0));
                                float _3782 = (_3707 * _3684) * (((_3730 * 3.1415927410125732421875) * (isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0)))) / ((_3752 * _3752) * ((_3697 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3708 * _3554.y;
                                frontier_phi_83_pred_1 = _3708 * _3554.x;
                                frontier_phi_83_pred_2 = _3782 * _3566.z;
                                frontier_phi_83_pred_3 = _3782 * _3566.y;
                                frontier_phi_83_pred_4 = _3782 * _3566.x;
                                frontier_phi_83_pred_5 = _3708 * _3554.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3790 = frontier_phi_83_pred;
                            _3789 = frontier_phi_83_pred_1;
                            _3788 = frontier_phi_83_pred_2;
                            _3787 = frontier_phi_83_pred_3;
                            _3786 = frontier_phi_83_pred_4;
                            _3791 = frontier_phi_83_pred_5;
                            _3496 = _3789 + _3509;
                            _3497 = _3790 + _3510;
                            _3498 = _3791 + _3511;
                            _3493 = _3786 + _3506;
                            _3494 = _3787 + _3507;
                            _3495 = _3788 + _3508;
                            if (_3513 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3506 = _3493;
                                _3507 = _3494;
                                _3508 = _3495;
                                _3509 = _3496;
                                _3510 = _3497;
                                _3511 = _3498;
                                _3512 = _3513;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3498;
                        frontier_phi_77_pred_1 = _3497;
                        frontier_phi_77_pred_2 = _3496;
                        frontier_phi_77_pred_3 = _3495;
                        frontier_phi_77_pred_4 = _3494;
                        frontier_phi_77_pred_5 = _3493;
                    }
                    _3135 = frontier_phi_77_pred;
                    _3133 = frontier_phi_77_pred_1;
                    _3131 = frontier_phi_77_pred_2;
                    _3129 = frontier_phi_77_pred_3;
                    _3127 = frontier_phi_77_pred_4;
                    _3125 = frontier_phi_77_pred_5;
                    uint _3291 = _3290 + 1u;
                    if (_3291 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3284 = _3125;
                        _3285 = _3127;
                        _3286 = _3129;
                        _3287 = _3131;
                        _3288 = _3133;
                        _3289 = _3135;
                        _3290 = _3291;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3129;
                frontier_phi_58_59_ladder_1 = _3135;
                frontier_phi_58_59_ladder_2 = _3133;
                frontier_phi_58_59_ladder_3 = _3131;
                frontier_phi_58_59_ladder_4 = _3127;
                frontier_phi_58_59_ladder_5 = _3125;
            }
            else
            {
                frontier_phi_58_59_ladder = _3007;
                frontier_phi_58_59_ladder_1 = _3013;
                frontier_phi_58_59_ladder_2 = _3011;
                frontier_phi_58_59_ladder_3 = _3009;
                frontier_phi_58_59_ladder_4 = _3005;
                frontier_phi_58_59_ladder_5 = _3003;
            }
            _3124 = frontier_phi_58_59_ladder_5;
            _3126 = frontier_phi_58_59_ladder_4;
            _3128 = frontier_phi_58_59_ladder;
            _3130 = frontier_phi_58_59_ladder_3;
            _3132 = frontier_phi_58_59_ladder_2;
            _3134 = frontier_phi_58_59_ladder_1;
        }
        float _3139 = isnan(1.0) ? _1130 : (isnan(_1130) ? 1.0 : min(_1130, 1.0));
        _2913 = (_3139 * _3130) + _2346;
        _2915 = (_3139 * _3132) + _2348;
        _2917 = (_3139 * _3134) + _2350;
        _2919 = ((_3124 * _1115) * _3139) + _2694;
        _2921 = ((_3126 * _1117) * _3139) + _2696;
        _2923 = ((_3128 * _1118) * _3139) + _2698;
    }
    else
    {
        _2913 = _2346;
        _2915 = _2348;
        _2917 = _2350;
        _2919 = _2694;
        _2921 = _2696;
        _2923 = _2698;
    }
    float _4946 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _4957 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
    float _4968 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _4979 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _2941 = ((isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0))) * (_2913 + ((isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))) * _1130))) + ((_2919 + ((isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0))) * _1965)) * cbPerFrame._m0[3u].x);
    float _2942 = ((isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0))) * (_2915 + ((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1130))) + ((_2921 + ((isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0))) * _1965)) * cbPerFrame._m0[3u].x);
    float _2943 = ((isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0))) * (_2917 + ((isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))) * _1130))) + ((_2923 + ((isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0))) * _1965)) * cbPerFrame._m0[3u].x);
    float _2948 = cbInstanceData._m0[_1090 + 6u].w * (isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0)));
    float _2953 = _1052 / cbSceneParam._m0[86u].x;
    float _2954 = _1053 / cbSceneParam._m0[86u].y;
    vec4 _2968 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2953, _2954, (log2((isnan(cbSceneParam._m0[77u].w) ? _975 : (isnan(_975) ? cbSceneParam._m0[77u].w : min(_975, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2970 = _2968.x;
    float _2971 = _2968.y;
    float _2972 = _2968.z;
    float _2973 = _2968.w;
    float _3066;
    float _3068;
    float _3070;
    float _3072;
    if (_975 > cbSceneParam._m0[78u].w)
    {
        float _3028 = isnan(_975) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _975 : min(cbSceneParam._m0[80u].w, _975));
        float _3029 = _3028 / _975;
        float _3040 = _3029 * _1025;
        float _3041 = _1026 * _3029;
        float _3042 = (-0.0) - _3041;
        float _3044 = _3029 * _1027;
        float _3046 = (cbSceneParam._m0[77u].w * _3042) / _3028;
        float _3047 = _3046 + cbSceneParam._m0[79u].w;
        float _3048 = cbSceneParam._m0[79u].w - _3041;
        float _3054 = sqrt(((_3040 * _3040) + (_3041 * _3041)) + (_3044 * _3044));
        float _3057 = (1.0 - (cbSceneParam._m0[77u].w / _3028)) * _3054;
        float _3062 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3064 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3241;
        if (abs((_3042 - _3046) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3241 = ((((_3047 > 0.0) ? exp2(_3062 * _3047) : (2.0 - exp2(_3064 * _3047))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3057;
        }
        else
        {
            float _3185 = 1.0 / cbSceneParam._m0[80u].x;
            float _3186 = isnan(_3048) ? _3047 : (isnan(_3047) ? _3048 : max(_3047, _3048));
            float _3187 = isnan(_3048) ? _3047 : (isnan(_3047) ? _3048 : min(_3047, _3048));
            float _3196 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : min(_3186, 0.0));
            float _3197 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : min(_3187, 0.0));
            _3241 = ((abs(_3054 / _3042) * cbSceneParam._m0[80u].y) * ((((_3196 - _3197) * 2.0) - ((exp2(_3062 * (isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0)))) - exp2(_3062 * (isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0))))) * _3185)) - ((exp2(_3064 * _3196) - exp2(_3064 * _3197)) * _3185))) + (_3057 * cbSceneParam._m0[80u].z);
        }
        vec4 _3243 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2953, _2954, 1.0), 0.0);
        float _3252 = exp2((_3241 * (-1.44269502162933349609375)) * (1.0 - _3243.w));
        float _3253 = log2(_3252);
        float _3269 = log2(_2973);
        _3066 = (exp2(_3269 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3253 * cbSceneParam._m0[78u].x)) * _3243.x) / cbSceneParam._m0[78u].x)) + _2970;
        _3068 = (exp2(_3269 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3253 * cbSceneParam._m0[78u].y)) * _3243.y) / cbSceneParam._m0[78u].y)) + _2971;
        _3070 = (exp2(_3269 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3253 * cbSceneParam._m0[78u].z)) * _3243.z) / cbSceneParam._m0[78u].z)) + _2972;
        _3072 = _3252 * _2973;
    }
    else
    {
        _3066 = _2970;
        _3068 = _2971;
        _3070 = _2972;
        _3072 = _2973;
    }
    bool _3279;
    vec4 _3082;
    vec4 _3104;
    float _3106;
    float _3110;
    float _3111;
    float _3112;
    float _3113;
    bool _3123;
    for (;;)
    {
        _3082 = cbMatDynParam._m0[0u];
        float _3084 = roundEven(_3082.y);
        bool _3085 = _3084 == 3.0;
        float _3086 = log2(_3072);
        float _3093 = exp2(_3086 * cbSceneParam._m0[78u].x) * _2941;
        float _3094 = exp2(_3086 * cbSceneParam._m0[78u].y) * _2942;
        float _3095 = exp2(_3086 * cbSceneParam._m0[78u].z) * _2943;
        float _3102 = _1041 + (-0.5);
        _3104 = cbMtdParam._m0[1u];
        _3106 = _3104.y * _3102;
        float _3109 = (_3084 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3110 = _3109 * (_3085 ? _3093 : (_3093 + (cbSceneParam._m0[72u].w * _3066)));
        _3111 = _3109 * (_3085 ? _3094 : (_3094 + (cbSceneParam._m0[72u].w * _3068)));
        _3112 = _3109 * (_3085 ? _3095 : (_3095 + (cbSceneParam._m0[72u].w * _3070)));
        _3113 = _3102 * 0.999000012874603271484375;
        _3123 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3123)
        {
            if ((cbInstanceData._m0[_1090 + 7u].x + _3113) < 0.5)
            {
                _3279 = true;
                break;
            }
        }
        uint _3220 = _1091 + uint(_3082.w);
        if ((cbInstanceData._m0[_3220].w < 1.0) && ((cbInstanceData._m0[_3220].w + _3113) < 0.5))
        {
            _3279 = true;
            break;
        }
        if ((_3106 + 1.0) < _3104.x)
        {
            _3279 = true;
            break;
        }
        _3279 = false;
        break;
    }
    float _3484;
    if (_3279)
    {
        discard_state = true;
        _3484 = 0.0;
    }
    else
    {
        _3484 = _2948;
    }
    SV_Target.x = _3110;
    SV_Target.y = _3111;
    SV_Target.z = _3112;
    SV_Target.w = _3484;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2948;
    discard_exit();
}


