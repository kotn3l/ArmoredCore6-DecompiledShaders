#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24;
layout(set = 0, binding = 12) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 13) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 18) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in float TEXCOORD_8;
layout(location = 7, component = 1) in float TEXCOORD_9;
layout(location = 7, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1493;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _294 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _298 = _294.z;
    float _311 = exp2(log2((1.0 - _298) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _312 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _313 = isnan(1.0) ? _312 : (isnan(_312) ? 1.0 : min(_312, 1.0));
    vec4 _330 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _342 = exp2(log2(_330.w * cbMtdParam._m0[29u].y) * cbMtdParam._m0[23u].x);
    float _343 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _344 = isnan(1.0) ? _343 : (isnan(_343) ? 1.0 : min(_343, 1.0));
    float _353 = exp2(log2(cbMtdParam._m0[23u].y * _298) * cbMtdParam._m0[22u].y);
    float _354 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _355 = isnan(1.0) ? _354 : (isnan(_354) ? 1.0 : min(_354, 1.0));
    vec4 _367 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _370 = _367.y;
    float _373 = (_367.x + (-0.02500000037252902984619140625)) * 8.0;
    float _377 = roundEven(5.0 - _373);
    float _378 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _379 = isnan(4.0) ? _378 : (isnan(_378) ? 4.0 : min(_378, 4.0));
    float _391 = floor(_379);
    vec4 _394 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w, _391));
    float _206[6];
    float _207[6];
    float _208[6];
    _206[0u] = cbMtdParam._m0[17u].x;
    _207[0u] = cbMtdParam._m0[17u].y;
    _208[0u] = cbMtdParam._m0[17u].z;
    _206[1u] = cbMtdParam._m0[15u].x;
    _207[1u] = cbMtdParam._m0[15u].y;
    _208[1u] = cbMtdParam._m0[15u].z;
    _206[2u] = cbMtdParam._m0[14u].x;
    _207[2u] = cbMtdParam._m0[14u].y;
    _208[2u] = cbMtdParam._m0[14u].z;
    _206[3u] = cbMtdParam._m0[13u].x;
    _207[3u] = cbMtdParam._m0[13u].y;
    _208[3u] = cbMtdParam._m0[13u].z;
    _206[4u] = cbMtdParam._m0[12u].x;
    _207[4u] = cbMtdParam._m0[12u].y;
    _208[4u] = cbMtdParam._m0[12u].z;
    _206[5u] = cbMtdParam._m0[18u].x;
    _207[5u] = cbMtdParam._m0[18u].y;
    _208[5u] = cbMtdParam._m0[18u].z;
    float _458 = roundEven(_373);
    float _459 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    uint _461 = uint(int(isnan(5.0) ? _459 : (isnan(_459) ? 5.0 : min(_459, 5.0))));
    vec4 _491 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _502 = cbMtdParam._m0[9u].x * _491.x;
    float _503 = cbMtdParam._m0[9u].y * _491.y;
    float _504 = cbMtdParam._m0[9u].z * _491.z;
    float _511 = ((((((_206[_461] - cbMtdParam._m0[10u].x) * _370) + cbMtdParam._m0[10u].x) * _394.x) - _502) * _355) + _502;
    float _512 = ((((((_207[_461] - cbMtdParam._m0[10u].y) * _370) + cbMtdParam._m0[10u].y) * _394.y) - _503) * _355) + _503;
    float _513 = ((((((_208[_461] - cbMtdParam._m0[10u].z) * _370) + cbMtdParam._m0[10u].z) * _394.z) - _504) * _355) + _504;
    float _519 = exp2(log2(_294.w) * cbMtdParam._m0[23u].w);
    vec4 _532 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _552 = (((cbMtdParam._m0[16u].x * _532.x) - _511) * _519) + _511;
    float _553 = (((cbMtdParam._m0[16u].y * _532.y) - _512) * _519) + _512;
    float _554 = (((cbMtdParam._m0[16u].z * _532.z) - _513) * _519) + _513;
    vec4 _566 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _586 = (((cbMtdParam._m0[19u].x * _566.x) - _552) * _344) + _552;
    float _587 = (((cbMtdParam._m0[19u].y * _566.y) - _553) * _344) + _553;
    float _588 = (((cbMtdParam._m0[19u].z * _566.z) - _554) * _344) + _554;
    vec4 _600 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _625 = (_330.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _600.x) - _586) * _313) + _586);
    float _627 = (_330.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _600.y) - _587) * _313) + _587);
    float _629 = (_330.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _600.z) - _588) * _313) + _588);
    float _633 = cbMtdParam._m0[28u].x * TEXCOORD_8;
    float _642 = (_633 - (((texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _633))) * (cbMtdParam._m0[27u].w + 1.0);
    float _4151 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _643 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _650 = ((cbMtdParam._m0[21u].x - _625) * _643) + _625;
    float _651 = ((cbMtdParam._m0[21u].y - _627) * _643) + _627;
    float _652 = ((cbMtdParam._m0[21u].z - _629) * _643) + _629;
    vec4 _666 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24, SS_ClampLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.z) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.w) + cbTextureTilingScale._m0[11u].w));
    float _674 = (_666.x + (-1.0)) + (cbMtdParam._m0[28u].y * 2.0);
    float _4162 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _680 = exp2(log2(cbMtdParam._m0[28u].w * (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) * cbMtdParam._m0[28u].z);
    float _4173 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _681 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _201[5];
    float _202[5];
    _201[0u] = cbMtdParam._m0[29u].z;
    _202[0u] = cbMtdParam._m0[29u].w;
    _201[1u] = cbMtdParam._m0[31u].z;
    _202[1u] = cbMtdParam._m0[31u].w;
    _201[2u] = cbMtdParam._m0[31u].x;
    _202[2u] = cbMtdParam._m0[31u].y;
    _201[3u] = cbMtdParam._m0[30u].z;
    _202[3u] = cbMtdParam._m0[30u].w;
    _201[4u] = cbMtdParam._m0[30u].x;
    _202[4u] = cbMtdParam._m0[30u].y;
    float _720 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    uint _722 = uint(int(isnan(4.0) ? _720 : (isnan(_720) ? 4.0 : min(_720, 4.0))));
    float _729 = ((_202[_722] - cbMtdParam._m0[22u].z) * _355) + cbMtdParam._m0[22u].z;
    float _732 = ((cbMtdParam._m0[22u].w - _729) * _519) + _729;
    float _735 = ((cbMtdParam._m0[25u].x - _732) * _344) + _732;
    float _738 = ((cbMtdParam._m0[26u].x - _735) * _313) + _735;
    float _740 = _738 - (_738 * _633);
    vec4 _756 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w, _391));
    vec4 _773 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _775 = _773.x;
    float _776 = _773.y;
    float _781 = cbMtdParam._m0[22u].x + _773.z;
    float _784 = (((_756.z + _201[_722]) - _781) * _355) + _781;
    vec4 _796 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _807 = (((_796.z - _784) + cbMtdParam._m0[29u].x) * _519) + _784;
    float _812 = ((((_298 * 2.0) * _807) - _807) * cbMtdParam._m0[24u].w) + _807;
    vec4 _824 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _835 = (((cbMtdParam._m0[23u].z + _824.z) - _812) * _344) + _812;
    vec4 _848 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _859 = (((_848.z - _835) + cbMtdParam._m0[26u].y) * _313) + _835;
    vec4 _874 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _888 = ((cbMtdParam._m0[27u].y * _633) * ((_874.z * cbMtdParam._m0[27u].x) - _859)) + _859;
    float _900 = ((_756.x - _775) * _355) + _775;
    float _901 = ((_756.y - _776) * _355) + _776;
    float _906 = ((_796.x - _900) * _519) + _900;
    float _907 = ((_796.y - _901) * _519) + _901;
    float _912 = ((_824.x - _906) * _344) + _906;
    float _913 = ((_824.y - _907) * _344) + _907;
    float _922 = ((((_848.x - _912) * _313) + _912) * 2.0) + (-1.0);
    float _923 = ((((_848.y - _913) * _313) + _913) * 2.0) + (-1.0);
    float _924 = dot(vec2(_922, _923), vec2(_922, _923));
    float _4194 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _929 = sqrt(1.0 - (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))));
    float _939 = ((cbMtdParam._m0[25u].y * ((_294.x * 2.0) + (-1.0))) + _922) + ((((_874.x * 2.0) + (-1.0)) * _633) * cbMtdParam._m0[26u].w);
    float _940 = ((cbMtdParam._m0[25u].y * ((_294.y * 2.0) + (-1.0))) + _923) + (((cbMtdParam._m0[28u].x * TEXCOORD_9) * ((_874.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _943 = fma(_929, _243 * NORMAL.x, fma(_940, _250 * TANGENT.x, (_236 * _228) * _939));
    float _946 = fma(_929, _243 * NORMAL.y, fma(_940, _250 * TANGENT.y, (_236 * _229) * _939));
    float _949 = fma(_929, _243 * NORMAL.z, fma(_940, _250 * TANGENT.z, (_236 * _230) * _939));
    float _953 = inversesqrt(dot(vec3(_943, _946, _949), vec3(_943, _946, _949)));
    float _954 = _953 * _943;
    float _955 = _953 * _946;
    float _956 = _953 * _949;
    float _4205 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _957 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
    float _4216 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _958 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _4227 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _4238 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _4249 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _4260 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _962 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    float _978 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1018 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1028 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1018);
    float _1029 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1018);
    float _1030 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1018);
    float _1034 = inversesqrt(dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030)));
    float _1035 = _1028 * _1034;
    float _1036 = _1029 * _1034;
    float _1037 = _1030 * _1034;
    float _1043 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1044 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1062 = fma(_956, cbSceneParam._m0[5u].z, fma(_955, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _954));
    float _1065 = fma(_956, cbSceneParam._m0[6u].z, fma(_955, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _954));
    float _1068 = fma(_956, cbSceneParam._m0[7u].z, fma(_955, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _954));
    uint _1081 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1083 = (_1081 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1089 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0)))) * cbInstanceData._m0[_1083].x;
    float _1090 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0)))) * cbInstanceData._m0[_1083].y;
    float _1091 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0)))) * cbInstanceData._m0[_1083].z;
    float _4271 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _1092 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
    float _4282 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
    float _1093 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    float _4293 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _1094 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
    float _1095 = 1.0 - _962;
    float _1096 = _1092 * _1095;
    float _1097 = _1093 * _1095;
    float _1098 = _1094 * _1095;
    float _1103 = (_1092 + (-0.039999999105930328369140625)) * _962;
    float _1104 = (_1093 + (-0.039999999105930328369140625)) * _962;
    float _1105 = (_1094 + (-0.039999999105930328369140625)) * _962;
    float _1106 = _1103 + 0.039999999105930328369140625;
    float _1108 = _1104 + 0.039999999105930328369140625;
    float _1109 = _1105 + 0.039999999105930328369140625;
    vec4 _1118 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1043, cbSceneParam._m0[86u].y * _1044));
    float _1121 = _1118.x * TEXCOORD_5.w;
    float _1122 = dot(vec3(_954, _955, _956), vec3(_1035, _1036, _1037));
    float _1125 = _1122 * 2.0;
    float _1129 = (_1125 * _954) - _1035;
    float _1130 = (_1125 * _955) - _1036;
    float _1131 = (_1125 * _956) - _1037;
    float _1135 = abs(dot(vec3(_1035, _1036, _1037), vec3(_954, _955, _956)));
    float _4304 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
    float _1137 = sqrt(_958);
    float _1148 = exp2((_1137 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1137 * 3.0));
    float _1154 = (1.0 - _1148) * ((_1137 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1155 = _1148 * _1137;
    float _1183 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1187 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1191 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1492;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1217 = fma(_1191, cbModelParam._m0[26u].z, fma(_1187, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1183));
        float _1221 = fma(_1191, cbModelParam._m0[27u].z, fma(_1187, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1183));
        float _1225 = fma(_1191, cbModelParam._m0[28u].z, fma(_1187, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1183));
        float _1250 = _1183 + _954;
        float _1251 = _1187 + _955;
        float _1252 = _1191 + _956;
        float _1262 = fma(_1252, cbModelParam._m0[26u].z, fma(_1251, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1250)) - _1217;
        float _1263 = fma(_1252, cbModelParam._m0[27u].z, fma(_1251, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1250)) - _1221;
        float _1264 = fma(_1252, cbModelParam._m0[28u].z, fma(_1251, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1250)) - _1225;
        float _1268 = inversesqrt(dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264)));
        float _1281 = ((_1268 * _1262) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1217 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1282 = ((_1268 * _1263) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1221 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1283 = ((_1268 * _1264) / cbModelParam._m0[34u].z) + ((((((_1225 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        float _1320 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1286.x + (-0.5));
        float _1322 = _1320 * (_1286.y + (-0.5));
        float _1323 = _1320 * (_1286.z + (-0.5));
        float _1330 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1293.x + (-0.5));
        float _1332 = _1330 * (_1293.y + (-0.5));
        float _1333 = _1330 * (_1293.z + (-0.5));
        float _1340 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1300.x + (-0.5));
        float _1342 = _1340 * (_1300.y + (-0.5));
        float _1343 = _1340 * (_1300.z + (-0.5));
        float _1350 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1351 = _1350 * (_1307.x + (-0.5));
        float _1352 = _1350 * (_1307.y + (-0.5));
        float _1353 = _1350 * (_1307.z + (-0.5));
        float _1354 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1355 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1356 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1357 = _1321 * 0.5;
        float _1358 = _1331 * 0.5;
        float _1359 = _1341 * 0.5;
        float _1360 = dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359));
        float _1365 = (_1360 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1360);
        float _1374 = (dot(vec3(_954, _955, _956), vec3(_1365 * _1357, _1365 * _1358, _1365 * _1359)) + 1.0) * 0.5;
        float _4330 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1384 = sqrt(((_1358 * _1358) + (_1357 * _1357)) + (_1359 * _1359)) / (_1354 + 9.9999997473787516355514526367188e-06);
        float _4341 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1386 = _1385 * 2.0;
        float _1390 = (1.0 - _1385) / (_1385 + 1.0);
        float _4352 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1400 = ((((1.0 - _1391) * (_1386 + 2.0)) * exp2(log2(isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_1386 + 1.0))) + _1391) * _1354;
        float _1401 = _1322 * 0.5;
        float _1402 = _1332 * 0.5;
        float _1403 = _1342 * 0.5;
        float _1404 = dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403));
        float _1409 = (_1404 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1404);
        float _1417 = (dot(vec3(_954, _955, _956), vec3(_1409 * _1401, _1409 * _1402, _1409 * _1403)) + 1.0) * 0.5;
        float _4363 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1426 = sqrt(((_1402 * _1402) + (_1401 * _1401)) + (_1403 * _1403)) / (_1355 + 9.9999997473787516355514526367188e-06);
        float _4374 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1428 = _1427 * 2.0;
        float _1432 = (1.0 - _1427) / (_1427 + 1.0);
        float _4385 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _1442 = ((((1.0 - _1433) * (_1428 + 2.0)) * exp2(log2(isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_1428 + 1.0))) + _1433) * _1355;
        float _1443 = _1323 * 0.5;
        float _1444 = _1333 * 0.5;
        float _1445 = _1343 * 0.5;
        float _1446 = dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445));
        float _1451 = (_1446 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1446);
        float _1459 = (dot(vec3(_954, _955, _956), vec3(_1451 * _1443, _1451 * _1444, _1451 * _1445)) + 1.0) * 0.5;
        float _4396 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1468 = sqrt(((_1444 * _1444) + (_1443 * _1443)) + (_1445 * _1445)) / (_1356 + 9.9999997473787516355514526367188e-06);
        float _4407 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _1470 = _1469 * 2.0;
        float _1474 = (1.0 - _1469) / (_1469 + 1.0);
        float _4418 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _1484 = ((((1.0 - _1475) * (_1470 + 2.0)) * exp2(log2(isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_1470 + 1.0))) + _1475) * _1356;
        _1492 = _1323;
        _1494 = _1322;
        _1495 = _1321;
        _1496 = _1333;
        _1497 = _1332;
        _1498 = _1331;
        _1499 = _1343;
        _1500 = _1342;
        _1501 = _1341;
        _1502 = _1356;
        _1503 = _1355;
        _1504 = _1354;
        _1505 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)));
        _1506 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)));
        _1507 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)));
    }
    else
    {
        _1492 = _1493;
        _1494 = _1493;
        _1495 = _1493;
        _1496 = _1493;
        _1497 = _1493;
        _1498 = _1493;
        _1499 = _1493;
        _1500 = _1493;
        _1501 = _1493;
        _1502 = _1493;
        _1503 = _1493;
        _1504 = _1493;
        _1505 = 0.0;
        _1506 = 0.0;
        _1507 = 0.0;
    }
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1530 = fma(_1191, cbModelParam._m0[30u].z, fma(_1187, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1183));
        float _1534 = fma(_1191, cbModelParam._m0[31u].z, fma(_1187, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1183));
        float _1538 = fma(_1191, cbModelParam._m0[32u].z, fma(_1187, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1183));
        float _1561 = _1183 + _954;
        float _1562 = _1187 + _955;
        float _1563 = _1191 + _956;
        float _1573 = fma(_1563, cbModelParam._m0[30u].z, fma(_1562, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1561)) - _1530;
        float _1574 = fma(_1563, cbModelParam._m0[31u].z, fma(_1562, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1561)) - _1534;
        float _1575 = fma(_1563, cbModelParam._m0[32u].z, fma(_1562, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1561)) - _1538;
        float _1579 = inversesqrt(dot(vec3(_1573, _1574, _1575), vec3(_1573, _1574, _1575)));
        float _1592 = ((_1579 * _1573) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1530 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1593 = ((_1579 * _1574) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1534 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1594 = ((_1579 * _1575) / cbModelParam._m0[35u].z) + ((((((_1538 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1596 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1592, _1593, _1594), 0.0);
        vec4 _1603 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1592, _1593, _1594), 0.0);
        vec4 _1610 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1592, _1593, _1594), 0.0);
        vec4 _1617 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1592, _1593, _1594), 0.0);
        float _1629 = exp2((_1596.w + (-0.5)) * 20.0) * 2.0;
        float _1630 = _1629 * (_1596.x + (-0.5));
        float _1631 = _1629 * (_1596.y + (-0.5));
        float _1632 = _1629 * (_1596.z + (-0.5));
        float _1639 = exp2((_1603.w + (-0.5)) * 20.0) * 2.0;
        float _1640 = _1639 * (_1603.x + (-0.5));
        float _1641 = _1639 * (_1603.y + (-0.5));
        float _1642 = _1639 * (_1603.z + (-0.5));
        float _1649 = exp2((_1610.w + (-0.5)) * 20.0) * 2.0;
        float _1650 = _1649 * (_1610.x + (-0.5));
        float _1651 = _1649 * (_1610.y + (-0.5));
        float _1652 = _1649 * (_1610.z + (-0.5));
        float _1659 = exp2((_1617.w + (-0.5)) * 20.0) * 2.0;
        float _1660 = _1659 * (_1617.x + (-0.5));
        float _1661 = _1659 * (_1617.y + (-0.5));
        float _1662 = _1659 * (_1617.z + (-0.5));
        float _1663 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1664 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1665 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1666 = _1630 * 0.5;
        float _1667 = _1640 * 0.5;
        float _1668 = _1650 * 0.5;
        float _1669 = dot(vec3(_1666, _1667, _1668), vec3(_1666, _1667, _1668));
        float _1674 = (_1669 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1669);
        float _1682 = (dot(vec3(_954, _955, _956), vec3(_1674 * _1666, _1674 * _1667, _1674 * _1668)) + 1.0) * 0.5;
        float _4459 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1691 = sqrt(((_1667 * _1667) + (_1666 * _1666)) + (_1668 * _1668)) / (_1663 + 9.9999997473787516355514526367188e-06);
        float _4470 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _1693 = _1692 * 2.0;
        float _1697 = (1.0 - _1692) / (_1692 + 1.0);
        float _4481 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1698 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _1707 = ((((1.0 - _1698) * (_1693 + 2.0)) * exp2(log2(isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_1693 + 1.0))) + _1698) * _1663;
        float _1708 = _1631 * 0.5;
        float _1709 = _1641 * 0.5;
        float _1710 = _1651 * 0.5;
        float _1711 = dot(vec3(_1708, _1709, _1710), vec3(_1708, _1709, _1710));
        float _1716 = (_1711 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1711);
        float _1724 = (dot(vec3(_954, _955, _956), vec3(_1716 * _1708, _1716 * _1709, _1716 * _1710)) + 1.0) * 0.5;
        float _4492 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1733 = sqrt(((_1709 * _1709) + (_1708 * _1708)) + (_1710 * _1710)) / (_1664 + 9.9999997473787516355514526367188e-06);
        float _4503 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _1735 = _1734 * 2.0;
        float _1739 = (1.0 - _1734) / (_1734 + 1.0);
        float _4514 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1740 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _1749 = ((((1.0 - _1740) * (_1735 + 2.0)) * exp2(log2(isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_1735 + 1.0))) + _1740) * _1664;
        float _1750 = _1632 * 0.5;
        float _1751 = _1642 * 0.5;
        float _1752 = _1652 * 0.5;
        float _1753 = dot(vec3(_1750, _1751, _1752), vec3(_1750, _1751, _1752));
        float _1758 = (_1753 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1753);
        float _1766 = (dot(vec3(_954, _955, _956), vec3(_1758 * _1750, _1758 * _1751, _1758 * _1752)) + 1.0) * 0.5;
        float _4525 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1775 = sqrt(((_1751 * _1751) + (_1750 * _1750)) + (_1752 * _1752)) / (_1665 + 9.9999997473787516355514526367188e-06);
        float _4536 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _1777 = _1776 * 2.0;
        float _1781 = (1.0 - _1776) / (_1776 + 1.0);
        float _4547 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1782 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _1791 = ((((1.0 - _1782) * (_1777 + 2.0)) * exp2(log2(isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_1777 + 1.0))) + _1782) * _1665;
        _1799 = _1632;
        _1800 = _1631;
        _1801 = _1630;
        _1802 = _1642;
        _1803 = _1641;
        _1804 = _1640;
        _1805 = _1652;
        _1806 = _1651;
        _1807 = _1650;
        _1808 = _1665;
        _1809 = _1664;
        _1810 = _1663;
        _1811 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0)));
        _1812 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)));
        _1813 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)));
    }
    else
    {
        _1799 = _1493;
        _1800 = _1493;
        _1801 = _1493;
        _1802 = _1493;
        _1803 = _1493;
        _1804 = _1493;
        _1805 = _1493;
        _1806 = _1493;
        _1807 = _1493;
        _1808 = _1493;
        _1809 = _1493;
        _1810 = _1493;
        _1811 = 0.0;
        _1812 = 0.0;
        _1813 = 0.0;
    }
    float _1823 = (cbModelParam._m0[1u].x * (_1811 - _1505)) + _1505;
    float _1824 = (cbModelParam._m0[1u].x * (_1812 - _1506)) + _1506;
    float _1825 = (cbModelParam._m0[1u].x * (_1813 - _1507)) + _1507;
    float _1846 = fma(_1825, cbSceneParam._m0[89u].z, fma(_1824, cbSceneParam._m0[89u].y, _1823 * cbSceneParam._m0[89u].x));
    float _1849 = fma(_1825, cbSceneParam._m0[90u].z, fma(_1824, cbSceneParam._m0[90u].y, _1823 * cbSceneParam._m0[90u].x));
    float _1852 = fma(_1825, cbSceneParam._m0[91u].z, fma(_1824, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1823));
    float _1867 = _1129 * 0.5;
    float _1868 = _1130 * 0.5;
    float _1869 = _1131 * 0.5;
    float _1870 = dot(vec4(_1867, _1868, _1869, 1.0), vec4(_1801, _1804, _1807, _1810));
    float _1873 = dot(vec4(_1867, _1868, _1869, 1.0), vec4(_1800, _1803, _1806, _1809));
    float _1876 = dot(vec4(_1867, _1868, _1869, 1.0), vec4(_1799, _1802, _1805, _1808));
    float _1910;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1883 = dot(vec4(_1867, _1868, _1869, 1.0), vec4(_1492, _1496, _1499, _1502));
        float _1887 = dot(vec4(_1867, _1868, _1869, 1.0), vec4(_1494, _1497, _1500, _1503));
        float _1891 = dot(vec4(_1867, _1868, _1869, 1.0), vec4(_1495, _1498, _1501, _1504));
        float _1898 = dot(vec4(cbModelParam._m0[39u]), vec4(_1867, _1868, _1869, 1.0));
        _1910 = dot(vec3(isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0)), isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0)), isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1898) ? 0.0 : (isnan(0.0) ? _1898 : max(0.0, _1898))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1910 = 1.0;
    }
    float _1921;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1912 = dot(vec4(cbModelParam._m0[40u]), vec4(_1867, _1868, _1869, 1.0));
        _1921 = dot(vec3(isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0)), isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0)), isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1912) ? 0.0 : (isnan(0.0) ? _1912 : max(0.0, _1912))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1921 = 1.0;
    }
    float _1925 = (_1921 * cbModelParam._m0[1u].x) + (_1910 * (1.0 - cbModelParam._m0[1u].x));
    float _1935 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _958);
    float _1936 = isnan(_1935) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1935 : min(cbModelParam._m0[25u].z, _1935));
    float _2016;
    float _2018;
    float _2020;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1983 = fma(_1191, cbModelParam._m0[13u].z, fma(_1187, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1183)) + cbModelParam._m0[13u].w;
        float _1987 = fma(_1191, cbModelParam._m0[14u].z, fma(_1187, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1183)) + cbModelParam._m0[14u].w;
        float _1991 = fma(_1191, cbModelParam._m0[15u].z, fma(_1187, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1183)) + cbModelParam._m0[15u].w;
        float _1994 = fma(_1131, cbModelParam._m0[13u].z, fma(_1130, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1129));
        float _1997 = fma(_1131, cbModelParam._m0[14u].z, fma(_1130, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1129));
        float _2000 = fma(_1131, cbModelParam._m0[15u].z, fma(_1130, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1129));
        float _2028;
        if (_1994 > 0.0)
        {
            _2028 = abs((1.0 - _1983) / _1994);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1994 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1983 + 1.0) / _1994);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2028 = frontier_phi_14_12_ladder;
        }
        float _2199;
        if (_1997 > 0.0)
        {
            _2199 = abs((1.0 - _1987) / _1997);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1997 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1987 + 1.0) / _1997);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2199 = frontier_phi_23_19_ladder;
        }
        float _2494;
        if (_2000 > 0.0)
        {
            _2494 = abs((1.0 - _1991) / _2000);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2000 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1991 + 1.0) / _2000);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2494 = frontier_phi_35_30_ladder;
        }
        float _2496 = isnan(_2199) ? _2028 : (isnan(_2028) ? _2199 : min(_2028, _2199));
        float _2497 = isnan(_2494) ? _2496 : (isnan(_2496) ? _2494 : min(_2496, _2494));
        float _2501 = (_2497 * _1994) + _1983;
        float _2502 = (_2497 * _1997) + _1987;
        float _2503 = (_2497 * _2000) + _1991;
        float _2504 = _2497 * 9.9999997473787516355514526367188e-05;
        float _2506 = (-1.0) - _2504;
        float _2508 = _2504 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2503 > _2508) || ((_2503 < _2506) || ((_2502 > _2508) || ((_2502 < _2506) || ((_2501 < _2506) || (_2501 > _2508))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2648 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2503, cbModelParam._m0[9u].z, fma(_2502, cbModelParam._m0[9u].y, _2501 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2503, cbModelParam._m0[10u].z, fma(_2502, cbModelParam._m0[10u].y, _2501 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2503, cbModelParam._m0[11u].z, fma(_2502, cbModelParam._m0[11u].y, _2501 * cbModelParam._m0[11u].x))), _1936);
            frontier_phi_13_35_ladder = _2648.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2648.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2648.x * cbModelParam._m0[1u].y;
        }
        _2016 = frontier_phi_13_35_ladder_2;
        _2018 = frontier_phi_13_35_ladder_1;
        _2020 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2004 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1129, _1130, _1131), _1936);
        _2016 = _2004.x * cbModelParam._m0[1u].y;
        _2018 = _2004.y * cbModelParam._m0[1u].y;
        _2020 = _2004.z * cbModelParam._m0[1u].y;
    }
    float _2024 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _958);
    float _2025 = isnan(_2024) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2024 : min(cbModelParam._m0[25u].w, _2024));
    float _2114;
    float _2116;
    float _2118;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2078 = fma(_1191, cbModelParam._m0[21u].z, fma(_1187, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1183)) + cbModelParam._m0[21u].w;
        float _2082 = fma(_1191, cbModelParam._m0[22u].z, fma(_1187, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1183)) + cbModelParam._m0[22u].w;
        float _2086 = fma(_1191, cbModelParam._m0[23u].z, fma(_1187, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1183)) + cbModelParam._m0[23u].w;
        float _2089 = fma(_1131, cbModelParam._m0[21u].z, fma(_1130, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1129));
        float _2092 = fma(_1131, cbModelParam._m0[22u].z, fma(_1130, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1129));
        float _2095 = fma(_1131, cbModelParam._m0[23u].z, fma(_1130, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1129));
        float _2204;
        if (_2089 > 0.0)
        {
            _2204 = abs((1.0 - _2078) / _2089);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2089 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2078 + 1.0) / _2089);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2204 = frontier_phi_25_21_ladder;
        }
        float _2521;
        if (_2092 > 0.0)
        {
            _2521 = abs((1.0 - _2082) / _2092);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2092 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2082 + 1.0) / _2092);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2521 = frontier_phi_37_32_ladder;
        }
        float _2859;
        if (_2095 > 0.0)
        {
            _2859 = abs((1.0 - _2086) / _2095);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2095 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2086 + 1.0) / _2095);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2859 = frontier_phi_47_44_ladder;
        }
        float _2861 = isnan(_2521) ? _2204 : (isnan(_2204) ? _2521 : min(_2204, _2521));
        float _2862 = isnan(_2859) ? _2861 : (isnan(_2861) ? _2859 : min(_2861, _2859));
        float _2866 = (_2862 * _2089) + _2078;
        float _2867 = (_2862 * _2092) + _2082;
        float _2868 = (_2862 * _2095) + _2086;
        float _2869 = _2862 * 9.9999997473787516355514526367188e-05;
        float _2870 = (-1.0) - _2869;
        float _2872 = _2869 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2868 > _2872) || ((_2868 < _2870) || ((_2867 > _2872) || ((_2867 < _2870) || ((_2866 < _2870) || (_2866 > _2872))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2990 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2868, cbModelParam._m0[17u].z, fma(_2867, cbModelParam._m0[17u].y, _2866 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2868, cbModelParam._m0[18u].z, fma(_2867, cbModelParam._m0[18u].y, _2866 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2868, cbModelParam._m0[19u].z, fma(_2867, cbModelParam._m0[19u].y, _2866 * cbModelParam._m0[19u].x))), _2025);
            frontier_phi_22_47_ladder = _2990.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2990.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2990.x * cbModelParam._m0[1u].z;
        }
        _2114 = frontier_phi_22_47_ladder_2;
        _2116 = frontier_phi_22_47_ladder_1;
        _2118 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2098 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1129, _1130, _1131), _2025);
        _2114 = _2098.x * cbModelParam._m0[1u].z;
        _2116 = _2098.y * cbModelParam._m0[1u].z;
        _2118 = _2098.z * cbModelParam._m0[1u].z;
    }
    float _2131 = (((_1154 * _1106) + _1155) * _1121) * ((cbModelParam._m0[1u].w * (_2114 - _2016)) + _2016);
    float _2133 = (((_1154 * _1108) + _1155) * _1121) * ((cbModelParam._m0[1u].w * (_2116 - _2018)) + _2018);
    float _2135 = (((_1154 * _1109) + _1155) * _1121) * ((cbModelParam._m0[1u].w * (_2118 - _2020)) + _2020);
    float _2138 = fma(_2135, cbSceneParam._m0[89u].z, fma(_2133, cbSceneParam._m0[89u].y, _2131 * cbSceneParam._m0[89u].x));
    float _2141 = fma(_2135, cbSceneParam._m0[90u].z, fma(_2133, cbSceneParam._m0[90u].y, _2131 * cbSceneParam._m0[90u].x));
    float _2144 = fma(_2135, cbSceneParam._m0[91u].z, fma(_2133, cbSceneParam._m0[91u].y, _2131 * cbSceneParam._m0[91u].x));
    float _2178 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2182 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2186 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2190 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2191 = _2178 / _2190;
    float _2192 = _2182 / _2190;
    float _2193 = _2186 / _2190;
    float _2340;
    float _2341;
    float _2342;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2220 = ((uint(_2193 > cbSceneParam._m0[59u].y) + uint(_2193 > cbSceneParam._m0[59u].x)) + uint(_2193 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2221 = _2220 + 43u;
        uint _2229 = _2220 + 44u;
        uint _2237 = _2220 + 45u;
        uint _2245 = _2220 + 46u;
        float _2256 = fma(_2190, cbSceneParam._m0[_2221].w, fma(_2186, cbSceneParam._m0[_2221].z, fma(_2182, cbSceneParam._m0[_2221].y, _2178 * cbSceneParam._m0[_2221].x)));
        float _2260 = fma(_2190, cbSceneParam._m0[_2229].w, fma(_2186, cbSceneParam._m0[_2229].z, fma(_2182, cbSceneParam._m0[_2229].y, _2178 * cbSceneParam._m0[_2229].x)));
        float _2268 = fma(_2190, cbSceneParam._m0[_2245].w, fma(_2186, cbSceneParam._m0[_2245].z, fma(_2182, cbSceneParam._m0[_2245].y, _2178 * cbSceneParam._m0[_2245].x)));
        float _2273 = cbSceneParam._m0[33u].z * _2268;
        float _2275 = cbSceneParam._m0[33u].w * _2268;
        float _2278 = fma(_2190, cbSceneParam._m0[_2237].w, fma(_2186, cbSceneParam._m0[_2237].z, fma(_2182, cbSceneParam._m0[_2237].y, _2178 * cbSceneParam._m0[_2237].x))) / _2268;
        float _2326 = (cbSceneParam._m0[33u].x - sqrt(((_2192 * _2192) + (_2191 * _2191)) + (_2193 * _2193))) * cbSceneParam._m0[33u].y;
        float _4673 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2333 = (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2273 + _2256) / _2268, (_2275 + _2260) / _2268), _2278), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2275 + _2256) / _2268, (_2260 - _2273) / _2268), _2278), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2256 - _2273) / _2268, (_2260 - _2275) / _2268), _2278), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2256 - _2275) / _2268, (_2273 + _2260) / _2268), _2278), 0.0)).x), vec4(0.25)));
        _2340 = 1.0 - (_2333 * cbSceneParam._m0[34u].x);
        _2341 = 1.0 - (_2333 * cbSceneParam._m0[34u].y);
        _2342 = 1.0 - (_2333 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2340 = 1.0;
        _2341 = 1.0;
        _2342 = 1.0;
    }
    float _2406;
    float _2408;
    float _2410;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2394 = fma(_2190, cbSceneParam._m0[63u].w, fma(_2186, cbSceneParam._m0[63u].z, fma(_2182, cbSceneParam._m0[63u].y, _2178 * cbSceneParam._m0[63u].x)));
        float _2395 = fma(_2190, cbSceneParam._m0[60u].w, fma(_2186, cbSceneParam._m0[60u].z, fma(_2182, cbSceneParam._m0[60u].y, _2178 * cbSceneParam._m0[60u].x))) / _2394;
        float _2396 = fma(_2190, cbSceneParam._m0[61u].w, fma(_2186, cbSceneParam._m0[61u].z, fma(_2182, cbSceneParam._m0[61u].y, _2178 * cbSceneParam._m0[61u].x))) / _2394;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2395 >= cbSceneParam._m0[64u].x) && (_2396 >= cbSceneParam._m0[64u].y)) && (_2395 <= cbSceneParam._m0[64u].z)) && (_2396 <= cbSceneParam._m0[64u].w))
        {
            float _2534 = fma(_2190, cbSceneParam._m0[62u].w, fma(_2186, cbSceneParam._m0[62u].z, fma(_2182, cbSceneParam._m0[62u].y, _2178 * cbSceneParam._m0[62u].x))) / _2394;
            float _2538 = isnan(cbSceneParam._m0[41u].w) ? _2534 : (isnan(_2534) ? cbSceneParam._m0[41u].w : max(_2534, cbSceneParam._m0[41u].w));
            float _2581 = (cbSceneParam._m0[33u].x - sqrt(((_2192 * _2192) + (_2191 * _2191)) + (_2193 * _2193))) * cbSceneParam._m0[33u].y;
            float _4689 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
            float _2588 = (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2395, cbSceneParam._m0[33u].w + _2396), _2538), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2395, _2396 - cbSceneParam._m0[33u].z), _2538), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2395 - cbSceneParam._m0[33u].z, _2396 - cbSceneParam._m0[33u].w), _2538), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2395 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2396), _2538), 0.0)).x), vec4(0.25)));
            float _2592 = 1.0 - (_2588 * cbSceneParam._m0[34u].x);
            float _2593 = 1.0 - (_2588 * cbSceneParam._m0[34u].y);
            float _2594 = 1.0 - (_2588 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2594) ? _2342 : (isnan(_2342) ? _2594 : min(_2342, _2594));
            frontier_phi_34_33_ladder_1 = isnan(_2593) ? _2341 : (isnan(_2341) ? _2593 : min(_2341, _2593));
            frontier_phi_34_33_ladder_2 = isnan(_2592) ? _2340 : (isnan(_2340) ? _2592 : min(_2340, _2592));
        }
        else
        {
            frontier_phi_34_33_ladder = _2342;
            frontier_phi_34_33_ladder_1 = _2341;
            frontier_phi_34_33_ladder_2 = _2340;
        }
        _2406 = frontier_phi_34_33_ladder_2;
        _2408 = frontier_phi_34_33_ladder_1;
        _2410 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2406 = _2340;
        _2408 = _2341;
        _2410 = _2342;
    }
    uvec4 _2415 = floatBitsToUint(cbInstanceData._m0[_1081 + 5u]);
    uint _2417 = _2415.x * 14u;
    uint _2418 = _2417 + 13u;
    float _2425 = _1121 + (-1.0);
    float _2430 = (cbLight._m0[_2418].x * _2425) + 1.0;
    float _2431 = (cbLight._m0[_2418].y * _2425) + 1.0;
    float _2432 = (cbLight._m0[_2418].z * _2425) + 1.0;
    float _2433 = (cbLight._m0[_2418].w * _2425) + 1.0;
    uint _2434 = _2417 + 5u;
    float _2440 = isnan(1.0) ? _2431 : (isnan(_2431) ? 1.0 : min(_2431, 1.0));
    uint _2444 = _2417 + 4u;
    float _2453 = isnan(1.0) ? _2430 : (isnan(_2430) ? 1.0 : min(_2430, 1.0));
    uint _2457 = _2417 | 1u;
    float _2468 = dot(vec3(cbLight._m0[_2417].xyz), vec3(_954, _955, _956));
    float _2471 = dot(vec3(cbLight._m0[_2457].xyz), vec3(_954, _955, _956));
    float _4725 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _4736 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
    float _2476 = (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0))) * 0.3183098733425140380859375;
    float _2478 = (isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0))) * 0.3183098733425140380859375;
    float _2485 = ((cbLight._m0[_2434].x * _2440) * _2478) + (((cbLight._m0[_2444].x * _2406) * _2453) * _2476);
    float _2486 = ((_2440 * cbLight._m0[_2434].y) * _2478) + (((cbLight._m0[_2444].y * _2408) * _2453) * _2476);
    float _2487 = ((_2440 * cbLight._m0[_2434].z) * _2478) + (((cbLight._m0[_2444].z * _2410) * _2453) * _2476);
    uvec4 _2491 = floatBitsToUint(cbLight._m0[_2417 + 12u]);
    bool _2493 = _2491.x == 0u;
    float _2595;
    float _2597;
    float _2599;
    if (_2493)
    {
        _2595 = _2485;
        _2597 = _2486;
        _2599 = _2487;
    }
    else
    {
        uint _2603 = _2417 + 6u;
        float _2619 = (dot(vec3(cbLight._m0[_2417 + 2u].xyz), vec3(_954, _955, _956)) * 0.5) + 0.5;
        float _2620 = _2619 * _2619;
        float _4747 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2621 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
        float _2622 = isnan(1.0) ? _2432 : (isnan(_2432) ? 1.0 : min(_2432, 1.0));
        _2595 = (((cbLight._m0[_2603].x * 0.3183098733425140380859375) * _2621) * _2622) + _2485;
        _2597 = (((cbLight._m0[_2603].y * 0.3183098733425140380859375) * _2621) * _2622) + _2486;
        _2599 = (((cbLight._m0[_2603].z * 0.3183098733425140380859375) * _2621) * _2622) + _2487;
    }
    bool _2602 = _2491.y == 0u;
    float _2657;
    float _2659;
    float _2661;
    if (_2602)
    {
        _2657 = _2595;
        _2659 = _2597;
        _2661 = _2599;
    }
    else
    {
        uint _2830 = _2417 + 7u;
        float _2846 = (dot(vec3(cbLight._m0[_2417 + 3u].xyz), vec3(_954, _955, _956)) * 0.5) + 0.5;
        float _2847 = _2846 * _2846;
        float _4763 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
        float _2848 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
        float _2849 = isnan(1.0) ? _2433 : (isnan(_2433) ? 1.0 : min(_2433, 1.0));
        _2657 = (((cbLight._m0[_2830].x * 0.3183098733425140380859375) * _2848) * _2849) + _2595;
        _2659 = (((cbLight._m0[_2830].y * 0.3183098733425140380859375) * _2848) * _2849) + _2597;
        _2661 = (((cbLight._m0[_2830].z * 0.3183098733425140380859375) * _2848) * _2849) + _2599;
    }
    uint _2664 = _2417 + 8u;
    float _2677 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2417].w)) * _958) * 0.949999988079071044921875);
    float _2678 = _2677 * _2677;
    float _2679 = cbLight._m0[_2417].x + _1035;
    float _2680 = cbLight._m0[_2417].y + _1036;
    float _2681 = cbLight._m0[_2417].z + _1037;
    float _2685 = inversesqrt(dot(vec3(_2679, _2680, _2681), vec3(_2679, _2680, _2681)));
    float _2686 = _2685 * _2679;
    float _2687 = _2685 * _2680;
    float _2688 = _2685 * _2681;
    float _2689 = dot(vec3(_954, _955, _956), vec3(cbLight._m0[_2417].xyz));
    float _4779 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
    float _2692 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
    float _4790 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
    float _2693 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
    float _2694 = dot(vec3(_954, _955, _956), vec3(_2686, _2687, _2688));
    float _4801 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
    float _2697 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
    float _2698 = dot(vec3(cbLight._m0[_2417].xyz), vec3(_2686, _2687, _2688));
    float _4812 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
    float _2702 = _2678 * _2678;
    float _2706 = ((_2697 * _2697) * (_2702 + (-1.0))) + 1.0;
    float _2714 = exp2(log2(1.0 - (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0)))) * 5.0);
    float _2715 = 0.959999978542327880859375 - _1103;
    float _2717 = 0.959999978542327880859375 - _1104;
    float _2718 = 0.959999978542327880859375 - _1105;
    float _2725 = 1.0 - _2678;
    float _2736 = (0.5 / (((_2693 * ((_2692 * _2725) + _2678)) + 9.9999999392252902907785028219223e-09) + (((_2693 * _2725) + _2678) * _2692))) * _2692;
    float _4823 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
    float _2738 = (isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0))) * (_2702 / ((_2706 * _2706) * 3.141590118408203125));
    uint _2752 = _2417 + 9u;
    float _2763 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2457].w)) * _958) * 0.949999988079071044921875);
    float _2764 = _2763 * _2763;
    float _2765 = cbLight._m0[_2457].x + _1035;
    float _2766 = cbLight._m0[_2457].y + _1036;
    float _2767 = cbLight._m0[_2457].z + _1037;
    float _2771 = inversesqrt(dot(vec3(_2765, _2766, _2767), vec3(_2765, _2766, _2767)));
    float _2772 = _2771 * _2765;
    float _2773 = _2771 * _2766;
    float _2774 = _2771 * _2767;
    float _2775 = dot(vec3(_954, _955, _956), vec3(cbLight._m0[_2457].xyz));
    float _4834 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
    float _2778 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
    float _2779 = dot(vec3(_954, _955, _956), vec3(_2772, _2773, _2774));
    float _4845 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
    float _2782 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
    float _2783 = dot(vec3(cbLight._m0[_2457].xyz), vec3(_2772, _2773, _2774));
    float _4856 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
    float _2787 = _2764 * _2764;
    float _2791 = ((_2782 * _2782) * (_2787 + (-1.0))) + 1.0;
    float _2798 = exp2(log2(1.0 - (isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0)))) * 5.0);
    float _2805 = 1.0 - _2764;
    float _2815 = (0.5 / (((_2693 * ((_2778 * _2805) + _2764)) + 9.9999999392252902907785028219223e-09) + (((_2693 * _2805) + _2764) * _2778))) * _2778;
    float _4867 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
    float _2817 = (isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0))) * (_2787 / ((_2791 * _2791) * 3.141590118408203125));
    float _2827 = (((((_2798 * _2715) + _1106) * cbLight._m0[_2752].x) * _2817) * _2440) + ((((cbLight._m0[_2664].x * _2406) * ((_2714 * _2715) + _1106)) * _2738) * _2453);
    float _2828 = (((((_2798 * _2717) + _1108) * cbLight._m0[_2752].y) * _2817) * _2440) + ((((cbLight._m0[_2664].y * _2408) * ((_2714 * _2717) + _1108)) * _2738) * _2453);
    float _2829 = (((((_2798 * _2718) + _1109) * cbLight._m0[_2752].z) * _2817) * _2440) + ((((cbLight._m0[_2664].z * _2410) * ((_2714 * _2718) + _1109)) * _2738) * _2453);
    float _2885;
    float _2887;
    float _2889;
    if (_2493)
    {
        _2885 = _2827;
        _2887 = _2828;
        _2889 = _2829;
    }
    else
    {
        uint _2891 = _2417 + 2u;
        uint _2895 = _2417 + 10u;
        float _2909 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2891].w)) * _958) * 0.949999988079071044921875);
        float _2910 = _2909 * _2909;
        float _2911 = cbLight._m0[_2891].x + _1035;
        float _2912 = cbLight._m0[_2891].y + _1036;
        float _2913 = cbLight._m0[_2891].z + _1037;
        float _2917 = inversesqrt(dot(vec3(_2911, _2912, _2913), vec3(_2911, _2912, _2913)));
        float _2918 = _2917 * _2911;
        float _2919 = _2917 * _2912;
        float _2920 = _2917 * _2913;
        float _2921 = dot(vec3(_954, _955, _956), vec3(cbLight._m0[_2891].xyz));
        float _4878 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
        float _2924 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
        float _2925 = dot(vec3(_954, _955, _956), vec3(_2918, _2919, _2920));
        float _4889 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
        float _2928 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
        float _2929 = dot(vec3(cbLight._m0[_2891].xyz), vec3(_2918, _2919, _2920));
        float _4900 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
        float _2933 = _2910 * _2910;
        float _2937 = ((_2928 * _2928) * (_2933 + (-1.0))) + 1.0;
        float _2944 = exp2(log2(1.0 - (isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0)))) * 5.0);
        float _2951 = 1.0 - _2910;
        float _2961 = (0.5 / (((_2693 * ((_2924 * _2951) + _2910)) + 9.9999999392252902907785028219223e-09) + (((_2693 * _2951) + _2910) * _2924))) * _2924;
        float _4911 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
        float _2963 = (isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0))) * (_2933 / ((_2937 * _2937) * 3.141590118408203125));
        float _2964 = isnan(1.0) ? _2432 : (isnan(_2432) ? 1.0 : min(_2432, 1.0));
        _2885 = (((((_2944 * _2715) + _1106) * cbLight._m0[_2895].x) * _2963) * _2964) + _2827;
        _2887 = (((((_2944 * _2717) + _1108) * cbLight._m0[_2895].y) * _2963) * _2964) + _2828;
        _2889 = (((((_2944 * _2718) + _1109) * cbLight._m0[_2895].z) * _2963) * _2964) + _2829;
    }
    float _2995;
    float _2997;
    float _2999;
    if (_2602)
    {
        _2995 = _2885;
        _2997 = _2887;
        _2999 = _2889;
    }
    else
    {
        uint _3006 = _2417 + 3u;
        uint _3010 = _2417 + 11u;
        float _3024 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3006].w)) * _958) * 0.949999988079071044921875);
        float _3025 = _3024 * _3024;
        float _3026 = cbLight._m0[_3006].x + _1035;
        float _3027 = cbLight._m0[_3006].y + _1036;
        float _3028 = cbLight._m0[_3006].z + _1037;
        float _3032 = inversesqrt(dot(vec3(_3026, _3027, _3028), vec3(_3026, _3027, _3028)));
        float _3033 = _3032 * _3026;
        float _3034 = _3032 * _3027;
        float _3035 = _3032 * _3028;
        float _3036 = dot(vec3(_954, _955, _956), vec3(cbLight._m0[_3006].xyz));
        float _4927 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
        float _3039 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
        float _3040 = dot(vec3(_954, _955, _956), vec3(_3033, _3034, _3035));
        float _4938 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
        float _3043 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
        float _3044 = dot(vec3(cbLight._m0[_3006].xyz), vec3(_3033, _3034, _3035));
        float _4949 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
        float _3048 = _3025 * _3025;
        float _3052 = ((_3043 * _3043) * (_3048 + (-1.0))) + 1.0;
        float _3059 = exp2(log2(1.0 - (isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0)))) * 5.0);
        float _3066 = 1.0 - _3025;
        float _3076 = (0.5 / (((_2693 * ((_3039 * _3066) + _3025)) + 9.9999999392252902907785028219223e-09) + (((_2693 * _3066) + _3025) * _3039))) * _3039;
        float _4960 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
        float _3078 = (isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0))) * (_3048 / ((_3052 * _3052) * 3.141590118408203125));
        float _3079 = isnan(1.0) ? _2433 : (isnan(_2433) ? 1.0 : min(_2433, 1.0));
        _2995 = (((((_3059 * _2715) + _1106) * cbLight._m0[_3010].x) * _3078) * _3079) + _2885;
        _2997 = (((((_3059 * _2717) + _1108) * cbLight._m0[_3010].y) * _3078) * _3079) + _2887;
        _2999 = (((((_3059 * _2718) + _1109) * cbLight._m0[_3010].z) * _3078) * _3079) + _2889;
    }
    float _3145;
    float _3147;
    float _3149;
    float _3151;
    float _3153;
    float _3155;
    if (_2415.y == 0u)
    {
        uvec4 _3100 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3101 = _3100.x;
        uint _3112 = uint((float(_3100.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1044) / _3101))) + floor(float(uint(cbSceneParam._m0[85u].x * _1043) / _3101)));
        float _3122 = (log2(_2193 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3123 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
        uint _3126 = uint(isnan(14.0) ? _3123 : (isnan(_3123) ? 14.0 : min(_3123, 14.0)));
        uvec4 _3131 = texelFetch(g_lightClusterGridBuffer, int(((_3126 << 2u) + (_3112 << 6u)) >> 2u));
        uint _3132 = _3131.x;
        uint _3133 = _3100.z;
        float _3214;
        float _3216;
        float _3218;
        float _3220;
        float _3222;
        float _3224;
        if (((((1u << ((_3133 >> 4u) & 15u)) + 4294967295u) & _3132) == 0u) || ((_3133 & 240u) == 0u))
        {
            _3214 = 0.0;
            _3216 = 0.0;
            _3218 = 0.0;
            _3220 = 0.0;
            _3222 = 0.0;
            _3224 = 0.0;
        }
        else
        {
            float _3215;
            float _3217;
            float _3219;
            float _3221;
            float _3223;
            float _3225;
            float _3359 = 0.0;
            float _3360 = 0.0;
            float _3361 = 0.0;
            float _3362 = 0.0;
            float _3363 = 0.0;
            float _3364 = 0.0;
            uint _3365 = 0u;
            uint _3374;
            bool _3375;
            for (;;)
            {
                _3374 = texelFetch(g_lightClassification, int((((_3126 << 5u) + (_3112 << 9u)) + (_3365 << 2u)) >> 2u)).x;
                _3375 = _3374 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3375)
                {
                    frontier_phi_66_pred = _3364;
                    frontier_phi_66_pred_1 = _3363;
                    frontier_phi_66_pred_2 = _3362;
                    frontier_phi_66_pred_3 = _3361;
                    frontier_phi_66_pred_4 = _3360;
                    frontier_phi_66_pred_5 = _3359;
                }
                else
                {
                    float _3483;
                    float _3484;
                    float _3485;
                    float _3486;
                    float _3487;
                    float _3488;
                    uint _3489;
                    _3483 = _3359;
                    _3484 = _3360;
                    _3485 = _3361;
                    _3486 = _3362;
                    _3487 = _3363;
                    _3488 = _3364;
                    _3489 = _3374;
                    float _3415;
                    float _3416;
                    float _3417;
                    float _3418;
                    float _3419;
                    float _3420;
                    for (;;)
                    {
                        uint _3493 = uint(findLSB(_3489)) + (_3365 << 5u);
                        uint _3490 = (_3489 + 4294967295u) & _3489;
                        uint _3495 = _3493 * 48u;
                        vec4 _3509 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3495)).x, texelFetch(g_PointLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3495 + 3u)).x));
                        uint _3515 = (_3493 * 48u) + 4u;
                        vec4 _3528 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3515)).x, texelFetch(g_PointLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3515 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3515 + 3u)).x));
                        uint _3534 = (_3493 * 48u) + 8u;
                        vec3 _3545 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3534)).x, texelFetch(g_PointLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3534 + 2u)).x));
                        float _3549 = _3509.x - _2191;
                        float _3550 = _3509.y - _2192;
                        float _3551 = _3509.z - _2193;
                        float _3552 = dot(vec3(_3549, _3550, _3551), vec3(_3549, _3550, _3551));
                        float _3555 = inversesqrt(_3552);
                        float _3556 = _3555 * _3549;
                        float _3557 = _3555 * _3550;
                        float _3558 = _3555 * _3551;
                        float _3559 = dot(vec3(_1062, _1065, _1068), vec3(_3556, _3557, _3558));
                        float _3564 = 1.0 - (_3552 * _3509.w);
                        float _4986 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                        float _3565 = isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0));
                        float _3566 = sqrt(_3552) * _3528.w;
                        float _3569 = 1.39999997615814208984375 / (_3566 + 1.39999997615814208984375);
                        float _3570 = _3569 * _3569;
                        float _3573 = ((1.0 - _3570) * _3559) + _3570;
                        float _3576 = _3566 * _3566;
                        float _3580 = ((isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0))) * _3565) / ((_3576 * 0.699999988079071044921875) + 1.0);
                        float _3584 = (-0.0) - _2191;
                        float _3585 = (-0.0) - _2192;
                        float _3586 = (-0.0) - _2193;
                        float _3590 = inversesqrt(dot(vec3(_3584, _3585, _3586), vec3(_3584, _3585, _3586)));
                        float _3591 = _3590 * _3584;
                        float _3592 = _3590 * _3585;
                        float _3593 = _3590 * _3586;
                        float _3600 = exp2(log2(1.0 / ((_3576 * 3.5) + 5.0)) * 0.25);
                        float _3601 = 1.0 - _1137;
                        float _3608 = sqrt(1.0 - ((1.0 - (_3601 * _3601)) * (1.0 - (_3600 * _3600))));
                        float _3609 = _3608 * _3608;
                        float _3610 = _3609 * _3609;
                        float _3611 = _3591 + _3556;
                        float _3612 = _3592 + _3557;
                        float _3613 = _3593 + _3558;
                        float _3617 = inversesqrt(dot(vec3(_3611, _3612, _3613), vec3(_3611, _3612, _3613)));
                        float _3621 = dot(vec3(_1062, _1065, _1068), vec3(_3591, _3592, _3593));
                        float _5002 = isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0));
                        float _3624 = isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0));
                        float _3625 = dot(vec3(_1062, _1065, _1068), vec3(_3617 * _3611, _3617 * _3612, _3617 * _3613));
                        float _5013 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                        float _3628 = isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0));
                        float _3632 = ((_3628 * _3628) * (_3610 + (-1.0))) + 1.0;
                        float _3633 = _3569 * _3609;
                        float _3634 = _3633 * _3633;
                        float _3637 = ((1.0 - _3634) * _3559) + _3634;
                        float _5024 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                        float _3638 = isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0));
                        float _3639 = 1.0 - _3609;
                        float _3649 = (0.5 / (((_3638 * ((_3624 * _3639) + _3609)) + 9.9999999392252902907785028219223e-09) + (((_3638 * _3639) + _3609) * _3624))) * _3638;
                        float _5035 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0));
                        float _3660 = (((_3610 * 3.1415927410125732421875) * (isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0)))) / ((_3632 * _3632) * ((_3576 * 2.1991131305694580078125) + 3.141590118408203125))) * _3565;
                        _3418 = (_3580 * _3528.x) + _3486;
                        _3419 = (_3580 * _3528.y) + _3487;
                        _3420 = (_3580 * _3528.z) + _3488;
                        _3415 = (_3660 * _3545.x) + _3483;
                        _3416 = (_3660 * _3545.y) + _3484;
                        _3417 = (_3660 * _3545.z) + _3485;
                        if (_3490 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3483 = _3415;
                            _3484 = _3416;
                            _3485 = _3417;
                            _3486 = _3418;
                            _3487 = _3419;
                            _3488 = _3420;
                            _3489 = _3490;
                        }
                    }
                    frontier_phi_66_pred = _3420;
                    frontier_phi_66_pred_1 = _3419;
                    frontier_phi_66_pred_2 = _3418;
                    frontier_phi_66_pred_3 = _3417;
                    frontier_phi_66_pred_4 = _3416;
                    frontier_phi_66_pred_5 = _3415;
                }
                _3225 = frontier_phi_66_pred;
                _3223 = frontier_phi_66_pred_1;
                _3221 = frontier_phi_66_pred_2;
                _3219 = frontier_phi_66_pred_3;
                _3217 = frontier_phi_66_pred_4;
                _3215 = frontier_phi_66_pred_5;
                uint _3366 = _3365 + 1u;
                if (_3366 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3359 = _3215;
                    _3360 = _3217;
                    _3361 = _3219;
                    _3362 = _3221;
                    _3363 = _3223;
                    _3364 = _3225;
                    _3365 = _3366;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3214 = _3215;
            _3216 = _3217;
            _3218 = _3219;
            _3220 = _3221;
            _3222 = _3223;
            _3224 = _3225;
        }
        uvec4 _3228 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3229 = _3228.z;
        uint _3231 = (_3229 >> 8u) & 15u;
        float _3327;
        float _3329;
        float _3331;
        float _3333;
        float _3335;
        float _3337;
        if (((4294967295u << _3231) & _3132) == 0u)
        {
            _3327 = _3214;
            _3329 = _3216;
            _3331 = _3218;
            _3333 = _3220;
            _3335 = _3222;
            _3337 = _3224;
        }
        else
        {
            float _3352 = inversesqrt(dot(vec3(_2191, _2192, _2193), vec3(_2191, _2192, _2193)));
            float _3353 = _3352 * _2191;
            float _3354 = _3352 * _2192;
            float _3355 = _3352 * _2193;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3231 < ((_3229 >> 12u) & 15u))
            {
                float _3328;
                float _3330;
                float _3332;
                float _3334;
                float _3336;
                float _3338;
                float _3466 = _3214;
                float _3467 = _3216;
                float _3468 = _3218;
                float _3469 = _3220;
                float _3470 = _3222;
                float _3471 = _3224;
                uint _3472 = _3231;
                uint _3481;
                bool _3482;
                for (;;)
                {
                    _3481 = texelFetch(g_lightClassification, int((((_3126 << 5u) + (_3112 << 9u)) + (_3472 << 2u)) >> 2u)).x;
                    _3482 = _3481 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3482)
                    {
                        frontier_phi_72_pred = _3471;
                        frontier_phi_72_pred_1 = _3470;
                        frontier_phi_72_pred_2 = _3469;
                        frontier_phi_72_pred_3 = _3468;
                        frontier_phi_72_pred_4 = _3467;
                        frontier_phi_72_pred_5 = _3466;
                    }
                    else
                    {
                        float _3665;
                        float _3666;
                        float _3667;
                        float _3668;
                        float _3669;
                        float _3670;
                        float _3958;
                        float _3959;
                        float _3960;
                        float _3961;
                        float _3962;
                        float _3963;
                        float _3678 = _3466;
                        float _3679 = _3467;
                        float _3680 = _3468;
                        float _3681 = _3469;
                        float _3682 = _3470;
                        float _3683 = _3471;
                        uint _3684 = _3481;
                        uint _3685;
                        vec4 _3710;
                        float _3711;
                        vec4 _3726;
                        vec3 _3738;
                        vec4 _3753;
                        vec4 _3768;
                        float _3814;
                        bool _3815;
                        for (;;)
                        {
                            uint _3695 = ((_3472 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3684));
                            _3685 = (_3684 + 4294967295u) & _3684;
                            uint _3697 = _3695 * 40u;
                            _3710 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3697)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 3u)).x));
                            _3711 = _3710.w;
                            uint _3713 = (_3695 * 40u) + 4u;
                            _3726 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3713)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 3u)).x));
                            uint _3728 = (_3695 * 40u) + 8u;
                            _3738 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3728)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 2u)).x));
                            uint _3740 = (_3695 * 40u) + 16u;
                            _3753 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3740)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3740 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3740 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3740 + 3u)).x));
                            uint _3755 = (_3695 * 40u) + 20u;
                            _3768 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3755)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3755 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3755 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3755 + 3u)).x));
                            uint _3770 = (_3695 * 40u) + 24u;
                            vec4 _3783 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3770)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3770 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3770 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3770 + 3u)).x));
                            uint _3789 = (_3695 * 40u) + 28u;
                            vec4 _3802 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3789)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 3u)).x));
                            _3814 = fma(_2193, _3802.z, fma(_2192, _3802.y, _3802.x * _2191)) + _3802.w;
                            _3815 = !((fma(_2193, _3783.z, fma(_2192, _3783.y, _3783.x * _2191)) + _3783.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3815)
                            {
                                float _3842 = _3710.x - _2191;
                                float _3843 = _3710.y - _2192;
                                float _3844 = _3710.z - _2193;
                                float _3845 = dot(vec3(_3842, _3843, _3844), vec3(_3842, _3843, _3844));
                                float _3848 = inversesqrt(_3845);
                                float _3849 = _3848 * _3842;
                                float _3850 = _3848 * _3843;
                                float _3851 = _3848 * _3844;
                                float _3855 = 1.0 - (_3845 / (_3711 * _3711));
                                float _5046 = isnan(0.0) ? _3855 : (isnan(_3855) ? 0.0 : max(_3855, 0.0));
                                float _3856 = isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0));
                                float _3860 = sqrt(_3845) * _3726.w;
                                float _3862 = 1.39999997615814208984375 / (_3860 + 1.39999997615814208984375);
                                float _3863 = _3862 * _3862;
                                float _3866 = ((1.0 - _3863) * dot(vec3(_3849, _3850, _3851), vec3(_1062, _1065, _1068))) + _3863;
                                float _3869 = _3860 * _3860;
                                float _3873 = (fma(_2193, _3753.z, fma(_2192, _3753.y, _3753.x * _2191)) + _3753.w) / _3814;
                                float _3874 = (fma(_2193, _3768.z, fma(_2192, _3768.y, _3768.x * _2191)) + _3768.w) / _3814;
                                float _3878 = 1.0 - dot(vec2(_3873, _3874), vec2(_3873, _3874));
                                float _5062 = isnan(0.0) ? _3878 : (isnan(_3878) ? 0.0 : max(_3878, 0.0));
                                float _3879 = isnan(1.0) ? _5062 : (isnan(_5062) ? 1.0 : min(_5062, 1.0));
                                float _3880 = _3879 * (((isnan(0.0) ? _3866 : (isnan(_3866) ? 0.0 : max(_3866, 0.0))) * _3856) / ((_3869 * 0.699999988079071044921875) + 1.0));
                                float _3892 = exp2(log2(1.0 / ((_3869 * 3.5) + 5.0)) * 0.25);
                                float _3893 = 1.0 - _1137;
                                float _3900 = sqrt(1.0 - ((1.0 - (_3893 * _3893)) * (1.0 - (_3892 * _3892))));
                                float _3901 = _3900 * _3900;
                                float _3902 = _3901 * _3901;
                                float _3903 = _3849 - _3353;
                                float _3904 = _3850 - _3354;
                                float _3905 = _3851 - _3355;
                                float _3909 = inversesqrt(dot(vec3(_3903, _3904, _3905), vec3(_3903, _3904, _3905)));
                                float _3913 = dot(vec3(_1062, _1065, _1068), vec3((-0.0) - _3353, (-0.0) - _3354, (-0.0) - _3355));
                                float _5073 = isnan(0.0) ? _3913 : (isnan(_3913) ? 0.0 : max(_3913, 0.0));
                                float _3916 = isnan(1.0) ? _5073 : (isnan(_5073) ? 1.0 : min(_5073, 1.0));
                                float _3917 = dot(vec3(_1062, _1065, _1068), vec3(_3909 * _3903, _3909 * _3904, _3909 * _3905));
                                float _5084 = isnan(0.0) ? _3917 : (isnan(_3917) ? 0.0 : max(_3917, 0.0));
                                float _3920 = isnan(1.0) ? _5084 : (isnan(_5084) ? 1.0 : min(_5084, 1.0));
                                float _3924 = ((_3920 * _3920) * (_3902 + (-1.0))) + 1.0;
                                float _3925 = _3862 * _3901;
                                float _3926 = _3925 * _3925;
                                float _3932 = ((1.0 - _3926) * dot(vec3(_1062, _1065, _1068), vec3(_3849, _3850, _3851))) + _3926;
                                float _5095 = isnan(0.0) ? _3932 : (isnan(_3932) ? 0.0 : max(_3932, 0.0));
                                float _3933 = isnan(1.0) ? _5095 : (isnan(_5095) ? 1.0 : min(_5095, 1.0));
                                float _3934 = 1.0 - _3901;
                                float _3944 = (0.5 / (((_3933 * ((_3916 * _3934) + _3901)) + 9.9999999392252902907785028219223e-09) + (((_3933 * _3934) + _3901) * _3916))) * _3933;
                                float _5106 = isnan(0.0) ? _3944 : (isnan(_3944) ? 0.0 : max(_3944, 0.0));
                                float _3954 = (_3879 * _3856) * (((_3902 * 3.1415927410125732421875) * (isnan(1.0) ? _5106 : (isnan(_5106) ? 1.0 : min(_5106, 1.0)))) / ((_3924 * _3924) * ((_3869 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3880 * _3726.y;
                                frontier_phi_78_pred_1 = _3880 * _3726.x;
                                frontier_phi_78_pred_2 = _3954 * _3738.z;
                                frontier_phi_78_pred_3 = _3954 * _3738.y;
                                frontier_phi_78_pred_4 = _3954 * _3738.x;
                                frontier_phi_78_pred_5 = _3880 * _3726.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3962 = frontier_phi_78_pred;
                            _3961 = frontier_phi_78_pred_1;
                            _3960 = frontier_phi_78_pred_2;
                            _3959 = frontier_phi_78_pred_3;
                            _3958 = frontier_phi_78_pred_4;
                            _3963 = frontier_phi_78_pred_5;
                            _3668 = _3961 + _3681;
                            _3669 = _3962 + _3682;
                            _3670 = _3963 + _3683;
                            _3665 = _3958 + _3678;
                            _3666 = _3959 + _3679;
                            _3667 = _3960 + _3680;
                            if (_3685 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3678 = _3665;
                                _3679 = _3666;
                                _3680 = _3667;
                                _3681 = _3668;
                                _3682 = _3669;
                                _3683 = _3670;
                                _3684 = _3685;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3670;
                        frontier_phi_72_pred_1 = _3669;
                        frontier_phi_72_pred_2 = _3668;
                        frontier_phi_72_pred_3 = _3667;
                        frontier_phi_72_pred_4 = _3666;
                        frontier_phi_72_pred_5 = _3665;
                    }
                    _3338 = frontier_phi_72_pred;
                    _3336 = frontier_phi_72_pred_1;
                    _3334 = frontier_phi_72_pred_2;
                    _3332 = frontier_phi_72_pred_3;
                    _3330 = frontier_phi_72_pred_4;
                    _3328 = frontier_phi_72_pred_5;
                    uint _3473 = _3472 + 1u;
                    if (_3473 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3466 = _3328;
                        _3467 = _3330;
                        _3468 = _3332;
                        _3469 = _3334;
                        _3470 = _3336;
                        _3471 = _3338;
                        _3472 = _3473;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3338;
                frontier_phi_60_61_ladder_1 = _3336;
                frontier_phi_60_61_ladder_2 = _3332;
                frontier_phi_60_61_ladder_3 = _3330;
                frontier_phi_60_61_ladder_4 = _3328;
                frontier_phi_60_61_ladder_5 = _3334;
            }
            else
            {
                frontier_phi_60_61_ladder = _3224;
                frontier_phi_60_61_ladder_1 = _3222;
                frontier_phi_60_61_ladder_2 = _3218;
                frontier_phi_60_61_ladder_3 = _3216;
                frontier_phi_60_61_ladder_4 = _3214;
                frontier_phi_60_61_ladder_5 = _3220;
            }
            _3327 = frontier_phi_60_61_ladder_4;
            _3329 = frontier_phi_60_61_ladder_3;
            _3331 = frontier_phi_60_61_ladder_2;
            _3333 = frontier_phi_60_61_ladder_5;
            _3335 = frontier_phi_60_61_ladder_1;
            _3337 = frontier_phi_60_61_ladder;
        }
        float _3342 = isnan(1.0) ? _1121 : (isnan(_1121) ? 1.0 : min(_1121, 1.0));
        _3145 = (_3342 * _3333) + _2657;
        _3147 = (_3342 * _3335) + _2659;
        _3149 = (_3342 * _3337) + _2661;
        _3151 = ((_3327 * _1106) * _3342) + _2995;
        _3153 = ((_3329 * _1108) * _3342) + _2997;
        _3155 = ((_3331 * _1109) * _3342) + _2999;
    }
    else
    {
        _3145 = _2657;
        _3147 = _2659;
        _3149 = _2661;
        _3151 = _2995;
        _3153 = _2997;
        _3155 = _2999;
    }
    float _5122 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _5133 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
    float _5144 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _5155 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _3180 = cbInstanceData._m0[_1081 + 6u].w * (isnan(1.0) ? _5155 : (isnan(_5155) ? 1.0 : min(_5155, 1.0)));
    float _3185 = _1043 / cbSceneParam._m0[86u].x;
    float _3186 = _1044 / cbSceneParam._m0[86u].y;
    vec4 _3200 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3185, _3186, (log2((isnan(cbSceneParam._m0[77u].w) ? _978 : (isnan(_978) ? cbSceneParam._m0[77u].w : min(_978, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3202 = _3200.x;
    float _3203 = _3200.y;
    float _3204 = _3200.z;
    float _3205 = _3200.w;
    float _3277;
    float _3279;
    float _3281;
    float _3283;
    if (_978 > cbSceneParam._m0[78u].w)
    {
        float _3239 = isnan(_978) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _978 : min(cbSceneParam._m0[80u].w, _978));
        float _3240 = _3239 / _978;
        float _3251 = _3240 * _1028;
        float _3252 = _1029 * _3240;
        float _3253 = (-0.0) - _3252;
        float _3255 = _3240 * _1030;
        float _3257 = (cbSceneParam._m0[77u].w * _3253) / _3239;
        float _3258 = _3257 + cbSceneParam._m0[79u].w;
        float _3259 = cbSceneParam._m0[79u].w - _3252;
        float _3265 = sqrt(((_3251 * _3251) + (_3252 * _3252)) + (_3255 * _3255));
        float _3268 = (1.0 - (cbSceneParam._m0[77u].w / _3239)) * _3265;
        float _3273 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3275 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3428;
        if (abs((_3253 - _3257) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3428 = ((((_3258 > 0.0) ? exp2(_3273 * _3258) : (2.0 - exp2(_3275 * _3258))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3268;
        }
        else
        {
            float _3388 = 1.0 / cbSceneParam._m0[80u].x;
            float _3389 = isnan(_3259) ? _3258 : (isnan(_3258) ? _3259 : max(_3258, _3259));
            float _3390 = isnan(_3259) ? _3258 : (isnan(_3258) ? _3259 : min(_3258, _3259));
            float _3399 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : min(_3389, 0.0));
            float _3400 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : min(_3390, 0.0));
            _3428 = ((abs(_3265 / _3253) * cbSceneParam._m0[80u].y) * ((((_3399 - _3400) * 2.0) - ((exp2(_3273 * (isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0)))) - exp2(_3273 * (isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0))))) * _3388)) - ((exp2(_3275 * _3399) - exp2(_3275 * _3400)) * _3388))) + (_3268 * cbSceneParam._m0[80u].z);
        }
        vec4 _3430 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3185, _3186, 1.0), 0.0);
        float _3439 = exp2((_3428 * (-1.44269502162933349609375)) * (1.0 - _3430.w));
        float _3440 = log2(_3439);
        float _3456 = log2(_3205);
        _3277 = (exp2(_3456 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3440 * cbSceneParam._m0[78u].x)) * _3430.x) / cbSceneParam._m0[78u].x)) + _3202;
        _3279 = (exp2(_3456 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3440 * cbSceneParam._m0[78u].y)) * _3430.y) / cbSceneParam._m0[78u].y)) + _3203;
        _3281 = (exp2(_3456 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3440 * cbSceneParam._m0[78u].z)) * _3430.z) / cbSceneParam._m0[78u].z)) + _3204;
        _3283 = _3439 * _3205;
    }
    else
    {
        _3277 = _3202;
        _3279 = _3203;
        _3281 = _3204;
        _3283 = _3205;
    }
    float _3295 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3296 = _3295 == 3.0;
    float _3297 = log2(_3283);
    float _3304 = exp2(_3297 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5122 : (isnan(_5122) ? 1.0 : min(_5122, 1.0))) * (_3145 + ((isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))) * _1121))) + ((_3151 + ((isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0))) * _1925)) * cbPerFrame._m0[3u].x));
    float _3305 = exp2(_3297 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5133 : (isnan(_5133) ? 1.0 : min(_5133, 1.0))) * (_3147 + ((isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))) * _1121))) + ((_3153 + ((isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0))) * _1925)) * cbPerFrame._m0[3u].x));
    float _3306 = exp2(_3297 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5144 : (isnan(_5144) ? 1.0 : min(_5144, 1.0))) * (_3149 + ((isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))) * _1121))) + ((_3155 + ((isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0))) * _1925)) * cbPerFrame._m0[3u].x));
    float _3315 = (_3295 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3315 * (_3296 ? _3304 : (_3304 + (cbSceneParam._m0[72u].w * _3277)));
    SV_Target.y = _3315 * (_3296 ? _3305 : (_3305 + (cbSceneParam._m0[72u].w * _3279)));
    SV_Target.z = _3315 * (_3296 ? _3306 : (_3306 + (cbSceneParam._m0[72u].w * _3281)));
    SV_Target.w = _3180;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3180;
}


