#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24;
layout(set = 0, binding = 12) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 13) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 18) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in float TEXCOORD_8;
layout(location = 7, component = 1) in float TEXCOORD_9;
layout(location = 7, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1460;
float _3839;
float _3840;
float _3841;
float _3842;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _273 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _288 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _292 = _288.z;
    float _305 = exp2(log2((1.0 - _292) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _306 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _307 = isnan(1.0) ? _306 : (isnan(_306) ? 1.0 : min(_306, 1.0));
    vec4 _324 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _336 = exp2(log2(_324.w * cbMtdParam._m0[29u].y) * cbMtdParam._m0[23u].x);
    float _337 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _338 = isnan(1.0) ? _337 : (isnan(_337) ? 1.0 : min(_337, 1.0));
    float _347 = exp2(log2(cbMtdParam._m0[23u].y * _292) * cbMtdParam._m0[22u].y);
    float _348 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _349 = isnan(1.0) ? _348 : (isnan(_348) ? 1.0 : min(_348, 1.0));
    float _370 = roundEven(5.0 - ((texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _371 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _372 = isnan(4.0) ? _371 : (isnan(_371) ? 4.0 : min(_371, 4.0));
    float _384 = floor(_372);
    vec4 _387 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w, _384));
    vec4 _411 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _422 = cbMtdParam._m0[9u].x * _411.x;
    float _423 = cbMtdParam._m0[9u].y * _411.y;
    float _424 = cbMtdParam._m0[9u].z * _411.z;
    float _431 = (((cbMtdParam._m0[10u].x * _387.x) - _422) * _349) + _422;
    float _432 = (((cbMtdParam._m0[10u].y * _387.y) - _423) * _349) + _423;
    float _433 = (((cbMtdParam._m0[10u].z * _387.z) - _424) * _349) + _424;
    float _439 = exp2(log2(_288.w) * cbMtdParam._m0[23u].w);
    vec4 _452 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _472 = (((cbMtdParam._m0[16u].x * _452.x) - _431) * _439) + _431;
    float _473 = (((cbMtdParam._m0[16u].y * _452.y) - _432) * _439) + _432;
    float _474 = (((cbMtdParam._m0[16u].z * _452.z) - _433) * _439) + _433;
    vec4 _487 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _507 = (((cbMtdParam._m0[19u].x * _487.x) - _472) * _338) + _472;
    float _508 = (((cbMtdParam._m0[19u].y * _487.y) - _473) * _338) + _473;
    float _509 = (((cbMtdParam._m0[19u].z * _487.z) - _474) * _338) + _474;
    vec4 _522 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _547 = (_324.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _522.x) - _507) * _307) + _507);
    float _549 = (_324.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _522.y) - _508) * _307) + _508);
    float _551 = (_324.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _522.z) - _509) * _307) + _509);
    float _555 = cbMtdParam._m0[28u].x * TEXCOORD_8;
    float _564 = (_555 - (((_273.x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _555))) * (cbMtdParam._m0[27u].w + 1.0);
    float _3891 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _565 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _572 = ((cbMtdParam._m0[21u].x - _547) * _565) + _547;
    float _573 = ((cbMtdParam._m0[21u].y - _549) * _565) + _549;
    float _574 = ((cbMtdParam._m0[21u].z - _551) * _565) + _551;
    vec4 _588 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24, SS_ClampLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.z) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.w) + cbTextureTilingScale._m0[11u].w));
    float _596 = (_588.x + (-1.0)) + (cbMtdParam._m0[28u].y * 2.0);
    float _3902 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _602 = exp2(log2(cbMtdParam._m0[28u].w * (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) * cbMtdParam._m0[28u].z);
    float _3913 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _603 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _201[5];
    float _202[5];
    _201[0u] = cbMtdParam._m0[29u].z;
    _202[0u] = cbMtdParam._m0[29u].w;
    _201[1u] = cbMtdParam._m0[31u].z;
    _202[1u] = cbMtdParam._m0[31u].w;
    _201[2u] = cbMtdParam._m0[31u].x;
    _202[2u] = cbMtdParam._m0[31u].y;
    _201[3u] = cbMtdParam._m0[30u].z;
    _202[3u] = cbMtdParam._m0[30u].w;
    _201[4u] = cbMtdParam._m0[30u].x;
    _202[4u] = cbMtdParam._m0[30u].y;
    float _644 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    uint _646 = uint(int(isnan(4.0) ? _644 : (isnan(_644) ? 4.0 : min(_644, 4.0))));
    float _653 = ((_202[_646] - cbMtdParam._m0[22u].z) * _349) + cbMtdParam._m0[22u].z;
    float _656 = ((cbMtdParam._m0[22u].w - _653) * _439) + _653;
    float _659 = ((cbMtdParam._m0[25u].x - _656) * _338) + _656;
    float _662 = ((cbMtdParam._m0[26u].x - _659) * _307) + _659;
    float _664 = _662 - (_662 * _555);
    vec4 _681 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w, _384));
    vec4 _699 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _701 = _699.x;
    float _702 = _699.y;
    float _707 = cbMtdParam._m0[22u].x + _699.z;
    float _710 = (((_681.z + _201[_646]) - _707) * _349) + _707;
    vec4 _723 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _734 = (((_723.z - _710) + cbMtdParam._m0[29u].x) * _439) + _710;
    float _739 = ((((_292 * 2.0) * _734) - _734) * cbMtdParam._m0[24u].w) + _734;
    vec4 _751 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _762 = (((cbMtdParam._m0[23u].z + _751.z) - _739) * _338) + _739;
    vec4 _775 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _786 = (((_775.z - _762) + cbMtdParam._m0[26u].y) * _307) + _762;
    vec4 _801 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _815 = ((cbMtdParam._m0[27u].y * _555) * ((_801.z * cbMtdParam._m0[27u].x) - _786)) + _786;
    float _827 = ((_681.x - _701) * _349) + _701;
    float _828 = ((_681.y - _702) * _349) + _702;
    float _833 = ((_723.x - _827) * _439) + _827;
    float _834 = ((_723.y - _828) * _439) + _828;
    float _839 = ((_751.x - _833) * _338) + _833;
    float _840 = ((_751.y - _834) * _338) + _834;
    float _849 = ((((_775.x - _839) * _307) + _839) * 2.0) + (-1.0);
    float _850 = ((((_775.y - _840) * _307) + _840) * 2.0) + (-1.0);
    float _851 = dot(vec2(_849, _850), vec2(_849, _850));
    float _3934 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _856 = sqrt(1.0 - (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))));
    float _866 = ((cbMtdParam._m0[25u].y * ((_288.x * 2.0) + (-1.0))) + _849) + ((((_801.x * 2.0) + (-1.0)) * _555) * cbMtdParam._m0[26u].w);
    float _867 = ((cbMtdParam._m0[25u].y * ((_288.y * 2.0) + (-1.0))) + _850) + (((cbMtdParam._m0[28u].x * TEXCOORD_9) * ((_801.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _870 = fma(_856, _237 * NORMAL.x, fma(_867, _244 * TANGENT.x, (_230 * _222) * _866));
    float _873 = fma(_856, _237 * NORMAL.y, fma(_867, _244 * TANGENT.y, (_230 * _223) * _866));
    float _876 = fma(_856, _237 * NORMAL.z, fma(_867, _244 * TANGENT.z, (_230 * _224) * _866));
    float _880 = inversesqrt(dot(vec3(_870, _873, _876), vec3(_870, _873, _876)));
    float _881 = _880 * _870;
    float _882 = _880 * _873;
    float _883 = _880 * _876;
    float _3945 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _884 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _3956 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _885 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _3967 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _3978 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _3989 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _4000 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _889 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _905 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _945 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _955 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _945);
    float _956 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _945);
    float _957 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _945);
    float _961 = inversesqrt(dot(vec3(_955, _956, _957), vec3(_955, _956, _957)));
    float _962 = _955 * _961;
    float _963 = _956 * _961;
    float _964 = _957 * _961;
    vec4 _969 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _971 = _969.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1141 = sqrt(((_955 * _955) + (_956 * _956)) + (_957 * _957));
        float _1147 = (cbMatDynParam._m0[5u].x * _1141) + cbMatDynParam._m0[5u].y;
        float _4011 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1152 = (cbMatDynParam._m0[5u].z * _1141) + cbMatDynParam._m0[5u].w;
        float _4022 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) - _1148)) + _1148) < ((_971 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _982 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _983 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1001 = fma(_883, cbSceneParam._m0[5u].z, fma(_882, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _881));
    float _1004 = fma(_883, cbSceneParam._m0[6u].z, fma(_882, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _881));
    float _1007 = fma(_883, cbSceneParam._m0[7u].z, fma(_882, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _881));
    uint _1020 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1021 = _1020 + 9u;
    uint _1022 = _1021 + uint(cbMatDynParam._m0[0u].w);
    float _1028 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0)))) * cbInstanceData._m0[_1022].x;
    float _1029 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0)))) * cbInstanceData._m0[_1022].y;
    float _1030 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0)))) * cbInstanceData._m0[_1022].z;
    float _4033 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _1031 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _4044 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _1032 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _4055 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _1033 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _1034 = 1.0 - _889;
    float _1035 = _1031 * _1034;
    float _1036 = _1032 * _1034;
    float _1037 = _1033 * _1034;
    float _1042 = (_1031 + (-0.039999999105930328369140625)) * _889;
    float _1043 = (_1032 + (-0.039999999105930328369140625)) * _889;
    float _1044 = (_1033 + (-0.039999999105930328369140625)) * _889;
    float _1045 = _1042 + 0.039999999105930328369140625;
    float _1047 = _1043 + 0.039999999105930328369140625;
    float _1048 = _1044 + 0.039999999105930328369140625;
    vec4 _1057 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _982, cbSceneParam._m0[86u].y * _983));
    float _1060 = _1057.x * TEXCOORD_5.w;
    float _1061 = dot(vec3(_881, _882, _883), vec3(_962, _963, _964));
    float _1064 = _1061 * 2.0;
    float _1068 = (_1064 * _881) - _962;
    float _1069 = (_1064 * _882) - _963;
    float _1070 = (_1064 * _883) - _964;
    float _1074 = abs(dot(vec3(_962, _963, _964), vec3(_881, _882, _883)));
    float _4066 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _1076 = sqrt(_885);
    float _1087 = exp2((_1076 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1076 * 3.0));
    float _1093 = (1.0 - _1087) * ((_1076 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1094 = _1087 * _1076;
    float _1122 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1126 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1130 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1459;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1184 = fma(_1130, cbModelParam._m0[26u].z, fma(_1126, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1122));
        float _1188 = fma(_1130, cbModelParam._m0[27u].z, fma(_1126, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1122));
        float _1192 = fma(_1130, cbModelParam._m0[28u].z, fma(_1126, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1122));
        float _1217 = _1122 + _881;
        float _1218 = _1126 + _882;
        float _1219 = _1130 + _883;
        float _1229 = fma(_1219, cbModelParam._m0[26u].z, fma(_1218, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1217)) - _1184;
        float _1230 = fma(_1219, cbModelParam._m0[27u].z, fma(_1218, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1217)) - _1188;
        float _1231 = fma(_1219, cbModelParam._m0[28u].z, fma(_1218, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1217)) - _1192;
        float _1235 = inversesqrt(dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231)));
        float _1248 = ((_1235 * _1229) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1184 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1249 = ((_1235 * _1230) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1188 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1250 = ((_1235 * _1231) / cbModelParam._m0[34u].z) + ((((((_1192 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        vec4 _1260 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1248, _1249, _1250), 0.0);
        float _1287 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1253.x + (-0.5));
        float _1289 = _1287 * (_1253.y + (-0.5));
        float _1290 = _1287 * (_1253.z + (-0.5));
        float _1297 = exp2((_1260.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1260.x + (-0.5));
        float _1299 = _1297 * (_1260.y + (-0.5));
        float _1300 = _1297 * (_1260.z + (-0.5));
        float _1307 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1267.x + (-0.5));
        float _1309 = _1307 * (_1267.y + (-0.5));
        float _1310 = _1307 * (_1267.z + (-0.5));
        float _1317 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1274.x + (-0.5));
        float _1319 = _1317 * (_1274.y + (-0.5));
        float _1320 = _1317 * (_1274.z + (-0.5));
        float _1321 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1322 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1323 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1324 = _1288 * 0.5;
        float _1325 = _1298 * 0.5;
        float _1326 = _1308 * 0.5;
        float _1327 = dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326));
        float _1332 = (_1327 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1327);
        float _1341 = (dot(vec3(_881, _882, _883), vec3(_1332 * _1324, _1332 * _1325, _1332 * _1326)) + 1.0) * 0.5;
        float _4092 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1351 = sqrt(((_1325 * _1325) + (_1324 * _1324)) + (_1326 * _1326)) / (_1321 + 9.9999997473787516355514526367188e-06);
        float _4103 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _4114 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_1353 + 1.0))) + _1358) * _1321;
        float _1368 = _1289 * 0.5;
        float _1369 = _1299 * 0.5;
        float _1370 = _1309 * 0.5;
        float _1371 = dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370));
        float _1376 = (_1371 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1371);
        float _1384 = (dot(vec3(_881, _882, _883), vec3(_1376 * _1368, _1376 * _1369, _1376 * _1370)) + 1.0) * 0.5;
        float _4125 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1393 = sqrt(((_1369 * _1369) + (_1368 * _1368)) + (_1370 * _1370)) / (_1322 + 9.9999997473787516355514526367188e-06);
        float _4136 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1395 = _1394 * 2.0;
        float _1399 = (1.0 - _1394) / (_1394 + 1.0);
        float _4147 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1409 = ((((1.0 - _1400) * (_1395 + 2.0)) * exp2(log2(isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_1395 + 1.0))) + _1400) * _1322;
        float _1410 = _1290 * 0.5;
        float _1411 = _1300 * 0.5;
        float _1412 = _1310 * 0.5;
        float _1413 = dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412));
        float _1418 = (_1413 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1413);
        float _1426 = (dot(vec3(_881, _882, _883), vec3(_1418 * _1410, _1418 * _1411, _1418 * _1412)) + 1.0) * 0.5;
        float _4158 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1435 = sqrt(((_1411 * _1411) + (_1410 * _1410)) + (_1412 * _1412)) / (_1323 + 9.9999997473787516355514526367188e-06);
        float _4169 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1437 = _1436 * 2.0;
        float _1441 = (1.0 - _1436) / (_1436 + 1.0);
        float _4180 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1451 = ((((1.0 - _1442) * (_1437 + 2.0)) * exp2(log2(isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_1437 + 1.0))) + _1442) * _1323;
        _1459 = _1290;
        _1461 = _1289;
        _1462 = _1288;
        _1463 = _1300;
        _1464 = _1299;
        _1465 = _1298;
        _1466 = _1310;
        _1467 = _1309;
        _1468 = _1308;
        _1469 = _1323;
        _1470 = _1322;
        _1471 = _1321;
        _1472 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
        _1473 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)));
        _1474 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)));
    }
    else
    {
        _1459 = _1460;
        _1461 = _1460;
        _1462 = _1460;
        _1463 = _1460;
        _1464 = _1460;
        _1465 = _1460;
        _1466 = _1460;
        _1467 = _1460;
        _1468 = _1460;
        _1469 = _1460;
        _1470 = _1460;
        _1471 = _1460;
        _1472 = 0.0;
        _1473 = 0.0;
        _1474 = 0.0;
    }
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1500 = fma(_1130, cbModelParam._m0[30u].z, fma(_1126, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1122));
        float _1504 = fma(_1130, cbModelParam._m0[31u].z, fma(_1126, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1122));
        float _1508 = fma(_1130, cbModelParam._m0[32u].z, fma(_1126, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1122));
        float _1531 = _1122 + _881;
        float _1532 = _1126 + _882;
        float _1533 = _1130 + _883;
        float _1543 = fma(_1533, cbModelParam._m0[30u].z, fma(_1532, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1531)) - _1500;
        float _1544 = fma(_1533, cbModelParam._m0[31u].z, fma(_1532, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1531)) - _1504;
        float _1545 = fma(_1533, cbModelParam._m0[32u].z, fma(_1532, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1531)) - _1508;
        float _1549 = inversesqrt(dot(vec3(_1543, _1544, _1545), vec3(_1543, _1544, _1545)));
        float _1562 = ((_1549 * _1543) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1500 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1563 = ((_1549 * _1544) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1504 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1564 = ((_1549 * _1545) / cbModelParam._m0[35u].z) + ((((((_1508 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1566 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1562, _1563, _1564), 0.0);
        vec4 _1573 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1562, _1563, _1564), 0.0);
        vec4 _1580 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1562, _1563, _1564), 0.0);
        vec4 _1587 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1562, _1563, _1564), 0.0);
        float _1599 = exp2((_1566.w + (-0.5)) * 20.0) * 2.0;
        float _1600 = _1599 * (_1566.x + (-0.5));
        float _1601 = _1599 * (_1566.y + (-0.5));
        float _1602 = _1599 * (_1566.z + (-0.5));
        float _1609 = exp2((_1573.w + (-0.5)) * 20.0) * 2.0;
        float _1610 = _1609 * (_1573.x + (-0.5));
        float _1611 = _1609 * (_1573.y + (-0.5));
        float _1612 = _1609 * (_1573.z + (-0.5));
        float _1619 = exp2((_1580.w + (-0.5)) * 20.0) * 2.0;
        float _1620 = _1619 * (_1580.x + (-0.5));
        float _1621 = _1619 * (_1580.y + (-0.5));
        float _1622 = _1619 * (_1580.z + (-0.5));
        float _1629 = exp2((_1587.w + (-0.5)) * 20.0) * 2.0;
        float _1630 = _1629 * (_1587.x + (-0.5));
        float _1631 = _1629 * (_1587.y + (-0.5));
        float _1632 = _1629 * (_1587.z + (-0.5));
        float _1633 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1634 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1635 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1636 = _1600 * 0.5;
        float _1637 = _1610 * 0.5;
        float _1638 = _1620 * 0.5;
        float _1639 = dot(vec3(_1636, _1637, _1638), vec3(_1636, _1637, _1638));
        float _1644 = (_1639 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1639);
        float _1652 = (dot(vec3(_881, _882, _883), vec3(_1644 * _1636, _1644 * _1637, _1644 * _1638)) + 1.0) * 0.5;
        float _4221 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1661 = sqrt(((_1637 * _1637) + (_1636 * _1636)) + (_1638 * _1638)) / (_1633 + 9.9999997473787516355514526367188e-06);
        float _4232 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1663 = _1662 * 2.0;
        float _1667 = (1.0 - _1662) / (_1662 + 1.0);
        float _4243 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1677 = ((((1.0 - _1668) * (_1663 + 2.0)) * exp2(log2(isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_1663 + 1.0))) + _1668) * _1633;
        float _1678 = _1601 * 0.5;
        float _1679 = _1611 * 0.5;
        float _1680 = _1621 * 0.5;
        float _1681 = dot(vec3(_1678, _1679, _1680), vec3(_1678, _1679, _1680));
        float _1686 = (_1681 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1681);
        float _1694 = (dot(vec3(_881, _882, _883), vec3(_1686 * _1678, _1686 * _1679, _1686 * _1680)) + 1.0) * 0.5;
        float _4254 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1703 = sqrt(((_1679 * _1679) + (_1678 * _1678)) + (_1680 * _1680)) / (_1634 + 9.9999997473787516355514526367188e-06);
        float _4265 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1704 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1705 = _1704 * 2.0;
        float _1709 = (1.0 - _1704) / (_1704 + 1.0);
        float _4276 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1719 = ((((1.0 - _1710) * (_1705 + 2.0)) * exp2(log2(isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_1705 + 1.0))) + _1710) * _1634;
        float _1720 = _1602 * 0.5;
        float _1721 = _1612 * 0.5;
        float _1722 = _1622 * 0.5;
        float _1723 = dot(vec3(_1720, _1721, _1722), vec3(_1720, _1721, _1722));
        float _1728 = (_1723 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1723);
        float _1736 = (dot(vec3(_881, _882, _883), vec3(_1728 * _1720, _1728 * _1721, _1728 * _1722)) + 1.0) * 0.5;
        float _4287 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1745 = sqrt(((_1721 * _1721) + (_1720 * _1720)) + (_1722 * _1722)) / (_1635 + 9.9999997473787516355514526367188e-06);
        float _4298 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1746 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1747 = _1746 * 2.0;
        float _1751 = (1.0 - _1746) / (_1746 + 1.0);
        float _4309 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1752 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1761 = ((((1.0 - _1752) * (_1747 + 2.0)) * exp2(log2(isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_1747 + 1.0))) + _1752) * _1635;
        _1769 = _1602;
        _1770 = _1601;
        _1771 = _1600;
        _1772 = _1612;
        _1773 = _1611;
        _1774 = _1610;
        _1775 = _1622;
        _1776 = _1621;
        _1777 = _1620;
        _1778 = _1635;
        _1779 = _1634;
        _1780 = _1633;
        _1781 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)));
        _1782 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)));
        _1783 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)));
    }
    else
    {
        _1769 = _1460;
        _1770 = _1460;
        _1771 = _1460;
        _1772 = _1460;
        _1773 = _1460;
        _1774 = _1460;
        _1775 = _1460;
        _1776 = _1460;
        _1777 = _1460;
        _1778 = _1460;
        _1779 = _1460;
        _1780 = _1460;
        _1781 = 0.0;
        _1782 = 0.0;
        _1783 = 0.0;
    }
    float _1793 = (cbModelParam._m0[1u].x * (_1781 - _1472)) + _1472;
    float _1794 = (cbModelParam._m0[1u].x * (_1782 - _1473)) + _1473;
    float _1795 = (cbModelParam._m0[1u].x * (_1783 - _1474)) + _1474;
    float _1816 = fma(_1795, cbSceneParam._m0[89u].z, fma(_1794, cbSceneParam._m0[89u].y, _1793 * cbSceneParam._m0[89u].x));
    float _1819 = fma(_1795, cbSceneParam._m0[90u].z, fma(_1794, cbSceneParam._m0[90u].y, _1793 * cbSceneParam._m0[90u].x));
    float _1822 = fma(_1795, cbSceneParam._m0[91u].z, fma(_1794, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1793));
    float _1837 = _1068 * 0.5;
    float _1838 = _1069 * 0.5;
    float _1839 = _1070 * 0.5;
    float _1840 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1771, _1774, _1777, _1780));
    float _1843 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1770, _1773, _1776, _1779));
    float _1846 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1769, _1772, _1775, _1778));
    float _1880;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1853 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1459, _1463, _1466, _1469));
        float _1857 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1461, _1464, _1467, _1470));
        float _1861 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1462, _1465, _1468, _1471));
        float _1868 = dot(vec4(cbModelParam._m0[39u]), vec4(_1837, _1838, _1839, 1.0));
        _1880 = dot(vec3(isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0)), isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0)), isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1868) ? 0.0 : (isnan(0.0) ? _1868 : max(0.0, _1868))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1880 = 1.0;
    }
    float _1891;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1882 = dot(vec4(cbModelParam._m0[40u]), vec4(_1837, _1838, _1839, 1.0));
        _1891 = dot(vec3(isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0)), isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0)), isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1882) ? 0.0 : (isnan(0.0) ? _1882 : max(0.0, _1882))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1891 = 1.0;
    }
    float _1895 = (_1891 * cbModelParam._m0[1u].x) + (_1880 * (1.0 - cbModelParam._m0[1u].x));
    float _1905 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _885);
    float _1906 = isnan(_1905) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1905 : min(cbModelParam._m0[25u].z, _1905));
    float _1986;
    float _1988;
    float _1990;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1953 = fma(_1130, cbModelParam._m0[13u].z, fma(_1126, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1122)) + cbModelParam._m0[13u].w;
        float _1957 = fma(_1130, cbModelParam._m0[14u].z, fma(_1126, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1122)) + cbModelParam._m0[14u].w;
        float _1961 = fma(_1130, cbModelParam._m0[15u].z, fma(_1126, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1122)) + cbModelParam._m0[15u].w;
        float _1964 = fma(_1070, cbModelParam._m0[13u].z, fma(_1069, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1068));
        float _1967 = fma(_1070, cbModelParam._m0[14u].z, fma(_1069, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1068));
        float _1970 = fma(_1070, cbModelParam._m0[15u].z, fma(_1069, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1068));
        float _1998;
        if (_1964 > 0.0)
        {
            _1998 = abs((1.0 - _1953) / _1964);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1953 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1998 = frontier_phi_17_15_ladder;
        }
        float _2200;
        if (_1967 > 0.0)
        {
            _2200 = abs((1.0 - _1957) / _1967);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1957 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2200 = frontier_phi_26_22_ladder;
        }
        float _2454;
        if (_1970 > 0.0)
        {
            _2454 = abs((1.0 - _1961) / _1970);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1961 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2454 = frontier_phi_38_33_ladder;
        }
        float _2456 = isnan(_2200) ? _1998 : (isnan(_1998) ? _2200 : min(_1998, _2200));
        float _2457 = isnan(_2454) ? _2456 : (isnan(_2456) ? _2454 : min(_2456, _2454));
        float _2461 = (_2457 * _1964) + _1953;
        float _2462 = (_2457 * _1967) + _1957;
        float _2463 = (_2457 * _1970) + _1961;
        float _2464 = _2457 * 9.9999997473787516355514526367188e-05;
        float _2466 = (-1.0) - _2464;
        float _2468 = _2464 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2463 > _2468) || ((_2463 < _2466) || ((_2462 > _2468) || ((_2462 < _2466) || ((_2461 < _2466) || (_2461 > _2468))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2591 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2463, cbModelParam._m0[9u].z, fma(_2462, cbModelParam._m0[9u].y, _2461 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2463, cbModelParam._m0[10u].z, fma(_2462, cbModelParam._m0[10u].y, _2461 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2463, cbModelParam._m0[11u].z, fma(_2462, cbModelParam._m0[11u].y, _2461 * cbModelParam._m0[11u].x))), _1906);
            frontier_phi_16_38_ladder = _2591.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2591.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2591.x * cbModelParam._m0[1u].y;
        }
        _1986 = frontier_phi_16_38_ladder_2;
        _1988 = frontier_phi_16_38_ladder_1;
        _1990 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1974 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1068, _1069, _1070), _1906);
        _1986 = _1974.x * cbModelParam._m0[1u].y;
        _1988 = _1974.y * cbModelParam._m0[1u].y;
        _1990 = _1974.z * cbModelParam._m0[1u].y;
    }
    float _1994 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _885);
    float _1995 = isnan(_1994) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1994 : min(cbModelParam._m0[25u].w, _1994));
    float _2084;
    float _2086;
    float _2088;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2048 = fma(_1130, cbModelParam._m0[21u].z, fma(_1126, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1122)) + cbModelParam._m0[21u].w;
        float _2052 = fma(_1130, cbModelParam._m0[22u].z, fma(_1126, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1122)) + cbModelParam._m0[22u].w;
        float _2056 = fma(_1130, cbModelParam._m0[23u].z, fma(_1126, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1122)) + cbModelParam._m0[23u].w;
        float _2059 = fma(_1070, cbModelParam._m0[21u].z, fma(_1069, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1068));
        float _2062 = fma(_1070, cbModelParam._m0[22u].z, fma(_1069, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1068));
        float _2065 = fma(_1070, cbModelParam._m0[23u].z, fma(_1069, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1068));
        float _2205;
        if (_2059 > 0.0)
        {
            _2205 = abs((1.0 - _2048) / _2059);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2059 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2048 + 1.0) / _2059);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2205 = frontier_phi_28_24_ladder;
        }
        float _2481;
        if (_2062 > 0.0)
        {
            _2481 = abs((1.0 - _2052) / _2062);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2062 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2052 + 1.0) / _2062);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2481 = frontier_phi_40_35_ladder;
        }
        float _2694;
        if (_2065 > 0.0)
        {
            _2694 = abs((1.0 - _2056) / _2065);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2065 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2056 + 1.0) / _2065);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2694 = frontier_phi_49_46_ladder;
        }
        float _2696 = isnan(_2481) ? _2205 : (isnan(_2205) ? _2481 : min(_2205, _2481));
        float _2697 = isnan(_2694) ? _2696 : (isnan(_2696) ? _2694 : min(_2696, _2694));
        float _2701 = (_2697 * _2059) + _2048;
        float _2702 = (_2697 * _2062) + _2052;
        float _2703 = (_2697 * _2065) + _2056;
        float _2704 = _2697 * 9.9999997473787516355514526367188e-05;
        float _2705 = (-1.0) - _2704;
        float _2707 = _2704 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2703 > _2707) || ((_2703 < _2705) || ((_2702 > _2707) || ((_2702 < _2705) || ((_2701 < _2705) || (_2701 > _2707))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2904 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2703, cbModelParam._m0[17u].z, fma(_2702, cbModelParam._m0[17u].y, _2701 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2703, cbModelParam._m0[18u].z, fma(_2702, cbModelParam._m0[18u].y, _2701 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2703, cbModelParam._m0[19u].z, fma(_2702, cbModelParam._m0[19u].y, _2701 * cbModelParam._m0[19u].x))), _1995);
            frontier_phi_25_49_ladder = _2904.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2904.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2904.x * cbModelParam._m0[1u].z;
        }
        _2084 = frontier_phi_25_49_ladder_2;
        _2086 = frontier_phi_25_49_ladder_1;
        _2088 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2068 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1068, _1069, _1070), _1995);
        _2084 = _2068.x * cbModelParam._m0[1u].z;
        _2086 = _2068.y * cbModelParam._m0[1u].z;
        _2088 = _2068.z * cbModelParam._m0[1u].z;
    }
    float _2101 = (((_1093 * _1045) + _1094) * _1060) * ((cbModelParam._m0[1u].w * (_2084 - _1986)) + _1986);
    float _2103 = (((_1093 * _1047) + _1094) * _1060) * ((cbModelParam._m0[1u].w * (_2086 - _1988)) + _1988);
    float _2105 = (((_1093 * _1048) + _1094) * _1060) * ((cbModelParam._m0[1u].w * (_2088 - _1990)) + _1990);
    float _2108 = fma(_2105, cbSceneParam._m0[89u].z, fma(_2103, cbSceneParam._m0[89u].y, _2101 * cbSceneParam._m0[89u].x));
    float _2111 = fma(_2105, cbSceneParam._m0[90u].z, fma(_2103, cbSceneParam._m0[90u].y, _2101 * cbSceneParam._m0[90u].x));
    float _2114 = fma(_2105, cbSceneParam._m0[91u].z, fma(_2103, cbSceneParam._m0[91u].y, _2101 * cbSceneParam._m0[91u].x));
    uvec4 _2124 = floatBitsToUint(cbInstanceData._m0[_1020 + 5u]);
    uint _2126 = _2124.x * 14u;
    uint _2127 = _2126 + 13u;
    float _2134 = _1060 + (-1.0);
    float _2139 = (cbLight._m0[_2127].x * _2134) + 1.0;
    float _2140 = (cbLight._m0[_2127].y * _2134) + 1.0;
    float _2141 = (cbLight._m0[_2127].z * _2134) + 1.0;
    float _2142 = (cbLight._m0[_2127].w * _2134) + 1.0;
    uint _2143 = _2126 + 5u;
    float _2149 = isnan(1.0) ? _2140 : (isnan(_2140) ? 1.0 : min(_2140, 1.0));
    uint _2153 = _2126 + 4u;
    float _2159 = isnan(1.0) ? _2139 : (isnan(_2139) ? 1.0 : min(_2139, 1.0));
    uint _2163 = _2126 | 1u;
    float _2174 = dot(vec3(cbLight._m0[_2126].xyz), vec3(_881, _882, _883));
    float _2177 = dot(vec3(cbLight._m0[_2163].xyz), vec3(_881, _882, _883));
    float _4445 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _4456 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2182 = (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * 0.3183098733425140380859375;
    float _2184 = (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * 0.3183098733425140380859375;
    float _2191 = ((cbLight._m0[_2143].x * _2149) * _2184) + ((cbLight._m0[_2153].x * _2159) * _2182);
    float _2192 = ((_2149 * cbLight._m0[_2143].y) * _2184) + ((_2159 * cbLight._m0[_2153].y) * _2182);
    float _2193 = ((_2149 * cbLight._m0[_2143].z) * _2184) + ((_2159 * cbLight._m0[_2153].z) * _2182);
    uvec4 _2197 = floatBitsToUint(cbLight._m0[_2126 + 12u]);
    bool _2199 = _2197.x == 0u;
    float _2210;
    float _2212;
    float _2214;
    if (_2199)
    {
        _2210 = _2191;
        _2212 = _2192;
        _2214 = _2193;
    }
    else
    {
        uint _2218 = _2126 + 6u;
        float _2234 = (dot(vec3(cbLight._m0[_2126 + 2u].xyz), vec3(_881, _882, _883)) * 0.5) + 0.5;
        float _2235 = _2234 * _2234;
        float _4467 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2236 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _2237 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
        _2210 = (((cbLight._m0[_2218].x * 0.3183098733425140380859375) * _2236) * _2237) + _2191;
        _2212 = (((cbLight._m0[_2218].y * 0.3183098733425140380859375) * _2236) * _2237) + _2192;
        _2214 = (((cbLight._m0[_2218].z * 0.3183098733425140380859375) * _2236) * _2237) + _2193;
    }
    bool _2217 = _2197.y == 0u;
    float _2255;
    float _2257;
    float _2259;
    if (_2217)
    {
        _2255 = _2210;
        _2257 = _2212;
        _2259 = _2214;
    }
    else
    {
        uint _2425 = _2126 + 7u;
        float _2441 = (dot(vec3(cbLight._m0[_2126 + 3u].xyz), vec3(_881, _882, _883)) * 0.5) + 0.5;
        float _2442 = _2441 * _2441;
        float _4483 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2443 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _2444 = isnan(1.0) ? _2142 : (isnan(_2142) ? 1.0 : min(_2142, 1.0));
        _2255 = (((cbLight._m0[_2425].x * 0.3183098733425140380859375) * _2443) * _2444) + _2210;
        _2257 = (((cbLight._m0[_2425].y * 0.3183098733425140380859375) * _2443) * _2444) + _2212;
        _2259 = (((cbLight._m0[_2425].z * 0.3183098733425140380859375) * _2443) * _2444) + _2214;
    }
    uint _2262 = _2126 + 8u;
    float _2275 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2126].w)) * _885) * 0.949999988079071044921875);
    float _2276 = _2275 * _2275;
    float _2277 = cbLight._m0[_2126].x + _962;
    float _2278 = cbLight._m0[_2126].y + _963;
    float _2279 = cbLight._m0[_2126].z + _964;
    float _2283 = inversesqrt(dot(vec3(_2277, _2278, _2279), vec3(_2277, _2278, _2279)));
    float _2284 = _2283 * _2277;
    float _2285 = _2283 * _2278;
    float _2286 = _2283 * _2279;
    float _2287 = dot(vec3(_881, _882, _883), vec3(cbLight._m0[_2126].xyz));
    float _4499 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2290 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
    float _4510 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    float _2291 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
    float _2292 = dot(vec3(_881, _882, _883), vec3(_2284, _2285, _2286));
    float _4521 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2295 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
    float _2296 = dot(vec3(cbLight._m0[_2126].xyz), vec3(_2284, _2285, _2286));
    float _4532 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2300 = _2276 * _2276;
    float _2304 = ((_2295 * _2295) * (_2300 + (-1.0))) + 1.0;
    float _2312 = exp2(log2(1.0 - (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0)))) * 5.0);
    float _2313 = 0.959999978542327880859375 - _1042;
    float _2315 = 0.959999978542327880859375 - _1043;
    float _2316 = 0.959999978542327880859375 - _1044;
    float _2323 = 1.0 - _2276;
    float _2334 = (0.5 / (((_2291 * ((_2290 * _2323) + _2276)) + 9.9999999392252902907785028219223e-09) + (((_2291 * _2323) + _2276) * _2290))) * _2290;
    float _4543 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2336 = (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_2300 / ((_2304 * _2304) * 3.141590118408203125));
    uint _2347 = _2126 + 9u;
    float _2358 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2163].w)) * _885) * 0.949999988079071044921875);
    float _2359 = _2358 * _2358;
    float _2360 = cbLight._m0[_2163].x + _962;
    float _2361 = cbLight._m0[_2163].y + _963;
    float _2362 = cbLight._m0[_2163].z + _964;
    float _2366 = inversesqrt(dot(vec3(_2360, _2361, _2362), vec3(_2360, _2361, _2362)));
    float _2367 = _2366 * _2360;
    float _2368 = _2366 * _2361;
    float _2369 = _2366 * _2362;
    float _2370 = dot(vec3(_881, _882, _883), vec3(cbLight._m0[_2163].xyz));
    float _4554 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2373 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
    float _2374 = dot(vec3(_881, _882, _883), vec3(_2367, _2368, _2369));
    float _4565 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2377 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
    float _2378 = dot(vec3(cbLight._m0[_2163].xyz), vec3(_2367, _2368, _2369));
    float _4576 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2382 = _2359 * _2359;
    float _2386 = ((_2377 * _2377) * (_2382 + (-1.0))) + 1.0;
    float _2393 = exp2(log2(1.0 - (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0)))) * 5.0);
    float _2400 = 1.0 - _2359;
    float _2410 = (0.5 / (((_2291 * ((_2373 * _2400) + _2359)) + 9.9999999392252902907785028219223e-09) + (((_2291 * _2400) + _2359) * _2373))) * _2373;
    float _4587 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _2412 = (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * (_2382 / ((_2386 * _2386) * 3.141590118408203125));
    float _2422 = (((((_2393 * _2313) + _1045) * cbLight._m0[_2347].x) * _2412) * _2149) + (((((_2312 * _2313) + _1045) * cbLight._m0[_2262].x) * _2336) * _2159);
    float _2423 = (((((_2393 * _2315) + _1047) * cbLight._m0[_2347].y) * _2412) * _2149) + (((((_2312 * _2315) + _1047) * cbLight._m0[_2262].y) * _2336) * _2159);
    float _2424 = (((((_2393 * _2316) + _1048) * cbLight._m0[_2347].z) * _2412) * _2149) + (((((_2312 * _2316) + _1048) * cbLight._m0[_2262].z) * _2336) * _2159);
    float _2486;
    float _2488;
    float _2490;
    if (_2199)
    {
        _2486 = _2422;
        _2488 = _2423;
        _2490 = _2424;
    }
    else
    {
        uint _2492 = _2126 + 2u;
        uint _2496 = _2126 + 10u;
        float _2510 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2492].w)) * _885) * 0.949999988079071044921875);
        float _2511 = _2510 * _2510;
        float _2512 = cbLight._m0[_2492].x + _962;
        float _2513 = cbLight._m0[_2492].y + _963;
        float _2514 = cbLight._m0[_2492].z + _964;
        float _2518 = inversesqrt(dot(vec3(_2512, _2513, _2514), vec3(_2512, _2513, _2514)));
        float _2519 = _2518 * _2512;
        float _2520 = _2518 * _2513;
        float _2521 = _2518 * _2514;
        float _2522 = dot(vec3(_881, _882, _883), vec3(cbLight._m0[_2492].xyz));
        float _4598 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2525 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
        float _2526 = dot(vec3(_881, _882, _883), vec3(_2519, _2520, _2521));
        float _4609 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2529 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
        float _2530 = dot(vec3(cbLight._m0[_2492].xyz), vec3(_2519, _2520, _2521));
        float _4620 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2534 = _2511 * _2511;
        float _2538 = ((_2529 * _2529) * (_2534 + (-1.0))) + 1.0;
        float _2545 = exp2(log2(1.0 - (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0)))) * 5.0);
        float _2552 = 1.0 - _2511;
        float _2562 = (0.5 / (((_2291 * ((_2525 * _2552) + _2511)) + 9.9999999392252902907785028219223e-09) + (((_2291 * _2552) + _2511) * _2525))) * _2525;
        float _4631 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2564 = (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * (_2534 / ((_2538 * _2538) * 3.141590118408203125));
        float _2565 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
        _2486 = (((((_2545 * _2313) + _1045) * cbLight._m0[_2496].x) * _2564) * _2565) + _2422;
        _2488 = (((((_2545 * _2315) + _1047) * cbLight._m0[_2496].y) * _2564) * _2565) + _2423;
        _2490 = (((((_2545 * _2316) + _1048) * cbLight._m0[_2496].z) * _2564) * _2565) + _2424;
    }
    float _2600;
    float _2602;
    float _2604;
    if (_2217)
    {
        _2600 = _2486;
        _2602 = _2488;
        _2604 = _2490;
    }
    else
    {
        uint _2611 = _2126 + 3u;
        uint _2615 = _2126 + 11u;
        float _2629 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2611].w)) * _885) * 0.949999988079071044921875);
        float _2630 = _2629 * _2629;
        float _2631 = cbLight._m0[_2611].x + _962;
        float _2632 = cbLight._m0[_2611].y + _963;
        float _2633 = cbLight._m0[_2611].z + _964;
        float _2637 = inversesqrt(dot(vec3(_2631, _2632, _2633), vec3(_2631, _2632, _2633)));
        float _2638 = _2637 * _2631;
        float _2639 = _2637 * _2632;
        float _2640 = _2637 * _2633;
        float _2641 = dot(vec3(_881, _882, _883), vec3(cbLight._m0[_2611].xyz));
        float _4647 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        float _2644 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
        float _2645 = dot(vec3(_881, _882, _883), vec3(_2638, _2639, _2640));
        float _4658 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2648 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
        float _2649 = dot(vec3(cbLight._m0[_2611].xyz), vec3(_2638, _2639, _2640));
        float _4669 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2653 = _2630 * _2630;
        float _2657 = ((_2648 * _2648) * (_2653 + (-1.0))) + 1.0;
        float _2664 = exp2(log2(1.0 - (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0)))) * 5.0);
        float _2671 = 1.0 - _2630;
        float _2681 = (0.5 / (((_2291 * ((_2644 * _2671) + _2630)) + 9.9999999392252902907785028219223e-09) + (((_2291 * _2671) + _2630) * _2644))) * _2644;
        float _4680 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2683 = (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * (_2653 / ((_2657 * _2657) * 3.141590118408203125));
        float _2684 = isnan(1.0) ? _2142 : (isnan(_2142) ? 1.0 : min(_2142, 1.0));
        _2600 = (((((_2664 * _2313) + _1045) * cbLight._m0[_2615].x) * _2683) * _2684) + _2486;
        _2602 = (((((_2664 * _2315) + _1047) * cbLight._m0[_2615].y) * _2683) * _2684) + _2488;
        _2604 = (((((_2664 * _2316) + _1048) * cbLight._m0[_2615].z) * _2683) * _2684) + _2490;
    }
    float _2819;
    float _2821;
    float _2823;
    float _2825;
    float _2827;
    float _2829;
    if (_2124.y == 0u)
    {
        float _2759 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2760 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2759;
        float _2761 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2759;
        float _2762 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2759;
        uvec4 _2774 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2775 = _2774.x;
        uint _2786 = uint((float(_2774.y) * floor(float(uint(cbSceneParam._m0[85u].y * _983) / _2775))) + floor(float(uint(cbSceneParam._m0[85u].x * _982) / _2775)));
        float _2796 = (log2(_2762 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2797 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
        uint _2800 = uint(isnan(14.0) ? _2797 : (isnan(_2797) ? 14.0 : min(_2797, 14.0)));
        uvec4 _2805 = texelFetch(g_lightClusterGridBuffer, int(((_2800 << 2u) + (_2786 << 6u)) >> 2u));
        uint _2806 = _2805.x;
        uint _2807 = _2774.z;
        float _2909;
        float _2911;
        float _2913;
        float _2915;
        float _2917;
        float _2919;
        if (((((1u << ((_2807 >> 4u) & 15u)) + 4294967295u) & _2806) == 0u) || ((_2807 & 240u) == 0u))
        {
            _2909 = 0.0;
            _2911 = 0.0;
            _2913 = 0.0;
            _2915 = 0.0;
            _2917 = 0.0;
            _2919 = 0.0;
        }
        else
        {
            float _2910;
            float _2912;
            float _2914;
            float _2916;
            float _2918;
            float _2920;
            float _3062 = 0.0;
            float _3063 = 0.0;
            float _3064 = 0.0;
            float _3065 = 0.0;
            float _3066 = 0.0;
            float _3067 = 0.0;
            uint _3068 = 0u;
            uint _3077;
            bool _3078;
            for (;;)
            {
                _3077 = texelFetch(g_lightClassification, int((((_2800 << 5u) + (_2786 << 9u)) + (_3068 << 2u)) >> 2u)).x;
                _3078 = _3077 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3078)
                {
                    frontier_phi_66_pred = _3062;
                    frontier_phi_66_pred_1 = _3067;
                    frontier_phi_66_pred_2 = _3066;
                    frontier_phi_66_pred_3 = _3065;
                    frontier_phi_66_pred_4 = _3064;
                    frontier_phi_66_pred_5 = _3063;
                }
                else
                {
                    float _3207;
                    float _3208;
                    float _3209;
                    float _3210;
                    float _3211;
                    float _3212;
                    uint _3213;
                    _3207 = _3062;
                    _3208 = _3063;
                    _3209 = _3064;
                    _3210 = _3065;
                    _3211 = _3066;
                    _3212 = _3067;
                    _3213 = _3077;
                    float _3134;
                    float _3135;
                    float _3136;
                    float _3137;
                    float _3138;
                    float _3139;
                    for (;;)
                    {
                        uint _3217 = uint(findLSB(_3213)) + (_3068 << 5u);
                        uint _3214 = (_3213 + 4294967295u) & _3213;
                        uint _3219 = _3217 * 48u;
                        vec4 _3233 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3219)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 3u)).x));
                        uint _3239 = (_3217 * 48u) + 4u;
                        vec4 _3252 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3239)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 3u)).x));
                        uint _3258 = (_3217 * 48u) + 8u;
                        vec3 _3269 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3258)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 2u)).x));
                        float _3273 = _3233.x - _2760;
                        float _3274 = _3233.y - _2761;
                        float _3275 = _3233.z - _2762;
                        float _3276 = dot(vec3(_3273, _3274, _3275), vec3(_3273, _3274, _3275));
                        float _3279 = inversesqrt(_3276);
                        float _3280 = _3279 * _3273;
                        float _3281 = _3279 * _3274;
                        float _3282 = _3279 * _3275;
                        float _3283 = dot(vec3(_1001, _1004, _1007), vec3(_3280, _3281, _3282));
                        float _3288 = 1.0 - (_3276 * _3233.w);
                        float _4706 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                        float _3289 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                        float _3290 = sqrt(_3276) * _3252.w;
                        float _3293 = 1.39999997615814208984375 / (_3290 + 1.39999997615814208984375);
                        float _3294 = _3293 * _3293;
                        float _3297 = ((1.0 - _3294) * _3283) + _3294;
                        float _3300 = _3290 * _3290;
                        float _3304 = ((isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0))) * _3289) / ((_3300 * 0.699999988079071044921875) + 1.0);
                        float _3308 = (-0.0) - _2760;
                        float _3309 = (-0.0) - _2761;
                        float _3310 = (-0.0) - _2762;
                        float _3314 = inversesqrt(dot(vec3(_3308, _3309, _3310), vec3(_3308, _3309, _3310)));
                        float _3315 = _3314 * _3308;
                        float _3316 = _3314 * _3309;
                        float _3317 = _3314 * _3310;
                        float _3325 = exp2(log2(1.0 / ((_3300 * 3.5) + 5.0)) * 0.25);
                        float _3326 = 1.0 - _1076;
                        float _3333 = sqrt(1.0 - ((1.0 - (_3326 * _3326)) * (1.0 - (_3325 * _3325))));
                        float _3334 = _3333 * _3333;
                        float _3335 = _3334 * _3334;
                        float _3336 = _3315 + _3280;
                        float _3337 = _3316 + _3281;
                        float _3338 = _3317 + _3282;
                        float _3342 = inversesqrt(dot(vec3(_3336, _3337, _3338), vec3(_3336, _3337, _3338)));
                        float _3346 = dot(vec3(_1001, _1004, _1007), vec3(_3315, _3316, _3317));
                        float _4722 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                        float _3349 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                        float _3350 = dot(vec3(_1001, _1004, _1007), vec3(_3342 * _3336, _3342 * _3337, _3342 * _3338));
                        float _4733 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                        float _3353 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
                        float _3357 = ((_3353 * _3353) * (_3335 + (-1.0))) + 1.0;
                        float _3358 = _3293 * _3334;
                        float _3359 = _3358 * _3358;
                        float _3362 = ((1.0 - _3359) * _3283) + _3359;
                        float _4744 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                        float _3363 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
                        float _3364 = 1.0 - _3334;
                        float _3374 = (0.5 / (((_3363 * ((_3349 * _3364) + _3334)) + 9.9999999392252902907785028219223e-09) + (((_3363 * _3364) + _3334) * _3349))) * _3363;
                        float _4755 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                        float _3385 = (((_3335 * 3.1415927410125732421875) * (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0)))) / ((_3357 * _3357) * ((_3300 * 2.1991131305694580078125) + 3.141590118408203125))) * _3289;
                        _3137 = (_3304 * _3252.x) + _3210;
                        _3138 = (_3304 * _3252.y) + _3211;
                        _3139 = (_3304 * _3252.z) + _3212;
                        _3134 = (_3385 * _3269.x) + _3207;
                        _3135 = (_3385 * _3269.y) + _3208;
                        _3136 = (_3385 * _3269.z) + _3209;
                        if (_3214 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3207 = _3134;
                            _3208 = _3135;
                            _3209 = _3136;
                            _3210 = _3137;
                            _3211 = _3138;
                            _3212 = _3139;
                            _3213 = _3214;
                        }
                    }
                    frontier_phi_66_pred = _3134;
                    frontier_phi_66_pred_1 = _3139;
                    frontier_phi_66_pred_2 = _3138;
                    frontier_phi_66_pred_3 = _3137;
                    frontier_phi_66_pred_4 = _3136;
                    frontier_phi_66_pred_5 = _3135;
                }
                _2910 = frontier_phi_66_pred;
                _2920 = frontier_phi_66_pred_1;
                _2918 = frontier_phi_66_pred_2;
                _2916 = frontier_phi_66_pred_3;
                _2914 = frontier_phi_66_pred_4;
                _2912 = frontier_phi_66_pred_5;
                uint _3069 = _3068 + 1u;
                if (_3069 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3062 = _2910;
                    _3063 = _2912;
                    _3064 = _2914;
                    _3065 = _2916;
                    _3066 = _2918;
                    _3067 = _2920;
                    _3068 = _3069;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2909 = _2910;
            _2911 = _2912;
            _2913 = _2914;
            _2915 = _2916;
            _2917 = _2918;
            _2919 = _2920;
        }
        uvec4 _2923 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2924 = _2923.z;
        uint _2926 = (_2924 >> 8u) & 15u;
        float _3030;
        float _3032;
        float _3034;
        float _3036;
        float _3038;
        float _3040;
        if (((4294967295u << _2926) & _2806) == 0u)
        {
            _3030 = _2909;
            _3032 = _2911;
            _3034 = _2913;
            _3036 = _2915;
            _3038 = _2917;
            _3040 = _2919;
        }
        else
        {
            float _3055 = inversesqrt(dot(vec3(_2760, _2761, _2762), vec3(_2760, _2761, _2762)));
            float _3056 = _3055 * _2760;
            float _3057 = _3055 * _2761;
            float _3058 = _3055 * _2762;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2926 < ((_2924 >> 12u) & 15u))
            {
                float _3031;
                float _3033;
                float _3035;
                float _3037;
                float _3039;
                float _3041;
                float _3190 = _2909;
                float _3191 = _2911;
                float _3192 = _2913;
                float _3193 = _2915;
                float _3194 = _2917;
                float _3195 = _2919;
                uint _3196 = _2926;
                uint _3205;
                bool _3206;
                for (;;)
                {
                    _3205 = texelFetch(g_lightClassification, int((((_2800 << 5u) + (_2786 << 9u)) + (_3196 << 2u)) >> 2u)).x;
                    _3206 = _3205 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3206)
                    {
                        frontier_phi_77_pred = _3195;
                        frontier_phi_77_pred_1 = _3194;
                        frontier_phi_77_pred_2 = _3193;
                        frontier_phi_77_pred_3 = _3192;
                        frontier_phi_77_pred_4 = _3191;
                        frontier_phi_77_pred_5 = _3190;
                    }
                    else
                    {
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3692;
                        float _3693;
                        float _3694;
                        float _3695;
                        float _3696;
                        float _3697;
                        float _3412 = _3190;
                        float _3413 = _3191;
                        float _3414 = _3192;
                        float _3415 = _3193;
                        float _3416 = _3194;
                        float _3417 = _3195;
                        uint _3418 = _3205;
                        uint _3419;
                        vec4 _3444;
                        float _3445;
                        vec4 _3460;
                        vec3 _3472;
                        vec4 _3487;
                        vec4 _3502;
                        float _3548;
                        bool _3549;
                        for (;;)
                        {
                            uint _3429 = ((_3196 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3418));
                            _3419 = (_3418 + 4294967295u) & _3418;
                            uint _3431 = _3429 * 40u;
                            _3444 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3431)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 3u)).x));
                            _3445 = _3444.w;
                            uint _3447 = (_3429 * 40u) + 4u;
                            _3460 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 3u)).x));
                            uint _3462 = (_3429 * 40u) + 8u;
                            _3472 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x));
                            uint _3474 = (_3429 * 40u) + 16u;
                            _3487 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3474)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 3u)).x));
                            uint _3489 = (_3429 * 40u) + 20u;
                            _3502 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3489)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 3u)).x));
                            uint _3504 = (_3429 * 40u) + 24u;
                            vec4 _3517 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3504)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 3u)).x));
                            uint _3523 = (_3429 * 40u) + 28u;
                            vec4 _3536 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3523)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 3u)).x));
                            _3548 = fma(_2762, _3536.z, fma(_2761, _3536.y, _3536.x * _2760)) + _3536.w;
                            _3549 = !((fma(_2762, _3517.z, fma(_2761, _3517.y, _3517.x * _2760)) + _3517.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3549)
                            {
                                float _3576 = _3444.x - _2760;
                                float _3577 = _3444.y - _2761;
                                float _3578 = _3444.z - _2762;
                                float _3579 = dot(vec3(_3576, _3577, _3578), vec3(_3576, _3577, _3578));
                                float _3582 = inversesqrt(_3579);
                                float _3583 = _3582 * _3576;
                                float _3584 = _3582 * _3577;
                                float _3585 = _3582 * _3578;
                                float _3589 = 1.0 - (_3579 / (_3445 * _3445));
                                float _4766 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                                float _3590 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
                                float _3594 = sqrt(_3579) * _3460.w;
                                float _3596 = 1.39999997615814208984375 / (_3594 + 1.39999997615814208984375);
                                float _3597 = _3596 * _3596;
                                float _3600 = ((1.0 - _3597) * dot(vec3(_3583, _3584, _3585), vec3(_1001, _1004, _1007))) + _3597;
                                float _3603 = _3594 * _3594;
                                float _3607 = (fma(_2762, _3487.z, fma(_2761, _3487.y, _3487.x * _2760)) + _3487.w) / _3548;
                                float _3608 = (fma(_2762, _3502.z, fma(_2761, _3502.y, _3502.x * _2760)) + _3502.w) / _3548;
                                float _3612 = 1.0 - dot(vec2(_3607, _3608), vec2(_3607, _3608));
                                float _4782 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                                float _3613 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
                                float _3614 = _3613 * (((isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0))) * _3590) / ((_3603 * 0.699999988079071044921875) + 1.0));
                                float _3626 = exp2(log2(1.0 / ((_3603 * 3.5) + 5.0)) * 0.25);
                                float _3627 = 1.0 - _1076;
                                float _3634 = sqrt(1.0 - ((1.0 - (_3627 * _3627)) * (1.0 - (_3626 * _3626))));
                                float _3635 = _3634 * _3634;
                                float _3636 = _3635 * _3635;
                                float _3637 = _3583 - _3056;
                                float _3638 = _3584 - _3057;
                                float _3639 = _3585 - _3058;
                                float _3643 = inversesqrt(dot(vec3(_3637, _3638, _3639), vec3(_3637, _3638, _3639)));
                                float _3647 = dot(vec3(_1001, _1004, _1007), vec3((-0.0) - _3056, (-0.0) - _3057, (-0.0) - _3058));
                                float _4793 = isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0));
                                float _3650 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
                                float _3651 = dot(vec3(_1001, _1004, _1007), vec3(_3643 * _3637, _3643 * _3638, _3643 * _3639));
                                float _4804 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                                float _3654 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
                                float _3658 = ((_3654 * _3654) * (_3636 + (-1.0))) + 1.0;
                                float _3659 = _3596 * _3635;
                                float _3660 = _3659 * _3659;
                                float _3666 = ((1.0 - _3660) * dot(vec3(_1001, _1004, _1007), vec3(_3583, _3584, _3585))) + _3660;
                                float _4815 = isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0));
                                float _3667 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                                float _3668 = 1.0 - _3635;
                                float _3678 = (0.5 / (((_3667 * ((_3650 * _3668) + _3635)) + 9.9999999392252902907785028219223e-09) + (((_3667 * _3668) + _3635) * _3650))) * _3667;
                                float _4826 = isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0));
                                float _3688 = (_3613 * _3590) * (((_3636 * 3.1415927410125732421875) * (isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0)))) / ((_3658 * _3658) * ((_3603 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3614 * _3460.y;
                                frontier_phi_83_pred_1 = _3614 * _3460.x;
                                frontier_phi_83_pred_2 = _3688 * _3472.z;
                                frontier_phi_83_pred_3 = _3688 * _3472.y;
                                frontier_phi_83_pred_4 = _3688 * _3472.x;
                                frontier_phi_83_pred_5 = _3614 * _3460.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3696 = frontier_phi_83_pred;
                            _3695 = frontier_phi_83_pred_1;
                            _3694 = frontier_phi_83_pred_2;
                            _3693 = frontier_phi_83_pred_3;
                            _3692 = frontier_phi_83_pred_4;
                            _3697 = frontier_phi_83_pred_5;
                            _3402 = _3695 + _3415;
                            _3403 = _3696 + _3416;
                            _3404 = _3697 + _3417;
                            _3399 = _3692 + _3412;
                            _3400 = _3693 + _3413;
                            _3401 = _3694 + _3414;
                            if (_3419 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3412 = _3399;
                                _3413 = _3400;
                                _3414 = _3401;
                                _3415 = _3402;
                                _3416 = _3403;
                                _3417 = _3404;
                                _3418 = _3419;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3404;
                        frontier_phi_77_pred_1 = _3403;
                        frontier_phi_77_pred_2 = _3402;
                        frontier_phi_77_pred_3 = _3401;
                        frontier_phi_77_pred_4 = _3400;
                        frontier_phi_77_pred_5 = _3399;
                    }
                    _3041 = frontier_phi_77_pred;
                    _3039 = frontier_phi_77_pred_1;
                    _3037 = frontier_phi_77_pred_2;
                    _3035 = frontier_phi_77_pred_3;
                    _3033 = frontier_phi_77_pred_4;
                    _3031 = frontier_phi_77_pred_5;
                    uint _3197 = _3196 + 1u;
                    if (_3197 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3190 = _3031;
                        _3191 = _3033;
                        _3192 = _3035;
                        _3193 = _3037;
                        _3194 = _3039;
                        _3195 = _3041;
                        _3196 = _3197;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3035;
                frontier_phi_58_59_ladder_1 = _3041;
                frontier_phi_58_59_ladder_2 = _3039;
                frontier_phi_58_59_ladder_3 = _3037;
                frontier_phi_58_59_ladder_4 = _3033;
                frontier_phi_58_59_ladder_5 = _3031;
            }
            else
            {
                frontier_phi_58_59_ladder = _2913;
                frontier_phi_58_59_ladder_1 = _2919;
                frontier_phi_58_59_ladder_2 = _2917;
                frontier_phi_58_59_ladder_3 = _2915;
                frontier_phi_58_59_ladder_4 = _2911;
                frontier_phi_58_59_ladder_5 = _2909;
            }
            _3030 = frontier_phi_58_59_ladder_5;
            _3032 = frontier_phi_58_59_ladder_4;
            _3034 = frontier_phi_58_59_ladder;
            _3036 = frontier_phi_58_59_ladder_3;
            _3038 = frontier_phi_58_59_ladder_2;
            _3040 = frontier_phi_58_59_ladder_1;
        }
        float _3045 = isnan(1.0) ? _1060 : (isnan(_1060) ? 1.0 : min(_1060, 1.0));
        _2819 = (_3045 * _3036) + _2255;
        _2821 = (_3045 * _3038) + _2257;
        _2823 = (_3045 * _3040) + _2259;
        _2825 = ((_3030 * _1045) * _3045) + _2600;
        _2827 = ((_3032 * _1047) * _3045) + _2602;
        _2829 = ((_3034 * _1048) * _3045) + _2604;
    }
    else
    {
        _2819 = _2255;
        _2821 = _2257;
        _2823 = _2259;
        _2825 = _2600;
        _2827 = _2602;
        _2829 = _2604;
    }
    float _4842 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _4853 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _4864 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _4875 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _2847 = ((isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0))) * (_2819 + ((isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))) * _1060))) + ((_2825 + ((isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0))) * _1895)) * cbPerFrame._m0[3u].x);
    float _2848 = ((isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0))) * (_2821 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1060))) + ((_2827 + ((isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0))) * _1895)) * cbPerFrame._m0[3u].x);
    float _2849 = ((isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0))) * (_2823 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1060))) + ((_2829 + ((isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0))) * _1895)) * cbPerFrame._m0[3u].x);
    float _2854 = cbInstanceData._m0[_1020 + 6u].w * (isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0)));
    float _2859 = _982 / cbSceneParam._m0[86u].x;
    float _2860 = _983 / cbSceneParam._m0[86u].y;
    vec4 _2874 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2859, _2860, (log2((isnan(cbSceneParam._m0[77u].w) ? _905 : (isnan(_905) ? cbSceneParam._m0[77u].w : min(_905, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2876 = _2874.x;
    float _2877 = _2874.y;
    float _2878 = _2874.z;
    float _2879 = _2874.w;
    float _2972;
    float _2974;
    float _2976;
    float _2978;
    if (_905 > cbSceneParam._m0[78u].w)
    {
        float _2934 = isnan(_905) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _905 : min(cbSceneParam._m0[80u].w, _905));
        float _2935 = _2934 / _905;
        float _2946 = _2935 * _955;
        float _2947 = _956 * _2935;
        float _2948 = (-0.0) - _2947;
        float _2950 = _2935 * _957;
        float _2952 = (cbSceneParam._m0[77u].w * _2948) / _2934;
        float _2953 = _2952 + cbSceneParam._m0[79u].w;
        float _2954 = cbSceneParam._m0[79u].w - _2947;
        float _2960 = sqrt(((_2946 * _2946) + (_2947 * _2947)) + (_2950 * _2950));
        float _2963 = (1.0 - (cbSceneParam._m0[77u].w / _2934)) * _2960;
        float _2968 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2970 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3147;
        if (abs((_2948 - _2952) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3147 = ((((_2953 > 0.0) ? exp2(_2968 * _2953) : (2.0 - exp2(_2970 * _2953))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2963;
        }
        else
        {
            float _3091 = 1.0 / cbSceneParam._m0[80u].x;
            float _3092 = isnan(_2954) ? _2953 : (isnan(_2953) ? _2954 : max(_2953, _2954));
            float _3093 = isnan(_2954) ? _2953 : (isnan(_2953) ? _2954 : min(_2953, _2954));
            float _3102 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : min(_3092, 0.0));
            float _3103 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : min(_3093, 0.0));
            _3147 = ((abs(_2960 / _2948) * cbSceneParam._m0[80u].y) * ((((_3102 - _3103) * 2.0) - ((exp2(_2968 * (isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0)))) - exp2(_2968 * (isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0))))) * _3091)) - ((exp2(_2970 * _3102) - exp2(_2970 * _3103)) * _3091))) + (_2963 * cbSceneParam._m0[80u].z);
        }
        vec4 _3149 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2859, _2860, 1.0), 0.0);
        float _3158 = exp2((_3147 * (-1.44269502162933349609375)) * (1.0 - _3149.w));
        float _3159 = log2(_3158);
        float _3175 = log2(_2879);
        _2972 = (exp2(_3175 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3159 * cbSceneParam._m0[78u].x)) * _3149.x) / cbSceneParam._m0[78u].x)) + _2876;
        _2974 = (exp2(_3175 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3159 * cbSceneParam._m0[78u].y)) * _3149.y) / cbSceneParam._m0[78u].y)) + _2877;
        _2976 = (exp2(_3175 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3159 * cbSceneParam._m0[78u].z)) * _3149.z) / cbSceneParam._m0[78u].z)) + _2878;
        _2978 = _3158 * _2879;
    }
    else
    {
        _2972 = _2876;
        _2974 = _2877;
        _2976 = _2878;
        _2978 = _2879;
    }
    bool _3185;
    vec4 _2988;
    vec4 _3010;
    float _3012;
    float _3016;
    float _3017;
    float _3018;
    float _3019;
    bool _3029;
    for (;;)
    {
        _2988 = cbMatDynParam._m0[0u];
        float _2990 = roundEven(_2988.y);
        bool _2991 = _2990 == 3.0;
        float _2992 = log2(_2978);
        float _2999 = exp2(_2992 * cbSceneParam._m0[78u].x) * _2847;
        float _3000 = exp2(_2992 * cbSceneParam._m0[78u].y) * _2848;
        float _3001 = exp2(_2992 * cbSceneParam._m0[78u].z) * _2849;
        float _3008 = _971 + (-0.5);
        _3010 = cbMtdParam._m0[1u];
        _3012 = _3010.y * _3008;
        float _3015 = (_2990 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3016 = _3015 * (_2991 ? _2999 : (_2999 + (cbSceneParam._m0[72u].w * _2972)));
        _3017 = _3015 * (_2991 ? _3000 : (_3000 + (cbSceneParam._m0[72u].w * _2974)));
        _3018 = _3015 * (_2991 ? _3001 : (_3001 + (cbSceneParam._m0[72u].w * _2976)));
        _3019 = _3008 * 0.999000012874603271484375;
        _3029 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3029)
        {
            if ((cbInstanceData._m0[_1020 + 7u].x + _3019) < 0.5)
            {
                _3185 = true;
                break;
            }
        }
        uint _3126 = _1021 + uint(_2988.w);
        if ((cbInstanceData._m0[_3126].w < 1.0) && ((cbInstanceData._m0[_3126].w + _3019) < 0.5))
        {
            _3185 = true;
            break;
        }
        if ((_3012 + 1.0) < _3010.x)
        {
            _3185 = true;
            break;
        }
        _3185 = false;
        break;
    }
    float _3390;
    if (_3185)
    {
        discard_state = true;
        _3390 = 0.0;
    }
    else
    {
        _3390 = _2854;
    }
    SV_Target.x = _3016;
    SV_Target.y = _3017;
    SV_Target.z = _3018;
    SV_Target.w = _3390;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2854;
    discard_exit();
}


