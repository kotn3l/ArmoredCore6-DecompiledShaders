#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24;
layout(set = 0, binding = 12) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 13) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 18) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in float TEXCOORD_8;
layout(location = 7, component = 1) in float TEXCOORD_9;
layout(location = 7, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1484;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _290 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _294 = _290.z;
    float _307 = exp2(log2((1.0 - _294) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _308 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _309 = isnan(1.0) ? _308 : (isnan(_308) ? 1.0 : min(_308, 1.0));
    vec4 _322 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _330 = log2(0.0);
    float _332 = exp2(_330 * cbMtdParam._m0[23u].x);
    float _333 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _334 = isnan(1.0) ? _333 : (isnan(_333) ? 1.0 : min(_333, 1.0));
    float _343 = exp2(log2(cbMtdParam._m0[23u].y * _294) * cbMtdParam._m0[22u].y);
    float _344 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _345 = isnan(1.0) ? _344 : (isnan(_344) ? 1.0 : min(_344, 1.0));
    vec4 _357 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _360 = _357.y;
    float _363 = (_357.x + (-0.02500000037252902984619140625)) * 8.0;
    float _367 = roundEven(5.0 - _363);
    float _368 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _369 = isnan(4.0) ? _368 : (isnan(_368) ? 4.0 : min(_368, 4.0));
    float _381 = floor(_369);
    vec4 _384 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w, _381));
    float _202[6];
    float _203[6];
    float _204[6];
    _202[0u] = cbMtdParam._m0[17u].x;
    _203[0u] = cbMtdParam._m0[17u].y;
    _204[0u] = cbMtdParam._m0[17u].z;
    _202[1u] = cbMtdParam._m0[15u].x;
    _203[1u] = cbMtdParam._m0[15u].y;
    _204[1u] = cbMtdParam._m0[15u].z;
    _202[2u] = cbMtdParam._m0[14u].x;
    _203[2u] = cbMtdParam._m0[14u].y;
    _204[2u] = cbMtdParam._m0[14u].z;
    _202[3u] = cbMtdParam._m0[13u].x;
    _203[3u] = cbMtdParam._m0[13u].y;
    _204[3u] = cbMtdParam._m0[13u].z;
    _202[4u] = cbMtdParam._m0[12u].x;
    _203[4u] = cbMtdParam._m0[12u].y;
    _204[4u] = cbMtdParam._m0[12u].z;
    _202[5u] = cbMtdParam._m0[18u].x;
    _203[5u] = cbMtdParam._m0[18u].y;
    _204[5u] = cbMtdParam._m0[18u].z;
    float _448 = roundEven(_363);
    float _449 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    uint _451 = uint(int(isnan(5.0) ? _449 : (isnan(_449) ? 5.0 : min(_449, 5.0))));
    vec4 _481 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _492 = cbMtdParam._m0[9u].x * _481.x;
    float _493 = cbMtdParam._m0[9u].y * _481.y;
    float _494 = cbMtdParam._m0[9u].z * _481.z;
    float _501 = ((((((_202[_451] - cbMtdParam._m0[10u].x) * _360) + cbMtdParam._m0[10u].x) * _384.x) - _492) * _345) + _492;
    float _502 = ((((((_203[_451] - cbMtdParam._m0[10u].y) * _360) + cbMtdParam._m0[10u].y) * _384.y) - _493) * _345) + _493;
    float _503 = ((((((_204[_451] - cbMtdParam._m0[10u].z) * _360) + cbMtdParam._m0[10u].z) * _384.z) - _494) * _345) + _494;
    float _509 = exp2(log2(_290.w) * cbMtdParam._m0[23u].w);
    vec4 _522 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _542 = (((cbMtdParam._m0[16u].x * _522.x) - _501) * _509) + _501;
    float _543 = (((cbMtdParam._m0[16u].y * _522.y) - _502) * _509) + _502;
    float _544 = (((cbMtdParam._m0[16u].z * _522.z) - _503) * _509) + _503;
    vec4 _556 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _576 = (((cbMtdParam._m0[19u].x * _556.x) - _542) * _334) + _542;
    float _577 = (((cbMtdParam._m0[19u].y * _556.y) - _543) * _334) + _543;
    float _578 = (((cbMtdParam._m0[19u].z * _556.z) - _544) * _334) + _544;
    vec4 _590 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _615 = (_322.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _590.x) - _576) * _309) + _576);
    float _617 = (_322.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _590.y) - _577) * _309) + _577);
    float _619 = (_322.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _590.z) - _578) * _309) + _578);
    float _623 = cbMtdParam._m0[28u].x * TEXCOORD_8;
    float _632 = (_623 - (((texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _623))) * (cbMtdParam._m0[27u].w + 1.0);
    float _3859 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _633 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _640 = ((cbMtdParam._m0[21u].x - _615) * _633) + _615;
    float _641 = ((cbMtdParam._m0[21u].y - _617) * _633) + _617;
    float _642 = ((cbMtdParam._m0[21u].z - _619) * _633) + _619;
    vec4 _656 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24, SS_ClampLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.z) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.w) + cbTextureTilingScale._m0[11u].w));
    float _664 = (_656.x + (-1.0)) + (cbMtdParam._m0[28u].y * 2.0);
    float _3870 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _670 = exp2(log2(cbMtdParam._m0[28u].w * (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) * cbMtdParam._m0[28u].z);
    float _3881 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _671 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _197[5];
    float _198[5];
    _197[0u] = cbMtdParam._m0[29u].z;
    _198[0u] = cbMtdParam._m0[29u].w;
    _197[1u] = cbMtdParam._m0[31u].z;
    _198[1u] = cbMtdParam._m0[31u].w;
    _197[2u] = cbMtdParam._m0[31u].x;
    _198[2u] = cbMtdParam._m0[31u].y;
    _197[3u] = cbMtdParam._m0[30u].z;
    _198[3u] = cbMtdParam._m0[30u].w;
    _197[4u] = cbMtdParam._m0[30u].x;
    _198[4u] = cbMtdParam._m0[30u].y;
    float _711 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    uint _713 = uint(int(isnan(4.0) ? _711 : (isnan(_711) ? 4.0 : min(_711, 4.0))));
    float _720 = ((_198[_713] - cbMtdParam._m0[22u].z) * _345) + cbMtdParam._m0[22u].z;
    float _723 = ((cbMtdParam._m0[22u].w - _720) * _509) + _720;
    float _726 = ((cbMtdParam._m0[25u].x - _723) * _334) + _723;
    float _729 = ((cbMtdParam._m0[26u].x - _726) * _309) + _726;
    float _731 = _729 - (_729 * _623);
    vec4 _747 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w, _381));
    vec4 _764 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _766 = _764.x;
    float _767 = _764.y;
    float _772 = cbMtdParam._m0[22u].x + _764.z;
    float _775 = (((_747.z + _197[_713]) - _772) * _345) + _772;
    vec4 _787 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _798 = (((_787.z - _775) + cbMtdParam._m0[29u].x) * _509) + _775;
    float _803 = ((((_294 * 2.0) * _798) - _798) * cbMtdParam._m0[24u].w) + _798;
    vec4 _815 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _826 = (((cbMtdParam._m0[23u].z + _815.z) - _803) * _334) + _803;
    vec4 _839 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _850 = (((_839.z - _826) + cbMtdParam._m0[26u].y) * _309) + _826;
    vec4 _865 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _879 = ((cbMtdParam._m0[27u].y * _623) * ((_865.z * cbMtdParam._m0[27u].x) - _850)) + _850;
    float _891 = ((_747.x - _766) * _345) + _766;
    float _892 = ((_747.y - _767) * _345) + _767;
    float _897 = ((_787.x - _891) * _509) + _891;
    float _898 = ((_787.y - _892) * _509) + _892;
    float _903 = ((_815.x - _897) * _334) + _897;
    float _904 = ((_815.y - _898) * _334) + _898;
    float _913 = ((((_839.x - _903) * _309) + _903) * 2.0) + (-1.0);
    float _914 = ((((_839.y - _904) * _309) + _904) * 2.0) + (-1.0);
    float _915 = dot(vec2(_913, _914), vec2(_913, _914));
    float _3902 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _920 = sqrt(1.0 - (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))));
    float _930 = ((cbMtdParam._m0[25u].y * ((_290.x * 2.0) + (-1.0))) + _913) + ((((_865.x * 2.0) + (-1.0)) * _623) * cbMtdParam._m0[26u].w);
    float _931 = ((cbMtdParam._m0[25u].y * ((_290.y * 2.0) + (-1.0))) + _914) + (((cbMtdParam._m0[28u].x * TEXCOORD_9) * ((_865.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _934 = fma(_920, _239 * NORMAL.x, fma(_931, _246 * TANGENT.x, (_232 * _224) * _930));
    float _937 = fma(_920, _239 * NORMAL.y, fma(_931, _246 * TANGENT.y, (_232 * _225) * _930));
    float _940 = fma(_920, _239 * NORMAL.z, fma(_931, _246 * TANGENT.z, (_232 * _226) * _930));
    float _944 = inversesqrt(dot(vec3(_934, _937, _940), vec3(_934, _937, _940)));
    float _945 = _944 * _934;
    float _946 = _944 * _937;
    float _947 = _944 * _940;
    float _3913 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _948 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _3924 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _949 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _3935 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _3946 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _3957 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _3968 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _953 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _969 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1009 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1019 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1009);
    float _1020 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1009);
    float _1021 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1009);
    float _1025 = inversesqrt(dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021)));
    float _1026 = _1019 * _1025;
    float _1027 = _1020 * _1025;
    float _1028 = _1021 * _1025;
    float _1034 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1035 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1053 = fma(_947, cbSceneParam._m0[5u].z, fma(_946, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _945));
    float _1056 = fma(_947, cbSceneParam._m0[6u].z, fma(_946, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _945));
    float _1059 = fma(_947, cbSceneParam._m0[7u].z, fma(_946, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _945));
    uint _1072 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1074 = (_1072 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1080 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0)))) * cbInstanceData._m0[_1074].x;
    float _1081 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0)))) * cbInstanceData._m0[_1074].y;
    float _1082 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0)))) * cbInstanceData._m0[_1074].z;
    float _3979 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _1083 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _3990 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _1084 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _4001 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    float _1085 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _1086 = 1.0 - _953;
    float _1087 = _1083 * _1086;
    float _1088 = _1084 * _1086;
    float _1089 = _1085 * _1086;
    float _1094 = (_1083 + (-0.039999999105930328369140625)) * _953;
    float _1095 = (_1084 + (-0.039999999105930328369140625)) * _953;
    float _1096 = (_1085 + (-0.039999999105930328369140625)) * _953;
    float _1097 = _1094 + 0.039999999105930328369140625;
    float _1099 = _1095 + 0.039999999105930328369140625;
    float _1100 = _1096 + 0.039999999105930328369140625;
    vec4 _1109 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1034, cbSceneParam._m0[86u].y * _1035));
    float _1112 = _1109.x * TEXCOORD_5.w;
    float _1113 = dot(vec3(_945, _946, _947), vec3(_1026, _1027, _1028));
    float _1116 = _1113 * 2.0;
    float _1120 = (_1116 * _945) - _1026;
    float _1121 = (_1116 * _946) - _1027;
    float _1122 = (_1116 * _947) - _1028;
    float _1126 = abs(dot(vec3(_1026, _1027, _1028), vec3(_945, _946, _947)));
    float _4012 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _1128 = sqrt(_949);
    float _1139 = exp2((_1128 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1128 * 3.0));
    float _1145 = (1.0 - _1139) * ((_1128 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1146 = _1139 * _1128;
    float _1174 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1178 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1182 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1483;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1208 = fma(_1182, cbModelParam._m0[26u].z, fma(_1178, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1174));
        float _1212 = fma(_1182, cbModelParam._m0[27u].z, fma(_1178, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1174));
        float _1216 = fma(_1182, cbModelParam._m0[28u].z, fma(_1178, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1174));
        float _1241 = _1174 + _945;
        float _1242 = _1178 + _946;
        float _1243 = _1182 + _947;
        float _1253 = fma(_1243, cbModelParam._m0[26u].z, fma(_1242, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1241)) - _1208;
        float _1254 = fma(_1243, cbModelParam._m0[27u].z, fma(_1242, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1241)) - _1212;
        float _1255 = fma(_1243, cbModelParam._m0[28u].z, fma(_1242, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1241)) - _1216;
        float _1259 = inversesqrt(dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255)));
        float _1272 = ((_1259 * _1253) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1208 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1273 = ((_1259 * _1254) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1212 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1274 = ((_1259 * _1255) / cbModelParam._m0[34u].z) + ((((((_1216 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1284 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        float _1311 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1277.x + (-0.5));
        float _1313 = _1311 * (_1277.y + (-0.5));
        float _1314 = _1311 * (_1277.z + (-0.5));
        float _1321 = exp2((_1284.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1284.x + (-0.5));
        float _1323 = _1321 * (_1284.y + (-0.5));
        float _1324 = _1321 * (_1284.z + (-0.5));
        float _1331 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1291.x + (-0.5));
        float _1333 = _1331 * (_1291.y + (-0.5));
        float _1334 = _1331 * (_1291.z + (-0.5));
        float _1341 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1298.x + (-0.5));
        float _1343 = _1341 * (_1298.y + (-0.5));
        float _1344 = _1341 * (_1298.z + (-0.5));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = _1312 * 0.5;
        float _1349 = _1322 * 0.5;
        float _1350 = _1332 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1365 = (dot(vec3(_945, _946, _947), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _4038 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1375 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _4049 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _4060 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_1377 + 1.0))) + _1382) * _1345;
        float _1392 = _1313 * 0.5;
        float _1393 = _1323 * 0.5;
        float _1394 = _1333 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_945, _946, _947), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _4071 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _4082 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _4093 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_1419 + 1.0))) + _1424) * _1346;
        float _1434 = _1314 * 0.5;
        float _1435 = _1324 * 0.5;
        float _1436 = _1334 * 0.5;
        float _1437 = dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436));
        float _1442 = (_1437 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1437);
        float _1450 = (dot(vec3(_945, _946, _947), vec3(_1442 * _1434, _1442 * _1435, _1442 * _1436)) + 1.0) * 0.5;
        float _4104 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1459 = sqrt(((_1435 * _1435) + (_1434 * _1434)) + (_1436 * _1436)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _4115 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1461 = _1460 * 2.0;
        float _1465 = (1.0 - _1460) / (_1460 + 1.0);
        float _4126 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1475 = ((((1.0 - _1466) * (_1461 + 2.0)) * exp2(log2(isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_1461 + 1.0))) + _1466) * _1347;
        _1483 = _1314;
        _1485 = _1313;
        _1486 = _1312;
        _1487 = _1324;
        _1488 = _1323;
        _1489 = _1322;
        _1490 = _1334;
        _1491 = _1333;
        _1492 = _1332;
        _1493 = _1347;
        _1494 = _1346;
        _1495 = _1345;
        _1496 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
        _1497 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
        _1498 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)));
    }
    else
    {
        _1483 = _1484;
        _1485 = _1484;
        _1486 = _1484;
        _1487 = _1484;
        _1488 = _1484;
        _1489 = _1484;
        _1490 = _1484;
        _1491 = _1484;
        _1492 = _1484;
        _1493 = _1484;
        _1494 = _1484;
        _1495 = _1484;
        _1496 = 0.0;
        _1497 = 0.0;
        _1498 = 0.0;
    }
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1521 = fma(_1182, cbModelParam._m0[30u].z, fma(_1178, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1174));
        float _1525 = fma(_1182, cbModelParam._m0[31u].z, fma(_1178, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1174));
        float _1529 = fma(_1182, cbModelParam._m0[32u].z, fma(_1178, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1174));
        float _1552 = _1174 + _945;
        float _1553 = _1178 + _946;
        float _1554 = _1182 + _947;
        float _1564 = fma(_1554, cbModelParam._m0[30u].z, fma(_1553, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1552)) - _1521;
        float _1565 = fma(_1554, cbModelParam._m0[31u].z, fma(_1553, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1552)) - _1525;
        float _1566 = fma(_1554, cbModelParam._m0[32u].z, fma(_1553, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1552)) - _1529;
        float _1570 = inversesqrt(dot(vec3(_1564, _1565, _1566), vec3(_1564, _1565, _1566)));
        float _1583 = ((_1570 * _1564) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1521 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1584 = ((_1570 * _1565) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1525 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1585 = ((_1570 * _1566) / cbModelParam._m0[35u].z) + ((((((_1529 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1587 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1583, _1584, _1585), 0.0);
        vec4 _1594 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1583, _1584, _1585), 0.0);
        vec4 _1601 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1583, _1584, _1585), 0.0);
        vec4 _1608 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1583, _1584, _1585), 0.0);
        float _1620 = exp2((_1587.w + (-0.5)) * 20.0) * 2.0;
        float _1621 = _1620 * (_1587.x + (-0.5));
        float _1622 = _1620 * (_1587.y + (-0.5));
        float _1623 = _1620 * (_1587.z + (-0.5));
        float _1630 = exp2((_1594.w + (-0.5)) * 20.0) * 2.0;
        float _1631 = _1630 * (_1594.x + (-0.5));
        float _1632 = _1630 * (_1594.y + (-0.5));
        float _1633 = _1630 * (_1594.z + (-0.5));
        float _1640 = exp2((_1601.w + (-0.5)) * 20.0) * 2.0;
        float _1641 = _1640 * (_1601.x + (-0.5));
        float _1642 = _1640 * (_1601.y + (-0.5));
        float _1643 = _1640 * (_1601.z + (-0.5));
        float _1650 = exp2((_1608.w + (-0.5)) * 20.0) * 2.0;
        float _1651 = _1650 * (_1608.x + (-0.5));
        float _1652 = _1650 * (_1608.y + (-0.5));
        float _1653 = _1650 * (_1608.z + (-0.5));
        float _1654 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1655 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1656 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1657 = _1621 * 0.5;
        float _1658 = _1631 * 0.5;
        float _1659 = _1641 * 0.5;
        float _1660 = dot(vec3(_1657, _1658, _1659), vec3(_1657, _1658, _1659));
        float _1665 = (_1660 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1660);
        float _1673 = (dot(vec3(_945, _946, _947), vec3(_1665 * _1657, _1665 * _1658, _1665 * _1659)) + 1.0) * 0.5;
        float _4167 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1682 = sqrt(((_1658 * _1658) + (_1657 * _1657)) + (_1659 * _1659)) / (_1654 + 9.9999997473787516355514526367188e-06);
        float _4178 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1683 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1684 = _1683 * 2.0;
        float _1688 = (1.0 - _1683) / (_1683 + 1.0);
        float _4189 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1689 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1698 = ((((1.0 - _1689) * (_1684 + 2.0)) * exp2(log2(isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_1684 + 1.0))) + _1689) * _1654;
        float _1699 = _1622 * 0.5;
        float _1700 = _1632 * 0.5;
        float _1701 = _1642 * 0.5;
        float _1702 = dot(vec3(_1699, _1700, _1701), vec3(_1699, _1700, _1701));
        float _1707 = (_1702 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1702);
        float _1715 = (dot(vec3(_945, _946, _947), vec3(_1707 * _1699, _1707 * _1700, _1707 * _1701)) + 1.0) * 0.5;
        float _4200 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1724 = sqrt(((_1700 * _1700) + (_1699 * _1699)) + (_1701 * _1701)) / (_1655 + 9.9999997473787516355514526367188e-06);
        float _4211 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1725 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1726 = _1725 * 2.0;
        float _1730 = (1.0 - _1725) / (_1725 + 1.0);
        float _4222 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1731 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1740 = ((((1.0 - _1731) * (_1726 + 2.0)) * exp2(log2(isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_1726 + 1.0))) + _1731) * _1655;
        float _1741 = _1623 * 0.5;
        float _1742 = _1633 * 0.5;
        float _1743 = _1643 * 0.5;
        float _1744 = dot(vec3(_1741, _1742, _1743), vec3(_1741, _1742, _1743));
        float _1749 = (_1744 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1744);
        float _1757 = (dot(vec3(_945, _946, _947), vec3(_1749 * _1741, _1749 * _1742, _1749 * _1743)) + 1.0) * 0.5;
        float _4233 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1766 = sqrt(((_1742 * _1742) + (_1741 * _1741)) + (_1743 * _1743)) / (_1656 + 9.9999997473787516355514526367188e-06);
        float _4244 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1767 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1768 = _1767 * 2.0;
        float _1772 = (1.0 - _1767) / (_1767 + 1.0);
        float _4255 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1773 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1782 = ((((1.0 - _1773) * (_1768 + 2.0)) * exp2(log2(isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_1768 + 1.0))) + _1773) * _1656;
        _1790 = _1623;
        _1791 = _1622;
        _1792 = _1621;
        _1793 = _1633;
        _1794 = _1632;
        _1795 = _1631;
        _1796 = _1643;
        _1797 = _1642;
        _1798 = _1641;
        _1799 = _1656;
        _1800 = _1655;
        _1801 = _1654;
        _1802 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)));
        _1803 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)));
        _1804 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0)));
    }
    else
    {
        _1790 = _1484;
        _1791 = _1484;
        _1792 = _1484;
        _1793 = _1484;
        _1794 = _1484;
        _1795 = _1484;
        _1796 = _1484;
        _1797 = _1484;
        _1798 = _1484;
        _1799 = _1484;
        _1800 = _1484;
        _1801 = _1484;
        _1802 = 0.0;
        _1803 = 0.0;
        _1804 = 0.0;
    }
    float _1814 = (cbModelParam._m0[1u].x * (_1802 - _1496)) + _1496;
    float _1815 = (cbModelParam._m0[1u].x * (_1803 - _1497)) + _1497;
    float _1816 = (cbModelParam._m0[1u].x * (_1804 - _1498)) + _1498;
    float _1837 = fma(_1816, cbSceneParam._m0[89u].z, fma(_1815, cbSceneParam._m0[89u].y, _1814 * cbSceneParam._m0[89u].x));
    float _1840 = fma(_1816, cbSceneParam._m0[90u].z, fma(_1815, cbSceneParam._m0[90u].y, _1814 * cbSceneParam._m0[90u].x));
    float _1843 = fma(_1816, cbSceneParam._m0[91u].z, fma(_1815, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1814));
    float _1858 = _1120 * 0.5;
    float _1859 = _1121 * 0.5;
    float _1860 = _1122 * 0.5;
    float _1861 = dot(vec4(_1858, _1859, _1860, 1.0), vec4(_1792, _1795, _1798, _1801));
    float _1864 = dot(vec4(_1858, _1859, _1860, 1.0), vec4(_1791, _1794, _1797, _1800));
    float _1867 = dot(vec4(_1858, _1859, _1860, 1.0), vec4(_1790, _1793, _1796, _1799));
    float _1901;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1874 = dot(vec4(_1858, _1859, _1860, 1.0), vec4(_1483, _1487, _1490, _1493));
        float _1878 = dot(vec4(_1858, _1859, _1860, 1.0), vec4(_1485, _1488, _1491, _1494));
        float _1882 = dot(vec4(_1858, _1859, _1860, 1.0), vec4(_1486, _1489, _1492, _1495));
        float _1889 = dot(vec4(cbModelParam._m0[39u]), vec4(_1858, _1859, _1860, 1.0));
        _1901 = dot(vec3(isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0)), isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0)), isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1889) ? 0.0 : (isnan(0.0) ? _1889 : max(0.0, _1889))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1901 = 1.0;
    }
    float _1912;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1903 = dot(vec4(cbModelParam._m0[40u]), vec4(_1858, _1859, _1860, 1.0));
        _1912 = dot(vec3(isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0)), isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0)), isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1903) ? 0.0 : (isnan(0.0) ? _1903 : max(0.0, _1903))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1912 = 1.0;
    }
    float _1916 = (_1912 * cbModelParam._m0[1u].x) + (_1901 * (1.0 - cbModelParam._m0[1u].x));
    float _1926 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _949);
    float _1927 = isnan(_1926) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1926 : min(cbModelParam._m0[25u].z, _1926));
    float _2007;
    float _2009;
    float _2011;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1974 = fma(_1182, cbModelParam._m0[13u].z, fma(_1178, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1174)) + cbModelParam._m0[13u].w;
        float _1978 = fma(_1182, cbModelParam._m0[14u].z, fma(_1178, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1174)) + cbModelParam._m0[14u].w;
        float _1982 = fma(_1182, cbModelParam._m0[15u].z, fma(_1178, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1174)) + cbModelParam._m0[15u].w;
        float _1985 = fma(_1122, cbModelParam._m0[13u].z, fma(_1121, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1120));
        float _1988 = fma(_1122, cbModelParam._m0[14u].z, fma(_1121, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1120));
        float _1991 = fma(_1122, cbModelParam._m0[15u].z, fma(_1121, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1120));
        float _2019;
        if (_1985 > 0.0)
        {
            _2019 = abs((1.0 - _1974) / _1985);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1974 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2019 = frontier_phi_14_12_ladder;
        }
        float _2221;
        if (_1988 > 0.0)
        {
            _2221 = abs((1.0 - _1978) / _1988);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1978 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2221 = frontier_phi_23_19_ladder;
        }
        float _2475;
        if (_1991 > 0.0)
        {
            _2475 = abs((1.0 - _1982) / _1991);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1991 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1982 + 1.0) / _1991);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2475 = frontier_phi_35_30_ladder;
        }
        float _2477 = isnan(_2221) ? _2019 : (isnan(_2019) ? _2221 : min(_2019, _2221));
        float _2478 = isnan(_2475) ? _2477 : (isnan(_2477) ? _2475 : min(_2477, _2475));
        float _2482 = (_2478 * _1985) + _1974;
        float _2483 = (_2478 * _1988) + _1978;
        float _2484 = (_2478 * _1991) + _1982;
        float _2485 = _2478 * 9.9999997473787516355514526367188e-05;
        float _2487 = (-1.0) - _2485;
        float _2489 = _2485 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2484 > _2489) || ((_2484 < _2487) || ((_2483 > _2489) || ((_2483 < _2487) || ((_2482 < _2487) || (_2482 > _2489))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2612 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2484, cbModelParam._m0[9u].z, fma(_2483, cbModelParam._m0[9u].y, _2482 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2484, cbModelParam._m0[10u].z, fma(_2483, cbModelParam._m0[10u].y, _2482 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2484, cbModelParam._m0[11u].z, fma(_2483, cbModelParam._m0[11u].y, _2482 * cbModelParam._m0[11u].x))), _1927);
            frontier_phi_13_35_ladder = _2612.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2612.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2612.x * cbModelParam._m0[1u].y;
        }
        _2007 = frontier_phi_13_35_ladder_2;
        _2009 = frontier_phi_13_35_ladder_1;
        _2011 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1995 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1120, _1121, _1122), _1927);
        _2007 = _1995.x * cbModelParam._m0[1u].y;
        _2009 = _1995.y * cbModelParam._m0[1u].y;
        _2011 = _1995.z * cbModelParam._m0[1u].y;
    }
    float _2015 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _949);
    float _2016 = isnan(_2015) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2015 : min(cbModelParam._m0[25u].w, _2015));
    float _2105;
    float _2107;
    float _2109;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2069 = fma(_1182, cbModelParam._m0[21u].z, fma(_1178, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1174)) + cbModelParam._m0[21u].w;
        float _2073 = fma(_1182, cbModelParam._m0[22u].z, fma(_1178, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1174)) + cbModelParam._m0[22u].w;
        float _2077 = fma(_1182, cbModelParam._m0[23u].z, fma(_1178, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1174)) + cbModelParam._m0[23u].w;
        float _2080 = fma(_1122, cbModelParam._m0[21u].z, fma(_1121, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1120));
        float _2083 = fma(_1122, cbModelParam._m0[22u].z, fma(_1121, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1120));
        float _2086 = fma(_1122, cbModelParam._m0[23u].z, fma(_1121, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1120));
        float _2226;
        if (_2080 > 0.0)
        {
            _2226 = abs((1.0 - _2069) / _2080);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2080 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2069 + 1.0) / _2080);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2226 = frontier_phi_25_21_ladder;
        }
        float _2502;
        if (_2083 > 0.0)
        {
            _2502 = abs((1.0 - _2073) / _2083);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2083 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2073 + 1.0) / _2083);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2502 = frontier_phi_37_32_ladder;
        }
        float _2715;
        if (_2086 > 0.0)
        {
            _2715 = abs((1.0 - _2077) / _2086);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2086 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2077 + 1.0) / _2086);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2715 = frontier_phi_46_43_ladder;
        }
        float _2717 = isnan(_2502) ? _2226 : (isnan(_2226) ? _2502 : min(_2226, _2502));
        float _2718 = isnan(_2715) ? _2717 : (isnan(_2717) ? _2715 : min(_2717, _2715));
        float _2722 = (_2718 * _2080) + _2069;
        float _2723 = (_2718 * _2083) + _2073;
        float _2724 = (_2718 * _2086) + _2077;
        float _2725 = _2718 * 9.9999997473787516355514526367188e-05;
        float _2726 = (-1.0) - _2725;
        float _2728 = _2725 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2724 > _2728) || ((_2724 < _2726) || ((_2723 > _2728) || ((_2723 < _2726) || ((_2722 < _2726) || (_2722 > _2728))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2925 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2724, cbModelParam._m0[17u].z, fma(_2723, cbModelParam._m0[17u].y, _2722 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2724, cbModelParam._m0[18u].z, fma(_2723, cbModelParam._m0[18u].y, _2722 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2724, cbModelParam._m0[19u].z, fma(_2723, cbModelParam._m0[19u].y, _2722 * cbModelParam._m0[19u].x))), _2016);
            frontier_phi_22_46_ladder = _2925.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2925.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2925.x * cbModelParam._m0[1u].z;
        }
        _2105 = frontier_phi_22_46_ladder_2;
        _2107 = frontier_phi_22_46_ladder_1;
        _2109 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2089 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1120, _1121, _1122), _2016);
        _2105 = _2089.x * cbModelParam._m0[1u].z;
        _2107 = _2089.y * cbModelParam._m0[1u].z;
        _2109 = _2089.z * cbModelParam._m0[1u].z;
    }
    float _2122 = (((_1145 * _1097) + _1146) * _1112) * ((cbModelParam._m0[1u].w * (_2105 - _2007)) + _2007);
    float _2124 = (((_1145 * _1099) + _1146) * _1112) * ((cbModelParam._m0[1u].w * (_2107 - _2009)) + _2009);
    float _2126 = (((_1145 * _1100) + _1146) * _1112) * ((cbModelParam._m0[1u].w * (_2109 - _2011)) + _2011);
    float _2129 = fma(_2126, cbSceneParam._m0[89u].z, fma(_2124, cbSceneParam._m0[89u].y, _2122 * cbSceneParam._m0[89u].x));
    float _2132 = fma(_2126, cbSceneParam._m0[90u].z, fma(_2124, cbSceneParam._m0[90u].y, _2122 * cbSceneParam._m0[90u].x));
    float _2135 = fma(_2126, cbSceneParam._m0[91u].z, fma(_2124, cbSceneParam._m0[91u].y, _2122 * cbSceneParam._m0[91u].x));
    uvec4 _2145 = floatBitsToUint(cbInstanceData._m0[_1072 + 5u]);
    uint _2147 = _2145.x * 14u;
    uint _2148 = _2147 + 13u;
    float _2155 = _1112 + (-1.0);
    float _2160 = (cbLight._m0[_2148].x * _2155) + 1.0;
    float _2161 = (cbLight._m0[_2148].y * _2155) + 1.0;
    float _2162 = (cbLight._m0[_2148].z * _2155) + 1.0;
    float _2163 = (cbLight._m0[_2148].w * _2155) + 1.0;
    uint _2164 = _2147 + 5u;
    float _2170 = isnan(1.0) ? _2161 : (isnan(_2161) ? 1.0 : min(_2161, 1.0));
    uint _2174 = _2147 + 4u;
    float _2180 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
    uint _2184 = _2147 | 1u;
    float _2195 = dot(vec3(cbLight._m0[_2147].xyz), vec3(_945, _946, _947));
    float _2198 = dot(vec3(cbLight._m0[_2184].xyz), vec3(_945, _946, _947));
    float _4391 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _4402 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _2203 = (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * 0.3183098733425140380859375;
    float _2205 = (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * 0.3183098733425140380859375;
    float _2212 = ((cbLight._m0[_2164].x * _2170) * _2205) + ((cbLight._m0[_2174].x * _2180) * _2203);
    float _2213 = ((_2170 * cbLight._m0[_2164].y) * _2205) + ((_2180 * cbLight._m0[_2174].y) * _2203);
    float _2214 = ((_2170 * cbLight._m0[_2164].z) * _2205) + ((_2180 * cbLight._m0[_2174].z) * _2203);
    uvec4 _2218 = floatBitsToUint(cbLight._m0[_2147 + 12u]);
    bool _2220 = _2218.x == 0u;
    float _2231;
    float _2233;
    float _2235;
    if (_2220)
    {
        _2231 = _2212;
        _2233 = _2213;
        _2235 = _2214;
    }
    else
    {
        uint _2239 = _2147 + 6u;
        float _2255 = (dot(vec3(cbLight._m0[_2147 + 2u].xyz), vec3(_945, _946, _947)) * 0.5) + 0.5;
        float _2256 = _2255 * _2255;
        float _4413 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2257 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _2258 = isnan(1.0) ? _2162 : (isnan(_2162) ? 1.0 : min(_2162, 1.0));
        _2231 = (((cbLight._m0[_2239].x * 0.3183098733425140380859375) * _2257) * _2258) + _2212;
        _2233 = (((cbLight._m0[_2239].y * 0.3183098733425140380859375) * _2257) * _2258) + _2213;
        _2235 = (((cbLight._m0[_2239].z * 0.3183098733425140380859375) * _2257) * _2258) + _2214;
    }
    bool _2238 = _2218.y == 0u;
    float _2276;
    float _2278;
    float _2280;
    if (_2238)
    {
        _2276 = _2231;
        _2278 = _2233;
        _2280 = _2235;
    }
    else
    {
        uint _2446 = _2147 + 7u;
        float _2462 = (dot(vec3(cbLight._m0[_2147 + 3u].xyz), vec3(_945, _946, _947)) * 0.5) + 0.5;
        float _2463 = _2462 * _2462;
        float _4429 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2464 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _2465 = isnan(1.0) ? _2163 : (isnan(_2163) ? 1.0 : min(_2163, 1.0));
        _2276 = (((cbLight._m0[_2446].x * 0.3183098733425140380859375) * _2464) * _2465) + _2231;
        _2278 = (((cbLight._m0[_2446].y * 0.3183098733425140380859375) * _2464) * _2465) + _2233;
        _2280 = (((cbLight._m0[_2446].z * 0.3183098733425140380859375) * _2464) * _2465) + _2235;
    }
    uint _2283 = _2147 + 8u;
    float _2296 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2147].w)) * _949) * 0.949999988079071044921875);
    float _2297 = _2296 * _2296;
    float _2298 = cbLight._m0[_2147].x + _1026;
    float _2299 = cbLight._m0[_2147].y + _1027;
    float _2300 = cbLight._m0[_2147].z + _1028;
    float _2304 = inversesqrt(dot(vec3(_2298, _2299, _2300), vec3(_2298, _2299, _2300)));
    float _2305 = _2304 * _2298;
    float _2306 = _2304 * _2299;
    float _2307 = _2304 * _2300;
    float _2308 = dot(vec3(_945, _946, _947), vec3(cbLight._m0[_2147].xyz));
    float _4445 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2311 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
    float _4456 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
    float _2312 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
    float _2313 = dot(vec3(_945, _946, _947), vec3(_2305, _2306, _2307));
    float _4467 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2316 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
    float _2317 = dot(vec3(cbLight._m0[_2147].xyz), vec3(_2305, _2306, _2307));
    float _4478 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2321 = _2297 * _2297;
    float _2325 = ((_2316 * _2316) * (_2321 + (-1.0))) + 1.0;
    float _2333 = exp2(log2(1.0 - (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0)))) * 5.0);
    float _2334 = 0.959999978542327880859375 - _1094;
    float _2336 = 0.959999978542327880859375 - _1095;
    float _2337 = 0.959999978542327880859375 - _1096;
    float _2344 = 1.0 - _2297;
    float _2355 = (0.5 / (((_2312 * ((_2311 * _2344) + _2297)) + 9.9999999392252902907785028219223e-09) + (((_2312 * _2344) + _2297) * _2311))) * _2311;
    float _4489 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2357 = (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_2321 / ((_2325 * _2325) * 3.141590118408203125));
    uint _2368 = _2147 + 9u;
    float _2379 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2184].w)) * _949) * 0.949999988079071044921875);
    float _2380 = _2379 * _2379;
    float _2381 = cbLight._m0[_2184].x + _1026;
    float _2382 = cbLight._m0[_2184].y + _1027;
    float _2383 = cbLight._m0[_2184].z + _1028;
    float _2387 = inversesqrt(dot(vec3(_2381, _2382, _2383), vec3(_2381, _2382, _2383)));
    float _2388 = _2387 * _2381;
    float _2389 = _2387 * _2382;
    float _2390 = _2387 * _2383;
    float _2391 = dot(vec3(_945, _946, _947), vec3(cbLight._m0[_2184].xyz));
    float _4500 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2394 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
    float _2395 = dot(vec3(_945, _946, _947), vec3(_2388, _2389, _2390));
    float _4511 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
    float _2398 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
    float _2399 = dot(vec3(cbLight._m0[_2184].xyz), vec3(_2388, _2389, _2390));
    float _4522 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
    float _2403 = _2380 * _2380;
    float _2407 = ((_2398 * _2398) * (_2403 + (-1.0))) + 1.0;
    float _2414 = exp2(log2(1.0 - (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0)))) * 5.0);
    float _2421 = 1.0 - _2380;
    float _2431 = (0.5 / (((_2312 * ((_2394 * _2421) + _2380)) + 9.9999999392252902907785028219223e-09) + (((_2312 * _2421) + _2380) * _2394))) * _2394;
    float _4533 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
    float _2433 = (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_2403 / ((_2407 * _2407) * 3.141590118408203125));
    float _2443 = (((((_2414 * _2334) + _1097) * cbLight._m0[_2368].x) * _2433) * _2170) + (((((_2333 * _2334) + _1097) * cbLight._m0[_2283].x) * _2357) * _2180);
    float _2444 = (((((_2414 * _2336) + _1099) * cbLight._m0[_2368].y) * _2433) * _2170) + (((((_2333 * _2336) + _1099) * cbLight._m0[_2283].y) * _2357) * _2180);
    float _2445 = (((((_2414 * _2337) + _1100) * cbLight._m0[_2368].z) * _2433) * _2170) + (((((_2333 * _2337) + _1100) * cbLight._m0[_2283].z) * _2357) * _2180);
    float _2507;
    float _2509;
    float _2511;
    if (_2220)
    {
        _2507 = _2443;
        _2509 = _2444;
        _2511 = _2445;
    }
    else
    {
        uint _2513 = _2147 + 2u;
        uint _2517 = _2147 + 10u;
        float _2531 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2513].w)) * _949) * 0.949999988079071044921875);
        float _2532 = _2531 * _2531;
        float _2533 = cbLight._m0[_2513].x + _1026;
        float _2534 = cbLight._m0[_2513].y + _1027;
        float _2535 = cbLight._m0[_2513].z + _1028;
        float _2539 = inversesqrt(dot(vec3(_2533, _2534, _2535), vec3(_2533, _2534, _2535)));
        float _2540 = _2539 * _2533;
        float _2541 = _2539 * _2534;
        float _2542 = _2539 * _2535;
        float _2543 = dot(vec3(_945, _946, _947), vec3(cbLight._m0[_2513].xyz));
        float _4544 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2546 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _2547 = dot(vec3(_945, _946, _947), vec3(_2540, _2541, _2542));
        float _4555 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2550 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
        float _2551 = dot(vec3(cbLight._m0[_2513].xyz), vec3(_2540, _2541, _2542));
        float _4566 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2555 = _2532 * _2532;
        float _2559 = ((_2550 * _2550) * (_2555 + (-1.0))) + 1.0;
        float _2566 = exp2(log2(1.0 - (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0)))) * 5.0);
        float _2573 = 1.0 - _2532;
        float _2583 = (0.5 / (((_2312 * ((_2546 * _2573) + _2532)) + 9.9999999392252902907785028219223e-09) + (((_2312 * _2573) + _2532) * _2546))) * _2546;
        float _4577 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2585 = (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_2555 / ((_2559 * _2559) * 3.141590118408203125));
        float _2586 = isnan(1.0) ? _2162 : (isnan(_2162) ? 1.0 : min(_2162, 1.0));
        _2507 = (((((_2566 * _2334) + _1097) * cbLight._m0[_2517].x) * _2585) * _2586) + _2443;
        _2509 = (((((_2566 * _2336) + _1099) * cbLight._m0[_2517].y) * _2585) * _2586) + _2444;
        _2511 = (((((_2566 * _2337) + _1100) * cbLight._m0[_2517].z) * _2585) * _2586) + _2445;
    }
    float _2621;
    float _2623;
    float _2625;
    if (_2238)
    {
        _2621 = _2507;
        _2623 = _2509;
        _2625 = _2511;
    }
    else
    {
        uint _2632 = _2147 + 3u;
        uint _2636 = _2147 + 11u;
        float _2650 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2632].w)) * _949) * 0.949999988079071044921875);
        float _2651 = _2650 * _2650;
        float _2652 = cbLight._m0[_2632].x + _1026;
        float _2653 = cbLight._m0[_2632].y + _1027;
        float _2654 = cbLight._m0[_2632].z + _1028;
        float _2658 = inversesqrt(dot(vec3(_2652, _2653, _2654), vec3(_2652, _2653, _2654)));
        float _2659 = _2658 * _2652;
        float _2660 = _2658 * _2653;
        float _2661 = _2658 * _2654;
        float _2662 = dot(vec3(_945, _946, _947), vec3(cbLight._m0[_2632].xyz));
        float _4593 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        float _2665 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
        float _2666 = dot(vec3(_945, _946, _947), vec3(_2659, _2660, _2661));
        float _4604 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        float _2669 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _2670 = dot(vec3(cbLight._m0[_2632].xyz), vec3(_2659, _2660, _2661));
        float _4615 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2674 = _2651 * _2651;
        float _2678 = ((_2669 * _2669) * (_2674 + (-1.0))) + 1.0;
        float _2685 = exp2(log2(1.0 - (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0)))) * 5.0);
        float _2692 = 1.0 - _2651;
        float _2702 = (0.5 / (((_2312 * ((_2665 * _2692) + _2651)) + 9.9999999392252902907785028219223e-09) + (((_2312 * _2692) + _2651) * _2665))) * _2665;
        float _4626 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
        float _2704 = (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2674 / ((_2678 * _2678) * 3.141590118408203125));
        float _2705 = isnan(1.0) ? _2163 : (isnan(_2163) ? 1.0 : min(_2163, 1.0));
        _2621 = (((((_2685 * _2334) + _1097) * cbLight._m0[_2636].x) * _2704) * _2705) + _2507;
        _2623 = (((((_2685 * _2336) + _1099) * cbLight._m0[_2636].y) * _2704) * _2705) + _2509;
        _2625 = (((((_2685 * _2337) + _1100) * cbLight._m0[_2636].z) * _2704) * _2705) + _2511;
    }
    float _2840;
    float _2842;
    float _2844;
    float _2846;
    float _2848;
    float _2850;
    if (_2145.y == 0u)
    {
        float _2780 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2781 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2780;
        float _2782 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2780;
        float _2783 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2780;
        uvec4 _2795 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2796 = _2795.x;
        uint _2807 = uint((float(_2795.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1035) / _2796))) + floor(float(uint(cbSceneParam._m0[85u].x * _1034) / _2796)));
        float _2817 = (log2(_2783 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2818 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        uint _2821 = uint(isnan(14.0) ? _2818 : (isnan(_2818) ? 14.0 : min(_2818, 14.0)));
        uvec4 _2826 = texelFetch(g_lightClusterGridBuffer, int(((_2821 << 2u) + (_2807 << 6u)) >> 2u));
        uint _2827 = _2826.x;
        uint _2828 = _2795.z;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        float _2938;
        float _2940;
        if (((((1u << ((_2828 >> 4u) & 15u)) + 4294967295u) & _2827) == 0u) || ((_2828 & 240u) == 0u))
        {
            _2930 = 0.0;
            _2932 = 0.0;
            _2934 = 0.0;
            _2936 = 0.0;
            _2938 = 0.0;
            _2940 = 0.0;
        }
        else
        {
            float _2931;
            float _2933;
            float _2935;
            float _2937;
            float _2939;
            float _2941;
            float _3075 = 0.0;
            float _3076 = 0.0;
            float _3077 = 0.0;
            float _3078 = 0.0;
            float _3079 = 0.0;
            float _3080 = 0.0;
            uint _3081 = 0u;
            uint _3090;
            bool _3091;
            for (;;)
            {
                _3090 = texelFetch(g_lightClassification, int((((_2821 << 5u) + (_2807 << 9u)) + (_3081 << 2u)) >> 2u)).x;
                _3091 = _3090 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3091)
                {
                    frontier_phi_61_pred = _3075;
                    frontier_phi_61_pred_1 = _3080;
                    frontier_phi_61_pred_2 = _3079;
                    frontier_phi_61_pred_3 = _3078;
                    frontier_phi_61_pred_4 = _3077;
                    frontier_phi_61_pred_5 = _3076;
                }
                else
                {
                    float _3199;
                    float _3200;
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    uint _3205;
                    _3199 = _3075;
                    _3200 = _3076;
                    _3201 = _3077;
                    _3202 = _3078;
                    _3203 = _3079;
                    _3204 = _3080;
                    _3205 = _3090;
                    float _3131;
                    float _3132;
                    float _3133;
                    float _3134;
                    float _3135;
                    float _3136;
                    for (;;)
                    {
                        uint _3209 = uint(findLSB(_3205)) + (_3081 << 5u);
                        uint _3206 = (_3205 + 4294967295u) & _3205;
                        uint _3211 = _3209 * 48u;
                        vec4 _3225 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3211)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 3u)).x));
                        uint _3231 = (_3209 * 48u) + 4u;
                        vec4 _3244 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3231)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 3u)).x));
                        uint _3250 = (_3209 * 48u) + 8u;
                        vec3 _3261 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3250)).x, texelFetch(g_PointLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3250 + 2u)).x));
                        float _3265 = _3225.x - _2781;
                        float _3266 = _3225.y - _2782;
                        float _3267 = _3225.z - _2783;
                        float _3268 = dot(vec3(_3265, _3266, _3267), vec3(_3265, _3266, _3267));
                        float _3271 = inversesqrt(_3268);
                        float _3272 = _3271 * _3265;
                        float _3273 = _3271 * _3266;
                        float _3274 = _3271 * _3267;
                        float _3275 = dot(vec3(_1053, _1056, _1059), vec3(_3272, _3273, _3274));
                        float _3280 = 1.0 - (_3268 * _3225.w);
                        float _4652 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                        float _3281 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                        float _3282 = sqrt(_3268) * _3244.w;
                        float _3285 = 1.39999997615814208984375 / (_3282 + 1.39999997615814208984375);
                        float _3286 = _3285 * _3285;
                        float _3289 = ((1.0 - _3286) * _3275) + _3286;
                        float _3292 = _3282 * _3282;
                        float _3296 = ((isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0))) * _3281) / ((_3292 * 0.699999988079071044921875) + 1.0);
                        float _3300 = (-0.0) - _2781;
                        float _3301 = (-0.0) - _2782;
                        float _3302 = (-0.0) - _2783;
                        float _3306 = inversesqrt(dot(vec3(_3300, _3301, _3302), vec3(_3300, _3301, _3302)));
                        float _3307 = _3306 * _3300;
                        float _3308 = _3306 * _3301;
                        float _3309 = _3306 * _3302;
                        float _3317 = exp2(log2(1.0 / ((_3292 * 3.5) + 5.0)) * 0.25);
                        float _3318 = 1.0 - _1128;
                        float _3325 = sqrt(1.0 - ((1.0 - (_3318 * _3318)) * (1.0 - (_3317 * _3317))));
                        float _3326 = _3325 * _3325;
                        float _3327 = _3326 * _3326;
                        float _3328 = _3307 + _3272;
                        float _3329 = _3308 + _3273;
                        float _3330 = _3309 + _3274;
                        float _3334 = inversesqrt(dot(vec3(_3328, _3329, _3330), vec3(_3328, _3329, _3330)));
                        float _3338 = dot(vec3(_1053, _1056, _1059), vec3(_3307, _3308, _3309));
                        float _4668 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                        float _3341 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                        float _3342 = dot(vec3(_1053, _1056, _1059), vec3(_3334 * _3328, _3334 * _3329, _3334 * _3330));
                        float _4679 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                        float _3345 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                        float _3349 = ((_3345 * _3345) * (_3327 + (-1.0))) + 1.0;
                        float _3350 = _3285 * _3326;
                        float _3351 = _3350 * _3350;
                        float _3354 = ((1.0 - _3351) * _3275) + _3351;
                        float _4690 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                        float _3355 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                        float _3356 = 1.0 - _3326;
                        float _3366 = (0.5 / (((_3355 * ((_3341 * _3356) + _3326)) + 9.9999999392252902907785028219223e-09) + (((_3355 * _3356) + _3326) * _3341))) * _3355;
                        float _4701 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                        float _3377 = (((_3327 * 3.1415927410125732421875) * (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0)))) / ((_3349 * _3349) * ((_3292 * 2.1991131305694580078125) + 3.141590118408203125))) * _3281;
                        _3134 = (_3296 * _3244.x) + _3202;
                        _3135 = (_3296 * _3244.y) + _3203;
                        _3136 = (_3296 * _3244.z) + _3204;
                        _3131 = (_3377 * _3261.x) + _3199;
                        _3132 = (_3377 * _3261.y) + _3200;
                        _3133 = (_3377 * _3261.z) + _3201;
                        if (_3206 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3199 = _3131;
                            _3200 = _3132;
                            _3201 = _3133;
                            _3202 = _3134;
                            _3203 = _3135;
                            _3204 = _3136;
                            _3205 = _3206;
                        }
                    }
                    frontier_phi_61_pred = _3131;
                    frontier_phi_61_pred_1 = _3136;
                    frontier_phi_61_pred_2 = _3135;
                    frontier_phi_61_pred_3 = _3134;
                    frontier_phi_61_pred_4 = _3133;
                    frontier_phi_61_pred_5 = _3132;
                }
                _2931 = frontier_phi_61_pred;
                _2941 = frontier_phi_61_pred_1;
                _2939 = frontier_phi_61_pred_2;
                _2937 = frontier_phi_61_pred_3;
                _2935 = frontier_phi_61_pred_4;
                _2933 = frontier_phi_61_pred_5;
                uint _3082 = _3081 + 1u;
                if (_3082 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3075 = _2931;
                    _3076 = _2933;
                    _3077 = _2935;
                    _3078 = _2937;
                    _3079 = _2939;
                    _3080 = _2941;
                    _3081 = _3082;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2930 = _2931;
            _2932 = _2933;
            _2934 = _2935;
            _2936 = _2937;
            _2938 = _2939;
            _2940 = _2941;
        }
        uvec4 _2944 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2945 = _2944.z;
        uint _2947 = (_2945 >> 8u) & 15u;
        float _3043;
        float _3045;
        float _3047;
        float _3049;
        float _3051;
        float _3053;
        if (((4294967295u << _2947) & _2827) == 0u)
        {
            _3043 = _2930;
            _3045 = _2932;
            _3047 = _2934;
            _3049 = _2936;
            _3051 = _2938;
            _3053 = _2940;
        }
        else
        {
            float _3068 = inversesqrt(dot(vec3(_2781, _2782, _2783), vec3(_2781, _2782, _2783)));
            float _3069 = _3068 * _2781;
            float _3070 = _3068 * _2782;
            float _3071 = _3068 * _2783;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2947 < ((_2945 >> 12u) & 15u))
            {
                float _3044;
                float _3046;
                float _3048;
                float _3050;
                float _3052;
                float _3054;
                float _3182 = _2930;
                float _3183 = _2932;
                float _3184 = _2934;
                float _3185 = _2936;
                float _3186 = _2938;
                float _3187 = _2940;
                uint _3188 = _2947;
                uint _3197;
                bool _3198;
                for (;;)
                {
                    _3197 = texelFetch(g_lightClassification, int((((_2821 << 5u) + (_2807 << 9u)) + (_3188 << 2u)) >> 2u)).x;
                    _3198 = _3197 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3198)
                    {
                        frontier_phi_67_pred = _3185;
                        frontier_phi_67_pred_1 = _3186;
                        frontier_phi_67_pred_2 = _3187;
                        frontier_phi_67_pred_3 = _3184;
                        frontier_phi_67_pred_4 = _3183;
                        frontier_phi_67_pred_5 = _3182;
                    }
                    else
                    {
                        float _3382;
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3675;
                        float _3676;
                        float _3677;
                        float _3678;
                        float _3679;
                        float _3680;
                        float _3395 = _3182;
                        float _3396 = _3183;
                        float _3397 = _3184;
                        float _3398 = _3185;
                        float _3399 = _3186;
                        float _3400 = _3187;
                        uint _3401 = _3197;
                        uint _3402;
                        vec4 _3427;
                        float _3428;
                        vec4 _3443;
                        vec3 _3455;
                        vec4 _3470;
                        vec4 _3485;
                        float _3531;
                        bool _3532;
                        for (;;)
                        {
                            uint _3412 = ((_3188 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3401));
                            _3402 = (_3401 + 4294967295u) & _3401;
                            uint _3414 = _3412 * 40u;
                            _3427 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 3u)).x));
                            _3428 = _3427.w;
                            uint _3430 = (_3412 * 40u) + 4u;
                            _3443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 3u)).x));
                            uint _3445 = (_3412 * 40u) + 8u;
                            _3455 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3445)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 2u)).x));
                            uint _3457 = (_3412 * 40u) + 16u;
                            _3470 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3457)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 3u)).x));
                            uint _3472 = (_3412 * 40u) + 20u;
                            _3485 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 3u)).x));
                            uint _3487 = (_3412 * 40u) + 24u;
                            vec4 _3500 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 3u)).x));
                            uint _3506 = (_3412 * 40u) + 28u;
                            vec4 _3519 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 3u)).x));
                            _3531 = fma(_2783, _3519.z, fma(_2782, _3519.y, _3519.x * _2781)) + _3519.w;
                            _3532 = !((fma(_2783, _3500.z, fma(_2782, _3500.y, _3500.x * _2781)) + _3500.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3532)
                            {
                                float _3559 = _3427.x - _2781;
                                float _3560 = _3427.y - _2782;
                                float _3561 = _3427.z - _2783;
                                float _3562 = dot(vec3(_3559, _3560, _3561), vec3(_3559, _3560, _3561));
                                float _3565 = inversesqrt(_3562);
                                float _3566 = _3565 * _3559;
                                float _3567 = _3565 * _3560;
                                float _3568 = _3565 * _3561;
                                float _3572 = 1.0 - (_3562 / (_3428 * _3428));
                                float _4712 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                                float _3573 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
                                float _3577 = sqrt(_3562) * _3443.w;
                                float _3579 = 1.39999997615814208984375 / (_3577 + 1.39999997615814208984375);
                                float _3580 = _3579 * _3579;
                                float _3583 = ((1.0 - _3580) * dot(vec3(_3566, _3567, _3568), vec3(_1053, _1056, _1059))) + _3580;
                                float _3586 = _3577 * _3577;
                                float _3590 = (fma(_2783, _3470.z, fma(_2782, _3470.y, _3470.x * _2781)) + _3470.w) / _3531;
                                float _3591 = (fma(_2783, _3485.z, fma(_2782, _3485.y, _3485.x * _2781)) + _3485.w) / _3531;
                                float _3595 = 1.0 - dot(vec2(_3590, _3591), vec2(_3590, _3591));
                                float _4728 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                                float _3596 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                                float _3597 = _3596 * (((isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0))) * _3573) / ((_3586 * 0.699999988079071044921875) + 1.0));
                                float _3609 = exp2(log2(1.0 / ((_3586 * 3.5) + 5.0)) * 0.25);
                                float _3610 = 1.0 - _1128;
                                float _3617 = sqrt(1.0 - ((1.0 - (_3610 * _3610)) * (1.0 - (_3609 * _3609))));
                                float _3618 = _3617 * _3617;
                                float _3619 = _3618 * _3618;
                                float _3620 = _3566 - _3069;
                                float _3621 = _3567 - _3070;
                                float _3622 = _3568 - _3071;
                                float _3626 = inversesqrt(dot(vec3(_3620, _3621, _3622), vec3(_3620, _3621, _3622)));
                                float _3630 = dot(vec3(_1053, _1056, _1059), vec3((-0.0) - _3069, (-0.0) - _3070, (-0.0) - _3071));
                                float _4739 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                                float _3633 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                                float _3634 = dot(vec3(_1053, _1056, _1059), vec3(_3626 * _3620, _3626 * _3621, _3626 * _3622));
                                float _4750 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                                float _3637 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                                float _3641 = ((_3637 * _3637) * (_3619 + (-1.0))) + 1.0;
                                float _3642 = _3579 * _3618;
                                float _3643 = _3642 * _3642;
                                float _3649 = ((1.0 - _3643) * dot(vec3(_1053, _1056, _1059), vec3(_3566, _3567, _3568))) + _3643;
                                float _4761 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0));
                                float _3650 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                                float _3651 = 1.0 - _3618;
                                float _3661 = (0.5 / (((_3650 * ((_3633 * _3651) + _3618)) + 9.9999999392252902907785028219223e-09) + (((_3650 * _3651) + _3618) * _3633))) * _3650;
                                float _4772 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                                float _3671 = (_3596 * _3573) * (((_3619 * 3.1415927410125732421875) * (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0)))) / ((_3641 * _3641) * ((_3586 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3671 * _3455.x;
                                frontier_phi_73_pred_1 = _3671 * _3455.y;
                                frontier_phi_73_pred_2 = _3597 * _3443.z;
                                frontier_phi_73_pred_3 = _3597 * _3443.y;
                                frontier_phi_73_pred_4 = _3597 * _3443.x;
                                frontier_phi_73_pred_5 = _3671 * _3455.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3675 = frontier_phi_73_pred;
                            _3676 = frontier_phi_73_pred_1;
                            _3680 = frontier_phi_73_pred_2;
                            _3679 = frontier_phi_73_pred_3;
                            _3678 = frontier_phi_73_pred_4;
                            _3677 = frontier_phi_73_pred_5;
                            _3385 = _3678 + _3398;
                            _3386 = _3679 + _3399;
                            _3387 = _3680 + _3400;
                            _3382 = _3675 + _3395;
                            _3383 = _3676 + _3396;
                            _3384 = _3677 + _3397;
                            if (_3402 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3395 = _3382;
                                _3396 = _3383;
                                _3397 = _3384;
                                _3398 = _3385;
                                _3399 = _3386;
                                _3400 = _3387;
                                _3401 = _3402;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3385;
                        frontier_phi_67_pred_1 = _3386;
                        frontier_phi_67_pred_2 = _3387;
                        frontier_phi_67_pred_3 = _3384;
                        frontier_phi_67_pred_4 = _3383;
                        frontier_phi_67_pred_5 = _3382;
                    }
                    _3050 = frontier_phi_67_pred;
                    _3052 = frontier_phi_67_pred_1;
                    _3054 = frontier_phi_67_pred_2;
                    _3048 = frontier_phi_67_pred_3;
                    _3046 = frontier_phi_67_pred_4;
                    _3044 = frontier_phi_67_pred_5;
                    uint _3189 = _3188 + 1u;
                    if (_3189 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3182 = _3044;
                        _3183 = _3046;
                        _3184 = _3048;
                        _3185 = _3050;
                        _3186 = _3052;
                        _3187 = _3054;
                        _3188 = _3189;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3052;
                frontier_phi_55_56_ladder_1 = _3054;
                frontier_phi_55_56_ladder_2 = _3050;
                frontier_phi_55_56_ladder_3 = _3048;
                frontier_phi_55_56_ladder_4 = _3046;
                frontier_phi_55_56_ladder_5 = _3044;
            }
            else
            {
                frontier_phi_55_56_ladder = _2938;
                frontier_phi_55_56_ladder_1 = _2940;
                frontier_phi_55_56_ladder_2 = _2936;
                frontier_phi_55_56_ladder_3 = _2934;
                frontier_phi_55_56_ladder_4 = _2932;
                frontier_phi_55_56_ladder_5 = _2930;
            }
            _3043 = frontier_phi_55_56_ladder_5;
            _3045 = frontier_phi_55_56_ladder_4;
            _3047 = frontier_phi_55_56_ladder_3;
            _3049 = frontier_phi_55_56_ladder_2;
            _3051 = frontier_phi_55_56_ladder;
            _3053 = frontier_phi_55_56_ladder_1;
        }
        float _3058 = isnan(1.0) ? _1112 : (isnan(_1112) ? 1.0 : min(_1112, 1.0));
        _2840 = (_3058 * _3049) + _2276;
        _2842 = (_3058 * _3051) + _2278;
        _2844 = (_3058 * _3053) + _2280;
        _2846 = ((_3043 * _1097) * _3058) + _2621;
        _2848 = ((_3045 * _1099) * _3058) + _2623;
        _2850 = ((_3047 * _1100) * _3058) + _2625;
    }
    else
    {
        _2840 = _2276;
        _2842 = _2278;
        _2844 = _2280;
        _2846 = _2621;
        _2848 = _2623;
        _2850 = _2625;
    }
    float _4788 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    float _4799 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
    float _4810 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _4821 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _2875 = cbInstanceData._m0[_1072 + 6u].w * (isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0)));
    float _2880 = _1034 / cbSceneParam._m0[86u].x;
    float _2881 = _1035 / cbSceneParam._m0[86u].y;
    vec4 _2895 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2880, _2881, (log2((isnan(cbSceneParam._m0[77u].w) ? _969 : (isnan(_969) ? cbSceneParam._m0[77u].w : min(_969, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2897 = _2895.x;
    float _2898 = _2895.y;
    float _2899 = _2895.z;
    float _2900 = _2895.w;
    float _2993;
    float _2995;
    float _2997;
    float _2999;
    if (_969 > cbSceneParam._m0[78u].w)
    {
        float _2955 = isnan(_969) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _969 : min(cbSceneParam._m0[80u].w, _969));
        float _2956 = _2955 / _969;
        float _2967 = _2956 * _1019;
        float _2968 = _1020 * _2956;
        float _2969 = (-0.0) - _2968;
        float _2971 = _2956 * _1021;
        float _2973 = (cbSceneParam._m0[77u].w * _2969) / _2955;
        float _2974 = _2973 + cbSceneParam._m0[79u].w;
        float _2975 = cbSceneParam._m0[79u].w - _2968;
        float _2981 = sqrt(((_2967 * _2967) + (_2968 * _2968)) + (_2971 * _2971));
        float _2984 = (1.0 - (cbSceneParam._m0[77u].w / _2955)) * _2981;
        float _2989 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2991 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3144;
        if (abs((_2969 - _2973) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3144 = ((((_2974 > 0.0) ? exp2(_2989 * _2974) : (2.0 - exp2(_2991 * _2974))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2984;
        }
        else
        {
            float _3104 = 1.0 / cbSceneParam._m0[80u].x;
            float _3105 = isnan(_2975) ? _2974 : (isnan(_2974) ? _2975 : max(_2974, _2975));
            float _3106 = isnan(_2975) ? _2974 : (isnan(_2974) ? _2975 : min(_2974, _2975));
            float _3115 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : min(_3105, 0.0));
            float _3116 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : min(_3106, 0.0));
            _3144 = ((abs(_2981 / _2969) * cbSceneParam._m0[80u].y) * ((((_3115 - _3116) * 2.0) - ((exp2(_2989 * (isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0)))) - exp2(_2989 * (isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0))))) * _3104)) - ((exp2(_2991 * _3115) - exp2(_2991 * _3116)) * _3104))) + (_2984 * cbSceneParam._m0[80u].z);
        }
        vec4 _3146 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2880, _2881, 1.0), 0.0);
        float _3155 = exp2((_3144 * (-1.44269502162933349609375)) * (1.0 - _3146.w));
        float _3156 = log2(_3155);
        float _3172 = log2(_2900);
        _2993 = (exp2(_3172 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3156 * cbSceneParam._m0[78u].x)) * _3146.x) / cbSceneParam._m0[78u].x)) + _2897;
        _2995 = (exp2(_3172 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3156 * cbSceneParam._m0[78u].y)) * _3146.y) / cbSceneParam._m0[78u].y)) + _2898;
        _2997 = (exp2(_3172 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3156 * cbSceneParam._m0[78u].z)) * _3146.z) / cbSceneParam._m0[78u].z)) + _2899;
        _2999 = _3155 * _2900;
    }
    else
    {
        _2993 = _2897;
        _2995 = _2898;
        _2997 = _2899;
        _2999 = _2900;
    }
    float _3011 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3012 = _3011 == 3.0;
    float _3013 = log2(_2999);
    float _3020 = exp2(_3013 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0))) * (_2840 + ((isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))) * _1112))) + ((_2846 + ((isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0))) * _1916)) * cbPerFrame._m0[3u].x));
    float _3021 = exp2(_3013 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0))) * (_2842 + ((isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))) * _1112))) + ((_2848 + ((isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0))) * _1916)) * cbPerFrame._m0[3u].x));
    float _3022 = exp2(_3013 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0))) * (_2844 + ((isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))) * _1112))) + ((_2850 + ((isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0))) * _1916)) * cbPerFrame._m0[3u].x));
    float _3031 = (_3011 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3031 * (_3012 ? _3020 : (_3020 + (cbSceneParam._m0[72u].w * _2993)));
    SV_Target.y = _3031 * (_3012 ? _3021 : (_3021 + (cbSceneParam._m0[72u].w * _2995)));
    SV_Target.z = _3031 * (_3012 ? _3022 : (_3022 + (cbSceneParam._m0[72u].w * _2997)));
    SV_Target.w = _2875;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2875;
}


