#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24;
layout(set = 0, binding = 12) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 13) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 18) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in float TEXCOORD_8;
layout(location = 7, component = 1) in float TEXCOORD_9;
layout(location = 7, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1523;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _313 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _317 = _313.z;
    float _330 = exp2(log2((1.0 - _317) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _331 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _332 = isnan(1.0) ? _331 : (isnan(_331) ? 1.0 : min(_331, 1.0));
    vec4 _349 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _361 = exp2(log2(_349.w * cbMtdParam._m0[29u].y) * cbMtdParam._m0[23u].x);
    float _362 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _363 = isnan(1.0) ? _362 : (isnan(_362) ? 1.0 : min(_362, 1.0));
    float _372 = exp2(log2(cbMtdParam._m0[23u].y * _317) * cbMtdParam._m0[22u].y);
    float _373 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _374 = isnan(1.0) ? _373 : (isnan(_373) ? 1.0 : min(_373, 1.0));
    float _395 = roundEven(5.0 - ((texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _396 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _397 = isnan(4.0) ? _396 : (isnan(_396) ? 4.0 : min(_396, 4.0));
    float _409 = floor(_397);
    vec4 _412 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w, _409));
    vec4 _436 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _447 = cbMtdParam._m0[9u].x * _436.x;
    float _448 = cbMtdParam._m0[9u].y * _436.y;
    float _449 = cbMtdParam._m0[9u].z * _436.z;
    float _456 = (((cbMtdParam._m0[10u].x * _412.x) - _447) * _374) + _447;
    float _457 = (((cbMtdParam._m0[10u].y * _412.y) - _448) * _374) + _448;
    float _458 = (((cbMtdParam._m0[10u].z * _412.z) - _449) * _374) + _449;
    float _464 = exp2(log2(_313.w) * cbMtdParam._m0[23u].w);
    vec4 _477 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _497 = (((cbMtdParam._m0[16u].x * _477.x) - _456) * _464) + _456;
    float _498 = (((cbMtdParam._m0[16u].y * _477.y) - _457) * _464) + _457;
    float _499 = (((cbMtdParam._m0[16u].z * _477.z) - _458) * _464) + _458;
    vec4 _512 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _532 = (((cbMtdParam._m0[19u].x * _512.x) - _497) * _363) + _497;
    float _533 = (((cbMtdParam._m0[19u].y * _512.y) - _498) * _363) + _498;
    float _534 = (((cbMtdParam._m0[19u].z * _512.z) - _499) * _363) + _499;
    vec4 _547 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _572 = (_349.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _547.x) - _532) * _332) + _532);
    float _574 = (_349.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _547.y) - _533) * _332) + _533);
    float _576 = (_349.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _547.z) - _534) * _332) + _534);
    vec4 _589 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _608 = TEXCOORD_5.x - ((cbMtdParam._m0[24u].x * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625));
    float _610 = _608 * (cbMtdParam._m0[24u].z + 1.0);
    float _3888 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _611 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _618 = (_611 * ((cbMtdParam._m0[11u].x * _589.x) - _572)) + _572;
    float _619 = (((cbMtdParam._m0[11u].y * _589.y) - _574) * _611) + _574;
    float _620 = (((cbMtdParam._m0[11u].z * _589.z) - _576) * _611) + _576;
    float _624 = cbMtdParam._m0[28u].x * TEXCOORD_8;
    float _632 = (_624 - (((texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _624))) * (cbMtdParam._m0[27u].w + 1.0);
    float _3899 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _633 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _640 = ((cbMtdParam._m0[21u].x - _618) * _633) + _618;
    float _641 = ((cbMtdParam._m0[21u].y - _619) * _633) + _619;
    float _642 = ((cbMtdParam._m0[21u].z - _620) * _633) + _620;
    vec4 _655 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24, SS_ClampLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.z) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.w) + cbTextureTilingScale._m0[11u].w));
    float _663 = (_655.x + (-1.0)) + (cbMtdParam._m0[28u].y * 2.0);
    float _3910 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _669 = exp2(log2(cbMtdParam._m0[28u].w * (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) * cbMtdParam._m0[28u].z);
    float _3921 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _670 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _207[5];
    float _208[5];
    _207[0u] = cbMtdParam._m0[29u].z;
    _208[0u] = cbMtdParam._m0[29u].w;
    _207[1u] = cbMtdParam._m0[31u].z;
    _208[1u] = cbMtdParam._m0[31u].w;
    _207[2u] = cbMtdParam._m0[31u].x;
    _208[2u] = cbMtdParam._m0[31u].y;
    _207[3u] = cbMtdParam._m0[30u].z;
    _208[3u] = cbMtdParam._m0[30u].w;
    _207[4u] = cbMtdParam._m0[30u].x;
    _208[4u] = cbMtdParam._m0[30u].y;
    float _710 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    uint _712 = uint(int(isnan(4.0) ? _710 : (isnan(_710) ? 4.0 : min(_710, 4.0))));
    float _719 = ((_208[_712] - cbMtdParam._m0[22u].z) * _374) + cbMtdParam._m0[22u].z;
    float _722 = ((cbMtdParam._m0[22u].w - _719) * _464) + _719;
    float _725 = ((cbMtdParam._m0[25u].x - _722) * _363) + _722;
    float _728 = ((cbMtdParam._m0[26u].x - _725) * _332) + _725;
    float _733 = (cbMtdParam._m0[24u].y + 1.0) * _608;
    float _3942 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _734 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _736 = _728 - (_728 * _734);
    float _738 = _736 - (_736 * _624);
    vec4 _752 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w, _409));
    vec4 _770 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _772 = _770.x;
    float _773 = _770.y;
    float _778 = cbMtdParam._m0[22u].x + _770.z;
    float _781 = (((_752.z + _207[_712]) - _778) * _374) + _778;
    vec4 _794 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _805 = (((_794.z - _781) + cbMtdParam._m0[29u].x) * _464) + _781;
    float _810 = ((((_317 * 2.0) * _805) - _805) * cbMtdParam._m0[24u].w) + _805;
    vec4 _822 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _833 = (((cbMtdParam._m0[23u].z + _822.z) - _810) * _363) + _810;
    vec4 _846 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _857 = (((_846.z - _833) + cbMtdParam._m0[26u].y) * _332) + _833;
    vec4 _869 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _880 = ((_869.z - _857) * _734) + _857;
    vec4 _895 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _909 = ((cbMtdParam._m0[27u].y * _624) * ((_895.z * cbMtdParam._m0[27u].x) - _880)) + _880;
    float _924 = ((_752.x - _772) * _374) + _772;
    float _925 = ((_752.y - _773) * _374) + _773;
    float _930 = ((_794.x - _924) * _464) + _924;
    float _931 = ((_794.y - _925) * _464) + _925;
    float _936 = ((_822.x - _930) * _363) + _930;
    float _937 = ((_822.y - _931) * _363) + _931;
    float _946 = ((((_846.x - _936) * _332) + _936) * 2.0) + (-1.0);
    float _947 = ((((_846.y - _937) * _332) + _937) * 2.0) + (-1.0);
    float _948 = dot(vec2(_946, _947), vec2(_946, _947));
    float _3953 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _953 = sqrt(1.0 - (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))));
    float _969 = (((cbMtdParam._m0[25u].y * ((_313.x * 2.0) + (-1.0))) + _946) + (((((_869.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[25u].z) * _734)) + ((((_895.x * 2.0) + (-1.0)) * _624) * cbMtdParam._m0[26u].w);
    float _970 = (((cbMtdParam._m0[25u].y * ((_313.y * 2.0) + (-1.0))) + _947) + (((((_869.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[25u].z) * _734)) + (((cbMtdParam._m0[28u].x * TEXCOORD_9) * ((_895.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _973 = fma(_953, _243 * NORMAL.x, fma(_970, _250 * TANGENT.x, (_236 * _228) * _969));
    float _976 = fma(_953, _243 * NORMAL.y, fma(_970, _250 * TANGENT.y, (_236 * _229) * _969));
    float _979 = fma(_953, _243 * NORMAL.z, fma(_970, _250 * TANGENT.z, (_236 * _230) * _969));
    float _983 = inversesqrt(dot(vec3(_973, _976, _979), vec3(_973, _976, _979)));
    float _984 = _983 * _973;
    float _985 = _983 * _976;
    float _986 = _983 * _979;
    float _3964 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _987 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _3975 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _988 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _3986 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _3997 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _4008 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _4019 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _992 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _1008 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1048 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1058 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1048);
    float _1059 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1048);
    float _1060 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1048);
    float _1064 = inversesqrt(dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060)));
    float _1065 = _1058 * _1064;
    float _1066 = _1059 * _1064;
    float _1067 = _1060 * _1064;
    float _1073 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1074 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1092 = fma(_986, cbSceneParam._m0[5u].z, fma(_985, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _984));
    float _1095 = fma(_986, cbSceneParam._m0[6u].z, fma(_985, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _984));
    float _1098 = fma(_986, cbSceneParam._m0[7u].z, fma(_985, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _984));
    uint _1111 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1113 = (_1111 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1119 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0)))) * cbInstanceData._m0[_1113].x;
    float _1120 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) * cbInstanceData._m0[_1113].y;
    float _1121 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * cbInstanceData._m0[_1113].z;
    float _4030 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
    float _1122 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _4041 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
    float _1123 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _4052 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
    float _1124 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _1125 = 1.0 - _992;
    float _1126 = _1122 * _1125;
    float _1127 = _1123 * _1125;
    float _1128 = _1124 * _1125;
    float _1133 = (_1122 + (-0.039999999105930328369140625)) * _992;
    float _1134 = (_1123 + (-0.039999999105930328369140625)) * _992;
    float _1135 = (_1124 + (-0.039999999105930328369140625)) * _992;
    float _1136 = _1133 + 0.039999999105930328369140625;
    float _1138 = _1134 + 0.039999999105930328369140625;
    float _1139 = _1135 + 0.039999999105930328369140625;
    vec4 _1148 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1073, cbSceneParam._m0[86u].y * _1074));
    float _1151 = _1148.x * TEXCOORD_5.w;
    float _1152 = dot(vec3(_984, _985, _986), vec3(_1065, _1066, _1067));
    float _1155 = _1152 * 2.0;
    float _1159 = (_1155 * _984) - _1065;
    float _1160 = (_1155 * _985) - _1066;
    float _1161 = (_1155 * _986) - _1067;
    float _1165 = abs(dot(vec3(_1065, _1066, _1067), vec3(_984, _985, _986)));
    float _4063 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
    float _1167 = sqrt(_988);
    float _1178 = exp2((_1167 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1167 * 3.0));
    float _1184 = (1.0 - _1178) * ((_1167 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1185 = _1178 * _1167;
    float _1213 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1217 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1221 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1522;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1247 = fma(_1221, cbModelParam._m0[26u].z, fma(_1217, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1213));
        float _1251 = fma(_1221, cbModelParam._m0[27u].z, fma(_1217, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1213));
        float _1255 = fma(_1221, cbModelParam._m0[28u].z, fma(_1217, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1213));
        float _1280 = _1213 + _984;
        float _1281 = _1217 + _985;
        float _1282 = _1221 + _986;
        float _1292 = fma(_1282, cbModelParam._m0[26u].z, fma(_1281, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1280)) - _1247;
        float _1293 = fma(_1282, cbModelParam._m0[27u].z, fma(_1281, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1280)) - _1251;
        float _1294 = fma(_1282, cbModelParam._m0[28u].z, fma(_1281, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1280)) - _1255;
        float _1298 = inversesqrt(dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294)));
        float _1311 = ((_1298 * _1292) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1247 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1312 = ((_1298 * _1293) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1251 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1313 = ((_1298 * _1294) / cbModelParam._m0[34u].z) + ((((((_1255 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        float _1350 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1351 = _1350 * (_1316.x + (-0.5));
        float _1352 = _1350 * (_1316.y + (-0.5));
        float _1353 = _1350 * (_1316.z + (-0.5));
        float _1360 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1361 = _1360 * (_1323.x + (-0.5));
        float _1362 = _1360 * (_1323.y + (-0.5));
        float _1363 = _1360 * (_1323.z + (-0.5));
        float _1370 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1371 = _1370 * (_1330.x + (-0.5));
        float _1372 = _1370 * (_1330.y + (-0.5));
        float _1373 = _1370 * (_1330.z + (-0.5));
        float _1380 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1381 = _1380 * (_1337.x + (-0.5));
        float _1382 = _1380 * (_1337.y + (-0.5));
        float _1383 = _1380 * (_1337.z + (-0.5));
        float _1384 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1385 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1386 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1387 = _1351 * 0.5;
        float _1388 = _1361 * 0.5;
        float _1389 = _1371 * 0.5;
        float _1390 = dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389));
        float _1395 = (_1390 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1390);
        float _1404 = (dot(vec3(_984, _985, _986), vec3(_1395 * _1387, _1395 * _1388, _1395 * _1389)) + 1.0) * 0.5;
        float _4089 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1414 = sqrt(((_1388 * _1388) + (_1387 * _1387)) + (_1389 * _1389)) / (_1384 + 9.9999997473787516355514526367188e-06);
        float _4100 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1416 = _1415 * 2.0;
        float _1420 = (1.0 - _1415) / (_1415 + 1.0);
        float _4111 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1430 = ((((1.0 - _1421) * (_1416 + 2.0)) * exp2(log2(isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_1416 + 1.0))) + _1421) * _1384;
        float _1431 = _1352 * 0.5;
        float _1432 = _1362 * 0.5;
        float _1433 = _1372 * 0.5;
        float _1434 = dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433));
        float _1439 = (_1434 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1434);
        float _1447 = (dot(vec3(_984, _985, _986), vec3(_1439 * _1431, _1439 * _1432, _1439 * _1433)) + 1.0) * 0.5;
        float _4122 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1456 = sqrt(((_1432 * _1432) + (_1431 * _1431)) + (_1433 * _1433)) / (_1385 + 9.9999997473787516355514526367188e-06);
        float _4133 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1458 = _1457 * 2.0;
        float _1462 = (1.0 - _1457) / (_1457 + 1.0);
        float _4144 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1472 = ((((1.0 - _1463) * (_1458 + 2.0)) * exp2(log2(isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_1458 + 1.0))) + _1463) * _1385;
        float _1473 = _1353 * 0.5;
        float _1474 = _1363 * 0.5;
        float _1475 = _1373 * 0.5;
        float _1476 = dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475));
        float _1481 = (_1476 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1476);
        float _1489 = (dot(vec3(_984, _985, _986), vec3(_1481 * _1473, _1481 * _1474, _1481 * _1475)) + 1.0) * 0.5;
        float _4155 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1498 = sqrt(((_1474 * _1474) + (_1473 * _1473)) + (_1475 * _1475)) / (_1386 + 9.9999997473787516355514526367188e-06);
        float _4166 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1500 = _1499 * 2.0;
        float _1504 = (1.0 - _1499) / (_1499 + 1.0);
        float _4177 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1514 = ((((1.0 - _1505) * (_1500 + 2.0)) * exp2(log2(isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_1500 + 1.0))) + _1505) * _1386;
        _1522 = _1353;
        _1524 = _1352;
        _1525 = _1351;
        _1526 = _1363;
        _1527 = _1362;
        _1528 = _1361;
        _1529 = _1373;
        _1530 = _1372;
        _1531 = _1371;
        _1532 = _1386;
        _1533 = _1385;
        _1534 = _1384;
        _1535 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)));
        _1536 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)));
        _1537 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)));
    }
    else
    {
        _1522 = _1523;
        _1524 = _1523;
        _1525 = _1523;
        _1526 = _1523;
        _1527 = _1523;
        _1528 = _1523;
        _1529 = _1523;
        _1530 = _1523;
        _1531 = _1523;
        _1532 = _1523;
        _1533 = _1523;
        _1534 = _1523;
        _1535 = 0.0;
        _1536 = 0.0;
        _1537 = 0.0;
    }
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    float _1834;
    float _1835;
    float _1836;
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1560 = fma(_1221, cbModelParam._m0[30u].z, fma(_1217, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1213));
        float _1564 = fma(_1221, cbModelParam._m0[31u].z, fma(_1217, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1213));
        float _1568 = fma(_1221, cbModelParam._m0[32u].z, fma(_1217, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1213));
        float _1591 = _1213 + _984;
        float _1592 = _1217 + _985;
        float _1593 = _1221 + _986;
        float _1603 = fma(_1593, cbModelParam._m0[30u].z, fma(_1592, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1591)) - _1560;
        float _1604 = fma(_1593, cbModelParam._m0[31u].z, fma(_1592, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1591)) - _1564;
        float _1605 = fma(_1593, cbModelParam._m0[32u].z, fma(_1592, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1591)) - _1568;
        float _1609 = inversesqrt(dot(vec3(_1603, _1604, _1605), vec3(_1603, _1604, _1605)));
        float _1622 = ((_1609 * _1603) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1560 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1623 = ((_1609 * _1604) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1564 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1624 = ((_1609 * _1605) / cbModelParam._m0[35u].z) + ((((((_1568 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1626 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1622, _1623, _1624), 0.0);
        vec4 _1633 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1622, _1623, _1624), 0.0);
        vec4 _1640 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1622, _1623, _1624), 0.0);
        vec4 _1647 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1622, _1623, _1624), 0.0);
        float _1659 = exp2((_1626.w + (-0.5)) * 20.0) * 2.0;
        float _1660 = _1659 * (_1626.x + (-0.5));
        float _1661 = _1659 * (_1626.y + (-0.5));
        float _1662 = _1659 * (_1626.z + (-0.5));
        float _1669 = exp2((_1633.w + (-0.5)) * 20.0) * 2.0;
        float _1670 = _1669 * (_1633.x + (-0.5));
        float _1671 = _1669 * (_1633.y + (-0.5));
        float _1672 = _1669 * (_1633.z + (-0.5));
        float _1679 = exp2((_1640.w + (-0.5)) * 20.0) * 2.0;
        float _1680 = _1679 * (_1640.x + (-0.5));
        float _1681 = _1679 * (_1640.y + (-0.5));
        float _1682 = _1679 * (_1640.z + (-0.5));
        float _1689 = exp2((_1647.w + (-0.5)) * 20.0) * 2.0;
        float _1690 = _1689 * (_1647.x + (-0.5));
        float _1691 = _1689 * (_1647.y + (-0.5));
        float _1692 = _1689 * (_1647.z + (-0.5));
        float _1693 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1694 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1695 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1696 = _1660 * 0.5;
        float _1697 = _1670 * 0.5;
        float _1698 = _1680 * 0.5;
        float _1699 = dot(vec3(_1696, _1697, _1698), vec3(_1696, _1697, _1698));
        float _1704 = (_1699 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1699);
        float _1712 = (dot(vec3(_984, _985, _986), vec3(_1704 * _1696, _1704 * _1697, _1704 * _1698)) + 1.0) * 0.5;
        float _4218 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1721 = sqrt(((_1697 * _1697) + (_1696 * _1696)) + (_1698 * _1698)) / (_1693 + 9.9999997473787516355514526367188e-06);
        float _4229 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1722 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1723 = _1722 * 2.0;
        float _1727 = (1.0 - _1722) / (_1722 + 1.0);
        float _4240 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1728 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1737 = ((((1.0 - _1728) * (_1723 + 2.0)) * exp2(log2(isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_1723 + 1.0))) + _1728) * _1693;
        float _1738 = _1661 * 0.5;
        float _1739 = _1671 * 0.5;
        float _1740 = _1681 * 0.5;
        float _1741 = dot(vec3(_1738, _1739, _1740), vec3(_1738, _1739, _1740));
        float _1746 = (_1741 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1741);
        float _1754 = (dot(vec3(_984, _985, _986), vec3(_1746 * _1738, _1746 * _1739, _1746 * _1740)) + 1.0) * 0.5;
        float _4251 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1763 = sqrt(((_1739 * _1739) + (_1738 * _1738)) + (_1740 * _1740)) / (_1694 + 9.9999997473787516355514526367188e-06);
        float _4262 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1764 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1765 = _1764 * 2.0;
        float _1769 = (1.0 - _1764) / (_1764 + 1.0);
        float _4273 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1770 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1779 = ((((1.0 - _1770) * (_1765 + 2.0)) * exp2(log2(isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_1765 + 1.0))) + _1770) * _1694;
        float _1780 = _1662 * 0.5;
        float _1781 = _1672 * 0.5;
        float _1782 = _1682 * 0.5;
        float _1783 = dot(vec3(_1780, _1781, _1782), vec3(_1780, _1781, _1782));
        float _1788 = (_1783 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1783);
        float _1796 = (dot(vec3(_984, _985, _986), vec3(_1788 * _1780, _1788 * _1781, _1788 * _1782)) + 1.0) * 0.5;
        float _4284 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1805 = sqrt(((_1781 * _1781) + (_1780 * _1780)) + (_1782 * _1782)) / (_1695 + 9.9999997473787516355514526367188e-06);
        float _4295 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1806 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1807 = _1806 * 2.0;
        float _1811 = (1.0 - _1806) / (_1806 + 1.0);
        float _4306 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1812 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1821 = ((((1.0 - _1812) * (_1807 + 2.0)) * exp2(log2(isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_1807 + 1.0))) + _1812) * _1695;
        _1829 = _1662;
        _1830 = _1661;
        _1831 = _1660;
        _1832 = _1672;
        _1833 = _1671;
        _1834 = _1670;
        _1835 = _1682;
        _1836 = _1681;
        _1837 = _1680;
        _1838 = _1695;
        _1839 = _1694;
        _1840 = _1693;
        _1841 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)));
        _1842 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)));
        _1843 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0)));
    }
    else
    {
        _1829 = _1523;
        _1830 = _1523;
        _1831 = _1523;
        _1832 = _1523;
        _1833 = _1523;
        _1834 = _1523;
        _1835 = _1523;
        _1836 = _1523;
        _1837 = _1523;
        _1838 = _1523;
        _1839 = _1523;
        _1840 = _1523;
        _1841 = 0.0;
        _1842 = 0.0;
        _1843 = 0.0;
    }
    float _1853 = (cbModelParam._m0[1u].x * (_1841 - _1535)) + _1535;
    float _1854 = (cbModelParam._m0[1u].x * (_1842 - _1536)) + _1536;
    float _1855 = (cbModelParam._m0[1u].x * (_1843 - _1537)) + _1537;
    float _1876 = fma(_1855, cbSceneParam._m0[89u].z, fma(_1854, cbSceneParam._m0[89u].y, _1853 * cbSceneParam._m0[89u].x));
    float _1879 = fma(_1855, cbSceneParam._m0[90u].z, fma(_1854, cbSceneParam._m0[90u].y, _1853 * cbSceneParam._m0[90u].x));
    float _1882 = fma(_1855, cbSceneParam._m0[91u].z, fma(_1854, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1853));
    float _1897 = _1159 * 0.5;
    float _1898 = _1160 * 0.5;
    float _1899 = _1161 * 0.5;
    float _1900 = dot(vec4(_1897, _1898, _1899, 1.0), vec4(_1831, _1834, _1837, _1840));
    float _1903 = dot(vec4(_1897, _1898, _1899, 1.0), vec4(_1830, _1833, _1836, _1839));
    float _1906 = dot(vec4(_1897, _1898, _1899, 1.0), vec4(_1829, _1832, _1835, _1838));
    float _1940;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1913 = dot(vec4(_1897, _1898, _1899, 1.0), vec4(_1522, _1526, _1529, _1532));
        float _1917 = dot(vec4(_1897, _1898, _1899, 1.0), vec4(_1524, _1527, _1530, _1533));
        float _1921 = dot(vec4(_1897, _1898, _1899, 1.0), vec4(_1525, _1528, _1531, _1534));
        float _1928 = dot(vec4(cbModelParam._m0[39u]), vec4(_1897, _1898, _1899, 1.0));
        _1940 = dot(vec3(isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0)), isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0)), isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1928) ? 0.0 : (isnan(0.0) ? _1928 : max(0.0, _1928))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1940 = 1.0;
    }
    float _1951;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1942 = dot(vec4(cbModelParam._m0[40u]), vec4(_1897, _1898, _1899, 1.0));
        _1951 = dot(vec3(isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0)), isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0)), isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1942) ? 0.0 : (isnan(0.0) ? _1942 : max(0.0, _1942))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1951 = 1.0;
    }
    float _1955 = (_1951 * cbModelParam._m0[1u].x) + (_1940 * (1.0 - cbModelParam._m0[1u].x));
    float _1965 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _988);
    float _1966 = isnan(_1965) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1965 : min(cbModelParam._m0[25u].z, _1965));
    float _2046;
    float _2048;
    float _2050;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2013 = fma(_1221, cbModelParam._m0[13u].z, fma(_1217, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1213)) + cbModelParam._m0[13u].w;
        float _2017 = fma(_1221, cbModelParam._m0[14u].z, fma(_1217, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1213)) + cbModelParam._m0[14u].w;
        float _2021 = fma(_1221, cbModelParam._m0[15u].z, fma(_1217, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1213)) + cbModelParam._m0[15u].w;
        float _2024 = fma(_1161, cbModelParam._m0[13u].z, fma(_1160, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1159));
        float _2027 = fma(_1161, cbModelParam._m0[14u].z, fma(_1160, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1159));
        float _2030 = fma(_1161, cbModelParam._m0[15u].z, fma(_1160, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1159));
        float _2058;
        if (_2024 > 0.0)
        {
            _2058 = abs((1.0 - _2013) / _2024);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2024 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2013 + 1.0) / _2024);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2058 = frontier_phi_14_12_ladder;
        }
        float _2260;
        if (_2027 > 0.0)
        {
            _2260 = abs((1.0 - _2017) / _2027);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2027 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2017 + 1.0) / _2027);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2260 = frontier_phi_23_19_ladder;
        }
        float _2514;
        if (_2030 > 0.0)
        {
            _2514 = abs((1.0 - _2021) / _2030);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2030 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2021 + 1.0) / _2030);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2514 = frontier_phi_35_30_ladder;
        }
        float _2516 = isnan(_2260) ? _2058 : (isnan(_2058) ? _2260 : min(_2058, _2260));
        float _2517 = isnan(_2514) ? _2516 : (isnan(_2516) ? _2514 : min(_2516, _2514));
        float _2521 = (_2517 * _2024) + _2013;
        float _2522 = (_2517 * _2027) + _2017;
        float _2523 = (_2517 * _2030) + _2021;
        float _2524 = _2517 * 9.9999997473787516355514526367188e-05;
        float _2526 = (-1.0) - _2524;
        float _2528 = _2524 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2523 > _2528) || ((_2523 < _2526) || ((_2522 > _2528) || ((_2522 < _2526) || ((_2521 < _2526) || (_2521 > _2528))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2651 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2523, cbModelParam._m0[9u].z, fma(_2522, cbModelParam._m0[9u].y, _2521 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2523, cbModelParam._m0[10u].z, fma(_2522, cbModelParam._m0[10u].y, _2521 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2523, cbModelParam._m0[11u].z, fma(_2522, cbModelParam._m0[11u].y, _2521 * cbModelParam._m0[11u].x))), _1966);
            frontier_phi_13_35_ladder = _2651.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2651.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2651.x * cbModelParam._m0[1u].y;
        }
        _2046 = frontier_phi_13_35_ladder_2;
        _2048 = frontier_phi_13_35_ladder_1;
        _2050 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2034 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1159, _1160, _1161), _1966);
        _2046 = _2034.x * cbModelParam._m0[1u].y;
        _2048 = _2034.y * cbModelParam._m0[1u].y;
        _2050 = _2034.z * cbModelParam._m0[1u].y;
    }
    float _2054 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _988);
    float _2055 = isnan(_2054) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2054 : min(cbModelParam._m0[25u].w, _2054));
    float _2144;
    float _2146;
    float _2148;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2108 = fma(_1221, cbModelParam._m0[21u].z, fma(_1217, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1213)) + cbModelParam._m0[21u].w;
        float _2112 = fma(_1221, cbModelParam._m0[22u].z, fma(_1217, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1213)) + cbModelParam._m0[22u].w;
        float _2116 = fma(_1221, cbModelParam._m0[23u].z, fma(_1217, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1213)) + cbModelParam._m0[23u].w;
        float _2119 = fma(_1161, cbModelParam._m0[21u].z, fma(_1160, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1159));
        float _2122 = fma(_1161, cbModelParam._m0[22u].z, fma(_1160, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1159));
        float _2125 = fma(_1161, cbModelParam._m0[23u].z, fma(_1160, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1159));
        float _2265;
        if (_2119 > 0.0)
        {
            _2265 = abs((1.0 - _2108) / _2119);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2119 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2108 + 1.0) / _2119);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2265 = frontier_phi_25_21_ladder;
        }
        float _2541;
        if (_2122 > 0.0)
        {
            _2541 = abs((1.0 - _2112) / _2122);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2122 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2112 + 1.0) / _2122);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2541 = frontier_phi_37_32_ladder;
        }
        float _2754;
        if (_2125 > 0.0)
        {
            _2754 = abs((1.0 - _2116) / _2125);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2125 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2116 + 1.0) / _2125);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2754 = frontier_phi_46_43_ladder;
        }
        float _2756 = isnan(_2541) ? _2265 : (isnan(_2265) ? _2541 : min(_2265, _2541));
        float _2757 = isnan(_2754) ? _2756 : (isnan(_2756) ? _2754 : min(_2756, _2754));
        float _2761 = (_2757 * _2119) + _2108;
        float _2762 = (_2757 * _2122) + _2112;
        float _2763 = (_2757 * _2125) + _2116;
        float _2764 = _2757 * 9.9999997473787516355514526367188e-05;
        float _2765 = (-1.0) - _2764;
        float _2767 = _2764 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2763 > _2767) || ((_2763 < _2765) || ((_2762 > _2767) || ((_2762 < _2765) || ((_2761 < _2765) || (_2761 > _2767))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2964 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2763, cbModelParam._m0[17u].z, fma(_2762, cbModelParam._m0[17u].y, _2761 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2763, cbModelParam._m0[18u].z, fma(_2762, cbModelParam._m0[18u].y, _2761 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2763, cbModelParam._m0[19u].z, fma(_2762, cbModelParam._m0[19u].y, _2761 * cbModelParam._m0[19u].x))), _2055);
            frontier_phi_22_46_ladder = _2964.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2964.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2964.x * cbModelParam._m0[1u].z;
        }
        _2144 = frontier_phi_22_46_ladder_2;
        _2146 = frontier_phi_22_46_ladder_1;
        _2148 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2128 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1159, _1160, _1161), _2055);
        _2144 = _2128.x * cbModelParam._m0[1u].z;
        _2146 = _2128.y * cbModelParam._m0[1u].z;
        _2148 = _2128.z * cbModelParam._m0[1u].z;
    }
    float _2161 = (((_1184 * _1136) + _1185) * _1151) * ((cbModelParam._m0[1u].w * (_2144 - _2046)) + _2046);
    float _2163 = (((_1184 * _1138) + _1185) * _1151) * ((cbModelParam._m0[1u].w * (_2146 - _2048)) + _2048);
    float _2165 = (((_1184 * _1139) + _1185) * _1151) * ((cbModelParam._m0[1u].w * (_2148 - _2050)) + _2050);
    float _2168 = fma(_2165, cbSceneParam._m0[89u].z, fma(_2163, cbSceneParam._m0[89u].y, _2161 * cbSceneParam._m0[89u].x));
    float _2171 = fma(_2165, cbSceneParam._m0[90u].z, fma(_2163, cbSceneParam._m0[90u].y, _2161 * cbSceneParam._m0[90u].x));
    float _2174 = fma(_2165, cbSceneParam._m0[91u].z, fma(_2163, cbSceneParam._m0[91u].y, _2161 * cbSceneParam._m0[91u].x));
    uvec4 _2184 = floatBitsToUint(cbInstanceData._m0[_1111 + 5u]);
    uint _2186 = _2184.x * 14u;
    uint _2187 = _2186 + 13u;
    float _2194 = _1151 + (-1.0);
    float _2199 = (cbLight._m0[_2187].x * _2194) + 1.0;
    float _2200 = (cbLight._m0[_2187].y * _2194) + 1.0;
    float _2201 = (cbLight._m0[_2187].z * _2194) + 1.0;
    float _2202 = (cbLight._m0[_2187].w * _2194) + 1.0;
    uint _2203 = _2186 + 5u;
    float _2209 = isnan(1.0) ? _2200 : (isnan(_2200) ? 1.0 : min(_2200, 1.0));
    uint _2213 = _2186 + 4u;
    float _2219 = isnan(1.0) ? _2199 : (isnan(_2199) ? 1.0 : min(_2199, 1.0));
    uint _2223 = _2186 | 1u;
    float _2234 = dot(vec3(cbLight._m0[_2186].xyz), vec3(_984, _985, _986));
    float _2237 = dot(vec3(cbLight._m0[_2223].xyz), vec3(_984, _985, _986));
    float _4442 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _4453 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _2242 = (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * 0.3183098733425140380859375;
    float _2244 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * 0.3183098733425140380859375;
    float _2251 = ((cbLight._m0[_2203].x * _2209) * _2244) + ((cbLight._m0[_2213].x * _2219) * _2242);
    float _2252 = ((_2209 * cbLight._m0[_2203].y) * _2244) + ((_2219 * cbLight._m0[_2213].y) * _2242);
    float _2253 = ((_2209 * cbLight._m0[_2203].z) * _2244) + ((_2219 * cbLight._m0[_2213].z) * _2242);
    uvec4 _2257 = floatBitsToUint(cbLight._m0[_2186 + 12u]);
    bool _2259 = _2257.x == 0u;
    float _2270;
    float _2272;
    float _2274;
    if (_2259)
    {
        _2270 = _2251;
        _2272 = _2252;
        _2274 = _2253;
    }
    else
    {
        uint _2278 = _2186 + 6u;
        float _2294 = (dot(vec3(cbLight._m0[_2186 + 2u].xyz), vec3(_984, _985, _986)) * 0.5) + 0.5;
        float _2295 = _2294 * _2294;
        float _4464 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2296 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _2297 = isnan(1.0) ? _2201 : (isnan(_2201) ? 1.0 : min(_2201, 1.0));
        _2270 = (((cbLight._m0[_2278].x * 0.3183098733425140380859375) * _2296) * _2297) + _2251;
        _2272 = (((cbLight._m0[_2278].y * 0.3183098733425140380859375) * _2296) * _2297) + _2252;
        _2274 = (((cbLight._m0[_2278].z * 0.3183098733425140380859375) * _2296) * _2297) + _2253;
    }
    bool _2277 = _2257.y == 0u;
    float _2315;
    float _2317;
    float _2319;
    if (_2277)
    {
        _2315 = _2270;
        _2317 = _2272;
        _2319 = _2274;
    }
    else
    {
        uint _2485 = _2186 + 7u;
        float _2501 = (dot(vec3(cbLight._m0[_2186 + 3u].xyz), vec3(_984, _985, _986)) * 0.5) + 0.5;
        float _2502 = _2501 * _2501;
        float _4480 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2503 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _2504 = isnan(1.0) ? _2202 : (isnan(_2202) ? 1.0 : min(_2202, 1.0));
        _2315 = (((cbLight._m0[_2485].x * 0.3183098733425140380859375) * _2503) * _2504) + _2270;
        _2317 = (((cbLight._m0[_2485].y * 0.3183098733425140380859375) * _2503) * _2504) + _2272;
        _2319 = (((cbLight._m0[_2485].z * 0.3183098733425140380859375) * _2503) * _2504) + _2274;
    }
    uint _2322 = _2186 + 8u;
    float _2335 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2186].w)) * _988) * 0.949999988079071044921875);
    float _2336 = _2335 * _2335;
    float _2337 = cbLight._m0[_2186].x + _1065;
    float _2338 = cbLight._m0[_2186].y + _1066;
    float _2339 = cbLight._m0[_2186].z + _1067;
    float _2343 = inversesqrt(dot(vec3(_2337, _2338, _2339), vec3(_2337, _2338, _2339)));
    float _2344 = _2343 * _2337;
    float _2345 = _2343 * _2338;
    float _2346 = _2343 * _2339;
    float _2347 = dot(vec3(_984, _985, _986), vec3(cbLight._m0[_2186].xyz));
    float _4496 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2350 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
    float _4507 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
    float _2351 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
    float _2352 = dot(vec3(_984, _985, _986), vec3(_2344, _2345, _2346));
    float _4518 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2355 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
    float _2356 = dot(vec3(cbLight._m0[_2186].xyz), vec3(_2344, _2345, _2346));
    float _4529 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2360 = _2336 * _2336;
    float _2364 = ((_2355 * _2355) * (_2360 + (-1.0))) + 1.0;
    float _2372 = exp2(log2(1.0 - (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0)))) * 5.0);
    float _2373 = 0.959999978542327880859375 - _1133;
    float _2375 = 0.959999978542327880859375 - _1134;
    float _2376 = 0.959999978542327880859375 - _1135;
    float _2383 = 1.0 - _2336;
    float _2394 = (0.5 / (((_2351 * ((_2350 * _2383) + _2336)) + 9.9999999392252902907785028219223e-09) + (((_2351 * _2383) + _2336) * _2350))) * _2350;
    float _4540 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2396 = (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * (_2360 / ((_2364 * _2364) * 3.141590118408203125));
    uint _2407 = _2186 + 9u;
    float _2418 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2223].w)) * _988) * 0.949999988079071044921875);
    float _2419 = _2418 * _2418;
    float _2420 = cbLight._m0[_2223].x + _1065;
    float _2421 = cbLight._m0[_2223].y + _1066;
    float _2422 = cbLight._m0[_2223].z + _1067;
    float _2426 = inversesqrt(dot(vec3(_2420, _2421, _2422), vec3(_2420, _2421, _2422)));
    float _2427 = _2426 * _2420;
    float _2428 = _2426 * _2421;
    float _2429 = _2426 * _2422;
    float _2430 = dot(vec3(_984, _985, _986), vec3(cbLight._m0[_2223].xyz));
    float _4551 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2433 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
    float _2434 = dot(vec3(_984, _985, _986), vec3(_2427, _2428, _2429));
    float _4562 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2437 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
    float _2438 = dot(vec3(cbLight._m0[_2223].xyz), vec3(_2427, _2428, _2429));
    float _4573 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2442 = _2419 * _2419;
    float _2446 = ((_2437 * _2437) * (_2442 + (-1.0))) + 1.0;
    float _2453 = exp2(log2(1.0 - (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0)))) * 5.0);
    float _2460 = 1.0 - _2419;
    float _2470 = (0.5 / (((_2351 * ((_2433 * _2460) + _2419)) + 9.9999999392252902907785028219223e-09) + (((_2351 * _2460) + _2419) * _2433))) * _2433;
    float _4584 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2472 = (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_2442 / ((_2446 * _2446) * 3.141590118408203125));
    float _2482 = (((((_2453 * _2373) + _1136) * cbLight._m0[_2407].x) * _2472) * _2209) + (((((_2372 * _2373) + _1136) * cbLight._m0[_2322].x) * _2396) * _2219);
    float _2483 = (((((_2453 * _2375) + _1138) * cbLight._m0[_2407].y) * _2472) * _2209) + (((((_2372 * _2375) + _1138) * cbLight._m0[_2322].y) * _2396) * _2219);
    float _2484 = (((((_2453 * _2376) + _1139) * cbLight._m0[_2407].z) * _2472) * _2209) + (((((_2372 * _2376) + _1139) * cbLight._m0[_2322].z) * _2396) * _2219);
    float _2546;
    float _2548;
    float _2550;
    if (_2259)
    {
        _2546 = _2482;
        _2548 = _2483;
        _2550 = _2484;
    }
    else
    {
        uint _2552 = _2186 + 2u;
        uint _2556 = _2186 + 10u;
        float _2570 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2552].w)) * _988) * 0.949999988079071044921875);
        float _2571 = _2570 * _2570;
        float _2572 = cbLight._m0[_2552].x + _1065;
        float _2573 = cbLight._m0[_2552].y + _1066;
        float _2574 = cbLight._m0[_2552].z + _1067;
        float _2578 = inversesqrt(dot(vec3(_2572, _2573, _2574), vec3(_2572, _2573, _2574)));
        float _2579 = _2578 * _2572;
        float _2580 = _2578 * _2573;
        float _2581 = _2578 * _2574;
        float _2582 = dot(vec3(_984, _985, _986), vec3(cbLight._m0[_2552].xyz));
        float _4595 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2585 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
        float _2586 = dot(vec3(_984, _985, _986), vec3(_2579, _2580, _2581));
        float _4606 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2589 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        float _2590 = dot(vec3(cbLight._m0[_2552].xyz), vec3(_2579, _2580, _2581));
        float _4617 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2594 = _2571 * _2571;
        float _2598 = ((_2589 * _2589) * (_2594 + (-1.0))) + 1.0;
        float _2605 = exp2(log2(1.0 - (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0)))) * 5.0);
        float _2612 = 1.0 - _2571;
        float _2622 = (0.5 / (((_2351 * ((_2585 * _2612) + _2571)) + 9.9999999392252902907785028219223e-09) + (((_2351 * _2612) + _2571) * _2585))) * _2585;
        float _4628 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2624 = (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (_2594 / ((_2598 * _2598) * 3.141590118408203125));
        float _2625 = isnan(1.0) ? _2201 : (isnan(_2201) ? 1.0 : min(_2201, 1.0));
        _2546 = (((((_2605 * _2373) + _1136) * cbLight._m0[_2556].x) * _2624) * _2625) + _2482;
        _2548 = (((((_2605 * _2375) + _1138) * cbLight._m0[_2556].y) * _2624) * _2625) + _2483;
        _2550 = (((((_2605 * _2376) + _1139) * cbLight._m0[_2556].z) * _2624) * _2625) + _2484;
    }
    float _2660;
    float _2662;
    float _2664;
    if (_2277)
    {
        _2660 = _2546;
        _2662 = _2548;
        _2664 = _2550;
    }
    else
    {
        uint _2671 = _2186 + 3u;
        uint _2675 = _2186 + 11u;
        float _2689 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2671].w)) * _988) * 0.949999988079071044921875);
        float _2690 = _2689 * _2689;
        float _2691 = cbLight._m0[_2671].x + _1065;
        float _2692 = cbLight._m0[_2671].y + _1066;
        float _2693 = cbLight._m0[_2671].z + _1067;
        float _2697 = inversesqrt(dot(vec3(_2691, _2692, _2693), vec3(_2691, _2692, _2693)));
        float _2698 = _2697 * _2691;
        float _2699 = _2697 * _2692;
        float _2700 = _2697 * _2693;
        float _2701 = dot(vec3(_984, _985, _986), vec3(cbLight._m0[_2671].xyz));
        float _4644 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2704 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
        float _2705 = dot(vec3(_984, _985, _986), vec3(_2698, _2699, _2700));
        float _4655 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2708 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _2709 = dot(vec3(cbLight._m0[_2671].xyz), vec3(_2698, _2699, _2700));
        float _4666 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        float _2713 = _2690 * _2690;
        float _2717 = ((_2708 * _2708) * (_2713 + (-1.0))) + 1.0;
        float _2724 = exp2(log2(1.0 - (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0)))) * 5.0);
        float _2731 = 1.0 - _2690;
        float _2741 = (0.5 / (((_2351 * ((_2704 * _2731) + _2690)) + 9.9999999392252902907785028219223e-09) + (((_2351 * _2731) + _2690) * _2704))) * _2704;
        float _4677 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
        float _2743 = (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * (_2713 / ((_2717 * _2717) * 3.141590118408203125));
        float _2744 = isnan(1.0) ? _2202 : (isnan(_2202) ? 1.0 : min(_2202, 1.0));
        _2660 = (((((_2724 * _2373) + _1136) * cbLight._m0[_2675].x) * _2743) * _2744) + _2546;
        _2662 = (((((_2724 * _2375) + _1138) * cbLight._m0[_2675].y) * _2743) * _2744) + _2548;
        _2664 = (((((_2724 * _2376) + _1139) * cbLight._m0[_2675].z) * _2743) * _2744) + _2550;
    }
    float _2879;
    float _2881;
    float _2883;
    float _2885;
    float _2887;
    float _2889;
    if (_2184.y == 0u)
    {
        float _2819 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2820 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2819;
        float _2821 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2819;
        float _2822 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2819;
        uvec4 _2834 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2835 = _2834.x;
        uint _2846 = uint((float(_2834.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1074) / _2835))) + floor(float(uint(cbSceneParam._m0[85u].x * _1073) / _2835)));
        float _2856 = (log2(_2822 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2857 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
        uint _2860 = uint(isnan(14.0) ? _2857 : (isnan(_2857) ? 14.0 : min(_2857, 14.0)));
        uvec4 _2865 = texelFetch(g_lightClusterGridBuffer, int(((_2860 << 2u) + (_2846 << 6u)) >> 2u));
        uint _2866 = _2865.x;
        uint _2867 = _2834.z;
        float _2969;
        float _2971;
        float _2973;
        float _2975;
        float _2977;
        float _2979;
        if (((((1u << ((_2867 >> 4u) & 15u)) + 4294967295u) & _2866) == 0u) || ((_2867 & 240u) == 0u))
        {
            _2969 = 0.0;
            _2971 = 0.0;
            _2973 = 0.0;
            _2975 = 0.0;
            _2977 = 0.0;
            _2979 = 0.0;
        }
        else
        {
            float _2970;
            float _2972;
            float _2974;
            float _2976;
            float _2978;
            float _2980;
            float _3114 = 0.0;
            float _3115 = 0.0;
            float _3116 = 0.0;
            float _3117 = 0.0;
            float _3118 = 0.0;
            float _3119 = 0.0;
            uint _3120 = 0u;
            uint _3129;
            bool _3130;
            for (;;)
            {
                _3129 = texelFetch(g_lightClassification, int((((_2860 << 5u) + (_2846 << 9u)) + (_3120 << 2u)) >> 2u)).x;
                _3130 = _3129 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3130)
                {
                    frontier_phi_61_pred = _3114;
                    frontier_phi_61_pred_1 = _3119;
                    frontier_phi_61_pred_2 = _3118;
                    frontier_phi_61_pred_3 = _3117;
                    frontier_phi_61_pred_4 = _3116;
                    frontier_phi_61_pred_5 = _3115;
                }
                else
                {
                    float _3238;
                    float _3239;
                    float _3240;
                    float _3241;
                    float _3242;
                    float _3243;
                    uint _3244;
                    _3238 = _3114;
                    _3239 = _3115;
                    _3240 = _3116;
                    _3241 = _3117;
                    _3242 = _3118;
                    _3243 = _3119;
                    _3244 = _3129;
                    float _3170;
                    float _3171;
                    float _3172;
                    float _3173;
                    float _3174;
                    float _3175;
                    for (;;)
                    {
                        uint _3248 = uint(findLSB(_3244)) + (_3120 << 5u);
                        uint _3245 = (_3244 + 4294967295u) & _3244;
                        uint _3250 = _3248 * 48u;
                        vec4 _3264 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3250)).x, texelFetch(g_PointLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3250 + 3u)).x));
                        uint _3270 = (_3248 * 48u) + 4u;
                        vec4 _3283 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3270)).x, texelFetch(g_PointLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3270 + 3u)).x));
                        uint _3289 = (_3248 * 48u) + 8u;
                        vec3 _3300 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3289)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 2u)).x));
                        float _3304 = _3264.x - _2820;
                        float _3305 = _3264.y - _2821;
                        float _3306 = _3264.z - _2822;
                        float _3307 = dot(vec3(_3304, _3305, _3306), vec3(_3304, _3305, _3306));
                        float _3310 = inversesqrt(_3307);
                        float _3311 = _3310 * _3304;
                        float _3312 = _3310 * _3305;
                        float _3313 = _3310 * _3306;
                        float _3314 = dot(vec3(_1092, _1095, _1098), vec3(_3311, _3312, _3313));
                        float _3319 = 1.0 - (_3307 * _3264.w);
                        float _4703 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                        float _3320 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
                        float _3321 = sqrt(_3307) * _3283.w;
                        float _3324 = 1.39999997615814208984375 / (_3321 + 1.39999997615814208984375);
                        float _3325 = _3324 * _3324;
                        float _3328 = ((1.0 - _3325) * _3314) + _3325;
                        float _3331 = _3321 * _3321;
                        float _3335 = ((isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0))) * _3320) / ((_3331 * 0.699999988079071044921875) + 1.0);
                        float _3339 = (-0.0) - _2820;
                        float _3340 = (-0.0) - _2821;
                        float _3341 = (-0.0) - _2822;
                        float _3345 = inversesqrt(dot(vec3(_3339, _3340, _3341), vec3(_3339, _3340, _3341)));
                        float _3346 = _3345 * _3339;
                        float _3347 = _3345 * _3340;
                        float _3348 = _3345 * _3341;
                        float _3356 = exp2(log2(1.0 / ((_3331 * 3.5) + 5.0)) * 0.25);
                        float _3357 = 1.0 - _1167;
                        float _3364 = sqrt(1.0 - ((1.0 - (_3357 * _3357)) * (1.0 - (_3356 * _3356))));
                        float _3365 = _3364 * _3364;
                        float _3366 = _3365 * _3365;
                        float _3367 = _3346 + _3311;
                        float _3368 = _3347 + _3312;
                        float _3369 = _3348 + _3313;
                        float _3373 = inversesqrt(dot(vec3(_3367, _3368, _3369), vec3(_3367, _3368, _3369)));
                        float _3377 = dot(vec3(_1092, _1095, _1098), vec3(_3346, _3347, _3348));
                        float _4719 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                        float _3380 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                        float _3381 = dot(vec3(_1092, _1095, _1098), vec3(_3373 * _3367, _3373 * _3368, _3373 * _3369));
                        float _4730 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                        float _3384 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                        float _3388 = ((_3384 * _3384) * (_3366 + (-1.0))) + 1.0;
                        float _3389 = _3324 * _3365;
                        float _3390 = _3389 * _3389;
                        float _3393 = ((1.0 - _3390) * _3314) + _3390;
                        float _4741 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                        float _3394 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                        float _3395 = 1.0 - _3365;
                        float _3405 = (0.5 / (((_3394 * ((_3380 * _3395) + _3365)) + 9.9999999392252902907785028219223e-09) + (((_3394 * _3395) + _3365) * _3380))) * _3394;
                        float _4752 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                        float _3416 = (((_3366 * 3.1415927410125732421875) * (isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0)))) / ((_3388 * _3388) * ((_3331 * 2.1991131305694580078125) + 3.141590118408203125))) * _3320;
                        _3173 = (_3335 * _3283.x) + _3241;
                        _3174 = (_3335 * _3283.y) + _3242;
                        _3175 = (_3335 * _3283.z) + _3243;
                        _3170 = (_3416 * _3300.x) + _3238;
                        _3171 = (_3416 * _3300.y) + _3239;
                        _3172 = (_3416 * _3300.z) + _3240;
                        if (_3245 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3238 = _3170;
                            _3239 = _3171;
                            _3240 = _3172;
                            _3241 = _3173;
                            _3242 = _3174;
                            _3243 = _3175;
                            _3244 = _3245;
                        }
                    }
                    frontier_phi_61_pred = _3170;
                    frontier_phi_61_pred_1 = _3175;
                    frontier_phi_61_pred_2 = _3174;
                    frontier_phi_61_pred_3 = _3173;
                    frontier_phi_61_pred_4 = _3172;
                    frontier_phi_61_pred_5 = _3171;
                }
                _2970 = frontier_phi_61_pred;
                _2980 = frontier_phi_61_pred_1;
                _2978 = frontier_phi_61_pred_2;
                _2976 = frontier_phi_61_pred_3;
                _2974 = frontier_phi_61_pred_4;
                _2972 = frontier_phi_61_pred_5;
                uint _3121 = _3120 + 1u;
                if (_3121 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3114 = _2970;
                    _3115 = _2972;
                    _3116 = _2974;
                    _3117 = _2976;
                    _3118 = _2978;
                    _3119 = _2980;
                    _3120 = _3121;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2969 = _2970;
            _2971 = _2972;
            _2973 = _2974;
            _2975 = _2976;
            _2977 = _2978;
            _2979 = _2980;
        }
        uvec4 _2983 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2984 = _2983.z;
        uint _2986 = (_2984 >> 8u) & 15u;
        float _3082;
        float _3084;
        float _3086;
        float _3088;
        float _3090;
        float _3092;
        if (((4294967295u << _2986) & _2866) == 0u)
        {
            _3082 = _2969;
            _3084 = _2971;
            _3086 = _2973;
            _3088 = _2975;
            _3090 = _2977;
            _3092 = _2979;
        }
        else
        {
            float _3107 = inversesqrt(dot(vec3(_2820, _2821, _2822), vec3(_2820, _2821, _2822)));
            float _3108 = _3107 * _2820;
            float _3109 = _3107 * _2821;
            float _3110 = _3107 * _2822;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2986 < ((_2984 >> 12u) & 15u))
            {
                float _3083;
                float _3085;
                float _3087;
                float _3089;
                float _3091;
                float _3093;
                float _3221 = _2969;
                float _3222 = _2971;
                float _3223 = _2973;
                float _3224 = _2975;
                float _3225 = _2977;
                float _3226 = _2979;
                uint _3227 = _2986;
                uint _3236;
                bool _3237;
                for (;;)
                {
                    _3236 = texelFetch(g_lightClassification, int((((_2860 << 5u) + (_2846 << 9u)) + (_3227 << 2u)) >> 2u)).x;
                    _3237 = _3236 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3237)
                    {
                        frontier_phi_67_pred = _3224;
                        frontier_phi_67_pred_1 = _3225;
                        frontier_phi_67_pred_2 = _3226;
                        frontier_phi_67_pred_3 = _3223;
                        frontier_phi_67_pred_4 = _3222;
                        frontier_phi_67_pred_5 = _3221;
                    }
                    else
                    {
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3426;
                        float _3714;
                        float _3715;
                        float _3716;
                        float _3717;
                        float _3718;
                        float _3719;
                        float _3434 = _3221;
                        float _3435 = _3222;
                        float _3436 = _3223;
                        float _3437 = _3224;
                        float _3438 = _3225;
                        float _3439 = _3226;
                        uint _3440 = _3236;
                        uint _3441;
                        vec4 _3466;
                        float _3467;
                        vec4 _3482;
                        vec3 _3494;
                        vec4 _3509;
                        vec4 _3524;
                        float _3570;
                        bool _3571;
                        for (;;)
                        {
                            uint _3451 = ((_3227 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3440));
                            _3441 = (_3440 + 4294967295u) & _3440;
                            uint _3453 = _3451 * 40u;
                            _3466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 3u)).x));
                            _3467 = _3466.w;
                            uint _3469 = (_3451 * 40u) + 4u;
                            _3482 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3469)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 3u)).x));
                            uint _3484 = (_3451 * 40u) + 8u;
                            _3494 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x));
                            uint _3496 = (_3451 * 40u) + 16u;
                            _3509 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 3u)).x));
                            uint _3511 = (_3451 * 40u) + 20u;
                            _3524 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 3u)).x));
                            uint _3526 = (_3451 * 40u) + 24u;
                            vec4 _3539 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 3u)).x));
                            uint _3545 = (_3451 * 40u) + 28u;
                            vec4 _3558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 3u)).x));
                            _3570 = fma(_2822, _3558.z, fma(_2821, _3558.y, _3558.x * _2820)) + _3558.w;
                            _3571 = !((fma(_2822, _3539.z, fma(_2821, _3539.y, _3539.x * _2820)) + _3539.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3571)
                            {
                                float _3598 = _3466.x - _2820;
                                float _3599 = _3466.y - _2821;
                                float _3600 = _3466.z - _2822;
                                float _3601 = dot(vec3(_3598, _3599, _3600), vec3(_3598, _3599, _3600));
                                float _3604 = inversesqrt(_3601);
                                float _3605 = _3604 * _3598;
                                float _3606 = _3604 * _3599;
                                float _3607 = _3604 * _3600;
                                float _3611 = 1.0 - (_3601 / (_3467 * _3467));
                                float _4763 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                                float _3612 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
                                float _3616 = sqrt(_3601) * _3482.w;
                                float _3618 = 1.39999997615814208984375 / (_3616 + 1.39999997615814208984375);
                                float _3619 = _3618 * _3618;
                                float _3622 = ((1.0 - _3619) * dot(vec3(_3605, _3606, _3607), vec3(_1092, _1095, _1098))) + _3619;
                                float _3625 = _3616 * _3616;
                                float _3629 = (fma(_2822, _3509.z, fma(_2821, _3509.y, _3509.x * _2820)) + _3509.w) / _3570;
                                float _3630 = (fma(_2822, _3524.z, fma(_2821, _3524.y, _3524.x * _2820)) + _3524.w) / _3570;
                                float _3634 = 1.0 - dot(vec2(_3629, _3630), vec2(_3629, _3630));
                                float _4779 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                                float _3635 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
                                float _3636 = _3635 * (((isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0))) * _3612) / ((_3625 * 0.699999988079071044921875) + 1.0));
                                float _3648 = exp2(log2(1.0 / ((_3625 * 3.5) + 5.0)) * 0.25);
                                float _3649 = 1.0 - _1167;
                                float _3656 = sqrt(1.0 - ((1.0 - (_3649 * _3649)) * (1.0 - (_3648 * _3648))));
                                float _3657 = _3656 * _3656;
                                float _3658 = _3657 * _3657;
                                float _3659 = _3605 - _3108;
                                float _3660 = _3606 - _3109;
                                float _3661 = _3607 - _3110;
                                float _3665 = inversesqrt(dot(vec3(_3659, _3660, _3661), vec3(_3659, _3660, _3661)));
                                float _3669 = dot(vec3(_1092, _1095, _1098), vec3((-0.0) - _3108, (-0.0) - _3109, (-0.0) - _3110));
                                float _4790 = isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0));
                                float _3672 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                                float _3673 = dot(vec3(_1092, _1095, _1098), vec3(_3665 * _3659, _3665 * _3660, _3665 * _3661));
                                float _4801 = isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0));
                                float _3676 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                                float _3680 = ((_3676 * _3676) * (_3658 + (-1.0))) + 1.0;
                                float _3681 = _3618 * _3657;
                                float _3682 = _3681 * _3681;
                                float _3688 = ((1.0 - _3682) * dot(vec3(_1092, _1095, _1098), vec3(_3605, _3606, _3607))) + _3682;
                                float _4812 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                                float _3689 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                                float _3690 = 1.0 - _3657;
                                float _3700 = (0.5 / (((_3689 * ((_3672 * _3690) + _3657)) + 9.9999999392252902907785028219223e-09) + (((_3689 * _3690) + _3657) * _3672))) * _3689;
                                float _4823 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                                float _3710 = (_3635 * _3612) * (((_3658 * 3.1415927410125732421875) * (isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0)))) / ((_3680 * _3680) * ((_3625 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3710 * _3494.x;
                                frontier_phi_73_pred_1 = _3710 * _3494.y;
                                frontier_phi_73_pred_2 = _3636 * _3482.z;
                                frontier_phi_73_pred_3 = _3636 * _3482.y;
                                frontier_phi_73_pred_4 = _3636 * _3482.x;
                                frontier_phi_73_pred_5 = _3710 * _3494.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3714 = frontier_phi_73_pred;
                            _3715 = frontier_phi_73_pred_1;
                            _3719 = frontier_phi_73_pred_2;
                            _3718 = frontier_phi_73_pred_3;
                            _3717 = frontier_phi_73_pred_4;
                            _3716 = frontier_phi_73_pred_5;
                            _3424 = _3717 + _3437;
                            _3425 = _3718 + _3438;
                            _3426 = _3719 + _3439;
                            _3421 = _3714 + _3434;
                            _3422 = _3715 + _3435;
                            _3423 = _3716 + _3436;
                            if (_3441 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3434 = _3421;
                                _3435 = _3422;
                                _3436 = _3423;
                                _3437 = _3424;
                                _3438 = _3425;
                                _3439 = _3426;
                                _3440 = _3441;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3424;
                        frontier_phi_67_pred_1 = _3425;
                        frontier_phi_67_pred_2 = _3426;
                        frontier_phi_67_pred_3 = _3423;
                        frontier_phi_67_pred_4 = _3422;
                        frontier_phi_67_pred_5 = _3421;
                    }
                    _3089 = frontier_phi_67_pred;
                    _3091 = frontier_phi_67_pred_1;
                    _3093 = frontier_phi_67_pred_2;
                    _3087 = frontier_phi_67_pred_3;
                    _3085 = frontier_phi_67_pred_4;
                    _3083 = frontier_phi_67_pred_5;
                    uint _3228 = _3227 + 1u;
                    if (_3228 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3221 = _3083;
                        _3222 = _3085;
                        _3223 = _3087;
                        _3224 = _3089;
                        _3225 = _3091;
                        _3226 = _3093;
                        _3227 = _3228;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3091;
                frontier_phi_55_56_ladder_1 = _3093;
                frontier_phi_55_56_ladder_2 = _3089;
                frontier_phi_55_56_ladder_3 = _3087;
                frontier_phi_55_56_ladder_4 = _3085;
                frontier_phi_55_56_ladder_5 = _3083;
            }
            else
            {
                frontier_phi_55_56_ladder = _2977;
                frontier_phi_55_56_ladder_1 = _2979;
                frontier_phi_55_56_ladder_2 = _2975;
                frontier_phi_55_56_ladder_3 = _2973;
                frontier_phi_55_56_ladder_4 = _2971;
                frontier_phi_55_56_ladder_5 = _2969;
            }
            _3082 = frontier_phi_55_56_ladder_5;
            _3084 = frontier_phi_55_56_ladder_4;
            _3086 = frontier_phi_55_56_ladder_3;
            _3088 = frontier_phi_55_56_ladder_2;
            _3090 = frontier_phi_55_56_ladder;
            _3092 = frontier_phi_55_56_ladder_1;
        }
        float _3097 = isnan(1.0) ? _1151 : (isnan(_1151) ? 1.0 : min(_1151, 1.0));
        _2879 = (_3097 * _3088) + _2315;
        _2881 = (_3097 * _3090) + _2317;
        _2883 = (_3097 * _3092) + _2319;
        _2885 = ((_3082 * _1136) * _3097) + _2660;
        _2887 = ((_3084 * _1138) * _3097) + _2662;
        _2889 = ((_3086 * _1139) * _3097) + _2664;
    }
    else
    {
        _2879 = _2315;
        _2881 = _2317;
        _2883 = _2319;
        _2885 = _2660;
        _2887 = _2662;
        _2889 = _2664;
    }
    float _4839 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _4850 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
    float _4861 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
    float _4872 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _2914 = cbInstanceData._m0[_1111 + 6u].w * (isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0)));
    float _2919 = _1073 / cbSceneParam._m0[86u].x;
    float _2920 = _1074 / cbSceneParam._m0[86u].y;
    vec4 _2934 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2919, _2920, (log2((isnan(cbSceneParam._m0[77u].w) ? _1008 : (isnan(_1008) ? cbSceneParam._m0[77u].w : min(_1008, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2936 = _2934.x;
    float _2937 = _2934.y;
    float _2938 = _2934.z;
    float _2939 = _2934.w;
    float _3032;
    float _3034;
    float _3036;
    float _3038;
    if (_1008 > cbSceneParam._m0[78u].w)
    {
        float _2994 = isnan(_1008) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1008 : min(cbSceneParam._m0[80u].w, _1008));
        float _2995 = _2994 / _1008;
        float _3006 = _2995 * _1058;
        float _3007 = _1059 * _2995;
        float _3008 = (-0.0) - _3007;
        float _3010 = _2995 * _1060;
        float _3012 = (cbSceneParam._m0[77u].w * _3008) / _2994;
        float _3013 = _3012 + cbSceneParam._m0[79u].w;
        float _3014 = cbSceneParam._m0[79u].w - _3007;
        float _3020 = sqrt(((_3006 * _3006) + (_3007 * _3007)) + (_3010 * _3010));
        float _3023 = (1.0 - (cbSceneParam._m0[77u].w / _2994)) * _3020;
        float _3028 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3030 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3183;
        if (abs((_3008 - _3012) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3183 = ((((_3013 > 0.0) ? exp2(_3028 * _3013) : (2.0 - exp2(_3030 * _3013))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3023;
        }
        else
        {
            float _3143 = 1.0 / cbSceneParam._m0[80u].x;
            float _3144 = isnan(_3014) ? _3013 : (isnan(_3013) ? _3014 : max(_3013, _3014));
            float _3145 = isnan(_3014) ? _3013 : (isnan(_3013) ? _3014 : min(_3013, _3014));
            float _3154 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : min(_3144, 0.0));
            float _3155 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : min(_3145, 0.0));
            _3183 = ((abs(_3020 / _3008) * cbSceneParam._m0[80u].y) * ((((_3154 - _3155) * 2.0) - ((exp2(_3028 * (isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0)))) - exp2(_3028 * (isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0))))) * _3143)) - ((exp2(_3030 * _3154) - exp2(_3030 * _3155)) * _3143))) + (_3023 * cbSceneParam._m0[80u].z);
        }
        vec4 _3185 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2919, _2920, 1.0), 0.0);
        float _3194 = exp2((_3183 * (-1.44269502162933349609375)) * (1.0 - _3185.w));
        float _3195 = log2(_3194);
        float _3211 = log2(_2939);
        _3032 = (exp2(_3211 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3195 * cbSceneParam._m0[78u].x)) * _3185.x) / cbSceneParam._m0[78u].x)) + _2936;
        _3034 = (exp2(_3211 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3195 * cbSceneParam._m0[78u].y)) * _3185.y) / cbSceneParam._m0[78u].y)) + _2937;
        _3036 = (exp2(_3211 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3195 * cbSceneParam._m0[78u].z)) * _3185.z) / cbSceneParam._m0[78u].z)) + _2938;
        _3038 = _3194 * _2939;
    }
    else
    {
        _3032 = _2936;
        _3034 = _2937;
        _3036 = _2938;
        _3038 = _2939;
    }
    float _3050 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3051 = _3050 == 3.0;
    float _3052 = log2(_3038);
    float _3059 = exp2(_3052 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0))) * (_2879 + ((isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))) * _1151))) + ((_2885 + ((isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0))) * _1955)) * cbPerFrame._m0[3u].x));
    float _3060 = exp2(_3052 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0))) * (_2881 + ((isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))) * _1151))) + ((_2887 + ((isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0))) * _1955)) * cbPerFrame._m0[3u].x));
    float _3061 = exp2(_3052 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0))) * (_2883 + ((isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0))) * _1151))) + ((_2889 + ((isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0))) * _1955)) * cbPerFrame._m0[3u].x));
    float _3070 = (_3050 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3070 * (_3051 ? _3059 : (_3059 + (cbSceneParam._m0[72u].w * _3032)));
    SV_Target.y = _3070 * (_3051 ? _3060 : (_3060 + (cbSceneParam._m0[72u].w * _3034)));
    SV_Target.z = _3070 * (_3051 ? _3061 : (_3061 + (cbSceneParam._m0[72u].w * _3036)));
    SV_Target.w = _2914;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2914;
}


