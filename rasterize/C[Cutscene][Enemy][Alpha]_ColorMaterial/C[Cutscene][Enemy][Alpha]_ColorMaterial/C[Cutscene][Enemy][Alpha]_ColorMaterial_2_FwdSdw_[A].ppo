#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24;
layout(set = 0, binding = 12) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 13) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 18) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in float TEXCOORD_8;
layout(location = 7, component = 1) in float TEXCOORD_9;
layout(location = 7, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1571;
float _4233;
float _4234;
float _4235;
float _4236;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _321 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _325 = _321.z;
    float _338 = exp2(log2((1.0 - _325) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _339 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _340 = isnan(1.0) ? _339 : (isnan(_339) ? 1.0 : min(_339, 1.0));
    vec4 _357 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _369 = exp2(log2(_357.w * cbMtdParam._m0[29u].y) * cbMtdParam._m0[23u].x);
    float _370 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _371 = isnan(1.0) ? _370 : (isnan(_370) ? 1.0 : min(_370, 1.0));
    float _380 = exp2(log2(cbMtdParam._m0[23u].y * _325) * cbMtdParam._m0[22u].y);
    float _381 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _382 = isnan(1.0) ? _381 : (isnan(_381) ? 1.0 : min(_381, 1.0));
    float _403 = roundEven(5.0 - ((texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _404 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _405 = isnan(4.0) ? _404 : (isnan(_404) ? 4.0 : min(_404, 4.0));
    float _417 = floor(_405);
    vec4 _420 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w, _417));
    vec4 _444 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _455 = cbMtdParam._m0[9u].x * _444.x;
    float _456 = cbMtdParam._m0[9u].y * _444.y;
    float _457 = cbMtdParam._m0[9u].z * _444.z;
    float _464 = (((cbMtdParam._m0[10u].x * _420.x) - _455) * _382) + _455;
    float _465 = (((cbMtdParam._m0[10u].y * _420.y) - _456) * _382) + _456;
    float _466 = (((cbMtdParam._m0[10u].z * _420.z) - _457) * _382) + _457;
    float _472 = exp2(log2(_321.w) * cbMtdParam._m0[23u].w);
    vec4 _485 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _505 = (((cbMtdParam._m0[16u].x * _485.x) - _464) * _472) + _464;
    float _506 = (((cbMtdParam._m0[16u].y * _485.y) - _465) * _472) + _465;
    float _507 = (((cbMtdParam._m0[16u].z * _485.z) - _466) * _472) + _466;
    vec4 _520 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _540 = (((cbMtdParam._m0[19u].x * _520.x) - _505) * _371) + _505;
    float _541 = (((cbMtdParam._m0[19u].y * _520.y) - _506) * _371) + _506;
    float _542 = (((cbMtdParam._m0[19u].z * _520.z) - _507) * _371) + _507;
    vec4 _555 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _580 = (_357.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _555.x) - _540) * _340) + _540);
    float _582 = (_357.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _555.y) - _541) * _340) + _541);
    float _584 = (_357.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _555.z) - _542) * _340) + _542);
    vec4 _597 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _616 = TEXCOORD_5.x - ((cbMtdParam._m0[24u].x * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625));
    float _618 = _616 * (cbMtdParam._m0[24u].z + 1.0);
    float _4285 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _619 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _626 = (_619 * ((cbMtdParam._m0[11u].x * _597.x) - _580)) + _580;
    float _627 = (((cbMtdParam._m0[11u].y * _597.y) - _582) * _619) + _582;
    float _628 = (((cbMtdParam._m0[11u].z * _597.z) - _584) * _619) + _584;
    float _632 = cbMtdParam._m0[28u].x * TEXCOORD_8;
    float _640 = (_632 - (((texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _632))) * (cbMtdParam._m0[27u].w + 1.0);
    float _4296 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _641 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    float _648 = ((cbMtdParam._m0[21u].x - _626) * _641) + _626;
    float _649 = ((cbMtdParam._m0[21u].y - _627) * _641) + _627;
    float _650 = ((cbMtdParam._m0[21u].z - _628) * _641) + _628;
    vec4 _663 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24, SS_ClampLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.z) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.w) + cbTextureTilingScale._m0[11u].w));
    float _671 = (_663.x + (-1.0)) + (cbMtdParam._m0[28u].y * 2.0);
    float _4307 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _677 = exp2(log2(cbMtdParam._m0[28u].w * (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) * cbMtdParam._m0[28u].z);
    float _4318 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _678 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
    float _215[5];
    float _216[5];
    _215[0u] = cbMtdParam._m0[29u].z;
    _216[0u] = cbMtdParam._m0[29u].w;
    _215[1u] = cbMtdParam._m0[31u].z;
    _216[1u] = cbMtdParam._m0[31u].w;
    _215[2u] = cbMtdParam._m0[31u].x;
    _216[2u] = cbMtdParam._m0[31u].y;
    _215[3u] = cbMtdParam._m0[30u].z;
    _216[3u] = cbMtdParam._m0[30u].w;
    _215[4u] = cbMtdParam._m0[30u].x;
    _216[4u] = cbMtdParam._m0[30u].y;
    float _718 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    uint _720 = uint(int(isnan(4.0) ? _718 : (isnan(_718) ? 4.0 : min(_718, 4.0))));
    float _727 = ((_216[_720] - cbMtdParam._m0[22u].z) * _382) + cbMtdParam._m0[22u].z;
    float _730 = ((cbMtdParam._m0[22u].w - _727) * _472) + _727;
    float _733 = ((cbMtdParam._m0[25u].x - _730) * _371) + _730;
    float _736 = ((cbMtdParam._m0[26u].x - _733) * _340) + _733;
    float _741 = (cbMtdParam._m0[24u].y + 1.0) * _616;
    float _4339 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _742 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
    float _744 = _736 - (_736 * _742);
    float _746 = _744 - (_744 * _632);
    vec4 _760 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w, _417));
    vec4 _778 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _780 = _778.x;
    float _781 = _778.y;
    float _786 = cbMtdParam._m0[22u].x + _778.z;
    float _789 = (((_760.z + _215[_720]) - _786) * _382) + _786;
    vec4 _802 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _813 = (((_802.z - _789) + cbMtdParam._m0[29u].x) * _472) + _789;
    float _818 = ((((_325 * 2.0) * _813) - _813) * cbMtdParam._m0[24u].w) + _813;
    vec4 _830 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _841 = (((cbMtdParam._m0[23u].z + _830.z) - _818) * _371) + _818;
    vec4 _854 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _865 = (((_854.z - _841) + cbMtdParam._m0[26u].y) * _340) + _841;
    vec4 _877 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _888 = ((_877.z - _865) * _742) + _865;
    vec4 _903 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _917 = ((cbMtdParam._m0[27u].y * _632) * ((_903.z * cbMtdParam._m0[27u].x) - _888)) + _888;
    float _932 = ((_760.x - _780) * _382) + _780;
    float _933 = ((_760.y - _781) * _382) + _781;
    float _938 = ((_802.x - _932) * _472) + _932;
    float _939 = ((_802.y - _933) * _472) + _933;
    float _944 = ((_830.x - _938) * _371) + _938;
    float _945 = ((_830.y - _939) * _371) + _939;
    float _954 = ((((_854.x - _944) * _340) + _944) * 2.0) + (-1.0);
    float _955 = ((((_854.y - _945) * _340) + _945) * 2.0) + (-1.0);
    float _956 = dot(vec2(_954, _955), vec2(_954, _955));
    float _4350 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _961 = sqrt(1.0 - (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))));
    float _977 = (((cbMtdParam._m0[25u].y * ((_321.x * 2.0) + (-1.0))) + _954) + (((((_877.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[25u].z) * _742)) + ((((_903.x * 2.0) + (-1.0)) * _632) * cbMtdParam._m0[26u].w);
    float _978 = (((cbMtdParam._m0[25u].y * ((_321.y * 2.0) + (-1.0))) + _955) + (((((_877.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[25u].z) * _742)) + (((cbMtdParam._m0[28u].x * TEXCOORD_9) * ((_903.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _981 = fma(_961, _251 * NORMAL.x, fma(_978, _258 * TANGENT.x, (_244 * _236) * _977));
    float _984 = fma(_961, _251 * NORMAL.y, fma(_978, _258 * TANGENT.y, (_244 * _237) * _977));
    float _987 = fma(_961, _251 * NORMAL.z, fma(_978, _258 * TANGENT.z, (_244 * _238) * _977));
    float _991 = inversesqrt(dot(vec3(_981, _984, _987), vec3(_981, _984, _987)));
    float _992 = _991 * _981;
    float _993 = _991 * _984;
    float _994 = _991 * _987;
    float _4361 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _995 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
    float _4372 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _996 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
    float _4383 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _4394 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _4405 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _4416 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _1000 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
    float _1016 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1056 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1066 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1056);
    float _1067 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1056);
    float _1068 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1056);
    float _1072 = inversesqrt(dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068)));
    float _1073 = _1066 * _1072;
    float _1074 = _1067 * _1072;
    float _1075 = _1068 * _1072;
    vec4 _1080 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1082 = _1080.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1252 = sqrt(((_1066 * _1066) + (_1067 * _1067)) + (_1068 * _1068));
        float _1258 = (cbMatDynParam._m0[5u].x * _1252) + cbMatDynParam._m0[5u].y;
        float _4427 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _1263 = (cbMatDynParam._m0[5u].z * _1252) + cbMatDynParam._m0[5u].w;
        float _4438 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) - _1259)) + _1259) < ((_1082 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1093 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1094 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1112 = fma(_994, cbSceneParam._m0[5u].z, fma(_993, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _992));
    float _1115 = fma(_994, cbSceneParam._m0[6u].z, fma(_993, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _992));
    float _1118 = fma(_994, cbSceneParam._m0[7u].z, fma(_993, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _992));
    uint _1131 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1132 = _1131 + 9u;
    uint _1133 = _1132 + uint(cbMatDynParam._m0[0u].w);
    float _1139 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0)))) * cbInstanceData._m0[_1133].x;
    float _1140 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0)))) * cbInstanceData._m0[_1133].y;
    float _1141 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0)))) * cbInstanceData._m0[_1133].z;
    float _4449 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
    float _1142 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
    float _4460 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
    float _1143 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
    float _4471 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
    float _1144 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
    float _1145 = 1.0 - _1000;
    float _1146 = _1142 * _1145;
    float _1147 = _1143 * _1145;
    float _1148 = _1144 * _1145;
    float _1153 = (_1142 + (-0.039999999105930328369140625)) * _1000;
    float _1154 = (_1143 + (-0.039999999105930328369140625)) * _1000;
    float _1155 = (_1144 + (-0.039999999105930328369140625)) * _1000;
    float _1156 = _1153 + 0.039999999105930328369140625;
    float _1158 = _1154 + 0.039999999105930328369140625;
    float _1159 = _1155 + 0.039999999105930328369140625;
    vec4 _1168 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1093, cbSceneParam._m0[86u].y * _1094));
    float _1171 = _1168.x * TEXCOORD_5.w;
    float _1172 = dot(vec3(_992, _993, _994), vec3(_1073, _1074, _1075));
    float _1175 = _1172 * 2.0;
    float _1179 = (_1175 * _992) - _1073;
    float _1180 = (_1175 * _993) - _1074;
    float _1181 = (_1175 * _994) - _1075;
    float _1185 = abs(dot(vec3(_1073, _1074, _1075), vec3(_992, _993, _994)));
    float _4482 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
    float _1187 = sqrt(_996);
    float _1198 = exp2((_1187 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1187 * 3.0));
    float _1204 = (1.0 - _1198) * ((_1187 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1205 = _1198 * _1187;
    float _1233 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1237 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1241 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1570;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1295 = fma(_1241, cbModelParam._m0[26u].z, fma(_1237, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1233));
        float _1299 = fma(_1241, cbModelParam._m0[27u].z, fma(_1237, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1233));
        float _1303 = fma(_1241, cbModelParam._m0[28u].z, fma(_1237, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1233));
        float _1328 = _1233 + _992;
        float _1329 = _1237 + _993;
        float _1330 = _1241 + _994;
        float _1340 = fma(_1330, cbModelParam._m0[26u].z, fma(_1329, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1328)) - _1295;
        float _1341 = fma(_1330, cbModelParam._m0[27u].z, fma(_1329, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1328)) - _1299;
        float _1342 = fma(_1330, cbModelParam._m0[28u].z, fma(_1329, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1328)) - _1303;
        float _1346 = inversesqrt(dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342)));
        float _1359 = ((_1346 * _1340) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1295 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1360 = ((_1346 * _1341) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1299 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1361 = ((_1346 * _1342) / cbModelParam._m0[34u].z) + ((((((_1303 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1371 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1378 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1385 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        float _1398 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1364.x + (-0.5));
        float _1400 = _1398 * (_1364.y + (-0.5));
        float _1401 = _1398 * (_1364.z + (-0.5));
        float _1408 = exp2((_1371.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1371.x + (-0.5));
        float _1410 = _1408 * (_1371.y + (-0.5));
        float _1411 = _1408 * (_1371.z + (-0.5));
        float _1418 = exp2((_1378.w + (-0.5)) * 20.0) * 2.0;
        float _1419 = _1418 * (_1378.x + (-0.5));
        float _1420 = _1418 * (_1378.y + (-0.5));
        float _1421 = _1418 * (_1378.z + (-0.5));
        float _1428 = exp2((_1385.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1385.x + (-0.5));
        float _1430 = _1428 * (_1385.y + (-0.5));
        float _1431 = _1428 * (_1385.z + (-0.5));
        float _1432 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1433 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1434 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1435 = _1399 * 0.5;
        float _1436 = _1409 * 0.5;
        float _1437 = _1419 * 0.5;
        float _1438 = dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437));
        float _1443 = (_1438 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1438);
        float _1452 = (dot(vec3(_992, _993, _994), vec3(_1443 * _1435, _1443 * _1436, _1443 * _1437)) + 1.0) * 0.5;
        float _4508 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1462 = sqrt(((_1436 * _1436) + (_1435 * _1435)) + (_1437 * _1437)) / (_1432 + 9.9999997473787516355514526367188e-06);
        float _4519 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _1464 = _1463 * 2.0;
        float _1468 = (1.0 - _1463) / (_1463 + 1.0);
        float _4530 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
        float _1478 = ((((1.0 - _1469) * (_1464 + 2.0)) * exp2(log2(isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (_1464 + 1.0))) + _1469) * _1432;
        float _1479 = _1400 * 0.5;
        float _1480 = _1410 * 0.5;
        float _1481 = _1420 * 0.5;
        float _1482 = dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481));
        float _1487 = (_1482 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1482);
        float _1495 = (dot(vec3(_992, _993, _994), vec3(_1487 * _1479, _1487 * _1480, _1487 * _1481)) + 1.0) * 0.5;
        float _4541 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1504 = sqrt(((_1480 * _1480) + (_1479 * _1479)) + (_1481 * _1481)) / (_1433 + 9.9999997473787516355514526367188e-06);
        float _4552 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _1506 = _1505 * 2.0;
        float _1510 = (1.0 - _1505) / (_1505 + 1.0);
        float _4563 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _1520 = ((((1.0 - _1511) * (_1506 + 2.0)) * exp2(log2(isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * (_1506 + 1.0))) + _1511) * _1433;
        float _1521 = _1401 * 0.5;
        float _1522 = _1411 * 0.5;
        float _1523 = _1421 * 0.5;
        float _1524 = dot(vec3(_1521, _1522, _1523), vec3(_1521, _1522, _1523));
        float _1529 = (_1524 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1524);
        float _1537 = (dot(vec3(_992, _993, _994), vec3(_1529 * _1521, _1529 * _1522, _1529 * _1523)) + 1.0) * 0.5;
        float _4574 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1546 = sqrt(((_1522 * _1522) + (_1521 * _1521)) + (_1523 * _1523)) / (_1434 + 9.9999997473787516355514526367188e-06);
        float _4585 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
        float _1548 = _1547 * 2.0;
        float _1552 = (1.0 - _1547) / (_1547 + 1.0);
        float _4596 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
        float _1562 = ((((1.0 - _1553) * (_1548 + 2.0)) * exp2(log2(isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (_1548 + 1.0))) + _1553) * _1434;
        _1570 = _1401;
        _1572 = _1400;
        _1573 = _1399;
        _1574 = _1411;
        _1575 = _1410;
        _1576 = _1409;
        _1577 = _1421;
        _1578 = _1420;
        _1579 = _1419;
        _1580 = _1434;
        _1581 = _1433;
        _1582 = _1432;
        _1583 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)));
        _1584 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)));
        _1585 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)));
    }
    else
    {
        _1570 = _1571;
        _1572 = _1571;
        _1573 = _1571;
        _1574 = _1571;
        _1575 = _1571;
        _1576 = _1571;
        _1577 = _1571;
        _1578 = _1571;
        _1579 = _1571;
        _1580 = _1571;
        _1581 = _1571;
        _1582 = _1571;
        _1583 = 0.0;
        _1584 = 0.0;
        _1585 = 0.0;
    }
    float _1880;
    float _1881;
    float _1882;
    float _1883;
    float _1884;
    float _1885;
    float _1886;
    float _1887;
    float _1888;
    float _1889;
    float _1890;
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1611 = fma(_1241, cbModelParam._m0[30u].z, fma(_1237, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1233));
        float _1615 = fma(_1241, cbModelParam._m0[31u].z, fma(_1237, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1233));
        float _1619 = fma(_1241, cbModelParam._m0[32u].z, fma(_1237, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1233));
        float _1642 = _1233 + _992;
        float _1643 = _1237 + _993;
        float _1644 = _1241 + _994;
        float _1654 = fma(_1644, cbModelParam._m0[30u].z, fma(_1643, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1642)) - _1611;
        float _1655 = fma(_1644, cbModelParam._m0[31u].z, fma(_1643, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1642)) - _1615;
        float _1656 = fma(_1644, cbModelParam._m0[32u].z, fma(_1643, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1642)) - _1619;
        float _1660 = inversesqrt(dot(vec3(_1654, _1655, _1656), vec3(_1654, _1655, _1656)));
        float _1673 = ((_1660 * _1654) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1611 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1674 = ((_1660 * _1655) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1615 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1675 = ((_1660 * _1656) / cbModelParam._m0[35u].z) + ((((((_1619 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1677 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1673, _1674, _1675), 0.0);
        vec4 _1684 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1673, _1674, _1675), 0.0);
        vec4 _1691 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1673, _1674, _1675), 0.0);
        vec4 _1698 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1673, _1674, _1675), 0.0);
        float _1710 = exp2((_1677.w + (-0.5)) * 20.0) * 2.0;
        float _1711 = _1710 * (_1677.x + (-0.5));
        float _1712 = _1710 * (_1677.y + (-0.5));
        float _1713 = _1710 * (_1677.z + (-0.5));
        float _1720 = exp2((_1684.w + (-0.5)) * 20.0) * 2.0;
        float _1721 = _1720 * (_1684.x + (-0.5));
        float _1722 = _1720 * (_1684.y + (-0.5));
        float _1723 = _1720 * (_1684.z + (-0.5));
        float _1730 = exp2((_1691.w + (-0.5)) * 20.0) * 2.0;
        float _1731 = _1730 * (_1691.x + (-0.5));
        float _1732 = _1730 * (_1691.y + (-0.5));
        float _1733 = _1730 * (_1691.z + (-0.5));
        float _1740 = exp2((_1698.w + (-0.5)) * 20.0) * 2.0;
        float _1741 = _1740 * (_1698.x + (-0.5));
        float _1742 = _1740 * (_1698.y + (-0.5));
        float _1743 = _1740 * (_1698.z + (-0.5));
        float _1744 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1745 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1746 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1747 = _1711 * 0.5;
        float _1748 = _1721 * 0.5;
        float _1749 = _1731 * 0.5;
        float _1750 = dot(vec3(_1747, _1748, _1749), vec3(_1747, _1748, _1749));
        float _1755 = (_1750 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1750);
        float _1763 = (dot(vec3(_992, _993, _994), vec3(_1755 * _1747, _1755 * _1748, _1755 * _1749)) + 1.0) * 0.5;
        float _4637 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1772 = sqrt(((_1748 * _1748) + (_1747 * _1747)) + (_1749 * _1749)) / (_1744 + 9.9999997473787516355514526367188e-06);
        float _4648 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1773 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
        float _1774 = _1773 * 2.0;
        float _1778 = (1.0 - _1773) / (_1773 + 1.0);
        float _4659 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1779 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
        float _1788 = ((((1.0 - _1779) * (_1774 + 2.0)) * exp2(log2(isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_1774 + 1.0))) + _1779) * _1744;
        float _1789 = _1712 * 0.5;
        float _1790 = _1722 * 0.5;
        float _1791 = _1732 * 0.5;
        float _1792 = dot(vec3(_1789, _1790, _1791), vec3(_1789, _1790, _1791));
        float _1797 = (_1792 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1792);
        float _1805 = (dot(vec3(_992, _993, _994), vec3(_1797 * _1789, _1797 * _1790, _1797 * _1791)) + 1.0) * 0.5;
        float _4670 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1814 = sqrt(((_1790 * _1790) + (_1789 * _1789)) + (_1791 * _1791)) / (_1745 + 9.9999997473787516355514526367188e-06);
        float _4681 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1815 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
        float _1816 = _1815 * 2.0;
        float _1820 = (1.0 - _1815) / (_1815 + 1.0);
        float _4692 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1821 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
        float _1830 = ((((1.0 - _1821) * (_1816 + 2.0)) * exp2(log2(isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * (_1816 + 1.0))) + _1821) * _1745;
        float _1831 = _1713 * 0.5;
        float _1832 = _1723 * 0.5;
        float _1833 = _1733 * 0.5;
        float _1834 = dot(vec3(_1831, _1832, _1833), vec3(_1831, _1832, _1833));
        float _1839 = (_1834 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1834);
        float _1847 = (dot(vec3(_992, _993, _994), vec3(_1839 * _1831, _1839 * _1832, _1839 * _1833)) + 1.0) * 0.5;
        float _4703 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1856 = sqrt(((_1832 * _1832) + (_1831 * _1831)) + (_1833 * _1833)) / (_1746 + 9.9999997473787516355514526367188e-06);
        float _4714 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
        float _1857 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
        float _1858 = _1857 * 2.0;
        float _1862 = (1.0 - _1857) / (_1857 + 1.0);
        float _4725 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1863 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
        float _1872 = ((((1.0 - _1863) * (_1858 + 2.0)) * exp2(log2(isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0))) * (_1858 + 1.0))) + _1863) * _1746;
        _1880 = _1713;
        _1881 = _1712;
        _1882 = _1711;
        _1883 = _1723;
        _1884 = _1722;
        _1885 = _1721;
        _1886 = _1733;
        _1887 = _1732;
        _1888 = _1731;
        _1889 = _1746;
        _1890 = _1745;
        _1891 = _1744;
        _1892 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0)));
        _1893 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0)));
        _1894 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0)));
    }
    else
    {
        _1880 = _1571;
        _1881 = _1571;
        _1882 = _1571;
        _1883 = _1571;
        _1884 = _1571;
        _1885 = _1571;
        _1886 = _1571;
        _1887 = _1571;
        _1888 = _1571;
        _1889 = _1571;
        _1890 = _1571;
        _1891 = _1571;
        _1892 = 0.0;
        _1893 = 0.0;
        _1894 = 0.0;
    }
    float _1904 = (cbModelParam._m0[1u].x * (_1892 - _1583)) + _1583;
    float _1905 = (cbModelParam._m0[1u].x * (_1893 - _1584)) + _1584;
    float _1906 = (cbModelParam._m0[1u].x * (_1894 - _1585)) + _1585;
    float _1927 = fma(_1906, cbSceneParam._m0[89u].z, fma(_1905, cbSceneParam._m0[89u].y, _1904 * cbSceneParam._m0[89u].x));
    float _1930 = fma(_1906, cbSceneParam._m0[90u].z, fma(_1905, cbSceneParam._m0[90u].y, _1904 * cbSceneParam._m0[90u].x));
    float _1933 = fma(_1906, cbSceneParam._m0[91u].z, fma(_1905, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1904));
    float _1948 = _1179 * 0.5;
    float _1949 = _1180 * 0.5;
    float _1950 = _1181 * 0.5;
    float _1951 = dot(vec4(_1948, _1949, _1950, 1.0), vec4(_1882, _1885, _1888, _1891));
    float _1954 = dot(vec4(_1948, _1949, _1950, 1.0), vec4(_1881, _1884, _1887, _1890));
    float _1957 = dot(vec4(_1948, _1949, _1950, 1.0), vec4(_1880, _1883, _1886, _1889));
    float _1991;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1964 = dot(vec4(_1948, _1949, _1950, 1.0), vec4(_1570, _1574, _1577, _1580));
        float _1968 = dot(vec4(_1948, _1949, _1950, 1.0), vec4(_1572, _1575, _1578, _1581));
        float _1972 = dot(vec4(_1948, _1949, _1950, 1.0), vec4(_1573, _1576, _1579, _1582));
        float _1979 = dot(vec4(cbModelParam._m0[39u]), vec4(_1948, _1949, _1950, 1.0));
        _1991 = dot(vec3(isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0)), isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0)), isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1979) ? 0.0 : (isnan(0.0) ? _1979 : max(0.0, _1979))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1991 = 1.0;
    }
    float _2002;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1993 = dot(vec4(cbModelParam._m0[40u]), vec4(_1948, _1949, _1950, 1.0));
        _2002 = dot(vec3(isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0)), isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0)), isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1993) ? 0.0 : (isnan(0.0) ? _1993 : max(0.0, _1993))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2002 = 1.0;
    }
    float _2006 = (_2002 * cbModelParam._m0[1u].x) + (_1991 * (1.0 - cbModelParam._m0[1u].x));
    float _2016 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _996);
    float _2017 = isnan(_2016) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2016 : min(cbModelParam._m0[25u].z, _2016));
    float _2097;
    float _2099;
    float _2101;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2064 = fma(_1241, cbModelParam._m0[13u].z, fma(_1237, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1233)) + cbModelParam._m0[13u].w;
        float _2068 = fma(_1241, cbModelParam._m0[14u].z, fma(_1237, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1233)) + cbModelParam._m0[14u].w;
        float _2072 = fma(_1241, cbModelParam._m0[15u].z, fma(_1237, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1233)) + cbModelParam._m0[15u].w;
        float _2075 = fma(_1181, cbModelParam._m0[13u].z, fma(_1180, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1179));
        float _2078 = fma(_1181, cbModelParam._m0[14u].z, fma(_1180, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1179));
        float _2081 = fma(_1181, cbModelParam._m0[15u].z, fma(_1180, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1179));
        float _2109;
        if (_2075 > 0.0)
        {
            _2109 = abs((1.0 - _2064) / _2075);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2075 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2064 + 1.0) / _2075);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2109 = frontier_phi_17_15_ladder;
        }
        float _2280;
        if (_2078 > 0.0)
        {
            _2280 = abs((1.0 - _2068) / _2078);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2078 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2068 + 1.0) / _2078);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2280 = frontier_phi_26_22_ladder;
        }
        float _2575;
        if (_2081 > 0.0)
        {
            _2575 = abs((1.0 - _2072) / _2081);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2081 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2072 + 1.0) / _2081);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2575 = frontier_phi_38_33_ladder;
        }
        float _2577 = isnan(_2280) ? _2109 : (isnan(_2109) ? _2280 : min(_2109, _2280));
        float _2578 = isnan(_2575) ? _2577 : (isnan(_2577) ? _2575 : min(_2577, _2575));
        float _2582 = (_2578 * _2075) + _2064;
        float _2583 = (_2578 * _2078) + _2068;
        float _2584 = (_2578 * _2081) + _2072;
        float _2585 = _2578 * 9.9999997473787516355514526367188e-05;
        float _2587 = (-1.0) - _2585;
        float _2589 = _2585 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2584 > _2589) || ((_2584 < _2587) || ((_2583 > _2589) || ((_2583 < _2587) || ((_2582 < _2587) || (_2582 > _2589))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2729 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2584, cbModelParam._m0[9u].z, fma(_2583, cbModelParam._m0[9u].y, _2582 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2584, cbModelParam._m0[10u].z, fma(_2583, cbModelParam._m0[10u].y, _2582 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2584, cbModelParam._m0[11u].z, fma(_2583, cbModelParam._m0[11u].y, _2582 * cbModelParam._m0[11u].x))), _2017);
            frontier_phi_16_38_ladder = _2729.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2729.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2729.x * cbModelParam._m0[1u].y;
        }
        _2097 = frontier_phi_16_38_ladder_2;
        _2099 = frontier_phi_16_38_ladder_1;
        _2101 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2085 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1179, _1180, _1181), _2017);
        _2097 = _2085.x * cbModelParam._m0[1u].y;
        _2099 = _2085.y * cbModelParam._m0[1u].y;
        _2101 = _2085.z * cbModelParam._m0[1u].y;
    }
    float _2105 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _996);
    float _2106 = isnan(_2105) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2105 : min(cbModelParam._m0[25u].w, _2105));
    float _2195;
    float _2197;
    float _2199;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2159 = fma(_1241, cbModelParam._m0[21u].z, fma(_1237, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1233)) + cbModelParam._m0[21u].w;
        float _2163 = fma(_1241, cbModelParam._m0[22u].z, fma(_1237, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1233)) + cbModelParam._m0[22u].w;
        float _2167 = fma(_1241, cbModelParam._m0[23u].z, fma(_1237, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1233)) + cbModelParam._m0[23u].w;
        float _2170 = fma(_1181, cbModelParam._m0[21u].z, fma(_1180, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1179));
        float _2173 = fma(_1181, cbModelParam._m0[22u].z, fma(_1180, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1179));
        float _2176 = fma(_1181, cbModelParam._m0[23u].z, fma(_1180, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1179));
        float _2285;
        if (_2170 > 0.0)
        {
            _2285 = abs((1.0 - _2159) / _2170);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2170 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2159 + 1.0) / _2170);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2285 = frontier_phi_28_24_ladder;
        }
        float _2602;
        if (_2173 > 0.0)
        {
            _2602 = abs((1.0 - _2163) / _2173);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2173 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2163 + 1.0) / _2173);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2602 = frontier_phi_40_35_ladder;
        }
        float _2940;
        if (_2176 > 0.0)
        {
            _2940 = abs((1.0 - _2167) / _2176);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2176 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2167 + 1.0) / _2176);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2940 = frontier_phi_50_47_ladder;
        }
        float _2942 = isnan(_2602) ? _2285 : (isnan(_2285) ? _2602 : min(_2285, _2602));
        float _2943 = isnan(_2940) ? _2942 : (isnan(_2942) ? _2940 : min(_2942, _2940));
        float _2947 = (_2943 * _2170) + _2159;
        float _2948 = (_2943 * _2173) + _2163;
        float _2949 = (_2943 * _2176) + _2167;
        float _2950 = _2943 * 9.9999997473787516355514526367188e-05;
        float _2951 = (-1.0) - _2950;
        float _2953 = _2950 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2949 > _2953) || ((_2949 < _2951) || ((_2948 > _2953) || ((_2948 < _2951) || ((_2947 < _2951) || (_2947 > _2953))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3071 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2949, cbModelParam._m0[17u].z, fma(_2948, cbModelParam._m0[17u].y, _2947 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2949, cbModelParam._m0[18u].z, fma(_2948, cbModelParam._m0[18u].y, _2947 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2949, cbModelParam._m0[19u].z, fma(_2948, cbModelParam._m0[19u].y, _2947 * cbModelParam._m0[19u].x))), _2106);
            frontier_phi_25_50_ladder = _3071.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3071.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3071.x * cbModelParam._m0[1u].z;
        }
        _2195 = frontier_phi_25_50_ladder_2;
        _2197 = frontier_phi_25_50_ladder_1;
        _2199 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2179 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1179, _1180, _1181), _2106);
        _2195 = _2179.x * cbModelParam._m0[1u].z;
        _2197 = _2179.y * cbModelParam._m0[1u].z;
        _2199 = _2179.z * cbModelParam._m0[1u].z;
    }
    float _2212 = (((_1204 * _1156) + _1205) * _1171) * ((cbModelParam._m0[1u].w * (_2195 - _2097)) + _2097);
    float _2214 = (((_1204 * _1158) + _1205) * _1171) * ((cbModelParam._m0[1u].w * (_2197 - _2099)) + _2099);
    float _2216 = (((_1204 * _1159) + _1205) * _1171) * ((cbModelParam._m0[1u].w * (_2199 - _2101)) + _2101);
    float _2219 = fma(_2216, cbSceneParam._m0[89u].z, fma(_2214, cbSceneParam._m0[89u].y, _2212 * cbSceneParam._m0[89u].x));
    float _2222 = fma(_2216, cbSceneParam._m0[90u].z, fma(_2214, cbSceneParam._m0[90u].y, _2212 * cbSceneParam._m0[90u].x));
    float _2225 = fma(_2216, cbSceneParam._m0[91u].z, fma(_2214, cbSceneParam._m0[91u].y, _2212 * cbSceneParam._m0[91u].x));
    float _2259 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2263 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2267 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2271 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2272 = _2259 / _2271;
    float _2273 = _2263 / _2271;
    float _2274 = _2267 / _2271;
    float _2421;
    float _2422;
    float _2423;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2301 = ((uint(_2274 > cbSceneParam._m0[59u].y) + uint(_2274 > cbSceneParam._m0[59u].x)) + uint(_2274 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2302 = _2301 + 43u;
        uint _2310 = _2301 + 44u;
        uint _2318 = _2301 + 45u;
        uint _2326 = _2301 + 46u;
        float _2337 = fma(_2271, cbSceneParam._m0[_2302].w, fma(_2267, cbSceneParam._m0[_2302].z, fma(_2263, cbSceneParam._m0[_2302].y, _2259 * cbSceneParam._m0[_2302].x)));
        float _2341 = fma(_2271, cbSceneParam._m0[_2310].w, fma(_2267, cbSceneParam._m0[_2310].z, fma(_2263, cbSceneParam._m0[_2310].y, _2259 * cbSceneParam._m0[_2310].x)));
        float _2349 = fma(_2271, cbSceneParam._m0[_2326].w, fma(_2267, cbSceneParam._m0[_2326].z, fma(_2263, cbSceneParam._m0[_2326].y, _2259 * cbSceneParam._m0[_2326].x)));
        float _2354 = cbSceneParam._m0[33u].z * _2349;
        float _2356 = cbSceneParam._m0[33u].w * _2349;
        float _2359 = fma(_2271, cbSceneParam._m0[_2318].w, fma(_2267, cbSceneParam._m0[_2318].z, fma(_2263, cbSceneParam._m0[_2318].y, _2259 * cbSceneParam._m0[_2318].x))) / _2349;
        float _2407 = (cbSceneParam._m0[33u].x - sqrt(((_2273 * _2273) + (_2272 * _2272)) + (_2274 * _2274))) * cbSceneParam._m0[33u].y;
        float _4851 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2414 = (isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2354 + _2337) / _2349, (_2356 + _2341) / _2349), _2359), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2356 + _2337) / _2349, (_2341 - _2354) / _2349), _2359), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2337 - _2354) / _2349, (_2341 - _2356) / _2349), _2359), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2337 - _2356) / _2349, (_2354 + _2341) / _2349), _2359), 0.0)).x), vec4(0.25)));
        _2421 = 1.0 - (_2414 * cbSceneParam._m0[34u].x);
        _2422 = 1.0 - (_2414 * cbSceneParam._m0[34u].y);
        _2423 = 1.0 - (_2414 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2421 = 1.0;
        _2422 = 1.0;
        _2423 = 1.0;
    }
    float _2487;
    float _2489;
    float _2491;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2475 = fma(_2271, cbSceneParam._m0[63u].w, fma(_2267, cbSceneParam._m0[63u].z, fma(_2263, cbSceneParam._m0[63u].y, _2259 * cbSceneParam._m0[63u].x)));
        float _2476 = fma(_2271, cbSceneParam._m0[60u].w, fma(_2267, cbSceneParam._m0[60u].z, fma(_2263, cbSceneParam._m0[60u].y, _2259 * cbSceneParam._m0[60u].x))) / _2475;
        float _2477 = fma(_2271, cbSceneParam._m0[61u].w, fma(_2267, cbSceneParam._m0[61u].z, fma(_2263, cbSceneParam._m0[61u].y, _2259 * cbSceneParam._m0[61u].x))) / _2475;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2476 >= cbSceneParam._m0[64u].x) && (_2477 >= cbSceneParam._m0[64u].y)) && (_2476 <= cbSceneParam._m0[64u].z)) && (_2477 <= cbSceneParam._m0[64u].w))
        {
            float _2615 = fma(_2271, cbSceneParam._m0[62u].w, fma(_2267, cbSceneParam._m0[62u].z, fma(_2263, cbSceneParam._m0[62u].y, _2259 * cbSceneParam._m0[62u].x))) / _2475;
            float _2619 = isnan(cbSceneParam._m0[41u].w) ? _2615 : (isnan(_2615) ? cbSceneParam._m0[41u].w : max(_2615, cbSceneParam._m0[41u].w));
            float _2662 = (cbSceneParam._m0[33u].x - sqrt(((_2273 * _2273) + (_2272 * _2272)) + (_2274 * _2274))) * cbSceneParam._m0[33u].y;
            float _4867 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
            float _2669 = (isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2476, cbSceneParam._m0[33u].w + _2477), _2619), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2476, _2477 - cbSceneParam._m0[33u].z), _2619), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2476 - cbSceneParam._m0[33u].z, _2477 - cbSceneParam._m0[33u].w), _2619), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2476 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2477), _2619), 0.0)).x), vec4(0.25)));
            float _2673 = 1.0 - (_2669 * cbSceneParam._m0[34u].x);
            float _2674 = 1.0 - (_2669 * cbSceneParam._m0[34u].y);
            float _2675 = 1.0 - (_2669 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2675) ? _2423 : (isnan(_2423) ? _2675 : min(_2423, _2675));
            frontier_phi_37_36_ladder_1 = isnan(_2674) ? _2422 : (isnan(_2422) ? _2674 : min(_2422, _2674));
            frontier_phi_37_36_ladder_2 = isnan(_2673) ? _2421 : (isnan(_2421) ? _2673 : min(_2421, _2673));
        }
        else
        {
            frontier_phi_37_36_ladder = _2423;
            frontier_phi_37_36_ladder_1 = _2422;
            frontier_phi_37_36_ladder_2 = _2421;
        }
        _2487 = frontier_phi_37_36_ladder_2;
        _2489 = frontier_phi_37_36_ladder_1;
        _2491 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2487 = _2421;
        _2489 = _2422;
        _2491 = _2423;
    }
    uvec4 _2496 = floatBitsToUint(cbInstanceData._m0[_1131 + 5u]);
    uint _2498 = _2496.x * 14u;
    uint _2499 = _2498 + 13u;
    float _2506 = _1171 + (-1.0);
    float _2511 = (cbLight._m0[_2499].x * _2506) + 1.0;
    float _2512 = (cbLight._m0[_2499].y * _2506) + 1.0;
    float _2513 = (cbLight._m0[_2499].z * _2506) + 1.0;
    float _2514 = (cbLight._m0[_2499].w * _2506) + 1.0;
    uint _2515 = _2498 + 5u;
    float _2521 = isnan(1.0) ? _2512 : (isnan(_2512) ? 1.0 : min(_2512, 1.0));
    uint _2525 = _2498 + 4u;
    float _2534 = isnan(1.0) ? _2511 : (isnan(_2511) ? 1.0 : min(_2511, 1.0));
    uint _2538 = _2498 | 1u;
    float _2549 = dot(vec3(cbLight._m0[_2498].xyz), vec3(_992, _993, _994));
    float _2552 = dot(vec3(cbLight._m0[_2538].xyz), vec3(_992, _993, _994));
    float _4903 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
    float _4914 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
    float _2557 = (isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0))) * 0.3183098733425140380859375;
    float _2559 = (isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0))) * 0.3183098733425140380859375;
    float _2566 = ((cbLight._m0[_2515].x * _2521) * _2559) + (((cbLight._m0[_2525].x * _2487) * _2534) * _2557);
    float _2567 = ((_2521 * cbLight._m0[_2515].y) * _2559) + (((cbLight._m0[_2525].y * _2489) * _2534) * _2557);
    float _2568 = ((_2521 * cbLight._m0[_2515].z) * _2559) + (((cbLight._m0[_2525].z * _2491) * _2534) * _2557);
    uvec4 _2572 = floatBitsToUint(cbLight._m0[_2498 + 12u]);
    bool _2574 = _2572.x == 0u;
    float _2676;
    float _2678;
    float _2680;
    if (_2574)
    {
        _2676 = _2566;
        _2678 = _2567;
        _2680 = _2568;
    }
    else
    {
        uint _2684 = _2498 + 6u;
        float _2700 = (dot(vec3(cbLight._m0[_2498 + 2u].xyz), vec3(_992, _993, _994)) * 0.5) + 0.5;
        float _2701 = _2700 * _2700;
        float _4925 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2702 = isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0));
        float _2703 = isnan(1.0) ? _2513 : (isnan(_2513) ? 1.0 : min(_2513, 1.0));
        _2676 = (((cbLight._m0[_2684].x * 0.3183098733425140380859375) * _2702) * _2703) + _2566;
        _2678 = (((cbLight._m0[_2684].y * 0.3183098733425140380859375) * _2702) * _2703) + _2567;
        _2680 = (((cbLight._m0[_2684].z * 0.3183098733425140380859375) * _2702) * _2703) + _2568;
    }
    bool _2683 = _2572.y == 0u;
    float _2738;
    float _2740;
    float _2742;
    if (_2683)
    {
        _2738 = _2676;
        _2740 = _2678;
        _2742 = _2680;
    }
    else
    {
        uint _2911 = _2498 + 7u;
        float _2927 = (dot(vec3(cbLight._m0[_2498 + 3u].xyz), vec3(_992, _993, _994)) * 0.5) + 0.5;
        float _2928 = _2927 * _2927;
        float _4941 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
        float _2929 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
        float _2930 = isnan(1.0) ? _2514 : (isnan(_2514) ? 1.0 : min(_2514, 1.0));
        _2738 = (((cbLight._m0[_2911].x * 0.3183098733425140380859375) * _2929) * _2930) + _2676;
        _2740 = (((cbLight._m0[_2911].y * 0.3183098733425140380859375) * _2929) * _2930) + _2678;
        _2742 = (((cbLight._m0[_2911].z * 0.3183098733425140380859375) * _2929) * _2930) + _2680;
    }
    uint _2745 = _2498 + 8u;
    float _2758 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2498].w)) * _996) * 0.949999988079071044921875);
    float _2759 = _2758 * _2758;
    float _2760 = cbLight._m0[_2498].x + _1073;
    float _2761 = cbLight._m0[_2498].y + _1074;
    float _2762 = cbLight._m0[_2498].z + _1075;
    float _2766 = inversesqrt(dot(vec3(_2760, _2761, _2762), vec3(_2760, _2761, _2762)));
    float _2767 = _2766 * _2760;
    float _2768 = _2766 * _2761;
    float _2769 = _2766 * _2762;
    float _2770 = dot(vec3(_992, _993, _994), vec3(cbLight._m0[_2498].xyz));
    float _4957 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
    float _2773 = isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0));
    float _4968 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
    float _2774 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
    float _2775 = dot(vec3(_992, _993, _994), vec3(_2767, _2768, _2769));
    float _4979 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
    float _2778 = isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0));
    float _2779 = dot(vec3(cbLight._m0[_2498].xyz), vec3(_2767, _2768, _2769));
    float _4990 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
    float _2783 = _2759 * _2759;
    float _2787 = ((_2778 * _2778) * (_2783 + (-1.0))) + 1.0;
    float _2795 = exp2(log2(1.0 - (isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0)))) * 5.0);
    float _2796 = 0.959999978542327880859375 - _1153;
    float _2798 = 0.959999978542327880859375 - _1154;
    float _2799 = 0.959999978542327880859375 - _1155;
    float _2806 = 1.0 - _2759;
    float _2817 = (0.5 / (((_2774 * ((_2773 * _2806) + _2759)) + 9.9999999392252902907785028219223e-09) + (((_2774 * _2806) + _2759) * _2773))) * _2773;
    float _5001 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
    float _2819 = (isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0))) * (_2783 / ((_2787 * _2787) * 3.141590118408203125));
    uint _2833 = _2498 + 9u;
    float _2844 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2538].w)) * _996) * 0.949999988079071044921875);
    float _2845 = _2844 * _2844;
    float _2846 = cbLight._m0[_2538].x + _1073;
    float _2847 = cbLight._m0[_2538].y + _1074;
    float _2848 = cbLight._m0[_2538].z + _1075;
    float _2852 = inversesqrt(dot(vec3(_2846, _2847, _2848), vec3(_2846, _2847, _2848)));
    float _2853 = _2852 * _2846;
    float _2854 = _2852 * _2847;
    float _2855 = _2852 * _2848;
    float _2856 = dot(vec3(_992, _993, _994), vec3(cbLight._m0[_2538].xyz));
    float _5012 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
    float _2859 = isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0));
    float _2860 = dot(vec3(_992, _993, _994), vec3(_2853, _2854, _2855));
    float _5023 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
    float _2863 = isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0));
    float _2864 = dot(vec3(cbLight._m0[_2538].xyz), vec3(_2853, _2854, _2855));
    float _5034 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
    float _2868 = _2845 * _2845;
    float _2872 = ((_2863 * _2863) * (_2868 + (-1.0))) + 1.0;
    float _2879 = exp2(log2(1.0 - (isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0)))) * 5.0);
    float _2886 = 1.0 - _2845;
    float _2896 = (0.5 / (((_2774 * ((_2859 * _2886) + _2845)) + 9.9999999392252902907785028219223e-09) + (((_2774 * _2886) + _2845) * _2859))) * _2859;
    float _5045 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
    float _2898 = (isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0))) * (_2868 / ((_2872 * _2872) * 3.141590118408203125));
    float _2908 = (((((_2879 * _2796) + _1156) * cbLight._m0[_2833].x) * _2898) * _2521) + ((((cbLight._m0[_2745].x * _2487) * ((_2795 * _2796) + _1156)) * _2819) * _2534);
    float _2909 = (((((_2879 * _2798) + _1158) * cbLight._m0[_2833].y) * _2898) * _2521) + ((((cbLight._m0[_2745].y * _2489) * ((_2795 * _2798) + _1158)) * _2819) * _2534);
    float _2910 = (((((_2879 * _2799) + _1159) * cbLight._m0[_2833].z) * _2898) * _2521) + ((((cbLight._m0[_2745].z * _2491) * ((_2795 * _2799) + _1159)) * _2819) * _2534);
    float _2966;
    float _2968;
    float _2970;
    if (_2574)
    {
        _2966 = _2908;
        _2968 = _2909;
        _2970 = _2910;
    }
    else
    {
        uint _2972 = _2498 + 2u;
        uint _2976 = _2498 + 10u;
        float _2990 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2972].w)) * _996) * 0.949999988079071044921875);
        float _2991 = _2990 * _2990;
        float _2992 = cbLight._m0[_2972].x + _1073;
        float _2993 = cbLight._m0[_2972].y + _1074;
        float _2994 = cbLight._m0[_2972].z + _1075;
        float _2998 = inversesqrt(dot(vec3(_2992, _2993, _2994), vec3(_2992, _2993, _2994)));
        float _2999 = _2998 * _2992;
        float _3000 = _2998 * _2993;
        float _3001 = _2998 * _2994;
        float _3002 = dot(vec3(_992, _993, _994), vec3(cbLight._m0[_2972].xyz));
        float _5056 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
        float _3005 = isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0));
        float _3006 = dot(vec3(_992, _993, _994), vec3(_2999, _3000, _3001));
        float _5067 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
        float _3009 = isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0));
        float _3010 = dot(vec3(cbLight._m0[_2972].xyz), vec3(_2999, _3000, _3001));
        float _5078 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
        float _3014 = _2991 * _2991;
        float _3018 = ((_3009 * _3009) * (_3014 + (-1.0))) + 1.0;
        float _3025 = exp2(log2(1.0 - (isnan(1.0) ? _5078 : (isnan(_5078) ? 1.0 : min(_5078, 1.0)))) * 5.0);
        float _3032 = 1.0 - _2991;
        float _3042 = (0.5 / (((_2774 * ((_3005 * _3032) + _2991)) + 9.9999999392252902907785028219223e-09) + (((_2774 * _3032) + _2991) * _3005))) * _3005;
        float _5089 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
        float _3044 = (isnan(1.0) ? _5089 : (isnan(_5089) ? 1.0 : min(_5089, 1.0))) * (_3014 / ((_3018 * _3018) * 3.141590118408203125));
        float _3045 = isnan(1.0) ? _2513 : (isnan(_2513) ? 1.0 : min(_2513, 1.0));
        _2966 = (((((_3025 * _2796) + _1156) * cbLight._m0[_2976].x) * _3044) * _3045) + _2908;
        _2968 = (((((_3025 * _2798) + _1158) * cbLight._m0[_2976].y) * _3044) * _3045) + _2909;
        _2970 = (((((_3025 * _2799) + _1159) * cbLight._m0[_2976].z) * _3044) * _3045) + _2910;
    }
    float _3076;
    float _3078;
    float _3080;
    if (_2683)
    {
        _3076 = _2966;
        _3078 = _2968;
        _3080 = _2970;
    }
    else
    {
        uint _3087 = _2498 + 3u;
        uint _3091 = _2498 + 11u;
        float _3105 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3087].w)) * _996) * 0.949999988079071044921875);
        float _3106 = _3105 * _3105;
        float _3107 = cbLight._m0[_3087].x + _1073;
        float _3108 = cbLight._m0[_3087].y + _1074;
        float _3109 = cbLight._m0[_3087].z + _1075;
        float _3113 = inversesqrt(dot(vec3(_3107, _3108, _3109), vec3(_3107, _3108, _3109)));
        float _3114 = _3113 * _3107;
        float _3115 = _3113 * _3108;
        float _3116 = _3113 * _3109;
        float _3117 = dot(vec3(_992, _993, _994), vec3(cbLight._m0[_3087].xyz));
        float _5105 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
        float _3120 = isnan(1.0) ? _5105 : (isnan(_5105) ? 1.0 : min(_5105, 1.0));
        float _3121 = dot(vec3(_992, _993, _994), vec3(_3114, _3115, _3116));
        float _5116 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
        float _3124 = isnan(1.0) ? _5116 : (isnan(_5116) ? 1.0 : min(_5116, 1.0));
        float _3125 = dot(vec3(cbLight._m0[_3087].xyz), vec3(_3114, _3115, _3116));
        float _5127 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
        float _3129 = _3106 * _3106;
        float _3133 = ((_3124 * _3124) * (_3129 + (-1.0))) + 1.0;
        float _3140 = exp2(log2(1.0 - (isnan(1.0) ? _5127 : (isnan(_5127) ? 1.0 : min(_5127, 1.0)))) * 5.0);
        float _3147 = 1.0 - _3106;
        float _3157 = (0.5 / (((_2774 * ((_3120 * _3147) + _3106)) + 9.9999999392252902907785028219223e-09) + (((_2774 * _3147) + _3106) * _3120))) * _3120;
        float _5138 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
        float _3159 = (isnan(1.0) ? _5138 : (isnan(_5138) ? 1.0 : min(_5138, 1.0))) * (_3129 / ((_3133 * _3133) * 3.141590118408203125));
        float _3160 = isnan(1.0) ? _2514 : (isnan(_2514) ? 1.0 : min(_2514, 1.0));
        _3076 = (((((_3140 * _2796) + _1156) * cbLight._m0[_3091].x) * _3159) * _3160) + _2966;
        _3078 = (((((_3140 * _2798) + _1158) * cbLight._m0[_3091].y) * _3159) * _3160) + _2968;
        _3080 = (((((_3140 * _2799) + _1159) * cbLight._m0[_3091].z) * _3159) * _3160) + _2970;
    }
    float _3226;
    float _3228;
    float _3230;
    float _3232;
    float _3234;
    float _3236;
    if (_2496.y == 0u)
    {
        uvec4 _3181 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3182 = _3181.x;
        uint _3193 = uint((float(_3181.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1094) / _3182))) + floor(float(uint(cbSceneParam._m0[85u].x * _1093) / _3182)));
        float _3203 = (log2(_2274 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3204 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
        uint _3207 = uint(isnan(14.0) ? _3204 : (isnan(_3204) ? 14.0 : min(_3204, 14.0)));
        uvec4 _3212 = texelFetch(g_lightClusterGridBuffer, int(((_3207 << 2u) + (_3193 << 6u)) >> 2u));
        uint _3213 = _3212.x;
        uint _3214 = _3181.z;
        float _3295;
        float _3297;
        float _3299;
        float _3301;
        float _3303;
        float _3305;
        if (((((1u << ((_3214 >> 4u) & 15u)) + 4294967295u) & _3213) == 0u) || ((_3214 & 240u) == 0u))
        {
            _3295 = 0.0;
            _3297 = 0.0;
            _3299 = 0.0;
            _3301 = 0.0;
            _3303 = 0.0;
            _3305 = 0.0;
        }
        else
        {
            float _3296;
            float _3298;
            float _3300;
            float _3302;
            float _3304;
            float _3306;
            float _3448 = 0.0;
            float _3449 = 0.0;
            float _3450 = 0.0;
            float _3451 = 0.0;
            float _3452 = 0.0;
            float _3453 = 0.0;
            uint _3454 = 0u;
            uint _3463;
            bool _3464;
            for (;;)
            {
                _3463 = texelFetch(g_lightClassification, int((((_3207 << 5u) + (_3193 << 9u)) + (_3454 << 2u)) >> 2u)).x;
                _3464 = _3463 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3464)
                {
                    frontier_phi_71_pred = _3453;
                    frontier_phi_71_pred_1 = _3452;
                    frontier_phi_71_pred_2 = _3451;
                    frontier_phi_71_pred_3 = _3450;
                    frontier_phi_71_pred_4 = _3449;
                    frontier_phi_71_pred_5 = _3448;
                }
                else
                {
                    float _3593;
                    float _3594;
                    float _3595;
                    float _3596;
                    float _3597;
                    float _3598;
                    uint _3599;
                    _3593 = _3448;
                    _3594 = _3449;
                    _3595 = _3450;
                    _3596 = _3451;
                    _3597 = _3452;
                    _3598 = _3453;
                    _3599 = _3463;
                    float _3520;
                    float _3521;
                    float _3522;
                    float _3523;
                    float _3524;
                    float _3525;
                    for (;;)
                    {
                        uint _3603 = uint(findLSB(_3599)) + (_3454 << 5u);
                        uint _3600 = (_3599 + 4294967295u) & _3599;
                        uint _3605 = _3603 * 48u;
                        vec4 _3619 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3605)).x, texelFetch(g_PointLightRenderingBuffer, int(_3605 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3605 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3605 + 3u)).x));
                        uint _3625 = (_3603 * 48u) + 4u;
                        vec4 _3638 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3625)).x, texelFetch(g_PointLightRenderingBuffer, int(_3625 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3625 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3625 + 3u)).x));
                        uint _3644 = (_3603 * 48u) + 8u;
                        vec3 _3655 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3644)).x, texelFetch(g_PointLightRenderingBuffer, int(_3644 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3644 + 2u)).x));
                        float _3659 = _3619.x - _2272;
                        float _3660 = _3619.y - _2273;
                        float _3661 = _3619.z - _2274;
                        float _3662 = dot(vec3(_3659, _3660, _3661), vec3(_3659, _3660, _3661));
                        float _3665 = inversesqrt(_3662);
                        float _3666 = _3665 * _3659;
                        float _3667 = _3665 * _3660;
                        float _3668 = _3665 * _3661;
                        float _3669 = dot(vec3(_1112, _1115, _1118), vec3(_3666, _3667, _3668));
                        float _3674 = 1.0 - (_3662 * _3619.w);
                        float _5164 = isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0));
                        float _3675 = isnan(1.0) ? _5164 : (isnan(_5164) ? 1.0 : min(_5164, 1.0));
                        float _3676 = sqrt(_3662) * _3638.w;
                        float _3679 = 1.39999997615814208984375 / (_3676 + 1.39999997615814208984375);
                        float _3680 = _3679 * _3679;
                        float _3683 = ((1.0 - _3680) * _3669) + _3680;
                        float _3686 = _3676 * _3676;
                        float _3690 = ((isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0))) * _3675) / ((_3686 * 0.699999988079071044921875) + 1.0);
                        float _3694 = (-0.0) - _2272;
                        float _3695 = (-0.0) - _2273;
                        float _3696 = (-0.0) - _2274;
                        float _3700 = inversesqrt(dot(vec3(_3694, _3695, _3696), vec3(_3694, _3695, _3696)));
                        float _3701 = _3700 * _3694;
                        float _3702 = _3700 * _3695;
                        float _3703 = _3700 * _3696;
                        float _3710 = exp2(log2(1.0 / ((_3686 * 3.5) + 5.0)) * 0.25);
                        float _3711 = 1.0 - _1187;
                        float _3718 = sqrt(1.0 - ((1.0 - (_3711 * _3711)) * (1.0 - (_3710 * _3710))));
                        float _3719 = _3718 * _3718;
                        float _3720 = _3719 * _3719;
                        float _3721 = _3701 + _3666;
                        float _3722 = _3702 + _3667;
                        float _3723 = _3703 + _3668;
                        float _3727 = inversesqrt(dot(vec3(_3721, _3722, _3723), vec3(_3721, _3722, _3723)));
                        float _3731 = dot(vec3(_1112, _1115, _1118), vec3(_3701, _3702, _3703));
                        float _5180 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                        float _3734 = isnan(1.0) ? _5180 : (isnan(_5180) ? 1.0 : min(_5180, 1.0));
                        float _3735 = dot(vec3(_1112, _1115, _1118), vec3(_3727 * _3721, _3727 * _3722, _3727 * _3723));
                        float _5191 = isnan(0.0) ? _3735 : (isnan(_3735) ? 0.0 : max(_3735, 0.0));
                        float _3738 = isnan(1.0) ? _5191 : (isnan(_5191) ? 1.0 : min(_5191, 1.0));
                        float _3742 = ((_3738 * _3738) * (_3720 + (-1.0))) + 1.0;
                        float _3743 = _3679 * _3719;
                        float _3744 = _3743 * _3743;
                        float _3747 = ((1.0 - _3744) * _3669) + _3744;
                        float _5202 = isnan(0.0) ? _3747 : (isnan(_3747) ? 0.0 : max(_3747, 0.0));
                        float _3748 = isnan(1.0) ? _5202 : (isnan(_5202) ? 1.0 : min(_5202, 1.0));
                        float _3749 = 1.0 - _3719;
                        float _3759 = (0.5 / (((_3748 * ((_3734 * _3749) + _3719)) + 9.9999999392252902907785028219223e-09) + (((_3748 * _3749) + _3719) * _3734))) * _3748;
                        float _5213 = isnan(0.0) ? _3759 : (isnan(_3759) ? 0.0 : max(_3759, 0.0));
                        float _3770 = (((_3720 * 3.1415927410125732421875) * (isnan(1.0) ? _5213 : (isnan(_5213) ? 1.0 : min(_5213, 1.0)))) / ((_3742 * _3742) * ((_3686 * 2.1991131305694580078125) + 3.141590118408203125))) * _3675;
                        _3523 = (_3690 * _3638.x) + _3596;
                        _3524 = (_3690 * _3638.y) + _3597;
                        _3525 = (_3690 * _3638.z) + _3598;
                        _3520 = (_3770 * _3655.x) + _3593;
                        _3521 = (_3770 * _3655.y) + _3594;
                        _3522 = (_3770 * _3655.z) + _3595;
                        if (_3600 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3593 = _3520;
                            _3594 = _3521;
                            _3595 = _3522;
                            _3596 = _3523;
                            _3597 = _3524;
                            _3598 = _3525;
                            _3599 = _3600;
                        }
                    }
                    frontier_phi_71_pred = _3525;
                    frontier_phi_71_pred_1 = _3524;
                    frontier_phi_71_pred_2 = _3523;
                    frontier_phi_71_pred_3 = _3522;
                    frontier_phi_71_pred_4 = _3521;
                    frontier_phi_71_pred_5 = _3520;
                }
                _3306 = frontier_phi_71_pred;
                _3304 = frontier_phi_71_pred_1;
                _3302 = frontier_phi_71_pred_2;
                _3300 = frontier_phi_71_pred_3;
                _3298 = frontier_phi_71_pred_4;
                _3296 = frontier_phi_71_pred_5;
                uint _3455 = _3454 + 1u;
                if (_3455 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3448 = _3296;
                    _3449 = _3298;
                    _3450 = _3300;
                    _3451 = _3302;
                    _3452 = _3304;
                    _3453 = _3306;
                    _3454 = _3455;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3295 = _3296;
            _3297 = _3298;
            _3299 = _3300;
            _3301 = _3302;
            _3303 = _3304;
            _3305 = _3306;
        }
        uvec4 _3309 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3310 = _3309.z;
        uint _3312 = (_3310 >> 8u) & 15u;
        float _3416;
        float _3418;
        float _3420;
        float _3422;
        float _3424;
        float _3426;
        if (((4294967295u << _3312) & _3213) == 0u)
        {
            _3416 = _3295;
            _3418 = _3297;
            _3420 = _3299;
            _3422 = _3301;
            _3424 = _3303;
            _3426 = _3305;
        }
        else
        {
            float _3441 = inversesqrt(dot(vec3(_2272, _2273, _2274), vec3(_2272, _2273, _2274)));
            float _3442 = _3441 * _2272;
            float _3443 = _3441 * _2273;
            float _3444 = _3441 * _2274;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3312 < ((_3310 >> 12u) & 15u))
            {
                float _3417;
                float _3419;
                float _3421;
                float _3423;
                float _3425;
                float _3427;
                float _3576 = _3295;
                float _3577 = _3297;
                float _3578 = _3299;
                float _3579 = _3301;
                float _3580 = _3303;
                float _3581 = _3305;
                uint _3582 = _3312;
                uint _3591;
                bool _3592;
                for (;;)
                {
                    _3591 = texelFetch(g_lightClassification, int((((_3207 << 5u) + (_3193 << 9u)) + (_3582 << 2u)) >> 2u)).x;
                    _3592 = _3591 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3592)
                    {
                        frontier_phi_82_pred = _3581;
                        frontier_phi_82_pred_1 = _3580;
                        frontier_phi_82_pred_2 = _3579;
                        frontier_phi_82_pred_3 = _3578;
                        frontier_phi_82_pred_4 = _3577;
                        frontier_phi_82_pred_5 = _3576;
                    }
                    else
                    {
                        float _3784;
                        float _3785;
                        float _3786;
                        float _3787;
                        float _3788;
                        float _3789;
                        float _4077;
                        float _4078;
                        float _4079;
                        float _4080;
                        float _4081;
                        float _4082;
                        float _3797 = _3576;
                        float _3798 = _3577;
                        float _3799 = _3578;
                        float _3800 = _3579;
                        float _3801 = _3580;
                        float _3802 = _3581;
                        uint _3803 = _3591;
                        uint _3804;
                        vec4 _3829;
                        float _3830;
                        vec4 _3845;
                        vec3 _3857;
                        vec4 _3872;
                        vec4 _3887;
                        float _3933;
                        bool _3934;
                        for (;;)
                        {
                            uint _3814 = ((_3582 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3803));
                            _3804 = (_3803 + 4294967295u) & _3803;
                            uint _3816 = _3814 * 40u;
                            _3829 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3816)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3816 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3816 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3816 + 3u)).x));
                            _3830 = _3829.w;
                            uint _3832 = (_3814 * 40u) + 4u;
                            _3845 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3832)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3832 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3832 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3832 + 3u)).x));
                            uint _3847 = (_3814 * 40u) + 8u;
                            _3857 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3847)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3847 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3847 + 2u)).x));
                            uint _3859 = (_3814 * 40u) + 16u;
                            _3872 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3859)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3859 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3859 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3859 + 3u)).x));
                            uint _3874 = (_3814 * 40u) + 20u;
                            _3887 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3874)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3874 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3874 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3874 + 3u)).x));
                            uint _3889 = (_3814 * 40u) + 24u;
                            vec4 _3902 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3889)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3889 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3889 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3889 + 3u)).x));
                            uint _3908 = (_3814 * 40u) + 28u;
                            vec4 _3921 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3908 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3908 + 3u)).x));
                            _3933 = fma(_2274, _3921.z, fma(_2273, _3921.y, _3921.x * _2272)) + _3921.w;
                            _3934 = !((fma(_2274, _3902.z, fma(_2273, _3902.y, _3902.x * _2272)) + _3902.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3934)
                            {
                                float _3961 = _3829.x - _2272;
                                float _3962 = _3829.y - _2273;
                                float _3963 = _3829.z - _2274;
                                float _3964 = dot(vec3(_3961, _3962, _3963), vec3(_3961, _3962, _3963));
                                float _3967 = inversesqrt(_3964);
                                float _3968 = _3967 * _3961;
                                float _3969 = _3967 * _3962;
                                float _3970 = _3967 * _3963;
                                float _3974 = 1.0 - (_3964 / (_3830 * _3830));
                                float _5224 = isnan(0.0) ? _3974 : (isnan(_3974) ? 0.0 : max(_3974, 0.0));
                                float _3975 = isnan(1.0) ? _5224 : (isnan(_5224) ? 1.0 : min(_5224, 1.0));
                                float _3979 = sqrt(_3964) * _3845.w;
                                float _3981 = 1.39999997615814208984375 / (_3979 + 1.39999997615814208984375);
                                float _3982 = _3981 * _3981;
                                float _3985 = ((1.0 - _3982) * dot(vec3(_3968, _3969, _3970), vec3(_1112, _1115, _1118))) + _3982;
                                float _3988 = _3979 * _3979;
                                float _3992 = (fma(_2274, _3872.z, fma(_2273, _3872.y, _3872.x * _2272)) + _3872.w) / _3933;
                                float _3993 = (fma(_2274, _3887.z, fma(_2273, _3887.y, _3887.x * _2272)) + _3887.w) / _3933;
                                float _3997 = 1.0 - dot(vec2(_3992, _3993), vec2(_3992, _3993));
                                float _5240 = isnan(0.0) ? _3997 : (isnan(_3997) ? 0.0 : max(_3997, 0.0));
                                float _3998 = isnan(1.0) ? _5240 : (isnan(_5240) ? 1.0 : min(_5240, 1.0));
                                float _3999 = _3998 * (((isnan(0.0) ? _3985 : (isnan(_3985) ? 0.0 : max(_3985, 0.0))) * _3975) / ((_3988 * 0.699999988079071044921875) + 1.0));
                                float _4011 = exp2(log2(1.0 / ((_3988 * 3.5) + 5.0)) * 0.25);
                                float _4012 = 1.0 - _1187;
                                float _4019 = sqrt(1.0 - ((1.0 - (_4012 * _4012)) * (1.0 - (_4011 * _4011))));
                                float _4020 = _4019 * _4019;
                                float _4021 = _4020 * _4020;
                                float _4022 = _3968 - _3442;
                                float _4023 = _3969 - _3443;
                                float _4024 = _3970 - _3444;
                                float _4028 = inversesqrt(dot(vec3(_4022, _4023, _4024), vec3(_4022, _4023, _4024)));
                                float _4032 = dot(vec3(_1112, _1115, _1118), vec3((-0.0) - _3442, (-0.0) - _3443, (-0.0) - _3444));
                                float _5251 = isnan(0.0) ? _4032 : (isnan(_4032) ? 0.0 : max(_4032, 0.0));
                                float _4035 = isnan(1.0) ? _5251 : (isnan(_5251) ? 1.0 : min(_5251, 1.0));
                                float _4036 = dot(vec3(_1112, _1115, _1118), vec3(_4028 * _4022, _4028 * _4023, _4028 * _4024));
                                float _5262 = isnan(0.0) ? _4036 : (isnan(_4036) ? 0.0 : max(_4036, 0.0));
                                float _4039 = isnan(1.0) ? _5262 : (isnan(_5262) ? 1.0 : min(_5262, 1.0));
                                float _4043 = ((_4039 * _4039) * (_4021 + (-1.0))) + 1.0;
                                float _4044 = _3981 * _4020;
                                float _4045 = _4044 * _4044;
                                float _4051 = ((1.0 - _4045) * dot(vec3(_1112, _1115, _1118), vec3(_3968, _3969, _3970))) + _4045;
                                float _5273 = isnan(0.0) ? _4051 : (isnan(_4051) ? 0.0 : max(_4051, 0.0));
                                float _4052 = isnan(1.0) ? _5273 : (isnan(_5273) ? 1.0 : min(_5273, 1.0));
                                float _4053 = 1.0 - _4020;
                                float _4063 = (0.5 / (((_4052 * ((_4035 * _4053) + _4020)) + 9.9999999392252902907785028219223e-09) + (((_4052 * _4053) + _4020) * _4035))) * _4052;
                                float _5284 = isnan(0.0) ? _4063 : (isnan(_4063) ? 0.0 : max(_4063, 0.0));
                                float _4073 = (_3998 * _3975) * (((_4021 * 3.1415927410125732421875) * (isnan(1.0) ? _5284 : (isnan(_5284) ? 1.0 : min(_5284, 1.0)))) / ((_4043 * _4043) * ((_3988 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3999 * _3845.z;
                                frontier_phi_88_pred_1 = _3999 * _3845.y;
                                frontier_phi_88_pred_2 = _3999 * _3845.x;
                                frontier_phi_88_pred_3 = _4073 * _3857.z;
                                frontier_phi_88_pred_4 = _4073 * _3857.y;
                                frontier_phi_88_pred_5 = _4073 * _3857.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4082 = frontier_phi_88_pred;
                            _4081 = frontier_phi_88_pred_1;
                            _4080 = frontier_phi_88_pred_2;
                            _4079 = frontier_phi_88_pred_3;
                            _4078 = frontier_phi_88_pred_4;
                            _4077 = frontier_phi_88_pred_5;
                            _3787 = _4080 + _3800;
                            _3788 = _4081 + _3801;
                            _3789 = _4082 + _3802;
                            _3784 = _4077 + _3797;
                            _3785 = _4078 + _3798;
                            _3786 = _4079 + _3799;
                            if (_3804 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3797 = _3784;
                                _3798 = _3785;
                                _3799 = _3786;
                                _3800 = _3787;
                                _3801 = _3788;
                                _3802 = _3789;
                                _3803 = _3804;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3789;
                        frontier_phi_82_pred_1 = _3788;
                        frontier_phi_82_pred_2 = _3787;
                        frontier_phi_82_pred_3 = _3786;
                        frontier_phi_82_pred_4 = _3785;
                        frontier_phi_82_pred_5 = _3784;
                    }
                    _3427 = frontier_phi_82_pred;
                    _3425 = frontier_phi_82_pred_1;
                    _3423 = frontier_phi_82_pred_2;
                    _3421 = frontier_phi_82_pred_3;
                    _3419 = frontier_phi_82_pred_4;
                    _3417 = frontier_phi_82_pred_5;
                    uint _3583 = _3582 + 1u;
                    if (_3583 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3576 = _3417;
                        _3577 = _3419;
                        _3578 = _3421;
                        _3579 = _3423;
                        _3580 = _3425;
                        _3581 = _3427;
                        _3582 = _3583;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3423;
                frontier_phi_63_64_ladder_1 = _3427;
                frontier_phi_63_64_ladder_2 = _3425;
                frontier_phi_63_64_ladder_3 = _3421;
                frontier_phi_63_64_ladder_4 = _3419;
                frontier_phi_63_64_ladder_5 = _3417;
            }
            else
            {
                frontier_phi_63_64_ladder = _3301;
                frontier_phi_63_64_ladder_1 = _3305;
                frontier_phi_63_64_ladder_2 = _3303;
                frontier_phi_63_64_ladder_3 = _3299;
                frontier_phi_63_64_ladder_4 = _3297;
                frontier_phi_63_64_ladder_5 = _3295;
            }
            _3416 = frontier_phi_63_64_ladder_5;
            _3418 = frontier_phi_63_64_ladder_4;
            _3420 = frontier_phi_63_64_ladder_3;
            _3422 = frontier_phi_63_64_ladder;
            _3424 = frontier_phi_63_64_ladder_2;
            _3426 = frontier_phi_63_64_ladder_1;
        }
        float _3431 = isnan(1.0) ? _1171 : (isnan(_1171) ? 1.0 : min(_1171, 1.0));
        _3226 = (_3431 * _3422) + _2738;
        _3228 = (_3431 * _3424) + _2740;
        _3230 = (_3431 * _3426) + _2742;
        _3232 = ((_3416 * _1156) * _3431) + _3076;
        _3234 = ((_3418 * _1158) * _3431) + _3078;
        _3236 = ((_3420 * _1159) * _3431) + _3080;
    }
    else
    {
        _3226 = _2738;
        _3228 = _2740;
        _3230 = _2742;
        _3232 = _3076;
        _3234 = _3078;
        _3236 = _3080;
    }
    float _5300 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _5311 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
    float _5322 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
    float _5333 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _3254 = ((isnan(1.0) ? _5300 : (isnan(_5300) ? 1.0 : min(_5300, 1.0))) * (_3226 + ((isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0))) * _1171))) + ((_3232 + ((isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0))) * _2006)) * cbPerFrame._m0[3u].x);
    float _3255 = ((isnan(1.0) ? _5311 : (isnan(_5311) ? 1.0 : min(_5311, 1.0))) * (_3228 + ((isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))) * _1171))) + ((_3234 + ((isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0))) * _2006)) * cbPerFrame._m0[3u].x);
    float _3256 = ((isnan(1.0) ? _5322 : (isnan(_5322) ? 1.0 : min(_5322, 1.0))) * (_3230 + ((isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0))) * _1171))) + ((_3236 + ((isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0))) * _2006)) * cbPerFrame._m0[3u].x);
    float _3261 = cbInstanceData._m0[_1131 + 6u].w * (isnan(1.0) ? _5333 : (isnan(_5333) ? 1.0 : min(_5333, 1.0)));
    float _3266 = _1093 / cbSceneParam._m0[86u].x;
    float _3267 = _1094 / cbSceneParam._m0[86u].y;
    vec4 _3281 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3266, _3267, (log2((isnan(cbSceneParam._m0[77u].w) ? _1016 : (isnan(_1016) ? cbSceneParam._m0[77u].w : min(_1016, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3283 = _3281.x;
    float _3284 = _3281.y;
    float _3285 = _3281.z;
    float _3286 = _3281.w;
    float _3358;
    float _3360;
    float _3362;
    float _3364;
    if (_1016 > cbSceneParam._m0[78u].w)
    {
        float _3320 = isnan(_1016) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1016 : min(cbSceneParam._m0[80u].w, _1016));
        float _3321 = _3320 / _1016;
        float _3332 = _3321 * _1066;
        float _3333 = _1067 * _3321;
        float _3334 = (-0.0) - _3333;
        float _3336 = _3321 * _1068;
        float _3338 = (cbSceneParam._m0[77u].w * _3334) / _3320;
        float _3339 = _3338 + cbSceneParam._m0[79u].w;
        float _3340 = cbSceneParam._m0[79u].w - _3333;
        float _3346 = sqrt(((_3332 * _3332) + (_3333 * _3333)) + (_3336 * _3336));
        float _3349 = (1.0 - (cbSceneParam._m0[77u].w / _3320)) * _3346;
        float _3354 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3356 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3533;
        if (abs((_3334 - _3338) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3533 = ((((_3339 > 0.0) ? exp2(_3354 * _3339) : (2.0 - exp2(_3356 * _3339))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3349;
        }
        else
        {
            float _3477 = 1.0 / cbSceneParam._m0[80u].x;
            float _3478 = isnan(_3340) ? _3339 : (isnan(_3339) ? _3340 : max(_3339, _3340));
            float _3479 = isnan(_3340) ? _3339 : (isnan(_3339) ? _3340 : min(_3339, _3340));
            float _3488 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : min(_3478, 0.0));
            float _3489 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : min(_3479, 0.0));
            _3533 = ((abs(_3346 / _3334) * cbSceneParam._m0[80u].y) * ((((_3488 - _3489) * 2.0) - ((exp2(_3354 * (isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0)))) - exp2(_3354 * (isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0))))) * _3477)) - ((exp2(_3356 * _3488) - exp2(_3356 * _3489)) * _3477))) + (_3349 * cbSceneParam._m0[80u].z);
        }
        vec4 _3535 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3266, _3267, 1.0), 0.0);
        float _3544 = exp2((_3533 * (-1.44269502162933349609375)) * (1.0 - _3535.w));
        float _3545 = log2(_3544);
        float _3561 = log2(_3286);
        _3358 = (exp2(_3561 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3545 * cbSceneParam._m0[78u].x)) * _3535.x) / cbSceneParam._m0[78u].x)) + _3283;
        _3360 = (exp2(_3561 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3545 * cbSceneParam._m0[78u].y)) * _3535.y) / cbSceneParam._m0[78u].y)) + _3284;
        _3362 = (exp2(_3561 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3545 * cbSceneParam._m0[78u].z)) * _3535.z) / cbSceneParam._m0[78u].z)) + _3285;
        _3364 = _3544 * _3286;
    }
    else
    {
        _3358 = _3283;
        _3360 = _3284;
        _3362 = _3285;
        _3364 = _3286;
    }
    bool _3571;
    vec4 _3374;
    vec4 _3396;
    float _3398;
    float _3402;
    float _3403;
    float _3404;
    float _3405;
    bool _3415;
    for (;;)
    {
        _3374 = cbMatDynParam._m0[0u];
        float _3376 = roundEven(_3374.y);
        bool _3377 = _3376 == 3.0;
        float _3378 = log2(_3364);
        float _3385 = exp2(_3378 * cbSceneParam._m0[78u].x) * _3254;
        float _3386 = exp2(_3378 * cbSceneParam._m0[78u].y) * _3255;
        float _3387 = exp2(_3378 * cbSceneParam._m0[78u].z) * _3256;
        float _3394 = _1082 + (-0.5);
        _3396 = cbMtdParam._m0[1u];
        _3398 = _3396.y * _3394;
        float _3401 = (_3376 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3402 = _3401 * (_3377 ? _3385 : (_3385 + (cbSceneParam._m0[72u].w * _3358)));
        _3403 = _3401 * (_3377 ? _3386 : (_3386 + (cbSceneParam._m0[72u].w * _3360)));
        _3404 = _3401 * (_3377 ? _3387 : (_3387 + (cbSceneParam._m0[72u].w * _3362)));
        _3405 = _3394 * 0.999000012874603271484375;
        _3415 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3415)
        {
            if ((cbInstanceData._m0[_1131 + 7u].x + _3405) < 0.5)
            {
                _3571 = true;
                break;
            }
        }
        uint _3512 = _1132 + uint(_3374.w);
        if ((cbInstanceData._m0[_3512].w < 1.0) && ((cbInstanceData._m0[_3512].w + _3405) < 0.5))
        {
            _3571 = true;
            break;
        }
        if ((_3398 + 1.0) < _3396.x)
        {
            _3571 = true;
            break;
        }
        _3571 = false;
        break;
    }
    float _3775;
    if (_3571)
    {
        discard_state = true;
        _3775 = 0.0;
    }
    else
    {
        _3775 = _3261;
    }
    SV_Target.x = _3402;
    SV_Target.y = _3403;
    SV_Target.z = _3404;
    SV_Target.w = _3775;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3261;
    discard_exit();
}


