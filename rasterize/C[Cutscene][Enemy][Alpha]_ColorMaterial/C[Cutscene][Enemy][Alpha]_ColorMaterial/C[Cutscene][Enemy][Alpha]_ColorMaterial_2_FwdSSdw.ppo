#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24;
layout(set = 0, binding = 12) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 13) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 18) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in float TEXCOORD_8;
layout(location = 7, component = 1) in float TEXCOORD_9;
layout(location = 7, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1525;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _315 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _319 = _315.z;
    float _332 = exp2(log2((1.0 - _319) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _333 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _334 = isnan(1.0) ? _333 : (isnan(_333) ? 1.0 : min(_333, 1.0));
    vec4 _351 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _363 = exp2(log2(_351.w * cbMtdParam._m0[29u].y) * cbMtdParam._m0[23u].x);
    float _364 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _365 = isnan(1.0) ? _364 : (isnan(_364) ? 1.0 : min(_364, 1.0));
    float _374 = exp2(log2(cbMtdParam._m0[23u].y * _319) * cbMtdParam._m0[22u].y);
    float _375 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _376 = isnan(1.0) ? _375 : (isnan(_375) ? 1.0 : min(_375, 1.0));
    float _397 = roundEven(5.0 - ((texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _398 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _399 = isnan(4.0) ? _398 : (isnan(_398) ? 4.0 : min(_398, 4.0));
    float _411 = floor(_399);
    vec4 _414 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w, _411));
    vec4 _438 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _449 = cbMtdParam._m0[9u].x * _438.x;
    float _450 = cbMtdParam._m0[9u].y * _438.y;
    float _451 = cbMtdParam._m0[9u].z * _438.z;
    float _458 = (((cbMtdParam._m0[10u].x * _414.x) - _449) * _376) + _449;
    float _459 = (((cbMtdParam._m0[10u].y * _414.y) - _450) * _376) + _450;
    float _460 = (((cbMtdParam._m0[10u].z * _414.z) - _451) * _376) + _451;
    float _466 = exp2(log2(_315.w) * cbMtdParam._m0[23u].w);
    vec4 _479 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _499 = (((cbMtdParam._m0[16u].x * _479.x) - _458) * _466) + _458;
    float _500 = (((cbMtdParam._m0[16u].y * _479.y) - _459) * _466) + _459;
    float _501 = (((cbMtdParam._m0[16u].z * _479.z) - _460) * _466) + _460;
    vec4 _514 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _534 = (((cbMtdParam._m0[19u].x * _514.x) - _499) * _365) + _499;
    float _535 = (((cbMtdParam._m0[19u].y * _514.y) - _500) * _365) + _500;
    float _536 = (((cbMtdParam._m0[19u].z * _514.z) - _501) * _365) + _501;
    vec4 _549 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _574 = (_351.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _549.x) - _534) * _334) + _534);
    float _576 = (_351.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _549.y) - _535) * _334) + _535);
    float _578 = (_351.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _549.z) - _536) * _334) + _536);
    vec4 _591 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _610 = TEXCOORD_5.x - ((cbMtdParam._m0[24u].x * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625));
    float _612 = _610 * (cbMtdParam._m0[24u].z + 1.0);
    float _3914 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _613 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _620 = (_613 * ((cbMtdParam._m0[11u].x * _591.x) - _574)) + _574;
    float _621 = (((cbMtdParam._m0[11u].y * _591.y) - _576) * _613) + _576;
    float _622 = (((cbMtdParam._m0[11u].z * _591.z) - _578) * _613) + _578;
    float _626 = cbMtdParam._m0[28u].x * TEXCOORD_8;
    float _634 = (_626 - (((texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _626))) * (cbMtdParam._m0[27u].w + 1.0);
    float _3925 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _635 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _642 = ((cbMtdParam._m0[21u].x - _620) * _635) + _620;
    float _643 = ((cbMtdParam._m0[21u].y - _621) * _635) + _621;
    float _644 = ((cbMtdParam._m0[21u].z - _622) * _635) + _622;
    vec4 _657 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24, SS_ClampLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.z) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.w) + cbTextureTilingScale._m0[11u].w));
    float _665 = (_657.x + (-1.0)) + (cbMtdParam._m0[28u].y * 2.0);
    float _3936 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _671 = exp2(log2(cbMtdParam._m0[28u].w * (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) * cbMtdParam._m0[28u].z);
    float _3947 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _672 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _209[5];
    float _210[5];
    _209[0u] = cbMtdParam._m0[29u].z;
    _210[0u] = cbMtdParam._m0[29u].w;
    _209[1u] = cbMtdParam._m0[31u].z;
    _210[1u] = cbMtdParam._m0[31u].w;
    _209[2u] = cbMtdParam._m0[31u].x;
    _210[2u] = cbMtdParam._m0[31u].y;
    _209[3u] = cbMtdParam._m0[30u].z;
    _210[3u] = cbMtdParam._m0[30u].w;
    _209[4u] = cbMtdParam._m0[30u].x;
    _210[4u] = cbMtdParam._m0[30u].y;
    float _712 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    uint _714 = uint(int(isnan(4.0) ? _712 : (isnan(_712) ? 4.0 : min(_712, 4.0))));
    float _721 = ((_210[_714] - cbMtdParam._m0[22u].z) * _376) + cbMtdParam._m0[22u].z;
    float _724 = ((cbMtdParam._m0[22u].w - _721) * _466) + _721;
    float _727 = ((cbMtdParam._m0[25u].x - _724) * _365) + _724;
    float _730 = ((cbMtdParam._m0[26u].x - _727) * _334) + _727;
    float _735 = (cbMtdParam._m0[24u].y + 1.0) * _610;
    float _3968 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _736 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _738 = _730 - (_730 * _736);
    float _740 = _738 - (_738 * _626);
    vec4 _754 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w, _411));
    vec4 _772 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _774 = _772.x;
    float _775 = _772.y;
    float _780 = cbMtdParam._m0[22u].x + _772.z;
    float _783 = (((_754.z + _209[_714]) - _780) * _376) + _780;
    vec4 _796 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _807 = (((_796.z - _783) + cbMtdParam._m0[29u].x) * _466) + _783;
    float _812 = ((((_319 * 2.0) * _807) - _807) * cbMtdParam._m0[24u].w) + _807;
    vec4 _824 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _835 = (((cbMtdParam._m0[23u].z + _824.z) - _812) * _365) + _812;
    vec4 _848 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _859 = (((_848.z - _835) + cbMtdParam._m0[26u].y) * _334) + _835;
    vec4 _871 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _882 = ((_871.z - _859) * _736) + _859;
    vec4 _897 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _911 = ((cbMtdParam._m0[27u].y * _626) * ((_897.z * cbMtdParam._m0[27u].x) - _882)) + _882;
    float _926 = ((_754.x - _774) * _376) + _774;
    float _927 = ((_754.y - _775) * _376) + _775;
    float _932 = ((_796.x - _926) * _466) + _926;
    float _933 = ((_796.y - _927) * _466) + _927;
    float _938 = ((_824.x - _932) * _365) + _932;
    float _939 = ((_824.y - _933) * _365) + _933;
    float _948 = ((((_848.x - _938) * _334) + _938) * 2.0) + (-1.0);
    float _949 = ((((_848.y - _939) * _334) + _939) * 2.0) + (-1.0);
    float _950 = dot(vec2(_948, _949), vec2(_948, _949));
    float _3979 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _955 = sqrt(1.0 - (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))));
    float _971 = (((cbMtdParam._m0[25u].y * ((_315.x * 2.0) + (-1.0))) + _948) + (((((_871.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[25u].z) * _736)) + ((((_897.x * 2.0) + (-1.0)) * _626) * cbMtdParam._m0[26u].w);
    float _972 = (((cbMtdParam._m0[25u].y * ((_315.y * 2.0) + (-1.0))) + _949) + (((((_871.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[25u].z) * _736)) + (((cbMtdParam._m0[28u].x * TEXCOORD_9) * ((_897.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _975 = fma(_955, _245 * NORMAL.x, fma(_972, _252 * TANGENT.x, (_238 * _230) * _971));
    float _978 = fma(_955, _245 * NORMAL.y, fma(_972, _252 * TANGENT.y, (_238 * _231) * _971));
    float _981 = fma(_955, _245 * NORMAL.z, fma(_972, _252 * TANGENT.z, (_238 * _232) * _971));
    float _985 = inversesqrt(dot(vec3(_975, _978, _981), vec3(_975, _978, _981)));
    float _986 = _985 * _975;
    float _987 = _985 * _978;
    float _988 = _985 * _981;
    float _3990 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _989 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _4001 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _990 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _4012 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _4023 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _4034 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _4045 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _994 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _1010 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1050 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1060 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1050);
    float _1061 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1050);
    float _1062 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1050);
    float _1066 = inversesqrt(dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062)));
    float _1067 = _1060 * _1066;
    float _1068 = _1061 * _1066;
    float _1069 = _1062 * _1066;
    float _1075 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1076 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1094 = fma(_988, cbSceneParam._m0[5u].z, fma(_987, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _986));
    float _1097 = fma(_988, cbSceneParam._m0[6u].z, fma(_987, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _986));
    float _1100 = fma(_988, cbSceneParam._m0[7u].z, fma(_987, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _986));
    uint _1113 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1115 = (_1113 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1121 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) * cbInstanceData._m0[_1115].x;
    float _1122 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) * cbInstanceData._m0[_1115].y;
    float _1123 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) * cbInstanceData._m0[_1115].z;
    float _4056 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
    float _1124 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _4067 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
    float _1125 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _4078 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
    float _1126 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _1127 = 1.0 - _994;
    float _1128 = _1124 * _1127;
    float _1129 = _1125 * _1127;
    float _1130 = _1126 * _1127;
    float _1135 = (_1124 + (-0.039999999105930328369140625)) * _994;
    float _1136 = (_1125 + (-0.039999999105930328369140625)) * _994;
    float _1137 = (_1126 + (-0.039999999105930328369140625)) * _994;
    float _1138 = _1135 + 0.039999999105930328369140625;
    float _1140 = _1136 + 0.039999999105930328369140625;
    float _1141 = _1137 + 0.039999999105930328369140625;
    vec4 _1150 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1075, cbSceneParam._m0[86u].y * _1076));
    float _1153 = _1150.x * TEXCOORD_5.w;
    float _1154 = dot(vec3(_986, _987, _988), vec3(_1067, _1068, _1069));
    float _1157 = _1154 * 2.0;
    float _1161 = (_1157 * _986) - _1067;
    float _1162 = (_1157 * _987) - _1068;
    float _1163 = (_1157 * _988) - _1069;
    float _1167 = abs(dot(vec3(_1067, _1068, _1069), vec3(_986, _987, _988)));
    float _4089 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
    float _1169 = sqrt(_990);
    float _1180 = exp2((_1169 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1169 * 3.0));
    float _1186 = (1.0 - _1180) * ((_1169 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1187 = _1180 * _1169;
    float _1215 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1219 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1223 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1524;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1249 = fma(_1223, cbModelParam._m0[26u].z, fma(_1219, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1215));
        float _1253 = fma(_1223, cbModelParam._m0[27u].z, fma(_1219, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1215));
        float _1257 = fma(_1223, cbModelParam._m0[28u].z, fma(_1219, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1215));
        float _1282 = _1215 + _986;
        float _1283 = _1219 + _987;
        float _1284 = _1223 + _988;
        float _1294 = fma(_1284, cbModelParam._m0[26u].z, fma(_1283, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1282)) - _1249;
        float _1295 = fma(_1284, cbModelParam._m0[27u].z, fma(_1283, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1282)) - _1253;
        float _1296 = fma(_1284, cbModelParam._m0[28u].z, fma(_1283, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1282)) - _1257;
        float _1300 = inversesqrt(dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296)));
        float _1313 = ((_1300 * _1294) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1249 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1314 = ((_1300 * _1295) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1253 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1315 = ((_1300 * _1296) / cbModelParam._m0[34u].z) + ((((((_1257 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1318 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1313, _1314, _1315), 0.0);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1313, _1314, _1315), 0.0);
        vec4 _1332 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1313, _1314, _1315), 0.0);
        vec4 _1339 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1313, _1314, _1315), 0.0);
        float _1352 = exp2((_1318.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1318.x + (-0.5));
        float _1354 = _1352 * (_1318.y + (-0.5));
        float _1355 = _1352 * (_1318.z + (-0.5));
        float _1362 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1363 = _1362 * (_1325.x + (-0.5));
        float _1364 = _1362 * (_1325.y + (-0.5));
        float _1365 = _1362 * (_1325.z + (-0.5));
        float _1372 = exp2((_1332.w + (-0.5)) * 20.0) * 2.0;
        float _1373 = _1372 * (_1332.x + (-0.5));
        float _1374 = _1372 * (_1332.y + (-0.5));
        float _1375 = _1372 * (_1332.z + (-0.5));
        float _1382 = exp2((_1339.w + (-0.5)) * 20.0) * 2.0;
        float _1383 = _1382 * (_1339.x + (-0.5));
        float _1384 = _1382 * (_1339.y + (-0.5));
        float _1385 = _1382 * (_1339.z + (-0.5));
        float _1386 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1387 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1388 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1389 = _1353 * 0.5;
        float _1390 = _1363 * 0.5;
        float _1391 = _1373 * 0.5;
        float _1392 = dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391));
        float _1397 = (_1392 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1392);
        float _1406 = (dot(vec3(_986, _987, _988), vec3(_1397 * _1389, _1397 * _1390, _1397 * _1391)) + 1.0) * 0.5;
        float _4115 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1416 = sqrt(((_1390 * _1390) + (_1389 * _1389)) + (_1391 * _1391)) / (_1386 + 9.9999997473787516355514526367188e-06);
        float _4126 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1418 = _1417 * 2.0;
        float _1422 = (1.0 - _1417) / (_1417 + 1.0);
        float _4137 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1432 = ((((1.0 - _1423) * (_1418 + 2.0)) * exp2(log2(isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_1418 + 1.0))) + _1423) * _1386;
        float _1433 = _1354 * 0.5;
        float _1434 = _1364 * 0.5;
        float _1435 = _1374 * 0.5;
        float _1436 = dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435));
        float _1441 = (_1436 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1436);
        float _1449 = (dot(vec3(_986, _987, _988), vec3(_1441 * _1433, _1441 * _1434, _1441 * _1435)) + 1.0) * 0.5;
        float _4148 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1458 = sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435)) / (_1387 + 9.9999997473787516355514526367188e-06);
        float _4159 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1460 = _1459 * 2.0;
        float _1464 = (1.0 - _1459) / (_1459 + 1.0);
        float _4170 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1474 = ((((1.0 - _1465) * (_1460 + 2.0)) * exp2(log2(isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1460 + 1.0))) + _1465) * _1387;
        float _1475 = _1355 * 0.5;
        float _1476 = _1365 * 0.5;
        float _1477 = _1375 * 0.5;
        float _1478 = dot(vec3(_1475, _1476, _1477), vec3(_1475, _1476, _1477));
        float _1483 = (_1478 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1478);
        float _1491 = (dot(vec3(_986, _987, _988), vec3(_1483 * _1475, _1483 * _1476, _1483 * _1477)) + 1.0) * 0.5;
        float _4181 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1500 = sqrt(((_1476 * _1476) + (_1475 * _1475)) + (_1477 * _1477)) / (_1388 + 9.9999997473787516355514526367188e-06);
        float _4192 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1502 = _1501 * 2.0;
        float _1506 = (1.0 - _1501) / (_1501 + 1.0);
        float _4203 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1516 = ((((1.0 - _1507) * (_1502 + 2.0)) * exp2(log2(isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_1502 + 1.0))) + _1507) * _1388;
        _1524 = _1355;
        _1526 = _1354;
        _1527 = _1353;
        _1528 = _1365;
        _1529 = _1364;
        _1530 = _1363;
        _1531 = _1375;
        _1532 = _1374;
        _1533 = _1373;
        _1534 = _1388;
        _1535 = _1387;
        _1536 = _1386;
        _1537 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)));
        _1538 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)));
        _1539 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)));
    }
    else
    {
        _1524 = _1525;
        _1526 = _1525;
        _1527 = _1525;
        _1528 = _1525;
        _1529 = _1525;
        _1530 = _1525;
        _1531 = _1525;
        _1532 = _1525;
        _1533 = _1525;
        _1534 = _1525;
        _1535 = _1525;
        _1536 = _1525;
        _1537 = 0.0;
        _1538 = 0.0;
        _1539 = 0.0;
    }
    float _1831;
    float _1832;
    float _1833;
    float _1834;
    float _1835;
    float _1836;
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1562 = fma(_1223, cbModelParam._m0[30u].z, fma(_1219, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1215));
        float _1566 = fma(_1223, cbModelParam._m0[31u].z, fma(_1219, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1215));
        float _1570 = fma(_1223, cbModelParam._m0[32u].z, fma(_1219, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1215));
        float _1593 = _1215 + _986;
        float _1594 = _1219 + _987;
        float _1595 = _1223 + _988;
        float _1605 = fma(_1595, cbModelParam._m0[30u].z, fma(_1594, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1593)) - _1562;
        float _1606 = fma(_1595, cbModelParam._m0[31u].z, fma(_1594, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1593)) - _1566;
        float _1607 = fma(_1595, cbModelParam._m0[32u].z, fma(_1594, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1593)) - _1570;
        float _1611 = inversesqrt(dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607)));
        float _1624 = ((_1611 * _1605) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1562 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1625 = ((_1611 * _1606) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1566 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1626 = ((_1611 * _1607) / cbModelParam._m0[35u].z) + ((((((_1570 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1628 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1624, _1625, _1626), 0.0);
        vec4 _1635 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1624, _1625, _1626), 0.0);
        vec4 _1642 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1624, _1625, _1626), 0.0);
        vec4 _1649 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1624, _1625, _1626), 0.0);
        float _1661 = exp2((_1628.w + (-0.5)) * 20.0) * 2.0;
        float _1662 = _1661 * (_1628.x + (-0.5));
        float _1663 = _1661 * (_1628.y + (-0.5));
        float _1664 = _1661 * (_1628.z + (-0.5));
        float _1671 = exp2((_1635.w + (-0.5)) * 20.0) * 2.0;
        float _1672 = _1671 * (_1635.x + (-0.5));
        float _1673 = _1671 * (_1635.y + (-0.5));
        float _1674 = _1671 * (_1635.z + (-0.5));
        float _1681 = exp2((_1642.w + (-0.5)) * 20.0) * 2.0;
        float _1682 = _1681 * (_1642.x + (-0.5));
        float _1683 = _1681 * (_1642.y + (-0.5));
        float _1684 = _1681 * (_1642.z + (-0.5));
        float _1691 = exp2((_1649.w + (-0.5)) * 20.0) * 2.0;
        float _1692 = _1691 * (_1649.x + (-0.5));
        float _1693 = _1691 * (_1649.y + (-0.5));
        float _1694 = _1691 * (_1649.z + (-0.5));
        float _1695 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1696 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1697 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1698 = _1662 * 0.5;
        float _1699 = _1672 * 0.5;
        float _1700 = _1682 * 0.5;
        float _1701 = dot(vec3(_1698, _1699, _1700), vec3(_1698, _1699, _1700));
        float _1706 = (_1701 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1701);
        float _1714 = (dot(vec3(_986, _987, _988), vec3(_1706 * _1698, _1706 * _1699, _1706 * _1700)) + 1.0) * 0.5;
        float _4244 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1723 = sqrt(((_1699 * _1699) + (_1698 * _1698)) + (_1700 * _1700)) / (_1695 + 9.9999997473787516355514526367188e-06);
        float _4255 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1724 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1725 = _1724 * 2.0;
        float _1729 = (1.0 - _1724) / (_1724 + 1.0);
        float _4266 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1730 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1739 = ((((1.0 - _1730) * (_1725 + 2.0)) * exp2(log2(isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_1725 + 1.0))) + _1730) * _1695;
        float _1740 = _1663 * 0.5;
        float _1741 = _1673 * 0.5;
        float _1742 = _1683 * 0.5;
        float _1743 = dot(vec3(_1740, _1741, _1742), vec3(_1740, _1741, _1742));
        float _1748 = (_1743 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1743);
        float _1756 = (dot(vec3(_986, _987, _988), vec3(_1748 * _1740, _1748 * _1741, _1748 * _1742)) + 1.0) * 0.5;
        float _4277 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1765 = sqrt(((_1741 * _1741) + (_1740 * _1740)) + (_1742 * _1742)) / (_1696 + 9.9999997473787516355514526367188e-06);
        float _4288 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1766 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1767 = _1766 * 2.0;
        float _1771 = (1.0 - _1766) / (_1766 + 1.0);
        float _4299 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1772 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1781 = ((((1.0 - _1772) * (_1767 + 2.0)) * exp2(log2(isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_1767 + 1.0))) + _1772) * _1696;
        float _1782 = _1664 * 0.5;
        float _1783 = _1674 * 0.5;
        float _1784 = _1684 * 0.5;
        float _1785 = dot(vec3(_1782, _1783, _1784), vec3(_1782, _1783, _1784));
        float _1790 = (_1785 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1785);
        float _1798 = (dot(vec3(_986, _987, _988), vec3(_1790 * _1782, _1790 * _1783, _1790 * _1784)) + 1.0) * 0.5;
        float _4310 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1807 = sqrt(((_1783 * _1783) + (_1782 * _1782)) + (_1784 * _1784)) / (_1697 + 9.9999997473787516355514526367188e-06);
        float _4321 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1808 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1809 = _1808 * 2.0;
        float _1813 = (1.0 - _1808) / (_1808 + 1.0);
        float _4332 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1814 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1823 = ((((1.0 - _1814) * (_1809 + 2.0)) * exp2(log2(isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_1809 + 1.0))) + _1814) * _1697;
        _1831 = _1664;
        _1832 = _1663;
        _1833 = _1662;
        _1834 = _1674;
        _1835 = _1673;
        _1836 = _1672;
        _1837 = _1684;
        _1838 = _1683;
        _1839 = _1682;
        _1840 = _1697;
        _1841 = _1696;
        _1842 = _1695;
        _1843 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)));
        _1844 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)));
        _1845 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0)));
    }
    else
    {
        _1831 = _1525;
        _1832 = _1525;
        _1833 = _1525;
        _1834 = _1525;
        _1835 = _1525;
        _1836 = _1525;
        _1837 = _1525;
        _1838 = _1525;
        _1839 = _1525;
        _1840 = _1525;
        _1841 = _1525;
        _1842 = _1525;
        _1843 = 0.0;
        _1844 = 0.0;
        _1845 = 0.0;
    }
    float _1855 = (cbModelParam._m0[1u].x * (_1843 - _1537)) + _1537;
    float _1856 = (cbModelParam._m0[1u].x * (_1844 - _1538)) + _1538;
    float _1857 = (cbModelParam._m0[1u].x * (_1845 - _1539)) + _1539;
    float _1878 = fma(_1857, cbSceneParam._m0[89u].z, fma(_1856, cbSceneParam._m0[89u].y, _1855 * cbSceneParam._m0[89u].x));
    float _1881 = fma(_1857, cbSceneParam._m0[90u].z, fma(_1856, cbSceneParam._m0[90u].y, _1855 * cbSceneParam._m0[90u].x));
    float _1884 = fma(_1857, cbSceneParam._m0[91u].z, fma(_1856, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1855));
    float _1899 = _1161 * 0.5;
    float _1900 = _1162 * 0.5;
    float _1901 = _1163 * 0.5;
    float _1902 = dot(vec4(_1899, _1900, _1901, 1.0), vec4(_1833, _1836, _1839, _1842));
    float _1905 = dot(vec4(_1899, _1900, _1901, 1.0), vec4(_1832, _1835, _1838, _1841));
    float _1908 = dot(vec4(_1899, _1900, _1901, 1.0), vec4(_1831, _1834, _1837, _1840));
    float _1942;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1915 = dot(vec4(_1899, _1900, _1901, 1.0), vec4(_1524, _1528, _1531, _1534));
        float _1919 = dot(vec4(_1899, _1900, _1901, 1.0), vec4(_1526, _1529, _1532, _1535));
        float _1923 = dot(vec4(_1899, _1900, _1901, 1.0), vec4(_1527, _1530, _1533, _1536));
        float _1930 = dot(vec4(cbModelParam._m0[39u]), vec4(_1899, _1900, _1901, 1.0));
        _1942 = dot(vec3(isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0)), isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0)), isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1930) ? 0.0 : (isnan(0.0) ? _1930 : max(0.0, _1930))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1942 = 1.0;
    }
    float _1953;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1944 = dot(vec4(cbModelParam._m0[40u]), vec4(_1899, _1900, _1901, 1.0));
        _1953 = dot(vec3(isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0)), isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0)), isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1944) ? 0.0 : (isnan(0.0) ? _1944 : max(0.0, _1944))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1953 = 1.0;
    }
    float _1957 = (_1953 * cbModelParam._m0[1u].x) + (_1942 * (1.0 - cbModelParam._m0[1u].x));
    float _1967 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _990);
    float _1968 = isnan(_1967) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1967 : min(cbModelParam._m0[25u].z, _1967));
    float _2048;
    float _2050;
    float _2052;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2015 = fma(_1223, cbModelParam._m0[13u].z, fma(_1219, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1215)) + cbModelParam._m0[13u].w;
        float _2019 = fma(_1223, cbModelParam._m0[14u].z, fma(_1219, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1215)) + cbModelParam._m0[14u].w;
        float _2023 = fma(_1223, cbModelParam._m0[15u].z, fma(_1219, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1215)) + cbModelParam._m0[15u].w;
        float _2026 = fma(_1163, cbModelParam._m0[13u].z, fma(_1162, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1161));
        float _2029 = fma(_1163, cbModelParam._m0[14u].z, fma(_1162, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1161));
        float _2032 = fma(_1163, cbModelParam._m0[15u].z, fma(_1162, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1161));
        float _2060;
        if (_2026 > 0.0)
        {
            _2060 = abs((1.0 - _2015) / _2026);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2026 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2015 + 1.0) / _2026);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2060 = frontier_phi_14_12_ladder;
        }
        float _2283;
        if (_2029 > 0.0)
        {
            _2283 = abs((1.0 - _2019) / _2029);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2029 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2019 + 1.0) / _2029);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2283 = frontier_phi_23_19_ladder;
        }
        float _2540;
        if (_2032 > 0.0)
        {
            _2540 = abs((1.0 - _2023) / _2032);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2032 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2023 + 1.0) / _2032);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2540 = frontier_phi_35_30_ladder;
        }
        float _2542 = isnan(_2283) ? _2060 : (isnan(_2060) ? _2283 : min(_2060, _2283));
        float _2543 = isnan(_2540) ? _2542 : (isnan(_2542) ? _2540 : min(_2542, _2540));
        float _2547 = (_2543 * _2026) + _2015;
        float _2548 = (_2543 * _2029) + _2019;
        float _2549 = (_2543 * _2032) + _2023;
        float _2550 = _2543 * 9.9999997473787516355514526367188e-05;
        float _2552 = (-1.0) - _2550;
        float _2554 = _2550 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2549 > _2554) || ((_2549 < _2552) || ((_2548 > _2554) || ((_2548 < _2552) || ((_2547 < _2552) || (_2547 > _2554))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2677 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2549, cbModelParam._m0[9u].z, fma(_2548, cbModelParam._m0[9u].y, _2547 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2549, cbModelParam._m0[10u].z, fma(_2548, cbModelParam._m0[10u].y, _2547 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2549, cbModelParam._m0[11u].z, fma(_2548, cbModelParam._m0[11u].y, _2547 * cbModelParam._m0[11u].x))), _1968);
            frontier_phi_13_35_ladder = _2677.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2677.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2677.x * cbModelParam._m0[1u].y;
        }
        _2048 = frontier_phi_13_35_ladder_2;
        _2050 = frontier_phi_13_35_ladder_1;
        _2052 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2036 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1161, _1162, _1163), _1968);
        _2048 = _2036.x * cbModelParam._m0[1u].y;
        _2050 = _2036.y * cbModelParam._m0[1u].y;
        _2052 = _2036.z * cbModelParam._m0[1u].y;
    }
    float _2056 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _990);
    float _2057 = isnan(_2056) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2056 : min(cbModelParam._m0[25u].w, _2056));
    float _2146;
    float _2148;
    float _2150;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2110 = fma(_1223, cbModelParam._m0[21u].z, fma(_1219, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1215)) + cbModelParam._m0[21u].w;
        float _2114 = fma(_1223, cbModelParam._m0[22u].z, fma(_1219, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1215)) + cbModelParam._m0[22u].w;
        float _2118 = fma(_1223, cbModelParam._m0[23u].z, fma(_1219, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1215)) + cbModelParam._m0[23u].w;
        float _2121 = fma(_1163, cbModelParam._m0[21u].z, fma(_1162, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1161));
        float _2124 = fma(_1163, cbModelParam._m0[22u].z, fma(_1162, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1161));
        float _2127 = fma(_1163, cbModelParam._m0[23u].z, fma(_1162, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1161));
        float _2288;
        if (_2121 > 0.0)
        {
            _2288 = abs((1.0 - _2110) / _2121);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2121 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2110 + 1.0) / _2121);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2288 = frontier_phi_25_21_ladder;
        }
        float _2567;
        if (_2124 > 0.0)
        {
            _2567 = abs((1.0 - _2114) / _2124);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2124 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2114 + 1.0) / _2124);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2567 = frontier_phi_37_32_ladder;
        }
        float _2780;
        if (_2127 > 0.0)
        {
            _2780 = abs((1.0 - _2118) / _2127);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2127 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2118 + 1.0) / _2127);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2780 = frontier_phi_46_43_ladder;
        }
        float _2782 = isnan(_2567) ? _2288 : (isnan(_2288) ? _2567 : min(_2288, _2567));
        float _2783 = isnan(_2780) ? _2782 : (isnan(_2782) ? _2780 : min(_2782, _2780));
        float _2787 = (_2783 * _2121) + _2110;
        float _2788 = (_2783 * _2124) + _2114;
        float _2789 = (_2783 * _2127) + _2118;
        float _2790 = _2783 * 9.9999997473787516355514526367188e-05;
        float _2791 = (-1.0) - _2790;
        float _2793 = _2790 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2789 > _2793) || ((_2789 < _2791) || ((_2788 > _2793) || ((_2788 < _2791) || ((_2787 < _2791) || (_2787 > _2793))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2990 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2789, cbModelParam._m0[17u].z, fma(_2788, cbModelParam._m0[17u].y, _2787 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2789, cbModelParam._m0[18u].z, fma(_2788, cbModelParam._m0[18u].y, _2787 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2789, cbModelParam._m0[19u].z, fma(_2788, cbModelParam._m0[19u].y, _2787 * cbModelParam._m0[19u].x))), _2057);
            frontier_phi_22_46_ladder = _2990.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2990.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2990.x * cbModelParam._m0[1u].z;
        }
        _2146 = frontier_phi_22_46_ladder_2;
        _2148 = frontier_phi_22_46_ladder_1;
        _2150 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2130 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1161, _1162, _1163), _2057);
        _2146 = _2130.x * cbModelParam._m0[1u].z;
        _2148 = _2130.y * cbModelParam._m0[1u].z;
        _2150 = _2130.z * cbModelParam._m0[1u].z;
    }
    float _2163 = (((_1186 * _1138) + _1187) * _1153) * ((cbModelParam._m0[1u].w * (_2146 - _2048)) + _2048);
    float _2165 = (((_1186 * _1140) + _1187) * _1153) * ((cbModelParam._m0[1u].w * (_2148 - _2050)) + _2050);
    float _2167 = (((_1186 * _1141) + _1187) * _1153) * ((cbModelParam._m0[1u].w * (_2150 - _2052)) + _2052);
    float _2170 = fma(_2167, cbSceneParam._m0[89u].z, fma(_2165, cbSceneParam._m0[89u].y, _2163 * cbSceneParam._m0[89u].x));
    float _2173 = fma(_2167, cbSceneParam._m0[90u].z, fma(_2165, cbSceneParam._m0[90u].y, _2163 * cbSceneParam._m0[90u].x));
    float _2176 = fma(_2167, cbSceneParam._m0[91u].z, fma(_2165, cbSceneParam._m0[91u].y, _2163 * cbSceneParam._m0[91u].x));
    vec4 _2184 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1075, _1076));
    float _2186 = _2184.w;
    float _2198 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2186);
    float _2199 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2186);
    float _2200 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2186);
    uvec4 _2204 = floatBitsToUint(cbInstanceData._m0[_1113 + 5u]);
    uint _2206 = _2204.x * 14u;
    uint _2207 = _2206 + 13u;
    float _2214 = _1153 + (-1.0);
    float _2219 = (cbLight._m0[_2207].x * _2214) + 1.0;
    float _2220 = (cbLight._m0[_2207].y * _2214) + 1.0;
    float _2221 = (cbLight._m0[_2207].z * _2214) + 1.0;
    float _2222 = (cbLight._m0[_2207].w * _2214) + 1.0;
    uint _2223 = _2206 + 5u;
    float _2229 = isnan(1.0) ? _2220 : (isnan(_2220) ? 1.0 : min(_2220, 1.0));
    uint _2233 = _2206 + 4u;
    float _2242 = isnan(1.0) ? _2219 : (isnan(_2219) ? 1.0 : min(_2219, 1.0));
    uint _2246 = _2206 | 1u;
    float _2257 = dot(vec3(cbLight._m0[_2206].xyz), vec3(_986, _987, _988));
    float _2260 = dot(vec3(cbLight._m0[_2246].xyz), vec3(_986, _987, _988));
    float _4468 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _4479 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2265 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * 0.3183098733425140380859375;
    float _2267 = (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * 0.3183098733425140380859375;
    float _2274 = ((cbLight._m0[_2223].x * _2229) * _2267) + (((cbLight._m0[_2233].x * _2198) * _2242) * _2265);
    float _2275 = ((_2229 * cbLight._m0[_2223].y) * _2267) + (((cbLight._m0[_2233].y * _2199) * _2242) * _2265);
    float _2276 = ((_2229 * cbLight._m0[_2223].z) * _2267) + (((cbLight._m0[_2233].z * _2200) * _2242) * _2265);
    uvec4 _2280 = floatBitsToUint(cbLight._m0[_2206 + 12u]);
    bool _2282 = _2280.x == 0u;
    float _2293;
    float _2295;
    float _2297;
    if (_2282)
    {
        _2293 = _2274;
        _2295 = _2275;
        _2297 = _2276;
    }
    else
    {
        uint _2301 = _2206 + 6u;
        float _2317 = (dot(vec3(cbLight._m0[_2206 + 2u].xyz), vec3(_986, _987, _988)) * 0.5) + 0.5;
        float _2318 = _2317 * _2317;
        float _4490 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2319 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _2320 = isnan(1.0) ? _2221 : (isnan(_2221) ? 1.0 : min(_2221, 1.0));
        _2293 = (((cbLight._m0[_2301].x * 0.3183098733425140380859375) * _2319) * _2320) + _2274;
        _2295 = (((cbLight._m0[_2301].y * 0.3183098733425140380859375) * _2319) * _2320) + _2275;
        _2297 = (((cbLight._m0[_2301].z * 0.3183098733425140380859375) * _2319) * _2320) + _2276;
    }
    bool _2300 = _2280.y == 0u;
    float _2338;
    float _2340;
    float _2342;
    if (_2300)
    {
        _2338 = _2293;
        _2340 = _2295;
        _2342 = _2297;
    }
    else
    {
        uint _2511 = _2206 + 7u;
        float _2527 = (dot(vec3(cbLight._m0[_2206 + 3u].xyz), vec3(_986, _987, _988)) * 0.5) + 0.5;
        float _2528 = _2527 * _2527;
        float _4506 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2529 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _2530 = isnan(1.0) ? _2222 : (isnan(_2222) ? 1.0 : min(_2222, 1.0));
        _2338 = (((cbLight._m0[_2511].x * 0.3183098733425140380859375) * _2529) * _2530) + _2293;
        _2340 = (((cbLight._m0[_2511].y * 0.3183098733425140380859375) * _2529) * _2530) + _2295;
        _2342 = (((cbLight._m0[_2511].z * 0.3183098733425140380859375) * _2529) * _2530) + _2297;
    }
    uint _2345 = _2206 + 8u;
    float _2358 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2206].w)) * _990) * 0.949999988079071044921875);
    float _2359 = _2358 * _2358;
    float _2360 = cbLight._m0[_2206].x + _1067;
    float _2361 = cbLight._m0[_2206].y + _1068;
    float _2362 = cbLight._m0[_2206].z + _1069;
    float _2366 = inversesqrt(dot(vec3(_2360, _2361, _2362), vec3(_2360, _2361, _2362)));
    float _2367 = _2366 * _2360;
    float _2368 = _2366 * _2361;
    float _2369 = _2366 * _2362;
    float _2370 = dot(vec3(_986, _987, _988), vec3(cbLight._m0[_2206].xyz));
    float _4522 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2373 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
    float _4533 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
    float _2374 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
    float _2375 = dot(vec3(_986, _987, _988), vec3(_2367, _2368, _2369));
    float _4544 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2378 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
    float _2379 = dot(vec3(cbLight._m0[_2206].xyz), vec3(_2367, _2368, _2369));
    float _4555 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
    float _2383 = _2359 * _2359;
    float _2387 = ((_2378 * _2378) * (_2383 + (-1.0))) + 1.0;
    float _2395 = exp2(log2(1.0 - (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0)))) * 5.0);
    float _2396 = 0.959999978542327880859375 - _1135;
    float _2398 = 0.959999978542327880859375 - _1136;
    float _2399 = 0.959999978542327880859375 - _1137;
    float _2406 = 1.0 - _2359;
    float _2417 = (0.5 / (((_2374 * ((_2373 * _2406) + _2359)) + 9.9999999392252902907785028219223e-09) + (((_2374 * _2406) + _2359) * _2373))) * _2373;
    float _4566 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2419 = (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * (_2383 / ((_2387 * _2387) * 3.141590118408203125));
    uint _2433 = _2206 + 9u;
    float _2444 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2246].w)) * _990) * 0.949999988079071044921875);
    float _2445 = _2444 * _2444;
    float _2446 = cbLight._m0[_2246].x + _1067;
    float _2447 = cbLight._m0[_2246].y + _1068;
    float _2448 = cbLight._m0[_2246].z + _1069;
    float _2452 = inversesqrt(dot(vec3(_2446, _2447, _2448), vec3(_2446, _2447, _2448)));
    float _2453 = _2452 * _2446;
    float _2454 = _2452 * _2447;
    float _2455 = _2452 * _2448;
    float _2456 = dot(vec3(_986, _987, _988), vec3(cbLight._m0[_2246].xyz));
    float _4577 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
    float _2459 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
    float _2460 = dot(vec3(_986, _987, _988), vec3(_2453, _2454, _2455));
    float _4588 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2463 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
    float _2464 = dot(vec3(cbLight._m0[_2246].xyz), vec3(_2453, _2454, _2455));
    float _4599 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2468 = _2445 * _2445;
    float _2472 = ((_2463 * _2463) * (_2468 + (-1.0))) + 1.0;
    float _2479 = exp2(log2(1.0 - (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0)))) * 5.0);
    float _2486 = 1.0 - _2445;
    float _2496 = (0.5 / (((_2374 * ((_2459 * _2486) + _2445)) + 9.9999999392252902907785028219223e-09) + (((_2374 * _2486) + _2445) * _2459))) * _2459;
    float _4610 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
    float _2498 = (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * (_2468 / ((_2472 * _2472) * 3.141590118408203125));
    float _2508 = (((((_2479 * _2396) + _1138) * cbLight._m0[_2433].x) * _2498) * _2229) + ((((cbLight._m0[_2345].x * _2198) * ((_2395 * _2396) + _1138)) * _2419) * _2242);
    float _2509 = (((((_2479 * _2398) + _1140) * cbLight._m0[_2433].y) * _2498) * _2229) + ((((cbLight._m0[_2345].y * _2199) * ((_2395 * _2398) + _1140)) * _2419) * _2242);
    float _2510 = (((((_2479 * _2399) + _1141) * cbLight._m0[_2433].z) * _2498) * _2229) + ((((cbLight._m0[_2345].z * _2200) * ((_2395 * _2399) + _1141)) * _2419) * _2242);
    float _2572;
    float _2574;
    float _2576;
    if (_2282)
    {
        _2572 = _2508;
        _2574 = _2509;
        _2576 = _2510;
    }
    else
    {
        uint _2578 = _2206 + 2u;
        uint _2582 = _2206 + 10u;
        float _2596 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2578].w)) * _990) * 0.949999988079071044921875);
        float _2597 = _2596 * _2596;
        float _2598 = cbLight._m0[_2578].x + _1067;
        float _2599 = cbLight._m0[_2578].y + _1068;
        float _2600 = cbLight._m0[_2578].z + _1069;
        float _2604 = inversesqrt(dot(vec3(_2598, _2599, _2600), vec3(_2598, _2599, _2600)));
        float _2605 = _2604 * _2598;
        float _2606 = _2604 * _2599;
        float _2607 = _2604 * _2600;
        float _2608 = dot(vec3(_986, _987, _988), vec3(cbLight._m0[_2578].xyz));
        float _4621 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2611 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
        float _2612 = dot(vec3(_986, _987, _988), vec3(_2605, _2606, _2607));
        float _4632 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2615 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
        float _2616 = dot(vec3(cbLight._m0[_2578].xyz), vec3(_2605, _2606, _2607));
        float _4643 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2620 = _2597 * _2597;
        float _2624 = ((_2615 * _2615) * (_2620 + (-1.0))) + 1.0;
        float _2631 = exp2(log2(1.0 - (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0)))) * 5.0);
        float _2638 = 1.0 - _2597;
        float _2648 = (0.5 / (((_2374 * ((_2611 * _2638) + _2597)) + 9.9999999392252902907785028219223e-09) + (((_2374 * _2638) + _2597) * _2611))) * _2611;
        float _4654 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2650 = (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0))) * (_2620 / ((_2624 * _2624) * 3.141590118408203125));
        float _2651 = isnan(1.0) ? _2221 : (isnan(_2221) ? 1.0 : min(_2221, 1.0));
        _2572 = (((((_2631 * _2396) + _1138) * cbLight._m0[_2582].x) * _2650) * _2651) + _2508;
        _2574 = (((((_2631 * _2398) + _1140) * cbLight._m0[_2582].y) * _2650) * _2651) + _2509;
        _2576 = (((((_2631 * _2399) + _1141) * cbLight._m0[_2582].z) * _2650) * _2651) + _2510;
    }
    float _2686;
    float _2688;
    float _2690;
    if (_2300)
    {
        _2686 = _2572;
        _2688 = _2574;
        _2690 = _2576;
    }
    else
    {
        uint _2697 = _2206 + 3u;
        uint _2701 = _2206 + 11u;
        float _2715 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2697].w)) * _990) * 0.949999988079071044921875);
        float _2716 = _2715 * _2715;
        float _2717 = cbLight._m0[_2697].x + _1067;
        float _2718 = cbLight._m0[_2697].y + _1068;
        float _2719 = cbLight._m0[_2697].z + _1069;
        float _2723 = inversesqrt(dot(vec3(_2717, _2718, _2719), vec3(_2717, _2718, _2719)));
        float _2724 = _2723 * _2717;
        float _2725 = _2723 * _2718;
        float _2726 = _2723 * _2719;
        float _2727 = dot(vec3(_986, _987, _988), vec3(cbLight._m0[_2697].xyz));
        float _4670 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        float _2730 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
        float _2731 = dot(vec3(_986, _987, _988), vec3(_2724, _2725, _2726));
        float _4681 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        float _2734 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
        float _2735 = dot(vec3(cbLight._m0[_2697].xyz), vec3(_2724, _2725, _2726));
        float _4692 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
        float _2739 = _2716 * _2716;
        float _2743 = ((_2734 * _2734) * (_2739 + (-1.0))) + 1.0;
        float _2750 = exp2(log2(1.0 - (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0)))) * 5.0);
        float _2757 = 1.0 - _2716;
        float _2767 = (0.5 / (((_2374 * ((_2730 * _2757) + _2716)) + 9.9999999392252902907785028219223e-09) + (((_2374 * _2757) + _2716) * _2730))) * _2730;
        float _4703 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        float _2769 = (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0))) * (_2739 / ((_2743 * _2743) * 3.141590118408203125));
        float _2770 = isnan(1.0) ? _2222 : (isnan(_2222) ? 1.0 : min(_2222, 1.0));
        _2686 = (((((_2750 * _2396) + _1138) * cbLight._m0[_2701].x) * _2769) * _2770) + _2572;
        _2688 = (((((_2750 * _2398) + _1140) * cbLight._m0[_2701].y) * _2769) * _2770) + _2574;
        _2690 = (((((_2750 * _2399) + _1141) * cbLight._m0[_2701].z) * _2769) * _2770) + _2576;
    }
    float _2905;
    float _2907;
    float _2909;
    float _2911;
    float _2913;
    float _2915;
    if (_2204.y == 0u)
    {
        float _2845 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2846 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2845;
        float _2847 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2845;
        float _2848 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2845;
        uvec4 _2860 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2861 = _2860.x;
        uint _2872 = uint((float(_2860.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1076) / _2861))) + floor(float(uint(cbSceneParam._m0[85u].x * _1075) / _2861)));
        float _2882 = (log2(_2848 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2883 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
        uint _2886 = uint(isnan(14.0) ? _2883 : (isnan(_2883) ? 14.0 : min(_2883, 14.0)));
        uvec4 _2891 = texelFetch(g_lightClusterGridBuffer, int(((_2886 << 2u) + (_2872 << 6u)) >> 2u));
        uint _2892 = _2891.x;
        uint _2893 = _2860.z;
        float _2995;
        float _2997;
        float _2999;
        float _3001;
        float _3003;
        float _3005;
        if (((((1u << ((_2893 >> 4u) & 15u)) + 4294967295u) & _2892) == 0u) || ((_2893 & 240u) == 0u))
        {
            _2995 = 0.0;
            _2997 = 0.0;
            _2999 = 0.0;
            _3001 = 0.0;
            _3003 = 0.0;
            _3005 = 0.0;
        }
        else
        {
            float _2996;
            float _2998;
            float _3000;
            float _3002;
            float _3004;
            float _3006;
            float _3140 = 0.0;
            float _3141 = 0.0;
            float _3142 = 0.0;
            float _3143 = 0.0;
            float _3144 = 0.0;
            float _3145 = 0.0;
            uint _3146 = 0u;
            uint _3155;
            bool _3156;
            for (;;)
            {
                _3155 = texelFetch(g_lightClassification, int((((_2886 << 5u) + (_2872 << 9u)) + (_3146 << 2u)) >> 2u)).x;
                _3156 = _3155 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3156)
                {
                    frontier_phi_61_pred = _3140;
                    frontier_phi_61_pred_1 = _3145;
                    frontier_phi_61_pred_2 = _3144;
                    frontier_phi_61_pred_3 = _3143;
                    frontier_phi_61_pred_4 = _3142;
                    frontier_phi_61_pred_5 = _3141;
                }
                else
                {
                    float _3264;
                    float _3265;
                    float _3266;
                    float _3267;
                    float _3268;
                    float _3269;
                    uint _3270;
                    _3264 = _3140;
                    _3265 = _3141;
                    _3266 = _3142;
                    _3267 = _3143;
                    _3268 = _3144;
                    _3269 = _3145;
                    _3270 = _3155;
                    float _3196;
                    float _3197;
                    float _3198;
                    float _3199;
                    float _3200;
                    float _3201;
                    for (;;)
                    {
                        uint _3274 = uint(findLSB(_3270)) + (_3146 << 5u);
                        uint _3271 = (_3270 + 4294967295u) & _3270;
                        uint _3276 = _3274 * 48u;
                        vec4 _3290 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3276)).x, texelFetch(g_PointLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3276 + 3u)).x));
                        uint _3296 = (_3274 * 48u) + 4u;
                        vec4 _3309 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3296)).x, texelFetch(g_PointLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3296 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3296 + 3u)).x));
                        uint _3315 = (_3274 * 48u) + 8u;
                        vec3 _3326 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3315)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 2u)).x));
                        float _3330 = _3290.x - _2846;
                        float _3331 = _3290.y - _2847;
                        float _3332 = _3290.z - _2848;
                        float _3333 = dot(vec3(_3330, _3331, _3332), vec3(_3330, _3331, _3332));
                        float _3336 = inversesqrt(_3333);
                        float _3337 = _3336 * _3330;
                        float _3338 = _3336 * _3331;
                        float _3339 = _3336 * _3332;
                        float _3340 = dot(vec3(_1094, _1097, _1100), vec3(_3337, _3338, _3339));
                        float _3345 = 1.0 - (_3333 * _3290.w);
                        float _4729 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                        float _3346 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                        float _3347 = sqrt(_3333) * _3309.w;
                        float _3350 = 1.39999997615814208984375 / (_3347 + 1.39999997615814208984375);
                        float _3351 = _3350 * _3350;
                        float _3354 = ((1.0 - _3351) * _3340) + _3351;
                        float _3357 = _3347 * _3347;
                        float _3361 = ((isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0))) * _3346) / ((_3357 * 0.699999988079071044921875) + 1.0);
                        float _3365 = (-0.0) - _2846;
                        float _3366 = (-0.0) - _2847;
                        float _3367 = (-0.0) - _2848;
                        float _3371 = inversesqrt(dot(vec3(_3365, _3366, _3367), vec3(_3365, _3366, _3367)));
                        float _3372 = _3371 * _3365;
                        float _3373 = _3371 * _3366;
                        float _3374 = _3371 * _3367;
                        float _3382 = exp2(log2(1.0 / ((_3357 * 3.5) + 5.0)) * 0.25);
                        float _3383 = 1.0 - _1169;
                        float _3390 = sqrt(1.0 - ((1.0 - (_3383 * _3383)) * (1.0 - (_3382 * _3382))));
                        float _3391 = _3390 * _3390;
                        float _3392 = _3391 * _3391;
                        float _3393 = _3372 + _3337;
                        float _3394 = _3373 + _3338;
                        float _3395 = _3374 + _3339;
                        float _3399 = inversesqrt(dot(vec3(_3393, _3394, _3395), vec3(_3393, _3394, _3395)));
                        float _3403 = dot(vec3(_1094, _1097, _1100), vec3(_3372, _3373, _3374));
                        float _4745 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                        float _3406 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                        float _3407 = dot(vec3(_1094, _1097, _1100), vec3(_3399 * _3393, _3399 * _3394, _3399 * _3395));
                        float _4756 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                        float _3410 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                        float _3414 = ((_3410 * _3410) * (_3392 + (-1.0))) + 1.0;
                        float _3415 = _3350 * _3391;
                        float _3416 = _3415 * _3415;
                        float _3419 = ((1.0 - _3416) * _3340) + _3416;
                        float _4767 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                        float _3420 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                        float _3421 = 1.0 - _3391;
                        float _3431 = (0.5 / (((_3420 * ((_3406 * _3421) + _3391)) + 9.9999999392252902907785028219223e-09) + (((_3420 * _3421) + _3391) * _3406))) * _3420;
                        float _4778 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                        float _3442 = (((_3392 * 3.1415927410125732421875) * (isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0)))) / ((_3414 * _3414) * ((_3357 * 2.1991131305694580078125) + 3.141590118408203125))) * _3346;
                        _3199 = (_3361 * _3309.x) + _3267;
                        _3200 = (_3361 * _3309.y) + _3268;
                        _3201 = (_3361 * _3309.z) + _3269;
                        _3196 = (_3442 * _3326.x) + _3264;
                        _3197 = (_3442 * _3326.y) + _3265;
                        _3198 = (_3442 * _3326.z) + _3266;
                        if (_3271 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3264 = _3196;
                            _3265 = _3197;
                            _3266 = _3198;
                            _3267 = _3199;
                            _3268 = _3200;
                            _3269 = _3201;
                            _3270 = _3271;
                        }
                    }
                    frontier_phi_61_pred = _3196;
                    frontier_phi_61_pred_1 = _3201;
                    frontier_phi_61_pred_2 = _3200;
                    frontier_phi_61_pred_3 = _3199;
                    frontier_phi_61_pred_4 = _3198;
                    frontier_phi_61_pred_5 = _3197;
                }
                _2996 = frontier_phi_61_pred;
                _3006 = frontier_phi_61_pred_1;
                _3004 = frontier_phi_61_pred_2;
                _3002 = frontier_phi_61_pred_3;
                _3000 = frontier_phi_61_pred_4;
                _2998 = frontier_phi_61_pred_5;
                uint _3147 = _3146 + 1u;
                if (_3147 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3140 = _2996;
                    _3141 = _2998;
                    _3142 = _3000;
                    _3143 = _3002;
                    _3144 = _3004;
                    _3145 = _3006;
                    _3146 = _3147;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2995 = _2996;
            _2997 = _2998;
            _2999 = _3000;
            _3001 = _3002;
            _3003 = _3004;
            _3005 = _3006;
        }
        uvec4 _3009 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3010 = _3009.z;
        uint _3012 = (_3010 >> 8u) & 15u;
        float _3108;
        float _3110;
        float _3112;
        float _3114;
        float _3116;
        float _3118;
        if (((4294967295u << _3012) & _2892) == 0u)
        {
            _3108 = _2995;
            _3110 = _2997;
            _3112 = _2999;
            _3114 = _3001;
            _3116 = _3003;
            _3118 = _3005;
        }
        else
        {
            float _3133 = inversesqrt(dot(vec3(_2846, _2847, _2848), vec3(_2846, _2847, _2848)));
            float _3134 = _3133 * _2846;
            float _3135 = _3133 * _2847;
            float _3136 = _3133 * _2848;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3012 < ((_3010 >> 12u) & 15u))
            {
                float _3109;
                float _3111;
                float _3113;
                float _3115;
                float _3117;
                float _3119;
                float _3247 = _2995;
                float _3248 = _2997;
                float _3249 = _2999;
                float _3250 = _3001;
                float _3251 = _3003;
                float _3252 = _3005;
                uint _3253 = _3012;
                uint _3262;
                bool _3263;
                for (;;)
                {
                    _3262 = texelFetch(g_lightClassification, int((((_2886 << 5u) + (_2872 << 9u)) + (_3253 << 2u)) >> 2u)).x;
                    _3263 = _3262 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3263)
                    {
                        frontier_phi_67_pred = _3250;
                        frontier_phi_67_pred_1 = _3251;
                        frontier_phi_67_pred_2 = _3252;
                        frontier_phi_67_pred_3 = _3249;
                        frontier_phi_67_pred_4 = _3248;
                        frontier_phi_67_pred_5 = _3247;
                    }
                    else
                    {
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3740;
                        float _3741;
                        float _3742;
                        float _3743;
                        float _3744;
                        float _3745;
                        float _3460 = _3247;
                        float _3461 = _3248;
                        float _3462 = _3249;
                        float _3463 = _3250;
                        float _3464 = _3251;
                        float _3465 = _3252;
                        uint _3466 = _3262;
                        uint _3467;
                        vec4 _3492;
                        float _3493;
                        vec4 _3508;
                        vec3 _3520;
                        vec4 _3535;
                        vec4 _3550;
                        float _3596;
                        bool _3597;
                        for (;;)
                        {
                            uint _3477 = ((_3253 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3466));
                            _3467 = (_3466 + 4294967295u) & _3466;
                            uint _3479 = _3477 * 40u;
                            _3492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 3u)).x));
                            _3493 = _3492.w;
                            uint _3495 = (_3477 * 40u) + 4u;
                            _3508 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 3u)).x));
                            uint _3510 = (_3477 * 40u) + 8u;
                            _3520 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x));
                            uint _3522 = (_3477 * 40u) + 16u;
                            _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            uint _3537 = (_3477 * 40u) + 20u;
                            _3550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 3u)).x));
                            uint _3552 = (_3477 * 40u) + 24u;
                            vec4 _3565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 3u)).x));
                            uint _3571 = (_3477 * 40u) + 28u;
                            vec4 _3584 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 3u)).x));
                            _3596 = fma(_2848, _3584.z, fma(_2847, _3584.y, _3584.x * _2846)) + _3584.w;
                            _3597 = !((fma(_2848, _3565.z, fma(_2847, _3565.y, _3565.x * _2846)) + _3565.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3597)
                            {
                                float _3624 = _3492.x - _2846;
                                float _3625 = _3492.y - _2847;
                                float _3626 = _3492.z - _2848;
                                float _3627 = dot(vec3(_3624, _3625, _3626), vec3(_3624, _3625, _3626));
                                float _3630 = inversesqrt(_3627);
                                float _3631 = _3630 * _3624;
                                float _3632 = _3630 * _3625;
                                float _3633 = _3630 * _3626;
                                float _3637 = 1.0 - (_3627 / (_3493 * _3493));
                                float _4789 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                                float _3638 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
                                float _3642 = sqrt(_3627) * _3508.w;
                                float _3644 = 1.39999997615814208984375 / (_3642 + 1.39999997615814208984375);
                                float _3645 = _3644 * _3644;
                                float _3648 = ((1.0 - _3645) * dot(vec3(_3631, _3632, _3633), vec3(_1094, _1097, _1100))) + _3645;
                                float _3651 = _3642 * _3642;
                                float _3655 = (fma(_2848, _3535.z, fma(_2847, _3535.y, _3535.x * _2846)) + _3535.w) / _3596;
                                float _3656 = (fma(_2848, _3550.z, fma(_2847, _3550.y, _3550.x * _2846)) + _3550.w) / _3596;
                                float _3660 = 1.0 - dot(vec2(_3655, _3656), vec2(_3655, _3656));
                                float _4805 = isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0));
                                float _3661 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                                float _3662 = _3661 * (((isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0))) * _3638) / ((_3651 * 0.699999988079071044921875) + 1.0));
                                float _3674 = exp2(log2(1.0 / ((_3651 * 3.5) + 5.0)) * 0.25);
                                float _3675 = 1.0 - _1169;
                                float _3682 = sqrt(1.0 - ((1.0 - (_3675 * _3675)) * (1.0 - (_3674 * _3674))));
                                float _3683 = _3682 * _3682;
                                float _3684 = _3683 * _3683;
                                float _3685 = _3631 - _3134;
                                float _3686 = _3632 - _3135;
                                float _3687 = _3633 - _3136;
                                float _3691 = inversesqrt(dot(vec3(_3685, _3686, _3687), vec3(_3685, _3686, _3687)));
                                float _3695 = dot(vec3(_1094, _1097, _1100), vec3((-0.0) - _3134, (-0.0) - _3135, (-0.0) - _3136));
                                float _4816 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                                float _3698 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                                float _3699 = dot(vec3(_1094, _1097, _1100), vec3(_3691 * _3685, _3691 * _3686, _3691 * _3687));
                                float _4827 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                                float _3702 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                                float _3706 = ((_3702 * _3702) * (_3684 + (-1.0))) + 1.0;
                                float _3707 = _3644 * _3683;
                                float _3708 = _3707 * _3707;
                                float _3714 = ((1.0 - _3708) * dot(vec3(_1094, _1097, _1100), vec3(_3631, _3632, _3633))) + _3708;
                                float _4838 = isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0));
                                float _3715 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                                float _3716 = 1.0 - _3683;
                                float _3726 = (0.5 / (((_3715 * ((_3698 * _3716) + _3683)) + 9.9999999392252902907785028219223e-09) + (((_3715 * _3716) + _3683) * _3698))) * _3715;
                                float _4849 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                                float _3736 = (_3661 * _3638) * (((_3684 * 3.1415927410125732421875) * (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0)))) / ((_3706 * _3706) * ((_3651 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3736 * _3520.x;
                                frontier_phi_73_pred_1 = _3736 * _3520.y;
                                frontier_phi_73_pred_2 = _3662 * _3508.z;
                                frontier_phi_73_pred_3 = _3662 * _3508.y;
                                frontier_phi_73_pred_4 = _3662 * _3508.x;
                                frontier_phi_73_pred_5 = _3736 * _3520.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3740 = frontier_phi_73_pred;
                            _3741 = frontier_phi_73_pred_1;
                            _3745 = frontier_phi_73_pred_2;
                            _3744 = frontier_phi_73_pred_3;
                            _3743 = frontier_phi_73_pred_4;
                            _3742 = frontier_phi_73_pred_5;
                            _3450 = _3743 + _3463;
                            _3451 = _3744 + _3464;
                            _3452 = _3745 + _3465;
                            _3447 = _3740 + _3460;
                            _3448 = _3741 + _3461;
                            _3449 = _3742 + _3462;
                            if (_3467 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3460 = _3447;
                                _3461 = _3448;
                                _3462 = _3449;
                                _3463 = _3450;
                                _3464 = _3451;
                                _3465 = _3452;
                                _3466 = _3467;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3450;
                        frontier_phi_67_pred_1 = _3451;
                        frontier_phi_67_pred_2 = _3452;
                        frontier_phi_67_pred_3 = _3449;
                        frontier_phi_67_pred_4 = _3448;
                        frontier_phi_67_pred_5 = _3447;
                    }
                    _3115 = frontier_phi_67_pred;
                    _3117 = frontier_phi_67_pred_1;
                    _3119 = frontier_phi_67_pred_2;
                    _3113 = frontier_phi_67_pred_3;
                    _3111 = frontier_phi_67_pred_4;
                    _3109 = frontier_phi_67_pred_5;
                    uint _3254 = _3253 + 1u;
                    if (_3254 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3247 = _3109;
                        _3248 = _3111;
                        _3249 = _3113;
                        _3250 = _3115;
                        _3251 = _3117;
                        _3252 = _3119;
                        _3253 = _3254;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3117;
                frontier_phi_55_56_ladder_1 = _3119;
                frontier_phi_55_56_ladder_2 = _3115;
                frontier_phi_55_56_ladder_3 = _3113;
                frontier_phi_55_56_ladder_4 = _3111;
                frontier_phi_55_56_ladder_5 = _3109;
            }
            else
            {
                frontier_phi_55_56_ladder = _3003;
                frontier_phi_55_56_ladder_1 = _3005;
                frontier_phi_55_56_ladder_2 = _3001;
                frontier_phi_55_56_ladder_3 = _2999;
                frontier_phi_55_56_ladder_4 = _2997;
                frontier_phi_55_56_ladder_5 = _2995;
            }
            _3108 = frontier_phi_55_56_ladder_5;
            _3110 = frontier_phi_55_56_ladder_4;
            _3112 = frontier_phi_55_56_ladder_3;
            _3114 = frontier_phi_55_56_ladder_2;
            _3116 = frontier_phi_55_56_ladder;
            _3118 = frontier_phi_55_56_ladder_1;
        }
        float _3123 = isnan(1.0) ? _1153 : (isnan(_1153) ? 1.0 : min(_1153, 1.0));
        _2905 = (_3123 * _3114) + _2338;
        _2907 = (_3123 * _3116) + _2340;
        _2909 = (_3123 * _3118) + _2342;
        _2911 = ((_3108 * _1138) * _3123) + _2686;
        _2913 = ((_3110 * _1140) * _3123) + _2688;
        _2915 = ((_3112 * _1141) * _3123) + _2690;
    }
    else
    {
        _2905 = _2338;
        _2907 = _2340;
        _2909 = _2342;
        _2911 = _2686;
        _2913 = _2688;
        _2915 = _2690;
    }
    float _4865 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
    float _4876 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
    float _4887 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
    float _4898 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _2940 = cbInstanceData._m0[_1113 + 6u].w * (isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0)));
    float _2945 = _1075 / cbSceneParam._m0[86u].x;
    float _2946 = _1076 / cbSceneParam._m0[86u].y;
    vec4 _2960 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2945, _2946, (log2((isnan(cbSceneParam._m0[77u].w) ? _1010 : (isnan(_1010) ? cbSceneParam._m0[77u].w : min(_1010, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2962 = _2960.x;
    float _2963 = _2960.y;
    float _2964 = _2960.z;
    float _2965 = _2960.w;
    float _3058;
    float _3060;
    float _3062;
    float _3064;
    if (_1010 > cbSceneParam._m0[78u].w)
    {
        float _3020 = isnan(_1010) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1010 : min(cbSceneParam._m0[80u].w, _1010));
        float _3021 = _3020 / _1010;
        float _3032 = _3021 * _1060;
        float _3033 = _1061 * _3021;
        float _3034 = (-0.0) - _3033;
        float _3036 = _3021 * _1062;
        float _3038 = (cbSceneParam._m0[77u].w * _3034) / _3020;
        float _3039 = _3038 + cbSceneParam._m0[79u].w;
        float _3040 = cbSceneParam._m0[79u].w - _3033;
        float _3046 = sqrt(((_3032 * _3032) + (_3033 * _3033)) + (_3036 * _3036));
        float _3049 = (1.0 - (cbSceneParam._m0[77u].w / _3020)) * _3046;
        float _3054 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3056 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3209;
        if (abs((_3034 - _3038) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3209 = ((((_3039 > 0.0) ? exp2(_3054 * _3039) : (2.0 - exp2(_3056 * _3039))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3049;
        }
        else
        {
            float _3169 = 1.0 / cbSceneParam._m0[80u].x;
            float _3170 = isnan(_3040) ? _3039 : (isnan(_3039) ? _3040 : max(_3039, _3040));
            float _3171 = isnan(_3040) ? _3039 : (isnan(_3039) ? _3040 : min(_3039, _3040));
            float _3180 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : min(_3170, 0.0));
            float _3181 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : min(_3171, 0.0));
            _3209 = ((abs(_3046 / _3034) * cbSceneParam._m0[80u].y) * ((((_3180 - _3181) * 2.0) - ((exp2(_3054 * (isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0)))) - exp2(_3054 * (isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0))))) * _3169)) - ((exp2(_3056 * _3180) - exp2(_3056 * _3181)) * _3169))) + (_3049 * cbSceneParam._m0[80u].z);
        }
        vec4 _3211 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2945, _2946, 1.0), 0.0);
        float _3220 = exp2((_3209 * (-1.44269502162933349609375)) * (1.0 - _3211.w));
        float _3221 = log2(_3220);
        float _3237 = log2(_2965);
        _3058 = (exp2(_3237 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3221 * cbSceneParam._m0[78u].x)) * _3211.x) / cbSceneParam._m0[78u].x)) + _2962;
        _3060 = (exp2(_3237 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3221 * cbSceneParam._m0[78u].y)) * _3211.y) / cbSceneParam._m0[78u].y)) + _2963;
        _3062 = (exp2(_3237 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3221 * cbSceneParam._m0[78u].z)) * _3211.z) / cbSceneParam._m0[78u].z)) + _2964;
        _3064 = _3220 * _2965;
    }
    else
    {
        _3058 = _2962;
        _3060 = _2963;
        _3062 = _2964;
        _3064 = _2965;
    }
    float _3076 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3077 = _3076 == 3.0;
    float _3078 = log2(_3064);
    float _3085 = exp2(_3078 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0))) * (_2905 + ((isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0))) * _1153))) + ((_2911 + ((isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0))) * _1957)) * cbPerFrame._m0[3u].x));
    float _3086 = exp2(_3078 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0))) * (_2907 + ((isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))) * _1153))) + ((_2913 + ((isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0))) * _1957)) * cbPerFrame._m0[3u].x));
    float _3087 = exp2(_3078 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0))) * (_2909 + ((isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))) * _1153))) + ((_2915 + ((isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0))) * _1957)) * cbPerFrame._m0[3u].x));
    float _3096 = (_3076 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3096 * (_3077 ? _3085 : (_3085 + (cbSceneParam._m0[72u].w * _3058)));
    SV_Target.y = _3096 * (_3077 ? _3086 : (_3086 + (cbSceneParam._m0[72u].w * _3060)));
    SV_Target.z = _3096 * (_3077 ? _3087 : (_3087 + (cbSceneParam._m0[72u].w * _3062)));
    SV_Target.w = _2940;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2940;
}


