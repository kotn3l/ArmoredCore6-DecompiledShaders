#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24;
layout(set = 0, binding = 12) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 13) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 18) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in float TEXCOORD_8;
layout(location = 7, component = 1) in float TEXCOORD_9;
layout(location = 7, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1462;
float _3865;
float _3866;
float _3867;
float _3868;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _275 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _290 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _294 = _290.z;
    float _307 = exp2(log2((1.0 - _294) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _308 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _309 = isnan(1.0) ? _308 : (isnan(_308) ? 1.0 : min(_308, 1.0));
    vec4 _326 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _338 = exp2(log2(_326.w * cbMtdParam._m0[29u].y) * cbMtdParam._m0[23u].x);
    float _339 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _340 = isnan(1.0) ? _339 : (isnan(_339) ? 1.0 : min(_339, 1.0));
    float _349 = exp2(log2(cbMtdParam._m0[23u].y * _294) * cbMtdParam._m0[22u].y);
    float _350 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _351 = isnan(1.0) ? _350 : (isnan(_350) ? 1.0 : min(_350, 1.0));
    float _372 = roundEven(5.0 - ((texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _373 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _374 = isnan(4.0) ? _373 : (isnan(_373) ? 4.0 : min(_373, 4.0));
    float _386 = floor(_374);
    vec4 _389 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w, _386));
    vec4 _413 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _424 = cbMtdParam._m0[9u].x * _413.x;
    float _425 = cbMtdParam._m0[9u].y * _413.y;
    float _426 = cbMtdParam._m0[9u].z * _413.z;
    float _433 = (((cbMtdParam._m0[10u].x * _389.x) - _424) * _351) + _424;
    float _434 = (((cbMtdParam._m0[10u].y * _389.y) - _425) * _351) + _425;
    float _435 = (((cbMtdParam._m0[10u].z * _389.z) - _426) * _351) + _426;
    float _441 = exp2(log2(_290.w) * cbMtdParam._m0[23u].w);
    vec4 _454 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _474 = (((cbMtdParam._m0[16u].x * _454.x) - _433) * _441) + _433;
    float _475 = (((cbMtdParam._m0[16u].y * _454.y) - _434) * _441) + _434;
    float _476 = (((cbMtdParam._m0[16u].z * _454.z) - _435) * _441) + _435;
    vec4 _489 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _509 = (((cbMtdParam._m0[19u].x * _489.x) - _474) * _340) + _474;
    float _510 = (((cbMtdParam._m0[19u].y * _489.y) - _475) * _340) + _475;
    float _511 = (((cbMtdParam._m0[19u].z * _489.z) - _476) * _340) + _476;
    vec4 _524 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _549 = (_326.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _524.x) - _509) * _309) + _509);
    float _551 = (_326.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _524.y) - _510) * _309) + _510);
    float _553 = (_326.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _524.z) - _511) * _309) + _511);
    float _557 = cbMtdParam._m0[28u].x * TEXCOORD_8;
    float _566 = (_557 - (((_275.x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _557))) * (cbMtdParam._m0[27u].w + 1.0);
    float _3917 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _567 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _574 = ((cbMtdParam._m0[21u].x - _549) * _567) + _549;
    float _575 = ((cbMtdParam._m0[21u].y - _551) * _567) + _551;
    float _576 = ((cbMtdParam._m0[21u].z - _553) * _567) + _553;
    vec4 _590 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24, SS_ClampLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.z) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.w) + cbTextureTilingScale._m0[11u].w));
    float _598 = (_590.x + (-1.0)) + (cbMtdParam._m0[28u].y * 2.0);
    float _3928 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _604 = exp2(log2(cbMtdParam._m0[28u].w * (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0)))) * cbMtdParam._m0[28u].z);
    float _3939 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _605 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _203[5];
    float _204[5];
    _203[0u] = cbMtdParam._m0[29u].z;
    _204[0u] = cbMtdParam._m0[29u].w;
    _203[1u] = cbMtdParam._m0[31u].z;
    _204[1u] = cbMtdParam._m0[31u].w;
    _203[2u] = cbMtdParam._m0[31u].x;
    _204[2u] = cbMtdParam._m0[31u].y;
    _203[3u] = cbMtdParam._m0[30u].z;
    _204[3u] = cbMtdParam._m0[30u].w;
    _203[4u] = cbMtdParam._m0[30u].x;
    _204[4u] = cbMtdParam._m0[30u].y;
    float _646 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    uint _648 = uint(int(isnan(4.0) ? _646 : (isnan(_646) ? 4.0 : min(_646, 4.0))));
    float _655 = ((_204[_648] - cbMtdParam._m0[22u].z) * _351) + cbMtdParam._m0[22u].z;
    float _658 = ((cbMtdParam._m0[22u].w - _655) * _441) + _655;
    float _661 = ((cbMtdParam._m0[25u].x - _658) * _340) + _658;
    float _664 = ((cbMtdParam._m0[26u].x - _661) * _309) + _661;
    float _666 = _664 - (_664 * _557);
    vec4 _683 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w, _386));
    vec4 _701 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _703 = _701.x;
    float _704 = _701.y;
    float _709 = cbMtdParam._m0[22u].x + _701.z;
    float _712 = (((_683.z + _203[_648]) - _709) * _351) + _709;
    vec4 _725 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _736 = (((_725.z - _712) + cbMtdParam._m0[29u].x) * _441) + _712;
    float _741 = ((((_294 * 2.0) * _736) - _736) * cbMtdParam._m0[24u].w) + _736;
    vec4 _753 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _764 = (((cbMtdParam._m0[23u].z + _753.z) - _741) * _340) + _741;
    vec4 _777 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _788 = (((_777.z - _764) + cbMtdParam._m0[26u].y) * _309) + _764;
    vec4 _803 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _817 = ((cbMtdParam._m0[27u].y * _557) * ((_803.z * cbMtdParam._m0[27u].x) - _788)) + _788;
    float _829 = ((_683.x - _703) * _351) + _703;
    float _830 = ((_683.y - _704) * _351) + _704;
    float _835 = ((_725.x - _829) * _441) + _829;
    float _836 = ((_725.y - _830) * _441) + _830;
    float _841 = ((_753.x - _835) * _340) + _835;
    float _842 = ((_753.y - _836) * _340) + _836;
    float _851 = ((((_777.x - _841) * _309) + _841) * 2.0) + (-1.0);
    float _852 = ((((_777.y - _842) * _309) + _842) * 2.0) + (-1.0);
    float _853 = dot(vec2(_851, _852), vec2(_851, _852));
    float _3960 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _858 = sqrt(1.0 - (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))));
    float _868 = ((cbMtdParam._m0[25u].y * ((_290.x * 2.0) + (-1.0))) + _851) + ((((_803.x * 2.0) + (-1.0)) * _557) * cbMtdParam._m0[26u].w);
    float _869 = ((cbMtdParam._m0[25u].y * ((_290.y * 2.0) + (-1.0))) + _852) + (((cbMtdParam._m0[28u].x * TEXCOORD_9) * ((_803.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _872 = fma(_858, _239 * NORMAL.x, fma(_869, _246 * TANGENT.x, (_232 * _224) * _868));
    float _875 = fma(_858, _239 * NORMAL.y, fma(_869, _246 * TANGENT.y, (_232 * _225) * _868));
    float _878 = fma(_858, _239 * NORMAL.z, fma(_869, _246 * TANGENT.z, (_232 * _226) * _868));
    float _882 = inversesqrt(dot(vec3(_872, _875, _878), vec3(_872, _875, _878)));
    float _883 = _882 * _872;
    float _884 = _882 * _875;
    float _885 = _882 * _878;
    float _3971 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _886 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _3982 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _887 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _3993 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _4004 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _4015 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _4026 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _891 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _907 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _947 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _957 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _947);
    float _958 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _947);
    float _959 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _947);
    float _963 = inversesqrt(dot(vec3(_957, _958, _959), vec3(_957, _958, _959)));
    float _964 = _957 * _963;
    float _965 = _958 * _963;
    float _966 = _959 * _963;
    vec4 _971 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _973 = _971.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1143 = sqrt(((_957 * _957) + (_958 * _958)) + (_959 * _959));
        float _1149 = (cbMatDynParam._m0[5u].x * _1143) + cbMatDynParam._m0[5u].y;
        float _4037 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1154 = (cbMatDynParam._m0[5u].z * _1143) + cbMatDynParam._m0[5u].w;
        float _4048 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) - _1150)) + _1150) < ((_973 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _984 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _985 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1003 = fma(_885, cbSceneParam._m0[5u].z, fma(_884, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _883));
    float _1006 = fma(_885, cbSceneParam._m0[6u].z, fma(_884, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _883));
    float _1009 = fma(_885, cbSceneParam._m0[7u].z, fma(_884, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _883));
    uint _1022 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1023 = _1022 + 9u;
    uint _1024 = _1023 + uint(cbMatDynParam._m0[0u].w);
    float _1030 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) * cbInstanceData._m0[_1024].x;
    float _1031 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) * cbInstanceData._m0[_1024].y;
    float _1032 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0)))) * cbInstanceData._m0[_1024].z;
    float _4059 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _1033 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _4070 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _1034 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _4081 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _1035 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _1036 = 1.0 - _891;
    float _1037 = _1033 * _1036;
    float _1038 = _1034 * _1036;
    float _1039 = _1035 * _1036;
    float _1044 = (_1033 + (-0.039999999105930328369140625)) * _891;
    float _1045 = (_1034 + (-0.039999999105930328369140625)) * _891;
    float _1046 = (_1035 + (-0.039999999105930328369140625)) * _891;
    float _1047 = _1044 + 0.039999999105930328369140625;
    float _1049 = _1045 + 0.039999999105930328369140625;
    float _1050 = _1046 + 0.039999999105930328369140625;
    vec4 _1059 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _984, cbSceneParam._m0[86u].y * _985));
    float _1062 = _1059.x * TEXCOORD_5.w;
    float _1063 = dot(vec3(_883, _884, _885), vec3(_964, _965, _966));
    float _1066 = _1063 * 2.0;
    float _1070 = (_1066 * _883) - _964;
    float _1071 = (_1066 * _884) - _965;
    float _1072 = (_1066 * _885) - _966;
    float _1076 = abs(dot(vec3(_964, _965, _966), vec3(_883, _884, _885)));
    float _4092 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _1078 = sqrt(_887);
    float _1089 = exp2((_1078 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1078 * 3.0));
    float _1095 = (1.0 - _1089) * ((_1078 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1096 = _1089 * _1078;
    float _1124 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1128 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1132 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1461;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1186 = fma(_1132, cbModelParam._m0[26u].z, fma(_1128, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1124));
        float _1190 = fma(_1132, cbModelParam._m0[27u].z, fma(_1128, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1124));
        float _1194 = fma(_1132, cbModelParam._m0[28u].z, fma(_1128, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1124));
        float _1219 = _1124 + _883;
        float _1220 = _1128 + _884;
        float _1221 = _1132 + _885;
        float _1231 = fma(_1221, cbModelParam._m0[26u].z, fma(_1220, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1219)) - _1186;
        float _1232 = fma(_1221, cbModelParam._m0[27u].z, fma(_1220, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1219)) - _1190;
        float _1233 = fma(_1221, cbModelParam._m0[28u].z, fma(_1220, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1219)) - _1194;
        float _1237 = inversesqrt(dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233)));
        float _1250 = ((_1237 * _1231) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1186 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1251 = ((_1237 * _1232) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1190 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1252 = ((_1237 * _1233) / cbModelParam._m0[34u].z) + ((((((_1194 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        float _1289 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1255.x + (-0.5));
        float _1291 = _1289 * (_1255.y + (-0.5));
        float _1292 = _1289 * (_1255.z + (-0.5));
        float _1299 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1262.x + (-0.5));
        float _1301 = _1299 * (_1262.y + (-0.5));
        float _1302 = _1299 * (_1262.z + (-0.5));
        float _1309 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1269.x + (-0.5));
        float _1311 = _1309 * (_1269.y + (-0.5));
        float _1312 = _1309 * (_1269.z + (-0.5));
        float _1319 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1276.x + (-0.5));
        float _1321 = _1319 * (_1276.y + (-0.5));
        float _1322 = _1319 * (_1276.z + (-0.5));
        float _1323 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1326 = _1290 * 0.5;
        float _1327 = _1300 * 0.5;
        float _1328 = _1310 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1343 = (dot(vec3(_883, _884, _885), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _4118 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1353 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1323 + 9.9999997473787516355514526367188e-06);
        float _4129 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _4140 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_1355 + 1.0))) + _1360) * _1323;
        float _1370 = _1291 * 0.5;
        float _1371 = _1301 * 0.5;
        float _1372 = _1311 * 0.5;
        float _1373 = dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372));
        float _1378 = (_1373 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1373);
        float _1386 = (dot(vec3(_883, _884, _885), vec3(_1378 * _1370, _1378 * _1371, _1378 * _1372)) + 1.0) * 0.5;
        float _4151 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1395 = sqrt(((_1371 * _1371) + (_1370 * _1370)) + (_1372 * _1372)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _4162 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1397 = _1396 * 2.0;
        float _1401 = (1.0 - _1396) / (_1396 + 1.0);
        float _4173 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1411 = ((((1.0 - _1402) * (_1397 + 2.0)) * exp2(log2(isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_1397 + 1.0))) + _1402) * _1324;
        float _1412 = _1292 * 0.5;
        float _1413 = _1302 * 0.5;
        float _1414 = _1312 * 0.5;
        float _1415 = dot(vec3(_1412, _1413, _1414), vec3(_1412, _1413, _1414));
        float _1420 = (_1415 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1415);
        float _1428 = (dot(vec3(_883, _884, _885), vec3(_1420 * _1412, _1420 * _1413, _1420 * _1414)) + 1.0) * 0.5;
        float _4184 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1437 = sqrt(((_1413 * _1413) + (_1412 * _1412)) + (_1414 * _1414)) / (_1325 + 9.9999997473787516355514526367188e-06);
        float _4195 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1439 = _1438 * 2.0;
        float _1443 = (1.0 - _1438) / (_1438 + 1.0);
        float _4206 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1453 = ((((1.0 - _1444) * (_1439 + 2.0)) * exp2(log2(isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_1439 + 1.0))) + _1444) * _1325;
        _1461 = _1292;
        _1463 = _1291;
        _1464 = _1290;
        _1465 = _1302;
        _1466 = _1301;
        _1467 = _1300;
        _1468 = _1312;
        _1469 = _1311;
        _1470 = _1310;
        _1471 = _1325;
        _1472 = _1324;
        _1473 = _1323;
        _1474 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
        _1475 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)));
        _1476 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)));
    }
    else
    {
        _1461 = _1462;
        _1463 = _1462;
        _1464 = _1462;
        _1465 = _1462;
        _1466 = _1462;
        _1467 = _1462;
        _1468 = _1462;
        _1469 = _1462;
        _1470 = _1462;
        _1471 = _1462;
        _1472 = _1462;
        _1473 = _1462;
        _1474 = 0.0;
        _1475 = 0.0;
        _1476 = 0.0;
    }
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1502 = fma(_1132, cbModelParam._m0[30u].z, fma(_1128, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1124));
        float _1506 = fma(_1132, cbModelParam._m0[31u].z, fma(_1128, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1124));
        float _1510 = fma(_1132, cbModelParam._m0[32u].z, fma(_1128, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1124));
        float _1533 = _1124 + _883;
        float _1534 = _1128 + _884;
        float _1535 = _1132 + _885;
        float _1545 = fma(_1535, cbModelParam._m0[30u].z, fma(_1534, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1533)) - _1502;
        float _1546 = fma(_1535, cbModelParam._m0[31u].z, fma(_1534, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1533)) - _1506;
        float _1547 = fma(_1535, cbModelParam._m0[32u].z, fma(_1534, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1533)) - _1510;
        float _1551 = inversesqrt(dot(vec3(_1545, _1546, _1547), vec3(_1545, _1546, _1547)));
        float _1564 = ((_1551 * _1545) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1502 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1565 = ((_1551 * _1546) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1506 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1566 = ((_1551 * _1547) / cbModelParam._m0[35u].z) + ((((((_1510 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1568 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1564, _1565, _1566), 0.0);
        vec4 _1575 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1564, _1565, _1566), 0.0);
        vec4 _1582 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1564, _1565, _1566), 0.0);
        vec4 _1589 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1564, _1565, _1566), 0.0);
        float _1601 = exp2((_1568.w + (-0.5)) * 20.0) * 2.0;
        float _1602 = _1601 * (_1568.x + (-0.5));
        float _1603 = _1601 * (_1568.y + (-0.5));
        float _1604 = _1601 * (_1568.z + (-0.5));
        float _1611 = exp2((_1575.w + (-0.5)) * 20.0) * 2.0;
        float _1612 = _1611 * (_1575.x + (-0.5));
        float _1613 = _1611 * (_1575.y + (-0.5));
        float _1614 = _1611 * (_1575.z + (-0.5));
        float _1621 = exp2((_1582.w + (-0.5)) * 20.0) * 2.0;
        float _1622 = _1621 * (_1582.x + (-0.5));
        float _1623 = _1621 * (_1582.y + (-0.5));
        float _1624 = _1621 * (_1582.z + (-0.5));
        float _1631 = exp2((_1589.w + (-0.5)) * 20.0) * 2.0;
        float _1632 = _1631 * (_1589.x + (-0.5));
        float _1633 = _1631 * (_1589.y + (-0.5));
        float _1634 = _1631 * (_1589.z + (-0.5));
        float _1635 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1636 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1637 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1638 = _1602 * 0.5;
        float _1639 = _1612 * 0.5;
        float _1640 = _1622 * 0.5;
        float _1641 = dot(vec3(_1638, _1639, _1640), vec3(_1638, _1639, _1640));
        float _1646 = (_1641 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1641);
        float _1654 = (dot(vec3(_883, _884, _885), vec3(_1646 * _1638, _1646 * _1639, _1646 * _1640)) + 1.0) * 0.5;
        float _4247 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1663 = sqrt(((_1639 * _1639) + (_1638 * _1638)) + (_1640 * _1640)) / (_1635 + 9.9999997473787516355514526367188e-06);
        float _4258 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1665 = _1664 * 2.0;
        float _1669 = (1.0 - _1664) / (_1664 + 1.0);
        float _4269 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1679 = ((((1.0 - _1670) * (_1665 + 2.0)) * exp2(log2(isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_1665 + 1.0))) + _1670) * _1635;
        float _1680 = _1603 * 0.5;
        float _1681 = _1613 * 0.5;
        float _1682 = _1623 * 0.5;
        float _1683 = dot(vec3(_1680, _1681, _1682), vec3(_1680, _1681, _1682));
        float _1688 = (_1683 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1683);
        float _1696 = (dot(vec3(_883, _884, _885), vec3(_1688 * _1680, _1688 * _1681, _1688 * _1682)) + 1.0) * 0.5;
        float _4280 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1705 = sqrt(((_1681 * _1681) + (_1680 * _1680)) + (_1682 * _1682)) / (_1636 + 9.9999997473787516355514526367188e-06);
        float _4291 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1707 = _1706 * 2.0;
        float _1711 = (1.0 - _1706) / (_1706 + 1.0);
        float _4302 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1721 = ((((1.0 - _1712) * (_1707 + 2.0)) * exp2(log2(isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_1707 + 1.0))) + _1712) * _1636;
        float _1722 = _1604 * 0.5;
        float _1723 = _1614 * 0.5;
        float _1724 = _1624 * 0.5;
        float _1725 = dot(vec3(_1722, _1723, _1724), vec3(_1722, _1723, _1724));
        float _1730 = (_1725 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1725);
        float _1738 = (dot(vec3(_883, _884, _885), vec3(_1730 * _1722, _1730 * _1723, _1730 * _1724)) + 1.0) * 0.5;
        float _4313 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1747 = sqrt(((_1723 * _1723) + (_1722 * _1722)) + (_1724 * _1724)) / (_1637 + 9.9999997473787516355514526367188e-06);
        float _4324 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1748 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1749 = _1748 * 2.0;
        float _1753 = (1.0 - _1748) / (_1748 + 1.0);
        float _4335 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1754 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1763 = ((((1.0 - _1754) * (_1749 + 2.0)) * exp2(log2(isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_1749 + 1.0))) + _1754) * _1637;
        _1771 = _1604;
        _1772 = _1603;
        _1773 = _1602;
        _1774 = _1614;
        _1775 = _1613;
        _1776 = _1612;
        _1777 = _1624;
        _1778 = _1623;
        _1779 = _1622;
        _1780 = _1637;
        _1781 = _1636;
        _1782 = _1635;
        _1783 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)));
        _1784 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)));
        _1785 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)));
    }
    else
    {
        _1771 = _1462;
        _1772 = _1462;
        _1773 = _1462;
        _1774 = _1462;
        _1775 = _1462;
        _1776 = _1462;
        _1777 = _1462;
        _1778 = _1462;
        _1779 = _1462;
        _1780 = _1462;
        _1781 = _1462;
        _1782 = _1462;
        _1783 = 0.0;
        _1784 = 0.0;
        _1785 = 0.0;
    }
    float _1795 = (cbModelParam._m0[1u].x * (_1783 - _1474)) + _1474;
    float _1796 = (cbModelParam._m0[1u].x * (_1784 - _1475)) + _1475;
    float _1797 = (cbModelParam._m0[1u].x * (_1785 - _1476)) + _1476;
    float _1818 = fma(_1797, cbSceneParam._m0[89u].z, fma(_1796, cbSceneParam._m0[89u].y, _1795 * cbSceneParam._m0[89u].x));
    float _1821 = fma(_1797, cbSceneParam._m0[90u].z, fma(_1796, cbSceneParam._m0[90u].y, _1795 * cbSceneParam._m0[90u].x));
    float _1824 = fma(_1797, cbSceneParam._m0[91u].z, fma(_1796, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1795));
    float _1839 = _1070 * 0.5;
    float _1840 = _1071 * 0.5;
    float _1841 = _1072 * 0.5;
    float _1842 = dot(vec4(_1839, _1840, _1841, 1.0), vec4(_1773, _1776, _1779, _1782));
    float _1845 = dot(vec4(_1839, _1840, _1841, 1.0), vec4(_1772, _1775, _1778, _1781));
    float _1848 = dot(vec4(_1839, _1840, _1841, 1.0), vec4(_1771, _1774, _1777, _1780));
    float _1882;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1855 = dot(vec4(_1839, _1840, _1841, 1.0), vec4(_1461, _1465, _1468, _1471));
        float _1859 = dot(vec4(_1839, _1840, _1841, 1.0), vec4(_1463, _1466, _1469, _1472));
        float _1863 = dot(vec4(_1839, _1840, _1841, 1.0), vec4(_1464, _1467, _1470, _1473));
        float _1870 = dot(vec4(cbModelParam._m0[39u]), vec4(_1839, _1840, _1841, 1.0));
        _1882 = dot(vec3(isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0)), isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0)), isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1870) ? 0.0 : (isnan(0.0) ? _1870 : max(0.0, _1870))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1882 = 1.0;
    }
    float _1893;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1884 = dot(vec4(cbModelParam._m0[40u]), vec4(_1839, _1840, _1841, 1.0));
        _1893 = dot(vec3(isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0)), isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0)), isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1884) ? 0.0 : (isnan(0.0) ? _1884 : max(0.0, _1884))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1893 = 1.0;
    }
    float _1897 = (_1893 * cbModelParam._m0[1u].x) + (_1882 * (1.0 - cbModelParam._m0[1u].x));
    float _1907 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _887);
    float _1908 = isnan(_1907) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1907 : min(cbModelParam._m0[25u].z, _1907));
    float _1988;
    float _1990;
    float _1992;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1955 = fma(_1132, cbModelParam._m0[13u].z, fma(_1128, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1124)) + cbModelParam._m0[13u].w;
        float _1959 = fma(_1132, cbModelParam._m0[14u].z, fma(_1128, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1124)) + cbModelParam._m0[14u].w;
        float _1963 = fma(_1132, cbModelParam._m0[15u].z, fma(_1128, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1124)) + cbModelParam._m0[15u].w;
        float _1966 = fma(_1072, cbModelParam._m0[13u].z, fma(_1071, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1070));
        float _1969 = fma(_1072, cbModelParam._m0[14u].z, fma(_1071, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1070));
        float _1972 = fma(_1072, cbModelParam._m0[15u].z, fma(_1071, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1070));
        float _2000;
        if (_1966 > 0.0)
        {
            _2000 = abs((1.0 - _1955) / _1966);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1955 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2000 = frontier_phi_17_15_ladder;
        }
        float _2223;
        if (_1969 > 0.0)
        {
            _2223 = abs((1.0 - _1959) / _1969);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1969 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1959 + 1.0) / _1969);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2223 = frontier_phi_26_22_ladder;
        }
        float _2480;
        if (_1972 > 0.0)
        {
            _2480 = abs((1.0 - _1963) / _1972);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1972 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1963 + 1.0) / _1972);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2480 = frontier_phi_38_33_ladder;
        }
        float _2482 = isnan(_2223) ? _2000 : (isnan(_2000) ? _2223 : min(_2000, _2223));
        float _2483 = isnan(_2480) ? _2482 : (isnan(_2482) ? _2480 : min(_2482, _2480));
        float _2487 = (_2483 * _1966) + _1955;
        float _2488 = (_2483 * _1969) + _1959;
        float _2489 = (_2483 * _1972) + _1963;
        float _2490 = _2483 * 9.9999997473787516355514526367188e-05;
        float _2492 = (-1.0) - _2490;
        float _2494 = _2490 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2489 > _2494) || ((_2489 < _2492) || ((_2488 > _2494) || ((_2488 < _2492) || ((_2487 < _2492) || (_2487 > _2494))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2617 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2489, cbModelParam._m0[9u].z, fma(_2488, cbModelParam._m0[9u].y, _2487 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2489, cbModelParam._m0[10u].z, fma(_2488, cbModelParam._m0[10u].y, _2487 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2489, cbModelParam._m0[11u].z, fma(_2488, cbModelParam._m0[11u].y, _2487 * cbModelParam._m0[11u].x))), _1908);
            frontier_phi_16_38_ladder = _2617.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2617.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2617.x * cbModelParam._m0[1u].y;
        }
        _1988 = frontier_phi_16_38_ladder_2;
        _1990 = frontier_phi_16_38_ladder_1;
        _1992 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1976 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1070, _1071, _1072), _1908);
        _1988 = _1976.x * cbModelParam._m0[1u].y;
        _1990 = _1976.y * cbModelParam._m0[1u].y;
        _1992 = _1976.z * cbModelParam._m0[1u].y;
    }
    float _1996 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _887);
    float _1997 = isnan(_1996) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1996 : min(cbModelParam._m0[25u].w, _1996));
    float _2086;
    float _2088;
    float _2090;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2050 = fma(_1132, cbModelParam._m0[21u].z, fma(_1128, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1124)) + cbModelParam._m0[21u].w;
        float _2054 = fma(_1132, cbModelParam._m0[22u].z, fma(_1128, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1124)) + cbModelParam._m0[22u].w;
        float _2058 = fma(_1132, cbModelParam._m0[23u].z, fma(_1128, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1124)) + cbModelParam._m0[23u].w;
        float _2061 = fma(_1072, cbModelParam._m0[21u].z, fma(_1071, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1070));
        float _2064 = fma(_1072, cbModelParam._m0[22u].z, fma(_1071, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1070));
        float _2067 = fma(_1072, cbModelParam._m0[23u].z, fma(_1071, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1070));
        float _2228;
        if (_2061 > 0.0)
        {
            _2228 = abs((1.0 - _2050) / _2061);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2061 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2050 + 1.0) / _2061);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2228 = frontier_phi_28_24_ladder;
        }
        float _2507;
        if (_2064 > 0.0)
        {
            _2507 = abs((1.0 - _2054) / _2064);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2064 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2054 + 1.0) / _2064);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2507 = frontier_phi_40_35_ladder;
        }
        float _2720;
        if (_2067 > 0.0)
        {
            _2720 = abs((1.0 - _2058) / _2067);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2067 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2058 + 1.0) / _2067);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2720 = frontier_phi_49_46_ladder;
        }
        float _2722 = isnan(_2507) ? _2228 : (isnan(_2228) ? _2507 : min(_2228, _2507));
        float _2723 = isnan(_2720) ? _2722 : (isnan(_2722) ? _2720 : min(_2722, _2720));
        float _2727 = (_2723 * _2061) + _2050;
        float _2728 = (_2723 * _2064) + _2054;
        float _2729 = (_2723 * _2067) + _2058;
        float _2730 = _2723 * 9.9999997473787516355514526367188e-05;
        float _2731 = (-1.0) - _2730;
        float _2733 = _2730 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2729 > _2733) || ((_2729 < _2731) || ((_2728 > _2733) || ((_2728 < _2731) || ((_2727 < _2731) || (_2727 > _2733))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2930 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2729, cbModelParam._m0[17u].z, fma(_2728, cbModelParam._m0[17u].y, _2727 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2729, cbModelParam._m0[18u].z, fma(_2728, cbModelParam._m0[18u].y, _2727 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2729, cbModelParam._m0[19u].z, fma(_2728, cbModelParam._m0[19u].y, _2727 * cbModelParam._m0[19u].x))), _1997);
            frontier_phi_25_49_ladder = _2930.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2930.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2930.x * cbModelParam._m0[1u].z;
        }
        _2086 = frontier_phi_25_49_ladder_2;
        _2088 = frontier_phi_25_49_ladder_1;
        _2090 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2070 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1070, _1071, _1072), _1997);
        _2086 = _2070.x * cbModelParam._m0[1u].z;
        _2088 = _2070.y * cbModelParam._m0[1u].z;
        _2090 = _2070.z * cbModelParam._m0[1u].z;
    }
    float _2103 = (((_1095 * _1047) + _1096) * _1062) * ((cbModelParam._m0[1u].w * (_2086 - _1988)) + _1988);
    float _2105 = (((_1095 * _1049) + _1096) * _1062) * ((cbModelParam._m0[1u].w * (_2088 - _1990)) + _1990);
    float _2107 = (((_1095 * _1050) + _1096) * _1062) * ((cbModelParam._m0[1u].w * (_2090 - _1992)) + _1992);
    float _2110 = fma(_2107, cbSceneParam._m0[89u].z, fma(_2105, cbSceneParam._m0[89u].y, _2103 * cbSceneParam._m0[89u].x));
    float _2113 = fma(_2107, cbSceneParam._m0[90u].z, fma(_2105, cbSceneParam._m0[90u].y, _2103 * cbSceneParam._m0[90u].x));
    float _2116 = fma(_2107, cbSceneParam._m0[91u].z, fma(_2105, cbSceneParam._m0[91u].y, _2103 * cbSceneParam._m0[91u].x));
    vec4 _2124 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_984, _985));
    float _2126 = _2124.w;
    float _2138 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2126);
    float _2139 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2126);
    float _2140 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2126);
    uvec4 _2144 = floatBitsToUint(cbInstanceData._m0[_1022 + 5u]);
    uint _2146 = _2144.x * 14u;
    uint _2147 = _2146 + 13u;
    float _2154 = _1062 + (-1.0);
    float _2159 = (cbLight._m0[_2147].x * _2154) + 1.0;
    float _2160 = (cbLight._m0[_2147].y * _2154) + 1.0;
    float _2161 = (cbLight._m0[_2147].z * _2154) + 1.0;
    float _2162 = (cbLight._m0[_2147].w * _2154) + 1.0;
    uint _2163 = _2146 + 5u;
    float _2169 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
    uint _2173 = _2146 + 4u;
    float _2182 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
    uint _2186 = _2146 | 1u;
    float _2197 = dot(vec3(cbLight._m0[_2146].xyz), vec3(_883, _884, _885));
    float _2200 = dot(vec3(cbLight._m0[_2186].xyz), vec3(_883, _884, _885));
    float _4471 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _4482 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2205 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * 0.3183098733425140380859375;
    float _2207 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * 0.3183098733425140380859375;
    float _2214 = ((cbLight._m0[_2163].x * _2169) * _2207) + (((cbLight._m0[_2173].x * _2138) * _2182) * _2205);
    float _2215 = ((_2169 * cbLight._m0[_2163].y) * _2207) + (((cbLight._m0[_2173].y * _2139) * _2182) * _2205);
    float _2216 = ((_2169 * cbLight._m0[_2163].z) * _2207) + (((cbLight._m0[_2173].z * _2140) * _2182) * _2205);
    uvec4 _2220 = floatBitsToUint(cbLight._m0[_2146 + 12u]);
    bool _2222 = _2220.x == 0u;
    float _2233;
    float _2235;
    float _2237;
    if (_2222)
    {
        _2233 = _2214;
        _2235 = _2215;
        _2237 = _2216;
    }
    else
    {
        uint _2241 = _2146 + 6u;
        float _2257 = (dot(vec3(cbLight._m0[_2146 + 2u].xyz), vec3(_883, _884, _885)) * 0.5) + 0.5;
        float _2258 = _2257 * _2257;
        float _4493 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2259 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _2260 = isnan(1.0) ? _2161 : (isnan(_2161) ? 1.0 : min(_2161, 1.0));
        _2233 = (((cbLight._m0[_2241].x * 0.3183098733425140380859375) * _2259) * _2260) + _2214;
        _2235 = (((cbLight._m0[_2241].y * 0.3183098733425140380859375) * _2259) * _2260) + _2215;
        _2237 = (((cbLight._m0[_2241].z * 0.3183098733425140380859375) * _2259) * _2260) + _2216;
    }
    bool _2240 = _2220.y == 0u;
    float _2278;
    float _2280;
    float _2282;
    if (_2240)
    {
        _2278 = _2233;
        _2280 = _2235;
        _2282 = _2237;
    }
    else
    {
        uint _2451 = _2146 + 7u;
        float _2467 = (dot(vec3(cbLight._m0[_2146 + 3u].xyz), vec3(_883, _884, _885)) * 0.5) + 0.5;
        float _2468 = _2467 * _2467;
        float _4509 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2469 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _2470 = isnan(1.0) ? _2162 : (isnan(_2162) ? 1.0 : min(_2162, 1.0));
        _2278 = (((cbLight._m0[_2451].x * 0.3183098733425140380859375) * _2469) * _2470) + _2233;
        _2280 = (((cbLight._m0[_2451].y * 0.3183098733425140380859375) * _2469) * _2470) + _2235;
        _2282 = (((cbLight._m0[_2451].z * 0.3183098733425140380859375) * _2469) * _2470) + _2237;
    }
    uint _2285 = _2146 + 8u;
    float _2298 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2146].w)) * _887) * 0.949999988079071044921875);
    float _2299 = _2298 * _2298;
    float _2300 = cbLight._m0[_2146].x + _964;
    float _2301 = cbLight._m0[_2146].y + _965;
    float _2302 = cbLight._m0[_2146].z + _966;
    float _2306 = inversesqrt(dot(vec3(_2300, _2301, _2302), vec3(_2300, _2301, _2302)));
    float _2307 = _2306 * _2300;
    float _2308 = _2306 * _2301;
    float _2309 = _2306 * _2302;
    float _2310 = dot(vec3(_883, _884, _885), vec3(cbLight._m0[_2146].xyz));
    float _4525 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2313 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
    float _4536 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    float _2314 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
    float _2315 = dot(vec3(_883, _884, _885), vec3(_2307, _2308, _2309));
    float _4547 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2318 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
    float _2319 = dot(vec3(cbLight._m0[_2146].xyz), vec3(_2307, _2308, _2309));
    float _4558 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2323 = _2299 * _2299;
    float _2327 = ((_2318 * _2318) * (_2323 + (-1.0))) + 1.0;
    float _2335 = exp2(log2(1.0 - (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0)))) * 5.0);
    float _2336 = 0.959999978542327880859375 - _1044;
    float _2338 = 0.959999978542327880859375 - _1045;
    float _2339 = 0.959999978542327880859375 - _1046;
    float _2346 = 1.0 - _2299;
    float _2357 = (0.5 / (((_2314 * ((_2313 * _2346) + _2299)) + 9.9999999392252902907785028219223e-09) + (((_2314 * _2346) + _2299) * _2313))) * _2313;
    float _4569 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2359 = (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_2323 / ((_2327 * _2327) * 3.141590118408203125));
    uint _2373 = _2146 + 9u;
    float _2384 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2186].w)) * _887) * 0.949999988079071044921875);
    float _2385 = _2384 * _2384;
    float _2386 = cbLight._m0[_2186].x + _964;
    float _2387 = cbLight._m0[_2186].y + _965;
    float _2388 = cbLight._m0[_2186].z + _966;
    float _2392 = inversesqrt(dot(vec3(_2386, _2387, _2388), vec3(_2386, _2387, _2388)));
    float _2393 = _2392 * _2386;
    float _2394 = _2392 * _2387;
    float _2395 = _2392 * _2388;
    float _2396 = dot(vec3(_883, _884, _885), vec3(cbLight._m0[_2186].xyz));
    float _4580 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2399 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
    float _2400 = dot(vec3(_883, _884, _885), vec3(_2393, _2394, _2395));
    float _4591 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2403 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
    float _2404 = dot(vec3(cbLight._m0[_2186].xyz), vec3(_2393, _2394, _2395));
    float _4602 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
    float _2408 = _2385 * _2385;
    float _2412 = ((_2403 * _2403) * (_2408 + (-1.0))) + 1.0;
    float _2419 = exp2(log2(1.0 - (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0)))) * 5.0);
    float _2426 = 1.0 - _2385;
    float _2436 = (0.5 / (((_2314 * ((_2399 * _2426) + _2385)) + 9.9999999392252902907785028219223e-09) + (((_2314 * _2426) + _2385) * _2399))) * _2399;
    float _4613 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
    float _2438 = (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_2408 / ((_2412 * _2412) * 3.141590118408203125));
    float _2448 = (((((_2419 * _2336) + _1047) * cbLight._m0[_2373].x) * _2438) * _2169) + ((((cbLight._m0[_2285].x * _2138) * ((_2335 * _2336) + _1047)) * _2359) * _2182);
    float _2449 = (((((_2419 * _2338) + _1049) * cbLight._m0[_2373].y) * _2438) * _2169) + ((((cbLight._m0[_2285].y * _2139) * ((_2335 * _2338) + _1049)) * _2359) * _2182);
    float _2450 = (((((_2419 * _2339) + _1050) * cbLight._m0[_2373].z) * _2438) * _2169) + ((((cbLight._m0[_2285].z * _2140) * ((_2335 * _2339) + _1050)) * _2359) * _2182);
    float _2512;
    float _2514;
    float _2516;
    if (_2222)
    {
        _2512 = _2448;
        _2514 = _2449;
        _2516 = _2450;
    }
    else
    {
        uint _2518 = _2146 + 2u;
        uint _2522 = _2146 + 10u;
        float _2536 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2518].w)) * _887) * 0.949999988079071044921875);
        float _2537 = _2536 * _2536;
        float _2538 = cbLight._m0[_2518].x + _964;
        float _2539 = cbLight._m0[_2518].y + _965;
        float _2540 = cbLight._m0[_2518].z + _966;
        float _2544 = inversesqrt(dot(vec3(_2538, _2539, _2540), vec3(_2538, _2539, _2540)));
        float _2545 = _2544 * _2538;
        float _2546 = _2544 * _2539;
        float _2547 = _2544 * _2540;
        float _2548 = dot(vec3(_883, _884, _885), vec3(cbLight._m0[_2518].xyz));
        float _4624 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2551 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
        float _2552 = dot(vec3(_883, _884, _885), vec3(_2545, _2546, _2547));
        float _4635 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2555 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _2556 = dot(vec3(cbLight._m0[_2518].xyz), vec3(_2545, _2546, _2547));
        float _4646 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2560 = _2537 * _2537;
        float _2564 = ((_2555 * _2555) * (_2560 + (-1.0))) + 1.0;
        float _2571 = exp2(log2(1.0 - (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0)))) * 5.0);
        float _2578 = 1.0 - _2537;
        float _2588 = (0.5 / (((_2314 * ((_2551 * _2578) + _2537)) + 9.9999999392252902907785028219223e-09) + (((_2314 * _2578) + _2537) * _2551))) * _2551;
        float _4657 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2590 = (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0))) * (_2560 / ((_2564 * _2564) * 3.141590118408203125));
        float _2591 = isnan(1.0) ? _2161 : (isnan(_2161) ? 1.0 : min(_2161, 1.0));
        _2512 = (((((_2571 * _2336) + _1047) * cbLight._m0[_2522].x) * _2590) * _2591) + _2448;
        _2514 = (((((_2571 * _2338) + _1049) * cbLight._m0[_2522].y) * _2590) * _2591) + _2449;
        _2516 = (((((_2571 * _2339) + _1050) * cbLight._m0[_2522].z) * _2590) * _2591) + _2450;
    }
    float _2626;
    float _2628;
    float _2630;
    if (_2240)
    {
        _2626 = _2512;
        _2628 = _2514;
        _2630 = _2516;
    }
    else
    {
        uint _2637 = _2146 + 3u;
        uint _2641 = _2146 + 11u;
        float _2655 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2637].w)) * _887) * 0.949999988079071044921875);
        float _2656 = _2655 * _2655;
        float _2657 = cbLight._m0[_2637].x + _964;
        float _2658 = cbLight._m0[_2637].y + _965;
        float _2659 = cbLight._m0[_2637].z + _966;
        float _2663 = inversesqrt(dot(vec3(_2657, _2658, _2659), vec3(_2657, _2658, _2659)));
        float _2664 = _2663 * _2657;
        float _2665 = _2663 * _2658;
        float _2666 = _2663 * _2659;
        float _2667 = dot(vec3(_883, _884, _885), vec3(cbLight._m0[_2637].xyz));
        float _4673 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2670 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
        float _2671 = dot(vec3(_883, _884, _885), vec3(_2664, _2665, _2666));
        float _4684 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2674 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
        float _2675 = dot(vec3(cbLight._m0[_2637].xyz), vec3(_2664, _2665, _2666));
        float _4695 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2679 = _2656 * _2656;
        float _2683 = ((_2674 * _2674) * (_2679 + (-1.0))) + 1.0;
        float _2690 = exp2(log2(1.0 - (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0)))) * 5.0);
        float _2697 = 1.0 - _2656;
        float _2707 = (0.5 / (((_2314 * ((_2670 * _2697) + _2656)) + 9.9999999392252902907785028219223e-09) + (((_2314 * _2697) + _2656) * _2670))) * _2670;
        float _4706 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2709 = (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (_2679 / ((_2683 * _2683) * 3.141590118408203125));
        float _2710 = isnan(1.0) ? _2162 : (isnan(_2162) ? 1.0 : min(_2162, 1.0));
        _2626 = (((((_2690 * _2336) + _1047) * cbLight._m0[_2641].x) * _2709) * _2710) + _2512;
        _2628 = (((((_2690 * _2338) + _1049) * cbLight._m0[_2641].y) * _2709) * _2710) + _2514;
        _2630 = (((((_2690 * _2339) + _1050) * cbLight._m0[_2641].z) * _2709) * _2710) + _2516;
    }
    float _2845;
    float _2847;
    float _2849;
    float _2851;
    float _2853;
    float _2855;
    if (_2144.y == 0u)
    {
        float _2785 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2786 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2785;
        float _2787 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2785;
        float _2788 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2785;
        uvec4 _2800 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2801 = _2800.x;
        uint _2812 = uint((float(_2800.y) * floor(float(uint(cbSceneParam._m0[85u].y * _985) / _2801))) + floor(float(uint(cbSceneParam._m0[85u].x * _984) / _2801)));
        float _2822 = (log2(_2788 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2823 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        uint _2826 = uint(isnan(14.0) ? _2823 : (isnan(_2823) ? 14.0 : min(_2823, 14.0)));
        uvec4 _2831 = texelFetch(g_lightClusterGridBuffer, int(((_2826 << 2u) + (_2812 << 6u)) >> 2u));
        uint _2832 = _2831.x;
        uint _2833 = _2800.z;
        float _2935;
        float _2937;
        float _2939;
        float _2941;
        float _2943;
        float _2945;
        if (((((1u << ((_2833 >> 4u) & 15u)) + 4294967295u) & _2832) == 0u) || ((_2833 & 240u) == 0u))
        {
            _2935 = 0.0;
            _2937 = 0.0;
            _2939 = 0.0;
            _2941 = 0.0;
            _2943 = 0.0;
            _2945 = 0.0;
        }
        else
        {
            float _2936;
            float _2938;
            float _2940;
            float _2942;
            float _2944;
            float _2946;
            float _3088 = 0.0;
            float _3089 = 0.0;
            float _3090 = 0.0;
            float _3091 = 0.0;
            float _3092 = 0.0;
            float _3093 = 0.0;
            uint _3094 = 0u;
            uint _3103;
            bool _3104;
            for (;;)
            {
                _3103 = texelFetch(g_lightClassification, int((((_2826 << 5u) + (_2812 << 9u)) + (_3094 << 2u)) >> 2u)).x;
                _3104 = _3103 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3104)
                {
                    frontier_phi_66_pred = _3088;
                    frontier_phi_66_pred_1 = _3093;
                    frontier_phi_66_pred_2 = _3092;
                    frontier_phi_66_pred_3 = _3091;
                    frontier_phi_66_pred_4 = _3090;
                    frontier_phi_66_pred_5 = _3089;
                }
                else
                {
                    float _3233;
                    float _3234;
                    float _3235;
                    float _3236;
                    float _3237;
                    float _3238;
                    uint _3239;
                    _3233 = _3088;
                    _3234 = _3089;
                    _3235 = _3090;
                    _3236 = _3091;
                    _3237 = _3092;
                    _3238 = _3093;
                    _3239 = _3103;
                    float _3160;
                    float _3161;
                    float _3162;
                    float _3163;
                    float _3164;
                    float _3165;
                    for (;;)
                    {
                        uint _3243 = uint(findLSB(_3239)) + (_3094 << 5u);
                        uint _3240 = (_3239 + 4294967295u) & _3239;
                        uint _3245 = _3243 * 48u;
                        vec4 _3259 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3245)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 3u)).x));
                        uint _3265 = (_3243 * 48u) + 4u;
                        vec4 _3278 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3265)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 3u)).x));
                        uint _3284 = (_3243 * 48u) + 8u;
                        vec3 _3295 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3284)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 2u)).x));
                        float _3299 = _3259.x - _2786;
                        float _3300 = _3259.y - _2787;
                        float _3301 = _3259.z - _2788;
                        float _3302 = dot(vec3(_3299, _3300, _3301), vec3(_3299, _3300, _3301));
                        float _3305 = inversesqrt(_3302);
                        float _3306 = _3305 * _3299;
                        float _3307 = _3305 * _3300;
                        float _3308 = _3305 * _3301;
                        float _3309 = dot(vec3(_1003, _1006, _1009), vec3(_3306, _3307, _3308));
                        float _3314 = 1.0 - (_3302 * _3259.w);
                        float _4732 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                        float _3315 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
                        float _3316 = sqrt(_3302) * _3278.w;
                        float _3319 = 1.39999997615814208984375 / (_3316 + 1.39999997615814208984375);
                        float _3320 = _3319 * _3319;
                        float _3323 = ((1.0 - _3320) * _3309) + _3320;
                        float _3326 = _3316 * _3316;
                        float _3330 = ((isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0))) * _3315) / ((_3326 * 0.699999988079071044921875) + 1.0);
                        float _3334 = (-0.0) - _2786;
                        float _3335 = (-0.0) - _2787;
                        float _3336 = (-0.0) - _2788;
                        float _3340 = inversesqrt(dot(vec3(_3334, _3335, _3336), vec3(_3334, _3335, _3336)));
                        float _3341 = _3340 * _3334;
                        float _3342 = _3340 * _3335;
                        float _3343 = _3340 * _3336;
                        float _3351 = exp2(log2(1.0 / ((_3326 * 3.5) + 5.0)) * 0.25);
                        float _3352 = 1.0 - _1078;
                        float _3359 = sqrt(1.0 - ((1.0 - (_3352 * _3352)) * (1.0 - (_3351 * _3351))));
                        float _3360 = _3359 * _3359;
                        float _3361 = _3360 * _3360;
                        float _3362 = _3341 + _3306;
                        float _3363 = _3342 + _3307;
                        float _3364 = _3343 + _3308;
                        float _3368 = inversesqrt(dot(vec3(_3362, _3363, _3364), vec3(_3362, _3363, _3364)));
                        float _3372 = dot(vec3(_1003, _1006, _1009), vec3(_3341, _3342, _3343));
                        float _4748 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                        float _3375 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                        float _3376 = dot(vec3(_1003, _1006, _1009), vec3(_3368 * _3362, _3368 * _3363, _3368 * _3364));
                        float _4759 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                        float _3379 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                        float _3383 = ((_3379 * _3379) * (_3361 + (-1.0))) + 1.0;
                        float _3384 = _3319 * _3360;
                        float _3385 = _3384 * _3384;
                        float _3388 = ((1.0 - _3385) * _3309) + _3385;
                        float _4770 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                        float _3389 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                        float _3390 = 1.0 - _3360;
                        float _3400 = (0.5 / (((_3389 * ((_3375 * _3390) + _3360)) + 9.9999999392252902907785028219223e-09) + (((_3389 * _3390) + _3360) * _3375))) * _3389;
                        float _4781 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                        float _3411 = (((_3361 * 3.1415927410125732421875) * (isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0)))) / ((_3383 * _3383) * ((_3326 * 2.1991131305694580078125) + 3.141590118408203125))) * _3315;
                        _3163 = (_3330 * _3278.x) + _3236;
                        _3164 = (_3330 * _3278.y) + _3237;
                        _3165 = (_3330 * _3278.z) + _3238;
                        _3160 = (_3411 * _3295.x) + _3233;
                        _3161 = (_3411 * _3295.y) + _3234;
                        _3162 = (_3411 * _3295.z) + _3235;
                        if (_3240 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3233 = _3160;
                            _3234 = _3161;
                            _3235 = _3162;
                            _3236 = _3163;
                            _3237 = _3164;
                            _3238 = _3165;
                            _3239 = _3240;
                        }
                    }
                    frontier_phi_66_pred = _3160;
                    frontier_phi_66_pred_1 = _3165;
                    frontier_phi_66_pred_2 = _3164;
                    frontier_phi_66_pred_3 = _3163;
                    frontier_phi_66_pred_4 = _3162;
                    frontier_phi_66_pred_5 = _3161;
                }
                _2936 = frontier_phi_66_pred;
                _2946 = frontier_phi_66_pred_1;
                _2944 = frontier_phi_66_pred_2;
                _2942 = frontier_phi_66_pred_3;
                _2940 = frontier_phi_66_pred_4;
                _2938 = frontier_phi_66_pred_5;
                uint _3095 = _3094 + 1u;
                if (_3095 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3088 = _2936;
                    _3089 = _2938;
                    _3090 = _2940;
                    _3091 = _2942;
                    _3092 = _2944;
                    _3093 = _2946;
                    _3094 = _3095;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2935 = _2936;
            _2937 = _2938;
            _2939 = _2940;
            _2941 = _2942;
            _2943 = _2944;
            _2945 = _2946;
        }
        uvec4 _2949 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2950 = _2949.z;
        uint _2952 = (_2950 >> 8u) & 15u;
        float _3056;
        float _3058;
        float _3060;
        float _3062;
        float _3064;
        float _3066;
        if (((4294967295u << _2952) & _2832) == 0u)
        {
            _3056 = _2935;
            _3058 = _2937;
            _3060 = _2939;
            _3062 = _2941;
            _3064 = _2943;
            _3066 = _2945;
        }
        else
        {
            float _3081 = inversesqrt(dot(vec3(_2786, _2787, _2788), vec3(_2786, _2787, _2788)));
            float _3082 = _3081 * _2786;
            float _3083 = _3081 * _2787;
            float _3084 = _3081 * _2788;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2952 < ((_2950 >> 12u) & 15u))
            {
                float _3057;
                float _3059;
                float _3061;
                float _3063;
                float _3065;
                float _3067;
                float _3216 = _2935;
                float _3217 = _2937;
                float _3218 = _2939;
                float _3219 = _2941;
                float _3220 = _2943;
                float _3221 = _2945;
                uint _3222 = _2952;
                uint _3231;
                bool _3232;
                for (;;)
                {
                    _3231 = texelFetch(g_lightClassification, int((((_2826 << 5u) + (_2812 << 9u)) + (_3222 << 2u)) >> 2u)).x;
                    _3232 = _3231 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3232)
                    {
                        frontier_phi_77_pred = _3221;
                        frontier_phi_77_pred_1 = _3220;
                        frontier_phi_77_pred_2 = _3219;
                        frontier_phi_77_pred_3 = _3218;
                        frontier_phi_77_pred_4 = _3217;
                        frontier_phi_77_pred_5 = _3216;
                    }
                    else
                    {
                        float _3425;
                        float _3426;
                        float _3427;
                        float _3428;
                        float _3429;
                        float _3430;
                        float _3718;
                        float _3719;
                        float _3720;
                        float _3721;
                        float _3722;
                        float _3723;
                        float _3438 = _3216;
                        float _3439 = _3217;
                        float _3440 = _3218;
                        float _3441 = _3219;
                        float _3442 = _3220;
                        float _3443 = _3221;
                        uint _3444 = _3231;
                        uint _3445;
                        vec4 _3470;
                        float _3471;
                        vec4 _3486;
                        vec3 _3498;
                        vec4 _3513;
                        vec4 _3528;
                        float _3574;
                        bool _3575;
                        for (;;)
                        {
                            uint _3455 = ((_3222 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3444));
                            _3445 = (_3444 + 4294967295u) & _3444;
                            uint _3457 = _3455 * 40u;
                            _3470 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3457)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 3u)).x));
                            _3471 = _3470.w;
                            uint _3473 = (_3455 * 40u) + 4u;
                            _3486 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 3u)).x));
                            uint _3488 = (_3455 * 40u) + 8u;
                            _3498 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3488)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 2u)).x));
                            uint _3500 = (_3455 * 40u) + 16u;
                            _3513 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 3u)).x));
                            uint _3515 = (_3455 * 40u) + 20u;
                            _3528 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 3u)).x));
                            uint _3530 = (_3455 * 40u) + 24u;
                            vec4 _3543 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 3u)).x));
                            uint _3549 = (_3455 * 40u) + 28u;
                            vec4 _3562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 3u)).x));
                            _3574 = fma(_2788, _3562.z, fma(_2787, _3562.y, _3562.x * _2786)) + _3562.w;
                            _3575 = !((fma(_2788, _3543.z, fma(_2787, _3543.y, _3543.x * _2786)) + _3543.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3575)
                            {
                                float _3602 = _3470.x - _2786;
                                float _3603 = _3470.y - _2787;
                                float _3604 = _3470.z - _2788;
                                float _3605 = dot(vec3(_3602, _3603, _3604), vec3(_3602, _3603, _3604));
                                float _3608 = inversesqrt(_3605);
                                float _3609 = _3608 * _3602;
                                float _3610 = _3608 * _3603;
                                float _3611 = _3608 * _3604;
                                float _3615 = 1.0 - (_3605 / (_3471 * _3471));
                                float _4792 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3616 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                                float _3620 = sqrt(_3605) * _3486.w;
                                float _3622 = 1.39999997615814208984375 / (_3620 + 1.39999997615814208984375);
                                float _3623 = _3622 * _3622;
                                float _3626 = ((1.0 - _3623) * dot(vec3(_3609, _3610, _3611), vec3(_1003, _1006, _1009))) + _3623;
                                float _3629 = _3620 * _3620;
                                float _3633 = (fma(_2788, _3513.z, fma(_2787, _3513.y, _3513.x * _2786)) + _3513.w) / _3574;
                                float _3634 = (fma(_2788, _3528.z, fma(_2787, _3528.y, _3528.x * _2786)) + _3528.w) / _3574;
                                float _3638 = 1.0 - dot(vec2(_3633, _3634), vec2(_3633, _3634));
                                float _4808 = isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0));
                                float _3639 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
                                float _3640 = _3639 * (((isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0))) * _3616) / ((_3629 * 0.699999988079071044921875) + 1.0));
                                float _3652 = exp2(log2(1.0 / ((_3629 * 3.5) + 5.0)) * 0.25);
                                float _3653 = 1.0 - _1078;
                                float _3660 = sqrt(1.0 - ((1.0 - (_3653 * _3653)) * (1.0 - (_3652 * _3652))));
                                float _3661 = _3660 * _3660;
                                float _3662 = _3661 * _3661;
                                float _3663 = _3609 - _3082;
                                float _3664 = _3610 - _3083;
                                float _3665 = _3611 - _3084;
                                float _3669 = inversesqrt(dot(vec3(_3663, _3664, _3665), vec3(_3663, _3664, _3665)));
                                float _3673 = dot(vec3(_1003, _1006, _1009), vec3((-0.0) - _3082, (-0.0) - _3083, (-0.0) - _3084));
                                float _4819 = isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0));
                                float _3676 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                                float _3677 = dot(vec3(_1003, _1006, _1009), vec3(_3669 * _3663, _3669 * _3664, _3669 * _3665));
                                float _4830 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                                float _3680 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                                float _3684 = ((_3680 * _3680) * (_3662 + (-1.0))) + 1.0;
                                float _3685 = _3622 * _3661;
                                float _3686 = _3685 * _3685;
                                float _3692 = ((1.0 - _3686) * dot(vec3(_1003, _1006, _1009), vec3(_3609, _3610, _3611))) + _3686;
                                float _4841 = isnan(0.0) ? _3692 : (isnan(_3692) ? 0.0 : max(_3692, 0.0));
                                float _3693 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                                float _3694 = 1.0 - _3661;
                                float _3704 = (0.5 / (((_3693 * ((_3676 * _3694) + _3661)) + 9.9999999392252902907785028219223e-09) + (((_3693 * _3694) + _3661) * _3676))) * _3693;
                                float _4852 = isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0));
                                float _3714 = (_3639 * _3616) * (((_3662 * 3.1415927410125732421875) * (isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0)))) / ((_3684 * _3684) * ((_3629 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3640 * _3486.y;
                                frontier_phi_83_pred_1 = _3640 * _3486.x;
                                frontier_phi_83_pred_2 = _3714 * _3498.z;
                                frontier_phi_83_pred_3 = _3714 * _3498.y;
                                frontier_phi_83_pred_4 = _3714 * _3498.x;
                                frontier_phi_83_pred_5 = _3640 * _3486.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3722 = frontier_phi_83_pred;
                            _3721 = frontier_phi_83_pred_1;
                            _3720 = frontier_phi_83_pred_2;
                            _3719 = frontier_phi_83_pred_3;
                            _3718 = frontier_phi_83_pred_4;
                            _3723 = frontier_phi_83_pred_5;
                            _3428 = _3721 + _3441;
                            _3429 = _3722 + _3442;
                            _3430 = _3723 + _3443;
                            _3425 = _3718 + _3438;
                            _3426 = _3719 + _3439;
                            _3427 = _3720 + _3440;
                            if (_3445 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3438 = _3425;
                                _3439 = _3426;
                                _3440 = _3427;
                                _3441 = _3428;
                                _3442 = _3429;
                                _3443 = _3430;
                                _3444 = _3445;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3430;
                        frontier_phi_77_pred_1 = _3429;
                        frontier_phi_77_pred_2 = _3428;
                        frontier_phi_77_pred_3 = _3427;
                        frontier_phi_77_pred_4 = _3426;
                        frontier_phi_77_pred_5 = _3425;
                    }
                    _3067 = frontier_phi_77_pred;
                    _3065 = frontier_phi_77_pred_1;
                    _3063 = frontier_phi_77_pred_2;
                    _3061 = frontier_phi_77_pred_3;
                    _3059 = frontier_phi_77_pred_4;
                    _3057 = frontier_phi_77_pred_5;
                    uint _3223 = _3222 + 1u;
                    if (_3223 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3216 = _3057;
                        _3217 = _3059;
                        _3218 = _3061;
                        _3219 = _3063;
                        _3220 = _3065;
                        _3221 = _3067;
                        _3222 = _3223;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3061;
                frontier_phi_58_59_ladder_1 = _3067;
                frontier_phi_58_59_ladder_2 = _3065;
                frontier_phi_58_59_ladder_3 = _3063;
                frontier_phi_58_59_ladder_4 = _3059;
                frontier_phi_58_59_ladder_5 = _3057;
            }
            else
            {
                frontier_phi_58_59_ladder = _2939;
                frontier_phi_58_59_ladder_1 = _2945;
                frontier_phi_58_59_ladder_2 = _2943;
                frontier_phi_58_59_ladder_3 = _2941;
                frontier_phi_58_59_ladder_4 = _2937;
                frontier_phi_58_59_ladder_5 = _2935;
            }
            _3056 = frontier_phi_58_59_ladder_5;
            _3058 = frontier_phi_58_59_ladder_4;
            _3060 = frontier_phi_58_59_ladder;
            _3062 = frontier_phi_58_59_ladder_3;
            _3064 = frontier_phi_58_59_ladder_2;
            _3066 = frontier_phi_58_59_ladder_1;
        }
        float _3071 = isnan(1.0) ? _1062 : (isnan(_1062) ? 1.0 : min(_1062, 1.0));
        _2845 = (_3071 * _3062) + _2278;
        _2847 = (_3071 * _3064) + _2280;
        _2849 = (_3071 * _3066) + _2282;
        _2851 = ((_3056 * _1047) * _3071) + _2626;
        _2853 = ((_3058 * _1049) * _3071) + _2628;
        _2855 = ((_3060 * _1050) * _3071) + _2630;
    }
    else
    {
        _2845 = _2278;
        _2847 = _2280;
        _2849 = _2282;
        _2851 = _2626;
        _2853 = _2628;
        _2855 = _2630;
    }
    float _4868 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _4879 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _4890 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _4901 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _2873 = ((isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0))) * (_2845 + ((isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))) * _1062))) + ((_2851 + ((isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0))) * _1897)) * cbPerFrame._m0[3u].x);
    float _2874 = ((isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0))) * (_2847 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1062))) + ((_2853 + ((isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0))) * _1897)) * cbPerFrame._m0[3u].x);
    float _2875 = ((isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0))) * (_2849 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1062))) + ((_2855 + ((isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0))) * _1897)) * cbPerFrame._m0[3u].x);
    float _2880 = cbInstanceData._m0[_1022 + 6u].w * (isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0)));
    float _2885 = _984 / cbSceneParam._m0[86u].x;
    float _2886 = _985 / cbSceneParam._m0[86u].y;
    vec4 _2900 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2885, _2886, (log2((isnan(cbSceneParam._m0[77u].w) ? _907 : (isnan(_907) ? cbSceneParam._m0[77u].w : min(_907, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2902 = _2900.x;
    float _2903 = _2900.y;
    float _2904 = _2900.z;
    float _2905 = _2900.w;
    float _2998;
    float _3000;
    float _3002;
    float _3004;
    if (_907 > cbSceneParam._m0[78u].w)
    {
        float _2960 = isnan(_907) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _907 : min(cbSceneParam._m0[80u].w, _907));
        float _2961 = _2960 / _907;
        float _2972 = _2961 * _957;
        float _2973 = _958 * _2961;
        float _2974 = (-0.0) - _2973;
        float _2976 = _2961 * _959;
        float _2978 = (cbSceneParam._m0[77u].w * _2974) / _2960;
        float _2979 = _2978 + cbSceneParam._m0[79u].w;
        float _2980 = cbSceneParam._m0[79u].w - _2973;
        float _2986 = sqrt(((_2972 * _2972) + (_2973 * _2973)) + (_2976 * _2976));
        float _2989 = (1.0 - (cbSceneParam._m0[77u].w / _2960)) * _2986;
        float _2994 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2996 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3173;
        if (abs((_2974 - _2978) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3173 = ((((_2979 > 0.0) ? exp2(_2994 * _2979) : (2.0 - exp2(_2996 * _2979))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2989;
        }
        else
        {
            float _3117 = 1.0 / cbSceneParam._m0[80u].x;
            float _3118 = isnan(_2980) ? _2979 : (isnan(_2979) ? _2980 : max(_2979, _2980));
            float _3119 = isnan(_2980) ? _2979 : (isnan(_2979) ? _2980 : min(_2979, _2980));
            float _3128 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : min(_3118, 0.0));
            float _3129 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : min(_3119, 0.0));
            _3173 = ((abs(_2986 / _2974) * cbSceneParam._m0[80u].y) * ((((_3128 - _3129) * 2.0) - ((exp2(_2994 * (isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0)))) - exp2(_2994 * (isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0))))) * _3117)) - ((exp2(_2996 * _3128) - exp2(_2996 * _3129)) * _3117))) + (_2989 * cbSceneParam._m0[80u].z);
        }
        vec4 _3175 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2885, _2886, 1.0), 0.0);
        float _3184 = exp2((_3173 * (-1.44269502162933349609375)) * (1.0 - _3175.w));
        float _3185 = log2(_3184);
        float _3201 = log2(_2905);
        _2998 = (exp2(_3201 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3185 * cbSceneParam._m0[78u].x)) * _3175.x) / cbSceneParam._m0[78u].x)) + _2902;
        _3000 = (exp2(_3201 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3185 * cbSceneParam._m0[78u].y)) * _3175.y) / cbSceneParam._m0[78u].y)) + _2903;
        _3002 = (exp2(_3201 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3185 * cbSceneParam._m0[78u].z)) * _3175.z) / cbSceneParam._m0[78u].z)) + _2904;
        _3004 = _3184 * _2905;
    }
    else
    {
        _2998 = _2902;
        _3000 = _2903;
        _3002 = _2904;
        _3004 = _2905;
    }
    bool _3211;
    vec4 _3014;
    vec4 _3036;
    float _3038;
    float _3042;
    float _3043;
    float _3044;
    float _3045;
    bool _3055;
    for (;;)
    {
        _3014 = cbMatDynParam._m0[0u];
        float _3016 = roundEven(_3014.y);
        bool _3017 = _3016 == 3.0;
        float _3018 = log2(_3004);
        float _3025 = exp2(_3018 * cbSceneParam._m0[78u].x) * _2873;
        float _3026 = exp2(_3018 * cbSceneParam._m0[78u].y) * _2874;
        float _3027 = exp2(_3018 * cbSceneParam._m0[78u].z) * _2875;
        float _3034 = _973 + (-0.5);
        _3036 = cbMtdParam._m0[1u];
        _3038 = _3036.y * _3034;
        float _3041 = (_3016 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3042 = _3041 * (_3017 ? _3025 : (_3025 + (cbSceneParam._m0[72u].w * _2998)));
        _3043 = _3041 * (_3017 ? _3026 : (_3026 + (cbSceneParam._m0[72u].w * _3000)));
        _3044 = _3041 * (_3017 ? _3027 : (_3027 + (cbSceneParam._m0[72u].w * _3002)));
        _3045 = _3034 * 0.999000012874603271484375;
        _3055 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3055)
        {
            if ((cbInstanceData._m0[_1022 + 7u].x + _3045) < 0.5)
            {
                _3211 = true;
                break;
            }
        }
        uint _3152 = _1023 + uint(_3014.w);
        if ((cbInstanceData._m0[_3152].w < 1.0) && ((cbInstanceData._m0[_3152].w + _3045) < 0.5))
        {
            _3211 = true;
            break;
        }
        if ((_3038 + 1.0) < _3036.x)
        {
            _3211 = true;
            break;
        }
        _3211 = false;
        break;
    }
    float _3416;
    if (_3211)
    {
        discard_state = true;
        _3416 = 0.0;
    }
    else
    {
        _3416 = _2880;
    }
    SV_Target.x = _3042;
    SV_Target.y = _3043;
    SV_Target.z = _3044;
    SV_Target.w = _3416;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2880;
    discard_exit();
}


