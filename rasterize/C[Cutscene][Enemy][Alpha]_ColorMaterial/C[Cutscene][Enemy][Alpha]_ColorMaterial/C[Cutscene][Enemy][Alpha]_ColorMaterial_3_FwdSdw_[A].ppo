#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24;
layout(set = 0, binding = 12) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 13) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 18) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in float TEXCOORD_8;
layout(location = 7, component = 1) in float TEXCOORD_9;
layout(location = 7, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1532;
float _4194;
float _4195;
float _4196;
float _4197;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _298 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _302 = _298.z;
    float _315 = exp2(log2((1.0 - _302) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _316 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _317 = isnan(1.0) ? _316 : (isnan(_316) ? 1.0 : min(_316, 1.0));
    vec4 _330 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _338 = log2(0.0);
    float _340 = exp2(_338 * cbMtdParam._m0[23u].x);
    float _341 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _342 = isnan(1.0) ? _341 : (isnan(_341) ? 1.0 : min(_341, 1.0));
    float _351 = exp2(log2(cbMtdParam._m0[23u].y * _302) * cbMtdParam._m0[22u].y);
    float _352 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _353 = isnan(1.0) ? _352 : (isnan(_352) ? 1.0 : min(_352, 1.0));
    vec4 _365 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _368 = _365.y;
    float _371 = (_365.x + (-0.02500000037252902984619140625)) * 8.0;
    float _375 = roundEven(5.0 - _371);
    float _376 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _377 = isnan(4.0) ? _376 : (isnan(_376) ? 4.0 : min(_376, 4.0));
    float _389 = floor(_377);
    vec4 _392 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w, _389));
    float _210[6];
    float _211[6];
    float _212[6];
    _210[0u] = cbMtdParam._m0[17u].x;
    _211[0u] = cbMtdParam._m0[17u].y;
    _212[0u] = cbMtdParam._m0[17u].z;
    _210[1u] = cbMtdParam._m0[15u].x;
    _211[1u] = cbMtdParam._m0[15u].y;
    _212[1u] = cbMtdParam._m0[15u].z;
    _210[2u] = cbMtdParam._m0[14u].x;
    _211[2u] = cbMtdParam._m0[14u].y;
    _212[2u] = cbMtdParam._m0[14u].z;
    _210[3u] = cbMtdParam._m0[13u].x;
    _211[3u] = cbMtdParam._m0[13u].y;
    _212[3u] = cbMtdParam._m0[13u].z;
    _210[4u] = cbMtdParam._m0[12u].x;
    _211[4u] = cbMtdParam._m0[12u].y;
    _212[4u] = cbMtdParam._m0[12u].z;
    _210[5u] = cbMtdParam._m0[18u].x;
    _211[5u] = cbMtdParam._m0[18u].y;
    _212[5u] = cbMtdParam._m0[18u].z;
    float _456 = roundEven(_371);
    float _457 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    uint _459 = uint(int(isnan(5.0) ? _457 : (isnan(_457) ? 5.0 : min(_457, 5.0))));
    vec4 _489 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _500 = cbMtdParam._m0[9u].x * _489.x;
    float _501 = cbMtdParam._m0[9u].y * _489.y;
    float _502 = cbMtdParam._m0[9u].z * _489.z;
    float _509 = ((((((_210[_459] - cbMtdParam._m0[10u].x) * _368) + cbMtdParam._m0[10u].x) * _392.x) - _500) * _353) + _500;
    float _510 = ((((((_211[_459] - cbMtdParam._m0[10u].y) * _368) + cbMtdParam._m0[10u].y) * _392.y) - _501) * _353) + _501;
    float _511 = ((((((_212[_459] - cbMtdParam._m0[10u].z) * _368) + cbMtdParam._m0[10u].z) * _392.z) - _502) * _353) + _502;
    float _517 = exp2(log2(_298.w) * cbMtdParam._m0[23u].w);
    vec4 _530 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _550 = (((cbMtdParam._m0[16u].x * _530.x) - _509) * _517) + _509;
    float _551 = (((cbMtdParam._m0[16u].y * _530.y) - _510) * _517) + _510;
    float _552 = (((cbMtdParam._m0[16u].z * _530.z) - _511) * _517) + _511;
    vec4 _564 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _584 = (((cbMtdParam._m0[19u].x * _564.x) - _550) * _342) + _550;
    float _585 = (((cbMtdParam._m0[19u].y * _564.y) - _551) * _342) + _551;
    float _586 = (((cbMtdParam._m0[19u].z * _564.z) - _552) * _342) + _552;
    vec4 _598 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _623 = (_330.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _598.x) - _584) * _317) + _584);
    float _625 = (_330.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _598.y) - _585) * _317) + _585);
    float _627 = (_330.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _598.z) - _586) * _317) + _586);
    float _631 = cbMtdParam._m0[28u].x * TEXCOORD_8;
    float _640 = (_631 - (((texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _631))) * (cbMtdParam._m0[27u].w + 1.0);
    float _4256 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _641 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
    float _648 = ((cbMtdParam._m0[21u].x - _623) * _641) + _623;
    float _649 = ((cbMtdParam._m0[21u].y - _625) * _641) + _625;
    float _650 = ((cbMtdParam._m0[21u].z - _627) * _641) + _627;
    vec4 _664 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24, SS_ClampLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.z) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.w) + cbTextureTilingScale._m0[11u].w));
    float _672 = (_664.x + (-1.0)) + (cbMtdParam._m0[28u].y * 2.0);
    float _4267 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _678 = exp2(log2(cbMtdParam._m0[28u].w * (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0)))) * cbMtdParam._m0[28u].z);
    float _4278 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _679 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _205[5];
    float _206[5];
    _205[0u] = cbMtdParam._m0[29u].z;
    _206[0u] = cbMtdParam._m0[29u].w;
    _205[1u] = cbMtdParam._m0[31u].z;
    _206[1u] = cbMtdParam._m0[31u].w;
    _205[2u] = cbMtdParam._m0[31u].x;
    _206[2u] = cbMtdParam._m0[31u].y;
    _205[3u] = cbMtdParam._m0[30u].z;
    _206[3u] = cbMtdParam._m0[30u].w;
    _205[4u] = cbMtdParam._m0[30u].x;
    _206[4u] = cbMtdParam._m0[30u].y;
    float _719 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    uint _721 = uint(int(isnan(4.0) ? _719 : (isnan(_719) ? 4.0 : min(_719, 4.0))));
    float _728 = ((_206[_721] - cbMtdParam._m0[22u].z) * _353) + cbMtdParam._m0[22u].z;
    float _731 = ((cbMtdParam._m0[22u].w - _728) * _517) + _728;
    float _734 = ((cbMtdParam._m0[25u].x - _731) * _342) + _731;
    float _737 = ((cbMtdParam._m0[26u].x - _734) * _317) + _734;
    float _739 = _737 - (_737 * _631);
    vec4 _755 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w, _389));
    vec4 _772 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _774 = _772.x;
    float _775 = _772.y;
    float _780 = cbMtdParam._m0[22u].x + _772.z;
    float _783 = (((_755.z + _205[_721]) - _780) * _353) + _780;
    vec4 _795 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _806 = (((_795.z - _783) + cbMtdParam._m0[29u].x) * _517) + _783;
    float _811 = ((((_302 * 2.0) * _806) - _806) * cbMtdParam._m0[24u].w) + _806;
    vec4 _823 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _834 = (((cbMtdParam._m0[23u].z + _823.z) - _811) * _342) + _811;
    vec4 _847 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _858 = (((_847.z - _834) + cbMtdParam._m0[26u].y) * _317) + _834;
    vec4 _873 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _887 = ((cbMtdParam._m0[27u].y * _631) * ((_873.z * cbMtdParam._m0[27u].x) - _858)) + _858;
    float _899 = ((_755.x - _774) * _353) + _774;
    float _900 = ((_755.y - _775) * _353) + _775;
    float _905 = ((_795.x - _899) * _517) + _899;
    float _906 = ((_795.y - _900) * _517) + _900;
    float _911 = ((_823.x - _905) * _342) + _905;
    float _912 = ((_823.y - _906) * _342) + _906;
    float _921 = ((((_847.x - _911) * _317) + _911) * 2.0) + (-1.0);
    float _922 = ((((_847.y - _912) * _317) + _912) * 2.0) + (-1.0);
    float _923 = dot(vec2(_921, _922), vec2(_921, _922));
    float _4299 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _928 = sqrt(1.0 - (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))));
    float _938 = ((cbMtdParam._m0[25u].y * ((_298.x * 2.0) + (-1.0))) + _921) + ((((_873.x * 2.0) + (-1.0)) * _631) * cbMtdParam._m0[26u].w);
    float _939 = ((cbMtdParam._m0[25u].y * ((_298.y * 2.0) + (-1.0))) + _922) + (((cbMtdParam._m0[28u].x * TEXCOORD_9) * ((_873.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _942 = fma(_928, _247 * NORMAL.x, fma(_939, _254 * TANGENT.x, (_240 * _232) * _938));
    float _945 = fma(_928, _247 * NORMAL.y, fma(_939, _254 * TANGENT.y, (_240 * _233) * _938));
    float _948 = fma(_928, _247 * NORMAL.z, fma(_939, _254 * TANGENT.z, (_240 * _234) * _938));
    float _952 = inversesqrt(dot(vec3(_942, _945, _948), vec3(_942, _945, _948)));
    float _953 = _952 * _942;
    float _954 = _952 * _945;
    float _955 = _952 * _948;
    float _4310 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _956 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
    float _4321 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _957 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
    float _4332 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _4343 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _4354 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _4365 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _961 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
    float _977 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1017 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1027 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1017);
    float _1028 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1017);
    float _1029 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1017);
    float _1033 = inversesqrt(dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029)));
    float _1034 = _1027 * _1033;
    float _1035 = _1028 * _1033;
    float _1036 = _1029 * _1033;
    vec4 _1041 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1043 = _1041.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1213 = sqrt(((_1027 * _1027) + (_1028 * _1028)) + (_1029 * _1029));
        float _1219 = (cbMatDynParam._m0[5u].x * _1213) + cbMatDynParam._m0[5u].y;
        float _4376 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _1224 = (cbMatDynParam._m0[5u].z * _1213) + cbMatDynParam._m0[5u].w;
        float _4387 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) - _1220)) + _1220) < ((_1043 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1054 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1055 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1073 = fma(_955, cbSceneParam._m0[5u].z, fma(_954, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _953));
    float _1076 = fma(_955, cbSceneParam._m0[6u].z, fma(_954, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _953));
    float _1079 = fma(_955, cbSceneParam._m0[7u].z, fma(_954, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _953));
    uint _1092 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1093 = _1092 + 9u;
    uint _1094 = _1093 + uint(cbMatDynParam._m0[0u].w);
    float _1100 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0)))) * cbInstanceData._m0[_1094].x;
    float _1101 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0)))) * cbInstanceData._m0[_1094].y;
    float _1102 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0)))) * cbInstanceData._m0[_1094].z;
    float _4398 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _1103 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
    float _4409 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _1104 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
    float _4420 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _1105 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
    float _1106 = 1.0 - _961;
    float _1107 = _1103 * _1106;
    float _1108 = _1104 * _1106;
    float _1109 = _1105 * _1106;
    float _1114 = (_1103 + (-0.039999999105930328369140625)) * _961;
    float _1115 = (_1104 + (-0.039999999105930328369140625)) * _961;
    float _1116 = (_1105 + (-0.039999999105930328369140625)) * _961;
    float _1117 = _1114 + 0.039999999105930328369140625;
    float _1119 = _1115 + 0.039999999105930328369140625;
    float _1120 = _1116 + 0.039999999105930328369140625;
    vec4 _1129 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1054, cbSceneParam._m0[86u].y * _1055));
    float _1132 = _1129.x * TEXCOORD_5.w;
    float _1133 = dot(vec3(_953, _954, _955), vec3(_1034, _1035, _1036));
    float _1136 = _1133 * 2.0;
    float _1140 = (_1136 * _953) - _1034;
    float _1141 = (_1136 * _954) - _1035;
    float _1142 = (_1136 * _955) - _1036;
    float _1146 = abs(dot(vec3(_1034, _1035, _1036), vec3(_953, _954, _955)));
    float _4431 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _1148 = sqrt(_957);
    float _1159 = exp2((_1148 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1148 * 3.0));
    float _1165 = (1.0 - _1159) * ((_1148 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1166 = _1159 * _1148;
    float _1194 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1198 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1202 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1531;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1256 = fma(_1202, cbModelParam._m0[26u].z, fma(_1198, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1194));
        float _1260 = fma(_1202, cbModelParam._m0[27u].z, fma(_1198, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1194));
        float _1264 = fma(_1202, cbModelParam._m0[28u].z, fma(_1198, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1194));
        float _1289 = _1194 + _953;
        float _1290 = _1198 + _954;
        float _1291 = _1202 + _955;
        float _1301 = fma(_1291, cbModelParam._m0[26u].z, fma(_1290, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1289)) - _1256;
        float _1302 = fma(_1291, cbModelParam._m0[27u].z, fma(_1290, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1289)) - _1260;
        float _1303 = fma(_1291, cbModelParam._m0[28u].z, fma(_1290, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1289)) - _1264;
        float _1307 = inversesqrt(dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303)));
        float _1320 = ((_1307 * _1301) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1256 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1321 = ((_1307 * _1302) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1260 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1322 = ((_1307 * _1303) / cbModelParam._m0[34u].z) + ((((((_1264 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1332 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1339 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1346 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        float _1359 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1325.x + (-0.5));
        float _1361 = _1359 * (_1325.y + (-0.5));
        float _1362 = _1359 * (_1325.z + (-0.5));
        float _1369 = exp2((_1332.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1332.x + (-0.5));
        float _1371 = _1369 * (_1332.y + (-0.5));
        float _1372 = _1369 * (_1332.z + (-0.5));
        float _1379 = exp2((_1339.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1339.x + (-0.5));
        float _1381 = _1379 * (_1339.y + (-0.5));
        float _1382 = _1379 * (_1339.z + (-0.5));
        float _1389 = exp2((_1346.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1346.x + (-0.5));
        float _1391 = _1389 * (_1346.y + (-0.5));
        float _1392 = _1389 * (_1346.z + (-0.5));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1395 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1396 = _1360 * 0.5;
        float _1397 = _1370 * 0.5;
        float _1398 = _1380 * 0.5;
        float _1399 = dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398));
        float _1404 = (_1399 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1399);
        float _1413 = (dot(vec3(_953, _954, _955), vec3(_1404 * _1396, _1404 * _1397, _1404 * _1398)) + 1.0) * 0.5;
        float _4457 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1423 = sqrt(((_1397 * _1397) + (_1396 * _1396)) + (_1398 * _1398)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _4468 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _1425 = _1424 * 2.0;
        float _1429 = (1.0 - _1424) / (_1424 + 1.0);
        float _4479 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _1439 = ((((1.0 - _1430) * (_1425 + 2.0)) * exp2(log2(isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_1425 + 1.0))) + _1430) * _1393;
        float _1440 = _1361 * 0.5;
        float _1441 = _1371 * 0.5;
        float _1442 = _1381 * 0.5;
        float _1443 = dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442));
        float _1448 = (_1443 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1443);
        float _1456 = (dot(vec3(_953, _954, _955), vec3(_1448 * _1440, _1448 * _1441, _1448 * _1442)) + 1.0) * 0.5;
        float _4490 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1465 = sqrt(((_1441 * _1441) + (_1440 * _1440)) + (_1442 * _1442)) / (_1394 + 9.9999997473787516355514526367188e-06);
        float _4501 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _1467 = _1466 * 2.0;
        float _1471 = (1.0 - _1466) / (_1466 + 1.0);
        float _4512 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _1481 = ((((1.0 - _1472) * (_1467 + 2.0)) * exp2(log2(isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_1467 + 1.0))) + _1472) * _1394;
        float _1482 = _1362 * 0.5;
        float _1483 = _1372 * 0.5;
        float _1484 = _1382 * 0.5;
        float _1485 = dot(vec3(_1482, _1483, _1484), vec3(_1482, _1483, _1484));
        float _1490 = (_1485 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1485);
        float _1498 = (dot(vec3(_953, _954, _955), vec3(_1490 * _1482, _1490 * _1483, _1490 * _1484)) + 1.0) * 0.5;
        float _4523 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1507 = sqrt(((_1483 * _1483) + (_1482 * _1482)) + (_1484 * _1484)) / (_1395 + 9.9999997473787516355514526367188e-06);
        float _4534 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _1509 = _1508 * 2.0;
        float _1513 = (1.0 - _1508) / (_1508 + 1.0);
        float _4545 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
        float _1523 = ((((1.0 - _1514) * (_1509 + 2.0)) * exp2(log2(isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (_1509 + 1.0))) + _1514) * _1395;
        _1531 = _1362;
        _1533 = _1361;
        _1534 = _1360;
        _1535 = _1372;
        _1536 = _1371;
        _1537 = _1370;
        _1538 = _1382;
        _1539 = _1381;
        _1540 = _1380;
        _1541 = _1395;
        _1542 = _1394;
        _1543 = _1393;
        _1544 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)));
        _1545 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)));
        _1546 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)));
    }
    else
    {
        _1531 = _1532;
        _1533 = _1532;
        _1534 = _1532;
        _1535 = _1532;
        _1536 = _1532;
        _1537 = _1532;
        _1538 = _1532;
        _1539 = _1532;
        _1540 = _1532;
        _1541 = _1532;
        _1542 = _1532;
        _1543 = _1532;
        _1544 = 0.0;
        _1545 = 0.0;
        _1546 = 0.0;
    }
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1572 = fma(_1202, cbModelParam._m0[30u].z, fma(_1198, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1194));
        float _1576 = fma(_1202, cbModelParam._m0[31u].z, fma(_1198, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1194));
        float _1580 = fma(_1202, cbModelParam._m0[32u].z, fma(_1198, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1194));
        float _1603 = _1194 + _953;
        float _1604 = _1198 + _954;
        float _1605 = _1202 + _955;
        float _1615 = fma(_1605, cbModelParam._m0[30u].z, fma(_1604, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1603)) - _1572;
        float _1616 = fma(_1605, cbModelParam._m0[31u].z, fma(_1604, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1603)) - _1576;
        float _1617 = fma(_1605, cbModelParam._m0[32u].z, fma(_1604, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1603)) - _1580;
        float _1621 = inversesqrt(dot(vec3(_1615, _1616, _1617), vec3(_1615, _1616, _1617)));
        float _1634 = ((_1621 * _1615) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1572 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1635 = ((_1621 * _1616) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1576 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1636 = ((_1621 * _1617) / cbModelParam._m0[35u].z) + ((((((_1580 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1638 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1634, _1635, _1636), 0.0);
        vec4 _1645 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1634, _1635, _1636), 0.0);
        vec4 _1652 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1634, _1635, _1636), 0.0);
        vec4 _1659 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1634, _1635, _1636), 0.0);
        float _1671 = exp2((_1638.w + (-0.5)) * 20.0) * 2.0;
        float _1672 = _1671 * (_1638.x + (-0.5));
        float _1673 = _1671 * (_1638.y + (-0.5));
        float _1674 = _1671 * (_1638.z + (-0.5));
        float _1681 = exp2((_1645.w + (-0.5)) * 20.0) * 2.0;
        float _1682 = _1681 * (_1645.x + (-0.5));
        float _1683 = _1681 * (_1645.y + (-0.5));
        float _1684 = _1681 * (_1645.z + (-0.5));
        float _1691 = exp2((_1652.w + (-0.5)) * 20.0) * 2.0;
        float _1692 = _1691 * (_1652.x + (-0.5));
        float _1693 = _1691 * (_1652.y + (-0.5));
        float _1694 = _1691 * (_1652.z + (-0.5));
        float _1701 = exp2((_1659.w + (-0.5)) * 20.0) * 2.0;
        float _1702 = _1701 * (_1659.x + (-0.5));
        float _1703 = _1701 * (_1659.y + (-0.5));
        float _1704 = _1701 * (_1659.z + (-0.5));
        float _1705 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1706 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1707 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1708 = _1672 * 0.5;
        float _1709 = _1682 * 0.5;
        float _1710 = _1692 * 0.5;
        float _1711 = dot(vec3(_1708, _1709, _1710), vec3(_1708, _1709, _1710));
        float _1716 = (_1711 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1711);
        float _1724 = (dot(vec3(_953, _954, _955), vec3(_1716 * _1708, _1716 * _1709, _1716 * _1710)) + 1.0) * 0.5;
        float _4586 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1733 = sqrt(((_1709 * _1709) + (_1708 * _1708)) + (_1710 * _1710)) / (_1705 + 9.9999997473787516355514526367188e-06);
        float _4597 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
        float _1735 = _1734 * 2.0;
        float _1739 = (1.0 - _1734) / (_1734 + 1.0);
        float _4608 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1740 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
        float _1749 = ((((1.0 - _1740) * (_1735 + 2.0)) * exp2(log2(isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0))) * (_1735 + 1.0))) + _1740) * _1705;
        float _1750 = _1673 * 0.5;
        float _1751 = _1683 * 0.5;
        float _1752 = _1693 * 0.5;
        float _1753 = dot(vec3(_1750, _1751, _1752), vec3(_1750, _1751, _1752));
        float _1758 = (_1753 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1753);
        float _1766 = (dot(vec3(_953, _954, _955), vec3(_1758 * _1750, _1758 * _1751, _1758 * _1752)) + 1.0) * 0.5;
        float _4619 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1775 = sqrt(((_1751 * _1751) + (_1750 * _1750)) + (_1752 * _1752)) / (_1706 + 9.9999997473787516355514526367188e-06);
        float _4630 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
        float _1777 = _1776 * 2.0;
        float _1781 = (1.0 - _1776) / (_1776 + 1.0);
        float _4641 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1782 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
        float _1791 = ((((1.0 - _1782) * (_1777 + 2.0)) * exp2(log2(isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_1777 + 1.0))) + _1782) * _1706;
        float _1792 = _1674 * 0.5;
        float _1793 = _1684 * 0.5;
        float _1794 = _1694 * 0.5;
        float _1795 = dot(vec3(_1792, _1793, _1794), vec3(_1792, _1793, _1794));
        float _1800 = (_1795 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1795);
        float _1808 = (dot(vec3(_953, _954, _955), vec3(_1800 * _1792, _1800 * _1793, _1800 * _1794)) + 1.0) * 0.5;
        float _4652 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1817 = sqrt(((_1793 * _1793) + (_1792 * _1792)) + (_1794 * _1794)) / (_1707 + 9.9999997473787516355514526367188e-06);
        float _4663 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1818 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
        float _1819 = _1818 * 2.0;
        float _1823 = (1.0 - _1818) / (_1818 + 1.0);
        float _4674 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1824 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
        float _1833 = ((((1.0 - _1824) * (_1819 + 2.0)) * exp2(log2(isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * (_1819 + 1.0))) + _1824) * _1707;
        _1841 = _1674;
        _1842 = _1673;
        _1843 = _1672;
        _1844 = _1684;
        _1845 = _1683;
        _1846 = _1682;
        _1847 = _1694;
        _1848 = _1693;
        _1849 = _1692;
        _1850 = _1707;
        _1851 = _1706;
        _1852 = _1705;
        _1853 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)));
        _1854 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)));
        _1855 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)));
    }
    else
    {
        _1841 = _1532;
        _1842 = _1532;
        _1843 = _1532;
        _1844 = _1532;
        _1845 = _1532;
        _1846 = _1532;
        _1847 = _1532;
        _1848 = _1532;
        _1849 = _1532;
        _1850 = _1532;
        _1851 = _1532;
        _1852 = _1532;
        _1853 = 0.0;
        _1854 = 0.0;
        _1855 = 0.0;
    }
    float _1865 = (cbModelParam._m0[1u].x * (_1853 - _1544)) + _1544;
    float _1866 = (cbModelParam._m0[1u].x * (_1854 - _1545)) + _1545;
    float _1867 = (cbModelParam._m0[1u].x * (_1855 - _1546)) + _1546;
    float _1888 = fma(_1867, cbSceneParam._m0[89u].z, fma(_1866, cbSceneParam._m0[89u].y, _1865 * cbSceneParam._m0[89u].x));
    float _1891 = fma(_1867, cbSceneParam._m0[90u].z, fma(_1866, cbSceneParam._m0[90u].y, _1865 * cbSceneParam._m0[90u].x));
    float _1894 = fma(_1867, cbSceneParam._m0[91u].z, fma(_1866, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1865));
    float _1909 = _1140 * 0.5;
    float _1910 = _1141 * 0.5;
    float _1911 = _1142 * 0.5;
    float _1912 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1843, _1846, _1849, _1852));
    float _1915 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1842, _1845, _1848, _1851));
    float _1918 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1841, _1844, _1847, _1850));
    float _1952;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1925 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1531, _1535, _1538, _1541));
        float _1929 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1533, _1536, _1539, _1542));
        float _1933 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1534, _1537, _1540, _1543));
        float _1940 = dot(vec4(cbModelParam._m0[39u]), vec4(_1909, _1910, _1911, 1.0));
        _1952 = dot(vec3(isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0)), isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0)), isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1940) ? 0.0 : (isnan(0.0) ? _1940 : max(0.0, _1940))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1952 = 1.0;
    }
    float _1963;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1954 = dot(vec4(cbModelParam._m0[40u]), vec4(_1909, _1910, _1911, 1.0));
        _1963 = dot(vec3(isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0)), isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0)), isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1954) ? 0.0 : (isnan(0.0) ? _1954 : max(0.0, _1954))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1963 = 1.0;
    }
    float _1967 = (_1963 * cbModelParam._m0[1u].x) + (_1952 * (1.0 - cbModelParam._m0[1u].x));
    float _1977 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _957);
    float _1978 = isnan(_1977) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1977 : min(cbModelParam._m0[25u].z, _1977));
    float _2058;
    float _2060;
    float _2062;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2025 = fma(_1202, cbModelParam._m0[13u].z, fma(_1198, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1194)) + cbModelParam._m0[13u].w;
        float _2029 = fma(_1202, cbModelParam._m0[14u].z, fma(_1198, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1194)) + cbModelParam._m0[14u].w;
        float _2033 = fma(_1202, cbModelParam._m0[15u].z, fma(_1198, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1194)) + cbModelParam._m0[15u].w;
        float _2036 = fma(_1142, cbModelParam._m0[13u].z, fma(_1141, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1140));
        float _2039 = fma(_1142, cbModelParam._m0[14u].z, fma(_1141, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1140));
        float _2042 = fma(_1142, cbModelParam._m0[15u].z, fma(_1141, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1140));
        float _2070;
        if (_2036 > 0.0)
        {
            _2070 = abs((1.0 - _2025) / _2036);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2036 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2025 + 1.0) / _2036);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2070 = frontier_phi_17_15_ladder;
        }
        float _2241;
        if (_2039 > 0.0)
        {
            _2241 = abs((1.0 - _2029) / _2039);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2039 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2029 + 1.0) / _2039);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2241 = frontier_phi_26_22_ladder;
        }
        float _2536;
        if (_2042 > 0.0)
        {
            _2536 = abs((1.0 - _2033) / _2042);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2042 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2033 + 1.0) / _2042);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2536 = frontier_phi_38_33_ladder;
        }
        float _2538 = isnan(_2241) ? _2070 : (isnan(_2070) ? _2241 : min(_2070, _2241));
        float _2539 = isnan(_2536) ? _2538 : (isnan(_2538) ? _2536 : min(_2538, _2536));
        float _2543 = (_2539 * _2036) + _2025;
        float _2544 = (_2539 * _2039) + _2029;
        float _2545 = (_2539 * _2042) + _2033;
        float _2546 = _2539 * 9.9999997473787516355514526367188e-05;
        float _2548 = (-1.0) - _2546;
        float _2550 = _2546 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2545 > _2550) || ((_2545 < _2548) || ((_2544 > _2550) || ((_2544 < _2548) || ((_2543 < _2548) || (_2543 > _2550))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2690 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2545, cbModelParam._m0[9u].z, fma(_2544, cbModelParam._m0[9u].y, _2543 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2545, cbModelParam._m0[10u].z, fma(_2544, cbModelParam._m0[10u].y, _2543 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2545, cbModelParam._m0[11u].z, fma(_2544, cbModelParam._m0[11u].y, _2543 * cbModelParam._m0[11u].x))), _1978);
            frontier_phi_16_38_ladder = _2690.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2690.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2690.x * cbModelParam._m0[1u].y;
        }
        _2058 = frontier_phi_16_38_ladder_2;
        _2060 = frontier_phi_16_38_ladder_1;
        _2062 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2046 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1140, _1141, _1142), _1978);
        _2058 = _2046.x * cbModelParam._m0[1u].y;
        _2060 = _2046.y * cbModelParam._m0[1u].y;
        _2062 = _2046.z * cbModelParam._m0[1u].y;
    }
    float _2066 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _957);
    float _2067 = isnan(_2066) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2066 : min(cbModelParam._m0[25u].w, _2066));
    float _2156;
    float _2158;
    float _2160;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2120 = fma(_1202, cbModelParam._m0[21u].z, fma(_1198, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1194)) + cbModelParam._m0[21u].w;
        float _2124 = fma(_1202, cbModelParam._m0[22u].z, fma(_1198, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1194)) + cbModelParam._m0[22u].w;
        float _2128 = fma(_1202, cbModelParam._m0[23u].z, fma(_1198, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1194)) + cbModelParam._m0[23u].w;
        float _2131 = fma(_1142, cbModelParam._m0[21u].z, fma(_1141, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1140));
        float _2134 = fma(_1142, cbModelParam._m0[22u].z, fma(_1141, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1140));
        float _2137 = fma(_1142, cbModelParam._m0[23u].z, fma(_1141, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1140));
        float _2246;
        if (_2131 > 0.0)
        {
            _2246 = abs((1.0 - _2120) / _2131);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2131 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2120 + 1.0) / _2131);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2246 = frontier_phi_28_24_ladder;
        }
        float _2563;
        if (_2134 > 0.0)
        {
            _2563 = abs((1.0 - _2124) / _2134);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2134 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2124 + 1.0) / _2134);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2563 = frontier_phi_40_35_ladder;
        }
        float _2901;
        if (_2137 > 0.0)
        {
            _2901 = abs((1.0 - _2128) / _2137);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2137 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2128 + 1.0) / _2137);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2901 = frontier_phi_50_47_ladder;
        }
        float _2903 = isnan(_2563) ? _2246 : (isnan(_2246) ? _2563 : min(_2246, _2563));
        float _2904 = isnan(_2901) ? _2903 : (isnan(_2903) ? _2901 : min(_2903, _2901));
        float _2908 = (_2904 * _2131) + _2120;
        float _2909 = (_2904 * _2134) + _2124;
        float _2910 = (_2904 * _2137) + _2128;
        float _2911 = _2904 * 9.9999997473787516355514526367188e-05;
        float _2912 = (-1.0) - _2911;
        float _2914 = _2911 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2910 > _2914) || ((_2910 < _2912) || ((_2909 > _2914) || ((_2909 < _2912) || ((_2908 < _2912) || (_2908 > _2914))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3032 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2910, cbModelParam._m0[17u].z, fma(_2909, cbModelParam._m0[17u].y, _2908 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2910, cbModelParam._m0[18u].z, fma(_2909, cbModelParam._m0[18u].y, _2908 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2910, cbModelParam._m0[19u].z, fma(_2909, cbModelParam._m0[19u].y, _2908 * cbModelParam._m0[19u].x))), _2067);
            frontier_phi_25_50_ladder = _3032.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3032.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3032.x * cbModelParam._m0[1u].z;
        }
        _2156 = frontier_phi_25_50_ladder_2;
        _2158 = frontier_phi_25_50_ladder_1;
        _2160 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2140 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1140, _1141, _1142), _2067);
        _2156 = _2140.x * cbModelParam._m0[1u].z;
        _2158 = _2140.y * cbModelParam._m0[1u].z;
        _2160 = _2140.z * cbModelParam._m0[1u].z;
    }
    float _2173 = (((_1165 * _1117) + _1166) * _1132) * ((cbModelParam._m0[1u].w * (_2156 - _2058)) + _2058);
    float _2175 = (((_1165 * _1119) + _1166) * _1132) * ((cbModelParam._m0[1u].w * (_2158 - _2060)) + _2060);
    float _2177 = (((_1165 * _1120) + _1166) * _1132) * ((cbModelParam._m0[1u].w * (_2160 - _2062)) + _2062);
    float _2180 = fma(_2177, cbSceneParam._m0[89u].z, fma(_2175, cbSceneParam._m0[89u].y, _2173 * cbSceneParam._m0[89u].x));
    float _2183 = fma(_2177, cbSceneParam._m0[90u].z, fma(_2175, cbSceneParam._m0[90u].y, _2173 * cbSceneParam._m0[90u].x));
    float _2186 = fma(_2177, cbSceneParam._m0[91u].z, fma(_2175, cbSceneParam._m0[91u].y, _2173 * cbSceneParam._m0[91u].x));
    float _2220 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2224 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2228 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2232 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2233 = _2220 / _2232;
    float _2234 = _2224 / _2232;
    float _2235 = _2228 / _2232;
    float _2382;
    float _2383;
    float _2384;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2262 = ((uint(_2235 > cbSceneParam._m0[59u].y) + uint(_2235 > cbSceneParam._m0[59u].x)) + uint(_2235 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2263 = _2262 + 43u;
        uint _2271 = _2262 + 44u;
        uint _2279 = _2262 + 45u;
        uint _2287 = _2262 + 46u;
        float _2298 = fma(_2232, cbSceneParam._m0[_2263].w, fma(_2228, cbSceneParam._m0[_2263].z, fma(_2224, cbSceneParam._m0[_2263].y, _2220 * cbSceneParam._m0[_2263].x)));
        float _2302 = fma(_2232, cbSceneParam._m0[_2271].w, fma(_2228, cbSceneParam._m0[_2271].z, fma(_2224, cbSceneParam._m0[_2271].y, _2220 * cbSceneParam._m0[_2271].x)));
        float _2310 = fma(_2232, cbSceneParam._m0[_2287].w, fma(_2228, cbSceneParam._m0[_2287].z, fma(_2224, cbSceneParam._m0[_2287].y, _2220 * cbSceneParam._m0[_2287].x)));
        float _2315 = cbSceneParam._m0[33u].z * _2310;
        float _2317 = cbSceneParam._m0[33u].w * _2310;
        float _2320 = fma(_2232, cbSceneParam._m0[_2279].w, fma(_2228, cbSceneParam._m0[_2279].z, fma(_2224, cbSceneParam._m0[_2279].y, _2220 * cbSceneParam._m0[_2279].x))) / _2310;
        float _2368 = (cbSceneParam._m0[33u].x - sqrt(((_2234 * _2234) + (_2233 * _2233)) + (_2235 * _2235))) * cbSceneParam._m0[33u].y;
        float _4800 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2375 = (isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2315 + _2298) / _2310, (_2317 + _2302) / _2310), _2320), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2317 + _2298) / _2310, (_2302 - _2315) / _2310), _2320), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2298 - _2315) / _2310, (_2302 - _2317) / _2310), _2320), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2298 - _2317) / _2310, (_2315 + _2302) / _2310), _2320), 0.0)).x), vec4(0.25)));
        _2382 = 1.0 - (_2375 * cbSceneParam._m0[34u].x);
        _2383 = 1.0 - (_2375 * cbSceneParam._m0[34u].y);
        _2384 = 1.0 - (_2375 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2382 = 1.0;
        _2383 = 1.0;
        _2384 = 1.0;
    }
    float _2448;
    float _2450;
    float _2452;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2436 = fma(_2232, cbSceneParam._m0[63u].w, fma(_2228, cbSceneParam._m0[63u].z, fma(_2224, cbSceneParam._m0[63u].y, _2220 * cbSceneParam._m0[63u].x)));
        float _2437 = fma(_2232, cbSceneParam._m0[60u].w, fma(_2228, cbSceneParam._m0[60u].z, fma(_2224, cbSceneParam._m0[60u].y, _2220 * cbSceneParam._m0[60u].x))) / _2436;
        float _2438 = fma(_2232, cbSceneParam._m0[61u].w, fma(_2228, cbSceneParam._m0[61u].z, fma(_2224, cbSceneParam._m0[61u].y, _2220 * cbSceneParam._m0[61u].x))) / _2436;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2437 >= cbSceneParam._m0[64u].x) && (_2438 >= cbSceneParam._m0[64u].y)) && (_2437 <= cbSceneParam._m0[64u].z)) && (_2438 <= cbSceneParam._m0[64u].w))
        {
            float _2576 = fma(_2232, cbSceneParam._m0[62u].w, fma(_2228, cbSceneParam._m0[62u].z, fma(_2224, cbSceneParam._m0[62u].y, _2220 * cbSceneParam._m0[62u].x))) / _2436;
            float _2580 = isnan(cbSceneParam._m0[41u].w) ? _2576 : (isnan(_2576) ? cbSceneParam._m0[41u].w : max(_2576, cbSceneParam._m0[41u].w));
            float _2623 = (cbSceneParam._m0[33u].x - sqrt(((_2234 * _2234) + (_2233 * _2233)) + (_2235 * _2235))) * cbSceneParam._m0[33u].y;
            float _4816 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
            float _2630 = (isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2437, cbSceneParam._m0[33u].w + _2438), _2580), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2437, _2438 - cbSceneParam._m0[33u].z), _2580), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2437 - cbSceneParam._m0[33u].z, _2438 - cbSceneParam._m0[33u].w), _2580), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2437 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2438), _2580), 0.0)).x), vec4(0.25)));
            float _2634 = 1.0 - (_2630 * cbSceneParam._m0[34u].x);
            float _2635 = 1.0 - (_2630 * cbSceneParam._m0[34u].y);
            float _2636 = 1.0 - (_2630 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2636) ? _2384 : (isnan(_2384) ? _2636 : min(_2384, _2636));
            frontier_phi_37_36_ladder_1 = isnan(_2635) ? _2383 : (isnan(_2383) ? _2635 : min(_2383, _2635));
            frontier_phi_37_36_ladder_2 = isnan(_2634) ? _2382 : (isnan(_2382) ? _2634 : min(_2382, _2634));
        }
        else
        {
            frontier_phi_37_36_ladder = _2384;
            frontier_phi_37_36_ladder_1 = _2383;
            frontier_phi_37_36_ladder_2 = _2382;
        }
        _2448 = frontier_phi_37_36_ladder_2;
        _2450 = frontier_phi_37_36_ladder_1;
        _2452 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2448 = _2382;
        _2450 = _2383;
        _2452 = _2384;
    }
    uvec4 _2457 = floatBitsToUint(cbInstanceData._m0[_1092 + 5u]);
    uint _2459 = _2457.x * 14u;
    uint _2460 = _2459 + 13u;
    float _2467 = _1132 + (-1.0);
    float _2472 = (cbLight._m0[_2460].x * _2467) + 1.0;
    float _2473 = (cbLight._m0[_2460].y * _2467) + 1.0;
    float _2474 = (cbLight._m0[_2460].z * _2467) + 1.0;
    float _2475 = (cbLight._m0[_2460].w * _2467) + 1.0;
    uint _2476 = _2459 + 5u;
    float _2482 = isnan(1.0) ? _2473 : (isnan(_2473) ? 1.0 : min(_2473, 1.0));
    uint _2486 = _2459 + 4u;
    float _2495 = isnan(1.0) ? _2472 : (isnan(_2472) ? 1.0 : min(_2472, 1.0));
    uint _2499 = _2459 | 1u;
    float _2510 = dot(vec3(cbLight._m0[_2459].xyz), vec3(_953, _954, _955));
    float _2513 = dot(vec3(cbLight._m0[_2499].xyz), vec3(_953, _954, _955));
    float _4852 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
    float _4863 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
    float _2518 = (isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0))) * 0.3183098733425140380859375;
    float _2520 = (isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0))) * 0.3183098733425140380859375;
    float _2527 = ((cbLight._m0[_2476].x * _2482) * _2520) + (((cbLight._m0[_2486].x * _2448) * _2495) * _2518);
    float _2528 = ((_2482 * cbLight._m0[_2476].y) * _2520) + (((cbLight._m0[_2486].y * _2450) * _2495) * _2518);
    float _2529 = ((_2482 * cbLight._m0[_2476].z) * _2520) + (((cbLight._m0[_2486].z * _2452) * _2495) * _2518);
    uvec4 _2533 = floatBitsToUint(cbLight._m0[_2459 + 12u]);
    bool _2535 = _2533.x == 0u;
    float _2637;
    float _2639;
    float _2641;
    if (_2535)
    {
        _2637 = _2527;
        _2639 = _2528;
        _2641 = _2529;
    }
    else
    {
        uint _2645 = _2459 + 6u;
        float _2661 = (dot(vec3(cbLight._m0[_2459 + 2u].xyz), vec3(_953, _954, _955)) * 0.5) + 0.5;
        float _2662 = _2661 * _2661;
        float _4874 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        float _2663 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
        float _2664 = isnan(1.0) ? _2474 : (isnan(_2474) ? 1.0 : min(_2474, 1.0));
        _2637 = (((cbLight._m0[_2645].x * 0.3183098733425140380859375) * _2663) * _2664) + _2527;
        _2639 = (((cbLight._m0[_2645].y * 0.3183098733425140380859375) * _2663) * _2664) + _2528;
        _2641 = (((cbLight._m0[_2645].z * 0.3183098733425140380859375) * _2663) * _2664) + _2529;
    }
    bool _2644 = _2533.y == 0u;
    float _2699;
    float _2701;
    float _2703;
    if (_2644)
    {
        _2699 = _2637;
        _2701 = _2639;
        _2703 = _2641;
    }
    else
    {
        uint _2872 = _2459 + 7u;
        float _2888 = (dot(vec3(cbLight._m0[_2459 + 3u].xyz), vec3(_953, _954, _955)) * 0.5) + 0.5;
        float _2889 = _2888 * _2888;
        float _4890 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
        float _2890 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
        float _2891 = isnan(1.0) ? _2475 : (isnan(_2475) ? 1.0 : min(_2475, 1.0));
        _2699 = (((cbLight._m0[_2872].x * 0.3183098733425140380859375) * _2890) * _2891) + _2637;
        _2701 = (((cbLight._m0[_2872].y * 0.3183098733425140380859375) * _2890) * _2891) + _2639;
        _2703 = (((cbLight._m0[_2872].z * 0.3183098733425140380859375) * _2890) * _2891) + _2641;
    }
    uint _2706 = _2459 + 8u;
    float _2719 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2459].w)) * _957) * 0.949999988079071044921875);
    float _2720 = _2719 * _2719;
    float _2721 = cbLight._m0[_2459].x + _1034;
    float _2722 = cbLight._m0[_2459].y + _1035;
    float _2723 = cbLight._m0[_2459].z + _1036;
    float _2727 = inversesqrt(dot(vec3(_2721, _2722, _2723), vec3(_2721, _2722, _2723)));
    float _2728 = _2727 * _2721;
    float _2729 = _2727 * _2722;
    float _2730 = _2727 * _2723;
    float _2731 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2459].xyz));
    float _4906 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
    float _2734 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
    float _4917 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
    float _2735 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
    float _2736 = dot(vec3(_953, _954, _955), vec3(_2728, _2729, _2730));
    float _4928 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
    float _2739 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
    float _2740 = dot(vec3(cbLight._m0[_2459].xyz), vec3(_2728, _2729, _2730));
    float _4939 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
    float _2744 = _2720 * _2720;
    float _2748 = ((_2739 * _2739) * (_2744 + (-1.0))) + 1.0;
    float _2756 = exp2(log2(1.0 - (isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0)))) * 5.0);
    float _2757 = 0.959999978542327880859375 - _1114;
    float _2759 = 0.959999978542327880859375 - _1115;
    float _2760 = 0.959999978542327880859375 - _1116;
    float _2767 = 1.0 - _2720;
    float _2778 = (0.5 / (((_2735 * ((_2734 * _2767) + _2720)) + 9.9999999392252902907785028219223e-09) + (((_2735 * _2767) + _2720) * _2734))) * _2734;
    float _4950 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
    float _2780 = (isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0))) * (_2744 / ((_2748 * _2748) * 3.141590118408203125));
    uint _2794 = _2459 + 9u;
    float _2805 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2499].w)) * _957) * 0.949999988079071044921875);
    float _2806 = _2805 * _2805;
    float _2807 = cbLight._m0[_2499].x + _1034;
    float _2808 = cbLight._m0[_2499].y + _1035;
    float _2809 = cbLight._m0[_2499].z + _1036;
    float _2813 = inversesqrt(dot(vec3(_2807, _2808, _2809), vec3(_2807, _2808, _2809)));
    float _2814 = _2813 * _2807;
    float _2815 = _2813 * _2808;
    float _2816 = _2813 * _2809;
    float _2817 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2499].xyz));
    float _4961 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
    float _2820 = isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0));
    float _2821 = dot(vec3(_953, _954, _955), vec3(_2814, _2815, _2816));
    float _4972 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
    float _2824 = isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0));
    float _2825 = dot(vec3(cbLight._m0[_2499].xyz), vec3(_2814, _2815, _2816));
    float _4983 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
    float _2829 = _2806 * _2806;
    float _2833 = ((_2824 * _2824) * (_2829 + (-1.0))) + 1.0;
    float _2840 = exp2(log2(1.0 - (isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0)))) * 5.0);
    float _2847 = 1.0 - _2806;
    float _2857 = (0.5 / (((_2735 * ((_2820 * _2847) + _2806)) + 9.9999999392252902907785028219223e-09) + (((_2735 * _2847) + _2806) * _2820))) * _2820;
    float _4994 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
    float _2859 = (isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0))) * (_2829 / ((_2833 * _2833) * 3.141590118408203125));
    float _2869 = (((((_2840 * _2757) + _1117) * cbLight._m0[_2794].x) * _2859) * _2482) + ((((cbLight._m0[_2706].x * _2448) * ((_2756 * _2757) + _1117)) * _2780) * _2495);
    float _2870 = (((((_2840 * _2759) + _1119) * cbLight._m0[_2794].y) * _2859) * _2482) + ((((cbLight._m0[_2706].y * _2450) * ((_2756 * _2759) + _1119)) * _2780) * _2495);
    float _2871 = (((((_2840 * _2760) + _1120) * cbLight._m0[_2794].z) * _2859) * _2482) + ((((cbLight._m0[_2706].z * _2452) * ((_2756 * _2760) + _1120)) * _2780) * _2495);
    float _2927;
    float _2929;
    float _2931;
    if (_2535)
    {
        _2927 = _2869;
        _2929 = _2870;
        _2931 = _2871;
    }
    else
    {
        uint _2933 = _2459 + 2u;
        uint _2937 = _2459 + 10u;
        float _2951 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2933].w)) * _957) * 0.949999988079071044921875);
        float _2952 = _2951 * _2951;
        float _2953 = cbLight._m0[_2933].x + _1034;
        float _2954 = cbLight._m0[_2933].y + _1035;
        float _2955 = cbLight._m0[_2933].z + _1036;
        float _2959 = inversesqrt(dot(vec3(_2953, _2954, _2955), vec3(_2953, _2954, _2955)));
        float _2960 = _2959 * _2953;
        float _2961 = _2959 * _2954;
        float _2962 = _2959 * _2955;
        float _2963 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2933].xyz));
        float _5005 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
        float _2966 = isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0));
        float _2967 = dot(vec3(_953, _954, _955), vec3(_2960, _2961, _2962));
        float _5016 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
        float _2970 = isnan(1.0) ? _5016 : (isnan(_5016) ? 1.0 : min(_5016, 1.0));
        float _2971 = dot(vec3(cbLight._m0[_2933].xyz), vec3(_2960, _2961, _2962));
        float _5027 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
        float _2975 = _2952 * _2952;
        float _2979 = ((_2970 * _2970) * (_2975 + (-1.0))) + 1.0;
        float _2986 = exp2(log2(1.0 - (isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0)))) * 5.0);
        float _2993 = 1.0 - _2952;
        float _3003 = (0.5 / (((_2735 * ((_2966 * _2993) + _2952)) + 9.9999999392252902907785028219223e-09) + (((_2735 * _2993) + _2952) * _2966))) * _2966;
        float _5038 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
        float _3005 = (isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0))) * (_2975 / ((_2979 * _2979) * 3.141590118408203125));
        float _3006 = isnan(1.0) ? _2474 : (isnan(_2474) ? 1.0 : min(_2474, 1.0));
        _2927 = (((((_2986 * _2757) + _1117) * cbLight._m0[_2937].x) * _3005) * _3006) + _2869;
        _2929 = (((((_2986 * _2759) + _1119) * cbLight._m0[_2937].y) * _3005) * _3006) + _2870;
        _2931 = (((((_2986 * _2760) + _1120) * cbLight._m0[_2937].z) * _3005) * _3006) + _2871;
    }
    float _3037;
    float _3039;
    float _3041;
    if (_2644)
    {
        _3037 = _2927;
        _3039 = _2929;
        _3041 = _2931;
    }
    else
    {
        uint _3048 = _2459 + 3u;
        uint _3052 = _2459 + 11u;
        float _3066 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3048].w)) * _957) * 0.949999988079071044921875);
        float _3067 = _3066 * _3066;
        float _3068 = cbLight._m0[_3048].x + _1034;
        float _3069 = cbLight._m0[_3048].y + _1035;
        float _3070 = cbLight._m0[_3048].z + _1036;
        float _3074 = inversesqrt(dot(vec3(_3068, _3069, _3070), vec3(_3068, _3069, _3070)));
        float _3075 = _3074 * _3068;
        float _3076 = _3074 * _3069;
        float _3077 = _3074 * _3070;
        float _3078 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_3048].xyz));
        float _5054 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
        float _3081 = isnan(1.0) ? _5054 : (isnan(_5054) ? 1.0 : min(_5054, 1.0));
        float _3082 = dot(vec3(_953, _954, _955), vec3(_3075, _3076, _3077));
        float _5065 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
        float _3085 = isnan(1.0) ? _5065 : (isnan(_5065) ? 1.0 : min(_5065, 1.0));
        float _3086 = dot(vec3(cbLight._m0[_3048].xyz), vec3(_3075, _3076, _3077));
        float _5076 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
        float _3090 = _3067 * _3067;
        float _3094 = ((_3085 * _3085) * (_3090 + (-1.0))) + 1.0;
        float _3101 = exp2(log2(1.0 - (isnan(1.0) ? _5076 : (isnan(_5076) ? 1.0 : min(_5076, 1.0)))) * 5.0);
        float _3108 = 1.0 - _3067;
        float _3118 = (0.5 / (((_2735 * ((_3081 * _3108) + _3067)) + 9.9999999392252902907785028219223e-09) + (((_2735 * _3108) + _3067) * _3081))) * _3081;
        float _5087 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
        float _3120 = (isnan(1.0) ? _5087 : (isnan(_5087) ? 1.0 : min(_5087, 1.0))) * (_3090 / ((_3094 * _3094) * 3.141590118408203125));
        float _3121 = isnan(1.0) ? _2475 : (isnan(_2475) ? 1.0 : min(_2475, 1.0));
        _3037 = (((((_3101 * _2757) + _1117) * cbLight._m0[_3052].x) * _3120) * _3121) + _2927;
        _3039 = (((((_3101 * _2759) + _1119) * cbLight._m0[_3052].y) * _3120) * _3121) + _2929;
        _3041 = (((((_3101 * _2760) + _1120) * cbLight._m0[_3052].z) * _3120) * _3121) + _2931;
    }
    float _3187;
    float _3189;
    float _3191;
    float _3193;
    float _3195;
    float _3197;
    if (_2457.y == 0u)
    {
        uvec4 _3142 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3143 = _3142.x;
        uint _3154 = uint((float(_3142.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1055) / _3143))) + floor(float(uint(cbSceneParam._m0[85u].x * _1054) / _3143)));
        float _3164 = (log2(_2235 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3165 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
        uint _3168 = uint(isnan(14.0) ? _3165 : (isnan(_3165) ? 14.0 : min(_3165, 14.0)));
        uvec4 _3173 = texelFetch(g_lightClusterGridBuffer, int(((_3168 << 2u) + (_3154 << 6u)) >> 2u));
        uint _3174 = _3173.x;
        uint _3175 = _3142.z;
        float _3256;
        float _3258;
        float _3260;
        float _3262;
        float _3264;
        float _3266;
        if (((((1u << ((_3175 >> 4u) & 15u)) + 4294967295u) & _3174) == 0u) || ((_3175 & 240u) == 0u))
        {
            _3256 = 0.0;
            _3258 = 0.0;
            _3260 = 0.0;
            _3262 = 0.0;
            _3264 = 0.0;
            _3266 = 0.0;
        }
        else
        {
            float _3257;
            float _3259;
            float _3261;
            float _3263;
            float _3265;
            float _3267;
            float _3409 = 0.0;
            float _3410 = 0.0;
            float _3411 = 0.0;
            float _3412 = 0.0;
            float _3413 = 0.0;
            float _3414 = 0.0;
            uint _3415 = 0u;
            uint _3424;
            bool _3425;
            for (;;)
            {
                _3424 = texelFetch(g_lightClassification, int((((_3168 << 5u) + (_3154 << 9u)) + (_3415 << 2u)) >> 2u)).x;
                _3425 = _3424 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3425)
                {
                    frontier_phi_71_pred = _3414;
                    frontier_phi_71_pred_1 = _3413;
                    frontier_phi_71_pred_2 = _3412;
                    frontier_phi_71_pred_3 = _3411;
                    frontier_phi_71_pred_4 = _3410;
                    frontier_phi_71_pred_5 = _3409;
                }
                else
                {
                    float _3554;
                    float _3555;
                    float _3556;
                    float _3557;
                    float _3558;
                    float _3559;
                    uint _3560;
                    _3554 = _3409;
                    _3555 = _3410;
                    _3556 = _3411;
                    _3557 = _3412;
                    _3558 = _3413;
                    _3559 = _3414;
                    _3560 = _3424;
                    float _3481;
                    float _3482;
                    float _3483;
                    float _3484;
                    float _3485;
                    float _3486;
                    for (;;)
                    {
                        uint _3564 = uint(findLSB(_3560)) + (_3415 << 5u);
                        uint _3561 = (_3560 + 4294967295u) & _3560;
                        uint _3566 = _3564 * 48u;
                        vec4 _3580 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3566)).x, texelFetch(g_PointLightRenderingBuffer, int(_3566 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3566 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3566 + 3u)).x));
                        uint _3586 = (_3564 * 48u) + 4u;
                        vec4 _3599 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3586)).x, texelFetch(g_PointLightRenderingBuffer, int(_3586 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3586 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3586 + 3u)).x));
                        uint _3605 = (_3564 * 48u) + 8u;
                        vec3 _3616 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3605)).x, texelFetch(g_PointLightRenderingBuffer, int(_3605 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3605 + 2u)).x));
                        float _3620 = _3580.x - _2233;
                        float _3621 = _3580.y - _2234;
                        float _3622 = _3580.z - _2235;
                        float _3623 = dot(vec3(_3620, _3621, _3622), vec3(_3620, _3621, _3622));
                        float _3626 = inversesqrt(_3623);
                        float _3627 = _3626 * _3620;
                        float _3628 = _3626 * _3621;
                        float _3629 = _3626 * _3622;
                        float _3630 = dot(vec3(_1073, _1076, _1079), vec3(_3627, _3628, _3629));
                        float _3635 = 1.0 - (_3623 * _3580.w);
                        float _5113 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                        float _3636 = isnan(1.0) ? _5113 : (isnan(_5113) ? 1.0 : min(_5113, 1.0));
                        float _3637 = sqrt(_3623) * _3599.w;
                        float _3640 = 1.39999997615814208984375 / (_3637 + 1.39999997615814208984375);
                        float _3641 = _3640 * _3640;
                        float _3644 = ((1.0 - _3641) * _3630) + _3641;
                        float _3647 = _3637 * _3637;
                        float _3651 = ((isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0))) * _3636) / ((_3647 * 0.699999988079071044921875) + 1.0);
                        float _3655 = (-0.0) - _2233;
                        float _3656 = (-0.0) - _2234;
                        float _3657 = (-0.0) - _2235;
                        float _3661 = inversesqrt(dot(vec3(_3655, _3656, _3657), vec3(_3655, _3656, _3657)));
                        float _3662 = _3661 * _3655;
                        float _3663 = _3661 * _3656;
                        float _3664 = _3661 * _3657;
                        float _3671 = exp2(log2(1.0 / ((_3647 * 3.5) + 5.0)) * 0.25);
                        float _3672 = 1.0 - _1148;
                        float _3679 = sqrt(1.0 - ((1.0 - (_3672 * _3672)) * (1.0 - (_3671 * _3671))));
                        float _3680 = _3679 * _3679;
                        float _3681 = _3680 * _3680;
                        float _3682 = _3662 + _3627;
                        float _3683 = _3663 + _3628;
                        float _3684 = _3664 + _3629;
                        float _3688 = inversesqrt(dot(vec3(_3682, _3683, _3684), vec3(_3682, _3683, _3684)));
                        float _3692 = dot(vec3(_1073, _1076, _1079), vec3(_3662, _3663, _3664));
                        float _5129 = isnan(0.0) ? _3692 : (isnan(_3692) ? 0.0 : max(_3692, 0.0));
                        float _3695 = isnan(1.0) ? _5129 : (isnan(_5129) ? 1.0 : min(_5129, 1.0));
                        float _3696 = dot(vec3(_1073, _1076, _1079), vec3(_3688 * _3682, _3688 * _3683, _3688 * _3684));
                        float _5140 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                        float _3699 = isnan(1.0) ? _5140 : (isnan(_5140) ? 1.0 : min(_5140, 1.0));
                        float _3703 = ((_3699 * _3699) * (_3681 + (-1.0))) + 1.0;
                        float _3704 = _3640 * _3680;
                        float _3705 = _3704 * _3704;
                        float _3708 = ((1.0 - _3705) * _3630) + _3705;
                        float _5151 = isnan(0.0) ? _3708 : (isnan(_3708) ? 0.0 : max(_3708, 0.0));
                        float _3709 = isnan(1.0) ? _5151 : (isnan(_5151) ? 1.0 : min(_5151, 1.0));
                        float _3710 = 1.0 - _3680;
                        float _3720 = (0.5 / (((_3709 * ((_3695 * _3710) + _3680)) + 9.9999999392252902907785028219223e-09) + (((_3709 * _3710) + _3680) * _3695))) * _3709;
                        float _5162 = isnan(0.0) ? _3720 : (isnan(_3720) ? 0.0 : max(_3720, 0.0));
                        float _3731 = (((_3681 * 3.1415927410125732421875) * (isnan(1.0) ? _5162 : (isnan(_5162) ? 1.0 : min(_5162, 1.0)))) / ((_3703 * _3703) * ((_3647 * 2.1991131305694580078125) + 3.141590118408203125))) * _3636;
                        _3484 = (_3651 * _3599.x) + _3557;
                        _3485 = (_3651 * _3599.y) + _3558;
                        _3486 = (_3651 * _3599.z) + _3559;
                        _3481 = (_3731 * _3616.x) + _3554;
                        _3482 = (_3731 * _3616.y) + _3555;
                        _3483 = (_3731 * _3616.z) + _3556;
                        if (_3561 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3554 = _3481;
                            _3555 = _3482;
                            _3556 = _3483;
                            _3557 = _3484;
                            _3558 = _3485;
                            _3559 = _3486;
                            _3560 = _3561;
                        }
                    }
                    frontier_phi_71_pred = _3486;
                    frontier_phi_71_pred_1 = _3485;
                    frontier_phi_71_pred_2 = _3484;
                    frontier_phi_71_pred_3 = _3483;
                    frontier_phi_71_pred_4 = _3482;
                    frontier_phi_71_pred_5 = _3481;
                }
                _3267 = frontier_phi_71_pred;
                _3265 = frontier_phi_71_pred_1;
                _3263 = frontier_phi_71_pred_2;
                _3261 = frontier_phi_71_pred_3;
                _3259 = frontier_phi_71_pred_4;
                _3257 = frontier_phi_71_pred_5;
                uint _3416 = _3415 + 1u;
                if (_3416 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3409 = _3257;
                    _3410 = _3259;
                    _3411 = _3261;
                    _3412 = _3263;
                    _3413 = _3265;
                    _3414 = _3267;
                    _3415 = _3416;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3256 = _3257;
            _3258 = _3259;
            _3260 = _3261;
            _3262 = _3263;
            _3264 = _3265;
            _3266 = _3267;
        }
        uvec4 _3270 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3271 = _3270.z;
        uint _3273 = (_3271 >> 8u) & 15u;
        float _3377;
        float _3379;
        float _3381;
        float _3383;
        float _3385;
        float _3387;
        if (((4294967295u << _3273) & _3174) == 0u)
        {
            _3377 = _3256;
            _3379 = _3258;
            _3381 = _3260;
            _3383 = _3262;
            _3385 = _3264;
            _3387 = _3266;
        }
        else
        {
            float _3402 = inversesqrt(dot(vec3(_2233, _2234, _2235), vec3(_2233, _2234, _2235)));
            float _3403 = _3402 * _2233;
            float _3404 = _3402 * _2234;
            float _3405 = _3402 * _2235;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3273 < ((_3271 >> 12u) & 15u))
            {
                float _3378;
                float _3380;
                float _3382;
                float _3384;
                float _3386;
                float _3388;
                float _3537 = _3256;
                float _3538 = _3258;
                float _3539 = _3260;
                float _3540 = _3262;
                float _3541 = _3264;
                float _3542 = _3266;
                uint _3543 = _3273;
                uint _3552;
                bool _3553;
                for (;;)
                {
                    _3552 = texelFetch(g_lightClassification, int((((_3168 << 5u) + (_3154 << 9u)) + (_3543 << 2u)) >> 2u)).x;
                    _3553 = _3552 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3553)
                    {
                        frontier_phi_82_pred = _3542;
                        frontier_phi_82_pred_1 = _3541;
                        frontier_phi_82_pred_2 = _3540;
                        frontier_phi_82_pred_3 = _3539;
                        frontier_phi_82_pred_4 = _3538;
                        frontier_phi_82_pred_5 = _3537;
                    }
                    else
                    {
                        float _3745;
                        float _3746;
                        float _3747;
                        float _3748;
                        float _3749;
                        float _3750;
                        float _4038;
                        float _4039;
                        float _4040;
                        float _4041;
                        float _4042;
                        float _4043;
                        float _3758 = _3537;
                        float _3759 = _3538;
                        float _3760 = _3539;
                        float _3761 = _3540;
                        float _3762 = _3541;
                        float _3763 = _3542;
                        uint _3764 = _3552;
                        uint _3765;
                        vec4 _3790;
                        float _3791;
                        vec4 _3806;
                        vec3 _3818;
                        vec4 _3833;
                        vec4 _3848;
                        float _3894;
                        bool _3895;
                        for (;;)
                        {
                            uint _3775 = ((_3543 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3764));
                            _3765 = (_3764 + 4294967295u) & _3764;
                            uint _3777 = _3775 * 40u;
                            _3790 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3777)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 3u)).x));
                            _3791 = _3790.w;
                            uint _3793 = (_3775 * 40u) + 4u;
                            _3806 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3793)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3793 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3793 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3793 + 3u)).x));
                            uint _3808 = (_3775 * 40u) + 8u;
                            _3818 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3808)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3808 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3808 + 2u)).x));
                            uint _3820 = (_3775 * 40u) + 16u;
                            _3833 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3820)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3820 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3820 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3820 + 3u)).x));
                            uint _3835 = (_3775 * 40u) + 20u;
                            _3848 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3835)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3835 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3835 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3835 + 3u)).x));
                            uint _3850 = (_3775 * 40u) + 24u;
                            vec4 _3863 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3850)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3850 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3850 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3850 + 3u)).x));
                            uint _3869 = (_3775 * 40u) + 28u;
                            vec4 _3882 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3869)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3869 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3869 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3869 + 3u)).x));
                            _3894 = fma(_2235, _3882.z, fma(_2234, _3882.y, _3882.x * _2233)) + _3882.w;
                            _3895 = !((fma(_2235, _3863.z, fma(_2234, _3863.y, _3863.x * _2233)) + _3863.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3895)
                            {
                                float _3922 = _3790.x - _2233;
                                float _3923 = _3790.y - _2234;
                                float _3924 = _3790.z - _2235;
                                float _3925 = dot(vec3(_3922, _3923, _3924), vec3(_3922, _3923, _3924));
                                float _3928 = inversesqrt(_3925);
                                float _3929 = _3928 * _3922;
                                float _3930 = _3928 * _3923;
                                float _3931 = _3928 * _3924;
                                float _3935 = 1.0 - (_3925 / (_3791 * _3791));
                                float _5173 = isnan(0.0) ? _3935 : (isnan(_3935) ? 0.0 : max(_3935, 0.0));
                                float _3936 = isnan(1.0) ? _5173 : (isnan(_5173) ? 1.0 : min(_5173, 1.0));
                                float _3940 = sqrt(_3925) * _3806.w;
                                float _3942 = 1.39999997615814208984375 / (_3940 + 1.39999997615814208984375);
                                float _3943 = _3942 * _3942;
                                float _3946 = ((1.0 - _3943) * dot(vec3(_3929, _3930, _3931), vec3(_1073, _1076, _1079))) + _3943;
                                float _3949 = _3940 * _3940;
                                float _3953 = (fma(_2235, _3833.z, fma(_2234, _3833.y, _3833.x * _2233)) + _3833.w) / _3894;
                                float _3954 = (fma(_2235, _3848.z, fma(_2234, _3848.y, _3848.x * _2233)) + _3848.w) / _3894;
                                float _3958 = 1.0 - dot(vec2(_3953, _3954), vec2(_3953, _3954));
                                float _5189 = isnan(0.0) ? _3958 : (isnan(_3958) ? 0.0 : max(_3958, 0.0));
                                float _3959 = isnan(1.0) ? _5189 : (isnan(_5189) ? 1.0 : min(_5189, 1.0));
                                float _3960 = _3959 * (((isnan(0.0) ? _3946 : (isnan(_3946) ? 0.0 : max(_3946, 0.0))) * _3936) / ((_3949 * 0.699999988079071044921875) + 1.0));
                                float _3972 = exp2(log2(1.0 / ((_3949 * 3.5) + 5.0)) * 0.25);
                                float _3973 = 1.0 - _1148;
                                float _3980 = sqrt(1.0 - ((1.0 - (_3973 * _3973)) * (1.0 - (_3972 * _3972))));
                                float _3981 = _3980 * _3980;
                                float _3982 = _3981 * _3981;
                                float _3983 = _3929 - _3403;
                                float _3984 = _3930 - _3404;
                                float _3985 = _3931 - _3405;
                                float _3989 = inversesqrt(dot(vec3(_3983, _3984, _3985), vec3(_3983, _3984, _3985)));
                                float _3993 = dot(vec3(_1073, _1076, _1079), vec3((-0.0) - _3403, (-0.0) - _3404, (-0.0) - _3405));
                                float _5200 = isnan(0.0) ? _3993 : (isnan(_3993) ? 0.0 : max(_3993, 0.0));
                                float _3996 = isnan(1.0) ? _5200 : (isnan(_5200) ? 1.0 : min(_5200, 1.0));
                                float _3997 = dot(vec3(_1073, _1076, _1079), vec3(_3989 * _3983, _3989 * _3984, _3989 * _3985));
                                float _5211 = isnan(0.0) ? _3997 : (isnan(_3997) ? 0.0 : max(_3997, 0.0));
                                float _4000 = isnan(1.0) ? _5211 : (isnan(_5211) ? 1.0 : min(_5211, 1.0));
                                float _4004 = ((_4000 * _4000) * (_3982 + (-1.0))) + 1.0;
                                float _4005 = _3942 * _3981;
                                float _4006 = _4005 * _4005;
                                float _4012 = ((1.0 - _4006) * dot(vec3(_1073, _1076, _1079), vec3(_3929, _3930, _3931))) + _4006;
                                float _5222 = isnan(0.0) ? _4012 : (isnan(_4012) ? 0.0 : max(_4012, 0.0));
                                float _4013 = isnan(1.0) ? _5222 : (isnan(_5222) ? 1.0 : min(_5222, 1.0));
                                float _4014 = 1.0 - _3981;
                                float _4024 = (0.5 / (((_4013 * ((_3996 * _4014) + _3981)) + 9.9999999392252902907785028219223e-09) + (((_4013 * _4014) + _3981) * _3996))) * _4013;
                                float _5233 = isnan(0.0) ? _4024 : (isnan(_4024) ? 0.0 : max(_4024, 0.0));
                                float _4034 = (_3959 * _3936) * (((_3982 * 3.1415927410125732421875) * (isnan(1.0) ? _5233 : (isnan(_5233) ? 1.0 : min(_5233, 1.0)))) / ((_4004 * _4004) * ((_3949 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3960 * _3806.z;
                                frontier_phi_88_pred_1 = _3960 * _3806.y;
                                frontier_phi_88_pred_2 = _3960 * _3806.x;
                                frontier_phi_88_pred_3 = _4034 * _3818.z;
                                frontier_phi_88_pred_4 = _4034 * _3818.y;
                                frontier_phi_88_pred_5 = _4034 * _3818.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4043 = frontier_phi_88_pred;
                            _4042 = frontier_phi_88_pred_1;
                            _4041 = frontier_phi_88_pred_2;
                            _4040 = frontier_phi_88_pred_3;
                            _4039 = frontier_phi_88_pred_4;
                            _4038 = frontier_phi_88_pred_5;
                            _3748 = _4041 + _3761;
                            _3749 = _4042 + _3762;
                            _3750 = _4043 + _3763;
                            _3745 = _4038 + _3758;
                            _3746 = _4039 + _3759;
                            _3747 = _4040 + _3760;
                            if (_3765 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3758 = _3745;
                                _3759 = _3746;
                                _3760 = _3747;
                                _3761 = _3748;
                                _3762 = _3749;
                                _3763 = _3750;
                                _3764 = _3765;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3750;
                        frontier_phi_82_pred_1 = _3749;
                        frontier_phi_82_pred_2 = _3748;
                        frontier_phi_82_pred_3 = _3747;
                        frontier_phi_82_pred_4 = _3746;
                        frontier_phi_82_pred_5 = _3745;
                    }
                    _3388 = frontier_phi_82_pred;
                    _3386 = frontier_phi_82_pred_1;
                    _3384 = frontier_phi_82_pred_2;
                    _3382 = frontier_phi_82_pred_3;
                    _3380 = frontier_phi_82_pred_4;
                    _3378 = frontier_phi_82_pred_5;
                    uint _3544 = _3543 + 1u;
                    if (_3544 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3537 = _3378;
                        _3538 = _3380;
                        _3539 = _3382;
                        _3540 = _3384;
                        _3541 = _3386;
                        _3542 = _3388;
                        _3543 = _3544;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3384;
                frontier_phi_63_64_ladder_1 = _3388;
                frontier_phi_63_64_ladder_2 = _3386;
                frontier_phi_63_64_ladder_3 = _3382;
                frontier_phi_63_64_ladder_4 = _3380;
                frontier_phi_63_64_ladder_5 = _3378;
            }
            else
            {
                frontier_phi_63_64_ladder = _3262;
                frontier_phi_63_64_ladder_1 = _3266;
                frontier_phi_63_64_ladder_2 = _3264;
                frontier_phi_63_64_ladder_3 = _3260;
                frontier_phi_63_64_ladder_4 = _3258;
                frontier_phi_63_64_ladder_5 = _3256;
            }
            _3377 = frontier_phi_63_64_ladder_5;
            _3379 = frontier_phi_63_64_ladder_4;
            _3381 = frontier_phi_63_64_ladder_3;
            _3383 = frontier_phi_63_64_ladder;
            _3385 = frontier_phi_63_64_ladder_2;
            _3387 = frontier_phi_63_64_ladder_1;
        }
        float _3392 = isnan(1.0) ? _1132 : (isnan(_1132) ? 1.0 : min(_1132, 1.0));
        _3187 = (_3392 * _3383) + _2699;
        _3189 = (_3392 * _3385) + _2701;
        _3191 = (_3392 * _3387) + _2703;
        _3193 = ((_3377 * _1117) * _3392) + _3037;
        _3195 = ((_3379 * _1119) * _3392) + _3039;
        _3197 = ((_3381 * _1120) * _3392) + _3041;
    }
    else
    {
        _3187 = _2699;
        _3189 = _2701;
        _3191 = _2703;
        _3193 = _3037;
        _3195 = _3039;
        _3197 = _3041;
    }
    float _5249 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _5260 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _5271 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _5282 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _3215 = ((isnan(1.0) ? _5249 : (isnan(_5249) ? 1.0 : min(_5249, 1.0))) * (_3187 + ((isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))) * _1132))) + ((_3193 + ((isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0))) * _1967)) * cbPerFrame._m0[3u].x);
    float _3216 = ((isnan(1.0) ? _5260 : (isnan(_5260) ? 1.0 : min(_5260, 1.0))) * (_3189 + ((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1132))) + ((_3195 + ((isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0))) * _1967)) * cbPerFrame._m0[3u].x);
    float _3217 = ((isnan(1.0) ? _5271 : (isnan(_5271) ? 1.0 : min(_5271, 1.0))) * (_3191 + ((isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))) * _1132))) + ((_3197 + ((isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0))) * _1967)) * cbPerFrame._m0[3u].x);
    float _3222 = cbInstanceData._m0[_1092 + 6u].w * (isnan(1.0) ? _5282 : (isnan(_5282) ? 1.0 : min(_5282, 1.0)));
    float _3227 = _1054 / cbSceneParam._m0[86u].x;
    float _3228 = _1055 / cbSceneParam._m0[86u].y;
    vec4 _3242 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3227, _3228, (log2((isnan(cbSceneParam._m0[77u].w) ? _977 : (isnan(_977) ? cbSceneParam._m0[77u].w : min(_977, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3244 = _3242.x;
    float _3245 = _3242.y;
    float _3246 = _3242.z;
    float _3247 = _3242.w;
    float _3319;
    float _3321;
    float _3323;
    float _3325;
    if (_977 > cbSceneParam._m0[78u].w)
    {
        float _3281 = isnan(_977) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _977 : min(cbSceneParam._m0[80u].w, _977));
        float _3282 = _3281 / _977;
        float _3293 = _3282 * _1027;
        float _3294 = _1028 * _3282;
        float _3295 = (-0.0) - _3294;
        float _3297 = _3282 * _1029;
        float _3299 = (cbSceneParam._m0[77u].w * _3295) / _3281;
        float _3300 = _3299 + cbSceneParam._m0[79u].w;
        float _3301 = cbSceneParam._m0[79u].w - _3294;
        float _3307 = sqrt(((_3293 * _3293) + (_3294 * _3294)) + (_3297 * _3297));
        float _3310 = (1.0 - (cbSceneParam._m0[77u].w / _3281)) * _3307;
        float _3315 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3317 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3494;
        if (abs((_3295 - _3299) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3494 = ((((_3300 > 0.0) ? exp2(_3315 * _3300) : (2.0 - exp2(_3317 * _3300))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3310;
        }
        else
        {
            float _3438 = 1.0 / cbSceneParam._m0[80u].x;
            float _3439 = isnan(_3301) ? _3300 : (isnan(_3300) ? _3301 : max(_3300, _3301));
            float _3440 = isnan(_3301) ? _3300 : (isnan(_3300) ? _3301 : min(_3300, _3301));
            float _3449 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : min(_3439, 0.0));
            float _3450 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : min(_3440, 0.0));
            _3494 = ((abs(_3307 / _3295) * cbSceneParam._m0[80u].y) * ((((_3449 - _3450) * 2.0) - ((exp2(_3315 * (isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0)))) - exp2(_3315 * (isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0))))) * _3438)) - ((exp2(_3317 * _3449) - exp2(_3317 * _3450)) * _3438))) + (_3310 * cbSceneParam._m0[80u].z);
        }
        vec4 _3496 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3227, _3228, 1.0), 0.0);
        float _3505 = exp2((_3494 * (-1.44269502162933349609375)) * (1.0 - _3496.w));
        float _3506 = log2(_3505);
        float _3522 = log2(_3247);
        _3319 = (exp2(_3522 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3506 * cbSceneParam._m0[78u].x)) * _3496.x) / cbSceneParam._m0[78u].x)) + _3244;
        _3321 = (exp2(_3522 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3506 * cbSceneParam._m0[78u].y)) * _3496.y) / cbSceneParam._m0[78u].y)) + _3245;
        _3323 = (exp2(_3522 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3506 * cbSceneParam._m0[78u].z)) * _3496.z) / cbSceneParam._m0[78u].z)) + _3246;
        _3325 = _3505 * _3247;
    }
    else
    {
        _3319 = _3244;
        _3321 = _3245;
        _3323 = _3246;
        _3325 = _3247;
    }
    bool _3532;
    vec4 _3335;
    vec4 _3357;
    float _3359;
    float _3363;
    float _3364;
    float _3365;
    float _3366;
    bool _3376;
    for (;;)
    {
        _3335 = cbMatDynParam._m0[0u];
        float _3337 = roundEven(_3335.y);
        bool _3338 = _3337 == 3.0;
        float _3339 = log2(_3325);
        float _3346 = exp2(_3339 * cbSceneParam._m0[78u].x) * _3215;
        float _3347 = exp2(_3339 * cbSceneParam._m0[78u].y) * _3216;
        float _3348 = exp2(_3339 * cbSceneParam._m0[78u].z) * _3217;
        float _3355 = _1043 + (-0.5);
        _3357 = cbMtdParam._m0[1u];
        _3359 = _3357.y * _3355;
        float _3362 = (_3337 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3363 = _3362 * (_3338 ? _3346 : (_3346 + (cbSceneParam._m0[72u].w * _3319)));
        _3364 = _3362 * (_3338 ? _3347 : (_3347 + (cbSceneParam._m0[72u].w * _3321)));
        _3365 = _3362 * (_3338 ? _3348 : (_3348 + (cbSceneParam._m0[72u].w * _3323)));
        _3366 = _3355 * 0.999000012874603271484375;
        _3376 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3376)
        {
            if ((cbInstanceData._m0[_1092 + 7u].x + _3366) < 0.5)
            {
                _3532 = true;
                break;
            }
        }
        uint _3473 = _1093 + uint(_3335.w);
        if ((cbInstanceData._m0[_3473].w < 1.0) && ((cbInstanceData._m0[_3473].w + _3366) < 0.5))
        {
            _3532 = true;
            break;
        }
        if ((_3359 + 1.0) < _3357.x)
        {
            _3532 = true;
            break;
        }
        _3532 = false;
        break;
    }
    float _3736;
    if (_3532)
    {
        discard_state = true;
        _3736 = 0.0;
    }
    else
    {
        _3736 = _3222;
    }
    SV_Target.x = _3363;
    SV_Target.y = _3364;
    SV_Target.z = _3365;
    SV_Target.w = _3736;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3222;
    discard_exit();
}


