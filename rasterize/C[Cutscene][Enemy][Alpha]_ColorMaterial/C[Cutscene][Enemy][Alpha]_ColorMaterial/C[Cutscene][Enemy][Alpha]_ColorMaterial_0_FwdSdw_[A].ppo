#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24;
layout(set = 0, binding = 12) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 13) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 18) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in float TEXCOORD_8;
layout(location = 7, component = 1) in float TEXCOORD_9;
layout(location = 7, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1459;
float _4121;
float _4122;
float _4123;
float _4124;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _277 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _292 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _296 = _292.z;
    float _309 = exp2(log2((1.0 - _296) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _310 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _311 = isnan(1.0) ? _310 : (isnan(_310) ? 1.0 : min(_310, 1.0));
    vec4 _324 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _332 = log2(0.0);
    float _334 = exp2(_332 * cbMtdParam._m0[23u].x);
    float _335 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _336 = isnan(1.0) ? _335 : (isnan(_335) ? 1.0 : min(_335, 1.0));
    float _345 = exp2(log2(cbMtdParam._m0[23u].y * _296) * cbMtdParam._m0[22u].y);
    float _346 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _347 = isnan(1.0) ? _346 : (isnan(_346) ? 1.0 : min(_346, 1.0));
    float _368 = roundEven(5.0 - ((texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _369 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _370 = isnan(4.0) ? _369 : (isnan(_369) ? 4.0 : min(_369, 4.0));
    float _382 = floor(_370);
    vec4 _385 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w, _382));
    vec4 _409 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _420 = cbMtdParam._m0[9u].x * _409.x;
    float _421 = cbMtdParam._m0[9u].y * _409.y;
    float _422 = cbMtdParam._m0[9u].z * _409.z;
    float _429 = (((cbMtdParam._m0[10u].x * _385.x) - _420) * _347) + _420;
    float _430 = (((cbMtdParam._m0[10u].y * _385.y) - _421) * _347) + _421;
    float _431 = (((cbMtdParam._m0[10u].z * _385.z) - _422) * _347) + _422;
    float _437 = exp2(log2(_292.w) * cbMtdParam._m0[23u].w);
    vec4 _450 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _470 = (((cbMtdParam._m0[16u].x * _450.x) - _429) * _437) + _429;
    float _471 = (((cbMtdParam._m0[16u].y * _450.y) - _430) * _437) + _430;
    float _472 = (((cbMtdParam._m0[16u].z * _450.z) - _431) * _437) + _431;
    vec4 _485 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _505 = (((cbMtdParam._m0[19u].x * _485.x) - _470) * _336) + _470;
    float _506 = (((cbMtdParam._m0[19u].y * _485.y) - _471) * _336) + _471;
    float _507 = (((cbMtdParam._m0[19u].z * _485.z) - _472) * _336) + _472;
    vec4 _520 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _545 = (_324.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _520.x) - _505) * _311) + _505);
    float _547 = (_324.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _520.y) - _506) * _311) + _506);
    float _549 = (_324.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _520.z) - _507) * _311) + _507);
    float _553 = cbMtdParam._m0[28u].x * TEXCOORD_8;
    float _562 = (_553 - (((_277.x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _553))) * (cbMtdParam._m0[27u].w + 1.0);
    float _4173 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _563 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _570 = ((cbMtdParam._m0[21u].x - _545) * _563) + _545;
    float _571 = ((cbMtdParam._m0[21u].y - _547) * _563) + _547;
    float _572 = ((cbMtdParam._m0[21u].z - _549) * _563) + _549;
    vec4 _586 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24, SS_ClampLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.z) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.w) + cbTextureTilingScale._m0[11u].w));
    float _594 = (_586.x + (-1.0)) + (cbMtdParam._m0[28u].y * 2.0);
    float _4184 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _600 = exp2(log2(cbMtdParam._m0[28u].w * (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) * cbMtdParam._m0[28u].z);
    float _4195 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _601 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _205[5];
    float _206[5];
    _205[0u] = cbMtdParam._m0[29u].z;
    _206[0u] = cbMtdParam._m0[29u].w;
    _205[1u] = cbMtdParam._m0[31u].z;
    _206[1u] = cbMtdParam._m0[31u].w;
    _205[2u] = cbMtdParam._m0[31u].x;
    _206[2u] = cbMtdParam._m0[31u].y;
    _205[3u] = cbMtdParam._m0[30u].z;
    _206[3u] = cbMtdParam._m0[30u].w;
    _205[4u] = cbMtdParam._m0[30u].x;
    _206[4u] = cbMtdParam._m0[30u].y;
    float _643 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    uint _645 = uint(int(isnan(4.0) ? _643 : (isnan(_643) ? 4.0 : min(_643, 4.0))));
    float _652 = ((_206[_645] - cbMtdParam._m0[22u].z) * _347) + cbMtdParam._m0[22u].z;
    float _655 = ((cbMtdParam._m0[22u].w - _652) * _437) + _652;
    float _658 = ((cbMtdParam._m0[25u].x - _655) * _336) + _655;
    float _661 = ((cbMtdParam._m0[26u].x - _658) * _311) + _658;
    float _663 = _661 - (_661 * _553);
    vec4 _680 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w, _382));
    vec4 _698 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _700 = _698.x;
    float _701 = _698.y;
    float _706 = cbMtdParam._m0[22u].x + _698.z;
    float _709 = (((_680.z + _205[_645]) - _706) * _347) + _706;
    vec4 _722 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _733 = (((_722.z - _709) + cbMtdParam._m0[29u].x) * _437) + _709;
    float _738 = ((((_296 * 2.0) * _733) - _733) * cbMtdParam._m0[24u].w) + _733;
    vec4 _750 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _761 = (((cbMtdParam._m0[23u].z + _750.z) - _738) * _336) + _738;
    vec4 _774 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _785 = (((_774.z - _761) + cbMtdParam._m0[26u].y) * _311) + _761;
    vec4 _800 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _814 = ((cbMtdParam._m0[27u].y * _553) * ((_800.z * cbMtdParam._m0[27u].x) - _785)) + _785;
    float _826 = ((_680.x - _700) * _347) + _700;
    float _827 = ((_680.y - _701) * _347) + _701;
    float _832 = ((_722.x - _826) * _437) + _826;
    float _833 = ((_722.y - _827) * _437) + _827;
    float _838 = ((_750.x - _832) * _336) + _832;
    float _839 = ((_750.y - _833) * _336) + _833;
    float _848 = ((((_774.x - _838) * _311) + _838) * 2.0) + (-1.0);
    float _849 = ((((_774.y - _839) * _311) + _839) * 2.0) + (-1.0);
    float _850 = dot(vec2(_848, _849), vec2(_848, _849));
    float _4216 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _855 = sqrt(1.0 - (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))));
    float _865 = ((cbMtdParam._m0[25u].y * ((_292.x * 2.0) + (-1.0))) + _848) + ((((_800.x * 2.0) + (-1.0)) * _553) * cbMtdParam._m0[26u].w);
    float _866 = ((cbMtdParam._m0[25u].y * ((_292.y * 2.0) + (-1.0))) + _849) + (((cbMtdParam._m0[28u].x * TEXCOORD_9) * ((_800.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _869 = fma(_855, _241 * NORMAL.x, fma(_866, _248 * TANGENT.x, (_234 * _226) * _865));
    float _872 = fma(_855, _241 * NORMAL.y, fma(_866, _248 * TANGENT.y, (_234 * _227) * _865));
    float _875 = fma(_855, _241 * NORMAL.z, fma(_866, _248 * TANGENT.z, (_234 * _228) * _865));
    float _879 = inversesqrt(dot(vec3(_869, _872, _875), vec3(_869, _872, _875)));
    float _880 = _879 * _869;
    float _881 = _879 * _872;
    float _882 = _879 * _875;
    float _4227 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _883 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _4238 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _884 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _4249 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _4260 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _4271 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _4282 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _888 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    float _904 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _944 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _954 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _944);
    float _955 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _944);
    float _956 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _944);
    float _960 = inversesqrt(dot(vec3(_954, _955, _956), vec3(_954, _955, _956)));
    float _961 = _954 * _960;
    float _962 = _955 * _960;
    float _963 = _956 * _960;
    vec4 _968 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _970 = _968.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1140 = sqrt(((_954 * _954) + (_955 * _955)) + (_956 * _956));
        float _1146 = (cbMatDynParam._m0[5u].x * _1140) + cbMatDynParam._m0[5u].y;
        float _4293 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1151 = (cbMatDynParam._m0[5u].z * _1140) + cbMatDynParam._m0[5u].w;
        float _4304 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) - _1147)) + _1147) < ((_970 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _981 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _982 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1000 = fma(_882, cbSceneParam._m0[5u].z, fma(_881, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _880));
    float _1003 = fma(_882, cbSceneParam._m0[6u].z, fma(_881, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _880));
    float _1006 = fma(_882, cbSceneParam._m0[7u].z, fma(_881, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _880));
    uint _1019 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1020 = _1019 + 9u;
    uint _1021 = _1020 + uint(cbMatDynParam._m0[0u].w);
    float _1027 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0)))) * cbInstanceData._m0[_1021].x;
    float _1028 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0)))) * cbInstanceData._m0[_1021].y;
    float _1029 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0)))) * cbInstanceData._m0[_1021].z;
    float _4315 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _1030 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _4326 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _1031 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _4337 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _1032 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
    float _1033 = 1.0 - _888;
    float _1034 = _1030 * _1033;
    float _1035 = _1031 * _1033;
    float _1036 = _1032 * _1033;
    float _1041 = (_1030 + (-0.039999999105930328369140625)) * _888;
    float _1042 = (_1031 + (-0.039999999105930328369140625)) * _888;
    float _1043 = (_1032 + (-0.039999999105930328369140625)) * _888;
    float _1044 = _1041 + 0.039999999105930328369140625;
    float _1046 = _1042 + 0.039999999105930328369140625;
    float _1047 = _1043 + 0.039999999105930328369140625;
    vec4 _1056 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _981, cbSceneParam._m0[86u].y * _982));
    float _1059 = _1056.x * TEXCOORD_5.w;
    float _1060 = dot(vec3(_880, _881, _882), vec3(_961, _962, _963));
    float _1063 = _1060 * 2.0;
    float _1067 = (_1063 * _880) - _961;
    float _1068 = (_1063 * _881) - _962;
    float _1069 = (_1063 * _882) - _963;
    float _1073 = abs(dot(vec3(_961, _962, _963), vec3(_880, _881, _882)));
    float _4348 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _1075 = sqrt(_884);
    float _1086 = exp2((_1075 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1075 * 3.0));
    float _1092 = (1.0 - _1086) * ((_1075 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1093 = _1086 * _1075;
    float _1121 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1125 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1129 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1458;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1183 = fma(_1129, cbModelParam._m0[26u].z, fma(_1125, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1121));
        float _1187 = fma(_1129, cbModelParam._m0[27u].z, fma(_1125, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1121));
        float _1191 = fma(_1129, cbModelParam._m0[28u].z, fma(_1125, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1121));
        float _1216 = _1121 + _880;
        float _1217 = _1125 + _881;
        float _1218 = _1129 + _882;
        float _1228 = fma(_1218, cbModelParam._m0[26u].z, fma(_1217, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1216)) - _1183;
        float _1229 = fma(_1218, cbModelParam._m0[27u].z, fma(_1217, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1216)) - _1187;
        float _1230 = fma(_1218, cbModelParam._m0[28u].z, fma(_1217, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1216)) - _1191;
        float _1234 = inversesqrt(dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230)));
        float _1247 = ((_1234 * _1228) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1183 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1248 = ((_1234 * _1229) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1187 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1249 = ((_1234 * _1230) / cbModelParam._m0[34u].z) + ((((((_1191 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1247, _1248, _1249), 0.0);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1247, _1248, _1249), 0.0);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1247, _1248, _1249), 0.0);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1247, _1248, _1249), 0.0);
        float _1286 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1252.x + (-0.5));
        float _1288 = _1286 * (_1252.y + (-0.5));
        float _1289 = _1286 * (_1252.z + (-0.5));
        float _1296 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1259.x + (-0.5));
        float _1298 = _1296 * (_1259.y + (-0.5));
        float _1299 = _1296 * (_1259.z + (-0.5));
        float _1306 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1266.x + (-0.5));
        float _1308 = _1306 * (_1266.y + (-0.5));
        float _1309 = _1306 * (_1266.z + (-0.5));
        float _1316 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1273.x + (-0.5));
        float _1318 = _1316 * (_1273.y + (-0.5));
        float _1319 = _1316 * (_1273.z + (-0.5));
        float _1320 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1321 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1322 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1323 = _1287 * 0.5;
        float _1324 = _1297 * 0.5;
        float _1325 = _1307 * 0.5;
        float _1326 = dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325));
        float _1331 = (_1326 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1326);
        float _1340 = (dot(vec3(_880, _881, _882), vec3(_1331 * _1323, _1331 * _1324, _1331 * _1325)) + 1.0) * 0.5;
        float _4374 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1350 = sqrt(((_1324 * _1324) + (_1323 * _1323)) + (_1325 * _1325)) / (_1320 + 9.9999997473787516355514526367188e-06);
        float _4385 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _1352 = _1351 * 2.0;
        float _1356 = (1.0 - _1351) / (_1351 + 1.0);
        float _4396 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _1366 = ((((1.0 - _1357) * (_1352 + 2.0)) * exp2(log2(isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_1352 + 1.0))) + _1357) * _1320;
        float _1367 = _1288 * 0.5;
        float _1368 = _1298 * 0.5;
        float _1369 = _1308 * 0.5;
        float _1370 = dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369));
        float _1375 = (_1370 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1370);
        float _1383 = (dot(vec3(_880, _881, _882), vec3(_1375 * _1367, _1375 * _1368, _1375 * _1369)) + 1.0) * 0.5;
        float _4407 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1392 = sqrt(((_1368 * _1368) + (_1367 * _1367)) + (_1369 * _1369)) / (_1321 + 9.9999997473787516355514526367188e-06);
        float _4418 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _1394 = _1393 * 2.0;
        float _1398 = (1.0 - _1393) / (_1393 + 1.0);
        float _4429 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _1408 = ((((1.0 - _1399) * (_1394 + 2.0)) * exp2(log2(isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_1394 + 1.0))) + _1399) * _1321;
        float _1409 = _1289 * 0.5;
        float _1410 = _1299 * 0.5;
        float _1411 = _1309 * 0.5;
        float _1412 = dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411));
        float _1417 = (_1412 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1412);
        float _1425 = (dot(vec3(_880, _881, _882), vec3(_1417 * _1409, _1417 * _1410, _1417 * _1411)) + 1.0) * 0.5;
        float _4440 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1434 = sqrt(((_1410 * _1410) + (_1409 * _1409)) + (_1411 * _1411)) / (_1322 + 9.9999997473787516355514526367188e-06);
        float _4451 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _1436 = _1435 * 2.0;
        float _1440 = (1.0 - _1435) / (_1435 + 1.0);
        float _4462 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _1450 = ((((1.0 - _1441) * (_1436 + 2.0)) * exp2(log2(isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_1436 + 1.0))) + _1441) * _1322;
        _1458 = _1289;
        _1460 = _1288;
        _1461 = _1287;
        _1462 = _1299;
        _1463 = _1298;
        _1464 = _1297;
        _1465 = _1309;
        _1466 = _1308;
        _1467 = _1307;
        _1468 = _1322;
        _1469 = _1321;
        _1470 = _1320;
        _1471 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)));
        _1472 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)));
        _1473 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)));
    }
    else
    {
        _1458 = _1459;
        _1460 = _1459;
        _1461 = _1459;
        _1462 = _1459;
        _1463 = _1459;
        _1464 = _1459;
        _1465 = _1459;
        _1466 = _1459;
        _1467 = _1459;
        _1468 = _1459;
        _1469 = _1459;
        _1470 = _1459;
        _1471 = 0.0;
        _1472 = 0.0;
        _1473 = 0.0;
    }
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1499 = fma(_1129, cbModelParam._m0[30u].z, fma(_1125, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1121));
        float _1503 = fma(_1129, cbModelParam._m0[31u].z, fma(_1125, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1121));
        float _1507 = fma(_1129, cbModelParam._m0[32u].z, fma(_1125, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1121));
        float _1530 = _1121 + _880;
        float _1531 = _1125 + _881;
        float _1532 = _1129 + _882;
        float _1542 = fma(_1532, cbModelParam._m0[30u].z, fma(_1531, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1530)) - _1499;
        float _1543 = fma(_1532, cbModelParam._m0[31u].z, fma(_1531, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1530)) - _1503;
        float _1544 = fma(_1532, cbModelParam._m0[32u].z, fma(_1531, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1530)) - _1507;
        float _1548 = inversesqrt(dot(vec3(_1542, _1543, _1544), vec3(_1542, _1543, _1544)));
        float _1561 = ((_1548 * _1542) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1499 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1562 = ((_1548 * _1543) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1503 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1563 = ((_1548 * _1544) / cbModelParam._m0[35u].z) + ((((((_1507 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1565 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1561, _1562, _1563), 0.0);
        vec4 _1572 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1561, _1562, _1563), 0.0);
        vec4 _1579 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1561, _1562, _1563), 0.0);
        vec4 _1586 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1561, _1562, _1563), 0.0);
        float _1598 = exp2((_1565.w + (-0.5)) * 20.0) * 2.0;
        float _1599 = _1598 * (_1565.x + (-0.5));
        float _1600 = _1598 * (_1565.y + (-0.5));
        float _1601 = _1598 * (_1565.z + (-0.5));
        float _1608 = exp2((_1572.w + (-0.5)) * 20.0) * 2.0;
        float _1609 = _1608 * (_1572.x + (-0.5));
        float _1610 = _1608 * (_1572.y + (-0.5));
        float _1611 = _1608 * (_1572.z + (-0.5));
        float _1618 = exp2((_1579.w + (-0.5)) * 20.0) * 2.0;
        float _1619 = _1618 * (_1579.x + (-0.5));
        float _1620 = _1618 * (_1579.y + (-0.5));
        float _1621 = _1618 * (_1579.z + (-0.5));
        float _1628 = exp2((_1586.w + (-0.5)) * 20.0) * 2.0;
        float _1629 = _1628 * (_1586.x + (-0.5));
        float _1630 = _1628 * (_1586.y + (-0.5));
        float _1631 = _1628 * (_1586.z + (-0.5));
        float _1632 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1633 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1634 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1635 = _1599 * 0.5;
        float _1636 = _1609 * 0.5;
        float _1637 = _1619 * 0.5;
        float _1638 = dot(vec3(_1635, _1636, _1637), vec3(_1635, _1636, _1637));
        float _1643 = (_1638 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1638);
        float _1651 = (dot(vec3(_880, _881, _882), vec3(_1643 * _1635, _1643 * _1636, _1643 * _1637)) + 1.0) * 0.5;
        float _4503 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1660 = sqrt(((_1636 * _1636) + (_1635 * _1635)) + (_1637 * _1637)) / (_1632 + 9.9999997473787516355514526367188e-06);
        float _4514 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _1662 = _1661 * 2.0;
        float _1666 = (1.0 - _1661) / (_1661 + 1.0);
        float _4525 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _1676 = ((((1.0 - _1667) * (_1662 + 2.0)) * exp2(log2(isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (_1662 + 1.0))) + _1667) * _1632;
        float _1677 = _1600 * 0.5;
        float _1678 = _1610 * 0.5;
        float _1679 = _1620 * 0.5;
        float _1680 = dot(vec3(_1677, _1678, _1679), vec3(_1677, _1678, _1679));
        float _1685 = (_1680 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1680);
        float _1693 = (dot(vec3(_880, _881, _882), vec3(_1685 * _1677, _1685 * _1678, _1685 * _1679)) + 1.0) * 0.5;
        float _4536 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1702 = sqrt(((_1678 * _1678) + (_1677 * _1677)) + (_1679 * _1679)) / (_1633 + 9.9999997473787516355514526367188e-06);
        float _4547 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _1704 = _1703 * 2.0;
        float _1708 = (1.0 - _1703) / (_1703 + 1.0);
        float _4558 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1709 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _1718 = ((((1.0 - _1709) * (_1704 + 2.0)) * exp2(log2(isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (_1704 + 1.0))) + _1709) * _1633;
        float _1719 = _1601 * 0.5;
        float _1720 = _1611 * 0.5;
        float _1721 = _1621 * 0.5;
        float _1722 = dot(vec3(_1719, _1720, _1721), vec3(_1719, _1720, _1721));
        float _1727 = (_1722 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1722);
        float _1735 = (dot(vec3(_880, _881, _882), vec3(_1727 * _1719, _1727 * _1720, _1727 * _1721)) + 1.0) * 0.5;
        float _4569 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1744 = sqrt(((_1720 * _1720) + (_1719 * _1719)) + (_1721 * _1721)) / (_1634 + 9.9999997473787516355514526367188e-06);
        float _4580 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1745 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _1746 = _1745 * 2.0;
        float _1750 = (1.0 - _1745) / (_1745 + 1.0);
        float _4591 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1751 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _1760 = ((((1.0 - _1751) * (_1746 + 2.0)) * exp2(log2(isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_1746 + 1.0))) + _1751) * _1634;
        _1768 = _1601;
        _1769 = _1600;
        _1770 = _1599;
        _1771 = _1611;
        _1772 = _1610;
        _1773 = _1609;
        _1774 = _1621;
        _1775 = _1620;
        _1776 = _1619;
        _1777 = _1634;
        _1778 = _1633;
        _1779 = _1632;
        _1780 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)));
        _1781 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)));
        _1782 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)));
    }
    else
    {
        _1768 = _1459;
        _1769 = _1459;
        _1770 = _1459;
        _1771 = _1459;
        _1772 = _1459;
        _1773 = _1459;
        _1774 = _1459;
        _1775 = _1459;
        _1776 = _1459;
        _1777 = _1459;
        _1778 = _1459;
        _1779 = _1459;
        _1780 = 0.0;
        _1781 = 0.0;
        _1782 = 0.0;
    }
    float _1792 = (cbModelParam._m0[1u].x * (_1780 - _1471)) + _1471;
    float _1793 = (cbModelParam._m0[1u].x * (_1781 - _1472)) + _1472;
    float _1794 = (cbModelParam._m0[1u].x * (_1782 - _1473)) + _1473;
    float _1815 = fma(_1794, cbSceneParam._m0[89u].z, fma(_1793, cbSceneParam._m0[89u].y, _1792 * cbSceneParam._m0[89u].x));
    float _1818 = fma(_1794, cbSceneParam._m0[90u].z, fma(_1793, cbSceneParam._m0[90u].y, _1792 * cbSceneParam._m0[90u].x));
    float _1821 = fma(_1794, cbSceneParam._m0[91u].z, fma(_1793, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1792));
    float _1836 = _1067 * 0.5;
    float _1837 = _1068 * 0.5;
    float _1838 = _1069 * 0.5;
    float _1839 = dot(vec4(_1836, _1837, _1838, 1.0), vec4(_1770, _1773, _1776, _1779));
    float _1842 = dot(vec4(_1836, _1837, _1838, 1.0), vec4(_1769, _1772, _1775, _1778));
    float _1845 = dot(vec4(_1836, _1837, _1838, 1.0), vec4(_1768, _1771, _1774, _1777));
    float _1879;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1852 = dot(vec4(_1836, _1837, _1838, 1.0), vec4(_1458, _1462, _1465, _1468));
        float _1856 = dot(vec4(_1836, _1837, _1838, 1.0), vec4(_1460, _1463, _1466, _1469));
        float _1860 = dot(vec4(_1836, _1837, _1838, 1.0), vec4(_1461, _1464, _1467, _1470));
        float _1867 = dot(vec4(cbModelParam._m0[39u]), vec4(_1836, _1837, _1838, 1.0));
        _1879 = dot(vec3(isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0)), isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0)), isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1867) ? 0.0 : (isnan(0.0) ? _1867 : max(0.0, _1867))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1879 = 1.0;
    }
    float _1890;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1881 = dot(vec4(cbModelParam._m0[40u]), vec4(_1836, _1837, _1838, 1.0));
        _1890 = dot(vec3(isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0)), isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0)), isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1881) ? 0.0 : (isnan(0.0) ? _1881 : max(0.0, _1881))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1890 = 1.0;
    }
    float _1894 = (_1890 * cbModelParam._m0[1u].x) + (_1879 * (1.0 - cbModelParam._m0[1u].x));
    float _1904 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _884);
    float _1905 = isnan(_1904) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1904 : min(cbModelParam._m0[25u].z, _1904));
    float _1985;
    float _1987;
    float _1989;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1952 = fma(_1129, cbModelParam._m0[13u].z, fma(_1125, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1121)) + cbModelParam._m0[13u].w;
        float _1956 = fma(_1129, cbModelParam._m0[14u].z, fma(_1125, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1121)) + cbModelParam._m0[14u].w;
        float _1960 = fma(_1129, cbModelParam._m0[15u].z, fma(_1125, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1121)) + cbModelParam._m0[15u].w;
        float _1963 = fma(_1069, cbModelParam._m0[13u].z, fma(_1068, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1067));
        float _1966 = fma(_1069, cbModelParam._m0[14u].z, fma(_1068, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1067));
        float _1969 = fma(_1069, cbModelParam._m0[15u].z, fma(_1068, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1067));
        float _1997;
        if (_1963 > 0.0)
        {
            _1997 = abs((1.0 - _1952) / _1963);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1963 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1952 + 1.0) / _1963);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1997 = frontier_phi_17_15_ladder;
        }
        float _2168;
        if (_1966 > 0.0)
        {
            _2168 = abs((1.0 - _1956) / _1966);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1956 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2168 = frontier_phi_26_22_ladder;
        }
        float _2463;
        if (_1969 > 0.0)
        {
            _2463 = abs((1.0 - _1960) / _1969);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1969 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1960 + 1.0) / _1969);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2463 = frontier_phi_38_33_ladder;
        }
        float _2465 = isnan(_2168) ? _1997 : (isnan(_1997) ? _2168 : min(_1997, _2168));
        float _2466 = isnan(_2463) ? _2465 : (isnan(_2465) ? _2463 : min(_2465, _2463));
        float _2470 = (_2466 * _1963) + _1952;
        float _2471 = (_2466 * _1966) + _1956;
        float _2472 = (_2466 * _1969) + _1960;
        float _2473 = _2466 * 9.9999997473787516355514526367188e-05;
        float _2475 = (-1.0) - _2473;
        float _2477 = _2473 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2472 > _2477) || ((_2472 < _2475) || ((_2471 > _2477) || ((_2471 < _2475) || ((_2470 < _2475) || (_2470 > _2477))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2617 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2472, cbModelParam._m0[9u].z, fma(_2471, cbModelParam._m0[9u].y, _2470 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2472, cbModelParam._m0[10u].z, fma(_2471, cbModelParam._m0[10u].y, _2470 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2472, cbModelParam._m0[11u].z, fma(_2471, cbModelParam._m0[11u].y, _2470 * cbModelParam._m0[11u].x))), _1905);
            frontier_phi_16_38_ladder = _2617.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2617.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2617.x * cbModelParam._m0[1u].y;
        }
        _1985 = frontier_phi_16_38_ladder_2;
        _1987 = frontier_phi_16_38_ladder_1;
        _1989 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1973 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1067, _1068, _1069), _1905);
        _1985 = _1973.x * cbModelParam._m0[1u].y;
        _1987 = _1973.y * cbModelParam._m0[1u].y;
        _1989 = _1973.z * cbModelParam._m0[1u].y;
    }
    float _1993 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _884);
    float _1994 = isnan(_1993) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1993 : min(cbModelParam._m0[25u].w, _1993));
    float _2083;
    float _2085;
    float _2087;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2047 = fma(_1129, cbModelParam._m0[21u].z, fma(_1125, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1121)) + cbModelParam._m0[21u].w;
        float _2051 = fma(_1129, cbModelParam._m0[22u].z, fma(_1125, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1121)) + cbModelParam._m0[22u].w;
        float _2055 = fma(_1129, cbModelParam._m0[23u].z, fma(_1125, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1121)) + cbModelParam._m0[23u].w;
        float _2058 = fma(_1069, cbModelParam._m0[21u].z, fma(_1068, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1067));
        float _2061 = fma(_1069, cbModelParam._m0[22u].z, fma(_1068, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1067));
        float _2064 = fma(_1069, cbModelParam._m0[23u].z, fma(_1068, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1067));
        float _2173;
        if (_2058 > 0.0)
        {
            _2173 = abs((1.0 - _2047) / _2058);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2058 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2047 + 1.0) / _2058);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2173 = frontier_phi_28_24_ladder;
        }
        float _2490;
        if (_2061 > 0.0)
        {
            _2490 = abs((1.0 - _2051) / _2061);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2061 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2051 + 1.0) / _2061);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2490 = frontier_phi_40_35_ladder;
        }
        float _2828;
        if (_2064 > 0.0)
        {
            _2828 = abs((1.0 - _2055) / _2064);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2064 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2055 + 1.0) / _2064);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2828 = frontier_phi_50_47_ladder;
        }
        float _2830 = isnan(_2490) ? _2173 : (isnan(_2173) ? _2490 : min(_2173, _2490));
        float _2831 = isnan(_2828) ? _2830 : (isnan(_2830) ? _2828 : min(_2830, _2828));
        float _2835 = (_2831 * _2058) + _2047;
        float _2836 = (_2831 * _2061) + _2051;
        float _2837 = (_2831 * _2064) + _2055;
        float _2838 = _2831 * 9.9999997473787516355514526367188e-05;
        float _2839 = (-1.0) - _2838;
        float _2841 = _2838 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2837 > _2841) || ((_2837 < _2839) || ((_2836 > _2841) || ((_2836 < _2839) || ((_2835 < _2839) || (_2835 > _2841))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2959 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2837, cbModelParam._m0[17u].z, fma(_2836, cbModelParam._m0[17u].y, _2835 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2837, cbModelParam._m0[18u].z, fma(_2836, cbModelParam._m0[18u].y, _2835 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2837, cbModelParam._m0[19u].z, fma(_2836, cbModelParam._m0[19u].y, _2835 * cbModelParam._m0[19u].x))), _1994);
            frontier_phi_25_50_ladder = _2959.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2959.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2959.x * cbModelParam._m0[1u].z;
        }
        _2083 = frontier_phi_25_50_ladder_2;
        _2085 = frontier_phi_25_50_ladder_1;
        _2087 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2067 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1067, _1068, _1069), _1994);
        _2083 = _2067.x * cbModelParam._m0[1u].z;
        _2085 = _2067.y * cbModelParam._m0[1u].z;
        _2087 = _2067.z * cbModelParam._m0[1u].z;
    }
    float _2100 = (((_1092 * _1044) + _1093) * _1059) * ((cbModelParam._m0[1u].w * (_2083 - _1985)) + _1985);
    float _2102 = (((_1092 * _1046) + _1093) * _1059) * ((cbModelParam._m0[1u].w * (_2085 - _1987)) + _1987);
    float _2104 = (((_1092 * _1047) + _1093) * _1059) * ((cbModelParam._m0[1u].w * (_2087 - _1989)) + _1989);
    float _2107 = fma(_2104, cbSceneParam._m0[89u].z, fma(_2102, cbSceneParam._m0[89u].y, _2100 * cbSceneParam._m0[89u].x));
    float _2110 = fma(_2104, cbSceneParam._m0[90u].z, fma(_2102, cbSceneParam._m0[90u].y, _2100 * cbSceneParam._m0[90u].x));
    float _2113 = fma(_2104, cbSceneParam._m0[91u].z, fma(_2102, cbSceneParam._m0[91u].y, _2100 * cbSceneParam._m0[91u].x));
    float _2147 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2151 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2155 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2159 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2160 = _2147 / _2159;
    float _2161 = _2151 / _2159;
    float _2162 = _2155 / _2159;
    float _2309;
    float _2310;
    float _2311;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2189 = ((uint(_2162 > cbSceneParam._m0[59u].y) + uint(_2162 > cbSceneParam._m0[59u].x)) + uint(_2162 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2190 = _2189 + 43u;
        uint _2198 = _2189 + 44u;
        uint _2206 = _2189 + 45u;
        uint _2214 = _2189 + 46u;
        float _2225 = fma(_2159, cbSceneParam._m0[_2190].w, fma(_2155, cbSceneParam._m0[_2190].z, fma(_2151, cbSceneParam._m0[_2190].y, _2147 * cbSceneParam._m0[_2190].x)));
        float _2229 = fma(_2159, cbSceneParam._m0[_2198].w, fma(_2155, cbSceneParam._m0[_2198].z, fma(_2151, cbSceneParam._m0[_2198].y, _2147 * cbSceneParam._m0[_2198].x)));
        float _2237 = fma(_2159, cbSceneParam._m0[_2214].w, fma(_2155, cbSceneParam._m0[_2214].z, fma(_2151, cbSceneParam._m0[_2214].y, _2147 * cbSceneParam._m0[_2214].x)));
        float _2242 = cbSceneParam._m0[33u].z * _2237;
        float _2244 = cbSceneParam._m0[33u].w * _2237;
        float _2247 = fma(_2159, cbSceneParam._m0[_2206].w, fma(_2155, cbSceneParam._m0[_2206].z, fma(_2151, cbSceneParam._m0[_2206].y, _2147 * cbSceneParam._m0[_2206].x))) / _2237;
        float _2295 = (cbSceneParam._m0[33u].x - sqrt(((_2161 * _2161) + (_2160 * _2160)) + (_2162 * _2162))) * cbSceneParam._m0[33u].y;
        float _4717 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2302 = (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2242 + _2225) / _2237, (_2244 + _2229) / _2237), _2247), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2244 + _2225) / _2237, (_2229 - _2242) / _2237), _2247), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2225 - _2242) / _2237, (_2229 - _2244) / _2237), _2247), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2225 - _2244) / _2237, (_2242 + _2229) / _2237), _2247), 0.0)).x), vec4(0.25)));
        _2309 = 1.0 - (_2302 * cbSceneParam._m0[34u].x);
        _2310 = 1.0 - (_2302 * cbSceneParam._m0[34u].y);
        _2311 = 1.0 - (_2302 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2309 = 1.0;
        _2310 = 1.0;
        _2311 = 1.0;
    }
    float _2375;
    float _2377;
    float _2379;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2363 = fma(_2159, cbSceneParam._m0[63u].w, fma(_2155, cbSceneParam._m0[63u].z, fma(_2151, cbSceneParam._m0[63u].y, _2147 * cbSceneParam._m0[63u].x)));
        float _2364 = fma(_2159, cbSceneParam._m0[60u].w, fma(_2155, cbSceneParam._m0[60u].z, fma(_2151, cbSceneParam._m0[60u].y, _2147 * cbSceneParam._m0[60u].x))) / _2363;
        float _2365 = fma(_2159, cbSceneParam._m0[61u].w, fma(_2155, cbSceneParam._m0[61u].z, fma(_2151, cbSceneParam._m0[61u].y, _2147 * cbSceneParam._m0[61u].x))) / _2363;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2364 >= cbSceneParam._m0[64u].x) && (_2365 >= cbSceneParam._m0[64u].y)) && (_2364 <= cbSceneParam._m0[64u].z)) && (_2365 <= cbSceneParam._m0[64u].w))
        {
            float _2503 = fma(_2159, cbSceneParam._m0[62u].w, fma(_2155, cbSceneParam._m0[62u].z, fma(_2151, cbSceneParam._m0[62u].y, _2147 * cbSceneParam._m0[62u].x))) / _2363;
            float _2507 = isnan(cbSceneParam._m0[41u].w) ? _2503 : (isnan(_2503) ? cbSceneParam._m0[41u].w : max(_2503, cbSceneParam._m0[41u].w));
            float _2550 = (cbSceneParam._m0[33u].x - sqrt(((_2161 * _2161) + (_2160 * _2160)) + (_2162 * _2162))) * cbSceneParam._m0[33u].y;
            float _4733 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
            float _2557 = (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2364, cbSceneParam._m0[33u].w + _2365), _2507), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2364, _2365 - cbSceneParam._m0[33u].z), _2507), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2364 - cbSceneParam._m0[33u].z, _2365 - cbSceneParam._m0[33u].w), _2507), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2364 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2365), _2507), 0.0)).x), vec4(0.25)));
            float _2561 = 1.0 - (_2557 * cbSceneParam._m0[34u].x);
            float _2562 = 1.0 - (_2557 * cbSceneParam._m0[34u].y);
            float _2563 = 1.0 - (_2557 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2563) ? _2311 : (isnan(_2311) ? _2563 : min(_2311, _2563));
            frontier_phi_37_36_ladder_1 = isnan(_2562) ? _2310 : (isnan(_2310) ? _2562 : min(_2310, _2562));
            frontier_phi_37_36_ladder_2 = isnan(_2561) ? _2309 : (isnan(_2309) ? _2561 : min(_2309, _2561));
        }
        else
        {
            frontier_phi_37_36_ladder = _2311;
            frontier_phi_37_36_ladder_1 = _2310;
            frontier_phi_37_36_ladder_2 = _2309;
        }
        _2375 = frontier_phi_37_36_ladder_2;
        _2377 = frontier_phi_37_36_ladder_1;
        _2379 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2375 = _2309;
        _2377 = _2310;
        _2379 = _2311;
    }
    uvec4 _2384 = floatBitsToUint(cbInstanceData._m0[_1019 + 5u]);
    uint _2386 = _2384.x * 14u;
    uint _2387 = _2386 + 13u;
    float _2394 = _1059 + (-1.0);
    float _2399 = (cbLight._m0[_2387].x * _2394) + 1.0;
    float _2400 = (cbLight._m0[_2387].y * _2394) + 1.0;
    float _2401 = (cbLight._m0[_2387].z * _2394) + 1.0;
    float _2402 = (cbLight._m0[_2387].w * _2394) + 1.0;
    uint _2403 = _2386 + 5u;
    float _2409 = isnan(1.0) ? _2400 : (isnan(_2400) ? 1.0 : min(_2400, 1.0));
    uint _2413 = _2386 + 4u;
    float _2422 = isnan(1.0) ? _2399 : (isnan(_2399) ? 1.0 : min(_2399, 1.0));
    uint _2426 = _2386 | 1u;
    float _2437 = dot(vec3(cbLight._m0[_2386].xyz), vec3(_880, _881, _882));
    float _2440 = dot(vec3(cbLight._m0[_2426].xyz), vec3(_880, _881, _882));
    float _4769 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _4780 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2445 = (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * 0.3183098733425140380859375;
    float _2447 = (isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0))) * 0.3183098733425140380859375;
    float _2454 = ((cbLight._m0[_2403].x * _2409) * _2447) + (((cbLight._m0[_2413].x * _2375) * _2422) * _2445);
    float _2455 = ((_2409 * cbLight._m0[_2403].y) * _2447) + (((cbLight._m0[_2413].y * _2377) * _2422) * _2445);
    float _2456 = ((_2409 * cbLight._m0[_2403].z) * _2447) + (((cbLight._m0[_2413].z * _2379) * _2422) * _2445);
    uvec4 _2460 = floatBitsToUint(cbLight._m0[_2386 + 12u]);
    bool _2462 = _2460.x == 0u;
    float _2564;
    float _2566;
    float _2568;
    if (_2462)
    {
        _2564 = _2454;
        _2566 = _2455;
        _2568 = _2456;
    }
    else
    {
        uint _2572 = _2386 + 6u;
        float _2588 = (dot(vec3(cbLight._m0[_2386 + 2u].xyz), vec3(_880, _881, _882)) * 0.5) + 0.5;
        float _2589 = _2588 * _2588;
        float _4791 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2590 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
        float _2591 = isnan(1.0) ? _2401 : (isnan(_2401) ? 1.0 : min(_2401, 1.0));
        _2564 = (((cbLight._m0[_2572].x * 0.3183098733425140380859375) * _2590) * _2591) + _2454;
        _2566 = (((cbLight._m0[_2572].y * 0.3183098733425140380859375) * _2590) * _2591) + _2455;
        _2568 = (((cbLight._m0[_2572].z * 0.3183098733425140380859375) * _2590) * _2591) + _2456;
    }
    bool _2571 = _2460.y == 0u;
    float _2626;
    float _2628;
    float _2630;
    if (_2571)
    {
        _2626 = _2564;
        _2628 = _2566;
        _2630 = _2568;
    }
    else
    {
        uint _2799 = _2386 + 7u;
        float _2815 = (dot(vec3(cbLight._m0[_2386 + 3u].xyz), vec3(_880, _881, _882)) * 0.5) + 0.5;
        float _2816 = _2815 * _2815;
        float _4807 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        float _2817 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
        float _2818 = isnan(1.0) ? _2402 : (isnan(_2402) ? 1.0 : min(_2402, 1.0));
        _2626 = (((cbLight._m0[_2799].x * 0.3183098733425140380859375) * _2817) * _2818) + _2564;
        _2628 = (((cbLight._m0[_2799].y * 0.3183098733425140380859375) * _2817) * _2818) + _2566;
        _2630 = (((cbLight._m0[_2799].z * 0.3183098733425140380859375) * _2817) * _2818) + _2568;
    }
    uint _2633 = _2386 + 8u;
    float _2646 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2386].w)) * _884) * 0.949999988079071044921875);
    float _2647 = _2646 * _2646;
    float _2648 = cbLight._m0[_2386].x + _961;
    float _2649 = cbLight._m0[_2386].y + _962;
    float _2650 = cbLight._m0[_2386].z + _963;
    float _2654 = inversesqrt(dot(vec3(_2648, _2649, _2650), vec3(_2648, _2649, _2650)));
    float _2655 = _2654 * _2648;
    float _2656 = _2654 * _2649;
    float _2657 = _2654 * _2650;
    float _2658 = dot(vec3(_880, _881, _882), vec3(cbLight._m0[_2386].xyz));
    float _4823 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
    float _2661 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
    float _4834 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _2662 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
    float _2663 = dot(vec3(_880, _881, _882), vec3(_2655, _2656, _2657));
    float _4845 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
    float _2666 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
    float _2667 = dot(vec3(cbLight._m0[_2386].xyz), vec3(_2655, _2656, _2657));
    float _4856 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
    float _2671 = _2647 * _2647;
    float _2675 = ((_2666 * _2666) * (_2671 + (-1.0))) + 1.0;
    float _2683 = exp2(log2(1.0 - (isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0)))) * 5.0);
    float _2684 = 0.959999978542327880859375 - _1041;
    float _2686 = 0.959999978542327880859375 - _1042;
    float _2687 = 0.959999978542327880859375 - _1043;
    float _2694 = 1.0 - _2647;
    float _2705 = (0.5 / (((_2662 * ((_2661 * _2694) + _2647)) + 9.9999999392252902907785028219223e-09) + (((_2662 * _2694) + _2647) * _2661))) * _2661;
    float _4867 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
    float _2707 = (isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0))) * (_2671 / ((_2675 * _2675) * 3.141590118408203125));
    uint _2721 = _2386 + 9u;
    float _2732 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2426].w)) * _884) * 0.949999988079071044921875);
    float _2733 = _2732 * _2732;
    float _2734 = cbLight._m0[_2426].x + _961;
    float _2735 = cbLight._m0[_2426].y + _962;
    float _2736 = cbLight._m0[_2426].z + _963;
    float _2740 = inversesqrt(dot(vec3(_2734, _2735, _2736), vec3(_2734, _2735, _2736)));
    float _2741 = _2740 * _2734;
    float _2742 = _2740 * _2735;
    float _2743 = _2740 * _2736;
    float _2744 = dot(vec3(_880, _881, _882), vec3(cbLight._m0[_2426].xyz));
    float _4878 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
    float _2747 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
    float _2748 = dot(vec3(_880, _881, _882), vec3(_2741, _2742, _2743));
    float _4889 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
    float _2751 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
    float _2752 = dot(vec3(cbLight._m0[_2426].xyz), vec3(_2741, _2742, _2743));
    float _4900 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
    float _2756 = _2733 * _2733;
    float _2760 = ((_2751 * _2751) * (_2756 + (-1.0))) + 1.0;
    float _2767 = exp2(log2(1.0 - (isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0)))) * 5.0);
    float _2774 = 1.0 - _2733;
    float _2784 = (0.5 / (((_2662 * ((_2747 * _2774) + _2733)) + 9.9999999392252902907785028219223e-09) + (((_2662 * _2774) + _2733) * _2747))) * _2747;
    float _4911 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
    float _2786 = (isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0))) * (_2756 / ((_2760 * _2760) * 3.141590118408203125));
    float _2796 = (((((_2767 * _2684) + _1044) * cbLight._m0[_2721].x) * _2786) * _2409) + ((((cbLight._m0[_2633].x * _2375) * ((_2683 * _2684) + _1044)) * _2707) * _2422);
    float _2797 = (((((_2767 * _2686) + _1046) * cbLight._m0[_2721].y) * _2786) * _2409) + ((((cbLight._m0[_2633].y * _2377) * ((_2683 * _2686) + _1046)) * _2707) * _2422);
    float _2798 = (((((_2767 * _2687) + _1047) * cbLight._m0[_2721].z) * _2786) * _2409) + ((((cbLight._m0[_2633].z * _2379) * ((_2683 * _2687) + _1047)) * _2707) * _2422);
    float _2854;
    float _2856;
    float _2858;
    if (_2462)
    {
        _2854 = _2796;
        _2856 = _2797;
        _2858 = _2798;
    }
    else
    {
        uint _2860 = _2386 + 2u;
        uint _2864 = _2386 + 10u;
        float _2878 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2860].w)) * _884) * 0.949999988079071044921875);
        float _2879 = _2878 * _2878;
        float _2880 = cbLight._m0[_2860].x + _961;
        float _2881 = cbLight._m0[_2860].y + _962;
        float _2882 = cbLight._m0[_2860].z + _963;
        float _2886 = inversesqrt(dot(vec3(_2880, _2881, _2882), vec3(_2880, _2881, _2882)));
        float _2887 = _2886 * _2880;
        float _2888 = _2886 * _2881;
        float _2889 = _2886 * _2882;
        float _2890 = dot(vec3(_880, _881, _882), vec3(cbLight._m0[_2860].xyz));
        float _4922 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
        float _2893 = isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0));
        float _2894 = dot(vec3(_880, _881, _882), vec3(_2887, _2888, _2889));
        float _4933 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
        float _2897 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
        float _2898 = dot(vec3(cbLight._m0[_2860].xyz), vec3(_2887, _2888, _2889));
        float _4944 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
        float _2902 = _2879 * _2879;
        float _2906 = ((_2897 * _2897) * (_2902 + (-1.0))) + 1.0;
        float _2913 = exp2(log2(1.0 - (isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0)))) * 5.0);
        float _2920 = 1.0 - _2879;
        float _2930 = (0.5 / (((_2662 * ((_2893 * _2920) + _2879)) + 9.9999999392252902907785028219223e-09) + (((_2662 * _2920) + _2879) * _2893))) * _2893;
        float _4955 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
        float _2932 = (isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0))) * (_2902 / ((_2906 * _2906) * 3.141590118408203125));
        float _2933 = isnan(1.0) ? _2401 : (isnan(_2401) ? 1.0 : min(_2401, 1.0));
        _2854 = (((((_2913 * _2684) + _1044) * cbLight._m0[_2864].x) * _2932) * _2933) + _2796;
        _2856 = (((((_2913 * _2686) + _1046) * cbLight._m0[_2864].y) * _2932) * _2933) + _2797;
        _2858 = (((((_2913 * _2687) + _1047) * cbLight._m0[_2864].z) * _2932) * _2933) + _2798;
    }
    float _2964;
    float _2966;
    float _2968;
    if (_2571)
    {
        _2964 = _2854;
        _2966 = _2856;
        _2968 = _2858;
    }
    else
    {
        uint _2975 = _2386 + 3u;
        uint _2979 = _2386 + 11u;
        float _2993 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2975].w)) * _884) * 0.949999988079071044921875);
        float _2994 = _2993 * _2993;
        float _2995 = cbLight._m0[_2975].x + _961;
        float _2996 = cbLight._m0[_2975].y + _962;
        float _2997 = cbLight._m0[_2975].z + _963;
        float _3001 = inversesqrt(dot(vec3(_2995, _2996, _2997), vec3(_2995, _2996, _2997)));
        float _3002 = _3001 * _2995;
        float _3003 = _3001 * _2996;
        float _3004 = _3001 * _2997;
        float _3005 = dot(vec3(_880, _881, _882), vec3(cbLight._m0[_2975].xyz));
        float _4971 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
        float _3008 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
        float _3009 = dot(vec3(_880, _881, _882), vec3(_3002, _3003, _3004));
        float _4982 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
        float _3012 = isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0));
        float _3013 = dot(vec3(cbLight._m0[_2975].xyz), vec3(_3002, _3003, _3004));
        float _4993 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
        float _3017 = _2994 * _2994;
        float _3021 = ((_3012 * _3012) * (_3017 + (-1.0))) + 1.0;
        float _3028 = exp2(log2(1.0 - (isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0)))) * 5.0);
        float _3035 = 1.0 - _2994;
        float _3045 = (0.5 / (((_2662 * ((_3008 * _3035) + _2994)) + 9.9999999392252902907785028219223e-09) + (((_2662 * _3035) + _2994) * _3008))) * _3008;
        float _5004 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
        float _3047 = (isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0))) * (_3017 / ((_3021 * _3021) * 3.141590118408203125));
        float _3048 = isnan(1.0) ? _2402 : (isnan(_2402) ? 1.0 : min(_2402, 1.0));
        _2964 = (((((_3028 * _2684) + _1044) * cbLight._m0[_2979].x) * _3047) * _3048) + _2854;
        _2966 = (((((_3028 * _2686) + _1046) * cbLight._m0[_2979].y) * _3047) * _3048) + _2856;
        _2968 = (((((_3028 * _2687) + _1047) * cbLight._m0[_2979].z) * _3047) * _3048) + _2858;
    }
    float _3114;
    float _3116;
    float _3118;
    float _3120;
    float _3122;
    float _3124;
    if (_2384.y == 0u)
    {
        uvec4 _3069 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3070 = _3069.x;
        uint _3081 = uint((float(_3069.y) * floor(float(uint(cbSceneParam._m0[85u].y * _982) / _3070))) + floor(float(uint(cbSceneParam._m0[85u].x * _981) / _3070)));
        float _3091 = (log2(_2162 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3092 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
        uint _3095 = uint(isnan(14.0) ? _3092 : (isnan(_3092) ? 14.0 : min(_3092, 14.0)));
        uvec4 _3100 = texelFetch(g_lightClusterGridBuffer, int(((_3095 << 2u) + (_3081 << 6u)) >> 2u));
        uint _3101 = _3100.x;
        uint _3102 = _3069.z;
        float _3183;
        float _3185;
        float _3187;
        float _3189;
        float _3191;
        float _3193;
        if (((((1u << ((_3102 >> 4u) & 15u)) + 4294967295u) & _3101) == 0u) || ((_3102 & 240u) == 0u))
        {
            _3183 = 0.0;
            _3185 = 0.0;
            _3187 = 0.0;
            _3189 = 0.0;
            _3191 = 0.0;
            _3193 = 0.0;
        }
        else
        {
            float _3184;
            float _3186;
            float _3188;
            float _3190;
            float _3192;
            float _3194;
            float _3336 = 0.0;
            float _3337 = 0.0;
            float _3338 = 0.0;
            float _3339 = 0.0;
            float _3340 = 0.0;
            float _3341 = 0.0;
            uint _3342 = 0u;
            uint _3351;
            bool _3352;
            for (;;)
            {
                _3351 = texelFetch(g_lightClassification, int((((_3095 << 5u) + (_3081 << 9u)) + (_3342 << 2u)) >> 2u)).x;
                _3352 = _3351 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3352)
                {
                    frontier_phi_71_pred = _3341;
                    frontier_phi_71_pred_1 = _3340;
                    frontier_phi_71_pred_2 = _3339;
                    frontier_phi_71_pred_3 = _3338;
                    frontier_phi_71_pred_4 = _3337;
                    frontier_phi_71_pred_5 = _3336;
                }
                else
                {
                    float _3481;
                    float _3482;
                    float _3483;
                    float _3484;
                    float _3485;
                    float _3486;
                    uint _3487;
                    _3481 = _3336;
                    _3482 = _3337;
                    _3483 = _3338;
                    _3484 = _3339;
                    _3485 = _3340;
                    _3486 = _3341;
                    _3487 = _3351;
                    float _3408;
                    float _3409;
                    float _3410;
                    float _3411;
                    float _3412;
                    float _3413;
                    for (;;)
                    {
                        uint _3491 = uint(findLSB(_3487)) + (_3342 << 5u);
                        uint _3488 = (_3487 + 4294967295u) & _3487;
                        uint _3493 = _3491 * 48u;
                        vec4 _3507 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3493)).x, texelFetch(g_PointLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3493 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3493 + 3u)).x));
                        uint _3513 = (_3491 * 48u) + 4u;
                        vec4 _3526 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3513)).x, texelFetch(g_PointLightRenderingBuffer, int(_3513 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3513 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3513 + 3u)).x));
                        uint _3532 = (_3491 * 48u) + 8u;
                        vec3 _3543 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3532)).x, texelFetch(g_PointLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3532 + 2u)).x));
                        float _3547 = _3507.x - _2160;
                        float _3548 = _3507.y - _2161;
                        float _3549 = _3507.z - _2162;
                        float _3550 = dot(vec3(_3547, _3548, _3549), vec3(_3547, _3548, _3549));
                        float _3553 = inversesqrt(_3550);
                        float _3554 = _3553 * _3547;
                        float _3555 = _3553 * _3548;
                        float _3556 = _3553 * _3549;
                        float _3557 = dot(vec3(_1000, _1003, _1006), vec3(_3554, _3555, _3556));
                        float _3562 = 1.0 - (_3550 * _3507.w);
                        float _5030 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                        float _3563 = isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0));
                        float _3564 = sqrt(_3550) * _3526.w;
                        float _3567 = 1.39999997615814208984375 / (_3564 + 1.39999997615814208984375);
                        float _3568 = _3567 * _3567;
                        float _3571 = ((1.0 - _3568) * _3557) + _3568;
                        float _3574 = _3564 * _3564;
                        float _3578 = ((isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0))) * _3563) / ((_3574 * 0.699999988079071044921875) + 1.0);
                        float _3582 = (-0.0) - _2160;
                        float _3583 = (-0.0) - _2161;
                        float _3584 = (-0.0) - _2162;
                        float _3588 = inversesqrt(dot(vec3(_3582, _3583, _3584), vec3(_3582, _3583, _3584)));
                        float _3589 = _3588 * _3582;
                        float _3590 = _3588 * _3583;
                        float _3591 = _3588 * _3584;
                        float _3598 = exp2(log2(1.0 / ((_3574 * 3.5) + 5.0)) * 0.25);
                        float _3599 = 1.0 - _1075;
                        float _3606 = sqrt(1.0 - ((1.0 - (_3599 * _3599)) * (1.0 - (_3598 * _3598))));
                        float _3607 = _3606 * _3606;
                        float _3608 = _3607 * _3607;
                        float _3609 = _3589 + _3554;
                        float _3610 = _3590 + _3555;
                        float _3611 = _3591 + _3556;
                        float _3615 = inversesqrt(dot(vec3(_3609, _3610, _3611), vec3(_3609, _3610, _3611)));
                        float _3619 = dot(vec3(_1000, _1003, _1006), vec3(_3589, _3590, _3591));
                        float _5046 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                        float _3622 = isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0));
                        float _3623 = dot(vec3(_1000, _1003, _1006), vec3(_3615 * _3609, _3615 * _3610, _3615 * _3611));
                        float _5057 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                        float _3626 = isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0));
                        float _3630 = ((_3626 * _3626) * (_3608 + (-1.0))) + 1.0;
                        float _3631 = _3567 * _3607;
                        float _3632 = _3631 * _3631;
                        float _3635 = ((1.0 - _3632) * _3557) + _3632;
                        float _5068 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                        float _3636 = isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0));
                        float _3637 = 1.0 - _3607;
                        float _3647 = (0.5 / (((_3636 * ((_3622 * _3637) + _3607)) + 9.9999999392252902907785028219223e-09) + (((_3636 * _3637) + _3607) * _3622))) * _3636;
                        float _5079 = isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0));
                        float _3658 = (((_3608 * 3.1415927410125732421875) * (isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0)))) / ((_3630 * _3630) * ((_3574 * 2.1991131305694580078125) + 3.141590118408203125))) * _3563;
                        _3411 = (_3578 * _3526.x) + _3484;
                        _3412 = (_3578 * _3526.y) + _3485;
                        _3413 = (_3578 * _3526.z) + _3486;
                        _3408 = (_3658 * _3543.x) + _3481;
                        _3409 = (_3658 * _3543.y) + _3482;
                        _3410 = (_3658 * _3543.z) + _3483;
                        if (_3488 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3481 = _3408;
                            _3482 = _3409;
                            _3483 = _3410;
                            _3484 = _3411;
                            _3485 = _3412;
                            _3486 = _3413;
                            _3487 = _3488;
                        }
                    }
                    frontier_phi_71_pred = _3413;
                    frontier_phi_71_pred_1 = _3412;
                    frontier_phi_71_pred_2 = _3411;
                    frontier_phi_71_pred_3 = _3410;
                    frontier_phi_71_pred_4 = _3409;
                    frontier_phi_71_pred_5 = _3408;
                }
                _3194 = frontier_phi_71_pred;
                _3192 = frontier_phi_71_pred_1;
                _3190 = frontier_phi_71_pred_2;
                _3188 = frontier_phi_71_pred_3;
                _3186 = frontier_phi_71_pred_4;
                _3184 = frontier_phi_71_pred_5;
                uint _3343 = _3342 + 1u;
                if (_3343 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3336 = _3184;
                    _3337 = _3186;
                    _3338 = _3188;
                    _3339 = _3190;
                    _3340 = _3192;
                    _3341 = _3194;
                    _3342 = _3343;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3183 = _3184;
            _3185 = _3186;
            _3187 = _3188;
            _3189 = _3190;
            _3191 = _3192;
            _3193 = _3194;
        }
        uvec4 _3197 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3198 = _3197.z;
        uint _3200 = (_3198 >> 8u) & 15u;
        float _3304;
        float _3306;
        float _3308;
        float _3310;
        float _3312;
        float _3314;
        if (((4294967295u << _3200) & _3101) == 0u)
        {
            _3304 = _3183;
            _3306 = _3185;
            _3308 = _3187;
            _3310 = _3189;
            _3312 = _3191;
            _3314 = _3193;
        }
        else
        {
            float _3329 = inversesqrt(dot(vec3(_2160, _2161, _2162), vec3(_2160, _2161, _2162)));
            float _3330 = _3329 * _2160;
            float _3331 = _3329 * _2161;
            float _3332 = _3329 * _2162;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3200 < ((_3198 >> 12u) & 15u))
            {
                float _3305;
                float _3307;
                float _3309;
                float _3311;
                float _3313;
                float _3315;
                float _3464 = _3183;
                float _3465 = _3185;
                float _3466 = _3187;
                float _3467 = _3189;
                float _3468 = _3191;
                float _3469 = _3193;
                uint _3470 = _3200;
                uint _3479;
                bool _3480;
                for (;;)
                {
                    _3479 = texelFetch(g_lightClassification, int((((_3095 << 5u) + (_3081 << 9u)) + (_3470 << 2u)) >> 2u)).x;
                    _3480 = _3479 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3480)
                    {
                        frontier_phi_82_pred = _3469;
                        frontier_phi_82_pred_1 = _3468;
                        frontier_phi_82_pred_2 = _3467;
                        frontier_phi_82_pred_3 = _3466;
                        frontier_phi_82_pred_4 = _3465;
                        frontier_phi_82_pred_5 = _3464;
                    }
                    else
                    {
                        float _3672;
                        float _3673;
                        float _3674;
                        float _3675;
                        float _3676;
                        float _3677;
                        float _3965;
                        float _3966;
                        float _3967;
                        float _3968;
                        float _3969;
                        float _3970;
                        float _3685 = _3464;
                        float _3686 = _3465;
                        float _3687 = _3466;
                        float _3688 = _3467;
                        float _3689 = _3468;
                        float _3690 = _3469;
                        uint _3691 = _3479;
                        uint _3692;
                        vec4 _3717;
                        float _3718;
                        vec4 _3733;
                        vec3 _3745;
                        vec4 _3760;
                        vec4 _3775;
                        float _3821;
                        bool _3822;
                        for (;;)
                        {
                            uint _3702 = ((_3470 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3691));
                            _3692 = (_3691 + 4294967295u) & _3691;
                            uint _3704 = _3702 * 40u;
                            _3717 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3704)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 3u)).x));
                            _3718 = _3717.w;
                            uint _3720 = (_3702 * 40u) + 4u;
                            _3733 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3720)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 3u)).x));
                            uint _3735 = (_3702 * 40u) + 8u;
                            _3745 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3735)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 2u)).x));
                            uint _3747 = (_3702 * 40u) + 16u;
                            _3760 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3747)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 3u)).x));
                            uint _3762 = (_3702 * 40u) + 20u;
                            _3775 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3762)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 3u)).x));
                            uint _3777 = (_3702 * 40u) + 24u;
                            vec4 _3790 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3777)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 3u)).x));
                            uint _3796 = (_3702 * 40u) + 28u;
                            vec4 _3809 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3796)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3796 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3796 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3796 + 3u)).x));
                            _3821 = fma(_2162, _3809.z, fma(_2161, _3809.y, _3809.x * _2160)) + _3809.w;
                            _3822 = !((fma(_2162, _3790.z, fma(_2161, _3790.y, _3790.x * _2160)) + _3790.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3822)
                            {
                                float _3849 = _3717.x - _2160;
                                float _3850 = _3717.y - _2161;
                                float _3851 = _3717.z - _2162;
                                float _3852 = dot(vec3(_3849, _3850, _3851), vec3(_3849, _3850, _3851));
                                float _3855 = inversesqrt(_3852);
                                float _3856 = _3855 * _3849;
                                float _3857 = _3855 * _3850;
                                float _3858 = _3855 * _3851;
                                float _3862 = 1.0 - (_3852 / (_3718 * _3718));
                                float _5090 = isnan(0.0) ? _3862 : (isnan(_3862) ? 0.0 : max(_3862, 0.0));
                                float _3863 = isnan(1.0) ? _5090 : (isnan(_5090) ? 1.0 : min(_5090, 1.0));
                                float _3867 = sqrt(_3852) * _3733.w;
                                float _3869 = 1.39999997615814208984375 / (_3867 + 1.39999997615814208984375);
                                float _3870 = _3869 * _3869;
                                float _3873 = ((1.0 - _3870) * dot(vec3(_3856, _3857, _3858), vec3(_1000, _1003, _1006))) + _3870;
                                float _3876 = _3867 * _3867;
                                float _3880 = (fma(_2162, _3760.z, fma(_2161, _3760.y, _3760.x * _2160)) + _3760.w) / _3821;
                                float _3881 = (fma(_2162, _3775.z, fma(_2161, _3775.y, _3775.x * _2160)) + _3775.w) / _3821;
                                float _3885 = 1.0 - dot(vec2(_3880, _3881), vec2(_3880, _3881));
                                float _5106 = isnan(0.0) ? _3885 : (isnan(_3885) ? 0.0 : max(_3885, 0.0));
                                float _3886 = isnan(1.0) ? _5106 : (isnan(_5106) ? 1.0 : min(_5106, 1.0));
                                float _3887 = _3886 * (((isnan(0.0) ? _3873 : (isnan(_3873) ? 0.0 : max(_3873, 0.0))) * _3863) / ((_3876 * 0.699999988079071044921875) + 1.0));
                                float _3899 = exp2(log2(1.0 / ((_3876 * 3.5) + 5.0)) * 0.25);
                                float _3900 = 1.0 - _1075;
                                float _3907 = sqrt(1.0 - ((1.0 - (_3900 * _3900)) * (1.0 - (_3899 * _3899))));
                                float _3908 = _3907 * _3907;
                                float _3909 = _3908 * _3908;
                                float _3910 = _3856 - _3330;
                                float _3911 = _3857 - _3331;
                                float _3912 = _3858 - _3332;
                                float _3916 = inversesqrt(dot(vec3(_3910, _3911, _3912), vec3(_3910, _3911, _3912)));
                                float _3920 = dot(vec3(_1000, _1003, _1006), vec3((-0.0) - _3330, (-0.0) - _3331, (-0.0) - _3332));
                                float _5117 = isnan(0.0) ? _3920 : (isnan(_3920) ? 0.0 : max(_3920, 0.0));
                                float _3923 = isnan(1.0) ? _5117 : (isnan(_5117) ? 1.0 : min(_5117, 1.0));
                                float _3924 = dot(vec3(_1000, _1003, _1006), vec3(_3916 * _3910, _3916 * _3911, _3916 * _3912));
                                float _5128 = isnan(0.0) ? _3924 : (isnan(_3924) ? 0.0 : max(_3924, 0.0));
                                float _3927 = isnan(1.0) ? _5128 : (isnan(_5128) ? 1.0 : min(_5128, 1.0));
                                float _3931 = ((_3927 * _3927) * (_3909 + (-1.0))) + 1.0;
                                float _3932 = _3869 * _3908;
                                float _3933 = _3932 * _3932;
                                float _3939 = ((1.0 - _3933) * dot(vec3(_1000, _1003, _1006), vec3(_3856, _3857, _3858))) + _3933;
                                float _5139 = isnan(0.0) ? _3939 : (isnan(_3939) ? 0.0 : max(_3939, 0.0));
                                float _3940 = isnan(1.0) ? _5139 : (isnan(_5139) ? 1.0 : min(_5139, 1.0));
                                float _3941 = 1.0 - _3908;
                                float _3951 = (0.5 / (((_3940 * ((_3923 * _3941) + _3908)) + 9.9999999392252902907785028219223e-09) + (((_3940 * _3941) + _3908) * _3923))) * _3940;
                                float _5150 = isnan(0.0) ? _3951 : (isnan(_3951) ? 0.0 : max(_3951, 0.0));
                                float _3961 = (_3886 * _3863) * (((_3909 * 3.1415927410125732421875) * (isnan(1.0) ? _5150 : (isnan(_5150) ? 1.0 : min(_5150, 1.0)))) / ((_3931 * _3931) * ((_3876 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3887 * _3733.z;
                                frontier_phi_88_pred_1 = _3887 * _3733.y;
                                frontier_phi_88_pred_2 = _3887 * _3733.x;
                                frontier_phi_88_pred_3 = _3961 * _3745.z;
                                frontier_phi_88_pred_4 = _3961 * _3745.y;
                                frontier_phi_88_pred_5 = _3961 * _3745.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3970 = frontier_phi_88_pred;
                            _3969 = frontier_phi_88_pred_1;
                            _3968 = frontier_phi_88_pred_2;
                            _3967 = frontier_phi_88_pred_3;
                            _3966 = frontier_phi_88_pred_4;
                            _3965 = frontier_phi_88_pred_5;
                            _3675 = _3968 + _3688;
                            _3676 = _3969 + _3689;
                            _3677 = _3970 + _3690;
                            _3672 = _3965 + _3685;
                            _3673 = _3966 + _3686;
                            _3674 = _3967 + _3687;
                            if (_3692 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3685 = _3672;
                                _3686 = _3673;
                                _3687 = _3674;
                                _3688 = _3675;
                                _3689 = _3676;
                                _3690 = _3677;
                                _3691 = _3692;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3677;
                        frontier_phi_82_pred_1 = _3676;
                        frontier_phi_82_pred_2 = _3675;
                        frontier_phi_82_pred_3 = _3674;
                        frontier_phi_82_pred_4 = _3673;
                        frontier_phi_82_pred_5 = _3672;
                    }
                    _3315 = frontier_phi_82_pred;
                    _3313 = frontier_phi_82_pred_1;
                    _3311 = frontier_phi_82_pred_2;
                    _3309 = frontier_phi_82_pred_3;
                    _3307 = frontier_phi_82_pred_4;
                    _3305 = frontier_phi_82_pred_5;
                    uint _3471 = _3470 + 1u;
                    if (_3471 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3464 = _3305;
                        _3465 = _3307;
                        _3466 = _3309;
                        _3467 = _3311;
                        _3468 = _3313;
                        _3469 = _3315;
                        _3470 = _3471;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3311;
                frontier_phi_63_64_ladder_1 = _3315;
                frontier_phi_63_64_ladder_2 = _3313;
                frontier_phi_63_64_ladder_3 = _3309;
                frontier_phi_63_64_ladder_4 = _3307;
                frontier_phi_63_64_ladder_5 = _3305;
            }
            else
            {
                frontier_phi_63_64_ladder = _3189;
                frontier_phi_63_64_ladder_1 = _3193;
                frontier_phi_63_64_ladder_2 = _3191;
                frontier_phi_63_64_ladder_3 = _3187;
                frontier_phi_63_64_ladder_4 = _3185;
                frontier_phi_63_64_ladder_5 = _3183;
            }
            _3304 = frontier_phi_63_64_ladder_5;
            _3306 = frontier_phi_63_64_ladder_4;
            _3308 = frontier_phi_63_64_ladder_3;
            _3310 = frontier_phi_63_64_ladder;
            _3312 = frontier_phi_63_64_ladder_2;
            _3314 = frontier_phi_63_64_ladder_1;
        }
        float _3319 = isnan(1.0) ? _1059 : (isnan(_1059) ? 1.0 : min(_1059, 1.0));
        _3114 = (_3319 * _3310) + _2626;
        _3116 = (_3319 * _3312) + _2628;
        _3118 = (_3319 * _3314) + _2630;
        _3120 = ((_3304 * _1044) * _3319) + _2964;
        _3122 = ((_3306 * _1046) * _3319) + _2966;
        _3124 = ((_3308 * _1047) * _3319) + _2968;
    }
    else
    {
        _3114 = _2626;
        _3116 = _2628;
        _3118 = _2630;
        _3120 = _2964;
        _3122 = _2966;
        _3124 = _2968;
    }
    float _5166 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _5177 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _5188 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _5199 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _3142 = ((isnan(1.0) ? _5166 : (isnan(_5166) ? 1.0 : min(_5166, 1.0))) * (_3114 + ((isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))) * _1059))) + ((_3120 + ((isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0))) * _1894)) * cbPerFrame._m0[3u].x);
    float _3143 = ((isnan(1.0) ? _5177 : (isnan(_5177) ? 1.0 : min(_5177, 1.0))) * (_3116 + ((isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))) * _1059))) + ((_3122 + ((isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0))) * _1894)) * cbPerFrame._m0[3u].x);
    float _3144 = ((isnan(1.0) ? _5188 : (isnan(_5188) ? 1.0 : min(_5188, 1.0))) * (_3118 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1059))) + ((_3124 + ((isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0))) * _1894)) * cbPerFrame._m0[3u].x);
    float _3149 = cbInstanceData._m0[_1019 + 6u].w * (isnan(1.0) ? _5199 : (isnan(_5199) ? 1.0 : min(_5199, 1.0)));
    float _3154 = _981 / cbSceneParam._m0[86u].x;
    float _3155 = _982 / cbSceneParam._m0[86u].y;
    vec4 _3169 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3154, _3155, (log2((isnan(cbSceneParam._m0[77u].w) ? _904 : (isnan(_904) ? cbSceneParam._m0[77u].w : min(_904, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3171 = _3169.x;
    float _3172 = _3169.y;
    float _3173 = _3169.z;
    float _3174 = _3169.w;
    float _3246;
    float _3248;
    float _3250;
    float _3252;
    if (_904 > cbSceneParam._m0[78u].w)
    {
        float _3208 = isnan(_904) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _904 : min(cbSceneParam._m0[80u].w, _904));
        float _3209 = _3208 / _904;
        float _3220 = _3209 * _954;
        float _3221 = _955 * _3209;
        float _3222 = (-0.0) - _3221;
        float _3224 = _3209 * _956;
        float _3226 = (cbSceneParam._m0[77u].w * _3222) / _3208;
        float _3227 = _3226 + cbSceneParam._m0[79u].w;
        float _3228 = cbSceneParam._m0[79u].w - _3221;
        float _3234 = sqrt(((_3220 * _3220) + (_3221 * _3221)) + (_3224 * _3224));
        float _3237 = (1.0 - (cbSceneParam._m0[77u].w / _3208)) * _3234;
        float _3242 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3244 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3421;
        if (abs((_3222 - _3226) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3421 = ((((_3227 > 0.0) ? exp2(_3242 * _3227) : (2.0 - exp2(_3244 * _3227))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3237;
        }
        else
        {
            float _3365 = 1.0 / cbSceneParam._m0[80u].x;
            float _3366 = isnan(_3228) ? _3227 : (isnan(_3227) ? _3228 : max(_3227, _3228));
            float _3367 = isnan(_3228) ? _3227 : (isnan(_3227) ? _3228 : min(_3227, _3228));
            float _3376 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : min(_3366, 0.0));
            float _3377 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : min(_3367, 0.0));
            _3421 = ((abs(_3234 / _3222) * cbSceneParam._m0[80u].y) * ((((_3376 - _3377) * 2.0) - ((exp2(_3242 * (isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0)))) - exp2(_3242 * (isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0))))) * _3365)) - ((exp2(_3244 * _3376) - exp2(_3244 * _3377)) * _3365))) + (_3237 * cbSceneParam._m0[80u].z);
        }
        vec4 _3423 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3154, _3155, 1.0), 0.0);
        float _3432 = exp2((_3421 * (-1.44269502162933349609375)) * (1.0 - _3423.w));
        float _3433 = log2(_3432);
        float _3449 = log2(_3174);
        _3246 = (exp2(_3449 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3433 * cbSceneParam._m0[78u].x)) * _3423.x) / cbSceneParam._m0[78u].x)) + _3171;
        _3248 = (exp2(_3449 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3433 * cbSceneParam._m0[78u].y)) * _3423.y) / cbSceneParam._m0[78u].y)) + _3172;
        _3250 = (exp2(_3449 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3433 * cbSceneParam._m0[78u].z)) * _3423.z) / cbSceneParam._m0[78u].z)) + _3173;
        _3252 = _3432 * _3174;
    }
    else
    {
        _3246 = _3171;
        _3248 = _3172;
        _3250 = _3173;
        _3252 = _3174;
    }
    bool _3459;
    vec4 _3262;
    vec4 _3284;
    float _3286;
    float _3290;
    float _3291;
    float _3292;
    float _3293;
    bool _3303;
    for (;;)
    {
        _3262 = cbMatDynParam._m0[0u];
        float _3264 = roundEven(_3262.y);
        bool _3265 = _3264 == 3.0;
        float _3266 = log2(_3252);
        float _3273 = exp2(_3266 * cbSceneParam._m0[78u].x) * _3142;
        float _3274 = exp2(_3266 * cbSceneParam._m0[78u].y) * _3143;
        float _3275 = exp2(_3266 * cbSceneParam._m0[78u].z) * _3144;
        float _3282 = _970 + (-0.5);
        _3284 = cbMtdParam._m0[1u];
        _3286 = _3284.y * _3282;
        float _3289 = (_3264 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3290 = _3289 * (_3265 ? _3273 : (_3273 + (cbSceneParam._m0[72u].w * _3246)));
        _3291 = _3289 * (_3265 ? _3274 : (_3274 + (cbSceneParam._m0[72u].w * _3248)));
        _3292 = _3289 * (_3265 ? _3275 : (_3275 + (cbSceneParam._m0[72u].w * _3250)));
        _3293 = _3282 * 0.999000012874603271484375;
        _3303 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3303)
        {
            if ((cbInstanceData._m0[_1019 + 7u].x + _3293) < 0.5)
            {
                _3459 = true;
                break;
            }
        }
        uint _3400 = _1020 + uint(_3262.w);
        if ((cbInstanceData._m0[_3400].w < 1.0) && ((cbInstanceData._m0[_3400].w + _3293) < 0.5))
        {
            _3459 = true;
            break;
        }
        if ((_3286 + 1.0) < _3284.x)
        {
            _3459 = true;
            break;
        }
        _3459 = false;
        break;
    }
    float _3663;
    if (_3459)
    {
        discard_state = true;
        _3663 = 0.0;
    }
    else
    {
        _3663 = _3149;
    }
    SV_Target.x = _3290;
    SV_Target.y = _3291;
    SV_Target.z = _3292;
    SV_Target.w = _3663;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3149;
    discard_exit();
}


