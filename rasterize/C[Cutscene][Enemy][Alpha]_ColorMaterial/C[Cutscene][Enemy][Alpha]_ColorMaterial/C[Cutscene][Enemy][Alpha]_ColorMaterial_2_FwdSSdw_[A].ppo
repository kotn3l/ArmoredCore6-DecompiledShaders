#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24;
layout(set = 0, binding = 12) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 13) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 18) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in float TEXCOORD_8;
layout(location = 7, component = 1) in float TEXCOORD_9;
layout(location = 7, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1569;
float _3972;
float _3973;
float _3974;
float _3975;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _319 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _323 = _319.z;
    float _336 = exp2(log2((1.0 - _323) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _337 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _338 = isnan(1.0) ? _337 : (isnan(_337) ? 1.0 : min(_337, 1.0));
    vec4 _355 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _367 = exp2(log2(_355.w * cbMtdParam._m0[29u].y) * cbMtdParam._m0[23u].x);
    float _368 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _369 = isnan(1.0) ? _368 : (isnan(_368) ? 1.0 : min(_368, 1.0));
    float _378 = exp2(log2(cbMtdParam._m0[23u].y * _323) * cbMtdParam._m0[22u].y);
    float _379 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _380 = isnan(1.0) ? _379 : (isnan(_379) ? 1.0 : min(_379, 1.0));
    float _401 = roundEven(5.0 - ((texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _402 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _403 = isnan(4.0) ? _402 : (isnan(_402) ? 4.0 : min(_402, 4.0));
    float _415 = floor(_403);
    vec4 _418 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w, _415));
    vec4 _442 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _453 = cbMtdParam._m0[9u].x * _442.x;
    float _454 = cbMtdParam._m0[9u].y * _442.y;
    float _455 = cbMtdParam._m0[9u].z * _442.z;
    float _462 = (((cbMtdParam._m0[10u].x * _418.x) - _453) * _380) + _453;
    float _463 = (((cbMtdParam._m0[10u].y * _418.y) - _454) * _380) + _454;
    float _464 = (((cbMtdParam._m0[10u].z * _418.z) - _455) * _380) + _455;
    float _470 = exp2(log2(_319.w) * cbMtdParam._m0[23u].w);
    vec4 _483 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _503 = (((cbMtdParam._m0[16u].x * _483.x) - _462) * _470) + _462;
    float _504 = (((cbMtdParam._m0[16u].y * _483.y) - _463) * _470) + _463;
    float _505 = (((cbMtdParam._m0[16u].z * _483.z) - _464) * _470) + _464;
    vec4 _518 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _538 = (((cbMtdParam._m0[19u].x * _518.x) - _503) * _369) + _503;
    float _539 = (((cbMtdParam._m0[19u].y * _518.y) - _504) * _369) + _504;
    float _540 = (((cbMtdParam._m0[19u].z * _518.z) - _505) * _369) + _505;
    vec4 _553 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _578 = (_355.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _553.x) - _538) * _338) + _538);
    float _580 = (_355.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _553.y) - _539) * _338) + _539);
    float _582 = (_355.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _553.z) - _540) * _338) + _540);
    vec4 _595 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _614 = TEXCOORD_5.x - ((cbMtdParam._m0[24u].x * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625));
    float _616 = _614 * (cbMtdParam._m0[24u].z + 1.0);
    float _4024 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _617 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _624 = (_617 * ((cbMtdParam._m0[11u].x * _595.x) - _578)) + _578;
    float _625 = (((cbMtdParam._m0[11u].y * _595.y) - _580) * _617) + _580;
    float _626 = (((cbMtdParam._m0[11u].z * _595.z) - _582) * _617) + _582;
    float _630 = cbMtdParam._m0[28u].x * TEXCOORD_8;
    float _638 = (_630 - (((texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _630))) * (cbMtdParam._m0[27u].w + 1.0);
    float _4035 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _639 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _646 = ((cbMtdParam._m0[21u].x - _624) * _639) + _624;
    float _647 = ((cbMtdParam._m0[21u].y - _625) * _639) + _625;
    float _648 = ((cbMtdParam._m0[21u].z - _626) * _639) + _626;
    vec4 _661 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24, SS_ClampLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.z) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.w) + cbTextureTilingScale._m0[11u].w));
    float _669 = (_661.x + (-1.0)) + (cbMtdParam._m0[28u].y * 2.0);
    float _4046 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _675 = exp2(log2(cbMtdParam._m0[28u].w * (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) * cbMtdParam._m0[28u].z);
    float _4057 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _676 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _213[5];
    float _214[5];
    _213[0u] = cbMtdParam._m0[29u].z;
    _214[0u] = cbMtdParam._m0[29u].w;
    _213[1u] = cbMtdParam._m0[31u].z;
    _214[1u] = cbMtdParam._m0[31u].w;
    _213[2u] = cbMtdParam._m0[31u].x;
    _214[2u] = cbMtdParam._m0[31u].y;
    _213[3u] = cbMtdParam._m0[30u].z;
    _214[3u] = cbMtdParam._m0[30u].w;
    _213[4u] = cbMtdParam._m0[30u].x;
    _214[4u] = cbMtdParam._m0[30u].y;
    float _716 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    uint _718 = uint(int(isnan(4.0) ? _716 : (isnan(_716) ? 4.0 : min(_716, 4.0))));
    float _725 = ((_214[_718] - cbMtdParam._m0[22u].z) * _380) + cbMtdParam._m0[22u].z;
    float _728 = ((cbMtdParam._m0[22u].w - _725) * _470) + _725;
    float _731 = ((cbMtdParam._m0[25u].x - _728) * _369) + _728;
    float _734 = ((cbMtdParam._m0[26u].x - _731) * _338) + _731;
    float _739 = (cbMtdParam._m0[24u].y + 1.0) * _614;
    float _4078 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _740 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _742 = _734 - (_734 * _740);
    float _744 = _742 - (_742 * _630);
    vec4 _758 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w, _415));
    vec4 _776 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _778 = _776.x;
    float _779 = _776.y;
    float _784 = cbMtdParam._m0[22u].x + _776.z;
    float _787 = (((_758.z + _213[_718]) - _784) * _380) + _784;
    vec4 _800 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _811 = (((_800.z - _787) + cbMtdParam._m0[29u].x) * _470) + _787;
    float _816 = ((((_323 * 2.0) * _811) - _811) * cbMtdParam._m0[24u].w) + _811;
    vec4 _828 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _839 = (((cbMtdParam._m0[23u].z + _828.z) - _816) * _369) + _816;
    vec4 _852 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _863 = (((_852.z - _839) + cbMtdParam._m0[26u].y) * _338) + _839;
    vec4 _875 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _886 = ((_875.z - _863) * _740) + _863;
    vec4 _901 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _915 = ((cbMtdParam._m0[27u].y * _630) * ((_901.z * cbMtdParam._m0[27u].x) - _886)) + _886;
    float _930 = ((_758.x - _778) * _380) + _778;
    float _931 = ((_758.y - _779) * _380) + _779;
    float _936 = ((_800.x - _930) * _470) + _930;
    float _937 = ((_800.y - _931) * _470) + _931;
    float _942 = ((_828.x - _936) * _369) + _936;
    float _943 = ((_828.y - _937) * _369) + _937;
    float _952 = ((((_852.x - _942) * _338) + _942) * 2.0) + (-1.0);
    float _953 = ((((_852.y - _943) * _338) + _943) * 2.0) + (-1.0);
    float _954 = dot(vec2(_952, _953), vec2(_952, _953));
    float _4089 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _959 = sqrt(1.0 - (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))));
    float _975 = (((cbMtdParam._m0[25u].y * ((_319.x * 2.0) + (-1.0))) + _952) + (((((_875.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[25u].z) * _740)) + ((((_901.x * 2.0) + (-1.0)) * _630) * cbMtdParam._m0[26u].w);
    float _976 = (((cbMtdParam._m0[25u].y * ((_319.y * 2.0) + (-1.0))) + _953) + (((((_875.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[25u].z) * _740)) + (((cbMtdParam._m0[28u].x * TEXCOORD_9) * ((_901.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _979 = fma(_959, _249 * NORMAL.x, fma(_976, _256 * TANGENT.x, (_242 * _234) * _975));
    float _982 = fma(_959, _249 * NORMAL.y, fma(_976, _256 * TANGENT.y, (_242 * _235) * _975));
    float _985 = fma(_959, _249 * NORMAL.z, fma(_976, _256 * TANGENT.z, (_242 * _236) * _975));
    float _989 = inversesqrt(dot(vec3(_979, _982, _985), vec3(_979, _982, _985)));
    float _990 = _989 * _979;
    float _991 = _989 * _982;
    float _992 = _989 * _985;
    float _4100 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _993 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _4111 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _994 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _4122 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _4133 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _4144 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _4155 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _998 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _1014 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1054 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1064 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1054);
    float _1065 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1054);
    float _1066 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1054);
    float _1070 = inversesqrt(dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066)));
    float _1071 = _1064 * _1070;
    float _1072 = _1065 * _1070;
    float _1073 = _1066 * _1070;
    vec4 _1078 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1080 = _1078.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1250 = sqrt(((_1064 * _1064) + (_1065 * _1065)) + (_1066 * _1066));
        float _1256 = (cbMatDynParam._m0[5u].x * _1250) + cbMatDynParam._m0[5u].y;
        float _4166 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1261 = (cbMatDynParam._m0[5u].z * _1250) + cbMatDynParam._m0[5u].w;
        float _4177 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) - _1257)) + _1257) < ((_1080 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1091 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1092 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1110 = fma(_992, cbSceneParam._m0[5u].z, fma(_991, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _990));
    float _1113 = fma(_992, cbSceneParam._m0[6u].z, fma(_991, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _990));
    float _1116 = fma(_992, cbSceneParam._m0[7u].z, fma(_991, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _990));
    uint _1129 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1130 = _1129 + 9u;
    uint _1131 = _1130 + uint(cbMatDynParam._m0[0u].w);
    float _1137 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) * cbInstanceData._m0[_1131].x;
    float _1138 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) * cbInstanceData._m0[_1131].y;
    float _1139 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) * cbInstanceData._m0[_1131].z;
    float _4188 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
    float _1140 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _4199 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
    float _1141 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _4210 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
    float _1142 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _1143 = 1.0 - _998;
    float _1144 = _1140 * _1143;
    float _1145 = _1141 * _1143;
    float _1146 = _1142 * _1143;
    float _1151 = (_1140 + (-0.039999999105930328369140625)) * _998;
    float _1152 = (_1141 + (-0.039999999105930328369140625)) * _998;
    float _1153 = (_1142 + (-0.039999999105930328369140625)) * _998;
    float _1154 = _1151 + 0.039999999105930328369140625;
    float _1156 = _1152 + 0.039999999105930328369140625;
    float _1157 = _1153 + 0.039999999105930328369140625;
    vec4 _1166 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1091, cbSceneParam._m0[86u].y * _1092));
    float _1169 = _1166.x * TEXCOORD_5.w;
    float _1170 = dot(vec3(_990, _991, _992), vec3(_1071, _1072, _1073));
    float _1173 = _1170 * 2.0;
    float _1177 = (_1173 * _990) - _1071;
    float _1178 = (_1173 * _991) - _1072;
    float _1179 = (_1173 * _992) - _1073;
    float _1183 = abs(dot(vec3(_1071, _1072, _1073), vec3(_990, _991, _992)));
    float _4221 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
    float _1185 = sqrt(_994);
    float _1196 = exp2((_1185 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1185 * 3.0));
    float _1202 = (1.0 - _1196) * ((_1185 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1203 = _1196 * _1185;
    float _1231 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1235 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1239 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1568;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1293 = fma(_1239, cbModelParam._m0[26u].z, fma(_1235, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1231));
        float _1297 = fma(_1239, cbModelParam._m0[27u].z, fma(_1235, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1231));
        float _1301 = fma(_1239, cbModelParam._m0[28u].z, fma(_1235, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1231));
        float _1326 = _1231 + _990;
        float _1327 = _1235 + _991;
        float _1328 = _1239 + _992;
        float _1338 = fma(_1328, cbModelParam._m0[26u].z, fma(_1327, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1326)) - _1293;
        float _1339 = fma(_1328, cbModelParam._m0[27u].z, fma(_1327, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1326)) - _1297;
        float _1340 = fma(_1328, cbModelParam._m0[28u].z, fma(_1327, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1326)) - _1301;
        float _1344 = inversesqrt(dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340)));
        float _1357 = ((_1344 * _1338) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1293 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1358 = ((_1344 * _1339) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1297 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1359 = ((_1344 * _1340) / cbModelParam._m0[34u].z) + ((((((_1301 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1362 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1383 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        float _1396 = exp2((_1362.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1362.x + (-0.5));
        float _1398 = _1396 * (_1362.y + (-0.5));
        float _1399 = _1396 * (_1362.z + (-0.5));
        float _1406 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1369.x + (-0.5));
        float _1408 = _1406 * (_1369.y + (-0.5));
        float _1409 = _1406 * (_1369.z + (-0.5));
        float _1416 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1417 = _1416 * (_1376.x + (-0.5));
        float _1418 = _1416 * (_1376.y + (-0.5));
        float _1419 = _1416 * (_1376.z + (-0.5));
        float _1426 = exp2((_1383.w + (-0.5)) * 20.0) * 2.0;
        float _1427 = _1426 * (_1383.x + (-0.5));
        float _1428 = _1426 * (_1383.y + (-0.5));
        float _1429 = _1426 * (_1383.z + (-0.5));
        float _1430 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1431 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1432 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1433 = _1397 * 0.5;
        float _1434 = _1407 * 0.5;
        float _1435 = _1417 * 0.5;
        float _1436 = dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435));
        float _1441 = (_1436 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1436);
        float _1450 = (dot(vec3(_990, _991, _992), vec3(_1441 * _1433, _1441 * _1434, _1441 * _1435)) + 1.0) * 0.5;
        float _4247 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1460 = sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435)) / (_1430 + 9.9999997473787516355514526367188e-06);
        float _4258 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1462 = _1461 * 2.0;
        float _1466 = (1.0 - _1461) / (_1461 + 1.0);
        float _4269 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1476 = ((((1.0 - _1467) * (_1462 + 2.0)) * exp2(log2(isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_1462 + 1.0))) + _1467) * _1430;
        float _1477 = _1398 * 0.5;
        float _1478 = _1408 * 0.5;
        float _1479 = _1418 * 0.5;
        float _1480 = dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479));
        float _1485 = (_1480 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1480);
        float _1493 = (dot(vec3(_990, _991, _992), vec3(_1485 * _1477, _1485 * _1478, _1485 * _1479)) + 1.0) * 0.5;
        float _4280 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1502 = sqrt(((_1478 * _1478) + (_1477 * _1477)) + (_1479 * _1479)) / (_1431 + 9.9999997473787516355514526367188e-06);
        float _4291 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1504 = _1503 * 2.0;
        float _1508 = (1.0 - _1503) / (_1503 + 1.0);
        float _4302 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1518 = ((((1.0 - _1509) * (_1504 + 2.0)) * exp2(log2(isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_1504 + 1.0))) + _1509) * _1431;
        float _1519 = _1399 * 0.5;
        float _1520 = _1409 * 0.5;
        float _1521 = _1419 * 0.5;
        float _1522 = dot(vec3(_1519, _1520, _1521), vec3(_1519, _1520, _1521));
        float _1527 = (_1522 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1522);
        float _1535 = (dot(vec3(_990, _991, _992), vec3(_1527 * _1519, _1527 * _1520, _1527 * _1521)) + 1.0) * 0.5;
        float _4313 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1544 = sqrt(((_1520 * _1520) + (_1519 * _1519)) + (_1521 * _1521)) / (_1432 + 9.9999997473787516355514526367188e-06);
        float _4324 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1546 = _1545 * 2.0;
        float _1550 = (1.0 - _1545) / (_1545 + 1.0);
        float _4335 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1560 = ((((1.0 - _1551) * (_1546 + 2.0)) * exp2(log2(isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_1546 + 1.0))) + _1551) * _1432;
        _1568 = _1399;
        _1570 = _1398;
        _1571 = _1397;
        _1572 = _1409;
        _1573 = _1408;
        _1574 = _1407;
        _1575 = _1419;
        _1576 = _1418;
        _1577 = _1417;
        _1578 = _1432;
        _1579 = _1431;
        _1580 = _1430;
        _1581 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)));
        _1582 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)));
        _1583 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)));
    }
    else
    {
        _1568 = _1569;
        _1570 = _1569;
        _1571 = _1569;
        _1572 = _1569;
        _1573 = _1569;
        _1574 = _1569;
        _1575 = _1569;
        _1576 = _1569;
        _1577 = _1569;
        _1578 = _1569;
        _1579 = _1569;
        _1580 = _1569;
        _1581 = 0.0;
        _1582 = 0.0;
        _1583 = 0.0;
    }
    float _1878;
    float _1879;
    float _1880;
    float _1881;
    float _1882;
    float _1883;
    float _1884;
    float _1885;
    float _1886;
    float _1887;
    float _1888;
    float _1889;
    float _1890;
    float _1891;
    float _1892;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1609 = fma(_1239, cbModelParam._m0[30u].z, fma(_1235, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1231));
        float _1613 = fma(_1239, cbModelParam._m0[31u].z, fma(_1235, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1231));
        float _1617 = fma(_1239, cbModelParam._m0[32u].z, fma(_1235, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1231));
        float _1640 = _1231 + _990;
        float _1641 = _1235 + _991;
        float _1642 = _1239 + _992;
        float _1652 = fma(_1642, cbModelParam._m0[30u].z, fma(_1641, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1640)) - _1609;
        float _1653 = fma(_1642, cbModelParam._m0[31u].z, fma(_1641, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1640)) - _1613;
        float _1654 = fma(_1642, cbModelParam._m0[32u].z, fma(_1641, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1640)) - _1617;
        float _1658 = inversesqrt(dot(vec3(_1652, _1653, _1654), vec3(_1652, _1653, _1654)));
        float _1671 = ((_1658 * _1652) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1609 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1672 = ((_1658 * _1653) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1613 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1673 = ((_1658 * _1654) / cbModelParam._m0[35u].z) + ((((((_1617 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1675 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1671, _1672, _1673), 0.0);
        vec4 _1682 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1671, _1672, _1673), 0.0);
        vec4 _1689 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1671, _1672, _1673), 0.0);
        vec4 _1696 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1671, _1672, _1673), 0.0);
        float _1708 = exp2((_1675.w + (-0.5)) * 20.0) * 2.0;
        float _1709 = _1708 * (_1675.x + (-0.5));
        float _1710 = _1708 * (_1675.y + (-0.5));
        float _1711 = _1708 * (_1675.z + (-0.5));
        float _1718 = exp2((_1682.w + (-0.5)) * 20.0) * 2.0;
        float _1719 = _1718 * (_1682.x + (-0.5));
        float _1720 = _1718 * (_1682.y + (-0.5));
        float _1721 = _1718 * (_1682.z + (-0.5));
        float _1728 = exp2((_1689.w + (-0.5)) * 20.0) * 2.0;
        float _1729 = _1728 * (_1689.x + (-0.5));
        float _1730 = _1728 * (_1689.y + (-0.5));
        float _1731 = _1728 * (_1689.z + (-0.5));
        float _1738 = exp2((_1696.w + (-0.5)) * 20.0) * 2.0;
        float _1739 = _1738 * (_1696.x + (-0.5));
        float _1740 = _1738 * (_1696.y + (-0.5));
        float _1741 = _1738 * (_1696.z + (-0.5));
        float _1742 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1743 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1744 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1745 = _1709 * 0.5;
        float _1746 = _1719 * 0.5;
        float _1747 = _1729 * 0.5;
        float _1748 = dot(vec3(_1745, _1746, _1747), vec3(_1745, _1746, _1747));
        float _1753 = (_1748 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1748);
        float _1761 = (dot(vec3(_990, _991, _992), vec3(_1753 * _1745, _1753 * _1746, _1753 * _1747)) + 1.0) * 0.5;
        float _4376 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1770 = sqrt(((_1746 * _1746) + (_1745 * _1745)) + (_1747 * _1747)) / (_1742 + 9.9999997473787516355514526367188e-06);
        float _4387 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1771 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _1772 = _1771 * 2.0;
        float _1776 = (1.0 - _1771) / (_1771 + 1.0);
        float _4398 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1777 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _1786 = ((((1.0 - _1777) * (_1772 + 2.0)) * exp2(log2(isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_1772 + 1.0))) + _1777) * _1742;
        float _1787 = _1710 * 0.5;
        float _1788 = _1720 * 0.5;
        float _1789 = _1730 * 0.5;
        float _1790 = dot(vec3(_1787, _1788, _1789), vec3(_1787, _1788, _1789));
        float _1795 = (_1790 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1790);
        float _1803 = (dot(vec3(_990, _991, _992), vec3(_1795 * _1787, _1795 * _1788, _1795 * _1789)) + 1.0) * 0.5;
        float _4409 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1812 = sqrt(((_1788 * _1788) + (_1787 * _1787)) + (_1789 * _1789)) / (_1743 + 9.9999997473787516355514526367188e-06);
        float _4420 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
        float _1813 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _1814 = _1813 * 2.0;
        float _1818 = (1.0 - _1813) / (_1813 + 1.0);
        float _4431 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1819 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1828 = ((((1.0 - _1819) * (_1814 + 2.0)) * exp2(log2(isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_1814 + 1.0))) + _1819) * _1743;
        float _1829 = _1711 * 0.5;
        float _1830 = _1721 * 0.5;
        float _1831 = _1731 * 0.5;
        float _1832 = dot(vec3(_1829, _1830, _1831), vec3(_1829, _1830, _1831));
        float _1837 = (_1832 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1832);
        float _1845 = (dot(vec3(_990, _991, _992), vec3(_1837 * _1829, _1837 * _1830, _1837 * _1831)) + 1.0) * 0.5;
        float _4442 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
        float _1854 = sqrt(((_1830 * _1830) + (_1829 * _1829)) + (_1831 * _1831)) / (_1744 + 9.9999997473787516355514526367188e-06);
        float _4453 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
        float _1855 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _1856 = _1855 * 2.0;
        float _1860 = (1.0 - _1855) / (_1855 + 1.0);
        float _4464 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
        float _1861 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _1870 = ((((1.0 - _1861) * (_1856 + 2.0)) * exp2(log2(isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_1856 + 1.0))) + _1861) * _1744;
        _1878 = _1711;
        _1879 = _1710;
        _1880 = _1709;
        _1881 = _1721;
        _1882 = _1720;
        _1883 = _1719;
        _1884 = _1731;
        _1885 = _1730;
        _1886 = _1729;
        _1887 = _1744;
        _1888 = _1743;
        _1889 = _1742;
        _1890 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0)));
        _1891 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0)));
        _1892 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0)));
    }
    else
    {
        _1878 = _1569;
        _1879 = _1569;
        _1880 = _1569;
        _1881 = _1569;
        _1882 = _1569;
        _1883 = _1569;
        _1884 = _1569;
        _1885 = _1569;
        _1886 = _1569;
        _1887 = _1569;
        _1888 = _1569;
        _1889 = _1569;
        _1890 = 0.0;
        _1891 = 0.0;
        _1892 = 0.0;
    }
    float _1902 = (cbModelParam._m0[1u].x * (_1890 - _1581)) + _1581;
    float _1903 = (cbModelParam._m0[1u].x * (_1891 - _1582)) + _1582;
    float _1904 = (cbModelParam._m0[1u].x * (_1892 - _1583)) + _1583;
    float _1925 = fma(_1904, cbSceneParam._m0[89u].z, fma(_1903, cbSceneParam._m0[89u].y, _1902 * cbSceneParam._m0[89u].x));
    float _1928 = fma(_1904, cbSceneParam._m0[90u].z, fma(_1903, cbSceneParam._m0[90u].y, _1902 * cbSceneParam._m0[90u].x));
    float _1931 = fma(_1904, cbSceneParam._m0[91u].z, fma(_1903, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1902));
    float _1946 = _1177 * 0.5;
    float _1947 = _1178 * 0.5;
    float _1948 = _1179 * 0.5;
    float _1949 = dot(vec4(_1946, _1947, _1948, 1.0), vec4(_1880, _1883, _1886, _1889));
    float _1952 = dot(vec4(_1946, _1947, _1948, 1.0), vec4(_1879, _1882, _1885, _1888));
    float _1955 = dot(vec4(_1946, _1947, _1948, 1.0), vec4(_1878, _1881, _1884, _1887));
    float _1989;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1962 = dot(vec4(_1946, _1947, _1948, 1.0), vec4(_1568, _1572, _1575, _1578));
        float _1966 = dot(vec4(_1946, _1947, _1948, 1.0), vec4(_1570, _1573, _1576, _1579));
        float _1970 = dot(vec4(_1946, _1947, _1948, 1.0), vec4(_1571, _1574, _1577, _1580));
        float _1977 = dot(vec4(cbModelParam._m0[39u]), vec4(_1946, _1947, _1948, 1.0));
        _1989 = dot(vec3(isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0)), isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0)), isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1977) ? 0.0 : (isnan(0.0) ? _1977 : max(0.0, _1977))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1989 = 1.0;
    }
    float _2000;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1991 = dot(vec4(cbModelParam._m0[40u]), vec4(_1946, _1947, _1948, 1.0));
        _2000 = dot(vec3(isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0)), isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0)), isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1991) ? 0.0 : (isnan(0.0) ? _1991 : max(0.0, _1991))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2000 = 1.0;
    }
    float _2004 = (_2000 * cbModelParam._m0[1u].x) + (_1989 * (1.0 - cbModelParam._m0[1u].x));
    float _2014 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _994);
    float _2015 = isnan(_2014) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2014 : min(cbModelParam._m0[25u].z, _2014));
    float _2095;
    float _2097;
    float _2099;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2062 = fma(_1239, cbModelParam._m0[13u].z, fma(_1235, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1231)) + cbModelParam._m0[13u].w;
        float _2066 = fma(_1239, cbModelParam._m0[14u].z, fma(_1235, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1231)) + cbModelParam._m0[14u].w;
        float _2070 = fma(_1239, cbModelParam._m0[15u].z, fma(_1235, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1231)) + cbModelParam._m0[15u].w;
        float _2073 = fma(_1179, cbModelParam._m0[13u].z, fma(_1178, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1177));
        float _2076 = fma(_1179, cbModelParam._m0[14u].z, fma(_1178, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1177));
        float _2079 = fma(_1179, cbModelParam._m0[15u].z, fma(_1178, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1177));
        float _2107;
        if (_2073 > 0.0)
        {
            _2107 = abs((1.0 - _2062) / _2073);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2073 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2062 + 1.0) / _2073);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2107 = frontier_phi_17_15_ladder;
        }
        float _2330;
        if (_2076 > 0.0)
        {
            _2330 = abs((1.0 - _2066) / _2076);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2076 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2066 + 1.0) / _2076);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2330 = frontier_phi_26_22_ladder;
        }
        float _2587;
        if (_2079 > 0.0)
        {
            _2587 = abs((1.0 - _2070) / _2079);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2079 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2070 + 1.0) / _2079);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2587 = frontier_phi_38_33_ladder;
        }
        float _2589 = isnan(_2330) ? _2107 : (isnan(_2107) ? _2330 : min(_2107, _2330));
        float _2590 = isnan(_2587) ? _2589 : (isnan(_2589) ? _2587 : min(_2589, _2587));
        float _2594 = (_2590 * _2073) + _2062;
        float _2595 = (_2590 * _2076) + _2066;
        float _2596 = (_2590 * _2079) + _2070;
        float _2597 = _2590 * 9.9999997473787516355514526367188e-05;
        float _2599 = (-1.0) - _2597;
        float _2601 = _2597 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2596 > _2601) || ((_2596 < _2599) || ((_2595 > _2601) || ((_2595 < _2599) || ((_2594 < _2599) || (_2594 > _2601))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2724 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2596, cbModelParam._m0[9u].z, fma(_2595, cbModelParam._m0[9u].y, _2594 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2596, cbModelParam._m0[10u].z, fma(_2595, cbModelParam._m0[10u].y, _2594 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2596, cbModelParam._m0[11u].z, fma(_2595, cbModelParam._m0[11u].y, _2594 * cbModelParam._m0[11u].x))), _2015);
            frontier_phi_16_38_ladder = _2724.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2724.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2724.x * cbModelParam._m0[1u].y;
        }
        _2095 = frontier_phi_16_38_ladder_2;
        _2097 = frontier_phi_16_38_ladder_1;
        _2099 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2083 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1177, _1178, _1179), _2015);
        _2095 = _2083.x * cbModelParam._m0[1u].y;
        _2097 = _2083.y * cbModelParam._m0[1u].y;
        _2099 = _2083.z * cbModelParam._m0[1u].y;
    }
    float _2103 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _994);
    float _2104 = isnan(_2103) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2103 : min(cbModelParam._m0[25u].w, _2103));
    float _2193;
    float _2195;
    float _2197;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2157 = fma(_1239, cbModelParam._m0[21u].z, fma(_1235, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1231)) + cbModelParam._m0[21u].w;
        float _2161 = fma(_1239, cbModelParam._m0[22u].z, fma(_1235, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1231)) + cbModelParam._m0[22u].w;
        float _2165 = fma(_1239, cbModelParam._m0[23u].z, fma(_1235, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1231)) + cbModelParam._m0[23u].w;
        float _2168 = fma(_1179, cbModelParam._m0[21u].z, fma(_1178, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1177));
        float _2171 = fma(_1179, cbModelParam._m0[22u].z, fma(_1178, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1177));
        float _2174 = fma(_1179, cbModelParam._m0[23u].z, fma(_1178, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1177));
        float _2335;
        if (_2168 > 0.0)
        {
            _2335 = abs((1.0 - _2157) / _2168);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2168 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2157 + 1.0) / _2168);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2335 = frontier_phi_28_24_ladder;
        }
        float _2614;
        if (_2171 > 0.0)
        {
            _2614 = abs((1.0 - _2161) / _2171);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2171 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2161 + 1.0) / _2171);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2614 = frontier_phi_40_35_ladder;
        }
        float _2827;
        if (_2174 > 0.0)
        {
            _2827 = abs((1.0 - _2165) / _2174);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2174 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2165 + 1.0) / _2174);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2827 = frontier_phi_49_46_ladder;
        }
        float _2829 = isnan(_2614) ? _2335 : (isnan(_2335) ? _2614 : min(_2335, _2614));
        float _2830 = isnan(_2827) ? _2829 : (isnan(_2829) ? _2827 : min(_2829, _2827));
        float _2834 = (_2830 * _2168) + _2157;
        float _2835 = (_2830 * _2171) + _2161;
        float _2836 = (_2830 * _2174) + _2165;
        float _2837 = _2830 * 9.9999997473787516355514526367188e-05;
        float _2838 = (-1.0) - _2837;
        float _2840 = _2837 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2836 > _2840) || ((_2836 < _2838) || ((_2835 > _2840) || ((_2835 < _2838) || ((_2834 < _2838) || (_2834 > _2840))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3037 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2836, cbModelParam._m0[17u].z, fma(_2835, cbModelParam._m0[17u].y, _2834 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2836, cbModelParam._m0[18u].z, fma(_2835, cbModelParam._m0[18u].y, _2834 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2836, cbModelParam._m0[19u].z, fma(_2835, cbModelParam._m0[19u].y, _2834 * cbModelParam._m0[19u].x))), _2104);
            frontier_phi_25_49_ladder = _3037.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3037.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3037.x * cbModelParam._m0[1u].z;
        }
        _2193 = frontier_phi_25_49_ladder_2;
        _2195 = frontier_phi_25_49_ladder_1;
        _2197 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2177 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1177, _1178, _1179), _2104);
        _2193 = _2177.x * cbModelParam._m0[1u].z;
        _2195 = _2177.y * cbModelParam._m0[1u].z;
        _2197 = _2177.z * cbModelParam._m0[1u].z;
    }
    float _2210 = (((_1202 * _1154) + _1203) * _1169) * ((cbModelParam._m0[1u].w * (_2193 - _2095)) + _2095);
    float _2212 = (((_1202 * _1156) + _1203) * _1169) * ((cbModelParam._m0[1u].w * (_2195 - _2097)) + _2097);
    float _2214 = (((_1202 * _1157) + _1203) * _1169) * ((cbModelParam._m0[1u].w * (_2197 - _2099)) + _2099);
    float _2217 = fma(_2214, cbSceneParam._m0[89u].z, fma(_2212, cbSceneParam._m0[89u].y, _2210 * cbSceneParam._m0[89u].x));
    float _2220 = fma(_2214, cbSceneParam._m0[90u].z, fma(_2212, cbSceneParam._m0[90u].y, _2210 * cbSceneParam._m0[90u].x));
    float _2223 = fma(_2214, cbSceneParam._m0[91u].z, fma(_2212, cbSceneParam._m0[91u].y, _2210 * cbSceneParam._m0[91u].x));
    vec4 _2231 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1091, _1092));
    float _2233 = _2231.w;
    float _2245 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2233);
    float _2246 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2233);
    float _2247 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2233);
    uvec4 _2251 = floatBitsToUint(cbInstanceData._m0[_1129 + 5u]);
    uint _2253 = _2251.x * 14u;
    uint _2254 = _2253 + 13u;
    float _2261 = _1169 + (-1.0);
    float _2266 = (cbLight._m0[_2254].x * _2261) + 1.0;
    float _2267 = (cbLight._m0[_2254].y * _2261) + 1.0;
    float _2268 = (cbLight._m0[_2254].z * _2261) + 1.0;
    float _2269 = (cbLight._m0[_2254].w * _2261) + 1.0;
    uint _2270 = _2253 + 5u;
    float _2276 = isnan(1.0) ? _2267 : (isnan(_2267) ? 1.0 : min(_2267, 1.0));
    uint _2280 = _2253 + 4u;
    float _2289 = isnan(1.0) ? _2266 : (isnan(_2266) ? 1.0 : min(_2266, 1.0));
    uint _2293 = _2253 | 1u;
    float _2304 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_990, _991, _992));
    float _2307 = dot(vec3(cbLight._m0[_2293].xyz), vec3(_990, _991, _992));
    float _4600 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _4611 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2312 = (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * 0.3183098733425140380859375;
    float _2314 = (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * 0.3183098733425140380859375;
    float _2321 = ((cbLight._m0[_2270].x * _2276) * _2314) + (((cbLight._m0[_2280].x * _2245) * _2289) * _2312);
    float _2322 = ((_2276 * cbLight._m0[_2270].y) * _2314) + (((cbLight._m0[_2280].y * _2246) * _2289) * _2312);
    float _2323 = ((_2276 * cbLight._m0[_2270].z) * _2314) + (((cbLight._m0[_2280].z * _2247) * _2289) * _2312);
    uvec4 _2327 = floatBitsToUint(cbLight._m0[_2253 + 12u]);
    bool _2329 = _2327.x == 0u;
    float _2340;
    float _2342;
    float _2344;
    if (_2329)
    {
        _2340 = _2321;
        _2342 = _2322;
        _2344 = _2323;
    }
    else
    {
        uint _2348 = _2253 + 6u;
        float _2364 = (dot(vec3(cbLight._m0[_2253 + 2u].xyz), vec3(_990, _991, _992)) * 0.5) + 0.5;
        float _2365 = _2364 * _2364;
        float _4622 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2366 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
        float _2367 = isnan(1.0) ? _2268 : (isnan(_2268) ? 1.0 : min(_2268, 1.0));
        _2340 = (((cbLight._m0[_2348].x * 0.3183098733425140380859375) * _2366) * _2367) + _2321;
        _2342 = (((cbLight._m0[_2348].y * 0.3183098733425140380859375) * _2366) * _2367) + _2322;
        _2344 = (((cbLight._m0[_2348].z * 0.3183098733425140380859375) * _2366) * _2367) + _2323;
    }
    bool _2347 = _2327.y == 0u;
    float _2385;
    float _2387;
    float _2389;
    if (_2347)
    {
        _2385 = _2340;
        _2387 = _2342;
        _2389 = _2344;
    }
    else
    {
        uint _2558 = _2253 + 7u;
        float _2574 = (dot(vec3(cbLight._m0[_2253 + 3u].xyz), vec3(_990, _991, _992)) * 0.5) + 0.5;
        float _2575 = _2574 * _2574;
        float _4638 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2576 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
        float _2577 = isnan(1.0) ? _2269 : (isnan(_2269) ? 1.0 : min(_2269, 1.0));
        _2385 = (((cbLight._m0[_2558].x * 0.3183098733425140380859375) * _2576) * _2577) + _2340;
        _2387 = (((cbLight._m0[_2558].y * 0.3183098733425140380859375) * _2576) * _2577) + _2342;
        _2389 = (((cbLight._m0[_2558].z * 0.3183098733425140380859375) * _2576) * _2577) + _2344;
    }
    uint _2392 = _2253 + 8u;
    float _2405 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2253].w)) * _994) * 0.949999988079071044921875);
    float _2406 = _2405 * _2405;
    float _2407 = cbLight._m0[_2253].x + _1071;
    float _2408 = cbLight._m0[_2253].y + _1072;
    float _2409 = cbLight._m0[_2253].z + _1073;
    float _2413 = inversesqrt(dot(vec3(_2407, _2408, _2409), vec3(_2407, _2408, _2409)));
    float _2414 = _2413 * _2407;
    float _2415 = _2413 * _2408;
    float _2416 = _2413 * _2409;
    float _2417 = dot(vec3(_990, _991, _992), vec3(cbLight._m0[_2253].xyz));
    float _4654 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2420 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
    float _4665 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
    float _2421 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
    float _2422 = dot(vec3(_990, _991, _992), vec3(_2414, _2415, _2416));
    float _4676 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2425 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
    float _2426 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_2414, _2415, _2416));
    float _4687 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
    float _2430 = _2406 * _2406;
    float _2434 = ((_2425 * _2425) * (_2430 + (-1.0))) + 1.0;
    float _2442 = exp2(log2(1.0 - (isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0)))) * 5.0);
    float _2443 = 0.959999978542327880859375 - _1151;
    float _2445 = 0.959999978542327880859375 - _1152;
    float _2446 = 0.959999978542327880859375 - _1153;
    float _2453 = 1.0 - _2406;
    float _2464 = (0.5 / (((_2421 * ((_2420 * _2453) + _2406)) + 9.9999999392252902907785028219223e-09) + (((_2421 * _2453) + _2406) * _2420))) * _2420;
    float _4698 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2466 = (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0))) * (_2430 / ((_2434 * _2434) * 3.141590118408203125));
    uint _2480 = _2253 + 9u;
    float _2491 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2293].w)) * _994) * 0.949999988079071044921875);
    float _2492 = _2491 * _2491;
    float _2493 = cbLight._m0[_2293].x + _1071;
    float _2494 = cbLight._m0[_2293].y + _1072;
    float _2495 = cbLight._m0[_2293].z + _1073;
    float _2499 = inversesqrt(dot(vec3(_2493, _2494, _2495), vec3(_2493, _2494, _2495)));
    float _2500 = _2499 * _2493;
    float _2501 = _2499 * _2494;
    float _2502 = _2499 * _2495;
    float _2503 = dot(vec3(_990, _991, _992), vec3(cbLight._m0[_2293].xyz));
    float _4709 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
    float _2506 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
    float _2507 = dot(vec3(_990, _991, _992), vec3(_2500, _2501, _2502));
    float _4720 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _2510 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
    float _2511 = dot(vec3(cbLight._m0[_2293].xyz), vec3(_2500, _2501, _2502));
    float _4731 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
    float _2515 = _2492 * _2492;
    float _2519 = ((_2510 * _2510) * (_2515 + (-1.0))) + 1.0;
    float _2526 = exp2(log2(1.0 - (isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0)))) * 5.0);
    float _2533 = 1.0 - _2492;
    float _2543 = (0.5 / (((_2421 * ((_2506 * _2533) + _2492)) + 9.9999999392252902907785028219223e-09) + (((_2421 * _2533) + _2492) * _2506))) * _2506;
    float _4742 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
    float _2545 = (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (_2515 / ((_2519 * _2519) * 3.141590118408203125));
    float _2555 = (((((_2526 * _2443) + _1154) * cbLight._m0[_2480].x) * _2545) * _2276) + ((((cbLight._m0[_2392].x * _2245) * ((_2442 * _2443) + _1154)) * _2466) * _2289);
    float _2556 = (((((_2526 * _2445) + _1156) * cbLight._m0[_2480].y) * _2545) * _2276) + ((((cbLight._m0[_2392].y * _2246) * ((_2442 * _2445) + _1156)) * _2466) * _2289);
    float _2557 = (((((_2526 * _2446) + _1157) * cbLight._m0[_2480].z) * _2545) * _2276) + ((((cbLight._m0[_2392].z * _2247) * ((_2442 * _2446) + _1157)) * _2466) * _2289);
    float _2619;
    float _2621;
    float _2623;
    if (_2329)
    {
        _2619 = _2555;
        _2621 = _2556;
        _2623 = _2557;
    }
    else
    {
        uint _2625 = _2253 + 2u;
        uint _2629 = _2253 + 10u;
        float _2643 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2625].w)) * _994) * 0.949999988079071044921875);
        float _2644 = _2643 * _2643;
        float _2645 = cbLight._m0[_2625].x + _1071;
        float _2646 = cbLight._m0[_2625].y + _1072;
        float _2647 = cbLight._m0[_2625].z + _1073;
        float _2651 = inversesqrt(dot(vec3(_2645, _2646, _2647), vec3(_2645, _2646, _2647)));
        float _2652 = _2651 * _2645;
        float _2653 = _2651 * _2646;
        float _2654 = _2651 * _2647;
        float _2655 = dot(vec3(_990, _991, _992), vec3(cbLight._m0[_2625].xyz));
        float _4753 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2658 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
        float _2659 = dot(vec3(_990, _991, _992), vec3(_2652, _2653, _2654));
        float _4764 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2662 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
        float _2663 = dot(vec3(cbLight._m0[_2625].xyz), vec3(_2652, _2653, _2654));
        float _4775 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2667 = _2644 * _2644;
        float _2671 = ((_2662 * _2662) * (_2667 + (-1.0))) + 1.0;
        float _2678 = exp2(log2(1.0 - (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0)))) * 5.0);
        float _2685 = 1.0 - _2644;
        float _2695 = (0.5 / (((_2421 * ((_2658 * _2685) + _2644)) + 9.9999999392252902907785028219223e-09) + (((_2421 * _2685) + _2644) * _2658))) * _2658;
        float _4786 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        float _2697 = (isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0))) * (_2667 / ((_2671 * _2671) * 3.141590118408203125));
        float _2698 = isnan(1.0) ? _2268 : (isnan(_2268) ? 1.0 : min(_2268, 1.0));
        _2619 = (((((_2678 * _2443) + _1154) * cbLight._m0[_2629].x) * _2697) * _2698) + _2555;
        _2621 = (((((_2678 * _2445) + _1156) * cbLight._m0[_2629].y) * _2697) * _2698) + _2556;
        _2623 = (((((_2678 * _2446) + _1157) * cbLight._m0[_2629].z) * _2697) * _2698) + _2557;
    }
    float _2733;
    float _2735;
    float _2737;
    if (_2347)
    {
        _2733 = _2619;
        _2735 = _2621;
        _2737 = _2623;
    }
    else
    {
        uint _2744 = _2253 + 3u;
        uint _2748 = _2253 + 11u;
        float _2762 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2744].w)) * _994) * 0.949999988079071044921875);
        float _2763 = _2762 * _2762;
        float _2764 = cbLight._m0[_2744].x + _1071;
        float _2765 = cbLight._m0[_2744].y + _1072;
        float _2766 = cbLight._m0[_2744].z + _1073;
        float _2770 = inversesqrt(dot(vec3(_2764, _2765, _2766), vec3(_2764, _2765, _2766)));
        float _2771 = _2770 * _2764;
        float _2772 = _2770 * _2765;
        float _2773 = _2770 * _2766;
        float _2774 = dot(vec3(_990, _991, _992), vec3(cbLight._m0[_2744].xyz));
        float _4802 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
        float _2777 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
        float _2778 = dot(vec3(_990, _991, _992), vec3(_2771, _2772, _2773));
        float _4813 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
        float _2781 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
        float _2782 = dot(vec3(cbLight._m0[_2744].xyz), vec3(_2771, _2772, _2773));
        float _4824 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
        float _2786 = _2763 * _2763;
        float _2790 = ((_2781 * _2781) * (_2786 + (-1.0))) + 1.0;
        float _2797 = exp2(log2(1.0 - (isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0)))) * 5.0);
        float _2804 = 1.0 - _2763;
        float _2814 = (0.5 / (((_2421 * ((_2777 * _2804) + _2763)) + 9.9999999392252902907785028219223e-09) + (((_2421 * _2804) + _2763) * _2777))) * _2777;
        float _4835 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2816 = (isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0))) * (_2786 / ((_2790 * _2790) * 3.141590118408203125));
        float _2817 = isnan(1.0) ? _2269 : (isnan(_2269) ? 1.0 : min(_2269, 1.0));
        _2733 = (((((_2797 * _2443) + _1154) * cbLight._m0[_2748].x) * _2816) * _2817) + _2619;
        _2735 = (((((_2797 * _2445) + _1156) * cbLight._m0[_2748].y) * _2816) * _2817) + _2621;
        _2737 = (((((_2797 * _2446) + _1157) * cbLight._m0[_2748].z) * _2816) * _2817) + _2623;
    }
    float _2952;
    float _2954;
    float _2956;
    float _2958;
    float _2960;
    float _2962;
    if (_2251.y == 0u)
    {
        float _2892 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2893 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2892;
        float _2894 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2892;
        float _2895 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2892;
        uvec4 _2907 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2908 = _2907.x;
        uint _2919 = uint((float(_2907.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1092) / _2908))) + floor(float(uint(cbSceneParam._m0[85u].x * _1091) / _2908)));
        float _2929 = (log2(_2895 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2930 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
        uint _2933 = uint(isnan(14.0) ? _2930 : (isnan(_2930) ? 14.0 : min(_2930, 14.0)));
        uvec4 _2938 = texelFetch(g_lightClusterGridBuffer, int(((_2933 << 2u) + (_2919 << 6u)) >> 2u));
        uint _2939 = _2938.x;
        uint _2940 = _2907.z;
        float _3042;
        float _3044;
        float _3046;
        float _3048;
        float _3050;
        float _3052;
        if (((((1u << ((_2940 >> 4u) & 15u)) + 4294967295u) & _2939) == 0u) || ((_2940 & 240u) == 0u))
        {
            _3042 = 0.0;
            _3044 = 0.0;
            _3046 = 0.0;
            _3048 = 0.0;
            _3050 = 0.0;
            _3052 = 0.0;
        }
        else
        {
            float _3043;
            float _3045;
            float _3047;
            float _3049;
            float _3051;
            float _3053;
            float _3195 = 0.0;
            float _3196 = 0.0;
            float _3197 = 0.0;
            float _3198 = 0.0;
            float _3199 = 0.0;
            float _3200 = 0.0;
            uint _3201 = 0u;
            uint _3210;
            bool _3211;
            for (;;)
            {
                _3210 = texelFetch(g_lightClassification, int((((_2933 << 5u) + (_2919 << 9u)) + (_3201 << 2u)) >> 2u)).x;
                _3211 = _3210 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3211)
                {
                    frontier_phi_66_pred = _3195;
                    frontier_phi_66_pred_1 = _3200;
                    frontier_phi_66_pred_2 = _3199;
                    frontier_phi_66_pred_3 = _3198;
                    frontier_phi_66_pred_4 = _3197;
                    frontier_phi_66_pred_5 = _3196;
                }
                else
                {
                    float _3340;
                    float _3341;
                    float _3342;
                    float _3343;
                    float _3344;
                    float _3345;
                    uint _3346;
                    _3340 = _3195;
                    _3341 = _3196;
                    _3342 = _3197;
                    _3343 = _3198;
                    _3344 = _3199;
                    _3345 = _3200;
                    _3346 = _3210;
                    float _3267;
                    float _3268;
                    float _3269;
                    float _3270;
                    float _3271;
                    float _3272;
                    for (;;)
                    {
                        uint _3350 = uint(findLSB(_3346)) + (_3201 << 5u);
                        uint _3347 = (_3346 + 4294967295u) & _3346;
                        uint _3352 = _3350 * 48u;
                        vec4 _3366 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3352)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 3u)).x));
                        uint _3372 = (_3350 * 48u) + 4u;
                        vec4 _3385 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3372)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 3u)).x));
                        uint _3391 = (_3350 * 48u) + 8u;
                        vec3 _3402 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3391)).x, texelFetch(g_PointLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3391 + 2u)).x));
                        float _3406 = _3366.x - _2893;
                        float _3407 = _3366.y - _2894;
                        float _3408 = _3366.z - _2895;
                        float _3409 = dot(vec3(_3406, _3407, _3408), vec3(_3406, _3407, _3408));
                        float _3412 = inversesqrt(_3409);
                        float _3413 = _3412 * _3406;
                        float _3414 = _3412 * _3407;
                        float _3415 = _3412 * _3408;
                        float _3416 = dot(vec3(_1110, _1113, _1116), vec3(_3413, _3414, _3415));
                        float _3421 = 1.0 - (_3409 * _3366.w);
                        float _4861 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                        float _3422 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
                        float _3423 = sqrt(_3409) * _3385.w;
                        float _3426 = 1.39999997615814208984375 / (_3423 + 1.39999997615814208984375);
                        float _3427 = _3426 * _3426;
                        float _3430 = ((1.0 - _3427) * _3416) + _3427;
                        float _3433 = _3423 * _3423;
                        float _3437 = ((isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0))) * _3422) / ((_3433 * 0.699999988079071044921875) + 1.0);
                        float _3441 = (-0.0) - _2893;
                        float _3442 = (-0.0) - _2894;
                        float _3443 = (-0.0) - _2895;
                        float _3447 = inversesqrt(dot(vec3(_3441, _3442, _3443), vec3(_3441, _3442, _3443)));
                        float _3448 = _3447 * _3441;
                        float _3449 = _3447 * _3442;
                        float _3450 = _3447 * _3443;
                        float _3458 = exp2(log2(1.0 / ((_3433 * 3.5) + 5.0)) * 0.25);
                        float _3459 = 1.0 - _1185;
                        float _3466 = sqrt(1.0 - ((1.0 - (_3459 * _3459)) * (1.0 - (_3458 * _3458))));
                        float _3467 = _3466 * _3466;
                        float _3468 = _3467 * _3467;
                        float _3469 = _3448 + _3413;
                        float _3470 = _3449 + _3414;
                        float _3471 = _3450 + _3415;
                        float _3475 = inversesqrt(dot(vec3(_3469, _3470, _3471), vec3(_3469, _3470, _3471)));
                        float _3479 = dot(vec3(_1110, _1113, _1116), vec3(_3448, _3449, _3450));
                        float _4877 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                        float _3482 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
                        float _3483 = dot(vec3(_1110, _1113, _1116), vec3(_3475 * _3469, _3475 * _3470, _3475 * _3471));
                        float _4888 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                        float _3486 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
                        float _3490 = ((_3486 * _3486) * (_3468 + (-1.0))) + 1.0;
                        float _3491 = _3426 * _3467;
                        float _3492 = _3491 * _3491;
                        float _3495 = ((1.0 - _3492) * _3416) + _3492;
                        float _4899 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                        float _3496 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
                        float _3497 = 1.0 - _3467;
                        float _3507 = (0.5 / (((_3496 * ((_3482 * _3497) + _3467)) + 9.9999999392252902907785028219223e-09) + (((_3496 * _3497) + _3467) * _3482))) * _3496;
                        float _4910 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                        float _3518 = (((_3468 * 3.1415927410125732421875) * (isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0)))) / ((_3490 * _3490) * ((_3433 * 2.1991131305694580078125) + 3.141590118408203125))) * _3422;
                        _3270 = (_3437 * _3385.x) + _3343;
                        _3271 = (_3437 * _3385.y) + _3344;
                        _3272 = (_3437 * _3385.z) + _3345;
                        _3267 = (_3518 * _3402.x) + _3340;
                        _3268 = (_3518 * _3402.y) + _3341;
                        _3269 = (_3518 * _3402.z) + _3342;
                        if (_3347 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3340 = _3267;
                            _3341 = _3268;
                            _3342 = _3269;
                            _3343 = _3270;
                            _3344 = _3271;
                            _3345 = _3272;
                            _3346 = _3347;
                        }
                    }
                    frontier_phi_66_pred = _3267;
                    frontier_phi_66_pred_1 = _3272;
                    frontier_phi_66_pred_2 = _3271;
                    frontier_phi_66_pred_3 = _3270;
                    frontier_phi_66_pred_4 = _3269;
                    frontier_phi_66_pred_5 = _3268;
                }
                _3043 = frontier_phi_66_pred;
                _3053 = frontier_phi_66_pred_1;
                _3051 = frontier_phi_66_pred_2;
                _3049 = frontier_phi_66_pred_3;
                _3047 = frontier_phi_66_pred_4;
                _3045 = frontier_phi_66_pred_5;
                uint _3202 = _3201 + 1u;
                if (_3202 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3195 = _3043;
                    _3196 = _3045;
                    _3197 = _3047;
                    _3198 = _3049;
                    _3199 = _3051;
                    _3200 = _3053;
                    _3201 = _3202;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3042 = _3043;
            _3044 = _3045;
            _3046 = _3047;
            _3048 = _3049;
            _3050 = _3051;
            _3052 = _3053;
        }
        uvec4 _3056 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3057 = _3056.z;
        uint _3059 = (_3057 >> 8u) & 15u;
        float _3163;
        float _3165;
        float _3167;
        float _3169;
        float _3171;
        float _3173;
        if (((4294967295u << _3059) & _2939) == 0u)
        {
            _3163 = _3042;
            _3165 = _3044;
            _3167 = _3046;
            _3169 = _3048;
            _3171 = _3050;
            _3173 = _3052;
        }
        else
        {
            float _3188 = inversesqrt(dot(vec3(_2893, _2894, _2895), vec3(_2893, _2894, _2895)));
            float _3189 = _3188 * _2893;
            float _3190 = _3188 * _2894;
            float _3191 = _3188 * _2895;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3059 < ((_3057 >> 12u) & 15u))
            {
                float _3164;
                float _3166;
                float _3168;
                float _3170;
                float _3172;
                float _3174;
                float _3323 = _3042;
                float _3324 = _3044;
                float _3325 = _3046;
                float _3326 = _3048;
                float _3327 = _3050;
                float _3328 = _3052;
                uint _3329 = _3059;
                uint _3338;
                bool _3339;
                for (;;)
                {
                    _3338 = texelFetch(g_lightClassification, int((((_2933 << 5u) + (_2919 << 9u)) + (_3329 << 2u)) >> 2u)).x;
                    _3339 = _3338 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3339)
                    {
                        frontier_phi_77_pred = _3328;
                        frontier_phi_77_pred_1 = _3327;
                        frontier_phi_77_pred_2 = _3326;
                        frontier_phi_77_pred_3 = _3325;
                        frontier_phi_77_pred_4 = _3324;
                        frontier_phi_77_pred_5 = _3323;
                    }
                    else
                    {
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3825;
                        float _3826;
                        float _3827;
                        float _3828;
                        float _3829;
                        float _3830;
                        float _3545 = _3323;
                        float _3546 = _3324;
                        float _3547 = _3325;
                        float _3548 = _3326;
                        float _3549 = _3327;
                        float _3550 = _3328;
                        uint _3551 = _3338;
                        uint _3552;
                        vec4 _3577;
                        float _3578;
                        vec4 _3593;
                        vec3 _3605;
                        vec4 _3620;
                        vec4 _3635;
                        float _3681;
                        bool _3682;
                        for (;;)
                        {
                            uint _3562 = ((_3329 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3551));
                            _3552 = (_3551 + 4294967295u) & _3551;
                            uint _3564 = _3562 * 40u;
                            _3577 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 3u)).x));
                            _3578 = _3577.w;
                            uint _3580 = (_3562 * 40u) + 4u;
                            _3593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 3u)).x));
                            uint _3595 = (_3562 * 40u) + 8u;
                            _3605 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x));
                            uint _3607 = (_3562 * 40u) + 16u;
                            _3620 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3607)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 3u)).x));
                            uint _3622 = (_3562 * 40u) + 20u;
                            _3635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 3u)).x));
                            uint _3637 = (_3562 * 40u) + 24u;
                            vec4 _3650 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 3u)).x));
                            uint _3656 = (_3562 * 40u) + 28u;
                            vec4 _3669 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3656)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 3u)).x));
                            _3681 = fma(_2895, _3669.z, fma(_2894, _3669.y, _3669.x * _2893)) + _3669.w;
                            _3682 = !((fma(_2895, _3650.z, fma(_2894, _3650.y, _3650.x * _2893)) + _3650.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3682)
                            {
                                float _3709 = _3577.x - _2893;
                                float _3710 = _3577.y - _2894;
                                float _3711 = _3577.z - _2895;
                                float _3712 = dot(vec3(_3709, _3710, _3711), vec3(_3709, _3710, _3711));
                                float _3715 = inversesqrt(_3712);
                                float _3716 = _3715 * _3709;
                                float _3717 = _3715 * _3710;
                                float _3718 = _3715 * _3711;
                                float _3722 = 1.0 - (_3712 / (_3578 * _3578));
                                float _4921 = isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0));
                                float _3723 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
                                float _3727 = sqrt(_3712) * _3593.w;
                                float _3729 = 1.39999997615814208984375 / (_3727 + 1.39999997615814208984375);
                                float _3730 = _3729 * _3729;
                                float _3733 = ((1.0 - _3730) * dot(vec3(_3716, _3717, _3718), vec3(_1110, _1113, _1116))) + _3730;
                                float _3736 = _3727 * _3727;
                                float _3740 = (fma(_2895, _3620.z, fma(_2894, _3620.y, _3620.x * _2893)) + _3620.w) / _3681;
                                float _3741 = (fma(_2895, _3635.z, fma(_2894, _3635.y, _3635.x * _2893)) + _3635.w) / _3681;
                                float _3745 = 1.0 - dot(vec2(_3740, _3741), vec2(_3740, _3741));
                                float _4937 = isnan(0.0) ? _3745 : (isnan(_3745) ? 0.0 : max(_3745, 0.0));
                                float _3746 = isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0));
                                float _3747 = _3746 * (((isnan(0.0) ? _3733 : (isnan(_3733) ? 0.0 : max(_3733, 0.0))) * _3723) / ((_3736 * 0.699999988079071044921875) + 1.0));
                                float _3759 = exp2(log2(1.0 / ((_3736 * 3.5) + 5.0)) * 0.25);
                                float _3760 = 1.0 - _1185;
                                float _3767 = sqrt(1.0 - ((1.0 - (_3760 * _3760)) * (1.0 - (_3759 * _3759))));
                                float _3768 = _3767 * _3767;
                                float _3769 = _3768 * _3768;
                                float _3770 = _3716 - _3189;
                                float _3771 = _3717 - _3190;
                                float _3772 = _3718 - _3191;
                                float _3776 = inversesqrt(dot(vec3(_3770, _3771, _3772), vec3(_3770, _3771, _3772)));
                                float _3780 = dot(vec3(_1110, _1113, _1116), vec3((-0.0) - _3189, (-0.0) - _3190, (-0.0) - _3191));
                                float _4948 = isnan(0.0) ? _3780 : (isnan(_3780) ? 0.0 : max(_3780, 0.0));
                                float _3783 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
                                float _3784 = dot(vec3(_1110, _1113, _1116), vec3(_3776 * _3770, _3776 * _3771, _3776 * _3772));
                                float _4959 = isnan(0.0) ? _3784 : (isnan(_3784) ? 0.0 : max(_3784, 0.0));
                                float _3787 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
                                float _3791 = ((_3787 * _3787) * (_3769 + (-1.0))) + 1.0;
                                float _3792 = _3729 * _3768;
                                float _3793 = _3792 * _3792;
                                float _3799 = ((1.0 - _3793) * dot(vec3(_1110, _1113, _1116), vec3(_3716, _3717, _3718))) + _3793;
                                float _4970 = isnan(0.0) ? _3799 : (isnan(_3799) ? 0.0 : max(_3799, 0.0));
                                float _3800 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
                                float _3801 = 1.0 - _3768;
                                float _3811 = (0.5 / (((_3800 * ((_3783 * _3801) + _3768)) + 9.9999999392252902907785028219223e-09) + (((_3800 * _3801) + _3768) * _3783))) * _3800;
                                float _4981 = isnan(0.0) ? _3811 : (isnan(_3811) ? 0.0 : max(_3811, 0.0));
                                float _3821 = (_3746 * _3723) * (((_3769 * 3.1415927410125732421875) * (isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0)))) / ((_3791 * _3791) * ((_3736 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3747 * _3593.y;
                                frontier_phi_83_pred_1 = _3747 * _3593.x;
                                frontier_phi_83_pred_2 = _3821 * _3605.z;
                                frontier_phi_83_pred_3 = _3821 * _3605.y;
                                frontier_phi_83_pred_4 = _3821 * _3605.x;
                                frontier_phi_83_pred_5 = _3747 * _3593.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3829 = frontier_phi_83_pred;
                            _3828 = frontier_phi_83_pred_1;
                            _3827 = frontier_phi_83_pred_2;
                            _3826 = frontier_phi_83_pred_3;
                            _3825 = frontier_phi_83_pred_4;
                            _3830 = frontier_phi_83_pred_5;
                            _3535 = _3828 + _3548;
                            _3536 = _3829 + _3549;
                            _3537 = _3830 + _3550;
                            _3532 = _3825 + _3545;
                            _3533 = _3826 + _3546;
                            _3534 = _3827 + _3547;
                            if (_3552 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3545 = _3532;
                                _3546 = _3533;
                                _3547 = _3534;
                                _3548 = _3535;
                                _3549 = _3536;
                                _3550 = _3537;
                                _3551 = _3552;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3537;
                        frontier_phi_77_pred_1 = _3536;
                        frontier_phi_77_pred_2 = _3535;
                        frontier_phi_77_pred_3 = _3534;
                        frontier_phi_77_pred_4 = _3533;
                        frontier_phi_77_pred_5 = _3532;
                    }
                    _3174 = frontier_phi_77_pred;
                    _3172 = frontier_phi_77_pred_1;
                    _3170 = frontier_phi_77_pred_2;
                    _3168 = frontier_phi_77_pred_3;
                    _3166 = frontier_phi_77_pred_4;
                    _3164 = frontier_phi_77_pred_5;
                    uint _3330 = _3329 + 1u;
                    if (_3330 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3323 = _3164;
                        _3324 = _3166;
                        _3325 = _3168;
                        _3326 = _3170;
                        _3327 = _3172;
                        _3328 = _3174;
                        _3329 = _3330;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3168;
                frontier_phi_58_59_ladder_1 = _3174;
                frontier_phi_58_59_ladder_2 = _3172;
                frontier_phi_58_59_ladder_3 = _3170;
                frontier_phi_58_59_ladder_4 = _3166;
                frontier_phi_58_59_ladder_5 = _3164;
            }
            else
            {
                frontier_phi_58_59_ladder = _3046;
                frontier_phi_58_59_ladder_1 = _3052;
                frontier_phi_58_59_ladder_2 = _3050;
                frontier_phi_58_59_ladder_3 = _3048;
                frontier_phi_58_59_ladder_4 = _3044;
                frontier_phi_58_59_ladder_5 = _3042;
            }
            _3163 = frontier_phi_58_59_ladder_5;
            _3165 = frontier_phi_58_59_ladder_4;
            _3167 = frontier_phi_58_59_ladder;
            _3169 = frontier_phi_58_59_ladder_3;
            _3171 = frontier_phi_58_59_ladder_2;
            _3173 = frontier_phi_58_59_ladder_1;
        }
        float _3178 = isnan(1.0) ? _1169 : (isnan(_1169) ? 1.0 : min(_1169, 1.0));
        _2952 = (_3178 * _3169) + _2385;
        _2954 = (_3178 * _3171) + _2387;
        _2956 = (_3178 * _3173) + _2389;
        _2958 = ((_3163 * _1154) * _3178) + _2733;
        _2960 = ((_3165 * _1156) * _3178) + _2735;
        _2962 = ((_3167 * _1157) * _3178) + _2737;
    }
    else
    {
        _2952 = _2385;
        _2954 = _2387;
        _2956 = _2389;
        _2958 = _2733;
        _2960 = _2735;
        _2962 = _2737;
    }
    float _4997 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
    float _5008 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
    float _5019 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _5030 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _2980 = ((isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0))) * (_2952 + ((isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0))) * _1169))) + ((_2958 + ((isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0))) * _2004)) * cbPerFrame._m0[3u].x);
    float _2981 = ((isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0))) * (_2954 + ((isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0))) * _1169))) + ((_2960 + ((isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0))) * _2004)) * cbPerFrame._m0[3u].x);
    float _2982 = ((isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0))) * (_2956 + ((isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0))) * _1169))) + ((_2962 + ((isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0))) * _2004)) * cbPerFrame._m0[3u].x);
    float _2987 = cbInstanceData._m0[_1129 + 6u].w * (isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0)));
    float _2992 = _1091 / cbSceneParam._m0[86u].x;
    float _2993 = _1092 / cbSceneParam._m0[86u].y;
    vec4 _3007 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2992, _2993, (log2((isnan(cbSceneParam._m0[77u].w) ? _1014 : (isnan(_1014) ? cbSceneParam._m0[77u].w : min(_1014, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3009 = _3007.x;
    float _3010 = _3007.y;
    float _3011 = _3007.z;
    float _3012 = _3007.w;
    float _3105;
    float _3107;
    float _3109;
    float _3111;
    if (_1014 > cbSceneParam._m0[78u].w)
    {
        float _3067 = isnan(_1014) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1014 : min(cbSceneParam._m0[80u].w, _1014));
        float _3068 = _3067 / _1014;
        float _3079 = _3068 * _1064;
        float _3080 = _1065 * _3068;
        float _3081 = (-0.0) - _3080;
        float _3083 = _3068 * _1066;
        float _3085 = (cbSceneParam._m0[77u].w * _3081) / _3067;
        float _3086 = _3085 + cbSceneParam._m0[79u].w;
        float _3087 = cbSceneParam._m0[79u].w - _3080;
        float _3093 = sqrt(((_3079 * _3079) + (_3080 * _3080)) + (_3083 * _3083));
        float _3096 = (1.0 - (cbSceneParam._m0[77u].w / _3067)) * _3093;
        float _3101 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3103 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3280;
        if (abs((_3081 - _3085) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3280 = ((((_3086 > 0.0) ? exp2(_3101 * _3086) : (2.0 - exp2(_3103 * _3086))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3096;
        }
        else
        {
            float _3224 = 1.0 / cbSceneParam._m0[80u].x;
            float _3225 = isnan(_3087) ? _3086 : (isnan(_3086) ? _3087 : max(_3086, _3087));
            float _3226 = isnan(_3087) ? _3086 : (isnan(_3086) ? _3087 : min(_3086, _3087));
            float _3235 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : min(_3225, 0.0));
            float _3236 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : min(_3226, 0.0));
            _3280 = ((abs(_3093 / _3081) * cbSceneParam._m0[80u].y) * ((((_3235 - _3236) * 2.0) - ((exp2(_3101 * (isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0)))) - exp2(_3101 * (isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0))))) * _3224)) - ((exp2(_3103 * _3235) - exp2(_3103 * _3236)) * _3224))) + (_3096 * cbSceneParam._m0[80u].z);
        }
        vec4 _3282 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2992, _2993, 1.0), 0.0);
        float _3291 = exp2((_3280 * (-1.44269502162933349609375)) * (1.0 - _3282.w));
        float _3292 = log2(_3291);
        float _3308 = log2(_3012);
        _3105 = (exp2(_3308 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3292 * cbSceneParam._m0[78u].x)) * _3282.x) / cbSceneParam._m0[78u].x)) + _3009;
        _3107 = (exp2(_3308 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3292 * cbSceneParam._m0[78u].y)) * _3282.y) / cbSceneParam._m0[78u].y)) + _3010;
        _3109 = (exp2(_3308 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3292 * cbSceneParam._m0[78u].z)) * _3282.z) / cbSceneParam._m0[78u].z)) + _3011;
        _3111 = _3291 * _3012;
    }
    else
    {
        _3105 = _3009;
        _3107 = _3010;
        _3109 = _3011;
        _3111 = _3012;
    }
    bool _3318;
    vec4 _3121;
    vec4 _3143;
    float _3145;
    float _3149;
    float _3150;
    float _3151;
    float _3152;
    bool _3162;
    for (;;)
    {
        _3121 = cbMatDynParam._m0[0u];
        float _3123 = roundEven(_3121.y);
        bool _3124 = _3123 == 3.0;
        float _3125 = log2(_3111);
        float _3132 = exp2(_3125 * cbSceneParam._m0[78u].x) * _2980;
        float _3133 = exp2(_3125 * cbSceneParam._m0[78u].y) * _2981;
        float _3134 = exp2(_3125 * cbSceneParam._m0[78u].z) * _2982;
        float _3141 = _1080 + (-0.5);
        _3143 = cbMtdParam._m0[1u];
        _3145 = _3143.y * _3141;
        float _3148 = (_3123 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3149 = _3148 * (_3124 ? _3132 : (_3132 + (cbSceneParam._m0[72u].w * _3105)));
        _3150 = _3148 * (_3124 ? _3133 : (_3133 + (cbSceneParam._m0[72u].w * _3107)));
        _3151 = _3148 * (_3124 ? _3134 : (_3134 + (cbSceneParam._m0[72u].w * _3109)));
        _3152 = _3141 * 0.999000012874603271484375;
        _3162 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3162)
        {
            if ((cbInstanceData._m0[_1129 + 7u].x + _3152) < 0.5)
            {
                _3318 = true;
                break;
            }
        }
        uint _3259 = _1130 + uint(_3121.w);
        if ((cbInstanceData._m0[_3259].w < 1.0) && ((cbInstanceData._m0[_3259].w + _3152) < 0.5))
        {
            _3318 = true;
            break;
        }
        if ((_3145 + 1.0) < _3143.x)
        {
            _3318 = true;
            break;
        }
        _3318 = false;
        break;
    }
    float _3523;
    if (_3318)
    {
        discard_state = true;
        _3523 = 0.0;
    }
    else
    {
        _3523 = _2987;
    }
    SV_Target.x = _3149;
    SV_Target.y = _3150;
    SV_Target.z = _3151;
    SV_Target.w = _3523;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2987;
    discard_exit();
}


