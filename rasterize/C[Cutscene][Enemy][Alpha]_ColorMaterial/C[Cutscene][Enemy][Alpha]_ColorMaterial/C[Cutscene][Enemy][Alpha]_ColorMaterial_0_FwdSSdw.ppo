#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24;
layout(set = 0, binding = 12) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 13) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 18) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in float TEXCOORD_8;
layout(location = 7, component = 1) in float TEXCOORD_9;
layout(location = 7, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1413;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _286 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _290 = _286.z;
    float _303 = exp2(log2((1.0 - _290) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _304 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _305 = isnan(1.0) ? _304 : (isnan(_304) ? 1.0 : min(_304, 1.0));
    vec4 _318 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _326 = log2(0.0);
    float _328 = exp2(_326 * cbMtdParam._m0[23u].x);
    float _329 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _330 = isnan(1.0) ? _329 : (isnan(_329) ? 1.0 : min(_329, 1.0));
    float _339 = exp2(log2(cbMtdParam._m0[23u].y * _290) * cbMtdParam._m0[22u].y);
    float _340 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _341 = isnan(1.0) ? _340 : (isnan(_340) ? 1.0 : min(_340, 1.0));
    float _362 = roundEven(5.0 - ((texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _363 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _364 = isnan(4.0) ? _363 : (isnan(_363) ? 4.0 : min(_363, 4.0));
    float _376 = floor(_364);
    vec4 _379 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w, _376));
    vec4 _403 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _414 = cbMtdParam._m0[9u].x * _403.x;
    float _415 = cbMtdParam._m0[9u].y * _403.y;
    float _416 = cbMtdParam._m0[9u].z * _403.z;
    float _423 = (((cbMtdParam._m0[10u].x * _379.x) - _414) * _341) + _414;
    float _424 = (((cbMtdParam._m0[10u].y * _379.y) - _415) * _341) + _415;
    float _425 = (((cbMtdParam._m0[10u].z * _379.z) - _416) * _341) + _416;
    float _431 = exp2(log2(_286.w) * cbMtdParam._m0[23u].w);
    vec4 _444 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _464 = (((cbMtdParam._m0[16u].x * _444.x) - _423) * _431) + _423;
    float _465 = (((cbMtdParam._m0[16u].y * _444.y) - _424) * _431) + _424;
    float _466 = (((cbMtdParam._m0[16u].z * _444.z) - _425) * _431) + _425;
    vec4 _479 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _499 = (((cbMtdParam._m0[19u].x * _479.x) - _464) * _330) + _464;
    float _500 = (((cbMtdParam._m0[19u].y * _479.y) - _465) * _330) + _465;
    float _501 = (((cbMtdParam._m0[19u].z * _479.z) - _466) * _330) + _466;
    vec4 _514 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _539 = (_318.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _514.x) - _499) * _305) + _499);
    float _541 = (_318.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _514.y) - _500) * _305) + _500);
    float _543 = (_318.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _514.z) - _501) * _305) + _501);
    float _547 = cbMtdParam._m0[28u].x * TEXCOORD_8;
    float _556 = (_547 - (((texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _547))) * (cbMtdParam._m0[27u].w + 1.0);
    float _3802 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _557 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _564 = ((cbMtdParam._m0[21u].x - _539) * _557) + _539;
    float _565 = ((cbMtdParam._m0[21u].y - _541) * _557) + _541;
    float _566 = ((cbMtdParam._m0[21u].z - _543) * _557) + _543;
    vec4 _580 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24, SS_ClampLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.z) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.w) + cbTextureTilingScale._m0[11u].w));
    float _588 = (_580.x + (-1.0)) + (cbMtdParam._m0[28u].y * 2.0);
    float _3813 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _594 = exp2(log2(cbMtdParam._m0[28u].w * (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) * cbMtdParam._m0[28u].z);
    float _3824 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _595 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _199[5];
    float _200[5];
    _199[0u] = cbMtdParam._m0[29u].z;
    _200[0u] = cbMtdParam._m0[29u].w;
    _199[1u] = cbMtdParam._m0[31u].z;
    _200[1u] = cbMtdParam._m0[31u].w;
    _199[2u] = cbMtdParam._m0[31u].x;
    _200[2u] = cbMtdParam._m0[31u].y;
    _199[3u] = cbMtdParam._m0[30u].z;
    _200[3u] = cbMtdParam._m0[30u].w;
    _199[4u] = cbMtdParam._m0[30u].x;
    _200[4u] = cbMtdParam._m0[30u].y;
    float _637 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    uint _639 = uint(int(isnan(4.0) ? _637 : (isnan(_637) ? 4.0 : min(_637, 4.0))));
    float _646 = ((_200[_639] - cbMtdParam._m0[22u].z) * _341) + cbMtdParam._m0[22u].z;
    float _649 = ((cbMtdParam._m0[22u].w - _646) * _431) + _646;
    float _652 = ((cbMtdParam._m0[25u].x - _649) * _330) + _649;
    float _655 = ((cbMtdParam._m0[26u].x - _652) * _305) + _652;
    float _657 = _655 - (_655 * _547);
    vec4 _674 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w, _376));
    vec4 _692 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _694 = _692.x;
    float _695 = _692.y;
    float _700 = cbMtdParam._m0[22u].x + _692.z;
    float _703 = (((_674.z + _199[_639]) - _700) * _341) + _700;
    vec4 _716 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _727 = (((_716.z - _703) + cbMtdParam._m0[29u].x) * _431) + _703;
    float _732 = ((((_290 * 2.0) * _727) - _727) * cbMtdParam._m0[24u].w) + _727;
    vec4 _744 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _755 = (((cbMtdParam._m0[23u].z + _744.z) - _732) * _330) + _732;
    vec4 _768 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _779 = (((_768.z - _755) + cbMtdParam._m0[26u].y) * _305) + _755;
    vec4 _794 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _808 = ((cbMtdParam._m0[27u].y * _547) * ((_794.z * cbMtdParam._m0[27u].x) - _779)) + _779;
    float _820 = ((_674.x - _694) * _341) + _694;
    float _821 = ((_674.y - _695) * _341) + _695;
    float _826 = ((_716.x - _820) * _431) + _820;
    float _827 = ((_716.y - _821) * _431) + _821;
    float _832 = ((_744.x - _826) * _330) + _826;
    float _833 = ((_744.y - _827) * _330) + _827;
    float _842 = ((((_768.x - _832) * _305) + _832) * 2.0) + (-1.0);
    float _843 = ((((_768.y - _833) * _305) + _833) * 2.0) + (-1.0);
    float _844 = dot(vec2(_842, _843), vec2(_842, _843));
    float _3845 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _849 = sqrt(1.0 - (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))));
    float _859 = ((cbMtdParam._m0[25u].y * ((_286.x * 2.0) + (-1.0))) + _842) + ((((_794.x * 2.0) + (-1.0)) * _547) * cbMtdParam._m0[26u].w);
    float _860 = ((cbMtdParam._m0[25u].y * ((_286.y * 2.0) + (-1.0))) + _843) + (((cbMtdParam._m0[28u].x * TEXCOORD_9) * ((_794.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _863 = fma(_849, _235 * NORMAL.x, fma(_860, _242 * TANGENT.x, (_228 * _220) * _859));
    float _866 = fma(_849, _235 * NORMAL.y, fma(_860, _242 * TANGENT.y, (_228 * _221) * _859));
    float _869 = fma(_849, _235 * NORMAL.z, fma(_860, _242 * TANGENT.z, (_228 * _222) * _859));
    float _873 = inversesqrt(dot(vec3(_863, _866, _869), vec3(_863, _866, _869)));
    float _874 = _873 * _863;
    float _875 = _873 * _866;
    float _876 = _873 * _869;
    float _3856 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _877 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _3867 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _878 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _3878 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _3889 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _3900 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _3911 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _882 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _898 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _938 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _948 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _938);
    float _949 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _938);
    float _950 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _938);
    float _954 = inversesqrt(dot(vec3(_948, _949, _950), vec3(_948, _949, _950)));
    float _955 = _948 * _954;
    float _956 = _949 * _954;
    float _957 = _950 * _954;
    float _963 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _964 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _982 = fma(_876, cbSceneParam._m0[5u].z, fma(_875, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _874));
    float _985 = fma(_876, cbSceneParam._m0[6u].z, fma(_875, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _874));
    float _988 = fma(_876, cbSceneParam._m0[7u].z, fma(_875, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _874));
    uint _1001 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1003 = (_1001 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1009 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) * cbInstanceData._m0[_1003].x;
    float _1010 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) * cbInstanceData._m0[_1003].y;
    float _1011 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) * cbInstanceData._m0[_1003].z;
    float _3922 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _1012 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _3933 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _1013 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _3944 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _1014 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _1015 = 1.0 - _882;
    float _1016 = _1012 * _1015;
    float _1017 = _1013 * _1015;
    float _1018 = _1014 * _1015;
    float _1023 = (_1012 + (-0.039999999105930328369140625)) * _882;
    float _1024 = (_1013 + (-0.039999999105930328369140625)) * _882;
    float _1025 = (_1014 + (-0.039999999105930328369140625)) * _882;
    float _1026 = _1023 + 0.039999999105930328369140625;
    float _1028 = _1024 + 0.039999999105930328369140625;
    float _1029 = _1025 + 0.039999999105930328369140625;
    vec4 _1038 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _963, cbSceneParam._m0[86u].y * _964));
    float _1041 = _1038.x * TEXCOORD_5.w;
    float _1042 = dot(vec3(_874, _875, _876), vec3(_955, _956, _957));
    float _1045 = _1042 * 2.0;
    float _1049 = (_1045 * _874) - _955;
    float _1050 = (_1045 * _875) - _956;
    float _1051 = (_1045 * _876) - _957;
    float _1055 = abs(dot(vec3(_955, _956, _957), vec3(_874, _875, _876)));
    float _3955 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
    float _1057 = sqrt(_878);
    float _1068 = exp2((_1057 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1057 * 3.0));
    float _1074 = (1.0 - _1068) * ((_1057 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1075 = _1068 * _1057;
    float _1103 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1107 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1111 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1412;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1137 = fma(_1111, cbModelParam._m0[26u].z, fma(_1107, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1103));
        float _1141 = fma(_1111, cbModelParam._m0[27u].z, fma(_1107, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1103));
        float _1145 = fma(_1111, cbModelParam._m0[28u].z, fma(_1107, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1103));
        float _1170 = _1103 + _874;
        float _1171 = _1107 + _875;
        float _1172 = _1111 + _876;
        float _1182 = fma(_1172, cbModelParam._m0[26u].z, fma(_1171, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1170)) - _1137;
        float _1183 = fma(_1172, cbModelParam._m0[27u].z, fma(_1171, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1170)) - _1141;
        float _1184 = fma(_1172, cbModelParam._m0[28u].z, fma(_1171, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1170)) - _1145;
        float _1188 = inversesqrt(dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184)));
        float _1201 = ((_1188 * _1182) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1137 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1202 = ((_1188 * _1183) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1141 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1203 = ((_1188 * _1184) / cbModelParam._m0[34u].z) + ((((((_1145 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1201, _1202, _1203), 0.0);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1201, _1202, _1203), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1201, _1202, _1203), 0.0);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1201, _1202, _1203), 0.0);
        float _1240 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1206.x + (-0.5));
        float _1242 = _1240 * (_1206.y + (-0.5));
        float _1243 = _1240 * (_1206.z + (-0.5));
        float _1250 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1213.x + (-0.5));
        float _1252 = _1250 * (_1213.y + (-0.5));
        float _1253 = _1250 * (_1213.z + (-0.5));
        float _1260 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1220.x + (-0.5));
        float _1262 = _1260 * (_1220.y + (-0.5));
        float _1263 = _1260 * (_1220.z + (-0.5));
        float _1270 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1227.x + (-0.5));
        float _1272 = _1270 * (_1227.y + (-0.5));
        float _1273 = _1270 * (_1227.z + (-0.5));
        float _1274 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1275 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1276 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1277 = _1241 * 0.5;
        float _1278 = _1251 * 0.5;
        float _1279 = _1261 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1294 = (dot(vec3(_874, _875, _876), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _3981 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1304 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1274 + 9.9999997473787516355514526367188e-06);
        float _3992 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _4003 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_1306 + 1.0))) + _1311) * _1274;
        float _1321 = _1242 * 0.5;
        float _1322 = _1252 * 0.5;
        float _1323 = _1262 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1337 = (dot(vec3(_874, _875, _876), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _4014 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1346 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1275 + 9.9999997473787516355514526367188e-06);
        float _4025 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _4036 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_1348 + 1.0))) + _1353) * _1275;
        float _1363 = _1243 * 0.5;
        float _1364 = _1253 * 0.5;
        float _1365 = _1263 * 0.5;
        float _1366 = dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365));
        float _1371 = (_1366 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1366);
        float _1379 = (dot(vec3(_874, _875, _876), vec3(_1371 * _1363, _1371 * _1364, _1371 * _1365)) + 1.0) * 0.5;
        float _4047 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1388 = sqrt(((_1364 * _1364) + (_1363 * _1363)) + (_1365 * _1365)) / (_1276 + 9.9999997473787516355514526367188e-06);
        float _4058 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1390 = _1389 * 2.0;
        float _1394 = (1.0 - _1389) / (_1389 + 1.0);
        float _4069 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1404 = ((((1.0 - _1395) * (_1390 + 2.0)) * exp2(log2(isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_1390 + 1.0))) + _1395) * _1276;
        _1412 = _1243;
        _1414 = _1242;
        _1415 = _1241;
        _1416 = _1253;
        _1417 = _1252;
        _1418 = _1251;
        _1419 = _1263;
        _1420 = _1262;
        _1421 = _1261;
        _1422 = _1276;
        _1423 = _1275;
        _1424 = _1274;
        _1425 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
        _1426 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
        _1427 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)));
    }
    else
    {
        _1412 = _1413;
        _1414 = _1413;
        _1415 = _1413;
        _1416 = _1413;
        _1417 = _1413;
        _1418 = _1413;
        _1419 = _1413;
        _1420 = _1413;
        _1421 = _1413;
        _1422 = _1413;
        _1423 = _1413;
        _1424 = _1413;
        _1425 = 0.0;
        _1426 = 0.0;
        _1427 = 0.0;
    }
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1450 = fma(_1111, cbModelParam._m0[30u].z, fma(_1107, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1103));
        float _1454 = fma(_1111, cbModelParam._m0[31u].z, fma(_1107, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1103));
        float _1458 = fma(_1111, cbModelParam._m0[32u].z, fma(_1107, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1103));
        float _1481 = _1103 + _874;
        float _1482 = _1107 + _875;
        float _1483 = _1111 + _876;
        float _1493 = fma(_1483, cbModelParam._m0[30u].z, fma(_1482, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1481)) - _1450;
        float _1494 = fma(_1483, cbModelParam._m0[31u].z, fma(_1482, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1481)) - _1454;
        float _1495 = fma(_1483, cbModelParam._m0[32u].z, fma(_1482, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1481)) - _1458;
        float _1499 = inversesqrt(dot(vec3(_1493, _1494, _1495), vec3(_1493, _1494, _1495)));
        float _1512 = ((_1499 * _1493) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1450 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1513 = ((_1499 * _1494) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1454 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1514 = ((_1499 * _1495) / cbModelParam._m0[35u].z) + ((((((_1458 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1516 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1512, _1513, _1514), 0.0);
        vec4 _1523 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1512, _1513, _1514), 0.0);
        vec4 _1530 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1512, _1513, _1514), 0.0);
        vec4 _1537 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1512, _1513, _1514), 0.0);
        float _1549 = exp2((_1516.w + (-0.5)) * 20.0) * 2.0;
        float _1550 = _1549 * (_1516.x + (-0.5));
        float _1551 = _1549 * (_1516.y + (-0.5));
        float _1552 = _1549 * (_1516.z + (-0.5));
        float _1559 = exp2((_1523.w + (-0.5)) * 20.0) * 2.0;
        float _1560 = _1559 * (_1523.x + (-0.5));
        float _1561 = _1559 * (_1523.y + (-0.5));
        float _1562 = _1559 * (_1523.z + (-0.5));
        float _1569 = exp2((_1530.w + (-0.5)) * 20.0) * 2.0;
        float _1570 = _1569 * (_1530.x + (-0.5));
        float _1571 = _1569 * (_1530.y + (-0.5));
        float _1572 = _1569 * (_1530.z + (-0.5));
        float _1579 = exp2((_1537.w + (-0.5)) * 20.0) * 2.0;
        float _1580 = _1579 * (_1537.x + (-0.5));
        float _1581 = _1579 * (_1537.y + (-0.5));
        float _1582 = _1579 * (_1537.z + (-0.5));
        float _1583 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1584 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1585 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1586 = _1550 * 0.5;
        float _1587 = _1560 * 0.5;
        float _1588 = _1570 * 0.5;
        float _1589 = dot(vec3(_1586, _1587, _1588), vec3(_1586, _1587, _1588));
        float _1594 = (_1589 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1589);
        float _1602 = (dot(vec3(_874, _875, _876), vec3(_1594 * _1586, _1594 * _1587, _1594 * _1588)) + 1.0) * 0.5;
        float _4110 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1611 = sqrt(((_1587 * _1587) + (_1586 * _1586)) + (_1588 * _1588)) / (_1583 + 9.9999997473787516355514526367188e-06);
        float _4121 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1613 = _1612 * 2.0;
        float _1617 = (1.0 - _1612) / (_1612 + 1.0);
        float _4132 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1627 = ((((1.0 - _1618) * (_1613 + 2.0)) * exp2(log2(isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_1613 + 1.0))) + _1618) * _1583;
        float _1628 = _1551 * 0.5;
        float _1629 = _1561 * 0.5;
        float _1630 = _1571 * 0.5;
        float _1631 = dot(vec3(_1628, _1629, _1630), vec3(_1628, _1629, _1630));
        float _1636 = (_1631 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1631);
        float _1644 = (dot(vec3(_874, _875, _876), vec3(_1636 * _1628, _1636 * _1629, _1636 * _1630)) + 1.0) * 0.5;
        float _4143 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1653 = sqrt(((_1629 * _1629) + (_1628 * _1628)) + (_1630 * _1630)) / (_1584 + 9.9999997473787516355514526367188e-06);
        float _4154 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1655 = _1654 * 2.0;
        float _1659 = (1.0 - _1654) / (_1654 + 1.0);
        float _4165 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1669 = ((((1.0 - _1660) * (_1655 + 2.0)) * exp2(log2(isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_1655 + 1.0))) + _1660) * _1584;
        float _1670 = _1552 * 0.5;
        float _1671 = _1562 * 0.5;
        float _1672 = _1572 * 0.5;
        float _1673 = dot(vec3(_1670, _1671, _1672), vec3(_1670, _1671, _1672));
        float _1678 = (_1673 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1673);
        float _1686 = (dot(vec3(_874, _875, _876), vec3(_1678 * _1670, _1678 * _1671, _1678 * _1672)) + 1.0) * 0.5;
        float _4176 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1695 = sqrt(((_1671 * _1671) + (_1670 * _1670)) + (_1672 * _1672)) / (_1585 + 9.9999997473787516355514526367188e-06);
        float _4187 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1697 = _1696 * 2.0;
        float _1701 = (1.0 - _1696) / (_1696 + 1.0);
        float _4198 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1702 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1711 = ((((1.0 - _1702) * (_1697 + 2.0)) * exp2(log2(isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_1697 + 1.0))) + _1702) * _1585;
        _1719 = _1552;
        _1720 = _1551;
        _1721 = _1550;
        _1722 = _1562;
        _1723 = _1561;
        _1724 = _1560;
        _1725 = _1572;
        _1726 = _1571;
        _1727 = _1570;
        _1728 = _1585;
        _1729 = _1584;
        _1730 = _1583;
        _1731 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)));
        _1732 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)));
        _1733 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)));
    }
    else
    {
        _1719 = _1413;
        _1720 = _1413;
        _1721 = _1413;
        _1722 = _1413;
        _1723 = _1413;
        _1724 = _1413;
        _1725 = _1413;
        _1726 = _1413;
        _1727 = _1413;
        _1728 = _1413;
        _1729 = _1413;
        _1730 = _1413;
        _1731 = 0.0;
        _1732 = 0.0;
        _1733 = 0.0;
    }
    float _1743 = (cbModelParam._m0[1u].x * (_1731 - _1425)) + _1425;
    float _1744 = (cbModelParam._m0[1u].x * (_1732 - _1426)) + _1426;
    float _1745 = (cbModelParam._m0[1u].x * (_1733 - _1427)) + _1427;
    float _1766 = fma(_1745, cbSceneParam._m0[89u].z, fma(_1744, cbSceneParam._m0[89u].y, _1743 * cbSceneParam._m0[89u].x));
    float _1769 = fma(_1745, cbSceneParam._m0[90u].z, fma(_1744, cbSceneParam._m0[90u].y, _1743 * cbSceneParam._m0[90u].x));
    float _1772 = fma(_1745, cbSceneParam._m0[91u].z, fma(_1744, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1743));
    float _1787 = _1049 * 0.5;
    float _1788 = _1050 * 0.5;
    float _1789 = _1051 * 0.5;
    float _1790 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1721, _1724, _1727, _1730));
    float _1793 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1720, _1723, _1726, _1729));
    float _1796 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1719, _1722, _1725, _1728));
    float _1830;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1803 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1412, _1416, _1419, _1422));
        float _1807 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1414, _1417, _1420, _1423));
        float _1811 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1415, _1418, _1421, _1424));
        float _1818 = dot(vec4(cbModelParam._m0[39u]), vec4(_1787, _1788, _1789, 1.0));
        _1830 = dot(vec3(isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)), isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0)), isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1818) ? 0.0 : (isnan(0.0) ? _1818 : max(0.0, _1818))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1830 = 1.0;
    }
    float _1841;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1832 = dot(vec4(cbModelParam._m0[40u]), vec4(_1787, _1788, _1789, 1.0));
        _1841 = dot(vec3(isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0)), isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0)), isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1832) ? 0.0 : (isnan(0.0) ? _1832 : max(0.0, _1832))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1841 = 1.0;
    }
    float _1845 = (_1841 * cbModelParam._m0[1u].x) + (_1830 * (1.0 - cbModelParam._m0[1u].x));
    float _1855 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _878);
    float _1856 = isnan(_1855) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1855 : min(cbModelParam._m0[25u].z, _1855));
    float _1936;
    float _1938;
    float _1940;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1903 = fma(_1111, cbModelParam._m0[13u].z, fma(_1107, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1103)) + cbModelParam._m0[13u].w;
        float _1907 = fma(_1111, cbModelParam._m0[14u].z, fma(_1107, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1103)) + cbModelParam._m0[14u].w;
        float _1911 = fma(_1111, cbModelParam._m0[15u].z, fma(_1107, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1103)) + cbModelParam._m0[15u].w;
        float _1914 = fma(_1051, cbModelParam._m0[13u].z, fma(_1050, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1049));
        float _1917 = fma(_1051, cbModelParam._m0[14u].z, fma(_1050, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1049));
        float _1920 = fma(_1051, cbModelParam._m0[15u].z, fma(_1050, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1049));
        float _1948;
        if (_1914 > 0.0)
        {
            _1948 = abs((1.0 - _1903) / _1914);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1903 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1948 = frontier_phi_14_12_ladder;
        }
        float _2171;
        if (_1917 > 0.0)
        {
            _2171 = abs((1.0 - _1907) / _1917);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1917 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1907 + 1.0) / _1917);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2171 = frontier_phi_23_19_ladder;
        }
        float _2428;
        if (_1920 > 0.0)
        {
            _2428 = abs((1.0 - _1911) / _1920);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1911 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2428 = frontier_phi_35_30_ladder;
        }
        float _2430 = isnan(_2171) ? _1948 : (isnan(_1948) ? _2171 : min(_1948, _2171));
        float _2431 = isnan(_2428) ? _2430 : (isnan(_2430) ? _2428 : min(_2430, _2428));
        float _2435 = (_2431 * _1914) + _1903;
        float _2436 = (_2431 * _1917) + _1907;
        float _2437 = (_2431 * _1920) + _1911;
        float _2438 = _2431 * 9.9999997473787516355514526367188e-05;
        float _2440 = (-1.0) - _2438;
        float _2442 = _2438 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2437 > _2442) || ((_2437 < _2440) || ((_2436 > _2442) || ((_2436 < _2440) || ((_2435 < _2440) || (_2435 > _2442))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2565 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2437, cbModelParam._m0[9u].z, fma(_2436, cbModelParam._m0[9u].y, _2435 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2437, cbModelParam._m0[10u].z, fma(_2436, cbModelParam._m0[10u].y, _2435 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2437, cbModelParam._m0[11u].z, fma(_2436, cbModelParam._m0[11u].y, _2435 * cbModelParam._m0[11u].x))), _1856);
            frontier_phi_13_35_ladder = _2565.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2565.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2565.x * cbModelParam._m0[1u].y;
        }
        _1936 = frontier_phi_13_35_ladder_2;
        _1938 = frontier_phi_13_35_ladder_1;
        _1940 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1924 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1049, _1050, _1051), _1856);
        _1936 = _1924.x * cbModelParam._m0[1u].y;
        _1938 = _1924.y * cbModelParam._m0[1u].y;
        _1940 = _1924.z * cbModelParam._m0[1u].y;
    }
    float _1944 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _878);
    float _1945 = isnan(_1944) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1944 : min(cbModelParam._m0[25u].w, _1944));
    float _2034;
    float _2036;
    float _2038;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1998 = fma(_1111, cbModelParam._m0[21u].z, fma(_1107, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1103)) + cbModelParam._m0[21u].w;
        float _2002 = fma(_1111, cbModelParam._m0[22u].z, fma(_1107, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1103)) + cbModelParam._m0[22u].w;
        float _2006 = fma(_1111, cbModelParam._m0[23u].z, fma(_1107, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1103)) + cbModelParam._m0[23u].w;
        float _2009 = fma(_1051, cbModelParam._m0[21u].z, fma(_1050, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1049));
        float _2012 = fma(_1051, cbModelParam._m0[22u].z, fma(_1050, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1049));
        float _2015 = fma(_1051, cbModelParam._m0[23u].z, fma(_1050, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1049));
        float _2176;
        if (_2009 > 0.0)
        {
            _2176 = abs((1.0 - _1998) / _2009);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1998 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2176 = frontier_phi_25_21_ladder;
        }
        float _2455;
        if (_2012 > 0.0)
        {
            _2455 = abs((1.0 - _2002) / _2012);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2002 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2455 = frontier_phi_37_32_ladder;
        }
        float _2668;
        if (_2015 > 0.0)
        {
            _2668 = abs((1.0 - _2006) / _2015);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2006 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2668 = frontier_phi_46_43_ladder;
        }
        float _2670 = isnan(_2455) ? _2176 : (isnan(_2176) ? _2455 : min(_2176, _2455));
        float _2671 = isnan(_2668) ? _2670 : (isnan(_2670) ? _2668 : min(_2670, _2668));
        float _2675 = (_2671 * _2009) + _1998;
        float _2676 = (_2671 * _2012) + _2002;
        float _2677 = (_2671 * _2015) + _2006;
        float _2678 = _2671 * 9.9999997473787516355514526367188e-05;
        float _2679 = (-1.0) - _2678;
        float _2681 = _2678 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2677 > _2681) || ((_2677 < _2679) || ((_2676 > _2681) || ((_2676 < _2679) || ((_2675 < _2679) || (_2675 > _2681))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2878 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2677, cbModelParam._m0[17u].z, fma(_2676, cbModelParam._m0[17u].y, _2675 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2677, cbModelParam._m0[18u].z, fma(_2676, cbModelParam._m0[18u].y, _2675 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2677, cbModelParam._m0[19u].z, fma(_2676, cbModelParam._m0[19u].y, _2675 * cbModelParam._m0[19u].x))), _1945);
            frontier_phi_22_46_ladder = _2878.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2878.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2878.x * cbModelParam._m0[1u].z;
        }
        _2034 = frontier_phi_22_46_ladder_2;
        _2036 = frontier_phi_22_46_ladder_1;
        _2038 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2018 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1049, _1050, _1051), _1945);
        _2034 = _2018.x * cbModelParam._m0[1u].z;
        _2036 = _2018.y * cbModelParam._m0[1u].z;
        _2038 = _2018.z * cbModelParam._m0[1u].z;
    }
    float _2051 = (((_1074 * _1026) + _1075) * _1041) * ((cbModelParam._m0[1u].w * (_2034 - _1936)) + _1936);
    float _2053 = (((_1074 * _1028) + _1075) * _1041) * ((cbModelParam._m0[1u].w * (_2036 - _1938)) + _1938);
    float _2055 = (((_1074 * _1029) + _1075) * _1041) * ((cbModelParam._m0[1u].w * (_2038 - _1940)) + _1940);
    float _2058 = fma(_2055, cbSceneParam._m0[89u].z, fma(_2053, cbSceneParam._m0[89u].y, _2051 * cbSceneParam._m0[89u].x));
    float _2061 = fma(_2055, cbSceneParam._m0[90u].z, fma(_2053, cbSceneParam._m0[90u].y, _2051 * cbSceneParam._m0[90u].x));
    float _2064 = fma(_2055, cbSceneParam._m0[91u].z, fma(_2053, cbSceneParam._m0[91u].y, _2051 * cbSceneParam._m0[91u].x));
    vec4 _2072 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_963, _964));
    float _2074 = _2072.w;
    float _2086 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2074);
    float _2087 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2074);
    float _2088 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2074);
    uvec4 _2092 = floatBitsToUint(cbInstanceData._m0[_1001 + 5u]);
    uint _2094 = _2092.x * 14u;
    uint _2095 = _2094 + 13u;
    float _2102 = _1041 + (-1.0);
    float _2107 = (cbLight._m0[_2095].x * _2102) + 1.0;
    float _2108 = (cbLight._m0[_2095].y * _2102) + 1.0;
    float _2109 = (cbLight._m0[_2095].z * _2102) + 1.0;
    float _2110 = (cbLight._m0[_2095].w * _2102) + 1.0;
    uint _2111 = _2094 + 5u;
    float _2117 = isnan(1.0) ? _2108 : (isnan(_2108) ? 1.0 : min(_2108, 1.0));
    uint _2121 = _2094 + 4u;
    float _2130 = isnan(1.0) ? _2107 : (isnan(_2107) ? 1.0 : min(_2107, 1.0));
    uint _2134 = _2094 | 1u;
    float _2145 = dot(vec3(cbLight._m0[_2094].xyz), vec3(_874, _875, _876));
    float _2148 = dot(vec3(cbLight._m0[_2134].xyz), vec3(_874, _875, _876));
    float _4334 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _4345 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2153 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * 0.3183098733425140380859375;
    float _2155 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * 0.3183098733425140380859375;
    float _2162 = ((cbLight._m0[_2111].x * _2117) * _2155) + (((cbLight._m0[_2121].x * _2086) * _2130) * _2153);
    float _2163 = ((_2117 * cbLight._m0[_2111].y) * _2155) + (((cbLight._m0[_2121].y * _2087) * _2130) * _2153);
    float _2164 = ((_2117 * cbLight._m0[_2111].z) * _2155) + (((cbLight._m0[_2121].z * _2088) * _2130) * _2153);
    uvec4 _2168 = floatBitsToUint(cbLight._m0[_2094 + 12u]);
    bool _2170 = _2168.x == 0u;
    float _2181;
    float _2183;
    float _2185;
    if (_2170)
    {
        _2181 = _2162;
        _2183 = _2163;
        _2185 = _2164;
    }
    else
    {
        uint _2189 = _2094 + 6u;
        float _2205 = (dot(vec3(cbLight._m0[_2094 + 2u].xyz), vec3(_874, _875, _876)) * 0.5) + 0.5;
        float _2206 = _2205 * _2205;
        float _4356 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2207 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _2208 = isnan(1.0) ? _2109 : (isnan(_2109) ? 1.0 : min(_2109, 1.0));
        _2181 = (((cbLight._m0[_2189].x * 0.3183098733425140380859375) * _2207) * _2208) + _2162;
        _2183 = (((cbLight._m0[_2189].y * 0.3183098733425140380859375) * _2207) * _2208) + _2163;
        _2185 = (((cbLight._m0[_2189].z * 0.3183098733425140380859375) * _2207) * _2208) + _2164;
    }
    bool _2188 = _2168.y == 0u;
    float _2226;
    float _2228;
    float _2230;
    if (_2188)
    {
        _2226 = _2181;
        _2228 = _2183;
        _2230 = _2185;
    }
    else
    {
        uint _2399 = _2094 + 7u;
        float _2415 = (dot(vec3(cbLight._m0[_2094 + 3u].xyz), vec3(_874, _875, _876)) * 0.5) + 0.5;
        float _2416 = _2415 * _2415;
        float _4372 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2417 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _2418 = isnan(1.0) ? _2110 : (isnan(_2110) ? 1.0 : min(_2110, 1.0));
        _2226 = (((cbLight._m0[_2399].x * 0.3183098733425140380859375) * _2417) * _2418) + _2181;
        _2228 = (((cbLight._m0[_2399].y * 0.3183098733425140380859375) * _2417) * _2418) + _2183;
        _2230 = (((cbLight._m0[_2399].z * 0.3183098733425140380859375) * _2417) * _2418) + _2185;
    }
    uint _2233 = _2094 + 8u;
    float _2246 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2094].w)) * _878) * 0.949999988079071044921875);
    float _2247 = _2246 * _2246;
    float _2248 = cbLight._m0[_2094].x + _955;
    float _2249 = cbLight._m0[_2094].y + _956;
    float _2250 = cbLight._m0[_2094].z + _957;
    float _2254 = inversesqrt(dot(vec3(_2248, _2249, _2250), vec3(_2248, _2249, _2250)));
    float _2255 = _2254 * _2248;
    float _2256 = _2254 * _2249;
    float _2257 = _2254 * _2250;
    float _2258 = dot(vec3(_874, _875, _876), vec3(cbLight._m0[_2094].xyz));
    float _4388 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2261 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
    float _4399 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _2262 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
    float _2263 = dot(vec3(_874, _875, _876), vec3(_2255, _2256, _2257));
    float _4410 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2266 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
    float _2267 = dot(vec3(cbLight._m0[_2094].xyz), vec3(_2255, _2256, _2257));
    float _4421 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2271 = _2247 * _2247;
    float _2275 = ((_2266 * _2266) * (_2271 + (-1.0))) + 1.0;
    float _2283 = exp2(log2(1.0 - (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0)))) * 5.0);
    float _2284 = 0.959999978542327880859375 - _1023;
    float _2286 = 0.959999978542327880859375 - _1024;
    float _2287 = 0.959999978542327880859375 - _1025;
    float _2294 = 1.0 - _2247;
    float _2305 = (0.5 / (((_2262 * ((_2261 * _2294) + _2247)) + 9.9999999392252902907785028219223e-09) + (((_2262 * _2294) + _2247) * _2261))) * _2261;
    float _4432 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2307 = (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_2271 / ((_2275 * _2275) * 3.141590118408203125));
    uint _2321 = _2094 + 9u;
    float _2332 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2134].w)) * _878) * 0.949999988079071044921875);
    float _2333 = _2332 * _2332;
    float _2334 = cbLight._m0[_2134].x + _955;
    float _2335 = cbLight._m0[_2134].y + _956;
    float _2336 = cbLight._m0[_2134].z + _957;
    float _2340 = inversesqrt(dot(vec3(_2334, _2335, _2336), vec3(_2334, _2335, _2336)));
    float _2341 = _2340 * _2334;
    float _2342 = _2340 * _2335;
    float _2343 = _2340 * _2336;
    float _2344 = dot(vec3(_874, _875, _876), vec3(cbLight._m0[_2134].xyz));
    float _4443 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2347 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
    float _2348 = dot(vec3(_874, _875, _876), vec3(_2341, _2342, _2343));
    float _4454 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2351 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
    float _2352 = dot(vec3(cbLight._m0[_2134].xyz), vec3(_2341, _2342, _2343));
    float _4465 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2356 = _2333 * _2333;
    float _2360 = ((_2351 * _2351) * (_2356 + (-1.0))) + 1.0;
    float _2367 = exp2(log2(1.0 - (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0)))) * 5.0);
    float _2374 = 1.0 - _2333;
    float _2384 = (0.5 / (((_2262 * ((_2347 * _2374) + _2333)) + 9.9999999392252902907785028219223e-09) + (((_2262 * _2374) + _2333) * _2347))) * _2347;
    float _4476 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2386 = (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2356 / ((_2360 * _2360) * 3.141590118408203125));
    float _2396 = (((((_2367 * _2284) + _1026) * cbLight._m0[_2321].x) * _2386) * _2117) + ((((cbLight._m0[_2233].x * _2086) * ((_2283 * _2284) + _1026)) * _2307) * _2130);
    float _2397 = (((((_2367 * _2286) + _1028) * cbLight._m0[_2321].y) * _2386) * _2117) + ((((cbLight._m0[_2233].y * _2087) * ((_2283 * _2286) + _1028)) * _2307) * _2130);
    float _2398 = (((((_2367 * _2287) + _1029) * cbLight._m0[_2321].z) * _2386) * _2117) + ((((cbLight._m0[_2233].z * _2088) * ((_2283 * _2287) + _1029)) * _2307) * _2130);
    float _2460;
    float _2462;
    float _2464;
    if (_2170)
    {
        _2460 = _2396;
        _2462 = _2397;
        _2464 = _2398;
    }
    else
    {
        uint _2466 = _2094 + 2u;
        uint _2470 = _2094 + 10u;
        float _2484 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2466].w)) * _878) * 0.949999988079071044921875);
        float _2485 = _2484 * _2484;
        float _2486 = cbLight._m0[_2466].x + _955;
        float _2487 = cbLight._m0[_2466].y + _956;
        float _2488 = cbLight._m0[_2466].z + _957;
        float _2492 = inversesqrt(dot(vec3(_2486, _2487, _2488), vec3(_2486, _2487, _2488)));
        float _2493 = _2492 * _2486;
        float _2494 = _2492 * _2487;
        float _2495 = _2492 * _2488;
        float _2496 = dot(vec3(_874, _875, _876), vec3(cbLight._m0[_2466].xyz));
        float _4487 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        float _2499 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _2500 = dot(vec3(_874, _875, _876), vec3(_2493, _2494, _2495));
        float _4498 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2503 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _2504 = dot(vec3(cbLight._m0[_2466].xyz), vec3(_2493, _2494, _2495));
        float _4509 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2508 = _2485 * _2485;
        float _2512 = ((_2503 * _2503) * (_2508 + (-1.0))) + 1.0;
        float _2519 = exp2(log2(1.0 - (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0)))) * 5.0);
        float _2526 = 1.0 - _2485;
        float _2536 = (0.5 / (((_2262 * ((_2499 * _2526) + _2485)) + 9.9999999392252902907785028219223e-09) + (((_2262 * _2526) + _2485) * _2499))) * _2499;
        float _4520 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2538 = (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_2508 / ((_2512 * _2512) * 3.141590118408203125));
        float _2539 = isnan(1.0) ? _2109 : (isnan(_2109) ? 1.0 : min(_2109, 1.0));
        _2460 = (((((_2519 * _2284) + _1026) * cbLight._m0[_2470].x) * _2538) * _2539) + _2396;
        _2462 = (((((_2519 * _2286) + _1028) * cbLight._m0[_2470].y) * _2538) * _2539) + _2397;
        _2464 = (((((_2519 * _2287) + _1029) * cbLight._m0[_2470].z) * _2538) * _2539) + _2398;
    }
    float _2574;
    float _2576;
    float _2578;
    if (_2188)
    {
        _2574 = _2460;
        _2576 = _2462;
        _2578 = _2464;
    }
    else
    {
        uint _2585 = _2094 + 3u;
        uint _2589 = _2094 + 11u;
        float _2603 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2585].w)) * _878) * 0.949999988079071044921875);
        float _2604 = _2603 * _2603;
        float _2605 = cbLight._m0[_2585].x + _955;
        float _2606 = cbLight._m0[_2585].y + _956;
        float _2607 = cbLight._m0[_2585].z + _957;
        float _2611 = inversesqrt(dot(vec3(_2605, _2606, _2607), vec3(_2605, _2606, _2607)));
        float _2612 = _2611 * _2605;
        float _2613 = _2611 * _2606;
        float _2614 = _2611 * _2607;
        float _2615 = dot(vec3(_874, _875, _876), vec3(cbLight._m0[_2585].xyz));
        float _4536 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        float _2618 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _2619 = dot(vec3(_874, _875, _876), vec3(_2612, _2613, _2614));
        float _4547 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2622 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _2623 = dot(vec3(cbLight._m0[_2585].xyz), vec3(_2612, _2613, _2614));
        float _4558 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2627 = _2604 * _2604;
        float _2631 = ((_2622 * _2622) * (_2627 + (-1.0))) + 1.0;
        float _2638 = exp2(log2(1.0 - (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0)))) * 5.0);
        float _2645 = 1.0 - _2604;
        float _2655 = (0.5 / (((_2262 * ((_2618 * _2645) + _2604)) + 9.9999999392252902907785028219223e-09) + (((_2262 * _2645) + _2604) * _2618))) * _2618;
        float _4569 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2657 = (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_2627 / ((_2631 * _2631) * 3.141590118408203125));
        float _2658 = isnan(1.0) ? _2110 : (isnan(_2110) ? 1.0 : min(_2110, 1.0));
        _2574 = (((((_2638 * _2284) + _1026) * cbLight._m0[_2589].x) * _2657) * _2658) + _2460;
        _2576 = (((((_2638 * _2286) + _1028) * cbLight._m0[_2589].y) * _2657) * _2658) + _2462;
        _2578 = (((((_2638 * _2287) + _1029) * cbLight._m0[_2589].z) * _2657) * _2658) + _2464;
    }
    float _2793;
    float _2795;
    float _2797;
    float _2799;
    float _2801;
    float _2803;
    if (_2092.y == 0u)
    {
        float _2733 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2734 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2733;
        float _2735 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2733;
        float _2736 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2733;
        uvec4 _2748 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2749 = _2748.x;
        uint _2760 = uint((float(_2748.y) * floor(float(uint(cbSceneParam._m0[85u].y * _964) / _2749))) + floor(float(uint(cbSceneParam._m0[85u].x * _963) / _2749)));
        float _2770 = (log2(_2736 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2771 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
        uint _2774 = uint(isnan(14.0) ? _2771 : (isnan(_2771) ? 14.0 : min(_2771, 14.0)));
        uvec4 _2779 = texelFetch(g_lightClusterGridBuffer, int(((_2774 << 2u) + (_2760 << 6u)) >> 2u));
        uint _2780 = _2779.x;
        uint _2781 = _2748.z;
        float _2883;
        float _2885;
        float _2887;
        float _2889;
        float _2891;
        float _2893;
        if (((((1u << ((_2781 >> 4u) & 15u)) + 4294967295u) & _2780) == 0u) || ((_2781 & 240u) == 0u))
        {
            _2883 = 0.0;
            _2885 = 0.0;
            _2887 = 0.0;
            _2889 = 0.0;
            _2891 = 0.0;
            _2893 = 0.0;
        }
        else
        {
            float _2884;
            float _2886;
            float _2888;
            float _2890;
            float _2892;
            float _2894;
            float _3028 = 0.0;
            float _3029 = 0.0;
            float _3030 = 0.0;
            float _3031 = 0.0;
            float _3032 = 0.0;
            float _3033 = 0.0;
            uint _3034 = 0u;
            uint _3043;
            bool _3044;
            for (;;)
            {
                _3043 = texelFetch(g_lightClassification, int((((_2774 << 5u) + (_2760 << 9u)) + (_3034 << 2u)) >> 2u)).x;
                _3044 = _3043 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3044)
                {
                    frontier_phi_61_pred = _3028;
                    frontier_phi_61_pred_1 = _3033;
                    frontier_phi_61_pred_2 = _3032;
                    frontier_phi_61_pred_3 = _3031;
                    frontier_phi_61_pred_4 = _3030;
                    frontier_phi_61_pred_5 = _3029;
                }
                else
                {
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    uint _3158;
                    _3152 = _3028;
                    _3153 = _3029;
                    _3154 = _3030;
                    _3155 = _3031;
                    _3156 = _3032;
                    _3157 = _3033;
                    _3158 = _3043;
                    float _3084;
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    for (;;)
                    {
                        uint _3162 = uint(findLSB(_3158)) + (_3034 << 5u);
                        uint _3159 = (_3158 + 4294967295u) & _3158;
                        uint _3164 = _3162 * 48u;
                        vec4 _3178 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3164)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 3u)).x));
                        uint _3184 = (_3162 * 48u) + 4u;
                        vec4 _3197 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3184)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 3u)).x));
                        uint _3203 = (_3162 * 48u) + 8u;
                        vec3 _3214 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3203)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 2u)).x));
                        float _3218 = _3178.x - _2734;
                        float _3219 = _3178.y - _2735;
                        float _3220 = _3178.z - _2736;
                        float _3221 = dot(vec3(_3218, _3219, _3220), vec3(_3218, _3219, _3220));
                        float _3224 = inversesqrt(_3221);
                        float _3225 = _3224 * _3218;
                        float _3226 = _3224 * _3219;
                        float _3227 = _3224 * _3220;
                        float _3228 = dot(vec3(_982, _985, _988), vec3(_3225, _3226, _3227));
                        float _3233 = 1.0 - (_3221 * _3178.w);
                        float _4595 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                        float _3234 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                        float _3235 = sqrt(_3221) * _3197.w;
                        float _3238 = 1.39999997615814208984375 / (_3235 + 1.39999997615814208984375);
                        float _3239 = _3238 * _3238;
                        float _3242 = ((1.0 - _3239) * _3228) + _3239;
                        float _3245 = _3235 * _3235;
                        float _3249 = ((isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0))) * _3234) / ((_3245 * 0.699999988079071044921875) + 1.0);
                        float _3253 = (-0.0) - _2734;
                        float _3254 = (-0.0) - _2735;
                        float _3255 = (-0.0) - _2736;
                        float _3259 = inversesqrt(dot(vec3(_3253, _3254, _3255), vec3(_3253, _3254, _3255)));
                        float _3260 = _3259 * _3253;
                        float _3261 = _3259 * _3254;
                        float _3262 = _3259 * _3255;
                        float _3270 = exp2(log2(1.0 / ((_3245 * 3.5) + 5.0)) * 0.25);
                        float _3271 = 1.0 - _1057;
                        float _3278 = sqrt(1.0 - ((1.0 - (_3271 * _3271)) * (1.0 - (_3270 * _3270))));
                        float _3279 = _3278 * _3278;
                        float _3280 = _3279 * _3279;
                        float _3281 = _3260 + _3225;
                        float _3282 = _3261 + _3226;
                        float _3283 = _3262 + _3227;
                        float _3287 = inversesqrt(dot(vec3(_3281, _3282, _3283), vec3(_3281, _3282, _3283)));
                        float _3291 = dot(vec3(_982, _985, _988), vec3(_3260, _3261, _3262));
                        float _4611 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                        float _3294 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
                        float _3295 = dot(vec3(_982, _985, _988), vec3(_3287 * _3281, _3287 * _3282, _3287 * _3283));
                        float _4622 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                        float _3298 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                        float _3302 = ((_3298 * _3298) * (_3280 + (-1.0))) + 1.0;
                        float _3303 = _3238 * _3279;
                        float _3304 = _3303 * _3303;
                        float _3307 = ((1.0 - _3304) * _3228) + _3304;
                        float _4633 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                        float _3308 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                        float _3309 = 1.0 - _3279;
                        float _3319 = (0.5 / (((_3308 * ((_3294 * _3309) + _3279)) + 9.9999999392252902907785028219223e-09) + (((_3308 * _3309) + _3279) * _3294))) * _3308;
                        float _4644 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                        float _3330 = (((_3280 * 3.1415927410125732421875) * (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0)))) / ((_3302 * _3302) * ((_3245 * 2.1991131305694580078125) + 3.141590118408203125))) * _3234;
                        _3087 = (_3249 * _3197.x) + _3155;
                        _3088 = (_3249 * _3197.y) + _3156;
                        _3089 = (_3249 * _3197.z) + _3157;
                        _3084 = (_3330 * _3214.x) + _3152;
                        _3085 = (_3330 * _3214.y) + _3153;
                        _3086 = (_3330 * _3214.z) + _3154;
                        if (_3159 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3152 = _3084;
                            _3153 = _3085;
                            _3154 = _3086;
                            _3155 = _3087;
                            _3156 = _3088;
                            _3157 = _3089;
                            _3158 = _3159;
                        }
                    }
                    frontier_phi_61_pred = _3084;
                    frontier_phi_61_pred_1 = _3089;
                    frontier_phi_61_pred_2 = _3088;
                    frontier_phi_61_pred_3 = _3087;
                    frontier_phi_61_pred_4 = _3086;
                    frontier_phi_61_pred_5 = _3085;
                }
                _2884 = frontier_phi_61_pred;
                _2894 = frontier_phi_61_pred_1;
                _2892 = frontier_phi_61_pred_2;
                _2890 = frontier_phi_61_pred_3;
                _2888 = frontier_phi_61_pred_4;
                _2886 = frontier_phi_61_pred_5;
                uint _3035 = _3034 + 1u;
                if (_3035 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3028 = _2884;
                    _3029 = _2886;
                    _3030 = _2888;
                    _3031 = _2890;
                    _3032 = _2892;
                    _3033 = _2894;
                    _3034 = _3035;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2883 = _2884;
            _2885 = _2886;
            _2887 = _2888;
            _2889 = _2890;
            _2891 = _2892;
            _2893 = _2894;
        }
        uvec4 _2897 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2898 = _2897.z;
        uint _2900 = (_2898 >> 8u) & 15u;
        float _2996;
        float _2998;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        if (((4294967295u << _2900) & _2780) == 0u)
        {
            _2996 = _2883;
            _2998 = _2885;
            _3000 = _2887;
            _3002 = _2889;
            _3004 = _2891;
            _3006 = _2893;
        }
        else
        {
            float _3021 = inversesqrt(dot(vec3(_2734, _2735, _2736), vec3(_2734, _2735, _2736)));
            float _3022 = _3021 * _2734;
            float _3023 = _3021 * _2735;
            float _3024 = _3021 * _2736;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2900 < ((_2898 >> 12u) & 15u))
            {
                float _2997;
                float _2999;
                float _3001;
                float _3003;
                float _3005;
                float _3007;
                float _3135 = _2883;
                float _3136 = _2885;
                float _3137 = _2887;
                float _3138 = _2889;
                float _3139 = _2891;
                float _3140 = _2893;
                uint _3141 = _2900;
                uint _3150;
                bool _3151;
                for (;;)
                {
                    _3150 = texelFetch(g_lightClassification, int((((_2774 << 5u) + (_2760 << 9u)) + (_3141 << 2u)) >> 2u)).x;
                    _3151 = _3150 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3151)
                    {
                        frontier_phi_67_pred = _3138;
                        frontier_phi_67_pred_1 = _3139;
                        frontier_phi_67_pred_2 = _3140;
                        frontier_phi_67_pred_3 = _3137;
                        frontier_phi_67_pred_4 = _3136;
                        frontier_phi_67_pred_5 = _3135;
                    }
                    else
                    {
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3348 = _3135;
                        float _3349 = _3136;
                        float _3350 = _3137;
                        float _3351 = _3138;
                        float _3352 = _3139;
                        float _3353 = _3140;
                        uint _3354 = _3150;
                        uint _3355;
                        vec4 _3380;
                        float _3381;
                        vec4 _3396;
                        vec3 _3408;
                        vec4 _3423;
                        vec4 _3438;
                        float _3484;
                        bool _3485;
                        for (;;)
                        {
                            uint _3365 = ((_3141 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3354));
                            _3355 = (_3354 + 4294967295u) & _3354;
                            uint _3367 = _3365 * 40u;
                            _3380 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 3u)).x));
                            _3381 = _3380.w;
                            uint _3383 = (_3365 * 40u) + 4u;
                            _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            uint _3398 = (_3365 * 40u) + 8u;
                            _3408 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3398)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 2u)).x));
                            uint _3410 = (_3365 * 40u) + 16u;
                            _3423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 3u)).x));
                            uint _3425 = (_3365 * 40u) + 20u;
                            _3438 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 3u)).x));
                            uint _3440 = (_3365 * 40u) + 24u;
                            vec4 _3453 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 3u)).x));
                            uint _3459 = (_3365 * 40u) + 28u;
                            vec4 _3472 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3459)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 3u)).x));
                            _3484 = fma(_2736, _3472.z, fma(_2735, _3472.y, _3472.x * _2734)) + _3472.w;
                            _3485 = !((fma(_2736, _3453.z, fma(_2735, _3453.y, _3453.x * _2734)) + _3453.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3485)
                            {
                                float _3512 = _3380.x - _2734;
                                float _3513 = _3380.y - _2735;
                                float _3514 = _3380.z - _2736;
                                float _3515 = dot(vec3(_3512, _3513, _3514), vec3(_3512, _3513, _3514));
                                float _3518 = inversesqrt(_3515);
                                float _3519 = _3518 * _3512;
                                float _3520 = _3518 * _3513;
                                float _3521 = _3518 * _3514;
                                float _3525 = 1.0 - (_3515 / (_3381 * _3381));
                                float _4655 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                                float _3526 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                                float _3530 = sqrt(_3515) * _3396.w;
                                float _3532 = 1.39999997615814208984375 / (_3530 + 1.39999997615814208984375);
                                float _3533 = _3532 * _3532;
                                float _3536 = ((1.0 - _3533) * dot(vec3(_3519, _3520, _3521), vec3(_982, _985, _988))) + _3533;
                                float _3539 = _3530 * _3530;
                                float _3543 = (fma(_2736, _3423.z, fma(_2735, _3423.y, _3423.x * _2734)) + _3423.w) / _3484;
                                float _3544 = (fma(_2736, _3438.z, fma(_2735, _3438.y, _3438.x * _2734)) + _3438.w) / _3484;
                                float _3548 = 1.0 - dot(vec2(_3543, _3544), vec2(_3543, _3544));
                                float _4671 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                                float _3549 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                                float _3550 = _3549 * (((isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0))) * _3526) / ((_3539 * 0.699999988079071044921875) + 1.0));
                                float _3562 = exp2(log2(1.0 / ((_3539 * 3.5) + 5.0)) * 0.25);
                                float _3563 = 1.0 - _1057;
                                float _3570 = sqrt(1.0 - ((1.0 - (_3563 * _3563)) * (1.0 - (_3562 * _3562))));
                                float _3571 = _3570 * _3570;
                                float _3572 = _3571 * _3571;
                                float _3573 = _3519 - _3022;
                                float _3574 = _3520 - _3023;
                                float _3575 = _3521 - _3024;
                                float _3579 = inversesqrt(dot(vec3(_3573, _3574, _3575), vec3(_3573, _3574, _3575)));
                                float _3583 = dot(vec3(_982, _985, _988), vec3((-0.0) - _3022, (-0.0) - _3023, (-0.0) - _3024));
                                float _4682 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3586 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                                float _3587 = dot(vec3(_982, _985, _988), vec3(_3579 * _3573, _3579 * _3574, _3579 * _3575));
                                float _4693 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                                float _3590 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                                float _3594 = ((_3590 * _3590) * (_3572 + (-1.0))) + 1.0;
                                float _3595 = _3532 * _3571;
                                float _3596 = _3595 * _3595;
                                float _3602 = ((1.0 - _3596) * dot(vec3(_982, _985, _988), vec3(_3519, _3520, _3521))) + _3596;
                                float _4704 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                                float _3603 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3604 = 1.0 - _3571;
                                float _3614 = (0.5 / (((_3603 * ((_3586 * _3604) + _3571)) + 9.9999999392252902907785028219223e-09) + (((_3603 * _3604) + _3571) * _3586))) * _3603;
                                float _4715 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                                float _3624 = (_3549 * _3526) * (((_3572 * 3.1415927410125732421875) * (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0)))) / ((_3594 * _3594) * ((_3539 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3624 * _3408.x;
                                frontier_phi_73_pred_1 = _3624 * _3408.y;
                                frontier_phi_73_pred_2 = _3550 * _3396.z;
                                frontier_phi_73_pred_3 = _3550 * _3396.y;
                                frontier_phi_73_pred_4 = _3550 * _3396.x;
                                frontier_phi_73_pred_5 = _3624 * _3408.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3628 = frontier_phi_73_pred;
                            _3629 = frontier_phi_73_pred_1;
                            _3633 = frontier_phi_73_pred_2;
                            _3632 = frontier_phi_73_pred_3;
                            _3631 = frontier_phi_73_pred_4;
                            _3630 = frontier_phi_73_pred_5;
                            _3338 = _3631 + _3351;
                            _3339 = _3632 + _3352;
                            _3340 = _3633 + _3353;
                            _3335 = _3628 + _3348;
                            _3336 = _3629 + _3349;
                            _3337 = _3630 + _3350;
                            if (_3355 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3348 = _3335;
                                _3349 = _3336;
                                _3350 = _3337;
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3340;
                                _3354 = _3355;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3338;
                        frontier_phi_67_pred_1 = _3339;
                        frontier_phi_67_pred_2 = _3340;
                        frontier_phi_67_pred_3 = _3337;
                        frontier_phi_67_pred_4 = _3336;
                        frontier_phi_67_pred_5 = _3335;
                    }
                    _3003 = frontier_phi_67_pred;
                    _3005 = frontier_phi_67_pred_1;
                    _3007 = frontier_phi_67_pred_2;
                    _3001 = frontier_phi_67_pred_3;
                    _2999 = frontier_phi_67_pred_4;
                    _2997 = frontier_phi_67_pred_5;
                    uint _3142 = _3141 + 1u;
                    if (_3142 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3135 = _2997;
                        _3136 = _2999;
                        _3137 = _3001;
                        _3138 = _3003;
                        _3139 = _3005;
                        _3140 = _3007;
                        _3141 = _3142;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3005;
                frontier_phi_55_56_ladder_1 = _3007;
                frontier_phi_55_56_ladder_2 = _3003;
                frontier_phi_55_56_ladder_3 = _3001;
                frontier_phi_55_56_ladder_4 = _2999;
                frontier_phi_55_56_ladder_5 = _2997;
            }
            else
            {
                frontier_phi_55_56_ladder = _2891;
                frontier_phi_55_56_ladder_1 = _2893;
                frontier_phi_55_56_ladder_2 = _2889;
                frontier_phi_55_56_ladder_3 = _2887;
                frontier_phi_55_56_ladder_4 = _2885;
                frontier_phi_55_56_ladder_5 = _2883;
            }
            _2996 = frontier_phi_55_56_ladder_5;
            _2998 = frontier_phi_55_56_ladder_4;
            _3000 = frontier_phi_55_56_ladder_3;
            _3002 = frontier_phi_55_56_ladder_2;
            _3004 = frontier_phi_55_56_ladder;
            _3006 = frontier_phi_55_56_ladder_1;
        }
        float _3011 = isnan(1.0) ? _1041 : (isnan(_1041) ? 1.0 : min(_1041, 1.0));
        _2793 = (_3011 * _3002) + _2226;
        _2795 = (_3011 * _3004) + _2228;
        _2797 = (_3011 * _3006) + _2230;
        _2799 = ((_2996 * _1026) * _3011) + _2574;
        _2801 = ((_2998 * _1028) * _3011) + _2576;
        _2803 = ((_3000 * _1029) * _3011) + _2578;
    }
    else
    {
        _2793 = _2226;
        _2795 = _2228;
        _2797 = _2230;
        _2799 = _2574;
        _2801 = _2576;
        _2803 = _2578;
    }
    float _4731 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _4742 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    float _4753 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
    float _4764 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _2828 = cbInstanceData._m0[_1001 + 6u].w * (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0)));
    float _2833 = _963 / cbSceneParam._m0[86u].x;
    float _2834 = _964 / cbSceneParam._m0[86u].y;
    vec4 _2848 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2833, _2834, (log2((isnan(cbSceneParam._m0[77u].w) ? _898 : (isnan(_898) ? cbSceneParam._m0[77u].w : min(_898, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2850 = _2848.x;
    float _2851 = _2848.y;
    float _2852 = _2848.z;
    float _2853 = _2848.w;
    float _2946;
    float _2948;
    float _2950;
    float _2952;
    if (_898 > cbSceneParam._m0[78u].w)
    {
        float _2908 = isnan(_898) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _898 : min(cbSceneParam._m0[80u].w, _898));
        float _2909 = _2908 / _898;
        float _2920 = _2909 * _948;
        float _2921 = _949 * _2909;
        float _2922 = (-0.0) - _2921;
        float _2924 = _2909 * _950;
        float _2926 = (cbSceneParam._m0[77u].w * _2922) / _2908;
        float _2927 = _2926 + cbSceneParam._m0[79u].w;
        float _2928 = cbSceneParam._m0[79u].w - _2921;
        float _2934 = sqrt(((_2920 * _2920) + (_2921 * _2921)) + (_2924 * _2924));
        float _2937 = (1.0 - (cbSceneParam._m0[77u].w / _2908)) * _2934;
        float _2942 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2944 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3097;
        if (abs((_2922 - _2926) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3097 = ((((_2927 > 0.0) ? exp2(_2942 * _2927) : (2.0 - exp2(_2944 * _2927))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2937;
        }
        else
        {
            float _3057 = 1.0 / cbSceneParam._m0[80u].x;
            float _3058 = isnan(_2928) ? _2927 : (isnan(_2927) ? _2928 : max(_2927, _2928));
            float _3059 = isnan(_2928) ? _2927 : (isnan(_2927) ? _2928 : min(_2927, _2928));
            float _3068 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : min(_3058, 0.0));
            float _3069 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : min(_3059, 0.0));
            _3097 = ((abs(_2934 / _2922) * cbSceneParam._m0[80u].y) * ((((_3068 - _3069) * 2.0) - ((exp2(_2942 * (isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0)))) - exp2(_2942 * (isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0))))) * _3057)) - ((exp2(_2944 * _3068) - exp2(_2944 * _3069)) * _3057))) + (_2937 * cbSceneParam._m0[80u].z);
        }
        vec4 _3099 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2833, _2834, 1.0), 0.0);
        float _3108 = exp2((_3097 * (-1.44269502162933349609375)) * (1.0 - _3099.w));
        float _3109 = log2(_3108);
        float _3125 = log2(_2853);
        _2946 = (exp2(_3125 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3109 * cbSceneParam._m0[78u].x)) * _3099.x) / cbSceneParam._m0[78u].x)) + _2850;
        _2948 = (exp2(_3125 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3109 * cbSceneParam._m0[78u].y)) * _3099.y) / cbSceneParam._m0[78u].y)) + _2851;
        _2950 = (exp2(_3125 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3109 * cbSceneParam._m0[78u].z)) * _3099.z) / cbSceneParam._m0[78u].z)) + _2852;
        _2952 = _3108 * _2853;
    }
    else
    {
        _2946 = _2850;
        _2948 = _2851;
        _2950 = _2852;
        _2952 = _2853;
    }
    float _2964 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2965 = _2964 == 3.0;
    float _2966 = log2(_2952);
    float _2973 = exp2(_2966 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0))) * (_2793 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1041))) + ((_2799 + ((isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0))) * _1845)) * cbPerFrame._m0[3u].x));
    float _2974 = exp2(_2966 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (_2795 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1041))) + ((_2801 + ((isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0))) * _1845)) * cbPerFrame._m0[3u].x));
    float _2975 = exp2(_2966 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2797 + ((isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) * _1041))) + ((_2803 + ((isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0))) * _1845)) * cbPerFrame._m0[3u].x));
    float _2984 = (_2964 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2984 * (_2965 ? _2973 : (_2973 + (cbSceneParam._m0[72u].w * _2946)));
    SV_Target.y = _2984 * (_2965 ? _2974 : (_2974 + (cbSceneParam._m0[72u].w * _2948)));
    SV_Target.z = _2984 * (_2965 ? _2975 : (_2975 + (cbSceneParam._m0[72u].w * _2950)));
    SV_Target.w = _2828;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2828;
}


