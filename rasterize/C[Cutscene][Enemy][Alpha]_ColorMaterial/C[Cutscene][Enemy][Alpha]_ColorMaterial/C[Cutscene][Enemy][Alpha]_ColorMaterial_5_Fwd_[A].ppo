#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24;
layout(set = 0, binding = 12) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 13) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 18) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in float TEXCOORD_8;
layout(location = 7, component = 1) in float TEXCOORD_9;
layout(location = 7, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1640;
float _4019;
float _4020;
float _4021;
float _4022;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _289 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _323 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _327 = _323.z;
    float _340 = exp2(log2((1.0 - _327) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _341 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _342 = isnan(1.0) ? _341 : (isnan(_341) ? 1.0 : min(_341, 1.0));
    vec4 _359 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _371 = exp2(log2(_359.w * cbMtdParam._m0[29u].y) * cbMtdParam._m0[23u].x);
    float _372 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _373 = isnan(1.0) ? _372 : (isnan(_372) ? 1.0 : min(_372, 1.0));
    float _382 = exp2(log2(cbMtdParam._m0[23u].y * _327) * cbMtdParam._m0[22u].y);
    float _383 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _384 = isnan(1.0) ? _383 : (isnan(_383) ? 1.0 : min(_383, 1.0));
    vec4 _396 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _399 = _396.y;
    float _402 = (_396.x + (-0.02500000037252902984619140625)) * 8.0;
    float _406 = roundEven(5.0 - _402);
    float _407 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _408 = isnan(4.0) ? _407 : (isnan(_407) ? 4.0 : min(_407, 4.0));
    float _420 = floor(_408);
    vec4 _423 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w, _420));
    float _216[6];
    float _217[6];
    float _218[6];
    _216[0u] = cbMtdParam._m0[17u].x;
    _217[0u] = cbMtdParam._m0[17u].y;
    _218[0u] = cbMtdParam._m0[17u].z;
    _216[1u] = cbMtdParam._m0[15u].x;
    _217[1u] = cbMtdParam._m0[15u].y;
    _218[1u] = cbMtdParam._m0[15u].z;
    _216[2u] = cbMtdParam._m0[14u].x;
    _217[2u] = cbMtdParam._m0[14u].y;
    _218[2u] = cbMtdParam._m0[14u].z;
    _216[3u] = cbMtdParam._m0[13u].x;
    _217[3u] = cbMtdParam._m0[13u].y;
    _218[3u] = cbMtdParam._m0[13u].z;
    _216[4u] = cbMtdParam._m0[12u].x;
    _217[4u] = cbMtdParam._m0[12u].y;
    _218[4u] = cbMtdParam._m0[12u].z;
    _216[5u] = cbMtdParam._m0[18u].x;
    _217[5u] = cbMtdParam._m0[18u].y;
    _218[5u] = cbMtdParam._m0[18u].z;
    float _487 = roundEven(_402);
    float _488 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    uint _490 = uint(int(isnan(5.0) ? _488 : (isnan(_488) ? 5.0 : min(_488, 5.0))));
    vec4 _520 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _531 = cbMtdParam._m0[9u].x * _520.x;
    float _532 = cbMtdParam._m0[9u].y * _520.y;
    float _533 = cbMtdParam._m0[9u].z * _520.z;
    float _540 = ((((((_216[_490] - cbMtdParam._m0[10u].x) * _399) + cbMtdParam._m0[10u].x) * _423.x) - _531) * _384) + _531;
    float _541 = ((((((_217[_490] - cbMtdParam._m0[10u].y) * _399) + cbMtdParam._m0[10u].y) * _423.y) - _532) * _384) + _532;
    float _542 = ((((((_218[_490] - cbMtdParam._m0[10u].z) * _399) + cbMtdParam._m0[10u].z) * _423.z) - _533) * _384) + _533;
    float _548 = exp2(log2(_323.w) * cbMtdParam._m0[23u].w);
    vec4 _561 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _581 = (((cbMtdParam._m0[16u].x * _561.x) - _540) * _548) + _540;
    float _582 = (((cbMtdParam._m0[16u].y * _561.y) - _541) * _548) + _541;
    float _583 = (((cbMtdParam._m0[16u].z * _561.z) - _542) * _548) + _542;
    vec4 _595 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _615 = (((cbMtdParam._m0[19u].x * _595.x) - _581) * _373) + _581;
    float _616 = (((cbMtdParam._m0[19u].y * _595.y) - _582) * _373) + _582;
    float _617 = (((cbMtdParam._m0[19u].z * _595.z) - _583) * _373) + _583;
    vec4 _629 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _654 = (_359.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _629.x) - _615) * _342) + _615);
    float _656 = (_359.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _629.y) - _616) * _342) + _616);
    float _658 = (_359.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _629.z) - _617) * _342) + _617);
    vec4 _670 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _689 = TEXCOORD_5.x - ((cbMtdParam._m0[24u].x * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625));
    float _691 = _689 * (cbMtdParam._m0[24u].z + 1.0);
    float _4081 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _692 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _699 = (_692 * ((cbMtdParam._m0[11u].x * _670.x) - _654)) + _654;
    float _700 = (((cbMtdParam._m0[11u].y * _670.y) - _656) * _692) + _656;
    float _701 = (((cbMtdParam._m0[11u].z * _670.z) - _658) * _692) + _658;
    float _705 = cbMtdParam._m0[28u].x * TEXCOORD_8;
    float _713 = (_705 - (((_289.x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _705))) * (cbMtdParam._m0[27u].w + 1.0);
    float _4092 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _714 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _721 = ((cbMtdParam._m0[21u].x - _699) * _714) + _699;
    float _722 = ((cbMtdParam._m0[21u].y - _700) * _714) + _700;
    float _723 = ((cbMtdParam._m0[21u].z - _701) * _714) + _701;
    vec4 _736 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24, SS_ClampLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.z) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.w) + cbTextureTilingScale._m0[11u].w));
    float _744 = (_736.x + (-1.0)) + (cbMtdParam._m0[28u].y * 2.0);
    float _4103 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _750 = exp2(log2(cbMtdParam._m0[28u].w * (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) * cbMtdParam._m0[28u].z);
    float _4114 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _751 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _211[5];
    float _212[5];
    _211[0u] = cbMtdParam._m0[29u].z;
    _212[0u] = cbMtdParam._m0[29u].w;
    _211[1u] = cbMtdParam._m0[31u].z;
    _212[1u] = cbMtdParam._m0[31u].w;
    _211[2u] = cbMtdParam._m0[31u].x;
    _212[2u] = cbMtdParam._m0[31u].y;
    _211[3u] = cbMtdParam._m0[30u].z;
    _212[3u] = cbMtdParam._m0[30u].w;
    _211[4u] = cbMtdParam._m0[30u].x;
    _212[4u] = cbMtdParam._m0[30u].y;
    float _790 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    uint _792 = uint(int(isnan(4.0) ? _790 : (isnan(_790) ? 4.0 : min(_790, 4.0))));
    float _799 = ((_212[_792] - cbMtdParam._m0[22u].z) * _384) + cbMtdParam._m0[22u].z;
    float _802 = ((cbMtdParam._m0[22u].w - _799) * _548) + _799;
    float _805 = ((cbMtdParam._m0[25u].x - _802) * _373) + _802;
    float _808 = ((cbMtdParam._m0[26u].x - _805) * _342) + _805;
    float _813 = (cbMtdParam._m0[24u].y + 1.0) * _689;
    float _4135 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _814 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _816 = _808 - (_808 * _814);
    float _818 = _816 - (_816 * _705);
    vec4 _831 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w, _420));
    vec4 _848 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _850 = _848.x;
    float _851 = _848.y;
    float _856 = cbMtdParam._m0[22u].x + _848.z;
    float _859 = (((_831.z + _211[_792]) - _856) * _384) + _856;
    vec4 _871 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _882 = (((_871.z - _859) + cbMtdParam._m0[29u].x) * _548) + _859;
    float _887 = ((((_327 * 2.0) * _882) - _882) * cbMtdParam._m0[24u].w) + _882;
    vec4 _899 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _910 = (((cbMtdParam._m0[23u].z + _899.z) - _887) * _373) + _887;
    vec4 _923 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _934 = (((_923.z - _910) + cbMtdParam._m0[26u].y) * _342) + _910;
    vec4 _946 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _957 = ((_946.z - _934) * _814) + _934;
    vec4 _972 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _986 = ((cbMtdParam._m0[27u].y * _705) * ((_972.z * cbMtdParam._m0[27u].x) - _957)) + _957;
    float _1001 = ((_831.x - _850) * _384) + _850;
    float _1002 = ((_831.y - _851) * _384) + _851;
    float _1007 = ((_871.x - _1001) * _548) + _1001;
    float _1008 = ((_871.y - _1002) * _548) + _1002;
    float _1013 = ((_899.x - _1007) * _373) + _1007;
    float _1014 = ((_899.y - _1008) * _373) + _1008;
    float _1023 = ((((_923.x - _1013) * _342) + _1013) * 2.0) + (-1.0);
    float _1024 = ((((_923.y - _1014) * _342) + _1014) * 2.0) + (-1.0);
    float _1025 = dot(vec2(_1023, _1024), vec2(_1023, _1024));
    float _4146 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _1030 = sqrt(1.0 - (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))));
    float _1046 = (((cbMtdParam._m0[25u].y * ((_323.x * 2.0) + (-1.0))) + _1023) + (((((_946.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[25u].z) * _814)) + ((((_972.x * 2.0) + (-1.0)) * _705) * cbMtdParam._m0[26u].w);
    float _1047 = (((cbMtdParam._m0[25u].y * ((_323.y * 2.0) + (-1.0))) + _1024) + (((((_946.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[25u].z) * _814)) + (((cbMtdParam._m0[28u].x * TEXCOORD_9) * ((_972.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _1050 = fma(_1030, _253 * NORMAL.x, fma(_1047, _260 * TANGENT.x, (_246 * _238) * _1046));
    float _1053 = fma(_1030, _253 * NORMAL.y, fma(_1047, _260 * TANGENT.y, (_246 * _239) * _1046));
    float _1056 = fma(_1030, _253 * NORMAL.z, fma(_1047, _260 * TANGENT.z, (_246 * _240) * _1046));
    float _1060 = inversesqrt(dot(vec3(_1050, _1053, _1056), vec3(_1050, _1053, _1056)));
    float _1061 = _1060 * _1050;
    float _1062 = _1060 * _1053;
    float _1063 = _1060 * _1056;
    float _4157 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _1064 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    float _4168 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _1065 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    float _4179 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _4190 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _4201 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _4212 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _1069 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _1085 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1125 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1135 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1125);
    float _1136 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1125);
    float _1137 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1125);
    float _1141 = inversesqrt(dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137)));
    float _1142 = _1135 * _1141;
    float _1143 = _1136 * _1141;
    float _1144 = _1137 * _1141;
    vec4 _1149 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1151 = _1149.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1321 = sqrt(((_1135 * _1135) + (_1136 * _1136)) + (_1137 * _1137));
        float _1327 = (cbMatDynParam._m0[5u].x * _1321) + cbMatDynParam._m0[5u].y;
        float _4223 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1332 = (cbMatDynParam._m0[5u].z * _1321) + cbMatDynParam._m0[5u].w;
        float _4234 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) - _1328)) + _1328) < ((_1151 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1162 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1163 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1181 = fma(_1063, cbSceneParam._m0[5u].z, fma(_1062, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1061));
    float _1184 = fma(_1063, cbSceneParam._m0[6u].z, fma(_1062, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1061));
    float _1187 = fma(_1063, cbSceneParam._m0[7u].z, fma(_1062, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1061));
    uint _1200 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1201 = _1200 + 9u;
    uint _1202 = _1201 + uint(cbMatDynParam._m0[0u].w);
    float _1208 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)))) * cbInstanceData._m0[_1202].x;
    float _1209 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0)))) * cbInstanceData._m0[_1202].y;
    float _1210 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) * cbInstanceData._m0[_1202].z;
    float _4245 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
    float _1211 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _4256 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
    float _1212 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
    float _4267 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
    float _1213 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _1214 = 1.0 - _1069;
    float _1215 = _1211 * _1214;
    float _1216 = _1212 * _1214;
    float _1217 = _1213 * _1214;
    float _1222 = (_1211 + (-0.039999999105930328369140625)) * _1069;
    float _1223 = (_1212 + (-0.039999999105930328369140625)) * _1069;
    float _1224 = (_1213 + (-0.039999999105930328369140625)) * _1069;
    float _1225 = _1222 + 0.039999999105930328369140625;
    float _1227 = _1223 + 0.039999999105930328369140625;
    float _1228 = _1224 + 0.039999999105930328369140625;
    vec4 _1237 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1162, cbSceneParam._m0[86u].y * _1163));
    float _1240 = _1237.x * TEXCOORD_5.w;
    float _1241 = dot(vec3(_1061, _1062, _1063), vec3(_1142, _1143, _1144));
    float _1244 = _1241 * 2.0;
    float _1248 = (_1244 * _1061) - _1142;
    float _1249 = (_1244 * _1062) - _1143;
    float _1250 = (_1244 * _1063) - _1144;
    float _1254 = abs(dot(vec3(_1142, _1143, _1144), vec3(_1061, _1062, _1063)));
    float _4278 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
    float _1256 = sqrt(_1065);
    float _1267 = exp2((_1256 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1256 * 3.0));
    float _1273 = (1.0 - _1267) * ((_1256 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1274 = _1267 * _1256;
    float _1302 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1306 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1310 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1639;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1364 = fma(_1310, cbModelParam._m0[26u].z, fma(_1306, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1302));
        float _1368 = fma(_1310, cbModelParam._m0[27u].z, fma(_1306, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1302));
        float _1372 = fma(_1310, cbModelParam._m0[28u].z, fma(_1306, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1302));
        float _1397 = _1302 + _1061;
        float _1398 = _1306 + _1062;
        float _1399 = _1310 + _1063;
        float _1409 = fma(_1399, cbModelParam._m0[26u].z, fma(_1398, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1397)) - _1364;
        float _1410 = fma(_1399, cbModelParam._m0[27u].z, fma(_1398, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1397)) - _1368;
        float _1411 = fma(_1399, cbModelParam._m0[28u].z, fma(_1398, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1397)) - _1372;
        float _1415 = inversesqrt(dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411)));
        float _1428 = ((_1415 * _1409) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1364 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1429 = ((_1415 * _1410) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1368 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1430 = ((_1415 * _1411) / cbModelParam._m0[34u].z) + ((((((_1372 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1433 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1428, _1429, _1430), 0.0);
        vec4 _1440 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1428, _1429, _1430), 0.0);
        vec4 _1447 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1428, _1429, _1430), 0.0);
        vec4 _1454 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1428, _1429, _1430), 0.0);
        float _1467 = exp2((_1433.w + (-0.5)) * 20.0) * 2.0;
        float _1468 = _1467 * (_1433.x + (-0.5));
        float _1469 = _1467 * (_1433.y + (-0.5));
        float _1470 = _1467 * (_1433.z + (-0.5));
        float _1477 = exp2((_1440.w + (-0.5)) * 20.0) * 2.0;
        float _1478 = _1477 * (_1440.x + (-0.5));
        float _1479 = _1477 * (_1440.y + (-0.5));
        float _1480 = _1477 * (_1440.z + (-0.5));
        float _1487 = exp2((_1447.w + (-0.5)) * 20.0) * 2.0;
        float _1488 = _1487 * (_1447.x + (-0.5));
        float _1489 = _1487 * (_1447.y + (-0.5));
        float _1490 = _1487 * (_1447.z + (-0.5));
        float _1497 = exp2((_1454.w + (-0.5)) * 20.0) * 2.0;
        float _1498 = _1497 * (_1454.x + (-0.5));
        float _1499 = _1497 * (_1454.y + (-0.5));
        float _1500 = _1497 * (_1454.z + (-0.5));
        float _1501 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1502 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1503 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1504 = _1468 * 0.5;
        float _1505 = _1478 * 0.5;
        float _1506 = _1488 * 0.5;
        float _1507 = dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506));
        float _1512 = (_1507 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1507);
        float _1521 = (dot(vec3(_1061, _1062, _1063), vec3(_1512 * _1504, _1512 * _1505, _1512 * _1506)) + 1.0) * 0.5;
        float _4304 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1531 = sqrt(((_1505 * _1505) + (_1504 * _1504)) + (_1506 * _1506)) / (_1501 + 9.9999997473787516355514526367188e-06);
        float _4315 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1533 = _1532 * 2.0;
        float _1537 = (1.0 - _1532) / (_1532 + 1.0);
        float _4326 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1547 = ((((1.0 - _1538) * (_1533 + 2.0)) * exp2(log2(isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_1533 + 1.0))) + _1538) * _1501;
        float _1548 = _1469 * 0.5;
        float _1549 = _1479 * 0.5;
        float _1550 = _1489 * 0.5;
        float _1551 = dot(vec3(_1548, _1549, _1550), vec3(_1548, _1549, _1550));
        float _1556 = (_1551 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1551);
        float _1564 = (dot(vec3(_1061, _1062, _1063), vec3(_1556 * _1548, _1556 * _1549, _1556 * _1550)) + 1.0) * 0.5;
        float _4337 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1573 = sqrt(((_1549 * _1549) + (_1548 * _1548)) + (_1550 * _1550)) / (_1502 + 9.9999997473787516355514526367188e-06);
        float _4348 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1575 = _1574 * 2.0;
        float _1579 = (1.0 - _1574) / (_1574 + 1.0);
        float _4359 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1589 = ((((1.0 - _1580) * (_1575 + 2.0)) * exp2(log2(isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_1575 + 1.0))) + _1580) * _1502;
        float _1590 = _1470 * 0.5;
        float _1591 = _1480 * 0.5;
        float _1592 = _1490 * 0.5;
        float _1593 = dot(vec3(_1590, _1591, _1592), vec3(_1590, _1591, _1592));
        float _1598 = (_1593 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1593);
        float _1606 = (dot(vec3(_1061, _1062, _1063), vec3(_1598 * _1590, _1598 * _1591, _1598 * _1592)) + 1.0) * 0.5;
        float _4370 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1615 = sqrt(((_1591 * _1591) + (_1590 * _1590)) + (_1592 * _1592)) / (_1503 + 9.9999997473787516355514526367188e-06);
        float _4381 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _1617 = _1616 * 2.0;
        float _1621 = (1.0 - _1616) / (_1616 + 1.0);
        float _4392 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _1631 = ((((1.0 - _1622) * (_1617 + 2.0)) * exp2(log2(isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_1617 + 1.0))) + _1622) * _1503;
        _1639 = _1470;
        _1641 = _1469;
        _1642 = _1468;
        _1643 = _1480;
        _1644 = _1479;
        _1645 = _1478;
        _1646 = _1490;
        _1647 = _1489;
        _1648 = _1488;
        _1649 = _1503;
        _1650 = _1502;
        _1651 = _1501;
        _1652 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)));
        _1653 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)));
        _1654 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)));
    }
    else
    {
        _1639 = _1640;
        _1641 = _1640;
        _1642 = _1640;
        _1643 = _1640;
        _1644 = _1640;
        _1645 = _1640;
        _1646 = _1640;
        _1647 = _1640;
        _1648 = _1640;
        _1649 = _1640;
        _1650 = _1640;
        _1651 = _1640;
        _1652 = 0.0;
        _1653 = 0.0;
        _1654 = 0.0;
    }
    float _1949;
    float _1950;
    float _1951;
    float _1952;
    float _1953;
    float _1954;
    float _1955;
    float _1956;
    float _1957;
    float _1958;
    float _1959;
    float _1960;
    float _1961;
    float _1962;
    float _1963;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1680 = fma(_1310, cbModelParam._m0[30u].z, fma(_1306, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1302));
        float _1684 = fma(_1310, cbModelParam._m0[31u].z, fma(_1306, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1302));
        float _1688 = fma(_1310, cbModelParam._m0[32u].z, fma(_1306, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1302));
        float _1711 = _1302 + _1061;
        float _1712 = _1306 + _1062;
        float _1713 = _1310 + _1063;
        float _1723 = fma(_1713, cbModelParam._m0[30u].z, fma(_1712, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1711)) - _1680;
        float _1724 = fma(_1713, cbModelParam._m0[31u].z, fma(_1712, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1711)) - _1684;
        float _1725 = fma(_1713, cbModelParam._m0[32u].z, fma(_1712, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1711)) - _1688;
        float _1729 = inversesqrt(dot(vec3(_1723, _1724, _1725), vec3(_1723, _1724, _1725)));
        float _1742 = ((_1729 * _1723) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1680 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1743 = ((_1729 * _1724) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1684 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1744 = ((_1729 * _1725) / cbModelParam._m0[35u].z) + ((((((_1688 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1746 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1742, _1743, _1744), 0.0);
        vec4 _1753 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1742, _1743, _1744), 0.0);
        vec4 _1760 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1742, _1743, _1744), 0.0);
        vec4 _1767 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1742, _1743, _1744), 0.0);
        float _1779 = exp2((_1746.w + (-0.5)) * 20.0) * 2.0;
        float _1780 = _1779 * (_1746.x + (-0.5));
        float _1781 = _1779 * (_1746.y + (-0.5));
        float _1782 = _1779 * (_1746.z + (-0.5));
        float _1789 = exp2((_1753.w + (-0.5)) * 20.0) * 2.0;
        float _1790 = _1789 * (_1753.x + (-0.5));
        float _1791 = _1789 * (_1753.y + (-0.5));
        float _1792 = _1789 * (_1753.z + (-0.5));
        float _1799 = exp2((_1760.w + (-0.5)) * 20.0) * 2.0;
        float _1800 = _1799 * (_1760.x + (-0.5));
        float _1801 = _1799 * (_1760.y + (-0.5));
        float _1802 = _1799 * (_1760.z + (-0.5));
        float _1809 = exp2((_1767.w + (-0.5)) * 20.0) * 2.0;
        float _1810 = _1809 * (_1767.x + (-0.5));
        float _1811 = _1809 * (_1767.y + (-0.5));
        float _1812 = _1809 * (_1767.z + (-0.5));
        float _1813 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1814 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1815 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
        float _1816 = _1780 * 0.5;
        float _1817 = _1790 * 0.5;
        float _1818 = _1800 * 0.5;
        float _1819 = dot(vec3(_1816, _1817, _1818), vec3(_1816, _1817, _1818));
        float _1824 = (_1819 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1819);
        float _1832 = (dot(vec3(_1061, _1062, _1063), vec3(_1824 * _1816, _1824 * _1817, _1824 * _1818)) + 1.0) * 0.5;
        float _4433 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
        float _1841 = sqrt(((_1817 * _1817) + (_1816 * _1816)) + (_1818 * _1818)) / (_1813 + 9.9999997473787516355514526367188e-06);
        float _4444 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
        float _1842 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _1843 = _1842 * 2.0;
        float _1847 = (1.0 - _1842) / (_1842 + 1.0);
        float _4455 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1848 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _1857 = ((((1.0 - _1848) * (_1843 + 2.0)) * exp2(log2(isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_1843 + 1.0))) + _1848) * _1813;
        float _1858 = _1781 * 0.5;
        float _1859 = _1791 * 0.5;
        float _1860 = _1801 * 0.5;
        float _1861 = dot(vec3(_1858, _1859, _1860), vec3(_1858, _1859, _1860));
        float _1866 = (_1861 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1861);
        float _1874 = (dot(vec3(_1061, _1062, _1063), vec3(_1866 * _1858, _1866 * _1859, _1866 * _1860)) + 1.0) * 0.5;
        float _4466 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
        float _1883 = sqrt(((_1859 * _1859) + (_1858 * _1858)) + (_1860 * _1860)) / (_1814 + 9.9999997473787516355514526367188e-06);
        float _4477 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
        float _1884 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _1885 = _1884 * 2.0;
        float _1889 = (1.0 - _1884) / (_1884 + 1.0);
        float _4488 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
        float _1890 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _1899 = ((((1.0 - _1890) * (_1885 + 2.0)) * exp2(log2(isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_1885 + 1.0))) + _1890) * _1814;
        float _1900 = _1782 * 0.5;
        float _1901 = _1792 * 0.5;
        float _1902 = _1802 * 0.5;
        float _1903 = dot(vec3(_1900, _1901, _1902), vec3(_1900, _1901, _1902));
        float _1908 = (_1903 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1903);
        float _1916 = (dot(vec3(_1061, _1062, _1063), vec3(_1908 * _1900, _1908 * _1901, _1908 * _1902)) + 1.0) * 0.5;
        float _4499 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
        float _1925 = sqrt(((_1901 * _1901) + (_1900 * _1900)) + (_1902 * _1902)) / (_1815 + 9.9999997473787516355514526367188e-06);
        float _4510 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
        float _1926 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _1927 = _1926 * 2.0;
        float _1931 = (1.0 - _1926) / (_1926 + 1.0);
        float _4521 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
        float _1932 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _1941 = ((((1.0 - _1932) * (_1927 + 2.0)) * exp2(log2(isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_1927 + 1.0))) + _1932) * _1815;
        _1949 = _1782;
        _1950 = _1781;
        _1951 = _1780;
        _1952 = _1792;
        _1953 = _1791;
        _1954 = _1790;
        _1955 = _1802;
        _1956 = _1801;
        _1957 = _1800;
        _1958 = _1815;
        _1959 = _1814;
        _1960 = _1813;
        _1961 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0)));
        _1962 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0)));
        _1963 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0)));
    }
    else
    {
        _1949 = _1640;
        _1950 = _1640;
        _1951 = _1640;
        _1952 = _1640;
        _1953 = _1640;
        _1954 = _1640;
        _1955 = _1640;
        _1956 = _1640;
        _1957 = _1640;
        _1958 = _1640;
        _1959 = _1640;
        _1960 = _1640;
        _1961 = 0.0;
        _1962 = 0.0;
        _1963 = 0.0;
    }
    float _1973 = (cbModelParam._m0[1u].x * (_1961 - _1652)) + _1652;
    float _1974 = (cbModelParam._m0[1u].x * (_1962 - _1653)) + _1653;
    float _1975 = (cbModelParam._m0[1u].x * (_1963 - _1654)) + _1654;
    float _1996 = fma(_1975, cbSceneParam._m0[89u].z, fma(_1974, cbSceneParam._m0[89u].y, _1973 * cbSceneParam._m0[89u].x));
    float _1999 = fma(_1975, cbSceneParam._m0[90u].z, fma(_1974, cbSceneParam._m0[90u].y, _1973 * cbSceneParam._m0[90u].x));
    float _2002 = fma(_1975, cbSceneParam._m0[91u].z, fma(_1974, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1973));
    float _2017 = _1248 * 0.5;
    float _2018 = _1249 * 0.5;
    float _2019 = _1250 * 0.5;
    float _2020 = dot(vec4(_2017, _2018, _2019, 1.0), vec4(_1951, _1954, _1957, _1960));
    float _2023 = dot(vec4(_2017, _2018, _2019, 1.0), vec4(_1950, _1953, _1956, _1959));
    float _2026 = dot(vec4(_2017, _2018, _2019, 1.0), vec4(_1949, _1952, _1955, _1958));
    float _2060;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2033 = dot(vec4(_2017, _2018, _2019, 1.0), vec4(_1639, _1643, _1646, _1649));
        float _2037 = dot(vec4(_2017, _2018, _2019, 1.0), vec4(_1641, _1644, _1647, _1650));
        float _2041 = dot(vec4(_2017, _2018, _2019, 1.0), vec4(_1642, _1645, _1648, _1651));
        float _2048 = dot(vec4(cbModelParam._m0[39u]), vec4(_2017, _2018, _2019, 1.0));
        _2060 = dot(vec3(isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0)), isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0)), isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2048) ? 0.0 : (isnan(0.0) ? _2048 : max(0.0, _2048))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2060 = 1.0;
    }
    float _2071;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2062 = dot(vec4(cbModelParam._m0[40u]), vec4(_2017, _2018, _2019, 1.0));
        _2071 = dot(vec3(isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0)), isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0)), isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2062) ? 0.0 : (isnan(0.0) ? _2062 : max(0.0, _2062))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2071 = 1.0;
    }
    float _2075 = (_2071 * cbModelParam._m0[1u].x) + (_2060 * (1.0 - cbModelParam._m0[1u].x));
    float _2085 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1065);
    float _2086 = isnan(_2085) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2085 : min(cbModelParam._m0[25u].z, _2085));
    float _2166;
    float _2168;
    float _2170;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2133 = fma(_1310, cbModelParam._m0[13u].z, fma(_1306, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1302)) + cbModelParam._m0[13u].w;
        float _2137 = fma(_1310, cbModelParam._m0[14u].z, fma(_1306, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1302)) + cbModelParam._m0[14u].w;
        float _2141 = fma(_1310, cbModelParam._m0[15u].z, fma(_1306, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1302)) + cbModelParam._m0[15u].w;
        float _2144 = fma(_1250, cbModelParam._m0[13u].z, fma(_1249, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1248));
        float _2147 = fma(_1250, cbModelParam._m0[14u].z, fma(_1249, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1248));
        float _2150 = fma(_1250, cbModelParam._m0[15u].z, fma(_1249, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1248));
        float _2178;
        if (_2144 > 0.0)
        {
            _2178 = abs((1.0 - _2133) / _2144);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2144 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2133 + 1.0) / _2144);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2178 = frontier_phi_17_15_ladder;
        }
        float _2380;
        if (_2147 > 0.0)
        {
            _2380 = abs((1.0 - _2137) / _2147);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2147 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2137 + 1.0) / _2147);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2380 = frontier_phi_26_22_ladder;
        }
        float _2634;
        if (_2150 > 0.0)
        {
            _2634 = abs((1.0 - _2141) / _2150);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2150 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2141 + 1.0) / _2150);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2634 = frontier_phi_38_33_ladder;
        }
        float _2636 = isnan(_2380) ? _2178 : (isnan(_2178) ? _2380 : min(_2178, _2380));
        float _2637 = isnan(_2634) ? _2636 : (isnan(_2636) ? _2634 : min(_2636, _2634));
        float _2641 = (_2637 * _2144) + _2133;
        float _2642 = (_2637 * _2147) + _2137;
        float _2643 = (_2637 * _2150) + _2141;
        float _2644 = _2637 * 9.9999997473787516355514526367188e-05;
        float _2646 = (-1.0) - _2644;
        float _2648 = _2644 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2643 > _2648) || ((_2643 < _2646) || ((_2642 > _2648) || ((_2642 < _2646) || ((_2641 < _2646) || (_2641 > _2648))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2771 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2643, cbModelParam._m0[9u].z, fma(_2642, cbModelParam._m0[9u].y, _2641 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2643, cbModelParam._m0[10u].z, fma(_2642, cbModelParam._m0[10u].y, _2641 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2643, cbModelParam._m0[11u].z, fma(_2642, cbModelParam._m0[11u].y, _2641 * cbModelParam._m0[11u].x))), _2086);
            frontier_phi_16_38_ladder = _2771.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2771.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2771.x * cbModelParam._m0[1u].y;
        }
        _2166 = frontier_phi_16_38_ladder_2;
        _2168 = frontier_phi_16_38_ladder_1;
        _2170 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2154 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1248, _1249, _1250), _2086);
        _2166 = _2154.x * cbModelParam._m0[1u].y;
        _2168 = _2154.y * cbModelParam._m0[1u].y;
        _2170 = _2154.z * cbModelParam._m0[1u].y;
    }
    float _2174 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1065);
    float _2175 = isnan(_2174) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2174 : min(cbModelParam._m0[25u].w, _2174));
    float _2264;
    float _2266;
    float _2268;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2228 = fma(_1310, cbModelParam._m0[21u].z, fma(_1306, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1302)) + cbModelParam._m0[21u].w;
        float _2232 = fma(_1310, cbModelParam._m0[22u].z, fma(_1306, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1302)) + cbModelParam._m0[22u].w;
        float _2236 = fma(_1310, cbModelParam._m0[23u].z, fma(_1306, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1302)) + cbModelParam._m0[23u].w;
        float _2239 = fma(_1250, cbModelParam._m0[21u].z, fma(_1249, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1248));
        float _2242 = fma(_1250, cbModelParam._m0[22u].z, fma(_1249, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1248));
        float _2245 = fma(_1250, cbModelParam._m0[23u].z, fma(_1249, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1248));
        float _2385;
        if (_2239 > 0.0)
        {
            _2385 = abs((1.0 - _2228) / _2239);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2239 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2228 + 1.0) / _2239);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2385 = frontier_phi_28_24_ladder;
        }
        float _2661;
        if (_2242 > 0.0)
        {
            _2661 = abs((1.0 - _2232) / _2242);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2242 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2232 + 1.0) / _2242);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2661 = frontier_phi_40_35_ladder;
        }
        float _2874;
        if (_2245 > 0.0)
        {
            _2874 = abs((1.0 - _2236) / _2245);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2245 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2236 + 1.0) / _2245);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2874 = frontier_phi_49_46_ladder;
        }
        float _2876 = isnan(_2661) ? _2385 : (isnan(_2385) ? _2661 : min(_2385, _2661));
        float _2877 = isnan(_2874) ? _2876 : (isnan(_2876) ? _2874 : min(_2876, _2874));
        float _2881 = (_2877 * _2239) + _2228;
        float _2882 = (_2877 * _2242) + _2232;
        float _2883 = (_2877 * _2245) + _2236;
        float _2884 = _2877 * 9.9999997473787516355514526367188e-05;
        float _2885 = (-1.0) - _2884;
        float _2887 = _2884 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2883 > _2887) || ((_2883 < _2885) || ((_2882 > _2887) || ((_2882 < _2885) || ((_2881 < _2885) || (_2881 > _2887))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3084 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2883, cbModelParam._m0[17u].z, fma(_2882, cbModelParam._m0[17u].y, _2881 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2883, cbModelParam._m0[18u].z, fma(_2882, cbModelParam._m0[18u].y, _2881 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2883, cbModelParam._m0[19u].z, fma(_2882, cbModelParam._m0[19u].y, _2881 * cbModelParam._m0[19u].x))), _2175);
            frontier_phi_25_49_ladder = _3084.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3084.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3084.x * cbModelParam._m0[1u].z;
        }
        _2264 = frontier_phi_25_49_ladder_2;
        _2266 = frontier_phi_25_49_ladder_1;
        _2268 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2248 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1248, _1249, _1250), _2175);
        _2264 = _2248.x * cbModelParam._m0[1u].z;
        _2266 = _2248.y * cbModelParam._m0[1u].z;
        _2268 = _2248.z * cbModelParam._m0[1u].z;
    }
    float _2281 = (((_1273 * _1225) + _1274) * _1240) * ((cbModelParam._m0[1u].w * (_2264 - _2166)) + _2166);
    float _2283 = (((_1273 * _1227) + _1274) * _1240) * ((cbModelParam._m0[1u].w * (_2266 - _2168)) + _2168);
    float _2285 = (((_1273 * _1228) + _1274) * _1240) * ((cbModelParam._m0[1u].w * (_2268 - _2170)) + _2170);
    float _2288 = fma(_2285, cbSceneParam._m0[89u].z, fma(_2283, cbSceneParam._m0[89u].y, _2281 * cbSceneParam._m0[89u].x));
    float _2291 = fma(_2285, cbSceneParam._m0[90u].z, fma(_2283, cbSceneParam._m0[90u].y, _2281 * cbSceneParam._m0[90u].x));
    float _2294 = fma(_2285, cbSceneParam._m0[91u].z, fma(_2283, cbSceneParam._m0[91u].y, _2281 * cbSceneParam._m0[91u].x));
    uvec4 _2304 = floatBitsToUint(cbInstanceData._m0[_1200 + 5u]);
    uint _2306 = _2304.x * 14u;
    uint _2307 = _2306 + 13u;
    float _2314 = _1240 + (-1.0);
    float _2319 = (cbLight._m0[_2307].x * _2314) + 1.0;
    float _2320 = (cbLight._m0[_2307].y * _2314) + 1.0;
    float _2321 = (cbLight._m0[_2307].z * _2314) + 1.0;
    float _2322 = (cbLight._m0[_2307].w * _2314) + 1.0;
    uint _2323 = _2306 + 5u;
    float _2329 = isnan(1.0) ? _2320 : (isnan(_2320) ? 1.0 : min(_2320, 1.0));
    uint _2333 = _2306 + 4u;
    float _2339 = isnan(1.0) ? _2319 : (isnan(_2319) ? 1.0 : min(_2319, 1.0));
    uint _2343 = _2306 | 1u;
    float _2354 = dot(vec3(cbLight._m0[_2306].xyz), vec3(_1061, _1062, _1063));
    float _2357 = dot(vec3(cbLight._m0[_2343].xyz), vec3(_1061, _1062, _1063));
    float _4657 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _4668 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2362 = (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0))) * 0.3183098733425140380859375;
    float _2364 = (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * 0.3183098733425140380859375;
    float _2371 = ((cbLight._m0[_2323].x * _2329) * _2364) + ((cbLight._m0[_2333].x * _2339) * _2362);
    float _2372 = ((_2329 * cbLight._m0[_2323].y) * _2364) + ((_2339 * cbLight._m0[_2333].y) * _2362);
    float _2373 = ((_2329 * cbLight._m0[_2323].z) * _2364) + ((_2339 * cbLight._m0[_2333].z) * _2362);
    uvec4 _2377 = floatBitsToUint(cbLight._m0[_2306 + 12u]);
    bool _2379 = _2377.x == 0u;
    float _2390;
    float _2392;
    float _2394;
    if (_2379)
    {
        _2390 = _2371;
        _2392 = _2372;
        _2394 = _2373;
    }
    else
    {
        uint _2398 = _2306 + 6u;
        float _2414 = (dot(vec3(cbLight._m0[_2306 + 2u].xyz), vec3(_1061, _1062, _1063)) * 0.5) + 0.5;
        float _2415 = _2414 * _2414;
        float _4679 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2416 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
        float _2417 = isnan(1.0) ? _2321 : (isnan(_2321) ? 1.0 : min(_2321, 1.0));
        _2390 = (((cbLight._m0[_2398].x * 0.3183098733425140380859375) * _2416) * _2417) + _2371;
        _2392 = (((cbLight._m0[_2398].y * 0.3183098733425140380859375) * _2416) * _2417) + _2372;
        _2394 = (((cbLight._m0[_2398].z * 0.3183098733425140380859375) * _2416) * _2417) + _2373;
    }
    bool _2397 = _2377.y == 0u;
    float _2435;
    float _2437;
    float _2439;
    if (_2397)
    {
        _2435 = _2390;
        _2437 = _2392;
        _2439 = _2394;
    }
    else
    {
        uint _2605 = _2306 + 7u;
        float _2621 = (dot(vec3(cbLight._m0[_2306 + 3u].xyz), vec3(_1061, _1062, _1063)) * 0.5) + 0.5;
        float _2622 = _2621 * _2621;
        float _4695 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2623 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
        float _2624 = isnan(1.0) ? _2322 : (isnan(_2322) ? 1.0 : min(_2322, 1.0));
        _2435 = (((cbLight._m0[_2605].x * 0.3183098733425140380859375) * _2623) * _2624) + _2390;
        _2437 = (((cbLight._m0[_2605].y * 0.3183098733425140380859375) * _2623) * _2624) + _2392;
        _2439 = (((cbLight._m0[_2605].z * 0.3183098733425140380859375) * _2623) * _2624) + _2394;
    }
    uint _2442 = _2306 + 8u;
    float _2455 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2306].w)) * _1065) * 0.949999988079071044921875);
    float _2456 = _2455 * _2455;
    float _2457 = cbLight._m0[_2306].x + _1142;
    float _2458 = cbLight._m0[_2306].y + _1143;
    float _2459 = cbLight._m0[_2306].z + _1144;
    float _2463 = inversesqrt(dot(vec3(_2457, _2458, _2459), vec3(_2457, _2458, _2459)));
    float _2464 = _2463 * _2457;
    float _2465 = _2463 * _2458;
    float _2466 = _2463 * _2459;
    float _2467 = dot(vec3(_1061, _1062, _1063), vec3(cbLight._m0[_2306].xyz));
    float _4711 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
    float _2470 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
    float _4722 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
    float _2471 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
    float _2472 = dot(vec3(_1061, _1062, _1063), vec3(_2464, _2465, _2466));
    float _4733 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _2475 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
    float _2476 = dot(vec3(cbLight._m0[_2306].xyz), vec3(_2464, _2465, _2466));
    float _4744 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2480 = _2456 * _2456;
    float _2484 = ((_2475 * _2475) * (_2480 + (-1.0))) + 1.0;
    float _2492 = exp2(log2(1.0 - (isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0)))) * 5.0);
    float _2493 = 0.959999978542327880859375 - _1222;
    float _2495 = 0.959999978542327880859375 - _1223;
    float _2496 = 0.959999978542327880859375 - _1224;
    float _2503 = 1.0 - _2456;
    float _2514 = (0.5 / (((_2471 * ((_2470 * _2503) + _2456)) + 9.9999999392252902907785028219223e-09) + (((_2471 * _2503) + _2456) * _2470))) * _2470;
    float _4755 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
    float _2516 = (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (_2480 / ((_2484 * _2484) * 3.141590118408203125));
    uint _2527 = _2306 + 9u;
    float _2538 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2343].w)) * _1065) * 0.949999988079071044921875);
    float _2539 = _2538 * _2538;
    float _2540 = cbLight._m0[_2343].x + _1142;
    float _2541 = cbLight._m0[_2343].y + _1143;
    float _2542 = cbLight._m0[_2343].z + _1144;
    float _2546 = inversesqrt(dot(vec3(_2540, _2541, _2542), vec3(_2540, _2541, _2542)));
    float _2547 = _2546 * _2540;
    float _2548 = _2546 * _2541;
    float _2549 = _2546 * _2542;
    float _2550 = dot(vec3(_1061, _1062, _1063), vec3(cbLight._m0[_2343].xyz));
    float _4766 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
    float _2553 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
    float _2554 = dot(vec3(_1061, _1062, _1063), vec3(_2547, _2548, _2549));
    float _4777 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
    float _2557 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
    float _2558 = dot(vec3(cbLight._m0[_2343].xyz), vec3(_2547, _2548, _2549));
    float _4788 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
    float _2562 = _2539 * _2539;
    float _2566 = ((_2557 * _2557) * (_2562 + (-1.0))) + 1.0;
    float _2573 = exp2(log2(1.0 - (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0)))) * 5.0);
    float _2580 = 1.0 - _2539;
    float _2590 = (0.5 / (((_2471 * ((_2553 * _2580) + _2539)) + 9.9999999392252902907785028219223e-09) + (((_2471 * _2580) + _2539) * _2553))) * _2553;
    float _4799 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
    float _2592 = (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0))) * (_2562 / ((_2566 * _2566) * 3.141590118408203125));
    float _2602 = (((((_2573 * _2493) + _1225) * cbLight._m0[_2527].x) * _2592) * _2329) + (((((_2492 * _2493) + _1225) * cbLight._m0[_2442].x) * _2516) * _2339);
    float _2603 = (((((_2573 * _2495) + _1227) * cbLight._m0[_2527].y) * _2592) * _2329) + (((((_2492 * _2495) + _1227) * cbLight._m0[_2442].y) * _2516) * _2339);
    float _2604 = (((((_2573 * _2496) + _1228) * cbLight._m0[_2527].z) * _2592) * _2329) + (((((_2492 * _2496) + _1228) * cbLight._m0[_2442].z) * _2516) * _2339);
    float _2666;
    float _2668;
    float _2670;
    if (_2379)
    {
        _2666 = _2602;
        _2668 = _2603;
        _2670 = _2604;
    }
    else
    {
        uint _2672 = _2306 + 2u;
        uint _2676 = _2306 + 10u;
        float _2690 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2672].w)) * _1065) * 0.949999988079071044921875);
        float _2691 = _2690 * _2690;
        float _2692 = cbLight._m0[_2672].x + _1142;
        float _2693 = cbLight._m0[_2672].y + _1143;
        float _2694 = cbLight._m0[_2672].z + _1144;
        float _2698 = inversesqrt(dot(vec3(_2692, _2693, _2694), vec3(_2692, _2693, _2694)));
        float _2699 = _2698 * _2692;
        float _2700 = _2698 * _2693;
        float _2701 = _2698 * _2694;
        float _2702 = dot(vec3(_1061, _1062, _1063), vec3(cbLight._m0[_2672].xyz));
        float _4810 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
        float _2705 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
        float _2706 = dot(vec3(_1061, _1062, _1063), vec3(_2699, _2700, _2701));
        float _4821 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2709 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
        float _2710 = dot(vec3(cbLight._m0[_2672].xyz), vec3(_2699, _2700, _2701));
        float _4832 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2714 = _2691 * _2691;
        float _2718 = ((_2709 * _2709) * (_2714 + (-1.0))) + 1.0;
        float _2725 = exp2(log2(1.0 - (isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0)))) * 5.0);
        float _2732 = 1.0 - _2691;
        float _2742 = (0.5 / (((_2471 * ((_2705 * _2732) + _2691)) + 9.9999999392252902907785028219223e-09) + (((_2471 * _2732) + _2691) * _2705))) * _2705;
        float _4843 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        float _2744 = (isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0))) * (_2714 / ((_2718 * _2718) * 3.141590118408203125));
        float _2745 = isnan(1.0) ? _2321 : (isnan(_2321) ? 1.0 : min(_2321, 1.0));
        _2666 = (((((_2725 * _2493) + _1225) * cbLight._m0[_2676].x) * _2744) * _2745) + _2602;
        _2668 = (((((_2725 * _2495) + _1227) * cbLight._m0[_2676].y) * _2744) * _2745) + _2603;
        _2670 = (((((_2725 * _2496) + _1228) * cbLight._m0[_2676].z) * _2744) * _2745) + _2604;
    }
    float _2780;
    float _2782;
    float _2784;
    if (_2397)
    {
        _2780 = _2666;
        _2782 = _2668;
        _2784 = _2670;
    }
    else
    {
        uint _2791 = _2306 + 3u;
        uint _2795 = _2306 + 11u;
        float _2809 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2791].w)) * _1065) * 0.949999988079071044921875);
        float _2810 = _2809 * _2809;
        float _2811 = cbLight._m0[_2791].x + _1142;
        float _2812 = cbLight._m0[_2791].y + _1143;
        float _2813 = cbLight._m0[_2791].z + _1144;
        float _2817 = inversesqrt(dot(vec3(_2811, _2812, _2813), vec3(_2811, _2812, _2813)));
        float _2818 = _2817 * _2811;
        float _2819 = _2817 * _2812;
        float _2820 = _2817 * _2813;
        float _2821 = dot(vec3(_1061, _1062, _1063), vec3(cbLight._m0[_2791].xyz));
        float _4859 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
        float _2824 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
        float _2825 = dot(vec3(_1061, _1062, _1063), vec3(_2818, _2819, _2820));
        float _4870 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
        float _2828 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
        float _2829 = dot(vec3(cbLight._m0[_2791].xyz), vec3(_2818, _2819, _2820));
        float _4881 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
        float _2833 = _2810 * _2810;
        float _2837 = ((_2828 * _2828) * (_2833 + (-1.0))) + 1.0;
        float _2844 = exp2(log2(1.0 - (isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0)))) * 5.0);
        float _2851 = 1.0 - _2810;
        float _2861 = (0.5 / (((_2471 * ((_2824 * _2851) + _2810)) + 9.9999999392252902907785028219223e-09) + (((_2471 * _2851) + _2810) * _2824))) * _2824;
        float _4892 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
        float _2863 = (isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0))) * (_2833 / ((_2837 * _2837) * 3.141590118408203125));
        float _2864 = isnan(1.0) ? _2322 : (isnan(_2322) ? 1.0 : min(_2322, 1.0));
        _2780 = (((((_2844 * _2493) + _1225) * cbLight._m0[_2795].x) * _2863) * _2864) + _2666;
        _2782 = (((((_2844 * _2495) + _1227) * cbLight._m0[_2795].y) * _2863) * _2864) + _2668;
        _2784 = (((((_2844 * _2496) + _1228) * cbLight._m0[_2795].z) * _2863) * _2864) + _2670;
    }
    float _2999;
    float _3001;
    float _3003;
    float _3005;
    float _3007;
    float _3009;
    if (_2304.y == 0u)
    {
        float _2939 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2940 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2939;
        float _2941 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2939;
        float _2942 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2939;
        uvec4 _2954 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2955 = _2954.x;
        uint _2966 = uint((float(_2954.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1163) / _2955))) + floor(float(uint(cbSceneParam._m0[85u].x * _1162) / _2955)));
        float _2976 = (log2(_2942 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2977 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
        uint _2980 = uint(isnan(14.0) ? _2977 : (isnan(_2977) ? 14.0 : min(_2977, 14.0)));
        uvec4 _2985 = texelFetch(g_lightClusterGridBuffer, int(((_2980 << 2u) + (_2966 << 6u)) >> 2u));
        uint _2986 = _2985.x;
        uint _2987 = _2954.z;
        float _3089;
        float _3091;
        float _3093;
        float _3095;
        float _3097;
        float _3099;
        if (((((1u << ((_2987 >> 4u) & 15u)) + 4294967295u) & _2986) == 0u) || ((_2987 & 240u) == 0u))
        {
            _3089 = 0.0;
            _3091 = 0.0;
            _3093 = 0.0;
            _3095 = 0.0;
            _3097 = 0.0;
            _3099 = 0.0;
        }
        else
        {
            float _3090;
            float _3092;
            float _3094;
            float _3096;
            float _3098;
            float _3100;
            float _3242 = 0.0;
            float _3243 = 0.0;
            float _3244 = 0.0;
            float _3245 = 0.0;
            float _3246 = 0.0;
            float _3247 = 0.0;
            uint _3248 = 0u;
            uint _3257;
            bool _3258;
            for (;;)
            {
                _3257 = texelFetch(g_lightClassification, int((((_2980 << 5u) + (_2966 << 9u)) + (_3248 << 2u)) >> 2u)).x;
                _3258 = _3257 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3258)
                {
                    frontier_phi_66_pred = _3242;
                    frontier_phi_66_pred_1 = _3247;
                    frontier_phi_66_pred_2 = _3246;
                    frontier_phi_66_pred_3 = _3245;
                    frontier_phi_66_pred_4 = _3244;
                    frontier_phi_66_pred_5 = _3243;
                }
                else
                {
                    float _3387;
                    float _3388;
                    float _3389;
                    float _3390;
                    float _3391;
                    float _3392;
                    uint _3393;
                    _3387 = _3242;
                    _3388 = _3243;
                    _3389 = _3244;
                    _3390 = _3245;
                    _3391 = _3246;
                    _3392 = _3247;
                    _3393 = _3257;
                    float _3314;
                    float _3315;
                    float _3316;
                    float _3317;
                    float _3318;
                    float _3319;
                    for (;;)
                    {
                        uint _3397 = uint(findLSB(_3393)) + (_3248 << 5u);
                        uint _3394 = (_3393 + 4294967295u) & _3393;
                        uint _3399 = _3397 * 48u;
                        vec4 _3413 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3399)).x, texelFetch(g_PointLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3399 + 3u)).x));
                        uint _3419 = (_3397 * 48u) + 4u;
                        vec4 _3432 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3419)).x, texelFetch(g_PointLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3419 + 3u)).x));
                        uint _3438 = (_3397 * 48u) + 8u;
                        vec3 _3449 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3438)).x, texelFetch(g_PointLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3438 + 2u)).x));
                        float _3453 = _3413.x - _2940;
                        float _3454 = _3413.y - _2941;
                        float _3455 = _3413.z - _2942;
                        float _3456 = dot(vec3(_3453, _3454, _3455), vec3(_3453, _3454, _3455));
                        float _3459 = inversesqrt(_3456);
                        float _3460 = _3459 * _3453;
                        float _3461 = _3459 * _3454;
                        float _3462 = _3459 * _3455;
                        float _3463 = dot(vec3(_1181, _1184, _1187), vec3(_3460, _3461, _3462));
                        float _3468 = 1.0 - (_3456 * _3413.w);
                        float _4918 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                        float _3469 = isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0));
                        float _3470 = sqrt(_3456) * _3432.w;
                        float _3473 = 1.39999997615814208984375 / (_3470 + 1.39999997615814208984375);
                        float _3474 = _3473 * _3473;
                        float _3477 = ((1.0 - _3474) * _3463) + _3474;
                        float _3480 = _3470 * _3470;
                        float _3484 = ((isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0))) * _3469) / ((_3480 * 0.699999988079071044921875) + 1.0);
                        float _3488 = (-0.0) - _2940;
                        float _3489 = (-0.0) - _2941;
                        float _3490 = (-0.0) - _2942;
                        float _3494 = inversesqrt(dot(vec3(_3488, _3489, _3490), vec3(_3488, _3489, _3490)));
                        float _3495 = _3494 * _3488;
                        float _3496 = _3494 * _3489;
                        float _3497 = _3494 * _3490;
                        float _3505 = exp2(log2(1.0 / ((_3480 * 3.5) + 5.0)) * 0.25);
                        float _3506 = 1.0 - _1256;
                        float _3513 = sqrt(1.0 - ((1.0 - (_3506 * _3506)) * (1.0 - (_3505 * _3505))));
                        float _3514 = _3513 * _3513;
                        float _3515 = _3514 * _3514;
                        float _3516 = _3495 + _3460;
                        float _3517 = _3496 + _3461;
                        float _3518 = _3497 + _3462;
                        float _3522 = inversesqrt(dot(vec3(_3516, _3517, _3518), vec3(_3516, _3517, _3518)));
                        float _3526 = dot(vec3(_1181, _1184, _1187), vec3(_3495, _3496, _3497));
                        float _4934 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                        float _3529 = isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0));
                        float _3530 = dot(vec3(_1181, _1184, _1187), vec3(_3522 * _3516, _3522 * _3517, _3522 * _3518));
                        float _4945 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                        float _3533 = isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0));
                        float _3537 = ((_3533 * _3533) * (_3515 + (-1.0))) + 1.0;
                        float _3538 = _3473 * _3514;
                        float _3539 = _3538 * _3538;
                        float _3542 = ((1.0 - _3539) * _3463) + _3539;
                        float _4956 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                        float _3543 = isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0));
                        float _3544 = 1.0 - _3514;
                        float _3554 = (0.5 / (((_3543 * ((_3529 * _3544) + _3514)) + 9.9999999392252902907785028219223e-09) + (((_3543 * _3544) + _3514) * _3529))) * _3543;
                        float _4967 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                        float _3565 = (((_3515 * 3.1415927410125732421875) * (isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0)))) / ((_3537 * _3537) * ((_3480 * 2.1991131305694580078125) + 3.141590118408203125))) * _3469;
                        _3317 = (_3484 * _3432.x) + _3390;
                        _3318 = (_3484 * _3432.y) + _3391;
                        _3319 = (_3484 * _3432.z) + _3392;
                        _3314 = (_3565 * _3449.x) + _3387;
                        _3315 = (_3565 * _3449.y) + _3388;
                        _3316 = (_3565 * _3449.z) + _3389;
                        if (_3394 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3387 = _3314;
                            _3388 = _3315;
                            _3389 = _3316;
                            _3390 = _3317;
                            _3391 = _3318;
                            _3392 = _3319;
                            _3393 = _3394;
                        }
                    }
                    frontier_phi_66_pred = _3314;
                    frontier_phi_66_pred_1 = _3319;
                    frontier_phi_66_pred_2 = _3318;
                    frontier_phi_66_pred_3 = _3317;
                    frontier_phi_66_pred_4 = _3316;
                    frontier_phi_66_pred_5 = _3315;
                }
                _3090 = frontier_phi_66_pred;
                _3100 = frontier_phi_66_pred_1;
                _3098 = frontier_phi_66_pred_2;
                _3096 = frontier_phi_66_pred_3;
                _3094 = frontier_phi_66_pred_4;
                _3092 = frontier_phi_66_pred_5;
                uint _3249 = _3248 + 1u;
                if (_3249 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3242 = _3090;
                    _3243 = _3092;
                    _3244 = _3094;
                    _3245 = _3096;
                    _3246 = _3098;
                    _3247 = _3100;
                    _3248 = _3249;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3089 = _3090;
            _3091 = _3092;
            _3093 = _3094;
            _3095 = _3096;
            _3097 = _3098;
            _3099 = _3100;
        }
        uvec4 _3103 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3104 = _3103.z;
        uint _3106 = (_3104 >> 8u) & 15u;
        float _3210;
        float _3212;
        float _3214;
        float _3216;
        float _3218;
        float _3220;
        if (((4294967295u << _3106) & _2986) == 0u)
        {
            _3210 = _3089;
            _3212 = _3091;
            _3214 = _3093;
            _3216 = _3095;
            _3218 = _3097;
            _3220 = _3099;
        }
        else
        {
            float _3235 = inversesqrt(dot(vec3(_2940, _2941, _2942), vec3(_2940, _2941, _2942)));
            float _3236 = _3235 * _2940;
            float _3237 = _3235 * _2941;
            float _3238 = _3235 * _2942;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3106 < ((_3104 >> 12u) & 15u))
            {
                float _3211;
                float _3213;
                float _3215;
                float _3217;
                float _3219;
                float _3221;
                float _3370 = _3089;
                float _3371 = _3091;
                float _3372 = _3093;
                float _3373 = _3095;
                float _3374 = _3097;
                float _3375 = _3099;
                uint _3376 = _3106;
                uint _3385;
                bool _3386;
                for (;;)
                {
                    _3385 = texelFetch(g_lightClassification, int((((_2980 << 5u) + (_2966 << 9u)) + (_3376 << 2u)) >> 2u)).x;
                    _3386 = _3385 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3386)
                    {
                        frontier_phi_77_pred = _3375;
                        frontier_phi_77_pred_1 = _3374;
                        frontier_phi_77_pred_2 = _3373;
                        frontier_phi_77_pred_3 = _3372;
                        frontier_phi_77_pred_4 = _3371;
                        frontier_phi_77_pred_5 = _3370;
                    }
                    else
                    {
                        float _3579;
                        float _3580;
                        float _3581;
                        float _3582;
                        float _3583;
                        float _3584;
                        float _3872;
                        float _3873;
                        float _3874;
                        float _3875;
                        float _3876;
                        float _3877;
                        float _3592 = _3370;
                        float _3593 = _3371;
                        float _3594 = _3372;
                        float _3595 = _3373;
                        float _3596 = _3374;
                        float _3597 = _3375;
                        uint _3598 = _3385;
                        uint _3599;
                        vec4 _3624;
                        float _3625;
                        vec4 _3640;
                        vec3 _3652;
                        vec4 _3667;
                        vec4 _3682;
                        float _3728;
                        bool _3729;
                        for (;;)
                        {
                            uint _3609 = ((_3376 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3598));
                            _3599 = (_3598 + 4294967295u) & _3598;
                            uint _3611 = _3609 * 40u;
                            _3624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 3u)).x));
                            _3625 = _3624.w;
                            uint _3627 = (_3609 * 40u) + 4u;
                            _3640 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3627)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 3u)).x));
                            uint _3642 = (_3609 * 40u) + 8u;
                            _3652 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 2u)).x));
                            uint _3654 = (_3609 * 40u) + 16u;
                            _3667 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3654)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 3u)).x));
                            uint _3669 = (_3609 * 40u) + 20u;
                            _3682 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3669)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 3u)).x));
                            uint _3684 = (_3609 * 40u) + 24u;
                            vec4 _3697 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3684)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 3u)).x));
                            uint _3703 = (_3609 * 40u) + 28u;
                            vec4 _3716 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3703)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 3u)).x));
                            _3728 = fma(_2942, _3716.z, fma(_2941, _3716.y, _3716.x * _2940)) + _3716.w;
                            _3729 = !((fma(_2942, _3697.z, fma(_2941, _3697.y, _3697.x * _2940)) + _3697.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3729)
                            {
                                float _3756 = _3624.x - _2940;
                                float _3757 = _3624.y - _2941;
                                float _3758 = _3624.z - _2942;
                                float _3759 = dot(vec3(_3756, _3757, _3758), vec3(_3756, _3757, _3758));
                                float _3762 = inversesqrt(_3759);
                                float _3763 = _3762 * _3756;
                                float _3764 = _3762 * _3757;
                                float _3765 = _3762 * _3758;
                                float _3769 = 1.0 - (_3759 / (_3625 * _3625));
                                float _4978 = isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0));
                                float _3770 = isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0));
                                float _3774 = sqrt(_3759) * _3640.w;
                                float _3776 = 1.39999997615814208984375 / (_3774 + 1.39999997615814208984375);
                                float _3777 = _3776 * _3776;
                                float _3780 = ((1.0 - _3777) * dot(vec3(_3763, _3764, _3765), vec3(_1181, _1184, _1187))) + _3777;
                                float _3783 = _3774 * _3774;
                                float _3787 = (fma(_2942, _3667.z, fma(_2941, _3667.y, _3667.x * _2940)) + _3667.w) / _3728;
                                float _3788 = (fma(_2942, _3682.z, fma(_2941, _3682.y, _3682.x * _2940)) + _3682.w) / _3728;
                                float _3792 = 1.0 - dot(vec2(_3787, _3788), vec2(_3787, _3788));
                                float _4994 = isnan(0.0) ? _3792 : (isnan(_3792) ? 0.0 : max(_3792, 0.0));
                                float _3793 = isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0));
                                float _3794 = _3793 * (((isnan(0.0) ? _3780 : (isnan(_3780) ? 0.0 : max(_3780, 0.0))) * _3770) / ((_3783 * 0.699999988079071044921875) + 1.0));
                                float _3806 = exp2(log2(1.0 / ((_3783 * 3.5) + 5.0)) * 0.25);
                                float _3807 = 1.0 - _1256;
                                float _3814 = sqrt(1.0 - ((1.0 - (_3807 * _3807)) * (1.0 - (_3806 * _3806))));
                                float _3815 = _3814 * _3814;
                                float _3816 = _3815 * _3815;
                                float _3817 = _3763 - _3236;
                                float _3818 = _3764 - _3237;
                                float _3819 = _3765 - _3238;
                                float _3823 = inversesqrt(dot(vec3(_3817, _3818, _3819), vec3(_3817, _3818, _3819)));
                                float _3827 = dot(vec3(_1181, _1184, _1187), vec3((-0.0) - _3236, (-0.0) - _3237, (-0.0) - _3238));
                                float _5005 = isnan(0.0) ? _3827 : (isnan(_3827) ? 0.0 : max(_3827, 0.0));
                                float _3830 = isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0));
                                float _3831 = dot(vec3(_1181, _1184, _1187), vec3(_3823 * _3817, _3823 * _3818, _3823 * _3819));
                                float _5016 = isnan(0.0) ? _3831 : (isnan(_3831) ? 0.0 : max(_3831, 0.0));
                                float _3834 = isnan(1.0) ? _5016 : (isnan(_5016) ? 1.0 : min(_5016, 1.0));
                                float _3838 = ((_3834 * _3834) * (_3816 + (-1.0))) + 1.0;
                                float _3839 = _3776 * _3815;
                                float _3840 = _3839 * _3839;
                                float _3846 = ((1.0 - _3840) * dot(vec3(_1181, _1184, _1187), vec3(_3763, _3764, _3765))) + _3840;
                                float _5027 = isnan(0.0) ? _3846 : (isnan(_3846) ? 0.0 : max(_3846, 0.0));
                                float _3847 = isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0));
                                float _3848 = 1.0 - _3815;
                                float _3858 = (0.5 / (((_3847 * ((_3830 * _3848) + _3815)) + 9.9999999392252902907785028219223e-09) + (((_3847 * _3848) + _3815) * _3830))) * _3847;
                                float _5038 = isnan(0.0) ? _3858 : (isnan(_3858) ? 0.0 : max(_3858, 0.0));
                                float _3868 = (_3793 * _3770) * (((_3816 * 3.1415927410125732421875) * (isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0)))) / ((_3838 * _3838) * ((_3783 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3794 * _3640.y;
                                frontier_phi_83_pred_1 = _3794 * _3640.x;
                                frontier_phi_83_pred_2 = _3868 * _3652.z;
                                frontier_phi_83_pred_3 = _3868 * _3652.y;
                                frontier_phi_83_pred_4 = _3868 * _3652.x;
                                frontier_phi_83_pred_5 = _3794 * _3640.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3876 = frontier_phi_83_pred;
                            _3875 = frontier_phi_83_pred_1;
                            _3874 = frontier_phi_83_pred_2;
                            _3873 = frontier_phi_83_pred_3;
                            _3872 = frontier_phi_83_pred_4;
                            _3877 = frontier_phi_83_pred_5;
                            _3582 = _3875 + _3595;
                            _3583 = _3876 + _3596;
                            _3584 = _3877 + _3597;
                            _3579 = _3872 + _3592;
                            _3580 = _3873 + _3593;
                            _3581 = _3874 + _3594;
                            if (_3599 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3592 = _3579;
                                _3593 = _3580;
                                _3594 = _3581;
                                _3595 = _3582;
                                _3596 = _3583;
                                _3597 = _3584;
                                _3598 = _3599;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3584;
                        frontier_phi_77_pred_1 = _3583;
                        frontier_phi_77_pred_2 = _3582;
                        frontier_phi_77_pred_3 = _3581;
                        frontier_phi_77_pred_4 = _3580;
                        frontier_phi_77_pred_5 = _3579;
                    }
                    _3221 = frontier_phi_77_pred;
                    _3219 = frontier_phi_77_pred_1;
                    _3217 = frontier_phi_77_pred_2;
                    _3215 = frontier_phi_77_pred_3;
                    _3213 = frontier_phi_77_pred_4;
                    _3211 = frontier_phi_77_pred_5;
                    uint _3377 = _3376 + 1u;
                    if (_3377 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3370 = _3211;
                        _3371 = _3213;
                        _3372 = _3215;
                        _3373 = _3217;
                        _3374 = _3219;
                        _3375 = _3221;
                        _3376 = _3377;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3215;
                frontier_phi_58_59_ladder_1 = _3221;
                frontier_phi_58_59_ladder_2 = _3219;
                frontier_phi_58_59_ladder_3 = _3217;
                frontier_phi_58_59_ladder_4 = _3213;
                frontier_phi_58_59_ladder_5 = _3211;
            }
            else
            {
                frontier_phi_58_59_ladder = _3093;
                frontier_phi_58_59_ladder_1 = _3099;
                frontier_phi_58_59_ladder_2 = _3097;
                frontier_phi_58_59_ladder_3 = _3095;
                frontier_phi_58_59_ladder_4 = _3091;
                frontier_phi_58_59_ladder_5 = _3089;
            }
            _3210 = frontier_phi_58_59_ladder_5;
            _3212 = frontier_phi_58_59_ladder_4;
            _3214 = frontier_phi_58_59_ladder;
            _3216 = frontier_phi_58_59_ladder_3;
            _3218 = frontier_phi_58_59_ladder_2;
            _3220 = frontier_phi_58_59_ladder_1;
        }
        float _3225 = isnan(1.0) ? _1240 : (isnan(_1240) ? 1.0 : min(_1240, 1.0));
        _2999 = (_3225 * _3216) + _2435;
        _3001 = (_3225 * _3218) + _2437;
        _3003 = (_3225 * _3220) + _2439;
        _3005 = ((_3210 * _1225) * _3225) + _2780;
        _3007 = ((_3212 * _1227) * _3225) + _2782;
        _3009 = ((_3214 * _1228) * _3225) + _2784;
    }
    else
    {
        _2999 = _2435;
        _3001 = _2437;
        _3003 = _2439;
        _3005 = _2780;
        _3007 = _2782;
        _3009 = _2784;
    }
    float _5054 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
    float _5065 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
    float _5076 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
    float _5087 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _3027 = ((isnan(1.0) ? _5054 : (isnan(_5054) ? 1.0 : min(_5054, 1.0))) * (_2999 + ((isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0))) * _1240))) + ((_3005 + ((isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0))) * _2075)) * cbPerFrame._m0[3u].x);
    float _3028 = ((isnan(1.0) ? _5065 : (isnan(_5065) ? 1.0 : min(_5065, 1.0))) * (_3001 + ((isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0))) * _1240))) + ((_3007 + ((isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0))) * _2075)) * cbPerFrame._m0[3u].x);
    float _3029 = ((isnan(1.0) ? _5076 : (isnan(_5076) ? 1.0 : min(_5076, 1.0))) * (_3003 + ((isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0))) * _1240))) + ((_3009 + ((isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0))) * _2075)) * cbPerFrame._m0[3u].x);
    float _3034 = cbInstanceData._m0[_1200 + 6u].w * (isnan(1.0) ? _5087 : (isnan(_5087) ? 1.0 : min(_5087, 1.0)));
    float _3039 = _1162 / cbSceneParam._m0[86u].x;
    float _3040 = _1163 / cbSceneParam._m0[86u].y;
    vec4 _3054 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3039, _3040, (log2((isnan(cbSceneParam._m0[77u].w) ? _1085 : (isnan(_1085) ? cbSceneParam._m0[77u].w : min(_1085, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3056 = _3054.x;
    float _3057 = _3054.y;
    float _3058 = _3054.z;
    float _3059 = _3054.w;
    float _3152;
    float _3154;
    float _3156;
    float _3158;
    if (_1085 > cbSceneParam._m0[78u].w)
    {
        float _3114 = isnan(_1085) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1085 : min(cbSceneParam._m0[80u].w, _1085));
        float _3115 = _3114 / _1085;
        float _3126 = _3115 * _1135;
        float _3127 = _1136 * _3115;
        float _3128 = (-0.0) - _3127;
        float _3130 = _3115 * _1137;
        float _3132 = (cbSceneParam._m0[77u].w * _3128) / _3114;
        float _3133 = _3132 + cbSceneParam._m0[79u].w;
        float _3134 = cbSceneParam._m0[79u].w - _3127;
        float _3140 = sqrt(((_3126 * _3126) + (_3127 * _3127)) + (_3130 * _3130));
        float _3143 = (1.0 - (cbSceneParam._m0[77u].w / _3114)) * _3140;
        float _3148 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3150 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3327;
        if (abs((_3128 - _3132) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3327 = ((((_3133 > 0.0) ? exp2(_3148 * _3133) : (2.0 - exp2(_3150 * _3133))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3143;
        }
        else
        {
            float _3271 = 1.0 / cbSceneParam._m0[80u].x;
            float _3272 = isnan(_3134) ? _3133 : (isnan(_3133) ? _3134 : max(_3133, _3134));
            float _3273 = isnan(_3134) ? _3133 : (isnan(_3133) ? _3134 : min(_3133, _3134));
            float _3282 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : min(_3272, 0.0));
            float _3283 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : min(_3273, 0.0));
            _3327 = ((abs(_3140 / _3128) * cbSceneParam._m0[80u].y) * ((((_3282 - _3283) * 2.0) - ((exp2(_3148 * (isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0)))) - exp2(_3148 * (isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0))))) * _3271)) - ((exp2(_3150 * _3282) - exp2(_3150 * _3283)) * _3271))) + (_3143 * cbSceneParam._m0[80u].z);
        }
        vec4 _3329 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3039, _3040, 1.0), 0.0);
        float _3338 = exp2((_3327 * (-1.44269502162933349609375)) * (1.0 - _3329.w));
        float _3339 = log2(_3338);
        float _3355 = log2(_3059);
        _3152 = (exp2(_3355 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3339 * cbSceneParam._m0[78u].x)) * _3329.x) / cbSceneParam._m0[78u].x)) + _3056;
        _3154 = (exp2(_3355 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3339 * cbSceneParam._m0[78u].y)) * _3329.y) / cbSceneParam._m0[78u].y)) + _3057;
        _3156 = (exp2(_3355 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3339 * cbSceneParam._m0[78u].z)) * _3329.z) / cbSceneParam._m0[78u].z)) + _3058;
        _3158 = _3338 * _3059;
    }
    else
    {
        _3152 = _3056;
        _3154 = _3057;
        _3156 = _3058;
        _3158 = _3059;
    }
    bool _3365;
    vec4 _3168;
    vec4 _3190;
    float _3192;
    float _3196;
    float _3197;
    float _3198;
    float _3199;
    bool _3209;
    for (;;)
    {
        _3168 = cbMatDynParam._m0[0u];
        float _3170 = roundEven(_3168.y);
        bool _3171 = _3170 == 3.0;
        float _3172 = log2(_3158);
        float _3179 = exp2(_3172 * cbSceneParam._m0[78u].x) * _3027;
        float _3180 = exp2(_3172 * cbSceneParam._m0[78u].y) * _3028;
        float _3181 = exp2(_3172 * cbSceneParam._m0[78u].z) * _3029;
        float _3188 = _1151 + (-0.5);
        _3190 = cbMtdParam._m0[1u];
        _3192 = _3190.y * _3188;
        float _3195 = (_3170 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3196 = _3195 * (_3171 ? _3179 : (_3179 + (cbSceneParam._m0[72u].w * _3152)));
        _3197 = _3195 * (_3171 ? _3180 : (_3180 + (cbSceneParam._m0[72u].w * _3154)));
        _3198 = _3195 * (_3171 ? _3181 : (_3181 + (cbSceneParam._m0[72u].w * _3156)));
        _3199 = _3188 * 0.999000012874603271484375;
        _3209 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3209)
        {
            if ((cbInstanceData._m0[_1200 + 7u].x + _3199) < 0.5)
            {
                _3365 = true;
                break;
            }
        }
        uint _3306 = _1201 + uint(_3168.w);
        if ((cbInstanceData._m0[_3306].w < 1.0) && ((cbInstanceData._m0[_3306].w + _3199) < 0.5))
        {
            _3365 = true;
            break;
        }
        if ((_3192 + 1.0) < _3190.x)
        {
            _3365 = true;
            break;
        }
        _3365 = false;
        break;
    }
    float _3570;
    if (_3365)
    {
        discard_state = true;
        _3570 = 0.0;
    }
    else
    {
        _3570 = _3034;
    }
    SV_Target.x = _3196;
    SV_Target.y = _3197;
    SV_Target.z = _3198;
    SV_Target.w = _3570;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3034;
    discard_exit();
}


