#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24;
layout(set = 0, binding = 12) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 13) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 18) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in float TEXCOORD_8;
layout(location = 7, component = 1) in float TEXCOORD_9;
layout(location = 7, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1457;
float _3860;
float _3861;
float _3862;
float _3863;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _275 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _290 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _294 = _290.z;
    float _307 = exp2(log2((1.0 - _294) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _308 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _309 = isnan(1.0) ? _308 : (isnan(_308) ? 1.0 : min(_308, 1.0));
    vec4 _322 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _330 = log2(0.0);
    float _332 = exp2(_330 * cbMtdParam._m0[23u].x);
    float _333 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _334 = isnan(1.0) ? _333 : (isnan(_333) ? 1.0 : min(_333, 1.0));
    float _343 = exp2(log2(cbMtdParam._m0[23u].y * _294) * cbMtdParam._m0[22u].y);
    float _344 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _345 = isnan(1.0) ? _344 : (isnan(_344) ? 1.0 : min(_344, 1.0));
    float _366 = roundEven(5.0 - ((texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _367 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _368 = isnan(4.0) ? _367 : (isnan(_367) ? 4.0 : min(_367, 4.0));
    float _380 = floor(_368);
    vec4 _383 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w, _380));
    vec4 _407 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _418 = cbMtdParam._m0[9u].x * _407.x;
    float _419 = cbMtdParam._m0[9u].y * _407.y;
    float _420 = cbMtdParam._m0[9u].z * _407.z;
    float _427 = (((cbMtdParam._m0[10u].x * _383.x) - _418) * _345) + _418;
    float _428 = (((cbMtdParam._m0[10u].y * _383.y) - _419) * _345) + _419;
    float _429 = (((cbMtdParam._m0[10u].z * _383.z) - _420) * _345) + _420;
    float _435 = exp2(log2(_290.w) * cbMtdParam._m0[23u].w);
    vec4 _448 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _468 = (((cbMtdParam._m0[16u].x * _448.x) - _427) * _435) + _427;
    float _469 = (((cbMtdParam._m0[16u].y * _448.y) - _428) * _435) + _428;
    float _470 = (((cbMtdParam._m0[16u].z * _448.z) - _429) * _435) + _429;
    vec4 _483 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _503 = (((cbMtdParam._m0[19u].x * _483.x) - _468) * _334) + _468;
    float _504 = (((cbMtdParam._m0[19u].y * _483.y) - _469) * _334) + _469;
    float _505 = (((cbMtdParam._m0[19u].z * _483.z) - _470) * _334) + _470;
    vec4 _518 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _543 = (_322.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _518.x) - _503) * _309) + _503);
    float _545 = (_322.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _518.y) - _504) * _309) + _504);
    float _547 = (_322.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _518.z) - _505) * _309) + _505);
    float _551 = cbMtdParam._m0[28u].x * TEXCOORD_8;
    float _560 = (_551 - (((_275.x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _551))) * (cbMtdParam._m0[27u].w + 1.0);
    float _3912 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _561 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _568 = ((cbMtdParam._m0[21u].x - _543) * _561) + _543;
    float _569 = ((cbMtdParam._m0[21u].y - _545) * _561) + _545;
    float _570 = ((cbMtdParam._m0[21u].z - _547) * _561) + _547;
    vec4 _584 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24, SS_ClampLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.z) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.w) + cbTextureTilingScale._m0[11u].w));
    float _592 = (_584.x + (-1.0)) + (cbMtdParam._m0[28u].y * 2.0);
    float _3923 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _598 = exp2(log2(cbMtdParam._m0[28u].w * (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) * cbMtdParam._m0[28u].z);
    float _3934 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _599 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _203[5];
    float _204[5];
    _203[0u] = cbMtdParam._m0[29u].z;
    _204[0u] = cbMtdParam._m0[29u].w;
    _203[1u] = cbMtdParam._m0[31u].z;
    _204[1u] = cbMtdParam._m0[31u].w;
    _203[2u] = cbMtdParam._m0[31u].x;
    _204[2u] = cbMtdParam._m0[31u].y;
    _203[3u] = cbMtdParam._m0[30u].z;
    _204[3u] = cbMtdParam._m0[30u].w;
    _203[4u] = cbMtdParam._m0[30u].x;
    _204[4u] = cbMtdParam._m0[30u].y;
    float _641 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    uint _643 = uint(int(isnan(4.0) ? _641 : (isnan(_641) ? 4.0 : min(_641, 4.0))));
    float _650 = ((_204[_643] - cbMtdParam._m0[22u].z) * _345) + cbMtdParam._m0[22u].z;
    float _653 = ((cbMtdParam._m0[22u].w - _650) * _435) + _650;
    float _656 = ((cbMtdParam._m0[25u].x - _653) * _334) + _653;
    float _659 = ((cbMtdParam._m0[26u].x - _656) * _309) + _656;
    float _661 = _659 - (_659 * _551);
    vec4 _678 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w, _380));
    vec4 _696 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _698 = _696.x;
    float _699 = _696.y;
    float _704 = cbMtdParam._m0[22u].x + _696.z;
    float _707 = (((_678.z + _203[_643]) - _704) * _345) + _704;
    vec4 _720 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _731 = (((_720.z - _707) + cbMtdParam._m0[29u].x) * _435) + _707;
    float _736 = ((((_294 * 2.0) * _731) - _731) * cbMtdParam._m0[24u].w) + _731;
    vec4 _748 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _759 = (((cbMtdParam._m0[23u].z + _748.z) - _736) * _334) + _736;
    vec4 _772 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _783 = (((_772.z - _759) + cbMtdParam._m0[26u].y) * _309) + _759;
    vec4 _798 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _812 = ((cbMtdParam._m0[27u].y * _551) * ((_798.z * cbMtdParam._m0[27u].x) - _783)) + _783;
    float _824 = ((_678.x - _698) * _345) + _698;
    float _825 = ((_678.y - _699) * _345) + _699;
    float _830 = ((_720.x - _824) * _435) + _824;
    float _831 = ((_720.y - _825) * _435) + _825;
    float _836 = ((_748.x - _830) * _334) + _830;
    float _837 = ((_748.y - _831) * _334) + _831;
    float _846 = ((((_772.x - _836) * _309) + _836) * 2.0) + (-1.0);
    float _847 = ((((_772.y - _837) * _309) + _837) * 2.0) + (-1.0);
    float _848 = dot(vec2(_846, _847), vec2(_846, _847));
    float _3955 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _853 = sqrt(1.0 - (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))));
    float _863 = ((cbMtdParam._m0[25u].y * ((_290.x * 2.0) + (-1.0))) + _846) + ((((_798.x * 2.0) + (-1.0)) * _551) * cbMtdParam._m0[26u].w);
    float _864 = ((cbMtdParam._m0[25u].y * ((_290.y * 2.0) + (-1.0))) + _847) + (((cbMtdParam._m0[28u].x * TEXCOORD_9) * ((_798.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _867 = fma(_853, _239 * NORMAL.x, fma(_864, _246 * TANGENT.x, (_232 * _224) * _863));
    float _870 = fma(_853, _239 * NORMAL.y, fma(_864, _246 * TANGENT.y, (_232 * _225) * _863));
    float _873 = fma(_853, _239 * NORMAL.z, fma(_864, _246 * TANGENT.z, (_232 * _226) * _863));
    float _877 = inversesqrt(dot(vec3(_867, _870, _873), vec3(_867, _870, _873)));
    float _878 = _877 * _867;
    float _879 = _877 * _870;
    float _880 = _877 * _873;
    float _3966 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _881 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _3977 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _882 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _3988 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _3999 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _4010 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _4021 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _886 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _902 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _942 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _952 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _942);
    float _953 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _942);
    float _954 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _942);
    float _958 = inversesqrt(dot(vec3(_952, _953, _954), vec3(_952, _953, _954)));
    float _959 = _952 * _958;
    float _960 = _953 * _958;
    float _961 = _954 * _958;
    vec4 _966 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _968 = _966.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1138 = sqrt(((_952 * _952) + (_953 * _953)) + (_954 * _954));
        float _1144 = (cbMatDynParam._m0[5u].x * _1138) + cbMatDynParam._m0[5u].y;
        float _4032 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1149 = (cbMatDynParam._m0[5u].z * _1138) + cbMatDynParam._m0[5u].w;
        float _4043 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) - _1145)) + _1145) < ((_968 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _979 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _980 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _998 = fma(_880, cbSceneParam._m0[5u].z, fma(_879, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _878));
    float _1001 = fma(_880, cbSceneParam._m0[6u].z, fma(_879, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _878));
    float _1004 = fma(_880, cbSceneParam._m0[7u].z, fma(_879, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _878));
    uint _1017 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1018 = _1017 + 9u;
    uint _1019 = _1018 + uint(cbMatDynParam._m0[0u].w);
    float _1025 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) * cbInstanceData._m0[_1019].x;
    float _1026 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) * cbInstanceData._m0[_1019].y;
    float _1027 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) * cbInstanceData._m0[_1019].z;
    float _4054 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _1028 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _4065 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _1029 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _4076 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _1030 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _1031 = 1.0 - _886;
    float _1032 = _1028 * _1031;
    float _1033 = _1029 * _1031;
    float _1034 = _1030 * _1031;
    float _1039 = (_1028 + (-0.039999999105930328369140625)) * _886;
    float _1040 = (_1029 + (-0.039999999105930328369140625)) * _886;
    float _1041 = (_1030 + (-0.039999999105930328369140625)) * _886;
    float _1042 = _1039 + 0.039999999105930328369140625;
    float _1044 = _1040 + 0.039999999105930328369140625;
    float _1045 = _1041 + 0.039999999105930328369140625;
    vec4 _1054 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _979, cbSceneParam._m0[86u].y * _980));
    float _1057 = _1054.x * TEXCOORD_5.w;
    float _1058 = dot(vec3(_878, _879, _880), vec3(_959, _960, _961));
    float _1061 = _1058 * 2.0;
    float _1065 = (_1061 * _878) - _959;
    float _1066 = (_1061 * _879) - _960;
    float _1067 = (_1061 * _880) - _961;
    float _1071 = abs(dot(vec3(_959, _960, _961), vec3(_878, _879, _880)));
    float _4087 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _1073 = sqrt(_882);
    float _1084 = exp2((_1073 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1073 * 3.0));
    float _1090 = (1.0 - _1084) * ((_1073 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1091 = _1084 * _1073;
    float _1119 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1123 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1127 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1456;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1181 = fma(_1127, cbModelParam._m0[26u].z, fma(_1123, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1119));
        float _1185 = fma(_1127, cbModelParam._m0[27u].z, fma(_1123, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1119));
        float _1189 = fma(_1127, cbModelParam._m0[28u].z, fma(_1123, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1119));
        float _1214 = _1119 + _878;
        float _1215 = _1123 + _879;
        float _1216 = _1127 + _880;
        float _1226 = fma(_1216, cbModelParam._m0[26u].z, fma(_1215, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1214)) - _1181;
        float _1227 = fma(_1216, cbModelParam._m0[27u].z, fma(_1215, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1214)) - _1185;
        float _1228 = fma(_1216, cbModelParam._m0[28u].z, fma(_1215, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1214)) - _1189;
        float _1232 = inversesqrt(dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228)));
        float _1245 = ((_1232 * _1226) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1181 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1246 = ((_1232 * _1227) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1185 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1247 = ((_1232 * _1228) / cbModelParam._m0[34u].z) + ((((((_1189 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        float _1284 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1250.x + (-0.5));
        float _1286 = _1284 * (_1250.y + (-0.5));
        float _1287 = _1284 * (_1250.z + (-0.5));
        float _1294 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1257.x + (-0.5));
        float _1296 = _1294 * (_1257.y + (-0.5));
        float _1297 = _1294 * (_1257.z + (-0.5));
        float _1304 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1264.x + (-0.5));
        float _1306 = _1304 * (_1264.y + (-0.5));
        float _1307 = _1304 * (_1264.z + (-0.5));
        float _1314 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1271.x + (-0.5));
        float _1316 = _1314 * (_1271.y + (-0.5));
        float _1317 = _1314 * (_1271.z + (-0.5));
        float _1318 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1319 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1320 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1321 = _1285 * 0.5;
        float _1322 = _1295 * 0.5;
        float _1323 = _1305 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1338 = (dot(vec3(_878, _879, _880), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _4113 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1348 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1318 + 9.9999997473787516355514526367188e-06);
        float _4124 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1350 = _1349 * 2.0;
        float _1354 = (1.0 - _1349) / (_1349 + 1.0);
        float _4135 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1364 = ((((1.0 - _1355) * (_1350 + 2.0)) * exp2(log2(isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_1350 + 1.0))) + _1355) * _1318;
        float _1365 = _1286 * 0.5;
        float _1366 = _1296 * 0.5;
        float _1367 = _1306 * 0.5;
        float _1368 = dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367));
        float _1373 = (_1368 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1368);
        float _1381 = (dot(vec3(_878, _879, _880), vec3(_1373 * _1365, _1373 * _1366, _1373 * _1367)) + 1.0) * 0.5;
        float _4146 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1390 = sqrt(((_1366 * _1366) + (_1365 * _1365)) + (_1367 * _1367)) / (_1319 + 9.9999997473787516355514526367188e-06);
        float _4157 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1392 = _1391 * 2.0;
        float _1396 = (1.0 - _1391) / (_1391 + 1.0);
        float _4168 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1406 = ((((1.0 - _1397) * (_1392 + 2.0)) * exp2(log2(isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_1392 + 1.0))) + _1397) * _1319;
        float _1407 = _1287 * 0.5;
        float _1408 = _1297 * 0.5;
        float _1409 = _1307 * 0.5;
        float _1410 = dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409));
        float _1415 = (_1410 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1410);
        float _1423 = (dot(vec3(_878, _879, _880), vec3(_1415 * _1407, _1415 * _1408, _1415 * _1409)) + 1.0) * 0.5;
        float _4179 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1432 = sqrt(((_1408 * _1408) + (_1407 * _1407)) + (_1409 * _1409)) / (_1320 + 9.9999997473787516355514526367188e-06);
        float _4190 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1434 = _1433 * 2.0;
        float _1438 = (1.0 - _1433) / (_1433 + 1.0);
        float _4201 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1448 = ((((1.0 - _1439) * (_1434 + 2.0)) * exp2(log2(isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_1434 + 1.0))) + _1439) * _1320;
        _1456 = _1287;
        _1458 = _1286;
        _1459 = _1285;
        _1460 = _1297;
        _1461 = _1296;
        _1462 = _1295;
        _1463 = _1307;
        _1464 = _1306;
        _1465 = _1305;
        _1466 = _1320;
        _1467 = _1319;
        _1468 = _1318;
        _1469 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)));
        _1470 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)));
        _1471 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)));
    }
    else
    {
        _1456 = _1457;
        _1458 = _1457;
        _1459 = _1457;
        _1460 = _1457;
        _1461 = _1457;
        _1462 = _1457;
        _1463 = _1457;
        _1464 = _1457;
        _1465 = _1457;
        _1466 = _1457;
        _1467 = _1457;
        _1468 = _1457;
        _1469 = 0.0;
        _1470 = 0.0;
        _1471 = 0.0;
    }
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1497 = fma(_1127, cbModelParam._m0[30u].z, fma(_1123, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1119));
        float _1501 = fma(_1127, cbModelParam._m0[31u].z, fma(_1123, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1119));
        float _1505 = fma(_1127, cbModelParam._m0[32u].z, fma(_1123, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1119));
        float _1528 = _1119 + _878;
        float _1529 = _1123 + _879;
        float _1530 = _1127 + _880;
        float _1540 = fma(_1530, cbModelParam._m0[30u].z, fma(_1529, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1528)) - _1497;
        float _1541 = fma(_1530, cbModelParam._m0[31u].z, fma(_1529, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1528)) - _1501;
        float _1542 = fma(_1530, cbModelParam._m0[32u].z, fma(_1529, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1528)) - _1505;
        float _1546 = inversesqrt(dot(vec3(_1540, _1541, _1542), vec3(_1540, _1541, _1542)));
        float _1559 = ((_1546 * _1540) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1497 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1560 = ((_1546 * _1541) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1501 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1561 = ((_1546 * _1542) / cbModelParam._m0[35u].z) + ((((((_1505 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1563 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1559, _1560, _1561), 0.0);
        vec4 _1570 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1559, _1560, _1561), 0.0);
        vec4 _1577 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1559, _1560, _1561), 0.0);
        vec4 _1584 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1559, _1560, _1561), 0.0);
        float _1596 = exp2((_1563.w + (-0.5)) * 20.0) * 2.0;
        float _1597 = _1596 * (_1563.x + (-0.5));
        float _1598 = _1596 * (_1563.y + (-0.5));
        float _1599 = _1596 * (_1563.z + (-0.5));
        float _1606 = exp2((_1570.w + (-0.5)) * 20.0) * 2.0;
        float _1607 = _1606 * (_1570.x + (-0.5));
        float _1608 = _1606 * (_1570.y + (-0.5));
        float _1609 = _1606 * (_1570.z + (-0.5));
        float _1616 = exp2((_1577.w + (-0.5)) * 20.0) * 2.0;
        float _1617 = _1616 * (_1577.x + (-0.5));
        float _1618 = _1616 * (_1577.y + (-0.5));
        float _1619 = _1616 * (_1577.z + (-0.5));
        float _1626 = exp2((_1584.w + (-0.5)) * 20.0) * 2.0;
        float _1627 = _1626 * (_1584.x + (-0.5));
        float _1628 = _1626 * (_1584.y + (-0.5));
        float _1629 = _1626 * (_1584.z + (-0.5));
        float _1630 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1631 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1632 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1633 = _1597 * 0.5;
        float _1634 = _1607 * 0.5;
        float _1635 = _1617 * 0.5;
        float _1636 = dot(vec3(_1633, _1634, _1635), vec3(_1633, _1634, _1635));
        float _1641 = (_1636 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1636);
        float _1649 = (dot(vec3(_878, _879, _880), vec3(_1641 * _1633, _1641 * _1634, _1641 * _1635)) + 1.0) * 0.5;
        float _4242 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1658 = sqrt(((_1634 * _1634) + (_1633 * _1633)) + (_1635 * _1635)) / (_1630 + 9.9999997473787516355514526367188e-06);
        float _4253 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1660 = _1659 * 2.0;
        float _1664 = (1.0 - _1659) / (_1659 + 1.0);
        float _4264 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1674 = ((((1.0 - _1665) * (_1660 + 2.0)) * exp2(log2(isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_1660 + 1.0))) + _1665) * _1630;
        float _1675 = _1598 * 0.5;
        float _1676 = _1608 * 0.5;
        float _1677 = _1618 * 0.5;
        float _1678 = dot(vec3(_1675, _1676, _1677), vec3(_1675, _1676, _1677));
        float _1683 = (_1678 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1678);
        float _1691 = (dot(vec3(_878, _879, _880), vec3(_1683 * _1675, _1683 * _1676, _1683 * _1677)) + 1.0) * 0.5;
        float _4275 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1700 = sqrt(((_1676 * _1676) + (_1675 * _1675)) + (_1677 * _1677)) / (_1631 + 9.9999997473787516355514526367188e-06);
        float _4286 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1702 = _1701 * 2.0;
        float _1706 = (1.0 - _1701) / (_1701 + 1.0);
        float _4297 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1707 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1716 = ((((1.0 - _1707) * (_1702 + 2.0)) * exp2(log2(isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_1702 + 1.0))) + _1707) * _1631;
        float _1717 = _1599 * 0.5;
        float _1718 = _1609 * 0.5;
        float _1719 = _1619 * 0.5;
        float _1720 = dot(vec3(_1717, _1718, _1719), vec3(_1717, _1718, _1719));
        float _1725 = (_1720 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1720);
        float _1733 = (dot(vec3(_878, _879, _880), vec3(_1725 * _1717, _1725 * _1718, _1725 * _1719)) + 1.0) * 0.5;
        float _4308 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1742 = sqrt(((_1718 * _1718) + (_1717 * _1717)) + (_1719 * _1719)) / (_1632 + 9.9999997473787516355514526367188e-06);
        float _4319 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1743 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1744 = _1743 * 2.0;
        float _1748 = (1.0 - _1743) / (_1743 + 1.0);
        float _4330 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1749 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1758 = ((((1.0 - _1749) * (_1744 + 2.0)) * exp2(log2(isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_1744 + 1.0))) + _1749) * _1632;
        _1766 = _1599;
        _1767 = _1598;
        _1768 = _1597;
        _1769 = _1609;
        _1770 = _1608;
        _1771 = _1607;
        _1772 = _1619;
        _1773 = _1618;
        _1774 = _1617;
        _1775 = _1632;
        _1776 = _1631;
        _1777 = _1630;
        _1778 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)));
        _1779 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)));
        _1780 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)));
    }
    else
    {
        _1766 = _1457;
        _1767 = _1457;
        _1768 = _1457;
        _1769 = _1457;
        _1770 = _1457;
        _1771 = _1457;
        _1772 = _1457;
        _1773 = _1457;
        _1774 = _1457;
        _1775 = _1457;
        _1776 = _1457;
        _1777 = _1457;
        _1778 = 0.0;
        _1779 = 0.0;
        _1780 = 0.0;
    }
    float _1790 = (cbModelParam._m0[1u].x * (_1778 - _1469)) + _1469;
    float _1791 = (cbModelParam._m0[1u].x * (_1779 - _1470)) + _1470;
    float _1792 = (cbModelParam._m0[1u].x * (_1780 - _1471)) + _1471;
    float _1813 = fma(_1792, cbSceneParam._m0[89u].z, fma(_1791, cbSceneParam._m0[89u].y, _1790 * cbSceneParam._m0[89u].x));
    float _1816 = fma(_1792, cbSceneParam._m0[90u].z, fma(_1791, cbSceneParam._m0[90u].y, _1790 * cbSceneParam._m0[90u].x));
    float _1819 = fma(_1792, cbSceneParam._m0[91u].z, fma(_1791, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1790));
    float _1834 = _1065 * 0.5;
    float _1835 = _1066 * 0.5;
    float _1836 = _1067 * 0.5;
    float _1837 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1768, _1771, _1774, _1777));
    float _1840 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1767, _1770, _1773, _1776));
    float _1843 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1766, _1769, _1772, _1775));
    float _1877;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1850 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1456, _1460, _1463, _1466));
        float _1854 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1458, _1461, _1464, _1467));
        float _1858 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1459, _1462, _1465, _1468));
        float _1865 = dot(vec4(cbModelParam._m0[39u]), vec4(_1834, _1835, _1836, 1.0));
        _1877 = dot(vec3(isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0)), isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0)), isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1865) ? 0.0 : (isnan(0.0) ? _1865 : max(0.0, _1865))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1877 = 1.0;
    }
    float _1888;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1879 = dot(vec4(cbModelParam._m0[40u]), vec4(_1834, _1835, _1836, 1.0));
        _1888 = dot(vec3(isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0)), isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0)), isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1879) ? 0.0 : (isnan(0.0) ? _1879 : max(0.0, _1879))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1888 = 1.0;
    }
    float _1892 = (_1888 * cbModelParam._m0[1u].x) + (_1877 * (1.0 - cbModelParam._m0[1u].x));
    float _1902 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _882);
    float _1903 = isnan(_1902) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1902 : min(cbModelParam._m0[25u].z, _1902));
    float _1983;
    float _1985;
    float _1987;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1950 = fma(_1127, cbModelParam._m0[13u].z, fma(_1123, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1119)) + cbModelParam._m0[13u].w;
        float _1954 = fma(_1127, cbModelParam._m0[14u].z, fma(_1123, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1119)) + cbModelParam._m0[14u].w;
        float _1958 = fma(_1127, cbModelParam._m0[15u].z, fma(_1123, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1119)) + cbModelParam._m0[15u].w;
        float _1961 = fma(_1067, cbModelParam._m0[13u].z, fma(_1066, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1065));
        float _1964 = fma(_1067, cbModelParam._m0[14u].z, fma(_1066, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1065));
        float _1967 = fma(_1067, cbModelParam._m0[15u].z, fma(_1066, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1065));
        float _1995;
        if (_1961 > 0.0)
        {
            _1995 = abs((1.0 - _1950) / _1961);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1961 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1950 + 1.0) / _1961);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1995 = frontier_phi_17_15_ladder;
        }
        float _2218;
        if (_1964 > 0.0)
        {
            _2218 = abs((1.0 - _1954) / _1964);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1954 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2218 = frontier_phi_26_22_ladder;
        }
        float _2475;
        if (_1967 > 0.0)
        {
            _2475 = abs((1.0 - _1958) / _1967);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1958 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2475 = frontier_phi_38_33_ladder;
        }
        float _2477 = isnan(_2218) ? _1995 : (isnan(_1995) ? _2218 : min(_1995, _2218));
        float _2478 = isnan(_2475) ? _2477 : (isnan(_2477) ? _2475 : min(_2477, _2475));
        float _2482 = (_2478 * _1961) + _1950;
        float _2483 = (_2478 * _1964) + _1954;
        float _2484 = (_2478 * _1967) + _1958;
        float _2485 = _2478 * 9.9999997473787516355514526367188e-05;
        float _2487 = (-1.0) - _2485;
        float _2489 = _2485 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2484 > _2489) || ((_2484 < _2487) || ((_2483 > _2489) || ((_2483 < _2487) || ((_2482 < _2487) || (_2482 > _2489))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2612 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2484, cbModelParam._m0[9u].z, fma(_2483, cbModelParam._m0[9u].y, _2482 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2484, cbModelParam._m0[10u].z, fma(_2483, cbModelParam._m0[10u].y, _2482 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2484, cbModelParam._m0[11u].z, fma(_2483, cbModelParam._m0[11u].y, _2482 * cbModelParam._m0[11u].x))), _1903);
            frontier_phi_16_38_ladder = _2612.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2612.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2612.x * cbModelParam._m0[1u].y;
        }
        _1983 = frontier_phi_16_38_ladder_2;
        _1985 = frontier_phi_16_38_ladder_1;
        _1987 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1971 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1065, _1066, _1067), _1903);
        _1983 = _1971.x * cbModelParam._m0[1u].y;
        _1985 = _1971.y * cbModelParam._m0[1u].y;
        _1987 = _1971.z * cbModelParam._m0[1u].y;
    }
    float _1991 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _882);
    float _1992 = isnan(_1991) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1991 : min(cbModelParam._m0[25u].w, _1991));
    float _2081;
    float _2083;
    float _2085;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2045 = fma(_1127, cbModelParam._m0[21u].z, fma(_1123, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1119)) + cbModelParam._m0[21u].w;
        float _2049 = fma(_1127, cbModelParam._m0[22u].z, fma(_1123, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1119)) + cbModelParam._m0[22u].w;
        float _2053 = fma(_1127, cbModelParam._m0[23u].z, fma(_1123, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1119)) + cbModelParam._m0[23u].w;
        float _2056 = fma(_1067, cbModelParam._m0[21u].z, fma(_1066, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1065));
        float _2059 = fma(_1067, cbModelParam._m0[22u].z, fma(_1066, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1065));
        float _2062 = fma(_1067, cbModelParam._m0[23u].z, fma(_1066, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1065));
        float _2223;
        if (_2056 > 0.0)
        {
            _2223 = abs((1.0 - _2045) / _2056);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2056 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2045 + 1.0) / _2056);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2223 = frontier_phi_28_24_ladder;
        }
        float _2502;
        if (_2059 > 0.0)
        {
            _2502 = abs((1.0 - _2049) / _2059);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2059 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2049 + 1.0) / _2059);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2502 = frontier_phi_40_35_ladder;
        }
        float _2715;
        if (_2062 > 0.0)
        {
            _2715 = abs((1.0 - _2053) / _2062);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2062 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2053 + 1.0) / _2062);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2715 = frontier_phi_49_46_ladder;
        }
        float _2717 = isnan(_2502) ? _2223 : (isnan(_2223) ? _2502 : min(_2223, _2502));
        float _2718 = isnan(_2715) ? _2717 : (isnan(_2717) ? _2715 : min(_2717, _2715));
        float _2722 = (_2718 * _2056) + _2045;
        float _2723 = (_2718 * _2059) + _2049;
        float _2724 = (_2718 * _2062) + _2053;
        float _2725 = _2718 * 9.9999997473787516355514526367188e-05;
        float _2726 = (-1.0) - _2725;
        float _2728 = _2725 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2724 > _2728) || ((_2724 < _2726) || ((_2723 > _2728) || ((_2723 < _2726) || ((_2722 < _2726) || (_2722 > _2728))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2925 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2724, cbModelParam._m0[17u].z, fma(_2723, cbModelParam._m0[17u].y, _2722 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2724, cbModelParam._m0[18u].z, fma(_2723, cbModelParam._m0[18u].y, _2722 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2724, cbModelParam._m0[19u].z, fma(_2723, cbModelParam._m0[19u].y, _2722 * cbModelParam._m0[19u].x))), _1992);
            frontier_phi_25_49_ladder = _2925.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2925.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2925.x * cbModelParam._m0[1u].z;
        }
        _2081 = frontier_phi_25_49_ladder_2;
        _2083 = frontier_phi_25_49_ladder_1;
        _2085 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2065 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1065, _1066, _1067), _1992);
        _2081 = _2065.x * cbModelParam._m0[1u].z;
        _2083 = _2065.y * cbModelParam._m0[1u].z;
        _2085 = _2065.z * cbModelParam._m0[1u].z;
    }
    float _2098 = (((_1090 * _1042) + _1091) * _1057) * ((cbModelParam._m0[1u].w * (_2081 - _1983)) + _1983);
    float _2100 = (((_1090 * _1044) + _1091) * _1057) * ((cbModelParam._m0[1u].w * (_2083 - _1985)) + _1985);
    float _2102 = (((_1090 * _1045) + _1091) * _1057) * ((cbModelParam._m0[1u].w * (_2085 - _1987)) + _1987);
    float _2105 = fma(_2102, cbSceneParam._m0[89u].z, fma(_2100, cbSceneParam._m0[89u].y, _2098 * cbSceneParam._m0[89u].x));
    float _2108 = fma(_2102, cbSceneParam._m0[90u].z, fma(_2100, cbSceneParam._m0[90u].y, _2098 * cbSceneParam._m0[90u].x));
    float _2111 = fma(_2102, cbSceneParam._m0[91u].z, fma(_2100, cbSceneParam._m0[91u].y, _2098 * cbSceneParam._m0[91u].x));
    vec4 _2119 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_979, _980));
    float _2121 = _2119.w;
    float _2133 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2121);
    float _2134 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2121);
    float _2135 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2121);
    uvec4 _2139 = floatBitsToUint(cbInstanceData._m0[_1017 + 5u]);
    uint _2141 = _2139.x * 14u;
    uint _2142 = _2141 + 13u;
    float _2149 = _1057 + (-1.0);
    float _2154 = (cbLight._m0[_2142].x * _2149) + 1.0;
    float _2155 = (cbLight._m0[_2142].y * _2149) + 1.0;
    float _2156 = (cbLight._m0[_2142].z * _2149) + 1.0;
    float _2157 = (cbLight._m0[_2142].w * _2149) + 1.0;
    uint _2158 = _2141 + 5u;
    float _2164 = isnan(1.0) ? _2155 : (isnan(_2155) ? 1.0 : min(_2155, 1.0));
    uint _2168 = _2141 + 4u;
    float _2177 = isnan(1.0) ? _2154 : (isnan(_2154) ? 1.0 : min(_2154, 1.0));
    uint _2181 = _2141 | 1u;
    float _2192 = dot(vec3(cbLight._m0[_2141].xyz), vec3(_878, _879, _880));
    float _2195 = dot(vec3(cbLight._m0[_2181].xyz), vec3(_878, _879, _880));
    float _4466 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _4477 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2200 = (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * 0.3183098733425140380859375;
    float _2202 = (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * 0.3183098733425140380859375;
    float _2209 = ((cbLight._m0[_2158].x * _2164) * _2202) + (((cbLight._m0[_2168].x * _2133) * _2177) * _2200);
    float _2210 = ((_2164 * cbLight._m0[_2158].y) * _2202) + (((cbLight._m0[_2168].y * _2134) * _2177) * _2200);
    float _2211 = ((_2164 * cbLight._m0[_2158].z) * _2202) + (((cbLight._m0[_2168].z * _2135) * _2177) * _2200);
    uvec4 _2215 = floatBitsToUint(cbLight._m0[_2141 + 12u]);
    bool _2217 = _2215.x == 0u;
    float _2228;
    float _2230;
    float _2232;
    if (_2217)
    {
        _2228 = _2209;
        _2230 = _2210;
        _2232 = _2211;
    }
    else
    {
        uint _2236 = _2141 + 6u;
        float _2252 = (dot(vec3(cbLight._m0[_2141 + 2u].xyz), vec3(_878, _879, _880)) * 0.5) + 0.5;
        float _2253 = _2252 * _2252;
        float _4488 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2254 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _2255 = isnan(1.0) ? _2156 : (isnan(_2156) ? 1.0 : min(_2156, 1.0));
        _2228 = (((cbLight._m0[_2236].x * 0.3183098733425140380859375) * _2254) * _2255) + _2209;
        _2230 = (((cbLight._m0[_2236].y * 0.3183098733425140380859375) * _2254) * _2255) + _2210;
        _2232 = (((cbLight._m0[_2236].z * 0.3183098733425140380859375) * _2254) * _2255) + _2211;
    }
    bool _2235 = _2215.y == 0u;
    float _2273;
    float _2275;
    float _2277;
    if (_2235)
    {
        _2273 = _2228;
        _2275 = _2230;
        _2277 = _2232;
    }
    else
    {
        uint _2446 = _2141 + 7u;
        float _2462 = (dot(vec3(cbLight._m0[_2141 + 3u].xyz), vec3(_878, _879, _880)) * 0.5) + 0.5;
        float _2463 = _2462 * _2462;
        float _4504 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2464 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _2465 = isnan(1.0) ? _2157 : (isnan(_2157) ? 1.0 : min(_2157, 1.0));
        _2273 = (((cbLight._m0[_2446].x * 0.3183098733425140380859375) * _2464) * _2465) + _2228;
        _2275 = (((cbLight._m0[_2446].y * 0.3183098733425140380859375) * _2464) * _2465) + _2230;
        _2277 = (((cbLight._m0[_2446].z * 0.3183098733425140380859375) * _2464) * _2465) + _2232;
    }
    uint _2280 = _2141 + 8u;
    float _2293 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2141].w)) * _882) * 0.949999988079071044921875);
    float _2294 = _2293 * _2293;
    float _2295 = cbLight._m0[_2141].x + _959;
    float _2296 = cbLight._m0[_2141].y + _960;
    float _2297 = cbLight._m0[_2141].z + _961;
    float _2301 = inversesqrt(dot(vec3(_2295, _2296, _2297), vec3(_2295, _2296, _2297)));
    float _2302 = _2301 * _2295;
    float _2303 = _2301 * _2296;
    float _2304 = _2301 * _2297;
    float _2305 = dot(vec3(_878, _879, _880), vec3(cbLight._m0[_2141].xyz));
    float _4520 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2308 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
    float _4531 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _2309 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
    float _2310 = dot(vec3(_878, _879, _880), vec3(_2302, _2303, _2304));
    float _4542 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2313 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
    float _2314 = dot(vec3(cbLight._m0[_2141].xyz), vec3(_2302, _2303, _2304));
    float _4553 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2318 = _2294 * _2294;
    float _2322 = ((_2313 * _2313) * (_2318 + (-1.0))) + 1.0;
    float _2330 = exp2(log2(1.0 - (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0)))) * 5.0);
    float _2331 = 0.959999978542327880859375 - _1039;
    float _2333 = 0.959999978542327880859375 - _1040;
    float _2334 = 0.959999978542327880859375 - _1041;
    float _2341 = 1.0 - _2294;
    float _2352 = (0.5 / (((_2309 * ((_2308 * _2341) + _2294)) + 9.9999999392252902907785028219223e-09) + (((_2309 * _2341) + _2294) * _2308))) * _2308;
    float _4564 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2354 = (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_2318 / ((_2322 * _2322) * 3.141590118408203125));
    uint _2368 = _2141 + 9u;
    float _2379 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2181].w)) * _882) * 0.949999988079071044921875);
    float _2380 = _2379 * _2379;
    float _2381 = cbLight._m0[_2181].x + _959;
    float _2382 = cbLight._m0[_2181].y + _960;
    float _2383 = cbLight._m0[_2181].z + _961;
    float _2387 = inversesqrt(dot(vec3(_2381, _2382, _2383), vec3(_2381, _2382, _2383)));
    float _2388 = _2387 * _2381;
    float _2389 = _2387 * _2382;
    float _2390 = _2387 * _2383;
    float _2391 = dot(vec3(_878, _879, _880), vec3(cbLight._m0[_2181].xyz));
    float _4575 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2394 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
    float _2395 = dot(vec3(_878, _879, _880), vec3(_2388, _2389, _2390));
    float _4586 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
    float _2398 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
    float _2399 = dot(vec3(cbLight._m0[_2181].xyz), vec3(_2388, _2389, _2390));
    float _4597 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
    float _2403 = _2380 * _2380;
    float _2407 = ((_2398 * _2398) * (_2403 + (-1.0))) + 1.0;
    float _2414 = exp2(log2(1.0 - (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0)))) * 5.0);
    float _2421 = 1.0 - _2380;
    float _2431 = (0.5 / (((_2309 * ((_2394 * _2421) + _2380)) + 9.9999999392252902907785028219223e-09) + (((_2309 * _2421) + _2380) * _2394))) * _2394;
    float _4608 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
    float _2433 = (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * (_2403 / ((_2407 * _2407) * 3.141590118408203125));
    float _2443 = (((((_2414 * _2331) + _1042) * cbLight._m0[_2368].x) * _2433) * _2164) + ((((cbLight._m0[_2280].x * _2133) * ((_2330 * _2331) + _1042)) * _2354) * _2177);
    float _2444 = (((((_2414 * _2333) + _1044) * cbLight._m0[_2368].y) * _2433) * _2164) + ((((cbLight._m0[_2280].y * _2134) * ((_2330 * _2333) + _1044)) * _2354) * _2177);
    float _2445 = (((((_2414 * _2334) + _1045) * cbLight._m0[_2368].z) * _2433) * _2164) + ((((cbLight._m0[_2280].z * _2135) * ((_2330 * _2334) + _1045)) * _2354) * _2177);
    float _2507;
    float _2509;
    float _2511;
    if (_2217)
    {
        _2507 = _2443;
        _2509 = _2444;
        _2511 = _2445;
    }
    else
    {
        uint _2513 = _2141 + 2u;
        uint _2517 = _2141 + 10u;
        float _2531 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2513].w)) * _882) * 0.949999988079071044921875);
        float _2532 = _2531 * _2531;
        float _2533 = cbLight._m0[_2513].x + _959;
        float _2534 = cbLight._m0[_2513].y + _960;
        float _2535 = cbLight._m0[_2513].z + _961;
        float _2539 = inversesqrt(dot(vec3(_2533, _2534, _2535), vec3(_2533, _2534, _2535)));
        float _2540 = _2539 * _2533;
        float _2541 = _2539 * _2534;
        float _2542 = _2539 * _2535;
        float _2543 = dot(vec3(_878, _879, _880), vec3(cbLight._m0[_2513].xyz));
        float _4619 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2546 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
        float _2547 = dot(vec3(_878, _879, _880), vec3(_2540, _2541, _2542));
        float _4630 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2550 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
        float _2551 = dot(vec3(cbLight._m0[_2513].xyz), vec3(_2540, _2541, _2542));
        float _4641 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2555 = _2532 * _2532;
        float _2559 = ((_2550 * _2550) * (_2555 + (-1.0))) + 1.0;
        float _2566 = exp2(log2(1.0 - (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0)))) * 5.0);
        float _2573 = 1.0 - _2532;
        float _2583 = (0.5 / (((_2309 * ((_2546 * _2573) + _2532)) + 9.9999999392252902907785028219223e-09) + (((_2309 * _2573) + _2532) * _2546))) * _2546;
        float _4652 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2585 = (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * (_2555 / ((_2559 * _2559) * 3.141590118408203125));
        float _2586 = isnan(1.0) ? _2156 : (isnan(_2156) ? 1.0 : min(_2156, 1.0));
        _2507 = (((((_2566 * _2331) + _1042) * cbLight._m0[_2517].x) * _2585) * _2586) + _2443;
        _2509 = (((((_2566 * _2333) + _1044) * cbLight._m0[_2517].y) * _2585) * _2586) + _2444;
        _2511 = (((((_2566 * _2334) + _1045) * cbLight._m0[_2517].z) * _2585) * _2586) + _2445;
    }
    float _2621;
    float _2623;
    float _2625;
    if (_2235)
    {
        _2621 = _2507;
        _2623 = _2509;
        _2625 = _2511;
    }
    else
    {
        uint _2632 = _2141 + 3u;
        uint _2636 = _2141 + 11u;
        float _2650 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2632].w)) * _882) * 0.949999988079071044921875);
        float _2651 = _2650 * _2650;
        float _2652 = cbLight._m0[_2632].x + _959;
        float _2653 = cbLight._m0[_2632].y + _960;
        float _2654 = cbLight._m0[_2632].z + _961;
        float _2658 = inversesqrt(dot(vec3(_2652, _2653, _2654), vec3(_2652, _2653, _2654)));
        float _2659 = _2658 * _2652;
        float _2660 = _2658 * _2653;
        float _2661 = _2658 * _2654;
        float _2662 = dot(vec3(_878, _879, _880), vec3(cbLight._m0[_2632].xyz));
        float _4668 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        float _2665 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
        float _2666 = dot(vec3(_878, _879, _880), vec3(_2659, _2660, _2661));
        float _4679 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        float _2669 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
        float _2670 = dot(vec3(cbLight._m0[_2632].xyz), vec3(_2659, _2660, _2661));
        float _4690 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2674 = _2651 * _2651;
        float _2678 = ((_2669 * _2669) * (_2674 + (-1.0))) + 1.0;
        float _2685 = exp2(log2(1.0 - (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0)))) * 5.0);
        float _2692 = 1.0 - _2651;
        float _2702 = (0.5 / (((_2309 * ((_2665 * _2692) + _2651)) + 9.9999999392252902907785028219223e-09) + (((_2309 * _2692) + _2651) * _2665))) * _2665;
        float _4701 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
        float _2704 = (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * (_2674 / ((_2678 * _2678) * 3.141590118408203125));
        float _2705 = isnan(1.0) ? _2157 : (isnan(_2157) ? 1.0 : min(_2157, 1.0));
        _2621 = (((((_2685 * _2331) + _1042) * cbLight._m0[_2636].x) * _2704) * _2705) + _2507;
        _2623 = (((((_2685 * _2333) + _1044) * cbLight._m0[_2636].y) * _2704) * _2705) + _2509;
        _2625 = (((((_2685 * _2334) + _1045) * cbLight._m0[_2636].z) * _2704) * _2705) + _2511;
    }
    float _2840;
    float _2842;
    float _2844;
    float _2846;
    float _2848;
    float _2850;
    if (_2139.y == 0u)
    {
        float _2780 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2781 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2780;
        float _2782 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2780;
        float _2783 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2780;
        uvec4 _2795 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2796 = _2795.x;
        uint _2807 = uint((float(_2795.y) * floor(float(uint(cbSceneParam._m0[85u].y * _980) / _2796))) + floor(float(uint(cbSceneParam._m0[85u].x * _979) / _2796)));
        float _2817 = (log2(_2783 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2818 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        uint _2821 = uint(isnan(14.0) ? _2818 : (isnan(_2818) ? 14.0 : min(_2818, 14.0)));
        uvec4 _2826 = texelFetch(g_lightClusterGridBuffer, int(((_2821 << 2u) + (_2807 << 6u)) >> 2u));
        uint _2827 = _2826.x;
        uint _2828 = _2795.z;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        float _2938;
        float _2940;
        if (((((1u << ((_2828 >> 4u) & 15u)) + 4294967295u) & _2827) == 0u) || ((_2828 & 240u) == 0u))
        {
            _2930 = 0.0;
            _2932 = 0.0;
            _2934 = 0.0;
            _2936 = 0.0;
            _2938 = 0.0;
            _2940 = 0.0;
        }
        else
        {
            float _2931;
            float _2933;
            float _2935;
            float _2937;
            float _2939;
            float _2941;
            float _3083 = 0.0;
            float _3084 = 0.0;
            float _3085 = 0.0;
            float _3086 = 0.0;
            float _3087 = 0.0;
            float _3088 = 0.0;
            uint _3089 = 0u;
            uint _3098;
            bool _3099;
            for (;;)
            {
                _3098 = texelFetch(g_lightClassification, int((((_2821 << 5u) + (_2807 << 9u)) + (_3089 << 2u)) >> 2u)).x;
                _3099 = _3098 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3099)
                {
                    frontier_phi_66_pred = _3083;
                    frontier_phi_66_pred_1 = _3088;
                    frontier_phi_66_pred_2 = _3087;
                    frontier_phi_66_pred_3 = _3086;
                    frontier_phi_66_pred_4 = _3085;
                    frontier_phi_66_pred_5 = _3084;
                }
                else
                {
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    uint _3234;
                    _3228 = _3083;
                    _3229 = _3084;
                    _3230 = _3085;
                    _3231 = _3086;
                    _3232 = _3087;
                    _3233 = _3088;
                    _3234 = _3098;
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    for (;;)
                    {
                        uint _3238 = uint(findLSB(_3234)) + (_3089 << 5u);
                        uint _3235 = (_3234 + 4294967295u) & _3234;
                        uint _3240 = _3238 * 48u;
                        vec4 _3254 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3240)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 3u)).x));
                        uint _3260 = (_3238 * 48u) + 4u;
                        vec4 _3273 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3260)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 3u)).x));
                        uint _3279 = (_3238 * 48u) + 8u;
                        vec3 _3290 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3279)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 2u)).x));
                        float _3294 = _3254.x - _2781;
                        float _3295 = _3254.y - _2782;
                        float _3296 = _3254.z - _2783;
                        float _3297 = dot(vec3(_3294, _3295, _3296), vec3(_3294, _3295, _3296));
                        float _3300 = inversesqrt(_3297);
                        float _3301 = _3300 * _3294;
                        float _3302 = _3300 * _3295;
                        float _3303 = _3300 * _3296;
                        float _3304 = dot(vec3(_998, _1001, _1004), vec3(_3301, _3302, _3303));
                        float _3309 = 1.0 - (_3297 * _3254.w);
                        float _4727 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                        float _3310 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                        float _3311 = sqrt(_3297) * _3273.w;
                        float _3314 = 1.39999997615814208984375 / (_3311 + 1.39999997615814208984375);
                        float _3315 = _3314 * _3314;
                        float _3318 = ((1.0 - _3315) * _3304) + _3315;
                        float _3321 = _3311 * _3311;
                        float _3325 = ((isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0))) * _3310) / ((_3321 * 0.699999988079071044921875) + 1.0);
                        float _3329 = (-0.0) - _2781;
                        float _3330 = (-0.0) - _2782;
                        float _3331 = (-0.0) - _2783;
                        float _3335 = inversesqrt(dot(vec3(_3329, _3330, _3331), vec3(_3329, _3330, _3331)));
                        float _3336 = _3335 * _3329;
                        float _3337 = _3335 * _3330;
                        float _3338 = _3335 * _3331;
                        float _3346 = exp2(log2(1.0 / ((_3321 * 3.5) + 5.0)) * 0.25);
                        float _3347 = 1.0 - _1073;
                        float _3354 = sqrt(1.0 - ((1.0 - (_3347 * _3347)) * (1.0 - (_3346 * _3346))));
                        float _3355 = _3354 * _3354;
                        float _3356 = _3355 * _3355;
                        float _3357 = _3336 + _3301;
                        float _3358 = _3337 + _3302;
                        float _3359 = _3338 + _3303;
                        float _3363 = inversesqrt(dot(vec3(_3357, _3358, _3359), vec3(_3357, _3358, _3359)));
                        float _3367 = dot(vec3(_998, _1001, _1004), vec3(_3336, _3337, _3338));
                        float _4743 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                        float _3370 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
                        float _3371 = dot(vec3(_998, _1001, _1004), vec3(_3363 * _3357, _3363 * _3358, _3363 * _3359));
                        float _4754 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                        float _3374 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                        float _3378 = ((_3374 * _3374) * (_3356 + (-1.0))) + 1.0;
                        float _3379 = _3314 * _3355;
                        float _3380 = _3379 * _3379;
                        float _3383 = ((1.0 - _3380) * _3304) + _3380;
                        float _4765 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                        float _3384 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
                        float _3385 = 1.0 - _3355;
                        float _3395 = (0.5 / (((_3384 * ((_3370 * _3385) + _3355)) + 9.9999999392252902907785028219223e-09) + (((_3384 * _3385) + _3355) * _3370))) * _3384;
                        float _4776 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                        float _3406 = (((_3356 * 3.1415927410125732421875) * (isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0)))) / ((_3378 * _3378) * ((_3321 * 2.1991131305694580078125) + 3.141590118408203125))) * _3310;
                        _3158 = (_3325 * _3273.x) + _3231;
                        _3159 = (_3325 * _3273.y) + _3232;
                        _3160 = (_3325 * _3273.z) + _3233;
                        _3155 = (_3406 * _3290.x) + _3228;
                        _3156 = (_3406 * _3290.y) + _3229;
                        _3157 = (_3406 * _3290.z) + _3230;
                        if (_3235 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3228 = _3155;
                            _3229 = _3156;
                            _3230 = _3157;
                            _3231 = _3158;
                            _3232 = _3159;
                            _3233 = _3160;
                            _3234 = _3235;
                        }
                    }
                    frontier_phi_66_pred = _3155;
                    frontier_phi_66_pred_1 = _3160;
                    frontier_phi_66_pred_2 = _3159;
                    frontier_phi_66_pred_3 = _3158;
                    frontier_phi_66_pred_4 = _3157;
                    frontier_phi_66_pred_5 = _3156;
                }
                _2931 = frontier_phi_66_pred;
                _2941 = frontier_phi_66_pred_1;
                _2939 = frontier_phi_66_pred_2;
                _2937 = frontier_phi_66_pred_3;
                _2935 = frontier_phi_66_pred_4;
                _2933 = frontier_phi_66_pred_5;
                uint _3090 = _3089 + 1u;
                if (_3090 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3083 = _2931;
                    _3084 = _2933;
                    _3085 = _2935;
                    _3086 = _2937;
                    _3087 = _2939;
                    _3088 = _2941;
                    _3089 = _3090;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2930 = _2931;
            _2932 = _2933;
            _2934 = _2935;
            _2936 = _2937;
            _2938 = _2939;
            _2940 = _2941;
        }
        uvec4 _2944 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2945 = _2944.z;
        uint _2947 = (_2945 >> 8u) & 15u;
        float _3051;
        float _3053;
        float _3055;
        float _3057;
        float _3059;
        float _3061;
        if (((4294967295u << _2947) & _2827) == 0u)
        {
            _3051 = _2930;
            _3053 = _2932;
            _3055 = _2934;
            _3057 = _2936;
            _3059 = _2938;
            _3061 = _2940;
        }
        else
        {
            float _3076 = inversesqrt(dot(vec3(_2781, _2782, _2783), vec3(_2781, _2782, _2783)));
            float _3077 = _3076 * _2781;
            float _3078 = _3076 * _2782;
            float _3079 = _3076 * _2783;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2947 < ((_2945 >> 12u) & 15u))
            {
                float _3052;
                float _3054;
                float _3056;
                float _3058;
                float _3060;
                float _3062;
                float _3211 = _2930;
                float _3212 = _2932;
                float _3213 = _2934;
                float _3214 = _2936;
                float _3215 = _2938;
                float _3216 = _2940;
                uint _3217 = _2947;
                uint _3226;
                bool _3227;
                for (;;)
                {
                    _3226 = texelFetch(g_lightClassification, int((((_2821 << 5u) + (_2807 << 9u)) + (_3217 << 2u)) >> 2u)).x;
                    _3227 = _3226 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3227)
                    {
                        frontier_phi_77_pred = _3216;
                        frontier_phi_77_pred_1 = _3215;
                        frontier_phi_77_pred_2 = _3214;
                        frontier_phi_77_pred_3 = _3213;
                        frontier_phi_77_pred_4 = _3212;
                        frontier_phi_77_pred_5 = _3211;
                    }
                    else
                    {
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3713;
                        float _3714;
                        float _3715;
                        float _3716;
                        float _3717;
                        float _3718;
                        float _3433 = _3211;
                        float _3434 = _3212;
                        float _3435 = _3213;
                        float _3436 = _3214;
                        float _3437 = _3215;
                        float _3438 = _3216;
                        uint _3439 = _3226;
                        uint _3440;
                        vec4 _3465;
                        float _3466;
                        vec4 _3481;
                        vec3 _3493;
                        vec4 _3508;
                        vec4 _3523;
                        float _3569;
                        bool _3570;
                        for (;;)
                        {
                            uint _3450 = ((_3217 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3439));
                            _3440 = (_3439 + 4294967295u) & _3439;
                            uint _3452 = _3450 * 40u;
                            _3465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 3u)).x));
                            _3466 = _3465.w;
                            uint _3468 = (_3450 * 40u) + 4u;
                            _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            uint _3483 = (_3450 * 40u) + 8u;
                            _3493 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x));
                            uint _3495 = (_3450 * 40u) + 16u;
                            _3508 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 3u)).x));
                            uint _3510 = (_3450 * 40u) + 20u;
                            _3523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 3u)).x));
                            uint _3525 = (_3450 * 40u) + 24u;
                            vec4 _3538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 3u)).x));
                            uint _3544 = (_3450 * 40u) + 28u;
                            vec4 _3557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 3u)).x));
                            _3569 = fma(_2783, _3557.z, fma(_2782, _3557.y, _3557.x * _2781)) + _3557.w;
                            _3570 = !((fma(_2783, _3538.z, fma(_2782, _3538.y, _3538.x * _2781)) + _3538.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3570)
                            {
                                float _3597 = _3465.x - _2781;
                                float _3598 = _3465.y - _2782;
                                float _3599 = _3465.z - _2783;
                                float _3600 = dot(vec3(_3597, _3598, _3599), vec3(_3597, _3598, _3599));
                                float _3603 = inversesqrt(_3600);
                                float _3604 = _3603 * _3597;
                                float _3605 = _3603 * _3598;
                                float _3606 = _3603 * _3599;
                                float _3610 = 1.0 - (_3600 / (_3466 * _3466));
                                float _4787 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                                float _3611 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                                float _3615 = sqrt(_3600) * _3481.w;
                                float _3617 = 1.39999997615814208984375 / (_3615 + 1.39999997615814208984375);
                                float _3618 = _3617 * _3617;
                                float _3621 = ((1.0 - _3618) * dot(vec3(_3604, _3605, _3606), vec3(_998, _1001, _1004))) + _3618;
                                float _3624 = _3615 * _3615;
                                float _3628 = (fma(_2783, _3508.z, fma(_2782, _3508.y, _3508.x * _2781)) + _3508.w) / _3569;
                                float _3629 = (fma(_2783, _3523.z, fma(_2782, _3523.y, _3523.x * _2781)) + _3523.w) / _3569;
                                float _3633 = 1.0 - dot(vec2(_3628, _3629), vec2(_3628, _3629));
                                float _4803 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                                float _3634 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                                float _3635 = _3634 * (((isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0))) * _3611) / ((_3624 * 0.699999988079071044921875) + 1.0));
                                float _3647 = exp2(log2(1.0 / ((_3624 * 3.5) + 5.0)) * 0.25);
                                float _3648 = 1.0 - _1073;
                                float _3655 = sqrt(1.0 - ((1.0 - (_3648 * _3648)) * (1.0 - (_3647 * _3647))));
                                float _3656 = _3655 * _3655;
                                float _3657 = _3656 * _3656;
                                float _3658 = _3604 - _3077;
                                float _3659 = _3605 - _3078;
                                float _3660 = _3606 - _3079;
                                float _3664 = inversesqrt(dot(vec3(_3658, _3659, _3660), vec3(_3658, _3659, _3660)));
                                float _3668 = dot(vec3(_998, _1001, _1004), vec3((-0.0) - _3077, (-0.0) - _3078, (-0.0) - _3079));
                                float _4814 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                                float _3671 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                                float _3672 = dot(vec3(_998, _1001, _1004), vec3(_3664 * _3658, _3664 * _3659, _3664 * _3660));
                                float _4825 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                                float _3675 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                                float _3679 = ((_3675 * _3675) * (_3657 + (-1.0))) + 1.0;
                                float _3680 = _3617 * _3656;
                                float _3681 = _3680 * _3680;
                                float _3687 = ((1.0 - _3681) * dot(vec3(_998, _1001, _1004), vec3(_3604, _3605, _3606))) + _3681;
                                float _4836 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0));
                                float _3688 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
                                float _3689 = 1.0 - _3656;
                                float _3699 = (0.5 / (((_3688 * ((_3671 * _3689) + _3656)) + 9.9999999392252902907785028219223e-09) + (((_3688 * _3689) + _3656) * _3671))) * _3688;
                                float _4847 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                                float _3709 = (_3634 * _3611) * (((_3657 * 3.1415927410125732421875) * (isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0)))) / ((_3679 * _3679) * ((_3624 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3635 * _3481.y;
                                frontier_phi_83_pred_1 = _3635 * _3481.x;
                                frontier_phi_83_pred_2 = _3709 * _3493.z;
                                frontier_phi_83_pred_3 = _3709 * _3493.y;
                                frontier_phi_83_pred_4 = _3709 * _3493.x;
                                frontier_phi_83_pred_5 = _3635 * _3481.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3717 = frontier_phi_83_pred;
                            _3716 = frontier_phi_83_pred_1;
                            _3715 = frontier_phi_83_pred_2;
                            _3714 = frontier_phi_83_pred_3;
                            _3713 = frontier_phi_83_pred_4;
                            _3718 = frontier_phi_83_pred_5;
                            _3423 = _3716 + _3436;
                            _3424 = _3717 + _3437;
                            _3425 = _3718 + _3438;
                            _3420 = _3713 + _3433;
                            _3421 = _3714 + _3434;
                            _3422 = _3715 + _3435;
                            if (_3440 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3433 = _3420;
                                _3434 = _3421;
                                _3435 = _3422;
                                _3436 = _3423;
                                _3437 = _3424;
                                _3438 = _3425;
                                _3439 = _3440;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3425;
                        frontier_phi_77_pred_1 = _3424;
                        frontier_phi_77_pred_2 = _3423;
                        frontier_phi_77_pred_3 = _3422;
                        frontier_phi_77_pred_4 = _3421;
                        frontier_phi_77_pred_5 = _3420;
                    }
                    _3062 = frontier_phi_77_pred;
                    _3060 = frontier_phi_77_pred_1;
                    _3058 = frontier_phi_77_pred_2;
                    _3056 = frontier_phi_77_pred_3;
                    _3054 = frontier_phi_77_pred_4;
                    _3052 = frontier_phi_77_pred_5;
                    uint _3218 = _3217 + 1u;
                    if (_3218 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3211 = _3052;
                        _3212 = _3054;
                        _3213 = _3056;
                        _3214 = _3058;
                        _3215 = _3060;
                        _3216 = _3062;
                        _3217 = _3218;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3056;
                frontier_phi_58_59_ladder_1 = _3062;
                frontier_phi_58_59_ladder_2 = _3060;
                frontier_phi_58_59_ladder_3 = _3058;
                frontier_phi_58_59_ladder_4 = _3054;
                frontier_phi_58_59_ladder_5 = _3052;
            }
            else
            {
                frontier_phi_58_59_ladder = _2934;
                frontier_phi_58_59_ladder_1 = _2940;
                frontier_phi_58_59_ladder_2 = _2938;
                frontier_phi_58_59_ladder_3 = _2936;
                frontier_phi_58_59_ladder_4 = _2932;
                frontier_phi_58_59_ladder_5 = _2930;
            }
            _3051 = frontier_phi_58_59_ladder_5;
            _3053 = frontier_phi_58_59_ladder_4;
            _3055 = frontier_phi_58_59_ladder;
            _3057 = frontier_phi_58_59_ladder_3;
            _3059 = frontier_phi_58_59_ladder_2;
            _3061 = frontier_phi_58_59_ladder_1;
        }
        float _3066 = isnan(1.0) ? _1057 : (isnan(_1057) ? 1.0 : min(_1057, 1.0));
        _2840 = (_3066 * _3057) + _2273;
        _2842 = (_3066 * _3059) + _2275;
        _2844 = (_3066 * _3061) + _2277;
        _2846 = ((_3051 * _1042) * _3066) + _2621;
        _2848 = ((_3053 * _1044) * _3066) + _2623;
        _2850 = ((_3055 * _1045) * _3066) + _2625;
    }
    else
    {
        _2840 = _2273;
        _2842 = _2275;
        _2844 = _2277;
        _2846 = _2621;
        _2848 = _2623;
        _2850 = _2625;
    }
    float _4863 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _4874 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _4885 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _4896 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _2868 = ((isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0))) * (_2840 + ((isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))) * _1057))) + ((_2846 + ((isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0))) * _1892)) * cbPerFrame._m0[3u].x);
    float _2869 = ((isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0))) * (_2842 + ((isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))) * _1057))) + ((_2848 + ((isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0))) * _1892)) * cbPerFrame._m0[3u].x);
    float _2870 = ((isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0))) * (_2844 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1057))) + ((_2850 + ((isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0))) * _1892)) * cbPerFrame._m0[3u].x);
    float _2875 = cbInstanceData._m0[_1017 + 6u].w * (isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0)));
    float _2880 = _979 / cbSceneParam._m0[86u].x;
    float _2881 = _980 / cbSceneParam._m0[86u].y;
    vec4 _2895 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2880, _2881, (log2((isnan(cbSceneParam._m0[77u].w) ? _902 : (isnan(_902) ? cbSceneParam._m0[77u].w : min(_902, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2897 = _2895.x;
    float _2898 = _2895.y;
    float _2899 = _2895.z;
    float _2900 = _2895.w;
    float _2993;
    float _2995;
    float _2997;
    float _2999;
    if (_902 > cbSceneParam._m0[78u].w)
    {
        float _2955 = isnan(_902) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _902 : min(cbSceneParam._m0[80u].w, _902));
        float _2956 = _2955 / _902;
        float _2967 = _2956 * _952;
        float _2968 = _953 * _2956;
        float _2969 = (-0.0) - _2968;
        float _2971 = _2956 * _954;
        float _2973 = (cbSceneParam._m0[77u].w * _2969) / _2955;
        float _2974 = _2973 + cbSceneParam._m0[79u].w;
        float _2975 = cbSceneParam._m0[79u].w - _2968;
        float _2981 = sqrt(((_2967 * _2967) + (_2968 * _2968)) + (_2971 * _2971));
        float _2984 = (1.0 - (cbSceneParam._m0[77u].w / _2955)) * _2981;
        float _2989 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2991 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3168;
        if (abs((_2969 - _2973) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3168 = ((((_2974 > 0.0) ? exp2(_2989 * _2974) : (2.0 - exp2(_2991 * _2974))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2984;
        }
        else
        {
            float _3112 = 1.0 / cbSceneParam._m0[80u].x;
            float _3113 = isnan(_2975) ? _2974 : (isnan(_2974) ? _2975 : max(_2974, _2975));
            float _3114 = isnan(_2975) ? _2974 : (isnan(_2974) ? _2975 : min(_2974, _2975));
            float _3123 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : min(_3113, 0.0));
            float _3124 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : min(_3114, 0.0));
            _3168 = ((abs(_2981 / _2969) * cbSceneParam._m0[80u].y) * ((((_3123 - _3124) * 2.0) - ((exp2(_2989 * (isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0)))) - exp2(_2989 * (isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0))))) * _3112)) - ((exp2(_2991 * _3123) - exp2(_2991 * _3124)) * _3112))) + (_2984 * cbSceneParam._m0[80u].z);
        }
        vec4 _3170 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2880, _2881, 1.0), 0.0);
        float _3179 = exp2((_3168 * (-1.44269502162933349609375)) * (1.0 - _3170.w));
        float _3180 = log2(_3179);
        float _3196 = log2(_2900);
        _2993 = (exp2(_3196 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3180 * cbSceneParam._m0[78u].x)) * _3170.x) / cbSceneParam._m0[78u].x)) + _2897;
        _2995 = (exp2(_3196 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3180 * cbSceneParam._m0[78u].y)) * _3170.y) / cbSceneParam._m0[78u].y)) + _2898;
        _2997 = (exp2(_3196 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3180 * cbSceneParam._m0[78u].z)) * _3170.z) / cbSceneParam._m0[78u].z)) + _2899;
        _2999 = _3179 * _2900;
    }
    else
    {
        _2993 = _2897;
        _2995 = _2898;
        _2997 = _2899;
        _2999 = _2900;
    }
    bool _3206;
    vec4 _3009;
    vec4 _3031;
    float _3033;
    float _3037;
    float _3038;
    float _3039;
    float _3040;
    bool _3050;
    for (;;)
    {
        _3009 = cbMatDynParam._m0[0u];
        float _3011 = roundEven(_3009.y);
        bool _3012 = _3011 == 3.0;
        float _3013 = log2(_2999);
        float _3020 = exp2(_3013 * cbSceneParam._m0[78u].x) * _2868;
        float _3021 = exp2(_3013 * cbSceneParam._m0[78u].y) * _2869;
        float _3022 = exp2(_3013 * cbSceneParam._m0[78u].z) * _2870;
        float _3029 = _968 + (-0.5);
        _3031 = cbMtdParam._m0[1u];
        _3033 = _3031.y * _3029;
        float _3036 = (_3011 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3037 = _3036 * (_3012 ? _3020 : (_3020 + (cbSceneParam._m0[72u].w * _2993)));
        _3038 = _3036 * (_3012 ? _3021 : (_3021 + (cbSceneParam._m0[72u].w * _2995)));
        _3039 = _3036 * (_3012 ? _3022 : (_3022 + (cbSceneParam._m0[72u].w * _2997)));
        _3040 = _3029 * 0.999000012874603271484375;
        _3050 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3050)
        {
            if ((cbInstanceData._m0[_1017 + 7u].x + _3040) < 0.5)
            {
                _3206 = true;
                break;
            }
        }
        uint _3147 = _1018 + uint(_3009.w);
        if ((cbInstanceData._m0[_3147].w < 1.0) && ((cbInstanceData._m0[_3147].w + _3040) < 0.5))
        {
            _3206 = true;
            break;
        }
        if ((_3033 + 1.0) < _3031.x)
        {
            _3206 = true;
            break;
        }
        _3206 = false;
        break;
    }
    float _3411;
    if (_3206)
    {
        discard_state = true;
        _3411 = 0.0;
    }
    else
    {
        _3411 = _2875;
    }
    SV_Target.x = _3037;
    SV_Target.y = _3038;
    SV_Target.z = _3039;
    SV_Target.w = _3411;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2875;
    discard_exit();
}


