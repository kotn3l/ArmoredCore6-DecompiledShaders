#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24;
layout(set = 0, binding = 12) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 13) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 18) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in float TEXCOORD_8;
layout(location = 7, component = 1) in float TEXCOORD_9;
layout(location = 7, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1644;
float _4306;
float _4307;
float _4308;
float _4309;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _242 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _243 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _244 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _250 = inversesqrt(dot(vec3(_242, _243, _244), vec3(_242, _243, _244)));
    float _257 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _264 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _293 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _327 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _331 = _327.z;
    float _344 = exp2(log2((1.0 - _331) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _345 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _346 = isnan(1.0) ? _345 : (isnan(_345) ? 1.0 : min(_345, 1.0));
    vec4 _363 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _375 = exp2(log2(_363.w * cbMtdParam._m0[29u].y) * cbMtdParam._m0[23u].x);
    float _376 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _377 = isnan(1.0) ? _376 : (isnan(_376) ? 1.0 : min(_376, 1.0));
    float _386 = exp2(log2(cbMtdParam._m0[23u].y * _331) * cbMtdParam._m0[22u].y);
    float _387 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _388 = isnan(1.0) ? _387 : (isnan(_387) ? 1.0 : min(_387, 1.0));
    vec4 _400 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _403 = _400.y;
    float _406 = (_400.x + (-0.02500000037252902984619140625)) * 8.0;
    float _410 = roundEven(5.0 - _406);
    float _411 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _412 = isnan(4.0) ? _411 : (isnan(_411) ? 4.0 : min(_411, 4.0));
    float _424 = floor(_412);
    vec4 _427 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w, _424));
    float _220[6];
    float _221[6];
    float _222[6];
    _220[0u] = cbMtdParam._m0[17u].x;
    _221[0u] = cbMtdParam._m0[17u].y;
    _222[0u] = cbMtdParam._m0[17u].z;
    _220[1u] = cbMtdParam._m0[15u].x;
    _221[1u] = cbMtdParam._m0[15u].y;
    _222[1u] = cbMtdParam._m0[15u].z;
    _220[2u] = cbMtdParam._m0[14u].x;
    _221[2u] = cbMtdParam._m0[14u].y;
    _222[2u] = cbMtdParam._m0[14u].z;
    _220[3u] = cbMtdParam._m0[13u].x;
    _221[3u] = cbMtdParam._m0[13u].y;
    _222[3u] = cbMtdParam._m0[13u].z;
    _220[4u] = cbMtdParam._m0[12u].x;
    _221[4u] = cbMtdParam._m0[12u].y;
    _222[4u] = cbMtdParam._m0[12u].z;
    _220[5u] = cbMtdParam._m0[18u].x;
    _221[5u] = cbMtdParam._m0[18u].y;
    _222[5u] = cbMtdParam._m0[18u].z;
    float _491 = roundEven(_406);
    float _492 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    uint _494 = uint(int(isnan(5.0) ? _492 : (isnan(_492) ? 5.0 : min(_492, 5.0))));
    vec4 _524 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _535 = cbMtdParam._m0[9u].x * _524.x;
    float _536 = cbMtdParam._m0[9u].y * _524.y;
    float _537 = cbMtdParam._m0[9u].z * _524.z;
    float _544 = ((((((_220[_494] - cbMtdParam._m0[10u].x) * _403) + cbMtdParam._m0[10u].x) * _427.x) - _535) * _388) + _535;
    float _545 = ((((((_221[_494] - cbMtdParam._m0[10u].y) * _403) + cbMtdParam._m0[10u].y) * _427.y) - _536) * _388) + _536;
    float _546 = ((((((_222[_494] - cbMtdParam._m0[10u].z) * _403) + cbMtdParam._m0[10u].z) * _427.z) - _537) * _388) + _537;
    float _552 = exp2(log2(_327.w) * cbMtdParam._m0[23u].w);
    vec4 _565 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _585 = (((cbMtdParam._m0[16u].x * _565.x) - _544) * _552) + _544;
    float _586 = (((cbMtdParam._m0[16u].y * _565.y) - _545) * _552) + _545;
    float _587 = (((cbMtdParam._m0[16u].z * _565.z) - _546) * _552) + _546;
    vec4 _599 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _619 = (((cbMtdParam._m0[19u].x * _599.x) - _585) * _377) + _585;
    float _620 = (((cbMtdParam._m0[19u].y * _599.y) - _586) * _377) + _586;
    float _621 = (((cbMtdParam._m0[19u].z * _599.z) - _587) * _377) + _587;
    vec4 _633 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _658 = (_363.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _633.x) - _619) * _346) + _619);
    float _660 = (_363.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _633.y) - _620) * _346) + _620);
    float _662 = (_363.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _633.z) - _621) * _346) + _621);
    vec4 _674 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _693 = TEXCOORD_5.x - ((cbMtdParam._m0[24u].x * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625));
    float _695 = _693 * (cbMtdParam._m0[24u].z + 1.0);
    float _4368 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _696 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
    float _703 = (_696 * ((cbMtdParam._m0[11u].x * _674.x) - _658)) + _658;
    float _704 = (((cbMtdParam._m0[11u].y * _674.y) - _660) * _696) + _660;
    float _705 = (((cbMtdParam._m0[11u].z * _674.z) - _662) * _696) + _662;
    float _709 = cbMtdParam._m0[28u].x * TEXCOORD_8;
    float _717 = (_709 - (((_293.x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _709))) * (cbMtdParam._m0[27u].w + 1.0);
    float _4379 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _718 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
    float _725 = ((cbMtdParam._m0[21u].x - _703) * _718) + _703;
    float _726 = ((cbMtdParam._m0[21u].y - _704) * _718) + _704;
    float _727 = ((cbMtdParam._m0[21u].z - _705) * _718) + _705;
    vec4 _740 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24, SS_ClampLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.z) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.w) + cbTextureTilingScale._m0[11u].w));
    float _748 = (_740.x + (-1.0)) + (cbMtdParam._m0[28u].y * 2.0);
    float _4390 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _754 = exp2(log2(cbMtdParam._m0[28u].w * (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0)))) * cbMtdParam._m0[28u].z);
    float _4401 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _755 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
    float _215[5];
    float _216[5];
    _215[0u] = cbMtdParam._m0[29u].z;
    _216[0u] = cbMtdParam._m0[29u].w;
    _215[1u] = cbMtdParam._m0[31u].z;
    _216[1u] = cbMtdParam._m0[31u].w;
    _215[2u] = cbMtdParam._m0[31u].x;
    _216[2u] = cbMtdParam._m0[31u].y;
    _215[3u] = cbMtdParam._m0[30u].z;
    _216[3u] = cbMtdParam._m0[30u].w;
    _215[4u] = cbMtdParam._m0[30u].x;
    _216[4u] = cbMtdParam._m0[30u].y;
    float _794 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    uint _796 = uint(int(isnan(4.0) ? _794 : (isnan(_794) ? 4.0 : min(_794, 4.0))));
    float _803 = ((_216[_796] - cbMtdParam._m0[22u].z) * _388) + cbMtdParam._m0[22u].z;
    float _806 = ((cbMtdParam._m0[22u].w - _803) * _552) + _803;
    float _809 = ((cbMtdParam._m0[25u].x - _806) * _377) + _806;
    float _812 = ((cbMtdParam._m0[26u].x - _809) * _346) + _809;
    float _817 = (cbMtdParam._m0[24u].y + 1.0) * _693;
    float _4422 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _818 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
    float _820 = _812 - (_812 * _818);
    float _822 = _820 - (_820 * _709);
    vec4 _835 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w, _424));
    vec4 _852 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _854 = _852.x;
    float _855 = _852.y;
    float _860 = cbMtdParam._m0[22u].x + _852.z;
    float _863 = (((_835.z + _215[_796]) - _860) * _388) + _860;
    vec4 _875 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _886 = (((_875.z - _863) + cbMtdParam._m0[29u].x) * _552) + _863;
    float _891 = ((((_331 * 2.0) * _886) - _886) * cbMtdParam._m0[24u].w) + _886;
    vec4 _903 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _914 = (((cbMtdParam._m0[23u].z + _903.z) - _891) * _377) + _891;
    vec4 _927 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _938 = (((_927.z - _914) + cbMtdParam._m0[26u].y) * _346) + _914;
    vec4 _950 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _961 = ((_950.z - _938) * _818) + _938;
    vec4 _976 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _990 = ((cbMtdParam._m0[27u].y * _709) * ((_976.z * cbMtdParam._m0[27u].x) - _961)) + _961;
    float _1005 = ((_835.x - _854) * _388) + _854;
    float _1006 = ((_835.y - _855) * _388) + _855;
    float _1011 = ((_875.x - _1005) * _552) + _1005;
    float _1012 = ((_875.y - _1006) * _552) + _1006;
    float _1017 = ((_903.x - _1011) * _377) + _1011;
    float _1018 = ((_903.y - _1012) * _377) + _1012;
    float _1027 = ((((_927.x - _1017) * _346) + _1017) * 2.0) + (-1.0);
    float _1028 = ((((_927.y - _1018) * _346) + _1018) * 2.0) + (-1.0);
    float _1029 = dot(vec2(_1027, _1028), vec2(_1027, _1028));
    float _4433 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _1034 = sqrt(1.0 - (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))));
    float _1050 = (((cbMtdParam._m0[25u].y * ((_327.x * 2.0) + (-1.0))) + _1027) + (((((_950.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[25u].z) * _818)) + ((((_976.x * 2.0) + (-1.0)) * _709) * cbMtdParam._m0[26u].w);
    float _1051 = (((cbMtdParam._m0[25u].y * ((_327.y * 2.0) + (-1.0))) + _1028) + (((((_950.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[25u].z) * _818)) + (((cbMtdParam._m0[28u].x * TEXCOORD_9) * ((_976.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _1054 = fma(_1034, _257 * NORMAL.x, fma(_1051, _264 * TANGENT.x, (_250 * _242) * _1050));
    float _1057 = fma(_1034, _257 * NORMAL.y, fma(_1051, _264 * TANGENT.y, (_250 * _243) * _1050));
    float _1060 = fma(_1034, _257 * NORMAL.z, fma(_1051, _264 * TANGENT.z, (_250 * _244) * _1050));
    float _1064 = inversesqrt(dot(vec3(_1054, _1057, _1060), vec3(_1054, _1057, _1060)));
    float _1065 = _1064 * _1054;
    float _1066 = _1064 * _1057;
    float _1067 = _1064 * _1060;
    float _4444 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _1068 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
    float _4455 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _1069 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
    float _4466 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _4477 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _4488 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _4499 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _1073 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
    float _1089 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1129 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1139 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1129);
    float _1140 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1129);
    float _1141 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1129);
    float _1145 = inversesqrt(dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141)));
    float _1146 = _1139 * _1145;
    float _1147 = _1140 * _1145;
    float _1148 = _1141 * _1145;
    vec4 _1153 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1155 = _1153.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1325 = sqrt(((_1139 * _1139) + (_1140 * _1140)) + (_1141 * _1141));
        float _1331 = (cbMatDynParam._m0[5u].x * _1325) + cbMatDynParam._m0[5u].y;
        float _4510 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _1336 = (cbMatDynParam._m0[5u].z * _1325) + cbMatDynParam._m0[5u].w;
        float _4521 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) - _1332)) + _1332) < ((_1155 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1166 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1167 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1185 = fma(_1067, cbSceneParam._m0[5u].z, fma(_1066, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1065));
    float _1188 = fma(_1067, cbSceneParam._m0[6u].z, fma(_1066, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1065));
    float _1191 = fma(_1067, cbSceneParam._m0[7u].z, fma(_1066, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1065));
    uint _1204 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1205 = _1204 + 9u;
    uint _1206 = _1205 + uint(cbMatDynParam._m0[0u].w);
    float _1212 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0)))) * cbInstanceData._m0[_1206].x;
    float _1213 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0)))) * cbInstanceData._m0[_1206].y;
    float _1214 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0)))) * cbInstanceData._m0[_1206].z;
    float _4532 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
    float _1215 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
    float _4543 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
    float _1216 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
    float _4554 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
    float _1217 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
    float _1218 = 1.0 - _1073;
    float _1219 = _1215 * _1218;
    float _1220 = _1216 * _1218;
    float _1221 = _1217 * _1218;
    float _1226 = (_1215 + (-0.039999999105930328369140625)) * _1073;
    float _1227 = (_1216 + (-0.039999999105930328369140625)) * _1073;
    float _1228 = (_1217 + (-0.039999999105930328369140625)) * _1073;
    float _1229 = _1226 + 0.039999999105930328369140625;
    float _1231 = _1227 + 0.039999999105930328369140625;
    float _1232 = _1228 + 0.039999999105930328369140625;
    vec4 _1241 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1166, cbSceneParam._m0[86u].y * _1167));
    float _1244 = _1241.x * TEXCOORD_5.w;
    float _1245 = dot(vec3(_1065, _1066, _1067), vec3(_1146, _1147, _1148));
    float _1248 = _1245 * 2.0;
    float _1252 = (_1248 * _1065) - _1146;
    float _1253 = (_1248 * _1066) - _1147;
    float _1254 = (_1248 * _1067) - _1148;
    float _1258 = abs(dot(vec3(_1146, _1147, _1148), vec3(_1065, _1066, _1067)));
    float _4565 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
    float _1260 = sqrt(_1069);
    float _1271 = exp2((_1260 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1260 * 3.0));
    float _1277 = (1.0 - _1271) * ((_1260 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1278 = _1271 * _1260;
    float _1306 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1310 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1314 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1643;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1368 = fma(_1314, cbModelParam._m0[26u].z, fma(_1310, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1306));
        float _1372 = fma(_1314, cbModelParam._m0[27u].z, fma(_1310, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1306));
        float _1376 = fma(_1314, cbModelParam._m0[28u].z, fma(_1310, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1306));
        float _1401 = _1306 + _1065;
        float _1402 = _1310 + _1066;
        float _1403 = _1314 + _1067;
        float _1413 = fma(_1403, cbModelParam._m0[26u].z, fma(_1402, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1401)) - _1368;
        float _1414 = fma(_1403, cbModelParam._m0[27u].z, fma(_1402, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1401)) - _1372;
        float _1415 = fma(_1403, cbModelParam._m0[28u].z, fma(_1402, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1401)) - _1376;
        float _1419 = inversesqrt(dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415)));
        float _1432 = ((_1419 * _1413) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1368 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1433 = ((_1419 * _1414) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1372 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1434 = ((_1419 * _1415) / cbModelParam._m0[34u].z) + ((((((_1376 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1437 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        vec4 _1444 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        vec4 _1451 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        vec4 _1458 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        float _1471 = exp2((_1437.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1437.x + (-0.5));
        float _1473 = _1471 * (_1437.y + (-0.5));
        float _1474 = _1471 * (_1437.z + (-0.5));
        float _1481 = exp2((_1444.w + (-0.5)) * 20.0) * 2.0;
        float _1482 = _1481 * (_1444.x + (-0.5));
        float _1483 = _1481 * (_1444.y + (-0.5));
        float _1484 = _1481 * (_1444.z + (-0.5));
        float _1491 = exp2((_1451.w + (-0.5)) * 20.0) * 2.0;
        float _1492 = _1491 * (_1451.x + (-0.5));
        float _1493 = _1491 * (_1451.y + (-0.5));
        float _1494 = _1491 * (_1451.z + (-0.5));
        float _1501 = exp2((_1458.w + (-0.5)) * 20.0) * 2.0;
        float _1502 = _1501 * (_1458.x + (-0.5));
        float _1503 = _1501 * (_1458.y + (-0.5));
        float _1504 = _1501 * (_1458.z + (-0.5));
        float _1505 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1506 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1507 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1508 = _1472 * 0.5;
        float _1509 = _1482 * 0.5;
        float _1510 = _1492 * 0.5;
        float _1511 = dot(vec3(_1508, _1509, _1510), vec3(_1508, _1509, _1510));
        float _1516 = (_1511 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1511);
        float _1525 = (dot(vec3(_1065, _1066, _1067), vec3(_1516 * _1508, _1516 * _1509, _1516 * _1510)) + 1.0) * 0.5;
        float _4591 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1535 = sqrt(((_1509 * _1509) + (_1508 * _1508)) + (_1510 * _1510)) / (_1505 + 9.9999997473787516355514526367188e-06);
        float _4602 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
        float _1537 = _1536 * 2.0;
        float _1541 = (1.0 - _1536) / (_1536 + 1.0);
        float _4613 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
        float _1551 = ((((1.0 - _1542) * (_1537 + 2.0)) * exp2(log2(isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (_1537 + 1.0))) + _1542) * _1505;
        float _1552 = _1473 * 0.5;
        float _1553 = _1483 * 0.5;
        float _1554 = _1493 * 0.5;
        float _1555 = dot(vec3(_1552, _1553, _1554), vec3(_1552, _1553, _1554));
        float _1560 = (_1555 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1555);
        float _1568 = (dot(vec3(_1065, _1066, _1067), vec3(_1560 * _1552, _1560 * _1553, _1560 * _1554)) + 1.0) * 0.5;
        float _4624 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1577 = sqrt(((_1553 * _1553) + (_1552 * _1552)) + (_1554 * _1554)) / (_1506 + 9.9999997473787516355514526367188e-06);
        float _4635 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _1579 = _1578 * 2.0;
        float _1583 = (1.0 - _1578) / (_1578 + 1.0);
        float _4646 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _1593 = ((((1.0 - _1584) * (_1579 + 2.0)) * exp2(log2(isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (_1579 + 1.0))) + _1584) * _1506;
        float _1594 = _1474 * 0.5;
        float _1595 = _1484 * 0.5;
        float _1596 = _1494 * 0.5;
        float _1597 = dot(vec3(_1594, _1595, _1596), vec3(_1594, _1595, _1596));
        float _1602 = (_1597 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1597);
        float _1610 = (dot(vec3(_1065, _1066, _1067), vec3(_1602 * _1594, _1602 * _1595, _1602 * _1596)) + 1.0) * 0.5;
        float _4657 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1619 = sqrt(((_1595 * _1595) + (_1594 * _1594)) + (_1596 * _1596)) / (_1507 + 9.9999997473787516355514526367188e-06);
        float _4668 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
        float _1621 = _1620 * 2.0;
        float _1625 = (1.0 - _1620) / (_1620 + 1.0);
        float _4679 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
        float _1635 = ((((1.0 - _1626) * (_1621 + 2.0)) * exp2(log2(isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0))) * (_1621 + 1.0))) + _1626) * _1507;
        _1643 = _1474;
        _1645 = _1473;
        _1646 = _1472;
        _1647 = _1484;
        _1648 = _1483;
        _1649 = _1482;
        _1650 = _1494;
        _1651 = _1493;
        _1652 = _1492;
        _1653 = _1507;
        _1654 = _1506;
        _1655 = _1505;
        _1656 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)));
        _1657 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)));
        _1658 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)));
    }
    else
    {
        _1643 = _1644;
        _1645 = _1644;
        _1646 = _1644;
        _1647 = _1644;
        _1648 = _1644;
        _1649 = _1644;
        _1650 = _1644;
        _1651 = _1644;
        _1652 = _1644;
        _1653 = _1644;
        _1654 = _1644;
        _1655 = _1644;
        _1656 = 0.0;
        _1657 = 0.0;
        _1658 = 0.0;
    }
    float _1953;
    float _1954;
    float _1955;
    float _1956;
    float _1957;
    float _1958;
    float _1959;
    float _1960;
    float _1961;
    float _1962;
    float _1963;
    float _1964;
    float _1965;
    float _1966;
    float _1967;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1684 = fma(_1314, cbModelParam._m0[30u].z, fma(_1310, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1306));
        float _1688 = fma(_1314, cbModelParam._m0[31u].z, fma(_1310, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1306));
        float _1692 = fma(_1314, cbModelParam._m0[32u].z, fma(_1310, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1306));
        float _1715 = _1306 + _1065;
        float _1716 = _1310 + _1066;
        float _1717 = _1314 + _1067;
        float _1727 = fma(_1717, cbModelParam._m0[30u].z, fma(_1716, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1715)) - _1684;
        float _1728 = fma(_1717, cbModelParam._m0[31u].z, fma(_1716, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1715)) - _1688;
        float _1729 = fma(_1717, cbModelParam._m0[32u].z, fma(_1716, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1715)) - _1692;
        float _1733 = inversesqrt(dot(vec3(_1727, _1728, _1729), vec3(_1727, _1728, _1729)));
        float _1746 = ((_1733 * _1727) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1684 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1747 = ((_1733 * _1728) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1688 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1748 = ((_1733 * _1729) / cbModelParam._m0[35u].z) + ((((((_1692 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1750 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1746, _1747, _1748), 0.0);
        vec4 _1757 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1746, _1747, _1748), 0.0);
        vec4 _1764 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1746, _1747, _1748), 0.0);
        vec4 _1771 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1746, _1747, _1748), 0.0);
        float _1783 = exp2((_1750.w + (-0.5)) * 20.0) * 2.0;
        float _1784 = _1783 * (_1750.x + (-0.5));
        float _1785 = _1783 * (_1750.y + (-0.5));
        float _1786 = _1783 * (_1750.z + (-0.5));
        float _1793 = exp2((_1757.w + (-0.5)) * 20.0) * 2.0;
        float _1794 = _1793 * (_1757.x + (-0.5));
        float _1795 = _1793 * (_1757.y + (-0.5));
        float _1796 = _1793 * (_1757.z + (-0.5));
        float _1803 = exp2((_1764.w + (-0.5)) * 20.0) * 2.0;
        float _1804 = _1803 * (_1764.x + (-0.5));
        float _1805 = _1803 * (_1764.y + (-0.5));
        float _1806 = _1803 * (_1764.z + (-0.5));
        float _1813 = exp2((_1771.w + (-0.5)) * 20.0) * 2.0;
        float _1814 = _1813 * (_1771.x + (-0.5));
        float _1815 = _1813 * (_1771.y + (-0.5));
        float _1816 = _1813 * (_1771.z + (-0.5));
        float _1817 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1818 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1819 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1820 = _1784 * 0.5;
        float _1821 = _1794 * 0.5;
        float _1822 = _1804 * 0.5;
        float _1823 = dot(vec3(_1820, _1821, _1822), vec3(_1820, _1821, _1822));
        float _1828 = (_1823 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1823);
        float _1836 = (dot(vec3(_1065, _1066, _1067), vec3(_1828 * _1820, _1828 * _1821, _1828 * _1822)) + 1.0) * 0.5;
        float _4720 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1845 = sqrt(((_1821 * _1821) + (_1820 * _1820)) + (_1822 * _1822)) / (_1817 + 9.9999997473787516355514526367188e-06);
        float _4731 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
        float _1846 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
        float _1847 = _1846 * 2.0;
        float _1851 = (1.0 - _1846) / (_1846 + 1.0);
        float _4742 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
        float _1852 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
        float _1861 = ((((1.0 - _1852) * (_1847 + 2.0)) * exp2(log2(isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0))) * (_1847 + 1.0))) + _1852) * _1817;
        float _1862 = _1785 * 0.5;
        float _1863 = _1795 * 0.5;
        float _1864 = _1805 * 0.5;
        float _1865 = dot(vec3(_1862, _1863, _1864), vec3(_1862, _1863, _1864));
        float _1870 = (_1865 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1865);
        float _1878 = (dot(vec3(_1065, _1066, _1067), vec3(_1870 * _1862, _1870 * _1863, _1870 * _1864)) + 1.0) * 0.5;
        float _4753 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
        float _1887 = sqrt(((_1863 * _1863) + (_1862 * _1862)) + (_1864 * _1864)) / (_1818 + 9.9999997473787516355514526367188e-06);
        float _4764 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
        float _1888 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
        float _1889 = _1888 * 2.0;
        float _1893 = (1.0 - _1888) / (_1888 + 1.0);
        float _4775 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
        float _1894 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
        float _1903 = ((((1.0 - _1894) * (_1889 + 2.0)) * exp2(log2(isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_1889 + 1.0))) + _1894) * _1818;
        float _1904 = _1786 * 0.5;
        float _1905 = _1796 * 0.5;
        float _1906 = _1806 * 0.5;
        float _1907 = dot(vec3(_1904, _1905, _1906), vec3(_1904, _1905, _1906));
        float _1912 = (_1907 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1907);
        float _1920 = (dot(vec3(_1065, _1066, _1067), vec3(_1912 * _1904, _1912 * _1905, _1912 * _1906)) + 1.0) * 0.5;
        float _4786 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
        float _1929 = sqrt(((_1905 * _1905) + (_1904 * _1904)) + (_1906 * _1906)) / (_1819 + 9.9999997473787516355514526367188e-06);
        float _4797 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
        float _1930 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
        float _1931 = _1930 * 2.0;
        float _1935 = (1.0 - _1930) / (_1930 + 1.0);
        float _4808 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
        float _1936 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
        float _1945 = ((((1.0 - _1936) * (_1931 + 2.0)) * exp2(log2(isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0))) * (_1931 + 1.0))) + _1936) * _1819;
        _1953 = _1786;
        _1954 = _1785;
        _1955 = _1784;
        _1956 = _1796;
        _1957 = _1795;
        _1958 = _1794;
        _1959 = _1806;
        _1960 = _1805;
        _1961 = _1804;
        _1962 = _1819;
        _1963 = _1818;
        _1964 = _1817;
        _1965 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0)));
        _1966 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0)));
        _1967 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0)));
    }
    else
    {
        _1953 = _1644;
        _1954 = _1644;
        _1955 = _1644;
        _1956 = _1644;
        _1957 = _1644;
        _1958 = _1644;
        _1959 = _1644;
        _1960 = _1644;
        _1961 = _1644;
        _1962 = _1644;
        _1963 = _1644;
        _1964 = _1644;
        _1965 = 0.0;
        _1966 = 0.0;
        _1967 = 0.0;
    }
    float _1977 = (cbModelParam._m0[1u].x * (_1965 - _1656)) + _1656;
    float _1978 = (cbModelParam._m0[1u].x * (_1966 - _1657)) + _1657;
    float _1979 = (cbModelParam._m0[1u].x * (_1967 - _1658)) + _1658;
    float _2000 = fma(_1979, cbSceneParam._m0[89u].z, fma(_1978, cbSceneParam._m0[89u].y, _1977 * cbSceneParam._m0[89u].x));
    float _2003 = fma(_1979, cbSceneParam._m0[90u].z, fma(_1978, cbSceneParam._m0[90u].y, _1977 * cbSceneParam._m0[90u].x));
    float _2006 = fma(_1979, cbSceneParam._m0[91u].z, fma(_1978, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1977));
    float _2021 = _1252 * 0.5;
    float _2022 = _1253 * 0.5;
    float _2023 = _1254 * 0.5;
    float _2024 = dot(vec4(_2021, _2022, _2023, 1.0), vec4(_1955, _1958, _1961, _1964));
    float _2027 = dot(vec4(_2021, _2022, _2023, 1.0), vec4(_1954, _1957, _1960, _1963));
    float _2030 = dot(vec4(_2021, _2022, _2023, 1.0), vec4(_1953, _1956, _1959, _1962));
    float _2064;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2037 = dot(vec4(_2021, _2022, _2023, 1.0), vec4(_1643, _1647, _1650, _1653));
        float _2041 = dot(vec4(_2021, _2022, _2023, 1.0), vec4(_1645, _1648, _1651, _1654));
        float _2045 = dot(vec4(_2021, _2022, _2023, 1.0), vec4(_1646, _1649, _1652, _1655));
        float _2052 = dot(vec4(cbModelParam._m0[39u]), vec4(_2021, _2022, _2023, 1.0));
        _2064 = dot(vec3(isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0)), isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0)), isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2052) ? 0.0 : (isnan(0.0) ? _2052 : max(0.0, _2052))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2064 = 1.0;
    }
    float _2075;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2066 = dot(vec4(cbModelParam._m0[40u]), vec4(_2021, _2022, _2023, 1.0));
        _2075 = dot(vec3(isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0)), isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0)), isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2066) ? 0.0 : (isnan(0.0) ? _2066 : max(0.0, _2066))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2075 = 1.0;
    }
    float _2079 = (_2075 * cbModelParam._m0[1u].x) + (_2064 * (1.0 - cbModelParam._m0[1u].x));
    float _2089 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1069);
    float _2090 = isnan(_2089) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2089 : min(cbModelParam._m0[25u].z, _2089));
    float _2170;
    float _2172;
    float _2174;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2137 = fma(_1314, cbModelParam._m0[13u].z, fma(_1310, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1306)) + cbModelParam._m0[13u].w;
        float _2141 = fma(_1314, cbModelParam._m0[14u].z, fma(_1310, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1306)) + cbModelParam._m0[14u].w;
        float _2145 = fma(_1314, cbModelParam._m0[15u].z, fma(_1310, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1306)) + cbModelParam._m0[15u].w;
        float _2148 = fma(_1254, cbModelParam._m0[13u].z, fma(_1253, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1252));
        float _2151 = fma(_1254, cbModelParam._m0[14u].z, fma(_1253, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1252));
        float _2154 = fma(_1254, cbModelParam._m0[15u].z, fma(_1253, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1252));
        float _2182;
        if (_2148 > 0.0)
        {
            _2182 = abs((1.0 - _2137) / _2148);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2148 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2137 + 1.0) / _2148);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2182 = frontier_phi_17_15_ladder;
        }
        float _2353;
        if (_2151 > 0.0)
        {
            _2353 = abs((1.0 - _2141) / _2151);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2151 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2141 + 1.0) / _2151);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2353 = frontier_phi_26_22_ladder;
        }
        float _2648;
        if (_2154 > 0.0)
        {
            _2648 = abs((1.0 - _2145) / _2154);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2154 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2145 + 1.0) / _2154);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2648 = frontier_phi_38_33_ladder;
        }
        float _2650 = isnan(_2353) ? _2182 : (isnan(_2182) ? _2353 : min(_2182, _2353));
        float _2651 = isnan(_2648) ? _2650 : (isnan(_2650) ? _2648 : min(_2650, _2648));
        float _2655 = (_2651 * _2148) + _2137;
        float _2656 = (_2651 * _2151) + _2141;
        float _2657 = (_2651 * _2154) + _2145;
        float _2658 = _2651 * 9.9999997473787516355514526367188e-05;
        float _2660 = (-1.0) - _2658;
        float _2662 = _2658 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2657 > _2662) || ((_2657 < _2660) || ((_2656 > _2662) || ((_2656 < _2660) || ((_2655 < _2660) || (_2655 > _2662))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2802 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2657, cbModelParam._m0[9u].z, fma(_2656, cbModelParam._m0[9u].y, _2655 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2657, cbModelParam._m0[10u].z, fma(_2656, cbModelParam._m0[10u].y, _2655 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2657, cbModelParam._m0[11u].z, fma(_2656, cbModelParam._m0[11u].y, _2655 * cbModelParam._m0[11u].x))), _2090);
            frontier_phi_16_38_ladder = _2802.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2802.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2802.x * cbModelParam._m0[1u].y;
        }
        _2170 = frontier_phi_16_38_ladder_2;
        _2172 = frontier_phi_16_38_ladder_1;
        _2174 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2158 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1252, _1253, _1254), _2090);
        _2170 = _2158.x * cbModelParam._m0[1u].y;
        _2172 = _2158.y * cbModelParam._m0[1u].y;
        _2174 = _2158.z * cbModelParam._m0[1u].y;
    }
    float _2178 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1069);
    float _2179 = isnan(_2178) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2178 : min(cbModelParam._m0[25u].w, _2178));
    float _2268;
    float _2270;
    float _2272;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2232 = fma(_1314, cbModelParam._m0[21u].z, fma(_1310, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1306)) + cbModelParam._m0[21u].w;
        float _2236 = fma(_1314, cbModelParam._m0[22u].z, fma(_1310, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1306)) + cbModelParam._m0[22u].w;
        float _2240 = fma(_1314, cbModelParam._m0[23u].z, fma(_1310, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1306)) + cbModelParam._m0[23u].w;
        float _2243 = fma(_1254, cbModelParam._m0[21u].z, fma(_1253, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1252));
        float _2246 = fma(_1254, cbModelParam._m0[22u].z, fma(_1253, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1252));
        float _2249 = fma(_1254, cbModelParam._m0[23u].z, fma(_1253, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1252));
        float _2358;
        if (_2243 > 0.0)
        {
            _2358 = abs((1.0 - _2232) / _2243);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2243 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2232 + 1.0) / _2243);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2358 = frontier_phi_28_24_ladder;
        }
        float _2675;
        if (_2246 > 0.0)
        {
            _2675 = abs((1.0 - _2236) / _2246);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2246 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2236 + 1.0) / _2246);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2675 = frontier_phi_40_35_ladder;
        }
        float _3013;
        if (_2249 > 0.0)
        {
            _3013 = abs((1.0 - _2240) / _2249);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2249 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2240 + 1.0) / _2249);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _3013 = frontier_phi_50_47_ladder;
        }
        float _3015 = isnan(_2675) ? _2358 : (isnan(_2358) ? _2675 : min(_2358, _2675));
        float _3016 = isnan(_3013) ? _3015 : (isnan(_3015) ? _3013 : min(_3015, _3013));
        float _3020 = (_3016 * _2243) + _2232;
        float _3021 = (_3016 * _2246) + _2236;
        float _3022 = (_3016 * _2249) + _2240;
        float _3023 = _3016 * 9.9999997473787516355514526367188e-05;
        float _3024 = (-1.0) - _3023;
        float _3026 = _3023 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_3022 > _3026) || ((_3022 < _3024) || ((_3021 > _3026) || ((_3021 < _3024) || ((_3020 < _3024) || (_3020 > _3026))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3144 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3022, cbModelParam._m0[17u].z, fma(_3021, cbModelParam._m0[17u].y, _3020 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3022, cbModelParam._m0[18u].z, fma(_3021, cbModelParam._m0[18u].y, _3020 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3022, cbModelParam._m0[19u].z, fma(_3021, cbModelParam._m0[19u].y, _3020 * cbModelParam._m0[19u].x))), _2179);
            frontier_phi_25_50_ladder = _3144.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3144.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3144.x * cbModelParam._m0[1u].z;
        }
        _2268 = frontier_phi_25_50_ladder_2;
        _2270 = frontier_phi_25_50_ladder_1;
        _2272 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2252 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1252, _1253, _1254), _2179);
        _2268 = _2252.x * cbModelParam._m0[1u].z;
        _2270 = _2252.y * cbModelParam._m0[1u].z;
        _2272 = _2252.z * cbModelParam._m0[1u].z;
    }
    float _2285 = (((_1277 * _1229) + _1278) * _1244) * ((cbModelParam._m0[1u].w * (_2268 - _2170)) + _2170);
    float _2287 = (((_1277 * _1231) + _1278) * _1244) * ((cbModelParam._m0[1u].w * (_2270 - _2172)) + _2172);
    float _2289 = (((_1277 * _1232) + _1278) * _1244) * ((cbModelParam._m0[1u].w * (_2272 - _2174)) + _2174);
    float _2292 = fma(_2289, cbSceneParam._m0[89u].z, fma(_2287, cbSceneParam._m0[89u].y, _2285 * cbSceneParam._m0[89u].x));
    float _2295 = fma(_2289, cbSceneParam._m0[90u].z, fma(_2287, cbSceneParam._m0[90u].y, _2285 * cbSceneParam._m0[90u].x));
    float _2298 = fma(_2289, cbSceneParam._m0[91u].z, fma(_2287, cbSceneParam._m0[91u].y, _2285 * cbSceneParam._m0[91u].x));
    float _2332 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2336 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2340 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2344 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2345 = _2332 / _2344;
    float _2346 = _2336 / _2344;
    float _2347 = _2340 / _2344;
    float _2494;
    float _2495;
    float _2496;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2374 = ((uint(_2347 > cbSceneParam._m0[59u].y) + uint(_2347 > cbSceneParam._m0[59u].x)) + uint(_2347 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2375 = _2374 + 43u;
        uint _2383 = _2374 + 44u;
        uint _2391 = _2374 + 45u;
        uint _2399 = _2374 + 46u;
        float _2410 = fma(_2344, cbSceneParam._m0[_2375].w, fma(_2340, cbSceneParam._m0[_2375].z, fma(_2336, cbSceneParam._m0[_2375].y, _2332 * cbSceneParam._m0[_2375].x)));
        float _2414 = fma(_2344, cbSceneParam._m0[_2383].w, fma(_2340, cbSceneParam._m0[_2383].z, fma(_2336, cbSceneParam._m0[_2383].y, _2332 * cbSceneParam._m0[_2383].x)));
        float _2422 = fma(_2344, cbSceneParam._m0[_2399].w, fma(_2340, cbSceneParam._m0[_2399].z, fma(_2336, cbSceneParam._m0[_2399].y, _2332 * cbSceneParam._m0[_2399].x)));
        float _2427 = cbSceneParam._m0[33u].z * _2422;
        float _2429 = cbSceneParam._m0[33u].w * _2422;
        float _2432 = fma(_2344, cbSceneParam._m0[_2391].w, fma(_2340, cbSceneParam._m0[_2391].z, fma(_2336, cbSceneParam._m0[_2391].y, _2332 * cbSceneParam._m0[_2391].x))) / _2422;
        float _2480 = (cbSceneParam._m0[33u].x - sqrt(((_2346 * _2346) + (_2345 * _2345)) + (_2347 * _2347))) * cbSceneParam._m0[33u].y;
        float _4934 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2487 = (isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2427 + _2410) / _2422, (_2429 + _2414) / _2422), _2432), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2429 + _2410) / _2422, (_2414 - _2427) / _2422), _2432), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2410 - _2427) / _2422, (_2414 - _2429) / _2422), _2432), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2410 - _2429) / _2422, (_2427 + _2414) / _2422), _2432), 0.0)).x), vec4(0.25)));
        _2494 = 1.0 - (_2487 * cbSceneParam._m0[34u].x);
        _2495 = 1.0 - (_2487 * cbSceneParam._m0[34u].y);
        _2496 = 1.0 - (_2487 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2494 = 1.0;
        _2495 = 1.0;
        _2496 = 1.0;
    }
    float _2560;
    float _2562;
    float _2564;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2548 = fma(_2344, cbSceneParam._m0[63u].w, fma(_2340, cbSceneParam._m0[63u].z, fma(_2336, cbSceneParam._m0[63u].y, _2332 * cbSceneParam._m0[63u].x)));
        float _2549 = fma(_2344, cbSceneParam._m0[60u].w, fma(_2340, cbSceneParam._m0[60u].z, fma(_2336, cbSceneParam._m0[60u].y, _2332 * cbSceneParam._m0[60u].x))) / _2548;
        float _2550 = fma(_2344, cbSceneParam._m0[61u].w, fma(_2340, cbSceneParam._m0[61u].z, fma(_2336, cbSceneParam._m0[61u].y, _2332 * cbSceneParam._m0[61u].x))) / _2548;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2549 >= cbSceneParam._m0[64u].x) && (_2550 >= cbSceneParam._m0[64u].y)) && (_2549 <= cbSceneParam._m0[64u].z)) && (_2550 <= cbSceneParam._m0[64u].w))
        {
            float _2688 = fma(_2344, cbSceneParam._m0[62u].w, fma(_2340, cbSceneParam._m0[62u].z, fma(_2336, cbSceneParam._m0[62u].y, _2332 * cbSceneParam._m0[62u].x))) / _2548;
            float _2692 = isnan(cbSceneParam._m0[41u].w) ? _2688 : (isnan(_2688) ? cbSceneParam._m0[41u].w : max(_2688, cbSceneParam._m0[41u].w));
            float _2735 = (cbSceneParam._m0[33u].x - sqrt(((_2346 * _2346) + (_2345 * _2345)) + (_2347 * _2347))) * cbSceneParam._m0[33u].y;
            float _4950 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
            float _2742 = (isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2549, cbSceneParam._m0[33u].w + _2550), _2692), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2549, _2550 - cbSceneParam._m0[33u].z), _2692), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2549 - cbSceneParam._m0[33u].z, _2550 - cbSceneParam._m0[33u].w), _2692), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2549 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2550), _2692), 0.0)).x), vec4(0.25)));
            float _2746 = 1.0 - (_2742 * cbSceneParam._m0[34u].x);
            float _2747 = 1.0 - (_2742 * cbSceneParam._m0[34u].y);
            float _2748 = 1.0 - (_2742 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2748) ? _2496 : (isnan(_2496) ? _2748 : min(_2496, _2748));
            frontier_phi_37_36_ladder_1 = isnan(_2747) ? _2495 : (isnan(_2495) ? _2747 : min(_2495, _2747));
            frontier_phi_37_36_ladder_2 = isnan(_2746) ? _2494 : (isnan(_2494) ? _2746 : min(_2494, _2746));
        }
        else
        {
            frontier_phi_37_36_ladder = _2496;
            frontier_phi_37_36_ladder_1 = _2495;
            frontier_phi_37_36_ladder_2 = _2494;
        }
        _2560 = frontier_phi_37_36_ladder_2;
        _2562 = frontier_phi_37_36_ladder_1;
        _2564 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2560 = _2494;
        _2562 = _2495;
        _2564 = _2496;
    }
    uvec4 _2569 = floatBitsToUint(cbInstanceData._m0[_1204 + 5u]);
    uint _2571 = _2569.x * 14u;
    uint _2572 = _2571 + 13u;
    float _2579 = _1244 + (-1.0);
    float _2584 = (cbLight._m0[_2572].x * _2579) + 1.0;
    float _2585 = (cbLight._m0[_2572].y * _2579) + 1.0;
    float _2586 = (cbLight._m0[_2572].z * _2579) + 1.0;
    float _2587 = (cbLight._m0[_2572].w * _2579) + 1.0;
    uint _2588 = _2571 + 5u;
    float _2594 = isnan(1.0) ? _2585 : (isnan(_2585) ? 1.0 : min(_2585, 1.0));
    uint _2598 = _2571 + 4u;
    float _2607 = isnan(1.0) ? _2584 : (isnan(_2584) ? 1.0 : min(_2584, 1.0));
    uint _2611 = _2571 | 1u;
    float _2622 = dot(vec3(cbLight._m0[_2571].xyz), vec3(_1065, _1066, _1067));
    float _2625 = dot(vec3(cbLight._m0[_2611].xyz), vec3(_1065, _1066, _1067));
    float _4986 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
    float _4997 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
    float _2630 = (isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0))) * 0.3183098733425140380859375;
    float _2632 = (isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0))) * 0.3183098733425140380859375;
    float _2639 = ((cbLight._m0[_2588].x * _2594) * _2632) + (((cbLight._m0[_2598].x * _2560) * _2607) * _2630);
    float _2640 = ((_2594 * cbLight._m0[_2588].y) * _2632) + (((cbLight._m0[_2598].y * _2562) * _2607) * _2630);
    float _2641 = ((_2594 * cbLight._m0[_2588].z) * _2632) + (((cbLight._m0[_2598].z * _2564) * _2607) * _2630);
    uvec4 _2645 = floatBitsToUint(cbLight._m0[_2571 + 12u]);
    bool _2647 = _2645.x == 0u;
    float _2749;
    float _2751;
    float _2753;
    if (_2647)
    {
        _2749 = _2639;
        _2751 = _2640;
        _2753 = _2641;
    }
    else
    {
        uint _2757 = _2571 + 6u;
        float _2773 = (dot(vec3(cbLight._m0[_2571 + 2u].xyz), vec3(_1065, _1066, _1067)) * 0.5) + 0.5;
        float _2774 = _2773 * _2773;
        float _5008 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
        float _2775 = isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0));
        float _2776 = isnan(1.0) ? _2586 : (isnan(_2586) ? 1.0 : min(_2586, 1.0));
        _2749 = (((cbLight._m0[_2757].x * 0.3183098733425140380859375) * _2775) * _2776) + _2639;
        _2751 = (((cbLight._m0[_2757].y * 0.3183098733425140380859375) * _2775) * _2776) + _2640;
        _2753 = (((cbLight._m0[_2757].z * 0.3183098733425140380859375) * _2775) * _2776) + _2641;
    }
    bool _2756 = _2645.y == 0u;
    float _2811;
    float _2813;
    float _2815;
    if (_2756)
    {
        _2811 = _2749;
        _2813 = _2751;
        _2815 = _2753;
    }
    else
    {
        uint _2984 = _2571 + 7u;
        float _3000 = (dot(vec3(cbLight._m0[_2571 + 3u].xyz), vec3(_1065, _1066, _1067)) * 0.5) + 0.5;
        float _3001 = _3000 * _3000;
        float _5024 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
        float _3002 = isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0));
        float _3003 = isnan(1.0) ? _2587 : (isnan(_2587) ? 1.0 : min(_2587, 1.0));
        _2811 = (((cbLight._m0[_2984].x * 0.3183098733425140380859375) * _3002) * _3003) + _2749;
        _2813 = (((cbLight._m0[_2984].y * 0.3183098733425140380859375) * _3002) * _3003) + _2751;
        _2815 = (((cbLight._m0[_2984].z * 0.3183098733425140380859375) * _3002) * _3003) + _2753;
    }
    uint _2818 = _2571 + 8u;
    float _2831 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2571].w)) * _1069) * 0.949999988079071044921875);
    float _2832 = _2831 * _2831;
    float _2833 = cbLight._m0[_2571].x + _1146;
    float _2834 = cbLight._m0[_2571].y + _1147;
    float _2835 = cbLight._m0[_2571].z + _1148;
    float _2839 = inversesqrt(dot(vec3(_2833, _2834, _2835), vec3(_2833, _2834, _2835)));
    float _2840 = _2839 * _2833;
    float _2841 = _2839 * _2834;
    float _2842 = _2839 * _2835;
    float _2843 = dot(vec3(_1065, _1066, _1067), vec3(cbLight._m0[_2571].xyz));
    float _5040 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
    float _2846 = isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0));
    float _5051 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
    float _2847 = isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0));
    float _2848 = dot(vec3(_1065, _1066, _1067), vec3(_2840, _2841, _2842));
    float _5062 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
    float _2851 = isnan(1.0) ? _5062 : (isnan(_5062) ? 1.0 : min(_5062, 1.0));
    float _2852 = dot(vec3(cbLight._m0[_2571].xyz), vec3(_2840, _2841, _2842));
    float _5073 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
    float _2856 = _2832 * _2832;
    float _2860 = ((_2851 * _2851) * (_2856 + (-1.0))) + 1.0;
    float _2868 = exp2(log2(1.0 - (isnan(1.0) ? _5073 : (isnan(_5073) ? 1.0 : min(_5073, 1.0)))) * 5.0);
    float _2869 = 0.959999978542327880859375 - _1226;
    float _2871 = 0.959999978542327880859375 - _1227;
    float _2872 = 0.959999978542327880859375 - _1228;
    float _2879 = 1.0 - _2832;
    float _2890 = (0.5 / (((_2847 * ((_2846 * _2879) + _2832)) + 9.9999999392252902907785028219223e-09) + (((_2847 * _2879) + _2832) * _2846))) * _2846;
    float _5084 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
    float _2892 = (isnan(1.0) ? _5084 : (isnan(_5084) ? 1.0 : min(_5084, 1.0))) * (_2856 / ((_2860 * _2860) * 3.141590118408203125));
    uint _2906 = _2571 + 9u;
    float _2917 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2611].w)) * _1069) * 0.949999988079071044921875);
    float _2918 = _2917 * _2917;
    float _2919 = cbLight._m0[_2611].x + _1146;
    float _2920 = cbLight._m0[_2611].y + _1147;
    float _2921 = cbLight._m0[_2611].z + _1148;
    float _2925 = inversesqrt(dot(vec3(_2919, _2920, _2921), vec3(_2919, _2920, _2921)));
    float _2926 = _2925 * _2919;
    float _2927 = _2925 * _2920;
    float _2928 = _2925 * _2921;
    float _2929 = dot(vec3(_1065, _1066, _1067), vec3(cbLight._m0[_2611].xyz));
    float _5095 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
    float _2932 = isnan(1.0) ? _5095 : (isnan(_5095) ? 1.0 : min(_5095, 1.0));
    float _2933 = dot(vec3(_1065, _1066, _1067), vec3(_2926, _2927, _2928));
    float _5106 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
    float _2936 = isnan(1.0) ? _5106 : (isnan(_5106) ? 1.0 : min(_5106, 1.0));
    float _2937 = dot(vec3(cbLight._m0[_2611].xyz), vec3(_2926, _2927, _2928));
    float _5117 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
    float _2941 = _2918 * _2918;
    float _2945 = ((_2936 * _2936) * (_2941 + (-1.0))) + 1.0;
    float _2952 = exp2(log2(1.0 - (isnan(1.0) ? _5117 : (isnan(_5117) ? 1.0 : min(_5117, 1.0)))) * 5.0);
    float _2959 = 1.0 - _2918;
    float _2969 = (0.5 / (((_2847 * ((_2932 * _2959) + _2918)) + 9.9999999392252902907785028219223e-09) + (((_2847 * _2959) + _2918) * _2932))) * _2932;
    float _5128 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
    float _2971 = (isnan(1.0) ? _5128 : (isnan(_5128) ? 1.0 : min(_5128, 1.0))) * (_2941 / ((_2945 * _2945) * 3.141590118408203125));
    float _2981 = (((((_2952 * _2869) + _1229) * cbLight._m0[_2906].x) * _2971) * _2594) + ((((cbLight._m0[_2818].x * _2560) * ((_2868 * _2869) + _1229)) * _2892) * _2607);
    float _2982 = (((((_2952 * _2871) + _1231) * cbLight._m0[_2906].y) * _2971) * _2594) + ((((cbLight._m0[_2818].y * _2562) * ((_2868 * _2871) + _1231)) * _2892) * _2607);
    float _2983 = (((((_2952 * _2872) + _1232) * cbLight._m0[_2906].z) * _2971) * _2594) + ((((cbLight._m0[_2818].z * _2564) * ((_2868 * _2872) + _1232)) * _2892) * _2607);
    float _3039;
    float _3041;
    float _3043;
    if (_2647)
    {
        _3039 = _2981;
        _3041 = _2982;
        _3043 = _2983;
    }
    else
    {
        uint _3045 = _2571 + 2u;
        uint _3049 = _2571 + 10u;
        float _3063 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3045].w)) * _1069) * 0.949999988079071044921875);
        float _3064 = _3063 * _3063;
        float _3065 = cbLight._m0[_3045].x + _1146;
        float _3066 = cbLight._m0[_3045].y + _1147;
        float _3067 = cbLight._m0[_3045].z + _1148;
        float _3071 = inversesqrt(dot(vec3(_3065, _3066, _3067), vec3(_3065, _3066, _3067)));
        float _3072 = _3071 * _3065;
        float _3073 = _3071 * _3066;
        float _3074 = _3071 * _3067;
        float _3075 = dot(vec3(_1065, _1066, _1067), vec3(cbLight._m0[_3045].xyz));
        float _5139 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
        float _3078 = isnan(1.0) ? _5139 : (isnan(_5139) ? 1.0 : min(_5139, 1.0));
        float _3079 = dot(vec3(_1065, _1066, _1067), vec3(_3072, _3073, _3074));
        float _5150 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
        float _3082 = isnan(1.0) ? _5150 : (isnan(_5150) ? 1.0 : min(_5150, 1.0));
        float _3083 = dot(vec3(cbLight._m0[_3045].xyz), vec3(_3072, _3073, _3074));
        float _5161 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
        float _3087 = _3064 * _3064;
        float _3091 = ((_3082 * _3082) * (_3087 + (-1.0))) + 1.0;
        float _3098 = exp2(log2(1.0 - (isnan(1.0) ? _5161 : (isnan(_5161) ? 1.0 : min(_5161, 1.0)))) * 5.0);
        float _3105 = 1.0 - _3064;
        float _3115 = (0.5 / (((_2847 * ((_3078 * _3105) + _3064)) + 9.9999999392252902907785028219223e-09) + (((_2847 * _3105) + _3064) * _3078))) * _3078;
        float _5172 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
        float _3117 = (isnan(1.0) ? _5172 : (isnan(_5172) ? 1.0 : min(_5172, 1.0))) * (_3087 / ((_3091 * _3091) * 3.141590118408203125));
        float _3118 = isnan(1.0) ? _2586 : (isnan(_2586) ? 1.0 : min(_2586, 1.0));
        _3039 = (((((_3098 * _2869) + _1229) * cbLight._m0[_3049].x) * _3117) * _3118) + _2981;
        _3041 = (((((_3098 * _2871) + _1231) * cbLight._m0[_3049].y) * _3117) * _3118) + _2982;
        _3043 = (((((_3098 * _2872) + _1232) * cbLight._m0[_3049].z) * _3117) * _3118) + _2983;
    }
    float _3149;
    float _3151;
    float _3153;
    if (_2756)
    {
        _3149 = _3039;
        _3151 = _3041;
        _3153 = _3043;
    }
    else
    {
        uint _3160 = _2571 + 3u;
        uint _3164 = _2571 + 11u;
        float _3178 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3160].w)) * _1069) * 0.949999988079071044921875);
        float _3179 = _3178 * _3178;
        float _3180 = cbLight._m0[_3160].x + _1146;
        float _3181 = cbLight._m0[_3160].y + _1147;
        float _3182 = cbLight._m0[_3160].z + _1148;
        float _3186 = inversesqrt(dot(vec3(_3180, _3181, _3182), vec3(_3180, _3181, _3182)));
        float _3187 = _3186 * _3180;
        float _3188 = _3186 * _3181;
        float _3189 = _3186 * _3182;
        float _3190 = dot(vec3(_1065, _1066, _1067), vec3(cbLight._m0[_3160].xyz));
        float _5188 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
        float _3193 = isnan(1.0) ? _5188 : (isnan(_5188) ? 1.0 : min(_5188, 1.0));
        float _3194 = dot(vec3(_1065, _1066, _1067), vec3(_3187, _3188, _3189));
        float _5199 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
        float _3197 = isnan(1.0) ? _5199 : (isnan(_5199) ? 1.0 : min(_5199, 1.0));
        float _3198 = dot(vec3(cbLight._m0[_3160].xyz), vec3(_3187, _3188, _3189));
        float _5210 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
        float _3202 = _3179 * _3179;
        float _3206 = ((_3197 * _3197) * (_3202 + (-1.0))) + 1.0;
        float _3213 = exp2(log2(1.0 - (isnan(1.0) ? _5210 : (isnan(_5210) ? 1.0 : min(_5210, 1.0)))) * 5.0);
        float _3220 = 1.0 - _3179;
        float _3230 = (0.5 / (((_2847 * ((_3193 * _3220) + _3179)) + 9.9999999392252902907785028219223e-09) + (((_2847 * _3220) + _3179) * _3193))) * _3193;
        float _5221 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
        float _3232 = (isnan(1.0) ? _5221 : (isnan(_5221) ? 1.0 : min(_5221, 1.0))) * (_3202 / ((_3206 * _3206) * 3.141590118408203125));
        float _3233 = isnan(1.0) ? _2587 : (isnan(_2587) ? 1.0 : min(_2587, 1.0));
        _3149 = (((((_3213 * _2869) + _1229) * cbLight._m0[_3164].x) * _3232) * _3233) + _3039;
        _3151 = (((((_3213 * _2871) + _1231) * cbLight._m0[_3164].y) * _3232) * _3233) + _3041;
        _3153 = (((((_3213 * _2872) + _1232) * cbLight._m0[_3164].z) * _3232) * _3233) + _3043;
    }
    float _3299;
    float _3301;
    float _3303;
    float _3305;
    float _3307;
    float _3309;
    if (_2569.y == 0u)
    {
        uvec4 _3254 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3255 = _3254.x;
        uint _3266 = uint((float(_3254.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1167) / _3255))) + floor(float(uint(cbSceneParam._m0[85u].x * _1166) / _3255)));
        float _3276 = (log2(_2347 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3277 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
        uint _3280 = uint(isnan(14.0) ? _3277 : (isnan(_3277) ? 14.0 : min(_3277, 14.0)));
        uvec4 _3285 = texelFetch(g_lightClusterGridBuffer, int(((_3280 << 2u) + (_3266 << 6u)) >> 2u));
        uint _3286 = _3285.x;
        uint _3287 = _3254.z;
        float _3368;
        float _3370;
        float _3372;
        float _3374;
        float _3376;
        float _3378;
        if (((((1u << ((_3287 >> 4u) & 15u)) + 4294967295u) & _3286) == 0u) || ((_3287 & 240u) == 0u))
        {
            _3368 = 0.0;
            _3370 = 0.0;
            _3372 = 0.0;
            _3374 = 0.0;
            _3376 = 0.0;
            _3378 = 0.0;
        }
        else
        {
            float _3369;
            float _3371;
            float _3373;
            float _3375;
            float _3377;
            float _3379;
            float _3521 = 0.0;
            float _3522 = 0.0;
            float _3523 = 0.0;
            float _3524 = 0.0;
            float _3525 = 0.0;
            float _3526 = 0.0;
            uint _3527 = 0u;
            uint _3536;
            bool _3537;
            for (;;)
            {
                _3536 = texelFetch(g_lightClassification, int((((_3280 << 5u) + (_3266 << 9u)) + (_3527 << 2u)) >> 2u)).x;
                _3537 = _3536 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3537)
                {
                    frontier_phi_71_pred = _3526;
                    frontier_phi_71_pred_1 = _3525;
                    frontier_phi_71_pred_2 = _3524;
                    frontier_phi_71_pred_3 = _3523;
                    frontier_phi_71_pred_4 = _3522;
                    frontier_phi_71_pred_5 = _3521;
                }
                else
                {
                    float _3666;
                    float _3667;
                    float _3668;
                    float _3669;
                    float _3670;
                    float _3671;
                    uint _3672;
                    _3666 = _3521;
                    _3667 = _3522;
                    _3668 = _3523;
                    _3669 = _3524;
                    _3670 = _3525;
                    _3671 = _3526;
                    _3672 = _3536;
                    float _3593;
                    float _3594;
                    float _3595;
                    float _3596;
                    float _3597;
                    float _3598;
                    for (;;)
                    {
                        uint _3676 = uint(findLSB(_3672)) + (_3527 << 5u);
                        uint _3673 = (_3672 + 4294967295u) & _3672;
                        uint _3678 = _3676 * 48u;
                        vec4 _3692 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3678)).x, texelFetch(g_PointLightRenderingBuffer, int(_3678 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3678 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3678 + 3u)).x));
                        uint _3698 = (_3676 * 48u) + 4u;
                        vec4 _3711 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3698)).x, texelFetch(g_PointLightRenderingBuffer, int(_3698 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3698 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3698 + 3u)).x));
                        uint _3717 = (_3676 * 48u) + 8u;
                        vec3 _3728 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3717)).x, texelFetch(g_PointLightRenderingBuffer, int(_3717 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3717 + 2u)).x));
                        float _3732 = _3692.x - _2345;
                        float _3733 = _3692.y - _2346;
                        float _3734 = _3692.z - _2347;
                        float _3735 = dot(vec3(_3732, _3733, _3734), vec3(_3732, _3733, _3734));
                        float _3738 = inversesqrt(_3735);
                        float _3739 = _3738 * _3732;
                        float _3740 = _3738 * _3733;
                        float _3741 = _3738 * _3734;
                        float _3742 = dot(vec3(_1185, _1188, _1191), vec3(_3739, _3740, _3741));
                        float _3747 = 1.0 - (_3735 * _3692.w);
                        float _5247 = isnan(0.0) ? _3747 : (isnan(_3747) ? 0.0 : max(_3747, 0.0));
                        float _3748 = isnan(1.0) ? _5247 : (isnan(_5247) ? 1.0 : min(_5247, 1.0));
                        float _3749 = sqrt(_3735) * _3711.w;
                        float _3752 = 1.39999997615814208984375 / (_3749 + 1.39999997615814208984375);
                        float _3753 = _3752 * _3752;
                        float _3756 = ((1.0 - _3753) * _3742) + _3753;
                        float _3759 = _3749 * _3749;
                        float _3763 = ((isnan(0.0) ? _3756 : (isnan(_3756) ? 0.0 : max(_3756, 0.0))) * _3748) / ((_3759 * 0.699999988079071044921875) + 1.0);
                        float _3767 = (-0.0) - _2345;
                        float _3768 = (-0.0) - _2346;
                        float _3769 = (-0.0) - _2347;
                        float _3773 = inversesqrt(dot(vec3(_3767, _3768, _3769), vec3(_3767, _3768, _3769)));
                        float _3774 = _3773 * _3767;
                        float _3775 = _3773 * _3768;
                        float _3776 = _3773 * _3769;
                        float _3783 = exp2(log2(1.0 / ((_3759 * 3.5) + 5.0)) * 0.25);
                        float _3784 = 1.0 - _1260;
                        float _3791 = sqrt(1.0 - ((1.0 - (_3784 * _3784)) * (1.0 - (_3783 * _3783))));
                        float _3792 = _3791 * _3791;
                        float _3793 = _3792 * _3792;
                        float _3794 = _3774 + _3739;
                        float _3795 = _3775 + _3740;
                        float _3796 = _3776 + _3741;
                        float _3800 = inversesqrt(dot(vec3(_3794, _3795, _3796), vec3(_3794, _3795, _3796)));
                        float _3804 = dot(vec3(_1185, _1188, _1191), vec3(_3774, _3775, _3776));
                        float _5263 = isnan(0.0) ? _3804 : (isnan(_3804) ? 0.0 : max(_3804, 0.0));
                        float _3807 = isnan(1.0) ? _5263 : (isnan(_5263) ? 1.0 : min(_5263, 1.0));
                        float _3808 = dot(vec3(_1185, _1188, _1191), vec3(_3800 * _3794, _3800 * _3795, _3800 * _3796));
                        float _5274 = isnan(0.0) ? _3808 : (isnan(_3808) ? 0.0 : max(_3808, 0.0));
                        float _3811 = isnan(1.0) ? _5274 : (isnan(_5274) ? 1.0 : min(_5274, 1.0));
                        float _3815 = ((_3811 * _3811) * (_3793 + (-1.0))) + 1.0;
                        float _3816 = _3752 * _3792;
                        float _3817 = _3816 * _3816;
                        float _3820 = ((1.0 - _3817) * _3742) + _3817;
                        float _5285 = isnan(0.0) ? _3820 : (isnan(_3820) ? 0.0 : max(_3820, 0.0));
                        float _3821 = isnan(1.0) ? _5285 : (isnan(_5285) ? 1.0 : min(_5285, 1.0));
                        float _3822 = 1.0 - _3792;
                        float _3832 = (0.5 / (((_3821 * ((_3807 * _3822) + _3792)) + 9.9999999392252902907785028219223e-09) + (((_3821 * _3822) + _3792) * _3807))) * _3821;
                        float _5296 = isnan(0.0) ? _3832 : (isnan(_3832) ? 0.0 : max(_3832, 0.0));
                        float _3843 = (((_3793 * 3.1415927410125732421875) * (isnan(1.0) ? _5296 : (isnan(_5296) ? 1.0 : min(_5296, 1.0)))) / ((_3815 * _3815) * ((_3759 * 2.1991131305694580078125) + 3.141590118408203125))) * _3748;
                        _3596 = (_3763 * _3711.x) + _3669;
                        _3597 = (_3763 * _3711.y) + _3670;
                        _3598 = (_3763 * _3711.z) + _3671;
                        _3593 = (_3843 * _3728.x) + _3666;
                        _3594 = (_3843 * _3728.y) + _3667;
                        _3595 = (_3843 * _3728.z) + _3668;
                        if (_3673 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3666 = _3593;
                            _3667 = _3594;
                            _3668 = _3595;
                            _3669 = _3596;
                            _3670 = _3597;
                            _3671 = _3598;
                            _3672 = _3673;
                        }
                    }
                    frontier_phi_71_pred = _3598;
                    frontier_phi_71_pred_1 = _3597;
                    frontier_phi_71_pred_2 = _3596;
                    frontier_phi_71_pred_3 = _3595;
                    frontier_phi_71_pred_4 = _3594;
                    frontier_phi_71_pred_5 = _3593;
                }
                _3379 = frontier_phi_71_pred;
                _3377 = frontier_phi_71_pred_1;
                _3375 = frontier_phi_71_pred_2;
                _3373 = frontier_phi_71_pred_3;
                _3371 = frontier_phi_71_pred_4;
                _3369 = frontier_phi_71_pred_5;
                uint _3528 = _3527 + 1u;
                if (_3528 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3521 = _3369;
                    _3522 = _3371;
                    _3523 = _3373;
                    _3524 = _3375;
                    _3525 = _3377;
                    _3526 = _3379;
                    _3527 = _3528;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3368 = _3369;
            _3370 = _3371;
            _3372 = _3373;
            _3374 = _3375;
            _3376 = _3377;
            _3378 = _3379;
        }
        uvec4 _3382 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3383 = _3382.z;
        uint _3385 = (_3383 >> 8u) & 15u;
        float _3489;
        float _3491;
        float _3493;
        float _3495;
        float _3497;
        float _3499;
        if (((4294967295u << _3385) & _3286) == 0u)
        {
            _3489 = _3368;
            _3491 = _3370;
            _3493 = _3372;
            _3495 = _3374;
            _3497 = _3376;
            _3499 = _3378;
        }
        else
        {
            float _3514 = inversesqrt(dot(vec3(_2345, _2346, _2347), vec3(_2345, _2346, _2347)));
            float _3515 = _3514 * _2345;
            float _3516 = _3514 * _2346;
            float _3517 = _3514 * _2347;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3385 < ((_3383 >> 12u) & 15u))
            {
                float _3490;
                float _3492;
                float _3494;
                float _3496;
                float _3498;
                float _3500;
                float _3649 = _3368;
                float _3650 = _3370;
                float _3651 = _3372;
                float _3652 = _3374;
                float _3653 = _3376;
                float _3654 = _3378;
                uint _3655 = _3385;
                uint _3664;
                bool _3665;
                for (;;)
                {
                    _3664 = texelFetch(g_lightClassification, int((((_3280 << 5u) + (_3266 << 9u)) + (_3655 << 2u)) >> 2u)).x;
                    _3665 = _3664 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3665)
                    {
                        frontier_phi_82_pred = _3654;
                        frontier_phi_82_pred_1 = _3653;
                        frontier_phi_82_pred_2 = _3652;
                        frontier_phi_82_pred_3 = _3651;
                        frontier_phi_82_pred_4 = _3650;
                        frontier_phi_82_pred_5 = _3649;
                    }
                    else
                    {
                        float _3857;
                        float _3858;
                        float _3859;
                        float _3860;
                        float _3861;
                        float _3862;
                        float _4150;
                        float _4151;
                        float _4152;
                        float _4153;
                        float _4154;
                        float _4155;
                        float _3870 = _3649;
                        float _3871 = _3650;
                        float _3872 = _3651;
                        float _3873 = _3652;
                        float _3874 = _3653;
                        float _3875 = _3654;
                        uint _3876 = _3664;
                        uint _3877;
                        vec4 _3902;
                        float _3903;
                        vec4 _3918;
                        vec3 _3930;
                        vec4 _3945;
                        vec4 _3960;
                        float _4006;
                        bool _4007;
                        for (;;)
                        {
                            uint _3887 = ((_3655 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3876));
                            _3877 = (_3876 + 4294967295u) & _3876;
                            uint _3889 = _3887 * 40u;
                            _3902 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3889)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3889 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3889 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3889 + 3u)).x));
                            _3903 = _3902.w;
                            uint _3905 = (_3887 * 40u) + 4u;
                            _3918 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3905)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3905 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3905 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3905 + 3u)).x));
                            uint _3920 = (_3887 * 40u) + 8u;
                            _3930 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3920)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3920 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3920 + 2u)).x));
                            uint _3932 = (_3887 * 40u) + 16u;
                            _3945 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3932)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3932 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3932 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3932 + 3u)).x));
                            uint _3947 = (_3887 * 40u) + 20u;
                            _3960 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3947 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3947 + 3u)).x));
                            uint _3962 = (_3887 * 40u) + 24u;
                            vec4 _3975 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3962)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3962 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3962 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3962 + 3u)).x));
                            uint _3981 = (_3887 * 40u) + 28u;
                            vec4 _3994 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3981)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3981 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3981 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3981 + 3u)).x));
                            _4006 = fma(_2347, _3994.z, fma(_2346, _3994.y, _3994.x * _2345)) + _3994.w;
                            _4007 = !((fma(_2347, _3975.z, fma(_2346, _3975.y, _3975.x * _2345)) + _3975.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_4007)
                            {
                                float _4034 = _3902.x - _2345;
                                float _4035 = _3902.y - _2346;
                                float _4036 = _3902.z - _2347;
                                float _4037 = dot(vec3(_4034, _4035, _4036), vec3(_4034, _4035, _4036));
                                float _4040 = inversesqrt(_4037);
                                float _4041 = _4040 * _4034;
                                float _4042 = _4040 * _4035;
                                float _4043 = _4040 * _4036;
                                float _4047 = 1.0 - (_4037 / (_3903 * _3903));
                                float _5307 = isnan(0.0) ? _4047 : (isnan(_4047) ? 0.0 : max(_4047, 0.0));
                                float _4048 = isnan(1.0) ? _5307 : (isnan(_5307) ? 1.0 : min(_5307, 1.0));
                                float _4052 = sqrt(_4037) * _3918.w;
                                float _4054 = 1.39999997615814208984375 / (_4052 + 1.39999997615814208984375);
                                float _4055 = _4054 * _4054;
                                float _4058 = ((1.0 - _4055) * dot(vec3(_4041, _4042, _4043), vec3(_1185, _1188, _1191))) + _4055;
                                float _4061 = _4052 * _4052;
                                float _4065 = (fma(_2347, _3945.z, fma(_2346, _3945.y, _3945.x * _2345)) + _3945.w) / _4006;
                                float _4066 = (fma(_2347, _3960.z, fma(_2346, _3960.y, _3960.x * _2345)) + _3960.w) / _4006;
                                float _4070 = 1.0 - dot(vec2(_4065, _4066), vec2(_4065, _4066));
                                float _5323 = isnan(0.0) ? _4070 : (isnan(_4070) ? 0.0 : max(_4070, 0.0));
                                float _4071 = isnan(1.0) ? _5323 : (isnan(_5323) ? 1.0 : min(_5323, 1.0));
                                float _4072 = _4071 * (((isnan(0.0) ? _4058 : (isnan(_4058) ? 0.0 : max(_4058, 0.0))) * _4048) / ((_4061 * 0.699999988079071044921875) + 1.0));
                                float _4084 = exp2(log2(1.0 / ((_4061 * 3.5) + 5.0)) * 0.25);
                                float _4085 = 1.0 - _1260;
                                float _4092 = sqrt(1.0 - ((1.0 - (_4085 * _4085)) * (1.0 - (_4084 * _4084))));
                                float _4093 = _4092 * _4092;
                                float _4094 = _4093 * _4093;
                                float _4095 = _4041 - _3515;
                                float _4096 = _4042 - _3516;
                                float _4097 = _4043 - _3517;
                                float _4101 = inversesqrt(dot(vec3(_4095, _4096, _4097), vec3(_4095, _4096, _4097)));
                                float _4105 = dot(vec3(_1185, _1188, _1191), vec3((-0.0) - _3515, (-0.0) - _3516, (-0.0) - _3517));
                                float _5334 = isnan(0.0) ? _4105 : (isnan(_4105) ? 0.0 : max(_4105, 0.0));
                                float _4108 = isnan(1.0) ? _5334 : (isnan(_5334) ? 1.0 : min(_5334, 1.0));
                                float _4109 = dot(vec3(_1185, _1188, _1191), vec3(_4101 * _4095, _4101 * _4096, _4101 * _4097));
                                float _5345 = isnan(0.0) ? _4109 : (isnan(_4109) ? 0.0 : max(_4109, 0.0));
                                float _4112 = isnan(1.0) ? _5345 : (isnan(_5345) ? 1.0 : min(_5345, 1.0));
                                float _4116 = ((_4112 * _4112) * (_4094 + (-1.0))) + 1.0;
                                float _4117 = _4054 * _4093;
                                float _4118 = _4117 * _4117;
                                float _4124 = ((1.0 - _4118) * dot(vec3(_1185, _1188, _1191), vec3(_4041, _4042, _4043))) + _4118;
                                float _5356 = isnan(0.0) ? _4124 : (isnan(_4124) ? 0.0 : max(_4124, 0.0));
                                float _4125 = isnan(1.0) ? _5356 : (isnan(_5356) ? 1.0 : min(_5356, 1.0));
                                float _4126 = 1.0 - _4093;
                                float _4136 = (0.5 / (((_4125 * ((_4108 * _4126) + _4093)) + 9.9999999392252902907785028219223e-09) + (((_4125 * _4126) + _4093) * _4108))) * _4125;
                                float _5367 = isnan(0.0) ? _4136 : (isnan(_4136) ? 0.0 : max(_4136, 0.0));
                                float _4146 = (_4071 * _4048) * (((_4094 * 3.1415927410125732421875) * (isnan(1.0) ? _5367 : (isnan(_5367) ? 1.0 : min(_5367, 1.0)))) / ((_4116 * _4116) * ((_4061 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4072 * _3918.z;
                                frontier_phi_88_pred_1 = _4072 * _3918.y;
                                frontier_phi_88_pred_2 = _4072 * _3918.x;
                                frontier_phi_88_pred_3 = _4146 * _3930.z;
                                frontier_phi_88_pred_4 = _4146 * _3930.y;
                                frontier_phi_88_pred_5 = _4146 * _3930.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4155 = frontier_phi_88_pred;
                            _4154 = frontier_phi_88_pred_1;
                            _4153 = frontier_phi_88_pred_2;
                            _4152 = frontier_phi_88_pred_3;
                            _4151 = frontier_phi_88_pred_4;
                            _4150 = frontier_phi_88_pred_5;
                            _3860 = _4153 + _3873;
                            _3861 = _4154 + _3874;
                            _3862 = _4155 + _3875;
                            _3857 = _4150 + _3870;
                            _3858 = _4151 + _3871;
                            _3859 = _4152 + _3872;
                            if (_3877 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3870 = _3857;
                                _3871 = _3858;
                                _3872 = _3859;
                                _3873 = _3860;
                                _3874 = _3861;
                                _3875 = _3862;
                                _3876 = _3877;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3862;
                        frontier_phi_82_pred_1 = _3861;
                        frontier_phi_82_pred_2 = _3860;
                        frontier_phi_82_pred_3 = _3859;
                        frontier_phi_82_pred_4 = _3858;
                        frontier_phi_82_pred_5 = _3857;
                    }
                    _3500 = frontier_phi_82_pred;
                    _3498 = frontier_phi_82_pred_1;
                    _3496 = frontier_phi_82_pred_2;
                    _3494 = frontier_phi_82_pred_3;
                    _3492 = frontier_phi_82_pred_4;
                    _3490 = frontier_phi_82_pred_5;
                    uint _3656 = _3655 + 1u;
                    if (_3656 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3649 = _3490;
                        _3650 = _3492;
                        _3651 = _3494;
                        _3652 = _3496;
                        _3653 = _3498;
                        _3654 = _3500;
                        _3655 = _3656;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3496;
                frontier_phi_63_64_ladder_1 = _3500;
                frontier_phi_63_64_ladder_2 = _3498;
                frontier_phi_63_64_ladder_3 = _3494;
                frontier_phi_63_64_ladder_4 = _3492;
                frontier_phi_63_64_ladder_5 = _3490;
            }
            else
            {
                frontier_phi_63_64_ladder = _3374;
                frontier_phi_63_64_ladder_1 = _3378;
                frontier_phi_63_64_ladder_2 = _3376;
                frontier_phi_63_64_ladder_3 = _3372;
                frontier_phi_63_64_ladder_4 = _3370;
                frontier_phi_63_64_ladder_5 = _3368;
            }
            _3489 = frontier_phi_63_64_ladder_5;
            _3491 = frontier_phi_63_64_ladder_4;
            _3493 = frontier_phi_63_64_ladder_3;
            _3495 = frontier_phi_63_64_ladder;
            _3497 = frontier_phi_63_64_ladder_2;
            _3499 = frontier_phi_63_64_ladder_1;
        }
        float _3504 = isnan(1.0) ? _1244 : (isnan(_1244) ? 1.0 : min(_1244, 1.0));
        _3299 = (_3504 * _3495) + _2811;
        _3301 = (_3504 * _3497) + _2813;
        _3303 = (_3504 * _3499) + _2815;
        _3305 = ((_3489 * _1229) * _3504) + _3149;
        _3307 = ((_3491 * _1231) * _3504) + _3151;
        _3309 = ((_3493 * _1232) * _3504) + _3153;
    }
    else
    {
        _3299 = _2811;
        _3301 = _2813;
        _3303 = _2815;
        _3305 = _3149;
        _3307 = _3151;
        _3309 = _3153;
    }
    float _5383 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
    float _5394 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
    float _5405 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
    float _5416 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _3327 = ((isnan(1.0) ? _5383 : (isnan(_5383) ? 1.0 : min(_5383, 1.0))) * (_3299 + ((isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0))) * _1244))) + ((_3305 + ((isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0))) * _2079)) * cbPerFrame._m0[3u].x);
    float _3328 = ((isnan(1.0) ? _5394 : (isnan(_5394) ? 1.0 : min(_5394, 1.0))) * (_3301 + ((isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0))) * _1244))) + ((_3307 + ((isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0))) * _2079)) * cbPerFrame._m0[3u].x);
    float _3329 = ((isnan(1.0) ? _5405 : (isnan(_5405) ? 1.0 : min(_5405, 1.0))) * (_3303 + ((isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0))) * _1244))) + ((_3309 + ((isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0))) * _2079)) * cbPerFrame._m0[3u].x);
    float _3334 = cbInstanceData._m0[_1204 + 6u].w * (isnan(1.0) ? _5416 : (isnan(_5416) ? 1.0 : min(_5416, 1.0)));
    float _3339 = _1166 / cbSceneParam._m0[86u].x;
    float _3340 = _1167 / cbSceneParam._m0[86u].y;
    vec4 _3354 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3339, _3340, (log2((isnan(cbSceneParam._m0[77u].w) ? _1089 : (isnan(_1089) ? cbSceneParam._m0[77u].w : min(_1089, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3356 = _3354.x;
    float _3357 = _3354.y;
    float _3358 = _3354.z;
    float _3359 = _3354.w;
    float _3431;
    float _3433;
    float _3435;
    float _3437;
    if (_1089 > cbSceneParam._m0[78u].w)
    {
        float _3393 = isnan(_1089) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1089 : min(cbSceneParam._m0[80u].w, _1089));
        float _3394 = _3393 / _1089;
        float _3405 = _3394 * _1139;
        float _3406 = _1140 * _3394;
        float _3407 = (-0.0) - _3406;
        float _3409 = _3394 * _1141;
        float _3411 = (cbSceneParam._m0[77u].w * _3407) / _3393;
        float _3412 = _3411 + cbSceneParam._m0[79u].w;
        float _3413 = cbSceneParam._m0[79u].w - _3406;
        float _3419 = sqrt(((_3405 * _3405) + (_3406 * _3406)) + (_3409 * _3409));
        float _3422 = (1.0 - (cbSceneParam._m0[77u].w / _3393)) * _3419;
        float _3427 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3429 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3606;
        if (abs((_3407 - _3411) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3606 = ((((_3412 > 0.0) ? exp2(_3427 * _3412) : (2.0 - exp2(_3429 * _3412))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3422;
        }
        else
        {
            float _3550 = 1.0 / cbSceneParam._m0[80u].x;
            float _3551 = isnan(_3413) ? _3412 : (isnan(_3412) ? _3413 : max(_3412, _3413));
            float _3552 = isnan(_3413) ? _3412 : (isnan(_3412) ? _3413 : min(_3412, _3413));
            float _3561 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : min(_3551, 0.0));
            float _3562 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : min(_3552, 0.0));
            _3606 = ((abs(_3419 / _3407) * cbSceneParam._m0[80u].y) * ((((_3561 - _3562) * 2.0) - ((exp2(_3427 * (isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0)))) - exp2(_3427 * (isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0))))) * _3550)) - ((exp2(_3429 * _3561) - exp2(_3429 * _3562)) * _3550))) + (_3422 * cbSceneParam._m0[80u].z);
        }
        vec4 _3608 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3339, _3340, 1.0), 0.0);
        float _3617 = exp2((_3606 * (-1.44269502162933349609375)) * (1.0 - _3608.w));
        float _3618 = log2(_3617);
        float _3634 = log2(_3359);
        _3431 = (exp2(_3634 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3618 * cbSceneParam._m0[78u].x)) * _3608.x) / cbSceneParam._m0[78u].x)) + _3356;
        _3433 = (exp2(_3634 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3618 * cbSceneParam._m0[78u].y)) * _3608.y) / cbSceneParam._m0[78u].y)) + _3357;
        _3435 = (exp2(_3634 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3618 * cbSceneParam._m0[78u].z)) * _3608.z) / cbSceneParam._m0[78u].z)) + _3358;
        _3437 = _3617 * _3359;
    }
    else
    {
        _3431 = _3356;
        _3433 = _3357;
        _3435 = _3358;
        _3437 = _3359;
    }
    bool _3644;
    vec4 _3447;
    vec4 _3469;
    float _3471;
    float _3475;
    float _3476;
    float _3477;
    float _3478;
    bool _3488;
    for (;;)
    {
        _3447 = cbMatDynParam._m0[0u];
        float _3449 = roundEven(_3447.y);
        bool _3450 = _3449 == 3.0;
        float _3451 = log2(_3437);
        float _3458 = exp2(_3451 * cbSceneParam._m0[78u].x) * _3327;
        float _3459 = exp2(_3451 * cbSceneParam._m0[78u].y) * _3328;
        float _3460 = exp2(_3451 * cbSceneParam._m0[78u].z) * _3329;
        float _3467 = _1155 + (-0.5);
        _3469 = cbMtdParam._m0[1u];
        _3471 = _3469.y * _3467;
        float _3474 = (_3449 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3475 = _3474 * (_3450 ? _3458 : (_3458 + (cbSceneParam._m0[72u].w * _3431)));
        _3476 = _3474 * (_3450 ? _3459 : (_3459 + (cbSceneParam._m0[72u].w * _3433)));
        _3477 = _3474 * (_3450 ? _3460 : (_3460 + (cbSceneParam._m0[72u].w * _3435)));
        _3478 = _3467 * 0.999000012874603271484375;
        _3488 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3488)
        {
            if ((cbInstanceData._m0[_1204 + 7u].x + _3478) < 0.5)
            {
                _3644 = true;
                break;
            }
        }
        uint _3585 = _1205 + uint(_3447.w);
        if ((cbInstanceData._m0[_3585].w < 1.0) && ((cbInstanceData._m0[_3585].w + _3478) < 0.5))
        {
            _3644 = true;
            break;
        }
        if ((_3471 + 1.0) < _3469.x)
        {
            _3644 = true;
            break;
        }
        _3644 = false;
        break;
    }
    float _3848;
    if (_3644)
    {
        discard_state = true;
        _3848 = 0.0;
    }
    else
    {
        _3848 = _3334;
    }
    SV_Target.x = _3475;
    SV_Target.y = _3476;
    SV_Target.z = _3477;
    SV_Target.w = _3848;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3334;
    discard_exit();
}


