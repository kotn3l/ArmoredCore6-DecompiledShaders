#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24;
layout(set = 0, binding = 12) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 13) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 18) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in float TEXCOORD_8;
layout(location = 7, component = 1) in float TEXCOORD_9;
layout(location = 7, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1567;
float _3946;
float _3947;
float _3948;
float _3949;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _317 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _321 = _317.z;
    float _334 = exp2(log2((1.0 - _321) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _335 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _336 = isnan(1.0) ? _335 : (isnan(_335) ? 1.0 : min(_335, 1.0));
    vec4 _353 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _365 = exp2(log2(_353.w * cbMtdParam._m0[29u].y) * cbMtdParam._m0[23u].x);
    float _366 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _367 = isnan(1.0) ? _366 : (isnan(_366) ? 1.0 : min(_366, 1.0));
    float _376 = exp2(log2(cbMtdParam._m0[23u].y * _321) * cbMtdParam._m0[22u].y);
    float _377 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _378 = isnan(1.0) ? _377 : (isnan(_377) ? 1.0 : min(_377, 1.0));
    float _399 = roundEven(5.0 - ((texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _400 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _401 = isnan(4.0) ? _400 : (isnan(_400) ? 4.0 : min(_400, 4.0));
    float _413 = floor(_401);
    vec4 _416 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w, _413));
    vec4 _440 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _451 = cbMtdParam._m0[9u].x * _440.x;
    float _452 = cbMtdParam._m0[9u].y * _440.y;
    float _453 = cbMtdParam._m0[9u].z * _440.z;
    float _460 = (((cbMtdParam._m0[10u].x * _416.x) - _451) * _378) + _451;
    float _461 = (((cbMtdParam._m0[10u].y * _416.y) - _452) * _378) + _452;
    float _462 = (((cbMtdParam._m0[10u].z * _416.z) - _453) * _378) + _453;
    float _468 = exp2(log2(_317.w) * cbMtdParam._m0[23u].w);
    vec4 _481 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _501 = (((cbMtdParam._m0[16u].x * _481.x) - _460) * _468) + _460;
    float _502 = (((cbMtdParam._m0[16u].y * _481.y) - _461) * _468) + _461;
    float _503 = (((cbMtdParam._m0[16u].z * _481.z) - _462) * _468) + _462;
    vec4 _516 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _536 = (((cbMtdParam._m0[19u].x * _516.x) - _501) * _367) + _501;
    float _537 = (((cbMtdParam._m0[19u].y * _516.y) - _502) * _367) + _502;
    float _538 = (((cbMtdParam._m0[19u].z * _516.z) - _503) * _367) + _503;
    vec4 _551 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _576 = (_353.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _551.x) - _536) * _336) + _536);
    float _578 = (_353.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _551.y) - _537) * _336) + _537);
    float _580 = (_353.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _551.z) - _538) * _336) + _538);
    vec4 _593 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _612 = TEXCOORD_5.x - ((cbMtdParam._m0[24u].x * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625));
    float _614 = _612 * (cbMtdParam._m0[24u].z + 1.0);
    float _3998 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _615 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _622 = (_615 * ((cbMtdParam._m0[11u].x * _593.x) - _576)) + _576;
    float _623 = (((cbMtdParam._m0[11u].y * _593.y) - _578) * _615) + _578;
    float _624 = (((cbMtdParam._m0[11u].z * _593.z) - _580) * _615) + _580;
    float _628 = cbMtdParam._m0[28u].x * TEXCOORD_8;
    float _636 = (_628 - (((texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _628))) * (cbMtdParam._m0[27u].w + 1.0);
    float _4009 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _637 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _644 = ((cbMtdParam._m0[21u].x - _622) * _637) + _622;
    float _645 = ((cbMtdParam._m0[21u].y - _623) * _637) + _623;
    float _646 = ((cbMtdParam._m0[21u].z - _624) * _637) + _624;
    vec4 _659 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24, SS_ClampLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.z) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.w) + cbTextureTilingScale._m0[11u].w));
    float _667 = (_659.x + (-1.0)) + (cbMtdParam._m0[28u].y * 2.0);
    float _4020 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _673 = exp2(log2(cbMtdParam._m0[28u].w * (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0)))) * cbMtdParam._m0[28u].z);
    float _4031 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _674 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _211[5];
    float _212[5];
    _211[0u] = cbMtdParam._m0[29u].z;
    _212[0u] = cbMtdParam._m0[29u].w;
    _211[1u] = cbMtdParam._m0[31u].z;
    _212[1u] = cbMtdParam._m0[31u].w;
    _211[2u] = cbMtdParam._m0[31u].x;
    _212[2u] = cbMtdParam._m0[31u].y;
    _211[3u] = cbMtdParam._m0[30u].z;
    _212[3u] = cbMtdParam._m0[30u].w;
    _211[4u] = cbMtdParam._m0[30u].x;
    _212[4u] = cbMtdParam._m0[30u].y;
    float _714 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    uint _716 = uint(int(isnan(4.0) ? _714 : (isnan(_714) ? 4.0 : min(_714, 4.0))));
    float _723 = ((_212[_716] - cbMtdParam._m0[22u].z) * _378) + cbMtdParam._m0[22u].z;
    float _726 = ((cbMtdParam._m0[22u].w - _723) * _468) + _723;
    float _729 = ((cbMtdParam._m0[25u].x - _726) * _367) + _726;
    float _732 = ((cbMtdParam._m0[26u].x - _729) * _336) + _729;
    float _737 = (cbMtdParam._m0[24u].y + 1.0) * _612;
    float _4052 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _738 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _740 = _732 - (_732 * _738);
    float _742 = _740 - (_740 * _628);
    vec4 _756 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w, _413));
    vec4 _774 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _776 = _774.x;
    float _777 = _774.y;
    float _782 = cbMtdParam._m0[22u].x + _774.z;
    float _785 = (((_756.z + _211[_716]) - _782) * _378) + _782;
    vec4 _798 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _809 = (((_798.z - _785) + cbMtdParam._m0[29u].x) * _468) + _785;
    float _814 = ((((_321 * 2.0) * _809) - _809) * cbMtdParam._m0[24u].w) + _809;
    vec4 _826 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _837 = (((cbMtdParam._m0[23u].z + _826.z) - _814) * _367) + _814;
    vec4 _850 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _861 = (((_850.z - _837) + cbMtdParam._m0[26u].y) * _336) + _837;
    vec4 _873 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _884 = ((_873.z - _861) * _738) + _861;
    vec4 _899 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _913 = ((cbMtdParam._m0[27u].y * _628) * ((_899.z * cbMtdParam._m0[27u].x) - _884)) + _884;
    float _928 = ((_756.x - _776) * _378) + _776;
    float _929 = ((_756.y - _777) * _378) + _777;
    float _934 = ((_798.x - _928) * _468) + _928;
    float _935 = ((_798.y - _929) * _468) + _929;
    float _940 = ((_826.x - _934) * _367) + _934;
    float _941 = ((_826.y - _935) * _367) + _935;
    float _950 = ((((_850.x - _940) * _336) + _940) * 2.0) + (-1.0);
    float _951 = ((((_850.y - _941) * _336) + _941) * 2.0) + (-1.0);
    float _952 = dot(vec2(_950, _951), vec2(_950, _951));
    float _4063 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _957 = sqrt(1.0 - (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))));
    float _973 = (((cbMtdParam._m0[25u].y * ((_317.x * 2.0) + (-1.0))) + _950) + (((((_873.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[25u].z) * _738)) + ((((_899.x * 2.0) + (-1.0)) * _628) * cbMtdParam._m0[26u].w);
    float _974 = (((cbMtdParam._m0[25u].y * ((_317.y * 2.0) + (-1.0))) + _951) + (((((_873.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[25u].z) * _738)) + (((cbMtdParam._m0[28u].x * TEXCOORD_9) * ((_899.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _977 = fma(_957, _247 * NORMAL.x, fma(_974, _254 * TANGENT.x, (_240 * _232) * _973));
    float _980 = fma(_957, _247 * NORMAL.y, fma(_974, _254 * TANGENT.y, (_240 * _233) * _973));
    float _983 = fma(_957, _247 * NORMAL.z, fma(_974, _254 * TANGENT.z, (_240 * _234) * _973));
    float _987 = inversesqrt(dot(vec3(_977, _980, _983), vec3(_977, _980, _983)));
    float _988 = _987 * _977;
    float _989 = _987 * _980;
    float _990 = _987 * _983;
    float _4074 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _991 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _4085 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _992 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _4096 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _4107 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _4118 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _4129 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _996 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _1012 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1052 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1062 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1052);
    float _1063 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1052);
    float _1064 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1052);
    float _1068 = inversesqrt(dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064)));
    float _1069 = _1062 * _1068;
    float _1070 = _1063 * _1068;
    float _1071 = _1064 * _1068;
    vec4 _1076 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1078 = _1076.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1248 = sqrt(((_1062 * _1062) + (_1063 * _1063)) + (_1064 * _1064));
        float _1254 = (cbMatDynParam._m0[5u].x * _1248) + cbMatDynParam._m0[5u].y;
        float _4140 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1259 = (cbMatDynParam._m0[5u].z * _1248) + cbMatDynParam._m0[5u].w;
        float _4151 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) - _1255)) + _1255) < ((_1078 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1089 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1090 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1108 = fma(_990, cbSceneParam._m0[5u].z, fma(_989, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _988));
    float _1111 = fma(_990, cbSceneParam._m0[6u].z, fma(_989, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _988));
    float _1114 = fma(_990, cbSceneParam._m0[7u].z, fma(_989, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _988));
    uint _1127 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1128 = _1127 + 9u;
    uint _1129 = _1128 + uint(cbMatDynParam._m0[0u].w);
    float _1135 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0)))) * cbInstanceData._m0[_1129].x;
    float _1136 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0)))) * cbInstanceData._m0[_1129].y;
    float _1137 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0)))) * cbInstanceData._m0[_1129].z;
    float _4162 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
    float _1138 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _4173 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
    float _1139 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _4184 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
    float _1140 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _1141 = 1.0 - _996;
    float _1142 = _1138 * _1141;
    float _1143 = _1139 * _1141;
    float _1144 = _1140 * _1141;
    float _1149 = (_1138 + (-0.039999999105930328369140625)) * _996;
    float _1150 = (_1139 + (-0.039999999105930328369140625)) * _996;
    float _1151 = (_1140 + (-0.039999999105930328369140625)) * _996;
    float _1152 = _1149 + 0.039999999105930328369140625;
    float _1154 = _1150 + 0.039999999105930328369140625;
    float _1155 = _1151 + 0.039999999105930328369140625;
    vec4 _1164 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1089, cbSceneParam._m0[86u].y * _1090));
    float _1167 = _1164.x * TEXCOORD_5.w;
    float _1168 = dot(vec3(_988, _989, _990), vec3(_1069, _1070, _1071));
    float _1171 = _1168 * 2.0;
    float _1175 = (_1171 * _988) - _1069;
    float _1176 = (_1171 * _989) - _1070;
    float _1177 = (_1171 * _990) - _1071;
    float _1181 = abs(dot(vec3(_1069, _1070, _1071), vec3(_988, _989, _990)));
    float _4195 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
    float _1183 = sqrt(_992);
    float _1194 = exp2((_1183 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1183 * 3.0));
    float _1200 = (1.0 - _1194) * ((_1183 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1201 = _1194 * _1183;
    float _1229 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1233 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1237 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1566;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1291 = fma(_1237, cbModelParam._m0[26u].z, fma(_1233, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1229));
        float _1295 = fma(_1237, cbModelParam._m0[27u].z, fma(_1233, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1229));
        float _1299 = fma(_1237, cbModelParam._m0[28u].z, fma(_1233, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1229));
        float _1324 = _1229 + _988;
        float _1325 = _1233 + _989;
        float _1326 = _1237 + _990;
        float _1336 = fma(_1326, cbModelParam._m0[26u].z, fma(_1325, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1324)) - _1291;
        float _1337 = fma(_1326, cbModelParam._m0[27u].z, fma(_1325, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1324)) - _1295;
        float _1338 = fma(_1326, cbModelParam._m0[28u].z, fma(_1325, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1324)) - _1299;
        float _1342 = inversesqrt(dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338)));
        float _1355 = ((_1342 * _1336) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1291 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1356 = ((_1342 * _1337) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1295 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1357 = ((_1342 * _1338) / cbModelParam._m0[34u].z) + ((((((_1299 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1360 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1355, _1356, _1357), 0.0);
        vec4 _1367 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1355, _1356, _1357), 0.0);
        vec4 _1374 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1355, _1356, _1357), 0.0);
        vec4 _1381 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1355, _1356, _1357), 0.0);
        float _1394 = exp2((_1360.w + (-0.5)) * 20.0) * 2.0;
        float _1395 = _1394 * (_1360.x + (-0.5));
        float _1396 = _1394 * (_1360.y + (-0.5));
        float _1397 = _1394 * (_1360.z + (-0.5));
        float _1404 = exp2((_1367.w + (-0.5)) * 20.0) * 2.0;
        float _1405 = _1404 * (_1367.x + (-0.5));
        float _1406 = _1404 * (_1367.y + (-0.5));
        float _1407 = _1404 * (_1367.z + (-0.5));
        float _1414 = exp2((_1374.w + (-0.5)) * 20.0) * 2.0;
        float _1415 = _1414 * (_1374.x + (-0.5));
        float _1416 = _1414 * (_1374.y + (-0.5));
        float _1417 = _1414 * (_1374.z + (-0.5));
        float _1424 = exp2((_1381.w + (-0.5)) * 20.0) * 2.0;
        float _1425 = _1424 * (_1381.x + (-0.5));
        float _1426 = _1424 * (_1381.y + (-0.5));
        float _1427 = _1424 * (_1381.z + (-0.5));
        float _1428 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1429 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1430 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1431 = _1395 * 0.5;
        float _1432 = _1405 * 0.5;
        float _1433 = _1415 * 0.5;
        float _1434 = dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433));
        float _1439 = (_1434 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1434);
        float _1448 = (dot(vec3(_988, _989, _990), vec3(_1439 * _1431, _1439 * _1432, _1439 * _1433)) + 1.0) * 0.5;
        float _4221 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1458 = sqrt(((_1432 * _1432) + (_1431 * _1431)) + (_1433 * _1433)) / (_1428 + 9.9999997473787516355514526367188e-06);
        float _4232 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1460 = _1459 * 2.0;
        float _1464 = (1.0 - _1459) / (_1459 + 1.0);
        float _4243 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1474 = ((((1.0 - _1465) * (_1460 + 2.0)) * exp2(log2(isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_1460 + 1.0))) + _1465) * _1428;
        float _1475 = _1396 * 0.5;
        float _1476 = _1406 * 0.5;
        float _1477 = _1416 * 0.5;
        float _1478 = dot(vec3(_1475, _1476, _1477), vec3(_1475, _1476, _1477));
        float _1483 = (_1478 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1478);
        float _1491 = (dot(vec3(_988, _989, _990), vec3(_1483 * _1475, _1483 * _1476, _1483 * _1477)) + 1.0) * 0.5;
        float _4254 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1500 = sqrt(((_1476 * _1476) + (_1475 * _1475)) + (_1477 * _1477)) / (_1429 + 9.9999997473787516355514526367188e-06);
        float _4265 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1502 = _1501 * 2.0;
        float _1506 = (1.0 - _1501) / (_1501 + 1.0);
        float _4276 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1516 = ((((1.0 - _1507) * (_1502 + 2.0)) * exp2(log2(isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_1502 + 1.0))) + _1507) * _1429;
        float _1517 = _1397 * 0.5;
        float _1518 = _1407 * 0.5;
        float _1519 = _1417 * 0.5;
        float _1520 = dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519));
        float _1525 = (_1520 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1520);
        float _1533 = (dot(vec3(_988, _989, _990), vec3(_1525 * _1517, _1525 * _1518, _1525 * _1519)) + 1.0) * 0.5;
        float _4287 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1542 = sqrt(((_1518 * _1518) + (_1517 * _1517)) + (_1519 * _1519)) / (_1430 + 9.9999997473787516355514526367188e-06);
        float _4298 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1544 = _1543 * 2.0;
        float _1548 = (1.0 - _1543) / (_1543 + 1.0);
        float _4309 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1558 = ((((1.0 - _1549) * (_1544 + 2.0)) * exp2(log2(isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_1544 + 1.0))) + _1549) * _1430;
        _1566 = _1397;
        _1568 = _1396;
        _1569 = _1395;
        _1570 = _1407;
        _1571 = _1406;
        _1572 = _1405;
        _1573 = _1417;
        _1574 = _1416;
        _1575 = _1415;
        _1576 = _1430;
        _1577 = _1429;
        _1578 = _1428;
        _1579 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)));
        _1580 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)));
        _1581 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)));
    }
    else
    {
        _1566 = _1567;
        _1568 = _1567;
        _1569 = _1567;
        _1570 = _1567;
        _1571 = _1567;
        _1572 = _1567;
        _1573 = _1567;
        _1574 = _1567;
        _1575 = _1567;
        _1576 = _1567;
        _1577 = _1567;
        _1578 = _1567;
        _1579 = 0.0;
        _1580 = 0.0;
        _1581 = 0.0;
    }
    float _1876;
    float _1877;
    float _1878;
    float _1879;
    float _1880;
    float _1881;
    float _1882;
    float _1883;
    float _1884;
    float _1885;
    float _1886;
    float _1887;
    float _1888;
    float _1889;
    float _1890;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1607 = fma(_1237, cbModelParam._m0[30u].z, fma(_1233, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1229));
        float _1611 = fma(_1237, cbModelParam._m0[31u].z, fma(_1233, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1229));
        float _1615 = fma(_1237, cbModelParam._m0[32u].z, fma(_1233, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1229));
        float _1638 = _1229 + _988;
        float _1639 = _1233 + _989;
        float _1640 = _1237 + _990;
        float _1650 = fma(_1640, cbModelParam._m0[30u].z, fma(_1639, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1638)) - _1607;
        float _1651 = fma(_1640, cbModelParam._m0[31u].z, fma(_1639, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1638)) - _1611;
        float _1652 = fma(_1640, cbModelParam._m0[32u].z, fma(_1639, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1638)) - _1615;
        float _1656 = inversesqrt(dot(vec3(_1650, _1651, _1652), vec3(_1650, _1651, _1652)));
        float _1669 = ((_1656 * _1650) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1607 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1670 = ((_1656 * _1651) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1611 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1671 = ((_1656 * _1652) / cbModelParam._m0[35u].z) + ((((((_1615 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1673 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1669, _1670, _1671), 0.0);
        vec4 _1680 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1669, _1670, _1671), 0.0);
        vec4 _1687 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1669, _1670, _1671), 0.0);
        vec4 _1694 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1669, _1670, _1671), 0.0);
        float _1706 = exp2((_1673.w + (-0.5)) * 20.0) * 2.0;
        float _1707 = _1706 * (_1673.x + (-0.5));
        float _1708 = _1706 * (_1673.y + (-0.5));
        float _1709 = _1706 * (_1673.z + (-0.5));
        float _1716 = exp2((_1680.w + (-0.5)) * 20.0) * 2.0;
        float _1717 = _1716 * (_1680.x + (-0.5));
        float _1718 = _1716 * (_1680.y + (-0.5));
        float _1719 = _1716 * (_1680.z + (-0.5));
        float _1726 = exp2((_1687.w + (-0.5)) * 20.0) * 2.0;
        float _1727 = _1726 * (_1687.x + (-0.5));
        float _1728 = _1726 * (_1687.y + (-0.5));
        float _1729 = _1726 * (_1687.z + (-0.5));
        float _1736 = exp2((_1694.w + (-0.5)) * 20.0) * 2.0;
        float _1737 = _1736 * (_1694.x + (-0.5));
        float _1738 = _1736 * (_1694.y + (-0.5));
        float _1739 = _1736 * (_1694.z + (-0.5));
        float _1740 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1741 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1742 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1743 = _1707 * 0.5;
        float _1744 = _1717 * 0.5;
        float _1745 = _1727 * 0.5;
        float _1746 = dot(vec3(_1743, _1744, _1745), vec3(_1743, _1744, _1745));
        float _1751 = (_1746 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1746);
        float _1759 = (dot(vec3(_988, _989, _990), vec3(_1751 * _1743, _1751 * _1744, _1751 * _1745)) + 1.0) * 0.5;
        float _4350 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1768 = sqrt(((_1744 * _1744) + (_1743 * _1743)) + (_1745 * _1745)) / (_1740 + 9.9999997473787516355514526367188e-06);
        float _4361 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1769 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1770 = _1769 * 2.0;
        float _1774 = (1.0 - _1769) / (_1769 + 1.0);
        float _4372 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1775 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1784 = ((((1.0 - _1775) * (_1770 + 2.0)) * exp2(log2(isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_1770 + 1.0))) + _1775) * _1740;
        float _1785 = _1708 * 0.5;
        float _1786 = _1718 * 0.5;
        float _1787 = _1728 * 0.5;
        float _1788 = dot(vec3(_1785, _1786, _1787), vec3(_1785, _1786, _1787));
        float _1793 = (_1788 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1788);
        float _1801 = (dot(vec3(_988, _989, _990), vec3(_1793 * _1785, _1793 * _1786, _1793 * _1787)) + 1.0) * 0.5;
        float _4383 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1810 = sqrt(((_1786 * _1786) + (_1785 * _1785)) + (_1787 * _1787)) / (_1741 + 9.9999997473787516355514526367188e-06);
        float _4394 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1811 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1812 = _1811 * 2.0;
        float _1816 = (1.0 - _1811) / (_1811 + 1.0);
        float _4405 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1817 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _1826 = ((((1.0 - _1817) * (_1812 + 2.0)) * exp2(log2(isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_1812 + 1.0))) + _1817) * _1741;
        float _1827 = _1709 * 0.5;
        float _1828 = _1719 * 0.5;
        float _1829 = _1729 * 0.5;
        float _1830 = dot(vec3(_1827, _1828, _1829), vec3(_1827, _1828, _1829));
        float _1835 = (_1830 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1830);
        float _1843 = (dot(vec3(_988, _989, _990), vec3(_1835 * _1827, _1835 * _1828, _1835 * _1829)) + 1.0) * 0.5;
        float _4416 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
        float _1852 = sqrt(((_1828 * _1828) + (_1827 * _1827)) + (_1829 * _1829)) / (_1742 + 9.9999997473787516355514526367188e-06);
        float _4427 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
        float _1853 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _1854 = _1853 * 2.0;
        float _1858 = (1.0 - _1853) / (_1853 + 1.0);
        float _4438 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
        float _1859 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1868 = ((((1.0 - _1859) * (_1854 + 2.0)) * exp2(log2(isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_1854 + 1.0))) + _1859) * _1742;
        _1876 = _1709;
        _1877 = _1708;
        _1878 = _1707;
        _1879 = _1719;
        _1880 = _1718;
        _1881 = _1717;
        _1882 = _1729;
        _1883 = _1728;
        _1884 = _1727;
        _1885 = _1742;
        _1886 = _1741;
        _1887 = _1740;
        _1888 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0)));
        _1889 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0)));
        _1890 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0)));
    }
    else
    {
        _1876 = _1567;
        _1877 = _1567;
        _1878 = _1567;
        _1879 = _1567;
        _1880 = _1567;
        _1881 = _1567;
        _1882 = _1567;
        _1883 = _1567;
        _1884 = _1567;
        _1885 = _1567;
        _1886 = _1567;
        _1887 = _1567;
        _1888 = 0.0;
        _1889 = 0.0;
        _1890 = 0.0;
    }
    float _1900 = (cbModelParam._m0[1u].x * (_1888 - _1579)) + _1579;
    float _1901 = (cbModelParam._m0[1u].x * (_1889 - _1580)) + _1580;
    float _1902 = (cbModelParam._m0[1u].x * (_1890 - _1581)) + _1581;
    float _1923 = fma(_1902, cbSceneParam._m0[89u].z, fma(_1901, cbSceneParam._m0[89u].y, _1900 * cbSceneParam._m0[89u].x));
    float _1926 = fma(_1902, cbSceneParam._m0[90u].z, fma(_1901, cbSceneParam._m0[90u].y, _1900 * cbSceneParam._m0[90u].x));
    float _1929 = fma(_1902, cbSceneParam._m0[91u].z, fma(_1901, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1900));
    float _1944 = _1175 * 0.5;
    float _1945 = _1176 * 0.5;
    float _1946 = _1177 * 0.5;
    float _1947 = dot(vec4(_1944, _1945, _1946, 1.0), vec4(_1878, _1881, _1884, _1887));
    float _1950 = dot(vec4(_1944, _1945, _1946, 1.0), vec4(_1877, _1880, _1883, _1886));
    float _1953 = dot(vec4(_1944, _1945, _1946, 1.0), vec4(_1876, _1879, _1882, _1885));
    float _1987;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1960 = dot(vec4(_1944, _1945, _1946, 1.0), vec4(_1566, _1570, _1573, _1576));
        float _1964 = dot(vec4(_1944, _1945, _1946, 1.0), vec4(_1568, _1571, _1574, _1577));
        float _1968 = dot(vec4(_1944, _1945, _1946, 1.0), vec4(_1569, _1572, _1575, _1578));
        float _1975 = dot(vec4(cbModelParam._m0[39u]), vec4(_1944, _1945, _1946, 1.0));
        _1987 = dot(vec3(isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0)), isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0)), isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1975) ? 0.0 : (isnan(0.0) ? _1975 : max(0.0, _1975))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1987 = 1.0;
    }
    float _1998;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1989 = dot(vec4(cbModelParam._m0[40u]), vec4(_1944, _1945, _1946, 1.0));
        _1998 = dot(vec3(isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0)), isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0)), isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1989) ? 0.0 : (isnan(0.0) ? _1989 : max(0.0, _1989))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1998 = 1.0;
    }
    float _2002 = (_1998 * cbModelParam._m0[1u].x) + (_1987 * (1.0 - cbModelParam._m0[1u].x));
    float _2012 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _992);
    float _2013 = isnan(_2012) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2012 : min(cbModelParam._m0[25u].z, _2012));
    float _2093;
    float _2095;
    float _2097;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2060 = fma(_1237, cbModelParam._m0[13u].z, fma(_1233, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1229)) + cbModelParam._m0[13u].w;
        float _2064 = fma(_1237, cbModelParam._m0[14u].z, fma(_1233, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1229)) + cbModelParam._m0[14u].w;
        float _2068 = fma(_1237, cbModelParam._m0[15u].z, fma(_1233, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1229)) + cbModelParam._m0[15u].w;
        float _2071 = fma(_1177, cbModelParam._m0[13u].z, fma(_1176, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1175));
        float _2074 = fma(_1177, cbModelParam._m0[14u].z, fma(_1176, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1175));
        float _2077 = fma(_1177, cbModelParam._m0[15u].z, fma(_1176, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1175));
        float _2105;
        if (_2071 > 0.0)
        {
            _2105 = abs((1.0 - _2060) / _2071);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2071 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2060 + 1.0) / _2071);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2105 = frontier_phi_17_15_ladder;
        }
        float _2307;
        if (_2074 > 0.0)
        {
            _2307 = abs((1.0 - _2064) / _2074);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2074 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2064 + 1.0) / _2074);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2307 = frontier_phi_26_22_ladder;
        }
        float _2561;
        if (_2077 > 0.0)
        {
            _2561 = abs((1.0 - _2068) / _2077);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2077 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2068 + 1.0) / _2077);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2561 = frontier_phi_38_33_ladder;
        }
        float _2563 = isnan(_2307) ? _2105 : (isnan(_2105) ? _2307 : min(_2105, _2307));
        float _2564 = isnan(_2561) ? _2563 : (isnan(_2563) ? _2561 : min(_2563, _2561));
        float _2568 = (_2564 * _2071) + _2060;
        float _2569 = (_2564 * _2074) + _2064;
        float _2570 = (_2564 * _2077) + _2068;
        float _2571 = _2564 * 9.9999997473787516355514526367188e-05;
        float _2573 = (-1.0) - _2571;
        float _2575 = _2571 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2570 > _2575) || ((_2570 < _2573) || ((_2569 > _2575) || ((_2569 < _2573) || ((_2568 < _2573) || (_2568 > _2575))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2698 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2570, cbModelParam._m0[9u].z, fma(_2569, cbModelParam._m0[9u].y, _2568 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2570, cbModelParam._m0[10u].z, fma(_2569, cbModelParam._m0[10u].y, _2568 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2570, cbModelParam._m0[11u].z, fma(_2569, cbModelParam._m0[11u].y, _2568 * cbModelParam._m0[11u].x))), _2013);
            frontier_phi_16_38_ladder = _2698.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2698.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2698.x * cbModelParam._m0[1u].y;
        }
        _2093 = frontier_phi_16_38_ladder_2;
        _2095 = frontier_phi_16_38_ladder_1;
        _2097 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2081 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1175, _1176, _1177), _2013);
        _2093 = _2081.x * cbModelParam._m0[1u].y;
        _2095 = _2081.y * cbModelParam._m0[1u].y;
        _2097 = _2081.z * cbModelParam._m0[1u].y;
    }
    float _2101 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _992);
    float _2102 = isnan(_2101) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2101 : min(cbModelParam._m0[25u].w, _2101));
    float _2191;
    float _2193;
    float _2195;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2155 = fma(_1237, cbModelParam._m0[21u].z, fma(_1233, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1229)) + cbModelParam._m0[21u].w;
        float _2159 = fma(_1237, cbModelParam._m0[22u].z, fma(_1233, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1229)) + cbModelParam._m0[22u].w;
        float _2163 = fma(_1237, cbModelParam._m0[23u].z, fma(_1233, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1229)) + cbModelParam._m0[23u].w;
        float _2166 = fma(_1177, cbModelParam._m0[21u].z, fma(_1176, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1175));
        float _2169 = fma(_1177, cbModelParam._m0[22u].z, fma(_1176, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1175));
        float _2172 = fma(_1177, cbModelParam._m0[23u].z, fma(_1176, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1175));
        float _2312;
        if (_2166 > 0.0)
        {
            _2312 = abs((1.0 - _2155) / _2166);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2166 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2155 + 1.0) / _2166);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2312 = frontier_phi_28_24_ladder;
        }
        float _2588;
        if (_2169 > 0.0)
        {
            _2588 = abs((1.0 - _2159) / _2169);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2169 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2159 + 1.0) / _2169);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2588 = frontier_phi_40_35_ladder;
        }
        float _2801;
        if (_2172 > 0.0)
        {
            _2801 = abs((1.0 - _2163) / _2172);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2172 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2163 + 1.0) / _2172);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2801 = frontier_phi_49_46_ladder;
        }
        float _2803 = isnan(_2588) ? _2312 : (isnan(_2312) ? _2588 : min(_2312, _2588));
        float _2804 = isnan(_2801) ? _2803 : (isnan(_2803) ? _2801 : min(_2803, _2801));
        float _2808 = (_2804 * _2166) + _2155;
        float _2809 = (_2804 * _2169) + _2159;
        float _2810 = (_2804 * _2172) + _2163;
        float _2811 = _2804 * 9.9999997473787516355514526367188e-05;
        float _2812 = (-1.0) - _2811;
        float _2814 = _2811 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2810 > _2814) || ((_2810 < _2812) || ((_2809 > _2814) || ((_2809 < _2812) || ((_2808 < _2812) || (_2808 > _2814))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3011 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2810, cbModelParam._m0[17u].z, fma(_2809, cbModelParam._m0[17u].y, _2808 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2810, cbModelParam._m0[18u].z, fma(_2809, cbModelParam._m0[18u].y, _2808 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2810, cbModelParam._m0[19u].z, fma(_2809, cbModelParam._m0[19u].y, _2808 * cbModelParam._m0[19u].x))), _2102);
            frontier_phi_25_49_ladder = _3011.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3011.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3011.x * cbModelParam._m0[1u].z;
        }
        _2191 = frontier_phi_25_49_ladder_2;
        _2193 = frontier_phi_25_49_ladder_1;
        _2195 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2175 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1175, _1176, _1177), _2102);
        _2191 = _2175.x * cbModelParam._m0[1u].z;
        _2193 = _2175.y * cbModelParam._m0[1u].z;
        _2195 = _2175.z * cbModelParam._m0[1u].z;
    }
    float _2208 = (((_1200 * _1152) + _1201) * _1167) * ((cbModelParam._m0[1u].w * (_2191 - _2093)) + _2093);
    float _2210 = (((_1200 * _1154) + _1201) * _1167) * ((cbModelParam._m0[1u].w * (_2193 - _2095)) + _2095);
    float _2212 = (((_1200 * _1155) + _1201) * _1167) * ((cbModelParam._m0[1u].w * (_2195 - _2097)) + _2097);
    float _2215 = fma(_2212, cbSceneParam._m0[89u].z, fma(_2210, cbSceneParam._m0[89u].y, _2208 * cbSceneParam._m0[89u].x));
    float _2218 = fma(_2212, cbSceneParam._m0[90u].z, fma(_2210, cbSceneParam._m0[90u].y, _2208 * cbSceneParam._m0[90u].x));
    float _2221 = fma(_2212, cbSceneParam._m0[91u].z, fma(_2210, cbSceneParam._m0[91u].y, _2208 * cbSceneParam._m0[91u].x));
    uvec4 _2231 = floatBitsToUint(cbInstanceData._m0[_1127 + 5u]);
    uint _2233 = _2231.x * 14u;
    uint _2234 = _2233 + 13u;
    float _2241 = _1167 + (-1.0);
    float _2246 = (cbLight._m0[_2234].x * _2241) + 1.0;
    float _2247 = (cbLight._m0[_2234].y * _2241) + 1.0;
    float _2248 = (cbLight._m0[_2234].z * _2241) + 1.0;
    float _2249 = (cbLight._m0[_2234].w * _2241) + 1.0;
    uint _2250 = _2233 + 5u;
    float _2256 = isnan(1.0) ? _2247 : (isnan(_2247) ? 1.0 : min(_2247, 1.0));
    uint _2260 = _2233 + 4u;
    float _2266 = isnan(1.0) ? _2246 : (isnan(_2246) ? 1.0 : min(_2246, 1.0));
    uint _2270 = _2233 | 1u;
    float _2281 = dot(vec3(cbLight._m0[_2233].xyz), vec3(_988, _989, _990));
    float _2284 = dot(vec3(cbLight._m0[_2270].xyz), vec3(_988, _989, _990));
    float _4574 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _4585 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2289 = (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * 0.3183098733425140380859375;
    float _2291 = (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * 0.3183098733425140380859375;
    float _2298 = ((cbLight._m0[_2250].x * _2256) * _2291) + ((cbLight._m0[_2260].x * _2266) * _2289);
    float _2299 = ((_2256 * cbLight._m0[_2250].y) * _2291) + ((_2266 * cbLight._m0[_2260].y) * _2289);
    float _2300 = ((_2256 * cbLight._m0[_2250].z) * _2291) + ((_2266 * cbLight._m0[_2260].z) * _2289);
    uvec4 _2304 = floatBitsToUint(cbLight._m0[_2233 + 12u]);
    bool _2306 = _2304.x == 0u;
    float _2317;
    float _2319;
    float _2321;
    if (_2306)
    {
        _2317 = _2298;
        _2319 = _2299;
        _2321 = _2300;
    }
    else
    {
        uint _2325 = _2233 + 6u;
        float _2341 = (dot(vec3(cbLight._m0[_2233 + 2u].xyz), vec3(_988, _989, _990)) * 0.5) + 0.5;
        float _2342 = _2341 * _2341;
        float _4596 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2343 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
        float _2344 = isnan(1.0) ? _2248 : (isnan(_2248) ? 1.0 : min(_2248, 1.0));
        _2317 = (((cbLight._m0[_2325].x * 0.3183098733425140380859375) * _2343) * _2344) + _2298;
        _2319 = (((cbLight._m0[_2325].y * 0.3183098733425140380859375) * _2343) * _2344) + _2299;
        _2321 = (((cbLight._m0[_2325].z * 0.3183098733425140380859375) * _2343) * _2344) + _2300;
    }
    bool _2324 = _2304.y == 0u;
    float _2362;
    float _2364;
    float _2366;
    if (_2324)
    {
        _2362 = _2317;
        _2364 = _2319;
        _2366 = _2321;
    }
    else
    {
        uint _2532 = _2233 + 7u;
        float _2548 = (dot(vec3(cbLight._m0[_2233 + 3u].xyz), vec3(_988, _989, _990)) * 0.5) + 0.5;
        float _2549 = _2548 * _2548;
        float _4612 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2550 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _2551 = isnan(1.0) ? _2249 : (isnan(_2249) ? 1.0 : min(_2249, 1.0));
        _2362 = (((cbLight._m0[_2532].x * 0.3183098733425140380859375) * _2550) * _2551) + _2317;
        _2364 = (((cbLight._m0[_2532].y * 0.3183098733425140380859375) * _2550) * _2551) + _2319;
        _2366 = (((cbLight._m0[_2532].z * 0.3183098733425140380859375) * _2550) * _2551) + _2321;
    }
    uint _2369 = _2233 + 8u;
    float _2382 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2233].w)) * _992) * 0.949999988079071044921875);
    float _2383 = _2382 * _2382;
    float _2384 = cbLight._m0[_2233].x + _1069;
    float _2385 = cbLight._m0[_2233].y + _1070;
    float _2386 = cbLight._m0[_2233].z + _1071;
    float _2390 = inversesqrt(dot(vec3(_2384, _2385, _2386), vec3(_2384, _2385, _2386)));
    float _2391 = _2390 * _2384;
    float _2392 = _2390 * _2385;
    float _2393 = _2390 * _2386;
    float _2394 = dot(vec3(_988, _989, _990), vec3(cbLight._m0[_2233].xyz));
    float _4628 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2397 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
    float _4639 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
    float _2398 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
    float _2399 = dot(vec3(_988, _989, _990), vec3(_2391, _2392, _2393));
    float _4650 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
    float _2402 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
    float _2403 = dot(vec3(cbLight._m0[_2233].xyz), vec3(_2391, _2392, _2393));
    float _4661 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2407 = _2383 * _2383;
    float _2411 = ((_2402 * _2402) * (_2407 + (-1.0))) + 1.0;
    float _2419 = exp2(log2(1.0 - (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0)))) * 5.0);
    float _2420 = 0.959999978542327880859375 - _1149;
    float _2422 = 0.959999978542327880859375 - _1150;
    float _2423 = 0.959999978542327880859375 - _1151;
    float _2430 = 1.0 - _2383;
    float _2441 = (0.5 / (((_2398 * ((_2397 * _2430) + _2383)) + 9.9999999392252902907785028219223e-09) + (((_2398 * _2430) + _2383) * _2397))) * _2397;
    float _4672 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2443 = (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * (_2407 / ((_2411 * _2411) * 3.141590118408203125));
    uint _2454 = _2233 + 9u;
    float _2465 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2270].w)) * _992) * 0.949999988079071044921875);
    float _2466 = _2465 * _2465;
    float _2467 = cbLight._m0[_2270].x + _1069;
    float _2468 = cbLight._m0[_2270].y + _1070;
    float _2469 = cbLight._m0[_2270].z + _1071;
    float _2473 = inversesqrt(dot(vec3(_2467, _2468, _2469), vec3(_2467, _2468, _2469)));
    float _2474 = _2473 * _2467;
    float _2475 = _2473 * _2468;
    float _2476 = _2473 * _2469;
    float _2477 = dot(vec3(_988, _989, _990), vec3(cbLight._m0[_2270].xyz));
    float _4683 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2480 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
    float _2481 = dot(vec3(_988, _989, _990), vec3(_2474, _2475, _2476));
    float _4694 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2484 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
    float _2485 = dot(vec3(cbLight._m0[_2270].xyz), vec3(_2474, _2475, _2476));
    float _4705 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2489 = _2466 * _2466;
    float _2493 = ((_2484 * _2484) * (_2489 + (-1.0))) + 1.0;
    float _2500 = exp2(log2(1.0 - (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0)))) * 5.0);
    float _2507 = 1.0 - _2466;
    float _2517 = (0.5 / (((_2398 * ((_2480 * _2507) + _2466)) + 9.9999999392252902907785028219223e-09) + (((_2398 * _2507) + _2466) * _2480))) * _2480;
    float _4716 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
    float _2519 = (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))) * (_2489 / ((_2493 * _2493) * 3.141590118408203125));
    float _2529 = (((((_2500 * _2420) + _1152) * cbLight._m0[_2454].x) * _2519) * _2256) + (((((_2419 * _2420) + _1152) * cbLight._m0[_2369].x) * _2443) * _2266);
    float _2530 = (((((_2500 * _2422) + _1154) * cbLight._m0[_2454].y) * _2519) * _2256) + (((((_2419 * _2422) + _1154) * cbLight._m0[_2369].y) * _2443) * _2266);
    float _2531 = (((((_2500 * _2423) + _1155) * cbLight._m0[_2454].z) * _2519) * _2256) + (((((_2419 * _2423) + _1155) * cbLight._m0[_2369].z) * _2443) * _2266);
    float _2593;
    float _2595;
    float _2597;
    if (_2306)
    {
        _2593 = _2529;
        _2595 = _2530;
        _2597 = _2531;
    }
    else
    {
        uint _2599 = _2233 + 2u;
        uint _2603 = _2233 + 10u;
        float _2617 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2599].w)) * _992) * 0.949999988079071044921875);
        float _2618 = _2617 * _2617;
        float _2619 = cbLight._m0[_2599].x + _1069;
        float _2620 = cbLight._m0[_2599].y + _1070;
        float _2621 = cbLight._m0[_2599].z + _1071;
        float _2625 = inversesqrt(dot(vec3(_2619, _2620, _2621), vec3(_2619, _2620, _2621)));
        float _2626 = _2625 * _2619;
        float _2627 = _2625 * _2620;
        float _2628 = _2625 * _2621;
        float _2629 = dot(vec3(_988, _989, _990), vec3(cbLight._m0[_2599].xyz));
        float _4727 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2632 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
        float _2633 = dot(vec3(_988, _989, _990), vec3(_2626, _2627, _2628));
        float _4738 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        float _2636 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
        float _2637 = dot(vec3(cbLight._m0[_2599].xyz), vec3(_2626, _2627, _2628));
        float _4749 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2641 = _2618 * _2618;
        float _2645 = ((_2636 * _2636) * (_2641 + (-1.0))) + 1.0;
        float _2652 = exp2(log2(1.0 - (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0)))) * 5.0);
        float _2659 = 1.0 - _2618;
        float _2669 = (0.5 / (((_2398 * ((_2632 * _2659) + _2618)) + 9.9999999392252902907785028219223e-09) + (((_2398 * _2659) + _2618) * _2632))) * _2632;
        float _4760 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
        float _2671 = (isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0))) * (_2641 / ((_2645 * _2645) * 3.141590118408203125));
        float _2672 = isnan(1.0) ? _2248 : (isnan(_2248) ? 1.0 : min(_2248, 1.0));
        _2593 = (((((_2652 * _2420) + _1152) * cbLight._m0[_2603].x) * _2671) * _2672) + _2529;
        _2595 = (((((_2652 * _2422) + _1154) * cbLight._m0[_2603].y) * _2671) * _2672) + _2530;
        _2597 = (((((_2652 * _2423) + _1155) * cbLight._m0[_2603].z) * _2671) * _2672) + _2531;
    }
    float _2707;
    float _2709;
    float _2711;
    if (_2324)
    {
        _2707 = _2593;
        _2709 = _2595;
        _2711 = _2597;
    }
    else
    {
        uint _2718 = _2233 + 3u;
        uint _2722 = _2233 + 11u;
        float _2736 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2718].w)) * _992) * 0.949999988079071044921875);
        float _2737 = _2736 * _2736;
        float _2738 = cbLight._m0[_2718].x + _1069;
        float _2739 = cbLight._m0[_2718].y + _1070;
        float _2740 = cbLight._m0[_2718].z + _1071;
        float _2744 = inversesqrt(dot(vec3(_2738, _2739, _2740), vec3(_2738, _2739, _2740)));
        float _2745 = _2744 * _2738;
        float _2746 = _2744 * _2739;
        float _2747 = _2744 * _2740;
        float _2748 = dot(vec3(_988, _989, _990), vec3(cbLight._m0[_2718].xyz));
        float _4776 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
        float _2751 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
        float _2752 = dot(vec3(_988, _989, _990), vec3(_2745, _2746, _2747));
        float _4787 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        float _2755 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
        float _2756 = dot(vec3(cbLight._m0[_2718].xyz), vec3(_2745, _2746, _2747));
        float _4798 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
        float _2760 = _2737 * _2737;
        float _2764 = ((_2755 * _2755) * (_2760 + (-1.0))) + 1.0;
        float _2771 = exp2(log2(1.0 - (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0)))) * 5.0);
        float _2778 = 1.0 - _2737;
        float _2788 = (0.5 / (((_2398 * ((_2751 * _2778) + _2737)) + 9.9999999392252902907785028219223e-09) + (((_2398 * _2778) + _2737) * _2751))) * _2751;
        float _4809 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
        float _2790 = (isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0))) * (_2760 / ((_2764 * _2764) * 3.141590118408203125));
        float _2791 = isnan(1.0) ? _2249 : (isnan(_2249) ? 1.0 : min(_2249, 1.0));
        _2707 = (((((_2771 * _2420) + _1152) * cbLight._m0[_2722].x) * _2790) * _2791) + _2593;
        _2709 = (((((_2771 * _2422) + _1154) * cbLight._m0[_2722].y) * _2790) * _2791) + _2595;
        _2711 = (((((_2771 * _2423) + _1155) * cbLight._m0[_2722].z) * _2790) * _2791) + _2597;
    }
    float _2926;
    float _2928;
    float _2930;
    float _2932;
    float _2934;
    float _2936;
    if (_2231.y == 0u)
    {
        float _2866 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2867 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2866;
        float _2868 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2866;
        float _2869 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2866;
        uvec4 _2881 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2882 = _2881.x;
        uint _2893 = uint((float(_2881.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1090) / _2882))) + floor(float(uint(cbSceneParam._m0[85u].x * _1089) / _2882)));
        float _2903 = (log2(_2869 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2904 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
        uint _2907 = uint(isnan(14.0) ? _2904 : (isnan(_2904) ? 14.0 : min(_2904, 14.0)));
        uvec4 _2912 = texelFetch(g_lightClusterGridBuffer, int(((_2907 << 2u) + (_2893 << 6u)) >> 2u));
        uint _2913 = _2912.x;
        uint _2914 = _2881.z;
        float _3016;
        float _3018;
        float _3020;
        float _3022;
        float _3024;
        float _3026;
        if (((((1u << ((_2914 >> 4u) & 15u)) + 4294967295u) & _2913) == 0u) || ((_2914 & 240u) == 0u))
        {
            _3016 = 0.0;
            _3018 = 0.0;
            _3020 = 0.0;
            _3022 = 0.0;
            _3024 = 0.0;
            _3026 = 0.0;
        }
        else
        {
            float _3017;
            float _3019;
            float _3021;
            float _3023;
            float _3025;
            float _3027;
            float _3169 = 0.0;
            float _3170 = 0.0;
            float _3171 = 0.0;
            float _3172 = 0.0;
            float _3173 = 0.0;
            float _3174 = 0.0;
            uint _3175 = 0u;
            uint _3184;
            bool _3185;
            for (;;)
            {
                _3184 = texelFetch(g_lightClassification, int((((_2907 << 5u) + (_2893 << 9u)) + (_3175 << 2u)) >> 2u)).x;
                _3185 = _3184 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3185)
                {
                    frontier_phi_66_pred = _3169;
                    frontier_phi_66_pred_1 = _3174;
                    frontier_phi_66_pred_2 = _3173;
                    frontier_phi_66_pred_3 = _3172;
                    frontier_phi_66_pred_4 = _3171;
                    frontier_phi_66_pred_5 = _3170;
                }
                else
                {
                    float _3314;
                    float _3315;
                    float _3316;
                    float _3317;
                    float _3318;
                    float _3319;
                    uint _3320;
                    _3314 = _3169;
                    _3315 = _3170;
                    _3316 = _3171;
                    _3317 = _3172;
                    _3318 = _3173;
                    _3319 = _3174;
                    _3320 = _3184;
                    float _3241;
                    float _3242;
                    float _3243;
                    float _3244;
                    float _3245;
                    float _3246;
                    for (;;)
                    {
                        uint _3324 = uint(findLSB(_3320)) + (_3175 << 5u);
                        uint _3321 = (_3320 + 4294967295u) & _3320;
                        uint _3326 = _3324 * 48u;
                        vec4 _3340 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3326)).x, texelFetch(g_PointLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3326 + 3u)).x));
                        uint _3346 = (_3324 * 48u) + 4u;
                        vec4 _3359 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3346)).x, texelFetch(g_PointLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3346 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3346 + 3u)).x));
                        uint _3365 = (_3324 * 48u) + 8u;
                        vec3 _3376 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3365)).x, texelFetch(g_PointLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3365 + 2u)).x));
                        float _3380 = _3340.x - _2867;
                        float _3381 = _3340.y - _2868;
                        float _3382 = _3340.z - _2869;
                        float _3383 = dot(vec3(_3380, _3381, _3382), vec3(_3380, _3381, _3382));
                        float _3386 = inversesqrt(_3383);
                        float _3387 = _3386 * _3380;
                        float _3388 = _3386 * _3381;
                        float _3389 = _3386 * _3382;
                        float _3390 = dot(vec3(_1108, _1111, _1114), vec3(_3387, _3388, _3389));
                        float _3395 = 1.0 - (_3383 * _3340.w);
                        float _4835 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                        float _3396 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
                        float _3397 = sqrt(_3383) * _3359.w;
                        float _3400 = 1.39999997615814208984375 / (_3397 + 1.39999997615814208984375);
                        float _3401 = _3400 * _3400;
                        float _3404 = ((1.0 - _3401) * _3390) + _3401;
                        float _3407 = _3397 * _3397;
                        float _3411 = ((isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0))) * _3396) / ((_3407 * 0.699999988079071044921875) + 1.0);
                        float _3415 = (-0.0) - _2867;
                        float _3416 = (-0.0) - _2868;
                        float _3417 = (-0.0) - _2869;
                        float _3421 = inversesqrt(dot(vec3(_3415, _3416, _3417), vec3(_3415, _3416, _3417)));
                        float _3422 = _3421 * _3415;
                        float _3423 = _3421 * _3416;
                        float _3424 = _3421 * _3417;
                        float _3432 = exp2(log2(1.0 / ((_3407 * 3.5) + 5.0)) * 0.25);
                        float _3433 = 1.0 - _1183;
                        float _3440 = sqrt(1.0 - ((1.0 - (_3433 * _3433)) * (1.0 - (_3432 * _3432))));
                        float _3441 = _3440 * _3440;
                        float _3442 = _3441 * _3441;
                        float _3443 = _3422 + _3387;
                        float _3444 = _3423 + _3388;
                        float _3445 = _3424 + _3389;
                        float _3449 = inversesqrt(dot(vec3(_3443, _3444, _3445), vec3(_3443, _3444, _3445)));
                        float _3453 = dot(vec3(_1108, _1111, _1114), vec3(_3422, _3423, _3424));
                        float _4851 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                        float _3456 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
                        float _3457 = dot(vec3(_1108, _1111, _1114), vec3(_3449 * _3443, _3449 * _3444, _3449 * _3445));
                        float _4862 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                        float _3460 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
                        float _3464 = ((_3460 * _3460) * (_3442 + (-1.0))) + 1.0;
                        float _3465 = _3400 * _3441;
                        float _3466 = _3465 * _3465;
                        float _3469 = ((1.0 - _3466) * _3390) + _3466;
                        float _4873 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                        float _3470 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
                        float _3471 = 1.0 - _3441;
                        float _3481 = (0.5 / (((_3470 * ((_3456 * _3471) + _3441)) + 9.9999999392252902907785028219223e-09) + (((_3470 * _3471) + _3441) * _3456))) * _3470;
                        float _4884 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                        float _3492 = (((_3442 * 3.1415927410125732421875) * (isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0)))) / ((_3464 * _3464) * ((_3407 * 2.1991131305694580078125) + 3.141590118408203125))) * _3396;
                        _3244 = (_3411 * _3359.x) + _3317;
                        _3245 = (_3411 * _3359.y) + _3318;
                        _3246 = (_3411 * _3359.z) + _3319;
                        _3241 = (_3492 * _3376.x) + _3314;
                        _3242 = (_3492 * _3376.y) + _3315;
                        _3243 = (_3492 * _3376.z) + _3316;
                        if (_3321 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3314 = _3241;
                            _3315 = _3242;
                            _3316 = _3243;
                            _3317 = _3244;
                            _3318 = _3245;
                            _3319 = _3246;
                            _3320 = _3321;
                        }
                    }
                    frontier_phi_66_pred = _3241;
                    frontier_phi_66_pred_1 = _3246;
                    frontier_phi_66_pred_2 = _3245;
                    frontier_phi_66_pred_3 = _3244;
                    frontier_phi_66_pred_4 = _3243;
                    frontier_phi_66_pred_5 = _3242;
                }
                _3017 = frontier_phi_66_pred;
                _3027 = frontier_phi_66_pred_1;
                _3025 = frontier_phi_66_pred_2;
                _3023 = frontier_phi_66_pred_3;
                _3021 = frontier_phi_66_pred_4;
                _3019 = frontier_phi_66_pred_5;
                uint _3176 = _3175 + 1u;
                if (_3176 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3169 = _3017;
                    _3170 = _3019;
                    _3171 = _3021;
                    _3172 = _3023;
                    _3173 = _3025;
                    _3174 = _3027;
                    _3175 = _3176;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3016 = _3017;
            _3018 = _3019;
            _3020 = _3021;
            _3022 = _3023;
            _3024 = _3025;
            _3026 = _3027;
        }
        uvec4 _3030 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3031 = _3030.z;
        uint _3033 = (_3031 >> 8u) & 15u;
        float _3137;
        float _3139;
        float _3141;
        float _3143;
        float _3145;
        float _3147;
        if (((4294967295u << _3033) & _2913) == 0u)
        {
            _3137 = _3016;
            _3139 = _3018;
            _3141 = _3020;
            _3143 = _3022;
            _3145 = _3024;
            _3147 = _3026;
        }
        else
        {
            float _3162 = inversesqrt(dot(vec3(_2867, _2868, _2869), vec3(_2867, _2868, _2869)));
            float _3163 = _3162 * _2867;
            float _3164 = _3162 * _2868;
            float _3165 = _3162 * _2869;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3033 < ((_3031 >> 12u) & 15u))
            {
                float _3138;
                float _3140;
                float _3142;
                float _3144;
                float _3146;
                float _3148;
                float _3297 = _3016;
                float _3298 = _3018;
                float _3299 = _3020;
                float _3300 = _3022;
                float _3301 = _3024;
                float _3302 = _3026;
                uint _3303 = _3033;
                uint _3312;
                bool _3313;
                for (;;)
                {
                    _3312 = texelFetch(g_lightClassification, int((((_2907 << 5u) + (_2893 << 9u)) + (_3303 << 2u)) >> 2u)).x;
                    _3313 = _3312 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3313)
                    {
                        frontier_phi_77_pred = _3302;
                        frontier_phi_77_pred_1 = _3301;
                        frontier_phi_77_pred_2 = _3300;
                        frontier_phi_77_pred_3 = _3299;
                        frontier_phi_77_pred_4 = _3298;
                        frontier_phi_77_pred_5 = _3297;
                    }
                    else
                    {
                        float _3506;
                        float _3507;
                        float _3508;
                        float _3509;
                        float _3510;
                        float _3511;
                        float _3799;
                        float _3800;
                        float _3801;
                        float _3802;
                        float _3803;
                        float _3804;
                        float _3519 = _3297;
                        float _3520 = _3298;
                        float _3521 = _3299;
                        float _3522 = _3300;
                        float _3523 = _3301;
                        float _3524 = _3302;
                        uint _3525 = _3312;
                        uint _3526;
                        vec4 _3551;
                        float _3552;
                        vec4 _3567;
                        vec3 _3579;
                        vec4 _3594;
                        vec4 _3609;
                        float _3655;
                        bool _3656;
                        for (;;)
                        {
                            uint _3536 = ((_3303 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3525));
                            _3526 = (_3525 + 4294967295u) & _3525;
                            uint _3538 = _3536 * 40u;
                            _3551 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 3u)).x));
                            _3552 = _3551.w;
                            uint _3554 = (_3536 * 40u) + 4u;
                            _3567 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3554)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 3u)).x));
                            uint _3569 = (_3536 * 40u) + 8u;
                            _3579 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x));
                            uint _3581 = (_3536 * 40u) + 16u;
                            _3594 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3581)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 3u)).x));
                            uint _3596 = (_3536 * 40u) + 20u;
                            _3609 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 3u)).x));
                            uint _3611 = (_3536 * 40u) + 24u;
                            vec4 _3624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 3u)).x));
                            uint _3630 = (_3536 * 40u) + 28u;
                            vec4 _3643 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 3u)).x));
                            _3655 = fma(_2869, _3643.z, fma(_2868, _3643.y, _3643.x * _2867)) + _3643.w;
                            _3656 = !((fma(_2869, _3624.z, fma(_2868, _3624.y, _3624.x * _2867)) + _3624.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3656)
                            {
                                float _3683 = _3551.x - _2867;
                                float _3684 = _3551.y - _2868;
                                float _3685 = _3551.z - _2869;
                                float _3686 = dot(vec3(_3683, _3684, _3685), vec3(_3683, _3684, _3685));
                                float _3689 = inversesqrt(_3686);
                                float _3690 = _3689 * _3683;
                                float _3691 = _3689 * _3684;
                                float _3692 = _3689 * _3685;
                                float _3696 = 1.0 - (_3686 / (_3552 * _3552));
                                float _4895 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                                float _3697 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
                                float _3701 = sqrt(_3686) * _3567.w;
                                float _3703 = 1.39999997615814208984375 / (_3701 + 1.39999997615814208984375);
                                float _3704 = _3703 * _3703;
                                float _3707 = ((1.0 - _3704) * dot(vec3(_3690, _3691, _3692), vec3(_1108, _1111, _1114))) + _3704;
                                float _3710 = _3701 * _3701;
                                float _3714 = (fma(_2869, _3594.z, fma(_2868, _3594.y, _3594.x * _2867)) + _3594.w) / _3655;
                                float _3715 = (fma(_2869, _3609.z, fma(_2868, _3609.y, _3609.x * _2867)) + _3609.w) / _3655;
                                float _3719 = 1.0 - dot(vec2(_3714, _3715), vec2(_3714, _3715));
                                float _4911 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                                float _3720 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
                                float _3721 = _3720 * (((isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0))) * _3697) / ((_3710 * 0.699999988079071044921875) + 1.0));
                                float _3733 = exp2(log2(1.0 / ((_3710 * 3.5) + 5.0)) * 0.25);
                                float _3734 = 1.0 - _1183;
                                float _3741 = sqrt(1.0 - ((1.0 - (_3734 * _3734)) * (1.0 - (_3733 * _3733))));
                                float _3742 = _3741 * _3741;
                                float _3743 = _3742 * _3742;
                                float _3744 = _3690 - _3163;
                                float _3745 = _3691 - _3164;
                                float _3746 = _3692 - _3165;
                                float _3750 = inversesqrt(dot(vec3(_3744, _3745, _3746), vec3(_3744, _3745, _3746)));
                                float _3754 = dot(vec3(_1108, _1111, _1114), vec3((-0.0) - _3163, (-0.0) - _3164, (-0.0) - _3165));
                                float _4922 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0));
                                float _3757 = isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0));
                                float _3758 = dot(vec3(_1108, _1111, _1114), vec3(_3750 * _3744, _3750 * _3745, _3750 * _3746));
                                float _4933 = isnan(0.0) ? _3758 : (isnan(_3758) ? 0.0 : max(_3758, 0.0));
                                float _3761 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
                                float _3765 = ((_3761 * _3761) * (_3743 + (-1.0))) + 1.0;
                                float _3766 = _3703 * _3742;
                                float _3767 = _3766 * _3766;
                                float _3773 = ((1.0 - _3767) * dot(vec3(_1108, _1111, _1114), vec3(_3690, _3691, _3692))) + _3767;
                                float _4944 = isnan(0.0) ? _3773 : (isnan(_3773) ? 0.0 : max(_3773, 0.0));
                                float _3774 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
                                float _3775 = 1.0 - _3742;
                                float _3785 = (0.5 / (((_3774 * ((_3757 * _3775) + _3742)) + 9.9999999392252902907785028219223e-09) + (((_3774 * _3775) + _3742) * _3757))) * _3774;
                                float _4955 = isnan(0.0) ? _3785 : (isnan(_3785) ? 0.0 : max(_3785, 0.0));
                                float _3795 = (_3720 * _3697) * (((_3743 * 3.1415927410125732421875) * (isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0)))) / ((_3765 * _3765) * ((_3710 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3721 * _3567.y;
                                frontier_phi_83_pred_1 = _3721 * _3567.x;
                                frontier_phi_83_pred_2 = _3795 * _3579.z;
                                frontier_phi_83_pred_3 = _3795 * _3579.y;
                                frontier_phi_83_pred_4 = _3795 * _3579.x;
                                frontier_phi_83_pred_5 = _3721 * _3567.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3803 = frontier_phi_83_pred;
                            _3802 = frontier_phi_83_pred_1;
                            _3801 = frontier_phi_83_pred_2;
                            _3800 = frontier_phi_83_pred_3;
                            _3799 = frontier_phi_83_pred_4;
                            _3804 = frontier_phi_83_pred_5;
                            _3509 = _3802 + _3522;
                            _3510 = _3803 + _3523;
                            _3511 = _3804 + _3524;
                            _3506 = _3799 + _3519;
                            _3507 = _3800 + _3520;
                            _3508 = _3801 + _3521;
                            if (_3526 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3519 = _3506;
                                _3520 = _3507;
                                _3521 = _3508;
                                _3522 = _3509;
                                _3523 = _3510;
                                _3524 = _3511;
                                _3525 = _3526;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3511;
                        frontier_phi_77_pred_1 = _3510;
                        frontier_phi_77_pred_2 = _3509;
                        frontier_phi_77_pred_3 = _3508;
                        frontier_phi_77_pred_4 = _3507;
                        frontier_phi_77_pred_5 = _3506;
                    }
                    _3148 = frontier_phi_77_pred;
                    _3146 = frontier_phi_77_pred_1;
                    _3144 = frontier_phi_77_pred_2;
                    _3142 = frontier_phi_77_pred_3;
                    _3140 = frontier_phi_77_pred_4;
                    _3138 = frontier_phi_77_pred_5;
                    uint _3304 = _3303 + 1u;
                    if (_3304 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3297 = _3138;
                        _3298 = _3140;
                        _3299 = _3142;
                        _3300 = _3144;
                        _3301 = _3146;
                        _3302 = _3148;
                        _3303 = _3304;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3142;
                frontier_phi_58_59_ladder_1 = _3148;
                frontier_phi_58_59_ladder_2 = _3146;
                frontier_phi_58_59_ladder_3 = _3144;
                frontier_phi_58_59_ladder_4 = _3140;
                frontier_phi_58_59_ladder_5 = _3138;
            }
            else
            {
                frontier_phi_58_59_ladder = _3020;
                frontier_phi_58_59_ladder_1 = _3026;
                frontier_phi_58_59_ladder_2 = _3024;
                frontier_phi_58_59_ladder_3 = _3022;
                frontier_phi_58_59_ladder_4 = _3018;
                frontier_phi_58_59_ladder_5 = _3016;
            }
            _3137 = frontier_phi_58_59_ladder_5;
            _3139 = frontier_phi_58_59_ladder_4;
            _3141 = frontier_phi_58_59_ladder;
            _3143 = frontier_phi_58_59_ladder_3;
            _3145 = frontier_phi_58_59_ladder_2;
            _3147 = frontier_phi_58_59_ladder_1;
        }
        float _3152 = isnan(1.0) ? _1167 : (isnan(_1167) ? 1.0 : min(_1167, 1.0));
        _2926 = (_3152 * _3143) + _2362;
        _2928 = (_3152 * _3145) + _2364;
        _2930 = (_3152 * _3147) + _2366;
        _2932 = ((_3137 * _1152) * _3152) + _2707;
        _2934 = ((_3139 * _1154) * _3152) + _2709;
        _2936 = ((_3141 * _1155) * _3152) + _2711;
    }
    else
    {
        _2926 = _2362;
        _2928 = _2364;
        _2930 = _2366;
        _2932 = _2707;
        _2934 = _2709;
        _2936 = _2711;
    }
    float _4971 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
    float _4982 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
    float _4993 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
    float _5004 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _2954 = ((isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0))) * (_2926 + ((isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0))) * _1167))) + ((_2932 + ((isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0))) * _2002)) * cbPerFrame._m0[3u].x);
    float _2955 = ((isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0))) * (_2928 + ((isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0))) * _1167))) + ((_2934 + ((isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0))) * _2002)) * cbPerFrame._m0[3u].x);
    float _2956 = ((isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0))) * (_2930 + ((isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0))) * _1167))) + ((_2936 + ((isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0))) * _2002)) * cbPerFrame._m0[3u].x);
    float _2961 = cbInstanceData._m0[_1127 + 6u].w * (isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0)));
    float _2966 = _1089 / cbSceneParam._m0[86u].x;
    float _2967 = _1090 / cbSceneParam._m0[86u].y;
    vec4 _2981 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2966, _2967, (log2((isnan(cbSceneParam._m0[77u].w) ? _1012 : (isnan(_1012) ? cbSceneParam._m0[77u].w : min(_1012, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2983 = _2981.x;
    float _2984 = _2981.y;
    float _2985 = _2981.z;
    float _2986 = _2981.w;
    float _3079;
    float _3081;
    float _3083;
    float _3085;
    if (_1012 > cbSceneParam._m0[78u].w)
    {
        float _3041 = isnan(_1012) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1012 : min(cbSceneParam._m0[80u].w, _1012));
        float _3042 = _3041 / _1012;
        float _3053 = _3042 * _1062;
        float _3054 = _1063 * _3042;
        float _3055 = (-0.0) - _3054;
        float _3057 = _3042 * _1064;
        float _3059 = (cbSceneParam._m0[77u].w * _3055) / _3041;
        float _3060 = _3059 + cbSceneParam._m0[79u].w;
        float _3061 = cbSceneParam._m0[79u].w - _3054;
        float _3067 = sqrt(((_3053 * _3053) + (_3054 * _3054)) + (_3057 * _3057));
        float _3070 = (1.0 - (cbSceneParam._m0[77u].w / _3041)) * _3067;
        float _3075 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3077 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3254;
        if (abs((_3055 - _3059) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3254 = ((((_3060 > 0.0) ? exp2(_3075 * _3060) : (2.0 - exp2(_3077 * _3060))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3070;
        }
        else
        {
            float _3198 = 1.0 / cbSceneParam._m0[80u].x;
            float _3199 = isnan(_3061) ? _3060 : (isnan(_3060) ? _3061 : max(_3060, _3061));
            float _3200 = isnan(_3061) ? _3060 : (isnan(_3060) ? _3061 : min(_3060, _3061));
            float _3209 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : min(_3199, 0.0));
            float _3210 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : min(_3200, 0.0));
            _3254 = ((abs(_3067 / _3055) * cbSceneParam._m0[80u].y) * ((((_3209 - _3210) * 2.0) - ((exp2(_3075 * (isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0)))) - exp2(_3075 * (isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0))))) * _3198)) - ((exp2(_3077 * _3209) - exp2(_3077 * _3210)) * _3198))) + (_3070 * cbSceneParam._m0[80u].z);
        }
        vec4 _3256 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2966, _2967, 1.0), 0.0);
        float _3265 = exp2((_3254 * (-1.44269502162933349609375)) * (1.0 - _3256.w));
        float _3266 = log2(_3265);
        float _3282 = log2(_2986);
        _3079 = (exp2(_3282 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3266 * cbSceneParam._m0[78u].x)) * _3256.x) / cbSceneParam._m0[78u].x)) + _2983;
        _3081 = (exp2(_3282 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3266 * cbSceneParam._m0[78u].y)) * _3256.y) / cbSceneParam._m0[78u].y)) + _2984;
        _3083 = (exp2(_3282 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3266 * cbSceneParam._m0[78u].z)) * _3256.z) / cbSceneParam._m0[78u].z)) + _2985;
        _3085 = _3265 * _2986;
    }
    else
    {
        _3079 = _2983;
        _3081 = _2984;
        _3083 = _2985;
        _3085 = _2986;
    }
    bool _3292;
    vec4 _3095;
    vec4 _3117;
    float _3119;
    float _3123;
    float _3124;
    float _3125;
    float _3126;
    bool _3136;
    for (;;)
    {
        _3095 = cbMatDynParam._m0[0u];
        float _3097 = roundEven(_3095.y);
        bool _3098 = _3097 == 3.0;
        float _3099 = log2(_3085);
        float _3106 = exp2(_3099 * cbSceneParam._m0[78u].x) * _2954;
        float _3107 = exp2(_3099 * cbSceneParam._m0[78u].y) * _2955;
        float _3108 = exp2(_3099 * cbSceneParam._m0[78u].z) * _2956;
        float _3115 = _1078 + (-0.5);
        _3117 = cbMtdParam._m0[1u];
        _3119 = _3117.y * _3115;
        float _3122 = (_3097 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3123 = _3122 * (_3098 ? _3106 : (_3106 + (cbSceneParam._m0[72u].w * _3079)));
        _3124 = _3122 * (_3098 ? _3107 : (_3107 + (cbSceneParam._m0[72u].w * _3081)));
        _3125 = _3122 * (_3098 ? _3108 : (_3108 + (cbSceneParam._m0[72u].w * _3083)));
        _3126 = _3115 * 0.999000012874603271484375;
        _3136 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3136)
        {
            if ((cbInstanceData._m0[_1127 + 7u].x + _3126) < 0.5)
            {
                _3292 = true;
                break;
            }
        }
        uint _3233 = _1128 + uint(_3095.w);
        if ((cbInstanceData._m0[_3233].w < 1.0) && ((cbInstanceData._m0[_3233].w + _3126) < 0.5))
        {
            _3292 = true;
            break;
        }
        if ((_3119 + 1.0) < _3117.x)
        {
            _3292 = true;
            break;
        }
        _3292 = false;
        break;
    }
    float _3497;
    if (_3292)
    {
        discard_state = true;
        _3497 = 0.0;
    }
    else
    {
        _3497 = _2961;
    }
    SV_Target.x = _3123;
    SV_Target.y = _3124;
    SV_Target.z = _3125;
    SV_Target.w = _3497;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2961;
    discard_exit();
}


