#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24;
layout(set = 0, binding = 12) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 13) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 18) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in float TEXCOORD_8;
layout(location = 7, component = 1) in float TEXCOORD_9;
layout(location = 7, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1533;
float _3912;
float _3913;
float _3914;
float _3915;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _294 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _298 = _294.z;
    float _311 = exp2(log2((1.0 - _298) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _312 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _313 = isnan(1.0) ? _312 : (isnan(_312) ? 1.0 : min(_312, 1.0));
    vec4 _330 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _342 = exp2(log2(_330.w * cbMtdParam._m0[29u].y) * cbMtdParam._m0[23u].x);
    float _343 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _344 = isnan(1.0) ? _343 : (isnan(_343) ? 1.0 : min(_343, 1.0));
    float _353 = exp2(log2(cbMtdParam._m0[23u].y * _298) * cbMtdParam._m0[22u].y);
    float _354 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _355 = isnan(1.0) ? _354 : (isnan(_354) ? 1.0 : min(_354, 1.0));
    vec4 _367 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _370 = _367.y;
    float _373 = (_367.x + (-0.02500000037252902984619140625)) * 8.0;
    float _377 = roundEven(5.0 - _373);
    float _378 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _379 = isnan(4.0) ? _378 : (isnan(_378) ? 4.0 : min(_378, 4.0));
    float _391 = floor(_379);
    vec4 _394 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w, _391));
    float _206[6];
    float _207[6];
    float _208[6];
    _206[0u] = cbMtdParam._m0[17u].x;
    _207[0u] = cbMtdParam._m0[17u].y;
    _208[0u] = cbMtdParam._m0[17u].z;
    _206[1u] = cbMtdParam._m0[15u].x;
    _207[1u] = cbMtdParam._m0[15u].y;
    _208[1u] = cbMtdParam._m0[15u].z;
    _206[2u] = cbMtdParam._m0[14u].x;
    _207[2u] = cbMtdParam._m0[14u].y;
    _208[2u] = cbMtdParam._m0[14u].z;
    _206[3u] = cbMtdParam._m0[13u].x;
    _207[3u] = cbMtdParam._m0[13u].y;
    _208[3u] = cbMtdParam._m0[13u].z;
    _206[4u] = cbMtdParam._m0[12u].x;
    _207[4u] = cbMtdParam._m0[12u].y;
    _208[4u] = cbMtdParam._m0[12u].z;
    _206[5u] = cbMtdParam._m0[18u].x;
    _207[5u] = cbMtdParam._m0[18u].y;
    _208[5u] = cbMtdParam._m0[18u].z;
    float _458 = roundEven(_373);
    float _459 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    uint _461 = uint(int(isnan(5.0) ? _459 : (isnan(_459) ? 5.0 : min(_459, 5.0))));
    vec4 _491 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _502 = cbMtdParam._m0[9u].x * _491.x;
    float _503 = cbMtdParam._m0[9u].y * _491.y;
    float _504 = cbMtdParam._m0[9u].z * _491.z;
    float _511 = ((((((_206[_461] - cbMtdParam._m0[10u].x) * _370) + cbMtdParam._m0[10u].x) * _394.x) - _502) * _355) + _502;
    float _512 = ((((((_207[_461] - cbMtdParam._m0[10u].y) * _370) + cbMtdParam._m0[10u].y) * _394.y) - _503) * _355) + _503;
    float _513 = ((((((_208[_461] - cbMtdParam._m0[10u].z) * _370) + cbMtdParam._m0[10u].z) * _394.z) - _504) * _355) + _504;
    float _519 = exp2(log2(_294.w) * cbMtdParam._m0[23u].w);
    vec4 _532 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _552 = (((cbMtdParam._m0[16u].x * _532.x) - _511) * _519) + _511;
    float _553 = (((cbMtdParam._m0[16u].y * _532.y) - _512) * _519) + _512;
    float _554 = (((cbMtdParam._m0[16u].z * _532.z) - _513) * _519) + _513;
    vec4 _566 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _586 = (((cbMtdParam._m0[19u].x * _566.x) - _552) * _344) + _552;
    float _587 = (((cbMtdParam._m0[19u].y * _566.y) - _553) * _344) + _553;
    float _588 = (((cbMtdParam._m0[19u].z * _566.z) - _554) * _344) + _554;
    vec4 _600 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _625 = (_330.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _600.x) - _586) * _313) + _586);
    float _627 = (_330.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _600.y) - _587) * _313) + _587);
    float _629 = (_330.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _600.z) - _588) * _313) + _588);
    float _633 = cbMtdParam._m0[28u].x * TEXCOORD_8;
    float _642 = (_633 - (((texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _633))) * (cbMtdParam._m0[27u].w + 1.0);
    float _3974 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _643 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _650 = ((cbMtdParam._m0[21u].x - _625) * _643) + _625;
    float _651 = ((cbMtdParam._m0[21u].y - _627) * _643) + _627;
    float _652 = ((cbMtdParam._m0[21u].z - _629) * _643) + _629;
    vec4 _666 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24, SS_ClampLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.z) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.w) + cbTextureTilingScale._m0[11u].w));
    float _674 = (_666.x + (-1.0)) + (cbMtdParam._m0[28u].y * 2.0);
    float _3985 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _680 = exp2(log2(cbMtdParam._m0[28u].w * (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0)))) * cbMtdParam._m0[28u].z);
    float _3996 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _681 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _201[5];
    float _202[5];
    _201[0u] = cbMtdParam._m0[29u].z;
    _202[0u] = cbMtdParam._m0[29u].w;
    _201[1u] = cbMtdParam._m0[31u].z;
    _202[1u] = cbMtdParam._m0[31u].w;
    _201[2u] = cbMtdParam._m0[31u].x;
    _202[2u] = cbMtdParam._m0[31u].y;
    _201[3u] = cbMtdParam._m0[30u].z;
    _202[3u] = cbMtdParam._m0[30u].w;
    _201[4u] = cbMtdParam._m0[30u].x;
    _202[4u] = cbMtdParam._m0[30u].y;
    float _720 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    uint _722 = uint(int(isnan(4.0) ? _720 : (isnan(_720) ? 4.0 : min(_720, 4.0))));
    float _729 = ((_202[_722] - cbMtdParam._m0[22u].z) * _355) + cbMtdParam._m0[22u].z;
    float _732 = ((cbMtdParam._m0[22u].w - _729) * _519) + _729;
    float _735 = ((cbMtdParam._m0[25u].x - _732) * _344) + _732;
    float _738 = ((cbMtdParam._m0[26u].x - _735) * _313) + _735;
    float _740 = _738 - (_738 * _633);
    vec4 _756 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w, _391));
    vec4 _773 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _775 = _773.x;
    float _776 = _773.y;
    float _781 = cbMtdParam._m0[22u].x + _773.z;
    float _784 = (((_756.z + _201[_722]) - _781) * _355) + _781;
    vec4 _796 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _807 = (((_796.z - _784) + cbMtdParam._m0[29u].x) * _519) + _784;
    float _812 = ((((_298 * 2.0) * _807) - _807) * cbMtdParam._m0[24u].w) + _807;
    vec4 _824 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _835 = (((cbMtdParam._m0[23u].z + _824.z) - _812) * _344) + _812;
    vec4 _848 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _859 = (((_848.z - _835) + cbMtdParam._m0[26u].y) * _313) + _835;
    vec4 _874 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _888 = ((cbMtdParam._m0[27u].y * _633) * ((_874.z * cbMtdParam._m0[27u].x) - _859)) + _859;
    float _900 = ((_756.x - _775) * _355) + _775;
    float _901 = ((_756.y - _776) * _355) + _776;
    float _906 = ((_796.x - _900) * _519) + _900;
    float _907 = ((_796.y - _901) * _519) + _901;
    float _912 = ((_824.x - _906) * _344) + _906;
    float _913 = ((_824.y - _907) * _344) + _907;
    float _922 = ((((_848.x - _912) * _313) + _912) * 2.0) + (-1.0);
    float _923 = ((((_848.y - _913) * _313) + _913) * 2.0) + (-1.0);
    float _924 = dot(vec2(_922, _923), vec2(_922, _923));
    float _4017 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _929 = sqrt(1.0 - (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))));
    float _939 = ((cbMtdParam._m0[25u].y * ((_294.x * 2.0) + (-1.0))) + _922) + ((((_874.x * 2.0) + (-1.0)) * _633) * cbMtdParam._m0[26u].w);
    float _940 = ((cbMtdParam._m0[25u].y * ((_294.y * 2.0) + (-1.0))) + _923) + (((cbMtdParam._m0[28u].x * TEXCOORD_9) * ((_874.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _943 = fma(_929, _243 * NORMAL.x, fma(_940, _250 * TANGENT.x, (_236 * _228) * _939));
    float _946 = fma(_929, _243 * NORMAL.y, fma(_940, _250 * TANGENT.y, (_236 * _229) * _939));
    float _949 = fma(_929, _243 * NORMAL.z, fma(_940, _250 * TANGENT.z, (_236 * _230) * _939));
    float _953 = inversesqrt(dot(vec3(_943, _946, _949), vec3(_943, _946, _949)));
    float _954 = _953 * _943;
    float _955 = _953 * _946;
    float _956 = _953 * _949;
    float _4028 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _957 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _4039 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _958 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _4050 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _4061 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _4072 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _4083 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _962 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _978 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1018 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1028 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1018);
    float _1029 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1018);
    float _1030 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1018);
    float _1034 = inversesqrt(dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030)));
    float _1035 = _1028 * _1034;
    float _1036 = _1029 * _1034;
    float _1037 = _1030 * _1034;
    vec4 _1042 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1044 = _1042.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1214 = sqrt(((_1028 * _1028) + (_1029 * _1029)) + (_1030 * _1030));
        float _1220 = (cbMatDynParam._m0[5u].x * _1214) + cbMatDynParam._m0[5u].y;
        float _4094 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1225 = (cbMatDynParam._m0[5u].z * _1214) + cbMatDynParam._m0[5u].w;
        float _4105 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) - _1221)) + _1221) < ((_1044 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1055 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1056 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1074 = fma(_956, cbSceneParam._m0[5u].z, fma(_955, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _954));
    float _1077 = fma(_956, cbSceneParam._m0[6u].z, fma(_955, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _954));
    float _1080 = fma(_956, cbSceneParam._m0[7u].z, fma(_955, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _954));
    uint _1093 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1094 = _1093 + 9u;
    uint _1095 = _1094 + uint(cbMatDynParam._m0[0u].w);
    float _1101 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0)))) * cbInstanceData._m0[_1095].x;
    float _1102 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0)))) * cbInstanceData._m0[_1095].y;
    float _1103 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) * cbInstanceData._m0[_1095].z;
    float _4116 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _1104 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _4127 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _1105 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _4138 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _1106 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _1107 = 1.0 - _962;
    float _1108 = _1104 * _1107;
    float _1109 = _1105 * _1107;
    float _1110 = _1106 * _1107;
    float _1115 = (_1104 + (-0.039999999105930328369140625)) * _962;
    float _1116 = (_1105 + (-0.039999999105930328369140625)) * _962;
    float _1117 = (_1106 + (-0.039999999105930328369140625)) * _962;
    float _1118 = _1115 + 0.039999999105930328369140625;
    float _1120 = _1116 + 0.039999999105930328369140625;
    float _1121 = _1117 + 0.039999999105930328369140625;
    vec4 _1130 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1055, cbSceneParam._m0[86u].y * _1056));
    float _1133 = _1130.x * TEXCOORD_5.w;
    float _1134 = dot(vec3(_954, _955, _956), vec3(_1035, _1036, _1037));
    float _1137 = _1134 * 2.0;
    float _1141 = (_1137 * _954) - _1035;
    float _1142 = (_1137 * _955) - _1036;
    float _1143 = (_1137 * _956) - _1037;
    float _1147 = abs(dot(vec3(_1035, _1036, _1037), vec3(_954, _955, _956)));
    float _4149 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
    float _1149 = sqrt(_958);
    float _1160 = exp2((_1149 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1149 * 3.0));
    float _1166 = (1.0 - _1160) * ((_1149 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1167 = _1160 * _1149;
    float _1195 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1199 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1203 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1532;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1257 = fma(_1203, cbModelParam._m0[26u].z, fma(_1199, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1195));
        float _1261 = fma(_1203, cbModelParam._m0[27u].z, fma(_1199, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1195));
        float _1265 = fma(_1203, cbModelParam._m0[28u].z, fma(_1199, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1195));
        float _1290 = _1195 + _954;
        float _1291 = _1199 + _955;
        float _1292 = _1203 + _956;
        float _1302 = fma(_1292, cbModelParam._m0[26u].z, fma(_1291, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1290)) - _1257;
        float _1303 = fma(_1292, cbModelParam._m0[27u].z, fma(_1291, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1290)) - _1261;
        float _1304 = fma(_1292, cbModelParam._m0[28u].z, fma(_1291, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1290)) - _1265;
        float _1308 = inversesqrt(dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304)));
        float _1321 = ((_1308 * _1302) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1257 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1322 = ((_1308 * _1303) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1261 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1323 = ((_1308 * _1304) / cbModelParam._m0[34u].z) + ((((((_1265 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        float _1360 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1361 = _1360 * (_1326.x + (-0.5));
        float _1362 = _1360 * (_1326.y + (-0.5));
        float _1363 = _1360 * (_1326.z + (-0.5));
        float _1370 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1371 = _1370 * (_1333.x + (-0.5));
        float _1372 = _1370 * (_1333.y + (-0.5));
        float _1373 = _1370 * (_1333.z + (-0.5));
        float _1380 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1381 = _1380 * (_1340.x + (-0.5));
        float _1382 = _1380 * (_1340.y + (-0.5));
        float _1383 = _1380 * (_1340.z + (-0.5));
        float _1390 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1391 = _1390 * (_1347.x + (-0.5));
        float _1392 = _1390 * (_1347.y + (-0.5));
        float _1393 = _1390 * (_1347.z + (-0.5));
        float _1394 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1395 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1396 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1397 = _1361 * 0.5;
        float _1398 = _1371 * 0.5;
        float _1399 = _1381 * 0.5;
        float _1400 = dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399));
        float _1405 = (_1400 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1400);
        float _1414 = (dot(vec3(_954, _955, _956), vec3(_1405 * _1397, _1405 * _1398, _1405 * _1399)) + 1.0) * 0.5;
        float _4175 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1424 = sqrt(((_1398 * _1398) + (_1397 * _1397)) + (_1399 * _1399)) / (_1394 + 9.9999997473787516355514526367188e-06);
        float _4186 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1426 = _1425 * 2.0;
        float _1430 = (1.0 - _1425) / (_1425 + 1.0);
        float _4197 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1440 = ((((1.0 - _1431) * (_1426 + 2.0)) * exp2(log2(isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_1426 + 1.0))) + _1431) * _1394;
        float _1441 = _1362 * 0.5;
        float _1442 = _1372 * 0.5;
        float _1443 = _1382 * 0.5;
        float _1444 = dot(vec3(_1441, _1442, _1443), vec3(_1441, _1442, _1443));
        float _1449 = (_1444 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1444);
        float _1457 = (dot(vec3(_954, _955, _956), vec3(_1449 * _1441, _1449 * _1442, _1449 * _1443)) + 1.0) * 0.5;
        float _4208 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1466 = sqrt(((_1442 * _1442) + (_1441 * _1441)) + (_1443 * _1443)) / (_1395 + 9.9999997473787516355514526367188e-06);
        float _4219 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1468 = _1467 * 2.0;
        float _1472 = (1.0 - _1467) / (_1467 + 1.0);
        float _4230 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1482 = ((((1.0 - _1473) * (_1468 + 2.0)) * exp2(log2(isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_1468 + 1.0))) + _1473) * _1395;
        float _1483 = _1363 * 0.5;
        float _1484 = _1373 * 0.5;
        float _1485 = _1383 * 0.5;
        float _1486 = dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485));
        float _1491 = (_1486 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1486);
        float _1499 = (dot(vec3(_954, _955, _956), vec3(_1491 * _1483, _1491 * _1484, _1491 * _1485)) + 1.0) * 0.5;
        float _4241 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1508 = sqrt(((_1484 * _1484) + (_1483 * _1483)) + (_1485 * _1485)) / (_1396 + 9.9999997473787516355514526367188e-06);
        float _4252 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _1510 = _1509 * 2.0;
        float _1514 = (1.0 - _1509) / (_1509 + 1.0);
        float _4263 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1524 = ((((1.0 - _1515) * (_1510 + 2.0)) * exp2(log2(isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_1510 + 1.0))) + _1515) * _1396;
        _1532 = _1363;
        _1534 = _1362;
        _1535 = _1361;
        _1536 = _1373;
        _1537 = _1372;
        _1538 = _1371;
        _1539 = _1383;
        _1540 = _1382;
        _1541 = _1381;
        _1542 = _1396;
        _1543 = _1395;
        _1544 = _1394;
        _1545 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)));
        _1546 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)));
        _1547 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)));
    }
    else
    {
        _1532 = _1533;
        _1534 = _1533;
        _1535 = _1533;
        _1536 = _1533;
        _1537 = _1533;
        _1538 = _1533;
        _1539 = _1533;
        _1540 = _1533;
        _1541 = _1533;
        _1542 = _1533;
        _1543 = _1533;
        _1544 = _1533;
        _1545 = 0.0;
        _1546 = 0.0;
        _1547 = 0.0;
    }
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    float _1856;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1573 = fma(_1203, cbModelParam._m0[30u].z, fma(_1199, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1195));
        float _1577 = fma(_1203, cbModelParam._m0[31u].z, fma(_1199, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1195));
        float _1581 = fma(_1203, cbModelParam._m0[32u].z, fma(_1199, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1195));
        float _1604 = _1195 + _954;
        float _1605 = _1199 + _955;
        float _1606 = _1203 + _956;
        float _1616 = fma(_1606, cbModelParam._m0[30u].z, fma(_1605, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1604)) - _1573;
        float _1617 = fma(_1606, cbModelParam._m0[31u].z, fma(_1605, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1604)) - _1577;
        float _1618 = fma(_1606, cbModelParam._m0[32u].z, fma(_1605, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1604)) - _1581;
        float _1622 = inversesqrt(dot(vec3(_1616, _1617, _1618), vec3(_1616, _1617, _1618)));
        float _1635 = ((_1622 * _1616) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1573 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1636 = ((_1622 * _1617) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1577 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1637 = ((_1622 * _1618) / cbModelParam._m0[35u].z) + ((((((_1581 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1639 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1635, _1636, _1637), 0.0);
        vec4 _1646 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1635, _1636, _1637), 0.0);
        vec4 _1653 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1635, _1636, _1637), 0.0);
        vec4 _1660 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1635, _1636, _1637), 0.0);
        float _1672 = exp2((_1639.w + (-0.5)) * 20.0) * 2.0;
        float _1673 = _1672 * (_1639.x + (-0.5));
        float _1674 = _1672 * (_1639.y + (-0.5));
        float _1675 = _1672 * (_1639.z + (-0.5));
        float _1682 = exp2((_1646.w + (-0.5)) * 20.0) * 2.0;
        float _1683 = _1682 * (_1646.x + (-0.5));
        float _1684 = _1682 * (_1646.y + (-0.5));
        float _1685 = _1682 * (_1646.z + (-0.5));
        float _1692 = exp2((_1653.w + (-0.5)) * 20.0) * 2.0;
        float _1693 = _1692 * (_1653.x + (-0.5));
        float _1694 = _1692 * (_1653.y + (-0.5));
        float _1695 = _1692 * (_1653.z + (-0.5));
        float _1702 = exp2((_1660.w + (-0.5)) * 20.0) * 2.0;
        float _1703 = _1702 * (_1660.x + (-0.5));
        float _1704 = _1702 * (_1660.y + (-0.5));
        float _1705 = _1702 * (_1660.z + (-0.5));
        float _1706 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1707 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1708 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1709 = _1673 * 0.5;
        float _1710 = _1683 * 0.5;
        float _1711 = _1693 * 0.5;
        float _1712 = dot(vec3(_1709, _1710, _1711), vec3(_1709, _1710, _1711));
        float _1717 = (_1712 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1712);
        float _1725 = (dot(vec3(_954, _955, _956), vec3(_1717 * _1709, _1717 * _1710, _1717 * _1711)) + 1.0) * 0.5;
        float _4304 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1734 = sqrt(((_1710 * _1710) + (_1709 * _1709)) + (_1711 * _1711)) / (_1706 + 9.9999997473787516355514526367188e-06);
        float _4315 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1735 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1736 = _1735 * 2.0;
        float _1740 = (1.0 - _1735) / (_1735 + 1.0);
        float _4326 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1741 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1750 = ((((1.0 - _1741) * (_1736 + 2.0)) * exp2(log2(isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_1736 + 1.0))) + _1741) * _1706;
        float _1751 = _1674 * 0.5;
        float _1752 = _1684 * 0.5;
        float _1753 = _1694 * 0.5;
        float _1754 = dot(vec3(_1751, _1752, _1753), vec3(_1751, _1752, _1753));
        float _1759 = (_1754 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1754);
        float _1767 = (dot(vec3(_954, _955, _956), vec3(_1759 * _1751, _1759 * _1752, _1759 * _1753)) + 1.0) * 0.5;
        float _4337 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1776 = sqrt(((_1752 * _1752) + (_1751 * _1751)) + (_1753 * _1753)) / (_1707 + 9.9999997473787516355514526367188e-06);
        float _4348 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1777 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1778 = _1777 * 2.0;
        float _1782 = (1.0 - _1777) / (_1777 + 1.0);
        float _4359 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1783 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1792 = ((((1.0 - _1783) * (_1778 + 2.0)) * exp2(log2(isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_1778 + 1.0))) + _1783) * _1707;
        float _1793 = _1675 * 0.5;
        float _1794 = _1685 * 0.5;
        float _1795 = _1695 * 0.5;
        float _1796 = dot(vec3(_1793, _1794, _1795), vec3(_1793, _1794, _1795));
        float _1801 = (_1796 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1796);
        float _1809 = (dot(vec3(_954, _955, _956), vec3(_1801 * _1793, _1801 * _1794, _1801 * _1795)) + 1.0) * 0.5;
        float _4370 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
        float _1818 = sqrt(((_1794 * _1794) + (_1793 * _1793)) + (_1795 * _1795)) / (_1708 + 9.9999997473787516355514526367188e-06);
        float _4381 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1819 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _1820 = _1819 * 2.0;
        float _1824 = (1.0 - _1819) / (_1819 + 1.0);
        float _4392 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1825 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _1834 = ((((1.0 - _1825) * (_1820 + 2.0)) * exp2(log2(isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_1820 + 1.0))) + _1825) * _1708;
        _1842 = _1675;
        _1843 = _1674;
        _1844 = _1673;
        _1845 = _1685;
        _1846 = _1684;
        _1847 = _1683;
        _1848 = _1695;
        _1849 = _1694;
        _1850 = _1693;
        _1851 = _1708;
        _1852 = _1707;
        _1853 = _1706;
        _1854 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)));
        _1855 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0)));
        _1856 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0)));
    }
    else
    {
        _1842 = _1533;
        _1843 = _1533;
        _1844 = _1533;
        _1845 = _1533;
        _1846 = _1533;
        _1847 = _1533;
        _1848 = _1533;
        _1849 = _1533;
        _1850 = _1533;
        _1851 = _1533;
        _1852 = _1533;
        _1853 = _1533;
        _1854 = 0.0;
        _1855 = 0.0;
        _1856 = 0.0;
    }
    float _1866 = (cbModelParam._m0[1u].x * (_1854 - _1545)) + _1545;
    float _1867 = (cbModelParam._m0[1u].x * (_1855 - _1546)) + _1546;
    float _1868 = (cbModelParam._m0[1u].x * (_1856 - _1547)) + _1547;
    float _1889 = fma(_1868, cbSceneParam._m0[89u].z, fma(_1867, cbSceneParam._m0[89u].y, _1866 * cbSceneParam._m0[89u].x));
    float _1892 = fma(_1868, cbSceneParam._m0[90u].z, fma(_1867, cbSceneParam._m0[90u].y, _1866 * cbSceneParam._m0[90u].x));
    float _1895 = fma(_1868, cbSceneParam._m0[91u].z, fma(_1867, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1866));
    float _1910 = _1141 * 0.5;
    float _1911 = _1142 * 0.5;
    float _1912 = _1143 * 0.5;
    float _1913 = dot(vec4(_1910, _1911, _1912, 1.0), vec4(_1844, _1847, _1850, _1853));
    float _1916 = dot(vec4(_1910, _1911, _1912, 1.0), vec4(_1843, _1846, _1849, _1852));
    float _1919 = dot(vec4(_1910, _1911, _1912, 1.0), vec4(_1842, _1845, _1848, _1851));
    float _1953;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1926 = dot(vec4(_1910, _1911, _1912, 1.0), vec4(_1532, _1536, _1539, _1542));
        float _1930 = dot(vec4(_1910, _1911, _1912, 1.0), vec4(_1534, _1537, _1540, _1543));
        float _1934 = dot(vec4(_1910, _1911, _1912, 1.0), vec4(_1535, _1538, _1541, _1544));
        float _1941 = dot(vec4(cbModelParam._m0[39u]), vec4(_1910, _1911, _1912, 1.0));
        _1953 = dot(vec3(isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0)), isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0)), isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1941) ? 0.0 : (isnan(0.0) ? _1941 : max(0.0, _1941))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1953 = 1.0;
    }
    float _1964;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1955 = dot(vec4(cbModelParam._m0[40u]), vec4(_1910, _1911, _1912, 1.0));
        _1964 = dot(vec3(isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0)), isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0)), isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1955) ? 0.0 : (isnan(0.0) ? _1955 : max(0.0, _1955))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1964 = 1.0;
    }
    float _1968 = (_1964 * cbModelParam._m0[1u].x) + (_1953 * (1.0 - cbModelParam._m0[1u].x));
    float _1978 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _958);
    float _1979 = isnan(_1978) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1978 : min(cbModelParam._m0[25u].z, _1978));
    float _2059;
    float _2061;
    float _2063;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2026 = fma(_1203, cbModelParam._m0[13u].z, fma(_1199, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1195)) + cbModelParam._m0[13u].w;
        float _2030 = fma(_1203, cbModelParam._m0[14u].z, fma(_1199, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1195)) + cbModelParam._m0[14u].w;
        float _2034 = fma(_1203, cbModelParam._m0[15u].z, fma(_1199, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1195)) + cbModelParam._m0[15u].w;
        float _2037 = fma(_1143, cbModelParam._m0[13u].z, fma(_1142, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1141));
        float _2040 = fma(_1143, cbModelParam._m0[14u].z, fma(_1142, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1141));
        float _2043 = fma(_1143, cbModelParam._m0[15u].z, fma(_1142, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1141));
        float _2071;
        if (_2037 > 0.0)
        {
            _2071 = abs((1.0 - _2026) / _2037);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2037 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2026 + 1.0) / _2037);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2071 = frontier_phi_17_15_ladder;
        }
        float _2273;
        if (_2040 > 0.0)
        {
            _2273 = abs((1.0 - _2030) / _2040);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2040 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2030 + 1.0) / _2040);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2273 = frontier_phi_26_22_ladder;
        }
        float _2527;
        if (_2043 > 0.0)
        {
            _2527 = abs((1.0 - _2034) / _2043);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2043 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2034 + 1.0) / _2043);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2527 = frontier_phi_38_33_ladder;
        }
        float _2529 = isnan(_2273) ? _2071 : (isnan(_2071) ? _2273 : min(_2071, _2273));
        float _2530 = isnan(_2527) ? _2529 : (isnan(_2529) ? _2527 : min(_2529, _2527));
        float _2534 = (_2530 * _2037) + _2026;
        float _2535 = (_2530 * _2040) + _2030;
        float _2536 = (_2530 * _2043) + _2034;
        float _2537 = _2530 * 9.9999997473787516355514526367188e-05;
        float _2539 = (-1.0) - _2537;
        float _2541 = _2537 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2536 > _2541) || ((_2536 < _2539) || ((_2535 > _2541) || ((_2535 < _2539) || ((_2534 < _2539) || (_2534 > _2541))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2664 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2536, cbModelParam._m0[9u].z, fma(_2535, cbModelParam._m0[9u].y, _2534 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2536, cbModelParam._m0[10u].z, fma(_2535, cbModelParam._m0[10u].y, _2534 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2536, cbModelParam._m0[11u].z, fma(_2535, cbModelParam._m0[11u].y, _2534 * cbModelParam._m0[11u].x))), _1979);
            frontier_phi_16_38_ladder = _2664.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2664.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2664.x * cbModelParam._m0[1u].y;
        }
        _2059 = frontier_phi_16_38_ladder_2;
        _2061 = frontier_phi_16_38_ladder_1;
        _2063 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2047 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1141, _1142, _1143), _1979);
        _2059 = _2047.x * cbModelParam._m0[1u].y;
        _2061 = _2047.y * cbModelParam._m0[1u].y;
        _2063 = _2047.z * cbModelParam._m0[1u].y;
    }
    float _2067 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _958);
    float _2068 = isnan(_2067) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2067 : min(cbModelParam._m0[25u].w, _2067));
    float _2157;
    float _2159;
    float _2161;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2121 = fma(_1203, cbModelParam._m0[21u].z, fma(_1199, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1195)) + cbModelParam._m0[21u].w;
        float _2125 = fma(_1203, cbModelParam._m0[22u].z, fma(_1199, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1195)) + cbModelParam._m0[22u].w;
        float _2129 = fma(_1203, cbModelParam._m0[23u].z, fma(_1199, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1195)) + cbModelParam._m0[23u].w;
        float _2132 = fma(_1143, cbModelParam._m0[21u].z, fma(_1142, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1141));
        float _2135 = fma(_1143, cbModelParam._m0[22u].z, fma(_1142, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1141));
        float _2138 = fma(_1143, cbModelParam._m0[23u].z, fma(_1142, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1141));
        float _2278;
        if (_2132 > 0.0)
        {
            _2278 = abs((1.0 - _2121) / _2132);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2132 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2121 + 1.0) / _2132);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2278 = frontier_phi_28_24_ladder;
        }
        float _2554;
        if (_2135 > 0.0)
        {
            _2554 = abs((1.0 - _2125) / _2135);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2135 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2125 + 1.0) / _2135);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2554 = frontier_phi_40_35_ladder;
        }
        float _2767;
        if (_2138 > 0.0)
        {
            _2767 = abs((1.0 - _2129) / _2138);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2138 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2129 + 1.0) / _2138);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2767 = frontier_phi_49_46_ladder;
        }
        float _2769 = isnan(_2554) ? _2278 : (isnan(_2278) ? _2554 : min(_2278, _2554));
        float _2770 = isnan(_2767) ? _2769 : (isnan(_2769) ? _2767 : min(_2769, _2767));
        float _2774 = (_2770 * _2132) + _2121;
        float _2775 = (_2770 * _2135) + _2125;
        float _2776 = (_2770 * _2138) + _2129;
        float _2777 = _2770 * 9.9999997473787516355514526367188e-05;
        float _2778 = (-1.0) - _2777;
        float _2780 = _2777 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2776 > _2780) || ((_2776 < _2778) || ((_2775 > _2780) || ((_2775 < _2778) || ((_2774 < _2778) || (_2774 > _2780))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2977 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2776, cbModelParam._m0[17u].z, fma(_2775, cbModelParam._m0[17u].y, _2774 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2776, cbModelParam._m0[18u].z, fma(_2775, cbModelParam._m0[18u].y, _2774 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2776, cbModelParam._m0[19u].z, fma(_2775, cbModelParam._m0[19u].y, _2774 * cbModelParam._m0[19u].x))), _2068);
            frontier_phi_25_49_ladder = _2977.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2977.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2977.x * cbModelParam._m0[1u].z;
        }
        _2157 = frontier_phi_25_49_ladder_2;
        _2159 = frontier_phi_25_49_ladder_1;
        _2161 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2141 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1141, _1142, _1143), _2068);
        _2157 = _2141.x * cbModelParam._m0[1u].z;
        _2159 = _2141.y * cbModelParam._m0[1u].z;
        _2161 = _2141.z * cbModelParam._m0[1u].z;
    }
    float _2174 = (((_1166 * _1118) + _1167) * _1133) * ((cbModelParam._m0[1u].w * (_2157 - _2059)) + _2059);
    float _2176 = (((_1166 * _1120) + _1167) * _1133) * ((cbModelParam._m0[1u].w * (_2159 - _2061)) + _2061);
    float _2178 = (((_1166 * _1121) + _1167) * _1133) * ((cbModelParam._m0[1u].w * (_2161 - _2063)) + _2063);
    float _2181 = fma(_2178, cbSceneParam._m0[89u].z, fma(_2176, cbSceneParam._m0[89u].y, _2174 * cbSceneParam._m0[89u].x));
    float _2184 = fma(_2178, cbSceneParam._m0[90u].z, fma(_2176, cbSceneParam._m0[90u].y, _2174 * cbSceneParam._m0[90u].x));
    float _2187 = fma(_2178, cbSceneParam._m0[91u].z, fma(_2176, cbSceneParam._m0[91u].y, _2174 * cbSceneParam._m0[91u].x));
    uvec4 _2197 = floatBitsToUint(cbInstanceData._m0[_1093 + 5u]);
    uint _2199 = _2197.x * 14u;
    uint _2200 = _2199 + 13u;
    float _2207 = _1133 + (-1.0);
    float _2212 = (cbLight._m0[_2200].x * _2207) + 1.0;
    float _2213 = (cbLight._m0[_2200].y * _2207) + 1.0;
    float _2214 = (cbLight._m0[_2200].z * _2207) + 1.0;
    float _2215 = (cbLight._m0[_2200].w * _2207) + 1.0;
    uint _2216 = _2199 + 5u;
    float _2222 = isnan(1.0) ? _2213 : (isnan(_2213) ? 1.0 : min(_2213, 1.0));
    uint _2226 = _2199 + 4u;
    float _2232 = isnan(1.0) ? _2212 : (isnan(_2212) ? 1.0 : min(_2212, 1.0));
    uint _2236 = _2199 | 1u;
    float _2247 = dot(vec3(cbLight._m0[_2199].xyz), vec3(_954, _955, _956));
    float _2250 = dot(vec3(cbLight._m0[_2236].xyz), vec3(_954, _955, _956));
    float _4528 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _4539 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2255 = (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * 0.3183098733425140380859375;
    float _2257 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * 0.3183098733425140380859375;
    float _2264 = ((cbLight._m0[_2216].x * _2222) * _2257) + ((cbLight._m0[_2226].x * _2232) * _2255);
    float _2265 = ((_2222 * cbLight._m0[_2216].y) * _2257) + ((_2232 * cbLight._m0[_2226].y) * _2255);
    float _2266 = ((_2222 * cbLight._m0[_2216].z) * _2257) + ((_2232 * cbLight._m0[_2226].z) * _2255);
    uvec4 _2270 = floatBitsToUint(cbLight._m0[_2199 + 12u]);
    bool _2272 = _2270.x == 0u;
    float _2283;
    float _2285;
    float _2287;
    if (_2272)
    {
        _2283 = _2264;
        _2285 = _2265;
        _2287 = _2266;
    }
    else
    {
        uint _2291 = _2199 + 6u;
        float _2307 = (dot(vec3(cbLight._m0[_2199 + 2u].xyz), vec3(_954, _955, _956)) * 0.5) + 0.5;
        float _2308 = _2307 * _2307;
        float _4550 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2309 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _2310 = isnan(1.0) ? _2214 : (isnan(_2214) ? 1.0 : min(_2214, 1.0));
        _2283 = (((cbLight._m0[_2291].x * 0.3183098733425140380859375) * _2309) * _2310) + _2264;
        _2285 = (((cbLight._m0[_2291].y * 0.3183098733425140380859375) * _2309) * _2310) + _2265;
        _2287 = (((cbLight._m0[_2291].z * 0.3183098733425140380859375) * _2309) * _2310) + _2266;
    }
    bool _2290 = _2270.y == 0u;
    float _2328;
    float _2330;
    float _2332;
    if (_2290)
    {
        _2328 = _2283;
        _2330 = _2285;
        _2332 = _2287;
    }
    else
    {
        uint _2498 = _2199 + 7u;
        float _2514 = (dot(vec3(cbLight._m0[_2199 + 3u].xyz), vec3(_954, _955, _956)) * 0.5) + 0.5;
        float _2515 = _2514 * _2514;
        float _4566 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2516 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
        float _2517 = isnan(1.0) ? _2215 : (isnan(_2215) ? 1.0 : min(_2215, 1.0));
        _2328 = (((cbLight._m0[_2498].x * 0.3183098733425140380859375) * _2516) * _2517) + _2283;
        _2330 = (((cbLight._m0[_2498].y * 0.3183098733425140380859375) * _2516) * _2517) + _2285;
        _2332 = (((cbLight._m0[_2498].z * 0.3183098733425140380859375) * _2516) * _2517) + _2287;
    }
    uint _2335 = _2199 + 8u;
    float _2348 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2199].w)) * _958) * 0.949999988079071044921875);
    float _2349 = _2348 * _2348;
    float _2350 = cbLight._m0[_2199].x + _1035;
    float _2351 = cbLight._m0[_2199].y + _1036;
    float _2352 = cbLight._m0[_2199].z + _1037;
    float _2356 = inversesqrt(dot(vec3(_2350, _2351, _2352), vec3(_2350, _2351, _2352)));
    float _2357 = _2356 * _2350;
    float _2358 = _2356 * _2351;
    float _2359 = _2356 * _2352;
    float _2360 = dot(vec3(_954, _955, _956), vec3(cbLight._m0[_2199].xyz));
    float _4582 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2363 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
    float _4593 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
    float _2364 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
    float _2365 = dot(vec3(_954, _955, _956), vec3(_2357, _2358, _2359));
    float _4604 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2368 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
    float _2369 = dot(vec3(cbLight._m0[_2199].xyz), vec3(_2357, _2358, _2359));
    float _4615 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2373 = _2349 * _2349;
    float _2377 = ((_2368 * _2368) * (_2373 + (-1.0))) + 1.0;
    float _2385 = exp2(log2(1.0 - (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0)))) * 5.0);
    float _2386 = 0.959999978542327880859375 - _1115;
    float _2388 = 0.959999978542327880859375 - _1116;
    float _2389 = 0.959999978542327880859375 - _1117;
    float _2396 = 1.0 - _2349;
    float _2407 = (0.5 / (((_2364 * ((_2363 * _2396) + _2349)) + 9.9999999392252902907785028219223e-09) + (((_2364 * _2396) + _2349) * _2363))) * _2363;
    float _4626 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2409 = (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2373 / ((_2377 * _2377) * 3.141590118408203125));
    uint _2420 = _2199 + 9u;
    float _2431 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2236].w)) * _958) * 0.949999988079071044921875);
    float _2432 = _2431 * _2431;
    float _2433 = cbLight._m0[_2236].x + _1035;
    float _2434 = cbLight._m0[_2236].y + _1036;
    float _2435 = cbLight._m0[_2236].z + _1037;
    float _2439 = inversesqrt(dot(vec3(_2433, _2434, _2435), vec3(_2433, _2434, _2435)));
    float _2440 = _2439 * _2433;
    float _2441 = _2439 * _2434;
    float _2442 = _2439 * _2435;
    float _2443 = dot(vec3(_954, _955, _956), vec3(cbLight._m0[_2236].xyz));
    float _4637 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2446 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
    float _2447 = dot(vec3(_954, _955, _956), vec3(_2440, _2441, _2442));
    float _4648 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2450 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
    float _2451 = dot(vec3(cbLight._m0[_2236].xyz), vec3(_2440, _2441, _2442));
    float _4659 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
    float _2455 = _2432 * _2432;
    float _2459 = ((_2450 * _2450) * (_2455 + (-1.0))) + 1.0;
    float _2466 = exp2(log2(1.0 - (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0)))) * 5.0);
    float _2473 = 1.0 - _2432;
    float _2483 = (0.5 / (((_2364 * ((_2446 * _2473) + _2432)) + 9.9999999392252902907785028219223e-09) + (((_2364 * _2473) + _2432) * _2446))) * _2446;
    float _4670 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
    float _2485 = (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * (_2455 / ((_2459 * _2459) * 3.141590118408203125));
    float _2495 = (((((_2466 * _2386) + _1118) * cbLight._m0[_2420].x) * _2485) * _2222) + (((((_2385 * _2386) + _1118) * cbLight._m0[_2335].x) * _2409) * _2232);
    float _2496 = (((((_2466 * _2388) + _1120) * cbLight._m0[_2420].y) * _2485) * _2222) + (((((_2385 * _2388) + _1120) * cbLight._m0[_2335].y) * _2409) * _2232);
    float _2497 = (((((_2466 * _2389) + _1121) * cbLight._m0[_2420].z) * _2485) * _2222) + (((((_2385 * _2389) + _1121) * cbLight._m0[_2335].z) * _2409) * _2232);
    float _2559;
    float _2561;
    float _2563;
    if (_2272)
    {
        _2559 = _2495;
        _2561 = _2496;
        _2563 = _2497;
    }
    else
    {
        uint _2565 = _2199 + 2u;
        uint _2569 = _2199 + 10u;
        float _2583 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2565].w)) * _958) * 0.949999988079071044921875);
        float _2584 = _2583 * _2583;
        float _2585 = cbLight._m0[_2565].x + _1035;
        float _2586 = cbLight._m0[_2565].y + _1036;
        float _2587 = cbLight._m0[_2565].z + _1037;
        float _2591 = inversesqrt(dot(vec3(_2585, _2586, _2587), vec3(_2585, _2586, _2587)));
        float _2592 = _2591 * _2585;
        float _2593 = _2591 * _2586;
        float _2594 = _2591 * _2587;
        float _2595 = dot(vec3(_954, _955, _956), vec3(cbLight._m0[_2565].xyz));
        float _4681 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2598 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
        float _2599 = dot(vec3(_954, _955, _956), vec3(_2592, _2593, _2594));
        float _4692 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2602 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
        float _2603 = dot(vec3(cbLight._m0[_2565].xyz), vec3(_2592, _2593, _2594));
        float _4703 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2607 = _2584 * _2584;
        float _2611 = ((_2602 * _2602) * (_2607 + (-1.0))) + 1.0;
        float _2618 = exp2(log2(1.0 - (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0)))) * 5.0);
        float _2625 = 1.0 - _2584;
        float _2635 = (0.5 / (((_2364 * ((_2598 * _2625) + _2584)) + 9.9999999392252902907785028219223e-09) + (((_2364 * _2625) + _2584) * _2598))) * _2598;
        float _4714 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2637 = (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0))) * (_2607 / ((_2611 * _2611) * 3.141590118408203125));
        float _2638 = isnan(1.0) ? _2214 : (isnan(_2214) ? 1.0 : min(_2214, 1.0));
        _2559 = (((((_2618 * _2386) + _1118) * cbLight._m0[_2569].x) * _2637) * _2638) + _2495;
        _2561 = (((((_2618 * _2388) + _1120) * cbLight._m0[_2569].y) * _2637) * _2638) + _2496;
        _2563 = (((((_2618 * _2389) + _1121) * cbLight._m0[_2569].z) * _2637) * _2638) + _2497;
    }
    float _2673;
    float _2675;
    float _2677;
    if (_2290)
    {
        _2673 = _2559;
        _2675 = _2561;
        _2677 = _2563;
    }
    else
    {
        uint _2684 = _2199 + 3u;
        uint _2688 = _2199 + 11u;
        float _2702 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2684].w)) * _958) * 0.949999988079071044921875);
        float _2703 = _2702 * _2702;
        float _2704 = cbLight._m0[_2684].x + _1035;
        float _2705 = cbLight._m0[_2684].y + _1036;
        float _2706 = cbLight._m0[_2684].z + _1037;
        float _2710 = inversesqrt(dot(vec3(_2704, _2705, _2706), vec3(_2704, _2705, _2706)));
        float _2711 = _2710 * _2704;
        float _2712 = _2710 * _2705;
        float _2713 = _2710 * _2706;
        float _2714 = dot(vec3(_954, _955, _956), vec3(cbLight._m0[_2684].xyz));
        float _4730 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2717 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
        float _2718 = dot(vec3(_954, _955, _956), vec3(_2711, _2712, _2713));
        float _4741 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2721 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
        float _2722 = dot(vec3(cbLight._m0[_2684].xyz), vec3(_2711, _2712, _2713));
        float _4752 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2726 = _2703 * _2703;
        float _2730 = ((_2721 * _2721) * (_2726 + (-1.0))) + 1.0;
        float _2737 = exp2(log2(1.0 - (isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0)))) * 5.0);
        float _2744 = 1.0 - _2703;
        float _2754 = (0.5 / (((_2364 * ((_2717 * _2744) + _2703)) + 9.9999999392252902907785028219223e-09) + (((_2364 * _2744) + _2703) * _2717))) * _2717;
        float _4763 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        float _2756 = (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0))) * (_2726 / ((_2730 * _2730) * 3.141590118408203125));
        float _2757 = isnan(1.0) ? _2215 : (isnan(_2215) ? 1.0 : min(_2215, 1.0));
        _2673 = (((((_2737 * _2386) + _1118) * cbLight._m0[_2688].x) * _2756) * _2757) + _2559;
        _2675 = (((((_2737 * _2388) + _1120) * cbLight._m0[_2688].y) * _2756) * _2757) + _2561;
        _2677 = (((((_2737 * _2389) + _1121) * cbLight._m0[_2688].z) * _2756) * _2757) + _2563;
    }
    float _2892;
    float _2894;
    float _2896;
    float _2898;
    float _2900;
    float _2902;
    if (_2197.y == 0u)
    {
        float _2832 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2833 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2832;
        float _2834 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2832;
        float _2835 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2832;
        uvec4 _2847 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2848 = _2847.x;
        uint _2859 = uint((float(_2847.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1056) / _2848))) + floor(float(uint(cbSceneParam._m0[85u].x * _1055) / _2848)));
        float _2869 = (log2(_2835 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2870 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
        uint _2873 = uint(isnan(14.0) ? _2870 : (isnan(_2870) ? 14.0 : min(_2870, 14.0)));
        uvec4 _2878 = texelFetch(g_lightClusterGridBuffer, int(((_2873 << 2u) + (_2859 << 6u)) >> 2u));
        uint _2879 = _2878.x;
        uint _2880 = _2847.z;
        float _2982;
        float _2984;
        float _2986;
        float _2988;
        float _2990;
        float _2992;
        if (((((1u << ((_2880 >> 4u) & 15u)) + 4294967295u) & _2879) == 0u) || ((_2880 & 240u) == 0u))
        {
            _2982 = 0.0;
            _2984 = 0.0;
            _2986 = 0.0;
            _2988 = 0.0;
            _2990 = 0.0;
            _2992 = 0.0;
        }
        else
        {
            float _2983;
            float _2985;
            float _2987;
            float _2989;
            float _2991;
            float _2993;
            float _3135 = 0.0;
            float _3136 = 0.0;
            float _3137 = 0.0;
            float _3138 = 0.0;
            float _3139 = 0.0;
            float _3140 = 0.0;
            uint _3141 = 0u;
            uint _3150;
            bool _3151;
            for (;;)
            {
                _3150 = texelFetch(g_lightClassification, int((((_2873 << 5u) + (_2859 << 9u)) + (_3141 << 2u)) >> 2u)).x;
                _3151 = _3150 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3151)
                {
                    frontier_phi_66_pred = _3135;
                    frontier_phi_66_pred_1 = _3140;
                    frontier_phi_66_pred_2 = _3139;
                    frontier_phi_66_pred_3 = _3138;
                    frontier_phi_66_pred_4 = _3137;
                    frontier_phi_66_pred_5 = _3136;
                }
                else
                {
                    float _3280;
                    float _3281;
                    float _3282;
                    float _3283;
                    float _3284;
                    float _3285;
                    uint _3286;
                    _3280 = _3135;
                    _3281 = _3136;
                    _3282 = _3137;
                    _3283 = _3138;
                    _3284 = _3139;
                    _3285 = _3140;
                    _3286 = _3150;
                    float _3207;
                    float _3208;
                    float _3209;
                    float _3210;
                    float _3211;
                    float _3212;
                    for (;;)
                    {
                        uint _3290 = uint(findLSB(_3286)) + (_3141 << 5u);
                        uint _3287 = (_3286 + 4294967295u) & _3286;
                        uint _3292 = _3290 * 48u;
                        vec4 _3306 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3292)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 3u)).x));
                        uint _3312 = (_3290 * 48u) + 4u;
                        vec4 _3325 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3312)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 3u)).x));
                        uint _3331 = (_3290 * 48u) + 8u;
                        vec3 _3342 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3331)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 2u)).x));
                        float _3346 = _3306.x - _2833;
                        float _3347 = _3306.y - _2834;
                        float _3348 = _3306.z - _2835;
                        float _3349 = dot(vec3(_3346, _3347, _3348), vec3(_3346, _3347, _3348));
                        float _3352 = inversesqrt(_3349);
                        float _3353 = _3352 * _3346;
                        float _3354 = _3352 * _3347;
                        float _3355 = _3352 * _3348;
                        float _3356 = dot(vec3(_1074, _1077, _1080), vec3(_3353, _3354, _3355));
                        float _3361 = 1.0 - (_3349 * _3306.w);
                        float _4789 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                        float _3362 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
                        float _3363 = sqrt(_3349) * _3325.w;
                        float _3366 = 1.39999997615814208984375 / (_3363 + 1.39999997615814208984375);
                        float _3367 = _3366 * _3366;
                        float _3370 = ((1.0 - _3367) * _3356) + _3367;
                        float _3373 = _3363 * _3363;
                        float _3377 = ((isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0))) * _3362) / ((_3373 * 0.699999988079071044921875) + 1.0);
                        float _3381 = (-0.0) - _2833;
                        float _3382 = (-0.0) - _2834;
                        float _3383 = (-0.0) - _2835;
                        float _3387 = inversesqrt(dot(vec3(_3381, _3382, _3383), vec3(_3381, _3382, _3383)));
                        float _3388 = _3387 * _3381;
                        float _3389 = _3387 * _3382;
                        float _3390 = _3387 * _3383;
                        float _3398 = exp2(log2(1.0 / ((_3373 * 3.5) + 5.0)) * 0.25);
                        float _3399 = 1.0 - _1149;
                        float _3406 = sqrt(1.0 - ((1.0 - (_3399 * _3399)) * (1.0 - (_3398 * _3398))));
                        float _3407 = _3406 * _3406;
                        float _3408 = _3407 * _3407;
                        float _3409 = _3388 + _3353;
                        float _3410 = _3389 + _3354;
                        float _3411 = _3390 + _3355;
                        float _3415 = inversesqrt(dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411)));
                        float _3419 = dot(vec3(_1074, _1077, _1080), vec3(_3388, _3389, _3390));
                        float _4805 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                        float _3422 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                        float _3423 = dot(vec3(_1074, _1077, _1080), vec3(_3415 * _3409, _3415 * _3410, _3415 * _3411));
                        float _4816 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                        float _3426 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                        float _3430 = ((_3426 * _3426) * (_3408 + (-1.0))) + 1.0;
                        float _3431 = _3366 * _3407;
                        float _3432 = _3431 * _3431;
                        float _3435 = ((1.0 - _3432) * _3356) + _3432;
                        float _4827 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                        float _3436 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                        float _3437 = 1.0 - _3407;
                        float _3447 = (0.5 / (((_3436 * ((_3422 * _3437) + _3407)) + 9.9999999392252902907785028219223e-09) + (((_3436 * _3437) + _3407) * _3422))) * _3436;
                        float _4838 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                        float _3458 = (((_3408 * 3.1415927410125732421875) * (isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0)))) / ((_3430 * _3430) * ((_3373 * 2.1991131305694580078125) + 3.141590118408203125))) * _3362;
                        _3210 = (_3377 * _3325.x) + _3283;
                        _3211 = (_3377 * _3325.y) + _3284;
                        _3212 = (_3377 * _3325.z) + _3285;
                        _3207 = (_3458 * _3342.x) + _3280;
                        _3208 = (_3458 * _3342.y) + _3281;
                        _3209 = (_3458 * _3342.z) + _3282;
                        if (_3287 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3280 = _3207;
                            _3281 = _3208;
                            _3282 = _3209;
                            _3283 = _3210;
                            _3284 = _3211;
                            _3285 = _3212;
                            _3286 = _3287;
                        }
                    }
                    frontier_phi_66_pred = _3207;
                    frontier_phi_66_pred_1 = _3212;
                    frontier_phi_66_pred_2 = _3211;
                    frontier_phi_66_pred_3 = _3210;
                    frontier_phi_66_pred_4 = _3209;
                    frontier_phi_66_pred_5 = _3208;
                }
                _2983 = frontier_phi_66_pred;
                _2993 = frontier_phi_66_pred_1;
                _2991 = frontier_phi_66_pred_2;
                _2989 = frontier_phi_66_pred_3;
                _2987 = frontier_phi_66_pred_4;
                _2985 = frontier_phi_66_pred_5;
                uint _3142 = _3141 + 1u;
                if (_3142 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3135 = _2983;
                    _3136 = _2985;
                    _3137 = _2987;
                    _3138 = _2989;
                    _3139 = _2991;
                    _3140 = _2993;
                    _3141 = _3142;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2982 = _2983;
            _2984 = _2985;
            _2986 = _2987;
            _2988 = _2989;
            _2990 = _2991;
            _2992 = _2993;
        }
        uvec4 _2996 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2997 = _2996.z;
        uint _2999 = (_2997 >> 8u) & 15u;
        float _3103;
        float _3105;
        float _3107;
        float _3109;
        float _3111;
        float _3113;
        if (((4294967295u << _2999) & _2879) == 0u)
        {
            _3103 = _2982;
            _3105 = _2984;
            _3107 = _2986;
            _3109 = _2988;
            _3111 = _2990;
            _3113 = _2992;
        }
        else
        {
            float _3128 = inversesqrt(dot(vec3(_2833, _2834, _2835), vec3(_2833, _2834, _2835)));
            float _3129 = _3128 * _2833;
            float _3130 = _3128 * _2834;
            float _3131 = _3128 * _2835;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2999 < ((_2997 >> 12u) & 15u))
            {
                float _3104;
                float _3106;
                float _3108;
                float _3110;
                float _3112;
                float _3114;
                float _3263 = _2982;
                float _3264 = _2984;
                float _3265 = _2986;
                float _3266 = _2988;
                float _3267 = _2990;
                float _3268 = _2992;
                uint _3269 = _2999;
                uint _3278;
                bool _3279;
                for (;;)
                {
                    _3278 = texelFetch(g_lightClassification, int((((_2873 << 5u) + (_2859 << 9u)) + (_3269 << 2u)) >> 2u)).x;
                    _3279 = _3278 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3279)
                    {
                        frontier_phi_77_pred = _3268;
                        frontier_phi_77_pred_1 = _3267;
                        frontier_phi_77_pred_2 = _3266;
                        frontier_phi_77_pred_3 = _3265;
                        frontier_phi_77_pred_4 = _3264;
                        frontier_phi_77_pred_5 = _3263;
                    }
                    else
                    {
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3765;
                        float _3766;
                        float _3767;
                        float _3768;
                        float _3769;
                        float _3770;
                        float _3485 = _3263;
                        float _3486 = _3264;
                        float _3487 = _3265;
                        float _3488 = _3266;
                        float _3489 = _3267;
                        float _3490 = _3268;
                        uint _3491 = _3278;
                        uint _3492;
                        vec4 _3517;
                        float _3518;
                        vec4 _3533;
                        vec3 _3545;
                        vec4 _3560;
                        vec4 _3575;
                        float _3621;
                        bool _3622;
                        for (;;)
                        {
                            uint _3502 = ((_3269 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3491));
                            _3492 = (_3491 + 4294967295u) & _3491;
                            uint _3504 = _3502 * 40u;
                            _3517 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3504)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 3u)).x));
                            _3518 = _3517.w;
                            uint _3520 = (_3502 * 40u) + 4u;
                            _3533 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 3u)).x));
                            uint _3535 = (_3502 * 40u) + 8u;
                            _3545 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 2u)).x));
                            uint _3547 = (_3502 * 40u) + 16u;
                            _3560 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 3u)).x));
                            uint _3562 = (_3502 * 40u) + 20u;
                            _3575 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 3u)).x));
                            uint _3577 = (_3502 * 40u) + 24u;
                            vec4 _3590 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3577)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 3u)).x));
                            uint _3596 = (_3502 * 40u) + 28u;
                            vec4 _3609 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 3u)).x));
                            _3621 = fma(_2835, _3609.z, fma(_2834, _3609.y, _3609.x * _2833)) + _3609.w;
                            _3622 = !((fma(_2835, _3590.z, fma(_2834, _3590.y, _3590.x * _2833)) + _3590.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3622)
                            {
                                float _3649 = _3517.x - _2833;
                                float _3650 = _3517.y - _2834;
                                float _3651 = _3517.z - _2835;
                                float _3652 = dot(vec3(_3649, _3650, _3651), vec3(_3649, _3650, _3651));
                                float _3655 = inversesqrt(_3652);
                                float _3656 = _3655 * _3649;
                                float _3657 = _3655 * _3650;
                                float _3658 = _3655 * _3651;
                                float _3662 = 1.0 - (_3652 / (_3518 * _3518));
                                float _4849 = isnan(0.0) ? _3662 : (isnan(_3662) ? 0.0 : max(_3662, 0.0));
                                float _3663 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                                float _3667 = sqrt(_3652) * _3533.w;
                                float _3669 = 1.39999997615814208984375 / (_3667 + 1.39999997615814208984375);
                                float _3670 = _3669 * _3669;
                                float _3673 = ((1.0 - _3670) * dot(vec3(_3656, _3657, _3658), vec3(_1074, _1077, _1080))) + _3670;
                                float _3676 = _3667 * _3667;
                                float _3680 = (fma(_2835, _3560.z, fma(_2834, _3560.y, _3560.x * _2833)) + _3560.w) / _3621;
                                float _3681 = (fma(_2835, _3575.z, fma(_2834, _3575.y, _3575.x * _2833)) + _3575.w) / _3621;
                                float _3685 = 1.0 - dot(vec2(_3680, _3681), vec2(_3680, _3681));
                                float _4865 = isnan(0.0) ? _3685 : (isnan(_3685) ? 0.0 : max(_3685, 0.0));
                                float _3686 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
                                float _3687 = _3686 * (((isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0))) * _3663) / ((_3676 * 0.699999988079071044921875) + 1.0));
                                float _3699 = exp2(log2(1.0 / ((_3676 * 3.5) + 5.0)) * 0.25);
                                float _3700 = 1.0 - _1149;
                                float _3707 = sqrt(1.0 - ((1.0 - (_3700 * _3700)) * (1.0 - (_3699 * _3699))));
                                float _3708 = _3707 * _3707;
                                float _3709 = _3708 * _3708;
                                float _3710 = _3656 - _3129;
                                float _3711 = _3657 - _3130;
                                float _3712 = _3658 - _3131;
                                float _3716 = inversesqrt(dot(vec3(_3710, _3711, _3712), vec3(_3710, _3711, _3712)));
                                float _3720 = dot(vec3(_1074, _1077, _1080), vec3((-0.0) - _3129, (-0.0) - _3130, (-0.0) - _3131));
                                float _4876 = isnan(0.0) ? _3720 : (isnan(_3720) ? 0.0 : max(_3720, 0.0));
                                float _3723 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
                                float _3724 = dot(vec3(_1074, _1077, _1080), vec3(_3716 * _3710, _3716 * _3711, _3716 * _3712));
                                float _4887 = isnan(0.0) ? _3724 : (isnan(_3724) ? 0.0 : max(_3724, 0.0));
                                float _3727 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
                                float _3731 = ((_3727 * _3727) * (_3709 + (-1.0))) + 1.0;
                                float _3732 = _3669 * _3708;
                                float _3733 = _3732 * _3732;
                                float _3739 = ((1.0 - _3733) * dot(vec3(_1074, _1077, _1080), vec3(_3656, _3657, _3658))) + _3733;
                                float _4898 = isnan(0.0) ? _3739 : (isnan(_3739) ? 0.0 : max(_3739, 0.0));
                                float _3740 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
                                float _3741 = 1.0 - _3708;
                                float _3751 = (0.5 / (((_3740 * ((_3723 * _3741) + _3708)) + 9.9999999392252902907785028219223e-09) + (((_3740 * _3741) + _3708) * _3723))) * _3740;
                                float _4909 = isnan(0.0) ? _3751 : (isnan(_3751) ? 0.0 : max(_3751, 0.0));
                                float _3761 = (_3686 * _3663) * (((_3709 * 3.1415927410125732421875) * (isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0)))) / ((_3731 * _3731) * ((_3676 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3687 * _3533.y;
                                frontier_phi_83_pred_1 = _3687 * _3533.x;
                                frontier_phi_83_pred_2 = _3761 * _3545.z;
                                frontier_phi_83_pred_3 = _3761 * _3545.y;
                                frontier_phi_83_pred_4 = _3761 * _3545.x;
                                frontier_phi_83_pred_5 = _3687 * _3533.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3769 = frontier_phi_83_pred;
                            _3768 = frontier_phi_83_pred_1;
                            _3767 = frontier_phi_83_pred_2;
                            _3766 = frontier_phi_83_pred_3;
                            _3765 = frontier_phi_83_pred_4;
                            _3770 = frontier_phi_83_pred_5;
                            _3475 = _3768 + _3488;
                            _3476 = _3769 + _3489;
                            _3477 = _3770 + _3490;
                            _3472 = _3765 + _3485;
                            _3473 = _3766 + _3486;
                            _3474 = _3767 + _3487;
                            if (_3492 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3485 = _3472;
                                _3486 = _3473;
                                _3487 = _3474;
                                _3488 = _3475;
                                _3489 = _3476;
                                _3490 = _3477;
                                _3491 = _3492;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3477;
                        frontier_phi_77_pred_1 = _3476;
                        frontier_phi_77_pred_2 = _3475;
                        frontier_phi_77_pred_3 = _3474;
                        frontier_phi_77_pred_4 = _3473;
                        frontier_phi_77_pred_5 = _3472;
                    }
                    _3114 = frontier_phi_77_pred;
                    _3112 = frontier_phi_77_pred_1;
                    _3110 = frontier_phi_77_pred_2;
                    _3108 = frontier_phi_77_pred_3;
                    _3106 = frontier_phi_77_pred_4;
                    _3104 = frontier_phi_77_pred_5;
                    uint _3270 = _3269 + 1u;
                    if (_3270 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3263 = _3104;
                        _3264 = _3106;
                        _3265 = _3108;
                        _3266 = _3110;
                        _3267 = _3112;
                        _3268 = _3114;
                        _3269 = _3270;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3108;
                frontier_phi_58_59_ladder_1 = _3114;
                frontier_phi_58_59_ladder_2 = _3112;
                frontier_phi_58_59_ladder_3 = _3110;
                frontier_phi_58_59_ladder_4 = _3106;
                frontier_phi_58_59_ladder_5 = _3104;
            }
            else
            {
                frontier_phi_58_59_ladder = _2986;
                frontier_phi_58_59_ladder_1 = _2992;
                frontier_phi_58_59_ladder_2 = _2990;
                frontier_phi_58_59_ladder_3 = _2988;
                frontier_phi_58_59_ladder_4 = _2984;
                frontier_phi_58_59_ladder_5 = _2982;
            }
            _3103 = frontier_phi_58_59_ladder_5;
            _3105 = frontier_phi_58_59_ladder_4;
            _3107 = frontier_phi_58_59_ladder;
            _3109 = frontier_phi_58_59_ladder_3;
            _3111 = frontier_phi_58_59_ladder_2;
            _3113 = frontier_phi_58_59_ladder_1;
        }
        float _3118 = isnan(1.0) ? _1133 : (isnan(_1133) ? 1.0 : min(_1133, 1.0));
        _2892 = (_3118 * _3109) + _2328;
        _2894 = (_3118 * _3111) + _2330;
        _2896 = (_3118 * _3113) + _2332;
        _2898 = ((_3103 * _1118) * _3118) + _2673;
        _2900 = ((_3105 * _1120) * _3118) + _2675;
        _2902 = ((_3107 * _1121) * _3118) + _2677;
    }
    else
    {
        _2892 = _2328;
        _2894 = _2330;
        _2896 = _2332;
        _2898 = _2673;
        _2900 = _2675;
        _2902 = _2677;
    }
    float _4925 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _4936 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _4947 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    float _4958 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _2920 = ((isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0))) * (_2892 + ((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1133))) + ((_2898 + ((isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0))) * _1968)) * cbPerFrame._m0[3u].x);
    float _2921 = ((isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0))) * (_2894 + ((isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))) * _1133))) + ((_2900 + ((isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0))) * _1968)) * cbPerFrame._m0[3u].x);
    float _2922 = ((isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0))) * (_2896 + ((isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))) * _1133))) + ((_2902 + ((isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0))) * _1968)) * cbPerFrame._m0[3u].x);
    float _2927 = cbInstanceData._m0[_1093 + 6u].w * (isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0)));
    float _2932 = _1055 / cbSceneParam._m0[86u].x;
    float _2933 = _1056 / cbSceneParam._m0[86u].y;
    vec4 _2947 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2932, _2933, (log2((isnan(cbSceneParam._m0[77u].w) ? _978 : (isnan(_978) ? cbSceneParam._m0[77u].w : min(_978, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2949 = _2947.x;
    float _2950 = _2947.y;
    float _2951 = _2947.z;
    float _2952 = _2947.w;
    float _3045;
    float _3047;
    float _3049;
    float _3051;
    if (_978 > cbSceneParam._m0[78u].w)
    {
        float _3007 = isnan(_978) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _978 : min(cbSceneParam._m0[80u].w, _978));
        float _3008 = _3007 / _978;
        float _3019 = _3008 * _1028;
        float _3020 = _1029 * _3008;
        float _3021 = (-0.0) - _3020;
        float _3023 = _3008 * _1030;
        float _3025 = (cbSceneParam._m0[77u].w * _3021) / _3007;
        float _3026 = _3025 + cbSceneParam._m0[79u].w;
        float _3027 = cbSceneParam._m0[79u].w - _3020;
        float _3033 = sqrt(((_3019 * _3019) + (_3020 * _3020)) + (_3023 * _3023));
        float _3036 = (1.0 - (cbSceneParam._m0[77u].w / _3007)) * _3033;
        float _3041 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3043 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3220;
        if (abs((_3021 - _3025) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3220 = ((((_3026 > 0.0) ? exp2(_3041 * _3026) : (2.0 - exp2(_3043 * _3026))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3036;
        }
        else
        {
            float _3164 = 1.0 / cbSceneParam._m0[80u].x;
            float _3165 = isnan(_3027) ? _3026 : (isnan(_3026) ? _3027 : max(_3026, _3027));
            float _3166 = isnan(_3027) ? _3026 : (isnan(_3026) ? _3027 : min(_3026, _3027));
            float _3175 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : min(_3165, 0.0));
            float _3176 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : min(_3166, 0.0));
            _3220 = ((abs(_3033 / _3021) * cbSceneParam._m0[80u].y) * ((((_3175 - _3176) * 2.0) - ((exp2(_3041 * (isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0)))) - exp2(_3041 * (isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0))))) * _3164)) - ((exp2(_3043 * _3175) - exp2(_3043 * _3176)) * _3164))) + (_3036 * cbSceneParam._m0[80u].z);
        }
        vec4 _3222 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2932, _2933, 1.0), 0.0);
        float _3231 = exp2((_3220 * (-1.44269502162933349609375)) * (1.0 - _3222.w));
        float _3232 = log2(_3231);
        float _3248 = log2(_2952);
        _3045 = (exp2(_3248 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3232 * cbSceneParam._m0[78u].x)) * _3222.x) / cbSceneParam._m0[78u].x)) + _2949;
        _3047 = (exp2(_3248 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3232 * cbSceneParam._m0[78u].y)) * _3222.y) / cbSceneParam._m0[78u].y)) + _2950;
        _3049 = (exp2(_3248 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3232 * cbSceneParam._m0[78u].z)) * _3222.z) / cbSceneParam._m0[78u].z)) + _2951;
        _3051 = _3231 * _2952;
    }
    else
    {
        _3045 = _2949;
        _3047 = _2950;
        _3049 = _2951;
        _3051 = _2952;
    }
    bool _3258;
    vec4 _3061;
    vec4 _3083;
    float _3085;
    float _3089;
    float _3090;
    float _3091;
    float _3092;
    bool _3102;
    for (;;)
    {
        _3061 = cbMatDynParam._m0[0u];
        float _3063 = roundEven(_3061.y);
        bool _3064 = _3063 == 3.0;
        float _3065 = log2(_3051);
        float _3072 = exp2(_3065 * cbSceneParam._m0[78u].x) * _2920;
        float _3073 = exp2(_3065 * cbSceneParam._m0[78u].y) * _2921;
        float _3074 = exp2(_3065 * cbSceneParam._m0[78u].z) * _2922;
        float _3081 = _1044 + (-0.5);
        _3083 = cbMtdParam._m0[1u];
        _3085 = _3083.y * _3081;
        float _3088 = (_3063 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3089 = _3088 * (_3064 ? _3072 : (_3072 + (cbSceneParam._m0[72u].w * _3045)));
        _3090 = _3088 * (_3064 ? _3073 : (_3073 + (cbSceneParam._m0[72u].w * _3047)));
        _3091 = _3088 * (_3064 ? _3074 : (_3074 + (cbSceneParam._m0[72u].w * _3049)));
        _3092 = _3081 * 0.999000012874603271484375;
        _3102 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3102)
        {
            if ((cbInstanceData._m0[_1093 + 7u].x + _3092) < 0.5)
            {
                _3258 = true;
                break;
            }
        }
        uint _3199 = _1094 + uint(_3061.w);
        if ((cbInstanceData._m0[_3199].w < 1.0) && ((cbInstanceData._m0[_3199].w + _3092) < 0.5))
        {
            _3258 = true;
            break;
        }
        if ((_3085 + 1.0) < _3083.x)
        {
            _3258 = true;
            break;
        }
        _3258 = false;
        break;
    }
    float _3463;
    if (_3258)
    {
        discard_state = true;
        _3463 = 0.0;
    }
    else
    {
        _3463 = _2927;
    }
    SV_Target.x = _3089;
    SV_Target.y = _3090;
    SV_Target.z = _3091;
    SV_Target.w = _3463;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2927;
    discard_exit();
}


