#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24;
layout(set = 0, binding = 12) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 13) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 18) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in float TEXCOORD_8;
layout(location = 7, component = 1) in float TEXCOORD_9;
layout(location = 7, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1488;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _294 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _298 = _294.z;
    float _311 = exp2(log2((1.0 - _298) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _312 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _313 = isnan(1.0) ? _312 : (isnan(_312) ? 1.0 : min(_312, 1.0));
    vec4 _326 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _334 = log2(0.0);
    float _336 = exp2(_334 * cbMtdParam._m0[23u].x);
    float _337 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _338 = isnan(1.0) ? _337 : (isnan(_337) ? 1.0 : min(_337, 1.0));
    float _347 = exp2(log2(cbMtdParam._m0[23u].y * _298) * cbMtdParam._m0[22u].y);
    float _348 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _349 = isnan(1.0) ? _348 : (isnan(_348) ? 1.0 : min(_348, 1.0));
    vec4 _361 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _364 = _361.y;
    float _367 = (_361.x + (-0.02500000037252902984619140625)) * 8.0;
    float _371 = roundEven(5.0 - _367);
    float _372 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _373 = isnan(4.0) ? _372 : (isnan(_372) ? 4.0 : min(_372, 4.0));
    float _385 = floor(_373);
    vec4 _388 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w, _385));
    float _206[6];
    float _207[6];
    float _208[6];
    _206[0u] = cbMtdParam._m0[17u].x;
    _207[0u] = cbMtdParam._m0[17u].y;
    _208[0u] = cbMtdParam._m0[17u].z;
    _206[1u] = cbMtdParam._m0[15u].x;
    _207[1u] = cbMtdParam._m0[15u].y;
    _208[1u] = cbMtdParam._m0[15u].z;
    _206[2u] = cbMtdParam._m0[14u].x;
    _207[2u] = cbMtdParam._m0[14u].y;
    _208[2u] = cbMtdParam._m0[14u].z;
    _206[3u] = cbMtdParam._m0[13u].x;
    _207[3u] = cbMtdParam._m0[13u].y;
    _208[3u] = cbMtdParam._m0[13u].z;
    _206[4u] = cbMtdParam._m0[12u].x;
    _207[4u] = cbMtdParam._m0[12u].y;
    _208[4u] = cbMtdParam._m0[12u].z;
    _206[5u] = cbMtdParam._m0[18u].x;
    _207[5u] = cbMtdParam._m0[18u].y;
    _208[5u] = cbMtdParam._m0[18u].z;
    float _452 = roundEven(_367);
    float _453 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    uint _455 = uint(int(isnan(5.0) ? _453 : (isnan(_453) ? 5.0 : min(_453, 5.0))));
    vec4 _485 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _496 = cbMtdParam._m0[9u].x * _485.x;
    float _497 = cbMtdParam._m0[9u].y * _485.y;
    float _498 = cbMtdParam._m0[9u].z * _485.z;
    float _505 = ((((((_206[_455] - cbMtdParam._m0[10u].x) * _364) + cbMtdParam._m0[10u].x) * _388.x) - _496) * _349) + _496;
    float _506 = ((((((_207[_455] - cbMtdParam._m0[10u].y) * _364) + cbMtdParam._m0[10u].y) * _388.y) - _497) * _349) + _497;
    float _507 = ((((((_208[_455] - cbMtdParam._m0[10u].z) * _364) + cbMtdParam._m0[10u].z) * _388.z) - _498) * _349) + _498;
    float _513 = exp2(log2(_294.w) * cbMtdParam._m0[23u].w);
    vec4 _526 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _546 = (((cbMtdParam._m0[16u].x * _526.x) - _505) * _513) + _505;
    float _547 = (((cbMtdParam._m0[16u].y * _526.y) - _506) * _513) + _506;
    float _548 = (((cbMtdParam._m0[16u].z * _526.z) - _507) * _513) + _507;
    vec4 _560 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _580 = (((cbMtdParam._m0[19u].x * _560.x) - _546) * _338) + _546;
    float _581 = (((cbMtdParam._m0[19u].y * _560.y) - _547) * _338) + _547;
    float _582 = (((cbMtdParam._m0[19u].z * _560.z) - _548) * _338) + _548;
    vec4 _594 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _619 = (_326.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _594.x) - _580) * _313) + _580);
    float _621 = (_326.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _594.y) - _581) * _313) + _581);
    float _623 = (_326.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _594.z) - _582) * _313) + _582);
    float _627 = cbMtdParam._m0[28u].x * TEXCOORD_8;
    float _636 = (_627 - (((texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _627))) * (cbMtdParam._m0[27u].w + 1.0);
    float _4146 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _637 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _644 = ((cbMtdParam._m0[21u].x - _619) * _637) + _619;
    float _645 = ((cbMtdParam._m0[21u].y - _621) * _637) + _621;
    float _646 = ((cbMtdParam._m0[21u].z - _623) * _637) + _623;
    vec4 _660 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24, SS_ClampLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.z) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.w) + cbTextureTilingScale._m0[11u].w));
    float _668 = (_660.x + (-1.0)) + (cbMtdParam._m0[28u].y * 2.0);
    float _4157 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _674 = exp2(log2(cbMtdParam._m0[28u].w * (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) * cbMtdParam._m0[28u].z);
    float _4168 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _675 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    float _201[5];
    float _202[5];
    _201[0u] = cbMtdParam._m0[29u].z;
    _202[0u] = cbMtdParam._m0[29u].w;
    _201[1u] = cbMtdParam._m0[31u].z;
    _202[1u] = cbMtdParam._m0[31u].w;
    _201[2u] = cbMtdParam._m0[31u].x;
    _202[2u] = cbMtdParam._m0[31u].y;
    _201[3u] = cbMtdParam._m0[30u].z;
    _202[3u] = cbMtdParam._m0[30u].w;
    _201[4u] = cbMtdParam._m0[30u].x;
    _202[4u] = cbMtdParam._m0[30u].y;
    float _715 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    uint _717 = uint(int(isnan(4.0) ? _715 : (isnan(_715) ? 4.0 : min(_715, 4.0))));
    float _724 = ((_202[_717] - cbMtdParam._m0[22u].z) * _349) + cbMtdParam._m0[22u].z;
    float _727 = ((cbMtdParam._m0[22u].w - _724) * _513) + _724;
    float _730 = ((cbMtdParam._m0[25u].x - _727) * _338) + _727;
    float _733 = ((cbMtdParam._m0[26u].x - _730) * _313) + _730;
    float _735 = _733 - (_733 * _627);
    vec4 _751 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w, _385));
    vec4 _768 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _770 = _768.x;
    float _771 = _768.y;
    float _776 = cbMtdParam._m0[22u].x + _768.z;
    float _779 = (((_751.z + _201[_717]) - _776) * _349) + _776;
    vec4 _791 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _802 = (((_791.z - _779) + cbMtdParam._m0[29u].x) * _513) + _779;
    float _807 = ((((_298 * 2.0) * _802) - _802) * cbMtdParam._m0[24u].w) + _802;
    vec4 _819 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _830 = (((cbMtdParam._m0[23u].z + _819.z) - _807) * _338) + _807;
    vec4 _843 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _854 = (((_843.z - _830) + cbMtdParam._m0[26u].y) * _313) + _830;
    vec4 _869 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _883 = ((cbMtdParam._m0[27u].y * _627) * ((_869.z * cbMtdParam._m0[27u].x) - _854)) + _854;
    float _895 = ((_751.x - _770) * _349) + _770;
    float _896 = ((_751.y - _771) * _349) + _771;
    float _901 = ((_791.x - _895) * _513) + _895;
    float _902 = ((_791.y - _896) * _513) + _896;
    float _907 = ((_819.x - _901) * _338) + _901;
    float _908 = ((_819.y - _902) * _338) + _902;
    float _917 = ((((_843.x - _907) * _313) + _907) * 2.0) + (-1.0);
    float _918 = ((((_843.y - _908) * _313) + _908) * 2.0) + (-1.0);
    float _919 = dot(vec2(_917, _918), vec2(_917, _918));
    float _4189 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _924 = sqrt(1.0 - (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))));
    float _934 = ((cbMtdParam._m0[25u].y * ((_294.x * 2.0) + (-1.0))) + _917) + ((((_869.x * 2.0) + (-1.0)) * _627) * cbMtdParam._m0[26u].w);
    float _935 = ((cbMtdParam._m0[25u].y * ((_294.y * 2.0) + (-1.0))) + _918) + (((cbMtdParam._m0[28u].x * TEXCOORD_9) * ((_869.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _938 = fma(_924, _243 * NORMAL.x, fma(_935, _250 * TANGENT.x, (_236 * _228) * _934));
    float _941 = fma(_924, _243 * NORMAL.y, fma(_935, _250 * TANGENT.y, (_236 * _229) * _934));
    float _944 = fma(_924, _243 * NORMAL.z, fma(_935, _250 * TANGENT.z, (_236 * _230) * _934));
    float _948 = inversesqrt(dot(vec3(_938, _941, _944), vec3(_938, _941, _944)));
    float _949 = _948 * _938;
    float _950 = _948 * _941;
    float _951 = _948 * _944;
    float _4200 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _952 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _4211 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _953 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
    float _4222 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _4233 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _4244 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _4255 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _957 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
    float _973 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1013 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1023 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1013);
    float _1024 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1013);
    float _1025 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1013);
    float _1029 = inversesqrt(dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025)));
    float _1030 = _1023 * _1029;
    float _1031 = _1024 * _1029;
    float _1032 = _1025 * _1029;
    float _1038 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1039 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1057 = fma(_951, cbSceneParam._m0[5u].z, fma(_950, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _949));
    float _1060 = fma(_951, cbSceneParam._m0[6u].z, fma(_950, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _949));
    float _1063 = fma(_951, cbSceneParam._m0[7u].z, fma(_950, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _949));
    uint _1076 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1078 = (_1076 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1084 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0)))) * cbInstanceData._m0[_1078].x;
    float _1085 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0)))) * cbInstanceData._m0[_1078].y;
    float _1086 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0)))) * cbInstanceData._m0[_1078].z;
    float _4266 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
    float _1087 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
    float _4277 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
    float _1088 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
    float _4288 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
    float _1089 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
    float _1090 = 1.0 - _957;
    float _1091 = _1087 * _1090;
    float _1092 = _1088 * _1090;
    float _1093 = _1089 * _1090;
    float _1098 = (_1087 + (-0.039999999105930328369140625)) * _957;
    float _1099 = (_1088 + (-0.039999999105930328369140625)) * _957;
    float _1100 = (_1089 + (-0.039999999105930328369140625)) * _957;
    float _1101 = _1098 + 0.039999999105930328369140625;
    float _1103 = _1099 + 0.039999999105930328369140625;
    float _1104 = _1100 + 0.039999999105930328369140625;
    vec4 _1113 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1038, cbSceneParam._m0[86u].y * _1039));
    float _1116 = _1113.x * TEXCOORD_5.w;
    float _1117 = dot(vec3(_949, _950, _951), vec3(_1030, _1031, _1032));
    float _1120 = _1117 * 2.0;
    float _1124 = (_1120 * _949) - _1030;
    float _1125 = (_1120 * _950) - _1031;
    float _1126 = (_1120 * _951) - _1032;
    float _1130 = abs(dot(vec3(_1030, _1031, _1032), vec3(_949, _950, _951)));
    float _4299 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
    float _1132 = sqrt(_953);
    float _1143 = exp2((_1132 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1132 * 3.0));
    float _1149 = (1.0 - _1143) * ((_1132 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1150 = _1143 * _1132;
    float _1178 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1182 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1186 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1487;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1212 = fma(_1186, cbModelParam._m0[26u].z, fma(_1182, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1178));
        float _1216 = fma(_1186, cbModelParam._m0[27u].z, fma(_1182, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1178));
        float _1220 = fma(_1186, cbModelParam._m0[28u].z, fma(_1182, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1178));
        float _1245 = _1178 + _949;
        float _1246 = _1182 + _950;
        float _1247 = _1186 + _951;
        float _1257 = fma(_1247, cbModelParam._m0[26u].z, fma(_1246, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1245)) - _1212;
        float _1258 = fma(_1247, cbModelParam._m0[27u].z, fma(_1246, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1245)) - _1216;
        float _1259 = fma(_1247, cbModelParam._m0[28u].z, fma(_1246, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1245)) - _1220;
        float _1263 = inversesqrt(dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259)));
        float _1276 = ((_1263 * _1257) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1212 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1277 = ((_1263 * _1258) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1216 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1278 = ((_1263 * _1259) / cbModelParam._m0[34u].z) + ((((((_1220 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        float _1315 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1281.x + (-0.5));
        float _1317 = _1315 * (_1281.y + (-0.5));
        float _1318 = _1315 * (_1281.z + (-0.5));
        float _1325 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1288.x + (-0.5));
        float _1327 = _1325 * (_1288.y + (-0.5));
        float _1328 = _1325 * (_1288.z + (-0.5));
        float _1335 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1295.x + (-0.5));
        float _1337 = _1335 * (_1295.y + (-0.5));
        float _1338 = _1335 * (_1295.z + (-0.5));
        float _1345 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1302.x + (-0.5));
        float _1347 = _1345 * (_1302.y + (-0.5));
        float _1348 = _1345 * (_1302.z + (-0.5));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1351 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1352 = _1316 * 0.5;
        float _1353 = _1326 * 0.5;
        float _1354 = _1336 * 0.5;
        float _1355 = dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354));
        float _1360 = (_1355 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1355);
        float _1369 = (dot(vec3(_949, _950, _951), vec3(_1360 * _1352, _1360 * _1353, _1360 * _1354)) + 1.0) * 0.5;
        float _4325 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1379 = sqrt(((_1353 * _1353) + (_1352 * _1352)) + (_1354 * _1354)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _4336 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _1381 = _1380 * 2.0;
        float _1385 = (1.0 - _1380) / (_1380 + 1.0);
        float _4347 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _1395 = ((((1.0 - _1386) * (_1381 + 2.0)) * exp2(log2(isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (_1381 + 1.0))) + _1386) * _1349;
        float _1396 = _1317 * 0.5;
        float _1397 = _1327 * 0.5;
        float _1398 = _1337 * 0.5;
        float _1399 = dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398));
        float _1404 = (_1399 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1399);
        float _1412 = (dot(vec3(_949, _950, _951), vec3(_1404 * _1396, _1404 * _1397, _1404 * _1398)) + 1.0) * 0.5;
        float _4358 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1421 = sqrt(((_1397 * _1397) + (_1396 * _1396)) + (_1398 * _1398)) / (_1350 + 9.9999997473787516355514526367188e-06);
        float _4369 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _1423 = _1422 * 2.0;
        float _1427 = (1.0 - _1422) / (_1422 + 1.0);
        float _4380 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _1437 = ((((1.0 - _1428) * (_1423 + 2.0)) * exp2(log2(isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_1423 + 1.0))) + _1428) * _1350;
        float _1438 = _1318 * 0.5;
        float _1439 = _1328 * 0.5;
        float _1440 = _1338 * 0.5;
        float _1441 = dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440));
        float _1446 = (_1441 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1441);
        float _1454 = (dot(vec3(_949, _950, _951), vec3(_1446 * _1438, _1446 * _1439, _1446 * _1440)) + 1.0) * 0.5;
        float _4391 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1463 = sqrt(((_1439 * _1439) + (_1438 * _1438)) + (_1440 * _1440)) / (_1351 + 9.9999997473787516355514526367188e-06);
        float _4402 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _1465 = _1464 * 2.0;
        float _1469 = (1.0 - _1464) / (_1464 + 1.0);
        float _4413 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _1479 = ((((1.0 - _1470) * (_1465 + 2.0)) * exp2(log2(isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * (_1465 + 1.0))) + _1470) * _1351;
        _1487 = _1318;
        _1489 = _1317;
        _1490 = _1316;
        _1491 = _1328;
        _1492 = _1327;
        _1493 = _1326;
        _1494 = _1338;
        _1495 = _1337;
        _1496 = _1336;
        _1497 = _1351;
        _1498 = _1350;
        _1499 = _1349;
        _1500 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)));
        _1501 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)));
        _1502 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)));
    }
    else
    {
        _1487 = _1488;
        _1489 = _1488;
        _1490 = _1488;
        _1491 = _1488;
        _1492 = _1488;
        _1493 = _1488;
        _1494 = _1488;
        _1495 = _1488;
        _1496 = _1488;
        _1497 = _1488;
        _1498 = _1488;
        _1499 = _1488;
        _1500 = 0.0;
        _1501 = 0.0;
        _1502 = 0.0;
    }
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1525 = fma(_1186, cbModelParam._m0[30u].z, fma(_1182, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1178));
        float _1529 = fma(_1186, cbModelParam._m0[31u].z, fma(_1182, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1178));
        float _1533 = fma(_1186, cbModelParam._m0[32u].z, fma(_1182, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1178));
        float _1556 = _1178 + _949;
        float _1557 = _1182 + _950;
        float _1558 = _1186 + _951;
        float _1568 = fma(_1558, cbModelParam._m0[30u].z, fma(_1557, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1556)) - _1525;
        float _1569 = fma(_1558, cbModelParam._m0[31u].z, fma(_1557, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1556)) - _1529;
        float _1570 = fma(_1558, cbModelParam._m0[32u].z, fma(_1557, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1556)) - _1533;
        float _1574 = inversesqrt(dot(vec3(_1568, _1569, _1570), vec3(_1568, _1569, _1570)));
        float _1587 = ((_1574 * _1568) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1525 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1588 = ((_1574 * _1569) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1529 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1589 = ((_1574 * _1570) / cbModelParam._m0[35u].z) + ((((((_1533 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1591 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1587, _1588, _1589), 0.0);
        vec4 _1598 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1587, _1588, _1589), 0.0);
        vec4 _1605 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1587, _1588, _1589), 0.0);
        vec4 _1612 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1587, _1588, _1589), 0.0);
        float _1624 = exp2((_1591.w + (-0.5)) * 20.0) * 2.0;
        float _1625 = _1624 * (_1591.x + (-0.5));
        float _1626 = _1624 * (_1591.y + (-0.5));
        float _1627 = _1624 * (_1591.z + (-0.5));
        float _1634 = exp2((_1598.w + (-0.5)) * 20.0) * 2.0;
        float _1635 = _1634 * (_1598.x + (-0.5));
        float _1636 = _1634 * (_1598.y + (-0.5));
        float _1637 = _1634 * (_1598.z + (-0.5));
        float _1644 = exp2((_1605.w + (-0.5)) * 20.0) * 2.0;
        float _1645 = _1644 * (_1605.x + (-0.5));
        float _1646 = _1644 * (_1605.y + (-0.5));
        float _1647 = _1644 * (_1605.z + (-0.5));
        float _1654 = exp2((_1612.w + (-0.5)) * 20.0) * 2.0;
        float _1655 = _1654 * (_1612.x + (-0.5));
        float _1656 = _1654 * (_1612.y + (-0.5));
        float _1657 = _1654 * (_1612.z + (-0.5));
        float _1658 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1659 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1660 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1661 = _1625 * 0.5;
        float _1662 = _1635 * 0.5;
        float _1663 = _1645 * 0.5;
        float _1664 = dot(vec3(_1661, _1662, _1663), vec3(_1661, _1662, _1663));
        float _1669 = (_1664 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1664);
        float _1677 = (dot(vec3(_949, _950, _951), vec3(_1669 * _1661, _1669 * _1662, _1669 * _1663)) + 1.0) * 0.5;
        float _4454 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1686 = sqrt(((_1662 * _1662) + (_1661 * _1661)) + (_1663 * _1663)) / (_1658 + 9.9999997473787516355514526367188e-06);
        float _4465 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1687 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
        float _1688 = _1687 * 2.0;
        float _1692 = (1.0 - _1687) / (_1687 + 1.0);
        float _4476 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
        float _1702 = ((((1.0 - _1693) * (_1688 + 2.0)) * exp2(log2(isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (_1688 + 1.0))) + _1693) * _1658;
        float _1703 = _1626 * 0.5;
        float _1704 = _1636 * 0.5;
        float _1705 = _1646 * 0.5;
        float _1706 = dot(vec3(_1703, _1704, _1705), vec3(_1703, _1704, _1705));
        float _1711 = (_1706 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1706);
        float _1719 = (dot(vec3(_949, _950, _951), vec3(_1711 * _1703, _1711 * _1704, _1711 * _1705)) + 1.0) * 0.5;
        float _4487 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1728 = sqrt(((_1704 * _1704) + (_1703 * _1703)) + (_1705 * _1705)) / (_1659 + 9.9999997473787516355514526367188e-06);
        float _4498 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1729 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _1730 = _1729 * 2.0;
        float _1734 = (1.0 - _1729) / (_1729 + 1.0);
        float _4509 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1735 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _1744 = ((((1.0 - _1735) * (_1730 + 2.0)) * exp2(log2(isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_1730 + 1.0))) + _1735) * _1659;
        float _1745 = _1627 * 0.5;
        float _1746 = _1637 * 0.5;
        float _1747 = _1647 * 0.5;
        float _1748 = dot(vec3(_1745, _1746, _1747), vec3(_1745, _1746, _1747));
        float _1753 = (_1748 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1748);
        float _1761 = (dot(vec3(_949, _950, _951), vec3(_1753 * _1745, _1753 * _1746, _1753 * _1747)) + 1.0) * 0.5;
        float _4520 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1770 = sqrt(((_1746 * _1746) + (_1745 * _1745)) + (_1747 * _1747)) / (_1660 + 9.9999997473787516355514526367188e-06);
        float _4531 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1771 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _1772 = _1771 * 2.0;
        float _1776 = (1.0 - _1771) / (_1771 + 1.0);
        float _4542 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1777 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _1786 = ((((1.0 - _1777) * (_1772 + 2.0)) * exp2(log2(isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_1772 + 1.0))) + _1777) * _1660;
        _1794 = _1627;
        _1795 = _1626;
        _1796 = _1625;
        _1797 = _1637;
        _1798 = _1636;
        _1799 = _1635;
        _1800 = _1647;
        _1801 = _1646;
        _1802 = _1645;
        _1803 = _1660;
        _1804 = _1659;
        _1805 = _1658;
        _1806 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)));
        _1807 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)));
        _1808 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0)));
    }
    else
    {
        _1794 = _1488;
        _1795 = _1488;
        _1796 = _1488;
        _1797 = _1488;
        _1798 = _1488;
        _1799 = _1488;
        _1800 = _1488;
        _1801 = _1488;
        _1802 = _1488;
        _1803 = _1488;
        _1804 = _1488;
        _1805 = _1488;
        _1806 = 0.0;
        _1807 = 0.0;
        _1808 = 0.0;
    }
    float _1818 = (cbModelParam._m0[1u].x * (_1806 - _1500)) + _1500;
    float _1819 = (cbModelParam._m0[1u].x * (_1807 - _1501)) + _1501;
    float _1820 = (cbModelParam._m0[1u].x * (_1808 - _1502)) + _1502;
    float _1841 = fma(_1820, cbSceneParam._m0[89u].z, fma(_1819, cbSceneParam._m0[89u].y, _1818 * cbSceneParam._m0[89u].x));
    float _1844 = fma(_1820, cbSceneParam._m0[90u].z, fma(_1819, cbSceneParam._m0[90u].y, _1818 * cbSceneParam._m0[90u].x));
    float _1847 = fma(_1820, cbSceneParam._m0[91u].z, fma(_1819, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1818));
    float _1862 = _1124 * 0.5;
    float _1863 = _1125 * 0.5;
    float _1864 = _1126 * 0.5;
    float _1865 = dot(vec4(_1862, _1863, _1864, 1.0), vec4(_1796, _1799, _1802, _1805));
    float _1868 = dot(vec4(_1862, _1863, _1864, 1.0), vec4(_1795, _1798, _1801, _1804));
    float _1871 = dot(vec4(_1862, _1863, _1864, 1.0), vec4(_1794, _1797, _1800, _1803));
    float _1905;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1878 = dot(vec4(_1862, _1863, _1864, 1.0), vec4(_1487, _1491, _1494, _1497));
        float _1882 = dot(vec4(_1862, _1863, _1864, 1.0), vec4(_1489, _1492, _1495, _1498));
        float _1886 = dot(vec4(_1862, _1863, _1864, 1.0), vec4(_1490, _1493, _1496, _1499));
        float _1893 = dot(vec4(cbModelParam._m0[39u]), vec4(_1862, _1863, _1864, 1.0));
        _1905 = dot(vec3(isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0)), isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0)), isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1893) ? 0.0 : (isnan(0.0) ? _1893 : max(0.0, _1893))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1905 = 1.0;
    }
    float _1916;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1907 = dot(vec4(cbModelParam._m0[40u]), vec4(_1862, _1863, _1864, 1.0));
        _1916 = dot(vec3(isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0)), isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0)), isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1907) ? 0.0 : (isnan(0.0) ? _1907 : max(0.0, _1907))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1916 = 1.0;
    }
    float _1920 = (_1916 * cbModelParam._m0[1u].x) + (_1905 * (1.0 - cbModelParam._m0[1u].x));
    float _1930 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _953);
    float _1931 = isnan(_1930) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1930 : min(cbModelParam._m0[25u].z, _1930));
    float _2011;
    float _2013;
    float _2015;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1978 = fma(_1186, cbModelParam._m0[13u].z, fma(_1182, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1178)) + cbModelParam._m0[13u].w;
        float _1982 = fma(_1186, cbModelParam._m0[14u].z, fma(_1182, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1178)) + cbModelParam._m0[14u].w;
        float _1986 = fma(_1186, cbModelParam._m0[15u].z, fma(_1182, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1178)) + cbModelParam._m0[15u].w;
        float _1989 = fma(_1126, cbModelParam._m0[13u].z, fma(_1125, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1124));
        float _1992 = fma(_1126, cbModelParam._m0[14u].z, fma(_1125, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1124));
        float _1995 = fma(_1126, cbModelParam._m0[15u].z, fma(_1125, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1124));
        float _2023;
        if (_1989 > 0.0)
        {
            _2023 = abs((1.0 - _1978) / _1989);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1989 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1978 + 1.0) / _1989);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2023 = frontier_phi_14_12_ladder;
        }
        float _2194;
        if (_1992 > 0.0)
        {
            _2194 = abs((1.0 - _1982) / _1992);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1992 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1982 + 1.0) / _1992);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2194 = frontier_phi_23_19_ladder;
        }
        float _2489;
        if (_1995 > 0.0)
        {
            _2489 = abs((1.0 - _1986) / _1995);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1995 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1986 + 1.0) / _1995);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2489 = frontier_phi_35_30_ladder;
        }
        float _2491 = isnan(_2194) ? _2023 : (isnan(_2023) ? _2194 : min(_2023, _2194));
        float _2492 = isnan(_2489) ? _2491 : (isnan(_2491) ? _2489 : min(_2491, _2489));
        float _2496 = (_2492 * _1989) + _1978;
        float _2497 = (_2492 * _1992) + _1982;
        float _2498 = (_2492 * _1995) + _1986;
        float _2499 = _2492 * 9.9999997473787516355514526367188e-05;
        float _2501 = (-1.0) - _2499;
        float _2503 = _2499 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2498 > _2503) || ((_2498 < _2501) || ((_2497 > _2503) || ((_2497 < _2501) || ((_2496 < _2501) || (_2496 > _2503))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2643 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2498, cbModelParam._m0[9u].z, fma(_2497, cbModelParam._m0[9u].y, _2496 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2498, cbModelParam._m0[10u].z, fma(_2497, cbModelParam._m0[10u].y, _2496 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2498, cbModelParam._m0[11u].z, fma(_2497, cbModelParam._m0[11u].y, _2496 * cbModelParam._m0[11u].x))), _1931);
            frontier_phi_13_35_ladder = _2643.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2643.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2643.x * cbModelParam._m0[1u].y;
        }
        _2011 = frontier_phi_13_35_ladder_2;
        _2013 = frontier_phi_13_35_ladder_1;
        _2015 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1999 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1124, _1125, _1126), _1931);
        _2011 = _1999.x * cbModelParam._m0[1u].y;
        _2013 = _1999.y * cbModelParam._m0[1u].y;
        _2015 = _1999.z * cbModelParam._m0[1u].y;
    }
    float _2019 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _953);
    float _2020 = isnan(_2019) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2019 : min(cbModelParam._m0[25u].w, _2019));
    float _2109;
    float _2111;
    float _2113;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2073 = fma(_1186, cbModelParam._m0[21u].z, fma(_1182, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1178)) + cbModelParam._m0[21u].w;
        float _2077 = fma(_1186, cbModelParam._m0[22u].z, fma(_1182, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1178)) + cbModelParam._m0[22u].w;
        float _2081 = fma(_1186, cbModelParam._m0[23u].z, fma(_1182, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1178)) + cbModelParam._m0[23u].w;
        float _2084 = fma(_1126, cbModelParam._m0[21u].z, fma(_1125, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1124));
        float _2087 = fma(_1126, cbModelParam._m0[22u].z, fma(_1125, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1124));
        float _2090 = fma(_1126, cbModelParam._m0[23u].z, fma(_1125, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1124));
        float _2199;
        if (_2084 > 0.0)
        {
            _2199 = abs((1.0 - _2073) / _2084);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2084 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2073 + 1.0) / _2084);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2199 = frontier_phi_25_21_ladder;
        }
        float _2516;
        if (_2087 > 0.0)
        {
            _2516 = abs((1.0 - _2077) / _2087);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2087 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2077 + 1.0) / _2087);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2516 = frontier_phi_37_32_ladder;
        }
        float _2854;
        if (_2090 > 0.0)
        {
            _2854 = abs((1.0 - _2081) / _2090);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2090 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2081 + 1.0) / _2090);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2854 = frontier_phi_47_44_ladder;
        }
        float _2856 = isnan(_2516) ? _2199 : (isnan(_2199) ? _2516 : min(_2199, _2516));
        float _2857 = isnan(_2854) ? _2856 : (isnan(_2856) ? _2854 : min(_2856, _2854));
        float _2861 = (_2857 * _2084) + _2073;
        float _2862 = (_2857 * _2087) + _2077;
        float _2863 = (_2857 * _2090) + _2081;
        float _2864 = _2857 * 9.9999997473787516355514526367188e-05;
        float _2865 = (-1.0) - _2864;
        float _2867 = _2864 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2863 > _2867) || ((_2863 < _2865) || ((_2862 > _2867) || ((_2862 < _2865) || ((_2861 < _2865) || (_2861 > _2867))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2985 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2863, cbModelParam._m0[17u].z, fma(_2862, cbModelParam._m0[17u].y, _2861 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2863, cbModelParam._m0[18u].z, fma(_2862, cbModelParam._m0[18u].y, _2861 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2863, cbModelParam._m0[19u].z, fma(_2862, cbModelParam._m0[19u].y, _2861 * cbModelParam._m0[19u].x))), _2020);
            frontier_phi_22_47_ladder = _2985.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2985.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2985.x * cbModelParam._m0[1u].z;
        }
        _2109 = frontier_phi_22_47_ladder_2;
        _2111 = frontier_phi_22_47_ladder_1;
        _2113 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2093 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1124, _1125, _1126), _2020);
        _2109 = _2093.x * cbModelParam._m0[1u].z;
        _2111 = _2093.y * cbModelParam._m0[1u].z;
        _2113 = _2093.z * cbModelParam._m0[1u].z;
    }
    float _2126 = (((_1149 * _1101) + _1150) * _1116) * ((cbModelParam._m0[1u].w * (_2109 - _2011)) + _2011);
    float _2128 = (((_1149 * _1103) + _1150) * _1116) * ((cbModelParam._m0[1u].w * (_2111 - _2013)) + _2013);
    float _2130 = (((_1149 * _1104) + _1150) * _1116) * ((cbModelParam._m0[1u].w * (_2113 - _2015)) + _2015);
    float _2133 = fma(_2130, cbSceneParam._m0[89u].z, fma(_2128, cbSceneParam._m0[89u].y, _2126 * cbSceneParam._m0[89u].x));
    float _2136 = fma(_2130, cbSceneParam._m0[90u].z, fma(_2128, cbSceneParam._m0[90u].y, _2126 * cbSceneParam._m0[90u].x));
    float _2139 = fma(_2130, cbSceneParam._m0[91u].z, fma(_2128, cbSceneParam._m0[91u].y, _2126 * cbSceneParam._m0[91u].x));
    float _2173 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2177 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2181 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2185 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2186 = _2173 / _2185;
    float _2187 = _2177 / _2185;
    float _2188 = _2181 / _2185;
    float _2335;
    float _2336;
    float _2337;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2215 = ((uint(_2188 > cbSceneParam._m0[59u].y) + uint(_2188 > cbSceneParam._m0[59u].x)) + uint(_2188 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2216 = _2215 + 43u;
        uint _2224 = _2215 + 44u;
        uint _2232 = _2215 + 45u;
        uint _2240 = _2215 + 46u;
        float _2251 = fma(_2185, cbSceneParam._m0[_2216].w, fma(_2181, cbSceneParam._m0[_2216].z, fma(_2177, cbSceneParam._m0[_2216].y, _2173 * cbSceneParam._m0[_2216].x)));
        float _2255 = fma(_2185, cbSceneParam._m0[_2224].w, fma(_2181, cbSceneParam._m0[_2224].z, fma(_2177, cbSceneParam._m0[_2224].y, _2173 * cbSceneParam._m0[_2224].x)));
        float _2263 = fma(_2185, cbSceneParam._m0[_2240].w, fma(_2181, cbSceneParam._m0[_2240].z, fma(_2177, cbSceneParam._m0[_2240].y, _2173 * cbSceneParam._m0[_2240].x)));
        float _2268 = cbSceneParam._m0[33u].z * _2263;
        float _2270 = cbSceneParam._m0[33u].w * _2263;
        float _2273 = fma(_2185, cbSceneParam._m0[_2232].w, fma(_2181, cbSceneParam._m0[_2232].z, fma(_2177, cbSceneParam._m0[_2232].y, _2173 * cbSceneParam._m0[_2232].x))) / _2263;
        float _2321 = (cbSceneParam._m0[33u].x - sqrt(((_2187 * _2187) + (_2186 * _2186)) + (_2188 * _2188))) * cbSceneParam._m0[33u].y;
        float _4668 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2328 = (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2268 + _2251) / _2263, (_2270 + _2255) / _2263), _2273), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2270 + _2251) / _2263, (_2255 - _2268) / _2263), _2273), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2251 - _2268) / _2263, (_2255 - _2270) / _2263), _2273), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2251 - _2270) / _2263, (_2268 + _2255) / _2263), _2273), 0.0)).x), vec4(0.25)));
        _2335 = 1.0 - (_2328 * cbSceneParam._m0[34u].x);
        _2336 = 1.0 - (_2328 * cbSceneParam._m0[34u].y);
        _2337 = 1.0 - (_2328 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2335 = 1.0;
        _2336 = 1.0;
        _2337 = 1.0;
    }
    float _2401;
    float _2403;
    float _2405;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2389 = fma(_2185, cbSceneParam._m0[63u].w, fma(_2181, cbSceneParam._m0[63u].z, fma(_2177, cbSceneParam._m0[63u].y, _2173 * cbSceneParam._m0[63u].x)));
        float _2390 = fma(_2185, cbSceneParam._m0[60u].w, fma(_2181, cbSceneParam._m0[60u].z, fma(_2177, cbSceneParam._m0[60u].y, _2173 * cbSceneParam._m0[60u].x))) / _2389;
        float _2391 = fma(_2185, cbSceneParam._m0[61u].w, fma(_2181, cbSceneParam._m0[61u].z, fma(_2177, cbSceneParam._m0[61u].y, _2173 * cbSceneParam._m0[61u].x))) / _2389;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2390 >= cbSceneParam._m0[64u].x) && (_2391 >= cbSceneParam._m0[64u].y)) && (_2390 <= cbSceneParam._m0[64u].z)) && (_2391 <= cbSceneParam._m0[64u].w))
        {
            float _2529 = fma(_2185, cbSceneParam._m0[62u].w, fma(_2181, cbSceneParam._m0[62u].z, fma(_2177, cbSceneParam._m0[62u].y, _2173 * cbSceneParam._m0[62u].x))) / _2389;
            float _2533 = isnan(cbSceneParam._m0[41u].w) ? _2529 : (isnan(_2529) ? cbSceneParam._m0[41u].w : max(_2529, cbSceneParam._m0[41u].w));
            float _2576 = (cbSceneParam._m0[33u].x - sqrt(((_2187 * _2187) + (_2186 * _2186)) + (_2188 * _2188))) * cbSceneParam._m0[33u].y;
            float _4684 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
            float _2583 = (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2390, cbSceneParam._m0[33u].w + _2391), _2533), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2390, _2391 - cbSceneParam._m0[33u].z), _2533), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2390 - cbSceneParam._m0[33u].z, _2391 - cbSceneParam._m0[33u].w), _2533), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2390 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2391), _2533), 0.0)).x), vec4(0.25)));
            float _2587 = 1.0 - (_2583 * cbSceneParam._m0[34u].x);
            float _2588 = 1.0 - (_2583 * cbSceneParam._m0[34u].y);
            float _2589 = 1.0 - (_2583 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2589) ? _2337 : (isnan(_2337) ? _2589 : min(_2337, _2589));
            frontier_phi_34_33_ladder_1 = isnan(_2588) ? _2336 : (isnan(_2336) ? _2588 : min(_2336, _2588));
            frontier_phi_34_33_ladder_2 = isnan(_2587) ? _2335 : (isnan(_2335) ? _2587 : min(_2335, _2587));
        }
        else
        {
            frontier_phi_34_33_ladder = _2337;
            frontier_phi_34_33_ladder_1 = _2336;
            frontier_phi_34_33_ladder_2 = _2335;
        }
        _2401 = frontier_phi_34_33_ladder_2;
        _2403 = frontier_phi_34_33_ladder_1;
        _2405 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2401 = _2335;
        _2403 = _2336;
        _2405 = _2337;
    }
    uvec4 _2410 = floatBitsToUint(cbInstanceData._m0[_1076 + 5u]);
    uint _2412 = _2410.x * 14u;
    uint _2413 = _2412 + 13u;
    float _2420 = _1116 + (-1.0);
    float _2425 = (cbLight._m0[_2413].x * _2420) + 1.0;
    float _2426 = (cbLight._m0[_2413].y * _2420) + 1.0;
    float _2427 = (cbLight._m0[_2413].z * _2420) + 1.0;
    float _2428 = (cbLight._m0[_2413].w * _2420) + 1.0;
    uint _2429 = _2412 + 5u;
    float _2435 = isnan(1.0) ? _2426 : (isnan(_2426) ? 1.0 : min(_2426, 1.0));
    uint _2439 = _2412 + 4u;
    float _2448 = isnan(1.0) ? _2425 : (isnan(_2425) ? 1.0 : min(_2425, 1.0));
    uint _2452 = _2412 | 1u;
    float _2463 = dot(vec3(cbLight._m0[_2412].xyz), vec3(_949, _950, _951));
    float _2466 = dot(vec3(cbLight._m0[_2452].xyz), vec3(_949, _950, _951));
    float _4720 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
    float _4731 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _2471 = (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0))) * 0.3183098733425140380859375;
    float _2473 = (isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0))) * 0.3183098733425140380859375;
    float _2480 = ((cbLight._m0[_2429].x * _2435) * _2473) + (((cbLight._m0[_2439].x * _2401) * _2448) * _2471);
    float _2481 = ((_2435 * cbLight._m0[_2429].y) * _2473) + (((cbLight._m0[_2439].y * _2403) * _2448) * _2471);
    float _2482 = ((_2435 * cbLight._m0[_2429].z) * _2473) + (((cbLight._m0[_2439].z * _2405) * _2448) * _2471);
    uvec4 _2486 = floatBitsToUint(cbLight._m0[_2412 + 12u]);
    bool _2488 = _2486.x == 0u;
    float _2590;
    float _2592;
    float _2594;
    if (_2488)
    {
        _2590 = _2480;
        _2592 = _2481;
        _2594 = _2482;
    }
    else
    {
        uint _2598 = _2412 + 6u;
        float _2614 = (dot(vec3(cbLight._m0[_2412 + 2u].xyz), vec3(_949, _950, _951)) * 0.5) + 0.5;
        float _2615 = _2614 * _2614;
        float _4742 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        float _2616 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
        float _2617 = isnan(1.0) ? _2427 : (isnan(_2427) ? 1.0 : min(_2427, 1.0));
        _2590 = (((cbLight._m0[_2598].x * 0.3183098733425140380859375) * _2616) * _2617) + _2480;
        _2592 = (((cbLight._m0[_2598].y * 0.3183098733425140380859375) * _2616) * _2617) + _2481;
        _2594 = (((cbLight._m0[_2598].z * 0.3183098733425140380859375) * _2616) * _2617) + _2482;
    }
    bool _2597 = _2486.y == 0u;
    float _2652;
    float _2654;
    float _2656;
    if (_2597)
    {
        _2652 = _2590;
        _2654 = _2592;
        _2656 = _2594;
    }
    else
    {
        uint _2825 = _2412 + 7u;
        float _2841 = (dot(vec3(cbLight._m0[_2412 + 3u].xyz), vec3(_949, _950, _951)) * 0.5) + 0.5;
        float _2842 = _2841 * _2841;
        float _4758 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
        float _2843 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
        float _2844 = isnan(1.0) ? _2428 : (isnan(_2428) ? 1.0 : min(_2428, 1.0));
        _2652 = (((cbLight._m0[_2825].x * 0.3183098733425140380859375) * _2843) * _2844) + _2590;
        _2654 = (((cbLight._m0[_2825].y * 0.3183098733425140380859375) * _2843) * _2844) + _2592;
        _2656 = (((cbLight._m0[_2825].z * 0.3183098733425140380859375) * _2843) * _2844) + _2594;
    }
    uint _2659 = _2412 + 8u;
    float _2672 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2412].w)) * _953) * 0.949999988079071044921875);
    float _2673 = _2672 * _2672;
    float _2674 = cbLight._m0[_2412].x + _1030;
    float _2675 = cbLight._m0[_2412].y + _1031;
    float _2676 = cbLight._m0[_2412].z + _1032;
    float _2680 = inversesqrt(dot(vec3(_2674, _2675, _2676), vec3(_2674, _2675, _2676)));
    float _2681 = _2680 * _2674;
    float _2682 = _2680 * _2675;
    float _2683 = _2680 * _2676;
    float _2684 = dot(vec3(_949, _950, _951), vec3(cbLight._m0[_2412].xyz));
    float _4774 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
    float _2687 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
    float _4785 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _2688 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
    float _2689 = dot(vec3(_949, _950, _951), vec3(_2681, _2682, _2683));
    float _4796 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
    float _2692 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
    float _2693 = dot(vec3(cbLight._m0[_2412].xyz), vec3(_2681, _2682, _2683));
    float _4807 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
    float _2697 = _2673 * _2673;
    float _2701 = ((_2692 * _2692) * (_2697 + (-1.0))) + 1.0;
    float _2709 = exp2(log2(1.0 - (isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0)))) * 5.0);
    float _2710 = 0.959999978542327880859375 - _1098;
    float _2712 = 0.959999978542327880859375 - _1099;
    float _2713 = 0.959999978542327880859375 - _1100;
    float _2720 = 1.0 - _2673;
    float _2731 = (0.5 / (((_2688 * ((_2687 * _2720) + _2673)) + 9.9999999392252902907785028219223e-09) + (((_2688 * _2720) + _2673) * _2687))) * _2687;
    float _4818 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
    float _2733 = (isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0))) * (_2697 / ((_2701 * _2701) * 3.141590118408203125));
    uint _2747 = _2412 + 9u;
    float _2758 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2452].w)) * _953) * 0.949999988079071044921875);
    float _2759 = _2758 * _2758;
    float _2760 = cbLight._m0[_2452].x + _1030;
    float _2761 = cbLight._m0[_2452].y + _1031;
    float _2762 = cbLight._m0[_2452].z + _1032;
    float _2766 = inversesqrt(dot(vec3(_2760, _2761, _2762), vec3(_2760, _2761, _2762)));
    float _2767 = _2766 * _2760;
    float _2768 = _2766 * _2761;
    float _2769 = _2766 * _2762;
    float _2770 = dot(vec3(_949, _950, _951), vec3(cbLight._m0[_2452].xyz));
    float _4829 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
    float _2773 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
    float _2774 = dot(vec3(_949, _950, _951), vec3(_2767, _2768, _2769));
    float _4840 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
    float _2777 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
    float _2778 = dot(vec3(cbLight._m0[_2452].xyz), vec3(_2767, _2768, _2769));
    float _4851 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
    float _2782 = _2759 * _2759;
    float _2786 = ((_2777 * _2777) * (_2782 + (-1.0))) + 1.0;
    float _2793 = exp2(log2(1.0 - (isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0)))) * 5.0);
    float _2800 = 1.0 - _2759;
    float _2810 = (0.5 / (((_2688 * ((_2773 * _2800) + _2759)) + 9.9999999392252902907785028219223e-09) + (((_2688 * _2800) + _2759) * _2773))) * _2773;
    float _4862 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
    float _2812 = (isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0))) * (_2782 / ((_2786 * _2786) * 3.141590118408203125));
    float _2822 = (((((_2793 * _2710) + _1101) * cbLight._m0[_2747].x) * _2812) * _2435) + ((((cbLight._m0[_2659].x * _2401) * ((_2709 * _2710) + _1101)) * _2733) * _2448);
    float _2823 = (((((_2793 * _2712) + _1103) * cbLight._m0[_2747].y) * _2812) * _2435) + ((((cbLight._m0[_2659].y * _2403) * ((_2709 * _2712) + _1103)) * _2733) * _2448);
    float _2824 = (((((_2793 * _2713) + _1104) * cbLight._m0[_2747].z) * _2812) * _2435) + ((((cbLight._m0[_2659].z * _2405) * ((_2709 * _2713) + _1104)) * _2733) * _2448);
    float _2880;
    float _2882;
    float _2884;
    if (_2488)
    {
        _2880 = _2822;
        _2882 = _2823;
        _2884 = _2824;
    }
    else
    {
        uint _2886 = _2412 + 2u;
        uint _2890 = _2412 + 10u;
        float _2904 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2886].w)) * _953) * 0.949999988079071044921875);
        float _2905 = _2904 * _2904;
        float _2906 = cbLight._m0[_2886].x + _1030;
        float _2907 = cbLight._m0[_2886].y + _1031;
        float _2908 = cbLight._m0[_2886].z + _1032;
        float _2912 = inversesqrt(dot(vec3(_2906, _2907, _2908), vec3(_2906, _2907, _2908)));
        float _2913 = _2912 * _2906;
        float _2914 = _2912 * _2907;
        float _2915 = _2912 * _2908;
        float _2916 = dot(vec3(_949, _950, _951), vec3(cbLight._m0[_2886].xyz));
        float _4873 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
        float _2919 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
        float _2920 = dot(vec3(_949, _950, _951), vec3(_2913, _2914, _2915));
        float _4884 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
        float _2923 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
        float _2924 = dot(vec3(cbLight._m0[_2886].xyz), vec3(_2913, _2914, _2915));
        float _4895 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
        float _2928 = _2905 * _2905;
        float _2932 = ((_2923 * _2923) * (_2928 + (-1.0))) + 1.0;
        float _2939 = exp2(log2(1.0 - (isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0)))) * 5.0);
        float _2946 = 1.0 - _2905;
        float _2956 = (0.5 / (((_2688 * ((_2919 * _2946) + _2905)) + 9.9999999392252902907785028219223e-09) + (((_2688 * _2946) + _2905) * _2919))) * _2919;
        float _4906 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
        float _2958 = (isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0))) * (_2928 / ((_2932 * _2932) * 3.141590118408203125));
        float _2959 = isnan(1.0) ? _2427 : (isnan(_2427) ? 1.0 : min(_2427, 1.0));
        _2880 = (((((_2939 * _2710) + _1101) * cbLight._m0[_2890].x) * _2958) * _2959) + _2822;
        _2882 = (((((_2939 * _2712) + _1103) * cbLight._m0[_2890].y) * _2958) * _2959) + _2823;
        _2884 = (((((_2939 * _2713) + _1104) * cbLight._m0[_2890].z) * _2958) * _2959) + _2824;
    }
    float _2990;
    float _2992;
    float _2994;
    if (_2597)
    {
        _2990 = _2880;
        _2992 = _2882;
        _2994 = _2884;
    }
    else
    {
        uint _3001 = _2412 + 3u;
        uint _3005 = _2412 + 11u;
        float _3019 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3001].w)) * _953) * 0.949999988079071044921875);
        float _3020 = _3019 * _3019;
        float _3021 = cbLight._m0[_3001].x + _1030;
        float _3022 = cbLight._m0[_3001].y + _1031;
        float _3023 = cbLight._m0[_3001].z + _1032;
        float _3027 = inversesqrt(dot(vec3(_3021, _3022, _3023), vec3(_3021, _3022, _3023)));
        float _3028 = _3027 * _3021;
        float _3029 = _3027 * _3022;
        float _3030 = _3027 * _3023;
        float _3031 = dot(vec3(_949, _950, _951), vec3(cbLight._m0[_3001].xyz));
        float _4922 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
        float _3034 = isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0));
        float _3035 = dot(vec3(_949, _950, _951), vec3(_3028, _3029, _3030));
        float _4933 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
        float _3038 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
        float _3039 = dot(vec3(cbLight._m0[_3001].xyz), vec3(_3028, _3029, _3030));
        float _4944 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
        float _3043 = _3020 * _3020;
        float _3047 = ((_3038 * _3038) * (_3043 + (-1.0))) + 1.0;
        float _3054 = exp2(log2(1.0 - (isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0)))) * 5.0);
        float _3061 = 1.0 - _3020;
        float _3071 = (0.5 / (((_2688 * ((_3034 * _3061) + _3020)) + 9.9999999392252902907785028219223e-09) + (((_2688 * _3061) + _3020) * _3034))) * _3034;
        float _4955 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
        float _3073 = (isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0))) * (_3043 / ((_3047 * _3047) * 3.141590118408203125));
        float _3074 = isnan(1.0) ? _2428 : (isnan(_2428) ? 1.0 : min(_2428, 1.0));
        _2990 = (((((_3054 * _2710) + _1101) * cbLight._m0[_3005].x) * _3073) * _3074) + _2880;
        _2992 = (((((_3054 * _2712) + _1103) * cbLight._m0[_3005].y) * _3073) * _3074) + _2882;
        _2994 = (((((_3054 * _2713) + _1104) * cbLight._m0[_3005].z) * _3073) * _3074) + _2884;
    }
    float _3140;
    float _3142;
    float _3144;
    float _3146;
    float _3148;
    float _3150;
    if (_2410.y == 0u)
    {
        uvec4 _3095 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3096 = _3095.x;
        uint _3107 = uint((float(_3095.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1039) / _3096))) + floor(float(uint(cbSceneParam._m0[85u].x * _1038) / _3096)));
        float _3117 = (log2(_2188 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3118 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
        uint _3121 = uint(isnan(14.0) ? _3118 : (isnan(_3118) ? 14.0 : min(_3118, 14.0)));
        uvec4 _3126 = texelFetch(g_lightClusterGridBuffer, int(((_3121 << 2u) + (_3107 << 6u)) >> 2u));
        uint _3127 = _3126.x;
        uint _3128 = _3095.z;
        float _3209;
        float _3211;
        float _3213;
        float _3215;
        float _3217;
        float _3219;
        if (((((1u << ((_3128 >> 4u) & 15u)) + 4294967295u) & _3127) == 0u) || ((_3128 & 240u) == 0u))
        {
            _3209 = 0.0;
            _3211 = 0.0;
            _3213 = 0.0;
            _3215 = 0.0;
            _3217 = 0.0;
            _3219 = 0.0;
        }
        else
        {
            float _3210;
            float _3212;
            float _3214;
            float _3216;
            float _3218;
            float _3220;
            float _3354 = 0.0;
            float _3355 = 0.0;
            float _3356 = 0.0;
            float _3357 = 0.0;
            float _3358 = 0.0;
            float _3359 = 0.0;
            uint _3360 = 0u;
            uint _3369;
            bool _3370;
            for (;;)
            {
                _3369 = texelFetch(g_lightClassification, int((((_3121 << 5u) + (_3107 << 9u)) + (_3360 << 2u)) >> 2u)).x;
                _3370 = _3369 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3370)
                {
                    frontier_phi_66_pred = _3359;
                    frontier_phi_66_pred_1 = _3358;
                    frontier_phi_66_pred_2 = _3357;
                    frontier_phi_66_pred_3 = _3356;
                    frontier_phi_66_pred_4 = _3355;
                    frontier_phi_66_pred_5 = _3354;
                }
                else
                {
                    float _3478;
                    float _3479;
                    float _3480;
                    float _3481;
                    float _3482;
                    float _3483;
                    uint _3484;
                    _3478 = _3354;
                    _3479 = _3355;
                    _3480 = _3356;
                    _3481 = _3357;
                    _3482 = _3358;
                    _3483 = _3359;
                    _3484 = _3369;
                    float _3410;
                    float _3411;
                    float _3412;
                    float _3413;
                    float _3414;
                    float _3415;
                    for (;;)
                    {
                        uint _3488 = uint(findLSB(_3484)) + (_3360 << 5u);
                        uint _3485 = (_3484 + 4294967295u) & _3484;
                        uint _3490 = _3488 * 48u;
                        vec4 _3504 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3490)).x, texelFetch(g_PointLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3490 + 3u)).x));
                        uint _3510 = (_3488 * 48u) + 4u;
                        vec4 _3523 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3510)).x, texelFetch(g_PointLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3510 + 3u)).x));
                        uint _3529 = (_3488 * 48u) + 8u;
                        vec3 _3540 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3529)).x, texelFetch(g_PointLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3529 + 2u)).x));
                        float _3544 = _3504.x - _2186;
                        float _3545 = _3504.y - _2187;
                        float _3546 = _3504.z - _2188;
                        float _3547 = dot(vec3(_3544, _3545, _3546), vec3(_3544, _3545, _3546));
                        float _3550 = inversesqrt(_3547);
                        float _3551 = _3550 * _3544;
                        float _3552 = _3550 * _3545;
                        float _3553 = _3550 * _3546;
                        float _3554 = dot(vec3(_1057, _1060, _1063), vec3(_3551, _3552, _3553));
                        float _3559 = 1.0 - (_3547 * _3504.w);
                        float _4981 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                        float _3560 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
                        float _3561 = sqrt(_3547) * _3523.w;
                        float _3564 = 1.39999997615814208984375 / (_3561 + 1.39999997615814208984375);
                        float _3565 = _3564 * _3564;
                        float _3568 = ((1.0 - _3565) * _3554) + _3565;
                        float _3571 = _3561 * _3561;
                        float _3575 = ((isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0))) * _3560) / ((_3571 * 0.699999988079071044921875) + 1.0);
                        float _3579 = (-0.0) - _2186;
                        float _3580 = (-0.0) - _2187;
                        float _3581 = (-0.0) - _2188;
                        float _3585 = inversesqrt(dot(vec3(_3579, _3580, _3581), vec3(_3579, _3580, _3581)));
                        float _3586 = _3585 * _3579;
                        float _3587 = _3585 * _3580;
                        float _3588 = _3585 * _3581;
                        float _3595 = exp2(log2(1.0 / ((_3571 * 3.5) + 5.0)) * 0.25);
                        float _3596 = 1.0 - _1132;
                        float _3603 = sqrt(1.0 - ((1.0 - (_3596 * _3596)) * (1.0 - (_3595 * _3595))));
                        float _3604 = _3603 * _3603;
                        float _3605 = _3604 * _3604;
                        float _3606 = _3586 + _3551;
                        float _3607 = _3587 + _3552;
                        float _3608 = _3588 + _3553;
                        float _3612 = inversesqrt(dot(vec3(_3606, _3607, _3608), vec3(_3606, _3607, _3608)));
                        float _3616 = dot(vec3(_1057, _1060, _1063), vec3(_3586, _3587, _3588));
                        float _4997 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                        float _3619 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
                        float _3620 = dot(vec3(_1057, _1060, _1063), vec3(_3612 * _3606, _3612 * _3607, _3612 * _3608));
                        float _5008 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                        float _3623 = isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0));
                        float _3627 = ((_3623 * _3623) * (_3605 + (-1.0))) + 1.0;
                        float _3628 = _3564 * _3604;
                        float _3629 = _3628 * _3628;
                        float _3632 = ((1.0 - _3629) * _3554) + _3629;
                        float _5019 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                        float _3633 = isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0));
                        float _3634 = 1.0 - _3604;
                        float _3644 = (0.5 / (((_3633 * ((_3619 * _3634) + _3604)) + 9.9999999392252902907785028219223e-09) + (((_3633 * _3634) + _3604) * _3619))) * _3633;
                        float _5030 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                        float _3655 = (((_3605 * 3.1415927410125732421875) * (isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0)))) / ((_3627 * _3627) * ((_3571 * 2.1991131305694580078125) + 3.141590118408203125))) * _3560;
                        _3413 = (_3575 * _3523.x) + _3481;
                        _3414 = (_3575 * _3523.y) + _3482;
                        _3415 = (_3575 * _3523.z) + _3483;
                        _3410 = (_3655 * _3540.x) + _3478;
                        _3411 = (_3655 * _3540.y) + _3479;
                        _3412 = (_3655 * _3540.z) + _3480;
                        if (_3485 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3478 = _3410;
                            _3479 = _3411;
                            _3480 = _3412;
                            _3481 = _3413;
                            _3482 = _3414;
                            _3483 = _3415;
                            _3484 = _3485;
                        }
                    }
                    frontier_phi_66_pred = _3415;
                    frontier_phi_66_pred_1 = _3414;
                    frontier_phi_66_pred_2 = _3413;
                    frontier_phi_66_pred_3 = _3412;
                    frontier_phi_66_pred_4 = _3411;
                    frontier_phi_66_pred_5 = _3410;
                }
                _3220 = frontier_phi_66_pred;
                _3218 = frontier_phi_66_pred_1;
                _3216 = frontier_phi_66_pred_2;
                _3214 = frontier_phi_66_pred_3;
                _3212 = frontier_phi_66_pred_4;
                _3210 = frontier_phi_66_pred_5;
                uint _3361 = _3360 + 1u;
                if (_3361 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3354 = _3210;
                    _3355 = _3212;
                    _3356 = _3214;
                    _3357 = _3216;
                    _3358 = _3218;
                    _3359 = _3220;
                    _3360 = _3361;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3209 = _3210;
            _3211 = _3212;
            _3213 = _3214;
            _3215 = _3216;
            _3217 = _3218;
            _3219 = _3220;
        }
        uvec4 _3223 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3224 = _3223.z;
        uint _3226 = (_3224 >> 8u) & 15u;
        float _3322;
        float _3324;
        float _3326;
        float _3328;
        float _3330;
        float _3332;
        if (((4294967295u << _3226) & _3127) == 0u)
        {
            _3322 = _3209;
            _3324 = _3211;
            _3326 = _3213;
            _3328 = _3215;
            _3330 = _3217;
            _3332 = _3219;
        }
        else
        {
            float _3347 = inversesqrt(dot(vec3(_2186, _2187, _2188), vec3(_2186, _2187, _2188)));
            float _3348 = _3347 * _2186;
            float _3349 = _3347 * _2187;
            float _3350 = _3347 * _2188;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3226 < ((_3224 >> 12u) & 15u))
            {
                float _3323;
                float _3325;
                float _3327;
                float _3329;
                float _3331;
                float _3333;
                float _3461 = _3209;
                float _3462 = _3211;
                float _3463 = _3213;
                float _3464 = _3215;
                float _3465 = _3217;
                float _3466 = _3219;
                uint _3467 = _3226;
                uint _3476;
                bool _3477;
                for (;;)
                {
                    _3476 = texelFetch(g_lightClassification, int((((_3121 << 5u) + (_3107 << 9u)) + (_3467 << 2u)) >> 2u)).x;
                    _3477 = _3476 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3477)
                    {
                        frontier_phi_72_pred = _3466;
                        frontier_phi_72_pred_1 = _3465;
                        frontier_phi_72_pred_2 = _3464;
                        frontier_phi_72_pred_3 = _3463;
                        frontier_phi_72_pred_4 = _3462;
                        frontier_phi_72_pred_5 = _3461;
                    }
                    else
                    {
                        float _3660;
                        float _3661;
                        float _3662;
                        float _3663;
                        float _3664;
                        float _3665;
                        float _3953;
                        float _3954;
                        float _3955;
                        float _3956;
                        float _3957;
                        float _3958;
                        float _3673 = _3461;
                        float _3674 = _3462;
                        float _3675 = _3463;
                        float _3676 = _3464;
                        float _3677 = _3465;
                        float _3678 = _3466;
                        uint _3679 = _3476;
                        uint _3680;
                        vec4 _3705;
                        float _3706;
                        vec4 _3721;
                        vec3 _3733;
                        vec4 _3748;
                        vec4 _3763;
                        float _3809;
                        bool _3810;
                        for (;;)
                        {
                            uint _3690 = ((_3467 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3679));
                            _3680 = (_3679 + 4294967295u) & _3679;
                            uint _3692 = _3690 * 40u;
                            _3705 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3692)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 3u)).x));
                            _3706 = _3705.w;
                            uint _3708 = (_3690 * 40u) + 4u;
                            _3721 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3708)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 3u)).x));
                            uint _3723 = (_3690 * 40u) + 8u;
                            _3733 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3723)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 2u)).x));
                            uint _3735 = (_3690 * 40u) + 16u;
                            _3748 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3735)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 3u)).x));
                            uint _3750 = (_3690 * 40u) + 20u;
                            _3763 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3750)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 3u)).x));
                            uint _3765 = (_3690 * 40u) + 24u;
                            vec4 _3778 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3765)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3765 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3765 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3765 + 3u)).x));
                            uint _3784 = (_3690 * 40u) + 28u;
                            vec4 _3797 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3784)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 3u)).x));
                            _3809 = fma(_2188, _3797.z, fma(_2187, _3797.y, _3797.x * _2186)) + _3797.w;
                            _3810 = !((fma(_2188, _3778.z, fma(_2187, _3778.y, _3778.x * _2186)) + _3778.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3810)
                            {
                                float _3837 = _3705.x - _2186;
                                float _3838 = _3705.y - _2187;
                                float _3839 = _3705.z - _2188;
                                float _3840 = dot(vec3(_3837, _3838, _3839), vec3(_3837, _3838, _3839));
                                float _3843 = inversesqrt(_3840);
                                float _3844 = _3843 * _3837;
                                float _3845 = _3843 * _3838;
                                float _3846 = _3843 * _3839;
                                float _3850 = 1.0 - (_3840 / (_3706 * _3706));
                                float _5041 = isnan(0.0) ? _3850 : (isnan(_3850) ? 0.0 : max(_3850, 0.0));
                                float _3851 = isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0));
                                float _3855 = sqrt(_3840) * _3721.w;
                                float _3857 = 1.39999997615814208984375 / (_3855 + 1.39999997615814208984375);
                                float _3858 = _3857 * _3857;
                                float _3861 = ((1.0 - _3858) * dot(vec3(_3844, _3845, _3846), vec3(_1057, _1060, _1063))) + _3858;
                                float _3864 = _3855 * _3855;
                                float _3868 = (fma(_2188, _3748.z, fma(_2187, _3748.y, _3748.x * _2186)) + _3748.w) / _3809;
                                float _3869 = (fma(_2188, _3763.z, fma(_2187, _3763.y, _3763.x * _2186)) + _3763.w) / _3809;
                                float _3873 = 1.0 - dot(vec2(_3868, _3869), vec2(_3868, _3869));
                                float _5057 = isnan(0.0) ? _3873 : (isnan(_3873) ? 0.0 : max(_3873, 0.0));
                                float _3874 = isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0));
                                float _3875 = _3874 * (((isnan(0.0) ? _3861 : (isnan(_3861) ? 0.0 : max(_3861, 0.0))) * _3851) / ((_3864 * 0.699999988079071044921875) + 1.0));
                                float _3887 = exp2(log2(1.0 / ((_3864 * 3.5) + 5.0)) * 0.25);
                                float _3888 = 1.0 - _1132;
                                float _3895 = sqrt(1.0 - ((1.0 - (_3888 * _3888)) * (1.0 - (_3887 * _3887))));
                                float _3896 = _3895 * _3895;
                                float _3897 = _3896 * _3896;
                                float _3898 = _3844 - _3348;
                                float _3899 = _3845 - _3349;
                                float _3900 = _3846 - _3350;
                                float _3904 = inversesqrt(dot(vec3(_3898, _3899, _3900), vec3(_3898, _3899, _3900)));
                                float _3908 = dot(vec3(_1057, _1060, _1063), vec3((-0.0) - _3348, (-0.0) - _3349, (-0.0) - _3350));
                                float _5068 = isnan(0.0) ? _3908 : (isnan(_3908) ? 0.0 : max(_3908, 0.0));
                                float _3911 = isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0));
                                float _3912 = dot(vec3(_1057, _1060, _1063), vec3(_3904 * _3898, _3904 * _3899, _3904 * _3900));
                                float _5079 = isnan(0.0) ? _3912 : (isnan(_3912) ? 0.0 : max(_3912, 0.0));
                                float _3915 = isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0));
                                float _3919 = ((_3915 * _3915) * (_3897 + (-1.0))) + 1.0;
                                float _3920 = _3857 * _3896;
                                float _3921 = _3920 * _3920;
                                float _3927 = ((1.0 - _3921) * dot(vec3(_1057, _1060, _1063), vec3(_3844, _3845, _3846))) + _3921;
                                float _5090 = isnan(0.0) ? _3927 : (isnan(_3927) ? 0.0 : max(_3927, 0.0));
                                float _3928 = isnan(1.0) ? _5090 : (isnan(_5090) ? 1.0 : min(_5090, 1.0));
                                float _3929 = 1.0 - _3896;
                                float _3939 = (0.5 / (((_3928 * ((_3911 * _3929) + _3896)) + 9.9999999392252902907785028219223e-09) + (((_3928 * _3929) + _3896) * _3911))) * _3928;
                                float _5101 = isnan(0.0) ? _3939 : (isnan(_3939) ? 0.0 : max(_3939, 0.0));
                                float _3949 = (_3874 * _3851) * (((_3897 * 3.1415927410125732421875) * (isnan(1.0) ? _5101 : (isnan(_5101) ? 1.0 : min(_5101, 1.0)))) / ((_3919 * _3919) * ((_3864 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3875 * _3721.y;
                                frontier_phi_78_pred_1 = _3875 * _3721.x;
                                frontier_phi_78_pred_2 = _3949 * _3733.z;
                                frontier_phi_78_pred_3 = _3949 * _3733.y;
                                frontier_phi_78_pred_4 = _3949 * _3733.x;
                                frontier_phi_78_pred_5 = _3875 * _3721.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3957 = frontier_phi_78_pred;
                            _3956 = frontier_phi_78_pred_1;
                            _3955 = frontier_phi_78_pred_2;
                            _3954 = frontier_phi_78_pred_3;
                            _3953 = frontier_phi_78_pred_4;
                            _3958 = frontier_phi_78_pred_5;
                            _3663 = _3956 + _3676;
                            _3664 = _3957 + _3677;
                            _3665 = _3958 + _3678;
                            _3660 = _3953 + _3673;
                            _3661 = _3954 + _3674;
                            _3662 = _3955 + _3675;
                            if (_3680 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3673 = _3660;
                                _3674 = _3661;
                                _3675 = _3662;
                                _3676 = _3663;
                                _3677 = _3664;
                                _3678 = _3665;
                                _3679 = _3680;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3665;
                        frontier_phi_72_pred_1 = _3664;
                        frontier_phi_72_pred_2 = _3663;
                        frontier_phi_72_pred_3 = _3662;
                        frontier_phi_72_pred_4 = _3661;
                        frontier_phi_72_pred_5 = _3660;
                    }
                    _3333 = frontier_phi_72_pred;
                    _3331 = frontier_phi_72_pred_1;
                    _3329 = frontier_phi_72_pred_2;
                    _3327 = frontier_phi_72_pred_3;
                    _3325 = frontier_phi_72_pred_4;
                    _3323 = frontier_phi_72_pred_5;
                    uint _3468 = _3467 + 1u;
                    if (_3468 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3461 = _3323;
                        _3462 = _3325;
                        _3463 = _3327;
                        _3464 = _3329;
                        _3465 = _3331;
                        _3466 = _3333;
                        _3467 = _3468;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3333;
                frontier_phi_60_61_ladder_1 = _3331;
                frontier_phi_60_61_ladder_2 = _3327;
                frontier_phi_60_61_ladder_3 = _3325;
                frontier_phi_60_61_ladder_4 = _3323;
                frontier_phi_60_61_ladder_5 = _3329;
            }
            else
            {
                frontier_phi_60_61_ladder = _3219;
                frontier_phi_60_61_ladder_1 = _3217;
                frontier_phi_60_61_ladder_2 = _3213;
                frontier_phi_60_61_ladder_3 = _3211;
                frontier_phi_60_61_ladder_4 = _3209;
                frontier_phi_60_61_ladder_5 = _3215;
            }
            _3322 = frontier_phi_60_61_ladder_4;
            _3324 = frontier_phi_60_61_ladder_3;
            _3326 = frontier_phi_60_61_ladder_2;
            _3328 = frontier_phi_60_61_ladder_5;
            _3330 = frontier_phi_60_61_ladder_1;
            _3332 = frontier_phi_60_61_ladder;
        }
        float _3337 = isnan(1.0) ? _1116 : (isnan(_1116) ? 1.0 : min(_1116, 1.0));
        _3140 = (_3337 * _3328) + _2652;
        _3142 = (_3337 * _3330) + _2654;
        _3144 = (_3337 * _3332) + _2656;
        _3146 = ((_3322 * _1101) * _3337) + _2990;
        _3148 = ((_3324 * _1103) * _3337) + _2992;
        _3150 = ((_3326 * _1104) * _3337) + _2994;
    }
    else
    {
        _3140 = _2652;
        _3142 = _2654;
        _3144 = _2656;
        _3146 = _2990;
        _3148 = _2992;
        _3150 = _2994;
    }
    float _5117 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _5128 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _5139 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _5150 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _3175 = cbInstanceData._m0[_1076 + 6u].w * (isnan(1.0) ? _5150 : (isnan(_5150) ? 1.0 : min(_5150, 1.0)));
    float _3180 = _1038 / cbSceneParam._m0[86u].x;
    float _3181 = _1039 / cbSceneParam._m0[86u].y;
    vec4 _3195 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3180, _3181, (log2((isnan(cbSceneParam._m0[77u].w) ? _973 : (isnan(_973) ? cbSceneParam._m0[77u].w : min(_973, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3197 = _3195.x;
    float _3198 = _3195.y;
    float _3199 = _3195.z;
    float _3200 = _3195.w;
    float _3272;
    float _3274;
    float _3276;
    float _3278;
    if (_973 > cbSceneParam._m0[78u].w)
    {
        float _3234 = isnan(_973) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _973 : min(cbSceneParam._m0[80u].w, _973));
        float _3235 = _3234 / _973;
        float _3246 = _3235 * _1023;
        float _3247 = _1024 * _3235;
        float _3248 = (-0.0) - _3247;
        float _3250 = _3235 * _1025;
        float _3252 = (cbSceneParam._m0[77u].w * _3248) / _3234;
        float _3253 = _3252 + cbSceneParam._m0[79u].w;
        float _3254 = cbSceneParam._m0[79u].w - _3247;
        float _3260 = sqrt(((_3246 * _3246) + (_3247 * _3247)) + (_3250 * _3250));
        float _3263 = (1.0 - (cbSceneParam._m0[77u].w / _3234)) * _3260;
        float _3268 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3270 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3423;
        if (abs((_3248 - _3252) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3423 = ((((_3253 > 0.0) ? exp2(_3268 * _3253) : (2.0 - exp2(_3270 * _3253))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3263;
        }
        else
        {
            float _3383 = 1.0 / cbSceneParam._m0[80u].x;
            float _3384 = isnan(_3254) ? _3253 : (isnan(_3253) ? _3254 : max(_3253, _3254));
            float _3385 = isnan(_3254) ? _3253 : (isnan(_3253) ? _3254 : min(_3253, _3254));
            float _3394 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : min(_3384, 0.0));
            float _3395 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : min(_3385, 0.0));
            _3423 = ((abs(_3260 / _3248) * cbSceneParam._m0[80u].y) * ((((_3394 - _3395) * 2.0) - ((exp2(_3268 * (isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0)))) - exp2(_3268 * (isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0))))) * _3383)) - ((exp2(_3270 * _3394) - exp2(_3270 * _3395)) * _3383))) + (_3263 * cbSceneParam._m0[80u].z);
        }
        vec4 _3425 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3180, _3181, 1.0), 0.0);
        float _3434 = exp2((_3423 * (-1.44269502162933349609375)) * (1.0 - _3425.w));
        float _3435 = log2(_3434);
        float _3451 = log2(_3200);
        _3272 = (exp2(_3451 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3435 * cbSceneParam._m0[78u].x)) * _3425.x) / cbSceneParam._m0[78u].x)) + _3197;
        _3274 = (exp2(_3451 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3435 * cbSceneParam._m0[78u].y)) * _3425.y) / cbSceneParam._m0[78u].y)) + _3198;
        _3276 = (exp2(_3451 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3435 * cbSceneParam._m0[78u].z)) * _3425.z) / cbSceneParam._m0[78u].z)) + _3199;
        _3278 = _3434 * _3200;
    }
    else
    {
        _3272 = _3197;
        _3274 = _3198;
        _3276 = _3199;
        _3278 = _3200;
    }
    float _3290 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3291 = _3290 == 3.0;
    float _3292 = log2(_3278);
    float _3299 = exp2(_3292 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5117 : (isnan(_5117) ? 1.0 : min(_5117, 1.0))) * (_3140 + ((isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))) * _1116))) + ((_3146 + ((isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0))) * _1920)) * cbPerFrame._m0[3u].x));
    float _3300 = exp2(_3292 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5128 : (isnan(_5128) ? 1.0 : min(_5128, 1.0))) * (_3142 + ((isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))) * _1116))) + ((_3148 + ((isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0))) * _1920)) * cbPerFrame._m0[3u].x));
    float _3301 = exp2(_3292 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5139 : (isnan(_5139) ? 1.0 : min(_5139, 1.0))) * (_3144 + ((isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))) * _1116))) + ((_3150 + ((isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0))) * _1920)) * cbPerFrame._m0[3u].x));
    float _3310 = (_3290 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3310 * (_3291 ? _3299 : (_3299 + (cbSceneParam._m0[72u].w * _3272)));
    SV_Target.y = _3310 * (_3291 ? _3300 : (_3300 + (cbSceneParam._m0[72u].w * _3274)));
    SV_Target.z = _3310 * (_3291 ? _3301 : (_3301 + (cbSceneParam._m0[72u].w * _3276)));
    SV_Target.w = _3175;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3175;
}


