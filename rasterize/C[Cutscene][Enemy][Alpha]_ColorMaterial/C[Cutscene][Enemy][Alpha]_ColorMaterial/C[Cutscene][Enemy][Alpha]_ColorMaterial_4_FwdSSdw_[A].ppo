#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24;
layout(set = 0, binding = 12) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 13) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 18) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in float TEXCOORD_8;
layout(location = 7, component = 1) in float TEXCOORD_9;
layout(location = 7, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1535;
float _3938;
float _3939;
float _3940;
float _3941;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _296 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _300 = _296.z;
    float _313 = exp2(log2((1.0 - _300) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _314 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _315 = isnan(1.0) ? _314 : (isnan(_314) ? 1.0 : min(_314, 1.0));
    vec4 _332 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _344 = exp2(log2(_332.w * cbMtdParam._m0[29u].y) * cbMtdParam._m0[23u].x);
    float _345 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _346 = isnan(1.0) ? _345 : (isnan(_345) ? 1.0 : min(_345, 1.0));
    float _355 = exp2(log2(cbMtdParam._m0[23u].y * _300) * cbMtdParam._m0[22u].y);
    float _356 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _357 = isnan(1.0) ? _356 : (isnan(_356) ? 1.0 : min(_356, 1.0));
    vec4 _369 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _372 = _369.y;
    float _375 = (_369.x + (-0.02500000037252902984619140625)) * 8.0;
    float _379 = roundEven(5.0 - _375);
    float _380 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _381 = isnan(4.0) ? _380 : (isnan(_380) ? 4.0 : min(_380, 4.0));
    float _393 = floor(_381);
    vec4 _396 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w, _393));
    float _208[6];
    float _209[6];
    float _210[6];
    _208[0u] = cbMtdParam._m0[17u].x;
    _209[0u] = cbMtdParam._m0[17u].y;
    _210[0u] = cbMtdParam._m0[17u].z;
    _208[1u] = cbMtdParam._m0[15u].x;
    _209[1u] = cbMtdParam._m0[15u].y;
    _210[1u] = cbMtdParam._m0[15u].z;
    _208[2u] = cbMtdParam._m0[14u].x;
    _209[2u] = cbMtdParam._m0[14u].y;
    _210[2u] = cbMtdParam._m0[14u].z;
    _208[3u] = cbMtdParam._m0[13u].x;
    _209[3u] = cbMtdParam._m0[13u].y;
    _210[3u] = cbMtdParam._m0[13u].z;
    _208[4u] = cbMtdParam._m0[12u].x;
    _209[4u] = cbMtdParam._m0[12u].y;
    _210[4u] = cbMtdParam._m0[12u].z;
    _208[5u] = cbMtdParam._m0[18u].x;
    _209[5u] = cbMtdParam._m0[18u].y;
    _210[5u] = cbMtdParam._m0[18u].z;
    float _460 = roundEven(_375);
    float _461 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    uint _463 = uint(int(isnan(5.0) ? _461 : (isnan(_461) ? 5.0 : min(_461, 5.0))));
    vec4 _493 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _504 = cbMtdParam._m0[9u].x * _493.x;
    float _505 = cbMtdParam._m0[9u].y * _493.y;
    float _506 = cbMtdParam._m0[9u].z * _493.z;
    float _513 = ((((((_208[_463] - cbMtdParam._m0[10u].x) * _372) + cbMtdParam._m0[10u].x) * _396.x) - _504) * _357) + _504;
    float _514 = ((((((_209[_463] - cbMtdParam._m0[10u].y) * _372) + cbMtdParam._m0[10u].y) * _396.y) - _505) * _357) + _505;
    float _515 = ((((((_210[_463] - cbMtdParam._m0[10u].z) * _372) + cbMtdParam._m0[10u].z) * _396.z) - _506) * _357) + _506;
    float _521 = exp2(log2(_296.w) * cbMtdParam._m0[23u].w);
    vec4 _534 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _554 = (((cbMtdParam._m0[16u].x * _534.x) - _513) * _521) + _513;
    float _555 = (((cbMtdParam._m0[16u].y * _534.y) - _514) * _521) + _514;
    float _556 = (((cbMtdParam._m0[16u].z * _534.z) - _515) * _521) + _515;
    vec4 _568 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _588 = (((cbMtdParam._m0[19u].x * _568.x) - _554) * _346) + _554;
    float _589 = (((cbMtdParam._m0[19u].y * _568.y) - _555) * _346) + _555;
    float _590 = (((cbMtdParam._m0[19u].z * _568.z) - _556) * _346) + _556;
    vec4 _602 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _627 = (_332.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _602.x) - _588) * _315) + _588);
    float _629 = (_332.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _602.y) - _589) * _315) + _589);
    float _631 = (_332.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _602.z) - _590) * _315) + _590);
    float _635 = cbMtdParam._m0[28u].x * TEXCOORD_8;
    float _644 = (_635 - (((texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _635))) * (cbMtdParam._m0[27u].w + 1.0);
    float _4000 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _645 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _652 = ((cbMtdParam._m0[21u].x - _627) * _645) + _627;
    float _653 = ((cbMtdParam._m0[21u].y - _629) * _645) + _629;
    float _654 = ((cbMtdParam._m0[21u].z - _631) * _645) + _631;
    vec4 _668 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24, SS_ClampLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.z) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.w) + cbTextureTilingScale._m0[11u].w));
    float _676 = (_668.x + (-1.0)) + (cbMtdParam._m0[28u].y * 2.0);
    float _4011 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _682 = exp2(log2(cbMtdParam._m0[28u].w * (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) * cbMtdParam._m0[28u].z);
    float _4022 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _683 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _203[5];
    float _204[5];
    _203[0u] = cbMtdParam._m0[29u].z;
    _204[0u] = cbMtdParam._m0[29u].w;
    _203[1u] = cbMtdParam._m0[31u].z;
    _204[1u] = cbMtdParam._m0[31u].w;
    _203[2u] = cbMtdParam._m0[31u].x;
    _204[2u] = cbMtdParam._m0[31u].y;
    _203[3u] = cbMtdParam._m0[30u].z;
    _204[3u] = cbMtdParam._m0[30u].w;
    _203[4u] = cbMtdParam._m0[30u].x;
    _204[4u] = cbMtdParam._m0[30u].y;
    float _722 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    uint _724 = uint(int(isnan(4.0) ? _722 : (isnan(_722) ? 4.0 : min(_722, 4.0))));
    float _731 = ((_204[_724] - cbMtdParam._m0[22u].z) * _357) + cbMtdParam._m0[22u].z;
    float _734 = ((cbMtdParam._m0[22u].w - _731) * _521) + _731;
    float _737 = ((cbMtdParam._m0[25u].x - _734) * _346) + _734;
    float _740 = ((cbMtdParam._m0[26u].x - _737) * _315) + _737;
    float _742 = _740 - (_740 * _635);
    vec4 _758 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w, _393));
    vec4 _775 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _777 = _775.x;
    float _778 = _775.y;
    float _783 = cbMtdParam._m0[22u].x + _775.z;
    float _786 = (((_758.z + _203[_724]) - _783) * _357) + _783;
    vec4 _798 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _809 = (((_798.z - _786) + cbMtdParam._m0[29u].x) * _521) + _786;
    float _814 = ((((_300 * 2.0) * _809) - _809) * cbMtdParam._m0[24u].w) + _809;
    vec4 _826 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _837 = (((cbMtdParam._m0[23u].z + _826.z) - _814) * _346) + _814;
    vec4 _850 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _861 = (((_850.z - _837) + cbMtdParam._m0[26u].y) * _315) + _837;
    vec4 _876 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _890 = ((cbMtdParam._m0[27u].y * _635) * ((_876.z * cbMtdParam._m0[27u].x) - _861)) + _861;
    float _902 = ((_758.x - _777) * _357) + _777;
    float _903 = ((_758.y - _778) * _357) + _778;
    float _908 = ((_798.x - _902) * _521) + _902;
    float _909 = ((_798.y - _903) * _521) + _903;
    float _914 = ((_826.x - _908) * _346) + _908;
    float _915 = ((_826.y - _909) * _346) + _909;
    float _924 = ((((_850.x - _914) * _315) + _914) * 2.0) + (-1.0);
    float _925 = ((((_850.y - _915) * _315) + _915) * 2.0) + (-1.0);
    float _926 = dot(vec2(_924, _925), vec2(_924, _925));
    float _4043 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _931 = sqrt(1.0 - (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))));
    float _941 = ((cbMtdParam._m0[25u].y * ((_296.x * 2.0) + (-1.0))) + _924) + ((((_876.x * 2.0) + (-1.0)) * _635) * cbMtdParam._m0[26u].w);
    float _942 = ((cbMtdParam._m0[25u].y * ((_296.y * 2.0) + (-1.0))) + _925) + (((cbMtdParam._m0[28u].x * TEXCOORD_9) * ((_876.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _945 = fma(_931, _245 * NORMAL.x, fma(_942, _252 * TANGENT.x, (_238 * _230) * _941));
    float _948 = fma(_931, _245 * NORMAL.y, fma(_942, _252 * TANGENT.y, (_238 * _231) * _941));
    float _951 = fma(_931, _245 * NORMAL.z, fma(_942, _252 * TANGENT.z, (_238 * _232) * _941));
    float _955 = inversesqrt(dot(vec3(_945, _948, _951), vec3(_945, _948, _951)));
    float _956 = _955 * _945;
    float _957 = _955 * _948;
    float _958 = _955 * _951;
    float _4054 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _959 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _4065 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _960 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _4076 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _4087 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _4098 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _4109 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _964 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _980 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1020 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1030 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1020);
    float _1031 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1020);
    float _1032 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1020);
    float _1036 = inversesqrt(dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032)));
    float _1037 = _1030 * _1036;
    float _1038 = _1031 * _1036;
    float _1039 = _1032 * _1036;
    vec4 _1044 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1046 = _1044.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1216 = sqrt(((_1030 * _1030) + (_1031 * _1031)) + (_1032 * _1032));
        float _1222 = (cbMatDynParam._m0[5u].x * _1216) + cbMatDynParam._m0[5u].y;
        float _4120 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1227 = (cbMatDynParam._m0[5u].z * _1216) + cbMatDynParam._m0[5u].w;
        float _4131 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) - _1223)) + _1223) < ((_1046 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1057 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1058 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1076 = fma(_958, cbSceneParam._m0[5u].z, fma(_957, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _956));
    float _1079 = fma(_958, cbSceneParam._m0[6u].z, fma(_957, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _956));
    float _1082 = fma(_958, cbSceneParam._m0[7u].z, fma(_957, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _956));
    uint _1095 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1096 = _1095 + 9u;
    uint _1097 = _1096 + uint(cbMatDynParam._m0[0u].w);
    float _1103 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0)))) * cbInstanceData._m0[_1097].x;
    float _1104 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) * cbInstanceData._m0[_1097].y;
    float _1105 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) * cbInstanceData._m0[_1097].z;
    float _4142 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _1106 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    float _4153 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
    float _1107 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _4164 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _1108 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _1109 = 1.0 - _964;
    float _1110 = _1106 * _1109;
    float _1111 = _1107 * _1109;
    float _1112 = _1108 * _1109;
    float _1117 = (_1106 + (-0.039999999105930328369140625)) * _964;
    float _1118 = (_1107 + (-0.039999999105930328369140625)) * _964;
    float _1119 = (_1108 + (-0.039999999105930328369140625)) * _964;
    float _1120 = _1117 + 0.039999999105930328369140625;
    float _1122 = _1118 + 0.039999999105930328369140625;
    float _1123 = _1119 + 0.039999999105930328369140625;
    vec4 _1132 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1057, cbSceneParam._m0[86u].y * _1058));
    float _1135 = _1132.x * TEXCOORD_5.w;
    float _1136 = dot(vec3(_956, _957, _958), vec3(_1037, _1038, _1039));
    float _1139 = _1136 * 2.0;
    float _1143 = (_1139 * _956) - _1037;
    float _1144 = (_1139 * _957) - _1038;
    float _1145 = (_1139 * _958) - _1039;
    float _1149 = abs(dot(vec3(_1037, _1038, _1039), vec3(_956, _957, _958)));
    float _4175 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
    float _1151 = sqrt(_960);
    float _1162 = exp2((_1151 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1151 * 3.0));
    float _1168 = (1.0 - _1162) * ((_1151 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1169 = _1162 * _1151;
    float _1197 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1201 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1205 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1534;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1259 = fma(_1205, cbModelParam._m0[26u].z, fma(_1201, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1197));
        float _1263 = fma(_1205, cbModelParam._m0[27u].z, fma(_1201, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1197));
        float _1267 = fma(_1205, cbModelParam._m0[28u].z, fma(_1201, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1197));
        float _1292 = _1197 + _956;
        float _1293 = _1201 + _957;
        float _1294 = _1205 + _958;
        float _1304 = fma(_1294, cbModelParam._m0[26u].z, fma(_1293, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1292)) - _1259;
        float _1305 = fma(_1294, cbModelParam._m0[27u].z, fma(_1293, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1292)) - _1263;
        float _1306 = fma(_1294, cbModelParam._m0[28u].z, fma(_1293, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1292)) - _1267;
        float _1310 = inversesqrt(dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306)));
        float _1323 = ((_1310 * _1304) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1259 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1324 = ((_1310 * _1305) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1263 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1325 = ((_1310 * _1306) / cbModelParam._m0[34u].z) + ((((((_1267 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1323, _1324, _1325), 0.0);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1323, _1324, _1325), 0.0);
        vec4 _1342 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1323, _1324, _1325), 0.0);
        vec4 _1349 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1323, _1324, _1325), 0.0);
        float _1362 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1363 = _1362 * (_1328.x + (-0.5));
        float _1364 = _1362 * (_1328.y + (-0.5));
        float _1365 = _1362 * (_1328.z + (-0.5));
        float _1372 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1373 = _1372 * (_1335.x + (-0.5));
        float _1374 = _1372 * (_1335.y + (-0.5));
        float _1375 = _1372 * (_1335.z + (-0.5));
        float _1382 = exp2((_1342.w + (-0.5)) * 20.0) * 2.0;
        float _1383 = _1382 * (_1342.x + (-0.5));
        float _1384 = _1382 * (_1342.y + (-0.5));
        float _1385 = _1382 * (_1342.z + (-0.5));
        float _1392 = exp2((_1349.w + (-0.5)) * 20.0) * 2.0;
        float _1393 = _1392 * (_1349.x + (-0.5));
        float _1394 = _1392 * (_1349.y + (-0.5));
        float _1395 = _1392 * (_1349.z + (-0.5));
        float _1396 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1397 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1398 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1399 = _1363 * 0.5;
        float _1400 = _1373 * 0.5;
        float _1401 = _1383 * 0.5;
        float _1402 = dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401));
        float _1407 = (_1402 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1402);
        float _1416 = (dot(vec3(_956, _957, _958), vec3(_1407 * _1399, _1407 * _1400, _1407 * _1401)) + 1.0) * 0.5;
        float _4201 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1426 = sqrt(((_1400 * _1400) + (_1399 * _1399)) + (_1401 * _1401)) / (_1396 + 9.9999997473787516355514526367188e-06);
        float _4212 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1428 = _1427 * 2.0;
        float _1432 = (1.0 - _1427) / (_1427 + 1.0);
        float _4223 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1442 = ((((1.0 - _1433) * (_1428 + 2.0)) * exp2(log2(isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_1428 + 1.0))) + _1433) * _1396;
        float _1443 = _1364 * 0.5;
        float _1444 = _1374 * 0.5;
        float _1445 = _1384 * 0.5;
        float _1446 = dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445));
        float _1451 = (_1446 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1446);
        float _1459 = (dot(vec3(_956, _957, _958), vec3(_1451 * _1443, _1451 * _1444, _1451 * _1445)) + 1.0) * 0.5;
        float _4234 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1468 = sqrt(((_1444 * _1444) + (_1443 * _1443)) + (_1445 * _1445)) / (_1397 + 9.9999997473787516355514526367188e-06);
        float _4245 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1470 = _1469 * 2.0;
        float _1474 = (1.0 - _1469) / (_1469 + 1.0);
        float _4256 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1484 = ((((1.0 - _1475) * (_1470 + 2.0)) * exp2(log2(isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_1470 + 1.0))) + _1475) * _1397;
        float _1485 = _1365 * 0.5;
        float _1486 = _1375 * 0.5;
        float _1487 = _1385 * 0.5;
        float _1488 = dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487));
        float _1493 = (_1488 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1488);
        float _1501 = (dot(vec3(_956, _957, _958), vec3(_1493 * _1485, _1493 * _1486, _1493 * _1487)) + 1.0) * 0.5;
        float _4267 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1510 = sqrt(((_1486 * _1486) + (_1485 * _1485)) + (_1487 * _1487)) / (_1398 + 9.9999997473787516355514526367188e-06);
        float _4278 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1512 = _1511 * 2.0;
        float _1516 = (1.0 - _1511) / (_1511 + 1.0);
        float _4289 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1526 = ((((1.0 - _1517) * (_1512 + 2.0)) * exp2(log2(isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_1512 + 1.0))) + _1517) * _1398;
        _1534 = _1365;
        _1536 = _1364;
        _1537 = _1363;
        _1538 = _1375;
        _1539 = _1374;
        _1540 = _1373;
        _1541 = _1385;
        _1542 = _1384;
        _1543 = _1383;
        _1544 = _1398;
        _1545 = _1397;
        _1546 = _1396;
        _1547 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)));
        _1548 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)));
        _1549 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)));
    }
    else
    {
        _1534 = _1535;
        _1536 = _1535;
        _1537 = _1535;
        _1538 = _1535;
        _1539 = _1535;
        _1540 = _1535;
        _1541 = _1535;
        _1542 = _1535;
        _1543 = _1535;
        _1544 = _1535;
        _1545 = _1535;
        _1546 = _1535;
        _1547 = 0.0;
        _1548 = 0.0;
        _1549 = 0.0;
    }
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    float _1856;
    float _1857;
    float _1858;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1575 = fma(_1205, cbModelParam._m0[30u].z, fma(_1201, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1197));
        float _1579 = fma(_1205, cbModelParam._m0[31u].z, fma(_1201, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1197));
        float _1583 = fma(_1205, cbModelParam._m0[32u].z, fma(_1201, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1197));
        float _1606 = _1197 + _956;
        float _1607 = _1201 + _957;
        float _1608 = _1205 + _958;
        float _1618 = fma(_1608, cbModelParam._m0[30u].z, fma(_1607, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1606)) - _1575;
        float _1619 = fma(_1608, cbModelParam._m0[31u].z, fma(_1607, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1606)) - _1579;
        float _1620 = fma(_1608, cbModelParam._m0[32u].z, fma(_1607, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1606)) - _1583;
        float _1624 = inversesqrt(dot(vec3(_1618, _1619, _1620), vec3(_1618, _1619, _1620)));
        float _1637 = ((_1624 * _1618) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1575 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1638 = ((_1624 * _1619) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1579 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1639 = ((_1624 * _1620) / cbModelParam._m0[35u].z) + ((((((_1583 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1641 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1637, _1638, _1639), 0.0);
        vec4 _1648 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1637, _1638, _1639), 0.0);
        vec4 _1655 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1637, _1638, _1639), 0.0);
        vec4 _1662 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1637, _1638, _1639), 0.0);
        float _1674 = exp2((_1641.w + (-0.5)) * 20.0) * 2.0;
        float _1675 = _1674 * (_1641.x + (-0.5));
        float _1676 = _1674 * (_1641.y + (-0.5));
        float _1677 = _1674 * (_1641.z + (-0.5));
        float _1684 = exp2((_1648.w + (-0.5)) * 20.0) * 2.0;
        float _1685 = _1684 * (_1648.x + (-0.5));
        float _1686 = _1684 * (_1648.y + (-0.5));
        float _1687 = _1684 * (_1648.z + (-0.5));
        float _1694 = exp2((_1655.w + (-0.5)) * 20.0) * 2.0;
        float _1695 = _1694 * (_1655.x + (-0.5));
        float _1696 = _1694 * (_1655.y + (-0.5));
        float _1697 = _1694 * (_1655.z + (-0.5));
        float _1704 = exp2((_1662.w + (-0.5)) * 20.0) * 2.0;
        float _1705 = _1704 * (_1662.x + (-0.5));
        float _1706 = _1704 * (_1662.y + (-0.5));
        float _1707 = _1704 * (_1662.z + (-0.5));
        float _1708 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1709 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1710 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1711 = _1675 * 0.5;
        float _1712 = _1685 * 0.5;
        float _1713 = _1695 * 0.5;
        float _1714 = dot(vec3(_1711, _1712, _1713), vec3(_1711, _1712, _1713));
        float _1719 = (_1714 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1714);
        float _1727 = (dot(vec3(_956, _957, _958), vec3(_1719 * _1711, _1719 * _1712, _1719 * _1713)) + 1.0) * 0.5;
        float _4330 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1736 = sqrt(((_1712 * _1712) + (_1711 * _1711)) + (_1713 * _1713)) / (_1708 + 9.9999997473787516355514526367188e-06);
        float _4341 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1737 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1738 = _1737 * 2.0;
        float _1742 = (1.0 - _1737) / (_1737 + 1.0);
        float _4352 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1743 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1752 = ((((1.0 - _1743) * (_1738 + 2.0)) * exp2(log2(isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_1738 + 1.0))) + _1743) * _1708;
        float _1753 = _1676 * 0.5;
        float _1754 = _1686 * 0.5;
        float _1755 = _1696 * 0.5;
        float _1756 = dot(vec3(_1753, _1754, _1755), vec3(_1753, _1754, _1755));
        float _1761 = (_1756 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1756);
        float _1769 = (dot(vec3(_956, _957, _958), vec3(_1761 * _1753, _1761 * _1754, _1761 * _1755)) + 1.0) * 0.5;
        float _4363 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1778 = sqrt(((_1754 * _1754) + (_1753 * _1753)) + (_1755 * _1755)) / (_1709 + 9.9999997473787516355514526367188e-06);
        float _4374 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1779 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1780 = _1779 * 2.0;
        float _1784 = (1.0 - _1779) / (_1779 + 1.0);
        float _4385 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1785 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _1794 = ((((1.0 - _1785) * (_1780 + 2.0)) * exp2(log2(isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_1780 + 1.0))) + _1785) * _1709;
        float _1795 = _1677 * 0.5;
        float _1796 = _1687 * 0.5;
        float _1797 = _1697 * 0.5;
        float _1798 = dot(vec3(_1795, _1796, _1797), vec3(_1795, _1796, _1797));
        float _1803 = (_1798 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1798);
        float _1811 = (dot(vec3(_956, _957, _958), vec3(_1803 * _1795, _1803 * _1796, _1803 * _1797)) + 1.0) * 0.5;
        float _4396 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1820 = sqrt(((_1796 * _1796) + (_1795 * _1795)) + (_1797 * _1797)) / (_1710 + 9.9999997473787516355514526367188e-06);
        float _4407 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1821 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _1822 = _1821 * 2.0;
        float _1826 = (1.0 - _1821) / (_1821 + 1.0);
        float _4418 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
        float _1827 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _1836 = ((((1.0 - _1827) * (_1822 + 2.0)) * exp2(log2(isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_1822 + 1.0))) + _1827) * _1710;
        _1844 = _1677;
        _1845 = _1676;
        _1846 = _1675;
        _1847 = _1687;
        _1848 = _1686;
        _1849 = _1685;
        _1850 = _1697;
        _1851 = _1696;
        _1852 = _1695;
        _1853 = _1710;
        _1854 = _1709;
        _1855 = _1708;
        _1856 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)));
        _1857 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0)));
        _1858 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0)));
    }
    else
    {
        _1844 = _1535;
        _1845 = _1535;
        _1846 = _1535;
        _1847 = _1535;
        _1848 = _1535;
        _1849 = _1535;
        _1850 = _1535;
        _1851 = _1535;
        _1852 = _1535;
        _1853 = _1535;
        _1854 = _1535;
        _1855 = _1535;
        _1856 = 0.0;
        _1857 = 0.0;
        _1858 = 0.0;
    }
    float _1868 = (cbModelParam._m0[1u].x * (_1856 - _1547)) + _1547;
    float _1869 = (cbModelParam._m0[1u].x * (_1857 - _1548)) + _1548;
    float _1870 = (cbModelParam._m0[1u].x * (_1858 - _1549)) + _1549;
    float _1891 = fma(_1870, cbSceneParam._m0[89u].z, fma(_1869, cbSceneParam._m0[89u].y, _1868 * cbSceneParam._m0[89u].x));
    float _1894 = fma(_1870, cbSceneParam._m0[90u].z, fma(_1869, cbSceneParam._m0[90u].y, _1868 * cbSceneParam._m0[90u].x));
    float _1897 = fma(_1870, cbSceneParam._m0[91u].z, fma(_1869, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1868));
    float _1912 = _1143 * 0.5;
    float _1913 = _1144 * 0.5;
    float _1914 = _1145 * 0.5;
    float _1915 = dot(vec4(_1912, _1913, _1914, 1.0), vec4(_1846, _1849, _1852, _1855));
    float _1918 = dot(vec4(_1912, _1913, _1914, 1.0), vec4(_1845, _1848, _1851, _1854));
    float _1921 = dot(vec4(_1912, _1913, _1914, 1.0), vec4(_1844, _1847, _1850, _1853));
    float _1955;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1928 = dot(vec4(_1912, _1913, _1914, 1.0), vec4(_1534, _1538, _1541, _1544));
        float _1932 = dot(vec4(_1912, _1913, _1914, 1.0), vec4(_1536, _1539, _1542, _1545));
        float _1936 = dot(vec4(_1912, _1913, _1914, 1.0), vec4(_1537, _1540, _1543, _1546));
        float _1943 = dot(vec4(cbModelParam._m0[39u]), vec4(_1912, _1913, _1914, 1.0));
        _1955 = dot(vec3(isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0)), isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0)), isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1943) ? 0.0 : (isnan(0.0) ? _1943 : max(0.0, _1943))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1955 = 1.0;
    }
    float _1966;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1957 = dot(vec4(cbModelParam._m0[40u]), vec4(_1912, _1913, _1914, 1.0));
        _1966 = dot(vec3(isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0)), isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0)), isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1957) ? 0.0 : (isnan(0.0) ? _1957 : max(0.0, _1957))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1966 = 1.0;
    }
    float _1970 = (_1966 * cbModelParam._m0[1u].x) + (_1955 * (1.0 - cbModelParam._m0[1u].x));
    float _1980 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _960);
    float _1981 = isnan(_1980) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1980 : min(cbModelParam._m0[25u].z, _1980));
    float _2061;
    float _2063;
    float _2065;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2028 = fma(_1205, cbModelParam._m0[13u].z, fma(_1201, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1197)) + cbModelParam._m0[13u].w;
        float _2032 = fma(_1205, cbModelParam._m0[14u].z, fma(_1201, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1197)) + cbModelParam._m0[14u].w;
        float _2036 = fma(_1205, cbModelParam._m0[15u].z, fma(_1201, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1197)) + cbModelParam._m0[15u].w;
        float _2039 = fma(_1145, cbModelParam._m0[13u].z, fma(_1144, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1143));
        float _2042 = fma(_1145, cbModelParam._m0[14u].z, fma(_1144, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1143));
        float _2045 = fma(_1145, cbModelParam._m0[15u].z, fma(_1144, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1143));
        float _2073;
        if (_2039 > 0.0)
        {
            _2073 = abs((1.0 - _2028) / _2039);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2039 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2028 + 1.0) / _2039);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2073 = frontier_phi_17_15_ladder;
        }
        float _2296;
        if (_2042 > 0.0)
        {
            _2296 = abs((1.0 - _2032) / _2042);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2042 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2032 + 1.0) / _2042);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2296 = frontier_phi_26_22_ladder;
        }
        float _2553;
        if (_2045 > 0.0)
        {
            _2553 = abs((1.0 - _2036) / _2045);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2045 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2036 + 1.0) / _2045);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2553 = frontier_phi_38_33_ladder;
        }
        float _2555 = isnan(_2296) ? _2073 : (isnan(_2073) ? _2296 : min(_2073, _2296));
        float _2556 = isnan(_2553) ? _2555 : (isnan(_2555) ? _2553 : min(_2555, _2553));
        float _2560 = (_2556 * _2039) + _2028;
        float _2561 = (_2556 * _2042) + _2032;
        float _2562 = (_2556 * _2045) + _2036;
        float _2563 = _2556 * 9.9999997473787516355514526367188e-05;
        float _2565 = (-1.0) - _2563;
        float _2567 = _2563 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2562 > _2567) || ((_2562 < _2565) || ((_2561 > _2567) || ((_2561 < _2565) || ((_2560 < _2565) || (_2560 > _2567))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2690 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2562, cbModelParam._m0[9u].z, fma(_2561, cbModelParam._m0[9u].y, _2560 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2562, cbModelParam._m0[10u].z, fma(_2561, cbModelParam._m0[10u].y, _2560 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2562, cbModelParam._m0[11u].z, fma(_2561, cbModelParam._m0[11u].y, _2560 * cbModelParam._m0[11u].x))), _1981);
            frontier_phi_16_38_ladder = _2690.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2690.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2690.x * cbModelParam._m0[1u].y;
        }
        _2061 = frontier_phi_16_38_ladder_2;
        _2063 = frontier_phi_16_38_ladder_1;
        _2065 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2049 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1143, _1144, _1145), _1981);
        _2061 = _2049.x * cbModelParam._m0[1u].y;
        _2063 = _2049.y * cbModelParam._m0[1u].y;
        _2065 = _2049.z * cbModelParam._m0[1u].y;
    }
    float _2069 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _960);
    float _2070 = isnan(_2069) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2069 : min(cbModelParam._m0[25u].w, _2069));
    float _2159;
    float _2161;
    float _2163;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2123 = fma(_1205, cbModelParam._m0[21u].z, fma(_1201, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1197)) + cbModelParam._m0[21u].w;
        float _2127 = fma(_1205, cbModelParam._m0[22u].z, fma(_1201, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1197)) + cbModelParam._m0[22u].w;
        float _2131 = fma(_1205, cbModelParam._m0[23u].z, fma(_1201, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1197)) + cbModelParam._m0[23u].w;
        float _2134 = fma(_1145, cbModelParam._m0[21u].z, fma(_1144, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1143));
        float _2137 = fma(_1145, cbModelParam._m0[22u].z, fma(_1144, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1143));
        float _2140 = fma(_1145, cbModelParam._m0[23u].z, fma(_1144, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1143));
        float _2301;
        if (_2134 > 0.0)
        {
            _2301 = abs((1.0 - _2123) / _2134);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2134 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2123 + 1.0) / _2134);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2301 = frontier_phi_28_24_ladder;
        }
        float _2580;
        if (_2137 > 0.0)
        {
            _2580 = abs((1.0 - _2127) / _2137);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2137 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2127 + 1.0) / _2137);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2580 = frontier_phi_40_35_ladder;
        }
        float _2793;
        if (_2140 > 0.0)
        {
            _2793 = abs((1.0 - _2131) / _2140);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2140 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2131 + 1.0) / _2140);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2793 = frontier_phi_49_46_ladder;
        }
        float _2795 = isnan(_2580) ? _2301 : (isnan(_2301) ? _2580 : min(_2301, _2580));
        float _2796 = isnan(_2793) ? _2795 : (isnan(_2795) ? _2793 : min(_2795, _2793));
        float _2800 = (_2796 * _2134) + _2123;
        float _2801 = (_2796 * _2137) + _2127;
        float _2802 = (_2796 * _2140) + _2131;
        float _2803 = _2796 * 9.9999997473787516355514526367188e-05;
        float _2804 = (-1.0) - _2803;
        float _2806 = _2803 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2802 > _2806) || ((_2802 < _2804) || ((_2801 > _2806) || ((_2801 < _2804) || ((_2800 < _2804) || (_2800 > _2806))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3003 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2802, cbModelParam._m0[17u].z, fma(_2801, cbModelParam._m0[17u].y, _2800 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2802, cbModelParam._m0[18u].z, fma(_2801, cbModelParam._m0[18u].y, _2800 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2802, cbModelParam._m0[19u].z, fma(_2801, cbModelParam._m0[19u].y, _2800 * cbModelParam._m0[19u].x))), _2070);
            frontier_phi_25_49_ladder = _3003.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3003.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3003.x * cbModelParam._m0[1u].z;
        }
        _2159 = frontier_phi_25_49_ladder_2;
        _2161 = frontier_phi_25_49_ladder_1;
        _2163 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2143 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1143, _1144, _1145), _2070);
        _2159 = _2143.x * cbModelParam._m0[1u].z;
        _2161 = _2143.y * cbModelParam._m0[1u].z;
        _2163 = _2143.z * cbModelParam._m0[1u].z;
    }
    float _2176 = (((_1168 * _1120) + _1169) * _1135) * ((cbModelParam._m0[1u].w * (_2159 - _2061)) + _2061);
    float _2178 = (((_1168 * _1122) + _1169) * _1135) * ((cbModelParam._m0[1u].w * (_2161 - _2063)) + _2063);
    float _2180 = (((_1168 * _1123) + _1169) * _1135) * ((cbModelParam._m0[1u].w * (_2163 - _2065)) + _2065);
    float _2183 = fma(_2180, cbSceneParam._m0[89u].z, fma(_2178, cbSceneParam._m0[89u].y, _2176 * cbSceneParam._m0[89u].x));
    float _2186 = fma(_2180, cbSceneParam._m0[90u].z, fma(_2178, cbSceneParam._m0[90u].y, _2176 * cbSceneParam._m0[90u].x));
    float _2189 = fma(_2180, cbSceneParam._m0[91u].z, fma(_2178, cbSceneParam._m0[91u].y, _2176 * cbSceneParam._m0[91u].x));
    vec4 _2197 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1057, _1058));
    float _2199 = _2197.w;
    float _2211 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2199);
    float _2212 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2199);
    float _2213 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2199);
    uvec4 _2217 = floatBitsToUint(cbInstanceData._m0[_1095 + 5u]);
    uint _2219 = _2217.x * 14u;
    uint _2220 = _2219 + 13u;
    float _2227 = _1135 + (-1.0);
    float _2232 = (cbLight._m0[_2220].x * _2227) + 1.0;
    float _2233 = (cbLight._m0[_2220].y * _2227) + 1.0;
    float _2234 = (cbLight._m0[_2220].z * _2227) + 1.0;
    float _2235 = (cbLight._m0[_2220].w * _2227) + 1.0;
    uint _2236 = _2219 + 5u;
    float _2242 = isnan(1.0) ? _2233 : (isnan(_2233) ? 1.0 : min(_2233, 1.0));
    uint _2246 = _2219 + 4u;
    float _2255 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
    uint _2259 = _2219 | 1u;
    float _2270 = dot(vec3(cbLight._m0[_2219].xyz), vec3(_956, _957, _958));
    float _2273 = dot(vec3(cbLight._m0[_2259].xyz), vec3(_956, _957, _958));
    float _4554 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _4565 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2278 = (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * 0.3183098733425140380859375;
    float _2280 = (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * 0.3183098733425140380859375;
    float _2287 = ((cbLight._m0[_2236].x * _2242) * _2280) + (((cbLight._m0[_2246].x * _2211) * _2255) * _2278);
    float _2288 = ((_2242 * cbLight._m0[_2236].y) * _2280) + (((cbLight._m0[_2246].y * _2212) * _2255) * _2278);
    float _2289 = ((_2242 * cbLight._m0[_2236].z) * _2280) + (((cbLight._m0[_2246].z * _2213) * _2255) * _2278);
    uvec4 _2293 = floatBitsToUint(cbLight._m0[_2219 + 12u]);
    bool _2295 = _2293.x == 0u;
    float _2306;
    float _2308;
    float _2310;
    if (_2295)
    {
        _2306 = _2287;
        _2308 = _2288;
        _2310 = _2289;
    }
    else
    {
        uint _2314 = _2219 + 6u;
        float _2330 = (dot(vec3(cbLight._m0[_2219 + 2u].xyz), vec3(_956, _957, _958)) * 0.5) + 0.5;
        float _2331 = _2330 * _2330;
        float _4576 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2332 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
        float _2333 = isnan(1.0) ? _2234 : (isnan(_2234) ? 1.0 : min(_2234, 1.0));
        _2306 = (((cbLight._m0[_2314].x * 0.3183098733425140380859375) * _2332) * _2333) + _2287;
        _2308 = (((cbLight._m0[_2314].y * 0.3183098733425140380859375) * _2332) * _2333) + _2288;
        _2310 = (((cbLight._m0[_2314].z * 0.3183098733425140380859375) * _2332) * _2333) + _2289;
    }
    bool _2313 = _2293.y == 0u;
    float _2351;
    float _2353;
    float _2355;
    if (_2313)
    {
        _2351 = _2306;
        _2353 = _2308;
        _2355 = _2310;
    }
    else
    {
        uint _2524 = _2219 + 7u;
        float _2540 = (dot(vec3(cbLight._m0[_2219 + 3u].xyz), vec3(_956, _957, _958)) * 0.5) + 0.5;
        float _2541 = _2540 * _2540;
        float _4592 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2542 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
        float _2543 = isnan(1.0) ? _2235 : (isnan(_2235) ? 1.0 : min(_2235, 1.0));
        _2351 = (((cbLight._m0[_2524].x * 0.3183098733425140380859375) * _2542) * _2543) + _2306;
        _2353 = (((cbLight._m0[_2524].y * 0.3183098733425140380859375) * _2542) * _2543) + _2308;
        _2355 = (((cbLight._m0[_2524].z * 0.3183098733425140380859375) * _2542) * _2543) + _2310;
    }
    uint _2358 = _2219 + 8u;
    float _2371 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2219].w)) * _960) * 0.949999988079071044921875);
    float _2372 = _2371 * _2371;
    float _2373 = cbLight._m0[_2219].x + _1037;
    float _2374 = cbLight._m0[_2219].y + _1038;
    float _2375 = cbLight._m0[_2219].z + _1039;
    float _2379 = inversesqrt(dot(vec3(_2373, _2374, _2375), vec3(_2373, _2374, _2375)));
    float _2380 = _2379 * _2373;
    float _2381 = _2379 * _2374;
    float _2382 = _2379 * _2375;
    float _2383 = dot(vec3(_956, _957, _958), vec3(cbLight._m0[_2219].xyz));
    float _4608 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2386 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
    float _4619 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
    float _2387 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
    float _2388 = dot(vec3(_956, _957, _958), vec3(_2380, _2381, _2382));
    float _4630 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _2391 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
    float _2392 = dot(vec3(cbLight._m0[_2219].xyz), vec3(_2380, _2381, _2382));
    float _4641 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2396 = _2372 * _2372;
    float _2400 = ((_2391 * _2391) * (_2396 + (-1.0))) + 1.0;
    float _2408 = exp2(log2(1.0 - (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0)))) * 5.0);
    float _2409 = 0.959999978542327880859375 - _1117;
    float _2411 = 0.959999978542327880859375 - _1118;
    float _2412 = 0.959999978542327880859375 - _1119;
    float _2419 = 1.0 - _2372;
    float _2430 = (0.5 / (((_2387 * ((_2386 * _2419) + _2372)) + 9.9999999392252902907785028219223e-09) + (((_2387 * _2419) + _2372) * _2386))) * _2386;
    float _4652 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2432 = (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * (_2396 / ((_2400 * _2400) * 3.141590118408203125));
    uint _2446 = _2219 + 9u;
    float _2457 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2259].w)) * _960) * 0.949999988079071044921875);
    float _2458 = _2457 * _2457;
    float _2459 = cbLight._m0[_2259].x + _1037;
    float _2460 = cbLight._m0[_2259].y + _1038;
    float _2461 = cbLight._m0[_2259].z + _1039;
    float _2465 = inversesqrt(dot(vec3(_2459, _2460, _2461), vec3(_2459, _2460, _2461)));
    float _2466 = _2465 * _2459;
    float _2467 = _2465 * _2460;
    float _2468 = _2465 * _2461;
    float _2469 = dot(vec3(_956, _957, _958), vec3(cbLight._m0[_2259].xyz));
    float _4663 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
    float _2472 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
    float _2473 = dot(vec3(_956, _957, _958), vec3(_2466, _2467, _2468));
    float _4674 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
    float _2476 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
    float _2477 = dot(vec3(cbLight._m0[_2259].xyz), vec3(_2466, _2467, _2468));
    float _4685 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2481 = _2458 * _2458;
    float _2485 = ((_2476 * _2476) * (_2481 + (-1.0))) + 1.0;
    float _2492 = exp2(log2(1.0 - (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0)))) * 5.0);
    float _2499 = 1.0 - _2458;
    float _2509 = (0.5 / (((_2387 * ((_2472 * _2499) + _2458)) + 9.9999999392252902907785028219223e-09) + (((_2387 * _2499) + _2458) * _2472))) * _2472;
    float _4696 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
    float _2511 = (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0))) * (_2481 / ((_2485 * _2485) * 3.141590118408203125));
    float _2521 = (((((_2492 * _2409) + _1120) * cbLight._m0[_2446].x) * _2511) * _2242) + ((((cbLight._m0[_2358].x * _2211) * ((_2408 * _2409) + _1120)) * _2432) * _2255);
    float _2522 = (((((_2492 * _2411) + _1122) * cbLight._m0[_2446].y) * _2511) * _2242) + ((((cbLight._m0[_2358].y * _2212) * ((_2408 * _2411) + _1122)) * _2432) * _2255);
    float _2523 = (((((_2492 * _2412) + _1123) * cbLight._m0[_2446].z) * _2511) * _2242) + ((((cbLight._m0[_2358].z * _2213) * ((_2408 * _2412) + _1123)) * _2432) * _2255);
    float _2585;
    float _2587;
    float _2589;
    if (_2295)
    {
        _2585 = _2521;
        _2587 = _2522;
        _2589 = _2523;
    }
    else
    {
        uint _2591 = _2219 + 2u;
        uint _2595 = _2219 + 10u;
        float _2609 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2591].w)) * _960) * 0.949999988079071044921875);
        float _2610 = _2609 * _2609;
        float _2611 = cbLight._m0[_2591].x + _1037;
        float _2612 = cbLight._m0[_2591].y + _1038;
        float _2613 = cbLight._m0[_2591].z + _1039;
        float _2617 = inversesqrt(dot(vec3(_2611, _2612, _2613), vec3(_2611, _2612, _2613)));
        float _2618 = _2617 * _2611;
        float _2619 = _2617 * _2612;
        float _2620 = _2617 * _2613;
        float _2621 = dot(vec3(_956, _957, _958), vec3(cbLight._m0[_2591].xyz));
        float _4707 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        float _2624 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
        float _2625 = dot(vec3(_956, _957, _958), vec3(_2618, _2619, _2620));
        float _4718 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
        float _2628 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
        float _2629 = dot(vec3(cbLight._m0[_2591].xyz), vec3(_2618, _2619, _2620));
        float _4729 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2633 = _2610 * _2610;
        float _2637 = ((_2628 * _2628) * (_2633 + (-1.0))) + 1.0;
        float _2644 = exp2(log2(1.0 - (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0)))) * 5.0);
        float _2651 = 1.0 - _2610;
        float _2661 = (0.5 / (((_2387 * ((_2624 * _2651) + _2610)) + 9.9999999392252902907785028219223e-09) + (((_2387 * _2651) + _2610) * _2624))) * _2624;
        float _4740 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
        float _2663 = (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0))) * (_2633 / ((_2637 * _2637) * 3.141590118408203125));
        float _2664 = isnan(1.0) ? _2234 : (isnan(_2234) ? 1.0 : min(_2234, 1.0));
        _2585 = (((((_2644 * _2409) + _1120) * cbLight._m0[_2595].x) * _2663) * _2664) + _2521;
        _2587 = (((((_2644 * _2411) + _1122) * cbLight._m0[_2595].y) * _2663) * _2664) + _2522;
        _2589 = (((((_2644 * _2412) + _1123) * cbLight._m0[_2595].z) * _2663) * _2664) + _2523;
    }
    float _2699;
    float _2701;
    float _2703;
    if (_2313)
    {
        _2699 = _2585;
        _2701 = _2587;
        _2703 = _2589;
    }
    else
    {
        uint _2710 = _2219 + 3u;
        uint _2714 = _2219 + 11u;
        float _2728 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2710].w)) * _960) * 0.949999988079071044921875);
        float _2729 = _2728 * _2728;
        float _2730 = cbLight._m0[_2710].x + _1037;
        float _2731 = cbLight._m0[_2710].y + _1038;
        float _2732 = cbLight._m0[_2710].z + _1039;
        float _2736 = inversesqrt(dot(vec3(_2730, _2731, _2732), vec3(_2730, _2731, _2732)));
        float _2737 = _2736 * _2730;
        float _2738 = _2736 * _2731;
        float _2739 = _2736 * _2732;
        float _2740 = dot(vec3(_956, _957, _958), vec3(cbLight._m0[_2710].xyz));
        float _4756 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        float _2743 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
        float _2744 = dot(vec3(_956, _957, _958), vec3(_2737, _2738, _2739));
        float _4767 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
        float _2747 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
        float _2748 = dot(vec3(cbLight._m0[_2710].xyz), vec3(_2737, _2738, _2739));
        float _4778 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
        float _2752 = _2729 * _2729;
        float _2756 = ((_2747 * _2747) * (_2752 + (-1.0))) + 1.0;
        float _2763 = exp2(log2(1.0 - (isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0)))) * 5.0);
        float _2770 = 1.0 - _2729;
        float _2780 = (0.5 / (((_2387 * ((_2743 * _2770) + _2729)) + 9.9999999392252902907785028219223e-09) + (((_2387 * _2770) + _2729) * _2743))) * _2743;
        float _4789 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
        float _2782 = (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0))) * (_2752 / ((_2756 * _2756) * 3.141590118408203125));
        float _2783 = isnan(1.0) ? _2235 : (isnan(_2235) ? 1.0 : min(_2235, 1.0));
        _2699 = (((((_2763 * _2409) + _1120) * cbLight._m0[_2714].x) * _2782) * _2783) + _2585;
        _2701 = (((((_2763 * _2411) + _1122) * cbLight._m0[_2714].y) * _2782) * _2783) + _2587;
        _2703 = (((((_2763 * _2412) + _1123) * cbLight._m0[_2714].z) * _2782) * _2783) + _2589;
    }
    float _2918;
    float _2920;
    float _2922;
    float _2924;
    float _2926;
    float _2928;
    if (_2217.y == 0u)
    {
        float _2858 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2859 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2858;
        float _2860 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2858;
        float _2861 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2858;
        uvec4 _2873 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2874 = _2873.x;
        uint _2885 = uint((float(_2873.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1058) / _2874))) + floor(float(uint(cbSceneParam._m0[85u].x * _1057) / _2874)));
        float _2895 = (log2(_2861 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2896 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
        uint _2899 = uint(isnan(14.0) ? _2896 : (isnan(_2896) ? 14.0 : min(_2896, 14.0)));
        uvec4 _2904 = texelFetch(g_lightClusterGridBuffer, int(((_2899 << 2u) + (_2885 << 6u)) >> 2u));
        uint _2905 = _2904.x;
        uint _2906 = _2873.z;
        float _3008;
        float _3010;
        float _3012;
        float _3014;
        float _3016;
        float _3018;
        if (((((1u << ((_2906 >> 4u) & 15u)) + 4294967295u) & _2905) == 0u) || ((_2906 & 240u) == 0u))
        {
            _3008 = 0.0;
            _3010 = 0.0;
            _3012 = 0.0;
            _3014 = 0.0;
            _3016 = 0.0;
            _3018 = 0.0;
        }
        else
        {
            float _3009;
            float _3011;
            float _3013;
            float _3015;
            float _3017;
            float _3019;
            float _3161 = 0.0;
            float _3162 = 0.0;
            float _3163 = 0.0;
            float _3164 = 0.0;
            float _3165 = 0.0;
            float _3166 = 0.0;
            uint _3167 = 0u;
            uint _3176;
            bool _3177;
            for (;;)
            {
                _3176 = texelFetch(g_lightClassification, int((((_2899 << 5u) + (_2885 << 9u)) + (_3167 << 2u)) >> 2u)).x;
                _3177 = _3176 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3177)
                {
                    frontier_phi_66_pred = _3161;
                    frontier_phi_66_pred_1 = _3166;
                    frontier_phi_66_pred_2 = _3165;
                    frontier_phi_66_pred_3 = _3164;
                    frontier_phi_66_pred_4 = _3163;
                    frontier_phi_66_pred_5 = _3162;
                }
                else
                {
                    float _3306;
                    float _3307;
                    float _3308;
                    float _3309;
                    float _3310;
                    float _3311;
                    uint _3312;
                    _3306 = _3161;
                    _3307 = _3162;
                    _3308 = _3163;
                    _3309 = _3164;
                    _3310 = _3165;
                    _3311 = _3166;
                    _3312 = _3176;
                    float _3233;
                    float _3234;
                    float _3235;
                    float _3236;
                    float _3237;
                    float _3238;
                    for (;;)
                    {
                        uint _3316 = uint(findLSB(_3312)) + (_3167 << 5u);
                        uint _3313 = (_3312 + 4294967295u) & _3312;
                        uint _3318 = _3316 * 48u;
                        vec4 _3332 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3318)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 3u)).x));
                        uint _3338 = (_3316 * 48u) + 4u;
                        vec4 _3351 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3338)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 3u)).x));
                        uint _3357 = (_3316 * 48u) + 8u;
                        vec3 _3368 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3357)).x, texelFetch(g_PointLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3357 + 2u)).x));
                        float _3372 = _3332.x - _2859;
                        float _3373 = _3332.y - _2860;
                        float _3374 = _3332.z - _2861;
                        float _3375 = dot(vec3(_3372, _3373, _3374), vec3(_3372, _3373, _3374));
                        float _3378 = inversesqrt(_3375);
                        float _3379 = _3378 * _3372;
                        float _3380 = _3378 * _3373;
                        float _3381 = _3378 * _3374;
                        float _3382 = dot(vec3(_1076, _1079, _1082), vec3(_3379, _3380, _3381));
                        float _3387 = 1.0 - (_3375 * _3332.w);
                        float _4815 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                        float _3388 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                        float _3389 = sqrt(_3375) * _3351.w;
                        float _3392 = 1.39999997615814208984375 / (_3389 + 1.39999997615814208984375);
                        float _3393 = _3392 * _3392;
                        float _3396 = ((1.0 - _3393) * _3382) + _3393;
                        float _3399 = _3389 * _3389;
                        float _3403 = ((isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0))) * _3388) / ((_3399 * 0.699999988079071044921875) + 1.0);
                        float _3407 = (-0.0) - _2859;
                        float _3408 = (-0.0) - _2860;
                        float _3409 = (-0.0) - _2861;
                        float _3413 = inversesqrt(dot(vec3(_3407, _3408, _3409), vec3(_3407, _3408, _3409)));
                        float _3414 = _3413 * _3407;
                        float _3415 = _3413 * _3408;
                        float _3416 = _3413 * _3409;
                        float _3424 = exp2(log2(1.0 / ((_3399 * 3.5) + 5.0)) * 0.25);
                        float _3425 = 1.0 - _1151;
                        float _3432 = sqrt(1.0 - ((1.0 - (_3425 * _3425)) * (1.0 - (_3424 * _3424))));
                        float _3433 = _3432 * _3432;
                        float _3434 = _3433 * _3433;
                        float _3435 = _3414 + _3379;
                        float _3436 = _3415 + _3380;
                        float _3437 = _3416 + _3381;
                        float _3441 = inversesqrt(dot(vec3(_3435, _3436, _3437), vec3(_3435, _3436, _3437)));
                        float _3445 = dot(vec3(_1076, _1079, _1082), vec3(_3414, _3415, _3416));
                        float _4831 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                        float _3448 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
                        float _3449 = dot(vec3(_1076, _1079, _1082), vec3(_3441 * _3435, _3441 * _3436, _3441 * _3437));
                        float _4842 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                        float _3452 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
                        float _3456 = ((_3452 * _3452) * (_3434 + (-1.0))) + 1.0;
                        float _3457 = _3392 * _3433;
                        float _3458 = _3457 * _3457;
                        float _3461 = ((1.0 - _3458) * _3382) + _3458;
                        float _4853 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                        float _3462 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
                        float _3463 = 1.0 - _3433;
                        float _3473 = (0.5 / (((_3462 * ((_3448 * _3463) + _3433)) + 9.9999999392252902907785028219223e-09) + (((_3462 * _3463) + _3433) * _3448))) * _3462;
                        float _4864 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                        float _3484 = (((_3434 * 3.1415927410125732421875) * (isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0)))) / ((_3456 * _3456) * ((_3399 * 2.1991131305694580078125) + 3.141590118408203125))) * _3388;
                        _3236 = (_3403 * _3351.x) + _3309;
                        _3237 = (_3403 * _3351.y) + _3310;
                        _3238 = (_3403 * _3351.z) + _3311;
                        _3233 = (_3484 * _3368.x) + _3306;
                        _3234 = (_3484 * _3368.y) + _3307;
                        _3235 = (_3484 * _3368.z) + _3308;
                        if (_3313 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3306 = _3233;
                            _3307 = _3234;
                            _3308 = _3235;
                            _3309 = _3236;
                            _3310 = _3237;
                            _3311 = _3238;
                            _3312 = _3313;
                        }
                    }
                    frontier_phi_66_pred = _3233;
                    frontier_phi_66_pred_1 = _3238;
                    frontier_phi_66_pred_2 = _3237;
                    frontier_phi_66_pred_3 = _3236;
                    frontier_phi_66_pred_4 = _3235;
                    frontier_phi_66_pred_5 = _3234;
                }
                _3009 = frontier_phi_66_pred;
                _3019 = frontier_phi_66_pred_1;
                _3017 = frontier_phi_66_pred_2;
                _3015 = frontier_phi_66_pred_3;
                _3013 = frontier_phi_66_pred_4;
                _3011 = frontier_phi_66_pred_5;
                uint _3168 = _3167 + 1u;
                if (_3168 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3161 = _3009;
                    _3162 = _3011;
                    _3163 = _3013;
                    _3164 = _3015;
                    _3165 = _3017;
                    _3166 = _3019;
                    _3167 = _3168;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3008 = _3009;
            _3010 = _3011;
            _3012 = _3013;
            _3014 = _3015;
            _3016 = _3017;
            _3018 = _3019;
        }
        uvec4 _3022 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3023 = _3022.z;
        uint _3025 = (_3023 >> 8u) & 15u;
        float _3129;
        float _3131;
        float _3133;
        float _3135;
        float _3137;
        float _3139;
        if (((4294967295u << _3025) & _2905) == 0u)
        {
            _3129 = _3008;
            _3131 = _3010;
            _3133 = _3012;
            _3135 = _3014;
            _3137 = _3016;
            _3139 = _3018;
        }
        else
        {
            float _3154 = inversesqrt(dot(vec3(_2859, _2860, _2861), vec3(_2859, _2860, _2861)));
            float _3155 = _3154 * _2859;
            float _3156 = _3154 * _2860;
            float _3157 = _3154 * _2861;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3025 < ((_3023 >> 12u) & 15u))
            {
                float _3130;
                float _3132;
                float _3134;
                float _3136;
                float _3138;
                float _3140;
                float _3289 = _3008;
                float _3290 = _3010;
                float _3291 = _3012;
                float _3292 = _3014;
                float _3293 = _3016;
                float _3294 = _3018;
                uint _3295 = _3025;
                uint _3304;
                bool _3305;
                for (;;)
                {
                    _3304 = texelFetch(g_lightClassification, int((((_2899 << 5u) + (_2885 << 9u)) + (_3295 << 2u)) >> 2u)).x;
                    _3305 = _3304 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3305)
                    {
                        frontier_phi_77_pred = _3294;
                        frontier_phi_77_pred_1 = _3293;
                        frontier_phi_77_pred_2 = _3292;
                        frontier_phi_77_pred_3 = _3291;
                        frontier_phi_77_pred_4 = _3290;
                        frontier_phi_77_pred_5 = _3289;
                    }
                    else
                    {
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3791;
                        float _3792;
                        float _3793;
                        float _3794;
                        float _3795;
                        float _3796;
                        float _3511 = _3289;
                        float _3512 = _3290;
                        float _3513 = _3291;
                        float _3514 = _3292;
                        float _3515 = _3293;
                        float _3516 = _3294;
                        uint _3517 = _3304;
                        uint _3518;
                        vec4 _3543;
                        float _3544;
                        vec4 _3559;
                        vec3 _3571;
                        vec4 _3586;
                        vec4 _3601;
                        float _3647;
                        bool _3648;
                        for (;;)
                        {
                            uint _3528 = ((_3295 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3517));
                            _3518 = (_3517 + 4294967295u) & _3517;
                            uint _3530 = _3528 * 40u;
                            _3543 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 3u)).x));
                            _3544 = _3543.w;
                            uint _3546 = (_3528 * 40u) + 4u;
                            _3559 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3546)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 3u)).x));
                            uint _3561 = (_3528 * 40u) + 8u;
                            _3571 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 2u)).x));
                            uint _3573 = (_3528 * 40u) + 16u;
                            _3586 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3573)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 3u)).x));
                            uint _3588 = (_3528 * 40u) + 20u;
                            _3601 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3588)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 3u)).x));
                            uint _3603 = (_3528 * 40u) + 24u;
                            vec4 _3616 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 3u)).x));
                            uint _3622 = (_3528 * 40u) + 28u;
                            vec4 _3635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 3u)).x));
                            _3647 = fma(_2861, _3635.z, fma(_2860, _3635.y, _3635.x * _2859)) + _3635.w;
                            _3648 = !((fma(_2861, _3616.z, fma(_2860, _3616.y, _3616.x * _2859)) + _3616.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3648)
                            {
                                float _3675 = _3543.x - _2859;
                                float _3676 = _3543.y - _2860;
                                float _3677 = _3543.z - _2861;
                                float _3678 = dot(vec3(_3675, _3676, _3677), vec3(_3675, _3676, _3677));
                                float _3681 = inversesqrt(_3678);
                                float _3682 = _3681 * _3675;
                                float _3683 = _3681 * _3676;
                                float _3684 = _3681 * _3677;
                                float _3688 = 1.0 - (_3678 / (_3544 * _3544));
                                float _4875 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                                float _3689 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
                                float _3693 = sqrt(_3678) * _3559.w;
                                float _3695 = 1.39999997615814208984375 / (_3693 + 1.39999997615814208984375);
                                float _3696 = _3695 * _3695;
                                float _3699 = ((1.0 - _3696) * dot(vec3(_3682, _3683, _3684), vec3(_1076, _1079, _1082))) + _3696;
                                float _3702 = _3693 * _3693;
                                float _3706 = (fma(_2861, _3586.z, fma(_2860, _3586.y, _3586.x * _2859)) + _3586.w) / _3647;
                                float _3707 = (fma(_2861, _3601.z, fma(_2860, _3601.y, _3601.x * _2859)) + _3601.w) / _3647;
                                float _3711 = 1.0 - dot(vec2(_3706, _3707), vec2(_3706, _3707));
                                float _4891 = isnan(0.0) ? _3711 : (isnan(_3711) ? 0.0 : max(_3711, 0.0));
                                float _3712 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
                                float _3713 = _3712 * (((isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0))) * _3689) / ((_3702 * 0.699999988079071044921875) + 1.0));
                                float _3725 = exp2(log2(1.0 / ((_3702 * 3.5) + 5.0)) * 0.25);
                                float _3726 = 1.0 - _1151;
                                float _3733 = sqrt(1.0 - ((1.0 - (_3726 * _3726)) * (1.0 - (_3725 * _3725))));
                                float _3734 = _3733 * _3733;
                                float _3735 = _3734 * _3734;
                                float _3736 = _3682 - _3155;
                                float _3737 = _3683 - _3156;
                                float _3738 = _3684 - _3157;
                                float _3742 = inversesqrt(dot(vec3(_3736, _3737, _3738), vec3(_3736, _3737, _3738)));
                                float _3746 = dot(vec3(_1076, _1079, _1082), vec3((-0.0) - _3155, (-0.0) - _3156, (-0.0) - _3157));
                                float _4902 = isnan(0.0) ? _3746 : (isnan(_3746) ? 0.0 : max(_3746, 0.0));
                                float _3749 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
                                float _3750 = dot(vec3(_1076, _1079, _1082), vec3(_3742 * _3736, _3742 * _3737, _3742 * _3738));
                                float _4913 = isnan(0.0) ? _3750 : (isnan(_3750) ? 0.0 : max(_3750, 0.0));
                                float _3753 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
                                float _3757 = ((_3753 * _3753) * (_3735 + (-1.0))) + 1.0;
                                float _3758 = _3695 * _3734;
                                float _3759 = _3758 * _3758;
                                float _3765 = ((1.0 - _3759) * dot(vec3(_1076, _1079, _1082), vec3(_3682, _3683, _3684))) + _3759;
                                float _4924 = isnan(0.0) ? _3765 : (isnan(_3765) ? 0.0 : max(_3765, 0.0));
                                float _3766 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
                                float _3767 = 1.0 - _3734;
                                float _3777 = (0.5 / (((_3766 * ((_3749 * _3767) + _3734)) + 9.9999999392252902907785028219223e-09) + (((_3766 * _3767) + _3734) * _3749))) * _3766;
                                float _4935 = isnan(0.0) ? _3777 : (isnan(_3777) ? 0.0 : max(_3777, 0.0));
                                float _3787 = (_3712 * _3689) * (((_3735 * 3.1415927410125732421875) * (isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0)))) / ((_3757 * _3757) * ((_3702 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3713 * _3559.y;
                                frontier_phi_83_pred_1 = _3713 * _3559.x;
                                frontier_phi_83_pred_2 = _3787 * _3571.z;
                                frontier_phi_83_pred_3 = _3787 * _3571.y;
                                frontier_phi_83_pred_4 = _3787 * _3571.x;
                                frontier_phi_83_pred_5 = _3713 * _3559.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3795 = frontier_phi_83_pred;
                            _3794 = frontier_phi_83_pred_1;
                            _3793 = frontier_phi_83_pred_2;
                            _3792 = frontier_phi_83_pred_3;
                            _3791 = frontier_phi_83_pred_4;
                            _3796 = frontier_phi_83_pred_5;
                            _3501 = _3794 + _3514;
                            _3502 = _3795 + _3515;
                            _3503 = _3796 + _3516;
                            _3498 = _3791 + _3511;
                            _3499 = _3792 + _3512;
                            _3500 = _3793 + _3513;
                            if (_3518 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3511 = _3498;
                                _3512 = _3499;
                                _3513 = _3500;
                                _3514 = _3501;
                                _3515 = _3502;
                                _3516 = _3503;
                                _3517 = _3518;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3503;
                        frontier_phi_77_pred_1 = _3502;
                        frontier_phi_77_pred_2 = _3501;
                        frontier_phi_77_pred_3 = _3500;
                        frontier_phi_77_pred_4 = _3499;
                        frontier_phi_77_pred_5 = _3498;
                    }
                    _3140 = frontier_phi_77_pred;
                    _3138 = frontier_phi_77_pred_1;
                    _3136 = frontier_phi_77_pred_2;
                    _3134 = frontier_phi_77_pred_3;
                    _3132 = frontier_phi_77_pred_4;
                    _3130 = frontier_phi_77_pred_5;
                    uint _3296 = _3295 + 1u;
                    if (_3296 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3289 = _3130;
                        _3290 = _3132;
                        _3291 = _3134;
                        _3292 = _3136;
                        _3293 = _3138;
                        _3294 = _3140;
                        _3295 = _3296;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3134;
                frontier_phi_58_59_ladder_1 = _3140;
                frontier_phi_58_59_ladder_2 = _3138;
                frontier_phi_58_59_ladder_3 = _3136;
                frontier_phi_58_59_ladder_4 = _3132;
                frontier_phi_58_59_ladder_5 = _3130;
            }
            else
            {
                frontier_phi_58_59_ladder = _3012;
                frontier_phi_58_59_ladder_1 = _3018;
                frontier_phi_58_59_ladder_2 = _3016;
                frontier_phi_58_59_ladder_3 = _3014;
                frontier_phi_58_59_ladder_4 = _3010;
                frontier_phi_58_59_ladder_5 = _3008;
            }
            _3129 = frontier_phi_58_59_ladder_5;
            _3131 = frontier_phi_58_59_ladder_4;
            _3133 = frontier_phi_58_59_ladder;
            _3135 = frontier_phi_58_59_ladder_3;
            _3137 = frontier_phi_58_59_ladder_2;
            _3139 = frontier_phi_58_59_ladder_1;
        }
        float _3144 = isnan(1.0) ? _1135 : (isnan(_1135) ? 1.0 : min(_1135, 1.0));
        _2918 = (_3144 * _3135) + _2351;
        _2920 = (_3144 * _3137) + _2353;
        _2922 = (_3144 * _3139) + _2355;
        _2924 = ((_3129 * _1120) * _3144) + _2699;
        _2926 = ((_3131 * _1122) * _3144) + _2701;
        _2928 = ((_3133 * _1123) * _3144) + _2703;
    }
    else
    {
        _2918 = _2351;
        _2920 = _2353;
        _2922 = _2355;
        _2924 = _2699;
        _2926 = _2701;
        _2928 = _2703;
    }
    float _4951 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    float _4962 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
    float _4973 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
    float _4984 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _2946 = ((isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0))) * (_2918 + ((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1135))) + ((_2924 + ((isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0))) * _1970)) * cbPerFrame._m0[3u].x);
    float _2947 = ((isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0))) * (_2920 + ((isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))) * _1135))) + ((_2926 + ((isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0))) * _1970)) * cbPerFrame._m0[3u].x);
    float _2948 = ((isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0))) * (_2922 + ((isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))) * _1135))) + ((_2928 + ((isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0))) * _1970)) * cbPerFrame._m0[3u].x);
    float _2953 = cbInstanceData._m0[_1095 + 6u].w * (isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0)));
    float _2958 = _1057 / cbSceneParam._m0[86u].x;
    float _2959 = _1058 / cbSceneParam._m0[86u].y;
    vec4 _2973 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2958, _2959, (log2((isnan(cbSceneParam._m0[77u].w) ? _980 : (isnan(_980) ? cbSceneParam._m0[77u].w : min(_980, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2975 = _2973.x;
    float _2976 = _2973.y;
    float _2977 = _2973.z;
    float _2978 = _2973.w;
    float _3071;
    float _3073;
    float _3075;
    float _3077;
    if (_980 > cbSceneParam._m0[78u].w)
    {
        float _3033 = isnan(_980) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _980 : min(cbSceneParam._m0[80u].w, _980));
        float _3034 = _3033 / _980;
        float _3045 = _3034 * _1030;
        float _3046 = _1031 * _3034;
        float _3047 = (-0.0) - _3046;
        float _3049 = _3034 * _1032;
        float _3051 = (cbSceneParam._m0[77u].w * _3047) / _3033;
        float _3052 = _3051 + cbSceneParam._m0[79u].w;
        float _3053 = cbSceneParam._m0[79u].w - _3046;
        float _3059 = sqrt(((_3045 * _3045) + (_3046 * _3046)) + (_3049 * _3049));
        float _3062 = (1.0 - (cbSceneParam._m0[77u].w / _3033)) * _3059;
        float _3067 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3069 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3246;
        if (abs((_3047 - _3051) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3246 = ((((_3052 > 0.0) ? exp2(_3067 * _3052) : (2.0 - exp2(_3069 * _3052))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3062;
        }
        else
        {
            float _3190 = 1.0 / cbSceneParam._m0[80u].x;
            float _3191 = isnan(_3053) ? _3052 : (isnan(_3052) ? _3053 : max(_3052, _3053));
            float _3192 = isnan(_3053) ? _3052 : (isnan(_3052) ? _3053 : min(_3052, _3053));
            float _3201 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : min(_3191, 0.0));
            float _3202 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : min(_3192, 0.0));
            _3246 = ((abs(_3059 / _3047) * cbSceneParam._m0[80u].y) * ((((_3201 - _3202) * 2.0) - ((exp2(_3067 * (isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0)))) - exp2(_3067 * (isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0))))) * _3190)) - ((exp2(_3069 * _3201) - exp2(_3069 * _3202)) * _3190))) + (_3062 * cbSceneParam._m0[80u].z);
        }
        vec4 _3248 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2958, _2959, 1.0), 0.0);
        float _3257 = exp2((_3246 * (-1.44269502162933349609375)) * (1.0 - _3248.w));
        float _3258 = log2(_3257);
        float _3274 = log2(_2978);
        _3071 = (exp2(_3274 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3258 * cbSceneParam._m0[78u].x)) * _3248.x) / cbSceneParam._m0[78u].x)) + _2975;
        _3073 = (exp2(_3274 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3258 * cbSceneParam._m0[78u].y)) * _3248.y) / cbSceneParam._m0[78u].y)) + _2976;
        _3075 = (exp2(_3274 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3258 * cbSceneParam._m0[78u].z)) * _3248.z) / cbSceneParam._m0[78u].z)) + _2977;
        _3077 = _3257 * _2978;
    }
    else
    {
        _3071 = _2975;
        _3073 = _2976;
        _3075 = _2977;
        _3077 = _2978;
    }
    bool _3284;
    vec4 _3087;
    vec4 _3109;
    float _3111;
    float _3115;
    float _3116;
    float _3117;
    float _3118;
    bool _3128;
    for (;;)
    {
        _3087 = cbMatDynParam._m0[0u];
        float _3089 = roundEven(_3087.y);
        bool _3090 = _3089 == 3.0;
        float _3091 = log2(_3077);
        float _3098 = exp2(_3091 * cbSceneParam._m0[78u].x) * _2946;
        float _3099 = exp2(_3091 * cbSceneParam._m0[78u].y) * _2947;
        float _3100 = exp2(_3091 * cbSceneParam._m0[78u].z) * _2948;
        float _3107 = _1046 + (-0.5);
        _3109 = cbMtdParam._m0[1u];
        _3111 = _3109.y * _3107;
        float _3114 = (_3089 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3115 = _3114 * (_3090 ? _3098 : (_3098 + (cbSceneParam._m0[72u].w * _3071)));
        _3116 = _3114 * (_3090 ? _3099 : (_3099 + (cbSceneParam._m0[72u].w * _3073)));
        _3117 = _3114 * (_3090 ? _3100 : (_3100 + (cbSceneParam._m0[72u].w * _3075)));
        _3118 = _3107 * 0.999000012874603271484375;
        _3128 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3128)
        {
            if ((cbInstanceData._m0[_1095 + 7u].x + _3118) < 0.5)
            {
                _3284 = true;
                break;
            }
        }
        uint _3225 = _1096 + uint(_3087.w);
        if ((cbInstanceData._m0[_3225].w < 1.0) && ((cbInstanceData._m0[_3225].w + _3118) < 0.5))
        {
            _3284 = true;
            break;
        }
        if ((_3111 + 1.0) < _3109.x)
        {
            _3284 = true;
            break;
        }
        _3284 = false;
        break;
    }
    float _3489;
    if (_3284)
    {
        discard_state = true;
        _3489 = 0.0;
    }
    else
    {
        _3489 = _2953;
    }
    SV_Target.x = _3115;
    SV_Target.y = _3116;
    SV_Target.z = _3117;
    SV_Target.w = _3489;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2953;
    discard_exit();
}


