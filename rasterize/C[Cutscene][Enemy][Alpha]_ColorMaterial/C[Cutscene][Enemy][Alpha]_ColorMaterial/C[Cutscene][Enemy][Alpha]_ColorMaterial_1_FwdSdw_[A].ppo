#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24;
layout(set = 0, binding = 12) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 13) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 18) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in float TEXCOORD_8;
layout(location = 7, component = 1) in float TEXCOORD_9;
layout(location = 7, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1464;
float _4126;
float _4127;
float _4128;
float _4129;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _277 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    vec4 _292 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _296 = _292.z;
    float _309 = exp2(log2((1.0 - _296) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _310 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _311 = isnan(1.0) ? _310 : (isnan(_310) ? 1.0 : min(_310, 1.0));
    vec4 _328 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _340 = exp2(log2(_328.w * cbMtdParam._m0[29u].y) * cbMtdParam._m0[23u].x);
    float _341 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _342 = isnan(1.0) ? _341 : (isnan(_341) ? 1.0 : min(_341, 1.0));
    float _351 = exp2(log2(cbMtdParam._m0[23u].y * _296) * cbMtdParam._m0[22u].y);
    float _352 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _353 = isnan(1.0) ? _352 : (isnan(_352) ? 1.0 : min(_352, 1.0));
    float _374 = roundEven(5.0 - ((texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _375 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _376 = isnan(4.0) ? _375 : (isnan(_375) ? 4.0 : min(_375, 4.0));
    float _388 = floor(_376);
    vec4 _391 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w, _388));
    vec4 _415 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _426 = cbMtdParam._m0[9u].x * _415.x;
    float _427 = cbMtdParam._m0[9u].y * _415.y;
    float _428 = cbMtdParam._m0[9u].z * _415.z;
    float _435 = (((cbMtdParam._m0[10u].x * _391.x) - _426) * _353) + _426;
    float _436 = (((cbMtdParam._m0[10u].y * _391.y) - _427) * _353) + _427;
    float _437 = (((cbMtdParam._m0[10u].z * _391.z) - _428) * _353) + _428;
    float _443 = exp2(log2(_292.w) * cbMtdParam._m0[23u].w);
    vec4 _456 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _476 = (((cbMtdParam._m0[16u].x * _456.x) - _435) * _443) + _435;
    float _477 = (((cbMtdParam._m0[16u].y * _456.y) - _436) * _443) + _436;
    float _478 = (((cbMtdParam._m0[16u].z * _456.z) - _437) * _443) + _437;
    vec4 _491 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _511 = (((cbMtdParam._m0[19u].x * _491.x) - _476) * _342) + _476;
    float _512 = (((cbMtdParam._m0[19u].y * _491.y) - _477) * _342) + _477;
    float _513 = (((cbMtdParam._m0[19u].z * _491.z) - _478) * _342) + _478;
    vec4 _526 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _551 = (_328.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _526.x) - _511) * _311) + _511);
    float _553 = (_328.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _526.y) - _512) * _311) + _512);
    float _555 = (_328.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _526.z) - _513) * _311) + _513);
    float _559 = cbMtdParam._m0[28u].x * TEXCOORD_8;
    float _568 = (_559 - (((_277.x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _559))) * (cbMtdParam._m0[27u].w + 1.0);
    float _4178 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _569 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _576 = ((cbMtdParam._m0[21u].x - _551) * _569) + _551;
    float _577 = ((cbMtdParam._m0[21u].y - _553) * _569) + _553;
    float _578 = ((cbMtdParam._m0[21u].z - _555) * _569) + _555;
    vec4 _592 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24, SS_ClampLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.z) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.w) + cbTextureTilingScale._m0[11u].w));
    float _600 = (_592.x + (-1.0)) + (cbMtdParam._m0[28u].y * 2.0);
    float _4189 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _606 = exp2(log2(cbMtdParam._m0[28u].w * (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0)))) * cbMtdParam._m0[28u].z);
    float _4200 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _607 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _205[5];
    float _206[5];
    _205[0u] = cbMtdParam._m0[29u].z;
    _206[0u] = cbMtdParam._m0[29u].w;
    _205[1u] = cbMtdParam._m0[31u].z;
    _206[1u] = cbMtdParam._m0[31u].w;
    _205[2u] = cbMtdParam._m0[31u].x;
    _206[2u] = cbMtdParam._m0[31u].y;
    _205[3u] = cbMtdParam._m0[30u].z;
    _206[3u] = cbMtdParam._m0[30u].w;
    _205[4u] = cbMtdParam._m0[30u].x;
    _206[4u] = cbMtdParam._m0[30u].y;
    float _648 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    uint _650 = uint(int(isnan(4.0) ? _648 : (isnan(_648) ? 4.0 : min(_648, 4.0))));
    float _657 = ((_206[_650] - cbMtdParam._m0[22u].z) * _353) + cbMtdParam._m0[22u].z;
    float _660 = ((cbMtdParam._m0[22u].w - _657) * _443) + _657;
    float _663 = ((cbMtdParam._m0[25u].x - _660) * _342) + _660;
    float _666 = ((cbMtdParam._m0[26u].x - _663) * _311) + _663;
    float _668 = _666 - (_666 * _559);
    vec4 _685 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w, _388));
    vec4 _703 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _705 = _703.x;
    float _706 = _703.y;
    float _711 = cbMtdParam._m0[22u].x + _703.z;
    float _714 = (((_685.z + _205[_650]) - _711) * _353) + _711;
    vec4 _727 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _738 = (((_727.z - _714) + cbMtdParam._m0[29u].x) * _443) + _714;
    float _743 = ((((_296 * 2.0) * _738) - _738) * cbMtdParam._m0[24u].w) + _738;
    vec4 _755 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _766 = (((cbMtdParam._m0[23u].z + _755.z) - _743) * _342) + _743;
    vec4 _779 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _790 = (((_779.z - _766) + cbMtdParam._m0[26u].y) * _311) + _766;
    vec4 _805 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _819 = ((cbMtdParam._m0[27u].y * _559) * ((_805.z * cbMtdParam._m0[27u].x) - _790)) + _790;
    float _831 = ((_685.x - _705) * _353) + _705;
    float _832 = ((_685.y - _706) * _353) + _706;
    float _837 = ((_727.x - _831) * _443) + _831;
    float _838 = ((_727.y - _832) * _443) + _832;
    float _843 = ((_755.x - _837) * _342) + _837;
    float _844 = ((_755.y - _838) * _342) + _838;
    float _853 = ((((_779.x - _843) * _311) + _843) * 2.0) + (-1.0);
    float _854 = ((((_779.y - _844) * _311) + _844) * 2.0) + (-1.0);
    float _855 = dot(vec2(_853, _854), vec2(_853, _854));
    float _4221 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _860 = sqrt(1.0 - (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))));
    float _870 = ((cbMtdParam._m0[25u].y * ((_292.x * 2.0) + (-1.0))) + _853) + ((((_805.x * 2.0) + (-1.0)) * _559) * cbMtdParam._m0[26u].w);
    float _871 = ((cbMtdParam._m0[25u].y * ((_292.y * 2.0) + (-1.0))) + _854) + (((cbMtdParam._m0[28u].x * TEXCOORD_9) * ((_805.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _874 = fma(_860, _241 * NORMAL.x, fma(_871, _248 * TANGENT.x, (_234 * _226) * _870));
    float _877 = fma(_860, _241 * NORMAL.y, fma(_871, _248 * TANGENT.y, (_234 * _227) * _870));
    float _880 = fma(_860, _241 * NORMAL.z, fma(_871, _248 * TANGENT.z, (_234 * _228) * _870));
    float _884 = inversesqrt(dot(vec3(_874, _877, _880), vec3(_874, _877, _880)));
    float _885 = _884 * _874;
    float _886 = _884 * _877;
    float _887 = _884 * _880;
    float _4232 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _888 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _4243 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _889 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
    float _4254 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _4265 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _4276 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _4287 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _893 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
    float _909 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _959 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _949);
    float _960 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _949);
    float _961 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _949);
    float _965 = inversesqrt(dot(vec3(_959, _960, _961), vec3(_959, _960, _961)));
    float _966 = _959 * _965;
    float _967 = _960 * _965;
    float _968 = _961 * _965;
    vec4 _973 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _975 = _973.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1145 = sqrt(((_959 * _959) + (_960 * _960)) + (_961 * _961));
        float _1151 = (cbMatDynParam._m0[5u].x * _1145) + cbMatDynParam._m0[5u].y;
        float _4298 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1156 = (cbMatDynParam._m0[5u].z * _1145) + cbMatDynParam._m0[5u].w;
        float _4309 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) - _1152)) + _1152) < ((_975 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _986 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _987 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1005 = fma(_887, cbSceneParam._m0[5u].z, fma(_886, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _885));
    float _1008 = fma(_887, cbSceneParam._m0[6u].z, fma(_886, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _885));
    float _1011 = fma(_887, cbSceneParam._m0[7u].z, fma(_886, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _885));
    uint _1024 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1025 = _1024 + 9u;
    uint _1026 = _1025 + uint(cbMatDynParam._m0[0u].w);
    float _1032 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0)))) * cbInstanceData._m0[_1026].x;
    float _1033 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0)))) * cbInstanceData._m0[_1026].y;
    float _1034 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0)))) * cbInstanceData._m0[_1026].z;
    float _4320 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _1035 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _4331 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _1036 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
    float _4342 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _1037 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
    float _1038 = 1.0 - _893;
    float _1039 = _1035 * _1038;
    float _1040 = _1036 * _1038;
    float _1041 = _1037 * _1038;
    float _1046 = (_1035 + (-0.039999999105930328369140625)) * _893;
    float _1047 = (_1036 + (-0.039999999105930328369140625)) * _893;
    float _1048 = (_1037 + (-0.039999999105930328369140625)) * _893;
    float _1049 = _1046 + 0.039999999105930328369140625;
    float _1051 = _1047 + 0.039999999105930328369140625;
    float _1052 = _1048 + 0.039999999105930328369140625;
    vec4 _1061 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _986, cbSceneParam._m0[86u].y * _987));
    float _1064 = _1061.x * TEXCOORD_5.w;
    float _1065 = dot(vec3(_885, _886, _887), vec3(_966, _967, _968));
    float _1068 = _1065 * 2.0;
    float _1072 = (_1068 * _885) - _966;
    float _1073 = (_1068 * _886) - _967;
    float _1074 = (_1068 * _887) - _968;
    float _1078 = abs(dot(vec3(_966, _967, _968), vec3(_885, _886, _887)));
    float _4353 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _1080 = sqrt(_889);
    float _1091 = exp2((_1080 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1080 * 3.0));
    float _1097 = (1.0 - _1091) * ((_1080 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1098 = _1091 * _1080;
    float _1126 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1130 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1134 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1463;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1188 = fma(_1134, cbModelParam._m0[26u].z, fma(_1130, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1126));
        float _1192 = fma(_1134, cbModelParam._m0[27u].z, fma(_1130, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1126));
        float _1196 = fma(_1134, cbModelParam._m0[28u].z, fma(_1130, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1126));
        float _1221 = _1126 + _885;
        float _1222 = _1130 + _886;
        float _1223 = _1134 + _887;
        float _1233 = fma(_1223, cbModelParam._m0[26u].z, fma(_1222, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1221)) - _1188;
        float _1234 = fma(_1223, cbModelParam._m0[27u].z, fma(_1222, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1221)) - _1192;
        float _1235 = fma(_1223, cbModelParam._m0[28u].z, fma(_1222, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1221)) - _1196;
        float _1239 = inversesqrt(dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235)));
        float _1252 = ((_1239 * _1233) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1188 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1253 = ((_1239 * _1234) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1192 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1254 = ((_1239 * _1235) / cbModelParam._m0[34u].z) + ((((((_1196 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1252, _1253, _1254), 0.0);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1252, _1253, _1254), 0.0);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1252, _1253, _1254), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1252, _1253, _1254), 0.0);
        float _1291 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1257.x + (-0.5));
        float _1293 = _1291 * (_1257.y + (-0.5));
        float _1294 = _1291 * (_1257.z + (-0.5));
        float _1301 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1264.x + (-0.5));
        float _1303 = _1301 * (_1264.y + (-0.5));
        float _1304 = _1301 * (_1264.z + (-0.5));
        float _1311 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1271.x + (-0.5));
        float _1313 = _1311 * (_1271.y + (-0.5));
        float _1314 = _1311 * (_1271.z + (-0.5));
        float _1321 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1278.x + (-0.5));
        float _1323 = _1321 * (_1278.y + (-0.5));
        float _1324 = _1321 * (_1278.z + (-0.5));
        float _1325 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1326 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1327 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1328 = _1292 * 0.5;
        float _1329 = _1302 * 0.5;
        float _1330 = _1312 * 0.5;
        float _1331 = dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330));
        float _1336 = (_1331 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1331);
        float _1345 = (dot(vec3(_885, _886, _887), vec3(_1336 * _1328, _1336 * _1329, _1336 * _1330)) + 1.0) * 0.5;
        float _4379 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1355 = sqrt(((_1329 * _1329) + (_1328 * _1328)) + (_1330 * _1330)) / (_1325 + 9.9999997473787516355514526367188e-06);
        float _4390 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _4401 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_1357 + 1.0))) + _1362) * _1325;
        float _1372 = _1293 * 0.5;
        float _1373 = _1303 * 0.5;
        float _1374 = _1313 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1388 = (dot(vec3(_885, _886, _887), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _4412 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1397 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1326 + 9.9999997473787516355514526367188e-06);
        float _4423 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _1399 = _1398 * 2.0;
        float _1403 = (1.0 - _1398) / (_1398 + 1.0);
        float _4434 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _1413 = ((((1.0 - _1404) * (_1399 + 2.0)) * exp2(log2(isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_1399 + 1.0))) + _1404) * _1326;
        float _1414 = _1294 * 0.5;
        float _1415 = _1304 * 0.5;
        float _1416 = _1314 * 0.5;
        float _1417 = dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416));
        float _1422 = (_1417 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1417);
        float _1430 = (dot(vec3(_885, _886, _887), vec3(_1422 * _1414, _1422 * _1415, _1422 * _1416)) + 1.0) * 0.5;
        float _4445 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1439 = sqrt(((_1415 * _1415) + (_1414 * _1414)) + (_1416 * _1416)) / (_1327 + 9.9999997473787516355514526367188e-06);
        float _4456 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _1441 = _1440 * 2.0;
        float _1445 = (1.0 - _1440) / (_1440 + 1.0);
        float _4467 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _1455 = ((((1.0 - _1446) * (_1441 + 2.0)) * exp2(log2(isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_1441 + 1.0))) + _1446) * _1327;
        _1463 = _1294;
        _1465 = _1293;
        _1466 = _1292;
        _1467 = _1304;
        _1468 = _1303;
        _1469 = _1302;
        _1470 = _1314;
        _1471 = _1313;
        _1472 = _1312;
        _1473 = _1327;
        _1474 = _1326;
        _1475 = _1325;
        _1476 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
        _1477 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)));
        _1478 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)));
    }
    else
    {
        _1463 = _1464;
        _1465 = _1464;
        _1466 = _1464;
        _1467 = _1464;
        _1468 = _1464;
        _1469 = _1464;
        _1470 = _1464;
        _1471 = _1464;
        _1472 = _1464;
        _1473 = _1464;
        _1474 = _1464;
        _1475 = _1464;
        _1476 = 0.0;
        _1477 = 0.0;
        _1478 = 0.0;
    }
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1504 = fma(_1134, cbModelParam._m0[30u].z, fma(_1130, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1126));
        float _1508 = fma(_1134, cbModelParam._m0[31u].z, fma(_1130, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1126));
        float _1512 = fma(_1134, cbModelParam._m0[32u].z, fma(_1130, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1126));
        float _1535 = _1126 + _885;
        float _1536 = _1130 + _886;
        float _1537 = _1134 + _887;
        float _1547 = fma(_1537, cbModelParam._m0[30u].z, fma(_1536, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1535)) - _1504;
        float _1548 = fma(_1537, cbModelParam._m0[31u].z, fma(_1536, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1535)) - _1508;
        float _1549 = fma(_1537, cbModelParam._m0[32u].z, fma(_1536, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1535)) - _1512;
        float _1553 = inversesqrt(dot(vec3(_1547, _1548, _1549), vec3(_1547, _1548, _1549)));
        float _1566 = ((_1553 * _1547) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1504 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1567 = ((_1553 * _1548) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1508 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1568 = ((_1553 * _1549) / cbModelParam._m0[35u].z) + ((((((_1512 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1570 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1566, _1567, _1568), 0.0);
        vec4 _1577 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1566, _1567, _1568), 0.0);
        vec4 _1584 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1566, _1567, _1568), 0.0);
        vec4 _1591 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1566, _1567, _1568), 0.0);
        float _1603 = exp2((_1570.w + (-0.5)) * 20.0) * 2.0;
        float _1604 = _1603 * (_1570.x + (-0.5));
        float _1605 = _1603 * (_1570.y + (-0.5));
        float _1606 = _1603 * (_1570.z + (-0.5));
        float _1613 = exp2((_1577.w + (-0.5)) * 20.0) * 2.0;
        float _1614 = _1613 * (_1577.x + (-0.5));
        float _1615 = _1613 * (_1577.y + (-0.5));
        float _1616 = _1613 * (_1577.z + (-0.5));
        float _1623 = exp2((_1584.w + (-0.5)) * 20.0) * 2.0;
        float _1624 = _1623 * (_1584.x + (-0.5));
        float _1625 = _1623 * (_1584.y + (-0.5));
        float _1626 = _1623 * (_1584.z + (-0.5));
        float _1633 = exp2((_1591.w + (-0.5)) * 20.0) * 2.0;
        float _1634 = _1633 * (_1591.x + (-0.5));
        float _1635 = _1633 * (_1591.y + (-0.5));
        float _1636 = _1633 * (_1591.z + (-0.5));
        float _1637 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1638 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1639 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1640 = _1604 * 0.5;
        float _1641 = _1614 * 0.5;
        float _1642 = _1624 * 0.5;
        float _1643 = dot(vec3(_1640, _1641, _1642), vec3(_1640, _1641, _1642));
        float _1648 = (_1643 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1643);
        float _1656 = (dot(vec3(_885, _886, _887), vec3(_1648 * _1640, _1648 * _1641, _1648 * _1642)) + 1.0) * 0.5;
        float _4508 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1665 = sqrt(((_1641 * _1641) + (_1640 * _1640)) + (_1642 * _1642)) / (_1637 + 9.9999997473787516355514526367188e-06);
        float _4519 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _1667 = _1666 * 2.0;
        float _1671 = (1.0 - _1666) / (_1666 + 1.0);
        float _4530 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
        float _1681 = ((((1.0 - _1672) * (_1667 + 2.0)) * exp2(log2(isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (_1667 + 1.0))) + _1672) * _1637;
        float _1682 = _1605 * 0.5;
        float _1683 = _1615 * 0.5;
        float _1684 = _1625 * 0.5;
        float _1685 = dot(vec3(_1682, _1683, _1684), vec3(_1682, _1683, _1684));
        float _1690 = (_1685 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1685);
        float _1698 = (dot(vec3(_885, _886, _887), vec3(_1690 * _1682, _1690 * _1683, _1690 * _1684)) + 1.0) * 0.5;
        float _4541 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1707 = sqrt(((_1683 * _1683) + (_1682 * _1682)) + (_1684 * _1684)) / (_1638 + 9.9999997473787516355514526367188e-06);
        float _4552 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1708 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _1709 = _1708 * 2.0;
        float _1713 = (1.0 - _1708) / (_1708 + 1.0);
        float _4563 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1714 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _1723 = ((((1.0 - _1714) * (_1709 + 2.0)) * exp2(log2(isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * (_1709 + 1.0))) + _1714) * _1638;
        float _1724 = _1606 * 0.5;
        float _1725 = _1616 * 0.5;
        float _1726 = _1626 * 0.5;
        float _1727 = dot(vec3(_1724, _1725, _1726), vec3(_1724, _1725, _1726));
        float _1732 = (_1727 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1727);
        float _1740 = (dot(vec3(_885, _886, _887), vec3(_1732 * _1724, _1732 * _1725, _1732 * _1726)) + 1.0) * 0.5;
        float _4574 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1749 = sqrt(((_1725 * _1725) + (_1724 * _1724)) + (_1726 * _1726)) / (_1639 + 9.9999997473787516355514526367188e-06);
        float _4585 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1750 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
        float _1751 = _1750 * 2.0;
        float _1755 = (1.0 - _1750) / (_1750 + 1.0);
        float _4596 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1756 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
        float _1765 = ((((1.0 - _1756) * (_1751 + 2.0)) * exp2(log2(isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (_1751 + 1.0))) + _1756) * _1639;
        _1773 = _1606;
        _1774 = _1605;
        _1775 = _1604;
        _1776 = _1616;
        _1777 = _1615;
        _1778 = _1614;
        _1779 = _1626;
        _1780 = _1625;
        _1781 = _1624;
        _1782 = _1639;
        _1783 = _1638;
        _1784 = _1637;
        _1785 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)));
        _1786 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)));
        _1787 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)));
    }
    else
    {
        _1773 = _1464;
        _1774 = _1464;
        _1775 = _1464;
        _1776 = _1464;
        _1777 = _1464;
        _1778 = _1464;
        _1779 = _1464;
        _1780 = _1464;
        _1781 = _1464;
        _1782 = _1464;
        _1783 = _1464;
        _1784 = _1464;
        _1785 = 0.0;
        _1786 = 0.0;
        _1787 = 0.0;
    }
    float _1797 = (cbModelParam._m0[1u].x * (_1785 - _1476)) + _1476;
    float _1798 = (cbModelParam._m0[1u].x * (_1786 - _1477)) + _1477;
    float _1799 = (cbModelParam._m0[1u].x * (_1787 - _1478)) + _1478;
    float _1820 = fma(_1799, cbSceneParam._m0[89u].z, fma(_1798, cbSceneParam._m0[89u].y, _1797 * cbSceneParam._m0[89u].x));
    float _1823 = fma(_1799, cbSceneParam._m0[90u].z, fma(_1798, cbSceneParam._m0[90u].y, _1797 * cbSceneParam._m0[90u].x));
    float _1826 = fma(_1799, cbSceneParam._m0[91u].z, fma(_1798, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1797));
    float _1841 = _1072 * 0.5;
    float _1842 = _1073 * 0.5;
    float _1843 = _1074 * 0.5;
    float _1844 = dot(vec4(_1841, _1842, _1843, 1.0), vec4(_1775, _1778, _1781, _1784));
    float _1847 = dot(vec4(_1841, _1842, _1843, 1.0), vec4(_1774, _1777, _1780, _1783));
    float _1850 = dot(vec4(_1841, _1842, _1843, 1.0), vec4(_1773, _1776, _1779, _1782));
    float _1884;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1857 = dot(vec4(_1841, _1842, _1843, 1.0), vec4(_1463, _1467, _1470, _1473));
        float _1861 = dot(vec4(_1841, _1842, _1843, 1.0), vec4(_1465, _1468, _1471, _1474));
        float _1865 = dot(vec4(_1841, _1842, _1843, 1.0), vec4(_1466, _1469, _1472, _1475));
        float _1872 = dot(vec4(cbModelParam._m0[39u]), vec4(_1841, _1842, _1843, 1.0));
        _1884 = dot(vec3(isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0)), isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0)), isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1872) ? 0.0 : (isnan(0.0) ? _1872 : max(0.0, _1872))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1884 = 1.0;
    }
    float _1895;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1886 = dot(vec4(cbModelParam._m0[40u]), vec4(_1841, _1842, _1843, 1.0));
        _1895 = dot(vec3(isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0)), isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0)), isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1886) ? 0.0 : (isnan(0.0) ? _1886 : max(0.0, _1886))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1895 = 1.0;
    }
    float _1899 = (_1895 * cbModelParam._m0[1u].x) + (_1884 * (1.0 - cbModelParam._m0[1u].x));
    float _1909 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _889);
    float _1910 = isnan(_1909) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1909 : min(cbModelParam._m0[25u].z, _1909));
    float _1990;
    float _1992;
    float _1994;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1957 = fma(_1134, cbModelParam._m0[13u].z, fma(_1130, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1126)) + cbModelParam._m0[13u].w;
        float _1961 = fma(_1134, cbModelParam._m0[14u].z, fma(_1130, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1126)) + cbModelParam._m0[14u].w;
        float _1965 = fma(_1134, cbModelParam._m0[15u].z, fma(_1130, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1126)) + cbModelParam._m0[15u].w;
        float _1968 = fma(_1074, cbModelParam._m0[13u].z, fma(_1073, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1072));
        float _1971 = fma(_1074, cbModelParam._m0[14u].z, fma(_1073, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1072));
        float _1974 = fma(_1074, cbModelParam._m0[15u].z, fma(_1073, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1072));
        float _2002;
        if (_1968 > 0.0)
        {
            _2002 = abs((1.0 - _1957) / _1968);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1968 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1957 + 1.0) / _1968);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2002 = frontier_phi_17_15_ladder;
        }
        float _2173;
        if (_1971 > 0.0)
        {
            _2173 = abs((1.0 - _1961) / _1971);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1971 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1961 + 1.0) / _1971);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2173 = frontier_phi_26_22_ladder;
        }
        float _2468;
        if (_1974 > 0.0)
        {
            _2468 = abs((1.0 - _1965) / _1974);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1974 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1965 + 1.0) / _1974);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2468 = frontier_phi_38_33_ladder;
        }
        float _2470 = isnan(_2173) ? _2002 : (isnan(_2002) ? _2173 : min(_2002, _2173));
        float _2471 = isnan(_2468) ? _2470 : (isnan(_2470) ? _2468 : min(_2470, _2468));
        float _2475 = (_2471 * _1968) + _1957;
        float _2476 = (_2471 * _1971) + _1961;
        float _2477 = (_2471 * _1974) + _1965;
        float _2478 = _2471 * 9.9999997473787516355514526367188e-05;
        float _2480 = (-1.0) - _2478;
        float _2482 = _2478 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2477 > _2482) || ((_2477 < _2480) || ((_2476 > _2482) || ((_2476 < _2480) || ((_2475 < _2480) || (_2475 > _2482))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2622 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2477, cbModelParam._m0[9u].z, fma(_2476, cbModelParam._m0[9u].y, _2475 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2477, cbModelParam._m0[10u].z, fma(_2476, cbModelParam._m0[10u].y, _2475 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2477, cbModelParam._m0[11u].z, fma(_2476, cbModelParam._m0[11u].y, _2475 * cbModelParam._m0[11u].x))), _1910);
            frontier_phi_16_38_ladder = _2622.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2622.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2622.x * cbModelParam._m0[1u].y;
        }
        _1990 = frontier_phi_16_38_ladder_2;
        _1992 = frontier_phi_16_38_ladder_1;
        _1994 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1978 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1072, _1073, _1074), _1910);
        _1990 = _1978.x * cbModelParam._m0[1u].y;
        _1992 = _1978.y * cbModelParam._m0[1u].y;
        _1994 = _1978.z * cbModelParam._m0[1u].y;
    }
    float _1998 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _889);
    float _1999 = isnan(_1998) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1998 : min(cbModelParam._m0[25u].w, _1998));
    float _2088;
    float _2090;
    float _2092;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2052 = fma(_1134, cbModelParam._m0[21u].z, fma(_1130, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1126)) + cbModelParam._m0[21u].w;
        float _2056 = fma(_1134, cbModelParam._m0[22u].z, fma(_1130, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1126)) + cbModelParam._m0[22u].w;
        float _2060 = fma(_1134, cbModelParam._m0[23u].z, fma(_1130, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1126)) + cbModelParam._m0[23u].w;
        float _2063 = fma(_1074, cbModelParam._m0[21u].z, fma(_1073, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1072));
        float _2066 = fma(_1074, cbModelParam._m0[22u].z, fma(_1073, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1072));
        float _2069 = fma(_1074, cbModelParam._m0[23u].z, fma(_1073, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1072));
        float _2178;
        if (_2063 > 0.0)
        {
            _2178 = abs((1.0 - _2052) / _2063);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2063 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2052 + 1.0) / _2063);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2178 = frontier_phi_28_24_ladder;
        }
        float _2495;
        if (_2066 > 0.0)
        {
            _2495 = abs((1.0 - _2056) / _2066);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2066 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2056 + 1.0) / _2066);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2495 = frontier_phi_40_35_ladder;
        }
        float _2833;
        if (_2069 > 0.0)
        {
            _2833 = abs((1.0 - _2060) / _2069);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2069 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2060 + 1.0) / _2069);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2833 = frontier_phi_50_47_ladder;
        }
        float _2835 = isnan(_2495) ? _2178 : (isnan(_2178) ? _2495 : min(_2178, _2495));
        float _2836 = isnan(_2833) ? _2835 : (isnan(_2835) ? _2833 : min(_2835, _2833));
        float _2840 = (_2836 * _2063) + _2052;
        float _2841 = (_2836 * _2066) + _2056;
        float _2842 = (_2836 * _2069) + _2060;
        float _2843 = _2836 * 9.9999997473787516355514526367188e-05;
        float _2844 = (-1.0) - _2843;
        float _2846 = _2843 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2842 > _2846) || ((_2842 < _2844) || ((_2841 > _2846) || ((_2841 < _2844) || ((_2840 < _2844) || (_2840 > _2846))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2964 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2842, cbModelParam._m0[17u].z, fma(_2841, cbModelParam._m0[17u].y, _2840 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2842, cbModelParam._m0[18u].z, fma(_2841, cbModelParam._m0[18u].y, _2840 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2842, cbModelParam._m0[19u].z, fma(_2841, cbModelParam._m0[19u].y, _2840 * cbModelParam._m0[19u].x))), _1999);
            frontier_phi_25_50_ladder = _2964.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2964.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2964.x * cbModelParam._m0[1u].z;
        }
        _2088 = frontier_phi_25_50_ladder_2;
        _2090 = frontier_phi_25_50_ladder_1;
        _2092 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2072 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1072, _1073, _1074), _1999);
        _2088 = _2072.x * cbModelParam._m0[1u].z;
        _2090 = _2072.y * cbModelParam._m0[1u].z;
        _2092 = _2072.z * cbModelParam._m0[1u].z;
    }
    float _2105 = (((_1097 * _1049) + _1098) * _1064) * ((cbModelParam._m0[1u].w * (_2088 - _1990)) + _1990);
    float _2107 = (((_1097 * _1051) + _1098) * _1064) * ((cbModelParam._m0[1u].w * (_2090 - _1992)) + _1992);
    float _2109 = (((_1097 * _1052) + _1098) * _1064) * ((cbModelParam._m0[1u].w * (_2092 - _1994)) + _1994);
    float _2112 = fma(_2109, cbSceneParam._m0[89u].z, fma(_2107, cbSceneParam._m0[89u].y, _2105 * cbSceneParam._m0[89u].x));
    float _2115 = fma(_2109, cbSceneParam._m0[90u].z, fma(_2107, cbSceneParam._m0[90u].y, _2105 * cbSceneParam._m0[90u].x));
    float _2118 = fma(_2109, cbSceneParam._m0[91u].z, fma(_2107, cbSceneParam._m0[91u].y, _2105 * cbSceneParam._m0[91u].x));
    float _2152 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2156 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2160 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2164 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2165 = _2152 / _2164;
    float _2166 = _2156 / _2164;
    float _2167 = _2160 / _2164;
    float _2314;
    float _2315;
    float _2316;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2194 = ((uint(_2167 > cbSceneParam._m0[59u].y) + uint(_2167 > cbSceneParam._m0[59u].x)) + uint(_2167 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2195 = _2194 + 43u;
        uint _2203 = _2194 + 44u;
        uint _2211 = _2194 + 45u;
        uint _2219 = _2194 + 46u;
        float _2230 = fma(_2164, cbSceneParam._m0[_2195].w, fma(_2160, cbSceneParam._m0[_2195].z, fma(_2156, cbSceneParam._m0[_2195].y, _2152 * cbSceneParam._m0[_2195].x)));
        float _2234 = fma(_2164, cbSceneParam._m0[_2203].w, fma(_2160, cbSceneParam._m0[_2203].z, fma(_2156, cbSceneParam._m0[_2203].y, _2152 * cbSceneParam._m0[_2203].x)));
        float _2242 = fma(_2164, cbSceneParam._m0[_2219].w, fma(_2160, cbSceneParam._m0[_2219].z, fma(_2156, cbSceneParam._m0[_2219].y, _2152 * cbSceneParam._m0[_2219].x)));
        float _2247 = cbSceneParam._m0[33u].z * _2242;
        float _2249 = cbSceneParam._m0[33u].w * _2242;
        float _2252 = fma(_2164, cbSceneParam._m0[_2211].w, fma(_2160, cbSceneParam._m0[_2211].z, fma(_2156, cbSceneParam._m0[_2211].y, _2152 * cbSceneParam._m0[_2211].x))) / _2242;
        float _2300 = (cbSceneParam._m0[33u].x - sqrt(((_2166 * _2166) + (_2165 * _2165)) + (_2167 * _2167))) * cbSceneParam._m0[33u].y;
        float _4722 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2307 = (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2247 + _2230) / _2242, (_2249 + _2234) / _2242), _2252), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2249 + _2230) / _2242, (_2234 - _2247) / _2242), _2252), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2230 - _2247) / _2242, (_2234 - _2249) / _2242), _2252), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2230 - _2249) / _2242, (_2247 + _2234) / _2242), _2252), 0.0)).x), vec4(0.25)));
        _2314 = 1.0 - (_2307 * cbSceneParam._m0[34u].x);
        _2315 = 1.0 - (_2307 * cbSceneParam._m0[34u].y);
        _2316 = 1.0 - (_2307 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2314 = 1.0;
        _2315 = 1.0;
        _2316 = 1.0;
    }
    float _2380;
    float _2382;
    float _2384;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2368 = fma(_2164, cbSceneParam._m0[63u].w, fma(_2160, cbSceneParam._m0[63u].z, fma(_2156, cbSceneParam._m0[63u].y, _2152 * cbSceneParam._m0[63u].x)));
        float _2369 = fma(_2164, cbSceneParam._m0[60u].w, fma(_2160, cbSceneParam._m0[60u].z, fma(_2156, cbSceneParam._m0[60u].y, _2152 * cbSceneParam._m0[60u].x))) / _2368;
        float _2370 = fma(_2164, cbSceneParam._m0[61u].w, fma(_2160, cbSceneParam._m0[61u].z, fma(_2156, cbSceneParam._m0[61u].y, _2152 * cbSceneParam._m0[61u].x))) / _2368;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2369 >= cbSceneParam._m0[64u].x) && (_2370 >= cbSceneParam._m0[64u].y)) && (_2369 <= cbSceneParam._m0[64u].z)) && (_2370 <= cbSceneParam._m0[64u].w))
        {
            float _2508 = fma(_2164, cbSceneParam._m0[62u].w, fma(_2160, cbSceneParam._m0[62u].z, fma(_2156, cbSceneParam._m0[62u].y, _2152 * cbSceneParam._m0[62u].x))) / _2368;
            float _2512 = isnan(cbSceneParam._m0[41u].w) ? _2508 : (isnan(_2508) ? cbSceneParam._m0[41u].w : max(_2508, cbSceneParam._m0[41u].w));
            float _2555 = (cbSceneParam._m0[33u].x - sqrt(((_2166 * _2166) + (_2165 * _2165)) + (_2167 * _2167))) * cbSceneParam._m0[33u].y;
            float _4738 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
            float _2562 = (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2369, cbSceneParam._m0[33u].w + _2370), _2512), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2369, _2370 - cbSceneParam._m0[33u].z), _2512), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2369 - cbSceneParam._m0[33u].z, _2370 - cbSceneParam._m0[33u].w), _2512), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2369 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2370), _2512), 0.0)).x), vec4(0.25)));
            float _2566 = 1.0 - (_2562 * cbSceneParam._m0[34u].x);
            float _2567 = 1.0 - (_2562 * cbSceneParam._m0[34u].y);
            float _2568 = 1.0 - (_2562 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2568) ? _2316 : (isnan(_2316) ? _2568 : min(_2316, _2568));
            frontier_phi_37_36_ladder_1 = isnan(_2567) ? _2315 : (isnan(_2315) ? _2567 : min(_2315, _2567));
            frontier_phi_37_36_ladder_2 = isnan(_2566) ? _2314 : (isnan(_2314) ? _2566 : min(_2314, _2566));
        }
        else
        {
            frontier_phi_37_36_ladder = _2316;
            frontier_phi_37_36_ladder_1 = _2315;
            frontier_phi_37_36_ladder_2 = _2314;
        }
        _2380 = frontier_phi_37_36_ladder_2;
        _2382 = frontier_phi_37_36_ladder_1;
        _2384 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2380 = _2314;
        _2382 = _2315;
        _2384 = _2316;
    }
    uvec4 _2389 = floatBitsToUint(cbInstanceData._m0[_1024 + 5u]);
    uint _2391 = _2389.x * 14u;
    uint _2392 = _2391 + 13u;
    float _2399 = _1064 + (-1.0);
    float _2404 = (cbLight._m0[_2392].x * _2399) + 1.0;
    float _2405 = (cbLight._m0[_2392].y * _2399) + 1.0;
    float _2406 = (cbLight._m0[_2392].z * _2399) + 1.0;
    float _2407 = (cbLight._m0[_2392].w * _2399) + 1.0;
    uint _2408 = _2391 + 5u;
    float _2414 = isnan(1.0) ? _2405 : (isnan(_2405) ? 1.0 : min(_2405, 1.0));
    uint _2418 = _2391 + 4u;
    float _2427 = isnan(1.0) ? _2404 : (isnan(_2404) ? 1.0 : min(_2404, 1.0));
    uint _2431 = _2391 | 1u;
    float _2442 = dot(vec3(cbLight._m0[_2391].xyz), vec3(_885, _886, _887));
    float _2445 = dot(vec3(cbLight._m0[_2431].xyz), vec3(_885, _886, _887));
    float _4774 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _4785 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _2450 = (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * 0.3183098733425140380859375;
    float _2452 = (isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0))) * 0.3183098733425140380859375;
    float _2459 = ((cbLight._m0[_2408].x * _2414) * _2452) + (((cbLight._m0[_2418].x * _2380) * _2427) * _2450);
    float _2460 = ((_2414 * cbLight._m0[_2408].y) * _2452) + (((cbLight._m0[_2418].y * _2382) * _2427) * _2450);
    float _2461 = ((_2414 * cbLight._m0[_2408].z) * _2452) + (((cbLight._m0[_2418].z * _2384) * _2427) * _2450);
    uvec4 _2465 = floatBitsToUint(cbLight._m0[_2391 + 12u]);
    bool _2467 = _2465.x == 0u;
    float _2569;
    float _2571;
    float _2573;
    if (_2467)
    {
        _2569 = _2459;
        _2571 = _2460;
        _2573 = _2461;
    }
    else
    {
        uint _2577 = _2391 + 6u;
        float _2593 = (dot(vec3(cbLight._m0[_2391 + 2u].xyz), vec3(_885, _886, _887)) * 0.5) + 0.5;
        float _2594 = _2593 * _2593;
        float _4796 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2595 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
        float _2596 = isnan(1.0) ? _2406 : (isnan(_2406) ? 1.0 : min(_2406, 1.0));
        _2569 = (((cbLight._m0[_2577].x * 0.3183098733425140380859375) * _2595) * _2596) + _2459;
        _2571 = (((cbLight._m0[_2577].y * 0.3183098733425140380859375) * _2595) * _2596) + _2460;
        _2573 = (((cbLight._m0[_2577].z * 0.3183098733425140380859375) * _2595) * _2596) + _2461;
    }
    bool _2576 = _2465.y == 0u;
    float _2631;
    float _2633;
    float _2635;
    if (_2576)
    {
        _2631 = _2569;
        _2633 = _2571;
        _2635 = _2573;
    }
    else
    {
        uint _2804 = _2391 + 7u;
        float _2820 = (dot(vec3(cbLight._m0[_2391 + 3u].xyz), vec3(_885, _886, _887)) * 0.5) + 0.5;
        float _2821 = _2820 * _2820;
        float _4812 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
        float _2822 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
        float _2823 = isnan(1.0) ? _2407 : (isnan(_2407) ? 1.0 : min(_2407, 1.0));
        _2631 = (((cbLight._m0[_2804].x * 0.3183098733425140380859375) * _2822) * _2823) + _2569;
        _2633 = (((cbLight._m0[_2804].y * 0.3183098733425140380859375) * _2822) * _2823) + _2571;
        _2635 = (((cbLight._m0[_2804].z * 0.3183098733425140380859375) * _2822) * _2823) + _2573;
    }
    uint _2638 = _2391 + 8u;
    float _2651 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2391].w)) * _889) * 0.949999988079071044921875);
    float _2652 = _2651 * _2651;
    float _2653 = cbLight._m0[_2391].x + _966;
    float _2654 = cbLight._m0[_2391].y + _967;
    float _2655 = cbLight._m0[_2391].z + _968;
    float _2659 = inversesqrt(dot(vec3(_2653, _2654, _2655), vec3(_2653, _2654, _2655)));
    float _2660 = _2659 * _2653;
    float _2661 = _2659 * _2654;
    float _2662 = _2659 * _2655;
    float _2663 = dot(vec3(_885, _886, _887), vec3(cbLight._m0[_2391].xyz));
    float _4828 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
    float _2666 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
    float _4839 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    float _2667 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
    float _2668 = dot(vec3(_885, _886, _887), vec3(_2660, _2661, _2662));
    float _4850 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
    float _2671 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
    float _2672 = dot(vec3(cbLight._m0[_2391].xyz), vec3(_2660, _2661, _2662));
    float _4861 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
    float _2676 = _2652 * _2652;
    float _2680 = ((_2671 * _2671) * (_2676 + (-1.0))) + 1.0;
    float _2688 = exp2(log2(1.0 - (isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0)))) * 5.0);
    float _2689 = 0.959999978542327880859375 - _1046;
    float _2691 = 0.959999978542327880859375 - _1047;
    float _2692 = 0.959999978542327880859375 - _1048;
    float _2699 = 1.0 - _2652;
    float _2710 = (0.5 / (((_2667 * ((_2666 * _2699) + _2652)) + 9.9999999392252902907785028219223e-09) + (((_2667 * _2699) + _2652) * _2666))) * _2666;
    float _4872 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
    float _2712 = (isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0))) * (_2676 / ((_2680 * _2680) * 3.141590118408203125));
    uint _2726 = _2391 + 9u;
    float _2737 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2431].w)) * _889) * 0.949999988079071044921875);
    float _2738 = _2737 * _2737;
    float _2739 = cbLight._m0[_2431].x + _966;
    float _2740 = cbLight._m0[_2431].y + _967;
    float _2741 = cbLight._m0[_2431].z + _968;
    float _2745 = inversesqrt(dot(vec3(_2739, _2740, _2741), vec3(_2739, _2740, _2741)));
    float _2746 = _2745 * _2739;
    float _2747 = _2745 * _2740;
    float _2748 = _2745 * _2741;
    float _2749 = dot(vec3(_885, _886, _887), vec3(cbLight._m0[_2431].xyz));
    float _4883 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
    float _2752 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
    float _2753 = dot(vec3(_885, _886, _887), vec3(_2746, _2747, _2748));
    float _4894 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
    float _2756 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
    float _2757 = dot(vec3(cbLight._m0[_2431].xyz), vec3(_2746, _2747, _2748));
    float _4905 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
    float _2761 = _2738 * _2738;
    float _2765 = ((_2756 * _2756) * (_2761 + (-1.0))) + 1.0;
    float _2772 = exp2(log2(1.0 - (isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0)))) * 5.0);
    float _2779 = 1.0 - _2738;
    float _2789 = (0.5 / (((_2667 * ((_2752 * _2779) + _2738)) + 9.9999999392252902907785028219223e-09) + (((_2667 * _2779) + _2738) * _2752))) * _2752;
    float _4916 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
    float _2791 = (isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0))) * (_2761 / ((_2765 * _2765) * 3.141590118408203125));
    float _2801 = (((((_2772 * _2689) + _1049) * cbLight._m0[_2726].x) * _2791) * _2414) + ((((cbLight._m0[_2638].x * _2380) * ((_2688 * _2689) + _1049)) * _2712) * _2427);
    float _2802 = (((((_2772 * _2691) + _1051) * cbLight._m0[_2726].y) * _2791) * _2414) + ((((cbLight._m0[_2638].y * _2382) * ((_2688 * _2691) + _1051)) * _2712) * _2427);
    float _2803 = (((((_2772 * _2692) + _1052) * cbLight._m0[_2726].z) * _2791) * _2414) + ((((cbLight._m0[_2638].z * _2384) * ((_2688 * _2692) + _1052)) * _2712) * _2427);
    float _2859;
    float _2861;
    float _2863;
    if (_2467)
    {
        _2859 = _2801;
        _2861 = _2802;
        _2863 = _2803;
    }
    else
    {
        uint _2865 = _2391 + 2u;
        uint _2869 = _2391 + 10u;
        float _2883 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2865].w)) * _889) * 0.949999988079071044921875);
        float _2884 = _2883 * _2883;
        float _2885 = cbLight._m0[_2865].x + _966;
        float _2886 = cbLight._m0[_2865].y + _967;
        float _2887 = cbLight._m0[_2865].z + _968;
        float _2891 = inversesqrt(dot(vec3(_2885, _2886, _2887), vec3(_2885, _2886, _2887)));
        float _2892 = _2891 * _2885;
        float _2893 = _2891 * _2886;
        float _2894 = _2891 * _2887;
        float _2895 = dot(vec3(_885, _886, _887), vec3(cbLight._m0[_2865].xyz));
        float _4927 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
        float _2898 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
        float _2899 = dot(vec3(_885, _886, _887), vec3(_2892, _2893, _2894));
        float _4938 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
        float _2902 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
        float _2903 = dot(vec3(cbLight._m0[_2865].xyz), vec3(_2892, _2893, _2894));
        float _4949 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
        float _2907 = _2884 * _2884;
        float _2911 = ((_2902 * _2902) * (_2907 + (-1.0))) + 1.0;
        float _2918 = exp2(log2(1.0 - (isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0)))) * 5.0);
        float _2925 = 1.0 - _2884;
        float _2935 = (0.5 / (((_2667 * ((_2898 * _2925) + _2884)) + 9.9999999392252902907785028219223e-09) + (((_2667 * _2925) + _2884) * _2898))) * _2898;
        float _4960 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
        float _2937 = (isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0))) * (_2907 / ((_2911 * _2911) * 3.141590118408203125));
        float _2938 = isnan(1.0) ? _2406 : (isnan(_2406) ? 1.0 : min(_2406, 1.0));
        _2859 = (((((_2918 * _2689) + _1049) * cbLight._m0[_2869].x) * _2937) * _2938) + _2801;
        _2861 = (((((_2918 * _2691) + _1051) * cbLight._m0[_2869].y) * _2937) * _2938) + _2802;
        _2863 = (((((_2918 * _2692) + _1052) * cbLight._m0[_2869].z) * _2937) * _2938) + _2803;
    }
    float _2969;
    float _2971;
    float _2973;
    if (_2576)
    {
        _2969 = _2859;
        _2971 = _2861;
        _2973 = _2863;
    }
    else
    {
        uint _2980 = _2391 + 3u;
        uint _2984 = _2391 + 11u;
        float _2998 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2980].w)) * _889) * 0.949999988079071044921875);
        float _2999 = _2998 * _2998;
        float _3000 = cbLight._m0[_2980].x + _966;
        float _3001 = cbLight._m0[_2980].y + _967;
        float _3002 = cbLight._m0[_2980].z + _968;
        float _3006 = inversesqrt(dot(vec3(_3000, _3001, _3002), vec3(_3000, _3001, _3002)));
        float _3007 = _3006 * _3000;
        float _3008 = _3006 * _3001;
        float _3009 = _3006 * _3002;
        float _3010 = dot(vec3(_885, _886, _887), vec3(cbLight._m0[_2980].xyz));
        float _4976 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
        float _3013 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
        float _3014 = dot(vec3(_885, _886, _887), vec3(_3007, _3008, _3009));
        float _4987 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
        float _3017 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
        float _3018 = dot(vec3(cbLight._m0[_2980].xyz), vec3(_3007, _3008, _3009));
        float _4998 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
        float _3022 = _2999 * _2999;
        float _3026 = ((_3017 * _3017) * (_3022 + (-1.0))) + 1.0;
        float _3033 = exp2(log2(1.0 - (isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0)))) * 5.0);
        float _3040 = 1.0 - _2999;
        float _3050 = (0.5 / (((_2667 * ((_3013 * _3040) + _2999)) + 9.9999999392252902907785028219223e-09) + (((_2667 * _3040) + _2999) * _3013))) * _3013;
        float _5009 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
        float _3052 = (isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0))) * (_3022 / ((_3026 * _3026) * 3.141590118408203125));
        float _3053 = isnan(1.0) ? _2407 : (isnan(_2407) ? 1.0 : min(_2407, 1.0));
        _2969 = (((((_3033 * _2689) + _1049) * cbLight._m0[_2984].x) * _3052) * _3053) + _2859;
        _2971 = (((((_3033 * _2691) + _1051) * cbLight._m0[_2984].y) * _3052) * _3053) + _2861;
        _2973 = (((((_3033 * _2692) + _1052) * cbLight._m0[_2984].z) * _3052) * _3053) + _2863;
    }
    float _3119;
    float _3121;
    float _3123;
    float _3125;
    float _3127;
    float _3129;
    if (_2389.y == 0u)
    {
        uvec4 _3074 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3075 = _3074.x;
        uint _3086 = uint((float(_3074.y) * floor(float(uint(cbSceneParam._m0[85u].y * _987) / _3075))) + floor(float(uint(cbSceneParam._m0[85u].x * _986) / _3075)));
        float _3096 = (log2(_2167 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3097 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
        uint _3100 = uint(isnan(14.0) ? _3097 : (isnan(_3097) ? 14.0 : min(_3097, 14.0)));
        uvec4 _3105 = texelFetch(g_lightClusterGridBuffer, int(((_3100 << 2u) + (_3086 << 6u)) >> 2u));
        uint _3106 = _3105.x;
        uint _3107 = _3074.z;
        float _3188;
        float _3190;
        float _3192;
        float _3194;
        float _3196;
        float _3198;
        if (((((1u << ((_3107 >> 4u) & 15u)) + 4294967295u) & _3106) == 0u) || ((_3107 & 240u) == 0u))
        {
            _3188 = 0.0;
            _3190 = 0.0;
            _3192 = 0.0;
            _3194 = 0.0;
            _3196 = 0.0;
            _3198 = 0.0;
        }
        else
        {
            float _3189;
            float _3191;
            float _3193;
            float _3195;
            float _3197;
            float _3199;
            float _3341 = 0.0;
            float _3342 = 0.0;
            float _3343 = 0.0;
            float _3344 = 0.0;
            float _3345 = 0.0;
            float _3346 = 0.0;
            uint _3347 = 0u;
            uint _3356;
            bool _3357;
            for (;;)
            {
                _3356 = texelFetch(g_lightClassification, int((((_3100 << 5u) + (_3086 << 9u)) + (_3347 << 2u)) >> 2u)).x;
                _3357 = _3356 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3357)
                {
                    frontier_phi_71_pred = _3346;
                    frontier_phi_71_pred_1 = _3345;
                    frontier_phi_71_pred_2 = _3344;
                    frontier_phi_71_pred_3 = _3343;
                    frontier_phi_71_pred_4 = _3342;
                    frontier_phi_71_pred_5 = _3341;
                }
                else
                {
                    float _3486;
                    float _3487;
                    float _3488;
                    float _3489;
                    float _3490;
                    float _3491;
                    uint _3492;
                    _3486 = _3341;
                    _3487 = _3342;
                    _3488 = _3343;
                    _3489 = _3344;
                    _3490 = _3345;
                    _3491 = _3346;
                    _3492 = _3356;
                    float _3413;
                    float _3414;
                    float _3415;
                    float _3416;
                    float _3417;
                    float _3418;
                    for (;;)
                    {
                        uint _3496 = uint(findLSB(_3492)) + (_3347 << 5u);
                        uint _3493 = (_3492 + 4294967295u) & _3492;
                        uint _3498 = _3496 * 48u;
                        vec4 _3512 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3498)).x, texelFetch(g_PointLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3498 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3498 + 3u)).x));
                        uint _3518 = (_3496 * 48u) + 4u;
                        vec4 _3531 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3518)).x, texelFetch(g_PointLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3518 + 3u)).x));
                        uint _3537 = (_3496 * 48u) + 8u;
                        vec3 _3548 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3537)).x, texelFetch(g_PointLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3537 + 2u)).x));
                        float _3552 = _3512.x - _2165;
                        float _3553 = _3512.y - _2166;
                        float _3554 = _3512.z - _2167;
                        float _3555 = dot(vec3(_3552, _3553, _3554), vec3(_3552, _3553, _3554));
                        float _3558 = inversesqrt(_3555);
                        float _3559 = _3558 * _3552;
                        float _3560 = _3558 * _3553;
                        float _3561 = _3558 * _3554;
                        float _3562 = dot(vec3(_1005, _1008, _1011), vec3(_3559, _3560, _3561));
                        float _3567 = 1.0 - (_3555 * _3512.w);
                        float _5035 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                        float _3568 = isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0));
                        float _3569 = sqrt(_3555) * _3531.w;
                        float _3572 = 1.39999997615814208984375 / (_3569 + 1.39999997615814208984375);
                        float _3573 = _3572 * _3572;
                        float _3576 = ((1.0 - _3573) * _3562) + _3573;
                        float _3579 = _3569 * _3569;
                        float _3583 = ((isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0))) * _3568) / ((_3579 * 0.699999988079071044921875) + 1.0);
                        float _3587 = (-0.0) - _2165;
                        float _3588 = (-0.0) - _2166;
                        float _3589 = (-0.0) - _2167;
                        float _3593 = inversesqrt(dot(vec3(_3587, _3588, _3589), vec3(_3587, _3588, _3589)));
                        float _3594 = _3593 * _3587;
                        float _3595 = _3593 * _3588;
                        float _3596 = _3593 * _3589;
                        float _3603 = exp2(log2(1.0 / ((_3579 * 3.5) + 5.0)) * 0.25);
                        float _3604 = 1.0 - _1080;
                        float _3611 = sqrt(1.0 - ((1.0 - (_3604 * _3604)) * (1.0 - (_3603 * _3603))));
                        float _3612 = _3611 * _3611;
                        float _3613 = _3612 * _3612;
                        float _3614 = _3594 + _3559;
                        float _3615 = _3595 + _3560;
                        float _3616 = _3596 + _3561;
                        float _3620 = inversesqrt(dot(vec3(_3614, _3615, _3616), vec3(_3614, _3615, _3616)));
                        float _3624 = dot(vec3(_1005, _1008, _1011), vec3(_3594, _3595, _3596));
                        float _5051 = isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0));
                        float _3627 = isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0));
                        float _3628 = dot(vec3(_1005, _1008, _1011), vec3(_3620 * _3614, _3620 * _3615, _3620 * _3616));
                        float _5062 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                        float _3631 = isnan(1.0) ? _5062 : (isnan(_5062) ? 1.0 : min(_5062, 1.0));
                        float _3635 = ((_3631 * _3631) * (_3613 + (-1.0))) + 1.0;
                        float _3636 = _3572 * _3612;
                        float _3637 = _3636 * _3636;
                        float _3640 = ((1.0 - _3637) * _3562) + _3637;
                        float _5073 = isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0));
                        float _3641 = isnan(1.0) ? _5073 : (isnan(_5073) ? 1.0 : min(_5073, 1.0));
                        float _3642 = 1.0 - _3612;
                        float _3652 = (0.5 / (((_3641 * ((_3627 * _3642) + _3612)) + 9.9999999392252902907785028219223e-09) + (((_3641 * _3642) + _3612) * _3627))) * _3641;
                        float _5084 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                        float _3663 = (((_3613 * 3.1415927410125732421875) * (isnan(1.0) ? _5084 : (isnan(_5084) ? 1.0 : min(_5084, 1.0)))) / ((_3635 * _3635) * ((_3579 * 2.1991131305694580078125) + 3.141590118408203125))) * _3568;
                        _3416 = (_3583 * _3531.x) + _3489;
                        _3417 = (_3583 * _3531.y) + _3490;
                        _3418 = (_3583 * _3531.z) + _3491;
                        _3413 = (_3663 * _3548.x) + _3486;
                        _3414 = (_3663 * _3548.y) + _3487;
                        _3415 = (_3663 * _3548.z) + _3488;
                        if (_3493 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3486 = _3413;
                            _3487 = _3414;
                            _3488 = _3415;
                            _3489 = _3416;
                            _3490 = _3417;
                            _3491 = _3418;
                            _3492 = _3493;
                        }
                    }
                    frontier_phi_71_pred = _3418;
                    frontier_phi_71_pred_1 = _3417;
                    frontier_phi_71_pred_2 = _3416;
                    frontier_phi_71_pred_3 = _3415;
                    frontier_phi_71_pred_4 = _3414;
                    frontier_phi_71_pred_5 = _3413;
                }
                _3199 = frontier_phi_71_pred;
                _3197 = frontier_phi_71_pred_1;
                _3195 = frontier_phi_71_pred_2;
                _3193 = frontier_phi_71_pred_3;
                _3191 = frontier_phi_71_pred_4;
                _3189 = frontier_phi_71_pred_5;
                uint _3348 = _3347 + 1u;
                if (_3348 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3341 = _3189;
                    _3342 = _3191;
                    _3343 = _3193;
                    _3344 = _3195;
                    _3345 = _3197;
                    _3346 = _3199;
                    _3347 = _3348;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3188 = _3189;
            _3190 = _3191;
            _3192 = _3193;
            _3194 = _3195;
            _3196 = _3197;
            _3198 = _3199;
        }
        uvec4 _3202 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3203 = _3202.z;
        uint _3205 = (_3203 >> 8u) & 15u;
        float _3309;
        float _3311;
        float _3313;
        float _3315;
        float _3317;
        float _3319;
        if (((4294967295u << _3205) & _3106) == 0u)
        {
            _3309 = _3188;
            _3311 = _3190;
            _3313 = _3192;
            _3315 = _3194;
            _3317 = _3196;
            _3319 = _3198;
        }
        else
        {
            float _3334 = inversesqrt(dot(vec3(_2165, _2166, _2167), vec3(_2165, _2166, _2167)));
            float _3335 = _3334 * _2165;
            float _3336 = _3334 * _2166;
            float _3337 = _3334 * _2167;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3205 < ((_3203 >> 12u) & 15u))
            {
                float _3310;
                float _3312;
                float _3314;
                float _3316;
                float _3318;
                float _3320;
                float _3469 = _3188;
                float _3470 = _3190;
                float _3471 = _3192;
                float _3472 = _3194;
                float _3473 = _3196;
                float _3474 = _3198;
                uint _3475 = _3205;
                uint _3484;
                bool _3485;
                for (;;)
                {
                    _3484 = texelFetch(g_lightClassification, int((((_3100 << 5u) + (_3086 << 9u)) + (_3475 << 2u)) >> 2u)).x;
                    _3485 = _3484 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3485)
                    {
                        frontier_phi_82_pred = _3474;
                        frontier_phi_82_pred_1 = _3473;
                        frontier_phi_82_pred_2 = _3472;
                        frontier_phi_82_pred_3 = _3471;
                        frontier_phi_82_pred_4 = _3470;
                        frontier_phi_82_pred_5 = _3469;
                    }
                    else
                    {
                        float _3677;
                        float _3678;
                        float _3679;
                        float _3680;
                        float _3681;
                        float _3682;
                        float _3970;
                        float _3971;
                        float _3972;
                        float _3973;
                        float _3974;
                        float _3975;
                        float _3690 = _3469;
                        float _3691 = _3470;
                        float _3692 = _3471;
                        float _3693 = _3472;
                        float _3694 = _3473;
                        float _3695 = _3474;
                        uint _3696 = _3484;
                        uint _3697;
                        vec4 _3722;
                        float _3723;
                        vec4 _3738;
                        vec3 _3750;
                        vec4 _3765;
                        vec4 _3780;
                        float _3826;
                        bool _3827;
                        for (;;)
                        {
                            uint _3707 = ((_3475 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3696));
                            _3697 = (_3696 + 4294967295u) & _3696;
                            uint _3709 = _3707 * 40u;
                            _3722 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3709)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 3u)).x));
                            _3723 = _3722.w;
                            uint _3725 = (_3707 * 40u) + 4u;
                            _3738 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3725)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 3u)).x));
                            uint _3740 = (_3707 * 40u) + 8u;
                            _3750 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3740)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3740 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3740 + 2u)).x));
                            uint _3752 = (_3707 * 40u) + 16u;
                            _3765 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3752)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 3u)).x));
                            uint _3767 = (_3707 * 40u) + 20u;
                            _3780 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3767)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3767 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3767 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3767 + 3u)).x));
                            uint _3782 = (_3707 * 40u) + 24u;
                            vec4 _3795 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3782)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3782 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3782 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3782 + 3u)).x));
                            uint _3801 = (_3707 * 40u) + 28u;
                            vec4 _3814 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3801)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3801 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3801 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3801 + 3u)).x));
                            _3826 = fma(_2167, _3814.z, fma(_2166, _3814.y, _3814.x * _2165)) + _3814.w;
                            _3827 = !((fma(_2167, _3795.z, fma(_2166, _3795.y, _3795.x * _2165)) + _3795.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3827)
                            {
                                float _3854 = _3722.x - _2165;
                                float _3855 = _3722.y - _2166;
                                float _3856 = _3722.z - _2167;
                                float _3857 = dot(vec3(_3854, _3855, _3856), vec3(_3854, _3855, _3856));
                                float _3860 = inversesqrt(_3857);
                                float _3861 = _3860 * _3854;
                                float _3862 = _3860 * _3855;
                                float _3863 = _3860 * _3856;
                                float _3867 = 1.0 - (_3857 / (_3723 * _3723));
                                float _5095 = isnan(0.0) ? _3867 : (isnan(_3867) ? 0.0 : max(_3867, 0.0));
                                float _3868 = isnan(1.0) ? _5095 : (isnan(_5095) ? 1.0 : min(_5095, 1.0));
                                float _3872 = sqrt(_3857) * _3738.w;
                                float _3874 = 1.39999997615814208984375 / (_3872 + 1.39999997615814208984375);
                                float _3875 = _3874 * _3874;
                                float _3878 = ((1.0 - _3875) * dot(vec3(_3861, _3862, _3863), vec3(_1005, _1008, _1011))) + _3875;
                                float _3881 = _3872 * _3872;
                                float _3885 = (fma(_2167, _3765.z, fma(_2166, _3765.y, _3765.x * _2165)) + _3765.w) / _3826;
                                float _3886 = (fma(_2167, _3780.z, fma(_2166, _3780.y, _3780.x * _2165)) + _3780.w) / _3826;
                                float _3890 = 1.0 - dot(vec2(_3885, _3886), vec2(_3885, _3886));
                                float _5111 = isnan(0.0) ? _3890 : (isnan(_3890) ? 0.0 : max(_3890, 0.0));
                                float _3891 = isnan(1.0) ? _5111 : (isnan(_5111) ? 1.0 : min(_5111, 1.0));
                                float _3892 = _3891 * (((isnan(0.0) ? _3878 : (isnan(_3878) ? 0.0 : max(_3878, 0.0))) * _3868) / ((_3881 * 0.699999988079071044921875) + 1.0));
                                float _3904 = exp2(log2(1.0 / ((_3881 * 3.5) + 5.0)) * 0.25);
                                float _3905 = 1.0 - _1080;
                                float _3912 = sqrt(1.0 - ((1.0 - (_3905 * _3905)) * (1.0 - (_3904 * _3904))));
                                float _3913 = _3912 * _3912;
                                float _3914 = _3913 * _3913;
                                float _3915 = _3861 - _3335;
                                float _3916 = _3862 - _3336;
                                float _3917 = _3863 - _3337;
                                float _3921 = inversesqrt(dot(vec3(_3915, _3916, _3917), vec3(_3915, _3916, _3917)));
                                float _3925 = dot(vec3(_1005, _1008, _1011), vec3((-0.0) - _3335, (-0.0) - _3336, (-0.0) - _3337));
                                float _5122 = isnan(0.0) ? _3925 : (isnan(_3925) ? 0.0 : max(_3925, 0.0));
                                float _3928 = isnan(1.0) ? _5122 : (isnan(_5122) ? 1.0 : min(_5122, 1.0));
                                float _3929 = dot(vec3(_1005, _1008, _1011), vec3(_3921 * _3915, _3921 * _3916, _3921 * _3917));
                                float _5133 = isnan(0.0) ? _3929 : (isnan(_3929) ? 0.0 : max(_3929, 0.0));
                                float _3932 = isnan(1.0) ? _5133 : (isnan(_5133) ? 1.0 : min(_5133, 1.0));
                                float _3936 = ((_3932 * _3932) * (_3914 + (-1.0))) + 1.0;
                                float _3937 = _3874 * _3913;
                                float _3938 = _3937 * _3937;
                                float _3944 = ((1.0 - _3938) * dot(vec3(_1005, _1008, _1011), vec3(_3861, _3862, _3863))) + _3938;
                                float _5144 = isnan(0.0) ? _3944 : (isnan(_3944) ? 0.0 : max(_3944, 0.0));
                                float _3945 = isnan(1.0) ? _5144 : (isnan(_5144) ? 1.0 : min(_5144, 1.0));
                                float _3946 = 1.0 - _3913;
                                float _3956 = (0.5 / (((_3945 * ((_3928 * _3946) + _3913)) + 9.9999999392252902907785028219223e-09) + (((_3945 * _3946) + _3913) * _3928))) * _3945;
                                float _5155 = isnan(0.0) ? _3956 : (isnan(_3956) ? 0.0 : max(_3956, 0.0));
                                float _3966 = (_3891 * _3868) * (((_3914 * 3.1415927410125732421875) * (isnan(1.0) ? _5155 : (isnan(_5155) ? 1.0 : min(_5155, 1.0)))) / ((_3936 * _3936) * ((_3881 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3892 * _3738.z;
                                frontier_phi_88_pred_1 = _3892 * _3738.y;
                                frontier_phi_88_pred_2 = _3892 * _3738.x;
                                frontier_phi_88_pred_3 = _3966 * _3750.z;
                                frontier_phi_88_pred_4 = _3966 * _3750.y;
                                frontier_phi_88_pred_5 = _3966 * _3750.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3975 = frontier_phi_88_pred;
                            _3974 = frontier_phi_88_pred_1;
                            _3973 = frontier_phi_88_pred_2;
                            _3972 = frontier_phi_88_pred_3;
                            _3971 = frontier_phi_88_pred_4;
                            _3970 = frontier_phi_88_pred_5;
                            _3680 = _3973 + _3693;
                            _3681 = _3974 + _3694;
                            _3682 = _3975 + _3695;
                            _3677 = _3970 + _3690;
                            _3678 = _3971 + _3691;
                            _3679 = _3972 + _3692;
                            if (_3697 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3690 = _3677;
                                _3691 = _3678;
                                _3692 = _3679;
                                _3693 = _3680;
                                _3694 = _3681;
                                _3695 = _3682;
                                _3696 = _3697;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3682;
                        frontier_phi_82_pred_1 = _3681;
                        frontier_phi_82_pred_2 = _3680;
                        frontier_phi_82_pred_3 = _3679;
                        frontier_phi_82_pred_4 = _3678;
                        frontier_phi_82_pred_5 = _3677;
                    }
                    _3320 = frontier_phi_82_pred;
                    _3318 = frontier_phi_82_pred_1;
                    _3316 = frontier_phi_82_pred_2;
                    _3314 = frontier_phi_82_pred_3;
                    _3312 = frontier_phi_82_pred_4;
                    _3310 = frontier_phi_82_pred_5;
                    uint _3476 = _3475 + 1u;
                    if (_3476 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3469 = _3310;
                        _3470 = _3312;
                        _3471 = _3314;
                        _3472 = _3316;
                        _3473 = _3318;
                        _3474 = _3320;
                        _3475 = _3476;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3316;
                frontier_phi_63_64_ladder_1 = _3320;
                frontier_phi_63_64_ladder_2 = _3318;
                frontier_phi_63_64_ladder_3 = _3314;
                frontier_phi_63_64_ladder_4 = _3312;
                frontier_phi_63_64_ladder_5 = _3310;
            }
            else
            {
                frontier_phi_63_64_ladder = _3194;
                frontier_phi_63_64_ladder_1 = _3198;
                frontier_phi_63_64_ladder_2 = _3196;
                frontier_phi_63_64_ladder_3 = _3192;
                frontier_phi_63_64_ladder_4 = _3190;
                frontier_phi_63_64_ladder_5 = _3188;
            }
            _3309 = frontier_phi_63_64_ladder_5;
            _3311 = frontier_phi_63_64_ladder_4;
            _3313 = frontier_phi_63_64_ladder_3;
            _3315 = frontier_phi_63_64_ladder;
            _3317 = frontier_phi_63_64_ladder_2;
            _3319 = frontier_phi_63_64_ladder_1;
        }
        float _3324 = isnan(1.0) ? _1064 : (isnan(_1064) ? 1.0 : min(_1064, 1.0));
        _3119 = (_3324 * _3315) + _2631;
        _3121 = (_3324 * _3317) + _2633;
        _3123 = (_3324 * _3319) + _2635;
        _3125 = ((_3309 * _1049) * _3324) + _2969;
        _3127 = ((_3311 * _1051) * _3324) + _2971;
        _3129 = ((_3313 * _1052) * _3324) + _2973;
    }
    else
    {
        _3119 = _2631;
        _3121 = _2633;
        _3123 = _2635;
        _3125 = _2969;
        _3127 = _2971;
        _3129 = _2973;
    }
    float _5171 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _5182 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _5193 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _5204 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _3147 = ((isnan(1.0) ? _5171 : (isnan(_5171) ? 1.0 : min(_5171, 1.0))) * (_3119 + ((isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))) * _1064))) + ((_3125 + ((isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0))) * _1899)) * cbPerFrame._m0[3u].x);
    float _3148 = ((isnan(1.0) ? _5182 : (isnan(_5182) ? 1.0 : min(_5182, 1.0))) * (_3121 + ((isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))) * _1064))) + ((_3127 + ((isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0))) * _1899)) * cbPerFrame._m0[3u].x);
    float _3149 = ((isnan(1.0) ? _5193 : (isnan(_5193) ? 1.0 : min(_5193, 1.0))) * (_3123 + ((isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))) * _1064))) + ((_3129 + ((isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0))) * _1899)) * cbPerFrame._m0[3u].x);
    float _3154 = cbInstanceData._m0[_1024 + 6u].w * (isnan(1.0) ? _5204 : (isnan(_5204) ? 1.0 : min(_5204, 1.0)));
    float _3159 = _986 / cbSceneParam._m0[86u].x;
    float _3160 = _987 / cbSceneParam._m0[86u].y;
    vec4 _3174 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3159, _3160, (log2((isnan(cbSceneParam._m0[77u].w) ? _909 : (isnan(_909) ? cbSceneParam._m0[77u].w : min(_909, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3176 = _3174.x;
    float _3177 = _3174.y;
    float _3178 = _3174.z;
    float _3179 = _3174.w;
    float _3251;
    float _3253;
    float _3255;
    float _3257;
    if (_909 > cbSceneParam._m0[78u].w)
    {
        float _3213 = isnan(_909) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _909 : min(cbSceneParam._m0[80u].w, _909));
        float _3214 = _3213 / _909;
        float _3225 = _3214 * _959;
        float _3226 = _960 * _3214;
        float _3227 = (-0.0) - _3226;
        float _3229 = _3214 * _961;
        float _3231 = (cbSceneParam._m0[77u].w * _3227) / _3213;
        float _3232 = _3231 + cbSceneParam._m0[79u].w;
        float _3233 = cbSceneParam._m0[79u].w - _3226;
        float _3239 = sqrt(((_3225 * _3225) + (_3226 * _3226)) + (_3229 * _3229));
        float _3242 = (1.0 - (cbSceneParam._m0[77u].w / _3213)) * _3239;
        float _3247 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3249 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3426;
        if (abs((_3227 - _3231) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3426 = ((((_3232 > 0.0) ? exp2(_3247 * _3232) : (2.0 - exp2(_3249 * _3232))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3242;
        }
        else
        {
            float _3370 = 1.0 / cbSceneParam._m0[80u].x;
            float _3371 = isnan(_3233) ? _3232 : (isnan(_3232) ? _3233 : max(_3232, _3233));
            float _3372 = isnan(_3233) ? _3232 : (isnan(_3232) ? _3233 : min(_3232, _3233));
            float _3381 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : min(_3371, 0.0));
            float _3382 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : min(_3372, 0.0));
            _3426 = ((abs(_3239 / _3227) * cbSceneParam._m0[80u].y) * ((((_3381 - _3382) * 2.0) - ((exp2(_3247 * (isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0)))) - exp2(_3247 * (isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0))))) * _3370)) - ((exp2(_3249 * _3381) - exp2(_3249 * _3382)) * _3370))) + (_3242 * cbSceneParam._m0[80u].z);
        }
        vec4 _3428 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3159, _3160, 1.0), 0.0);
        float _3437 = exp2((_3426 * (-1.44269502162933349609375)) * (1.0 - _3428.w));
        float _3438 = log2(_3437);
        float _3454 = log2(_3179);
        _3251 = (exp2(_3454 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3438 * cbSceneParam._m0[78u].x)) * _3428.x) / cbSceneParam._m0[78u].x)) + _3176;
        _3253 = (exp2(_3454 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3438 * cbSceneParam._m0[78u].y)) * _3428.y) / cbSceneParam._m0[78u].y)) + _3177;
        _3255 = (exp2(_3454 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3438 * cbSceneParam._m0[78u].z)) * _3428.z) / cbSceneParam._m0[78u].z)) + _3178;
        _3257 = _3437 * _3179;
    }
    else
    {
        _3251 = _3176;
        _3253 = _3177;
        _3255 = _3178;
        _3257 = _3179;
    }
    bool _3464;
    vec4 _3267;
    vec4 _3289;
    float _3291;
    float _3295;
    float _3296;
    float _3297;
    float _3298;
    bool _3308;
    for (;;)
    {
        _3267 = cbMatDynParam._m0[0u];
        float _3269 = roundEven(_3267.y);
        bool _3270 = _3269 == 3.0;
        float _3271 = log2(_3257);
        float _3278 = exp2(_3271 * cbSceneParam._m0[78u].x) * _3147;
        float _3279 = exp2(_3271 * cbSceneParam._m0[78u].y) * _3148;
        float _3280 = exp2(_3271 * cbSceneParam._m0[78u].z) * _3149;
        float _3287 = _975 + (-0.5);
        _3289 = cbMtdParam._m0[1u];
        _3291 = _3289.y * _3287;
        float _3294 = (_3269 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3295 = _3294 * (_3270 ? _3278 : (_3278 + (cbSceneParam._m0[72u].w * _3251)));
        _3296 = _3294 * (_3270 ? _3279 : (_3279 + (cbSceneParam._m0[72u].w * _3253)));
        _3297 = _3294 * (_3270 ? _3280 : (_3280 + (cbSceneParam._m0[72u].w * _3255)));
        _3298 = _3287 * 0.999000012874603271484375;
        _3308 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3308)
        {
            if ((cbInstanceData._m0[_1024 + 7u].x + _3298) < 0.5)
            {
                _3464 = true;
                break;
            }
        }
        uint _3405 = _1025 + uint(_3267.w);
        if ((cbInstanceData._m0[_3405].w < 1.0) && ((cbInstanceData._m0[_3405].w + _3298) < 0.5))
        {
            _3464 = true;
            break;
        }
        if ((_3291 + 1.0) < _3289.x)
        {
            _3464 = true;
            break;
        }
        _3464 = false;
        break;
    }
    float _3668;
    if (_3464)
    {
        discard_state = true;
        _3668 = 0.0;
    }
    else
    {
        _3668 = _3154;
    }
    SV_Target.x = _3295;
    SV_Target.y = _3296;
    SV_Target.z = _3297;
    SV_Target.w = _3668;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3154;
    discard_exit();
}


