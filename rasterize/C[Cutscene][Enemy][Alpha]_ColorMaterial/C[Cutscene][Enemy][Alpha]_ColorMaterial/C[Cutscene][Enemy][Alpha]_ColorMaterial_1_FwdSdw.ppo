#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24;
layout(set = 0, binding = 12) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4;
layout(set = 0, binding = 13) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0;
layout(set = 0, binding = 18) uniform texture2DArray C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in float TEXCOORD_8;
layout(location = 7, component = 1) in float TEXCOORD_9;
layout(location = 7, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1420;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _288 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _292 = _288.z;
    float _305 = exp2(log2((1.0 - _292) * cbMtdParam._m0[26u].z) * cbMtdParam._m0[25u].w);
    float _306 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _307 = isnan(1.0) ? _306 : (isnan(_306) ? 1.0 : min(_306, 1.0));
    vec4 _324 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _336 = exp2(log2(_324.w * cbMtdParam._m0[29u].y) * cbMtdParam._m0[23u].x);
    float _337 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _338 = isnan(1.0) ? _337 : (isnan(_337) ? 1.0 : min(_337, 1.0));
    float _347 = exp2(log2(cbMtdParam._m0[23u].y * _292) * cbMtdParam._m0[22u].y);
    float _348 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _349 = isnan(1.0) ? _348 : (isnan(_348) ? 1.0 : min(_348, 1.0));
    float _370 = roundEven(5.0 - ((texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w)).x + (-0.02500000037252902984619140625)) * 8.0));
    float _371 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _372 = isnan(4.0) ? _371 : (isnan(_371) ? 4.0 : min(_371, 4.0));
    float _384 = floor(_372);
    vec4 _387 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w, _384));
    vec4 _411 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _422 = cbMtdParam._m0[9u].x * _411.x;
    float _423 = cbMtdParam._m0[9u].y * _411.y;
    float _424 = cbMtdParam._m0[9u].z * _411.z;
    float _431 = (((cbMtdParam._m0[10u].x * _387.x) - _422) * _349) + _422;
    float _432 = (((cbMtdParam._m0[10u].y * _387.y) - _423) * _349) + _423;
    float _433 = (((cbMtdParam._m0[10u].z * _387.z) - _424) * _349) + _424;
    float _439 = exp2(log2(_288.w) * cbMtdParam._m0[23u].w);
    vec4 _452 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _472 = (((cbMtdParam._m0[16u].x * _452.x) - _431) * _439) + _431;
    float _473 = (((cbMtdParam._m0[16u].y * _452.y) - _432) * _439) + _432;
    float _474 = (((cbMtdParam._m0[16u].z * _452.z) - _433) * _439) + _433;
    vec4 _487 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _507 = (((cbMtdParam._m0[19u].x * _487.x) - _472) * _338) + _472;
    float _508 = (((cbMtdParam._m0[19u].y * _487.y) - _473) * _338) + _473;
    float _509 = (((cbMtdParam._m0[19u].z * _487.z) - _474) * _338) + _474;
    vec4 _522 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _547 = (_324.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _522.x) - _507) * _307) + _507);
    float _549 = (_324.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _522.y) - _508) * _307) + _508);
    float _551 = (_324.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _522.z) - _509) * _307) + _509);
    float _555 = cbMtdParam._m0[28u].x * TEXCOORD_8;
    float _564 = (_555 - (((texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].z) * (1.0 - _555))) * (cbMtdParam._m0[27u].w + 1.0);
    float _4068 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _565 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _572 = ((cbMtdParam._m0[21u].x - _547) * _565) + _547;
    float _573 = ((cbMtdParam._m0[21u].y - _549) * _565) + _549;
    float _574 = ((cbMtdParam._m0[21u].z - _551) * _565) + _551;
    vec4 _588 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_24, SS_ClampLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.z) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.w) + cbTextureTilingScale._m0[11u].w));
    float _596 = (_588.x + (-1.0)) + (cbMtdParam._m0[28u].y * 2.0);
    float _4079 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _602 = exp2(log2(cbMtdParam._m0[28u].w * (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)))) * cbMtdParam._m0[28u].z);
    float _4090 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _603 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _201[5];
    float _202[5];
    _201[0u] = cbMtdParam._m0[29u].z;
    _202[0u] = cbMtdParam._m0[29u].w;
    _201[1u] = cbMtdParam._m0[31u].z;
    _202[1u] = cbMtdParam._m0[31u].w;
    _201[2u] = cbMtdParam._m0[31u].x;
    _202[2u] = cbMtdParam._m0[31u].y;
    _201[3u] = cbMtdParam._m0[30u].z;
    _202[3u] = cbMtdParam._m0[30u].w;
    _201[4u] = cbMtdParam._m0[30u].x;
    _202[4u] = cbMtdParam._m0[30u].y;
    float _644 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    uint _646 = uint(int(isnan(4.0) ? _644 : (isnan(_644) ? 4.0 : min(_644, 4.0))));
    float _653 = ((_202[_646] - cbMtdParam._m0[22u].z) * _349) + cbMtdParam._m0[22u].z;
    float _656 = ((cbMtdParam._m0[22u].w - _653) * _439) + _653;
    float _659 = ((cbMtdParam._m0[25u].x - _656) * _338) + _656;
    float _662 = ((cbMtdParam._m0[26u].x - _659) * _307) + _659;
    float _664 = _662 - (_662 * _555);
    vec4 _681 = texture(sampler2DArray(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w, _384));
    vec4 _699 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _701 = _699.x;
    float _702 = _699.y;
    float _707 = cbMtdParam._m0[22u].x + _699.z;
    float _710 = (((_681.z + _201[_646]) - _707) * _349) + _707;
    vec4 _723 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _734 = (((_723.z - _710) + cbMtdParam._m0[29u].x) * _439) + _710;
    float _739 = ((((_292 * 2.0) * _734) - _734) * cbMtdParam._m0[24u].w) + _734;
    vec4 _751 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _762 = (((cbMtdParam._m0[23u].z + _751.z) - _739) * _338) + _739;
    vec4 _775 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _786 = (((_775.z - _762) + cbMtdParam._m0[26u].y) * _307) + _762;
    vec4 _801 = texture(sampler2D(C_Cutscene_Enemy_Alpha_ColorMaterial_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _815 = ((cbMtdParam._m0[27u].y * _555) * ((_801.z * cbMtdParam._m0[27u].x) - _786)) + _786;
    float _827 = ((_681.x - _701) * _349) + _701;
    float _828 = ((_681.y - _702) * _349) + _702;
    float _833 = ((_723.x - _827) * _439) + _827;
    float _834 = ((_723.y - _828) * _439) + _828;
    float _839 = ((_751.x - _833) * _338) + _833;
    float _840 = ((_751.y - _834) * _338) + _834;
    float _849 = ((((_775.x - _839) * _307) + _839) * 2.0) + (-1.0);
    float _850 = ((((_775.y - _840) * _307) + _840) * 2.0) + (-1.0);
    float _851 = dot(vec2(_849, _850), vec2(_849, _850));
    float _4111 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _856 = sqrt(1.0 - (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))));
    float _866 = ((cbMtdParam._m0[25u].y * ((_288.x * 2.0) + (-1.0))) + _849) + ((((_801.x * 2.0) + (-1.0)) * _555) * cbMtdParam._m0[26u].w);
    float _867 = ((cbMtdParam._m0[25u].y * ((_288.y * 2.0) + (-1.0))) + _850) + (((cbMtdParam._m0[28u].x * TEXCOORD_9) * ((_801.y * 2.0) + (-1.0))) * cbMtdParam._m0[26u].w);
    float _870 = fma(_856, _237 * NORMAL.x, fma(_867, _244 * TANGENT.x, (_230 * _222) * _866));
    float _873 = fma(_856, _237 * NORMAL.y, fma(_867, _244 * TANGENT.y, (_230 * _223) * _866));
    float _876 = fma(_856, _237 * NORMAL.z, fma(_867, _244 * TANGENT.z, (_230 * _224) * _866));
    float _880 = inversesqrt(dot(vec3(_870, _873, _876), vec3(_870, _873, _876)));
    float _881 = _880 * _870;
    float _882 = _880 * _873;
    float _883 = _880 * _876;
    float _4122 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _884 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _4133 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _885 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _4144 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _4155 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _4166 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _4177 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _889 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _905 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _945 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _955 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _945);
    float _956 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _945);
    float _957 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _945);
    float _961 = inversesqrt(dot(vec3(_955, _956, _957), vec3(_955, _956, _957)));
    float _962 = _955 * _961;
    float _963 = _956 * _961;
    float _964 = _957 * _961;
    float _970 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _971 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _989 = fma(_883, cbSceneParam._m0[5u].z, fma(_882, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _881));
    float _992 = fma(_883, cbSceneParam._m0[6u].z, fma(_882, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _881));
    float _995 = fma(_883, cbSceneParam._m0[7u].z, fma(_882, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _881));
    uint _1008 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1010 = (_1008 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1016 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) * cbInstanceData._m0[_1010].x;
    float _1017 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) * cbInstanceData._m0[_1010].y;
    float _1018 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) * cbInstanceData._m0[_1010].z;
    float _4188 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _1019 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _4199 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    float _1020 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _4210 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
    float _1021 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _1022 = 1.0 - _889;
    float _1023 = _1019 * _1022;
    float _1024 = _1020 * _1022;
    float _1025 = _1021 * _1022;
    float _1030 = (_1019 + (-0.039999999105930328369140625)) * _889;
    float _1031 = (_1020 + (-0.039999999105930328369140625)) * _889;
    float _1032 = (_1021 + (-0.039999999105930328369140625)) * _889;
    float _1033 = _1030 + 0.039999999105930328369140625;
    float _1035 = _1031 + 0.039999999105930328369140625;
    float _1036 = _1032 + 0.039999999105930328369140625;
    vec4 _1045 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _970, cbSceneParam._m0[86u].y * _971));
    float _1048 = _1045.x * TEXCOORD_5.w;
    float _1049 = dot(vec3(_881, _882, _883), vec3(_962, _963, _964));
    float _1052 = _1049 * 2.0;
    float _1056 = (_1052 * _881) - _962;
    float _1057 = (_1052 * _882) - _963;
    float _1058 = (_1052 * _883) - _964;
    float _1062 = abs(dot(vec3(_962, _963, _964), vec3(_881, _882, _883)));
    float _4221 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _1064 = sqrt(_885);
    float _1075 = exp2((_1064 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1064 * 3.0));
    float _1081 = (1.0 - _1075) * ((_1064 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1082 = _1075 * _1064;
    float _1110 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1114 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1118 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1419;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1144 = fma(_1118, cbModelParam._m0[26u].z, fma(_1114, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1110));
        float _1148 = fma(_1118, cbModelParam._m0[27u].z, fma(_1114, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1110));
        float _1152 = fma(_1118, cbModelParam._m0[28u].z, fma(_1114, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1110));
        float _1177 = _1110 + _881;
        float _1178 = _1114 + _882;
        float _1179 = _1118 + _883;
        float _1189 = fma(_1179, cbModelParam._m0[26u].z, fma(_1178, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1177)) - _1144;
        float _1190 = fma(_1179, cbModelParam._m0[27u].z, fma(_1178, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1177)) - _1148;
        float _1191 = fma(_1179, cbModelParam._m0[28u].z, fma(_1178, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1177)) - _1152;
        float _1195 = inversesqrt(dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191)));
        float _1208 = ((_1195 * _1189) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1144 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1209 = ((_1195 * _1190) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1148 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1210 = ((_1195 * _1191) / cbModelParam._m0[34u].z) + ((((((_1152 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1208, _1209, _1210), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1208, _1209, _1210), 0.0);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1208, _1209, _1210), 0.0);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1208, _1209, _1210), 0.0);
        float _1247 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1213.x + (-0.5));
        float _1249 = _1247 * (_1213.y + (-0.5));
        float _1250 = _1247 * (_1213.z + (-0.5));
        float _1257 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1220.x + (-0.5));
        float _1259 = _1257 * (_1220.y + (-0.5));
        float _1260 = _1257 * (_1220.z + (-0.5));
        float _1267 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1227.x + (-0.5));
        float _1269 = _1267 * (_1227.y + (-0.5));
        float _1270 = _1267 * (_1227.z + (-0.5));
        float _1277 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1234.x + (-0.5));
        float _1279 = _1277 * (_1234.y + (-0.5));
        float _1280 = _1277 * (_1234.z + (-0.5));
        float _1281 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1282 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1283 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1284 = _1248 * 0.5;
        float _1285 = _1258 * 0.5;
        float _1286 = _1268 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1301 = (dot(vec3(_881, _882, _883), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _4247 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1311 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1281 + 9.9999997473787516355514526367188e-06);
        float _4258 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _4269 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_1313 + 1.0))) + _1318) * _1281;
        float _1328 = _1249 * 0.5;
        float _1329 = _1259 * 0.5;
        float _1330 = _1269 * 0.5;
        float _1331 = dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330));
        float _1336 = (_1331 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1331);
        float _1344 = (dot(vec3(_881, _882, _883), vec3(_1336 * _1328, _1336 * _1329, _1336 * _1330)) + 1.0) * 0.5;
        float _4280 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1353 = sqrt(((_1329 * _1329) + (_1328 * _1328)) + (_1330 * _1330)) / (_1282 + 9.9999997473787516355514526367188e-06);
        float _4291 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _4302 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_1355 + 1.0))) + _1360) * _1282;
        float _1370 = _1250 * 0.5;
        float _1371 = _1260 * 0.5;
        float _1372 = _1270 * 0.5;
        float _1373 = dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372));
        float _1378 = (_1373 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1373);
        float _1386 = (dot(vec3(_881, _882, _883), vec3(_1378 * _1370, _1378 * _1371, _1378 * _1372)) + 1.0) * 0.5;
        float _4313 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1395 = sqrt(((_1371 * _1371) + (_1370 * _1370)) + (_1372 * _1372)) / (_1283 + 9.9999997473787516355514526367188e-06);
        float _4324 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1397 = _1396 * 2.0;
        float _1401 = (1.0 - _1396) / (_1396 + 1.0);
        float _4335 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1411 = ((((1.0 - _1402) * (_1397 + 2.0)) * exp2(log2(isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_1397 + 1.0))) + _1402) * _1283;
        _1419 = _1250;
        _1421 = _1249;
        _1422 = _1248;
        _1423 = _1260;
        _1424 = _1259;
        _1425 = _1258;
        _1426 = _1270;
        _1427 = _1269;
        _1428 = _1268;
        _1429 = _1283;
        _1430 = _1282;
        _1431 = _1281;
        _1432 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
        _1433 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
        _1434 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)));
    }
    else
    {
        _1419 = _1420;
        _1421 = _1420;
        _1422 = _1420;
        _1423 = _1420;
        _1424 = _1420;
        _1425 = _1420;
        _1426 = _1420;
        _1427 = _1420;
        _1428 = _1420;
        _1429 = _1420;
        _1430 = _1420;
        _1431 = _1420;
        _1432 = 0.0;
        _1433 = 0.0;
        _1434 = 0.0;
    }
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1457 = fma(_1118, cbModelParam._m0[30u].z, fma(_1114, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1110));
        float _1461 = fma(_1118, cbModelParam._m0[31u].z, fma(_1114, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1110));
        float _1465 = fma(_1118, cbModelParam._m0[32u].z, fma(_1114, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1110));
        float _1488 = _1110 + _881;
        float _1489 = _1114 + _882;
        float _1490 = _1118 + _883;
        float _1500 = fma(_1490, cbModelParam._m0[30u].z, fma(_1489, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1488)) - _1457;
        float _1501 = fma(_1490, cbModelParam._m0[31u].z, fma(_1489, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1488)) - _1461;
        float _1502 = fma(_1490, cbModelParam._m0[32u].z, fma(_1489, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1488)) - _1465;
        float _1506 = inversesqrt(dot(vec3(_1500, _1501, _1502), vec3(_1500, _1501, _1502)));
        float _1519 = ((_1506 * _1500) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1457 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1520 = ((_1506 * _1501) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1461 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1521 = ((_1506 * _1502) / cbModelParam._m0[35u].z) + ((((((_1465 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1523 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1519, _1520, _1521), 0.0);
        vec4 _1530 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1519, _1520, _1521), 0.0);
        vec4 _1537 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1519, _1520, _1521), 0.0);
        vec4 _1544 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1519, _1520, _1521), 0.0);
        float _1556 = exp2((_1523.w + (-0.5)) * 20.0) * 2.0;
        float _1557 = _1556 * (_1523.x + (-0.5));
        float _1558 = _1556 * (_1523.y + (-0.5));
        float _1559 = _1556 * (_1523.z + (-0.5));
        float _1566 = exp2((_1530.w + (-0.5)) * 20.0) * 2.0;
        float _1567 = _1566 * (_1530.x + (-0.5));
        float _1568 = _1566 * (_1530.y + (-0.5));
        float _1569 = _1566 * (_1530.z + (-0.5));
        float _1576 = exp2((_1537.w + (-0.5)) * 20.0) * 2.0;
        float _1577 = _1576 * (_1537.x + (-0.5));
        float _1578 = _1576 * (_1537.y + (-0.5));
        float _1579 = _1576 * (_1537.z + (-0.5));
        float _1586 = exp2((_1544.w + (-0.5)) * 20.0) * 2.0;
        float _1587 = _1586 * (_1544.x + (-0.5));
        float _1588 = _1586 * (_1544.y + (-0.5));
        float _1589 = _1586 * (_1544.z + (-0.5));
        float _1590 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1591 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1592 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1593 = _1557 * 0.5;
        float _1594 = _1567 * 0.5;
        float _1595 = _1577 * 0.5;
        float _1596 = dot(vec3(_1593, _1594, _1595), vec3(_1593, _1594, _1595));
        float _1601 = (_1596 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1596);
        float _1609 = (dot(vec3(_881, _882, _883), vec3(_1601 * _1593, _1601 * _1594, _1601 * _1595)) + 1.0) * 0.5;
        float _4376 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1618 = sqrt(((_1594 * _1594) + (_1593 * _1593)) + (_1595 * _1595)) / (_1590 + 9.9999997473787516355514526367188e-06);
        float _4387 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _1620 = _1619 * 2.0;
        float _1624 = (1.0 - _1619) / (_1619 + 1.0);
        float _4398 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _1634 = ((((1.0 - _1625) * (_1620 + 2.0)) * exp2(log2(isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_1620 + 1.0))) + _1625) * _1590;
        float _1635 = _1558 * 0.5;
        float _1636 = _1568 * 0.5;
        float _1637 = _1578 * 0.5;
        float _1638 = dot(vec3(_1635, _1636, _1637), vec3(_1635, _1636, _1637));
        float _1643 = (_1638 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1638);
        float _1651 = (dot(vec3(_881, _882, _883), vec3(_1643 * _1635, _1643 * _1636, _1643 * _1637)) + 1.0) * 0.5;
        float _4409 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1660 = sqrt(((_1636 * _1636) + (_1635 * _1635)) + (_1637 * _1637)) / (_1591 + 9.9999997473787516355514526367188e-06);
        float _4420 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _1662 = _1661 * 2.0;
        float _1666 = (1.0 - _1661) / (_1661 + 1.0);
        float _4431 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1676 = ((((1.0 - _1667) * (_1662 + 2.0)) * exp2(log2(isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_1662 + 1.0))) + _1667) * _1591;
        float _1677 = _1559 * 0.5;
        float _1678 = _1569 * 0.5;
        float _1679 = _1579 * 0.5;
        float _1680 = dot(vec3(_1677, _1678, _1679), vec3(_1677, _1678, _1679));
        float _1685 = (_1680 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1680);
        float _1693 = (dot(vec3(_881, _882, _883), vec3(_1685 * _1677, _1685 * _1678, _1685 * _1679)) + 1.0) * 0.5;
        float _4442 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1702 = sqrt(((_1678 * _1678) + (_1677 * _1677)) + (_1679 * _1679)) / (_1592 + 9.9999997473787516355514526367188e-06);
        float _4453 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _1704 = _1703 * 2.0;
        float _1708 = (1.0 - _1703) / (_1703 + 1.0);
        float _4464 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1709 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _1718 = ((((1.0 - _1709) * (_1704 + 2.0)) * exp2(log2(isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_1704 + 1.0))) + _1709) * _1592;
        _1726 = _1559;
        _1727 = _1558;
        _1728 = _1557;
        _1729 = _1569;
        _1730 = _1568;
        _1731 = _1567;
        _1732 = _1579;
        _1733 = _1578;
        _1734 = _1577;
        _1735 = _1592;
        _1736 = _1591;
        _1737 = _1590;
        _1738 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)));
        _1739 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)));
        _1740 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)));
    }
    else
    {
        _1726 = _1420;
        _1727 = _1420;
        _1728 = _1420;
        _1729 = _1420;
        _1730 = _1420;
        _1731 = _1420;
        _1732 = _1420;
        _1733 = _1420;
        _1734 = _1420;
        _1735 = _1420;
        _1736 = _1420;
        _1737 = _1420;
        _1738 = 0.0;
        _1739 = 0.0;
        _1740 = 0.0;
    }
    float _1750 = (cbModelParam._m0[1u].x * (_1738 - _1432)) + _1432;
    float _1751 = (cbModelParam._m0[1u].x * (_1739 - _1433)) + _1433;
    float _1752 = (cbModelParam._m0[1u].x * (_1740 - _1434)) + _1434;
    float _1773 = fma(_1752, cbSceneParam._m0[89u].z, fma(_1751, cbSceneParam._m0[89u].y, _1750 * cbSceneParam._m0[89u].x));
    float _1776 = fma(_1752, cbSceneParam._m0[90u].z, fma(_1751, cbSceneParam._m0[90u].y, _1750 * cbSceneParam._m0[90u].x));
    float _1779 = fma(_1752, cbSceneParam._m0[91u].z, fma(_1751, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1750));
    float _1794 = _1056 * 0.5;
    float _1795 = _1057 * 0.5;
    float _1796 = _1058 * 0.5;
    float _1797 = dot(vec4(_1794, _1795, _1796, 1.0), vec4(_1728, _1731, _1734, _1737));
    float _1800 = dot(vec4(_1794, _1795, _1796, 1.0), vec4(_1727, _1730, _1733, _1736));
    float _1803 = dot(vec4(_1794, _1795, _1796, 1.0), vec4(_1726, _1729, _1732, _1735));
    float _1837;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1810 = dot(vec4(_1794, _1795, _1796, 1.0), vec4(_1419, _1423, _1426, _1429));
        float _1814 = dot(vec4(_1794, _1795, _1796, 1.0), vec4(_1421, _1424, _1427, _1430));
        float _1818 = dot(vec4(_1794, _1795, _1796, 1.0), vec4(_1422, _1425, _1428, _1431));
        float _1825 = dot(vec4(cbModelParam._m0[39u]), vec4(_1794, _1795, _1796, 1.0));
        _1837 = dot(vec3(isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)), isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0)), isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1825) ? 0.0 : (isnan(0.0) ? _1825 : max(0.0, _1825))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1837 = 1.0;
    }
    float _1848;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1839 = dot(vec4(cbModelParam._m0[40u]), vec4(_1794, _1795, _1796, 1.0));
        _1848 = dot(vec3(isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0)), isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0)), isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1839) ? 0.0 : (isnan(0.0) ? _1839 : max(0.0, _1839))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1848 = 1.0;
    }
    float _1852 = (_1848 * cbModelParam._m0[1u].x) + (_1837 * (1.0 - cbModelParam._m0[1u].x));
    float _1862 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _885);
    float _1863 = isnan(_1862) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1862 : min(cbModelParam._m0[25u].z, _1862));
    float _1943;
    float _1945;
    float _1947;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1910 = fma(_1118, cbModelParam._m0[13u].z, fma(_1114, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1110)) + cbModelParam._m0[13u].w;
        float _1914 = fma(_1118, cbModelParam._m0[14u].z, fma(_1114, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1110)) + cbModelParam._m0[14u].w;
        float _1918 = fma(_1118, cbModelParam._m0[15u].z, fma(_1114, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1110)) + cbModelParam._m0[15u].w;
        float _1921 = fma(_1058, cbModelParam._m0[13u].z, fma(_1057, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1056));
        float _1924 = fma(_1058, cbModelParam._m0[14u].z, fma(_1057, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1056));
        float _1927 = fma(_1058, cbModelParam._m0[15u].z, fma(_1057, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1056));
        float _1955;
        if (_1921 > 0.0)
        {
            _1955 = abs((1.0 - _1910) / _1921);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1910 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1955 = frontier_phi_14_12_ladder;
        }
        float _2126;
        if (_1924 > 0.0)
        {
            _2126 = abs((1.0 - _1914) / _1924);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1914 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2126 = frontier_phi_23_19_ladder;
        }
        float _2421;
        if (_1927 > 0.0)
        {
            _2421 = abs((1.0 - _1918) / _1927);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1927 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1918 + 1.0) / _1927);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2421 = frontier_phi_35_30_ladder;
        }
        float _2423 = isnan(_2126) ? _1955 : (isnan(_1955) ? _2126 : min(_1955, _2126));
        float _2424 = isnan(_2421) ? _2423 : (isnan(_2423) ? _2421 : min(_2423, _2421));
        float _2428 = (_2424 * _1921) + _1910;
        float _2429 = (_2424 * _1924) + _1914;
        float _2430 = (_2424 * _1927) + _1918;
        float _2431 = _2424 * 9.9999997473787516355514526367188e-05;
        float _2433 = (-1.0) - _2431;
        float _2435 = _2431 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2430 > _2435) || ((_2430 < _2433) || ((_2429 > _2435) || ((_2429 < _2433) || ((_2428 < _2433) || (_2428 > _2435))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2575 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2430, cbModelParam._m0[9u].z, fma(_2429, cbModelParam._m0[9u].y, _2428 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2430, cbModelParam._m0[10u].z, fma(_2429, cbModelParam._m0[10u].y, _2428 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2430, cbModelParam._m0[11u].z, fma(_2429, cbModelParam._m0[11u].y, _2428 * cbModelParam._m0[11u].x))), _1863);
            frontier_phi_13_35_ladder = _2575.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2575.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2575.x * cbModelParam._m0[1u].y;
        }
        _1943 = frontier_phi_13_35_ladder_2;
        _1945 = frontier_phi_13_35_ladder_1;
        _1947 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1931 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1056, _1057, _1058), _1863);
        _1943 = _1931.x * cbModelParam._m0[1u].y;
        _1945 = _1931.y * cbModelParam._m0[1u].y;
        _1947 = _1931.z * cbModelParam._m0[1u].y;
    }
    float _1951 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _885);
    float _1952 = isnan(_1951) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1951 : min(cbModelParam._m0[25u].w, _1951));
    float _2041;
    float _2043;
    float _2045;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2005 = fma(_1118, cbModelParam._m0[21u].z, fma(_1114, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1110)) + cbModelParam._m0[21u].w;
        float _2009 = fma(_1118, cbModelParam._m0[22u].z, fma(_1114, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1110)) + cbModelParam._m0[22u].w;
        float _2013 = fma(_1118, cbModelParam._m0[23u].z, fma(_1114, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1110)) + cbModelParam._m0[23u].w;
        float _2016 = fma(_1058, cbModelParam._m0[21u].z, fma(_1057, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1056));
        float _2019 = fma(_1058, cbModelParam._m0[22u].z, fma(_1057, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1056));
        float _2022 = fma(_1058, cbModelParam._m0[23u].z, fma(_1057, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1056));
        float _2131;
        if (_2016 > 0.0)
        {
            _2131 = abs((1.0 - _2005) / _2016);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2016 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2005 + 1.0) / _2016);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2131 = frontier_phi_25_21_ladder;
        }
        float _2448;
        if (_2019 > 0.0)
        {
            _2448 = abs((1.0 - _2009) / _2019);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2019 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2009 + 1.0) / _2019);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2448 = frontier_phi_37_32_ladder;
        }
        float _2786;
        if (_2022 > 0.0)
        {
            _2786 = abs((1.0 - _2013) / _2022);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2022 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2013 + 1.0) / _2022);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2786 = frontier_phi_47_44_ladder;
        }
        float _2788 = isnan(_2448) ? _2131 : (isnan(_2131) ? _2448 : min(_2131, _2448));
        float _2789 = isnan(_2786) ? _2788 : (isnan(_2788) ? _2786 : min(_2788, _2786));
        float _2793 = (_2789 * _2016) + _2005;
        float _2794 = (_2789 * _2019) + _2009;
        float _2795 = (_2789 * _2022) + _2013;
        float _2796 = _2789 * 9.9999997473787516355514526367188e-05;
        float _2797 = (-1.0) - _2796;
        float _2799 = _2796 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2795 > _2799) || ((_2795 < _2797) || ((_2794 > _2799) || ((_2794 < _2797) || ((_2793 < _2797) || (_2793 > _2799))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2917 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2795, cbModelParam._m0[17u].z, fma(_2794, cbModelParam._m0[17u].y, _2793 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2795, cbModelParam._m0[18u].z, fma(_2794, cbModelParam._m0[18u].y, _2793 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2795, cbModelParam._m0[19u].z, fma(_2794, cbModelParam._m0[19u].y, _2793 * cbModelParam._m0[19u].x))), _1952);
            frontier_phi_22_47_ladder = _2917.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2917.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2917.x * cbModelParam._m0[1u].z;
        }
        _2041 = frontier_phi_22_47_ladder_2;
        _2043 = frontier_phi_22_47_ladder_1;
        _2045 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2025 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1056, _1057, _1058), _1952);
        _2041 = _2025.x * cbModelParam._m0[1u].z;
        _2043 = _2025.y * cbModelParam._m0[1u].z;
        _2045 = _2025.z * cbModelParam._m0[1u].z;
    }
    float _2058 = (((_1081 * _1033) + _1082) * _1048) * ((cbModelParam._m0[1u].w * (_2041 - _1943)) + _1943);
    float _2060 = (((_1081 * _1035) + _1082) * _1048) * ((cbModelParam._m0[1u].w * (_2043 - _1945)) + _1945);
    float _2062 = (((_1081 * _1036) + _1082) * _1048) * ((cbModelParam._m0[1u].w * (_2045 - _1947)) + _1947);
    float _2065 = fma(_2062, cbSceneParam._m0[89u].z, fma(_2060, cbSceneParam._m0[89u].y, _2058 * cbSceneParam._m0[89u].x));
    float _2068 = fma(_2062, cbSceneParam._m0[90u].z, fma(_2060, cbSceneParam._m0[90u].y, _2058 * cbSceneParam._m0[90u].x));
    float _2071 = fma(_2062, cbSceneParam._m0[91u].z, fma(_2060, cbSceneParam._m0[91u].y, _2058 * cbSceneParam._m0[91u].x));
    float _2105 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2109 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2113 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2117 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2118 = _2105 / _2117;
    float _2119 = _2109 / _2117;
    float _2120 = _2113 / _2117;
    float _2267;
    float _2268;
    float _2269;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2147 = ((uint(_2120 > cbSceneParam._m0[59u].y) + uint(_2120 > cbSceneParam._m0[59u].x)) + uint(_2120 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2148 = _2147 + 43u;
        uint _2156 = _2147 + 44u;
        uint _2164 = _2147 + 45u;
        uint _2172 = _2147 + 46u;
        float _2183 = fma(_2117, cbSceneParam._m0[_2148].w, fma(_2113, cbSceneParam._m0[_2148].z, fma(_2109, cbSceneParam._m0[_2148].y, _2105 * cbSceneParam._m0[_2148].x)));
        float _2187 = fma(_2117, cbSceneParam._m0[_2156].w, fma(_2113, cbSceneParam._m0[_2156].z, fma(_2109, cbSceneParam._m0[_2156].y, _2105 * cbSceneParam._m0[_2156].x)));
        float _2195 = fma(_2117, cbSceneParam._m0[_2172].w, fma(_2113, cbSceneParam._m0[_2172].z, fma(_2109, cbSceneParam._m0[_2172].y, _2105 * cbSceneParam._m0[_2172].x)));
        float _2200 = cbSceneParam._m0[33u].z * _2195;
        float _2202 = cbSceneParam._m0[33u].w * _2195;
        float _2205 = fma(_2117, cbSceneParam._m0[_2164].w, fma(_2113, cbSceneParam._m0[_2164].z, fma(_2109, cbSceneParam._m0[_2164].y, _2105 * cbSceneParam._m0[_2164].x))) / _2195;
        float _2253 = (cbSceneParam._m0[33u].x - sqrt(((_2119 * _2119) + (_2118 * _2118)) + (_2120 * _2120))) * cbSceneParam._m0[33u].y;
        float _4590 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2260 = (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2200 + _2183) / _2195, (_2202 + _2187) / _2195), _2205), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2202 + _2183) / _2195, (_2187 - _2200) / _2195), _2205), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2183 - _2200) / _2195, (_2187 - _2202) / _2195), _2205), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2183 - _2202) / _2195, (_2200 + _2187) / _2195), _2205), 0.0)).x), vec4(0.25)));
        _2267 = 1.0 - (_2260 * cbSceneParam._m0[34u].x);
        _2268 = 1.0 - (_2260 * cbSceneParam._m0[34u].y);
        _2269 = 1.0 - (_2260 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2267 = 1.0;
        _2268 = 1.0;
        _2269 = 1.0;
    }
    float _2333;
    float _2335;
    float _2337;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2321 = fma(_2117, cbSceneParam._m0[63u].w, fma(_2113, cbSceneParam._m0[63u].z, fma(_2109, cbSceneParam._m0[63u].y, _2105 * cbSceneParam._m0[63u].x)));
        float _2322 = fma(_2117, cbSceneParam._m0[60u].w, fma(_2113, cbSceneParam._m0[60u].z, fma(_2109, cbSceneParam._m0[60u].y, _2105 * cbSceneParam._m0[60u].x))) / _2321;
        float _2323 = fma(_2117, cbSceneParam._m0[61u].w, fma(_2113, cbSceneParam._m0[61u].z, fma(_2109, cbSceneParam._m0[61u].y, _2105 * cbSceneParam._m0[61u].x))) / _2321;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2322 >= cbSceneParam._m0[64u].x) && (_2323 >= cbSceneParam._m0[64u].y)) && (_2322 <= cbSceneParam._m0[64u].z)) && (_2323 <= cbSceneParam._m0[64u].w))
        {
            float _2461 = fma(_2117, cbSceneParam._m0[62u].w, fma(_2113, cbSceneParam._m0[62u].z, fma(_2109, cbSceneParam._m0[62u].y, _2105 * cbSceneParam._m0[62u].x))) / _2321;
            float _2465 = isnan(cbSceneParam._m0[41u].w) ? _2461 : (isnan(_2461) ? cbSceneParam._m0[41u].w : max(_2461, cbSceneParam._m0[41u].w));
            float _2508 = (cbSceneParam._m0[33u].x - sqrt(((_2119 * _2119) + (_2118 * _2118)) + (_2120 * _2120))) * cbSceneParam._m0[33u].y;
            float _4606 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
            float _2515 = (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2322, cbSceneParam._m0[33u].w + _2323), _2465), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2322, _2323 - cbSceneParam._m0[33u].z), _2465), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2322 - cbSceneParam._m0[33u].z, _2323 - cbSceneParam._m0[33u].w), _2465), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2322 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2323), _2465), 0.0)).x), vec4(0.25)));
            float _2519 = 1.0 - (_2515 * cbSceneParam._m0[34u].x);
            float _2520 = 1.0 - (_2515 * cbSceneParam._m0[34u].y);
            float _2521 = 1.0 - (_2515 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2521) ? _2269 : (isnan(_2269) ? _2521 : min(_2269, _2521));
            frontier_phi_34_33_ladder_1 = isnan(_2520) ? _2268 : (isnan(_2268) ? _2520 : min(_2268, _2520));
            frontier_phi_34_33_ladder_2 = isnan(_2519) ? _2267 : (isnan(_2267) ? _2519 : min(_2267, _2519));
        }
        else
        {
            frontier_phi_34_33_ladder = _2269;
            frontier_phi_34_33_ladder_1 = _2268;
            frontier_phi_34_33_ladder_2 = _2267;
        }
        _2333 = frontier_phi_34_33_ladder_2;
        _2335 = frontier_phi_34_33_ladder_1;
        _2337 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2333 = _2267;
        _2335 = _2268;
        _2337 = _2269;
    }
    uvec4 _2342 = floatBitsToUint(cbInstanceData._m0[_1008 + 5u]);
    uint _2344 = _2342.x * 14u;
    uint _2345 = _2344 + 13u;
    float _2352 = _1048 + (-1.0);
    float _2357 = (cbLight._m0[_2345].x * _2352) + 1.0;
    float _2358 = (cbLight._m0[_2345].y * _2352) + 1.0;
    float _2359 = (cbLight._m0[_2345].z * _2352) + 1.0;
    float _2360 = (cbLight._m0[_2345].w * _2352) + 1.0;
    uint _2361 = _2344 + 5u;
    float _2367 = isnan(1.0) ? _2358 : (isnan(_2358) ? 1.0 : min(_2358, 1.0));
    uint _2371 = _2344 + 4u;
    float _2380 = isnan(1.0) ? _2357 : (isnan(_2357) ? 1.0 : min(_2357, 1.0));
    uint _2384 = _2344 | 1u;
    float _2395 = dot(vec3(cbLight._m0[_2344].xyz), vec3(_881, _882, _883));
    float _2398 = dot(vec3(cbLight._m0[_2384].xyz), vec3(_881, _882, _883));
    float _4642 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
    float _4653 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2403 = (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * 0.3183098733425140380859375;
    float _2405 = (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0))) * 0.3183098733425140380859375;
    float _2412 = ((cbLight._m0[_2361].x * _2367) * _2405) + (((cbLight._m0[_2371].x * _2333) * _2380) * _2403);
    float _2413 = ((_2367 * cbLight._m0[_2361].y) * _2405) + (((cbLight._m0[_2371].y * _2335) * _2380) * _2403);
    float _2414 = ((_2367 * cbLight._m0[_2361].z) * _2405) + (((cbLight._m0[_2371].z * _2337) * _2380) * _2403);
    uvec4 _2418 = floatBitsToUint(cbLight._m0[_2344 + 12u]);
    bool _2420 = _2418.x == 0u;
    float _2522;
    float _2524;
    float _2526;
    if (_2420)
    {
        _2522 = _2412;
        _2524 = _2413;
        _2526 = _2414;
    }
    else
    {
        uint _2530 = _2344 + 6u;
        float _2546 = (dot(vec3(cbLight._m0[_2344 + 2u].xyz), vec3(_881, _882, _883)) * 0.5) + 0.5;
        float _2547 = _2546 * _2546;
        float _4664 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2548 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
        float _2549 = isnan(1.0) ? _2359 : (isnan(_2359) ? 1.0 : min(_2359, 1.0));
        _2522 = (((cbLight._m0[_2530].x * 0.3183098733425140380859375) * _2548) * _2549) + _2412;
        _2524 = (((cbLight._m0[_2530].y * 0.3183098733425140380859375) * _2548) * _2549) + _2413;
        _2526 = (((cbLight._m0[_2530].z * 0.3183098733425140380859375) * _2548) * _2549) + _2414;
    }
    bool _2529 = _2418.y == 0u;
    float _2584;
    float _2586;
    float _2588;
    if (_2529)
    {
        _2584 = _2522;
        _2586 = _2524;
        _2588 = _2526;
    }
    else
    {
        uint _2757 = _2344 + 7u;
        float _2773 = (dot(vec3(cbLight._m0[_2344 + 3u].xyz), vec3(_881, _882, _883)) * 0.5) + 0.5;
        float _2774 = _2773 * _2773;
        float _4680 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
        float _2775 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
        float _2776 = isnan(1.0) ? _2360 : (isnan(_2360) ? 1.0 : min(_2360, 1.0));
        _2584 = (((cbLight._m0[_2757].x * 0.3183098733425140380859375) * _2775) * _2776) + _2522;
        _2586 = (((cbLight._m0[_2757].y * 0.3183098733425140380859375) * _2775) * _2776) + _2524;
        _2588 = (((cbLight._m0[_2757].z * 0.3183098733425140380859375) * _2775) * _2776) + _2526;
    }
    uint _2591 = _2344 + 8u;
    float _2604 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2344].w)) * _885) * 0.949999988079071044921875);
    float _2605 = _2604 * _2604;
    float _2606 = cbLight._m0[_2344].x + _962;
    float _2607 = cbLight._m0[_2344].y + _963;
    float _2608 = cbLight._m0[_2344].z + _964;
    float _2612 = inversesqrt(dot(vec3(_2606, _2607, _2608), vec3(_2606, _2607, _2608)));
    float _2613 = _2612 * _2606;
    float _2614 = _2612 * _2607;
    float _2615 = _2612 * _2608;
    float _2616 = dot(vec3(_881, _882, _883), vec3(cbLight._m0[_2344].xyz));
    float _4696 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
    float _2619 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
    float _4707 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _2620 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
    float _2621 = dot(vec3(_881, _882, _883), vec3(_2613, _2614, _2615));
    float _4718 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
    float _2624 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
    float _2625 = dot(vec3(cbLight._m0[_2344].xyz), vec3(_2613, _2614, _2615));
    float _4729 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
    float _2629 = _2605 * _2605;
    float _2633 = ((_2624 * _2624) * (_2629 + (-1.0))) + 1.0;
    float _2641 = exp2(log2(1.0 - (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0)))) * 5.0);
    float _2642 = 0.959999978542327880859375 - _1030;
    float _2644 = 0.959999978542327880859375 - _1031;
    float _2645 = 0.959999978542327880859375 - _1032;
    float _2652 = 1.0 - _2605;
    float _2663 = (0.5 / (((_2620 * ((_2619 * _2652) + _2605)) + 9.9999999392252902907785028219223e-09) + (((_2620 * _2652) + _2605) * _2619))) * _2619;
    float _4740 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
    float _2665 = (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0))) * (_2629 / ((_2633 * _2633) * 3.141590118408203125));
    uint _2679 = _2344 + 9u;
    float _2690 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2384].w)) * _885) * 0.949999988079071044921875);
    float _2691 = _2690 * _2690;
    float _2692 = cbLight._m0[_2384].x + _962;
    float _2693 = cbLight._m0[_2384].y + _963;
    float _2694 = cbLight._m0[_2384].z + _964;
    float _2698 = inversesqrt(dot(vec3(_2692, _2693, _2694), vec3(_2692, _2693, _2694)));
    float _2699 = _2698 * _2692;
    float _2700 = _2698 * _2693;
    float _2701 = _2698 * _2694;
    float _2702 = dot(vec3(_881, _882, _883), vec3(cbLight._m0[_2384].xyz));
    float _4751 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
    float _2705 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
    float _2706 = dot(vec3(_881, _882, _883), vec3(_2699, _2700, _2701));
    float _4762 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
    float _2709 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
    float _2710 = dot(vec3(cbLight._m0[_2384].xyz), vec3(_2699, _2700, _2701));
    float _4773 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
    float _2714 = _2691 * _2691;
    float _2718 = ((_2709 * _2709) * (_2714 + (-1.0))) + 1.0;
    float _2725 = exp2(log2(1.0 - (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0)))) * 5.0);
    float _2732 = 1.0 - _2691;
    float _2742 = (0.5 / (((_2620 * ((_2705 * _2732) + _2691)) + 9.9999999392252902907785028219223e-09) + (((_2620 * _2732) + _2691) * _2705))) * _2705;
    float _4784 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
    float _2744 = (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0))) * (_2714 / ((_2718 * _2718) * 3.141590118408203125));
    float _2754 = (((((_2725 * _2642) + _1033) * cbLight._m0[_2679].x) * _2744) * _2367) + ((((cbLight._m0[_2591].x * _2333) * ((_2641 * _2642) + _1033)) * _2665) * _2380);
    float _2755 = (((((_2725 * _2644) + _1035) * cbLight._m0[_2679].y) * _2744) * _2367) + ((((cbLight._m0[_2591].y * _2335) * ((_2641 * _2644) + _1035)) * _2665) * _2380);
    float _2756 = (((((_2725 * _2645) + _1036) * cbLight._m0[_2679].z) * _2744) * _2367) + ((((cbLight._m0[_2591].z * _2337) * ((_2641 * _2645) + _1036)) * _2665) * _2380);
    float _2812;
    float _2814;
    float _2816;
    if (_2420)
    {
        _2812 = _2754;
        _2814 = _2755;
        _2816 = _2756;
    }
    else
    {
        uint _2818 = _2344 + 2u;
        uint _2822 = _2344 + 10u;
        float _2836 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2818].w)) * _885) * 0.949999988079071044921875);
        float _2837 = _2836 * _2836;
        float _2838 = cbLight._m0[_2818].x + _962;
        float _2839 = cbLight._m0[_2818].y + _963;
        float _2840 = cbLight._m0[_2818].z + _964;
        float _2844 = inversesqrt(dot(vec3(_2838, _2839, _2840), vec3(_2838, _2839, _2840)));
        float _2845 = _2844 * _2838;
        float _2846 = _2844 * _2839;
        float _2847 = _2844 * _2840;
        float _2848 = dot(vec3(_881, _882, _883), vec3(cbLight._m0[_2818].xyz));
        float _4795 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
        float _2851 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
        float _2852 = dot(vec3(_881, _882, _883), vec3(_2845, _2846, _2847));
        float _4806 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
        float _2855 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
        float _2856 = dot(vec3(cbLight._m0[_2818].xyz), vec3(_2845, _2846, _2847));
        float _4817 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
        float _2860 = _2837 * _2837;
        float _2864 = ((_2855 * _2855) * (_2860 + (-1.0))) + 1.0;
        float _2871 = exp2(log2(1.0 - (isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0)))) * 5.0);
        float _2878 = 1.0 - _2837;
        float _2888 = (0.5 / (((_2620 * ((_2851 * _2878) + _2837)) + 9.9999999392252902907785028219223e-09) + (((_2620 * _2878) + _2837) * _2851))) * _2851;
        float _4828 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
        float _2890 = (isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0))) * (_2860 / ((_2864 * _2864) * 3.141590118408203125));
        float _2891 = isnan(1.0) ? _2359 : (isnan(_2359) ? 1.0 : min(_2359, 1.0));
        _2812 = (((((_2871 * _2642) + _1033) * cbLight._m0[_2822].x) * _2890) * _2891) + _2754;
        _2814 = (((((_2871 * _2644) + _1035) * cbLight._m0[_2822].y) * _2890) * _2891) + _2755;
        _2816 = (((((_2871 * _2645) + _1036) * cbLight._m0[_2822].z) * _2890) * _2891) + _2756;
    }
    float _2922;
    float _2924;
    float _2926;
    if (_2529)
    {
        _2922 = _2812;
        _2924 = _2814;
        _2926 = _2816;
    }
    else
    {
        uint _2933 = _2344 + 3u;
        uint _2937 = _2344 + 11u;
        float _2951 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2933].w)) * _885) * 0.949999988079071044921875);
        float _2952 = _2951 * _2951;
        float _2953 = cbLight._m0[_2933].x + _962;
        float _2954 = cbLight._m0[_2933].y + _963;
        float _2955 = cbLight._m0[_2933].z + _964;
        float _2959 = inversesqrt(dot(vec3(_2953, _2954, _2955), vec3(_2953, _2954, _2955)));
        float _2960 = _2959 * _2953;
        float _2961 = _2959 * _2954;
        float _2962 = _2959 * _2955;
        float _2963 = dot(vec3(_881, _882, _883), vec3(cbLight._m0[_2933].xyz));
        float _4844 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
        float _2966 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
        float _2967 = dot(vec3(_881, _882, _883), vec3(_2960, _2961, _2962));
        float _4855 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
        float _2970 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
        float _2971 = dot(vec3(cbLight._m0[_2933].xyz), vec3(_2960, _2961, _2962));
        float _4866 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
        float _2975 = _2952 * _2952;
        float _2979 = ((_2970 * _2970) * (_2975 + (-1.0))) + 1.0;
        float _2986 = exp2(log2(1.0 - (isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0)))) * 5.0);
        float _2993 = 1.0 - _2952;
        float _3003 = (0.5 / (((_2620 * ((_2966 * _2993) + _2952)) + 9.9999999392252902907785028219223e-09) + (((_2620 * _2993) + _2952) * _2966))) * _2966;
        float _4877 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
        float _3005 = (isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0))) * (_2975 / ((_2979 * _2979) * 3.141590118408203125));
        float _3006 = isnan(1.0) ? _2360 : (isnan(_2360) ? 1.0 : min(_2360, 1.0));
        _2922 = (((((_2986 * _2642) + _1033) * cbLight._m0[_2937].x) * _3005) * _3006) + _2812;
        _2924 = (((((_2986 * _2644) + _1035) * cbLight._m0[_2937].y) * _3005) * _3006) + _2814;
        _2926 = (((((_2986 * _2645) + _1036) * cbLight._m0[_2937].z) * _3005) * _3006) + _2816;
    }
    float _3072;
    float _3074;
    float _3076;
    float _3078;
    float _3080;
    float _3082;
    if (_2342.y == 0u)
    {
        uvec4 _3027 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3028 = _3027.x;
        uint _3039 = uint((float(_3027.y) * floor(float(uint(cbSceneParam._m0[85u].y * _971) / _3028))) + floor(float(uint(cbSceneParam._m0[85u].x * _970) / _3028)));
        float _3049 = (log2(_2120 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3050 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
        uint _3053 = uint(isnan(14.0) ? _3050 : (isnan(_3050) ? 14.0 : min(_3050, 14.0)));
        uvec4 _3058 = texelFetch(g_lightClusterGridBuffer, int(((_3053 << 2u) + (_3039 << 6u)) >> 2u));
        uint _3059 = _3058.x;
        uint _3060 = _3027.z;
        float _3141;
        float _3143;
        float _3145;
        float _3147;
        float _3149;
        float _3151;
        if (((((1u << ((_3060 >> 4u) & 15u)) + 4294967295u) & _3059) == 0u) || ((_3060 & 240u) == 0u))
        {
            _3141 = 0.0;
            _3143 = 0.0;
            _3145 = 0.0;
            _3147 = 0.0;
            _3149 = 0.0;
            _3151 = 0.0;
        }
        else
        {
            float _3142;
            float _3144;
            float _3146;
            float _3148;
            float _3150;
            float _3152;
            float _3286 = 0.0;
            float _3287 = 0.0;
            float _3288 = 0.0;
            float _3289 = 0.0;
            float _3290 = 0.0;
            float _3291 = 0.0;
            uint _3292 = 0u;
            uint _3301;
            bool _3302;
            for (;;)
            {
                _3301 = texelFetch(g_lightClassification, int((((_3053 << 5u) + (_3039 << 9u)) + (_3292 << 2u)) >> 2u)).x;
                _3302 = _3301 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3302)
                {
                    frontier_phi_66_pred = _3291;
                    frontier_phi_66_pred_1 = _3290;
                    frontier_phi_66_pred_2 = _3289;
                    frontier_phi_66_pred_3 = _3288;
                    frontier_phi_66_pred_4 = _3287;
                    frontier_phi_66_pred_5 = _3286;
                }
                else
                {
                    float _3410;
                    float _3411;
                    float _3412;
                    float _3413;
                    float _3414;
                    float _3415;
                    uint _3416;
                    _3410 = _3286;
                    _3411 = _3287;
                    _3412 = _3288;
                    _3413 = _3289;
                    _3414 = _3290;
                    _3415 = _3291;
                    _3416 = _3301;
                    float _3342;
                    float _3343;
                    float _3344;
                    float _3345;
                    float _3346;
                    float _3347;
                    for (;;)
                    {
                        uint _3420 = uint(findLSB(_3416)) + (_3292 << 5u);
                        uint _3417 = (_3416 + 4294967295u) & _3416;
                        uint _3422 = _3420 * 48u;
                        vec4 _3436 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3422)).x, texelFetch(g_PointLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3422 + 3u)).x));
                        uint _3442 = (_3420 * 48u) + 4u;
                        vec4 _3455 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3442)).x, texelFetch(g_PointLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3442 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3442 + 3u)).x));
                        uint _3461 = (_3420 * 48u) + 8u;
                        vec3 _3472 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3461)).x, texelFetch(g_PointLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3461 + 2u)).x));
                        float _3476 = _3436.x - _2118;
                        float _3477 = _3436.y - _2119;
                        float _3478 = _3436.z - _2120;
                        float _3479 = dot(vec3(_3476, _3477, _3478), vec3(_3476, _3477, _3478));
                        float _3482 = inversesqrt(_3479);
                        float _3483 = _3482 * _3476;
                        float _3484 = _3482 * _3477;
                        float _3485 = _3482 * _3478;
                        float _3486 = dot(vec3(_989, _992, _995), vec3(_3483, _3484, _3485));
                        float _3491 = 1.0 - (_3479 * _3436.w);
                        float _4903 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                        float _3492 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
                        float _3493 = sqrt(_3479) * _3455.w;
                        float _3496 = 1.39999997615814208984375 / (_3493 + 1.39999997615814208984375);
                        float _3497 = _3496 * _3496;
                        float _3500 = ((1.0 - _3497) * _3486) + _3497;
                        float _3503 = _3493 * _3493;
                        float _3507 = ((isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0))) * _3492) / ((_3503 * 0.699999988079071044921875) + 1.0);
                        float _3511 = (-0.0) - _2118;
                        float _3512 = (-0.0) - _2119;
                        float _3513 = (-0.0) - _2120;
                        float _3517 = inversesqrt(dot(vec3(_3511, _3512, _3513), vec3(_3511, _3512, _3513)));
                        float _3518 = _3517 * _3511;
                        float _3519 = _3517 * _3512;
                        float _3520 = _3517 * _3513;
                        float _3527 = exp2(log2(1.0 / ((_3503 * 3.5) + 5.0)) * 0.25);
                        float _3528 = 1.0 - _1064;
                        float _3535 = sqrt(1.0 - ((1.0 - (_3528 * _3528)) * (1.0 - (_3527 * _3527))));
                        float _3536 = _3535 * _3535;
                        float _3537 = _3536 * _3536;
                        float _3538 = _3518 + _3483;
                        float _3539 = _3519 + _3484;
                        float _3540 = _3520 + _3485;
                        float _3544 = inversesqrt(dot(vec3(_3538, _3539, _3540), vec3(_3538, _3539, _3540)));
                        float _3548 = dot(vec3(_989, _992, _995), vec3(_3518, _3519, _3520));
                        float _4919 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                        float _3551 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
                        float _3552 = dot(vec3(_989, _992, _995), vec3(_3544 * _3538, _3544 * _3539, _3544 * _3540));
                        float _4930 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                        float _3555 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                        float _3559 = ((_3555 * _3555) * (_3537 + (-1.0))) + 1.0;
                        float _3560 = _3496 * _3536;
                        float _3561 = _3560 * _3560;
                        float _3564 = ((1.0 - _3561) * _3486) + _3561;
                        float _4941 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                        float _3565 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
                        float _3566 = 1.0 - _3536;
                        float _3576 = (0.5 / (((_3565 * ((_3551 * _3566) + _3536)) + 9.9999999392252902907785028219223e-09) + (((_3565 * _3566) + _3536) * _3551))) * _3565;
                        float _4952 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                        float _3587 = (((_3537 * 3.1415927410125732421875) * (isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0)))) / ((_3559 * _3559) * ((_3503 * 2.1991131305694580078125) + 3.141590118408203125))) * _3492;
                        _3345 = (_3507 * _3455.x) + _3413;
                        _3346 = (_3507 * _3455.y) + _3414;
                        _3347 = (_3507 * _3455.z) + _3415;
                        _3342 = (_3587 * _3472.x) + _3410;
                        _3343 = (_3587 * _3472.y) + _3411;
                        _3344 = (_3587 * _3472.z) + _3412;
                        if (_3417 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3410 = _3342;
                            _3411 = _3343;
                            _3412 = _3344;
                            _3413 = _3345;
                            _3414 = _3346;
                            _3415 = _3347;
                            _3416 = _3417;
                        }
                    }
                    frontier_phi_66_pred = _3347;
                    frontier_phi_66_pred_1 = _3346;
                    frontier_phi_66_pred_2 = _3345;
                    frontier_phi_66_pred_3 = _3344;
                    frontier_phi_66_pred_4 = _3343;
                    frontier_phi_66_pred_5 = _3342;
                }
                _3152 = frontier_phi_66_pred;
                _3150 = frontier_phi_66_pred_1;
                _3148 = frontier_phi_66_pred_2;
                _3146 = frontier_phi_66_pred_3;
                _3144 = frontier_phi_66_pred_4;
                _3142 = frontier_phi_66_pred_5;
                uint _3293 = _3292 + 1u;
                if (_3293 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3286 = _3142;
                    _3287 = _3144;
                    _3288 = _3146;
                    _3289 = _3148;
                    _3290 = _3150;
                    _3291 = _3152;
                    _3292 = _3293;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3141 = _3142;
            _3143 = _3144;
            _3145 = _3146;
            _3147 = _3148;
            _3149 = _3150;
            _3151 = _3152;
        }
        uvec4 _3155 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3156 = _3155.z;
        uint _3158 = (_3156 >> 8u) & 15u;
        float _3254;
        float _3256;
        float _3258;
        float _3260;
        float _3262;
        float _3264;
        if (((4294967295u << _3158) & _3059) == 0u)
        {
            _3254 = _3141;
            _3256 = _3143;
            _3258 = _3145;
            _3260 = _3147;
            _3262 = _3149;
            _3264 = _3151;
        }
        else
        {
            float _3279 = inversesqrt(dot(vec3(_2118, _2119, _2120), vec3(_2118, _2119, _2120)));
            float _3280 = _3279 * _2118;
            float _3281 = _3279 * _2119;
            float _3282 = _3279 * _2120;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3158 < ((_3156 >> 12u) & 15u))
            {
                float _3255;
                float _3257;
                float _3259;
                float _3261;
                float _3263;
                float _3265;
                float _3393 = _3141;
                float _3394 = _3143;
                float _3395 = _3145;
                float _3396 = _3147;
                float _3397 = _3149;
                float _3398 = _3151;
                uint _3399 = _3158;
                uint _3408;
                bool _3409;
                for (;;)
                {
                    _3408 = texelFetch(g_lightClassification, int((((_3053 << 5u) + (_3039 << 9u)) + (_3399 << 2u)) >> 2u)).x;
                    _3409 = _3408 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3409)
                    {
                        frontier_phi_72_pred = _3398;
                        frontier_phi_72_pred_1 = _3397;
                        frontier_phi_72_pred_2 = _3396;
                        frontier_phi_72_pred_3 = _3395;
                        frontier_phi_72_pred_4 = _3394;
                        frontier_phi_72_pred_5 = _3393;
                    }
                    else
                    {
                        float _3592;
                        float _3593;
                        float _3594;
                        float _3595;
                        float _3596;
                        float _3597;
                        float _3885;
                        float _3886;
                        float _3887;
                        float _3888;
                        float _3889;
                        float _3890;
                        float _3605 = _3393;
                        float _3606 = _3394;
                        float _3607 = _3395;
                        float _3608 = _3396;
                        float _3609 = _3397;
                        float _3610 = _3398;
                        uint _3611 = _3408;
                        uint _3612;
                        vec4 _3637;
                        float _3638;
                        vec4 _3653;
                        vec3 _3665;
                        vec4 _3680;
                        vec4 _3695;
                        float _3741;
                        bool _3742;
                        for (;;)
                        {
                            uint _3622 = ((_3399 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3611));
                            _3612 = (_3611 + 4294967295u) & _3611;
                            uint _3624 = _3622 * 40u;
                            _3637 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3624)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 3u)).x));
                            _3638 = _3637.w;
                            uint _3640 = (_3622 * 40u) + 4u;
                            _3653 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3640)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 3u)).x));
                            uint _3655 = (_3622 * 40u) + 8u;
                            _3665 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3655)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 2u)).x));
                            uint _3667 = (_3622 * 40u) + 16u;
                            _3680 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3667)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 3u)).x));
                            uint _3682 = (_3622 * 40u) + 20u;
                            _3695 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3682)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 3u)).x));
                            uint _3697 = (_3622 * 40u) + 24u;
                            vec4 _3710 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3697)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 3u)).x));
                            uint _3716 = (_3622 * 40u) + 28u;
                            vec4 _3729 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3716)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 3u)).x));
                            _3741 = fma(_2120, _3729.z, fma(_2119, _3729.y, _3729.x * _2118)) + _3729.w;
                            _3742 = !((fma(_2120, _3710.z, fma(_2119, _3710.y, _3710.x * _2118)) + _3710.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3742)
                            {
                                float _3769 = _3637.x - _2118;
                                float _3770 = _3637.y - _2119;
                                float _3771 = _3637.z - _2120;
                                float _3772 = dot(vec3(_3769, _3770, _3771), vec3(_3769, _3770, _3771));
                                float _3775 = inversesqrt(_3772);
                                float _3776 = _3775 * _3769;
                                float _3777 = _3775 * _3770;
                                float _3778 = _3775 * _3771;
                                float _3782 = 1.0 - (_3772 / (_3638 * _3638));
                                float _4963 = isnan(0.0) ? _3782 : (isnan(_3782) ? 0.0 : max(_3782, 0.0));
                                float _3783 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
                                float _3787 = sqrt(_3772) * _3653.w;
                                float _3789 = 1.39999997615814208984375 / (_3787 + 1.39999997615814208984375);
                                float _3790 = _3789 * _3789;
                                float _3793 = ((1.0 - _3790) * dot(vec3(_3776, _3777, _3778), vec3(_989, _992, _995))) + _3790;
                                float _3796 = _3787 * _3787;
                                float _3800 = (fma(_2120, _3680.z, fma(_2119, _3680.y, _3680.x * _2118)) + _3680.w) / _3741;
                                float _3801 = (fma(_2120, _3695.z, fma(_2119, _3695.y, _3695.x * _2118)) + _3695.w) / _3741;
                                float _3805 = 1.0 - dot(vec2(_3800, _3801), vec2(_3800, _3801));
                                float _4979 = isnan(0.0) ? _3805 : (isnan(_3805) ? 0.0 : max(_3805, 0.0));
                                float _3806 = isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0));
                                float _3807 = _3806 * (((isnan(0.0) ? _3793 : (isnan(_3793) ? 0.0 : max(_3793, 0.0))) * _3783) / ((_3796 * 0.699999988079071044921875) + 1.0));
                                float _3819 = exp2(log2(1.0 / ((_3796 * 3.5) + 5.0)) * 0.25);
                                float _3820 = 1.0 - _1064;
                                float _3827 = sqrt(1.0 - ((1.0 - (_3820 * _3820)) * (1.0 - (_3819 * _3819))));
                                float _3828 = _3827 * _3827;
                                float _3829 = _3828 * _3828;
                                float _3830 = _3776 - _3280;
                                float _3831 = _3777 - _3281;
                                float _3832 = _3778 - _3282;
                                float _3836 = inversesqrt(dot(vec3(_3830, _3831, _3832), vec3(_3830, _3831, _3832)));
                                float _3840 = dot(vec3(_989, _992, _995), vec3((-0.0) - _3280, (-0.0) - _3281, (-0.0) - _3282));
                                float _4990 = isnan(0.0) ? _3840 : (isnan(_3840) ? 0.0 : max(_3840, 0.0));
                                float _3843 = isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0));
                                float _3844 = dot(vec3(_989, _992, _995), vec3(_3836 * _3830, _3836 * _3831, _3836 * _3832));
                                float _5001 = isnan(0.0) ? _3844 : (isnan(_3844) ? 0.0 : max(_3844, 0.0));
                                float _3847 = isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0));
                                float _3851 = ((_3847 * _3847) * (_3829 + (-1.0))) + 1.0;
                                float _3852 = _3789 * _3828;
                                float _3853 = _3852 * _3852;
                                float _3859 = ((1.0 - _3853) * dot(vec3(_989, _992, _995), vec3(_3776, _3777, _3778))) + _3853;
                                float _5012 = isnan(0.0) ? _3859 : (isnan(_3859) ? 0.0 : max(_3859, 0.0));
                                float _3860 = isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0));
                                float _3861 = 1.0 - _3828;
                                float _3871 = (0.5 / (((_3860 * ((_3843 * _3861) + _3828)) + 9.9999999392252902907785028219223e-09) + (((_3860 * _3861) + _3828) * _3843))) * _3860;
                                float _5023 = isnan(0.0) ? _3871 : (isnan(_3871) ? 0.0 : max(_3871, 0.0));
                                float _3881 = (_3806 * _3783) * (((_3829 * 3.1415927410125732421875) * (isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0)))) / ((_3851 * _3851) * ((_3796 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3807 * _3653.y;
                                frontier_phi_78_pred_1 = _3807 * _3653.x;
                                frontier_phi_78_pred_2 = _3881 * _3665.z;
                                frontier_phi_78_pred_3 = _3881 * _3665.y;
                                frontier_phi_78_pred_4 = _3881 * _3665.x;
                                frontier_phi_78_pred_5 = _3807 * _3653.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3889 = frontier_phi_78_pred;
                            _3888 = frontier_phi_78_pred_1;
                            _3887 = frontier_phi_78_pred_2;
                            _3886 = frontier_phi_78_pred_3;
                            _3885 = frontier_phi_78_pred_4;
                            _3890 = frontier_phi_78_pred_5;
                            _3595 = _3888 + _3608;
                            _3596 = _3889 + _3609;
                            _3597 = _3890 + _3610;
                            _3592 = _3885 + _3605;
                            _3593 = _3886 + _3606;
                            _3594 = _3887 + _3607;
                            if (_3612 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3605 = _3592;
                                _3606 = _3593;
                                _3607 = _3594;
                                _3608 = _3595;
                                _3609 = _3596;
                                _3610 = _3597;
                                _3611 = _3612;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3597;
                        frontier_phi_72_pred_1 = _3596;
                        frontier_phi_72_pred_2 = _3595;
                        frontier_phi_72_pred_3 = _3594;
                        frontier_phi_72_pred_4 = _3593;
                        frontier_phi_72_pred_5 = _3592;
                    }
                    _3265 = frontier_phi_72_pred;
                    _3263 = frontier_phi_72_pred_1;
                    _3261 = frontier_phi_72_pred_2;
                    _3259 = frontier_phi_72_pred_3;
                    _3257 = frontier_phi_72_pred_4;
                    _3255 = frontier_phi_72_pred_5;
                    uint _3400 = _3399 + 1u;
                    if (_3400 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3393 = _3255;
                        _3394 = _3257;
                        _3395 = _3259;
                        _3396 = _3261;
                        _3397 = _3263;
                        _3398 = _3265;
                        _3399 = _3400;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3265;
                frontier_phi_60_61_ladder_1 = _3263;
                frontier_phi_60_61_ladder_2 = _3259;
                frontier_phi_60_61_ladder_3 = _3257;
                frontier_phi_60_61_ladder_4 = _3255;
                frontier_phi_60_61_ladder_5 = _3261;
            }
            else
            {
                frontier_phi_60_61_ladder = _3151;
                frontier_phi_60_61_ladder_1 = _3149;
                frontier_phi_60_61_ladder_2 = _3145;
                frontier_phi_60_61_ladder_3 = _3143;
                frontier_phi_60_61_ladder_4 = _3141;
                frontier_phi_60_61_ladder_5 = _3147;
            }
            _3254 = frontier_phi_60_61_ladder_4;
            _3256 = frontier_phi_60_61_ladder_3;
            _3258 = frontier_phi_60_61_ladder_2;
            _3260 = frontier_phi_60_61_ladder_5;
            _3262 = frontier_phi_60_61_ladder_1;
            _3264 = frontier_phi_60_61_ladder;
        }
        float _3269 = isnan(1.0) ? _1048 : (isnan(_1048) ? 1.0 : min(_1048, 1.0));
        _3072 = (_3269 * _3260) + _2584;
        _3074 = (_3269 * _3262) + _2586;
        _3076 = (_3269 * _3264) + _2588;
        _3078 = ((_3254 * _1033) * _3269) + _2922;
        _3080 = ((_3256 * _1035) * _3269) + _2924;
        _3082 = ((_3258 * _1036) * _3269) + _2926;
    }
    else
    {
        _3072 = _2584;
        _3074 = _2586;
        _3076 = _2588;
        _3078 = _2922;
        _3080 = _2924;
        _3082 = _2926;
    }
    float _5039 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _5050 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _5061 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _5072 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _3107 = cbInstanceData._m0[_1008 + 6u].w * (isnan(1.0) ? _5072 : (isnan(_5072) ? 1.0 : min(_5072, 1.0)));
    float _3112 = _970 / cbSceneParam._m0[86u].x;
    float _3113 = _971 / cbSceneParam._m0[86u].y;
    vec4 _3127 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3112, _3113, (log2((isnan(cbSceneParam._m0[77u].w) ? _905 : (isnan(_905) ? cbSceneParam._m0[77u].w : min(_905, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3129 = _3127.x;
    float _3130 = _3127.y;
    float _3131 = _3127.z;
    float _3132 = _3127.w;
    float _3204;
    float _3206;
    float _3208;
    float _3210;
    if (_905 > cbSceneParam._m0[78u].w)
    {
        float _3166 = isnan(_905) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _905 : min(cbSceneParam._m0[80u].w, _905));
        float _3167 = _3166 / _905;
        float _3178 = _3167 * _955;
        float _3179 = _956 * _3167;
        float _3180 = (-0.0) - _3179;
        float _3182 = _3167 * _957;
        float _3184 = (cbSceneParam._m0[77u].w * _3180) / _3166;
        float _3185 = _3184 + cbSceneParam._m0[79u].w;
        float _3186 = cbSceneParam._m0[79u].w - _3179;
        float _3192 = sqrt(((_3178 * _3178) + (_3179 * _3179)) + (_3182 * _3182));
        float _3195 = (1.0 - (cbSceneParam._m0[77u].w / _3166)) * _3192;
        float _3200 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3202 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3355;
        if (abs((_3180 - _3184) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3355 = ((((_3185 > 0.0) ? exp2(_3200 * _3185) : (2.0 - exp2(_3202 * _3185))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3195;
        }
        else
        {
            float _3315 = 1.0 / cbSceneParam._m0[80u].x;
            float _3316 = isnan(_3186) ? _3185 : (isnan(_3185) ? _3186 : max(_3185, _3186));
            float _3317 = isnan(_3186) ? _3185 : (isnan(_3185) ? _3186 : min(_3185, _3186));
            float _3326 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : min(_3316, 0.0));
            float _3327 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : min(_3317, 0.0));
            _3355 = ((abs(_3192 / _3180) * cbSceneParam._m0[80u].y) * ((((_3326 - _3327) * 2.0) - ((exp2(_3200 * (isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0)))) - exp2(_3200 * (isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0))))) * _3315)) - ((exp2(_3202 * _3326) - exp2(_3202 * _3327)) * _3315))) + (_3195 * cbSceneParam._m0[80u].z);
        }
        vec4 _3357 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3112, _3113, 1.0), 0.0);
        float _3366 = exp2((_3355 * (-1.44269502162933349609375)) * (1.0 - _3357.w));
        float _3367 = log2(_3366);
        float _3383 = log2(_3132);
        _3204 = (exp2(_3383 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3367 * cbSceneParam._m0[78u].x)) * _3357.x) / cbSceneParam._m0[78u].x)) + _3129;
        _3206 = (exp2(_3383 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3367 * cbSceneParam._m0[78u].y)) * _3357.y) / cbSceneParam._m0[78u].y)) + _3130;
        _3208 = (exp2(_3383 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3367 * cbSceneParam._m0[78u].z)) * _3357.z) / cbSceneParam._m0[78u].z)) + _3131;
        _3210 = _3366 * _3132;
    }
    else
    {
        _3204 = _3129;
        _3206 = _3130;
        _3208 = _3131;
        _3210 = _3132;
    }
    float _3222 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3223 = _3222 == 3.0;
    float _3224 = log2(_3210);
    float _3231 = exp2(_3224 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0))) * (_3072 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1048))) + ((_3078 + ((isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0))) * _1852)) * cbPerFrame._m0[3u].x));
    float _3232 = exp2(_3224 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0))) * (_3074 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1048))) + ((_3080 + ((isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0))) * _1852)) * cbPerFrame._m0[3u].x));
    float _3233 = exp2(_3224 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0))) * (_3076 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1048))) + ((_3082 + ((isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0))) * _1852)) * cbPerFrame._m0[3u].x));
    float _3242 = (_3222 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3242 * (_3223 ? _3231 : (_3231 + (cbSceneParam._m0[72u].w * _3204)));
    SV_Target.y = _3242 * (_3223 ? _3232 : (_3232 + (cbSceneParam._m0[72u].w * _3206)));
    SV_Target.z = _3242 * (_3223 ? _3233 : (_3233 + (cbSceneParam._m0[72u].w * _3208)));
    SV_Target.w = _3107;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3107;
}


