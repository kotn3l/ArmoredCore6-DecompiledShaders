#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_Rotor_Blade_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _152 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _153 = _152 * NORMAL.x;
    float _154 = _152 * NORMAL.y;
    float _155 = _152 * NORMAL.z;
    vec4 _175 = texture(sampler2D(S_Rotor_Blade_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _182 = _175.x * cbMtdParam._m0[9u].x;
    float _183 = _175.y * cbMtdParam._m0[9u].y;
    float _184 = _175.z * cbMtdParam._m0[9u].z;
    float _185 = _175.w * TEXCOORD_1.z;
    float _189 = inversesqrt(dot(vec3(_153, _154, _155), vec3(_153, _154, _155)));
    float _190 = _189 * _153;
    float _191 = _189 * _154;
    float _192 = _189 * _155;
    float _2093 = isnan(0.0) ? _185 : (isnan(_185) ? 0.0 : max(_185, 0.0));
    float _194 = isnan(1.0) ? _2093 : (isnan(_2093) ? 1.0 : min(_2093, 1.0));
    float _2104 = isnan(0.0) ? _182 : (isnan(_182) ? 0.0 : max(_182, 0.0));
    float _2115 = isnan(0.0) ? _183 : (isnan(_183) ? 0.0 : max(_183, 0.0));
    float _2126 = isnan(0.0) ? _184 : (isnan(_184) ? 0.0 : max(_184, 0.0));
    float _213 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    float _271 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _272 = _265 * _271;
    float _273 = _266 * _271;
    float _274 = _267 * _271;
    float _280 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _281 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _302 = fma(_192, cbSceneParam._m0[5u].z, fma(_191, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _190));
    float _305 = fma(_192, cbSceneParam._m0[6u].z, fma(_191, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _190));
    float _308 = fma(_192, cbSceneParam._m0[7u].z, fma(_191, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _190));
    uint _321 = uint(roundEven(NORMAL.w)) * 13u;
    uint _324 = (_321 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _330 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0)))) * cbInstanceData._m0[_324].x;
    float _331 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2115 : (isnan(_2115) ? 1.0 : min(_2115, 1.0)))) * cbInstanceData._m0[_324].y;
    float _332 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0)))) * cbInstanceData._m0[_324].z;
    float _2137 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _333 = isnan(1.0) ? _2137 : (isnan(_2137) ? 1.0 : min(_2137, 1.0));
    float _2148 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _334 = isnan(1.0) ? _2148 : (isnan(_2148) ? 1.0 : min(_2148, 1.0));
    float _2159 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _335 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
    vec4 _344 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _280, cbSceneParam._m0[86u].y * _281));
    float _347 = _344.x * TEXCOORD_1.w;
    float _369 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _373 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _377 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _680;
    float _681;
    float _682;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _404 = fma(_377, cbModelParam._m0[26u].z, fma(_373, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _369));
        float _408 = fma(_377, cbModelParam._m0[27u].z, fma(_373, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _369));
        float _412 = fma(_377, cbModelParam._m0[28u].z, fma(_373, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _369));
        float _437 = _369 + _190;
        float _438 = _373 + _191;
        float _439 = _377 + _192;
        float _449 = fma(_439, cbModelParam._m0[26u].z, fma(_438, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _437)) - _404;
        float _450 = fma(_439, cbModelParam._m0[27u].z, fma(_438, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _437)) - _408;
        float _451 = fma(_439, cbModelParam._m0[28u].z, fma(_438, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _437)) - _412;
        float _455 = inversesqrt(dot(vec3(_449, _450, _451), vec3(_449, _450, _451)));
        float _468 = ((_455 * _449) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_404 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _469 = ((_455 * _450) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_408 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _470 = ((_455 * _451) / cbModelParam._m0[34u].z) + ((((((_412 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _473 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_468, _469, _470), 0.0);
        vec4 _480 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_468, _469, _470), 0.0);
        vec4 _487 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_468, _469, _470), 0.0);
        vec4 _494 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_468, _469, _470), 0.0);
        float _507 = exp2((_473.w + (-0.5)) * 20.0) * 2.0;
        float _515 = exp2((_480.w + (-0.5)) * 20.0) * 2.0;
        float _522 = exp2((_487.w + (-0.5)) * 20.0) * 2.0;
        float _529 = exp2((_494.w + (-0.5)) * 20.0) * 2.0;
        float _530 = _529 * (_494.x + (-0.5));
        float _531 = _529 * (_494.y + (-0.5));
        float _532 = _529 * (_494.z + (-0.5));
        float _533 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
        float _534 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
        float _535 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
        float _537 = ((_473.x + (-0.5)) * 0.5) * _507;
        float _539 = ((_480.x + (-0.5)) * 0.5) * _515;
        float _541 = ((_487.x + (-0.5)) * 0.5) * _522;
        float _542 = dot(vec3(_537, _539, _541), vec3(_537, _539, _541));
        float _547 = (_542 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_542);
        float _556 = (dot(vec3(_190, _191, _192), vec3(_547 * _537, _547 * _539, _547 * _541)) + 1.0) * 0.5;
        float _2185 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
        float _566 = sqrt(((_539 * _539) + (_537 * _537)) + (_541 * _541)) / (_533 + 9.9999997473787516355514526367188e-06);
        float _2196 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
        float _567 = isnan(1.0) ? _2196 : (isnan(_2196) ? 1.0 : min(_2196, 1.0));
        float _568 = _567 * 2.0;
        float _572 = (1.0 - _567) / (_567 + 1.0);
        float _2207 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
        float _573 = isnan(1.0) ? _2207 : (isnan(_2207) ? 1.0 : min(_2207, 1.0));
        float _582 = ((((1.0 - _573) * (_568 + 2.0)) * exp2(log2(isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0))) * (_568 + 1.0))) + _573) * _533;
        float _584 = ((_473.y + (-0.5)) * 0.5) * _507;
        float _586 = ((_480.y + (-0.5)) * 0.5) * _515;
        float _588 = ((_487.y + (-0.5)) * 0.5) * _522;
        float _589 = dot(vec3(_584, _586, _588), vec3(_584, _586, _588));
        float _594 = (_589 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_589);
        float _602 = (dot(vec3(_190, _191, _192), vec3(_594 * _584, _594 * _586, _594 * _588)) + 1.0) * 0.5;
        float _2218 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
        float _611 = sqrt(((_586 * _586) + (_584 * _584)) + (_588 * _588)) / (_534 + 9.9999997473787516355514526367188e-06);
        float _2229 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
        float _612 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
        float _613 = _612 * 2.0;
        float _617 = (1.0 - _612) / (_612 + 1.0);
        float _2240 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
        float _618 = isnan(1.0) ? _2240 : (isnan(_2240) ? 1.0 : min(_2240, 1.0));
        float _627 = ((((1.0 - _618) * (_613 + 2.0)) * exp2(log2(isnan(1.0) ? _2218 : (isnan(_2218) ? 1.0 : min(_2218, 1.0))) * (_613 + 1.0))) + _618) * _534;
        float _629 = ((_473.z + (-0.5)) * 0.5) * _507;
        float _631 = ((_480.z + (-0.5)) * 0.5) * _515;
        float _633 = ((_487.z + (-0.5)) * 0.5) * _522;
        float _634 = dot(vec3(_629, _631, _633), vec3(_629, _631, _633));
        float _639 = (_634 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_634);
        float _647 = (dot(vec3(_190, _191, _192), vec3(_639 * _629, _639 * _631, _639 * _633)) + 1.0) * 0.5;
        float _2251 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
        float _656 = sqrt(((_631 * _631) + (_629 * _629)) + (_633 * _633)) / (_535 + 9.9999997473787516355514526367188e-06);
        float _2262 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
        float _657 = isnan(1.0) ? _2262 : (isnan(_2262) ? 1.0 : min(_2262, 1.0));
        float _658 = _657 * 2.0;
        float _662 = (1.0 - _657) / (_657 + 1.0);
        float _2273 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        float _663 = isnan(1.0) ? _2273 : (isnan(_2273) ? 1.0 : min(_2273, 1.0));
        float _672 = ((((1.0 - _663) * (_658 + 2.0)) * exp2(log2(isnan(1.0) ? _2251 : (isnan(_2251) ? 1.0 : min(_2251, 1.0))) * (_658 + 1.0))) + _663) * _535;
        _680 = cbModelParam._m0[36u].z * (isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0)));
        _681 = cbModelParam._m0[36u].z * (isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0)));
        _682 = cbModelParam._m0[36u].z * (isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0)));
    }
    else
    {
        _680 = 0.0;
        _681 = 0.0;
        _682 = 0.0;
    }
    float _977;
    float _978;
    float _979;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _708 = fma(_377, cbModelParam._m0[30u].z, fma(_373, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _369));
        float _712 = fma(_377, cbModelParam._m0[31u].z, fma(_373, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _369));
        float _716 = fma(_377, cbModelParam._m0[32u].z, fma(_373, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _369));
        float _739 = _369 + _190;
        float _740 = _373 + _191;
        float _741 = _377 + _192;
        float _751 = fma(_741, cbModelParam._m0[30u].z, fma(_740, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _739)) - _708;
        float _752 = fma(_741, cbModelParam._m0[31u].z, fma(_740, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _739)) - _712;
        float _753 = fma(_741, cbModelParam._m0[32u].z, fma(_740, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _739)) - _716;
        float _757 = inversesqrt(dot(vec3(_751, _752, _753), vec3(_751, _752, _753)));
        float _770 = ((_757 * _751) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_708 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _771 = ((_757 * _752) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_712 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _772 = ((_757 * _753) / cbModelParam._m0[35u].z) + ((((((_716 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _774 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_770, _771, _772), 0.0);
        vec4 _781 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_770, _771, _772), 0.0);
        vec4 _788 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_770, _771, _772), 0.0);
        vec4 _795 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_770, _771, _772), 0.0);
        float _807 = exp2((_774.w + (-0.5)) * 20.0) * 2.0;
        float _814 = exp2((_781.w + (-0.5)) * 20.0) * 2.0;
        float _821 = exp2((_788.w + (-0.5)) * 20.0) * 2.0;
        float _828 = exp2((_795.w + (-0.5)) * 20.0) * 2.0;
        float _829 = _828 * (_795.x + (-0.5));
        float _830 = _828 * (_795.y + (-0.5));
        float _831 = _828 * (_795.z + (-0.5));
        float _832 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _833 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _834 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _836 = ((_774.x + (-0.5)) * 0.5) * _807;
        float _838 = ((_781.x + (-0.5)) * 0.5) * _814;
        float _840 = ((_788.x + (-0.5)) * 0.5) * _821;
        float _841 = dot(vec3(_836, _838, _840), vec3(_836, _838, _840));
        float _846 = (_841 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_841);
        float _854 = (dot(vec3(_190, _191, _192), vec3(_846 * _836, _846 * _838, _846 * _840)) + 1.0) * 0.5;
        float _2314 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _863 = sqrt(((_838 * _838) + (_836 * _836)) + (_840 * _840)) / (_832 + 9.9999997473787516355514526367188e-06);
        float _2325 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _864 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
        float _865 = _864 * 2.0;
        float _869 = (1.0 - _864) / (_864 + 1.0);
        float _2336 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _870 = isnan(1.0) ? _2336 : (isnan(_2336) ? 1.0 : min(_2336, 1.0));
        float _879 = ((((1.0 - _870) * (_865 + 2.0)) * exp2(log2(isnan(1.0) ? _2314 : (isnan(_2314) ? 1.0 : min(_2314, 1.0))) * (_865 + 1.0))) + _870) * _832;
        float _881 = ((_774.y + (-0.5)) * 0.5) * _807;
        float _883 = ((_781.y + (-0.5)) * 0.5) * _814;
        float _885 = ((_788.y + (-0.5)) * 0.5) * _821;
        float _886 = dot(vec3(_881, _883, _885), vec3(_881, _883, _885));
        float _891 = (_886 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_886);
        float _899 = (dot(vec3(_190, _191, _192), vec3(_891 * _881, _891 * _883, _891 * _885)) + 1.0) * 0.5;
        float _2347 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _908 = sqrt(((_883 * _883) + (_881 * _881)) + (_885 * _885)) / (_833 + 9.9999997473787516355514526367188e-06);
        float _2358 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _909 = isnan(1.0) ? _2358 : (isnan(_2358) ? 1.0 : min(_2358, 1.0));
        float _910 = _909 * 2.0;
        float _914 = (1.0 - _909) / (_909 + 1.0);
        float _2369 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _915 = isnan(1.0) ? _2369 : (isnan(_2369) ? 1.0 : min(_2369, 1.0));
        float _924 = ((((1.0 - _915) * (_910 + 2.0)) * exp2(log2(isnan(1.0) ? _2347 : (isnan(_2347) ? 1.0 : min(_2347, 1.0))) * (_910 + 1.0))) + _915) * _833;
        float _926 = ((_774.z + (-0.5)) * 0.5) * _807;
        float _928 = ((_781.z + (-0.5)) * 0.5) * _814;
        float _930 = ((_788.z + (-0.5)) * 0.5) * _821;
        float _931 = dot(vec3(_926, _928, _930), vec3(_926, _928, _930));
        float _936 = (_931 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_931);
        float _944 = (dot(vec3(_190, _191, _192), vec3(_936 * _926, _936 * _928, _936 * _930)) + 1.0) * 0.5;
        float _2380 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _953 = sqrt(((_928 * _928) + (_926 * _926)) + (_930 * _930)) / (_834 + 9.9999997473787516355514526367188e-06);
        float _2391 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _2391 : (isnan(_2391) ? 1.0 : min(_2391, 1.0));
        float _955 = _954 * 2.0;
        float _959 = (1.0 - _954) / (_954 + 1.0);
        float _2402 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _2402 : (isnan(_2402) ? 1.0 : min(_2402, 1.0));
        float _969 = ((((1.0 - _960) * (_955 + 2.0)) * exp2(log2(isnan(1.0) ? _2380 : (isnan(_2380) ? 1.0 : min(_2380, 1.0))) * (_955 + 1.0))) + _960) * _834;
        _977 = cbModelParam._m0[36u].w * (isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0)));
        _978 = cbModelParam._m0[36u].w * (isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0)));
        _979 = cbModelParam._m0[36u].w * (isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0)));
    }
    else
    {
        _977 = 0.0;
        _978 = 0.0;
        _979 = 0.0;
    }
    float _989 = (cbModelParam._m0[1u].x * (_977 - _680)) + _680;
    float _990 = (cbModelParam._m0[1u].x * (_978 - _681)) + _681;
    float _991 = (cbModelParam._m0[1u].x * (_979 - _682)) + _682;
    float _1012 = fma(_991, cbSceneParam._m0[89u].z, fma(_990, cbSceneParam._m0[89u].y, _989 * cbSceneParam._m0[89u].x));
    float _1015 = fma(_991, cbSceneParam._m0[90u].z, fma(_990, cbSceneParam._m0[90u].y, _989 * cbSceneParam._m0[90u].x));
    float _1018 = fma(_991, cbSceneParam._m0[91u].z, fma(_990, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _989));
    uvec4 _1028 = floatBitsToUint(cbInstanceData._m0[_321 + 5u]);
    uint _1030 = _1028.x * 14u;
    uint _1032 = _1030 + 13u;
    float _1037 = _347 + (-1.0);
    float _1041 = (cbLight._m0[_1032].x * _1037) + 1.0;
    float _1042 = (cbLight._m0[_1032].y * _1037) + 1.0;
    uint _1043 = _1030 + 5u;
    float _1049 = isnan(1.0) ? _1042 : (isnan(_1042) ? 1.0 : min(_1042, 1.0));
    uint _1053 = _1030 + 4u;
    float _1060 = isnan(1.0) ? _1041 : (isnan(_1041) ? 1.0 : min(_1041, 1.0));
    uint _1064 = _1030 | 1u;
    float _1075 = dot(vec3(cbLight._m0[_1030].xyz), vec3(_190, _191, _192));
    float _1078 = dot(vec3(cbLight._m0[_1064].xyz), vec3(_190, _191, _192));
    float _2453 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _2464 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _1083 = (isnan(1.0) ? _2453 : (isnan(_2453) ? 1.0 : min(_2453, 1.0))) * 0.3183098733425140380859375;
    float _1085 = (isnan(1.0) ? _2464 : (isnan(_2464) ? 1.0 : min(_2464, 1.0))) * 0.3183098733425140380859375;
    float _1092 = ((cbLight._m0[_1043].x * _1049) * _1085) + ((cbLight._m0[_1053].x * _1060) * _1083);
    float _1093 = ((_1049 * cbLight._m0[_1043].y) * _1085) + ((_1060 * cbLight._m0[_1053].y) * _1083);
    float _1094 = ((_1049 * cbLight._m0[_1043].z) * _1085) + ((_1060 * cbLight._m0[_1053].z) * _1083);
    uint _1095 = _1030 + 8u;
    float _1101 = cbLight._m0[_1030].x + _272;
    float _1102 = cbLight._m0[_1030].y + _273;
    float _1103 = cbLight._m0[_1030].z + _274;
    float _1107 = inversesqrt(dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103)));
    float _1111 = dot(vec3(_190, _191, _192), vec3(cbLight._m0[_1030].xyz));
    float _2475 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
    float _1114 = isnan(1.0) ? _2475 : (isnan(_2475) ? 1.0 : min(_2475, 1.0));
    float _1115 = dot(vec3(_190, _191, _192), vec3(_272, _273, _274));
    float _2486 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
    float _1118 = isnan(1.0) ? _2486 : (isnan(_2486) ? 1.0 : min(_2486, 1.0));
    float _1119 = dot(vec3(cbLight._m0[_1030].xyz), vec3(_1101 * _1107, _1102 * _1107, _1103 * _1107));
    float _2497 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
    float _1130 = (exp2(log2(1.0 - (isnan(1.0) ? _2497 : (isnan(_2497) ? 1.0 : min(_2497, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1136 = (0.5 / ((_1114 + 9.9999999392252902907785028219223e-09) + _1118)) * _1114;
    float _2508 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
    float _1138 = (isnan(1.0) ? _2508 : (isnan(_2508) ? 1.0 : min(_2508, 1.0))) * 0.31831014156341552734375;
    uint _1149 = _1030 + 9u;
    float _1155 = cbLight._m0[_1064].x + _272;
    float _1156 = cbLight._m0[_1064].y + _273;
    float _1157 = cbLight._m0[_1064].z + _274;
    float _1161 = inversesqrt(dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157)));
    float _1165 = dot(vec3(_190, _191, _192), vec3(cbLight._m0[_1064].xyz));
    float _2519 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
    float _1168 = isnan(1.0) ? _2519 : (isnan(_2519) ? 1.0 : min(_2519, 1.0));
    float _1169 = dot(vec3(cbLight._m0[_1064].xyz), vec3(_1155 * _1161, _1156 * _1161, _1157 * _1161));
    float _2530 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
    float _1178 = (exp2(log2(1.0 - (isnan(1.0) ? _2530 : (isnan(_2530) ? 1.0 : min(_2530, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1182 = (0.5 / ((_1168 + 9.9999999392252902907785028219223e-09) + _1118)) * _1168;
    float _2541 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
    float _1184 = (isnan(1.0) ? _2541 : (isnan(_2541) ? 1.0 : min(_2541, 1.0))) * 0.31831014156341552734375;
    float _1194 = (((_1178 * cbLight._m0[_1149].x) * _1184) * _1049) + (((_1130 * cbLight._m0[_1095].x) * _1138) * _1060);
    float _1195 = (((_1178 * cbLight._m0[_1149].y) * _1184) * _1049) + (((_1130 * cbLight._m0[_1095].y) * _1138) * _1060);
    float _1196 = (((_1178 * cbLight._m0[_1149].z) * _1184) * _1049) + (((_1130 * cbLight._m0[_1095].z) * _1138) * _1060);
    float _1303;
    float _1305;
    float _1307;
    float _1309;
    float _1311;
    float _1313;
    if (_1028.y == 0u)
    {
        float _1243 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1244 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1243;
        float _1245 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1243;
        float _1246 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1243;
        uvec4 _1258 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1259 = _1258.x;
        uint _1270 = uint((float(_1258.y) * floor(float(uint(cbSceneParam._m0[85u].y * _281) / _1259))) + floor(float(uint(cbSceneParam._m0[85u].x * _280) / _1259)));
        float _1280 = (log2(_1246 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1281 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        uint _1284 = uint(isnan(14.0) ? _1281 : (isnan(_1281) ? 14.0 : min(_1281, 14.0)));
        uvec4 _1289 = texelFetch(g_lightClusterGridBuffer, int(((_1284 << 2u) + (_1270 << 6u)) >> 2u));
        uint _1290 = _1289.x;
        uint _1291 = _1258.z;
        float _1369;
        float _1371;
        float _1373;
        float _1375;
        float _1377;
        float _1379;
        if (((((1u << ((_1291 >> 4u) & 15u)) + 4294967295u) & _1290) == 0u) || ((_1291 & 240u) == 0u))
        {
            _1369 = 0.0;
            _1371 = 0.0;
            _1373 = 0.0;
            _1375 = 0.0;
            _1377 = 0.0;
            _1379 = 0.0;
        }
        else
        {
            float _1370;
            float _1372;
            float _1374;
            float _1376;
            float _1378;
            float _1380;
            float _1513 = 0.0;
            float _1514 = 0.0;
            float _1515 = 0.0;
            float _1516 = 0.0;
            float _1517 = 0.0;
            float _1518 = 0.0;
            uint _1519 = 0u;
            uint _1528;
            bool _1529;
            for (;;)
            {
                _1528 = texelFetch(g_lightClassification, int((((_1284 << 5u) + (_1270 << 9u)) + (_1519 << 2u)) >> 2u)).x;
                _1529 = _1528 == 0u;
                float frontier_phi_17_pred;
                float frontier_phi_17_pred_1;
                float frontier_phi_17_pred_2;
                float frontier_phi_17_pred_3;
                float frontier_phi_17_pred_4;
                float frontier_phi_17_pred_5;
                if (_1529)
                {
                    frontier_phi_17_pred = _1518;
                    frontier_phi_17_pred_1 = _1517;
                    frontier_phi_17_pred_2 = _1516;
                    frontier_phi_17_pred_3 = _1515;
                    frontier_phi_17_pred_4 = _1514;
                    frontier_phi_17_pred_5 = _1513;
                }
                else
                {
                    float _1637;
                    float _1638;
                    float _1639;
                    float _1640;
                    float _1641;
                    float _1642;
                    uint _1643;
                    _1637 = _1513;
                    _1638 = _1514;
                    _1639 = _1515;
                    _1640 = _1516;
                    _1641 = _1517;
                    _1642 = _1518;
                    _1643 = _1528;
                    float _1569;
                    float _1570;
                    float _1571;
                    float _1572;
                    float _1573;
                    float _1574;
                    for (;;)
                    {
                        uint _1647 = uint(findLSB(_1643)) + (_1519 << 5u);
                        uint _1644 = (_1643 + 4294967295u) & _1643;
                        uint _1649 = _1647 * 48u;
                        vec4 _1663 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1649)).x, texelFetch(g_PointLightRenderingBuffer, int(_1649 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1649 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1649 + 3u)).x));
                        uint _1669 = (_1647 * 48u) + 4u;
                        vec4 _1682 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1669)).x, texelFetch(g_PointLightRenderingBuffer, int(_1669 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1669 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1669 + 3u)).x));
                        uint _1688 = (_1647 * 48u) + 8u;
                        vec3 _1699 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_1688)).x, texelFetch(g_PointLightRenderingBuffer, int(_1688 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1688 + 2u)).x));
                        float _1703 = _1663.x - _1244;
                        float _1704 = _1663.y - _1245;
                        float _1705 = _1663.z - _1246;
                        float _1706 = dot(vec3(_1703, _1704, _1705), vec3(_1703, _1704, _1705));
                        float _1709 = inversesqrt(_1706);
                        float _1718 = 1.0 - (_1706 * _1663.w);
                        float _2562 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
                        float _1719 = isnan(1.0) ? _2562 : (isnan(_2562) ? 1.0 : min(_2562, 1.0));
                        float _1720 = sqrt(_1706) * _1682.w;
                        float _1723 = 1.39999997615814208984375 / (_1720 + 1.39999997615814208984375);
                        float _1724 = _1723 * _1723;
                        float _1727 = ((1.0 - _1724) * dot(vec3(_302, _305, _308), vec3(_1709 * _1703, _1709 * _1704, _1709 * _1705))) + _1724;
                        float _1730 = _1720 * _1720;
                        float _1734 = ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _1719) / ((_1730 * 0.699999988079071044921875) + 1.0);
                        float _1738 = (-0.0) - _1244;
                        float _1739 = (-0.0) - _1245;
                        float _1740 = (-0.0) - _1246;
                        float _1744 = inversesqrt(dot(vec3(_1738, _1739, _1740), vec3(_1738, _1739, _1740)));
                        float _1748 = dot(vec3(_302, _305, _308), vec3(_1744 * _1738, _1744 * _1739, _1744 * _1740));
                        float _2578 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
                        float _2589 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
                        float _1752 = isnan(1.0) ? _2589 : (isnan(_2589) ? 1.0 : min(_2589, 1.0));
                        float _1756 = (0.5 / (((isnan(1.0) ? _2578 : (isnan(_2578) ? 1.0 : min(_2578, 1.0))) + 9.9999999392252902907785028219223e-09) + _1752)) * _1752;
                        float _2600 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
                        float _1765 = (((isnan(1.0) ? _2600 : (isnan(_2600) ? 1.0 : min(_2600, 1.0))) * 3.1415927410125732421875) / ((_1730 * 2.1991131305694580078125) + 3.141590118408203125)) * _1719;
                        _1572 = (_1734 * _1682.x) + _1640;
                        _1573 = (_1734 * _1682.y) + _1641;
                        _1574 = (_1734 * _1682.z) + _1642;
                        _1569 = (_1765 * _1699.x) + _1637;
                        _1570 = (_1765 * _1699.y) + _1638;
                        _1571 = (_1765 * _1699.z) + _1639;
                        if (_1644 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1637 = _1569;
                            _1638 = _1570;
                            _1639 = _1571;
                            _1640 = _1572;
                            _1641 = _1573;
                            _1642 = _1574;
                            _1643 = _1644;
                        }
                    }
                    frontier_phi_17_pred = _1574;
                    frontier_phi_17_pred_1 = _1573;
                    frontier_phi_17_pred_2 = _1572;
                    frontier_phi_17_pred_3 = _1571;
                    frontier_phi_17_pred_4 = _1570;
                    frontier_phi_17_pred_5 = _1569;
                }
                _1380 = frontier_phi_17_pred;
                _1378 = frontier_phi_17_pred_1;
                _1376 = frontier_phi_17_pred_2;
                _1374 = frontier_phi_17_pred_3;
                _1372 = frontier_phi_17_pred_4;
                _1370 = frontier_phi_17_pred_5;
                uint _1520 = _1519 + 1u;
                if (_1520 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1513 = _1370;
                    _1514 = _1372;
                    _1515 = _1374;
                    _1516 = _1376;
                    _1517 = _1378;
                    _1518 = _1380;
                    _1519 = _1520;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1369 = _1370;
            _1371 = _1372;
            _1373 = _1374;
            _1375 = _1376;
            _1377 = _1378;
            _1379 = _1380;
        }
        uvec4 _1383 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1384 = _1383.z;
        uint _1386 = (_1384 >> 8u) & 15u;
        float _1484;
        float _1486;
        float _1488;
        float _1490;
        float _1492;
        float _1494;
        if (((4294967295u << _1386) & _1290) == 0u)
        {
            _1484 = _1369;
            _1486 = _1371;
            _1488 = _1373;
            _1490 = _1375;
            _1492 = _1377;
            _1494 = _1379;
        }
        else
        {
            float _1509 = inversesqrt(dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246)));
            float frontier_phi_11_12_ladder;
            float frontier_phi_11_12_ladder_1;
            float frontier_phi_11_12_ladder_2;
            float frontier_phi_11_12_ladder_3;
            float frontier_phi_11_12_ladder_4;
            float frontier_phi_11_12_ladder_5;
            if (_1386 < ((_1384 >> 12u) & 15u))
            {
                float _1485;
                float _1487;
                float _1489;
                float _1491;
                float _1493;
                float _1495;
                float _1620 = _1369;
                float _1621 = _1371;
                float _1622 = _1373;
                float _1623 = _1375;
                float _1624 = _1377;
                float _1625 = _1379;
                uint _1626 = _1386;
                uint _1635;
                bool _1636;
                for (;;)
                {
                    _1635 = texelFetch(g_lightClassification, int((((_1284 << 5u) + (_1270 << 9u)) + (_1626 << 2u)) >> 2u)).x;
                    _1636 = _1635 == 0u;
                    float frontier_phi_23_pred;
                    float frontier_phi_23_pred_1;
                    float frontier_phi_23_pred_2;
                    float frontier_phi_23_pred_3;
                    float frontier_phi_23_pred_4;
                    float frontier_phi_23_pred_5;
                    if (_1636)
                    {
                        frontier_phi_23_pred = _1621;
                        frontier_phi_23_pred_1 = _1623;
                        frontier_phi_23_pred_2 = _1622;
                        frontier_phi_23_pred_3 = _1620;
                        frontier_phi_23_pred_4 = _1625;
                        frontier_phi_23_pred_5 = _1624;
                    }
                    else
                    {
                        float _1770;
                        float _1771;
                        float _1772;
                        float _1773;
                        float _1774;
                        float _1775;
                        float _2023;
                        float _2024;
                        float _2025;
                        float _2026;
                        float _2027;
                        float _2028;
                        float _1783 = _1620;
                        float _1784 = _1621;
                        float _1785 = _1622;
                        float _1786 = _1623;
                        float _1787 = _1624;
                        float _1788 = _1625;
                        uint _1789 = _1635;
                        uint _1790;
                        vec4 _1816;
                        float _1817;
                        vec4 _1832;
                        vec3 _1844;
                        vec4 _1860;
                        vec4 _1876;
                        float _1923;
                        bool _1924;
                        for (;;)
                        {
                            uint _1800 = ((_1626 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_1789));
                            _1790 = (_1789 + 4294967295u) & _1789;
                            uint _1802 = _1800 * 40u;
                            _1816 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1802)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1802 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1802 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1802 + 3u)).x));
                            _1817 = _1816.w;
                            uint _1819 = (_1800 * 40u) + 4u;
                            _1832 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1819)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1819 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1819 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1819 + 3u)).x));
                            uint _1834 = (_1800 * 40u) + 8u;
                            _1844 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_1834)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1834 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1834 + 2u)).x));
                            uint _1847 = (_1800 * 40u) + 16u;
                            _1860 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1847)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1847 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1847 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1847 + 3u)).x));
                            uint _1863 = (_1800 * 40u) + 20u;
                            _1876 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1863)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1863 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1863 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1863 + 3u)).x));
                            uint _1879 = (_1800 * 40u) + 24u;
                            vec4 _1892 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1879)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1879 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1879 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1879 + 3u)).x));
                            uint _1898 = (_1800 * 40u) + 28u;
                            vec4 _1911 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1898)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1898 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1898 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1898 + 3u)).x));
                            _1923 = fma(_1246, _1911.z, fma(_1245, _1911.y, _1911.x * _1244)) + _1911.w;
                            _1924 = !((fma(_1246, _1892.z, fma(_1245, _1892.y, _1892.x * _1244)) + _1892.w) <= 0.0);
                            float frontier_phi_29_pred;
                            float frontier_phi_29_pred_1;
                            float frontier_phi_29_pred_2;
                            float frontier_phi_29_pred_3;
                            float frontier_phi_29_pred_4;
                            float frontier_phi_29_pred_5;
                            if (_1924)
                            {
                                float _1951 = _1816.x - _1244;
                                float _1952 = _1816.y - _1245;
                                float _1953 = _1816.z - _1246;
                                float _1954 = dot(vec3(_1951, _1952, _1953), vec3(_1951, _1952, _1953));
                                float _1957 = inversesqrt(_1954);
                                float _1958 = _1957 * _1951;
                                float _1959 = _1957 * _1952;
                                float _1960 = _1957 * _1953;
                                float _1964 = 1.0 - (_1954 / (_1817 * _1817));
                                float _2611 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
                                float _1965 = isnan(1.0) ? _2611 : (isnan(_2611) ? 1.0 : min(_2611, 1.0));
                                float _1969 = sqrt(_1954) * _1832.w;
                                float _1971 = 1.39999997615814208984375 / (_1969 + 1.39999997615814208984375);
                                float _1972 = _1971 * _1971;
                                float _1973 = 1.0 - _1972;
                                float _1975 = (_1973 * dot(vec3(_1958, _1959, _1960), vec3(_302, _305, _308))) + _1972;
                                float _1978 = _1969 * _1969;
                                float _1982 = (fma(_1246, _1860.z, fma(_1245, _1860.y, _1860.x * _1244)) + _1860.w) / _1923;
                                float _1983 = (fma(_1246, _1876.z, fma(_1245, _1876.y, _1876.x * _1244)) + _1876.w) / _1923;
                                float _1987 = 1.0 - dot(vec2(_1982, _1983), vec2(_1982, _1983));
                                float _2627 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
                                float _1988 = isnan(1.0) ? _2627 : (isnan(_2627) ? 1.0 : min(_2627, 1.0));
                                float _1989 = _1988 * (((isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0))) * _1965) / ((_1978 * 0.699999988079071044921875) + 1.0));
                                float _1999 = dot(vec3(_302, _305, _308), vec3((-0.0) - (_1244 * _1509), (-0.0) - (_1245 * _1509), (-0.0) - (_1246 * _1509)));
                                float _2638 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
                                float _2007 = (_1973 * dot(vec3(_302, _305, _308), vec3(_1958, _1959, _1960))) + _1972;
                                float _2649 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
                                float _2008 = isnan(1.0) ? _2649 : (isnan(_2649) ? 1.0 : min(_2649, 1.0));
                                float _2012 = (0.5 / (((isnan(1.0) ? _2638 : (isnan(_2638) ? 1.0 : min(_2638, 1.0))) + 9.9999999392252902907785028219223e-09) + _2008)) * _2008;
                                float _2660 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
                                float _2019 = (_1988 * _1965) * (((isnan(1.0) ? _2660 : (isnan(_2660) ? 1.0 : min(_2660, 1.0))) * 3.1415927410125732421875) / ((_1978 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_29_pred = _1989 * _1832.x;
                                frontier_phi_29_pred_1 = _2019 * _1844.z;
                                frontier_phi_29_pred_2 = _2019 * _1844.y;
                                frontier_phi_29_pred_3 = _2019 * _1844.x;
                                frontier_phi_29_pred_4 = _1989 * _1832.z;
                                frontier_phi_29_pred_5 = _1989 * _1832.y;
                            }
                            else
                            {
                                frontier_phi_29_pred = 0.0;
                                frontier_phi_29_pred_1 = 0.0;
                                frontier_phi_29_pred_2 = 0.0;
                                frontier_phi_29_pred_3 = 0.0;
                                frontier_phi_29_pred_4 = 0.0;
                                frontier_phi_29_pred_5 = 0.0;
                            }
                            _2026 = frontier_phi_29_pred;
                            _2025 = frontier_phi_29_pred_1;
                            _2024 = frontier_phi_29_pred_2;
                            _2023 = frontier_phi_29_pred_3;
                            _2028 = frontier_phi_29_pred_4;
                            _2027 = frontier_phi_29_pred_5;
                            _1773 = _2026 + _1786;
                            _1774 = _2027 + _1787;
                            _1775 = _2028 + _1788;
                            _1770 = _2023 + _1783;
                            _1771 = _2024 + _1784;
                            _1772 = _2025 + _1785;
                            if (_1790 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _1783 = _1770;
                                _1784 = _1771;
                                _1785 = _1772;
                                _1786 = _1773;
                                _1787 = _1774;
                                _1788 = _1775;
                                _1789 = _1790;
                                continue;
                            }
                        }
                        frontier_phi_23_pred = _1771;
                        frontier_phi_23_pred_1 = _1773;
                        frontier_phi_23_pred_2 = _1772;
                        frontier_phi_23_pred_3 = _1770;
                        frontier_phi_23_pred_4 = _1775;
                        frontier_phi_23_pred_5 = _1774;
                    }
                    _1487 = frontier_phi_23_pred;
                    _1491 = frontier_phi_23_pred_1;
                    _1489 = frontier_phi_23_pred_2;
                    _1485 = frontier_phi_23_pred_3;
                    _1495 = frontier_phi_23_pred_4;
                    _1493 = frontier_phi_23_pred_5;
                    uint _1627 = _1626 + 1u;
                    if (_1627 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1620 = _1485;
                        _1621 = _1487;
                        _1622 = _1489;
                        _1623 = _1491;
                        _1624 = _1493;
                        _1625 = _1495;
                        _1626 = _1627;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_11_12_ladder = _1495;
                frontier_phi_11_12_ladder_1 = _1493;
                frontier_phi_11_12_ladder_2 = _1491;
                frontier_phi_11_12_ladder_3 = _1489;
                frontier_phi_11_12_ladder_4 = _1487;
                frontier_phi_11_12_ladder_5 = _1485;
            }
            else
            {
                frontier_phi_11_12_ladder = _1379;
                frontier_phi_11_12_ladder_1 = _1377;
                frontier_phi_11_12_ladder_2 = _1375;
                frontier_phi_11_12_ladder_3 = _1373;
                frontier_phi_11_12_ladder_4 = _1371;
                frontier_phi_11_12_ladder_5 = _1369;
            }
            _1484 = frontier_phi_11_12_ladder_5;
            _1486 = frontier_phi_11_12_ladder_4;
            _1488 = frontier_phi_11_12_ladder_3;
            _1490 = frontier_phi_11_12_ladder_2;
            _1492 = frontier_phi_11_12_ladder_1;
            _1494 = frontier_phi_11_12_ladder;
        }
        float _1499 = isnan(1.0) ? _347 : (isnan(_347) ? 1.0 : min(_347, 1.0));
        _1303 = (_1499 * _1490) + _1092;
        _1305 = (_1499 * _1492) + _1093;
        _1307 = (_1499 * _1494) + _1094;
        _1309 = ((_1484 * 0.039999999105930328369140625) * _1499) + _1194;
        _1311 = ((_1486 * 0.039999999105930328369140625) * _1499) + _1195;
        _1313 = ((_1488 * 0.039999999105930328369140625) * _1499) + _1196;
    }
    else
    {
        _1303 = _1092;
        _1305 = _1093;
        _1307 = _1094;
        _1309 = _1194;
        _1311 = _1195;
        _1313 = _1196;
    }
    float _2676 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _2687 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _2698 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _2709 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _1335 = cbInstanceData._m0[_321 + 6u].w * (isnan(1.0) ? _2709 : (isnan(_2709) ? 1.0 : min(_2709, 1.0)));
    float _1340 = _280 / cbSceneParam._m0[86u].x;
    float _1341 = _281 / cbSceneParam._m0[86u].y;
    vec4 _1355 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1340, _1341, (log2((isnan(cbSceneParam._m0[77u].w) ? _213 : (isnan(_213) ? cbSceneParam._m0[77u].w : min(_213, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1357 = _1355.x;
    float _1358 = _1355.y;
    float _1359 = _1355.z;
    float _1360 = _1355.w;
    float _1433;
    float _1435;
    float _1437;
    float _1439;
    if (_213 > cbSceneParam._m0[78u].w)
    {
        float _1394 = isnan(_213) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _213 : min(cbSceneParam._m0[80u].w, _213));
        float _1395 = _1394 / _213;
        float _1406 = _1395 * _265;
        float _1407 = _266 * _1395;
        float _1408 = (-0.0) - _1407;
        float _1410 = _1395 * _267;
        float _1412 = (cbSceneParam._m0[77u].w * _1408) / _1394;
        float _1413 = _1412 + cbSceneParam._m0[79u].w;
        float _1414 = cbSceneParam._m0[79u].w - _1407;
        float _1420 = sqrt(((_1406 * _1406) + (_1407 * _1407)) + (_1410 * _1410));
        float _1423 = (1.0 - (cbSceneParam._m0[77u].w / _1394)) * _1420;
        float _1429 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1431 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1582;
        if (abs((_1408 - _1412) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1582 = ((((_1413 > 0.0) ? exp2(_1429 * _1413) : (2.0 - exp2(_1431 * _1413))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1423;
        }
        else
        {
            float _1542 = 1.0 / cbSceneParam._m0[80u].x;
            float _1543 = isnan(_1414) ? _1413 : (isnan(_1413) ? _1414 : max(_1413, _1414));
            float _1544 = isnan(_1414) ? _1413 : (isnan(_1413) ? _1414 : min(_1413, _1414));
            float _1553 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : min(_1543, 0.0));
            float _1554 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : min(_1544, 0.0));
            _1582 = ((abs(_1420 / _1408) * cbSceneParam._m0[80u].y) * ((((_1553 - _1554) * 2.0) - ((exp2(_1429 * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)))) - exp2(_1429 * (isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))))) * _1542)) - ((exp2(_1431 * _1553) - exp2(_1431 * _1554)) * _1542))) + (_1423 * cbSceneParam._m0[80u].z);
        }
        vec4 _1584 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1340, _1341, 1.0), 0.0);
        float _1593 = exp2((_1582 * (-1.44269502162933349609375)) * (1.0 - _1584.w));
        float _1594 = log2(_1593);
        float _1610 = log2(_1360);
        _1433 = (exp2(_1610 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1594 * cbSceneParam._m0[78u].x)) * _1584.x) / cbSceneParam._m0[78u].x)) + _1357;
        _1435 = (exp2(_1610 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1594 * cbSceneParam._m0[78u].y)) * _1584.y) / cbSceneParam._m0[78u].y)) + _1358;
        _1437 = (exp2(_1610 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1594 * cbSceneParam._m0[78u].z)) * _1584.z) / cbSceneParam._m0[78u].z)) + _1359;
        _1439 = _1593 * _1360;
    }
    else
    {
        _1433 = _1357;
        _1435 = _1358;
        _1437 = _1359;
        _1439 = _1360;
    }
    float _1451 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1452 = _1451 == 3.0;
    float _1454 = log2(_1439);
    float _1461 = exp2(_1454 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _2676 : (isnan(_2676) ? 1.0 : min(_2676, 1.0))) * (_1303 + ((isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0))) * _347))) + (_1309 * cbPerFrame._m0[3u].x));
    float _1462 = exp2(_1454 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _2687 : (isnan(_2687) ? 1.0 : min(_2687, 1.0))) * (_1305 + ((isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0))) * _347))) + (_1311 * cbPerFrame._m0[3u].x));
    float _1463 = exp2(_1454 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _2698 : (isnan(_2698) ? 1.0 : min(_2698, 1.0))) * (_1307 + ((isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0))) * _347))) + (_1313 * cbPerFrame._m0[3u].x));
    float _1472 = (_1451 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1472 * (_1452 ? _1461 : (_1461 + (cbSceneParam._m0[72u].w * _1433)));
    SV_Target.y = _1472 * (_1452 ? _1462 : (_1462 + (cbSceneParam._m0[72u].w * _1435)));
    SV_Target.z = _1472 * (_1452 ? _1463 : (_1463 + (cbSceneParam._m0[72u].w * _1437)));
    SV_Target.w = _1335;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _1335;
}


