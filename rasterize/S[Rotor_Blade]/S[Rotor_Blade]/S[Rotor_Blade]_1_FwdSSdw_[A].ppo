#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_Rotor_Blade_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _2222;
float _2223;
float _2224;
float _2225;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _158 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _159 = _158 * NORMAL.x;
    float _160 = _158 * NORMAL.y;
    float _161 = _158 * NORMAL.z;
    vec4 _181 = texture(sampler2D(S_Rotor_Blade_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _188 = _181.x * cbMtdParam._m0[9u].x;
    float _189 = _181.y * cbMtdParam._m0[9u].y;
    float _190 = _181.z * cbMtdParam._m0[9u].z;
    float _191 = _181.w * TEXCOORD_1.z;
    float _195 = inversesqrt(dot(vec3(_159, _160, _161), vec3(_159, _160, _161)));
    float _196 = _195 * _159;
    float _197 = _195 * _160;
    float _198 = _195 * _161;
    float _2234 = isnan(0.0) ? _191 : (isnan(_191) ? 0.0 : max(_191, 0.0));
    float _200 = isnan(1.0) ? _2234 : (isnan(_2234) ? 1.0 : min(_2234, 1.0));
    float _2245 = isnan(0.0) ? _188 : (isnan(_188) ? 0.0 : max(_188, 0.0));
    float _2256 = isnan(0.0) ? _189 : (isnan(_189) ? 0.0 : max(_189, 0.0));
    float _2267 = isnan(0.0) ? _190 : (isnan(_190) ? 0.0 : max(_190, 0.0));
    float _219 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    float _277 = inversesqrt(dot(vec3(_271, _272, _273), vec3(_271, _272, _273)));
    float _278 = _271 * _277;
    float _279 = _272 * _277;
    float _280 = _273 * _277;
    vec4 _285 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _287 = _285.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _406 = sqrt(((_271 * _271) + (_272 * _272)) + (_273 * _273));
        float _412 = (cbMatDynParam._m0[5u].x * _406) + cbMatDynParam._m0[5u].y;
        float _2278 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
        float _413 = isnan(1.0) ? _2278 : (isnan(_2278) ? 1.0 : min(_2278, 1.0));
        float _417 = (cbMatDynParam._m0[5u].z * _406) + cbMatDynParam._m0[5u].w;
        float _2289 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2289 : (isnan(_2289) ? 1.0 : min(_2289, 1.0))) - _413)) + _413) < ((_287 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _299 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _300 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _320 = fma(_198, cbSceneParam._m0[5u].z, fma(_197, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _196));
    float _323 = fma(_198, cbSceneParam._m0[6u].z, fma(_197, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _196));
    float _326 = fma(_198, cbSceneParam._m0[7u].z, fma(_197, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _196));
    uint _339 = uint(roundEven(NORMAL.w)) * 13u;
    uint _341 = _339 + 9u;
    uint _342 = _341 + uint(cbMatDynParam._m0[0u].w);
    float _348 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2245 : (isnan(_2245) ? 1.0 : min(_2245, 1.0)))) * cbInstanceData._m0[_342].x;
    float _349 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2256 : (isnan(_2256) ? 1.0 : min(_2256, 1.0)))) * cbInstanceData._m0[_342].y;
    float _350 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2267 : (isnan(_2267) ? 1.0 : min(_2267, 1.0)))) * cbInstanceData._m0[_342].z;
    float _2300 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _351 = isnan(1.0) ? _2300 : (isnan(_2300) ? 1.0 : min(_2300, 1.0));
    float _2311 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _352 = isnan(1.0) ? _2311 : (isnan(_2311) ? 1.0 : min(_2311, 1.0));
    float _2322 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _353 = isnan(1.0) ? _2322 : (isnan(_2322) ? 1.0 : min(_2322, 1.0));
    vec4 _362 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _299, cbSceneParam._m0[86u].y * _300));
    float _365 = _362.x * TEXCOORD_1.w;
    float _387 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _391 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _395 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _727;
    float _728;
    float _729;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _451 = fma(_395, cbModelParam._m0[26u].z, fma(_391, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _387));
        float _455 = fma(_395, cbModelParam._m0[27u].z, fma(_391, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _387));
        float _459 = fma(_395, cbModelParam._m0[28u].z, fma(_391, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _387));
        float _484 = _387 + _196;
        float _485 = _391 + _197;
        float _486 = _395 + _198;
        float _496 = fma(_486, cbModelParam._m0[26u].z, fma(_485, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _484)) - _451;
        float _497 = fma(_486, cbModelParam._m0[27u].z, fma(_485, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _484)) - _455;
        float _498 = fma(_486, cbModelParam._m0[28u].z, fma(_485, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _484)) - _459;
        float _502 = inversesqrt(dot(vec3(_496, _497, _498), vec3(_496, _497, _498)));
        float _515 = ((_502 * _496) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_451 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _516 = ((_502 * _497) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_455 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _517 = ((_502 * _498) / cbModelParam._m0[34u].z) + ((((((_459 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _520 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_515, _516, _517), 0.0);
        vec4 _527 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_515, _516, _517), 0.0);
        vec4 _534 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_515, _516, _517), 0.0);
        vec4 _541 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_515, _516, _517), 0.0);
        float _554 = exp2((_520.w + (-0.5)) * 20.0) * 2.0;
        float _562 = exp2((_527.w + (-0.5)) * 20.0) * 2.0;
        float _569 = exp2((_534.w + (-0.5)) * 20.0) * 2.0;
        float _576 = exp2((_541.w + (-0.5)) * 20.0) * 2.0;
        float _577 = _576 * (_541.x + (-0.5));
        float _578 = _576 * (_541.y + (-0.5));
        float _579 = _576 * (_541.z + (-0.5));
        float _580 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
        float _581 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
        float _582 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
        float _584 = ((_520.x + (-0.5)) * 0.5) * _554;
        float _586 = ((_527.x + (-0.5)) * 0.5) * _562;
        float _588 = ((_534.x + (-0.5)) * 0.5) * _569;
        float _589 = dot(vec3(_584, _586, _588), vec3(_584, _586, _588));
        float _594 = (_589 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_589);
        float _603 = (dot(vec3(_196, _197, _198), vec3(_594 * _584, _594 * _586, _594 * _588)) + 1.0) * 0.5;
        float _2348 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
        float _613 = sqrt(((_586 * _586) + (_584 * _584)) + (_588 * _588)) / (_580 + 9.9999997473787516355514526367188e-06);
        float _2359 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
        float _614 = isnan(1.0) ? _2359 : (isnan(_2359) ? 1.0 : min(_2359, 1.0));
        float _615 = _614 * 2.0;
        float _619 = (1.0 - _614) / (_614 + 1.0);
        float _2370 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
        float _620 = isnan(1.0) ? _2370 : (isnan(_2370) ? 1.0 : min(_2370, 1.0));
        float _629 = ((((1.0 - _620) * (_615 + 2.0)) * exp2(log2(isnan(1.0) ? _2348 : (isnan(_2348) ? 1.0 : min(_2348, 1.0))) * (_615 + 1.0))) + _620) * _580;
        float _631 = ((_520.y + (-0.5)) * 0.5) * _554;
        float _633 = ((_527.y + (-0.5)) * 0.5) * _562;
        float _635 = ((_534.y + (-0.5)) * 0.5) * _569;
        float _636 = dot(vec3(_631, _633, _635), vec3(_631, _633, _635));
        float _641 = (_636 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_636);
        float _649 = (dot(vec3(_196, _197, _198), vec3(_641 * _631, _641 * _633, _641 * _635)) + 1.0) * 0.5;
        float _2381 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
        float _658 = sqrt(((_633 * _633) + (_631 * _631)) + (_635 * _635)) / (_581 + 9.9999997473787516355514526367188e-06);
        float _2392 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
        float _659 = isnan(1.0) ? _2392 : (isnan(_2392) ? 1.0 : min(_2392, 1.0));
        float _660 = _659 * 2.0;
        float _664 = (1.0 - _659) / (_659 + 1.0);
        float _2403 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
        float _665 = isnan(1.0) ? _2403 : (isnan(_2403) ? 1.0 : min(_2403, 1.0));
        float _674 = ((((1.0 - _665) * (_660 + 2.0)) * exp2(log2(isnan(1.0) ? _2381 : (isnan(_2381) ? 1.0 : min(_2381, 1.0))) * (_660 + 1.0))) + _665) * _581;
        float _676 = ((_520.z + (-0.5)) * 0.5) * _554;
        float _678 = ((_527.z + (-0.5)) * 0.5) * _562;
        float _680 = ((_534.z + (-0.5)) * 0.5) * _569;
        float _681 = dot(vec3(_676, _678, _680), vec3(_676, _678, _680));
        float _686 = (_681 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_681);
        float _694 = (dot(vec3(_196, _197, _198), vec3(_686 * _676, _686 * _678, _686 * _680)) + 1.0) * 0.5;
        float _2414 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _703 = sqrt(((_678 * _678) + (_676 * _676)) + (_680 * _680)) / (_582 + 9.9999997473787516355514526367188e-06);
        float _2425 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _704 = isnan(1.0) ? _2425 : (isnan(_2425) ? 1.0 : min(_2425, 1.0));
        float _705 = _704 * 2.0;
        float _709 = (1.0 - _704) / (_704 + 1.0);
        float _2436 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _710 = isnan(1.0) ? _2436 : (isnan(_2436) ? 1.0 : min(_2436, 1.0));
        float _719 = ((((1.0 - _710) * (_705 + 2.0)) * exp2(log2(isnan(1.0) ? _2414 : (isnan(_2414) ? 1.0 : min(_2414, 1.0))) * (_705 + 1.0))) + _710) * _582;
        _727 = cbModelParam._m0[36u].z * (isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0)));
        _728 = cbModelParam._m0[36u].z * (isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0)));
        _729 = cbModelParam._m0[36u].z * (isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0)));
    }
    else
    {
        _727 = 0.0;
        _728 = 0.0;
        _729 = 0.0;
    }
    float _1027;
    float _1028;
    float _1029;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _758 = fma(_395, cbModelParam._m0[30u].z, fma(_391, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _387));
        float _762 = fma(_395, cbModelParam._m0[31u].z, fma(_391, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _387));
        float _766 = fma(_395, cbModelParam._m0[32u].z, fma(_391, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _387));
        float _789 = _387 + _196;
        float _790 = _391 + _197;
        float _791 = _395 + _198;
        float _801 = fma(_791, cbModelParam._m0[30u].z, fma(_790, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _789)) - _758;
        float _802 = fma(_791, cbModelParam._m0[31u].z, fma(_790, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _789)) - _762;
        float _803 = fma(_791, cbModelParam._m0[32u].z, fma(_790, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _789)) - _766;
        float _807 = inversesqrt(dot(vec3(_801, _802, _803), vec3(_801, _802, _803)));
        float _820 = ((_807 * _801) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_758 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _821 = ((_807 * _802) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_762 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _822 = ((_807 * _803) / cbModelParam._m0[35u].z) + ((((((_766 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _824 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        vec4 _831 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        float _857 = exp2((_824.w + (-0.5)) * 20.0) * 2.0;
        float _864 = exp2((_831.w + (-0.5)) * 20.0) * 2.0;
        float _871 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _878 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _879 = _878 * (_845.x + (-0.5));
        float _880 = _878 * (_845.y + (-0.5));
        float _881 = _878 * (_845.z + (-0.5));
        float _882 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _883 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _884 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _886 = ((_824.x + (-0.5)) * 0.5) * _857;
        float _888 = ((_831.x + (-0.5)) * 0.5) * _864;
        float _890 = ((_838.x + (-0.5)) * 0.5) * _871;
        float _891 = dot(vec3(_886, _888, _890), vec3(_886, _888, _890));
        float _896 = (_891 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_891);
        float _904 = (dot(vec3(_196, _197, _198), vec3(_896 * _886, _896 * _888, _896 * _890)) + 1.0) * 0.5;
        float _2477 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _913 = sqrt(((_888 * _888) + (_886 * _886)) + (_890 * _890)) / (_882 + 9.9999997473787516355514526367188e-06);
        float _2488 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _2488 : (isnan(_2488) ? 1.0 : min(_2488, 1.0));
        float _915 = _914 * 2.0;
        float _919 = (1.0 - _914) / (_914 + 1.0);
        float _2499 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _920 = isnan(1.0) ? _2499 : (isnan(_2499) ? 1.0 : min(_2499, 1.0));
        float _929 = ((((1.0 - _920) * (_915 + 2.0)) * exp2(log2(isnan(1.0) ? _2477 : (isnan(_2477) ? 1.0 : min(_2477, 1.0))) * (_915 + 1.0))) + _920) * _882;
        float _931 = ((_824.y + (-0.5)) * 0.5) * _857;
        float _933 = ((_831.y + (-0.5)) * 0.5) * _864;
        float _935 = ((_838.y + (-0.5)) * 0.5) * _871;
        float _936 = dot(vec3(_931, _933, _935), vec3(_931, _933, _935));
        float _941 = (_936 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_936);
        float _949 = (dot(vec3(_196, _197, _198), vec3(_941 * _931, _941 * _933, _941 * _935)) + 1.0) * 0.5;
        float _2510 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _958 = sqrt(((_933 * _933) + (_931 * _931)) + (_935 * _935)) / (_883 + 9.9999997473787516355514526367188e-06);
        float _2521 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _2521 : (isnan(_2521) ? 1.0 : min(_2521, 1.0));
        float _960 = _959 * 2.0;
        float _964 = (1.0 - _959) / (_959 + 1.0);
        float _2532 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _2532 : (isnan(_2532) ? 1.0 : min(_2532, 1.0));
        float _974 = ((((1.0 - _965) * (_960 + 2.0)) * exp2(log2(isnan(1.0) ? _2510 : (isnan(_2510) ? 1.0 : min(_2510, 1.0))) * (_960 + 1.0))) + _965) * _883;
        float _976 = ((_824.z + (-0.5)) * 0.5) * _857;
        float _978 = ((_831.z + (-0.5)) * 0.5) * _864;
        float _980 = ((_838.z + (-0.5)) * 0.5) * _871;
        float _981 = dot(vec3(_976, _978, _980), vec3(_976, _978, _980));
        float _986 = (_981 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_981);
        float _994 = (dot(vec3(_196, _197, _198), vec3(_986 * _976, _986 * _978, _986 * _980)) + 1.0) * 0.5;
        float _2543 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _1003 = sqrt(((_978 * _978) + (_976 * _976)) + (_980 * _980)) / (_884 + 9.9999997473787516355514526367188e-06);
        float _2554 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _2554 : (isnan(_2554) ? 1.0 : min(_2554, 1.0));
        float _1005 = _1004 * 2.0;
        float _1009 = (1.0 - _1004) / (_1004 + 1.0);
        float _2565 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _2565 : (isnan(_2565) ? 1.0 : min(_2565, 1.0));
        float _1019 = ((((1.0 - _1010) * (_1005 + 2.0)) * exp2(log2(isnan(1.0) ? _2543 : (isnan(_2543) ? 1.0 : min(_2543, 1.0))) * (_1005 + 1.0))) + _1010) * _884;
        _1027 = cbModelParam._m0[36u].w * (isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0)));
        _1028 = cbModelParam._m0[36u].w * (isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0)));
        _1029 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0)));
    }
    else
    {
        _1027 = 0.0;
        _1028 = 0.0;
        _1029 = 0.0;
    }
    float _1039 = (cbModelParam._m0[1u].x * (_1027 - _727)) + _727;
    float _1040 = (cbModelParam._m0[1u].x * (_1028 - _728)) + _728;
    float _1041 = (cbModelParam._m0[1u].x * (_1029 - _729)) + _729;
    float _1062 = fma(_1041, cbSceneParam._m0[89u].z, fma(_1040, cbSceneParam._m0[89u].y, _1039 * cbSceneParam._m0[89u].x));
    float _1065 = fma(_1041, cbSceneParam._m0[90u].z, fma(_1040, cbSceneParam._m0[90u].y, _1039 * cbSceneParam._m0[90u].x));
    float _1068 = fma(_1041, cbSceneParam._m0[91u].z, fma(_1040, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1039));
    vec4 _1076 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_299, _300));
    float _1078 = _1076.w;
    float _1090 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1078);
    float _1091 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1078);
    float _1092 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1078);
    float _2606 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
    float _1093 = isnan(1.0) ? _2606 : (isnan(_2606) ? 1.0 : min(_2606, 1.0));
    float _2617 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _1094 = isnan(1.0) ? _2617 : (isnan(_2617) ? 1.0 : min(_2617, 1.0));
    float _2628 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _1095 = isnan(1.0) ? _2628 : (isnan(_2628) ? 1.0 : min(_2628, 1.0));
    uvec4 _1099 = floatBitsToUint(cbInstanceData._m0[_339 + 5u]);
    uint _1101 = _1099.x * 14u;
    uint _1103 = _1101 + 13u;
    float _1108 = _365 + (-1.0);
    float _1112 = (cbLight._m0[_1103].x * _1108) + 1.0;
    float _1113 = (cbLight._m0[_1103].y * _1108) + 1.0;
    uint _1114 = _1101 + 5u;
    float _1120 = isnan(1.0) ? _1113 : (isnan(_1113) ? 1.0 : min(_1113, 1.0));
    uint _1124 = _1101 + 4u;
    float _1134 = isnan(1.0) ? _1112 : (isnan(_1112) ? 1.0 : min(_1112, 1.0));
    uint _1138 = _1101 | 1u;
    float _1149 = dot(vec3(cbLight._m0[_1101].xyz), vec3(_196, _197, _198));
    float _1152 = dot(vec3(cbLight._m0[_1138].xyz), vec3(_196, _197, _198));
    float _2649 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
    float _2660 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
    float _1157 = (isnan(1.0) ? _2649 : (isnan(_2649) ? 1.0 : min(_2649, 1.0))) * 0.3183098733425140380859375;
    float _1159 = (isnan(1.0) ? _2660 : (isnan(_2660) ? 1.0 : min(_2660, 1.0))) * 0.3183098733425140380859375;
    float _1166 = ((cbLight._m0[_1114].x * _1120) * _1159) + (((cbLight._m0[_1124].x * _1093) * _1134) * _1157);
    float _1167 = ((_1120 * cbLight._m0[_1114].y) * _1159) + (((cbLight._m0[_1124].y * _1094) * _1134) * _1157);
    float _1168 = ((_1120 * cbLight._m0[_1114].z) * _1159) + (((cbLight._m0[_1124].z * _1095) * _1134) * _1157);
    uint _1169 = _1101 + 8u;
    float _1175 = cbLight._m0[_1101].x + _278;
    float _1176 = cbLight._m0[_1101].y + _279;
    float _1177 = cbLight._m0[_1101].z + _280;
    float _1181 = inversesqrt(dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177)));
    float _1185 = dot(vec3(_196, _197, _198), vec3(cbLight._m0[_1101].xyz));
    float _2671 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
    float _1188 = isnan(1.0) ? _2671 : (isnan(_2671) ? 1.0 : min(_2671, 1.0));
    float _1189 = dot(vec3(_196, _197, _198), vec3(_278, _279, _280));
    float _2682 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
    float _1192 = isnan(1.0) ? _2682 : (isnan(_2682) ? 1.0 : min(_2682, 1.0));
    float _1193 = dot(vec3(cbLight._m0[_1101].xyz), vec3(_1175 * _1181, _1176 * _1181, _1177 * _1181));
    float _2693 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
    float _1204 = (exp2(log2(1.0 - (isnan(1.0) ? _2693 : (isnan(_2693) ? 1.0 : min(_2693, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1210 = (0.5 / ((_1188 + 9.9999999392252902907785028219223e-09) + _1192)) * _1188;
    float _2704 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
    float _1212 = (isnan(1.0) ? _2704 : (isnan(_2704) ? 1.0 : min(_2704, 1.0))) * 0.31831014156341552734375;
    uint _1226 = _1101 + 9u;
    float _1232 = cbLight._m0[_1138].x + _278;
    float _1233 = cbLight._m0[_1138].y + _279;
    float _1234 = cbLight._m0[_1138].z + _280;
    float _1238 = inversesqrt(dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234)));
    float _1242 = dot(vec3(_196, _197, _198), vec3(cbLight._m0[_1138].xyz));
    float _2715 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
    float _1245 = isnan(1.0) ? _2715 : (isnan(_2715) ? 1.0 : min(_2715, 1.0));
    float _1246 = dot(vec3(cbLight._m0[_1138].xyz), vec3(_1232 * _1238, _1233 * _1238, _1234 * _1238));
    float _2726 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
    float _1255 = (exp2(log2(1.0 - (isnan(1.0) ? _2726 : (isnan(_2726) ? 1.0 : min(_2726, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1259 = (0.5 / ((_1245 + 9.9999999392252902907785028219223e-09) + _1192)) * _1245;
    float _2737 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
    float _1261 = (isnan(1.0) ? _2737 : (isnan(_2737) ? 1.0 : min(_2737, 1.0))) * 0.31831014156341552734375;
    float _1271 = (((_1255 * cbLight._m0[_1226].x) * _1261) * _1120) + ((((cbLight._m0[_1169].x * _1093) * _1204) * _1212) * _1134);
    float _1272 = (((_1255 * cbLight._m0[_1226].y) * _1261) * _1120) + ((((cbLight._m0[_1169].y * _1094) * _1204) * _1212) * _1134);
    float _1273 = (((_1255 * cbLight._m0[_1226].z) * _1261) * _1120) + ((((cbLight._m0[_1169].z * _1095) * _1204) * _1212) * _1134);
    float _1380;
    float _1382;
    float _1384;
    float _1386;
    float _1388;
    float _1390;
    if (_1099.y == 0u)
    {
        float _1320 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1321 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1320;
        float _1322 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1320;
        float _1323 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1320;
        uvec4 _1335 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1336 = _1335.x;
        uint _1347 = uint((float(_1335.y) * floor(float(uint(cbSceneParam._m0[85u].y * _300) / _1336))) + floor(float(uint(cbSceneParam._m0[85u].x * _299) / _1336)));
        float _1357 = (log2(_1323 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1358 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        uint _1361 = uint(isnan(14.0) ? _1358 : (isnan(_1358) ? 14.0 : min(_1358, 14.0)));
        uvec4 _1366 = texelFetch(g_lightClusterGridBuffer, int(((_1361 << 2u) + (_1347 << 6u)) >> 2u));
        uint _1367 = _1366.x;
        uint _1368 = _1335.z;
        float _1446;
        float _1448;
        float _1450;
        float _1452;
        float _1454;
        float _1456;
        if (((((1u << ((_1368 >> 4u) & 15u)) + 4294967295u) & _1367) == 0u) || ((_1368 & 240u) == 0u))
        {
            _1446 = 0.0;
            _1448 = 0.0;
            _1450 = 0.0;
            _1452 = 0.0;
            _1454 = 0.0;
            _1456 = 0.0;
        }
        else
        {
            float _1447;
            float _1449;
            float _1451;
            float _1453;
            float _1455;
            float _1457;
            float _1599 = 0.0;
            float _1600 = 0.0;
            float _1601 = 0.0;
            float _1602 = 0.0;
            float _1603 = 0.0;
            float _1604 = 0.0;
            uint _1605 = 0u;
            uint _1614;
            bool _1615;
            for (;;)
            {
                _1614 = texelFetch(g_lightClassification, int((((_1361 << 5u) + (_1347 << 9u)) + (_1605 << 2u)) >> 2u)).x;
                _1615 = _1614 == 0u;
                float frontier_phi_22_pred;
                float frontier_phi_22_pred_1;
                float frontier_phi_22_pred_2;
                float frontier_phi_22_pred_3;
                float frontier_phi_22_pred_4;
                float frontier_phi_22_pred_5;
                if (_1615)
                {
                    frontier_phi_22_pred = _1599;
                    frontier_phi_22_pred_1 = _1604;
                    frontier_phi_22_pred_2 = _1603;
                    frontier_phi_22_pred_3 = _1602;
                    frontier_phi_22_pred_4 = _1601;
                    frontier_phi_22_pred_5 = _1600;
                }
                else
                {
                    float _1744;
                    float _1745;
                    float _1746;
                    float _1747;
                    float _1748;
                    float _1749;
                    uint _1750;
                    _1744 = _1599;
                    _1745 = _1600;
                    _1746 = _1601;
                    _1747 = _1602;
                    _1748 = _1603;
                    _1749 = _1604;
                    _1750 = _1614;
                    float _1671;
                    float _1672;
                    float _1673;
                    float _1674;
                    float _1675;
                    float _1676;
                    for (;;)
                    {
                        uint _1754 = uint(findLSB(_1750)) + (_1605 << 5u);
                        uint _1751 = (_1750 + 4294967295u) & _1750;
                        uint _1756 = _1754 * 48u;
                        vec4 _1770 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1756)).x, texelFetch(g_PointLightRenderingBuffer, int(_1756 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1756 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1756 + 3u)).x));
                        uint _1776 = (_1754 * 48u) + 4u;
                        vec4 _1789 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1776)).x, texelFetch(g_PointLightRenderingBuffer, int(_1776 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1776 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1776 + 3u)).x));
                        uint _1795 = (_1754 * 48u) + 8u;
                        vec3 _1806 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_1795)).x, texelFetch(g_PointLightRenderingBuffer, int(_1795 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1795 + 2u)).x));
                        float _1810 = _1770.x - _1321;
                        float _1811 = _1770.y - _1322;
                        float _1812 = _1770.z - _1323;
                        float _1813 = dot(vec3(_1810, _1811, _1812), vec3(_1810, _1811, _1812));
                        float _1816 = inversesqrt(_1813);
                        float _1825 = 1.0 - (_1813 * _1770.w);
                        float _2758 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
                        float _1826 = isnan(1.0) ? _2758 : (isnan(_2758) ? 1.0 : min(_2758, 1.0));
                        float _1827 = sqrt(_1813) * _1789.w;
                        float _1830 = 1.39999997615814208984375 / (_1827 + 1.39999997615814208984375);
                        float _1831 = _1830 * _1830;
                        float _1834 = ((1.0 - _1831) * dot(vec3(_320, _323, _326), vec3(_1816 * _1810, _1816 * _1811, _1816 * _1812))) + _1831;
                        float _1837 = _1827 * _1827;
                        float _1841 = ((isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))) * _1826) / ((_1837 * 0.699999988079071044921875) + 1.0);
                        float _1845 = (-0.0) - _1321;
                        float _1846 = (-0.0) - _1322;
                        float _1847 = (-0.0) - _1323;
                        float _1851 = inversesqrt(dot(vec3(_1845, _1846, _1847), vec3(_1845, _1846, _1847)));
                        float _1855 = dot(vec3(_320, _323, _326), vec3(_1851 * _1845, _1851 * _1846, _1851 * _1847));
                        float _2774 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
                        float _2785 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
                        float _1859 = isnan(1.0) ? _2785 : (isnan(_2785) ? 1.0 : min(_2785, 1.0));
                        float _1863 = (0.5 / (((isnan(1.0) ? _2774 : (isnan(_2774) ? 1.0 : min(_2774, 1.0))) + 9.9999999392252902907785028219223e-09) + _1859)) * _1859;
                        float _2796 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
                        float _1872 = (((isnan(1.0) ? _2796 : (isnan(_2796) ? 1.0 : min(_2796, 1.0))) * 3.1415927410125732421875) / ((_1837 * 2.1991131305694580078125) + 3.141590118408203125)) * _1826;
                        _1674 = (_1841 * _1789.x) + _1747;
                        _1675 = (_1841 * _1789.y) + _1748;
                        _1676 = (_1841 * _1789.z) + _1749;
                        _1671 = (_1872 * _1806.x) + _1744;
                        _1672 = (_1872 * _1806.y) + _1745;
                        _1673 = (_1872 * _1806.z) + _1746;
                        if (_1751 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1744 = _1671;
                            _1745 = _1672;
                            _1746 = _1673;
                            _1747 = _1674;
                            _1748 = _1675;
                            _1749 = _1676;
                            _1750 = _1751;
                        }
                    }
                    frontier_phi_22_pred = _1671;
                    frontier_phi_22_pred_1 = _1676;
                    frontier_phi_22_pred_2 = _1675;
                    frontier_phi_22_pred_3 = _1674;
                    frontier_phi_22_pred_4 = _1673;
                    frontier_phi_22_pred_5 = _1672;
                }
                _1447 = frontier_phi_22_pred;
                _1457 = frontier_phi_22_pred_1;
                _1455 = frontier_phi_22_pred_2;
                _1453 = frontier_phi_22_pred_3;
                _1451 = frontier_phi_22_pred_4;
                _1449 = frontier_phi_22_pred_5;
                uint _1606 = _1605 + 1u;
                if (_1606 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1599 = _1447;
                    _1600 = _1449;
                    _1601 = _1451;
                    _1602 = _1453;
                    _1603 = _1455;
                    _1604 = _1457;
                    _1605 = _1606;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1446 = _1447;
            _1448 = _1449;
            _1450 = _1451;
            _1452 = _1453;
            _1454 = _1455;
            _1456 = _1457;
        }
        uvec4 _1460 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1461 = _1460.z;
        uint _1463 = (_1461 >> 8u) & 15u;
        float _1570;
        float _1572;
        float _1574;
        float _1576;
        float _1578;
        float _1580;
        if (((4294967295u << _1463) & _1367) == 0u)
        {
            _1570 = _1446;
            _1572 = _1448;
            _1574 = _1450;
            _1576 = _1452;
            _1578 = _1454;
            _1580 = _1456;
        }
        else
        {
            float _1595 = inversesqrt(dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323)));
            float frontier_phi_14_15_ladder;
            float frontier_phi_14_15_ladder_1;
            float frontier_phi_14_15_ladder_2;
            float frontier_phi_14_15_ladder_3;
            float frontier_phi_14_15_ladder_4;
            float frontier_phi_14_15_ladder_5;
            if (_1463 < ((_1461 >> 12u) & 15u))
            {
                float _1571;
                float _1573;
                float _1575;
                float _1577;
                float _1579;
                float _1581;
                float _1727 = _1446;
                float _1728 = _1448;
                float _1729 = _1450;
                float _1730 = _1452;
                float _1731 = _1454;
                float _1732 = _1456;
                uint _1733 = _1463;
                uint _1742;
                bool _1743;
                for (;;)
                {
                    _1742 = texelFetch(g_lightClassification, int((((_1361 << 5u) + (_1347 << 9u)) + (_1733 << 2u)) >> 2u)).x;
                    _1743 = _1742 == 0u;
                    float frontier_phi_33_pred;
                    float frontier_phi_33_pred_1;
                    float frontier_phi_33_pred_2;
                    float frontier_phi_33_pred_3;
                    float frontier_phi_33_pred_4;
                    float frontier_phi_33_pred_5;
                    if (_1743)
                    {
                        frontier_phi_33_pred = _1732;
                        frontier_phi_33_pred_1 = _1727;
                        frontier_phi_33_pred_2 = _1728;
                        frontier_phi_33_pred_3 = _1729;
                        frontier_phi_33_pred_4 = _1730;
                        frontier_phi_33_pred_5 = _1731;
                    }
                    else
                    {
                        float _1886;
                        float _1887;
                        float _1888;
                        float _1889;
                        float _1890;
                        float _1891;
                        float _2139;
                        float _2140;
                        float _2141;
                        float _2142;
                        float _2143;
                        float _2144;
                        float _1899 = _1727;
                        float _1900 = _1728;
                        float _1901 = _1729;
                        float _1902 = _1730;
                        float _1903 = _1731;
                        float _1904 = _1732;
                        uint _1905 = _1742;
                        uint _1906;
                        vec4 _1932;
                        float _1933;
                        vec4 _1948;
                        vec3 _1960;
                        vec4 _1976;
                        vec4 _1992;
                        float _2039;
                        bool _2040;
                        for (;;)
                        {
                            uint _1916 = ((_1733 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_1905));
                            _1906 = (_1905 + 4294967295u) & _1905;
                            uint _1918 = _1916 * 40u;
                            _1932 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1918)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1918 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1918 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1918 + 3u)).x));
                            _1933 = _1932.w;
                            uint _1935 = (_1916 * 40u) + 4u;
                            _1948 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1935)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1935 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1935 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1935 + 3u)).x));
                            uint _1950 = (_1916 * 40u) + 8u;
                            _1960 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_1950)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1950 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1950 + 2u)).x));
                            uint _1963 = (_1916 * 40u) + 16u;
                            _1976 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1963)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1963 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1963 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1963 + 3u)).x));
                            uint _1979 = (_1916 * 40u) + 20u;
                            _1992 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1979)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1979 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1979 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1979 + 3u)).x));
                            uint _1995 = (_1916 * 40u) + 24u;
                            vec4 _2008 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1995)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1995 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1995 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1995 + 3u)).x));
                            uint _2014 = (_1916 * 40u) + 28u;
                            vec4 _2027 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2014 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2014 + 3u)).x));
                            _2039 = fma(_1323, _2027.z, fma(_1322, _2027.y, _2027.x * _1321)) + _2027.w;
                            _2040 = !((fma(_1323, _2008.z, fma(_1322, _2008.y, _2008.x * _1321)) + _2008.w) <= 0.0);
                            float frontier_phi_39_pred;
                            float frontier_phi_39_pred_1;
                            float frontier_phi_39_pred_2;
                            float frontier_phi_39_pred_3;
                            float frontier_phi_39_pred_4;
                            float frontier_phi_39_pred_5;
                            if (_2040)
                            {
                                float _2067 = _1932.x - _1321;
                                float _2068 = _1932.y - _1322;
                                float _2069 = _1932.z - _1323;
                                float _2070 = dot(vec3(_2067, _2068, _2069), vec3(_2067, _2068, _2069));
                                float _2073 = inversesqrt(_2070);
                                float _2074 = _2073 * _2067;
                                float _2075 = _2073 * _2068;
                                float _2076 = _2073 * _2069;
                                float _2080 = 1.0 - (_2070 / (_1933 * _1933));
                                float _2807 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
                                float _2081 = isnan(1.0) ? _2807 : (isnan(_2807) ? 1.0 : min(_2807, 1.0));
                                float _2085 = sqrt(_2070) * _1948.w;
                                float _2087 = 1.39999997615814208984375 / (_2085 + 1.39999997615814208984375);
                                float _2088 = _2087 * _2087;
                                float _2089 = 1.0 - _2088;
                                float _2091 = (_2089 * dot(vec3(_2074, _2075, _2076), vec3(_320, _323, _326))) + _2088;
                                float _2094 = _2085 * _2085;
                                float _2098 = (fma(_1323, _1976.z, fma(_1322, _1976.y, _1976.x * _1321)) + _1976.w) / _2039;
                                float _2099 = (fma(_1323, _1992.z, fma(_1322, _1992.y, _1992.x * _1321)) + _1992.w) / _2039;
                                float _2103 = 1.0 - dot(vec2(_2098, _2099), vec2(_2098, _2099));
                                float _2823 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
                                float _2104 = isnan(1.0) ? _2823 : (isnan(_2823) ? 1.0 : min(_2823, 1.0));
                                float _2105 = _2104 * (((isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0))) * _2081) / ((_2094 * 0.699999988079071044921875) + 1.0));
                                float _2115 = dot(vec3(_320, _323, _326), vec3((-0.0) - (_1321 * _1595), (-0.0) - (_1322 * _1595), (-0.0) - (_1323 * _1595)));
                                float _2834 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
                                float _2123 = (_2089 * dot(vec3(_320, _323, _326), vec3(_2074, _2075, _2076))) + _2088;
                                float _2845 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
                                float _2124 = isnan(1.0) ? _2845 : (isnan(_2845) ? 1.0 : min(_2845, 1.0));
                                float _2128 = (0.5 / (((isnan(1.0) ? _2834 : (isnan(_2834) ? 1.0 : min(_2834, 1.0))) + 9.9999999392252902907785028219223e-09) + _2124)) * _2124;
                                float _2856 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
                                float _2135 = (_2104 * _2081) * (((isnan(1.0) ? _2856 : (isnan(_2856) ? 1.0 : min(_2856, 1.0))) * 3.1415927410125732421875) / ((_2094 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_39_pred = _2105 * _1948.y;
                                frontier_phi_39_pred_1 = _2105 * _1948.z;
                                frontier_phi_39_pred_2 = _2105 * _1948.x;
                                frontier_phi_39_pred_3 = _2135 * _1960.z;
                                frontier_phi_39_pred_4 = _2135 * _1960.y;
                                frontier_phi_39_pred_5 = _2135 * _1960.x;
                            }
                            else
                            {
                                frontier_phi_39_pred = 0.0;
                                frontier_phi_39_pred_1 = 0.0;
                                frontier_phi_39_pred_2 = 0.0;
                                frontier_phi_39_pred_3 = 0.0;
                                frontier_phi_39_pred_4 = 0.0;
                                frontier_phi_39_pred_5 = 0.0;
                            }
                            _2143 = frontier_phi_39_pred;
                            _2144 = frontier_phi_39_pred_1;
                            _2142 = frontier_phi_39_pred_2;
                            _2141 = frontier_phi_39_pred_3;
                            _2140 = frontier_phi_39_pred_4;
                            _2139 = frontier_phi_39_pred_5;
                            _1889 = _2142 + _1902;
                            _1890 = _2143 + _1903;
                            _1891 = _2144 + _1904;
                            _1886 = _2139 + _1899;
                            _1887 = _2140 + _1900;
                            _1888 = _2141 + _1901;
                            if (_1906 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _1899 = _1886;
                                _1900 = _1887;
                                _1901 = _1888;
                                _1902 = _1889;
                                _1903 = _1890;
                                _1904 = _1891;
                                _1905 = _1906;
                                continue;
                            }
                        }
                        frontier_phi_33_pred = _1891;
                        frontier_phi_33_pred_1 = _1886;
                        frontier_phi_33_pred_2 = _1887;
                        frontier_phi_33_pred_3 = _1888;
                        frontier_phi_33_pred_4 = _1889;
                        frontier_phi_33_pred_5 = _1890;
                    }
                    _1581 = frontier_phi_33_pred;
                    _1571 = frontier_phi_33_pred_1;
                    _1573 = frontier_phi_33_pred_2;
                    _1575 = frontier_phi_33_pred_3;
                    _1577 = frontier_phi_33_pred_4;
                    _1579 = frontier_phi_33_pred_5;
                    uint _1734 = _1733 + 1u;
                    if (_1734 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1727 = _1571;
                        _1728 = _1573;
                        _1729 = _1575;
                        _1730 = _1577;
                        _1731 = _1579;
                        _1732 = _1581;
                        _1733 = _1734;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_14_15_ladder = _1581;
                frontier_phi_14_15_ladder_1 = _1579;
                frontier_phi_14_15_ladder_2 = _1577;
                frontier_phi_14_15_ladder_3 = _1575;
                frontier_phi_14_15_ladder_4 = _1573;
                frontier_phi_14_15_ladder_5 = _1571;
            }
            else
            {
                frontier_phi_14_15_ladder = _1456;
                frontier_phi_14_15_ladder_1 = _1454;
                frontier_phi_14_15_ladder_2 = _1452;
                frontier_phi_14_15_ladder_3 = _1450;
                frontier_phi_14_15_ladder_4 = _1448;
                frontier_phi_14_15_ladder_5 = _1446;
            }
            _1570 = frontier_phi_14_15_ladder_5;
            _1572 = frontier_phi_14_15_ladder_4;
            _1574 = frontier_phi_14_15_ladder_3;
            _1576 = frontier_phi_14_15_ladder_2;
            _1578 = frontier_phi_14_15_ladder_1;
            _1580 = frontier_phi_14_15_ladder;
        }
        float _1585 = isnan(1.0) ? _365 : (isnan(_365) ? 1.0 : min(_365, 1.0));
        _1380 = (_1585 * _1576) + _1166;
        _1382 = (_1585 * _1578) + _1167;
        _1384 = (_1585 * _1580) + _1168;
        _1386 = ((_1570 * 0.039999999105930328369140625) * _1585) + _1271;
        _1388 = ((_1572 * 0.039999999105930328369140625) * _1585) + _1272;
        _1390 = ((_1574 * 0.039999999105930328369140625) * _1585) + _1273;
    }
    else
    {
        _1380 = _1166;
        _1382 = _1167;
        _1384 = _1168;
        _1386 = _1271;
        _1388 = _1272;
        _1390 = _1273;
    }
    float _2872 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _2883 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _2894 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _2905 = isnan(0.0) ? _200 : (isnan(_200) ? 0.0 : max(_200, 0.0));
    float _1405 = ((isnan(1.0) ? _2872 : (isnan(_2872) ? 1.0 : min(_2872, 1.0))) * (_1380 + ((isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0))) * _365))) + (_1386 * cbPerFrame._m0[3u].x);
    float _1406 = ((isnan(1.0) ? _2883 : (isnan(_2883) ? 1.0 : min(_2883, 1.0))) * (_1382 + ((isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0))) * _365))) + (_1388 * cbPerFrame._m0[3u].x);
    float _1407 = ((isnan(1.0) ? _2894 : (isnan(_2894) ? 1.0 : min(_2894, 1.0))) * (_1384 + ((isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0))) * _365))) + (_1390 * cbPerFrame._m0[3u].x);
    float _1412 = cbInstanceData._m0[_339 + 6u].w * (isnan(1.0) ? _2905 : (isnan(_2905) ? 1.0 : min(_2905, 1.0)));
    float _1417 = _299 / cbSceneParam._m0[86u].x;
    float _1418 = _300 / cbSceneParam._m0[86u].y;
    vec4 _1432 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1417, _1418, (log2((isnan(cbSceneParam._m0[77u].w) ? _219 : (isnan(_219) ? cbSceneParam._m0[77u].w : min(_219, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1434 = _1432.x;
    float _1435 = _1432.y;
    float _1436 = _1432.z;
    float _1437 = _1432.w;
    float _1510;
    float _1512;
    float _1514;
    float _1516;
    if (_219 > cbSceneParam._m0[78u].w)
    {
        float _1471 = isnan(_219) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _219 : min(cbSceneParam._m0[80u].w, _219));
        float _1472 = _1471 / _219;
        float _1483 = _1472 * _271;
        float _1484 = _272 * _1472;
        float _1485 = (-0.0) - _1484;
        float _1487 = _1472 * _273;
        float _1489 = (cbSceneParam._m0[77u].w * _1485) / _1471;
        float _1490 = _1489 + cbSceneParam._m0[79u].w;
        float _1491 = cbSceneParam._m0[79u].w - _1484;
        float _1497 = sqrt(((_1483 * _1483) + (_1484 * _1484)) + (_1487 * _1487));
        float _1500 = (1.0 - (cbSceneParam._m0[77u].w / _1471)) * _1497;
        float _1506 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1508 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1684;
        if (abs((_1485 - _1489) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1684 = ((((_1490 > 0.0) ? exp2(_1506 * _1490) : (2.0 - exp2(_1508 * _1490))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1500;
        }
        else
        {
            float _1628 = 1.0 / cbSceneParam._m0[80u].x;
            float _1629 = isnan(_1491) ? _1490 : (isnan(_1490) ? _1491 : max(_1490, _1491));
            float _1630 = isnan(_1491) ? _1490 : (isnan(_1490) ? _1491 : min(_1490, _1491));
            float _1639 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : min(_1629, 0.0));
            float _1640 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : min(_1630, 0.0));
            _1684 = ((abs(_1497 / _1485) * cbSceneParam._m0[80u].y) * ((((_1639 - _1640) * 2.0) - ((exp2(_1506 * (isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)))) - exp2(_1506 * (isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))))) * _1628)) - ((exp2(_1508 * _1639) - exp2(_1508 * _1640)) * _1628))) + (_1500 * cbSceneParam._m0[80u].z);
        }
        vec4 _1686 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1417, _1418, 1.0), 0.0);
        float _1695 = exp2((_1684 * (-1.44269502162933349609375)) * (1.0 - _1686.w));
        float _1696 = log2(_1695);
        float _1712 = log2(_1437);
        _1510 = (exp2(_1712 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1696 * cbSceneParam._m0[78u].x)) * _1686.x) / cbSceneParam._m0[78u].x)) + _1434;
        _1512 = (exp2(_1712 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1696 * cbSceneParam._m0[78u].y)) * _1686.y) / cbSceneParam._m0[78u].y)) + _1435;
        _1514 = (exp2(_1712 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1696 * cbSceneParam._m0[78u].z)) * _1686.z) / cbSceneParam._m0[78u].z)) + _1436;
        _1516 = _1695 * _1437;
    }
    else
    {
        _1510 = _1434;
        _1512 = _1435;
        _1514 = _1436;
        _1516 = _1437;
    }
    bool _1722;
    vec4 _1526;
    vec4 _1549;
    float _1551;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    bool _1569;
    for (;;)
    {
        _1526 = cbMatDynParam._m0[0u];
        float _1528 = roundEven(_1526.y);
        bool _1529 = _1528 == 3.0;
        float _1531 = log2(_1516);
        float _1538 = exp2(_1531 * cbSceneParam._m0[78u].x) * _1405;
        float _1539 = exp2(_1531 * cbSceneParam._m0[78u].y) * _1406;
        float _1540 = exp2(_1531 * cbSceneParam._m0[78u].z) * _1407;
        float _1547 = _287 + (-0.5);
        _1549 = cbMtdParam._m0[1u];
        _1551 = _1549.y * _1547;
        float _1554 = (_1528 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1555 = _1554 * (_1529 ? _1538 : (_1538 + (cbSceneParam._m0[72u].w * _1510)));
        _1556 = _1554 * (_1529 ? _1539 : (_1539 + (cbSceneParam._m0[72u].w * _1512)));
        _1557 = _1554 * (_1529 ? _1540 : (_1540 + (cbSceneParam._m0[72u].w * _1514)));
        _1558 = _1547 * 0.999000012874603271484375;
        _1569 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1569)
        {
            if ((cbInstanceData._m0[_339 + 7u].x + _1558) < 0.5)
            {
                _1722 = true;
                break;
            }
        }
        uint _1663 = _341 + uint(_1526.w);
        if ((cbInstanceData._m0[_1663].w < 1.0) && ((cbInstanceData._m0[_1663].w + _1558) < 0.5))
        {
            _1722 = true;
            break;
        }
        if ((_1551 + _191) < _1549.x)
        {
            _1722 = true;
            break;
        }
        _1722 = false;
        break;
    }
    float _1877;
    if (_1722)
    {
        discard_state = true;
        _1877 = 0.0;
    }
    else
    {
        _1877 = _1412;
    }
    SV_Target.x = _1555;
    SV_Target.y = _1556;
    SV_Target.z = _1557;
    SV_Target.w = _1877;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _1412;
    discard_exit();
}


