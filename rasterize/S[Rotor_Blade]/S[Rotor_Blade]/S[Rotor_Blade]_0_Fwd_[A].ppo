#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_Rotor_Blade_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _2193;
float _2194;
float _2195;
float _2196;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _156 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _157 = _156 * NORMAL.x;
    float _158 = _156 * NORMAL.y;
    float _159 = _156 * NORMAL.z;
    vec4 _179 = texture(sampler2D(S_Rotor_Blade_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _186 = _179.x * cbMtdParam._m0[9u].x;
    float _187 = _179.y * cbMtdParam._m0[9u].y;
    float _188 = _179.z * cbMtdParam._m0[9u].z;
    float _189 = _179.w * TEXCOORD_1.z;
    float _193 = inversesqrt(dot(vec3(_157, _158, _159), vec3(_157, _158, _159)));
    float _194 = _193 * _157;
    float _195 = _193 * _158;
    float _196 = _193 * _159;
    float _2205 = isnan(0.0) ? _189 : (isnan(_189) ? 0.0 : max(_189, 0.0));
    float _198 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
    float _2216 = isnan(0.0) ? _186 : (isnan(_186) ? 0.0 : max(_186, 0.0));
    float _2227 = isnan(0.0) ? _187 : (isnan(_187) ? 0.0 : max(_187, 0.0));
    float _2238 = isnan(0.0) ? _188 : (isnan(_188) ? 0.0 : max(_188, 0.0));
    float _217 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    float _275 = inversesqrt(dot(vec3(_269, _270, _271), vec3(_269, _270, _271)));
    float _276 = _269 * _275;
    float _277 = _270 * _275;
    float _278 = _271 * _275;
    vec4 _283 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _285 = _283.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _404 = sqrt(((_269 * _269) + (_270 * _270)) + (_271 * _271));
        float _410 = (cbMatDynParam._m0[5u].x * _404) + cbMatDynParam._m0[5u].y;
        float _2249 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
        float _411 = isnan(1.0) ? _2249 : (isnan(_2249) ? 1.0 : min(_2249, 1.0));
        float _415 = (cbMatDynParam._m0[5u].z * _404) + cbMatDynParam._m0[5u].w;
        float _2260 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0))) - _411)) + _411) < ((_285 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _297 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _298 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _318 = fma(_196, cbSceneParam._m0[5u].z, fma(_195, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _194));
    float _321 = fma(_196, cbSceneParam._m0[6u].z, fma(_195, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _194));
    float _324 = fma(_196, cbSceneParam._m0[7u].z, fma(_195, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _194));
    uint _337 = uint(roundEven(NORMAL.w)) * 13u;
    uint _339 = _337 + 9u;
    uint _340 = _339 + uint(cbMatDynParam._m0[0u].w);
    float _346 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2216 : (isnan(_2216) ? 1.0 : min(_2216, 1.0)))) * cbInstanceData._m0[_340].x;
    float _347 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0)))) * cbInstanceData._m0[_340].y;
    float _348 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2238 : (isnan(_2238) ? 1.0 : min(_2238, 1.0)))) * cbInstanceData._m0[_340].z;
    float _2271 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _349 = isnan(1.0) ? _2271 : (isnan(_2271) ? 1.0 : min(_2271, 1.0));
    float _2282 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _350 = isnan(1.0) ? _2282 : (isnan(_2282) ? 1.0 : min(_2282, 1.0));
    float _2293 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _351 = isnan(1.0) ? _2293 : (isnan(_2293) ? 1.0 : min(_2293, 1.0));
    vec4 _360 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _297, cbSceneParam._m0[86u].y * _298));
    float _363 = _360.x * TEXCOORD_1.w;
    float _385 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _389 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _393 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _725;
    float _726;
    float _727;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _449 = fma(_393, cbModelParam._m0[26u].z, fma(_389, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _385));
        float _453 = fma(_393, cbModelParam._m0[27u].z, fma(_389, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _385));
        float _457 = fma(_393, cbModelParam._m0[28u].z, fma(_389, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _385));
        float _482 = _385 + _194;
        float _483 = _389 + _195;
        float _484 = _393 + _196;
        float _494 = fma(_484, cbModelParam._m0[26u].z, fma(_483, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _482)) - _449;
        float _495 = fma(_484, cbModelParam._m0[27u].z, fma(_483, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _482)) - _453;
        float _496 = fma(_484, cbModelParam._m0[28u].z, fma(_483, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _482)) - _457;
        float _500 = inversesqrt(dot(vec3(_494, _495, _496), vec3(_494, _495, _496)));
        float _513 = ((_500 * _494) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_449 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _514 = ((_500 * _495) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_453 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _515 = ((_500 * _496) / cbModelParam._m0[34u].z) + ((((((_457 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _518 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_513, _514, _515), 0.0);
        vec4 _525 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_513, _514, _515), 0.0);
        vec4 _532 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_513, _514, _515), 0.0);
        vec4 _539 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_513, _514, _515), 0.0);
        float _552 = exp2((_518.w + (-0.5)) * 20.0) * 2.0;
        float _560 = exp2((_525.w + (-0.5)) * 20.0) * 2.0;
        float _567 = exp2((_532.w + (-0.5)) * 20.0) * 2.0;
        float _574 = exp2((_539.w + (-0.5)) * 20.0) * 2.0;
        float _575 = _574 * (_539.x + (-0.5));
        float _576 = _574 * (_539.y + (-0.5));
        float _577 = _574 * (_539.z + (-0.5));
        float _578 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
        float _579 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
        float _580 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
        float _582 = ((_518.x + (-0.5)) * 0.5) * _552;
        float _584 = ((_525.x + (-0.5)) * 0.5) * _560;
        float _586 = ((_532.x + (-0.5)) * 0.5) * _567;
        float _587 = dot(vec3(_582, _584, _586), vec3(_582, _584, _586));
        float _592 = (_587 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_587);
        float _601 = (dot(vec3(_194, _195, _196), vec3(_592 * _582, _592 * _584, _592 * _586)) + 1.0) * 0.5;
        float _2319 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
        float _611 = sqrt(((_584 * _584) + (_582 * _582)) + (_586 * _586)) / (_578 + 9.9999997473787516355514526367188e-06);
        float _2330 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
        float _612 = isnan(1.0) ? _2330 : (isnan(_2330) ? 1.0 : min(_2330, 1.0));
        float _613 = _612 * 2.0;
        float _617 = (1.0 - _612) / (_612 + 1.0);
        float _2341 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
        float _618 = isnan(1.0) ? _2341 : (isnan(_2341) ? 1.0 : min(_2341, 1.0));
        float _627 = ((((1.0 - _618) * (_613 + 2.0)) * exp2(log2(isnan(1.0) ? _2319 : (isnan(_2319) ? 1.0 : min(_2319, 1.0))) * (_613 + 1.0))) + _618) * _578;
        float _629 = ((_518.y + (-0.5)) * 0.5) * _552;
        float _631 = ((_525.y + (-0.5)) * 0.5) * _560;
        float _633 = ((_532.y + (-0.5)) * 0.5) * _567;
        float _634 = dot(vec3(_629, _631, _633), vec3(_629, _631, _633));
        float _639 = (_634 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_634);
        float _647 = (dot(vec3(_194, _195, _196), vec3(_639 * _629, _639 * _631, _639 * _633)) + 1.0) * 0.5;
        float _2352 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
        float _656 = sqrt(((_631 * _631) + (_629 * _629)) + (_633 * _633)) / (_579 + 9.9999997473787516355514526367188e-06);
        float _2363 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
        float _657 = isnan(1.0) ? _2363 : (isnan(_2363) ? 1.0 : min(_2363, 1.0));
        float _658 = _657 * 2.0;
        float _662 = (1.0 - _657) / (_657 + 1.0);
        float _2374 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        float _663 = isnan(1.0) ? _2374 : (isnan(_2374) ? 1.0 : min(_2374, 1.0));
        float _672 = ((((1.0 - _663) * (_658 + 2.0)) * exp2(log2(isnan(1.0) ? _2352 : (isnan(_2352) ? 1.0 : min(_2352, 1.0))) * (_658 + 1.0))) + _663) * _579;
        float _674 = ((_518.z + (-0.5)) * 0.5) * _552;
        float _676 = ((_525.z + (-0.5)) * 0.5) * _560;
        float _678 = ((_532.z + (-0.5)) * 0.5) * _567;
        float _679 = dot(vec3(_674, _676, _678), vec3(_674, _676, _678));
        float _684 = (_679 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_679);
        float _692 = (dot(vec3(_194, _195, _196), vec3(_684 * _674, _684 * _676, _684 * _678)) + 1.0) * 0.5;
        float _2385 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _701 = sqrt(((_676 * _676) + (_674 * _674)) + (_678 * _678)) / (_580 + 9.9999997473787516355514526367188e-06);
        float _2396 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _702 = isnan(1.0) ? _2396 : (isnan(_2396) ? 1.0 : min(_2396, 1.0));
        float _703 = _702 * 2.0;
        float _707 = (1.0 - _702) / (_702 + 1.0);
        float _2407 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _708 = isnan(1.0) ? _2407 : (isnan(_2407) ? 1.0 : min(_2407, 1.0));
        float _717 = ((((1.0 - _708) * (_703 + 2.0)) * exp2(log2(isnan(1.0) ? _2385 : (isnan(_2385) ? 1.0 : min(_2385, 1.0))) * (_703 + 1.0))) + _708) * _580;
        _725 = cbModelParam._m0[36u].z * (isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0)));
        _726 = cbModelParam._m0[36u].z * (isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0)));
        _727 = cbModelParam._m0[36u].z * (isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0)));
    }
    else
    {
        _725 = 0.0;
        _726 = 0.0;
        _727 = 0.0;
    }
    float _1025;
    float _1026;
    float _1027;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _756 = fma(_393, cbModelParam._m0[30u].z, fma(_389, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _385));
        float _760 = fma(_393, cbModelParam._m0[31u].z, fma(_389, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _385));
        float _764 = fma(_393, cbModelParam._m0[32u].z, fma(_389, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _385));
        float _787 = _385 + _194;
        float _788 = _389 + _195;
        float _789 = _393 + _196;
        float _799 = fma(_789, cbModelParam._m0[30u].z, fma(_788, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _787)) - _756;
        float _800 = fma(_789, cbModelParam._m0[31u].z, fma(_788, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _787)) - _760;
        float _801 = fma(_789, cbModelParam._m0[32u].z, fma(_788, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _787)) - _764;
        float _805 = inversesqrt(dot(vec3(_799, _800, _801), vec3(_799, _800, _801)));
        float _818 = ((_805 * _799) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_756 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _819 = ((_805 * _800) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_760 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _820 = ((_805 * _801) / cbModelParam._m0[35u].z) + ((((((_764 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _822 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_818, _819, _820), 0.0);
        vec4 _829 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_818, _819, _820), 0.0);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_818, _819, _820), 0.0);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_818, _819, _820), 0.0);
        float _855 = exp2((_822.w + (-0.5)) * 20.0) * 2.0;
        float _862 = exp2((_829.w + (-0.5)) * 20.0) * 2.0;
        float _869 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _876 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _877 = _876 * (_843.x + (-0.5));
        float _878 = _876 * (_843.y + (-0.5));
        float _879 = _876 * (_843.z + (-0.5));
        float _880 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _881 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _882 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _884 = ((_822.x + (-0.5)) * 0.5) * _855;
        float _886 = ((_829.x + (-0.5)) * 0.5) * _862;
        float _888 = ((_836.x + (-0.5)) * 0.5) * _869;
        float _889 = dot(vec3(_884, _886, _888), vec3(_884, _886, _888));
        float _894 = (_889 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_889);
        float _902 = (dot(vec3(_194, _195, _196), vec3(_894 * _884, _894 * _886, _894 * _888)) + 1.0) * 0.5;
        float _2448 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _911 = sqrt(((_886 * _886) + (_884 * _884)) + (_888 * _888)) / (_880 + 9.9999997473787516355514526367188e-06);
        float _2459 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _2459 : (isnan(_2459) ? 1.0 : min(_2459, 1.0));
        float _913 = _912 * 2.0;
        float _917 = (1.0 - _912) / (_912 + 1.0);
        float _2470 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _2470 : (isnan(_2470) ? 1.0 : min(_2470, 1.0));
        float _927 = ((((1.0 - _918) * (_913 + 2.0)) * exp2(log2(isnan(1.0) ? _2448 : (isnan(_2448) ? 1.0 : min(_2448, 1.0))) * (_913 + 1.0))) + _918) * _880;
        float _929 = ((_822.y + (-0.5)) * 0.5) * _855;
        float _931 = ((_829.y + (-0.5)) * 0.5) * _862;
        float _933 = ((_836.y + (-0.5)) * 0.5) * _869;
        float _934 = dot(vec3(_929, _931, _933), vec3(_929, _931, _933));
        float _939 = (_934 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_934);
        float _947 = (dot(vec3(_194, _195, _196), vec3(_939 * _929, _939 * _931, _939 * _933)) + 1.0) * 0.5;
        float _2481 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _956 = sqrt(((_931 * _931) + (_929 * _929)) + (_933 * _933)) / (_881 + 9.9999997473787516355514526367188e-06);
        float _2492 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _2492 : (isnan(_2492) ? 1.0 : min(_2492, 1.0));
        float _958 = _957 * 2.0;
        float _962 = (1.0 - _957) / (_957 + 1.0);
        float _2503 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _2503 : (isnan(_2503) ? 1.0 : min(_2503, 1.0));
        float _972 = ((((1.0 - _963) * (_958 + 2.0)) * exp2(log2(isnan(1.0) ? _2481 : (isnan(_2481) ? 1.0 : min(_2481, 1.0))) * (_958 + 1.0))) + _963) * _881;
        float _974 = ((_822.z + (-0.5)) * 0.5) * _855;
        float _976 = ((_829.z + (-0.5)) * 0.5) * _862;
        float _978 = ((_836.z + (-0.5)) * 0.5) * _869;
        float _979 = dot(vec3(_974, _976, _978), vec3(_974, _976, _978));
        float _984 = (_979 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_979);
        float _992 = (dot(vec3(_194, _195, _196), vec3(_984 * _974, _984 * _976, _984 * _978)) + 1.0) * 0.5;
        float _2514 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _1001 = sqrt(((_976 * _976) + (_974 * _974)) + (_978 * _978)) / (_882 + 9.9999997473787516355514526367188e-06);
        float _2525 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _2525 : (isnan(_2525) ? 1.0 : min(_2525, 1.0));
        float _1003 = _1002 * 2.0;
        float _1007 = (1.0 - _1002) / (_1002 + 1.0);
        float _2536 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _2536 : (isnan(_2536) ? 1.0 : min(_2536, 1.0));
        float _1017 = ((((1.0 - _1008) * (_1003 + 2.0)) * exp2(log2(isnan(1.0) ? _2514 : (isnan(_2514) ? 1.0 : min(_2514, 1.0))) * (_1003 + 1.0))) + _1008) * _882;
        _1025 = cbModelParam._m0[36u].w * (isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0)));
        _1026 = cbModelParam._m0[36u].w * (isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0)));
        _1027 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0)));
    }
    else
    {
        _1025 = 0.0;
        _1026 = 0.0;
        _1027 = 0.0;
    }
    float _1037 = (cbModelParam._m0[1u].x * (_1025 - _725)) + _725;
    float _1038 = (cbModelParam._m0[1u].x * (_1026 - _726)) + _726;
    float _1039 = (cbModelParam._m0[1u].x * (_1027 - _727)) + _727;
    float _1060 = fma(_1039, cbSceneParam._m0[89u].z, fma(_1038, cbSceneParam._m0[89u].y, _1037 * cbSceneParam._m0[89u].x));
    float _1063 = fma(_1039, cbSceneParam._m0[90u].z, fma(_1038, cbSceneParam._m0[90u].y, _1037 * cbSceneParam._m0[90u].x));
    float _1066 = fma(_1039, cbSceneParam._m0[91u].z, fma(_1038, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1037));
    uvec4 _1076 = floatBitsToUint(cbInstanceData._m0[_337 + 5u]);
    uint _1078 = _1076.x * 14u;
    uint _1080 = _1078 + 13u;
    float _1085 = _363 + (-1.0);
    float _1089 = (cbLight._m0[_1080].x * _1085) + 1.0;
    float _1090 = (cbLight._m0[_1080].y * _1085) + 1.0;
    uint _1091 = _1078 + 5u;
    float _1097 = isnan(1.0) ? _1090 : (isnan(_1090) ? 1.0 : min(_1090, 1.0));
    uint _1101 = _1078 + 4u;
    float _1108 = isnan(1.0) ? _1089 : (isnan(_1089) ? 1.0 : min(_1089, 1.0));
    uint _1112 = _1078 | 1u;
    float _1123 = dot(vec3(cbLight._m0[_1078].xyz), vec3(_194, _195, _196));
    float _1126 = dot(vec3(cbLight._m0[_1112].xyz), vec3(_194, _195, _196));
    float _2587 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
    float _2598 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _1131 = (isnan(1.0) ? _2587 : (isnan(_2587) ? 1.0 : min(_2587, 1.0))) * 0.3183098733425140380859375;
    float _1133 = (isnan(1.0) ? _2598 : (isnan(_2598) ? 1.0 : min(_2598, 1.0))) * 0.3183098733425140380859375;
    float _1140 = ((cbLight._m0[_1091].x * _1097) * _1133) + ((cbLight._m0[_1101].x * _1108) * _1131);
    float _1141 = ((_1097 * cbLight._m0[_1091].y) * _1133) + ((_1108 * cbLight._m0[_1101].y) * _1131);
    float _1142 = ((_1097 * cbLight._m0[_1091].z) * _1133) + ((_1108 * cbLight._m0[_1101].z) * _1131);
    uint _1143 = _1078 + 8u;
    float _1149 = cbLight._m0[_1078].x + _276;
    float _1150 = cbLight._m0[_1078].y + _277;
    float _1151 = cbLight._m0[_1078].z + _278;
    float _1155 = inversesqrt(dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151)));
    float _1159 = dot(vec3(_194, _195, _196), vec3(cbLight._m0[_1078].xyz));
    float _2609 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
    float _1162 = isnan(1.0) ? _2609 : (isnan(_2609) ? 1.0 : min(_2609, 1.0));
    float _1163 = dot(vec3(_194, _195, _196), vec3(_276, _277, _278));
    float _2620 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
    float _1166 = isnan(1.0) ? _2620 : (isnan(_2620) ? 1.0 : min(_2620, 1.0));
    float _1167 = dot(vec3(cbLight._m0[_1078].xyz), vec3(_1149 * _1155, _1150 * _1155, _1151 * _1155));
    float _2631 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
    float _1178 = (exp2(log2(1.0 - (isnan(1.0) ? _2631 : (isnan(_2631) ? 1.0 : min(_2631, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1184 = (0.5 / ((_1162 + 9.9999999392252902907785028219223e-09) + _1166)) * _1162;
    float _2642 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
    float _1186 = (isnan(1.0) ? _2642 : (isnan(_2642) ? 1.0 : min(_2642, 1.0))) * 0.31831014156341552734375;
    uint _1197 = _1078 + 9u;
    float _1203 = cbLight._m0[_1112].x + _276;
    float _1204 = cbLight._m0[_1112].y + _277;
    float _1205 = cbLight._m0[_1112].z + _278;
    float _1209 = inversesqrt(dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205)));
    float _1213 = dot(vec3(_194, _195, _196), vec3(cbLight._m0[_1112].xyz));
    float _2653 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
    float _1216 = isnan(1.0) ? _2653 : (isnan(_2653) ? 1.0 : min(_2653, 1.0));
    float _1217 = dot(vec3(cbLight._m0[_1112].xyz), vec3(_1203 * _1209, _1204 * _1209, _1205 * _1209));
    float _2664 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
    float _1226 = (exp2(log2(1.0 - (isnan(1.0) ? _2664 : (isnan(_2664) ? 1.0 : min(_2664, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1230 = (0.5 / ((_1216 + 9.9999999392252902907785028219223e-09) + _1166)) * _1216;
    float _2675 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
    float _1232 = (isnan(1.0) ? _2675 : (isnan(_2675) ? 1.0 : min(_2675, 1.0))) * 0.31831014156341552734375;
    float _1242 = (((_1226 * cbLight._m0[_1197].x) * _1232) * _1097) + (((_1178 * cbLight._m0[_1143].x) * _1186) * _1108);
    float _1243 = (((_1226 * cbLight._m0[_1197].y) * _1232) * _1097) + (((_1178 * cbLight._m0[_1143].y) * _1186) * _1108);
    float _1244 = (((_1226 * cbLight._m0[_1197].z) * _1232) * _1097) + (((_1178 * cbLight._m0[_1143].z) * _1186) * _1108);
    float _1351;
    float _1353;
    float _1355;
    float _1357;
    float _1359;
    float _1361;
    if (_1076.y == 0u)
    {
        float _1291 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1292 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1291;
        float _1293 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1291;
        float _1294 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1291;
        uvec4 _1306 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1307 = _1306.x;
        uint _1318 = uint((float(_1306.y) * floor(float(uint(cbSceneParam._m0[85u].y * _298) / _1307))) + floor(float(uint(cbSceneParam._m0[85u].x * _297) / _1307)));
        float _1328 = (log2(_1294 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1329 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        uint _1332 = uint(isnan(14.0) ? _1329 : (isnan(_1329) ? 14.0 : min(_1329, 14.0)));
        uvec4 _1337 = texelFetch(g_lightClusterGridBuffer, int(((_1332 << 2u) + (_1318 << 6u)) >> 2u));
        uint _1338 = _1337.x;
        uint _1339 = _1306.z;
        float _1417;
        float _1419;
        float _1421;
        float _1423;
        float _1425;
        float _1427;
        if (((((1u << ((_1339 >> 4u) & 15u)) + 4294967295u) & _1338) == 0u) || ((_1339 & 240u) == 0u))
        {
            _1417 = 0.0;
            _1419 = 0.0;
            _1421 = 0.0;
            _1423 = 0.0;
            _1425 = 0.0;
            _1427 = 0.0;
        }
        else
        {
            float _1418;
            float _1420;
            float _1422;
            float _1424;
            float _1426;
            float _1428;
            float _1570 = 0.0;
            float _1571 = 0.0;
            float _1572 = 0.0;
            float _1573 = 0.0;
            float _1574 = 0.0;
            float _1575 = 0.0;
            uint _1576 = 0u;
            uint _1585;
            bool _1586;
            for (;;)
            {
                _1585 = texelFetch(g_lightClassification, int((((_1332 << 5u) + (_1318 << 9u)) + (_1576 << 2u)) >> 2u)).x;
                _1586 = _1585 == 0u;
                float frontier_phi_22_pred;
                float frontier_phi_22_pred_1;
                float frontier_phi_22_pred_2;
                float frontier_phi_22_pred_3;
                float frontier_phi_22_pred_4;
                float frontier_phi_22_pred_5;
                if (_1586)
                {
                    frontier_phi_22_pred = _1570;
                    frontier_phi_22_pred_1 = _1575;
                    frontier_phi_22_pred_2 = _1574;
                    frontier_phi_22_pred_3 = _1573;
                    frontier_phi_22_pred_4 = _1572;
                    frontier_phi_22_pred_5 = _1571;
                }
                else
                {
                    float _1715;
                    float _1716;
                    float _1717;
                    float _1718;
                    float _1719;
                    float _1720;
                    uint _1721;
                    _1715 = _1570;
                    _1716 = _1571;
                    _1717 = _1572;
                    _1718 = _1573;
                    _1719 = _1574;
                    _1720 = _1575;
                    _1721 = _1585;
                    float _1642;
                    float _1643;
                    float _1644;
                    float _1645;
                    float _1646;
                    float _1647;
                    for (;;)
                    {
                        uint _1725 = uint(findLSB(_1721)) + (_1576 << 5u);
                        uint _1722 = (_1721 + 4294967295u) & _1721;
                        uint _1727 = _1725 * 48u;
                        vec4 _1741 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1727)).x, texelFetch(g_PointLightRenderingBuffer, int(_1727 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1727 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1727 + 3u)).x));
                        uint _1747 = (_1725 * 48u) + 4u;
                        vec4 _1760 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1747)).x, texelFetch(g_PointLightRenderingBuffer, int(_1747 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1747 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1747 + 3u)).x));
                        uint _1766 = (_1725 * 48u) + 8u;
                        vec3 _1777 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_1766)).x, texelFetch(g_PointLightRenderingBuffer, int(_1766 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1766 + 2u)).x));
                        float _1781 = _1741.x - _1292;
                        float _1782 = _1741.y - _1293;
                        float _1783 = _1741.z - _1294;
                        float _1784 = dot(vec3(_1781, _1782, _1783), vec3(_1781, _1782, _1783));
                        float _1787 = inversesqrt(_1784);
                        float _1796 = 1.0 - (_1784 * _1741.w);
                        float _2696 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
                        float _1797 = isnan(1.0) ? _2696 : (isnan(_2696) ? 1.0 : min(_2696, 1.0));
                        float _1798 = sqrt(_1784) * _1760.w;
                        float _1801 = 1.39999997615814208984375 / (_1798 + 1.39999997615814208984375);
                        float _1802 = _1801 * _1801;
                        float _1805 = ((1.0 - _1802) * dot(vec3(_318, _321, _324), vec3(_1787 * _1781, _1787 * _1782, _1787 * _1783))) + _1802;
                        float _1808 = _1798 * _1798;
                        float _1812 = ((isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))) * _1797) / ((_1808 * 0.699999988079071044921875) + 1.0);
                        float _1816 = (-0.0) - _1292;
                        float _1817 = (-0.0) - _1293;
                        float _1818 = (-0.0) - _1294;
                        float _1822 = inversesqrt(dot(vec3(_1816, _1817, _1818), vec3(_1816, _1817, _1818)));
                        float _1826 = dot(vec3(_318, _321, _324), vec3(_1822 * _1816, _1822 * _1817, _1822 * _1818));
                        float _2712 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
                        float _2723 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
                        float _1830 = isnan(1.0) ? _2723 : (isnan(_2723) ? 1.0 : min(_2723, 1.0));
                        float _1834 = (0.5 / (((isnan(1.0) ? _2712 : (isnan(_2712) ? 1.0 : min(_2712, 1.0))) + 9.9999999392252902907785028219223e-09) + _1830)) * _1830;
                        float _2734 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
                        float _1843 = (((isnan(1.0) ? _2734 : (isnan(_2734) ? 1.0 : min(_2734, 1.0))) * 3.1415927410125732421875) / ((_1808 * 2.1991131305694580078125) + 3.141590118408203125)) * _1797;
                        _1645 = (_1812 * _1760.x) + _1718;
                        _1646 = (_1812 * _1760.y) + _1719;
                        _1647 = (_1812 * _1760.z) + _1720;
                        _1642 = (_1843 * _1777.x) + _1715;
                        _1643 = (_1843 * _1777.y) + _1716;
                        _1644 = (_1843 * _1777.z) + _1717;
                        if (_1722 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1715 = _1642;
                            _1716 = _1643;
                            _1717 = _1644;
                            _1718 = _1645;
                            _1719 = _1646;
                            _1720 = _1647;
                            _1721 = _1722;
                        }
                    }
                    frontier_phi_22_pred = _1642;
                    frontier_phi_22_pred_1 = _1647;
                    frontier_phi_22_pred_2 = _1646;
                    frontier_phi_22_pred_3 = _1645;
                    frontier_phi_22_pred_4 = _1644;
                    frontier_phi_22_pred_5 = _1643;
                }
                _1418 = frontier_phi_22_pred;
                _1428 = frontier_phi_22_pred_1;
                _1426 = frontier_phi_22_pred_2;
                _1424 = frontier_phi_22_pred_3;
                _1422 = frontier_phi_22_pred_4;
                _1420 = frontier_phi_22_pred_5;
                uint _1577 = _1576 + 1u;
                if (_1577 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1570 = _1418;
                    _1571 = _1420;
                    _1572 = _1422;
                    _1573 = _1424;
                    _1574 = _1426;
                    _1575 = _1428;
                    _1576 = _1577;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1417 = _1418;
            _1419 = _1420;
            _1421 = _1422;
            _1423 = _1424;
            _1425 = _1426;
            _1427 = _1428;
        }
        uvec4 _1431 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1432 = _1431.z;
        uint _1434 = (_1432 >> 8u) & 15u;
        float _1541;
        float _1543;
        float _1545;
        float _1547;
        float _1549;
        float _1551;
        if (((4294967295u << _1434) & _1338) == 0u)
        {
            _1541 = _1417;
            _1543 = _1419;
            _1545 = _1421;
            _1547 = _1423;
            _1549 = _1425;
            _1551 = _1427;
        }
        else
        {
            float _1566 = inversesqrt(dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294)));
            float frontier_phi_14_15_ladder;
            float frontier_phi_14_15_ladder_1;
            float frontier_phi_14_15_ladder_2;
            float frontier_phi_14_15_ladder_3;
            float frontier_phi_14_15_ladder_4;
            float frontier_phi_14_15_ladder_5;
            if (_1434 < ((_1432 >> 12u) & 15u))
            {
                float _1542;
                float _1544;
                float _1546;
                float _1548;
                float _1550;
                float _1552;
                float _1698 = _1417;
                float _1699 = _1419;
                float _1700 = _1421;
                float _1701 = _1423;
                float _1702 = _1425;
                float _1703 = _1427;
                uint _1704 = _1434;
                uint _1713;
                bool _1714;
                for (;;)
                {
                    _1713 = texelFetch(g_lightClassification, int((((_1332 << 5u) + (_1318 << 9u)) + (_1704 << 2u)) >> 2u)).x;
                    _1714 = _1713 == 0u;
                    float frontier_phi_33_pred;
                    float frontier_phi_33_pred_1;
                    float frontier_phi_33_pred_2;
                    float frontier_phi_33_pred_3;
                    float frontier_phi_33_pred_4;
                    float frontier_phi_33_pred_5;
                    if (_1714)
                    {
                        frontier_phi_33_pred = _1703;
                        frontier_phi_33_pred_1 = _1698;
                        frontier_phi_33_pred_2 = _1699;
                        frontier_phi_33_pred_3 = _1700;
                        frontier_phi_33_pred_4 = _1701;
                        frontier_phi_33_pred_5 = _1702;
                    }
                    else
                    {
                        float _1857;
                        float _1858;
                        float _1859;
                        float _1860;
                        float _1861;
                        float _1862;
                        float _2110;
                        float _2111;
                        float _2112;
                        float _2113;
                        float _2114;
                        float _2115;
                        float _1870 = _1698;
                        float _1871 = _1699;
                        float _1872 = _1700;
                        float _1873 = _1701;
                        float _1874 = _1702;
                        float _1875 = _1703;
                        uint _1876 = _1713;
                        uint _1877;
                        vec4 _1903;
                        float _1904;
                        vec4 _1919;
                        vec3 _1931;
                        vec4 _1947;
                        vec4 _1963;
                        float _2010;
                        bool _2011;
                        for (;;)
                        {
                            uint _1887 = ((_1704 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_1876));
                            _1877 = (_1876 + 4294967295u) & _1876;
                            uint _1889 = _1887 * 40u;
                            _1903 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1889)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1889 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1889 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1889 + 3u)).x));
                            _1904 = _1903.w;
                            uint _1906 = (_1887 * 40u) + 4u;
                            _1919 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1906)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1906 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1906 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1906 + 3u)).x));
                            uint _1921 = (_1887 * 40u) + 8u;
                            _1931 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_1921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1921 + 2u)).x));
                            uint _1934 = (_1887 * 40u) + 16u;
                            _1947 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1934)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1934 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1934 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1934 + 3u)).x));
                            uint _1950 = (_1887 * 40u) + 20u;
                            _1963 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1950)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1950 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1950 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1950 + 3u)).x));
                            uint _1966 = (_1887 * 40u) + 24u;
                            vec4 _1979 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1966)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1966 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1966 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1966 + 3u)).x));
                            uint _1985 = (_1887 * 40u) + 28u;
                            vec4 _1998 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1985)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1985 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1985 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1985 + 3u)).x));
                            _2010 = fma(_1294, _1998.z, fma(_1293, _1998.y, _1998.x * _1292)) + _1998.w;
                            _2011 = !((fma(_1294, _1979.z, fma(_1293, _1979.y, _1979.x * _1292)) + _1979.w) <= 0.0);
                            float frontier_phi_39_pred;
                            float frontier_phi_39_pred_1;
                            float frontier_phi_39_pred_2;
                            float frontier_phi_39_pred_3;
                            float frontier_phi_39_pred_4;
                            float frontier_phi_39_pred_5;
                            if (_2011)
                            {
                                float _2038 = _1903.x - _1292;
                                float _2039 = _1903.y - _1293;
                                float _2040 = _1903.z - _1294;
                                float _2041 = dot(vec3(_2038, _2039, _2040), vec3(_2038, _2039, _2040));
                                float _2044 = inversesqrt(_2041);
                                float _2045 = _2044 * _2038;
                                float _2046 = _2044 * _2039;
                                float _2047 = _2044 * _2040;
                                float _2051 = 1.0 - (_2041 / (_1904 * _1904));
                                float _2745 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
                                float _2052 = isnan(1.0) ? _2745 : (isnan(_2745) ? 1.0 : min(_2745, 1.0));
                                float _2056 = sqrt(_2041) * _1919.w;
                                float _2058 = 1.39999997615814208984375 / (_2056 + 1.39999997615814208984375);
                                float _2059 = _2058 * _2058;
                                float _2060 = 1.0 - _2059;
                                float _2062 = (_2060 * dot(vec3(_2045, _2046, _2047), vec3(_318, _321, _324))) + _2059;
                                float _2065 = _2056 * _2056;
                                float _2069 = (fma(_1294, _1947.z, fma(_1293, _1947.y, _1947.x * _1292)) + _1947.w) / _2010;
                                float _2070 = (fma(_1294, _1963.z, fma(_1293, _1963.y, _1963.x * _1292)) + _1963.w) / _2010;
                                float _2074 = 1.0 - dot(vec2(_2069, _2070), vec2(_2069, _2070));
                                float _2761 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
                                float _2075 = isnan(1.0) ? _2761 : (isnan(_2761) ? 1.0 : min(_2761, 1.0));
                                float _2076 = _2075 * (((isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0))) * _2052) / ((_2065 * 0.699999988079071044921875) + 1.0));
                                float _2086 = dot(vec3(_318, _321, _324), vec3((-0.0) - (_1292 * _1566), (-0.0) - (_1293 * _1566), (-0.0) - (_1294 * _1566)));
                                float _2772 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
                                float _2094 = (_2060 * dot(vec3(_318, _321, _324), vec3(_2045, _2046, _2047))) + _2059;
                                float _2783 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
                                float _2095 = isnan(1.0) ? _2783 : (isnan(_2783) ? 1.0 : min(_2783, 1.0));
                                float _2099 = (0.5 / (((isnan(1.0) ? _2772 : (isnan(_2772) ? 1.0 : min(_2772, 1.0))) + 9.9999999392252902907785028219223e-09) + _2095)) * _2095;
                                float _2794 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
                                float _2106 = (_2075 * _2052) * (((isnan(1.0) ? _2794 : (isnan(_2794) ? 1.0 : min(_2794, 1.0))) * 3.1415927410125732421875) / ((_2065 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_39_pred = _2076 * _1919.y;
                                frontier_phi_39_pred_1 = _2076 * _1919.z;
                                frontier_phi_39_pred_2 = _2076 * _1919.x;
                                frontier_phi_39_pred_3 = _2106 * _1931.z;
                                frontier_phi_39_pred_4 = _2106 * _1931.y;
                                frontier_phi_39_pred_5 = _2106 * _1931.x;
                            }
                            else
                            {
                                frontier_phi_39_pred = 0.0;
                                frontier_phi_39_pred_1 = 0.0;
                                frontier_phi_39_pred_2 = 0.0;
                                frontier_phi_39_pred_3 = 0.0;
                                frontier_phi_39_pred_4 = 0.0;
                                frontier_phi_39_pred_5 = 0.0;
                            }
                            _2114 = frontier_phi_39_pred;
                            _2115 = frontier_phi_39_pred_1;
                            _2113 = frontier_phi_39_pred_2;
                            _2112 = frontier_phi_39_pred_3;
                            _2111 = frontier_phi_39_pred_4;
                            _2110 = frontier_phi_39_pred_5;
                            _1860 = _2113 + _1873;
                            _1861 = _2114 + _1874;
                            _1862 = _2115 + _1875;
                            _1857 = _2110 + _1870;
                            _1858 = _2111 + _1871;
                            _1859 = _2112 + _1872;
                            if (_1877 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _1870 = _1857;
                                _1871 = _1858;
                                _1872 = _1859;
                                _1873 = _1860;
                                _1874 = _1861;
                                _1875 = _1862;
                                _1876 = _1877;
                                continue;
                            }
                        }
                        frontier_phi_33_pred = _1862;
                        frontier_phi_33_pred_1 = _1857;
                        frontier_phi_33_pred_2 = _1858;
                        frontier_phi_33_pred_3 = _1859;
                        frontier_phi_33_pred_4 = _1860;
                        frontier_phi_33_pred_5 = _1861;
                    }
                    _1552 = frontier_phi_33_pred;
                    _1542 = frontier_phi_33_pred_1;
                    _1544 = frontier_phi_33_pred_2;
                    _1546 = frontier_phi_33_pred_3;
                    _1548 = frontier_phi_33_pred_4;
                    _1550 = frontier_phi_33_pred_5;
                    uint _1705 = _1704 + 1u;
                    if (_1705 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1698 = _1542;
                        _1699 = _1544;
                        _1700 = _1546;
                        _1701 = _1548;
                        _1702 = _1550;
                        _1703 = _1552;
                        _1704 = _1705;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_14_15_ladder = _1552;
                frontier_phi_14_15_ladder_1 = _1550;
                frontier_phi_14_15_ladder_2 = _1548;
                frontier_phi_14_15_ladder_3 = _1546;
                frontier_phi_14_15_ladder_4 = _1544;
                frontier_phi_14_15_ladder_5 = _1542;
            }
            else
            {
                frontier_phi_14_15_ladder = _1427;
                frontier_phi_14_15_ladder_1 = _1425;
                frontier_phi_14_15_ladder_2 = _1423;
                frontier_phi_14_15_ladder_3 = _1421;
                frontier_phi_14_15_ladder_4 = _1419;
                frontier_phi_14_15_ladder_5 = _1417;
            }
            _1541 = frontier_phi_14_15_ladder_5;
            _1543 = frontier_phi_14_15_ladder_4;
            _1545 = frontier_phi_14_15_ladder_3;
            _1547 = frontier_phi_14_15_ladder_2;
            _1549 = frontier_phi_14_15_ladder_1;
            _1551 = frontier_phi_14_15_ladder;
        }
        float _1556 = isnan(1.0) ? _363 : (isnan(_363) ? 1.0 : min(_363, 1.0));
        _1351 = (_1556 * _1547) + _1140;
        _1353 = (_1556 * _1549) + _1141;
        _1355 = (_1556 * _1551) + _1142;
        _1357 = ((_1541 * 0.039999999105930328369140625) * _1556) + _1242;
        _1359 = ((_1543 * 0.039999999105930328369140625) * _1556) + _1243;
        _1361 = ((_1545 * 0.039999999105930328369140625) * _1556) + _1244;
    }
    else
    {
        _1351 = _1140;
        _1353 = _1141;
        _1355 = _1142;
        _1357 = _1242;
        _1359 = _1243;
        _1361 = _1244;
    }
    float _2810 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _2821 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _2832 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _2843 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _1376 = ((isnan(1.0) ? _2810 : (isnan(_2810) ? 1.0 : min(_2810, 1.0))) * (_1351 + ((isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0))) * _363))) + (_1357 * cbPerFrame._m0[3u].x);
    float _1377 = ((isnan(1.0) ? _2821 : (isnan(_2821) ? 1.0 : min(_2821, 1.0))) * (_1353 + ((isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0))) * _363))) + (_1359 * cbPerFrame._m0[3u].x);
    float _1378 = ((isnan(1.0) ? _2832 : (isnan(_2832) ? 1.0 : min(_2832, 1.0))) * (_1355 + ((isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0))) * _363))) + (_1361 * cbPerFrame._m0[3u].x);
    float _1383 = cbInstanceData._m0[_337 + 6u].w * (isnan(1.0) ? _2843 : (isnan(_2843) ? 1.0 : min(_2843, 1.0)));
    float _1388 = _297 / cbSceneParam._m0[86u].x;
    float _1389 = _298 / cbSceneParam._m0[86u].y;
    vec4 _1403 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1388, _1389, (log2((isnan(cbSceneParam._m0[77u].w) ? _217 : (isnan(_217) ? cbSceneParam._m0[77u].w : min(_217, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1405 = _1403.x;
    float _1406 = _1403.y;
    float _1407 = _1403.z;
    float _1408 = _1403.w;
    float _1481;
    float _1483;
    float _1485;
    float _1487;
    if (_217 > cbSceneParam._m0[78u].w)
    {
        float _1442 = isnan(_217) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _217 : min(cbSceneParam._m0[80u].w, _217));
        float _1443 = _1442 / _217;
        float _1454 = _1443 * _269;
        float _1455 = _270 * _1443;
        float _1456 = (-0.0) - _1455;
        float _1458 = _1443 * _271;
        float _1460 = (cbSceneParam._m0[77u].w * _1456) / _1442;
        float _1461 = _1460 + cbSceneParam._m0[79u].w;
        float _1462 = cbSceneParam._m0[79u].w - _1455;
        float _1468 = sqrt(((_1454 * _1454) + (_1455 * _1455)) + (_1458 * _1458));
        float _1471 = (1.0 - (cbSceneParam._m0[77u].w / _1442)) * _1468;
        float _1477 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1479 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1655;
        if (abs((_1456 - _1460) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1655 = ((((_1461 > 0.0) ? exp2(_1477 * _1461) : (2.0 - exp2(_1479 * _1461))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1471;
        }
        else
        {
            float _1599 = 1.0 / cbSceneParam._m0[80u].x;
            float _1600 = isnan(_1462) ? _1461 : (isnan(_1461) ? _1462 : max(_1461, _1462));
            float _1601 = isnan(_1462) ? _1461 : (isnan(_1461) ? _1462 : min(_1461, _1462));
            float _1610 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : min(_1600, 0.0));
            float _1611 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : min(_1601, 0.0));
            _1655 = ((abs(_1468 / _1456) * cbSceneParam._m0[80u].y) * ((((_1610 - _1611) * 2.0) - ((exp2(_1477 * (isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)))) - exp2(_1477 * (isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))))) * _1599)) - ((exp2(_1479 * _1610) - exp2(_1479 * _1611)) * _1599))) + (_1471 * cbSceneParam._m0[80u].z);
        }
        vec4 _1657 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1388, _1389, 1.0), 0.0);
        float _1666 = exp2((_1655 * (-1.44269502162933349609375)) * (1.0 - _1657.w));
        float _1667 = log2(_1666);
        float _1683 = log2(_1408);
        _1481 = (exp2(_1683 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1667 * cbSceneParam._m0[78u].x)) * _1657.x) / cbSceneParam._m0[78u].x)) + _1405;
        _1483 = (exp2(_1683 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1667 * cbSceneParam._m0[78u].y)) * _1657.y) / cbSceneParam._m0[78u].y)) + _1406;
        _1485 = (exp2(_1683 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1667 * cbSceneParam._m0[78u].z)) * _1657.z) / cbSceneParam._m0[78u].z)) + _1407;
        _1487 = _1666 * _1408;
    }
    else
    {
        _1481 = _1405;
        _1483 = _1406;
        _1485 = _1407;
        _1487 = _1408;
    }
    bool _1693;
    vec4 _1497;
    vec4 _1520;
    float _1522;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    bool _1540;
    for (;;)
    {
        _1497 = cbMatDynParam._m0[0u];
        float _1499 = roundEven(_1497.y);
        bool _1500 = _1499 == 3.0;
        float _1502 = log2(_1487);
        float _1509 = exp2(_1502 * cbSceneParam._m0[78u].x) * _1376;
        float _1510 = exp2(_1502 * cbSceneParam._m0[78u].y) * _1377;
        float _1511 = exp2(_1502 * cbSceneParam._m0[78u].z) * _1378;
        float _1518 = _285 + (-0.5);
        _1520 = cbMtdParam._m0[1u];
        _1522 = _1520.y * _1518;
        float _1525 = (_1499 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1526 = _1525 * (_1500 ? _1509 : (_1509 + (cbSceneParam._m0[72u].w * _1481)));
        _1527 = _1525 * (_1500 ? _1510 : (_1510 + (cbSceneParam._m0[72u].w * _1483)));
        _1528 = _1525 * (_1500 ? _1511 : (_1511 + (cbSceneParam._m0[72u].w * _1485)));
        _1529 = _1518 * 0.999000012874603271484375;
        _1540 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1540)
        {
            if ((cbInstanceData._m0[_337 + 7u].x + _1529) < 0.5)
            {
                _1693 = true;
                break;
            }
        }
        uint _1634 = _339 + uint(_1497.w);
        if ((cbInstanceData._m0[_1634].w < 1.0) && ((cbInstanceData._m0[_1634].w + _1529) < 0.5))
        {
            _1693 = true;
            break;
        }
        if ((_1522 + _189) < _1520.x)
        {
            _1693 = true;
            break;
        }
        _1693 = false;
        break;
    }
    float _1848;
    if (_1693)
    {
        discard_state = true;
        _1848 = 0.0;
    }
    else
    {
        _1848 = _1383;
    }
    SV_Target.x = _1526;
    SV_Target.y = _1527;
    SV_Target.z = _1528;
    SV_Target.w = _1848;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _1383;
    discard_exit();
}


