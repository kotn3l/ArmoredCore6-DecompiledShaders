#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_Rotor_Blade_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _156 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _157 = _156 * NORMAL.x;
    float _158 = _156 * NORMAL.y;
    float _159 = _156 * NORMAL.z;
    vec4 _179 = texture(sampler2D(S_Rotor_Blade_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _186 = _179.x * cbMtdParam._m0[9u].x;
    float _187 = _179.y * cbMtdParam._m0[9u].y;
    float _188 = _179.z * cbMtdParam._m0[9u].z;
    float _189 = _179.w * TEXCOORD_1.z;
    float _193 = inversesqrt(dot(vec3(_157, _158, _159), vec3(_157, _158, _159)));
    float _194 = _193 * _157;
    float _195 = _193 * _158;
    float _196 = _193 * _159;
    float _2384 = isnan(0.0) ? _189 : (isnan(_189) ? 0.0 : max(_189, 0.0));
    float _198 = isnan(1.0) ? _2384 : (isnan(_2384) ? 1.0 : min(_2384, 1.0));
    float _2395 = isnan(0.0) ? _186 : (isnan(_186) ? 0.0 : max(_186, 0.0));
    float _2406 = isnan(0.0) ? _187 : (isnan(_187) ? 0.0 : max(_187, 0.0));
    float _2417 = isnan(0.0) ? _188 : (isnan(_188) ? 0.0 : max(_188, 0.0));
    float _217 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    float _275 = inversesqrt(dot(vec3(_269, _270, _271), vec3(_269, _270, _271)));
    float _276 = _269 * _275;
    float _277 = _270 * _275;
    float _278 = _271 * _275;
    float _284 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _285 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _306 = fma(_196, cbSceneParam._m0[5u].z, fma(_195, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _194));
    float _309 = fma(_196, cbSceneParam._m0[6u].z, fma(_195, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _194));
    float _312 = fma(_196, cbSceneParam._m0[7u].z, fma(_195, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _194));
    uint _325 = uint(roundEven(NORMAL.w)) * 13u;
    uint _328 = (_325 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _334 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2395 : (isnan(_2395) ? 1.0 : min(_2395, 1.0)))) * cbInstanceData._m0[_328].x;
    float _335 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2406 : (isnan(_2406) ? 1.0 : min(_2406, 1.0)))) * cbInstanceData._m0[_328].y;
    float _336 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2417 : (isnan(_2417) ? 1.0 : min(_2417, 1.0)))) * cbInstanceData._m0[_328].z;
    float _2428 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _337 = isnan(1.0) ? _2428 : (isnan(_2428) ? 1.0 : min(_2428, 1.0));
    float _2439 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _338 = isnan(1.0) ? _2439 : (isnan(_2439) ? 1.0 : min(_2439, 1.0));
    float _2450 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _339 = isnan(1.0) ? _2450 : (isnan(_2450) ? 1.0 : min(_2450, 1.0));
    vec4 _348 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _284, cbSceneParam._m0[86u].y * _285));
    float _351 = _348.x * TEXCOORD_1.w;
    float _373 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _377 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _381 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _684;
    float _685;
    float _686;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _408 = fma(_381, cbModelParam._m0[26u].z, fma(_377, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _373));
        float _412 = fma(_381, cbModelParam._m0[27u].z, fma(_377, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _373));
        float _416 = fma(_381, cbModelParam._m0[28u].z, fma(_377, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _373));
        float _441 = _373 + _194;
        float _442 = _377 + _195;
        float _443 = _381 + _196;
        float _453 = fma(_443, cbModelParam._m0[26u].z, fma(_442, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _441)) - _408;
        float _454 = fma(_443, cbModelParam._m0[27u].z, fma(_442, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _441)) - _412;
        float _455 = fma(_443, cbModelParam._m0[28u].z, fma(_442, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _441)) - _416;
        float _459 = inversesqrt(dot(vec3(_453, _454, _455), vec3(_453, _454, _455)));
        float _472 = ((_459 * _453) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_408 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _473 = ((_459 * _454) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_412 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _474 = ((_459 * _455) / cbModelParam._m0[34u].z) + ((((((_416 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _477 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_472, _473, _474), 0.0);
        vec4 _484 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_472, _473, _474), 0.0);
        vec4 _491 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_472, _473, _474), 0.0);
        vec4 _498 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_472, _473, _474), 0.0);
        float _511 = exp2((_477.w + (-0.5)) * 20.0) * 2.0;
        float _519 = exp2((_484.w + (-0.5)) * 20.0) * 2.0;
        float _526 = exp2((_491.w + (-0.5)) * 20.0) * 2.0;
        float _533 = exp2((_498.w + (-0.5)) * 20.0) * 2.0;
        float _534 = _533 * (_498.x + (-0.5));
        float _535 = _533 * (_498.y + (-0.5));
        float _536 = _533 * (_498.z + (-0.5));
        float _537 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
        float _538 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
        float _539 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
        float _541 = ((_477.x + (-0.5)) * 0.5) * _511;
        float _543 = ((_484.x + (-0.5)) * 0.5) * _519;
        float _545 = ((_491.x + (-0.5)) * 0.5) * _526;
        float _546 = dot(vec3(_541, _543, _545), vec3(_541, _543, _545));
        float _551 = (_546 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_546);
        float _560 = (dot(vec3(_194, _195, _196), vec3(_551 * _541, _551 * _543, _551 * _545)) + 1.0) * 0.5;
        float _2476 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
        float _570 = sqrt(((_543 * _543) + (_541 * _541)) + (_545 * _545)) / (_537 + 9.9999997473787516355514526367188e-06);
        float _2487 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
        float _571 = isnan(1.0) ? _2487 : (isnan(_2487) ? 1.0 : min(_2487, 1.0));
        float _572 = _571 * 2.0;
        float _576 = (1.0 - _571) / (_571 + 1.0);
        float _2498 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
        float _577 = isnan(1.0) ? _2498 : (isnan(_2498) ? 1.0 : min(_2498, 1.0));
        float _586 = ((((1.0 - _577) * (_572 + 2.0)) * exp2(log2(isnan(1.0) ? _2476 : (isnan(_2476) ? 1.0 : min(_2476, 1.0))) * (_572 + 1.0))) + _577) * _537;
        float _588 = ((_477.y + (-0.5)) * 0.5) * _511;
        float _590 = ((_484.y + (-0.5)) * 0.5) * _519;
        float _592 = ((_491.y + (-0.5)) * 0.5) * _526;
        float _593 = dot(vec3(_588, _590, _592), vec3(_588, _590, _592));
        float _598 = (_593 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_593);
        float _606 = (dot(vec3(_194, _195, _196), vec3(_598 * _588, _598 * _590, _598 * _592)) + 1.0) * 0.5;
        float _2509 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
        float _615 = sqrt(((_590 * _590) + (_588 * _588)) + (_592 * _592)) / (_538 + 9.9999997473787516355514526367188e-06);
        float _2520 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
        float _616 = isnan(1.0) ? _2520 : (isnan(_2520) ? 1.0 : min(_2520, 1.0));
        float _617 = _616 * 2.0;
        float _621 = (1.0 - _616) / (_616 + 1.0);
        float _2531 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
        float _622 = isnan(1.0) ? _2531 : (isnan(_2531) ? 1.0 : min(_2531, 1.0));
        float _631 = ((((1.0 - _622) * (_617 + 2.0)) * exp2(log2(isnan(1.0) ? _2509 : (isnan(_2509) ? 1.0 : min(_2509, 1.0))) * (_617 + 1.0))) + _622) * _538;
        float _633 = ((_477.z + (-0.5)) * 0.5) * _511;
        float _635 = ((_484.z + (-0.5)) * 0.5) * _519;
        float _637 = ((_491.z + (-0.5)) * 0.5) * _526;
        float _638 = dot(vec3(_633, _635, _637), vec3(_633, _635, _637));
        float _643 = (_638 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_638);
        float _651 = (dot(vec3(_194, _195, _196), vec3(_643 * _633, _643 * _635, _643 * _637)) + 1.0) * 0.5;
        float _2542 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
        float _660 = sqrt(((_635 * _635) + (_633 * _633)) + (_637 * _637)) / (_539 + 9.9999997473787516355514526367188e-06);
        float _2553 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
        float _661 = isnan(1.0) ? _2553 : (isnan(_2553) ? 1.0 : min(_2553, 1.0));
        float _662 = _661 * 2.0;
        float _666 = (1.0 - _661) / (_661 + 1.0);
        float _2564 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
        float _667 = isnan(1.0) ? _2564 : (isnan(_2564) ? 1.0 : min(_2564, 1.0));
        float _676 = ((((1.0 - _667) * (_662 + 2.0)) * exp2(log2(isnan(1.0) ? _2542 : (isnan(_2542) ? 1.0 : min(_2542, 1.0))) * (_662 + 1.0))) + _667) * _539;
        _684 = cbModelParam._m0[36u].z * (isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0)));
        _685 = cbModelParam._m0[36u].z * (isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0)));
        _686 = cbModelParam._m0[36u].z * (isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0)));
    }
    else
    {
        _684 = 0.0;
        _685 = 0.0;
        _686 = 0.0;
    }
    float _981;
    float _982;
    float _983;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _712 = fma(_381, cbModelParam._m0[30u].z, fma(_377, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _373));
        float _716 = fma(_381, cbModelParam._m0[31u].z, fma(_377, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _373));
        float _720 = fma(_381, cbModelParam._m0[32u].z, fma(_377, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _373));
        float _743 = _373 + _194;
        float _744 = _377 + _195;
        float _745 = _381 + _196;
        float _755 = fma(_745, cbModelParam._m0[30u].z, fma(_744, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _743)) - _712;
        float _756 = fma(_745, cbModelParam._m0[31u].z, fma(_744, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _743)) - _716;
        float _757 = fma(_745, cbModelParam._m0[32u].z, fma(_744, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _743)) - _720;
        float _761 = inversesqrt(dot(vec3(_755, _756, _757), vec3(_755, _756, _757)));
        float _774 = ((_761 * _755) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_712 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _775 = ((_761 * _756) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_716 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _776 = ((_761 * _757) / cbModelParam._m0[35u].z) + ((((((_720 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _778 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_774, _775, _776), 0.0);
        vec4 _785 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_774, _775, _776), 0.0);
        vec4 _792 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_774, _775, _776), 0.0);
        vec4 _799 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_774, _775, _776), 0.0);
        float _811 = exp2((_778.w + (-0.5)) * 20.0) * 2.0;
        float _818 = exp2((_785.w + (-0.5)) * 20.0) * 2.0;
        float _825 = exp2((_792.w + (-0.5)) * 20.0) * 2.0;
        float _832 = exp2((_799.w + (-0.5)) * 20.0) * 2.0;
        float _833 = _832 * (_799.x + (-0.5));
        float _834 = _832 * (_799.y + (-0.5));
        float _835 = _832 * (_799.z + (-0.5));
        float _836 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _837 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _838 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _840 = ((_778.x + (-0.5)) * 0.5) * _811;
        float _842 = ((_785.x + (-0.5)) * 0.5) * _818;
        float _844 = ((_792.x + (-0.5)) * 0.5) * _825;
        float _845 = dot(vec3(_840, _842, _844), vec3(_840, _842, _844));
        float _850 = (_845 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_845);
        float _858 = (dot(vec3(_194, _195, _196), vec3(_850 * _840, _850 * _842, _850 * _844)) + 1.0) * 0.5;
        float _2605 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _867 = sqrt(((_842 * _842) + (_840 * _840)) + (_844 * _844)) / (_836 + 9.9999997473787516355514526367188e-06);
        float _2616 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _868 = isnan(1.0) ? _2616 : (isnan(_2616) ? 1.0 : min(_2616, 1.0));
        float _869 = _868 * 2.0;
        float _873 = (1.0 - _868) / (_868 + 1.0);
        float _2627 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _874 = isnan(1.0) ? _2627 : (isnan(_2627) ? 1.0 : min(_2627, 1.0));
        float _883 = ((((1.0 - _874) * (_869 + 2.0)) * exp2(log2(isnan(1.0) ? _2605 : (isnan(_2605) ? 1.0 : min(_2605, 1.0))) * (_869 + 1.0))) + _874) * _836;
        float _885 = ((_778.y + (-0.5)) * 0.5) * _811;
        float _887 = ((_785.y + (-0.5)) * 0.5) * _818;
        float _889 = ((_792.y + (-0.5)) * 0.5) * _825;
        float _890 = dot(vec3(_885, _887, _889), vec3(_885, _887, _889));
        float _895 = (_890 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_890);
        float _903 = (dot(vec3(_194, _195, _196), vec3(_895 * _885, _895 * _887, _895 * _889)) + 1.0) * 0.5;
        float _2638 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _912 = sqrt(((_887 * _887) + (_885 * _885)) + (_889 * _889)) / (_837 + 9.9999997473787516355514526367188e-06);
        float _2649 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _913 = isnan(1.0) ? _2649 : (isnan(_2649) ? 1.0 : min(_2649, 1.0));
        float _914 = _913 * 2.0;
        float _918 = (1.0 - _913) / (_913 + 1.0);
        float _2660 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _919 = isnan(1.0) ? _2660 : (isnan(_2660) ? 1.0 : min(_2660, 1.0));
        float _928 = ((((1.0 - _919) * (_914 + 2.0)) * exp2(log2(isnan(1.0) ? _2638 : (isnan(_2638) ? 1.0 : min(_2638, 1.0))) * (_914 + 1.0))) + _919) * _837;
        float _930 = ((_778.z + (-0.5)) * 0.5) * _811;
        float _932 = ((_785.z + (-0.5)) * 0.5) * _818;
        float _934 = ((_792.z + (-0.5)) * 0.5) * _825;
        float _935 = dot(vec3(_930, _932, _934), vec3(_930, _932, _934));
        float _940 = (_935 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_935);
        float _948 = (dot(vec3(_194, _195, _196), vec3(_940 * _930, _940 * _932, _940 * _934)) + 1.0) * 0.5;
        float _2671 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _957 = sqrt(((_932 * _932) + (_930 * _930)) + (_934 * _934)) / (_838 + 9.9999997473787516355514526367188e-06);
        float _2682 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _2682 : (isnan(_2682) ? 1.0 : min(_2682, 1.0));
        float _959 = _958 * 2.0;
        float _963 = (1.0 - _958) / (_958 + 1.0);
        float _2693 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _2693 : (isnan(_2693) ? 1.0 : min(_2693, 1.0));
        float _973 = ((((1.0 - _964) * (_959 + 2.0)) * exp2(log2(isnan(1.0) ? _2671 : (isnan(_2671) ? 1.0 : min(_2671, 1.0))) * (_959 + 1.0))) + _964) * _838;
        _981 = cbModelParam._m0[36u].w * (isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0)));
        _982 = cbModelParam._m0[36u].w * (isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0)));
        _983 = cbModelParam._m0[36u].w * (isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0)));
    }
    else
    {
        _981 = 0.0;
        _982 = 0.0;
        _983 = 0.0;
    }
    float _993 = (cbModelParam._m0[1u].x * (_981 - _684)) + _684;
    float _994 = (cbModelParam._m0[1u].x * (_982 - _685)) + _685;
    float _995 = (cbModelParam._m0[1u].x * (_983 - _686)) + _686;
    float _1016 = fma(_995, cbSceneParam._m0[89u].z, fma(_994, cbSceneParam._m0[89u].y, _993 * cbSceneParam._m0[89u].x));
    float _1019 = fma(_995, cbSceneParam._m0[90u].z, fma(_994, cbSceneParam._m0[90u].y, _993 * cbSceneParam._m0[90u].x));
    float _1022 = fma(_995, cbSceneParam._m0[91u].z, fma(_994, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _993));
    float _1059 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1063 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1067 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1071 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1072 = _1059 / _1071;
    float _1073 = _1063 / _1071;
    float _1074 = _1067 / _1071;
    float _1211;
    float _1212;
    float _1213;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1091 = ((uint(_1074 > cbSceneParam._m0[59u].y) + uint(_1074 > cbSceneParam._m0[59u].x)) + uint(_1074 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1092 = _1091 + 43u;
        uint _1100 = _1091 + 44u;
        uint _1108 = _1091 + 45u;
        uint _1116 = _1091 + 46u;
        float _1127 = fma(_1071, cbSceneParam._m0[_1092].w, fma(_1067, cbSceneParam._m0[_1092].z, fma(_1063, cbSceneParam._m0[_1092].y, _1059 * cbSceneParam._m0[_1092].x)));
        float _1131 = fma(_1071, cbSceneParam._m0[_1100].w, fma(_1067, cbSceneParam._m0[_1100].z, fma(_1063, cbSceneParam._m0[_1100].y, _1059 * cbSceneParam._m0[_1100].x)));
        float _1139 = fma(_1071, cbSceneParam._m0[_1116].w, fma(_1067, cbSceneParam._m0[_1116].z, fma(_1063, cbSceneParam._m0[_1116].y, _1059 * cbSceneParam._m0[_1116].x)));
        float _1144 = cbSceneParam._m0[33u].z * _1139;
        float _1146 = cbSceneParam._m0[33u].w * _1139;
        float _1149 = fma(_1071, cbSceneParam._m0[_1108].w, fma(_1067, cbSceneParam._m0[_1108].z, fma(_1063, cbSceneParam._m0[_1108].y, _1059 * cbSceneParam._m0[_1108].x))) / _1139;
        float _1197 = (cbSceneParam._m0[33u].x - sqrt(((_1073 * _1073) + (_1072 * _1072)) + (_1074 * _1074))) * cbSceneParam._m0[33u].y;
        float _2734 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1204 = (isnan(1.0) ? _2734 : (isnan(_2734) ? 1.0 : min(_2734, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1144 + _1127) / _1139, (_1146 + _1131) / _1139), _1149), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1146 + _1127) / _1139, (_1131 - _1144) / _1139), _1149), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1127 - _1144) / _1139, (_1131 - _1146) / _1139), _1149), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1127 - _1146) / _1139, (_1144 + _1131) / _1139), _1149), 0.0)).x), vec4(0.25)));
        _1211 = 1.0 - (_1204 * cbSceneParam._m0[34u].x);
        _1212 = 1.0 - (_1204 * cbSceneParam._m0[34u].y);
        _1213 = 1.0 - (_1204 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1211 = 1.0;
        _1212 = 1.0;
        _1213 = 1.0;
    }
    float _1269;
    float _1271;
    float _1273;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1257 = fma(_1071, cbSceneParam._m0[63u].w, fma(_1067, cbSceneParam._m0[63u].z, fma(_1063, cbSceneParam._m0[63u].y, _1059 * cbSceneParam._m0[63u].x)));
        float _1258 = fma(_1071, cbSceneParam._m0[60u].w, fma(_1067, cbSceneParam._m0[60u].z, fma(_1063, cbSceneParam._m0[60u].y, _1059 * cbSceneParam._m0[60u].x))) / _1257;
        float _1259 = fma(_1071, cbSceneParam._m0[61u].w, fma(_1067, cbSceneParam._m0[61u].z, fma(_1063, cbSceneParam._m0[61u].y, _1059 * cbSceneParam._m0[61u].x))) / _1257;
        float frontier_phi_8_7_ladder;
        float frontier_phi_8_7_ladder_1;
        float frontier_phi_8_7_ladder_2;
        if ((((_1258 >= cbSceneParam._m0[64u].x) && (_1259 >= cbSceneParam._m0[64u].y)) && (_1258 <= cbSceneParam._m0[64u].z)) && (_1259 <= cbSceneParam._m0[64u].w))
        {
            float _1468 = fma(_1071, cbSceneParam._m0[62u].w, fma(_1067, cbSceneParam._m0[62u].z, fma(_1063, cbSceneParam._m0[62u].y, _1059 * cbSceneParam._m0[62u].x))) / _1257;
            float _1472 = isnan(cbSceneParam._m0[41u].w) ? _1468 : (isnan(_1468) ? cbSceneParam._m0[41u].w : max(_1468, cbSceneParam._m0[41u].w));
            float _1515 = (cbSceneParam._m0[33u].x - sqrt(((_1073 * _1073) + (_1072 * _1072)) + (_1074 * _1074))) * cbSceneParam._m0[33u].y;
            float _2750 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
            float _1522 = (isnan(1.0) ? _2750 : (isnan(_2750) ? 1.0 : min(_2750, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1258, cbSceneParam._m0[33u].w + _1259), _1472), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1258, _1259 - cbSceneParam._m0[33u].z), _1472), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1258 - cbSceneParam._m0[33u].z, _1259 - cbSceneParam._m0[33u].w), _1472), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1258 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1259), _1472), 0.0)).x), vec4(0.25)));
            float _1526 = 1.0 - (_1522 * cbSceneParam._m0[34u].x);
            float _1527 = 1.0 - (_1522 * cbSceneParam._m0[34u].y);
            float _1528 = 1.0 - (_1522 * cbSceneParam._m0[34u].z);
            frontier_phi_8_7_ladder = isnan(_1528) ? _1213 : (isnan(_1213) ? _1528 : min(_1213, _1528));
            frontier_phi_8_7_ladder_1 = isnan(_1526) ? _1211 : (isnan(_1211) ? _1526 : min(_1211, _1526));
            frontier_phi_8_7_ladder_2 = isnan(_1527) ? _1212 : (isnan(_1212) ? _1527 : min(_1212, _1527));
        }
        else
        {
            frontier_phi_8_7_ladder = _1213;
            frontier_phi_8_7_ladder_1 = _1211;
            frontier_phi_8_7_ladder_2 = _1212;
        }
        _1269 = frontier_phi_8_7_ladder_1;
        _1271 = frontier_phi_8_7_ladder_2;
        _1273 = frontier_phi_8_7_ladder;
    }
    else
    {
        _1269 = _1211;
        _1271 = _1212;
        _1273 = _1213;
    }
    float _2776 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
    float _1275 = isnan(1.0) ? _2776 : (isnan(_2776) ? 1.0 : min(_2776, 1.0));
    float _2787 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
    float _1276 = isnan(1.0) ? _2787 : (isnan(_2787) ? 1.0 : min(_2787, 1.0));
    float _2798 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
    float _1277 = isnan(1.0) ? _2798 : (isnan(_2798) ? 1.0 : min(_2798, 1.0));
    uvec4 _1281 = floatBitsToUint(cbInstanceData._m0[_325 + 5u]);
    uint _1283 = _1281.x * 14u;
    uint _1284 = _1283 + 13u;
    float _1289 = _351 + (-1.0);
    float _1293 = (cbLight._m0[_1284].x * _1289) + 1.0;
    float _1294 = (cbLight._m0[_1284].y * _1289) + 1.0;
    uint _1295 = _1283 + 5u;
    float _1301 = isnan(1.0) ? _1294 : (isnan(_1294) ? 1.0 : min(_1294, 1.0));
    uint _1305 = _1283 + 4u;
    float _1315 = isnan(1.0) ? _1293 : (isnan(_1293) ? 1.0 : min(_1293, 1.0));
    uint _1319 = _1283 | 1u;
    float _1330 = dot(vec3(cbLight._m0[_1283].xyz), vec3(_194, _195, _196));
    float _1333 = dot(vec3(cbLight._m0[_1319].xyz), vec3(_194, _195, _196));
    float _2819 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
    float _2830 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
    float _1338 = (isnan(1.0) ? _2819 : (isnan(_2819) ? 1.0 : min(_2819, 1.0))) * 0.3183098733425140380859375;
    float _1340 = (isnan(1.0) ? _2830 : (isnan(_2830) ? 1.0 : min(_2830, 1.0))) * 0.3183098733425140380859375;
    float _1347 = ((cbLight._m0[_1295].x * _1301) * _1340) + (((cbLight._m0[_1305].x * _1275) * _1315) * _1338);
    float _1348 = ((_1301 * cbLight._m0[_1295].y) * _1340) + (((cbLight._m0[_1305].y * _1276) * _1315) * _1338);
    float _1349 = ((_1301 * cbLight._m0[_1295].z) * _1340) + (((cbLight._m0[_1305].z * _1277) * _1315) * _1338);
    uint _1350 = _1283 + 8u;
    float _1356 = cbLight._m0[_1283].x + _276;
    float _1357 = cbLight._m0[_1283].y + _277;
    float _1358 = cbLight._m0[_1283].z + _278;
    float _1362 = inversesqrt(dot(vec3(_1356, _1357, _1358), vec3(_1356, _1357, _1358)));
    float _1366 = dot(vec3(_194, _195, _196), vec3(cbLight._m0[_1283].xyz));
    float _2841 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
    float _1369 = isnan(1.0) ? _2841 : (isnan(_2841) ? 1.0 : min(_2841, 1.0));
    float _1370 = dot(vec3(_194, _195, _196), vec3(_276, _277, _278));
    float _2852 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
    float _1373 = isnan(1.0) ? _2852 : (isnan(_2852) ? 1.0 : min(_2852, 1.0));
    float _1374 = dot(vec3(cbLight._m0[_1283].xyz), vec3(_1356 * _1362, _1357 * _1362, _1358 * _1362));
    float _2863 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
    float _1385 = (exp2(log2(1.0 - (isnan(1.0) ? _2863 : (isnan(_2863) ? 1.0 : min(_2863, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1391 = (0.5 / ((_1369 + 9.9999999392252902907785028219223e-09) + _1373)) * _1369;
    float _2874 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
    float _1393 = (isnan(1.0) ? _2874 : (isnan(_2874) ? 1.0 : min(_2874, 1.0))) * 0.31831014156341552734375;
    uint _1407 = _1283 + 9u;
    float _1413 = cbLight._m0[_1319].x + _276;
    float _1414 = cbLight._m0[_1319].y + _277;
    float _1415 = cbLight._m0[_1319].z + _278;
    float _1419 = inversesqrt(dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415)));
    float _1423 = dot(vec3(_194, _195, _196), vec3(cbLight._m0[_1319].xyz));
    float _2885 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
    float _1426 = isnan(1.0) ? _2885 : (isnan(_2885) ? 1.0 : min(_2885, 1.0));
    float _1427 = dot(vec3(cbLight._m0[_1319].xyz), vec3(_1413 * _1419, _1414 * _1419, _1415 * _1419));
    float _2896 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
    float _1436 = (exp2(log2(1.0 - (isnan(1.0) ? _2896 : (isnan(_2896) ? 1.0 : min(_2896, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1440 = (0.5 / ((_1426 + 9.9999999392252902907785028219223e-09) + _1373)) * _1426;
    float _2907 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
    float _1442 = (isnan(1.0) ? _2907 : (isnan(_2907) ? 1.0 : min(_2907, 1.0))) * 0.31831014156341552734375;
    float _1452 = (((_1436 * cbLight._m0[_1407].x) * _1442) * _1301) + ((((cbLight._m0[_1350].x * _1275) * _1385) * _1393) * _1315);
    float _1453 = (((_1436 * cbLight._m0[_1407].y) * _1442) * _1301) + ((((cbLight._m0[_1350].y * _1276) * _1385) * _1393) * _1315);
    float _1454 = (((_1436 * cbLight._m0[_1407].z) * _1442) * _1301) + ((((cbLight._m0[_1350].z * _1277) * _1385) * _1393) * _1315);
    float _1585;
    float _1587;
    float _1589;
    float _1591;
    float _1593;
    float _1595;
    if (_1281.y == 0u)
    {
        uvec4 _1540 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1541 = _1540.x;
        uint _1552 = uint((float(_1540.y) * floor(float(uint(cbSceneParam._m0[85u].y * _285) / _1541))) + floor(float(uint(cbSceneParam._m0[85u].x * _284) / _1541)));
        float _1562 = (log2(_1074 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1563 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        uint _1566 = uint(isnan(14.0) ? _1563 : (isnan(_1563) ? 14.0 : min(_1563, 14.0)));
        uvec4 _1571 = texelFetch(g_lightClusterGridBuffer, int(((_1566 << 2u) + (_1552 << 6u)) >> 2u));
        uint _1572 = _1571.x;
        uint _1573 = _1540.z;
        float _1651;
        float _1653;
        float _1655;
        float _1657;
        float _1659;
        float _1661;
        if (((((1u << ((_1573 >> 4u) & 15u)) + 4294967295u) & _1572) == 0u) || ((_1573 & 240u) == 0u))
        {
            _1651 = 0.0;
            _1653 = 0.0;
            _1655 = 0.0;
            _1657 = 0.0;
            _1659 = 0.0;
            _1661 = 0.0;
        }
        else
        {
            float _1652;
            float _1654;
            float _1656;
            float _1658;
            float _1660;
            float _1662;
            float _1795 = 0.0;
            float _1796 = 0.0;
            float _1797 = 0.0;
            float _1798 = 0.0;
            float _1799 = 0.0;
            float _1800 = 0.0;
            uint _1801 = 0u;
            uint _1810;
            bool _1811;
            for (;;)
            {
                _1810 = texelFetch(g_lightClassification, int((((_1566 << 5u) + (_1552 << 9u)) + (_1801 << 2u)) >> 2u)).x;
                _1811 = _1810 == 0u;
                float frontier_phi_22_pred;
                float frontier_phi_22_pred_1;
                float frontier_phi_22_pred_2;
                float frontier_phi_22_pred_3;
                float frontier_phi_22_pred_4;
                float frontier_phi_22_pred_5;
                if (_1811)
                {
                    frontier_phi_22_pred = _1798;
                    frontier_phi_22_pred_1 = _1797;
                    frontier_phi_22_pred_2 = _1795;
                    frontier_phi_22_pred_3 = _1796;
                    frontier_phi_22_pred_4 = _1800;
                    frontier_phi_22_pred_5 = _1799;
                }
                else
                {
                    float _1919;
                    float _1920;
                    float _1921;
                    float _1922;
                    float _1923;
                    float _1924;
                    uint _1925;
                    _1919 = _1795;
                    _1920 = _1796;
                    _1921 = _1797;
                    _1922 = _1798;
                    _1923 = _1799;
                    _1924 = _1800;
                    _1925 = _1810;
                    float _1851;
                    float _1852;
                    float _1853;
                    float _1854;
                    float _1855;
                    float _1856;
                    for (;;)
                    {
                        uint _1929 = uint(findLSB(_1925)) + (_1801 << 5u);
                        uint _1926 = (_1925 + 4294967295u) & _1925;
                        uint _1931 = _1929 * 48u;
                        vec4 _1945 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1931)).x, texelFetch(g_PointLightRenderingBuffer, int(_1931 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1931 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1931 + 3u)).x));
                        uint _1951 = (_1929 * 48u) + 4u;
                        vec4 _1964 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1951)).x, texelFetch(g_PointLightRenderingBuffer, int(_1951 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1951 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1951 + 3u)).x));
                        uint _1970 = (_1929 * 48u) + 8u;
                        vec3 _1981 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_1970)).x, texelFetch(g_PointLightRenderingBuffer, int(_1970 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1970 + 2u)).x));
                        float _1985 = _1945.x - _1072;
                        float _1986 = _1945.y - _1073;
                        float _1987 = _1945.z - _1074;
                        float _1988 = dot(vec3(_1985, _1986, _1987), vec3(_1985, _1986, _1987));
                        float _1991 = inversesqrt(_1988);
                        float _2000 = 1.0 - (_1988 * _1945.w);
                        float _2928 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
                        float _2001 = isnan(1.0) ? _2928 : (isnan(_2928) ? 1.0 : min(_2928, 1.0));
                        float _2002 = sqrt(_1988) * _1964.w;
                        float _2005 = 1.39999997615814208984375 / (_2002 + 1.39999997615814208984375);
                        float _2006 = _2005 * _2005;
                        float _2009 = ((1.0 - _2006) * dot(vec3(_306, _309, _312), vec3(_1991 * _1985, _1991 * _1986, _1991 * _1987))) + _2006;
                        float _2012 = _2002 * _2002;
                        float _2016 = ((isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0))) * _2001) / ((_2012 * 0.699999988079071044921875) + 1.0);
                        float _2020 = (-0.0) - _1072;
                        float _2021 = (-0.0) - _1073;
                        float _2022 = (-0.0) - _1074;
                        float _2026 = inversesqrt(dot(vec3(_2020, _2021, _2022), vec3(_2020, _2021, _2022)));
                        float _2030 = dot(vec3(_306, _309, _312), vec3(_2026 * _2020, _2026 * _2021, _2026 * _2022));
                        float _2944 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
                        float _2955 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
                        float _2034 = isnan(1.0) ? _2955 : (isnan(_2955) ? 1.0 : min(_2955, 1.0));
                        float _2038 = (0.5 / (((isnan(1.0) ? _2944 : (isnan(_2944) ? 1.0 : min(_2944, 1.0))) + 9.9999999392252902907785028219223e-09) + _2034)) * _2034;
                        float _2966 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
                        float _2047 = (((isnan(1.0) ? _2966 : (isnan(_2966) ? 1.0 : min(_2966, 1.0))) * 3.1415927410125732421875) / ((_2012 * 2.1991131305694580078125) + 3.141590118408203125)) * _2001;
                        _1854 = (_2016 * _1964.x) + _1922;
                        _1855 = (_2016 * _1964.y) + _1923;
                        _1856 = (_2016 * _1964.z) + _1924;
                        _1851 = (_2047 * _1981.x) + _1919;
                        _1852 = (_2047 * _1981.y) + _1920;
                        _1853 = (_2047 * _1981.z) + _1921;
                        if (_1926 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1919 = _1851;
                            _1920 = _1852;
                            _1921 = _1853;
                            _1922 = _1854;
                            _1923 = _1855;
                            _1924 = _1856;
                            _1925 = _1926;
                        }
                    }
                    frontier_phi_22_pred = _1854;
                    frontier_phi_22_pred_1 = _1853;
                    frontier_phi_22_pred_2 = _1851;
                    frontier_phi_22_pred_3 = _1852;
                    frontier_phi_22_pred_4 = _1856;
                    frontier_phi_22_pred_5 = _1855;
                }
                _1658 = frontier_phi_22_pred;
                _1656 = frontier_phi_22_pred_1;
                _1652 = frontier_phi_22_pred_2;
                _1654 = frontier_phi_22_pred_3;
                _1662 = frontier_phi_22_pred_4;
                _1660 = frontier_phi_22_pred_5;
                uint _1802 = _1801 + 1u;
                if (_1802 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1795 = _1652;
                    _1796 = _1654;
                    _1797 = _1656;
                    _1798 = _1658;
                    _1799 = _1660;
                    _1800 = _1662;
                    _1801 = _1802;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1651 = _1652;
            _1653 = _1654;
            _1655 = _1656;
            _1657 = _1658;
            _1659 = _1660;
            _1661 = _1662;
        }
        uvec4 _1665 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1666 = _1665.z;
        uint _1668 = (_1666 >> 8u) & 15u;
        float _1766;
        float _1768;
        float _1770;
        float _1772;
        float _1774;
        float _1776;
        if (((4294967295u << _1668) & _1572) == 0u)
        {
            _1766 = _1651;
            _1768 = _1653;
            _1770 = _1655;
            _1772 = _1657;
            _1774 = _1659;
            _1776 = _1661;
        }
        else
        {
            float _1791 = inversesqrt(dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074)));
            float frontier_phi_16_17_ladder;
            float frontier_phi_16_17_ladder_1;
            float frontier_phi_16_17_ladder_2;
            float frontier_phi_16_17_ladder_3;
            float frontier_phi_16_17_ladder_4;
            float frontier_phi_16_17_ladder_5;
            if (_1668 < ((_1666 >> 12u) & 15u))
            {
                float _1767;
                float _1769;
                float _1771;
                float _1773;
                float _1775;
                float _1777;
                float _1902 = _1651;
                float _1903 = _1653;
                float _1904 = _1655;
                float _1905 = _1657;
                float _1906 = _1659;
                float _1907 = _1661;
                uint _1908 = _1668;
                uint _1917;
                bool _1918;
                for (;;)
                {
                    _1917 = texelFetch(g_lightClassification, int((((_1566 << 5u) + (_1552 << 9u)) + (_1908 << 2u)) >> 2u)).x;
                    _1918 = _1917 == 0u;
                    float frontier_phi_28_pred;
                    float frontier_phi_28_pred_1;
                    float frontier_phi_28_pred_2;
                    float frontier_phi_28_pred_3;
                    float frontier_phi_28_pred_4;
                    float frontier_phi_28_pred_5;
                    if (_1918)
                    {
                        frontier_phi_28_pred = _1907;
                        frontier_phi_28_pred_1 = _1906;
                        frontier_phi_28_pred_2 = _1904;
                        frontier_phi_28_pred_3 = _1903;
                        frontier_phi_28_pred_4 = _1902;
                        frontier_phi_28_pred_5 = _1905;
                    }
                    else
                    {
                        float _2052;
                        float _2053;
                        float _2054;
                        float _2055;
                        float _2056;
                        float _2057;
                        float _2305;
                        float _2306;
                        float _2307;
                        float _2308;
                        float _2309;
                        float _2310;
                        float _2065 = _1902;
                        float _2066 = _1903;
                        float _2067 = _1904;
                        float _2068 = _1905;
                        float _2069 = _1906;
                        float _2070 = _1907;
                        uint _2071 = _1917;
                        uint _2072;
                        vec4 _2098;
                        float _2099;
                        vec4 _2114;
                        vec3 _2126;
                        vec4 _2142;
                        vec4 _2158;
                        float _2205;
                        bool _2206;
                        for (;;)
                        {
                            uint _2082 = ((_1908 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2071));
                            _2072 = (_2071 + 4294967295u) & _2071;
                            uint _2084 = _2082 * 40u;
                            _2098 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2084 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2084 + 3u)).x));
                            _2099 = _2098.w;
                            uint _2101 = (_2082 * 40u) + 4u;
                            _2114 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2101 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2101 + 3u)).x));
                            uint _2116 = (_2082 * 40u) + 8u;
                            _2126 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2116 + 2u)).x));
                            uint _2129 = (_2082 * 40u) + 16u;
                            _2142 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2129)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2129 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2129 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2129 + 3u)).x));
                            uint _2145 = (_2082 * 40u) + 20u;
                            _2158 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2145 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2145 + 3u)).x));
                            uint _2161 = (_2082 * 40u) + 24u;
                            vec4 _2174 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2161)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2161 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2161 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2161 + 3u)).x));
                            uint _2180 = (_2082 * 40u) + 28u;
                            vec4 _2193 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2180)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2180 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2180 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2180 + 3u)).x));
                            _2205 = fma(_1074, _2193.z, fma(_1073, _2193.y, _2193.x * _1072)) + _2193.w;
                            _2206 = !((fma(_1074, _2174.z, fma(_1073, _2174.y, _2174.x * _1072)) + _2174.w) <= 0.0);
                            float frontier_phi_34_pred;
                            float frontier_phi_34_pred_1;
                            float frontier_phi_34_pred_2;
                            float frontier_phi_34_pred_3;
                            float frontier_phi_34_pred_4;
                            float frontier_phi_34_pred_5;
                            if (_2206)
                            {
                                float _2233 = _2098.x - _1072;
                                float _2234 = _2098.y - _1073;
                                float _2235 = _2098.z - _1074;
                                float _2236 = dot(vec3(_2233, _2234, _2235), vec3(_2233, _2234, _2235));
                                float _2239 = inversesqrt(_2236);
                                float _2240 = _2239 * _2233;
                                float _2241 = _2239 * _2234;
                                float _2242 = _2239 * _2235;
                                float _2246 = 1.0 - (_2236 / (_2099 * _2099));
                                float _2977 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
                                float _2247 = isnan(1.0) ? _2977 : (isnan(_2977) ? 1.0 : min(_2977, 1.0));
                                float _2251 = sqrt(_2236) * _2114.w;
                                float _2253 = 1.39999997615814208984375 / (_2251 + 1.39999997615814208984375);
                                float _2254 = _2253 * _2253;
                                float _2255 = 1.0 - _2254;
                                float _2257 = (_2255 * dot(vec3(_2240, _2241, _2242), vec3(_306, _309, _312))) + _2254;
                                float _2260 = _2251 * _2251;
                                float _2264 = (fma(_1074, _2142.z, fma(_1073, _2142.y, _2142.x * _1072)) + _2142.w) / _2205;
                                float _2265 = (fma(_1074, _2158.z, fma(_1073, _2158.y, _2158.x * _1072)) + _2158.w) / _2205;
                                float _2269 = 1.0 - dot(vec2(_2264, _2265), vec2(_2264, _2265));
                                float _2993 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
                                float _2270 = isnan(1.0) ? _2993 : (isnan(_2993) ? 1.0 : min(_2993, 1.0));
                                float _2271 = _2270 * (((isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0))) * _2247) / ((_2260 * 0.699999988079071044921875) + 1.0));
                                float _2281 = dot(vec3(_306, _309, _312), vec3((-0.0) - (_1072 * _1791), (-0.0) - (_1073 * _1791), (-0.0) - (_1074 * _1791)));
                                float _3004 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
                                float _2289 = (_2255 * dot(vec3(_306, _309, _312), vec3(_2240, _2241, _2242))) + _2254;
                                float _3015 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
                                float _2290 = isnan(1.0) ? _3015 : (isnan(_3015) ? 1.0 : min(_3015, 1.0));
                                float _2294 = (0.5 / (((isnan(1.0) ? _3004 : (isnan(_3004) ? 1.0 : min(_3004, 1.0))) + 9.9999999392252902907785028219223e-09) + _2290)) * _2290;
                                float _3026 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
                                float _2301 = (_2270 * _2247) * (((isnan(1.0) ? _3026 : (isnan(_3026) ? 1.0 : min(_3026, 1.0))) * 3.1415927410125732421875) / ((_2260 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_34_pred = _2271 * _2114.z;
                                frontier_phi_34_pred_1 = _2271 * _2114.y;
                                frontier_phi_34_pred_2 = _2271 * _2114.x;
                                frontier_phi_34_pred_3 = _2301 * _2126.z;
                                frontier_phi_34_pred_4 = _2301 * _2126.y;
                                frontier_phi_34_pred_5 = _2301 * _2126.x;
                            }
                            else
                            {
                                frontier_phi_34_pred = 0.0;
                                frontier_phi_34_pred_1 = 0.0;
                                frontier_phi_34_pred_2 = 0.0;
                                frontier_phi_34_pred_3 = 0.0;
                                frontier_phi_34_pred_4 = 0.0;
                                frontier_phi_34_pred_5 = 0.0;
                            }
                            _2310 = frontier_phi_34_pred;
                            _2309 = frontier_phi_34_pred_1;
                            _2308 = frontier_phi_34_pred_2;
                            _2307 = frontier_phi_34_pred_3;
                            _2306 = frontier_phi_34_pred_4;
                            _2305 = frontier_phi_34_pred_5;
                            _2055 = _2308 + _2068;
                            _2056 = _2309 + _2069;
                            _2057 = _2310 + _2070;
                            _2052 = _2305 + _2065;
                            _2053 = _2306 + _2066;
                            _2054 = _2307 + _2067;
                            if (_2072 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2065 = _2052;
                                _2066 = _2053;
                                _2067 = _2054;
                                _2068 = _2055;
                                _2069 = _2056;
                                _2070 = _2057;
                                _2071 = _2072;
                                continue;
                            }
                        }
                        frontier_phi_28_pred = _2057;
                        frontier_phi_28_pred_1 = _2056;
                        frontier_phi_28_pred_2 = _2054;
                        frontier_phi_28_pred_3 = _2053;
                        frontier_phi_28_pred_4 = _2052;
                        frontier_phi_28_pred_5 = _2055;
                    }
                    _1777 = frontier_phi_28_pred;
                    _1775 = frontier_phi_28_pred_1;
                    _1771 = frontier_phi_28_pred_2;
                    _1769 = frontier_phi_28_pred_3;
                    _1767 = frontier_phi_28_pred_4;
                    _1773 = frontier_phi_28_pred_5;
                    uint _1909 = _1908 + 1u;
                    if (_1909 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1902 = _1767;
                        _1903 = _1769;
                        _1904 = _1771;
                        _1905 = _1773;
                        _1906 = _1775;
                        _1907 = _1777;
                        _1908 = _1909;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_16_17_ladder = _1777;
                frontier_phi_16_17_ladder_1 = _1771;
                frontier_phi_16_17_ladder_2 = _1769;
                frontier_phi_16_17_ladder_3 = _1767;
                frontier_phi_16_17_ladder_4 = _1773;
                frontier_phi_16_17_ladder_5 = _1775;
            }
            else
            {
                frontier_phi_16_17_ladder = _1661;
                frontier_phi_16_17_ladder_1 = _1655;
                frontier_phi_16_17_ladder_2 = _1653;
                frontier_phi_16_17_ladder_3 = _1651;
                frontier_phi_16_17_ladder_4 = _1657;
                frontier_phi_16_17_ladder_5 = _1659;
            }
            _1766 = frontier_phi_16_17_ladder_3;
            _1768 = frontier_phi_16_17_ladder_2;
            _1770 = frontier_phi_16_17_ladder_1;
            _1772 = frontier_phi_16_17_ladder_4;
            _1774 = frontier_phi_16_17_ladder_5;
            _1776 = frontier_phi_16_17_ladder;
        }
        float _1781 = isnan(1.0) ? _351 : (isnan(_351) ? 1.0 : min(_351, 1.0));
        _1585 = (_1781 * _1772) + _1347;
        _1587 = (_1781 * _1774) + _1348;
        _1589 = (_1781 * _1776) + _1349;
        _1591 = ((_1766 * 0.039999999105930328369140625) * _1781) + _1452;
        _1593 = ((_1768 * 0.039999999105930328369140625) * _1781) + _1453;
        _1595 = ((_1770 * 0.039999999105930328369140625) * _1781) + _1454;
    }
    else
    {
        _1585 = _1347;
        _1587 = _1348;
        _1589 = _1349;
        _1591 = _1452;
        _1593 = _1453;
        _1595 = _1454;
    }
    float _3042 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _3053 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _3064 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _3075 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _1617 = cbInstanceData._m0[_325 + 6u].w * (isnan(1.0) ? _3075 : (isnan(_3075) ? 1.0 : min(_3075, 1.0)));
    float _1622 = _284 / cbSceneParam._m0[86u].x;
    float _1623 = _285 / cbSceneParam._m0[86u].y;
    vec4 _1637 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1622, _1623, (log2((isnan(cbSceneParam._m0[77u].w) ? _217 : (isnan(_217) ? cbSceneParam._m0[77u].w : min(_217, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1639 = _1637.x;
    float _1640 = _1637.y;
    float _1641 = _1637.z;
    float _1642 = _1637.w;
    float _1715;
    float _1717;
    float _1719;
    float _1721;
    if (_217 > cbSceneParam._m0[78u].w)
    {
        float _1676 = isnan(_217) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _217 : min(cbSceneParam._m0[80u].w, _217));
        float _1677 = _1676 / _217;
        float _1688 = _1677 * _269;
        float _1689 = _270 * _1677;
        float _1690 = (-0.0) - _1689;
        float _1692 = _1677 * _271;
        float _1694 = (cbSceneParam._m0[77u].w * _1690) / _1676;
        float _1695 = _1694 + cbSceneParam._m0[79u].w;
        float _1696 = cbSceneParam._m0[79u].w - _1689;
        float _1702 = sqrt(((_1688 * _1688) + (_1689 * _1689)) + (_1692 * _1692));
        float _1705 = (1.0 - (cbSceneParam._m0[77u].w / _1676)) * _1702;
        float _1711 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1713 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1864;
        if (abs((_1690 - _1694) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1864 = ((((_1695 > 0.0) ? exp2(_1711 * _1695) : (2.0 - exp2(_1713 * _1695))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1705;
        }
        else
        {
            float _1824 = 1.0 / cbSceneParam._m0[80u].x;
            float _1825 = isnan(_1696) ? _1695 : (isnan(_1695) ? _1696 : max(_1695, _1696));
            float _1826 = isnan(_1696) ? _1695 : (isnan(_1695) ? _1696 : min(_1695, _1696));
            float _1835 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : min(_1825, 0.0));
            float _1836 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : min(_1826, 0.0));
            _1864 = ((abs(_1702 / _1690) * cbSceneParam._m0[80u].y) * ((((_1835 - _1836) * 2.0) - ((exp2(_1711 * (isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0)))) - exp2(_1711 * (isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))))) * _1824)) - ((exp2(_1713 * _1835) - exp2(_1713 * _1836)) * _1824))) + (_1705 * cbSceneParam._m0[80u].z);
        }
        vec4 _1866 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1622, _1623, 1.0), 0.0);
        float _1875 = exp2((_1864 * (-1.44269502162933349609375)) * (1.0 - _1866.w));
        float _1876 = log2(_1875);
        float _1892 = log2(_1642);
        _1715 = (exp2(_1892 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1876 * cbSceneParam._m0[78u].x)) * _1866.x) / cbSceneParam._m0[78u].x)) + _1639;
        _1717 = (exp2(_1892 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1876 * cbSceneParam._m0[78u].y)) * _1866.y) / cbSceneParam._m0[78u].y)) + _1640;
        _1719 = (exp2(_1892 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1876 * cbSceneParam._m0[78u].z)) * _1866.z) / cbSceneParam._m0[78u].z)) + _1641;
        _1721 = _1875 * _1642;
    }
    else
    {
        _1715 = _1639;
        _1717 = _1640;
        _1719 = _1641;
        _1721 = _1642;
    }
    float _1733 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1734 = _1733 == 3.0;
    float _1736 = log2(_1721);
    float _1743 = exp2(_1736 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3042 : (isnan(_3042) ? 1.0 : min(_3042, 1.0))) * (_1585 + ((isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0))) * _351))) + (_1591 * cbPerFrame._m0[3u].x));
    float _1744 = exp2(_1736 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3053 : (isnan(_3053) ? 1.0 : min(_3053, 1.0))) * (_1587 + ((isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0))) * _351))) + (_1593 * cbPerFrame._m0[3u].x));
    float _1745 = exp2(_1736 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3064 : (isnan(_3064) ? 1.0 : min(_3064, 1.0))) * (_1589 + ((isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0))) * _351))) + (_1595 * cbPerFrame._m0[3u].x));
    float _1754 = (_1733 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1754 * (_1734 ? _1743 : (_1743 + (cbSceneParam._m0[72u].w * _1715)));
    SV_Target.y = _1754 * (_1734 ? _1744 : (_1744 + (cbSceneParam._m0[72u].w * _1717)));
    SV_Target.z = _1754 * (_1734 ? _1745 : (_1745 + (cbSceneParam._m0[72u].w * _1719)));
    SV_Target.w = _1617;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _1617;
}


