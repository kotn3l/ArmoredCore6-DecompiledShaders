#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_Rotor_Blade_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _154 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _155 = _154 * NORMAL.x;
    float _156 = _154 * NORMAL.y;
    float _157 = _154 * NORMAL.z;
    vec4 _177 = texture(sampler2D(S_Rotor_Blade_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _184 = _177.x * cbMtdParam._m0[9u].x;
    float _185 = _177.y * cbMtdParam._m0[9u].y;
    float _186 = _177.z * cbMtdParam._m0[9u].z;
    float _187 = _177.w * TEXCOORD_1.z;
    float _191 = inversesqrt(dot(vec3(_155, _156, _157), vec3(_155, _156, _157)));
    float _192 = _191 * _155;
    float _193 = _191 * _156;
    float _194 = _191 * _157;
    float _2122 = isnan(0.0) ? _187 : (isnan(_187) ? 0.0 : max(_187, 0.0));
    float _196 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
    float _2133 = isnan(0.0) ? _184 : (isnan(_184) ? 0.0 : max(_184, 0.0));
    float _2144 = isnan(0.0) ? _185 : (isnan(_185) ? 0.0 : max(_185, 0.0));
    float _2155 = isnan(0.0) ? _186 : (isnan(_186) ? 0.0 : max(_186, 0.0));
    float _215 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    float _273 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _274 = _267 * _273;
    float _275 = _268 * _273;
    float _276 = _269 * _273;
    float _282 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _283 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _304 = fma(_194, cbSceneParam._m0[5u].z, fma(_193, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _192));
    float _307 = fma(_194, cbSceneParam._m0[6u].z, fma(_193, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _192));
    float _310 = fma(_194, cbSceneParam._m0[7u].z, fma(_193, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _192));
    uint _323 = uint(roundEven(NORMAL.w)) * 13u;
    uint _326 = (_323 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _332 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2133 : (isnan(_2133) ? 1.0 : min(_2133, 1.0)))) * cbInstanceData._m0[_326].x;
    float _333 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2144 : (isnan(_2144) ? 1.0 : min(_2144, 1.0)))) * cbInstanceData._m0[_326].y;
    float _334 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2155 : (isnan(_2155) ? 1.0 : min(_2155, 1.0)))) * cbInstanceData._m0[_326].z;
    float _2166 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _335 = isnan(1.0) ? _2166 : (isnan(_2166) ? 1.0 : min(_2166, 1.0));
    float _2177 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _336 = isnan(1.0) ? _2177 : (isnan(_2177) ? 1.0 : min(_2177, 1.0));
    float _2188 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _337 = isnan(1.0) ? _2188 : (isnan(_2188) ? 1.0 : min(_2188, 1.0));
    vec4 _346 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _282, cbSceneParam._m0[86u].y * _283));
    float _349 = _346.x * TEXCOORD_1.w;
    float _371 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _375 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _379 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _682;
    float _683;
    float _684;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _406 = fma(_379, cbModelParam._m0[26u].z, fma(_375, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _371));
        float _410 = fma(_379, cbModelParam._m0[27u].z, fma(_375, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _371));
        float _414 = fma(_379, cbModelParam._m0[28u].z, fma(_375, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _371));
        float _439 = _371 + _192;
        float _440 = _375 + _193;
        float _441 = _379 + _194;
        float _451 = fma(_441, cbModelParam._m0[26u].z, fma(_440, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _439)) - _406;
        float _452 = fma(_441, cbModelParam._m0[27u].z, fma(_440, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _439)) - _410;
        float _453 = fma(_441, cbModelParam._m0[28u].z, fma(_440, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _439)) - _414;
        float _457 = inversesqrt(dot(vec3(_451, _452, _453), vec3(_451, _452, _453)));
        float _470 = ((_457 * _451) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_406 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _471 = ((_457 * _452) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_410 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _472 = ((_457 * _453) / cbModelParam._m0[34u].z) + ((((((_414 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _475 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_470, _471, _472), 0.0);
        vec4 _482 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_470, _471, _472), 0.0);
        vec4 _489 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_470, _471, _472), 0.0);
        vec4 _496 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_470, _471, _472), 0.0);
        float _509 = exp2((_475.w + (-0.5)) * 20.0) * 2.0;
        float _517 = exp2((_482.w + (-0.5)) * 20.0) * 2.0;
        float _524 = exp2((_489.w + (-0.5)) * 20.0) * 2.0;
        float _531 = exp2((_496.w + (-0.5)) * 20.0) * 2.0;
        float _532 = _531 * (_496.x + (-0.5));
        float _533 = _531 * (_496.y + (-0.5));
        float _534 = _531 * (_496.z + (-0.5));
        float _535 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
        float _536 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
        float _537 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
        float _539 = ((_475.x + (-0.5)) * 0.5) * _509;
        float _541 = ((_482.x + (-0.5)) * 0.5) * _517;
        float _543 = ((_489.x + (-0.5)) * 0.5) * _524;
        float _544 = dot(vec3(_539, _541, _543), vec3(_539, _541, _543));
        float _549 = (_544 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_544);
        float _558 = (dot(vec3(_192, _193, _194), vec3(_549 * _539, _549 * _541, _549 * _543)) + 1.0) * 0.5;
        float _2214 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
        float _568 = sqrt(((_541 * _541) + (_539 * _539)) + (_543 * _543)) / (_535 + 9.9999997473787516355514526367188e-06);
        float _2225 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
        float _569 = isnan(1.0) ? _2225 : (isnan(_2225) ? 1.0 : min(_2225, 1.0));
        float _570 = _569 * 2.0;
        float _574 = (1.0 - _569) / (_569 + 1.0);
        float _2236 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
        float _575 = isnan(1.0) ? _2236 : (isnan(_2236) ? 1.0 : min(_2236, 1.0));
        float _584 = ((((1.0 - _575) * (_570 + 2.0)) * exp2(log2(isnan(1.0) ? _2214 : (isnan(_2214) ? 1.0 : min(_2214, 1.0))) * (_570 + 1.0))) + _575) * _535;
        float _586 = ((_475.y + (-0.5)) * 0.5) * _509;
        float _588 = ((_482.y + (-0.5)) * 0.5) * _517;
        float _590 = ((_489.y + (-0.5)) * 0.5) * _524;
        float _591 = dot(vec3(_586, _588, _590), vec3(_586, _588, _590));
        float _596 = (_591 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_591);
        float _604 = (dot(vec3(_192, _193, _194), vec3(_596 * _586, _596 * _588, _596 * _590)) + 1.0) * 0.5;
        float _2247 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
        float _613 = sqrt(((_588 * _588) + (_586 * _586)) + (_590 * _590)) / (_536 + 9.9999997473787516355514526367188e-06);
        float _2258 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
        float _614 = isnan(1.0) ? _2258 : (isnan(_2258) ? 1.0 : min(_2258, 1.0));
        float _615 = _614 * 2.0;
        float _619 = (1.0 - _614) / (_614 + 1.0);
        float _2269 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
        float _620 = isnan(1.0) ? _2269 : (isnan(_2269) ? 1.0 : min(_2269, 1.0));
        float _629 = ((((1.0 - _620) * (_615 + 2.0)) * exp2(log2(isnan(1.0) ? _2247 : (isnan(_2247) ? 1.0 : min(_2247, 1.0))) * (_615 + 1.0))) + _620) * _536;
        float _631 = ((_475.z + (-0.5)) * 0.5) * _509;
        float _633 = ((_482.z + (-0.5)) * 0.5) * _517;
        float _635 = ((_489.z + (-0.5)) * 0.5) * _524;
        float _636 = dot(vec3(_631, _633, _635), vec3(_631, _633, _635));
        float _641 = (_636 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_636);
        float _649 = (dot(vec3(_192, _193, _194), vec3(_641 * _631, _641 * _633, _641 * _635)) + 1.0) * 0.5;
        float _2280 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
        float _658 = sqrt(((_633 * _633) + (_631 * _631)) + (_635 * _635)) / (_537 + 9.9999997473787516355514526367188e-06);
        float _2291 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
        float _659 = isnan(1.0) ? _2291 : (isnan(_2291) ? 1.0 : min(_2291, 1.0));
        float _660 = _659 * 2.0;
        float _664 = (1.0 - _659) / (_659 + 1.0);
        float _2302 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
        float _665 = isnan(1.0) ? _2302 : (isnan(_2302) ? 1.0 : min(_2302, 1.0));
        float _674 = ((((1.0 - _665) * (_660 + 2.0)) * exp2(log2(isnan(1.0) ? _2280 : (isnan(_2280) ? 1.0 : min(_2280, 1.0))) * (_660 + 1.0))) + _665) * _537;
        _682 = cbModelParam._m0[36u].z * (isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0)));
        _683 = cbModelParam._m0[36u].z * (isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0)));
        _684 = cbModelParam._m0[36u].z * (isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0)));
    }
    else
    {
        _682 = 0.0;
        _683 = 0.0;
        _684 = 0.0;
    }
    float _979;
    float _980;
    float _981;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _710 = fma(_379, cbModelParam._m0[30u].z, fma(_375, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _371));
        float _714 = fma(_379, cbModelParam._m0[31u].z, fma(_375, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _371));
        float _718 = fma(_379, cbModelParam._m0[32u].z, fma(_375, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _371));
        float _741 = _371 + _192;
        float _742 = _375 + _193;
        float _743 = _379 + _194;
        float _753 = fma(_743, cbModelParam._m0[30u].z, fma(_742, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _741)) - _710;
        float _754 = fma(_743, cbModelParam._m0[31u].z, fma(_742, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _741)) - _714;
        float _755 = fma(_743, cbModelParam._m0[32u].z, fma(_742, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _741)) - _718;
        float _759 = inversesqrt(dot(vec3(_753, _754, _755), vec3(_753, _754, _755)));
        float _772 = ((_759 * _753) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_710 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _773 = ((_759 * _754) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_714 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _774 = ((_759 * _755) / cbModelParam._m0[35u].z) + ((((((_718 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _776 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_772, _773, _774), 0.0);
        vec4 _783 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_772, _773, _774), 0.0);
        vec4 _790 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_772, _773, _774), 0.0);
        vec4 _797 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_772, _773, _774), 0.0);
        float _809 = exp2((_776.w + (-0.5)) * 20.0) * 2.0;
        float _816 = exp2((_783.w + (-0.5)) * 20.0) * 2.0;
        float _823 = exp2((_790.w + (-0.5)) * 20.0) * 2.0;
        float _830 = exp2((_797.w + (-0.5)) * 20.0) * 2.0;
        float _831 = _830 * (_797.x + (-0.5));
        float _832 = _830 * (_797.y + (-0.5));
        float _833 = _830 * (_797.z + (-0.5));
        float _834 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _835 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _836 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _838 = ((_776.x + (-0.5)) * 0.5) * _809;
        float _840 = ((_783.x + (-0.5)) * 0.5) * _816;
        float _842 = ((_790.x + (-0.5)) * 0.5) * _823;
        float _843 = dot(vec3(_838, _840, _842), vec3(_838, _840, _842));
        float _848 = (_843 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_843);
        float _856 = (dot(vec3(_192, _193, _194), vec3(_848 * _838, _848 * _840, _848 * _842)) + 1.0) * 0.5;
        float _2343 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _865 = sqrt(((_840 * _840) + (_838 * _838)) + (_842 * _842)) / (_834 + 9.9999997473787516355514526367188e-06);
        float _2354 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _866 = isnan(1.0) ? _2354 : (isnan(_2354) ? 1.0 : min(_2354, 1.0));
        float _867 = _866 * 2.0;
        float _871 = (1.0 - _866) / (_866 + 1.0);
        float _2365 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _2365 : (isnan(_2365) ? 1.0 : min(_2365, 1.0));
        float _881 = ((((1.0 - _872) * (_867 + 2.0)) * exp2(log2(isnan(1.0) ? _2343 : (isnan(_2343) ? 1.0 : min(_2343, 1.0))) * (_867 + 1.0))) + _872) * _834;
        float _883 = ((_776.y + (-0.5)) * 0.5) * _809;
        float _885 = ((_783.y + (-0.5)) * 0.5) * _816;
        float _887 = ((_790.y + (-0.5)) * 0.5) * _823;
        float _888 = dot(vec3(_883, _885, _887), vec3(_883, _885, _887));
        float _893 = (_888 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_888);
        float _901 = (dot(vec3(_192, _193, _194), vec3(_893 * _883, _893 * _885, _893 * _887)) + 1.0) * 0.5;
        float _2376 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _910 = sqrt(((_885 * _885) + (_883 * _883)) + (_887 * _887)) / (_835 + 9.9999997473787516355514526367188e-06);
        float _2387 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _911 = isnan(1.0) ? _2387 : (isnan(_2387) ? 1.0 : min(_2387, 1.0));
        float _912 = _911 * 2.0;
        float _916 = (1.0 - _911) / (_911 + 1.0);
        float _2398 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _917 = isnan(1.0) ? _2398 : (isnan(_2398) ? 1.0 : min(_2398, 1.0));
        float _926 = ((((1.0 - _917) * (_912 + 2.0)) * exp2(log2(isnan(1.0) ? _2376 : (isnan(_2376) ? 1.0 : min(_2376, 1.0))) * (_912 + 1.0))) + _917) * _835;
        float _928 = ((_776.z + (-0.5)) * 0.5) * _809;
        float _930 = ((_783.z + (-0.5)) * 0.5) * _816;
        float _932 = ((_790.z + (-0.5)) * 0.5) * _823;
        float _933 = dot(vec3(_928, _930, _932), vec3(_928, _930, _932));
        float _938 = (_933 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_933);
        float _946 = (dot(vec3(_192, _193, _194), vec3(_938 * _928, _938 * _930, _938 * _932)) + 1.0) * 0.5;
        float _2409 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _955 = sqrt(((_930 * _930) + (_928 * _928)) + (_932 * _932)) / (_836 + 9.9999997473787516355514526367188e-06);
        float _2420 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _2420 : (isnan(_2420) ? 1.0 : min(_2420, 1.0));
        float _957 = _956 * 2.0;
        float _961 = (1.0 - _956) / (_956 + 1.0);
        float _2431 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _2431 : (isnan(_2431) ? 1.0 : min(_2431, 1.0));
        float _971 = ((((1.0 - _962) * (_957 + 2.0)) * exp2(log2(isnan(1.0) ? _2409 : (isnan(_2409) ? 1.0 : min(_2409, 1.0))) * (_957 + 1.0))) + _962) * _836;
        _979 = cbModelParam._m0[36u].w * (isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0)));
        _980 = cbModelParam._m0[36u].w * (isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0)));
        _981 = cbModelParam._m0[36u].w * (isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0)));
    }
    else
    {
        _979 = 0.0;
        _980 = 0.0;
        _981 = 0.0;
    }
    float _991 = (cbModelParam._m0[1u].x * (_979 - _682)) + _682;
    float _992 = (cbModelParam._m0[1u].x * (_980 - _683)) + _683;
    float _993 = (cbModelParam._m0[1u].x * (_981 - _684)) + _684;
    float _1014 = fma(_993, cbSceneParam._m0[89u].z, fma(_992, cbSceneParam._m0[89u].y, _991 * cbSceneParam._m0[89u].x));
    float _1017 = fma(_993, cbSceneParam._m0[90u].z, fma(_992, cbSceneParam._m0[90u].y, _991 * cbSceneParam._m0[90u].x));
    float _1020 = fma(_993, cbSceneParam._m0[91u].z, fma(_992, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _991));
    vec4 _1028 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_282, _283));
    float _1030 = _1028.w;
    float _1042 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1030);
    float _1043 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1030);
    float _1044 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1030);
    float _2472 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _1045 = isnan(1.0) ? _2472 : (isnan(_2472) ? 1.0 : min(_2472, 1.0));
    float _2483 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _1046 = isnan(1.0) ? _2483 : (isnan(_2483) ? 1.0 : min(_2483, 1.0));
    float _2494 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _1047 = isnan(1.0) ? _2494 : (isnan(_2494) ? 1.0 : min(_2494, 1.0));
    uvec4 _1051 = floatBitsToUint(cbInstanceData._m0[_323 + 5u]);
    uint _1053 = _1051.x * 14u;
    uint _1055 = _1053 + 13u;
    float _1060 = _349 + (-1.0);
    float _1064 = (cbLight._m0[_1055].x * _1060) + 1.0;
    float _1065 = (cbLight._m0[_1055].y * _1060) + 1.0;
    uint _1066 = _1053 + 5u;
    float _1072 = isnan(1.0) ? _1065 : (isnan(_1065) ? 1.0 : min(_1065, 1.0));
    uint _1076 = _1053 + 4u;
    float _1086 = isnan(1.0) ? _1064 : (isnan(_1064) ? 1.0 : min(_1064, 1.0));
    uint _1090 = _1053 | 1u;
    float _1101 = dot(vec3(cbLight._m0[_1053].xyz), vec3(_192, _193, _194));
    float _1104 = dot(vec3(cbLight._m0[_1090].xyz), vec3(_192, _193, _194));
    float _2515 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _2526 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
    float _1109 = (isnan(1.0) ? _2515 : (isnan(_2515) ? 1.0 : min(_2515, 1.0))) * 0.3183098733425140380859375;
    float _1111 = (isnan(1.0) ? _2526 : (isnan(_2526) ? 1.0 : min(_2526, 1.0))) * 0.3183098733425140380859375;
    float _1118 = ((cbLight._m0[_1066].x * _1072) * _1111) + (((cbLight._m0[_1076].x * _1045) * _1086) * _1109);
    float _1119 = ((_1072 * cbLight._m0[_1066].y) * _1111) + (((cbLight._m0[_1076].y * _1046) * _1086) * _1109);
    float _1120 = ((_1072 * cbLight._m0[_1066].z) * _1111) + (((cbLight._m0[_1076].z * _1047) * _1086) * _1109);
    uint _1121 = _1053 + 8u;
    float _1127 = cbLight._m0[_1053].x + _274;
    float _1128 = cbLight._m0[_1053].y + _275;
    float _1129 = cbLight._m0[_1053].z + _276;
    float _1133 = inversesqrt(dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129)));
    float _1137 = dot(vec3(_192, _193, _194), vec3(cbLight._m0[_1053].xyz));
    float _2537 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
    float _1140 = isnan(1.0) ? _2537 : (isnan(_2537) ? 1.0 : min(_2537, 1.0));
    float _1141 = dot(vec3(_192, _193, _194), vec3(_274, _275, _276));
    float _2548 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
    float _1144 = isnan(1.0) ? _2548 : (isnan(_2548) ? 1.0 : min(_2548, 1.0));
    float _1145 = dot(vec3(cbLight._m0[_1053].xyz), vec3(_1127 * _1133, _1128 * _1133, _1129 * _1133));
    float _2559 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
    float _1156 = (exp2(log2(1.0 - (isnan(1.0) ? _2559 : (isnan(_2559) ? 1.0 : min(_2559, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1162 = (0.5 / ((_1140 + 9.9999999392252902907785028219223e-09) + _1144)) * _1140;
    float _2570 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
    float _1164 = (isnan(1.0) ? _2570 : (isnan(_2570) ? 1.0 : min(_2570, 1.0))) * 0.31831014156341552734375;
    uint _1178 = _1053 + 9u;
    float _1184 = cbLight._m0[_1090].x + _274;
    float _1185 = cbLight._m0[_1090].y + _275;
    float _1186 = cbLight._m0[_1090].z + _276;
    float _1190 = inversesqrt(dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186)));
    float _1194 = dot(vec3(_192, _193, _194), vec3(cbLight._m0[_1090].xyz));
    float _2581 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
    float _1197 = isnan(1.0) ? _2581 : (isnan(_2581) ? 1.0 : min(_2581, 1.0));
    float _1198 = dot(vec3(cbLight._m0[_1090].xyz), vec3(_1184 * _1190, _1185 * _1190, _1186 * _1190));
    float _2592 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
    float _1207 = (exp2(log2(1.0 - (isnan(1.0) ? _2592 : (isnan(_2592) ? 1.0 : min(_2592, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1211 = (0.5 / ((_1197 + 9.9999999392252902907785028219223e-09) + _1144)) * _1197;
    float _2603 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
    float _1213 = (isnan(1.0) ? _2603 : (isnan(_2603) ? 1.0 : min(_2603, 1.0))) * 0.31831014156341552734375;
    float _1223 = (((_1207 * cbLight._m0[_1178].x) * _1213) * _1072) + ((((cbLight._m0[_1121].x * _1045) * _1156) * _1164) * _1086);
    float _1224 = (((_1207 * cbLight._m0[_1178].y) * _1213) * _1072) + ((((cbLight._m0[_1121].y * _1046) * _1156) * _1164) * _1086);
    float _1225 = (((_1207 * cbLight._m0[_1178].z) * _1213) * _1072) + ((((cbLight._m0[_1121].z * _1047) * _1156) * _1164) * _1086);
    float _1332;
    float _1334;
    float _1336;
    float _1338;
    float _1340;
    float _1342;
    if (_1051.y == 0u)
    {
        float _1272 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1273 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1272;
        float _1274 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1272;
        float _1275 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1272;
        uvec4 _1287 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1288 = _1287.x;
        uint _1299 = uint((float(_1287.y) * floor(float(uint(cbSceneParam._m0[85u].y * _283) / _1288))) + floor(float(uint(cbSceneParam._m0[85u].x * _282) / _1288)));
        float _1309 = (log2(_1275 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1310 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        uint _1313 = uint(isnan(14.0) ? _1310 : (isnan(_1310) ? 14.0 : min(_1310, 14.0)));
        uvec4 _1318 = texelFetch(g_lightClusterGridBuffer, int(((_1313 << 2u) + (_1299 << 6u)) >> 2u));
        uint _1319 = _1318.x;
        uint _1320 = _1287.z;
        float _1398;
        float _1400;
        float _1402;
        float _1404;
        float _1406;
        float _1408;
        if (((((1u << ((_1320 >> 4u) & 15u)) + 4294967295u) & _1319) == 0u) || ((_1320 & 240u) == 0u))
        {
            _1398 = 0.0;
            _1400 = 0.0;
            _1402 = 0.0;
            _1404 = 0.0;
            _1406 = 0.0;
            _1408 = 0.0;
        }
        else
        {
            float _1399;
            float _1401;
            float _1403;
            float _1405;
            float _1407;
            float _1409;
            float _1542 = 0.0;
            float _1543 = 0.0;
            float _1544 = 0.0;
            float _1545 = 0.0;
            float _1546 = 0.0;
            float _1547 = 0.0;
            uint _1548 = 0u;
            uint _1557;
            bool _1558;
            for (;;)
            {
                _1557 = texelFetch(g_lightClassification, int((((_1313 << 5u) + (_1299 << 9u)) + (_1548 << 2u)) >> 2u)).x;
                _1558 = _1557 == 0u;
                float frontier_phi_17_pred;
                float frontier_phi_17_pred_1;
                float frontier_phi_17_pred_2;
                float frontier_phi_17_pred_3;
                float frontier_phi_17_pred_4;
                float frontier_phi_17_pred_5;
                if (_1558)
                {
                    frontier_phi_17_pred = _1547;
                    frontier_phi_17_pred_1 = _1546;
                    frontier_phi_17_pred_2 = _1545;
                    frontier_phi_17_pred_3 = _1544;
                    frontier_phi_17_pred_4 = _1543;
                    frontier_phi_17_pred_5 = _1542;
                }
                else
                {
                    float _1666;
                    float _1667;
                    float _1668;
                    float _1669;
                    float _1670;
                    float _1671;
                    uint _1672;
                    _1666 = _1542;
                    _1667 = _1543;
                    _1668 = _1544;
                    _1669 = _1545;
                    _1670 = _1546;
                    _1671 = _1547;
                    _1672 = _1557;
                    float _1598;
                    float _1599;
                    float _1600;
                    float _1601;
                    float _1602;
                    float _1603;
                    for (;;)
                    {
                        uint _1676 = uint(findLSB(_1672)) + (_1548 << 5u);
                        uint _1673 = (_1672 + 4294967295u) & _1672;
                        uint _1678 = _1676 * 48u;
                        vec4 _1692 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1678)).x, texelFetch(g_PointLightRenderingBuffer, int(_1678 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1678 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1678 + 3u)).x));
                        uint _1698 = (_1676 * 48u) + 4u;
                        vec4 _1711 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1698)).x, texelFetch(g_PointLightRenderingBuffer, int(_1698 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1698 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1698 + 3u)).x));
                        uint _1717 = (_1676 * 48u) + 8u;
                        vec3 _1728 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_1717)).x, texelFetch(g_PointLightRenderingBuffer, int(_1717 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1717 + 2u)).x));
                        float _1732 = _1692.x - _1273;
                        float _1733 = _1692.y - _1274;
                        float _1734 = _1692.z - _1275;
                        float _1735 = dot(vec3(_1732, _1733, _1734), vec3(_1732, _1733, _1734));
                        float _1738 = inversesqrt(_1735);
                        float _1747 = 1.0 - (_1735 * _1692.w);
                        float _2624 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
                        float _1748 = isnan(1.0) ? _2624 : (isnan(_2624) ? 1.0 : min(_2624, 1.0));
                        float _1749 = sqrt(_1735) * _1711.w;
                        float _1752 = 1.39999997615814208984375 / (_1749 + 1.39999997615814208984375);
                        float _1753 = _1752 * _1752;
                        float _1756 = ((1.0 - _1753) * dot(vec3(_304, _307, _310), vec3(_1738 * _1732, _1738 * _1733, _1738 * _1734))) + _1753;
                        float _1759 = _1749 * _1749;
                        float _1763 = ((isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))) * _1748) / ((_1759 * 0.699999988079071044921875) + 1.0);
                        float _1767 = (-0.0) - _1273;
                        float _1768 = (-0.0) - _1274;
                        float _1769 = (-0.0) - _1275;
                        float _1773 = inversesqrt(dot(vec3(_1767, _1768, _1769), vec3(_1767, _1768, _1769)));
                        float _1777 = dot(vec3(_304, _307, _310), vec3(_1773 * _1767, _1773 * _1768, _1773 * _1769));
                        float _2640 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
                        float _2651 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
                        float _1781 = isnan(1.0) ? _2651 : (isnan(_2651) ? 1.0 : min(_2651, 1.0));
                        float _1785 = (0.5 / (((isnan(1.0) ? _2640 : (isnan(_2640) ? 1.0 : min(_2640, 1.0))) + 9.9999999392252902907785028219223e-09) + _1781)) * _1781;
                        float _2662 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
                        float _1794 = (((isnan(1.0) ? _2662 : (isnan(_2662) ? 1.0 : min(_2662, 1.0))) * 3.1415927410125732421875) / ((_1759 * 2.1991131305694580078125) + 3.141590118408203125)) * _1748;
                        _1601 = (_1763 * _1711.x) + _1669;
                        _1602 = (_1763 * _1711.y) + _1670;
                        _1603 = (_1763 * _1711.z) + _1671;
                        _1598 = (_1794 * _1728.x) + _1666;
                        _1599 = (_1794 * _1728.y) + _1667;
                        _1600 = (_1794 * _1728.z) + _1668;
                        if (_1673 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1666 = _1598;
                            _1667 = _1599;
                            _1668 = _1600;
                            _1669 = _1601;
                            _1670 = _1602;
                            _1671 = _1603;
                            _1672 = _1673;
                        }
                    }
                    frontier_phi_17_pred = _1603;
                    frontier_phi_17_pred_1 = _1602;
                    frontier_phi_17_pred_2 = _1601;
                    frontier_phi_17_pred_3 = _1600;
                    frontier_phi_17_pred_4 = _1599;
                    frontier_phi_17_pred_5 = _1598;
                }
                _1409 = frontier_phi_17_pred;
                _1407 = frontier_phi_17_pred_1;
                _1405 = frontier_phi_17_pred_2;
                _1403 = frontier_phi_17_pred_3;
                _1401 = frontier_phi_17_pred_4;
                _1399 = frontier_phi_17_pred_5;
                uint _1549 = _1548 + 1u;
                if (_1549 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1542 = _1399;
                    _1543 = _1401;
                    _1544 = _1403;
                    _1545 = _1405;
                    _1546 = _1407;
                    _1547 = _1409;
                    _1548 = _1549;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1398 = _1399;
            _1400 = _1401;
            _1402 = _1403;
            _1404 = _1405;
            _1406 = _1407;
            _1408 = _1409;
        }
        uvec4 _1412 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1413 = _1412.z;
        uint _1415 = (_1413 >> 8u) & 15u;
        float _1513;
        float _1515;
        float _1517;
        float _1519;
        float _1521;
        float _1523;
        if (((4294967295u << _1415) & _1319) == 0u)
        {
            _1513 = _1398;
            _1515 = _1400;
            _1517 = _1402;
            _1519 = _1404;
            _1521 = _1406;
            _1523 = _1408;
        }
        else
        {
            float _1538 = inversesqrt(dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275)));
            float frontier_phi_11_12_ladder;
            float frontier_phi_11_12_ladder_1;
            float frontier_phi_11_12_ladder_2;
            float frontier_phi_11_12_ladder_3;
            float frontier_phi_11_12_ladder_4;
            float frontier_phi_11_12_ladder_5;
            if (_1415 < ((_1413 >> 12u) & 15u))
            {
                float _1514;
                float _1516;
                float _1518;
                float _1520;
                float _1522;
                float _1524;
                float _1649 = _1398;
                float _1650 = _1400;
                float _1651 = _1402;
                float _1652 = _1404;
                float _1653 = _1406;
                float _1654 = _1408;
                uint _1655 = _1415;
                uint _1664;
                bool _1665;
                for (;;)
                {
                    _1664 = texelFetch(g_lightClassification, int((((_1313 << 5u) + (_1299 << 9u)) + (_1655 << 2u)) >> 2u)).x;
                    _1665 = _1664 == 0u;
                    float frontier_phi_23_pred;
                    float frontier_phi_23_pred_1;
                    float frontier_phi_23_pred_2;
                    float frontier_phi_23_pred_3;
                    float frontier_phi_23_pred_4;
                    float frontier_phi_23_pred_5;
                    if (_1665)
                    {
                        frontier_phi_23_pred = _1650;
                        frontier_phi_23_pred_1 = _1652;
                        frontier_phi_23_pred_2 = _1651;
                        frontier_phi_23_pred_3 = _1649;
                        frontier_phi_23_pred_4 = _1654;
                        frontier_phi_23_pred_5 = _1653;
                    }
                    else
                    {
                        float _1799;
                        float _1800;
                        float _1801;
                        float _1802;
                        float _1803;
                        float _1804;
                        float _2052;
                        float _2053;
                        float _2054;
                        float _2055;
                        float _2056;
                        float _2057;
                        float _1812 = _1649;
                        float _1813 = _1650;
                        float _1814 = _1651;
                        float _1815 = _1652;
                        float _1816 = _1653;
                        float _1817 = _1654;
                        uint _1818 = _1664;
                        uint _1819;
                        vec4 _1845;
                        float _1846;
                        vec4 _1861;
                        vec3 _1873;
                        vec4 _1889;
                        vec4 _1905;
                        float _1952;
                        bool _1953;
                        for (;;)
                        {
                            uint _1829 = ((_1655 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_1818));
                            _1819 = (_1818 + 4294967295u) & _1818;
                            uint _1831 = _1829 * 40u;
                            _1845 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1831)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1831 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1831 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1831 + 3u)).x));
                            _1846 = _1845.w;
                            uint _1848 = (_1829 * 40u) + 4u;
                            _1861 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1848)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1848 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1848 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1848 + 3u)).x));
                            uint _1863 = (_1829 * 40u) + 8u;
                            _1873 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_1863)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1863 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1863 + 2u)).x));
                            uint _1876 = (_1829 * 40u) + 16u;
                            _1889 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1876)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1876 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1876 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1876 + 3u)).x));
                            uint _1892 = (_1829 * 40u) + 20u;
                            _1905 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1892)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1892 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1892 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1892 + 3u)).x));
                            uint _1908 = (_1829 * 40u) + 24u;
                            vec4 _1921 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1908 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1908 + 3u)).x));
                            uint _1927 = (_1829 * 40u) + 28u;
                            vec4 _1940 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1927)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1927 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1927 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1927 + 3u)).x));
                            _1952 = fma(_1275, _1940.z, fma(_1274, _1940.y, _1940.x * _1273)) + _1940.w;
                            _1953 = !((fma(_1275, _1921.z, fma(_1274, _1921.y, _1921.x * _1273)) + _1921.w) <= 0.0);
                            float frontier_phi_29_pred;
                            float frontier_phi_29_pred_1;
                            float frontier_phi_29_pred_2;
                            float frontier_phi_29_pred_3;
                            float frontier_phi_29_pred_4;
                            float frontier_phi_29_pred_5;
                            if (_1953)
                            {
                                float _1980 = _1845.x - _1273;
                                float _1981 = _1845.y - _1274;
                                float _1982 = _1845.z - _1275;
                                float _1983 = dot(vec3(_1980, _1981, _1982), vec3(_1980, _1981, _1982));
                                float _1986 = inversesqrt(_1983);
                                float _1987 = _1986 * _1980;
                                float _1988 = _1986 * _1981;
                                float _1989 = _1986 * _1982;
                                float _1993 = 1.0 - (_1983 / (_1846 * _1846));
                                float _2673 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
                                float _1994 = isnan(1.0) ? _2673 : (isnan(_2673) ? 1.0 : min(_2673, 1.0));
                                float _1998 = sqrt(_1983) * _1861.w;
                                float _2000 = 1.39999997615814208984375 / (_1998 + 1.39999997615814208984375);
                                float _2001 = _2000 * _2000;
                                float _2002 = 1.0 - _2001;
                                float _2004 = (_2002 * dot(vec3(_1987, _1988, _1989), vec3(_304, _307, _310))) + _2001;
                                float _2007 = _1998 * _1998;
                                float _2011 = (fma(_1275, _1889.z, fma(_1274, _1889.y, _1889.x * _1273)) + _1889.w) / _1952;
                                float _2012 = (fma(_1275, _1905.z, fma(_1274, _1905.y, _1905.x * _1273)) + _1905.w) / _1952;
                                float _2016 = 1.0 - dot(vec2(_2011, _2012), vec2(_2011, _2012));
                                float _2689 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
                                float _2017 = isnan(1.0) ? _2689 : (isnan(_2689) ? 1.0 : min(_2689, 1.0));
                                float _2018 = _2017 * (((isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0))) * _1994) / ((_2007 * 0.699999988079071044921875) + 1.0));
                                float _2028 = dot(vec3(_304, _307, _310), vec3((-0.0) - (_1273 * _1538), (-0.0) - (_1274 * _1538), (-0.0) - (_1275 * _1538)));
                                float _2700 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
                                float _2036 = (_2002 * dot(vec3(_304, _307, _310), vec3(_1987, _1988, _1989))) + _2001;
                                float _2711 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
                                float _2037 = isnan(1.0) ? _2711 : (isnan(_2711) ? 1.0 : min(_2711, 1.0));
                                float _2041 = (0.5 / (((isnan(1.0) ? _2700 : (isnan(_2700) ? 1.0 : min(_2700, 1.0))) + 9.9999999392252902907785028219223e-09) + _2037)) * _2037;
                                float _2722 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
                                float _2048 = (_2017 * _1994) * (((isnan(1.0) ? _2722 : (isnan(_2722) ? 1.0 : min(_2722, 1.0))) * 3.1415927410125732421875) / ((_2007 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_29_pred = _2018 * _1861.x;
                                frontier_phi_29_pred_1 = _2048 * _1873.z;
                                frontier_phi_29_pred_2 = _2048 * _1873.y;
                                frontier_phi_29_pred_3 = _2048 * _1873.x;
                                frontier_phi_29_pred_4 = _2018 * _1861.z;
                                frontier_phi_29_pred_5 = _2018 * _1861.y;
                            }
                            else
                            {
                                frontier_phi_29_pred = 0.0;
                                frontier_phi_29_pred_1 = 0.0;
                                frontier_phi_29_pred_2 = 0.0;
                                frontier_phi_29_pred_3 = 0.0;
                                frontier_phi_29_pred_4 = 0.0;
                                frontier_phi_29_pred_5 = 0.0;
                            }
                            _2055 = frontier_phi_29_pred;
                            _2054 = frontier_phi_29_pred_1;
                            _2053 = frontier_phi_29_pred_2;
                            _2052 = frontier_phi_29_pred_3;
                            _2057 = frontier_phi_29_pred_4;
                            _2056 = frontier_phi_29_pred_5;
                            _1802 = _2055 + _1815;
                            _1803 = _2056 + _1816;
                            _1804 = _2057 + _1817;
                            _1799 = _2052 + _1812;
                            _1800 = _2053 + _1813;
                            _1801 = _2054 + _1814;
                            if (_1819 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _1812 = _1799;
                                _1813 = _1800;
                                _1814 = _1801;
                                _1815 = _1802;
                                _1816 = _1803;
                                _1817 = _1804;
                                _1818 = _1819;
                                continue;
                            }
                        }
                        frontier_phi_23_pred = _1800;
                        frontier_phi_23_pred_1 = _1802;
                        frontier_phi_23_pred_2 = _1801;
                        frontier_phi_23_pred_3 = _1799;
                        frontier_phi_23_pred_4 = _1804;
                        frontier_phi_23_pred_5 = _1803;
                    }
                    _1516 = frontier_phi_23_pred;
                    _1520 = frontier_phi_23_pred_1;
                    _1518 = frontier_phi_23_pred_2;
                    _1514 = frontier_phi_23_pred_3;
                    _1524 = frontier_phi_23_pred_4;
                    _1522 = frontier_phi_23_pred_5;
                    uint _1656 = _1655 + 1u;
                    if (_1656 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1649 = _1514;
                        _1650 = _1516;
                        _1651 = _1518;
                        _1652 = _1520;
                        _1653 = _1522;
                        _1654 = _1524;
                        _1655 = _1656;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_11_12_ladder = _1524;
                frontier_phi_11_12_ladder_1 = _1522;
                frontier_phi_11_12_ladder_2 = _1520;
                frontier_phi_11_12_ladder_3 = _1518;
                frontier_phi_11_12_ladder_4 = _1516;
                frontier_phi_11_12_ladder_5 = _1514;
            }
            else
            {
                frontier_phi_11_12_ladder = _1408;
                frontier_phi_11_12_ladder_1 = _1406;
                frontier_phi_11_12_ladder_2 = _1404;
                frontier_phi_11_12_ladder_3 = _1402;
                frontier_phi_11_12_ladder_4 = _1400;
                frontier_phi_11_12_ladder_5 = _1398;
            }
            _1513 = frontier_phi_11_12_ladder_5;
            _1515 = frontier_phi_11_12_ladder_4;
            _1517 = frontier_phi_11_12_ladder_3;
            _1519 = frontier_phi_11_12_ladder_2;
            _1521 = frontier_phi_11_12_ladder_1;
            _1523 = frontier_phi_11_12_ladder;
        }
        float _1528 = isnan(1.0) ? _349 : (isnan(_349) ? 1.0 : min(_349, 1.0));
        _1332 = (_1528 * _1519) + _1118;
        _1334 = (_1528 * _1521) + _1119;
        _1336 = (_1528 * _1523) + _1120;
        _1338 = ((_1513 * 0.039999999105930328369140625) * _1528) + _1223;
        _1340 = ((_1515 * 0.039999999105930328369140625) * _1528) + _1224;
        _1342 = ((_1517 * 0.039999999105930328369140625) * _1528) + _1225;
    }
    else
    {
        _1332 = _1118;
        _1334 = _1119;
        _1336 = _1120;
        _1338 = _1223;
        _1340 = _1224;
        _1342 = _1225;
    }
    float _2738 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _2749 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _2760 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _2771 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _1364 = cbInstanceData._m0[_323 + 6u].w * (isnan(1.0) ? _2771 : (isnan(_2771) ? 1.0 : min(_2771, 1.0)));
    float _1369 = _282 / cbSceneParam._m0[86u].x;
    float _1370 = _283 / cbSceneParam._m0[86u].y;
    vec4 _1384 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1369, _1370, (log2((isnan(cbSceneParam._m0[77u].w) ? _215 : (isnan(_215) ? cbSceneParam._m0[77u].w : min(_215, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1386 = _1384.x;
    float _1387 = _1384.y;
    float _1388 = _1384.z;
    float _1389 = _1384.w;
    float _1462;
    float _1464;
    float _1466;
    float _1468;
    if (_215 > cbSceneParam._m0[78u].w)
    {
        float _1423 = isnan(_215) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _215 : min(cbSceneParam._m0[80u].w, _215));
        float _1424 = _1423 / _215;
        float _1435 = _1424 * _267;
        float _1436 = _268 * _1424;
        float _1437 = (-0.0) - _1436;
        float _1439 = _1424 * _269;
        float _1441 = (cbSceneParam._m0[77u].w * _1437) / _1423;
        float _1442 = _1441 + cbSceneParam._m0[79u].w;
        float _1443 = cbSceneParam._m0[79u].w - _1436;
        float _1449 = sqrt(((_1435 * _1435) + (_1436 * _1436)) + (_1439 * _1439));
        float _1452 = (1.0 - (cbSceneParam._m0[77u].w / _1423)) * _1449;
        float _1458 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1460 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1611;
        if (abs((_1437 - _1441) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1611 = ((((_1442 > 0.0) ? exp2(_1458 * _1442) : (2.0 - exp2(_1460 * _1442))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1452;
        }
        else
        {
            float _1571 = 1.0 / cbSceneParam._m0[80u].x;
            float _1572 = isnan(_1443) ? _1442 : (isnan(_1442) ? _1443 : max(_1442, _1443));
            float _1573 = isnan(_1443) ? _1442 : (isnan(_1442) ? _1443 : min(_1442, _1443));
            float _1582 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : min(_1572, 0.0));
            float _1583 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : min(_1573, 0.0));
            _1611 = ((abs(_1449 / _1437) * cbSceneParam._m0[80u].y) * ((((_1582 - _1583) * 2.0) - ((exp2(_1458 * (isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)))) - exp2(_1458 * (isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))))) * _1571)) - ((exp2(_1460 * _1582) - exp2(_1460 * _1583)) * _1571))) + (_1452 * cbSceneParam._m0[80u].z);
        }
        vec4 _1613 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1369, _1370, 1.0), 0.0);
        float _1622 = exp2((_1611 * (-1.44269502162933349609375)) * (1.0 - _1613.w));
        float _1623 = log2(_1622);
        float _1639 = log2(_1389);
        _1462 = (exp2(_1639 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1623 * cbSceneParam._m0[78u].x)) * _1613.x) / cbSceneParam._m0[78u].x)) + _1386;
        _1464 = (exp2(_1639 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1623 * cbSceneParam._m0[78u].y)) * _1613.y) / cbSceneParam._m0[78u].y)) + _1387;
        _1466 = (exp2(_1639 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1623 * cbSceneParam._m0[78u].z)) * _1613.z) / cbSceneParam._m0[78u].z)) + _1388;
        _1468 = _1622 * _1389;
    }
    else
    {
        _1462 = _1386;
        _1464 = _1387;
        _1466 = _1388;
        _1468 = _1389;
    }
    float _1480 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1481 = _1480 == 3.0;
    float _1483 = log2(_1468);
    float _1490 = exp2(_1483 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _2738 : (isnan(_2738) ? 1.0 : min(_2738, 1.0))) * (_1332 + ((isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0))) * _349))) + (_1338 * cbPerFrame._m0[3u].x));
    float _1491 = exp2(_1483 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _2749 : (isnan(_2749) ? 1.0 : min(_2749, 1.0))) * (_1334 + ((isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0))) * _349))) + (_1340 * cbPerFrame._m0[3u].x));
    float _1492 = exp2(_1483 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _2760 : (isnan(_2760) ? 1.0 : min(_2760, 1.0))) * (_1336 + ((isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0))) * _349))) + (_1342 * cbPerFrame._m0[3u].x));
    float _1501 = (_1480 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1501 * (_1481 ? _1490 : (_1490 + (cbSceneParam._m0[72u].w * _1462)));
    SV_Target.y = _1501 * (_1481 ? _1491 : (_1491 + (cbSceneParam._m0[72u].w * _1464)));
    SV_Target.z = _1501 * (_1481 ? _1492 : (_1492 + (cbSceneParam._m0[72u].w * _1466)));
    SV_Target.w = _1364;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _1364;
}


