#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_AMSN_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D P_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _968;
float _3423;
float _3424;
float _3425;
float _3426;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226;
    float _227;
    float _228;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
    }
    else
    {
        _226 = _212;
        _227 = _213;
        _228 = _214;
    }
    vec4 _242 = texture(sampler2D(P_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _245 = _242.x;
    float _246 = _242.y;
    float _247 = _242.z;
    float _248 = _242.w;
    vec4 _264 = texture(sampler2D(P_AMSN_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _267 = _264.x + cbMtdParam._m0[9u].x;
    vec4 _279 = texture(sampler2D(P_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _283 = _279.z;
    float _287 = (_279.x * 2.0) + (-1.0);
    float _289 = (_279.y * 2.0) + (-1.0);
    float _290 = dot(vec2(_287, _289), vec2(_287, _289));
    float _3435 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _296 = sqrt(1.0 - (isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0))));
    vec4 _309 = texture(sampler2D(P_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _319 = fma(_296, _226, fma(_289, _218 * TANGENT.x, (_204 * _196) * _287));
    float _322 = fma(_296, _227, fma(_289, _218 * TANGENT.y, (_204 * _197) * _287));
    float _325 = fma(_296, _228, fma(_289, _218 * TANGENT.z, (_204 * _198) * _287));
    float _329 = inversesqrt(dot(vec3(_319, _322, _325), vec3(_319, _322, _325)));
    float _330 = _329 * _319;
    float _331 = _329 * _322;
    float _332 = _329 * _325;
    float _3446 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _333 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
    float _3457 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _334 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
    float _3468 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3479 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _3490 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3501 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _338 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
    float _354 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _396 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _406 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _396);
    float _407 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _396);
    float _408 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _396);
    float _412 = inversesqrt(dot(vec3(_406, _407, _408), vec3(_406, _407, _408)));
    float _413 = _406 * _412;
    float _414 = _407 * _412;
    float _415 = _408 * _412;
    vec4 _420 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _422 = _420.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _647 = sqrt(((_406 * _406) + (_407 * _407)) + (_408 * _408));
        float _653 = (cbMatDynParam._m0[5u].x * _647) + cbMatDynParam._m0[5u].y;
        float _3512 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
        float _654 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _658 = (cbMatDynParam._m0[5u].z * _647) + cbMatDynParam._m0[5u].w;
        float _3523 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))) - _654)) + _654) < ((_422 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _434 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _435 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _437 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _439 = _437.w;
    float _459 = fma(_332, cbSceneParam._m0[5u].z, fma(_331, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _330));
    float _462 = fma(_332, cbSceneParam._m0[6u].z, fma(_331, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _330));
    float _465 = fma(_332, cbSceneParam._m0[7u].z, fma(_331, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _330));
    vec4 _467 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _478 = (((_467.y - _334) + (_467.w * _334)) * cbMtdParam._m0[3u].x) + _334;
    uint _491 = uint(roundEven(NORMAL.w)) * 13u;
    uint _493 = _491 + 9u;
    uint _494 = _493 + uint(cbMatDynParam._m0[0u].w);
    float _500 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0)))) * cbInstanceData._m0[_494].x;
    float _501 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0)))) * cbInstanceData._m0[_494].y;
    float _502 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0)))) * cbInstanceData._m0[_494].z;
    float _3534 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _503 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
    float _3545 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _504 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
    float _3556 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _505 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
    vec4 _506 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _511 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _522 = (((_511.x - _338) + (_511.w * _338)) * cbMtdParam._m0[3u].x) + _338;
    float _535 = (cbMtdParam._m0[3u].x * (((_503 * _439) - _503) + _506.x)) + _503;
    float _536 = (cbMtdParam._m0[3u].x * (((_504 * _439) - _504) + _506.y)) + _504;
    float _537 = (cbMtdParam._m0[3u].x * (((_505 * _439) - _505) + _506.z)) + _505;
    float _538 = 1.0 - _522;
    float _539 = _538 * _535;
    float _540 = _538 * _536;
    float _541 = _538 * _537;
    float _546 = (_535 + (-0.039999999105930328369140625)) * _522;
    float _547 = (_536 + (-0.039999999105930328369140625)) * _522;
    float _548 = (_537 + (-0.039999999105930328369140625)) * _522;
    float _549 = _546 + 0.039999999105930328369140625;
    float _551 = _547 + 0.039999999105930328369140625;
    float _552 = _548 + 0.039999999105930328369140625;
    vec4 _561 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _434, cbSceneParam._m0[86u].y * _435));
    float _564 = _561.x * TEXCOORD_4;
    float _565 = dot(vec3(_330, _331, _332), vec3(_413, _414, _415));
    float _568 = _565 * 2.0;
    float _572 = (_568 * _330) - _413;
    float _573 = (_568 * _331) - _414;
    float _574 = (_568 * _332) - _415;
    float _578 = abs(dot(vec3(_413, _414, _415), vec3(_330, _331, _332)));
    float _3567 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _580 = sqrt(_478);
    float _593 = exp2((_580 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_580 * 3.0));
    float _599 = (1.0 - _593) * ((_580 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _600 = _593 * _580;
    float _628 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _632 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _636 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _967;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _692 = fma(_636, cbModelParam._m0[26u].z, fma(_632, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _628));
        float _696 = fma(_636, cbModelParam._m0[27u].z, fma(_632, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _628));
        float _700 = fma(_636, cbModelParam._m0[28u].z, fma(_632, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _628));
        float _725 = _628 + _330;
        float _726 = _632 + _331;
        float _727 = _636 + _332;
        float _737 = fma(_727, cbModelParam._m0[26u].z, fma(_726, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _725)) - _692;
        float _738 = fma(_727, cbModelParam._m0[27u].z, fma(_726, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _725)) - _696;
        float _739 = fma(_727, cbModelParam._m0[28u].z, fma(_726, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _725)) - _700;
        float _743 = inversesqrt(dot(vec3(_737, _738, _739), vec3(_737, _738, _739)));
        float _756 = ((_743 * _737) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_692 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _757 = ((_743 * _738) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_696 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _758 = ((_743 * _739) / cbModelParam._m0[34u].z) + ((((((_700 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _761 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_756, _757, _758), 0.0);
        vec4 _768 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_756, _757, _758), 0.0);
        vec4 _775 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_756, _757, _758), 0.0);
        vec4 _782 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_756, _757, _758), 0.0);
        float _795 = exp2((_761.w + (-0.5)) * 20.0) * 2.0;
        float _796 = _795 * (_761.x + (-0.5));
        float _797 = _795 * (_761.y + (-0.5));
        float _798 = _795 * (_761.z + (-0.5));
        float _805 = exp2((_768.w + (-0.5)) * 20.0) * 2.0;
        float _806 = _805 * (_768.x + (-0.5));
        float _807 = _805 * (_768.y + (-0.5));
        float _808 = _805 * (_768.z + (-0.5));
        float _815 = exp2((_775.w + (-0.5)) * 20.0) * 2.0;
        float _816 = _815 * (_775.x + (-0.5));
        float _817 = _815 * (_775.y + (-0.5));
        float _818 = _815 * (_775.z + (-0.5));
        float _825 = exp2((_782.w + (-0.5)) * 20.0) * 2.0;
        float _826 = _825 * (_782.x + (-0.5));
        float _827 = _825 * (_782.y + (-0.5));
        float _828 = _825 * (_782.z + (-0.5));
        float _829 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _830 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _831 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _832 = _796 * 0.5;
        float _833 = _806 * 0.5;
        float _834 = _816 * 0.5;
        float _835 = dot(vec3(_832, _833, _834), vec3(_832, _833, _834));
        float _840 = (_835 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_835);
        float _849 = (dot(vec3(_330, _331, _332), vec3(_840 * _832, _840 * _833, _840 * _834)) + 1.0) * 0.5;
        float _3593 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _859 = sqrt(((_833 * _833) + (_832 * _832)) + (_834 * _834)) / (_829 + 9.9999997473787516355514526367188e-06);
        float _3604 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _860 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _861 = _860 * 2.0;
        float _865 = (1.0 - _860) / (_860 + 1.0);
        float _3615 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _866 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _875 = ((((1.0 - _866) * (_861 + 2.0)) * exp2(log2(isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))) * (_861 + 1.0))) + _866) * _829;
        float _876 = _797 * 0.5;
        float _877 = _807 * 0.5;
        float _878 = _817 * 0.5;
        float _879 = dot(vec3(_876, _877, _878), vec3(_876, _877, _878));
        float _884 = (_879 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_879);
        float _892 = (dot(vec3(_330, _331, _332), vec3(_884 * _876, _884 * _877, _884 * _878)) + 1.0) * 0.5;
        float _3626 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _901 = sqrt(((_877 * _877) + (_876 * _876)) + (_878 * _878)) / (_830 + 9.9999997473787516355514526367188e-06);
        float _3637 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _903 = _902 * 2.0;
        float _907 = (1.0 - _902) / (_902 + 1.0);
        float _3648 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _917 = ((((1.0 - _908) * (_903 + 2.0)) * exp2(log2(isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * (_903 + 1.0))) + _908) * _830;
        float _918 = _798 * 0.5;
        float _919 = _808 * 0.5;
        float _920 = _818 * 0.5;
        float _921 = dot(vec3(_918, _919, _920), vec3(_918, _919, _920));
        float _926 = (_921 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_921);
        float _934 = (dot(vec3(_330, _331, _332), vec3(_926 * _918, _926 * _919, _926 * _920)) + 1.0) * 0.5;
        float _3659 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _943 = sqrt(((_919 * _919) + (_918 * _918)) + (_920 * _920)) / (_831 + 9.9999997473787516355514526367188e-06);
        float _3670 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _945 = _944 * 2.0;
        float _949 = (1.0 - _944) / (_944 + 1.0);
        float _3681 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _959 = ((((1.0 - _950) * (_945 + 2.0)) * exp2(log2(isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * (_945 + 1.0))) + _950) * _831;
        _967 = _798;
        _969 = _797;
        _970 = _796;
        _971 = _808;
        _972 = _807;
        _973 = _806;
        _974 = _818;
        _975 = _817;
        _976 = _816;
        _977 = _831;
        _978 = _830;
        _979 = _829;
        _980 = cbModelParam._m0[36u].z * (isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0)));
        _981 = cbModelParam._m0[36u].z * (isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0)));
        _982 = cbModelParam._m0[36u].z * (isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0)));
    }
    else
    {
        _967 = _968;
        _969 = _968;
        _970 = _968;
        _971 = _968;
        _972 = _968;
        _973 = _968;
        _974 = _968;
        _975 = _968;
        _976 = _968;
        _977 = _968;
        _978 = _968;
        _979 = _968;
        _980 = 0.0;
        _981 = 0.0;
        _982 = 0.0;
    }
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1011 = fma(_636, cbModelParam._m0[30u].z, fma(_632, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _628));
        float _1015 = fma(_636, cbModelParam._m0[31u].z, fma(_632, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _628));
        float _1019 = fma(_636, cbModelParam._m0[32u].z, fma(_632, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _628));
        float _1042 = _628 + _330;
        float _1043 = _632 + _331;
        float _1044 = _636 + _332;
        float _1054 = fma(_1044, cbModelParam._m0[30u].z, fma(_1043, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1042)) - _1011;
        float _1055 = fma(_1044, cbModelParam._m0[31u].z, fma(_1043, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1042)) - _1015;
        float _1056 = fma(_1044, cbModelParam._m0[32u].z, fma(_1043, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1042)) - _1019;
        float _1060 = inversesqrt(dot(vec3(_1054, _1055, _1056), vec3(_1054, _1055, _1056)));
        float _1073 = ((_1060 * _1054) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1011 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1074 = ((_1060 * _1055) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1015 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1075 = ((_1060 * _1056) / cbModelParam._m0[35u].z) + ((((((_1019 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        float _1110 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1077.x + (-0.5));
        float _1112 = _1110 * (_1077.y + (-0.5));
        float _1113 = _1110 * (_1077.z + (-0.5));
        float _1120 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1084.x + (-0.5));
        float _1122 = _1120 * (_1084.y + (-0.5));
        float _1123 = _1120 * (_1084.z + (-0.5));
        float _1130 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1091.x + (-0.5));
        float _1132 = _1130 * (_1091.y + (-0.5));
        float _1133 = _1130 * (_1091.z + (-0.5));
        float _1140 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1098.x + (-0.5));
        float _1142 = _1140 * (_1098.y + (-0.5));
        float _1143 = _1140 * (_1098.z + (-0.5));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = _1111 * 0.5;
        float _1148 = _1121 * 0.5;
        float _1149 = _1131 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1163 = (dot(vec3(_330, _331, _332), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _3722 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1172 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _3733 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _3744 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * (_1174 + 1.0))) + _1179) * _1144;
        float _1189 = _1112 * 0.5;
        float _1190 = _1122 * 0.5;
        float _1191 = _1132 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1205 = (dot(vec3(_330, _331, _332), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1214 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _3777 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_1216 + 1.0))) + _1221) * _1145;
        float _1231 = _1113 * 0.5;
        float _1232 = _1123 * 0.5;
        float _1233 = _1133 * 0.5;
        float _1234 = dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233));
        float _1239 = (_1234 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1234);
        float _1247 = (dot(vec3(_330, _331, _332), vec3(_1239 * _1231, _1239 * _1232, _1239 * _1233)) + 1.0) * 0.5;
        float _3788 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1256 = sqrt(((_1232 * _1232) + (_1231 * _1231)) + (_1233 * _1233)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _3799 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1258 = _1257 * 2.0;
        float _1262 = (1.0 - _1257) / (_1257 + 1.0);
        float _3810 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1272 = ((((1.0 - _1263) * (_1258 + 2.0)) * exp2(log2(isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_1258 + 1.0))) + _1263) * _1146;
        _1280 = _1113;
        _1281 = _1112;
        _1282 = _1111;
        _1283 = _1123;
        _1284 = _1122;
        _1285 = _1121;
        _1286 = _1133;
        _1287 = _1132;
        _1288 = _1131;
        _1289 = _1146;
        _1290 = _1145;
        _1291 = _1144;
        _1292 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
        _1293 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
        _1294 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)));
    }
    else
    {
        _1280 = _968;
        _1281 = _968;
        _1282 = _968;
        _1283 = _968;
        _1284 = _968;
        _1285 = _968;
        _1286 = _968;
        _1287 = _968;
        _1288 = _968;
        _1289 = _968;
        _1290 = _968;
        _1291 = _968;
        _1292 = 0.0;
        _1293 = 0.0;
        _1294 = 0.0;
    }
    float _1304 = (cbModelParam._m0[1u].x * (_1292 - _980)) + _980;
    float _1305 = (cbModelParam._m0[1u].x * (_1293 - _981)) + _981;
    float _1306 = (cbModelParam._m0[1u].x * (_1294 - _982)) + _982;
    float _1327 = fma(_1306, cbSceneParam._m0[89u].z, fma(_1305, cbSceneParam._m0[89u].y, _1304 * cbSceneParam._m0[89u].x));
    float _1330 = fma(_1306, cbSceneParam._m0[90u].z, fma(_1305, cbSceneParam._m0[90u].y, _1304 * cbSceneParam._m0[90u].x));
    float _1333 = fma(_1306, cbSceneParam._m0[91u].z, fma(_1305, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1304));
    float _1348 = _572 * 0.5;
    float _1349 = _573 * 0.5;
    float _1350 = _574 * 0.5;
    float _1351 = dot(vec4(_1348, _1349, _1350, 1.0), vec4(_1282, _1285, _1288, _1291));
    float _1354 = dot(vec4(_1348, _1349, _1350, 1.0), vec4(_1281, _1284, _1287, _1290));
    float _1357 = dot(vec4(_1348, _1349, _1350, 1.0), vec4(_1280, _1283, _1286, _1289));
    float _1391;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1364 = dot(vec4(_1348, _1349, _1350, 1.0), vec4(_967, _971, _974, _977));
        float _1368 = dot(vec4(_1348, _1349, _1350, 1.0), vec4(_969, _972, _975, _978));
        float _1372 = dot(vec4(_1348, _1349, _1350, 1.0), vec4(_970, _973, _976, _979));
        float _1379 = dot(vec4(cbModelParam._m0[39u]), vec4(_1348, _1349, _1350, 1.0));
        _1391 = dot(vec3(isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)), isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)), isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1379) ? 0.0 : (isnan(0.0) ? _1379 : max(0.0, _1379))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1391 = 1.0;
    }
    float _1402;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1393 = dot(vec4(cbModelParam._m0[40u]), vec4(_1348, _1349, _1350, 1.0));
        _1402 = dot(vec3(isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)), isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)), isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1393) ? 0.0 : (isnan(0.0) ? _1393 : max(0.0, _1393))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1402 = 1.0;
    }
    float _1406 = (_1402 * cbModelParam._m0[1u].x) + (_1391 * (1.0 - cbModelParam._m0[1u].x));
    float _1416 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _478);
    float _1417 = isnan(_1416) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1416 : min(cbModelParam._m0[25u].z, _1416));
    float _1499;
    float _1501;
    float _1503;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1466 = fma(_636, cbModelParam._m0[13u].z, fma(_632, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _628)) + cbModelParam._m0[13u].w;
        float _1470 = fma(_636, cbModelParam._m0[14u].z, fma(_632, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _628)) + cbModelParam._m0[14u].w;
        float _1474 = fma(_636, cbModelParam._m0[15u].z, fma(_632, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _628)) + cbModelParam._m0[15u].w;
        float _1477 = fma(_574, cbModelParam._m0[13u].z, fma(_573, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _572));
        float _1480 = fma(_574, cbModelParam._m0[14u].z, fma(_573, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _572));
        float _1483 = fma(_574, cbModelParam._m0[15u].z, fma(_573, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _572));
        float _1511;
        if (_1477 > 0.0)
        {
            _1511 = abs((1.0 - _1466) / _1477);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1477 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1466 + 1.0) / _1477);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1511 = frontier_phi_19_17_ladder;
        }
        float _1740;
        if (_1480 > 0.0)
        {
            _1740 = abs((1.0 - _1470) / _1480);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1480 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1470 + 1.0) / _1480);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1740 = frontier_phi_28_24_ladder;
        }
        float _1997;
        if (_1483 > 0.0)
        {
            _1997 = abs((1.0 - _1474) / _1483);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1483 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1474 + 1.0) / _1483);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1997 = frontier_phi_40_35_ladder;
        }
        float _1999 = isnan(_1740) ? _1511 : (isnan(_1511) ? _1740 : min(_1511, _1740));
        float _2000 = isnan(_1997) ? _1999 : (isnan(_1999) ? _1997 : min(_1999, _1997));
        float _2004 = (_2000 * _1477) + _1466;
        float _2005 = (_2000 * _1480) + _1470;
        float _2006 = (_2000 * _1483) + _1474;
        float _2007 = _2000 * 9.9999997473787516355514526367188e-05;
        float _2009 = (-1.0) - _2007;
        float _2011 = _2007 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2006 > _2011) || ((_2006 < _2009) || ((_2005 > _2011) || ((_2005 < _2009) || ((_2004 < _2009) || (_2004 > _2011))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2134 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2006, cbModelParam._m0[9u].z, fma(_2005, cbModelParam._m0[9u].y, _2004 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2006, cbModelParam._m0[10u].z, fma(_2005, cbModelParam._m0[10u].y, _2004 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2006, cbModelParam._m0[11u].z, fma(_2005, cbModelParam._m0[11u].y, _2004 * cbModelParam._m0[11u].x))), _1417);
            frontier_phi_18_40_ladder = _2134.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2134.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2134.x * cbModelParam._m0[1u].y;
        }
        _1499 = frontier_phi_18_40_ladder_2;
        _1501 = frontier_phi_18_40_ladder_1;
        _1503 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1487 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_572, _573, _574), _1417);
        _1499 = _1487.x * cbModelParam._m0[1u].y;
        _1501 = _1487.y * cbModelParam._m0[1u].y;
        _1503 = _1487.z * cbModelParam._m0[1u].y;
    }
    float _1507 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _478);
    float _1508 = isnan(_1507) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1507 : min(cbModelParam._m0[25u].w, _1507));
    float _1601;
    float _1603;
    float _1605;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1565 = fma(_636, cbModelParam._m0[21u].z, fma(_632, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _628)) + cbModelParam._m0[21u].w;
        float _1569 = fma(_636, cbModelParam._m0[22u].z, fma(_632, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _628)) + cbModelParam._m0[22u].w;
        float _1573 = fma(_636, cbModelParam._m0[23u].z, fma(_632, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _628)) + cbModelParam._m0[23u].w;
        float _1576 = fma(_574, cbModelParam._m0[21u].z, fma(_573, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _572));
        float _1579 = fma(_574, cbModelParam._m0[22u].z, fma(_573, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _572));
        float _1582 = fma(_574, cbModelParam._m0[23u].z, fma(_573, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _572));
        float _1745;
        if (_1576 > 0.0)
        {
            _1745 = abs((1.0 - _1565) / _1576);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1576 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1565 + 1.0) / _1576);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1745 = frontier_phi_30_26_ladder;
        }
        float _2024;
        if (_1579 > 0.0)
        {
            _2024 = abs((1.0 - _1569) / _1579);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1579 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1569 + 1.0) / _1579);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2024 = frontier_phi_42_37_ladder;
        }
        float _2237;
        if (_1582 > 0.0)
        {
            _2237 = abs((1.0 - _1573) / _1582);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1582 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1573 + 1.0) / _1582);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2237 = frontier_phi_51_48_ladder;
        }
        float _2239 = isnan(_2024) ? _1745 : (isnan(_1745) ? _2024 : min(_1745, _2024));
        float _2240 = isnan(_2237) ? _2239 : (isnan(_2239) ? _2237 : min(_2239, _2237));
        float _2244 = (_2240 * _1576) + _1565;
        float _2245 = (_2240 * _1579) + _1569;
        float _2246 = (_2240 * _1582) + _1573;
        float _2247 = _2240 * 9.9999997473787516355514526367188e-05;
        float _2248 = (-1.0) - _2247;
        float _2250 = _2247 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2246 > _2250) || ((_2246 < _2248) || ((_2245 > _2250) || ((_2245 < _2248) || ((_2244 < _2248) || (_2244 > _2250))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2475 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2246, cbModelParam._m0[17u].z, fma(_2245, cbModelParam._m0[17u].y, _2244 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2246, cbModelParam._m0[18u].z, fma(_2245, cbModelParam._m0[18u].y, _2244 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2246, cbModelParam._m0[19u].z, fma(_2245, cbModelParam._m0[19u].y, _2244 * cbModelParam._m0[19u].x))), _1508);
            frontier_phi_27_51_ladder = _2475.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2475.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2475.x * cbModelParam._m0[1u].z;
        }
        _1601 = frontier_phi_27_51_ladder_2;
        _1603 = frontier_phi_27_51_ladder_1;
        _1605 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1585 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_572, _573, _574), _1508);
        _1601 = _1585.x * cbModelParam._m0[1u].z;
        _1603 = _1585.y * cbModelParam._m0[1u].z;
        _1605 = _1585.z * cbModelParam._m0[1u].z;
    }
    float _1618 = (((_599 * _549) + _600) * _564) * ((cbModelParam._m0[1u].w * (_1601 - _1499)) + _1499);
    float _1620 = (((_599 * _551) + _600) * _564) * ((cbModelParam._m0[1u].w * (_1603 - _1501)) + _1501);
    float _1622 = (((_599 * _552) + _600) * _564) * ((cbModelParam._m0[1u].w * (_1605 - _1503)) + _1503);
    float _1625 = fma(_1622, cbSceneParam._m0[89u].z, fma(_1620, cbSceneParam._m0[89u].y, _1618 * cbSceneParam._m0[89u].x));
    float _1628 = fma(_1622, cbSceneParam._m0[90u].z, fma(_1620, cbSceneParam._m0[90u].y, _1618 * cbSceneParam._m0[90u].x));
    float _1631 = fma(_1622, cbSceneParam._m0[91u].z, fma(_1620, cbSceneParam._m0[91u].y, _1618 * cbSceneParam._m0[91u].x));
    vec4 _1639 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_434, _435));
    float _1641 = _1639.w;
    float _1653 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1641);
    float _1654 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1641);
    float _1655 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1641);
    uvec4 _1659 = floatBitsToUint(cbInstanceData._m0[_491 + 5u]);
    uint _1661 = _1659.x * 14u;
    uint _1662 = _1661 + 13u;
    float _1669 = _564 + (-1.0);
    float _1674 = (cbLight._m0[_1662].x * _1669) + 1.0;
    float _1675 = (cbLight._m0[_1662].y * _1669) + 1.0;
    float _1676 = (cbLight._m0[_1662].z * _1669) + 1.0;
    float _1677 = (cbLight._m0[_1662].w * _1669) + 1.0;
    uint _1678 = _1661 + 5u;
    float _1684 = isnan(1.0) ? _1675 : (isnan(_1675) ? 1.0 : min(_1675, 1.0));
    uint _1688 = _1661 + 4u;
    float _1698 = isnan(1.0) ? _1674 : (isnan(_1674) ? 1.0 : min(_1674, 1.0));
    uint _1702 = _1661 | 1u;
    float _1713 = dot(vec3(cbLight._m0[_1661].xyz), vec3(_330, _331, _332));
    float _1716 = dot(vec3(cbLight._m0[_1702].xyz), vec3(_330, _331, _332));
    float _3946 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
    float _3957 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
    float _1721 = (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * 0.3183098733425140380859375;
    float _1723 = (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * 0.3183098733425140380859375;
    float _1730 = ((cbLight._m0[_1678].x * _1684) * _1723) + (((cbLight._m0[_1688].x * _1653) * _1698) * _1721);
    float _1731 = ((_1684 * cbLight._m0[_1678].y) * _1723) + (((cbLight._m0[_1688].y * _1654) * _1698) * _1721);
    float _1732 = ((_1684 * cbLight._m0[_1678].z) * _1723) + (((cbLight._m0[_1688].z * _1655) * _1698) * _1721);
    uvec4 _1737 = floatBitsToUint(cbLight._m0[_1661 + 12u]);
    bool _1739 = _1737.x == 0u;
    float _1750;
    float _1752;
    float _1754;
    if (_1739)
    {
        _1750 = _1730;
        _1752 = _1731;
        _1754 = _1732;
    }
    else
    {
        uint _1758 = _1661 + 6u;
        float _1774 = (dot(vec3(cbLight._m0[_1661 + 2u].xyz), vec3(_330, _331, _332)) * 0.5) + 0.5;
        float _1775 = _1774 * _1774;
        float _3968 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1777 = isnan(1.0) ? _1676 : (isnan(_1676) ? 1.0 : min(_1676, 1.0));
        _1750 = (((cbLight._m0[_1758].x * 0.3183098733425140380859375) * _1776) * _1777) + _1730;
        _1752 = (((cbLight._m0[_1758].y * 0.3183098733425140380859375) * _1776) * _1777) + _1731;
        _1754 = (((cbLight._m0[_1758].z * 0.3183098733425140380859375) * _1776) * _1777) + _1732;
    }
    bool _1757 = _1737.y == 0u;
    float _1795;
    float _1797;
    float _1799;
    if (_1757)
    {
        _1795 = _1750;
        _1797 = _1752;
        _1799 = _1754;
    }
    else
    {
        uint _1968 = _1661 + 7u;
        float _1984 = (dot(vec3(cbLight._m0[_1661 + 3u].xyz), vec3(_330, _331, _332)) * 0.5) + 0.5;
        float _1985 = _1984 * _1984;
        float _3984 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
        float _1986 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1987 = isnan(1.0) ? _1677 : (isnan(_1677) ? 1.0 : min(_1677, 1.0));
        _1795 = (((cbLight._m0[_1968].x * 0.3183098733425140380859375) * _1986) * _1987) + _1750;
        _1797 = (((cbLight._m0[_1968].y * 0.3183098733425140380859375) * _1986) * _1987) + _1752;
        _1799 = (((cbLight._m0[_1968].z * 0.3183098733425140380859375) * _1986) * _1987) + _1754;
    }
    uint _1802 = _1661 + 8u;
    float _1815 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1661].w)) * _478) * 0.949999988079071044921875);
    float _1816 = _1815 * _1815;
    float _1817 = cbLight._m0[_1661].x + _413;
    float _1818 = cbLight._m0[_1661].y + _414;
    float _1819 = cbLight._m0[_1661].z + _415;
    float _1823 = inversesqrt(dot(vec3(_1817, _1818, _1819), vec3(_1817, _1818, _1819)));
    float _1824 = _1823 * _1817;
    float _1825 = _1823 * _1818;
    float _1826 = _1823 * _1819;
    float _1827 = dot(vec3(_330, _331, _332), vec3(cbLight._m0[_1661].xyz));
    float _4000 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1830 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _4011 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _1831 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    float _1832 = dot(vec3(_330, _331, _332), vec3(_1824, _1825, _1826));
    float _4022 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1835 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _1836 = dot(vec3(cbLight._m0[_1661].xyz), vec3(_1824, _1825, _1826));
    float _4033 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1840 = _1816 * _1816;
    float _1844 = ((_1835 * _1835) * (_1840 + (-1.0))) + 1.0;
    float _1852 = exp2(log2(1.0 - (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) * 5.0);
    float _1853 = 0.959999978542327880859375 - _546;
    float _1855 = 0.959999978542327880859375 - _547;
    float _1856 = 0.959999978542327880859375 - _548;
    float _1863 = 1.0 - _1816;
    float _1874 = (0.5 / (((_1831 * ((_1830 * _1863) + _1816)) + 9.9999999392252902907785028219223e-09) + (((_1831 * _1863) + _1816) * _1830))) * _1830;
    float _4044 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1876 = (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_1840 / ((_1844 * _1844) * 3.141590118408203125));
    uint _1890 = _1661 + 9u;
    float _1901 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1702].w)) * _478) * 0.949999988079071044921875);
    float _1902 = _1901 * _1901;
    float _1903 = cbLight._m0[_1702].x + _413;
    float _1904 = cbLight._m0[_1702].y + _414;
    float _1905 = cbLight._m0[_1702].z + _415;
    float _1909 = inversesqrt(dot(vec3(_1903, _1904, _1905), vec3(_1903, _1904, _1905)));
    float _1910 = _1909 * _1903;
    float _1911 = _1909 * _1904;
    float _1912 = _1909 * _1905;
    float _1913 = dot(vec3(_330, _331, _332), vec3(cbLight._m0[_1702].xyz));
    float _4055 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1916 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _1917 = dot(vec3(_330, _331, _332), vec3(_1910, _1911, _1912));
    float _4066 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _1920 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _1921 = dot(vec3(cbLight._m0[_1702].xyz), vec3(_1910, _1911, _1912));
    float _4077 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
    float _1925 = _1902 * _1902;
    float _1929 = ((_1920 * _1920) * (_1925 + (-1.0))) + 1.0;
    float _1936 = exp2(log2(1.0 - (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0)))) * 5.0);
    float _1943 = 1.0 - _1902;
    float _1953 = (0.5 / (((_1831 * ((_1916 * _1943) + _1902)) + 9.9999999392252902907785028219223e-09) + (((_1831 * _1943) + _1902) * _1916))) * _1916;
    float _4088 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1955 = (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_1925 / ((_1929 * _1929) * 3.141590118408203125));
    float _1965 = (((((_1936 * _1853) + _549) * cbLight._m0[_1890].x) * _1955) * _1684) + ((((cbLight._m0[_1802].x * _1653) * ((_1852 * _1853) + _549)) * _1876) * _1698);
    float _1966 = (((((_1936 * _1855) + _551) * cbLight._m0[_1890].y) * _1955) * _1684) + ((((cbLight._m0[_1802].y * _1654) * ((_1852 * _1855) + _551)) * _1876) * _1698);
    float _1967 = (((((_1936 * _1856) + _552) * cbLight._m0[_1890].z) * _1955) * _1684) + ((((cbLight._m0[_1802].z * _1655) * ((_1852 * _1856) + _552)) * _1876) * _1698);
    float _2029;
    float _2031;
    float _2033;
    if (_1739)
    {
        _2029 = _1965;
        _2031 = _1966;
        _2033 = _1967;
    }
    else
    {
        uint _2035 = _1661 + 2u;
        uint _2039 = _1661 + 10u;
        float _2053 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2035].w)) * _478) * 0.949999988079071044921875);
        float _2054 = _2053 * _2053;
        float _2055 = cbLight._m0[_2035].x + _413;
        float _2056 = cbLight._m0[_2035].y + _414;
        float _2057 = cbLight._m0[_2035].z + _415;
        float _2061 = inversesqrt(dot(vec3(_2055, _2056, _2057), vec3(_2055, _2056, _2057)));
        float _2062 = _2061 * _2055;
        float _2063 = _2061 * _2056;
        float _2064 = _2061 * _2057;
        float _2065 = dot(vec3(_330, _331, _332), vec3(cbLight._m0[_2035].xyz));
        float _4099 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        float _2068 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _2069 = dot(vec3(_330, _331, _332), vec3(_2062, _2063, _2064));
        float _4110 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2072 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _2073 = dot(vec3(cbLight._m0[_2035].xyz), vec3(_2062, _2063, _2064));
        float _4121 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2077 = _2054 * _2054;
        float _2081 = ((_2072 * _2072) * (_2077 + (-1.0))) + 1.0;
        float _2088 = exp2(log2(1.0 - (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) * 5.0);
        float _2095 = 1.0 - _2054;
        float _2105 = (0.5 / (((_1831 * ((_2068 * _2095) + _2054)) + 9.9999999392252902907785028219223e-09) + (((_1831 * _2095) + _2054) * _2068))) * _2068;
        float _4132 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2107 = (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_2077 / ((_2081 * _2081) * 3.141590118408203125));
        float _2108 = isnan(1.0) ? _1676 : (isnan(_1676) ? 1.0 : min(_1676, 1.0));
        _2029 = (((((_2088 * _1853) + _549) * cbLight._m0[_2039].x) * _2107) * _2108) + _1965;
        _2031 = (((((_2088 * _1855) + _551) * cbLight._m0[_2039].y) * _2107) * _2108) + _1966;
        _2033 = (((((_2088 * _1856) + _552) * cbLight._m0[_2039].z) * _2107) * _2108) + _1967;
    }
    float _2143;
    float _2145;
    float _2147;
    if (_1757)
    {
        _2143 = _2029;
        _2145 = _2031;
        _2147 = _2033;
    }
    else
    {
        uint _2154 = _1661 + 3u;
        uint _2158 = _1661 + 11u;
        float _2172 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2154].w)) * _478) * 0.949999988079071044921875);
        float _2173 = _2172 * _2172;
        float _2174 = cbLight._m0[_2154].x + _413;
        float _2175 = cbLight._m0[_2154].y + _414;
        float _2176 = cbLight._m0[_2154].z + _415;
        float _2180 = inversesqrt(dot(vec3(_2174, _2175, _2176), vec3(_2174, _2175, _2176)));
        float _2181 = _2180 * _2174;
        float _2182 = _2180 * _2175;
        float _2183 = _2180 * _2176;
        float _2184 = dot(vec3(_330, _331, _332), vec3(cbLight._m0[_2154].xyz));
        float _4148 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
        float _2187 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _2188 = dot(vec3(_330, _331, _332), vec3(_2181, _2182, _2183));
        float _4159 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2191 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _2192 = dot(vec3(cbLight._m0[_2154].xyz), vec3(_2181, _2182, _2183));
        float _4170 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2196 = _2173 * _2173;
        float _2200 = ((_2191 * _2191) * (_2196 + (-1.0))) + 1.0;
        float _2207 = exp2(log2(1.0 - (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0)))) * 5.0);
        float _2214 = 1.0 - _2173;
        float _2224 = (0.5 / (((_1831 * ((_2187 * _2214) + _2173)) + 9.9999999392252902907785028219223e-09) + (((_1831 * _2214) + _2173) * _2187))) * _2187;
        float _4181 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2226 = (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_2196 / ((_2200 * _2200) * 3.141590118408203125));
        float _2227 = isnan(1.0) ? _1677 : (isnan(_1677) ? 1.0 : min(_1677, 1.0));
        _2143 = (((((_2207 * _1853) + _549) * cbLight._m0[_2158].x) * _2226) * _2227) + _2029;
        _2145 = (((((_2207 * _1855) + _551) * cbLight._m0[_2158].y) * _2226) * _2227) + _2031;
        _2147 = (((((_2207 * _1856) + _552) * cbLight._m0[_2158].z) * _2226) * _2227) + _2033;
    }
    float _2361;
    float _2363;
    float _2365;
    float _2367;
    float _2369;
    float _2371;
    if (_1659.y == 0u)
    {
        float _2302 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2303 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2302;
        float _2304 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2302;
        float _2305 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2302;
        uvec4 _2317 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2318 = _2317.x;
        uint _2329 = uint((float(_2317.y) * floor(float(uint(cbSceneParam._m0[85u].y * _435) / _2318))) + floor(float(uint(cbSceneParam._m0[85u].x * _434) / _2318)));
        float _2339 = (log2(_2305 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2340 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        uint _2343 = uint(isnan(14.0) ? _2340 : (isnan(_2340) ? 14.0 : min(_2340, 14.0)));
        uvec4 _2348 = texelFetch(g_lightClusterGridBuffer, int(((_2343 << 2u) + (_2329 << 6u)) >> 2u));
        uint _2349 = _2348.x;
        uint _2350 = _2317.z;
        float _2480;
        float _2482;
        float _2484;
        float _2486;
        float _2488;
        float _2490;
        if (((((1u << ((_2350 >> 4u) & 15u)) + 4294967295u) & _2349) == 0u) || ((_2350 & 240u) == 0u))
        {
            _2480 = 0.0;
            _2482 = 0.0;
            _2484 = 0.0;
            _2486 = 0.0;
            _2488 = 0.0;
            _2490 = 0.0;
        }
        else
        {
            float _2481;
            float _2483;
            float _2485;
            float _2487;
            float _2489;
            float _2491;
            float _2641 = 0.0;
            float _2642 = 0.0;
            float _2643 = 0.0;
            float _2644 = 0.0;
            float _2645 = 0.0;
            float _2646 = 0.0;
            uint _2647 = 0u;
            uint _2656;
            bool _2657;
            for (;;)
            {
                _2656 = texelFetch(g_lightClassification, int((((_2343 << 5u) + (_2329 << 9u)) + (_2647 << 2u)) >> 2u)).x;
                _2657 = _2656 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2657)
                {
                    frontier_phi_68_pred = _2643;
                    frontier_phi_68_pred_1 = _2646;
                    frontier_phi_68_pred_2 = _2645;
                    frontier_phi_68_pred_3 = _2644;
                    frontier_phi_68_pred_4 = _2642;
                    frontier_phi_68_pred_5 = _2641;
                }
                else
                {
                    float _2786;
                    float _2787;
                    float _2788;
                    float _2789;
                    float _2790;
                    float _2791;
                    uint _2792;
                    _2786 = _2641;
                    _2787 = _2642;
                    _2788 = _2643;
                    _2789 = _2644;
                    _2790 = _2645;
                    _2791 = _2646;
                    _2792 = _2656;
                    float _2713;
                    float _2714;
                    float _2715;
                    float _2716;
                    float _2717;
                    float _2718;
                    for (;;)
                    {
                        uint _2796 = uint(findLSB(_2792)) + (_2647 << 5u);
                        uint _2793 = (_2792 + 4294967295u) & _2792;
                        uint _2798 = _2796 * 48u;
                        vec4 _2812 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2798)).x, texelFetch(g_PointLightRenderingBuffer, int(_2798 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2798 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2798 + 3u)).x));
                        uint _2818 = (_2796 * 48u) + 4u;
                        vec4 _2831 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2818)).x, texelFetch(g_PointLightRenderingBuffer, int(_2818 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2818 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2818 + 3u)).x));
                        uint _2837 = (_2796 * 48u) + 8u;
                        vec3 _2848 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2837)).x, texelFetch(g_PointLightRenderingBuffer, int(_2837 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2837 + 2u)).x));
                        float _2852 = _2812.x - _2303;
                        float _2853 = _2812.y - _2304;
                        float _2854 = _2812.z - _2305;
                        float _2855 = dot(vec3(_2852, _2853, _2854), vec3(_2852, _2853, _2854));
                        float _2858 = inversesqrt(_2855);
                        float _2859 = _2858 * _2852;
                        float _2860 = _2858 * _2853;
                        float _2861 = _2858 * _2854;
                        float _2862 = dot(vec3(_459, _462, _465), vec3(_2859, _2860, _2861));
                        float _2867 = 1.0 - (_2855 * _2812.w);
                        float _4207 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
                        float _2868 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
                        float _2869 = sqrt(_2855) * _2831.w;
                        float _2872 = 1.39999997615814208984375 / (_2869 + 1.39999997615814208984375);
                        float _2873 = _2872 * _2872;
                        float _2876 = ((1.0 - _2873) * _2862) + _2873;
                        float _2879 = _2869 * _2869;
                        float _2883 = ((isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0))) * _2868) / ((_2879 * 0.699999988079071044921875) + 1.0);
                        float _2887 = (-0.0) - _2303;
                        float _2888 = (-0.0) - _2304;
                        float _2889 = (-0.0) - _2305;
                        float _2893 = inversesqrt(dot(vec3(_2887, _2888, _2889), vec3(_2887, _2888, _2889)));
                        float _2894 = _2893 * _2887;
                        float _2895 = _2893 * _2888;
                        float _2896 = _2893 * _2889;
                        float _2904 = exp2(log2(1.0 / ((_2879 * 3.5) + 5.0)) * 0.25);
                        float _2905 = 1.0 - _580;
                        float _2912 = sqrt(1.0 - ((1.0 - (_2905 * _2905)) * (1.0 - (_2904 * _2904))));
                        float _2913 = _2912 * _2912;
                        float _2914 = _2913 * _2913;
                        float _2915 = _2894 + _2859;
                        float _2916 = _2895 + _2860;
                        float _2917 = _2896 + _2861;
                        float _2921 = inversesqrt(dot(vec3(_2915, _2916, _2917), vec3(_2915, _2916, _2917)));
                        float _2925 = dot(vec3(_459, _462, _465), vec3(_2894, _2895, _2896));
                        float _4223 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
                        float _2928 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
                        float _2929 = dot(vec3(_459, _462, _465), vec3(_2921 * _2915, _2921 * _2916, _2921 * _2917));
                        float _4234 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
                        float _2932 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                        float _2936 = ((_2932 * _2932) * (_2914 + (-1.0))) + 1.0;
                        float _2937 = _2872 * _2913;
                        float _2938 = _2937 * _2937;
                        float _2941 = ((1.0 - _2938) * _2862) + _2938;
                        float _4245 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                        float _2942 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                        float _2943 = 1.0 - _2913;
                        float _2953 = (0.5 / (((_2942 * ((_2928 * _2943) + _2913)) + 9.9999999392252902907785028219223e-09) + (((_2942 * _2943) + _2913) * _2928))) * _2942;
                        float _4256 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
                        float _2964 = (((_2914 * 3.1415927410125732421875) * (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) / ((_2936 * _2936) * ((_2879 * 2.1991131305694580078125) + 3.141590118408203125))) * _2868;
                        _2716 = (_2883 * _2831.x) + _2789;
                        _2717 = (_2883 * _2831.y) + _2790;
                        _2718 = (_2883 * _2831.z) + _2791;
                        _2713 = (_2964 * _2848.x) + _2786;
                        _2714 = (_2964 * _2848.y) + _2787;
                        _2715 = (_2964 * _2848.z) + _2788;
                        if (_2793 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2786 = _2713;
                            _2787 = _2714;
                            _2788 = _2715;
                            _2789 = _2716;
                            _2790 = _2717;
                            _2791 = _2718;
                            _2792 = _2793;
                        }
                    }
                    frontier_phi_68_pred = _2715;
                    frontier_phi_68_pred_1 = _2718;
                    frontier_phi_68_pred_2 = _2717;
                    frontier_phi_68_pred_3 = _2716;
                    frontier_phi_68_pred_4 = _2714;
                    frontier_phi_68_pred_5 = _2713;
                }
                _2485 = frontier_phi_68_pred;
                _2491 = frontier_phi_68_pred_1;
                _2489 = frontier_phi_68_pred_2;
                _2487 = frontier_phi_68_pred_3;
                _2483 = frontier_phi_68_pred_4;
                _2481 = frontier_phi_68_pred_5;
                uint _2648 = _2647 + 1u;
                if (_2648 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2641 = _2481;
                    _2642 = _2483;
                    _2643 = _2485;
                    _2644 = _2487;
                    _2645 = _2489;
                    _2646 = _2491;
                    _2647 = _2648;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2480 = _2481;
            _2482 = _2483;
            _2484 = _2485;
            _2486 = _2487;
            _2488 = _2489;
            _2490 = _2491;
        }
        uvec4 _2494 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2495 = _2494.z;
        uint _2497 = (_2495 >> 8u) & 15u;
        float _2609;
        float _2611;
        float _2613;
        float _2615;
        float _2617;
        float _2619;
        if (((4294967295u << _2497) & _2349) == 0u)
        {
            _2609 = _2480;
            _2611 = _2482;
            _2613 = _2484;
            _2615 = _2486;
            _2617 = _2488;
            _2619 = _2490;
        }
        else
        {
            float _2634 = inversesqrt(dot(vec3(_2303, _2304, _2305), vec3(_2303, _2304, _2305)));
            float _2635 = _2634 * _2303;
            float _2636 = _2634 * _2304;
            float _2637 = _2634 * _2305;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2497 < ((_2495 >> 12u) & 15u))
            {
                float _2610;
                float _2612;
                float _2614;
                float _2616;
                float _2618;
                float _2620;
                float _2769 = _2480;
                float _2770 = _2482;
                float _2771 = _2484;
                float _2772 = _2486;
                float _2773 = _2488;
                float _2774 = _2490;
                uint _2775 = _2497;
                uint _2784;
                bool _2785;
                for (;;)
                {
                    _2784 = texelFetch(g_lightClassification, int((((_2343 << 5u) + (_2329 << 9u)) + (_2775 << 2u)) >> 2u)).x;
                    _2785 = _2784 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2785)
                    {
                        frontier_phi_79_pred = _2774;
                        frontier_phi_79_pred_1 = _2773;
                        frontier_phi_79_pred_2 = _2772;
                        frontier_phi_79_pred_3 = _2771;
                        frontier_phi_79_pred_4 = _2770;
                        frontier_phi_79_pred_5 = _2769;
                    }
                    else
                    {
                        float _2978;
                        float _2979;
                        float _2980;
                        float _2981;
                        float _2982;
                        float _2983;
                        float _3274;
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3278;
                        float _3279;
                        float _2991 = _2769;
                        float _2992 = _2770;
                        float _2993 = _2771;
                        float _2994 = _2772;
                        float _2995 = _2773;
                        float _2996 = _2774;
                        uint _2997 = _2784;
                        uint _2998;
                        vec4 _3023;
                        float _3024;
                        vec4 _3039;
                        vec3 _3051;
                        vec4 _3067;
                        vec4 _3083;
                        float _3130;
                        bool _3131;
                        for (;;)
                        {
                            uint _3008 = ((_2775 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2997));
                            _2998 = (_2997 + 4294967295u) & _2997;
                            uint _3010 = _3008 * 40u;
                            _3023 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3010)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 3u)).x));
                            _3024 = _3023.w;
                            uint _3026 = (_3008 * 40u) + 4u;
                            _3039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 3u)).x));
                            uint _3041 = (_3008 * 40u) + 8u;
                            _3051 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3041)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 2u)).x));
                            uint _3054 = (_3008 * 40u) + 16u;
                            _3067 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3054)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 3u)).x));
                            uint _3070 = (_3008 * 40u) + 20u;
                            _3083 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3070)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 3u)).x));
                            uint _3086 = (_3008 * 40u) + 24u;
                            vec4 _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            uint _3105 = (_3008 * 40u) + 28u;
                            vec4 _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            _3130 = fma(_2305, _3118.z, fma(_2304, _3118.y, _3118.x * _2303)) + _3118.w;
                            _3131 = !((fma(_2305, _3099.z, fma(_2304, _3099.y, _3099.x * _2303)) + _3099.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3131)
                            {
                                float _3158 = _3023.x - _2303;
                                float _3159 = _3023.y - _2304;
                                float _3160 = _3023.z - _2305;
                                float _3161 = dot(vec3(_3158, _3159, _3160), vec3(_3158, _3159, _3160));
                                float _3164 = inversesqrt(_3161);
                                float _3165 = _3164 * _3158;
                                float _3166 = _3164 * _3159;
                                float _3167 = _3164 * _3160;
                                float _3171 = 1.0 - (_3161 / (_3024 * _3024));
                                float _4267 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                                float _3172 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                                float _3176 = sqrt(_3161) * _3039.w;
                                float _3178 = 1.39999997615814208984375 / (_3176 + 1.39999997615814208984375);
                                float _3179 = _3178 * _3178;
                                float _3182 = ((1.0 - _3179) * dot(vec3(_3165, _3166, _3167), vec3(_459, _462, _465))) + _3179;
                                float _3185 = _3176 * _3176;
                                float _3189 = (fma(_2305, _3067.z, fma(_2304, _3067.y, _3067.x * _2303)) + _3067.w) / _3130;
                                float _3190 = (fma(_2305, _3083.z, fma(_2304, _3083.y, _3083.x * _2303)) + _3083.w) / _3130;
                                float _3194 = 1.0 - dot(vec2(_3189, _3190), vec2(_3189, _3190));
                                float _4283 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                                float _3195 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                                float _3196 = _3195 * (((isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0))) * _3172) / ((_3185 * 0.699999988079071044921875) + 1.0));
                                float _3208 = exp2(log2(1.0 / ((_3185 * 3.5) + 5.0)) * 0.25);
                                float _3209 = 1.0 - _580;
                                float _3216 = sqrt(1.0 - ((1.0 - (_3209 * _3209)) * (1.0 - (_3208 * _3208))));
                                float _3217 = _3216 * _3216;
                                float _3218 = _3217 * _3217;
                                float _3219 = _3165 - _2635;
                                float _3220 = _3166 - _2636;
                                float _3221 = _3167 - _2637;
                                float _3225 = inversesqrt(dot(vec3(_3219, _3220, _3221), vec3(_3219, _3220, _3221)));
                                float _3229 = dot(vec3(_459, _462, _465), vec3((-0.0) - _2635, (-0.0) - _2636, (-0.0) - _2637));
                                float _4294 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                                float _3232 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
                                float _3233 = dot(vec3(_459, _462, _465), vec3(_3225 * _3219, _3225 * _3220, _3225 * _3221));
                                float _4305 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                                float _3236 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
                                float _3240 = ((_3236 * _3236) * (_3218 + (-1.0))) + 1.0;
                                float _3241 = _3178 * _3217;
                                float _3242 = _3241 * _3241;
                                float _3248 = ((1.0 - _3242) * dot(vec3(_459, _462, _465), vec3(_3165, _3166, _3167))) + _3242;
                                float _4316 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                                float _3249 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                                float _3250 = 1.0 - _3217;
                                float _3260 = (0.5 / (((_3249 * ((_3232 * _3250) + _3217)) + 9.9999999392252902907785028219223e-09) + (((_3249 * _3250) + _3217) * _3232))) * _3249;
                                float _4327 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                                float _3270 = (_3195 * _3172) * (((_3218 * 3.1415927410125732421875) * (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0)))) / ((_3240 * _3240) * ((_3185 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3196 * _3039.z;
                                frontier_phi_85_pred_1 = _3196 * _3039.y;
                                frontier_phi_85_pred_2 = _3196 * _3039.x;
                                frontier_phi_85_pred_3 = _3270 * _3051.z;
                                frontier_phi_85_pred_4 = _3270 * _3051.y;
                                frontier_phi_85_pred_5 = _3270 * _3051.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3279 = frontier_phi_85_pred;
                            _3278 = frontier_phi_85_pred_1;
                            _3277 = frontier_phi_85_pred_2;
                            _3276 = frontier_phi_85_pred_3;
                            _3275 = frontier_phi_85_pred_4;
                            _3274 = frontier_phi_85_pred_5;
                            _2981 = _3277 + _2994;
                            _2982 = _3278 + _2995;
                            _2983 = _3279 + _2996;
                            _2978 = _3274 + _2991;
                            _2979 = _3275 + _2992;
                            _2980 = _3276 + _2993;
                            if (_2998 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2991 = _2978;
                                _2992 = _2979;
                                _2993 = _2980;
                                _2994 = _2981;
                                _2995 = _2982;
                                _2996 = _2983;
                                _2997 = _2998;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2983;
                        frontier_phi_79_pred_1 = _2982;
                        frontier_phi_79_pred_2 = _2981;
                        frontier_phi_79_pred_3 = _2980;
                        frontier_phi_79_pred_4 = _2979;
                        frontier_phi_79_pred_5 = _2978;
                    }
                    _2620 = frontier_phi_79_pred;
                    _2618 = frontier_phi_79_pred_1;
                    _2616 = frontier_phi_79_pred_2;
                    _2614 = frontier_phi_79_pred_3;
                    _2612 = frontier_phi_79_pred_4;
                    _2610 = frontier_phi_79_pred_5;
                    uint _2776 = _2775 + 1u;
                    if (_2776 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2769 = _2610;
                        _2770 = _2612;
                        _2771 = _2614;
                        _2772 = _2616;
                        _2773 = _2618;
                        _2774 = _2620;
                        _2775 = _2776;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2616;
                frontier_phi_60_61_ladder_1 = _2620;
                frontier_phi_60_61_ladder_2 = _2618;
                frontier_phi_60_61_ladder_3 = _2614;
                frontier_phi_60_61_ladder_4 = _2612;
                frontier_phi_60_61_ladder_5 = _2610;
            }
            else
            {
                frontier_phi_60_61_ladder = _2486;
                frontier_phi_60_61_ladder_1 = _2490;
                frontier_phi_60_61_ladder_2 = _2488;
                frontier_phi_60_61_ladder_3 = _2484;
                frontier_phi_60_61_ladder_4 = _2482;
                frontier_phi_60_61_ladder_5 = _2480;
            }
            _2609 = frontier_phi_60_61_ladder_5;
            _2611 = frontier_phi_60_61_ladder_4;
            _2613 = frontier_phi_60_61_ladder_3;
            _2615 = frontier_phi_60_61_ladder;
            _2617 = frontier_phi_60_61_ladder_2;
            _2619 = frontier_phi_60_61_ladder_1;
        }
        float _2624 = isnan(1.0) ? _564 : (isnan(_564) ? 1.0 : min(_564, 1.0));
        _2361 = (_2624 * _2615) + _1795;
        _2363 = (_2624 * _2617) + _1797;
        _2365 = (_2624 * _2619) + _1799;
        _2367 = ((_2609 * _549) * _2624) + _2143;
        _2369 = ((_2611 * _551) * _2624) + _2145;
        _2371 = ((_2613 * _552) * _2624) + _2147;
    }
    else
    {
        _2361 = _1795;
        _2363 = _1797;
        _2365 = _1799;
        _2367 = _2143;
        _2369 = _2145;
        _2371 = _2147;
    }
    uint _2377 = _493 + uint(cbMatDynParam._m0[0u].w);
    float _2383 = (_309.x * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2377].x;
    float _2384 = (_309.y * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2377].y;
    float _2385 = (_309.z * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2377].z;
    float _4343 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _4354 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _4365 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _4376 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _2403 = (((isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_2361 + ((isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0))) * _564))) + ((_2367 + ((isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))) * _1406)) * cbPerFrame._m0[3u].x)) + _2383;
    float _2405 = (_2384 + ((_2369 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _1406)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_2363 + ((isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0))) * _564)));
    float _2407 = (_2385 + ((_2371 + ((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _1406)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_2365 + ((isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0))) * _564)));
    float _2408 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2409 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2410 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2416 = cbMtdParam._m0[2u].x * _2383;
    float _2417 = cbMtdParam._m0[2u].y * _2384;
    float _2418 = cbMtdParam._m0[2u].z * _2385;
    float _4402 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2420 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
    float _2425 = cbInstanceData._m0[_491 + 6u].w * (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0)));
    float _2430 = _434 / cbSceneParam._m0[86u].x;
    float _2431 = _435 / cbSceneParam._m0[86u].y;
    vec4 _2445 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2430, _2431, (log2((isnan(cbSceneParam._m0[77u].w) ? _354 : (isnan(_354) ? cbSceneParam._m0[77u].w : min(_354, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2447 = _2445.x;
    float _2448 = _2445.y;
    float _2449 = _2445.z;
    float _2450 = _2445.w;
    float _2542;
    float _2544;
    float _2546;
    float _2548;
    if (_354 > cbSceneParam._m0[78u].w)
    {
        float _2505 = isnan(_354) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _354 : min(cbSceneParam._m0[80u].w, _354));
        float _2506 = _2505 / _354;
        float _2517 = _2506 * _406;
        float _2518 = _407 * _2506;
        float _2519 = (-0.0) - _2518;
        float _2520 = _2506 * _408;
        float _2522 = (cbSceneParam._m0[77u].w * _2519) / _2505;
        float _2523 = _2522 + cbSceneParam._m0[79u].w;
        float _2524 = cbSceneParam._m0[79u].w - _2518;
        float _2530 = sqrt(((_2517 * _2517) + (_2518 * _2518)) + (_2520 * _2520));
        float _2533 = (1.0 - (cbSceneParam._m0[77u].w / _2505)) * _2530;
        float _2538 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2540 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2726;
        if (abs((_2519 - _2522) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2726 = ((((_2523 > 0.0) ? exp2(_2538 * _2523) : (2.0 - exp2(_2540 * _2523))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2533;
        }
        else
        {
            float _2670 = 1.0 / cbSceneParam._m0[80u].x;
            float _2671 = isnan(_2524) ? _2523 : (isnan(_2523) ? _2524 : max(_2523, _2524));
            float _2672 = isnan(_2524) ? _2523 : (isnan(_2523) ? _2524 : min(_2523, _2524));
            float _2681 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : min(_2671, 0.0));
            float _2682 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : min(_2672, 0.0));
            _2726 = ((abs(_2530 / _2519) * cbSceneParam._m0[80u].y) * ((((_2681 - _2682) * 2.0) - ((exp2(_2538 * (isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0)))) - exp2(_2538 * (isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0))))) * _2670)) - ((exp2(_2540 * _2681) - exp2(_2540 * _2682)) * _2670))) + (_2533 * cbSceneParam._m0[80u].z);
        }
        vec4 _2728 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2430, _2431, 1.0), 0.0);
        float _2737 = exp2((_2726 * (-1.44269502162933349609375)) * (1.0 - _2728.w));
        float _2738 = log2(_2737);
        float _2754 = log2(_2450);
        _2542 = (exp2(_2754 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2738 * cbSceneParam._m0[78u].x)) * _2728.x) / cbSceneParam._m0[78u].x)) + _2447;
        _2544 = (exp2(_2754 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2738 * cbSceneParam._m0[78u].y)) * _2728.y) / cbSceneParam._m0[78u].y)) + _2448;
        _2546 = (exp2(_2754 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2738 * cbSceneParam._m0[78u].z)) * _2728.z) / cbSceneParam._m0[78u].z)) + _2449;
        _2548 = _2737 * _2450;
    }
    else
    {
        _2542 = _2447;
        _2544 = _2448;
        _2546 = _2449;
        _2548 = _2450;
    }
    bool _2764;
    vec4 _2558;
    vec4 _2580;
    float _2582;
    float _2586;
    float _2587;
    float _2588;
    float _2591;
    float _2594;
    float _2597;
    float _2598;
    bool _2608;
    for (;;)
    {
        _2558 = cbMatDynParam._m0[0u];
        float _2560 = roundEven(_2558.y);
        bool _2561 = _2560 == 3.0;
        float _2562 = log2(_2548);
        float _2566 = exp2(_2562 * cbSceneParam._m0[78u].x);
        float _2567 = exp2(_2562 * cbSceneParam._m0[78u].y);
        float _2568 = exp2(_2562 * cbSceneParam._m0[78u].z);
        float _2569 = _2566 * _2408;
        float _2570 = _2567 * _2409;
        float _2571 = _2568 * _2410;
        float _2578 = _422 + (-0.5);
        _2580 = cbMtdParam._m0[1u];
        _2582 = _2580.y * _2578;
        float _2585 = (_2560 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2586 = _2585 * (_2561 ? _2569 : (_2569 + (cbSceneParam._m0[72u].w * _2542)));
        _2587 = _2585 * (_2561 ? _2570 : (_2570 + (cbSceneParam._m0[72u].w * _2544)));
        _2588 = _2585 * (_2561 ? _2571 : (_2571 + (cbSceneParam._m0[72u].w * _2546)));
        _2591 = ((_2416 * _2420) * _2566) * _2585;
        _2594 = ((_2417 * _2420) * _2567) * _2585;
        _2597 = ((_2418 * _2420) * _2568) * _2585;
        _2598 = _2578 * 0.999000012874603271484375;
        _2608 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2608)
        {
            if ((cbInstanceData._m0[_491 + 7u].x + _2598) < 0.5)
            {
                _2764 = true;
                break;
            }
        }
        uint _2705 = _493 + uint(_2558.w);
        if ((cbInstanceData._m0[_2705].w < 1.0) && ((cbInstanceData._m0[_2705].w + _2598) < 0.5))
        {
            _2764 = true;
            break;
        }
        if ((_2582 + _248) < _2580.x)
        {
            _2764 = true;
            break;
        }
        _2764 = false;
        break;
    }
    float _2969;
    if (_2764)
    {
        discard_state = true;
        _2969 = 0.0;
    }
    else
    {
        _2969 = _2425;
    }
    SV_Target.x = _2586;
    SV_Target.y = _2587;
    SV_Target.z = _2588;
    SV_Target.w = _2969;
    SV_Target_1.x = _2591;
    SV_Target_1.y = _2594;
    SV_Target_1.z = _2597;
    SV_Target_1.w = _2425;
    discard_exit();
}


