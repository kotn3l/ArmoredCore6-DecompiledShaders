#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_AMSN_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D P_AMSN_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _925;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224;
    float _225;
    float _226;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
        _226 = (-0.0) - _212;
    }
    else
    {
        _224 = _210;
        _225 = _211;
        _226 = _212;
    }
    vec4 _240 = texture(sampler2D(P_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _243 = _240.x;
    float _244 = _240.y;
    float _245 = _240.z;
    float _246 = _240.w;
    vec4 _262 = texture(sampler2D(P_AMSN_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _265 = _262.x + cbMtdParam._m0[9u].x;
    vec4 _277 = texture(sampler2D(P_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _281 = _277.z;
    float _285 = (_277.x * 2.0) + (-1.0);
    float _287 = (_277.y * 2.0) + (-1.0);
    float _288 = dot(vec2(_285, _287), vec2(_285, _287));
    float _3585 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _294 = sqrt(1.0 - (isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))));
    vec4 _307 = texture(sampler2D(P_AMSN_Emissive_Glow_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _317 = fma(_294, _224, fma(_287, _216 * TANGENT.x, (_202 * _194) * _285));
    float _320 = fma(_294, _225, fma(_287, _216 * TANGENT.y, (_202 * _195) * _285));
    float _323 = fma(_294, _226, fma(_287, _216 * TANGENT.z, (_202 * _196) * _285));
    float _327 = inversesqrt(dot(vec3(_317, _320, _323), vec3(_317, _320, _323)));
    float _328 = _327 * _317;
    float _329 = _327 * _320;
    float _330 = _327 * _323;
    float _3596 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _331 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
    float _3607 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _332 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
    float _3618 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3629 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3640 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3651 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _336 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    float _352 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _394 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _404 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _394);
    float _405 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _394);
    float _406 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _394);
    float _410 = inversesqrt(dot(vec3(_404, _405, _406), vec3(_404, _405, _406)));
    float _411 = _404 * _410;
    float _412 = _405 * _410;
    float _413 = _406 * _410;
    float _419 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _420 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _422 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _424 = _422.w;
    float _445 = fma(_330, cbSceneParam._m0[5u].z, fma(_329, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _328));
    float _448 = fma(_330, cbSceneParam._m0[6u].z, fma(_329, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _328));
    float _451 = fma(_330, cbSceneParam._m0[7u].z, fma(_329, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _328));
    vec4 _453 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _464 = (((_453.y - _332) + (_453.w * _332)) * cbMtdParam._m0[3u].x) + _332;
    uint _477 = uint(roundEven(NORMAL.w)) * 13u;
    uint _479 = _477 + 9u;
    uint _480 = _479 + uint(cbMatDynParam._m0[0u].w);
    float _486 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0)))) * cbInstanceData._m0[_480].x;
    float _487 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0)))) * cbInstanceData._m0[_480].y;
    float _488 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0)))) * cbInstanceData._m0[_480].z;
    float _3662 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _489 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
    float _3673 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _490 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _3684 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _491 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    vec4 _492 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _497 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _508 = (((_497.x - _336) + (_497.w * _336)) * cbMtdParam._m0[3u].x) + _336;
    float _521 = (cbMtdParam._m0[3u].x * (((_489 * _424) - _489) + _492.x)) + _489;
    float _522 = (cbMtdParam._m0[3u].x * (((_490 * _424) - _490) + _492.y)) + _490;
    float _523 = (cbMtdParam._m0[3u].x * (((_491 * _424) - _491) + _492.z)) + _491;
    float _524 = 1.0 - _508;
    float _525 = _524 * _521;
    float _526 = _524 * _522;
    float _527 = _524 * _523;
    float _532 = (_521 + (-0.039999999105930328369140625)) * _508;
    float _533 = (_522 + (-0.039999999105930328369140625)) * _508;
    float _534 = (_523 + (-0.039999999105930328369140625)) * _508;
    float _535 = _532 + 0.039999999105930328369140625;
    float _537 = _533 + 0.039999999105930328369140625;
    float _538 = _534 + 0.039999999105930328369140625;
    vec4 _547 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _419, cbSceneParam._m0[86u].y * _420));
    float _550 = _547.x * TEXCOORD_4;
    float _551 = dot(vec3(_328, _329, _330), vec3(_411, _412, _413));
    float _554 = _551 * 2.0;
    float _558 = (_554 * _328) - _411;
    float _559 = (_554 * _329) - _412;
    float _560 = (_554 * _330) - _413;
    float _564 = abs(dot(vec3(_411, _412, _413), vec3(_328, _329, _330)));
    float _3695 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _566 = sqrt(_464);
    float _579 = exp2((_566 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_566 * 3.0));
    float _585 = (1.0 - _579) * ((_566 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _586 = _579 * _566;
    float _614 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _618 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _622 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _924;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _649 = fma(_622, cbModelParam._m0[26u].z, fma(_618, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _614));
        float _653 = fma(_622, cbModelParam._m0[27u].z, fma(_618, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _614));
        float _657 = fma(_622, cbModelParam._m0[28u].z, fma(_618, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _614));
        float _682 = _614 + _328;
        float _683 = _618 + _329;
        float _684 = _622 + _330;
        float _694 = fma(_684, cbModelParam._m0[26u].z, fma(_683, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _682)) - _649;
        float _695 = fma(_684, cbModelParam._m0[27u].z, fma(_683, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _682)) - _653;
        float _696 = fma(_684, cbModelParam._m0[28u].z, fma(_683, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _682)) - _657;
        float _700 = inversesqrt(dot(vec3(_694, _695, _696), vec3(_694, _695, _696)));
        float _713 = ((_700 * _694) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_649 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _714 = ((_700 * _695) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_653 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _715 = ((_700 * _696) / cbModelParam._m0[34u].z) + ((((((_657 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _718 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_713, _714, _715), 0.0);
        vec4 _725 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_713, _714, _715), 0.0);
        vec4 _732 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_713, _714, _715), 0.0);
        vec4 _739 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_713, _714, _715), 0.0);
        float _752 = exp2((_718.w + (-0.5)) * 20.0) * 2.0;
        float _753 = _752 * (_718.x + (-0.5));
        float _754 = _752 * (_718.y + (-0.5));
        float _755 = _752 * (_718.z + (-0.5));
        float _762 = exp2((_725.w + (-0.5)) * 20.0) * 2.0;
        float _763 = _762 * (_725.x + (-0.5));
        float _764 = _762 * (_725.y + (-0.5));
        float _765 = _762 * (_725.z + (-0.5));
        float _772 = exp2((_732.w + (-0.5)) * 20.0) * 2.0;
        float _773 = _772 * (_732.x + (-0.5));
        float _774 = _772 * (_732.y + (-0.5));
        float _775 = _772 * (_732.z + (-0.5));
        float _782 = exp2((_739.w + (-0.5)) * 20.0) * 2.0;
        float _783 = _782 * (_739.x + (-0.5));
        float _784 = _782 * (_739.y + (-0.5));
        float _785 = _782 * (_739.z + (-0.5));
        float _786 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _787 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _788 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _789 = _753 * 0.5;
        float _790 = _763 * 0.5;
        float _791 = _773 * 0.5;
        float _792 = dot(vec3(_789, _790, _791), vec3(_789, _790, _791));
        float _797 = (_792 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_792);
        float _806 = (dot(vec3(_328, _329, _330), vec3(_797 * _789, _797 * _790, _797 * _791)) + 1.0) * 0.5;
        float _3721 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _816 = sqrt(((_790 * _790) + (_789 * _789)) + (_791 * _791)) / (_786 + 9.9999997473787516355514526367188e-06);
        float _3732 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _817 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _818 = _817 * 2.0;
        float _822 = (1.0 - _817) / (_817 + 1.0);
        float _3743 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _823 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _832 = ((((1.0 - _823) * (_818 + 2.0)) * exp2(log2(isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * (_818 + 1.0))) + _823) * _786;
        float _833 = _754 * 0.5;
        float _834 = _764 * 0.5;
        float _835 = _774 * 0.5;
        float _836 = dot(vec3(_833, _834, _835), vec3(_833, _834, _835));
        float _841 = (_836 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_836);
        float _849 = (dot(vec3(_328, _329, _330), vec3(_841 * _833, _841 * _834, _841 * _835)) + 1.0) * 0.5;
        float _3754 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _858 = sqrt(((_834 * _834) + (_833 * _833)) + (_835 * _835)) / (_787 + 9.9999997473787516355514526367188e-06);
        float _3765 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _859 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _860 = _859 * 2.0;
        float _864 = (1.0 - _859) / (_859 + 1.0);
        float _3776 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _865 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _874 = ((((1.0 - _865) * (_860 + 2.0)) * exp2(log2(isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * (_860 + 1.0))) + _865) * _787;
        float _875 = _755 * 0.5;
        float _876 = _765 * 0.5;
        float _877 = _775 * 0.5;
        float _878 = dot(vec3(_875, _876, _877), vec3(_875, _876, _877));
        float _883 = (_878 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_878);
        float _891 = (dot(vec3(_328, _329, _330), vec3(_883 * _875, _883 * _876, _883 * _877)) + 1.0) * 0.5;
        float _3787 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _900 = sqrt(((_876 * _876) + (_875 * _875)) + (_877 * _877)) / (_788 + 9.9999997473787516355514526367188e-06);
        float _3798 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _901 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _902 = _901 * 2.0;
        float _906 = (1.0 - _901) / (_901 + 1.0);
        float _3809 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _907 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _916 = ((((1.0 - _907) * (_902 + 2.0)) * exp2(log2(isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * (_902 + 1.0))) + _907) * _788;
        _924 = _755;
        _926 = _754;
        _927 = _753;
        _928 = _765;
        _929 = _764;
        _930 = _763;
        _931 = _775;
        _932 = _774;
        _933 = _773;
        _934 = _788;
        _935 = _787;
        _936 = _786;
        _937 = cbModelParam._m0[36u].z * (isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0)));
        _938 = cbModelParam._m0[36u].z * (isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0)));
        _939 = cbModelParam._m0[36u].z * (isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0)));
    }
    else
    {
        _924 = _925;
        _926 = _925;
        _927 = _925;
        _928 = _925;
        _929 = _925;
        _930 = _925;
        _931 = _925;
        _932 = _925;
        _933 = _925;
        _934 = _925;
        _935 = _925;
        _936 = _925;
        _937 = 0.0;
        _938 = 0.0;
        _939 = 0.0;
    }
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _965 = fma(_622, cbModelParam._m0[30u].z, fma(_618, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _614));
        float _969 = fma(_622, cbModelParam._m0[31u].z, fma(_618, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _614));
        float _973 = fma(_622, cbModelParam._m0[32u].z, fma(_618, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _614));
        float _996 = _614 + _328;
        float _997 = _618 + _329;
        float _998 = _622 + _330;
        float _1008 = fma(_998, cbModelParam._m0[30u].z, fma(_997, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _996)) - _965;
        float _1009 = fma(_998, cbModelParam._m0[31u].z, fma(_997, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _996)) - _969;
        float _1010 = fma(_998, cbModelParam._m0[32u].z, fma(_997, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _996)) - _973;
        float _1014 = inversesqrt(dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010)));
        float _1027 = ((_1014 * _1008) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_965 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1028 = ((_1014 * _1009) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_969 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1029 = ((_1014 * _1010) / cbModelParam._m0[35u].z) + ((((((_973 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        float _1064 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1031.x + (-0.5));
        float _1066 = _1064 * (_1031.y + (-0.5));
        float _1067 = _1064 * (_1031.z + (-0.5));
        float _1074 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1038.x + (-0.5));
        float _1076 = _1074 * (_1038.y + (-0.5));
        float _1077 = _1074 * (_1038.z + (-0.5));
        float _1084 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1045.x + (-0.5));
        float _1086 = _1084 * (_1045.y + (-0.5));
        float _1087 = _1084 * (_1045.z + (-0.5));
        float _1094 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1052.x + (-0.5));
        float _1096 = _1094 * (_1052.y + (-0.5));
        float _1097 = _1094 * (_1052.z + (-0.5));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1100 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1101 = _1065 * 0.5;
        float _1102 = _1075 * 0.5;
        float _1103 = _1085 * 0.5;
        float _1104 = dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103));
        float _1109 = (_1104 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1104);
        float _1117 = (dot(vec3(_328, _329, _330), vec3(_1109 * _1101, _1109 * _1102, _1109 * _1103)) + 1.0) * 0.5;
        float _3850 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1126 = sqrt(((_1102 * _1102) + (_1101 * _1101)) + (_1103 * _1103)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _3861 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1128 = _1127 * 2.0;
        float _1132 = (1.0 - _1127) / (_1127 + 1.0);
        float _3872 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1142 = ((((1.0 - _1133) * (_1128 + 2.0)) * exp2(log2(isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_1128 + 1.0))) + _1133) * _1098;
        float _1143 = _1066 * 0.5;
        float _1144 = _1076 * 0.5;
        float _1145 = _1086 * 0.5;
        float _1146 = dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145));
        float _1151 = (_1146 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1146);
        float _1159 = (dot(vec3(_328, _329, _330), vec3(_1151 * _1143, _1151 * _1144, _1151 * _1145)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1168 = sqrt(((_1144 * _1144) + (_1143 * _1143)) + (_1145 * _1145)) / (_1099 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1170 = _1169 * 2.0;
        float _1174 = (1.0 - _1169) / (_1169 + 1.0);
        float _3905 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1184 = ((((1.0 - _1175) * (_1170 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1170 + 1.0))) + _1175) * _1099;
        float _1185 = _1067 * 0.5;
        float _1186 = _1077 * 0.5;
        float _1187 = _1087 * 0.5;
        float _1188 = dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187));
        float _1193 = (_1188 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1188);
        float _1201 = (dot(vec3(_328, _329, _330), vec3(_1193 * _1185, _1193 * _1186, _1193 * _1187)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1210 = sqrt(((_1186 * _1186) + (_1185 * _1185)) + (_1187 * _1187)) / (_1100 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _3938 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1212 + 1.0))) + _1217) * _1100;
        _1234 = _1067;
        _1235 = _1066;
        _1236 = _1065;
        _1237 = _1077;
        _1238 = _1076;
        _1239 = _1075;
        _1240 = _1087;
        _1241 = _1086;
        _1242 = _1085;
        _1243 = _1100;
        _1244 = _1099;
        _1245 = _1098;
        _1246 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)));
        _1247 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)));
        _1248 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
    }
    else
    {
        _1234 = _925;
        _1235 = _925;
        _1236 = _925;
        _1237 = _925;
        _1238 = _925;
        _1239 = _925;
        _1240 = _925;
        _1241 = _925;
        _1242 = _925;
        _1243 = _925;
        _1244 = _925;
        _1245 = _925;
        _1246 = 0.0;
        _1247 = 0.0;
        _1248 = 0.0;
    }
    float _1258 = (cbModelParam._m0[1u].x * (_1246 - _937)) + _937;
    float _1259 = (cbModelParam._m0[1u].x * (_1247 - _938)) + _938;
    float _1260 = (cbModelParam._m0[1u].x * (_1248 - _939)) + _939;
    float _1281 = fma(_1260, cbSceneParam._m0[89u].z, fma(_1259, cbSceneParam._m0[89u].y, _1258 * cbSceneParam._m0[89u].x));
    float _1284 = fma(_1260, cbSceneParam._m0[90u].z, fma(_1259, cbSceneParam._m0[90u].y, _1258 * cbSceneParam._m0[90u].x));
    float _1287 = fma(_1260, cbSceneParam._m0[91u].z, fma(_1259, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1258));
    float _1302 = _558 * 0.5;
    float _1303 = _559 * 0.5;
    float _1304 = _560 * 0.5;
    float _1305 = dot(vec4(_1302, _1303, _1304, 1.0), vec4(_1236, _1239, _1242, _1245));
    float _1308 = dot(vec4(_1302, _1303, _1304, 1.0), vec4(_1235, _1238, _1241, _1244));
    float _1311 = dot(vec4(_1302, _1303, _1304, 1.0), vec4(_1234, _1237, _1240, _1243));
    float _1345;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1318 = dot(vec4(_1302, _1303, _1304, 1.0), vec4(_924, _928, _931, _934));
        float _1322 = dot(vec4(_1302, _1303, _1304, 1.0), vec4(_926, _929, _932, _935));
        float _1326 = dot(vec4(_1302, _1303, _1304, 1.0), vec4(_927, _930, _933, _936));
        float _1333 = dot(vec4(cbModelParam._m0[39u]), vec4(_1302, _1303, _1304, 1.0));
        _1345 = dot(vec3(isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)), isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)), isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1333) ? 0.0 : (isnan(0.0) ? _1333 : max(0.0, _1333))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1345 = 1.0;
    }
    float _1356;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1347 = dot(vec4(cbModelParam._m0[40u]), vec4(_1302, _1303, _1304, 1.0));
        _1356 = dot(vec3(isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)), isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)), isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1347) ? 0.0 : (isnan(0.0) ? _1347 : max(0.0, _1347))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1356 = 1.0;
    }
    float _1360 = (_1356 * cbModelParam._m0[1u].x) + (_1345 * (1.0 - cbModelParam._m0[1u].x));
    float _1370 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _464);
    float _1371 = isnan(_1370) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1370 : min(cbModelParam._m0[25u].z, _1370));
    float _1453;
    float _1455;
    float _1457;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1420 = fma(_622, cbModelParam._m0[13u].z, fma(_618, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _614)) + cbModelParam._m0[13u].w;
        float _1424 = fma(_622, cbModelParam._m0[14u].z, fma(_618, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _614)) + cbModelParam._m0[14u].w;
        float _1428 = fma(_622, cbModelParam._m0[15u].z, fma(_618, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _614)) + cbModelParam._m0[15u].w;
        float _1431 = fma(_560, cbModelParam._m0[13u].z, fma(_559, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _558));
        float _1434 = fma(_560, cbModelParam._m0[14u].z, fma(_559, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _558));
        float _1437 = fma(_560, cbModelParam._m0[15u].z, fma(_559, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _558));
        float _1465;
        if (_1431 > 0.0)
        {
            _1465 = abs((1.0 - _1420) / _1431);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1431 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1420 + 1.0) / _1431);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1465 = frontier_phi_16_14_ladder;
        }
        float _1641;
        if (_1434 > 0.0)
        {
            _1641 = abs((1.0 - _1424) / _1434);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1434 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1424 + 1.0) / _1434);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1641 = frontier_phi_25_21_ladder;
        }
        float _1937;
        if (_1437 > 0.0)
        {
            _1937 = abs((1.0 - _1428) / _1437);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1437 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1428 + 1.0) / _1437);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1937 = frontier_phi_37_32_ladder;
        }
        float _1939 = isnan(_1641) ? _1465 : (isnan(_1465) ? _1641 : min(_1465, _1641));
        float _1940 = isnan(_1937) ? _1939 : (isnan(_1939) ? _1937 : min(_1939, _1937));
        float _1944 = (_1940 * _1431) + _1420;
        float _1945 = (_1940 * _1434) + _1424;
        float _1946 = (_1940 * _1437) + _1428;
        float _1947 = _1940 * 9.9999997473787516355514526367188e-05;
        float _1949 = (-1.0) - _1947;
        float _1951 = _1947 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1946 > _1951) || ((_1946 < _1949) || ((_1945 > _1951) || ((_1945 < _1949) || ((_1944 < _1949) || (_1944 > _1951))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2091 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1946, cbModelParam._m0[9u].z, fma(_1945, cbModelParam._m0[9u].y, _1944 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1946, cbModelParam._m0[10u].z, fma(_1945, cbModelParam._m0[10u].y, _1944 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1946, cbModelParam._m0[11u].z, fma(_1945, cbModelParam._m0[11u].y, _1944 * cbModelParam._m0[11u].x))), _1371);
            frontier_phi_15_37_ladder = _2091.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2091.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2091.z * cbModelParam._m0[1u].y;
        }
        _1453 = frontier_phi_15_37_ladder_1;
        _1455 = frontier_phi_15_37_ladder;
        _1457 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1441 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_558, _559, _560), _1371);
        _1453 = _1441.x * cbModelParam._m0[1u].y;
        _1455 = _1441.y * cbModelParam._m0[1u].y;
        _1457 = _1441.z * cbModelParam._m0[1u].y;
    }
    float _1461 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _464);
    float _1462 = isnan(_1461) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1461 : min(cbModelParam._m0[25u].w, _1461));
    float _1555;
    float _1557;
    float _1559;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1519 = fma(_622, cbModelParam._m0[21u].z, fma(_618, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _614)) + cbModelParam._m0[21u].w;
        float _1523 = fma(_622, cbModelParam._m0[22u].z, fma(_618, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _614)) + cbModelParam._m0[22u].w;
        float _1527 = fma(_622, cbModelParam._m0[23u].z, fma(_618, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _614)) + cbModelParam._m0[23u].w;
        float _1530 = fma(_560, cbModelParam._m0[21u].z, fma(_559, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _558));
        float _1533 = fma(_560, cbModelParam._m0[22u].z, fma(_559, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _558));
        float _1536 = fma(_560, cbModelParam._m0[23u].z, fma(_559, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _558));
        float _1646;
        if (_1530 > 0.0)
        {
            _1646 = abs((1.0 - _1519) / _1530);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1530 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1519 + 1.0) / _1530);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1646 = frontier_phi_27_23_ladder;
        }
        float _1964;
        if (_1533 > 0.0)
        {
            _1964 = abs((1.0 - _1523) / _1533);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1533 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1523 + 1.0) / _1533);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1964 = frontier_phi_39_34_ladder;
        }
        float _2302;
        if (_1536 > 0.0)
        {
            _2302 = abs((1.0 - _1527) / _1536);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1536 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1527 + 1.0) / _1536);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2302 = frontier_phi_49_46_ladder;
        }
        float _2304 = isnan(_1964) ? _1646 : (isnan(_1646) ? _1964 : min(_1646, _1964));
        float _2305 = isnan(_2302) ? _2304 : (isnan(_2304) ? _2302 : min(_2304, _2302));
        float _2309 = (_2305 * _1530) + _1519;
        float _2310 = (_2305 * _1533) + _1523;
        float _2311 = (_2305 * _1536) + _1527;
        float _2312 = _2305 * 9.9999997473787516355514526367188e-05;
        float _2313 = (-1.0) - _2312;
        float _2315 = _2312 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2311 > _2315) || ((_2311 < _2313) || ((_2310 > _2315) || ((_2310 < _2313) || ((_2309 < _2313) || (_2309 > _2315))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2433 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2311, cbModelParam._m0[17u].z, fma(_2310, cbModelParam._m0[17u].y, _2309 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2311, cbModelParam._m0[18u].z, fma(_2310, cbModelParam._m0[18u].y, _2309 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2311, cbModelParam._m0[19u].z, fma(_2310, cbModelParam._m0[19u].y, _2309 * cbModelParam._m0[19u].x))), _1462);
            frontier_phi_24_49_ladder = _2433.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2433.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2433.x * cbModelParam._m0[1u].z;
        }
        _1555 = frontier_phi_24_49_ladder_2;
        _1557 = frontier_phi_24_49_ladder_1;
        _1559 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1539 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_558, _559, _560), _1462);
        _1555 = _1539.x * cbModelParam._m0[1u].z;
        _1557 = _1539.y * cbModelParam._m0[1u].z;
        _1559 = _1539.z * cbModelParam._m0[1u].z;
    }
    float _1572 = (((_585 * _535) + _586) * _550) * ((cbModelParam._m0[1u].w * (_1555 - _1453)) + _1453);
    float _1574 = (((_585 * _537) + _586) * _550) * ((cbModelParam._m0[1u].w * (_1557 - _1455)) + _1455);
    float _1576 = (((_585 * _538) + _586) * _550) * ((cbModelParam._m0[1u].w * (_1559 - _1457)) + _1457);
    float _1579 = fma(_1576, cbSceneParam._m0[89u].z, fma(_1574, cbSceneParam._m0[89u].y, _1572 * cbSceneParam._m0[89u].x));
    float _1582 = fma(_1576, cbSceneParam._m0[90u].z, fma(_1574, cbSceneParam._m0[90u].y, _1572 * cbSceneParam._m0[90u].x));
    float _1585 = fma(_1576, cbSceneParam._m0[91u].z, fma(_1574, cbSceneParam._m0[91u].y, _1572 * cbSceneParam._m0[91u].x));
    float _1620 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1624 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1628 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1632 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1633 = _1620 / _1632;
    float _1634 = _1624 / _1632;
    float _1635 = _1628 / _1632;
    float _1782;
    float _1783;
    float _1784;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1662 = ((uint(_1635 > cbSceneParam._m0[59u].y) + uint(_1635 > cbSceneParam._m0[59u].x)) + uint(_1635 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1663 = _1662 + 43u;
        uint _1671 = _1662 + 44u;
        uint _1679 = _1662 + 45u;
        uint _1687 = _1662 + 46u;
        float _1698 = fma(_1632, cbSceneParam._m0[_1663].w, fma(_1628, cbSceneParam._m0[_1663].z, fma(_1624, cbSceneParam._m0[_1663].y, _1620 * cbSceneParam._m0[_1663].x)));
        float _1702 = fma(_1632, cbSceneParam._m0[_1671].w, fma(_1628, cbSceneParam._m0[_1671].z, fma(_1624, cbSceneParam._m0[_1671].y, _1620 * cbSceneParam._m0[_1671].x)));
        float _1710 = fma(_1632, cbSceneParam._m0[_1687].w, fma(_1628, cbSceneParam._m0[_1687].z, fma(_1624, cbSceneParam._m0[_1687].y, _1620 * cbSceneParam._m0[_1687].x)));
        float _1715 = cbSceneParam._m0[33u].z * _1710;
        float _1717 = cbSceneParam._m0[33u].w * _1710;
        float _1720 = fma(_1632, cbSceneParam._m0[_1679].w, fma(_1628, cbSceneParam._m0[_1679].z, fma(_1624, cbSceneParam._m0[_1679].y, _1620 * cbSceneParam._m0[_1679].x))) / _1710;
        float _1768 = (cbSceneParam._m0[33u].x - sqrt(((_1634 * _1634) + (_1633 * _1633)) + (_1635 * _1635))) * cbSceneParam._m0[33u].y;
        float _4064 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1775 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1715 + _1698) / _1710, (_1717 + _1702) / _1710), _1720), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1717 + _1698) / _1710, (_1702 - _1715) / _1710), _1720), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1698 - _1715) / _1710, (_1702 - _1717) / _1710), _1720), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1698 - _1717) / _1710, (_1715 + _1702) / _1710), _1720), 0.0)).x), vec4(0.25)));
        _1782 = 1.0 - (_1775 * cbSceneParam._m0[34u].x);
        _1783 = 1.0 - (_1775 * cbSceneParam._m0[34u].y);
        _1784 = 1.0 - (_1775 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1782 = 1.0;
        _1783 = 1.0;
        _1784 = 1.0;
    }
    float _1848;
    float _1850;
    float _1852;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1836 = fma(_1632, cbSceneParam._m0[63u].w, fma(_1628, cbSceneParam._m0[63u].z, fma(_1624, cbSceneParam._m0[63u].y, _1620 * cbSceneParam._m0[63u].x)));
        float _1837 = fma(_1632, cbSceneParam._m0[60u].w, fma(_1628, cbSceneParam._m0[60u].z, fma(_1624, cbSceneParam._m0[60u].y, _1620 * cbSceneParam._m0[60u].x))) / _1836;
        float _1838 = fma(_1632, cbSceneParam._m0[61u].w, fma(_1628, cbSceneParam._m0[61u].z, fma(_1624, cbSceneParam._m0[61u].y, _1620 * cbSceneParam._m0[61u].x))) / _1836;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1837 >= cbSceneParam._m0[64u].x) && (_1838 >= cbSceneParam._m0[64u].y)) && (_1837 <= cbSceneParam._m0[64u].z)) && (_1838 <= cbSceneParam._m0[64u].w))
        {
            float _1977 = fma(_1632, cbSceneParam._m0[62u].w, fma(_1628, cbSceneParam._m0[62u].z, fma(_1624, cbSceneParam._m0[62u].y, _1620 * cbSceneParam._m0[62u].x))) / _1836;
            float _1981 = isnan(cbSceneParam._m0[41u].w) ? _1977 : (isnan(_1977) ? cbSceneParam._m0[41u].w : max(_1977, cbSceneParam._m0[41u].w));
            float _2024 = (cbSceneParam._m0[33u].x - sqrt(((_1634 * _1634) + (_1633 * _1633)) + (_1635 * _1635))) * cbSceneParam._m0[33u].y;
            float _4080 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
            float _2031 = (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1837, cbSceneParam._m0[33u].w + _1838), _1981), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1837, _1838 - cbSceneParam._m0[33u].z), _1981), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1837 - cbSceneParam._m0[33u].z, _1838 - cbSceneParam._m0[33u].w), _1981), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1837 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1838), _1981), 0.0)).x), vec4(0.25)));
            float _2035 = 1.0 - (_2031 * cbSceneParam._m0[34u].x);
            float _2036 = 1.0 - (_2031 * cbSceneParam._m0[34u].y);
            float _2037 = 1.0 - (_2031 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2036) ? _1783 : (isnan(_1783) ? _2036 : min(_1783, _2036));
            frontier_phi_36_35_ladder_1 = isnan(_2037) ? _1784 : (isnan(_1784) ? _2037 : min(_1784, _2037));
            frontier_phi_36_35_ladder_2 = isnan(_2035) ? _1782 : (isnan(_1782) ? _2035 : min(_1782, _2035));
        }
        else
        {
            frontier_phi_36_35_ladder = _1783;
            frontier_phi_36_35_ladder_1 = _1784;
            frontier_phi_36_35_ladder_2 = _1782;
        }
        _1848 = frontier_phi_36_35_ladder_2;
        _1850 = frontier_phi_36_35_ladder;
        _1852 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1848 = _1782;
        _1850 = _1783;
        _1852 = _1784;
    }
    uvec4 _1857 = floatBitsToUint(cbInstanceData._m0[_477 + 5u]);
    uint _1859 = _1857.x * 14u;
    uint _1860 = _1859 + 13u;
    float _1867 = _550 + (-1.0);
    float _1872 = (cbLight._m0[_1860].x * _1867) + 1.0;
    float _1873 = (cbLight._m0[_1860].y * _1867) + 1.0;
    float _1874 = (cbLight._m0[_1860].z * _1867) + 1.0;
    float _1875 = (cbLight._m0[_1860].w * _1867) + 1.0;
    uint _1876 = _1859 + 5u;
    float _1882 = isnan(1.0) ? _1873 : (isnan(_1873) ? 1.0 : min(_1873, 1.0));
    uint _1886 = _1859 + 4u;
    float _1896 = isnan(1.0) ? _1872 : (isnan(_1872) ? 1.0 : min(_1872, 1.0));
    uint _1900 = _1859 | 1u;
    float _1911 = dot(vec3(cbLight._m0[_1859].xyz), vec3(_328, _329, _330));
    float _1914 = dot(vec3(cbLight._m0[_1900].xyz), vec3(_328, _329, _330));
    float _4116 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _4127 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1919 = (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * 0.3183098733425140380859375;
    float _1921 = (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * 0.3183098733425140380859375;
    float _1928 = ((cbLight._m0[_1876].x * _1882) * _1921) + (((cbLight._m0[_1886].x * _1848) * _1896) * _1919);
    float _1929 = ((_1882 * cbLight._m0[_1876].y) * _1921) + (((cbLight._m0[_1886].y * _1850) * _1896) * _1919);
    float _1930 = ((_1882 * cbLight._m0[_1876].z) * _1921) + (((cbLight._m0[_1886].z * _1852) * _1896) * _1919);
    uvec4 _1934 = floatBitsToUint(cbLight._m0[_1859 + 12u]);
    bool _1936 = _1934.x == 0u;
    float _2038;
    float _2040;
    float _2042;
    if (_1936)
    {
        _2038 = _1928;
        _2040 = _1929;
        _2042 = _1930;
    }
    else
    {
        uint _2046 = _1859 + 6u;
        float _2062 = (dot(vec3(cbLight._m0[_1859 + 2u].xyz), vec3(_328, _329, _330)) * 0.5) + 0.5;
        float _2063 = _2062 * _2062;
        float _4138 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        float _2064 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _2065 = isnan(1.0) ? _1874 : (isnan(_1874) ? 1.0 : min(_1874, 1.0));
        _2038 = (((cbLight._m0[_2046].x * 0.3183098733425140380859375) * _2064) * _2065) + _1928;
        _2040 = (((cbLight._m0[_2046].y * 0.3183098733425140380859375) * _2064) * _2065) + _1929;
        _2042 = (((cbLight._m0[_2046].z * 0.3183098733425140380859375) * _2064) * _2065) + _1930;
    }
    bool _2045 = _1934.y == 0u;
    float _2100;
    float _2102;
    float _2104;
    if (_2045)
    {
        _2100 = _2038;
        _2102 = _2040;
        _2104 = _2042;
    }
    else
    {
        uint _2273 = _1859 + 7u;
        float _2289 = (dot(vec3(cbLight._m0[_1859 + 3u].xyz), vec3(_328, _329, _330)) * 0.5) + 0.5;
        float _2290 = _2289 * _2289;
        float _4154 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2291 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _2292 = isnan(1.0) ? _1875 : (isnan(_1875) ? 1.0 : min(_1875, 1.0));
        _2100 = (((cbLight._m0[_2273].x * 0.3183098733425140380859375) * _2291) * _2292) + _2038;
        _2102 = (((cbLight._m0[_2273].y * 0.3183098733425140380859375) * _2291) * _2292) + _2040;
        _2104 = (((cbLight._m0[_2273].z * 0.3183098733425140380859375) * _2291) * _2292) + _2042;
    }
    uint _2107 = _1859 + 8u;
    float _2120 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1859].w)) * _464) * 0.949999988079071044921875);
    float _2121 = _2120 * _2120;
    float _2122 = cbLight._m0[_1859].x + _411;
    float _2123 = cbLight._m0[_1859].y + _412;
    float _2124 = cbLight._m0[_1859].z + _413;
    float _2128 = inversesqrt(dot(vec3(_2122, _2123, _2124), vec3(_2122, _2123, _2124)));
    float _2129 = _2128 * _2122;
    float _2130 = _2128 * _2123;
    float _2131 = _2128 * _2124;
    float _2132 = dot(vec3(_328, _329, _330), vec3(cbLight._m0[_1859].xyz));
    float _4170 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2135 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _4181 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _2136 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _2137 = dot(vec3(_328, _329, _330), vec3(_2129, _2130, _2131));
    float _4192 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2140 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    float _2141 = dot(vec3(cbLight._m0[_1859].xyz), vec3(_2129, _2130, _2131));
    float _4203 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2145 = _2121 * _2121;
    float _2149 = ((_2140 * _2140) * (_2145 + (-1.0))) + 1.0;
    float _2157 = exp2(log2(1.0 - (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) * 5.0);
    float _2158 = 0.959999978542327880859375 - _532;
    float _2160 = 0.959999978542327880859375 - _533;
    float _2161 = 0.959999978542327880859375 - _534;
    float _2168 = 1.0 - _2121;
    float _2179 = (0.5 / (((_2136 * ((_2135 * _2168) + _2121)) + 9.9999999392252902907785028219223e-09) + (((_2136 * _2168) + _2121) * _2135))) * _2135;
    float _4214 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2181 = (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_2145 / ((_2149 * _2149) * 3.141590118408203125));
    uint _2195 = _1859 + 9u;
    float _2206 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1900].w)) * _464) * 0.949999988079071044921875);
    float _2207 = _2206 * _2206;
    float _2208 = cbLight._m0[_1900].x + _411;
    float _2209 = cbLight._m0[_1900].y + _412;
    float _2210 = cbLight._m0[_1900].z + _413;
    float _2214 = inversesqrt(dot(vec3(_2208, _2209, _2210), vec3(_2208, _2209, _2210)));
    float _2215 = _2214 * _2208;
    float _2216 = _2214 * _2209;
    float _2217 = _2214 * _2210;
    float _2218 = dot(vec3(_328, _329, _330), vec3(cbLight._m0[_1900].xyz));
    float _4225 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2221 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _2222 = dot(vec3(_328, _329, _330), vec3(_2215, _2216, _2217));
    float _4236 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2225 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _2226 = dot(vec3(cbLight._m0[_1900].xyz), vec3(_2215, _2216, _2217));
    float _4247 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2230 = _2207 * _2207;
    float _2234 = ((_2225 * _2225) * (_2230 + (-1.0))) + 1.0;
    float _2241 = exp2(log2(1.0 - (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0)))) * 5.0);
    float _2248 = 1.0 - _2207;
    float _2258 = (0.5 / (((_2136 * ((_2221 * _2248) + _2207)) + 9.9999999392252902907785028219223e-09) + (((_2136 * _2248) + _2207) * _2221))) * _2221;
    float _4258 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2260 = (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_2230 / ((_2234 * _2234) * 3.141590118408203125));
    float _2270 = (((((_2241 * _2158) + _535) * cbLight._m0[_2195].x) * _2260) * _1882) + ((((cbLight._m0[_2107].x * _1848) * ((_2157 * _2158) + _535)) * _2181) * _1896);
    float _2271 = (((((_2241 * _2160) + _537) * cbLight._m0[_2195].y) * _2260) * _1882) + ((((cbLight._m0[_2107].y * _1850) * ((_2157 * _2160) + _537)) * _2181) * _1896);
    float _2272 = (((((_2241 * _2161) + _538) * cbLight._m0[_2195].z) * _2260) * _1882) + ((((cbLight._m0[_2107].z * _1852) * ((_2157 * _2161) + _538)) * _2181) * _1896);
    float _2328;
    float _2330;
    float _2332;
    if (_1936)
    {
        _2328 = _2270;
        _2330 = _2271;
        _2332 = _2272;
    }
    else
    {
        uint _2334 = _1859 + 2u;
        uint _2338 = _1859 + 10u;
        float _2352 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2334].w)) * _464) * 0.949999988079071044921875);
        float _2353 = _2352 * _2352;
        float _2354 = cbLight._m0[_2334].x + _411;
        float _2355 = cbLight._m0[_2334].y + _412;
        float _2356 = cbLight._m0[_2334].z + _413;
        float _2360 = inversesqrt(dot(vec3(_2354, _2355, _2356), vec3(_2354, _2355, _2356)));
        float _2361 = _2360 * _2354;
        float _2362 = _2360 * _2355;
        float _2363 = _2360 * _2356;
        float _2364 = dot(vec3(_328, _329, _330), vec3(cbLight._m0[_2334].xyz));
        float _4269 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2367 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _2368 = dot(vec3(_328, _329, _330), vec3(_2361, _2362, _2363));
        float _4280 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2371 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _2372 = dot(vec3(cbLight._m0[_2334].xyz), vec3(_2361, _2362, _2363));
        float _4291 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2376 = _2353 * _2353;
        float _2380 = ((_2371 * _2371) * (_2376 + (-1.0))) + 1.0;
        float _2387 = exp2(log2(1.0 - (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0)))) * 5.0);
        float _2394 = 1.0 - _2353;
        float _2404 = (0.5 / (((_2136 * ((_2367 * _2394) + _2353)) + 9.9999999392252902907785028219223e-09) + (((_2136 * _2394) + _2353) * _2367))) * _2367;
        float _4302 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2406 = (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_2376 / ((_2380 * _2380) * 3.141590118408203125));
        float _2407 = isnan(1.0) ? _1874 : (isnan(_1874) ? 1.0 : min(_1874, 1.0));
        _2328 = (((((_2387 * _2158) + _535) * cbLight._m0[_2338].x) * _2406) * _2407) + _2270;
        _2330 = (((((_2387 * _2160) + _537) * cbLight._m0[_2338].y) * _2406) * _2407) + _2271;
        _2332 = (((((_2387 * _2161) + _538) * cbLight._m0[_2338].z) * _2406) * _2407) + _2272;
    }
    float _2438;
    float _2440;
    float _2442;
    if (_2045)
    {
        _2438 = _2328;
        _2440 = _2330;
        _2442 = _2332;
    }
    else
    {
        uint _2449 = _1859 + 3u;
        uint _2453 = _1859 + 11u;
        float _2467 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2449].w)) * _464) * 0.949999988079071044921875);
        float _2468 = _2467 * _2467;
        float _2469 = cbLight._m0[_2449].x + _411;
        float _2470 = cbLight._m0[_2449].y + _412;
        float _2471 = cbLight._m0[_2449].z + _413;
        float _2475 = inversesqrt(dot(vec3(_2469, _2470, _2471), vec3(_2469, _2470, _2471)));
        float _2476 = _2475 * _2469;
        float _2477 = _2475 * _2470;
        float _2478 = _2475 * _2471;
        float _2479 = dot(vec3(_328, _329, _330), vec3(cbLight._m0[_2449].xyz));
        float _4318 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2482 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _2483 = dot(vec3(_328, _329, _330), vec3(_2476, _2477, _2478));
        float _4329 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2486 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _2487 = dot(vec3(cbLight._m0[_2449].xyz), vec3(_2476, _2477, _2478));
        float _4340 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2491 = _2468 * _2468;
        float _2495 = ((_2486 * _2486) * (_2491 + (-1.0))) + 1.0;
        float _2502 = exp2(log2(1.0 - (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0)))) * 5.0);
        float _2509 = 1.0 - _2468;
        float _2519 = (0.5 / (((_2136 * ((_2482 * _2509) + _2468)) + 9.9999999392252902907785028219223e-09) + (((_2136 * _2509) + _2468) * _2482))) * _2482;
        float _4351 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2521 = (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (_2491 / ((_2495 * _2495) * 3.141590118408203125));
        float _2522 = isnan(1.0) ? _1875 : (isnan(_1875) ? 1.0 : min(_1875, 1.0));
        _2438 = (((((_2502 * _2158) + _535) * cbLight._m0[_2453].x) * _2521) * _2522) + _2328;
        _2440 = (((((_2502 * _2160) + _537) * cbLight._m0[_2453].y) * _2521) * _2522) + _2330;
        _2442 = (((((_2502 * _2161) + _538) * cbLight._m0[_2453].z) * _2521) * _2522) + _2332;
    }
    float _2587;
    float _2589;
    float _2591;
    float _2593;
    float _2595;
    float _2597;
    if (_1857.y == 0u)
    {
        uvec4 _2543 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2544 = _2543.x;
        uint _2555 = uint((float(_2543.y) * floor(float(uint(cbSceneParam._m0[85u].y * _420) / _2544))) + floor(float(uint(cbSceneParam._m0[85u].x * _419) / _2544)));
        float _2565 = (log2(_1635 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2566 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        uint _2569 = uint(isnan(14.0) ? _2566 : (isnan(_2566) ? 14.0 : min(_2566, 14.0)));
        uvec4 _2574 = texelFetch(g_lightClusterGridBuffer, int(((_2569 << 2u) + (_2555 << 6u)) >> 2u));
        uint _2575 = _2574.x;
        uint _2576 = _2543.z;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        float _2695;
        if (((((1u << ((_2576 >> 4u) & 15u)) + 4294967295u) & _2575) == 0u) || ((_2576 & 240u) == 0u))
        {
            _2685 = 0.0;
            _2687 = 0.0;
            _2689 = 0.0;
            _2691 = 0.0;
            _2693 = 0.0;
            _2695 = 0.0;
        }
        else
        {
            float _2686;
            float _2688;
            float _2690;
            float _2692;
            float _2694;
            float _2696;
            float _2838 = 0.0;
            float _2839 = 0.0;
            float _2840 = 0.0;
            float _2841 = 0.0;
            float _2842 = 0.0;
            float _2843 = 0.0;
            uint _2844 = 0u;
            uint _2853;
            bool _2854;
            for (;;)
            {
                _2853 = texelFetch(g_lightClassification, int((((_2569 << 5u) + (_2555 << 9u)) + (_2844 << 2u)) >> 2u)).x;
                _2854 = _2853 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2854)
                {
                    frontier_phi_68_pred = _2843;
                    frontier_phi_68_pred_1 = _2842;
                    frontier_phi_68_pred_2 = _2841;
                    frontier_phi_68_pred_3 = _2839;
                    frontier_phi_68_pred_4 = _2838;
                    frontier_phi_68_pred_5 = _2840;
                }
                else
                {
                    float _2962;
                    float _2963;
                    float _2964;
                    float _2965;
                    float _2966;
                    float _2967;
                    uint _2968;
                    _2962 = _2838;
                    _2963 = _2839;
                    _2964 = _2840;
                    _2965 = _2841;
                    _2966 = _2842;
                    _2967 = _2843;
                    _2968 = _2853;
                    float _2894;
                    float _2895;
                    float _2896;
                    float _2897;
                    float _2898;
                    float _2899;
                    for (;;)
                    {
                        uint _2972 = uint(findLSB(_2968)) + (_2844 << 5u);
                        uint _2969 = (_2968 + 4294967295u) & _2968;
                        uint _2974 = _2972 * 48u;
                        vec4 _2988 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2974)).x, texelFetch(g_PointLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2974 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2974 + 3u)).x));
                        uint _2994 = (_2972 * 48u) + 4u;
                        vec4 _3007 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2994)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 3u)).x));
                        uint _3013 = (_2972 * 48u) + 8u;
                        vec3 _3024 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3013)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 2u)).x));
                        float _3028 = _2988.x - _1633;
                        float _3029 = _2988.y - _1634;
                        float _3030 = _2988.z - _1635;
                        float _3031 = dot(vec3(_3028, _3029, _3030), vec3(_3028, _3029, _3030));
                        float _3034 = inversesqrt(_3031);
                        float _3035 = _3034 * _3028;
                        float _3036 = _3034 * _3029;
                        float _3037 = _3034 * _3030;
                        float _3038 = dot(vec3(_445, _448, _451), vec3(_3035, _3036, _3037));
                        float _3043 = 1.0 - (_3031 * _2988.w);
                        float _4377 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                        float _3044 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                        float _3045 = sqrt(_3031) * _3007.w;
                        float _3048 = 1.39999997615814208984375 / (_3045 + 1.39999997615814208984375);
                        float _3049 = _3048 * _3048;
                        float _3052 = ((1.0 - _3049) * _3038) + _3049;
                        float _3055 = _3045 * _3045;
                        float _3059 = ((isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0))) * _3044) / ((_3055 * 0.699999988079071044921875) + 1.0);
                        float _3063 = (-0.0) - _1633;
                        float _3064 = (-0.0) - _1634;
                        float _3065 = (-0.0) - _1635;
                        float _3069 = inversesqrt(dot(vec3(_3063, _3064, _3065), vec3(_3063, _3064, _3065)));
                        float _3070 = _3069 * _3063;
                        float _3071 = _3069 * _3064;
                        float _3072 = _3069 * _3065;
                        float _3079 = exp2(log2(1.0 / ((_3055 * 3.5) + 5.0)) * 0.25);
                        float _3080 = 1.0 - _566;
                        float _3087 = sqrt(1.0 - ((1.0 - (_3080 * _3080)) * (1.0 - (_3079 * _3079))));
                        float _3088 = _3087 * _3087;
                        float _3089 = _3088 * _3088;
                        float _3090 = _3070 + _3035;
                        float _3091 = _3071 + _3036;
                        float _3092 = _3072 + _3037;
                        float _3096 = inversesqrt(dot(vec3(_3090, _3091, _3092), vec3(_3090, _3091, _3092)));
                        float _3100 = dot(vec3(_445, _448, _451), vec3(_3070, _3071, _3072));
                        float _4393 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                        float _3103 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
                        float _3104 = dot(vec3(_445, _448, _451), vec3(_3096 * _3090, _3096 * _3091, _3096 * _3092));
                        float _4404 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                        float _3107 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                        float _3111 = ((_3107 * _3107) * (_3089 + (-1.0))) + 1.0;
                        float _3112 = _3048 * _3088;
                        float _3113 = _3112 * _3112;
                        float _3116 = ((1.0 - _3113) * _3038) + _3113;
                        float _4415 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                        float _3117 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                        float _3118 = 1.0 - _3088;
                        float _3128 = (0.5 / (((_3117 * ((_3103 * _3118) + _3088)) + 9.9999999392252902907785028219223e-09) + (((_3117 * _3118) + _3088) * _3103))) * _3117;
                        float _4426 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                        float _3139 = (((_3089 * 3.1415927410125732421875) * (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0)))) / ((_3111 * _3111) * ((_3055 * 2.1991131305694580078125) + 3.141590118408203125))) * _3044;
                        _2897 = (_3059 * _3007.x) + _2965;
                        _2898 = (_3059 * _3007.y) + _2966;
                        _2899 = (_3059 * _3007.z) + _2967;
                        _2894 = (_3139 * _3024.x) + _2962;
                        _2895 = (_3139 * _3024.y) + _2963;
                        _2896 = (_3139 * _3024.z) + _2964;
                        if (_2969 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2962 = _2894;
                            _2963 = _2895;
                            _2964 = _2896;
                            _2965 = _2897;
                            _2966 = _2898;
                            _2967 = _2899;
                            _2968 = _2969;
                        }
                    }
                    frontier_phi_68_pred = _2899;
                    frontier_phi_68_pred_1 = _2898;
                    frontier_phi_68_pred_2 = _2897;
                    frontier_phi_68_pred_3 = _2895;
                    frontier_phi_68_pred_4 = _2894;
                    frontier_phi_68_pred_5 = _2896;
                }
                _2696 = frontier_phi_68_pred;
                _2694 = frontier_phi_68_pred_1;
                _2692 = frontier_phi_68_pred_2;
                _2688 = frontier_phi_68_pred_3;
                _2686 = frontier_phi_68_pred_4;
                _2690 = frontier_phi_68_pred_5;
                uint _2845 = _2844 + 1u;
                if (_2845 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2838 = _2686;
                    _2839 = _2688;
                    _2840 = _2690;
                    _2841 = _2692;
                    _2842 = _2694;
                    _2843 = _2696;
                    _2844 = _2845;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2685 = _2686;
            _2687 = _2688;
            _2689 = _2690;
            _2691 = _2692;
            _2693 = _2694;
            _2695 = _2696;
        }
        uvec4 _2699 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2700 = _2699.z;
        uint _2702 = (_2700 >> 8u) & 15u;
        float _2806;
        float _2808;
        float _2810;
        float _2812;
        float _2814;
        float _2816;
        if (((4294967295u << _2702) & _2575) == 0u)
        {
            _2806 = _2685;
            _2808 = _2687;
            _2810 = _2689;
            _2812 = _2691;
            _2814 = _2693;
            _2816 = _2695;
        }
        else
        {
            float _2831 = inversesqrt(dot(vec3(_1633, _1634, _1635), vec3(_1633, _1634, _1635)));
            float _2832 = _2831 * _1633;
            float _2833 = _2831 * _1634;
            float _2834 = _2831 * _1635;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2702 < ((_2700 >> 12u) & 15u))
            {
                float _2807;
                float _2809;
                float _2811;
                float _2813;
                float _2815;
                float _2817;
                float _2945 = _2685;
                float _2946 = _2687;
                float _2947 = _2689;
                float _2948 = _2691;
                float _2949 = _2693;
                float _2950 = _2695;
                uint _2951 = _2702;
                uint _2960;
                bool _2961;
                for (;;)
                {
                    _2960 = texelFetch(g_lightClassification, int((((_2569 << 5u) + (_2555 << 9u)) + (_2951 << 2u)) >> 2u)).x;
                    _2961 = _2960 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2961)
                    {
                        frontier_phi_74_pred = _2947;
                        frontier_phi_74_pred_1 = _2946;
                        frontier_phi_74_pred_2 = _2945;
                        frontier_phi_74_pred_3 = _2950;
                        frontier_phi_74_pred_4 = _2949;
                        frontier_phi_74_pred_5 = _2948;
                    }
                    else
                    {
                        float _3144;
                        float _3145;
                        float _3146;
                        float _3147;
                        float _3148;
                        float _3149;
                        float _3440;
                        float _3441;
                        float _3442;
                        float _3443;
                        float _3444;
                        float _3445;
                        float _3157 = _2945;
                        float _3158 = _2946;
                        float _3159 = _2947;
                        float _3160 = _2948;
                        float _3161 = _2949;
                        float _3162 = _2950;
                        uint _3163 = _2960;
                        uint _3164;
                        vec4 _3189;
                        float _3190;
                        vec4 _3205;
                        vec3 _3217;
                        vec4 _3233;
                        vec4 _3249;
                        float _3296;
                        bool _3297;
                        for (;;)
                        {
                            uint _3174 = ((_2951 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3163));
                            _3164 = (_3163 + 4294967295u) & _3163;
                            uint _3176 = _3174 * 40u;
                            _3189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 3u)).x));
                            _3190 = _3189.w;
                            uint _3192 = (_3174 * 40u) + 4u;
                            _3205 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3192)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 3u)).x));
                            uint _3207 = (_3174 * 40u) + 8u;
                            _3217 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3207)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 2u)).x));
                            uint _3220 = (_3174 * 40u) + 16u;
                            _3233 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3220)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 3u)).x));
                            uint _3236 = (_3174 * 40u) + 20u;
                            _3249 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3236)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 3u)).x));
                            uint _3252 = (_3174 * 40u) + 24u;
                            vec4 _3265 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3252)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 3u)).x));
                            uint _3271 = (_3174 * 40u) + 28u;
                            vec4 _3284 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 3u)).x));
                            _3296 = fma(_1635, _3284.z, fma(_1634, _3284.y, _3284.x * _1633)) + _3284.w;
                            _3297 = !((fma(_1635, _3265.z, fma(_1634, _3265.y, _3265.x * _1633)) + _3265.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3297)
                            {
                                float _3324 = _3189.x - _1633;
                                float _3325 = _3189.y - _1634;
                                float _3326 = _3189.z - _1635;
                                float _3327 = dot(vec3(_3324, _3325, _3326), vec3(_3324, _3325, _3326));
                                float _3330 = inversesqrt(_3327);
                                float _3331 = _3330 * _3324;
                                float _3332 = _3330 * _3325;
                                float _3333 = _3330 * _3326;
                                float _3337 = 1.0 - (_3327 / (_3190 * _3190));
                                float _4437 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                                float _3338 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                                float _3342 = sqrt(_3327) * _3205.w;
                                float _3344 = 1.39999997615814208984375 / (_3342 + 1.39999997615814208984375);
                                float _3345 = _3344 * _3344;
                                float _3348 = ((1.0 - _3345) * dot(vec3(_3331, _3332, _3333), vec3(_445, _448, _451))) + _3345;
                                float _3351 = _3342 * _3342;
                                float _3355 = (fma(_1635, _3233.z, fma(_1634, _3233.y, _3233.x * _1633)) + _3233.w) / _3296;
                                float _3356 = (fma(_1635, _3249.z, fma(_1634, _3249.y, _3249.x * _1633)) + _3249.w) / _3296;
                                float _3360 = 1.0 - dot(vec2(_3355, _3356), vec2(_3355, _3356));
                                float _4453 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                                float _3361 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                                float _3362 = _3361 * (((isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0))) * _3338) / ((_3351 * 0.699999988079071044921875) + 1.0));
                                float _3374 = exp2(log2(1.0 / ((_3351 * 3.5) + 5.0)) * 0.25);
                                float _3375 = 1.0 - _566;
                                float _3382 = sqrt(1.0 - ((1.0 - (_3375 * _3375)) * (1.0 - (_3374 * _3374))));
                                float _3383 = _3382 * _3382;
                                float _3384 = _3383 * _3383;
                                float _3385 = _3331 - _2832;
                                float _3386 = _3332 - _2833;
                                float _3387 = _3333 - _2834;
                                float _3391 = inversesqrt(dot(vec3(_3385, _3386, _3387), vec3(_3385, _3386, _3387)));
                                float _3395 = dot(vec3(_445, _448, _451), vec3((-0.0) - _2832, (-0.0) - _2833, (-0.0) - _2834));
                                float _4464 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                                float _3398 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                                float _3399 = dot(vec3(_445, _448, _451), vec3(_3391 * _3385, _3391 * _3386, _3391 * _3387));
                                float _4475 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                                float _3402 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                                float _3406 = ((_3402 * _3402) * (_3384 + (-1.0))) + 1.0;
                                float _3407 = _3344 * _3383;
                                float _3408 = _3407 * _3407;
                                float _3414 = ((1.0 - _3408) * dot(vec3(_445, _448, _451), vec3(_3331, _3332, _3333))) + _3408;
                                float _4486 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                                float _3415 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                                float _3416 = 1.0 - _3383;
                                float _3426 = (0.5 / (((_3415 * ((_3398 * _3416) + _3383)) + 9.9999999392252902907785028219223e-09) + (((_3415 * _3416) + _3383) * _3398))) * _3415;
                                float _4497 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                                float _3436 = (_3361 * _3338) * (((_3384 * 3.1415927410125732421875) * (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0)))) / ((_3406 * _3406) * ((_3351 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3436 * _3217.z;
                                frontier_phi_80_pred_1 = _3436 * _3217.y;
                                frontier_phi_80_pred_2 = _3436 * _3217.x;
                                frontier_phi_80_pred_3 = _3362 * _3205.z;
                                frontier_phi_80_pred_4 = _3362 * _3205.y;
                                frontier_phi_80_pred_5 = _3362 * _3205.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3442 = frontier_phi_80_pred;
                            _3441 = frontier_phi_80_pred_1;
                            _3440 = frontier_phi_80_pred_2;
                            _3445 = frontier_phi_80_pred_3;
                            _3444 = frontier_phi_80_pred_4;
                            _3443 = frontier_phi_80_pred_5;
                            _3147 = _3443 + _3160;
                            _3148 = _3444 + _3161;
                            _3149 = _3445 + _3162;
                            _3144 = _3440 + _3157;
                            _3145 = _3441 + _3158;
                            _3146 = _3442 + _3159;
                            if (_3164 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3157 = _3144;
                                _3158 = _3145;
                                _3159 = _3146;
                                _3160 = _3147;
                                _3161 = _3148;
                                _3162 = _3149;
                                _3163 = _3164;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3146;
                        frontier_phi_74_pred_1 = _3145;
                        frontier_phi_74_pred_2 = _3144;
                        frontier_phi_74_pred_3 = _3149;
                        frontier_phi_74_pred_4 = _3148;
                        frontier_phi_74_pred_5 = _3147;
                    }
                    _2811 = frontier_phi_74_pred;
                    _2809 = frontier_phi_74_pred_1;
                    _2807 = frontier_phi_74_pred_2;
                    _2817 = frontier_phi_74_pred_3;
                    _2815 = frontier_phi_74_pred_4;
                    _2813 = frontier_phi_74_pred_5;
                    uint _2952 = _2951 + 1u;
                    if (_2952 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2945 = _2807;
                        _2946 = _2809;
                        _2947 = _2811;
                        _2948 = _2813;
                        _2949 = _2815;
                        _2950 = _2817;
                        _2951 = _2952;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2815;
                frontier_phi_62_63_ladder_1 = _2813;
                frontier_phi_62_63_ladder_2 = _2811;
                frontier_phi_62_63_ladder_3 = _2817;
                frontier_phi_62_63_ladder_4 = _2809;
                frontier_phi_62_63_ladder_5 = _2807;
            }
            else
            {
                frontier_phi_62_63_ladder = _2693;
                frontier_phi_62_63_ladder_1 = _2691;
                frontier_phi_62_63_ladder_2 = _2689;
                frontier_phi_62_63_ladder_3 = _2695;
                frontier_phi_62_63_ladder_4 = _2687;
                frontier_phi_62_63_ladder_5 = _2685;
            }
            _2806 = frontier_phi_62_63_ladder_5;
            _2808 = frontier_phi_62_63_ladder_4;
            _2810 = frontier_phi_62_63_ladder_2;
            _2812 = frontier_phi_62_63_ladder_1;
            _2814 = frontier_phi_62_63_ladder;
            _2816 = frontier_phi_62_63_ladder_3;
        }
        float _2821 = isnan(1.0) ? _550 : (isnan(_550) ? 1.0 : min(_550, 1.0));
        _2587 = (_2821 * _2812) + _2100;
        _2589 = (_2821 * _2814) + _2102;
        _2591 = (_2821 * _2816) + _2104;
        _2593 = ((_2806 * _535) * _2821) + _2438;
        _2595 = ((_2808 * _537) * _2821) + _2440;
        _2597 = ((_2810 * _538) * _2821) + _2442;
    }
    else
    {
        _2587 = _2100;
        _2589 = _2102;
        _2591 = _2104;
        _2593 = _2438;
        _2595 = _2440;
        _2597 = _2442;
    }
    uint _2603 = _479 + uint(cbMatDynParam._m0[0u].w);
    float _2609 = (_307.x * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2603].x;
    float _2610 = (_307.y * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2603].y;
    float _2611 = (_307.z * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2603].z;
    float _4513 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _4524 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _4535 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _4546 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _2629 = (((isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_2587 + ((isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0))) * _550))) + ((_2593 + ((isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))) * _1360)) * cbPerFrame._m0[3u].x)) + _2609;
    float _2631 = (_2610 + ((_2595 + ((isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))) * _1360)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_2589 + ((isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0))) * _550)));
    float _2633 = (_2611 + ((_2597 + ((isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))) * _1360)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_2591 + ((isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0))) * _550)));
    float _4572 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2646 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
    float _2651 = cbInstanceData._m0[_477 + 6u].w * (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0)));
    float _2656 = _419 / cbSceneParam._m0[86u].x;
    float _2657 = _420 / cbSceneParam._m0[86u].y;
    vec4 _2671 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2656, _2657, (log2((isnan(cbSceneParam._m0[77u].w) ? _352 : (isnan(_352) ? cbSceneParam._m0[77u].w : min(_352, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2673 = _2671.x;
    float _2674 = _2671.y;
    float _2675 = _2671.z;
    float _2676 = _2671.w;
    float _2747;
    float _2749;
    float _2751;
    float _2753;
    if (_352 > cbSceneParam._m0[78u].w)
    {
        float _2710 = isnan(_352) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _352 : min(cbSceneParam._m0[80u].w, _352));
        float _2711 = _2710 / _352;
        float _2722 = _2711 * _404;
        float _2723 = _405 * _2711;
        float _2724 = (-0.0) - _2723;
        float _2725 = _2711 * _406;
        float _2727 = (cbSceneParam._m0[77u].w * _2724) / _2710;
        float _2728 = _2727 + cbSceneParam._m0[79u].w;
        float _2729 = cbSceneParam._m0[79u].w - _2723;
        float _2735 = sqrt(((_2722 * _2722) + (_2723 * _2723)) + (_2725 * _2725));
        float _2738 = (1.0 - (cbSceneParam._m0[77u].w / _2710)) * _2735;
        float _2743 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2745 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2907;
        if (abs((_2724 - _2727) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2907 = ((((_2728 > 0.0) ? exp2(_2743 * _2728) : (2.0 - exp2(_2745 * _2728))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2738;
        }
        else
        {
            float _2867 = 1.0 / cbSceneParam._m0[80u].x;
            float _2868 = isnan(_2729) ? _2728 : (isnan(_2728) ? _2729 : max(_2728, _2729));
            float _2869 = isnan(_2729) ? _2728 : (isnan(_2728) ? _2729 : min(_2728, _2729));
            float _2878 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : min(_2868, 0.0));
            float _2879 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : min(_2869, 0.0));
            _2907 = ((abs(_2735 / _2724) * cbSceneParam._m0[80u].y) * ((((_2878 - _2879) * 2.0) - ((exp2(_2743 * (isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0)))) - exp2(_2743 * (isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0))))) * _2867)) - ((exp2(_2745 * _2878) - exp2(_2745 * _2879)) * _2867))) + (_2738 * cbSceneParam._m0[80u].z);
        }
        vec4 _2909 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2656, _2657, 1.0), 0.0);
        float _2918 = exp2((_2907 * (-1.44269502162933349609375)) * (1.0 - _2909.w));
        float _2919 = log2(_2918);
        float _2935 = log2(_2676);
        _2747 = (exp2(_2935 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2919 * cbSceneParam._m0[78u].x)) * _2909.x) / cbSceneParam._m0[78u].x)) + _2673;
        _2749 = (exp2(_2935 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2919 * cbSceneParam._m0[78u].y)) * _2909.y) / cbSceneParam._m0[78u].y)) + _2674;
        _2751 = (exp2(_2935 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2919 * cbSceneParam._m0[78u].z)) * _2909.z) / cbSceneParam._m0[78u].z)) + _2675;
        _2753 = _2918 * _2676;
    }
    else
    {
        _2747 = _2673;
        _2749 = _2674;
        _2751 = _2675;
        _2753 = _2676;
    }
    float _2765 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2766 = _2765 == 3.0;
    float _2767 = log2(_2753);
    float _2771 = exp2(_2767 * cbSceneParam._m0[78u].x);
    float _2772 = exp2(_2767 * cbSceneParam._m0[78u].y);
    float _2773 = exp2(_2767 * cbSceneParam._m0[78u].z);
    float _2774 = _2771 * (isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0)));
    float _2775 = _2772 * (isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0)));
    float _2776 = _2773 * (isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0)));
    float _2785 = (_2765 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2785 * (_2766 ? _2774 : (_2774 + (cbSceneParam._m0[72u].w * _2747)));
    SV_Target.y = _2785 * (_2766 ? _2775 : (_2775 + (cbSceneParam._m0[72u].w * _2749)));
    SV_Target.z = _2785 * (_2766 ? _2776 : (_2776 + (cbSceneParam._m0[72u].w * _2751)));
    SV_Target.w = _2651;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2609) * _2646) * _2771) * _2785;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2610) * _2646) * _2772) * _2785;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2611) * _2646) * _2773) * _2785;
    SV_Target_1.w = _2651;
}


