#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_POM_M1_AO_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_POM_M1_AO_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_POM_M1_AO_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _867;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _188 = _187 * _180;
    float _189 = _187 * _181;
    float _190 = _187 * _182;
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _202 = _201 * TANGENT.x;
    float _203 = _201 * TANGENT.y;
    float _204 = _201 * TANGENT.z;
    float _209;
    float _210;
    float _211;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _209 = (-0.0) - _195;
        _210 = (-0.0) - _196;
        _211 = (-0.0) - _197;
    }
    else
    {
        _209 = _195;
        _210 = _196;
        _211 = _197;
    }
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    float _276 = dot(vec3(_265, _266, _267), vec3(_188, _189, _190));
    float _279 = dot(vec3(_265, _266, _267), vec3(_202, _203, _204));
    float _282 = dot(vec3(_265, _266, _267), vec3(_209, _210, _211));
    float _288 = inversesqrt(dot(vec3(_276, _279, _282), vec3(_276, _279, _282)));
    vec4 _301 = texture(sampler2D(M_AMSN_POM_M1_AO_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _312 = dot(vec4(_301), vec4(1.0, 0.0, 0.0, 0.0)) + (-0.5);
    float _320 = (((cbMtdParam._m0[10u].y * _276) * _288) * _312) + TEXCOORD.x;
    float _321 = (((_279 * cbMtdParam._m0[10u].y) * _288) * _312) + TEXCOORD.y;
    vec4 _333 = texture(sampler2D(M_AMSN_POM_M1_AO_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_320 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_321 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _338 = _333.x * cbMtdParam._m0[9u].x;
    float _339 = _333.y * cbMtdParam._m0[9u].y;
    float _340 = _333.z * cbMtdParam._m0[9u].z;
    vec4 _352 = texture(sampler2D(M_AMSN_POM_M1_AO_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _320) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _321) + cbTextureTilingScale._m0[1u].w));
    float _356 = _352.z;
    float _361 = (_352.x * 2.0) + (-1.0);
    float _363 = (_352.y * 2.0) + (-1.0);
    float _364 = dot(vec2(_361, _363), vec2(_361, _363));
    float _3183 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _369 = sqrt(1.0 - (isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0))));
    float _372 = fma(_369, _209, fma(_363, _202, _361 * _188));
    float _375 = fma(_369, _210, fma(_363, _203, _361 * _189));
    float _378 = fma(_369, _211, fma(_363, _204, _361 * _190));
    float _382 = inversesqrt(dot(vec3(_372, _375, _378), vec3(_372, _375, _378)));
    float _383 = _382 * _372;
    float _384 = _382 * _375;
    float _385 = _382 * _378;
    float _387 = cbMtdParam._m0[10u].x + _352.w;
    float _391 = inversesqrt(dot(vec3(_383, _384, _385), vec3(_383, _384, _385)));
    float _392 = _391 * _383;
    float _393 = _391 * _384;
    float _394 = _391 * _385;
    float _3194 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _395 = isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0));
    float _3205 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _3216 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _3227 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _3238 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _415 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _419 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _420 = _265 * _419;
    float _421 = _266 * _419;
    float _422 = _267 * _419;
    float _428 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _429 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _450 = fma(_394, cbSceneParam._m0[5u].z, fma(_393, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _392));
    float _453 = fma(_394, cbSceneParam._m0[6u].z, fma(_393, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _392));
    float _456 = fma(_394, cbSceneParam._m0[7u].z, fma(_393, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _392));
    uint _469 = uint(roundEven(NORMAL.w)) * 13u;
    uint _472 = (_469 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _478 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0)))) * cbInstanceData._m0[_472].x;
    float _479 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0)))) * cbInstanceData._m0[_472].y;
    float _480 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0)))) * cbInstanceData._m0[_472].z;
    float _3249 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _481 = isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0));
    float _3260 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _482 = isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0));
    float _3271 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _483 = isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0));
    vec4 _492 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _428, cbSceneParam._m0[86u].y * _429));
    float _496 = ((isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0))) * TEXCOORD.z) * _492.x;
    float _497 = dot(vec3(_392, _393, _394), vec3(_420, _421, _422));
    float _500 = _497 * 2.0;
    float _504 = (_500 * _392) - _420;
    float _505 = (_500 * _393) - _421;
    float _506 = (_500 * _394) - _422;
    float _510 = abs(dot(vec3(_420, _421, _422), vec3(_392, _393, _394)));
    float _3282 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _512 = sqrt(_395);
    float _525 = exp2((_512 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_512 * 3.0));
    float _557 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _561 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _565 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _866;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _592 = fma(_565, cbModelParam._m0[26u].z, fma(_561, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _557));
        float _596 = fma(_565, cbModelParam._m0[27u].z, fma(_561, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _557));
        float _600 = fma(_565, cbModelParam._m0[28u].z, fma(_561, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _557));
        float _624 = _557 + _392;
        float _625 = _561 + _393;
        float _626 = _565 + _394;
        float _636 = fma(_626, cbModelParam._m0[26u].z, fma(_625, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _624)) - _592;
        float _637 = fma(_626, cbModelParam._m0[27u].z, fma(_625, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _624)) - _596;
        float _638 = fma(_626, cbModelParam._m0[28u].z, fma(_625, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _624)) - _600;
        float _642 = inversesqrt(dot(vec3(_636, _637, _638), vec3(_636, _637, _638)));
        float _655 = ((_642 * _636) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_592 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _656 = ((_642 * _637) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_596 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _657 = ((_642 * _638) / cbModelParam._m0[34u].z) + ((((((_600 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _660 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_655, _656, _657), 0.0);
        vec4 _667 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_655, _656, _657), 0.0);
        vec4 _674 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_655, _656, _657), 0.0);
        vec4 _681 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_655, _656, _657), 0.0);
        float _694 = exp2((_660.w + (-0.5)) * 20.0) * 2.0;
        float _695 = _694 * (_660.x + (-0.5));
        float _696 = _694 * (_660.y + (-0.5));
        float _697 = _694 * (_660.z + (-0.5));
        float _704 = exp2((_667.w + (-0.5)) * 20.0) * 2.0;
        float _705 = _704 * (_667.x + (-0.5));
        float _706 = _704 * (_667.y + (-0.5));
        float _707 = _704 * (_667.z + (-0.5));
        float _714 = exp2((_674.w + (-0.5)) * 20.0) * 2.0;
        float _715 = _714 * (_674.x + (-0.5));
        float _716 = _714 * (_674.y + (-0.5));
        float _717 = _714 * (_674.z + (-0.5));
        float _724 = exp2((_681.w + (-0.5)) * 20.0) * 2.0;
        float _725 = _724 * (_681.x + (-0.5));
        float _726 = _724 * (_681.y + (-0.5));
        float _727 = _724 * (_681.z + (-0.5));
        float _728 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _729 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _730 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _731 = _695 * 0.5;
        float _732 = _705 * 0.5;
        float _733 = _715 * 0.5;
        float _734 = dot(vec3(_731, _732, _733), vec3(_731, _732, _733));
        float _739 = (_734 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_734);
        float _748 = (dot(vec3(_392, _393, _394), vec3(_739 * _731, _739 * _732, _739 * _733)) + 1.0) * 0.5;
        float _3308 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _758 = sqrt(((_732 * _732) + (_731 * _731)) + (_733 * _733)) / (_728 + 9.9999997473787516355514526367188e-06);
        float _3319 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _759 = isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0));
        float _760 = _759 * 2.0;
        float _764 = (1.0 - _759) / (_759 + 1.0);
        float _3330 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _765 = isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0));
        float _774 = ((((1.0 - _765) * (_760 + 2.0)) * exp2(log2(isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0))) * (_760 + 1.0))) + _765) * _728;
        float _775 = _696 * 0.5;
        float _776 = _706 * 0.5;
        float _777 = _716 * 0.5;
        float _778 = dot(vec3(_775, _776, _777), vec3(_775, _776, _777));
        float _783 = (_778 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_778);
        float _791 = (dot(vec3(_392, _393, _394), vec3(_783 * _775, _783 * _776, _783 * _777)) + 1.0) * 0.5;
        float _3341 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _800 = sqrt(((_776 * _776) + (_775 * _775)) + (_777 * _777)) / (_729 + 9.9999997473787516355514526367188e-06);
        float _3352 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _801 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
        float _802 = _801 * 2.0;
        float _806 = (1.0 - _801) / (_801 + 1.0);
        float _3363 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _807 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
        float _816 = ((((1.0 - _807) * (_802 + 2.0)) * exp2(log2(isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0))) * (_802 + 1.0))) + _807) * _729;
        float _817 = _697 * 0.5;
        float _818 = _707 * 0.5;
        float _819 = _717 * 0.5;
        float _820 = dot(vec3(_817, _818, _819), vec3(_817, _818, _819));
        float _825 = (_820 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_820);
        float _833 = (dot(vec3(_392, _393, _394), vec3(_825 * _817, _825 * _818, _825 * _819)) + 1.0) * 0.5;
        float _3374 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _842 = sqrt(((_818 * _818) + (_817 * _817)) + (_819 * _819)) / (_730 + 9.9999997473787516355514526367188e-06);
        float _3385 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _843 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
        float _844 = _843 * 2.0;
        float _848 = (1.0 - _843) / (_843 + 1.0);
        float _3396 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _849 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
        float _858 = ((((1.0 - _849) * (_844 + 2.0)) * exp2(log2(isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0))) * (_844 + 1.0))) + _849) * _730;
        _866 = _697;
        _868 = _696;
        _869 = _695;
        _870 = _707;
        _871 = _706;
        _872 = _705;
        _873 = _717;
        _874 = _716;
        _875 = _715;
        _876 = _730;
        _877 = _729;
        _878 = _728;
        _879 = cbModelParam._m0[36u].z * (isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0)));
        _880 = cbModelParam._m0[36u].z * (isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0)));
        _881 = cbModelParam._m0[36u].z * (isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0)));
    }
    else
    {
        _866 = _867;
        _868 = _867;
        _869 = _867;
        _870 = _867;
        _871 = _867;
        _872 = _867;
        _873 = _867;
        _874 = _867;
        _875 = _867;
        _876 = _867;
        _877 = _867;
        _878 = _867;
        _879 = 0.0;
        _880 = 0.0;
        _881 = 0.0;
    }
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _907 = fma(_565, cbModelParam._m0[30u].z, fma(_561, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _557));
        float _911 = fma(_565, cbModelParam._m0[31u].z, fma(_561, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _557));
        float _915 = fma(_565, cbModelParam._m0[32u].z, fma(_561, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _557));
        float _938 = _557 + _392;
        float _939 = _561 + _393;
        float _940 = _565 + _394;
        float _950 = fma(_940, cbModelParam._m0[30u].z, fma(_939, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _938)) - _907;
        float _951 = fma(_940, cbModelParam._m0[31u].z, fma(_939, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _938)) - _911;
        float _952 = fma(_940, cbModelParam._m0[32u].z, fma(_939, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _938)) - _915;
        float _956 = inversesqrt(dot(vec3(_950, _951, _952), vec3(_950, _951, _952)));
        float _969 = ((_956 * _950) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_907 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _970 = ((_956 * _951) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_911 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _971 = ((_956 * _952) / cbModelParam._m0[35u].z) + ((((((_915 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        float _1006 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_973.x + (-0.5));
        float _1008 = _1006 * (_973.y + (-0.5));
        float _1009 = _1006 * (_973.z + (-0.5));
        float _1016 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_980.x + (-0.5));
        float _1018 = _1016 * (_980.y + (-0.5));
        float _1019 = _1016 * (_980.z + (-0.5));
        float _1026 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_987.x + (-0.5));
        float _1028 = _1026 * (_987.y + (-0.5));
        float _1029 = _1026 * (_987.z + (-0.5));
        float _1036 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_994.x + (-0.5));
        float _1038 = _1036 * (_994.y + (-0.5));
        float _1039 = _1036 * (_994.z + (-0.5));
        float _1040 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1041 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1042 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1043 = _1007 * 0.5;
        float _1044 = _1017 * 0.5;
        float _1045 = _1027 * 0.5;
        float _1046 = dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045));
        float _1051 = (_1046 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1046);
        float _1059 = (dot(vec3(_392, _393, _394), vec3(_1051 * _1043, _1051 * _1044, _1051 * _1045)) + 1.0) * 0.5;
        float _3437 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1068 = sqrt(((_1044 * _1044) + (_1043 * _1043)) + (_1045 * _1045)) / (_1040 + 9.9999997473787516355514526367188e-06);
        float _3448 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _1070 = _1069 * 2.0;
        float _1074 = (1.0 - _1069) / (_1069 + 1.0);
        float _3459 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
        float _1084 = ((((1.0 - _1075) * (_1070 + 2.0)) * exp2(log2(isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0))) * (_1070 + 1.0))) + _1075) * _1040;
        float _1085 = _1008 * 0.5;
        float _1086 = _1018 * 0.5;
        float _1087 = _1028 * 0.5;
        float _1088 = dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087));
        float _1093 = (_1088 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1088);
        float _1101 = (dot(vec3(_392, _393, _394), vec3(_1093 * _1085, _1093 * _1086, _1093 * _1087)) + 1.0) * 0.5;
        float _3470 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1110 = sqrt(((_1086 * _1086) + (_1085 * _1085)) + (_1087 * _1087)) / (_1041 + 9.9999997473787516355514526367188e-06);
        float _3481 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
        float _1112 = _1111 * 2.0;
        float _1116 = (1.0 - _1111) / (_1111 + 1.0);
        float _3492 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
        float _1126 = ((((1.0 - _1117) * (_1112 + 2.0)) * exp2(log2(isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0))) * (_1112 + 1.0))) + _1117) * _1041;
        float _1127 = _1009 * 0.5;
        float _1128 = _1019 * 0.5;
        float _1129 = _1029 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1143 = (dot(vec3(_392, _393, _394), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3503 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1152 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1042 + 9.9999997473787516355514526367188e-06);
        float _3514 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _3525 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))) * (_1154 + 1.0))) + _1159) * _1042;
        _1176 = _1009;
        _1177 = _1008;
        _1178 = _1007;
        _1179 = _1019;
        _1180 = _1018;
        _1181 = _1017;
        _1182 = _1029;
        _1183 = _1028;
        _1184 = _1027;
        _1185 = _1042;
        _1186 = _1041;
        _1187 = _1040;
        _1188 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0)));
        _1189 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)));
        _1190 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
    }
    else
    {
        _1176 = _867;
        _1177 = _867;
        _1178 = _867;
        _1179 = _867;
        _1180 = _867;
        _1181 = _867;
        _1182 = _867;
        _1183 = _867;
        _1184 = _867;
        _1185 = _867;
        _1186 = _867;
        _1187 = _867;
        _1188 = 0.0;
        _1189 = 0.0;
        _1190 = 0.0;
    }
    float _1200 = (cbModelParam._m0[1u].x * (_1188 - _879)) + _879;
    float _1201 = (cbModelParam._m0[1u].x * (_1189 - _880)) + _880;
    float _1202 = (cbModelParam._m0[1u].x * (_1190 - _881)) + _881;
    float _1223 = fma(_1202, cbSceneParam._m0[89u].z, fma(_1201, cbSceneParam._m0[89u].y, _1200 * cbSceneParam._m0[89u].x));
    float _1226 = fma(_1202, cbSceneParam._m0[90u].z, fma(_1201, cbSceneParam._m0[90u].y, _1200 * cbSceneParam._m0[90u].x));
    float _1229 = fma(_1202, cbSceneParam._m0[91u].z, fma(_1201, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1200));
    float _1244 = _504 * 0.5;
    float _1245 = _505 * 0.5;
    float _1246 = _506 * 0.5;
    float _1247 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_1178, _1181, _1184, _1187));
    float _1250 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_1177, _1180, _1183, _1186));
    float _1253 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_1176, _1179, _1182, _1185));
    float _1287;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1260 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_866, _870, _873, _876));
        float _1264 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_868, _871, _874, _877));
        float _1268 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_869, _872, _875, _878));
        float _1275 = dot(vec4(cbModelParam._m0[39u]), vec4(_1244, _1245, _1246, 1.0));
        _1287 = dot(vec3(isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)), isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)), isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1275) ? 0.0 : (isnan(0.0) ? _1275 : max(0.0, _1275))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1287 = 1.0;
    }
    float _1298;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1289 = dot(vec4(cbModelParam._m0[40u]), vec4(_1244, _1245, _1246, 1.0));
        _1298 = dot(vec3(isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)), isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)), isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1289) ? 0.0 : (isnan(0.0) ? _1289 : max(0.0, _1289))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1298 = 1.0;
    }
    float _1302 = (_1298 * cbModelParam._m0[1u].x) + (_1287 * (1.0 - cbModelParam._m0[1u].x));
    float _1312 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _395);
    float _1313 = isnan(_1312) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1312 : min(cbModelParam._m0[25u].z, _1312));
    float _1395;
    float _1397;
    float _1399;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1362 = fma(_565, cbModelParam._m0[13u].z, fma(_561, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _557)) + cbModelParam._m0[13u].w;
        float _1366 = fma(_565, cbModelParam._m0[14u].z, fma(_561, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _557)) + cbModelParam._m0[14u].w;
        float _1370 = fma(_565, cbModelParam._m0[15u].z, fma(_561, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _557)) + cbModelParam._m0[15u].w;
        float _1373 = fma(_506, cbModelParam._m0[13u].z, fma(_505, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _504));
        float _1376 = fma(_506, cbModelParam._m0[14u].z, fma(_505, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _504));
        float _1379 = fma(_506, cbModelParam._m0[15u].z, fma(_505, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _504));
        float _1407;
        if (_1373 > 0.0)
        {
            _1407 = abs((1.0 - _1362) / _1373);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1373 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1362 + 1.0) / _1373);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1407 = frontier_phi_16_14_ladder;
        }
        float _1613;
        if (_1376 > 0.0)
        {
            _1613 = abs((1.0 - _1366) / _1376);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1376 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1366 + 1.0) / _1376);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1613 = frontier_phi_25_21_ladder;
        }
        float _1856;
        if (_1379 > 0.0)
        {
            _1856 = abs((1.0 - _1370) / _1379);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1379 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1370 + 1.0) / _1379);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1856 = frontier_phi_37_32_ladder;
        }
        float _1858 = isnan(_1613) ? _1407 : (isnan(_1407) ? _1613 : min(_1407, _1613));
        float _1859 = isnan(_1856) ? _1858 : (isnan(_1858) ? _1856 : min(_1858, _1856));
        float _1863 = (_1859 * _1373) + _1362;
        float _1864 = (_1859 * _1376) + _1366;
        float _1865 = (_1859 * _1379) + _1370;
        float _1866 = _1859 * 9.9999997473787516355514526367188e-05;
        float _1868 = (-1.0) - _1866;
        float _1870 = _1866 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1865 > _1870) || ((_1865 < _1868) || ((_1864 > _1870) || ((_1864 < _1868) || ((_1863 < _1868) || (_1863 > _1870))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1989 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1865, cbModelParam._m0[9u].z, fma(_1864, cbModelParam._m0[9u].y, _1863 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1865, cbModelParam._m0[10u].z, fma(_1864, cbModelParam._m0[10u].y, _1863 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1865, cbModelParam._m0[11u].z, fma(_1864, cbModelParam._m0[11u].y, _1863 * cbModelParam._m0[11u].x))), _1313);
            frontier_phi_15_37_ladder = _1989.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1989.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1989.x * cbModelParam._m0[1u].y;
        }
        _1395 = frontier_phi_15_37_ladder_2;
        _1397 = frontier_phi_15_37_ladder_1;
        _1399 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1383 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_504, _505, _506), _1313);
        _1395 = _1383.x * cbModelParam._m0[1u].y;
        _1397 = _1383.y * cbModelParam._m0[1u].y;
        _1399 = _1383.z * cbModelParam._m0[1u].y;
    }
    float _1403 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _395);
    float _1404 = isnan(_1403) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1403 : min(cbModelParam._m0[25u].w, _1403));
    float _1497;
    float _1499;
    float _1501;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1461 = fma(_565, cbModelParam._m0[21u].z, fma(_561, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _557)) + cbModelParam._m0[21u].w;
        float _1465 = fma(_565, cbModelParam._m0[22u].z, fma(_561, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _557)) + cbModelParam._m0[22u].w;
        float _1469 = fma(_565, cbModelParam._m0[23u].z, fma(_561, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _557)) + cbModelParam._m0[23u].w;
        float _1472 = fma(_506, cbModelParam._m0[21u].z, fma(_505, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _504));
        float _1475 = fma(_506, cbModelParam._m0[22u].z, fma(_505, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _504));
        float _1478 = fma(_506, cbModelParam._m0[23u].z, fma(_505, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _504));
        float _1618;
        if (_1472 > 0.0)
        {
            _1618 = abs((1.0 - _1461) / _1472);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1472 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1461 + 1.0) / _1472);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1618 = frontier_phi_27_23_ladder;
        }
        float _1883;
        if (_1475 > 0.0)
        {
            _1883 = abs((1.0 - _1465) / _1475);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1475 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1465 + 1.0) / _1475);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1883 = frontier_phi_39_34_ladder;
        }
        float _2088;
        if (_1478 > 0.0)
        {
            _2088 = abs((1.0 - _1469) / _1478);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1478 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1469 + 1.0) / _1478);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2088 = frontier_phi_48_45_ladder;
        }
        float _2090 = isnan(_1883) ? _1618 : (isnan(_1618) ? _1883 : min(_1618, _1883));
        float _2091 = isnan(_2088) ? _2090 : (isnan(_2090) ? _2088 : min(_2090, _2088));
        float _2095 = (_2091 * _1472) + _1461;
        float _2096 = (_2091 * _1475) + _1465;
        float _2097 = (_2091 * _1478) + _1469;
        float _2098 = _2091 * 9.9999997473787516355514526367188e-05;
        float _2099 = (-1.0) - _2098;
        float _2101 = _2098 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2097 > _2101) || ((_2097 < _2099) || ((_2096 > _2101) || ((_2096 < _2099) || ((_2095 < _2099) || (_2095 > _2101))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2295 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2097, cbModelParam._m0[17u].z, fma(_2096, cbModelParam._m0[17u].y, _2095 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2097, cbModelParam._m0[18u].z, fma(_2096, cbModelParam._m0[18u].y, _2095 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2097, cbModelParam._m0[19u].z, fma(_2096, cbModelParam._m0[19u].y, _2095 * cbModelParam._m0[19u].x))), _1404);
            frontier_phi_24_48_ladder = _2295.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2295.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2295.x * cbModelParam._m0[1u].z;
        }
        _1497 = frontier_phi_24_48_ladder_2;
        _1499 = frontier_phi_24_48_ladder_1;
        _1501 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1481 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_504, _505, _506), _1404);
        _1497 = _1481.x * cbModelParam._m0[1u].z;
        _1499 = _1481.y * cbModelParam._m0[1u].z;
        _1501 = _1481.z * cbModelParam._m0[1u].z;
    }
    float _1513 = ((((1.0 - _525) * ((_512 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_525 * _512)) * _496;
    float _1514 = _1513 * ((cbModelParam._m0[1u].w * (_1497 - _1395)) + _1395);
    float _1515 = _1513 * ((cbModelParam._m0[1u].w * (_1499 - _1397)) + _1397);
    float _1516 = _1513 * ((cbModelParam._m0[1u].w * (_1501 - _1399)) + _1399);
    float _1519 = fma(_1516, cbSceneParam._m0[89u].z, fma(_1515, cbSceneParam._m0[89u].y, _1514 * cbSceneParam._m0[89u].x));
    float _1522 = fma(_1516, cbSceneParam._m0[90u].z, fma(_1515, cbSceneParam._m0[90u].y, _1514 * cbSceneParam._m0[90u].x));
    float _1525 = fma(_1516, cbSceneParam._m0[91u].z, fma(_1515, cbSceneParam._m0[91u].y, _1514 * cbSceneParam._m0[91u].x));
    uvec4 _1535 = floatBitsToUint(cbInstanceData._m0[_469 + 5u]);
    uint _1537 = _1535.x * 14u;
    uint _1538 = _1537 + 13u;
    float _1545 = _496 + (-1.0);
    float _1550 = (cbLight._m0[_1538].x * _1545) + 1.0;
    float _1551 = (cbLight._m0[_1538].y * _1545) + 1.0;
    float _1552 = (cbLight._m0[_1538].z * _1545) + 1.0;
    float _1553 = (cbLight._m0[_1538].w * _1545) + 1.0;
    uint _1554 = _1537 + 5u;
    float _1560 = isnan(1.0) ? _1551 : (isnan(_1551) ? 1.0 : min(_1551, 1.0));
    uint _1564 = _1537 + 4u;
    float _1571 = isnan(1.0) ? _1550 : (isnan(_1550) ? 1.0 : min(_1550, 1.0));
    uint _1575 = _1537 | 1u;
    float _1586 = dot(vec3(cbLight._m0[_1537].xyz), vec3(_392, _393, _394));
    float _1589 = dot(vec3(cbLight._m0[_1575].xyz), vec3(_392, _393, _394));
    float _3661 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
    float _3672 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
    float _1594 = (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * 0.3183098733425140380859375;
    float _1596 = (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * 0.3183098733425140380859375;
    float _1603 = ((cbLight._m0[_1554].x * _1560) * _1596) + ((cbLight._m0[_1564].x * _1571) * _1594);
    float _1604 = ((_1560 * cbLight._m0[_1554].y) * _1596) + ((_1571 * cbLight._m0[_1564].y) * _1594);
    float _1605 = ((_1560 * cbLight._m0[_1554].z) * _1596) + ((_1571 * cbLight._m0[_1564].z) * _1594);
    uvec4 _1610 = floatBitsToUint(cbLight._m0[_1537 + 12u]);
    bool _1612 = _1610.x == 0u;
    float _1623;
    float _1625;
    float _1627;
    if (_1612)
    {
        _1623 = _1603;
        _1625 = _1604;
        _1627 = _1605;
    }
    else
    {
        uint _1631 = _1537 + 6u;
        float _1647 = (dot(vec3(cbLight._m0[_1537 + 2u].xyz), vec3(_392, _393, _394)) * 0.5) + 0.5;
        float _1648 = _1647 * _1647;
        float _3683 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1650 = isnan(1.0) ? _1552 : (isnan(_1552) ? 1.0 : min(_1552, 1.0));
        _1623 = (((cbLight._m0[_1631].x * 0.3183098733425140380859375) * _1649) * _1650) + _1603;
        _1625 = (((cbLight._m0[_1631].y * 0.3183098733425140380859375) * _1649) * _1650) + _1604;
        _1627 = (((cbLight._m0[_1631].z * 0.3183098733425140380859375) * _1649) * _1650) + _1605;
    }
    bool _1630 = _1610.y == 0u;
    float _1668;
    float _1670;
    float _1672;
    if (_1630)
    {
        _1668 = _1623;
        _1670 = _1625;
        _1672 = _1627;
    }
    else
    {
        uint _1827 = _1537 + 7u;
        float _1843 = (dot(vec3(cbLight._m0[_1537 + 3u].xyz), vec3(_392, _393, _394)) * 0.5) + 0.5;
        float _1844 = _1843 * _1843;
        float _3699 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
        float _1845 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1846 = isnan(1.0) ? _1553 : (isnan(_1553) ? 1.0 : min(_1553, 1.0));
        _1668 = (((cbLight._m0[_1827].x * 0.3183098733425140380859375) * _1845) * _1846) + _1623;
        _1670 = (((cbLight._m0[_1827].y * 0.3183098733425140380859375) * _1845) * _1846) + _1625;
        _1672 = (((cbLight._m0[_1827].z * 0.3183098733425140380859375) * _1845) * _1846) + _1627;
    }
    uint _1675 = _1537 + 8u;
    float _1688 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1537].w)) * _395) * 0.949999988079071044921875);
    float _1689 = _1688 * _1688;
    float _1690 = cbLight._m0[_1537].x + _420;
    float _1691 = cbLight._m0[_1537].y + _421;
    float _1692 = cbLight._m0[_1537].z + _422;
    float _1696 = inversesqrt(dot(vec3(_1690, _1691, _1692), vec3(_1690, _1691, _1692)));
    float _1697 = _1696 * _1690;
    float _1698 = _1696 * _1691;
    float _1699 = _1696 * _1692;
    float _1700 = dot(vec3(_392, _393, _394), vec3(cbLight._m0[_1537].xyz));
    float _3715 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
    float _1703 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _3726 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _1704 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
    float _1705 = dot(vec3(_392, _393, _394), vec3(_1697, _1698, _1699));
    float _3737 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
    float _1708 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
    float _1709 = dot(vec3(cbLight._m0[_1537].xyz), vec3(_1697, _1698, _1699));
    float _3748 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
    float _1713 = _1689 * _1689;
    float _1717 = ((_1708 * _1708) * (_1713 + (-1.0))) + 1.0;
    float _1728 = (exp2(log2(1.0 - (isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1729 = 1.0 - _1689;
    float _1740 = (0.5 / (((_1704 * ((_1703 * _1729) + _1689)) + 9.9999999392252902907785028219223e-09) + (((_1704 * _1729) + _1689) * _1703))) * _1703;
    float _3759 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
    float _1742 = (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * (_1713 / ((_1717 * _1717) * 3.141590118408203125));
    uint _1753 = _1537 + 9u;
    float _1764 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1575].w)) * _395) * 0.949999988079071044921875);
    float _1765 = _1764 * _1764;
    float _1766 = cbLight._m0[_1575].x + _420;
    float _1767 = cbLight._m0[_1575].y + _421;
    float _1768 = cbLight._m0[_1575].z + _422;
    float _1772 = inversesqrt(dot(vec3(_1766, _1767, _1768), vec3(_1766, _1767, _1768)));
    float _1773 = _1772 * _1766;
    float _1774 = _1772 * _1767;
    float _1775 = _1772 * _1768;
    float _1776 = dot(vec3(_392, _393, _394), vec3(cbLight._m0[_1575].xyz));
    float _3770 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _1779 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _1780 = dot(vec3(_392, _393, _394), vec3(_1773, _1774, _1775));
    float _3781 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1783 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _1784 = dot(vec3(cbLight._m0[_1575].xyz), vec3(_1773, _1774, _1775));
    float _3792 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1788 = _1765 * _1765;
    float _1792 = ((_1783 * _1783) * (_1788 + (-1.0))) + 1.0;
    float _1801 = (exp2(log2(1.0 - (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1802 = 1.0 - _1765;
    float _1812 = (0.5 / (((_1704 * ((_1779 * _1802) + _1765)) + 9.9999999392252902907785028219223e-09) + (((_1704 * _1802) + _1765) * _1779))) * _1779;
    float _3803 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1814 = (isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * (_1788 / ((_1792 * _1792) * 3.141590118408203125));
    float _1824 = (((_1801 * cbLight._m0[_1753].x) * _1814) * _1560) + (((_1728 * cbLight._m0[_1675].x) * _1742) * _1571);
    float _1825 = (((_1801 * cbLight._m0[_1753].y) * _1814) * _1560) + (((_1728 * cbLight._m0[_1675].y) * _1742) * _1571);
    float _1826 = (((_1801 * cbLight._m0[_1753].z) * _1814) * _1560) + (((_1728 * cbLight._m0[_1675].z) * _1742) * _1571);
    float _1888;
    float _1890;
    float _1892;
    if (_1612)
    {
        _1888 = _1824;
        _1890 = _1825;
        _1892 = _1826;
    }
    else
    {
        uint _1894 = _1537 + 2u;
        uint _1898 = _1537 + 10u;
        float _1912 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1894].w)) * _395) * 0.949999988079071044921875);
        float _1913 = _1912 * _1912;
        float _1914 = cbLight._m0[_1894].x + _420;
        float _1915 = cbLight._m0[_1894].y + _421;
        float _1916 = cbLight._m0[_1894].z + _422;
        float _1920 = inversesqrt(dot(vec3(_1914, _1915, _1916), vec3(_1914, _1915, _1916)));
        float _1921 = _1920 * _1914;
        float _1922 = _1920 * _1915;
        float _1923 = _1920 * _1916;
        float _1924 = dot(vec3(_392, _393, _394), vec3(cbLight._m0[_1894].xyz));
        float _3814 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
        float _1927 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1928 = dot(vec3(_392, _393, _394), vec3(_1921, _1922, _1923));
        float _3825 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
        float _1931 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1932 = dot(vec3(cbLight._m0[_1894].xyz), vec3(_1921, _1922, _1923));
        float _3836 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
        float _1936 = _1913 * _1913;
        float _1940 = ((_1931 * _1931) * (_1936 + (-1.0))) + 1.0;
        float _1949 = (exp2(log2(1.0 - (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1950 = 1.0 - _1913;
        float _1960 = (0.5 / (((_1704 * ((_1927 * _1950) + _1913)) + 9.9999999392252902907785028219223e-09) + (((_1704 * _1950) + _1913) * _1927))) * _1927;
        float _3847 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
        float _1962 = (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * (_1936 / ((_1940 * _1940) * 3.141590118408203125));
        float _1963 = isnan(1.0) ? _1552 : (isnan(_1552) ? 1.0 : min(_1552, 1.0));
        _1888 = (((_1949 * cbLight._m0[_1898].x) * _1962) * _1963) + _1824;
        _1890 = (((_1949 * cbLight._m0[_1898].y) * _1962) * _1963) + _1825;
        _1892 = (((_1949 * cbLight._m0[_1898].z) * _1962) * _1963) + _1826;
    }
    float _1998;
    float _2000;
    float _2002;
    if (_1630)
    {
        _1998 = _1888;
        _2000 = _1890;
        _2002 = _1892;
    }
    else
    {
        uint _2009 = _1537 + 3u;
        uint _2013 = _1537 + 11u;
        float _2027 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2009].w)) * _395) * 0.949999988079071044921875);
        float _2028 = _2027 * _2027;
        float _2029 = cbLight._m0[_2009].x + _420;
        float _2030 = cbLight._m0[_2009].y + _421;
        float _2031 = cbLight._m0[_2009].z + _422;
        float _2035 = inversesqrt(dot(vec3(_2029, _2030, _2031), vec3(_2029, _2030, _2031)));
        float _2036 = _2035 * _2029;
        float _2037 = _2035 * _2030;
        float _2038 = _2035 * _2031;
        float _2039 = dot(vec3(_392, _393, _394), vec3(cbLight._m0[_2009].xyz));
        float _3863 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2042 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _2043 = dot(vec3(_392, _393, _394), vec3(_2036, _2037, _2038));
        float _3874 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2046 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _2047 = dot(vec3(cbLight._m0[_2009].xyz), vec3(_2036, _2037, _2038));
        float _3885 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2051 = _2028 * _2028;
        float _2055 = ((_2046 * _2046) * (_2051 + (-1.0))) + 1.0;
        float _2064 = (exp2(log2(1.0 - (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2065 = 1.0 - _2028;
        float _2075 = (0.5 / (((_1704 * ((_2042 * _2065) + _2028)) + 9.9999999392252902907785028219223e-09) + (((_1704 * _2065) + _2028) * _2042))) * _2042;
        float _3896 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2077 = (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_2051 / ((_2055 * _2055) * 3.141590118408203125));
        float _2078 = isnan(1.0) ? _1553 : (isnan(_1553) ? 1.0 : min(_1553, 1.0));
        _1998 = (((_2064 * cbLight._m0[_2013].x) * _2077) * _2078) + _1888;
        _2000 = (((_2064 * cbLight._m0[_2013].y) * _2077) * _2078) + _1890;
        _2002 = (((_2064 * cbLight._m0[_2013].z) * _2077) * _2078) + _1892;
    }
    float _2212;
    float _2214;
    float _2216;
    float _2218;
    float _2220;
    float _2222;
    if (_1535.y == 0u)
    {
        float _2153 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2154 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2153;
        float _2155 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2153;
        float _2156 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2153;
        uvec4 _2168 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2169 = _2168.x;
        uint _2180 = uint((float(_2168.y) * floor(float(uint(cbSceneParam._m0[85u].y * _429) / _2169))) + floor(float(uint(cbSceneParam._m0[85u].x * _428) / _2169)));
        float _2190 = (log2(_2156 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2191 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        uint _2194 = uint(isnan(14.0) ? _2191 : (isnan(_2191) ? 14.0 : min(_2191, 14.0)));
        uvec4 _2199 = texelFetch(g_lightClusterGridBuffer, int(((_2194 << 2u) + (_2180 << 6u)) >> 2u));
        uint _2200 = _2199.x;
        uint _2201 = _2168.z;
        float _2300;
        float _2302;
        float _2304;
        float _2306;
        float _2308;
        float _2310;
        if (((((1u << ((_2201 >> 4u) & 15u)) + 4294967295u) & _2200) == 0u) || ((_2201 & 240u) == 0u))
        {
            _2300 = 0.0;
            _2302 = 0.0;
            _2304 = 0.0;
            _2306 = 0.0;
            _2308 = 0.0;
            _2310 = 0.0;
        }
        else
        {
            float _2301;
            float _2303;
            float _2305;
            float _2307;
            float _2309;
            float _2311;
            float _2444 = 0.0;
            float _2445 = 0.0;
            float _2446 = 0.0;
            float _2447 = 0.0;
            float _2448 = 0.0;
            float _2449 = 0.0;
            uint _2450 = 0u;
            uint _2459;
            bool _2460;
            for (;;)
            {
                _2459 = texelFetch(g_lightClassification, int((((_2194 << 5u) + (_2180 << 9u)) + (_2450 << 2u)) >> 2u)).x;
                _2460 = _2459 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2460)
                {
                    frontier_phi_63_pred = _2449;
                    frontier_phi_63_pred_1 = _2448;
                    frontier_phi_63_pred_2 = _2447;
                    frontier_phi_63_pred_3 = _2446;
                    frontier_phi_63_pred_4 = _2445;
                    frontier_phi_63_pred_5 = _2444;
                }
                else
                {
                    float _2568;
                    float _2569;
                    float _2570;
                    float _2571;
                    float _2572;
                    float _2573;
                    uint _2574;
                    _2568 = _2444;
                    _2569 = _2445;
                    _2570 = _2446;
                    _2571 = _2447;
                    _2572 = _2448;
                    _2573 = _2449;
                    _2574 = _2459;
                    float _2500;
                    float _2501;
                    float _2502;
                    float _2503;
                    float _2504;
                    float _2505;
                    for (;;)
                    {
                        uint _2578 = uint(findLSB(_2574)) + (_2450 << 5u);
                        uint _2575 = (_2574 + 4294967295u) & _2574;
                        uint _2580 = _2578 * 48u;
                        vec4 _2594 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2580)).x, texelFetch(g_PointLightRenderingBuffer, int(_2580 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2580 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2580 + 3u)).x));
                        uint _2600 = (_2578 * 48u) + 4u;
                        vec4 _2613 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2600)).x, texelFetch(g_PointLightRenderingBuffer, int(_2600 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2600 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2600 + 3u)).x));
                        uint _2619 = (_2578 * 48u) + 8u;
                        vec3 _2630 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2619)).x, texelFetch(g_PointLightRenderingBuffer, int(_2619 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2619 + 2u)).x));
                        float _2634 = _2594.x - _2154;
                        float _2635 = _2594.y - _2155;
                        float _2636 = _2594.z - _2156;
                        float _2637 = dot(vec3(_2634, _2635, _2636), vec3(_2634, _2635, _2636));
                        float _2640 = inversesqrt(_2637);
                        float _2641 = _2640 * _2634;
                        float _2642 = _2640 * _2635;
                        float _2643 = _2640 * _2636;
                        float _2644 = dot(vec3(_450, _453, _456), vec3(_2641, _2642, _2643));
                        float _2649 = 1.0 - (_2637 * _2594.w);
                        float _3922 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
                        float _2650 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
                        float _2651 = sqrt(_2637) * _2613.w;
                        float _2654 = 1.39999997615814208984375 / (_2651 + 1.39999997615814208984375);
                        float _2655 = _2654 * _2654;
                        float _2658 = ((1.0 - _2655) * _2644) + _2655;
                        float _2661 = _2651 * _2651;
                        float _2665 = ((isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0))) * _2650) / ((_2661 * 0.699999988079071044921875) + 1.0);
                        float _2669 = (-0.0) - _2154;
                        float _2670 = (-0.0) - _2155;
                        float _2671 = (-0.0) - _2156;
                        float _2675 = inversesqrt(dot(vec3(_2669, _2670, _2671), vec3(_2669, _2670, _2671)));
                        float _2676 = _2675 * _2669;
                        float _2677 = _2675 * _2670;
                        float _2678 = _2675 * _2671;
                        float _2686 = exp2(log2(1.0 / ((_2661 * 3.5) + 5.0)) * 0.25);
                        float _2687 = 1.0 - _512;
                        float _2694 = sqrt(1.0 - ((1.0 - (_2687 * _2687)) * (1.0 - (_2686 * _2686))));
                        float _2695 = _2694 * _2694;
                        float _2696 = _2695 * _2695;
                        float _2697 = _2676 + _2641;
                        float _2698 = _2677 + _2642;
                        float _2699 = _2678 + _2643;
                        float _2703 = inversesqrt(dot(vec3(_2697, _2698, _2699), vec3(_2697, _2698, _2699)));
                        float _2707 = dot(vec3(_450, _453, _456), vec3(_2676, _2677, _2678));
                        float _3938 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
                        float _2710 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
                        float _2711 = dot(vec3(_450, _453, _456), vec3(_2703 * _2697, _2703 * _2698, _2703 * _2699));
                        float _3949 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
                        float _2714 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
                        float _2718 = ((_2714 * _2714) * (_2696 + (-1.0))) + 1.0;
                        float _2719 = _2654 * _2695;
                        float _2720 = _2719 * _2719;
                        float _2723 = ((1.0 - _2720) * _2644) + _2720;
                        float _3960 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
                        float _2724 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
                        float _2725 = 1.0 - _2695;
                        float _2735 = (0.5 / (((_2724 * ((_2710 * _2725) + _2695)) + 9.9999999392252902907785028219223e-09) + (((_2724 * _2725) + _2695) * _2710))) * _2724;
                        float _3971 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
                        float _2746 = (((_2696 * 3.1415927410125732421875) * (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0)))) / ((_2718 * _2718) * ((_2661 * 2.1991131305694580078125) + 3.141590118408203125))) * _2650;
                        _2503 = (_2665 * _2613.x) + _2571;
                        _2504 = (_2665 * _2613.y) + _2572;
                        _2505 = (_2665 * _2613.z) + _2573;
                        _2500 = (_2746 * _2630.x) + _2568;
                        _2501 = (_2746 * _2630.y) + _2569;
                        _2502 = (_2746 * _2630.z) + _2570;
                        if (_2575 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2568 = _2500;
                            _2569 = _2501;
                            _2570 = _2502;
                            _2571 = _2503;
                            _2572 = _2504;
                            _2573 = _2505;
                            _2574 = _2575;
                        }
                    }
                    frontier_phi_63_pred = _2505;
                    frontier_phi_63_pred_1 = _2504;
                    frontier_phi_63_pred_2 = _2503;
                    frontier_phi_63_pred_3 = _2502;
                    frontier_phi_63_pred_4 = _2501;
                    frontier_phi_63_pred_5 = _2500;
                }
                _2311 = frontier_phi_63_pred;
                _2309 = frontier_phi_63_pred_1;
                _2307 = frontier_phi_63_pred_2;
                _2305 = frontier_phi_63_pred_3;
                _2303 = frontier_phi_63_pred_4;
                _2301 = frontier_phi_63_pred_5;
                uint _2451 = _2450 + 1u;
                if (_2451 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2444 = _2301;
                    _2445 = _2303;
                    _2446 = _2305;
                    _2447 = _2307;
                    _2448 = _2309;
                    _2449 = _2311;
                    _2450 = _2451;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2300 = _2301;
            _2302 = _2303;
            _2304 = _2305;
            _2306 = _2307;
            _2308 = _2309;
            _2310 = _2311;
        }
        uvec4 _2314 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2315 = _2314.z;
        uint _2317 = (_2315 >> 8u) & 15u;
        float _2412;
        float _2414;
        float _2416;
        float _2418;
        float _2420;
        float _2422;
        if (((4294967295u << _2317) & _2200) == 0u)
        {
            _2412 = _2300;
            _2414 = _2302;
            _2416 = _2304;
            _2418 = _2306;
            _2420 = _2308;
            _2422 = _2310;
        }
        else
        {
            float _2437 = inversesqrt(dot(vec3(_2154, _2155, _2156), vec3(_2154, _2155, _2156)));
            float _2438 = _2437 * _2154;
            float _2439 = _2437 * _2155;
            float _2440 = _2437 * _2156;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2317 < ((_2315 >> 12u) & 15u))
            {
                float _2413;
                float _2415;
                float _2417;
                float _2419;
                float _2421;
                float _2423;
                float _2551 = _2300;
                float _2552 = _2302;
                float _2553 = _2304;
                float _2554 = _2306;
                float _2555 = _2308;
                float _2556 = _2310;
                uint _2557 = _2317;
                uint _2566;
                bool _2567;
                for (;;)
                {
                    _2566 = texelFetch(g_lightClassification, int((((_2194 << 5u) + (_2180 << 9u)) + (_2557 << 2u)) >> 2u)).x;
                    _2567 = _2566 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2567)
                    {
                        frontier_phi_69_pred = _2556;
                        frontier_phi_69_pred_1 = _2555;
                        frontier_phi_69_pred_2 = _2554;
                        frontier_phi_69_pred_3 = _2553;
                        frontier_phi_69_pred_4 = _2552;
                        frontier_phi_69_pred_5 = _2551;
                    }
                    else
                    {
                        float _2751;
                        float _2752;
                        float _2753;
                        float _2754;
                        float _2755;
                        float _2756;
                        float _3047;
                        float _3048;
                        float _3049;
                        float _3050;
                        float _3051;
                        float _3052;
                        float _2764 = _2551;
                        float _2765 = _2552;
                        float _2766 = _2553;
                        float _2767 = _2554;
                        float _2768 = _2555;
                        float _2769 = _2556;
                        uint _2770 = _2566;
                        uint _2771;
                        vec4 _2796;
                        float _2797;
                        vec4 _2812;
                        vec3 _2824;
                        vec4 _2840;
                        vec4 _2856;
                        float _2903;
                        bool _2904;
                        for (;;)
                        {
                            uint _2781 = ((_2557 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2770));
                            _2771 = (_2770 + 4294967295u) & _2770;
                            uint _2783 = _2781 * 40u;
                            _2796 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2783)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2783 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2783 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2783 + 3u)).x));
                            _2797 = _2796.w;
                            uint _2799 = (_2781 * 40u) + 4u;
                            _2812 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2799)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2799 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2799 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2799 + 3u)).x));
                            uint _2814 = (_2781 * 40u) + 8u;
                            _2824 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2814)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 2u)).x));
                            uint _2827 = (_2781 * 40u) + 16u;
                            _2840 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2827)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 3u)).x));
                            uint _2843 = (_2781 * 40u) + 20u;
                            _2856 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2843)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 3u)).x));
                            uint _2859 = (_2781 * 40u) + 24u;
                            vec4 _2872 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2859)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 3u)).x));
                            uint _2878 = (_2781 * 40u) + 28u;
                            vec4 _2891 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2878)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 3u)).x));
                            _2903 = fma(_2156, _2891.z, fma(_2155, _2891.y, _2891.x * _2154)) + _2891.w;
                            _2904 = !((fma(_2156, _2872.z, fma(_2155, _2872.y, _2872.x * _2154)) + _2872.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2904)
                            {
                                float _2931 = _2796.x - _2154;
                                float _2932 = _2796.y - _2155;
                                float _2933 = _2796.z - _2156;
                                float _2934 = dot(vec3(_2931, _2932, _2933), vec3(_2931, _2932, _2933));
                                float _2937 = inversesqrt(_2934);
                                float _2938 = _2937 * _2931;
                                float _2939 = _2937 * _2932;
                                float _2940 = _2937 * _2933;
                                float _2944 = 1.0 - (_2934 / (_2797 * _2797));
                                float _3982 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                                float _2945 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
                                float _2949 = sqrt(_2934) * _2812.w;
                                float _2951 = 1.39999997615814208984375 / (_2949 + 1.39999997615814208984375);
                                float _2952 = _2951 * _2951;
                                float _2955 = ((1.0 - _2952) * dot(vec3(_2938, _2939, _2940), vec3(_450, _453, _456))) + _2952;
                                float _2958 = _2949 * _2949;
                                float _2962 = (fma(_2156, _2840.z, fma(_2155, _2840.y, _2840.x * _2154)) + _2840.w) / _2903;
                                float _2963 = (fma(_2156, _2856.z, fma(_2155, _2856.y, _2856.x * _2154)) + _2856.w) / _2903;
                                float _2967 = 1.0 - dot(vec2(_2962, _2963), vec2(_2962, _2963));
                                float _3998 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
                                float _2968 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
                                float _2969 = _2968 * (((isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0))) * _2945) / ((_2958 * 0.699999988079071044921875) + 1.0));
                                float _2981 = exp2(log2(1.0 / ((_2958 * 3.5) + 5.0)) * 0.25);
                                float _2982 = 1.0 - _512;
                                float _2989 = sqrt(1.0 - ((1.0 - (_2982 * _2982)) * (1.0 - (_2981 * _2981))));
                                float _2990 = _2989 * _2989;
                                float _2991 = _2990 * _2990;
                                float _2992 = _2938 - _2438;
                                float _2993 = _2939 - _2439;
                                float _2994 = _2940 - _2440;
                                float _2998 = inversesqrt(dot(vec3(_2992, _2993, _2994), vec3(_2992, _2993, _2994)));
                                float _3002 = dot(vec3(_450, _453, _456), vec3((-0.0) - _2438, (-0.0) - _2439, (-0.0) - _2440));
                                float _4009 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                                float _3005 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
                                float _3006 = dot(vec3(_450, _453, _456), vec3(_2998 * _2992, _2998 * _2993, _2998 * _2994));
                                float _4020 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                                float _3009 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
                                float _3013 = ((_3009 * _3009) * (_2991 + (-1.0))) + 1.0;
                                float _3014 = _2951 * _2990;
                                float _3015 = _3014 * _3014;
                                float _3021 = ((1.0 - _3015) * dot(vec3(_450, _453, _456), vec3(_2938, _2939, _2940))) + _3015;
                                float _4031 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                                float _3022 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
                                float _3023 = 1.0 - _2990;
                                float _3033 = (0.5 / (((_3022 * ((_3005 * _3023) + _2990)) + 9.9999999392252902907785028219223e-09) + (((_3022 * _3023) + _2990) * _3005))) * _3022;
                                float _4042 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                                float _3043 = (_2968 * _2945) * (((_2991 * 3.1415927410125732421875) * (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) / ((_3013 * _3013) * ((_2958 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2969 * _2812.z;
                                frontier_phi_75_pred_1 = _2969 * _2812.y;
                                frontier_phi_75_pred_2 = _2969 * _2812.x;
                                frontier_phi_75_pred_3 = _3043 * _2824.z;
                                frontier_phi_75_pred_4 = _3043 * _2824.y;
                                frontier_phi_75_pred_5 = _3043 * _2824.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3052 = frontier_phi_75_pred;
                            _3051 = frontier_phi_75_pred_1;
                            _3050 = frontier_phi_75_pred_2;
                            _3049 = frontier_phi_75_pred_3;
                            _3048 = frontier_phi_75_pred_4;
                            _3047 = frontier_phi_75_pred_5;
                            _2754 = _3050 + _2767;
                            _2755 = _3051 + _2768;
                            _2756 = _3052 + _2769;
                            _2751 = _3047 + _2764;
                            _2752 = _3048 + _2765;
                            _2753 = _3049 + _2766;
                            if (_2771 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2764 = _2751;
                                _2765 = _2752;
                                _2766 = _2753;
                                _2767 = _2754;
                                _2768 = _2755;
                                _2769 = _2756;
                                _2770 = _2771;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2756;
                        frontier_phi_69_pred_1 = _2755;
                        frontier_phi_69_pred_2 = _2754;
                        frontier_phi_69_pred_3 = _2753;
                        frontier_phi_69_pred_4 = _2752;
                        frontier_phi_69_pred_5 = _2751;
                    }
                    _2423 = frontier_phi_69_pred;
                    _2421 = frontier_phi_69_pred_1;
                    _2419 = frontier_phi_69_pred_2;
                    _2417 = frontier_phi_69_pred_3;
                    _2415 = frontier_phi_69_pred_4;
                    _2413 = frontier_phi_69_pred_5;
                    uint _2558 = _2557 + 1u;
                    if (_2558 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2551 = _2413;
                        _2552 = _2415;
                        _2553 = _2417;
                        _2554 = _2419;
                        _2555 = _2421;
                        _2556 = _2423;
                        _2557 = _2558;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2423;
                frontier_phi_57_58_ladder_1 = _2421;
                frontier_phi_57_58_ladder_2 = _2419;
                frontier_phi_57_58_ladder_3 = _2417;
                frontier_phi_57_58_ladder_4 = _2415;
                frontier_phi_57_58_ladder_5 = _2413;
            }
            else
            {
                frontier_phi_57_58_ladder = _2310;
                frontier_phi_57_58_ladder_1 = _2308;
                frontier_phi_57_58_ladder_2 = _2306;
                frontier_phi_57_58_ladder_3 = _2304;
                frontier_phi_57_58_ladder_4 = _2302;
                frontier_phi_57_58_ladder_5 = _2300;
            }
            _2412 = frontier_phi_57_58_ladder_5;
            _2414 = frontier_phi_57_58_ladder_4;
            _2416 = frontier_phi_57_58_ladder_3;
            _2418 = frontier_phi_57_58_ladder_2;
            _2420 = frontier_phi_57_58_ladder_1;
            _2422 = frontier_phi_57_58_ladder;
        }
        float _2427 = isnan(1.0) ? _496 : (isnan(_496) ? 1.0 : min(_496, 1.0));
        _2212 = (_2427 * _2418) + _1668;
        _2214 = (_2427 * _2420) + _1670;
        _2216 = (_2427 * _2422) + _1672;
        _2218 = ((_2412 * 0.039999999105930328369140625) * _2427) + _1998;
        _2220 = ((_2414 * 0.039999999105930328369140625) * _2427) + _2000;
        _2222 = ((_2416 * 0.039999999105930328369140625) * _2427) + _2002;
    }
    else
    {
        _2212 = _1668;
        _2214 = _1670;
        _2216 = _1672;
        _2218 = _1998;
        _2220 = _2000;
        _2222 = _2002;
    }
    float _4058 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _4069 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _4080 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    uint _2242 = _469 + 6u;
    float _2250 = _428 / cbSceneParam._m0[86u].x;
    float _2251 = _429 / cbSceneParam._m0[86u].y;
    vec4 _2265 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2250, _2251, (log2((isnan(cbSceneParam._m0[77u].w) ? _415 : (isnan(_415) ? cbSceneParam._m0[77u].w : min(_415, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2267 = _2265.x;
    float _2268 = _2265.y;
    float _2269 = _2265.z;
    float _2270 = _2265.w;
    float _2362;
    float _2364;
    float _2366;
    float _2368;
    if (_415 > cbSceneParam._m0[78u].w)
    {
        float _2325 = isnan(_415) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _415 : min(cbSceneParam._m0[80u].w, _415));
        float _2326 = _2325 / _415;
        float _2337 = _2326 * _265;
        float _2338 = _266 * _2326;
        float _2339 = (-0.0) - _2338;
        float _2340 = _2326 * _267;
        float _2342 = (cbSceneParam._m0[77u].w * _2339) / _2325;
        float _2343 = _2342 + cbSceneParam._m0[79u].w;
        float _2344 = cbSceneParam._m0[79u].w - _2338;
        float _2350 = sqrt(((_2337 * _2337) + (_2338 * _2338)) + (_2340 * _2340));
        float _2353 = (1.0 - (cbSceneParam._m0[77u].w / _2325)) * _2350;
        float _2358 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2360 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2513;
        if (abs((_2339 - _2342) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2513 = ((((_2343 > 0.0) ? exp2(_2358 * _2343) : (2.0 - exp2(_2360 * _2343))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2353;
        }
        else
        {
            float _2473 = 1.0 / cbSceneParam._m0[80u].x;
            float _2474 = isnan(_2344) ? _2343 : (isnan(_2343) ? _2344 : max(_2343, _2344));
            float _2475 = isnan(_2344) ? _2343 : (isnan(_2343) ? _2344 : min(_2343, _2344));
            float _2484 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : min(_2474, 0.0));
            float _2485 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : min(_2475, 0.0));
            _2513 = ((abs(_2350 / _2339) * cbSceneParam._m0[80u].y) * ((((_2484 - _2485) * 2.0) - ((exp2(_2358 * (isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0)))) - exp2(_2358 * (isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0))))) * _2473)) - ((exp2(_2360 * _2484) - exp2(_2360 * _2485)) * _2473))) + (_2353 * cbSceneParam._m0[80u].z);
        }
        vec4 _2515 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2250, _2251, 1.0), 0.0);
        float _2524 = exp2((_2513 * (-1.44269502162933349609375)) * (1.0 - _2515.w));
        float _2525 = log2(_2524);
        float _2541 = log2(_2270);
        _2362 = (exp2(_2541 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2525 * cbSceneParam._m0[78u].x)) * _2515.x) / cbSceneParam._m0[78u].x)) + _2267;
        _2364 = (exp2(_2541 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2525 * cbSceneParam._m0[78u].y)) * _2515.y) / cbSceneParam._m0[78u].y)) + _2268;
        _2366 = (exp2(_2541 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2525 * cbSceneParam._m0[78u].z)) * _2515.z) / cbSceneParam._m0[78u].z)) + _2269;
        _2368 = _2524 * _2270;
    }
    else
    {
        _2362 = _2267;
        _2364 = _2268;
        _2366 = _2269;
        _2368 = _2270;
    }
    float _2380 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2381 = _2380 == 3.0;
    float _2382 = log2(_2368);
    float _2389 = exp2(_2382 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_2212 + ((isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0))) * _496))) + ((_2218 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _1302)) * cbPerFrame._m0[3u].x));
    float _2390 = exp2(_2382 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_2214 + ((isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0))) * _496))) + ((_2220 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _1302)) * cbPerFrame._m0[3u].x));
    float _2391 = exp2(_2382 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_2216 + ((isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0))) * _496))) + ((_2222 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _1302)) * cbPerFrame._m0[3u].x));
    float _2400 = (_2380 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2400 * (_2381 ? _2389 : (_2389 + (cbSceneParam._m0[72u].w * _2362)));
    SV_Target.y = _2400 * (_2381 ? _2390 : (_2390 + (cbSceneParam._m0[72u].w * _2364)));
    SV_Target.z = _2400 * (_2381 ? _2391 : (_2391 + (cbSceneParam._m0[72u].w * _2366)));
    SV_Target.w = cbInstanceData._m0[_2242].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2242].w;
}


