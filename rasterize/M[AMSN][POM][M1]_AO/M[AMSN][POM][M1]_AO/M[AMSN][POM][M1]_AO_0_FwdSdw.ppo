#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_POM_M1_AO_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_POM_M1_AO_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_POM_M1_AO_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_POM_M1_AO_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _906;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    float _282 = dot(vec3(_271, _272, _273), vec3(_194, _195, _196));
    float _285 = dot(vec3(_271, _272, _273), vec3(_208, _209, _210));
    float _288 = dot(vec3(_271, _272, _273), vec3(_215, _216, _217));
    float _294 = inversesqrt(dot(vec3(_282, _285, _288), vec3(_282, _285, _288)));
    vec4 _307 = texture(sampler2D(M_AMSN_POM_M1_AO_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _318 = dot(vec4(_307), vec4(1.0, 0.0, 0.0, 0.0)) + (-0.5);
    float _326 = (((cbMtdParam._m0[10u].y * _282) * _294) * _318) + TEXCOORD.x;
    float _327 = (((_285 * cbMtdParam._m0[10u].y) * _294) * _318) + TEXCOORD.y;
    vec4 _339 = texture(sampler2D(M_AMSN_POM_M1_AO_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_326 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_327 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _344 = _339.x * cbMtdParam._m0[9u].x;
    float _345 = _339.y * cbMtdParam._m0[9u].y;
    float _346 = _339.z * cbMtdParam._m0[9u].z;
    vec4 _358 = texture(sampler2D(M_AMSN_POM_M1_AO_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _360 = _358.x;
    vec4 _372 = texture(sampler2D(M_AMSN_POM_M1_AO_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _326) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _327) + cbTextureTilingScale._m0[1u].w));
    float _376 = _372.z;
    float _381 = (_372.x * 2.0) + (-1.0);
    float _383 = (_372.y * 2.0) + (-1.0);
    float _384 = dot(vec2(_381, _383), vec2(_381, _383));
    float _3526 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _389 = sqrt(1.0 - (isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))));
    float _392 = fma(_389, _215, fma(_383, _208, _381 * _194));
    float _395 = fma(_389, _216, fma(_383, _209, _381 * _195));
    float _398 = fma(_389, _217, fma(_383, _210, _381 * _196));
    float _402 = inversesqrt(dot(vec3(_392, _395, _398), vec3(_392, _395, _398)));
    float _403 = _402 * _392;
    float _404 = _402 * _395;
    float _405 = _402 * _398;
    float _407 = cbMtdParam._m0[10u].x + _372.w;
    float _411 = inversesqrt(dot(vec3(_403, _404, _405), vec3(_403, _404, _405)));
    float _412 = _411 * _403;
    float _413 = _411 * _404;
    float _414 = _411 * _405;
    float _3537 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _415 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    float _3548 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _3559 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _3570 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _3581 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _3592 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _420 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
    float _436 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _440 = inversesqrt(dot(vec3(_271, _272, _273), vec3(_271, _272, _273)));
    float _441 = _271 * _440;
    float _442 = _272 * _440;
    float _443 = _273 * _440;
    float _449 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _450 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _471 = fma(_414, cbSceneParam._m0[5u].z, fma(_413, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _412));
    float _474 = fma(_414, cbSceneParam._m0[6u].z, fma(_413, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _412));
    float _477 = fma(_414, cbSceneParam._m0[7u].z, fma(_413, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _412));
    uint _490 = uint(roundEven(NORMAL.w)) * 13u;
    uint _493 = (_490 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _499 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0)))) * cbInstanceData._m0[_493].x;
    float _500 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0)))) * cbInstanceData._m0[_493].y;
    float _501 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0)))) * cbInstanceData._m0[_493].z;
    float _3603 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _502 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
    float _3614 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _503 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
    float _3625 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _504 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
    float _505 = 1.0 - _420;
    float _506 = _502 * _505;
    float _507 = _503 * _505;
    float _508 = _504 * _505;
    float _513 = (_502 + (-0.039999999105930328369140625)) * _420;
    float _514 = (_503 + (-0.039999999105930328369140625)) * _420;
    float _515 = (_504 + (-0.039999999105930328369140625)) * _420;
    float _516 = _513 + 0.039999999105930328369140625;
    float _518 = _514 + 0.039999999105930328369140625;
    float _519 = _515 + 0.039999999105930328369140625;
    vec4 _528 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _449, cbSceneParam._m0[86u].y * _450));
    float _532 = ((isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) * TEXCOORD.z) * _528.x;
    float _533 = dot(vec3(_412, _413, _414), vec3(_441, _442, _443));
    float _536 = _533 * 2.0;
    float _540 = (_536 * _412) - _441;
    float _541 = (_536 * _413) - _442;
    float _542 = (_536 * _414) - _443;
    float _546 = abs(dot(vec3(_441, _442, _443), vec3(_412, _413, _414)));
    float _3636 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _548 = sqrt(_415);
    float _561 = exp2((_548 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_548 * 3.0));
    float _567 = (1.0 - _561) * ((_548 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _568 = _561 * _548;
    float _596 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _600 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _604 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _905;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _631 = fma(_604, cbModelParam._m0[26u].z, fma(_600, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _596));
        float _635 = fma(_604, cbModelParam._m0[27u].z, fma(_600, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _596));
        float _639 = fma(_604, cbModelParam._m0[28u].z, fma(_600, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _596));
        float _663 = _596 + _412;
        float _664 = _600 + _413;
        float _665 = _604 + _414;
        float _675 = fma(_665, cbModelParam._m0[26u].z, fma(_664, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _663)) - _631;
        float _676 = fma(_665, cbModelParam._m0[27u].z, fma(_664, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _663)) - _635;
        float _677 = fma(_665, cbModelParam._m0[28u].z, fma(_664, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _663)) - _639;
        float _681 = inversesqrt(dot(vec3(_675, _676, _677), vec3(_675, _676, _677)));
        float _694 = ((_681 * _675) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_631 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _695 = ((_681 * _676) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_635 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _696 = ((_681 * _677) / cbModelParam._m0[34u].z) + ((((((_639 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _699 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_694, _695, _696), 0.0);
        vec4 _706 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_694, _695, _696), 0.0);
        vec4 _713 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_694, _695, _696), 0.0);
        vec4 _720 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_694, _695, _696), 0.0);
        float _733 = exp2((_699.w + (-0.5)) * 20.0) * 2.0;
        float _734 = _733 * (_699.x + (-0.5));
        float _735 = _733 * (_699.y + (-0.5));
        float _736 = _733 * (_699.z + (-0.5));
        float _743 = exp2((_706.w + (-0.5)) * 20.0) * 2.0;
        float _744 = _743 * (_706.x + (-0.5));
        float _745 = _743 * (_706.y + (-0.5));
        float _746 = _743 * (_706.z + (-0.5));
        float _753 = exp2((_713.w + (-0.5)) * 20.0) * 2.0;
        float _754 = _753 * (_713.x + (-0.5));
        float _755 = _753 * (_713.y + (-0.5));
        float _756 = _753 * (_713.z + (-0.5));
        float _763 = exp2((_720.w + (-0.5)) * 20.0) * 2.0;
        float _764 = _763 * (_720.x + (-0.5));
        float _765 = _763 * (_720.y + (-0.5));
        float _766 = _763 * (_720.z + (-0.5));
        float _767 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _768 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _769 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _770 = _734 * 0.5;
        float _771 = _744 * 0.5;
        float _772 = _754 * 0.5;
        float _773 = dot(vec3(_770, _771, _772), vec3(_770, _771, _772));
        float _778 = (_773 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_773);
        float _787 = (dot(vec3(_412, _413, _414), vec3(_778 * _770, _778 * _771, _778 * _772)) + 1.0) * 0.5;
        float _3662 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _797 = sqrt(((_771 * _771) + (_770 * _770)) + (_772 * _772)) / (_767 + 9.9999997473787516355514526367188e-06);
        float _3673 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _798 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _799 = _798 * 2.0;
        float _803 = (1.0 - _798) / (_798 + 1.0);
        float _3684 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _804 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _813 = ((((1.0 - _804) * (_799 + 2.0)) * exp2(log2(isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * (_799 + 1.0))) + _804) * _767;
        float _814 = _735 * 0.5;
        float _815 = _745 * 0.5;
        float _816 = _755 * 0.5;
        float _817 = dot(vec3(_814, _815, _816), vec3(_814, _815, _816));
        float _822 = (_817 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_817);
        float _830 = (dot(vec3(_412, _413, _414), vec3(_822 * _814, _822 * _815, _822 * _816)) + 1.0) * 0.5;
        float _3695 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _839 = sqrt(((_815 * _815) + (_814 * _814)) + (_816 * _816)) / (_768 + 9.9999997473787516355514526367188e-06);
        float _3706 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _840 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _841 = _840 * 2.0;
        float _845 = (1.0 - _840) / (_840 + 1.0);
        float _3717 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _846 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _855 = ((((1.0 - _846) * (_841 + 2.0)) * exp2(log2(isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * (_841 + 1.0))) + _846) * _768;
        float _856 = _736 * 0.5;
        float _857 = _746 * 0.5;
        float _858 = _756 * 0.5;
        float _859 = dot(vec3(_856, _857, _858), vec3(_856, _857, _858));
        float _864 = (_859 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_859);
        float _872 = (dot(vec3(_412, _413, _414), vec3(_864 * _856, _864 * _857, _864 * _858)) + 1.0) * 0.5;
        float _3728 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _881 = sqrt(((_857 * _857) + (_856 * _856)) + (_858 * _858)) / (_769 + 9.9999997473787516355514526367188e-06);
        float _3739 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _882 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _883 = _882 * 2.0;
        float _887 = (1.0 - _882) / (_882 + 1.0);
        float _3750 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _897 = ((((1.0 - _888) * (_883 + 2.0)) * exp2(log2(isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * (_883 + 1.0))) + _888) * _769;
        _905 = _736;
        _907 = _735;
        _908 = _734;
        _909 = _746;
        _910 = _745;
        _911 = _744;
        _912 = _756;
        _913 = _755;
        _914 = _754;
        _915 = _769;
        _916 = _768;
        _917 = _767;
        _918 = cbModelParam._m0[36u].z * (isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0)));
        _919 = cbModelParam._m0[36u].z * (isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0)));
        _920 = cbModelParam._m0[36u].z * (isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0)));
    }
    else
    {
        _905 = _906;
        _907 = _906;
        _908 = _906;
        _909 = _906;
        _910 = _906;
        _911 = _906;
        _912 = _906;
        _913 = _906;
        _914 = _906;
        _915 = _906;
        _916 = _906;
        _917 = _906;
        _918 = 0.0;
        _919 = 0.0;
        _920 = 0.0;
    }
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _946 = fma(_604, cbModelParam._m0[30u].z, fma(_600, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _596));
        float _950 = fma(_604, cbModelParam._m0[31u].z, fma(_600, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _596));
        float _954 = fma(_604, cbModelParam._m0[32u].z, fma(_600, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _596));
        float _977 = _596 + _412;
        float _978 = _600 + _413;
        float _979 = _604 + _414;
        float _989 = fma(_979, cbModelParam._m0[30u].z, fma(_978, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _977)) - _946;
        float _990 = fma(_979, cbModelParam._m0[31u].z, fma(_978, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _977)) - _950;
        float _991 = fma(_979, cbModelParam._m0[32u].z, fma(_978, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _977)) - _954;
        float _995 = inversesqrt(dot(vec3(_989, _990, _991), vec3(_989, _990, _991)));
        float _1008 = ((_995 * _989) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_946 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1009 = ((_995 * _990) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_950 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1010 = ((_995 * _991) / cbModelParam._m0[35u].z) + ((((((_954 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        float _1045 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1012.x + (-0.5));
        float _1047 = _1045 * (_1012.y + (-0.5));
        float _1048 = _1045 * (_1012.z + (-0.5));
        float _1055 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1019.x + (-0.5));
        float _1057 = _1055 * (_1019.y + (-0.5));
        float _1058 = _1055 * (_1019.z + (-0.5));
        float _1065 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1026.x + (-0.5));
        float _1067 = _1065 * (_1026.y + (-0.5));
        float _1068 = _1065 * (_1026.z + (-0.5));
        float _1075 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1033.x + (-0.5));
        float _1077 = _1075 * (_1033.y + (-0.5));
        float _1078 = _1075 * (_1033.z + (-0.5));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = _1046 * 0.5;
        float _1083 = _1056 * 0.5;
        float _1084 = _1066 * 0.5;
        float _1085 = dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084));
        float _1090 = (_1085 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1085);
        float _1098 = (dot(vec3(_412, _413, _414), vec3(_1090 * _1082, _1090 * _1083, _1090 * _1084)) + 1.0) * 0.5;
        float _3791 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1107 = sqrt(((_1083 * _1083) + (_1082 * _1082)) + (_1084 * _1084)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _3802 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1109 = _1108 * 2.0;
        float _1113 = (1.0 - _1108) / (_1108 + 1.0);
        float _3813 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1123 = ((((1.0 - _1114) * (_1109 + 2.0)) * exp2(log2(isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * (_1109 + 1.0))) + _1114) * _1079;
        float _1124 = _1047 * 0.5;
        float _1125 = _1057 * 0.5;
        float _1126 = _1067 * 0.5;
        float _1127 = dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126));
        float _1132 = (_1127 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1127);
        float _1140 = (dot(vec3(_412, _413, _414), vec3(_1132 * _1124, _1132 * _1125, _1132 * _1126)) + 1.0) * 0.5;
        float _3824 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1149 = sqrt(((_1125 * _1125) + (_1124 * _1124)) + (_1126 * _1126)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _3835 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1151 = _1150 * 2.0;
        float _1155 = (1.0 - _1150) / (_1150 + 1.0);
        float _3846 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1165 = ((((1.0 - _1156) * (_1151 + 2.0)) * exp2(log2(isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * (_1151 + 1.0))) + _1156) * _1080;
        float _1166 = _1048 * 0.5;
        float _1167 = _1058 * 0.5;
        float _1168 = _1068 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1182 = (dot(vec3(_412, _413, _414), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _3857 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1191 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _3868 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1193 = _1192 * 2.0;
        float _1197 = (1.0 - _1192) / (_1192 + 1.0);
        float _3879 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1207 = ((((1.0 - _1198) * (_1193 + 2.0)) * exp2(log2(isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_1193 + 1.0))) + _1198) * _1081;
        _1215 = _1048;
        _1216 = _1047;
        _1217 = _1046;
        _1218 = _1058;
        _1219 = _1057;
        _1220 = _1056;
        _1221 = _1068;
        _1222 = _1067;
        _1223 = _1066;
        _1224 = _1081;
        _1225 = _1080;
        _1226 = _1079;
        _1227 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)));
        _1228 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)));
        _1229 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)));
    }
    else
    {
        _1215 = _906;
        _1216 = _906;
        _1217 = _906;
        _1218 = _906;
        _1219 = _906;
        _1220 = _906;
        _1221 = _906;
        _1222 = _906;
        _1223 = _906;
        _1224 = _906;
        _1225 = _906;
        _1226 = _906;
        _1227 = 0.0;
        _1228 = 0.0;
        _1229 = 0.0;
    }
    float _1239 = (cbModelParam._m0[1u].x * (_1227 - _918)) + _918;
    float _1240 = (cbModelParam._m0[1u].x * (_1228 - _919)) + _919;
    float _1241 = (cbModelParam._m0[1u].x * (_1229 - _920)) + _920;
    float _1262 = fma(_1241, cbSceneParam._m0[89u].z, fma(_1240, cbSceneParam._m0[89u].y, _1239 * cbSceneParam._m0[89u].x));
    float _1265 = fma(_1241, cbSceneParam._m0[90u].z, fma(_1240, cbSceneParam._m0[90u].y, _1239 * cbSceneParam._m0[90u].x));
    float _1268 = fma(_1241, cbSceneParam._m0[91u].z, fma(_1240, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1239));
    float _1283 = _540 * 0.5;
    float _1284 = _541 * 0.5;
    float _1285 = _542 * 0.5;
    float _1286 = dot(vec4(_1283, _1284, _1285, 1.0), vec4(_1217, _1220, _1223, _1226));
    float _1289 = dot(vec4(_1283, _1284, _1285, 1.0), vec4(_1216, _1219, _1222, _1225));
    float _1292 = dot(vec4(_1283, _1284, _1285, 1.0), vec4(_1215, _1218, _1221, _1224));
    float _1326;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1299 = dot(vec4(_1283, _1284, _1285, 1.0), vec4(_905, _909, _912, _915));
        float _1303 = dot(vec4(_1283, _1284, _1285, 1.0), vec4(_907, _910, _913, _916));
        float _1307 = dot(vec4(_1283, _1284, _1285, 1.0), vec4(_908, _911, _914, _917));
        float _1314 = dot(vec4(cbModelParam._m0[39u]), vec4(_1283, _1284, _1285, 1.0));
        _1326 = dot(vec3(isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)), isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)), isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1314) ? 0.0 : (isnan(0.0) ? _1314 : max(0.0, _1314))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1326 = 1.0;
    }
    float _1337;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1328 = dot(vec4(cbModelParam._m0[40u]), vec4(_1283, _1284, _1285, 1.0));
        _1337 = dot(vec3(isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)), isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)), isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1328) ? 0.0 : (isnan(0.0) ? _1328 : max(0.0, _1328))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1337 = 1.0;
    }
    float _1341 = (_1337 * cbModelParam._m0[1u].x) + (_1326 * (1.0 - cbModelParam._m0[1u].x));
    float _1351 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _415);
    float _1352 = isnan(_1351) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1351 : min(cbModelParam._m0[25u].z, _1351));
    float _1434;
    float _1436;
    float _1438;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1401 = fma(_604, cbModelParam._m0[13u].z, fma(_600, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _596)) + cbModelParam._m0[13u].w;
        float _1405 = fma(_604, cbModelParam._m0[14u].z, fma(_600, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _596)) + cbModelParam._m0[14u].w;
        float _1409 = fma(_604, cbModelParam._m0[15u].z, fma(_600, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _596)) + cbModelParam._m0[15u].w;
        float _1412 = fma(_542, cbModelParam._m0[13u].z, fma(_541, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _540));
        float _1415 = fma(_542, cbModelParam._m0[14u].z, fma(_541, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _540));
        float _1418 = fma(_542, cbModelParam._m0[15u].z, fma(_541, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _540));
        float _1446;
        if (_1412 > 0.0)
        {
            _1446 = abs((1.0 - _1401) / _1412);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1412 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1401 + 1.0) / _1412);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1446 = frontier_phi_16_14_ladder;
        }
        float _1622;
        if (_1415 > 0.0)
        {
            _1622 = abs((1.0 - _1405) / _1415);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1415 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1405 + 1.0) / _1415);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1622 = frontier_phi_25_21_ladder;
        }
        float _1918;
        if (_1418 > 0.0)
        {
            _1918 = abs((1.0 - _1409) / _1418);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1418 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1409 + 1.0) / _1418);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1918 = frontier_phi_37_32_ladder;
        }
        float _1920 = isnan(_1622) ? _1446 : (isnan(_1446) ? _1622 : min(_1446, _1622));
        float _1921 = isnan(_1918) ? _1920 : (isnan(_1920) ? _1918 : min(_1920, _1918));
        float _1925 = (_1921 * _1412) + _1401;
        float _1926 = (_1921 * _1415) + _1405;
        float _1927 = (_1921 * _1418) + _1409;
        float _1928 = _1921 * 9.9999997473787516355514526367188e-05;
        float _1930 = (-1.0) - _1928;
        float _1932 = _1928 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1927 > _1932) || ((_1927 < _1930) || ((_1926 > _1932) || ((_1926 < _1930) || ((_1925 < _1930) || (_1925 > _1932))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2072 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1927, cbModelParam._m0[9u].z, fma(_1926, cbModelParam._m0[9u].y, _1925 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1927, cbModelParam._m0[10u].z, fma(_1926, cbModelParam._m0[10u].y, _1925 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1927, cbModelParam._m0[11u].z, fma(_1926, cbModelParam._m0[11u].y, _1925 * cbModelParam._m0[11u].x))), _1352);
            frontier_phi_15_37_ladder = _2072.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2072.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2072.z * cbModelParam._m0[1u].y;
        }
        _1434 = frontier_phi_15_37_ladder_1;
        _1436 = frontier_phi_15_37_ladder;
        _1438 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1422 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_540, _541, _542), _1352);
        _1434 = _1422.x * cbModelParam._m0[1u].y;
        _1436 = _1422.y * cbModelParam._m0[1u].y;
        _1438 = _1422.z * cbModelParam._m0[1u].y;
    }
    float _1442 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _415);
    float _1443 = isnan(_1442) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1442 : min(cbModelParam._m0[25u].w, _1442));
    float _1536;
    float _1538;
    float _1540;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1500 = fma(_604, cbModelParam._m0[21u].z, fma(_600, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _596)) + cbModelParam._m0[21u].w;
        float _1504 = fma(_604, cbModelParam._m0[22u].z, fma(_600, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _596)) + cbModelParam._m0[22u].w;
        float _1508 = fma(_604, cbModelParam._m0[23u].z, fma(_600, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _596)) + cbModelParam._m0[23u].w;
        float _1511 = fma(_542, cbModelParam._m0[21u].z, fma(_541, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _540));
        float _1514 = fma(_542, cbModelParam._m0[22u].z, fma(_541, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _540));
        float _1517 = fma(_542, cbModelParam._m0[23u].z, fma(_541, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _540));
        float _1627;
        if (_1511 > 0.0)
        {
            _1627 = abs((1.0 - _1500) / _1511);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1511 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1500 + 1.0) / _1511);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1627 = frontier_phi_27_23_ladder;
        }
        float _1945;
        if (_1514 > 0.0)
        {
            _1945 = abs((1.0 - _1504) / _1514);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1514 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1504 + 1.0) / _1514);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1945 = frontier_phi_39_34_ladder;
        }
        float _2283;
        if (_1517 > 0.0)
        {
            _2283 = abs((1.0 - _1508) / _1517);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1517 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1508 + 1.0) / _1517);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2283 = frontier_phi_49_46_ladder;
        }
        float _2285 = isnan(_1945) ? _1627 : (isnan(_1627) ? _1945 : min(_1627, _1945));
        float _2286 = isnan(_2283) ? _2285 : (isnan(_2285) ? _2283 : min(_2285, _2283));
        float _2290 = (_2286 * _1511) + _1500;
        float _2291 = (_2286 * _1514) + _1504;
        float _2292 = (_2286 * _1517) + _1508;
        float _2293 = _2286 * 9.9999997473787516355514526367188e-05;
        float _2294 = (-1.0) - _2293;
        float _2296 = _2293 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2292 > _2296) || ((_2292 < _2294) || ((_2291 > _2296) || ((_2291 < _2294) || ((_2290 < _2294) || (_2290 > _2296))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2414 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2292, cbModelParam._m0[17u].z, fma(_2291, cbModelParam._m0[17u].y, _2290 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2292, cbModelParam._m0[18u].z, fma(_2291, cbModelParam._m0[18u].y, _2290 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2292, cbModelParam._m0[19u].z, fma(_2291, cbModelParam._m0[19u].y, _2290 * cbModelParam._m0[19u].x))), _1443);
            frontier_phi_24_49_ladder = _2414.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2414.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2414.x * cbModelParam._m0[1u].z;
        }
        _1536 = frontier_phi_24_49_ladder_2;
        _1538 = frontier_phi_24_49_ladder_1;
        _1540 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1520 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_540, _541, _542), _1443);
        _1536 = _1520.x * cbModelParam._m0[1u].z;
        _1538 = _1520.y * cbModelParam._m0[1u].z;
        _1540 = _1520.z * cbModelParam._m0[1u].z;
    }
    float _1553 = (((_567 * _516) + _568) * _532) * ((cbModelParam._m0[1u].w * (_1536 - _1434)) + _1434);
    float _1555 = (((_567 * _518) + _568) * _532) * ((cbModelParam._m0[1u].w * (_1538 - _1436)) + _1436);
    float _1557 = (((_567 * _519) + _568) * _532) * ((cbModelParam._m0[1u].w * (_1540 - _1438)) + _1438);
    float _1560 = fma(_1557, cbSceneParam._m0[89u].z, fma(_1555, cbSceneParam._m0[89u].y, _1553 * cbSceneParam._m0[89u].x));
    float _1563 = fma(_1557, cbSceneParam._m0[90u].z, fma(_1555, cbSceneParam._m0[90u].y, _1553 * cbSceneParam._m0[90u].x));
    float _1566 = fma(_1557, cbSceneParam._m0[91u].z, fma(_1555, cbSceneParam._m0[91u].y, _1553 * cbSceneParam._m0[91u].x));
    float _1601 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1605 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1609 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1613 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1614 = _1601 / _1613;
    float _1615 = _1605 / _1613;
    float _1616 = _1609 / _1613;
    float _1763;
    float _1764;
    float _1765;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1643 = ((uint(_1616 > cbSceneParam._m0[59u].y) + uint(_1616 > cbSceneParam._m0[59u].x)) + uint(_1616 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1644 = _1643 + 43u;
        uint _1652 = _1643 + 44u;
        uint _1660 = _1643 + 45u;
        uint _1668 = _1643 + 46u;
        float _1679 = fma(_1613, cbSceneParam._m0[_1644].w, fma(_1609, cbSceneParam._m0[_1644].z, fma(_1605, cbSceneParam._m0[_1644].y, _1601 * cbSceneParam._m0[_1644].x)));
        float _1683 = fma(_1613, cbSceneParam._m0[_1652].w, fma(_1609, cbSceneParam._m0[_1652].z, fma(_1605, cbSceneParam._m0[_1652].y, _1601 * cbSceneParam._m0[_1652].x)));
        float _1691 = fma(_1613, cbSceneParam._m0[_1668].w, fma(_1609, cbSceneParam._m0[_1668].z, fma(_1605, cbSceneParam._m0[_1668].y, _1601 * cbSceneParam._m0[_1668].x)));
        float _1696 = cbSceneParam._m0[33u].z * _1691;
        float _1698 = cbSceneParam._m0[33u].w * _1691;
        float _1701 = fma(_1613, cbSceneParam._m0[_1660].w, fma(_1609, cbSceneParam._m0[_1660].z, fma(_1605, cbSceneParam._m0[_1660].y, _1601 * cbSceneParam._m0[_1660].x))) / _1691;
        float _1749 = (cbSceneParam._m0[33u].x - sqrt(((_1615 * _1615) + (_1614 * _1614)) + (_1616 * _1616))) * cbSceneParam._m0[33u].y;
        float _4005 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1756 = (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1696 + _1679) / _1691, (_1698 + _1683) / _1691), _1701), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1698 + _1679) / _1691, (_1683 - _1696) / _1691), _1701), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1679 - _1696) / _1691, (_1683 - _1698) / _1691), _1701), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1679 - _1698) / _1691, (_1696 + _1683) / _1691), _1701), 0.0)).x), vec4(0.25)));
        _1763 = 1.0 - (_1756 * cbSceneParam._m0[34u].x);
        _1764 = 1.0 - (_1756 * cbSceneParam._m0[34u].y);
        _1765 = 1.0 - (_1756 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1763 = 1.0;
        _1764 = 1.0;
        _1765 = 1.0;
    }
    float _1829;
    float _1831;
    float _1833;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1817 = fma(_1613, cbSceneParam._m0[63u].w, fma(_1609, cbSceneParam._m0[63u].z, fma(_1605, cbSceneParam._m0[63u].y, _1601 * cbSceneParam._m0[63u].x)));
        float _1818 = fma(_1613, cbSceneParam._m0[60u].w, fma(_1609, cbSceneParam._m0[60u].z, fma(_1605, cbSceneParam._m0[60u].y, _1601 * cbSceneParam._m0[60u].x))) / _1817;
        float _1819 = fma(_1613, cbSceneParam._m0[61u].w, fma(_1609, cbSceneParam._m0[61u].z, fma(_1605, cbSceneParam._m0[61u].y, _1601 * cbSceneParam._m0[61u].x))) / _1817;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1818 >= cbSceneParam._m0[64u].x) && (_1819 >= cbSceneParam._m0[64u].y)) && (_1818 <= cbSceneParam._m0[64u].z)) && (_1819 <= cbSceneParam._m0[64u].w))
        {
            float _1958 = fma(_1613, cbSceneParam._m0[62u].w, fma(_1609, cbSceneParam._m0[62u].z, fma(_1605, cbSceneParam._m0[62u].y, _1601 * cbSceneParam._m0[62u].x))) / _1817;
            float _1962 = isnan(cbSceneParam._m0[41u].w) ? _1958 : (isnan(_1958) ? cbSceneParam._m0[41u].w : max(_1958, cbSceneParam._m0[41u].w));
            float _2005 = (cbSceneParam._m0[33u].x - sqrt(((_1615 * _1615) + (_1614 * _1614)) + (_1616 * _1616))) * cbSceneParam._m0[33u].y;
            float _4021 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
            float _2012 = (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1818, cbSceneParam._m0[33u].w + _1819), _1962), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1818, _1819 - cbSceneParam._m0[33u].z), _1962), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1818 - cbSceneParam._m0[33u].z, _1819 - cbSceneParam._m0[33u].w), _1962), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1818 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1819), _1962), 0.0)).x), vec4(0.25)));
            float _2016 = 1.0 - (_2012 * cbSceneParam._m0[34u].x);
            float _2017 = 1.0 - (_2012 * cbSceneParam._m0[34u].y);
            float _2018 = 1.0 - (_2012 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2017) ? _1764 : (isnan(_1764) ? _2017 : min(_1764, _2017));
            frontier_phi_36_35_ladder_1 = isnan(_2018) ? _1765 : (isnan(_1765) ? _2018 : min(_1765, _2018));
            frontier_phi_36_35_ladder_2 = isnan(_2016) ? _1763 : (isnan(_1763) ? _2016 : min(_1763, _2016));
        }
        else
        {
            frontier_phi_36_35_ladder = _1764;
            frontier_phi_36_35_ladder_1 = _1765;
            frontier_phi_36_35_ladder_2 = _1763;
        }
        _1829 = frontier_phi_36_35_ladder_2;
        _1831 = frontier_phi_36_35_ladder;
        _1833 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1829 = _1763;
        _1831 = _1764;
        _1833 = _1765;
    }
    uvec4 _1838 = floatBitsToUint(cbInstanceData._m0[_490 + 5u]);
    uint _1840 = _1838.x * 14u;
    uint _1841 = _1840 + 13u;
    float _1848 = _532 + (-1.0);
    float _1853 = (cbLight._m0[_1841].x * _1848) + 1.0;
    float _1854 = (cbLight._m0[_1841].y * _1848) + 1.0;
    float _1855 = (cbLight._m0[_1841].z * _1848) + 1.0;
    float _1856 = (cbLight._m0[_1841].w * _1848) + 1.0;
    uint _1857 = _1840 + 5u;
    float _1863 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
    uint _1867 = _1840 + 4u;
    float _1877 = isnan(1.0) ? _1853 : (isnan(_1853) ? 1.0 : min(_1853, 1.0));
    uint _1881 = _1840 | 1u;
    float _1892 = dot(vec3(cbLight._m0[_1840].xyz), vec3(_412, _413, _414));
    float _1895 = dot(vec3(cbLight._m0[_1881].xyz), vec3(_412, _413, _414));
    float _4057 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _4068 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1900 = (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * 0.3183098733425140380859375;
    float _1902 = (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * 0.3183098733425140380859375;
    float _1909 = ((cbLight._m0[_1857].x * _1863) * _1902) + (((cbLight._m0[_1867].x * _1829) * _1877) * _1900);
    float _1910 = ((_1863 * cbLight._m0[_1857].y) * _1902) + (((cbLight._m0[_1867].y * _1831) * _1877) * _1900);
    float _1911 = ((_1863 * cbLight._m0[_1857].z) * _1902) + (((cbLight._m0[_1867].z * _1833) * _1877) * _1900);
    uvec4 _1915 = floatBitsToUint(cbLight._m0[_1840 + 12u]);
    bool _1917 = _1915.x == 0u;
    float _2019;
    float _2021;
    float _2023;
    if (_1917)
    {
        _2019 = _1909;
        _2021 = _1910;
        _2023 = _1911;
    }
    else
    {
        uint _2027 = _1840 + 6u;
        float _2043 = (dot(vec3(cbLight._m0[_1840 + 2u].xyz), vec3(_412, _413, _414)) * 0.5) + 0.5;
        float _2044 = _2043 * _2043;
        float _4079 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2045 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _2046 = isnan(1.0) ? _1855 : (isnan(_1855) ? 1.0 : min(_1855, 1.0));
        _2019 = (((cbLight._m0[_2027].x * 0.3183098733425140380859375) * _2045) * _2046) + _1909;
        _2021 = (((cbLight._m0[_2027].y * 0.3183098733425140380859375) * _2045) * _2046) + _1910;
        _2023 = (((cbLight._m0[_2027].z * 0.3183098733425140380859375) * _2045) * _2046) + _1911;
    }
    bool _2026 = _1915.y == 0u;
    float _2081;
    float _2083;
    float _2085;
    if (_2026)
    {
        _2081 = _2019;
        _2083 = _2021;
        _2085 = _2023;
    }
    else
    {
        uint _2254 = _1840 + 7u;
        float _2270 = (dot(vec3(cbLight._m0[_1840 + 3u].xyz), vec3(_412, _413, _414)) * 0.5) + 0.5;
        float _2271 = _2270 * _2270;
        float _4095 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2272 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _2273 = isnan(1.0) ? _1856 : (isnan(_1856) ? 1.0 : min(_1856, 1.0));
        _2081 = (((cbLight._m0[_2254].x * 0.3183098733425140380859375) * _2272) * _2273) + _2019;
        _2083 = (((cbLight._m0[_2254].y * 0.3183098733425140380859375) * _2272) * _2273) + _2021;
        _2085 = (((cbLight._m0[_2254].z * 0.3183098733425140380859375) * _2272) * _2273) + _2023;
    }
    uint _2088 = _1840 + 8u;
    float _2101 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1840].w)) * _415) * 0.949999988079071044921875);
    float _2102 = _2101 * _2101;
    float _2103 = cbLight._m0[_1840].x + _441;
    float _2104 = cbLight._m0[_1840].y + _442;
    float _2105 = cbLight._m0[_1840].z + _443;
    float _2109 = inversesqrt(dot(vec3(_2103, _2104, _2105), vec3(_2103, _2104, _2105)));
    float _2110 = _2109 * _2103;
    float _2111 = _2109 * _2104;
    float _2112 = _2109 * _2105;
    float _2113 = dot(vec3(_412, _413, _414), vec3(cbLight._m0[_1840].xyz));
    float _4111 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2116 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _4122 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _2117 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _2118 = dot(vec3(_412, _413, _414), vec3(_2110, _2111, _2112));
    float _4133 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2121 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _2122 = dot(vec3(cbLight._m0[_1840].xyz), vec3(_2110, _2111, _2112));
    float _4144 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2126 = _2102 * _2102;
    float _2130 = ((_2121 * _2121) * (_2126 + (-1.0))) + 1.0;
    float _2138 = exp2(log2(1.0 - (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) * 5.0);
    float _2139 = 0.959999978542327880859375 - _513;
    float _2141 = 0.959999978542327880859375 - _514;
    float _2142 = 0.959999978542327880859375 - _515;
    float _2149 = 1.0 - _2102;
    float _2160 = (0.5 / (((_2117 * ((_2116 * _2149) + _2102)) + 9.9999999392252902907785028219223e-09) + (((_2117 * _2149) + _2102) * _2116))) * _2116;
    float _4155 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2162 = (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_2126 / ((_2130 * _2130) * 3.141590118408203125));
    uint _2176 = _1840 + 9u;
    float _2187 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1881].w)) * _415) * 0.949999988079071044921875);
    float _2188 = _2187 * _2187;
    float _2189 = cbLight._m0[_1881].x + _441;
    float _2190 = cbLight._m0[_1881].y + _442;
    float _2191 = cbLight._m0[_1881].z + _443;
    float _2195 = inversesqrt(dot(vec3(_2189, _2190, _2191), vec3(_2189, _2190, _2191)));
    float _2196 = _2195 * _2189;
    float _2197 = _2195 * _2190;
    float _2198 = _2195 * _2191;
    float _2199 = dot(vec3(_412, _413, _414), vec3(cbLight._m0[_1881].xyz));
    float _4166 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2202 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _2203 = dot(vec3(_412, _413, _414), vec3(_2196, _2197, _2198));
    float _4177 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2206 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _2207 = dot(vec3(cbLight._m0[_1881].xyz), vec3(_2196, _2197, _2198));
    float _4188 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2211 = _2188 * _2188;
    float _2215 = ((_2206 * _2206) * (_2211 + (-1.0))) + 1.0;
    float _2222 = exp2(log2(1.0 - (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0)))) * 5.0);
    float _2229 = 1.0 - _2188;
    float _2239 = (0.5 / (((_2117 * ((_2202 * _2229) + _2188)) + 9.9999999392252902907785028219223e-09) + (((_2117 * _2229) + _2188) * _2202))) * _2202;
    float _4199 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2241 = (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_2211 / ((_2215 * _2215) * 3.141590118408203125));
    float _2251 = (((((_2222 * _2139) + _516) * cbLight._m0[_2176].x) * _2241) * _1863) + ((((cbLight._m0[_2088].x * _1829) * ((_2138 * _2139) + _516)) * _2162) * _1877);
    float _2252 = (((((_2222 * _2141) + _518) * cbLight._m0[_2176].y) * _2241) * _1863) + ((((cbLight._m0[_2088].y * _1831) * ((_2138 * _2141) + _518)) * _2162) * _1877);
    float _2253 = (((((_2222 * _2142) + _519) * cbLight._m0[_2176].z) * _2241) * _1863) + ((((cbLight._m0[_2088].z * _1833) * ((_2138 * _2142) + _519)) * _2162) * _1877);
    float _2309;
    float _2311;
    float _2313;
    if (_1917)
    {
        _2309 = _2251;
        _2311 = _2252;
        _2313 = _2253;
    }
    else
    {
        uint _2315 = _1840 + 2u;
        uint _2319 = _1840 + 10u;
        float _2333 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2315].w)) * _415) * 0.949999988079071044921875);
        float _2334 = _2333 * _2333;
        float _2335 = cbLight._m0[_2315].x + _441;
        float _2336 = cbLight._m0[_2315].y + _442;
        float _2337 = cbLight._m0[_2315].z + _443;
        float _2341 = inversesqrt(dot(vec3(_2335, _2336, _2337), vec3(_2335, _2336, _2337)));
        float _2342 = _2341 * _2335;
        float _2343 = _2341 * _2336;
        float _2344 = _2341 * _2337;
        float _2345 = dot(vec3(_412, _413, _414), vec3(cbLight._m0[_2315].xyz));
        float _4210 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2348 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _2349 = dot(vec3(_412, _413, _414), vec3(_2342, _2343, _2344));
        float _4221 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2352 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _2353 = dot(vec3(cbLight._m0[_2315].xyz), vec3(_2342, _2343, _2344));
        float _4232 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2357 = _2334 * _2334;
        float _2361 = ((_2352 * _2352) * (_2357 + (-1.0))) + 1.0;
        float _2368 = exp2(log2(1.0 - (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0)))) * 5.0);
        float _2375 = 1.0 - _2334;
        float _2385 = (0.5 / (((_2117 * ((_2348 * _2375) + _2334)) + 9.9999999392252902907785028219223e-09) + (((_2117 * _2375) + _2334) * _2348))) * _2348;
        float _4243 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2387 = (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_2357 / ((_2361 * _2361) * 3.141590118408203125));
        float _2388 = isnan(1.0) ? _1855 : (isnan(_1855) ? 1.0 : min(_1855, 1.0));
        _2309 = (((((_2368 * _2139) + _516) * cbLight._m0[_2319].x) * _2387) * _2388) + _2251;
        _2311 = (((((_2368 * _2141) + _518) * cbLight._m0[_2319].y) * _2387) * _2388) + _2252;
        _2313 = (((((_2368 * _2142) + _519) * cbLight._m0[_2319].z) * _2387) * _2388) + _2253;
    }
    float _2419;
    float _2421;
    float _2423;
    if (_2026)
    {
        _2419 = _2309;
        _2421 = _2311;
        _2423 = _2313;
    }
    else
    {
        uint _2430 = _1840 + 3u;
        uint _2434 = _1840 + 11u;
        float _2448 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2430].w)) * _415) * 0.949999988079071044921875);
        float _2449 = _2448 * _2448;
        float _2450 = cbLight._m0[_2430].x + _441;
        float _2451 = cbLight._m0[_2430].y + _442;
        float _2452 = cbLight._m0[_2430].z + _443;
        float _2456 = inversesqrt(dot(vec3(_2450, _2451, _2452), vec3(_2450, _2451, _2452)));
        float _2457 = _2456 * _2450;
        float _2458 = _2456 * _2451;
        float _2459 = _2456 * _2452;
        float _2460 = dot(vec3(_412, _413, _414), vec3(cbLight._m0[_2430].xyz));
        float _4259 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2463 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _2464 = dot(vec3(_412, _413, _414), vec3(_2457, _2458, _2459));
        float _4270 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2467 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _2468 = dot(vec3(cbLight._m0[_2430].xyz), vec3(_2457, _2458, _2459));
        float _4281 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2472 = _2449 * _2449;
        float _2476 = ((_2467 * _2467) * (_2472 + (-1.0))) + 1.0;
        float _2483 = exp2(log2(1.0 - (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) * 5.0);
        float _2490 = 1.0 - _2449;
        float _2500 = (0.5 / (((_2117 * ((_2463 * _2490) + _2449)) + 9.9999999392252902907785028219223e-09) + (((_2117 * _2490) + _2449) * _2463))) * _2463;
        float _4292 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2502 = (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_2472 / ((_2476 * _2476) * 3.141590118408203125));
        float _2503 = isnan(1.0) ? _1856 : (isnan(_1856) ? 1.0 : min(_1856, 1.0));
        _2419 = (((((_2483 * _2139) + _516) * cbLight._m0[_2434].x) * _2502) * _2503) + _2309;
        _2421 = (((((_2483 * _2141) + _518) * cbLight._m0[_2434].y) * _2502) * _2503) + _2311;
        _2423 = (((((_2483 * _2142) + _519) * cbLight._m0[_2434].z) * _2502) * _2503) + _2313;
    }
    float _2568;
    float _2570;
    float _2572;
    float _2574;
    float _2576;
    float _2578;
    if (_1838.y == 0u)
    {
        uvec4 _2524 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2525 = _2524.x;
        uint _2536 = uint((float(_2524.y) * floor(float(uint(cbSceneParam._m0[85u].y * _450) / _2525))) + floor(float(uint(cbSceneParam._m0[85u].x * _449) / _2525)));
        float _2546 = (log2(_1616 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2547 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        uint _2550 = uint(isnan(14.0) ? _2547 : (isnan(_2547) ? 14.0 : min(_2547, 14.0)));
        uvec4 _2555 = texelFetch(g_lightClusterGridBuffer, int(((_2550 << 2u) + (_2536 << 6u)) >> 2u));
        uint _2556 = _2555.x;
        uint _2557 = _2524.z;
        float _2635;
        float _2637;
        float _2639;
        float _2641;
        float _2643;
        float _2645;
        if (((((1u << ((_2557 >> 4u) & 15u)) + 4294967295u) & _2556) == 0u) || ((_2557 & 240u) == 0u))
        {
            _2635 = 0.0;
            _2637 = 0.0;
            _2639 = 0.0;
            _2641 = 0.0;
            _2643 = 0.0;
            _2645 = 0.0;
        }
        else
        {
            float _2636;
            float _2638;
            float _2640;
            float _2642;
            float _2644;
            float _2646;
            float _2779 = 0.0;
            float _2780 = 0.0;
            float _2781 = 0.0;
            float _2782 = 0.0;
            float _2783 = 0.0;
            float _2784 = 0.0;
            uint _2785 = 0u;
            uint _2794;
            bool _2795;
            for (;;)
            {
                _2794 = texelFetch(g_lightClassification, int((((_2550 << 5u) + (_2536 << 9u)) + (_2785 << 2u)) >> 2u)).x;
                _2795 = _2794 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2795)
                {
                    frontier_phi_68_pred = _2784;
                    frontier_phi_68_pred_1 = _2783;
                    frontier_phi_68_pred_2 = _2782;
                    frontier_phi_68_pred_3 = _2780;
                    frontier_phi_68_pred_4 = _2779;
                    frontier_phi_68_pred_5 = _2781;
                }
                else
                {
                    float _2903;
                    float _2904;
                    float _2905;
                    float _2906;
                    float _2907;
                    float _2908;
                    uint _2909;
                    _2903 = _2779;
                    _2904 = _2780;
                    _2905 = _2781;
                    _2906 = _2782;
                    _2907 = _2783;
                    _2908 = _2784;
                    _2909 = _2794;
                    float _2835;
                    float _2836;
                    float _2837;
                    float _2838;
                    float _2839;
                    float _2840;
                    for (;;)
                    {
                        uint _2913 = uint(findLSB(_2909)) + (_2785 << 5u);
                        uint _2910 = (_2909 + 4294967295u) & _2909;
                        uint _2915 = _2913 * 48u;
                        vec4 _2929 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2915)).x, texelFetch(g_PointLightRenderingBuffer, int(_2915 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2915 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2915 + 3u)).x));
                        uint _2935 = (_2913 * 48u) + 4u;
                        vec4 _2948 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2935)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 3u)).x));
                        uint _2954 = (_2913 * 48u) + 8u;
                        vec3 _2965 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2954)).x, texelFetch(g_PointLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2954 + 2u)).x));
                        float _2969 = _2929.x - _1614;
                        float _2970 = _2929.y - _1615;
                        float _2971 = _2929.z - _1616;
                        float _2972 = dot(vec3(_2969, _2970, _2971), vec3(_2969, _2970, _2971));
                        float _2975 = inversesqrt(_2972);
                        float _2976 = _2975 * _2969;
                        float _2977 = _2975 * _2970;
                        float _2978 = _2975 * _2971;
                        float _2979 = dot(vec3(_471, _474, _477), vec3(_2976, _2977, _2978));
                        float _2984 = 1.0 - (_2972 * _2929.w);
                        float _4318 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
                        float _2985 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                        float _2986 = sqrt(_2972) * _2948.w;
                        float _2989 = 1.39999997615814208984375 / (_2986 + 1.39999997615814208984375);
                        float _2990 = _2989 * _2989;
                        float _2993 = ((1.0 - _2990) * _2979) + _2990;
                        float _2996 = _2986 * _2986;
                        float _3000 = ((isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0))) * _2985) / ((_2996 * 0.699999988079071044921875) + 1.0);
                        float _3004 = (-0.0) - _1614;
                        float _3005 = (-0.0) - _1615;
                        float _3006 = (-0.0) - _1616;
                        float _3010 = inversesqrt(dot(vec3(_3004, _3005, _3006), vec3(_3004, _3005, _3006)));
                        float _3011 = _3010 * _3004;
                        float _3012 = _3010 * _3005;
                        float _3013 = _3010 * _3006;
                        float _3020 = exp2(log2(1.0 / ((_2996 * 3.5) + 5.0)) * 0.25);
                        float _3021 = 1.0 - _548;
                        float _3028 = sqrt(1.0 - ((1.0 - (_3021 * _3021)) * (1.0 - (_3020 * _3020))));
                        float _3029 = _3028 * _3028;
                        float _3030 = _3029 * _3029;
                        float _3031 = _3011 + _2976;
                        float _3032 = _3012 + _2977;
                        float _3033 = _3013 + _2978;
                        float _3037 = inversesqrt(dot(vec3(_3031, _3032, _3033), vec3(_3031, _3032, _3033)));
                        float _3041 = dot(vec3(_471, _474, _477), vec3(_3011, _3012, _3013));
                        float _4334 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                        float _3044 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                        float _3045 = dot(vec3(_471, _474, _477), vec3(_3037 * _3031, _3037 * _3032, _3037 * _3033));
                        float _4345 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                        float _3048 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                        float _3052 = ((_3048 * _3048) * (_3030 + (-1.0))) + 1.0;
                        float _3053 = _2989 * _3029;
                        float _3054 = _3053 * _3053;
                        float _3057 = ((1.0 - _3054) * _2979) + _3054;
                        float _4356 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                        float _3058 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                        float _3059 = 1.0 - _3029;
                        float _3069 = (0.5 / (((_3058 * ((_3044 * _3059) + _3029)) + 9.9999999392252902907785028219223e-09) + (((_3058 * _3059) + _3029) * _3044))) * _3058;
                        float _4367 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                        float _3080 = (((_3030 * 3.1415927410125732421875) * (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0)))) / ((_3052 * _3052) * ((_2996 * 2.1991131305694580078125) + 3.141590118408203125))) * _2985;
                        _2838 = (_3000 * _2948.x) + _2906;
                        _2839 = (_3000 * _2948.y) + _2907;
                        _2840 = (_3000 * _2948.z) + _2908;
                        _2835 = (_3080 * _2965.x) + _2903;
                        _2836 = (_3080 * _2965.y) + _2904;
                        _2837 = (_3080 * _2965.z) + _2905;
                        if (_2910 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2903 = _2835;
                            _2904 = _2836;
                            _2905 = _2837;
                            _2906 = _2838;
                            _2907 = _2839;
                            _2908 = _2840;
                            _2909 = _2910;
                        }
                    }
                    frontier_phi_68_pred = _2840;
                    frontier_phi_68_pred_1 = _2839;
                    frontier_phi_68_pred_2 = _2838;
                    frontier_phi_68_pred_3 = _2836;
                    frontier_phi_68_pred_4 = _2835;
                    frontier_phi_68_pred_5 = _2837;
                }
                _2646 = frontier_phi_68_pred;
                _2644 = frontier_phi_68_pred_1;
                _2642 = frontier_phi_68_pred_2;
                _2638 = frontier_phi_68_pred_3;
                _2636 = frontier_phi_68_pred_4;
                _2640 = frontier_phi_68_pred_5;
                uint _2786 = _2785 + 1u;
                if (_2786 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2779 = _2636;
                    _2780 = _2638;
                    _2781 = _2640;
                    _2782 = _2642;
                    _2783 = _2644;
                    _2784 = _2646;
                    _2785 = _2786;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2635 = _2636;
            _2637 = _2638;
            _2639 = _2640;
            _2641 = _2642;
            _2643 = _2644;
            _2645 = _2646;
        }
        uvec4 _2649 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2650 = _2649.z;
        uint _2652 = (_2650 >> 8u) & 15u;
        float _2747;
        float _2749;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        if (((4294967295u << _2652) & _2556) == 0u)
        {
            _2747 = _2635;
            _2749 = _2637;
            _2751 = _2639;
            _2753 = _2641;
            _2755 = _2643;
            _2757 = _2645;
        }
        else
        {
            float _2772 = inversesqrt(dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616)));
            float _2773 = _2772 * _1614;
            float _2774 = _2772 * _1615;
            float _2775 = _2772 * _1616;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2652 < ((_2650 >> 12u) & 15u))
            {
                float _2748;
                float _2750;
                float _2752;
                float _2754;
                float _2756;
                float _2758;
                float _2886 = _2635;
                float _2887 = _2637;
                float _2888 = _2639;
                float _2889 = _2641;
                float _2890 = _2643;
                float _2891 = _2645;
                uint _2892 = _2652;
                uint _2901;
                bool _2902;
                for (;;)
                {
                    _2901 = texelFetch(g_lightClassification, int((((_2550 << 5u) + (_2536 << 9u)) + (_2892 << 2u)) >> 2u)).x;
                    _2902 = _2901 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2902)
                    {
                        frontier_phi_74_pred = _2888;
                        frontier_phi_74_pred_1 = _2887;
                        frontier_phi_74_pred_2 = _2886;
                        frontier_phi_74_pred_3 = _2891;
                        frontier_phi_74_pred_4 = _2890;
                        frontier_phi_74_pred_5 = _2889;
                    }
                    else
                    {
                        float _3085;
                        float _3086;
                        float _3087;
                        float _3088;
                        float _3089;
                        float _3090;
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3098 = _2886;
                        float _3099 = _2887;
                        float _3100 = _2888;
                        float _3101 = _2889;
                        float _3102 = _2890;
                        float _3103 = _2891;
                        uint _3104 = _2901;
                        uint _3105;
                        vec4 _3130;
                        float _3131;
                        vec4 _3146;
                        vec3 _3158;
                        vec4 _3174;
                        vec4 _3190;
                        float _3237;
                        bool _3238;
                        for (;;)
                        {
                            uint _3115 = ((_2892 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3104));
                            _3105 = (_3104 + 4294967295u) & _3104;
                            uint _3117 = _3115 * 40u;
                            _3130 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3117)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 3u)).x));
                            _3131 = _3130.w;
                            uint _3133 = (_3115 * 40u) + 4u;
                            _3146 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3133)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 3u)).x));
                            uint _3148 = (_3115 * 40u) + 8u;
                            _3158 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 2u)).x));
                            uint _3161 = (_3115 * 40u) + 16u;
                            _3174 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3161)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 3u)).x));
                            uint _3177 = (_3115 * 40u) + 20u;
                            _3190 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3177)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 3u)).x));
                            uint _3193 = (_3115 * 40u) + 24u;
                            vec4 _3206 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3193)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 3u)).x));
                            uint _3212 = (_3115 * 40u) + 28u;
                            vec4 _3225 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3212)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 3u)).x));
                            _3237 = fma(_1616, _3225.z, fma(_1615, _3225.y, _3225.x * _1614)) + _3225.w;
                            _3238 = !((fma(_1616, _3206.z, fma(_1615, _3206.y, _3206.x * _1614)) + _3206.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3238)
                            {
                                float _3265 = _3130.x - _1614;
                                float _3266 = _3130.y - _1615;
                                float _3267 = _3130.z - _1616;
                                float _3268 = dot(vec3(_3265, _3266, _3267), vec3(_3265, _3266, _3267));
                                float _3271 = inversesqrt(_3268);
                                float _3272 = _3271 * _3265;
                                float _3273 = _3271 * _3266;
                                float _3274 = _3271 * _3267;
                                float _3278 = 1.0 - (_3268 / (_3131 * _3131));
                                float _4378 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                                float _3279 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                                float _3283 = sqrt(_3268) * _3146.w;
                                float _3285 = 1.39999997615814208984375 / (_3283 + 1.39999997615814208984375);
                                float _3286 = _3285 * _3285;
                                float _3289 = ((1.0 - _3286) * dot(vec3(_3272, _3273, _3274), vec3(_471, _474, _477))) + _3286;
                                float _3292 = _3283 * _3283;
                                float _3296 = (fma(_1616, _3174.z, fma(_1615, _3174.y, _3174.x * _1614)) + _3174.w) / _3237;
                                float _3297 = (fma(_1616, _3190.z, fma(_1615, _3190.y, _3190.x * _1614)) + _3190.w) / _3237;
                                float _3301 = 1.0 - dot(vec2(_3296, _3297), vec2(_3296, _3297));
                                float _4394 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                                float _3302 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                                float _3303 = _3302 * (((isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0))) * _3279) / ((_3292 * 0.699999988079071044921875) + 1.0));
                                float _3315 = exp2(log2(1.0 / ((_3292 * 3.5) + 5.0)) * 0.25);
                                float _3316 = 1.0 - _548;
                                float _3323 = sqrt(1.0 - ((1.0 - (_3316 * _3316)) * (1.0 - (_3315 * _3315))));
                                float _3324 = _3323 * _3323;
                                float _3325 = _3324 * _3324;
                                float _3326 = _3272 - _2773;
                                float _3327 = _3273 - _2774;
                                float _3328 = _3274 - _2775;
                                float _3332 = inversesqrt(dot(vec3(_3326, _3327, _3328), vec3(_3326, _3327, _3328)));
                                float _3336 = dot(vec3(_471, _474, _477), vec3((-0.0) - _2773, (-0.0) - _2774, (-0.0) - _2775));
                                float _4405 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                                float _3339 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                                float _3340 = dot(vec3(_471, _474, _477), vec3(_3332 * _3326, _3332 * _3327, _3332 * _3328));
                                float _4416 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                                float _3343 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                                float _3347 = ((_3343 * _3343) * (_3325 + (-1.0))) + 1.0;
                                float _3348 = _3285 * _3324;
                                float _3349 = _3348 * _3348;
                                float _3355 = ((1.0 - _3349) * dot(vec3(_471, _474, _477), vec3(_3272, _3273, _3274))) + _3349;
                                float _4427 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3356 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                                float _3357 = 1.0 - _3324;
                                float _3367 = (0.5 / (((_3356 * ((_3339 * _3357) + _3324)) + 9.9999999392252902907785028219223e-09) + (((_3356 * _3357) + _3324) * _3339))) * _3356;
                                float _4438 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                                float _3377 = (_3302 * _3279) * (((_3325 * 3.1415927410125732421875) * (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0)))) / ((_3347 * _3347) * ((_3292 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3377 * _3158.z;
                                frontier_phi_80_pred_1 = _3377 * _3158.y;
                                frontier_phi_80_pred_2 = _3377 * _3158.x;
                                frontier_phi_80_pred_3 = _3303 * _3146.z;
                                frontier_phi_80_pred_4 = _3303 * _3146.y;
                                frontier_phi_80_pred_5 = _3303 * _3146.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3383 = frontier_phi_80_pred;
                            _3382 = frontier_phi_80_pred_1;
                            _3381 = frontier_phi_80_pred_2;
                            _3386 = frontier_phi_80_pred_3;
                            _3385 = frontier_phi_80_pred_4;
                            _3384 = frontier_phi_80_pred_5;
                            _3088 = _3384 + _3101;
                            _3089 = _3385 + _3102;
                            _3090 = _3386 + _3103;
                            _3085 = _3381 + _3098;
                            _3086 = _3382 + _3099;
                            _3087 = _3383 + _3100;
                            if (_3105 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3098 = _3085;
                                _3099 = _3086;
                                _3100 = _3087;
                                _3101 = _3088;
                                _3102 = _3089;
                                _3103 = _3090;
                                _3104 = _3105;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3087;
                        frontier_phi_74_pred_1 = _3086;
                        frontier_phi_74_pred_2 = _3085;
                        frontier_phi_74_pred_3 = _3090;
                        frontier_phi_74_pred_4 = _3089;
                        frontier_phi_74_pred_5 = _3088;
                    }
                    _2752 = frontier_phi_74_pred;
                    _2750 = frontier_phi_74_pred_1;
                    _2748 = frontier_phi_74_pred_2;
                    _2758 = frontier_phi_74_pred_3;
                    _2756 = frontier_phi_74_pred_4;
                    _2754 = frontier_phi_74_pred_5;
                    uint _2893 = _2892 + 1u;
                    if (_2893 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2886 = _2748;
                        _2887 = _2750;
                        _2888 = _2752;
                        _2889 = _2754;
                        _2890 = _2756;
                        _2891 = _2758;
                        _2892 = _2893;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2756;
                frontier_phi_62_63_ladder_1 = _2754;
                frontier_phi_62_63_ladder_2 = _2752;
                frontier_phi_62_63_ladder_3 = _2758;
                frontier_phi_62_63_ladder_4 = _2750;
                frontier_phi_62_63_ladder_5 = _2748;
            }
            else
            {
                frontier_phi_62_63_ladder = _2643;
                frontier_phi_62_63_ladder_1 = _2641;
                frontier_phi_62_63_ladder_2 = _2639;
                frontier_phi_62_63_ladder_3 = _2645;
                frontier_phi_62_63_ladder_4 = _2637;
                frontier_phi_62_63_ladder_5 = _2635;
            }
            _2747 = frontier_phi_62_63_ladder_5;
            _2749 = frontier_phi_62_63_ladder_4;
            _2751 = frontier_phi_62_63_ladder_2;
            _2753 = frontier_phi_62_63_ladder_1;
            _2755 = frontier_phi_62_63_ladder;
            _2757 = frontier_phi_62_63_ladder_3;
        }
        float _2762 = isnan(1.0) ? _532 : (isnan(_532) ? 1.0 : min(_532, 1.0));
        _2568 = (_2762 * _2753) + _2081;
        _2570 = (_2762 * _2755) + _2083;
        _2572 = (_2762 * _2757) + _2085;
        _2574 = ((_2747 * _516) * _2762) + _2419;
        _2576 = ((_2749 * _518) * _2762) + _2421;
        _2578 = ((_2751 * _519) * _2762) + _2423;
    }
    else
    {
        _2568 = _2081;
        _2570 = _2083;
        _2572 = _2085;
        _2574 = _2419;
        _2576 = _2421;
        _2578 = _2423;
    }
    float _4454 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _4465 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _4476 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    uint _2598 = _490 + 6u;
    float _2606 = _449 / cbSceneParam._m0[86u].x;
    float _2607 = _450 / cbSceneParam._m0[86u].y;
    vec4 _2621 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2606, _2607, (log2((isnan(cbSceneParam._m0[77u].w) ? _436 : (isnan(_436) ? cbSceneParam._m0[77u].w : min(_436, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2623 = _2621.x;
    float _2624 = _2621.y;
    float _2625 = _2621.z;
    float _2626 = _2621.w;
    float _2697;
    float _2699;
    float _2701;
    float _2703;
    if (_436 > cbSceneParam._m0[78u].w)
    {
        float _2660 = isnan(_436) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _436 : min(cbSceneParam._m0[80u].w, _436));
        float _2661 = _2660 / _436;
        float _2672 = _2661 * _271;
        float _2673 = _272 * _2661;
        float _2674 = (-0.0) - _2673;
        float _2675 = _2661 * _273;
        float _2677 = (cbSceneParam._m0[77u].w * _2674) / _2660;
        float _2678 = _2677 + cbSceneParam._m0[79u].w;
        float _2679 = cbSceneParam._m0[79u].w - _2673;
        float _2685 = sqrt(((_2672 * _2672) + (_2673 * _2673)) + (_2675 * _2675));
        float _2688 = (1.0 - (cbSceneParam._m0[77u].w / _2660)) * _2685;
        float _2693 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2695 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2848;
        if (abs((_2674 - _2677) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2848 = ((((_2678 > 0.0) ? exp2(_2693 * _2678) : (2.0 - exp2(_2695 * _2678))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2688;
        }
        else
        {
            float _2808 = 1.0 / cbSceneParam._m0[80u].x;
            float _2809 = isnan(_2679) ? _2678 : (isnan(_2678) ? _2679 : max(_2678, _2679));
            float _2810 = isnan(_2679) ? _2678 : (isnan(_2678) ? _2679 : min(_2678, _2679));
            float _2819 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : min(_2809, 0.0));
            float _2820 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : min(_2810, 0.0));
            _2848 = ((abs(_2685 / _2674) * cbSceneParam._m0[80u].y) * ((((_2819 - _2820) * 2.0) - ((exp2(_2693 * (isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0)))) - exp2(_2693 * (isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0))))) * _2808)) - ((exp2(_2695 * _2819) - exp2(_2695 * _2820)) * _2808))) + (_2688 * cbSceneParam._m0[80u].z);
        }
        vec4 _2850 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2606, _2607, 1.0), 0.0);
        float _2859 = exp2((_2848 * (-1.44269502162933349609375)) * (1.0 - _2850.w));
        float _2860 = log2(_2859);
        float _2876 = log2(_2626);
        _2697 = (exp2(_2876 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2860 * cbSceneParam._m0[78u].x)) * _2850.x) / cbSceneParam._m0[78u].x)) + _2623;
        _2699 = (exp2(_2876 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2860 * cbSceneParam._m0[78u].y)) * _2850.y) / cbSceneParam._m0[78u].y)) + _2624;
        _2701 = (exp2(_2876 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2860 * cbSceneParam._m0[78u].z)) * _2850.z) / cbSceneParam._m0[78u].z)) + _2625;
        _2703 = _2859 * _2626;
    }
    else
    {
        _2697 = _2623;
        _2699 = _2624;
        _2701 = _2625;
        _2703 = _2626;
    }
    float _2715 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2716 = _2715 == 3.0;
    float _2717 = log2(_2703);
    float _2724 = exp2(_2717 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (_2568 + ((isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0))) * _532))) + ((_2574 + ((isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))) * _1341)) * cbPerFrame._m0[3u].x));
    float _2725 = exp2(_2717 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2570 + ((isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0))) * _532))) + ((_2576 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _1341)) * cbPerFrame._m0[3u].x));
    float _2726 = exp2(_2717 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2572 + ((isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0))) * _532))) + ((_2578 + ((isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))) * _1341)) * cbPerFrame._m0[3u].x));
    float _2735 = (_2715 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2735 * (_2716 ? _2724 : (_2724 + (cbSceneParam._m0[72u].w * _2697)));
    SV_Target.y = _2735 * (_2716 ? _2725 : (_2725 + (cbSceneParam._m0[72u].w * _2699)));
    SV_Target.z = _2735 * (_2716 ? _2726 : (_2726 + (cbSceneParam._m0[72u].w * _2701)));
    SV_Target.w = cbInstanceData._m0[_2598].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2598].w;
}


