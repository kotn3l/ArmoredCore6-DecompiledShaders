#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_POM_M1_AO_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_POM_M1_AO_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_POM_M1_AO_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _914;
float _3308;
float _3309;
float _3310;
float _3311;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    float _282 = dot(vec3(_271, _272, _273), vec3(_194, _195, _196));
    float _285 = dot(vec3(_271, _272, _273), vec3(_208, _209, _210));
    float _288 = dot(vec3(_271, _272, _273), vec3(_215, _216, _217));
    float _294 = inversesqrt(dot(vec3(_282, _285, _288), vec3(_282, _285, _288)));
    vec4 _307 = texture(sampler2D(M_AMSN_POM_M1_AO_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _318 = dot(vec4(_307), vec4(1.0, 0.0, 0.0, 0.0)) + (-0.5);
    float _326 = (((cbMtdParam._m0[10u].y * _282) * _294) * _318) + TEXCOORD.x;
    float _327 = (((_285 * cbMtdParam._m0[10u].y) * _294) * _318) + TEXCOORD.y;
    vec4 _339 = texture(sampler2D(M_AMSN_POM_M1_AO_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_326 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_327 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _344 = _339.x * cbMtdParam._m0[9u].x;
    float _345 = _339.y * cbMtdParam._m0[9u].y;
    float _346 = _339.z * cbMtdParam._m0[9u].z;
    vec4 _358 = texture(sampler2D(M_AMSN_POM_M1_AO_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _326) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _327) + cbTextureTilingScale._m0[1u].w));
    float _362 = _358.z;
    float _367 = (_358.x * 2.0) + (-1.0);
    float _369 = (_358.y * 2.0) + (-1.0);
    float _370 = dot(vec2(_367, _369), vec2(_367, _369));
    float _3320 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _375 = sqrt(1.0 - (isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0))));
    float _378 = fma(_375, _215, fma(_369, _208, _367 * _194));
    float _381 = fma(_375, _216, fma(_369, _209, _367 * _195));
    float _384 = fma(_375, _217, fma(_369, _210, _367 * _196));
    float _388 = inversesqrt(dot(vec3(_378, _381, _384), vec3(_378, _381, _384)));
    float _389 = _388 * _378;
    float _390 = _388 * _381;
    float _391 = _388 * _384;
    float _393 = cbMtdParam._m0[10u].x + _358.w;
    float _397 = inversesqrt(dot(vec3(_389, _390, _391), vec3(_389, _390, _391)));
    float _398 = _397 * _389;
    float _399 = _397 * _390;
    float _400 = _397 * _391;
    float _3331 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _401 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
    float _3342 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _3353 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _3364 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _3375 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _421 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _425 = inversesqrt(dot(vec3(_271, _272, _273), vec3(_271, _272, _273)));
    float _426 = _271 * _425;
    float _427 = _272 * _425;
    float _428 = _273 * _425;
    vec4 _433 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _435 = _433.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _594 = sqrt(((_271 * _271) + (_272 * _272)) + (_273 * _273));
        float _600 = (cbMatDynParam._m0[5u].x * _594) + cbMatDynParam._m0[5u].y;
        float _3386 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
        float _601 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
        float _605 = (cbMatDynParam._m0[5u].z * _594) + cbMatDynParam._m0[5u].w;
        float _3397 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0))) - _601)) + _601) < ((_435 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _447 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _448 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _468 = fma(_400, cbSceneParam._m0[5u].z, fma(_399, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _398));
    float _471 = fma(_400, cbSceneParam._m0[6u].z, fma(_399, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _398));
    float _474 = fma(_400, cbSceneParam._m0[7u].z, fma(_399, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _398));
    uint _487 = uint(roundEven(NORMAL.w)) * 13u;
    uint _489 = _487 + 9u;
    uint _490 = _489 + uint(cbMatDynParam._m0[0u].w);
    float _496 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0)))) * cbInstanceData._m0[_490].x;
    float _497 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0)))) * cbInstanceData._m0[_490].y;
    float _498 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0)))) * cbInstanceData._m0[_490].z;
    float _3408 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _499 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
    float _3419 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _500 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
    float _3430 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _501 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
    vec4 _510 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _447, cbSceneParam._m0[86u].y * _448));
    float _514 = ((isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0))) * TEXCOORD.z) * _510.x;
    float _515 = dot(vec3(_398, _399, _400), vec3(_426, _427, _428));
    float _518 = _515 * 2.0;
    float _522 = (_518 * _398) - _426;
    float _523 = (_518 * _399) - _427;
    float _524 = (_518 * _400) - _428;
    float _528 = abs(dot(vec3(_426, _427, _428), vec3(_398, _399, _400)));
    float _3441 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _530 = sqrt(_401);
    float _543 = exp2((_530 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_530 * 3.0));
    float _575 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _579 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _583 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _913;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _639 = fma(_583, cbModelParam._m0[26u].z, fma(_579, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _575));
        float _643 = fma(_583, cbModelParam._m0[27u].z, fma(_579, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _575));
        float _647 = fma(_583, cbModelParam._m0[28u].z, fma(_579, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _575));
        float _671 = _575 + _398;
        float _672 = _579 + _399;
        float _673 = _583 + _400;
        float _683 = fma(_673, cbModelParam._m0[26u].z, fma(_672, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _671)) - _639;
        float _684 = fma(_673, cbModelParam._m0[27u].z, fma(_672, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _671)) - _643;
        float _685 = fma(_673, cbModelParam._m0[28u].z, fma(_672, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _671)) - _647;
        float _689 = inversesqrt(dot(vec3(_683, _684, _685), vec3(_683, _684, _685)));
        float _702 = ((_689 * _683) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_639 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _703 = ((_689 * _684) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_643 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _704 = ((_689 * _685) / cbModelParam._m0[34u].z) + ((((((_647 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _707 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_702, _703, _704), 0.0);
        vec4 _714 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_702, _703, _704), 0.0);
        vec4 _721 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_702, _703, _704), 0.0);
        vec4 _728 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_702, _703, _704), 0.0);
        float _741 = exp2((_707.w + (-0.5)) * 20.0) * 2.0;
        float _742 = _741 * (_707.x + (-0.5));
        float _743 = _741 * (_707.y + (-0.5));
        float _744 = _741 * (_707.z + (-0.5));
        float _751 = exp2((_714.w + (-0.5)) * 20.0) * 2.0;
        float _752 = _751 * (_714.x + (-0.5));
        float _753 = _751 * (_714.y + (-0.5));
        float _754 = _751 * (_714.z + (-0.5));
        float _761 = exp2((_721.w + (-0.5)) * 20.0) * 2.0;
        float _762 = _761 * (_721.x + (-0.5));
        float _763 = _761 * (_721.y + (-0.5));
        float _764 = _761 * (_721.z + (-0.5));
        float _771 = exp2((_728.w + (-0.5)) * 20.0) * 2.0;
        float _772 = _771 * (_728.x + (-0.5));
        float _773 = _771 * (_728.y + (-0.5));
        float _774 = _771 * (_728.z + (-0.5));
        float _775 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _776 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _777 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _778 = _742 * 0.5;
        float _779 = _752 * 0.5;
        float _780 = _762 * 0.5;
        float _781 = dot(vec3(_778, _779, _780), vec3(_778, _779, _780));
        float _786 = (_781 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_781);
        float _795 = (dot(vec3(_398, _399, _400), vec3(_786 * _778, _786 * _779, _786 * _780)) + 1.0) * 0.5;
        float _3467 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _805 = sqrt(((_779 * _779) + (_778 * _778)) + (_780 * _780)) / (_775 + 9.9999997473787516355514526367188e-06);
        float _3478 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _806 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _807 = _806 * 2.0;
        float _811 = (1.0 - _806) / (_806 + 1.0);
        float _3489 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _812 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _821 = ((((1.0 - _812) * (_807 + 2.0)) * exp2(log2(isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))) * (_807 + 1.0))) + _812) * _775;
        float _822 = _743 * 0.5;
        float _823 = _753 * 0.5;
        float _824 = _763 * 0.5;
        float _825 = dot(vec3(_822, _823, _824), vec3(_822, _823, _824));
        float _830 = (_825 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_825);
        float _838 = (dot(vec3(_398, _399, _400), vec3(_830 * _822, _830 * _823, _830 * _824)) + 1.0) * 0.5;
        float _3500 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _847 = sqrt(((_823 * _823) + (_822 * _822)) + (_824 * _824)) / (_776 + 9.9999997473787516355514526367188e-06);
        float _3511 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _848 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _849 = _848 * 2.0;
        float _853 = (1.0 - _848) / (_848 + 1.0);
        float _3522 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _854 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _863 = ((((1.0 - _854) * (_849 + 2.0)) * exp2(log2(isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))) * (_849 + 1.0))) + _854) * _776;
        float _864 = _744 * 0.5;
        float _865 = _754 * 0.5;
        float _866 = _764 * 0.5;
        float _867 = dot(vec3(_864, _865, _866), vec3(_864, _865, _866));
        float _872 = (_867 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_867);
        float _880 = (dot(vec3(_398, _399, _400), vec3(_872 * _864, _872 * _865, _872 * _866)) + 1.0) * 0.5;
        float _3533 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _889 = sqrt(((_865 * _865) + (_864 * _864)) + (_866 * _866)) / (_777 + 9.9999997473787516355514526367188e-06);
        float _3544 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _891 = _890 * 2.0;
        float _895 = (1.0 - _890) / (_890 + 1.0);
        float _3555 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _905 = ((((1.0 - _896) * (_891 + 2.0)) * exp2(log2(isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))) * (_891 + 1.0))) + _896) * _777;
        _913 = _744;
        _915 = _743;
        _916 = _742;
        _917 = _754;
        _918 = _753;
        _919 = _752;
        _920 = _764;
        _921 = _763;
        _922 = _762;
        _923 = _777;
        _924 = _776;
        _925 = _775;
        _926 = cbModelParam._m0[36u].z * (isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0)));
        _927 = cbModelParam._m0[36u].z * (isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0)));
        _928 = cbModelParam._m0[36u].z * (isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0)));
    }
    else
    {
        _913 = _914;
        _915 = _914;
        _916 = _914;
        _917 = _914;
        _918 = _914;
        _919 = _914;
        _920 = _914;
        _921 = _914;
        _922 = _914;
        _923 = _914;
        _924 = _914;
        _925 = _914;
        _926 = 0.0;
        _927 = 0.0;
        _928 = 0.0;
    }
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _957 = fma(_583, cbModelParam._m0[30u].z, fma(_579, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _575));
        float _961 = fma(_583, cbModelParam._m0[31u].z, fma(_579, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _575));
        float _965 = fma(_583, cbModelParam._m0[32u].z, fma(_579, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _575));
        float _988 = _575 + _398;
        float _989 = _579 + _399;
        float _990 = _583 + _400;
        float _1000 = fma(_990, cbModelParam._m0[30u].z, fma(_989, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _988)) - _957;
        float _1001 = fma(_990, cbModelParam._m0[31u].z, fma(_989, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _988)) - _961;
        float _1002 = fma(_990, cbModelParam._m0[32u].z, fma(_989, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _988)) - _965;
        float _1006 = inversesqrt(dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002)));
        float _1019 = ((_1006 * _1000) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_957 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1020 = ((_1006 * _1001) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_961 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1021 = ((_1006 * _1002) / cbModelParam._m0[35u].z) + ((((((_965 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1019, _1020, _1021), 0.0);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1019, _1020, _1021), 0.0);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1019, _1020, _1021), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1019, _1020, _1021), 0.0);
        float _1056 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1023.x + (-0.5));
        float _1058 = _1056 * (_1023.y + (-0.5));
        float _1059 = _1056 * (_1023.z + (-0.5));
        float _1066 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1030.x + (-0.5));
        float _1068 = _1066 * (_1030.y + (-0.5));
        float _1069 = _1066 * (_1030.z + (-0.5));
        float _1076 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1037.x + (-0.5));
        float _1078 = _1076 * (_1037.y + (-0.5));
        float _1079 = _1076 * (_1037.z + (-0.5));
        float _1086 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1044.x + (-0.5));
        float _1088 = _1086 * (_1044.y + (-0.5));
        float _1089 = _1086 * (_1044.z + (-0.5));
        float _1090 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1091 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1092 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1093 = _1057 * 0.5;
        float _1094 = _1067 * 0.5;
        float _1095 = _1077 * 0.5;
        float _1096 = dot(vec3(_1093, _1094, _1095), vec3(_1093, _1094, _1095));
        float _1101 = (_1096 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1096);
        float _1109 = (dot(vec3(_398, _399, _400), vec3(_1101 * _1093, _1101 * _1094, _1101 * _1095)) + 1.0) * 0.5;
        float _3596 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1118 = sqrt(((_1094 * _1094) + (_1093 * _1093)) + (_1095 * _1095)) / (_1090 + 9.9999997473787516355514526367188e-06);
        float _3607 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1120 = _1119 * 2.0;
        float _1124 = (1.0 - _1119) / (_1119 + 1.0);
        float _3618 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1134 = ((((1.0 - _1125) * (_1120 + 2.0)) * exp2(log2(isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_1120 + 1.0))) + _1125) * _1090;
        float _1135 = _1058 * 0.5;
        float _1136 = _1068 * 0.5;
        float _1137 = _1078 * 0.5;
        float _1138 = dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137));
        float _1143 = (_1138 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1138);
        float _1151 = (dot(vec3(_398, _399, _400), vec3(_1143 * _1135, _1143 * _1136, _1143 * _1137)) + 1.0) * 0.5;
        float _3629 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1160 = sqrt(((_1136 * _1136) + (_1135 * _1135)) + (_1137 * _1137)) / (_1091 + 9.9999997473787516355514526367188e-06);
        float _3640 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1162 = _1161 * 2.0;
        float _1166 = (1.0 - _1161) / (_1161 + 1.0);
        float _3651 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1176 = ((((1.0 - _1167) * (_1162 + 2.0)) * exp2(log2(isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_1162 + 1.0))) + _1167) * _1091;
        float _1177 = _1059 * 0.5;
        float _1178 = _1069 * 0.5;
        float _1179 = _1079 * 0.5;
        float _1180 = dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179));
        float _1185 = (_1180 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1180);
        float _1193 = (dot(vec3(_398, _399, _400), vec3(_1185 * _1177, _1185 * _1178, _1185 * _1179)) + 1.0) * 0.5;
        float _3662 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1202 = sqrt(((_1178 * _1178) + (_1177 * _1177)) + (_1179 * _1179)) / (_1092 + 9.9999997473787516355514526367188e-06);
        float _3673 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1204 = _1203 * 2.0;
        float _1208 = (1.0 - _1203) / (_1203 + 1.0);
        float _3684 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1218 = ((((1.0 - _1209) * (_1204 + 2.0)) * exp2(log2(isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * (_1204 + 1.0))) + _1209) * _1092;
        _1226 = _1059;
        _1227 = _1058;
        _1228 = _1057;
        _1229 = _1069;
        _1230 = _1068;
        _1231 = _1067;
        _1232 = _1079;
        _1233 = _1078;
        _1234 = _1077;
        _1235 = _1092;
        _1236 = _1091;
        _1237 = _1090;
        _1238 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0)));
        _1239 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0)));
        _1240 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)));
    }
    else
    {
        _1226 = _914;
        _1227 = _914;
        _1228 = _914;
        _1229 = _914;
        _1230 = _914;
        _1231 = _914;
        _1232 = _914;
        _1233 = _914;
        _1234 = _914;
        _1235 = _914;
        _1236 = _914;
        _1237 = _914;
        _1238 = 0.0;
        _1239 = 0.0;
        _1240 = 0.0;
    }
    float _1250 = (cbModelParam._m0[1u].x * (_1238 - _926)) + _926;
    float _1251 = (cbModelParam._m0[1u].x * (_1239 - _927)) + _927;
    float _1252 = (cbModelParam._m0[1u].x * (_1240 - _928)) + _928;
    float _1273 = fma(_1252, cbSceneParam._m0[89u].z, fma(_1251, cbSceneParam._m0[89u].y, _1250 * cbSceneParam._m0[89u].x));
    float _1276 = fma(_1252, cbSceneParam._m0[90u].z, fma(_1251, cbSceneParam._m0[90u].y, _1250 * cbSceneParam._m0[90u].x));
    float _1279 = fma(_1252, cbSceneParam._m0[91u].z, fma(_1251, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1250));
    float _1294 = _522 * 0.5;
    float _1295 = _523 * 0.5;
    float _1296 = _524 * 0.5;
    float _1297 = dot(vec4(_1294, _1295, _1296, 1.0), vec4(_1228, _1231, _1234, _1237));
    float _1300 = dot(vec4(_1294, _1295, _1296, 1.0), vec4(_1227, _1230, _1233, _1236));
    float _1303 = dot(vec4(_1294, _1295, _1296, 1.0), vec4(_1226, _1229, _1232, _1235));
    float _1337;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1310 = dot(vec4(_1294, _1295, _1296, 1.0), vec4(_913, _917, _920, _923));
        float _1314 = dot(vec4(_1294, _1295, _1296, 1.0), vec4(_915, _918, _921, _924));
        float _1318 = dot(vec4(_1294, _1295, _1296, 1.0), vec4(_916, _919, _922, _925));
        float _1325 = dot(vec4(cbModelParam._m0[39u]), vec4(_1294, _1295, _1296, 1.0));
        _1337 = dot(vec3(isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)), isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)), isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1325) ? 0.0 : (isnan(0.0) ? _1325 : max(0.0, _1325))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1337 = 1.0;
    }
    float _1348;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1339 = dot(vec4(cbModelParam._m0[40u]), vec4(_1294, _1295, _1296, 1.0));
        _1348 = dot(vec3(isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)), isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)), isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1339) ? 0.0 : (isnan(0.0) ? _1339 : max(0.0, _1339))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1348 = 1.0;
    }
    float _1352 = (_1348 * cbModelParam._m0[1u].x) + (_1337 * (1.0 - cbModelParam._m0[1u].x));
    float _1362 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _401);
    float _1363 = isnan(_1362) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1362 : min(cbModelParam._m0[25u].z, _1362));
    float _1445;
    float _1447;
    float _1449;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1412 = fma(_583, cbModelParam._m0[13u].z, fma(_579, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _575)) + cbModelParam._m0[13u].w;
        float _1416 = fma(_583, cbModelParam._m0[14u].z, fma(_579, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _575)) + cbModelParam._m0[14u].w;
        float _1420 = fma(_583, cbModelParam._m0[15u].z, fma(_579, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _575)) + cbModelParam._m0[15u].w;
        float _1423 = fma(_524, cbModelParam._m0[13u].z, fma(_523, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _522));
        float _1426 = fma(_524, cbModelParam._m0[14u].z, fma(_523, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _522));
        float _1429 = fma(_524, cbModelParam._m0[15u].z, fma(_523, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _522));
        float _1457;
        if (_1423 > 0.0)
        {
            _1457 = abs((1.0 - _1412) / _1423);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1423 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1412 + 1.0) / _1423);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1457 = frontier_phi_19_17_ladder;
        }
        float _1684;
        if (_1426 > 0.0)
        {
            _1684 = abs((1.0 - _1416) / _1426);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1426 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1416 + 1.0) / _1426);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1684 = frontier_phi_28_24_ladder;
        }
        float _1930;
        if (_1429 > 0.0)
        {
            _1930 = abs((1.0 - _1420) / _1429);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1429 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1420 + 1.0) / _1429);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1930 = frontier_phi_40_35_ladder;
        }
        float _1932 = isnan(_1684) ? _1457 : (isnan(_1457) ? _1684 : min(_1457, _1684));
        float _1933 = isnan(_1930) ? _1932 : (isnan(_1932) ? _1930 : min(_1932, _1930));
        float _1937 = (_1933 * _1423) + _1412;
        float _1938 = (_1933 * _1426) + _1416;
        float _1939 = (_1933 * _1429) + _1420;
        float _1940 = _1933 * 9.9999997473787516355514526367188e-05;
        float _1942 = (-1.0) - _1940;
        float _1944 = _1940 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1939 > _1944) || ((_1939 < _1942) || ((_1938 > _1944) || ((_1938 < _1942) || ((_1937 < _1942) || (_1937 > _1944))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2063 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1939, cbModelParam._m0[9u].z, fma(_1938, cbModelParam._m0[9u].y, _1937 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1939, cbModelParam._m0[10u].z, fma(_1938, cbModelParam._m0[10u].y, _1937 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1939, cbModelParam._m0[11u].z, fma(_1938, cbModelParam._m0[11u].y, _1937 * cbModelParam._m0[11u].x))), _1363);
            frontier_phi_18_40_ladder = _2063.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2063.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2063.x * cbModelParam._m0[1u].y;
        }
        _1445 = frontier_phi_18_40_ladder_2;
        _1447 = frontier_phi_18_40_ladder_1;
        _1449 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1433 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_522, _523, _524), _1363);
        _1445 = _1433.x * cbModelParam._m0[1u].y;
        _1447 = _1433.y * cbModelParam._m0[1u].y;
        _1449 = _1433.z * cbModelParam._m0[1u].y;
    }
    float _1453 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _401);
    float _1454 = isnan(_1453) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1453 : min(cbModelParam._m0[25u].w, _1453));
    float _1547;
    float _1549;
    float _1551;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1511 = fma(_583, cbModelParam._m0[21u].z, fma(_579, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _575)) + cbModelParam._m0[21u].w;
        float _1515 = fma(_583, cbModelParam._m0[22u].z, fma(_579, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _575)) + cbModelParam._m0[22u].w;
        float _1519 = fma(_583, cbModelParam._m0[23u].z, fma(_579, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _575)) + cbModelParam._m0[23u].w;
        float _1522 = fma(_524, cbModelParam._m0[21u].z, fma(_523, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _522));
        float _1525 = fma(_524, cbModelParam._m0[22u].z, fma(_523, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _522));
        float _1528 = fma(_524, cbModelParam._m0[23u].z, fma(_523, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _522));
        float _1689;
        if (_1522 > 0.0)
        {
            _1689 = abs((1.0 - _1511) / _1522);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1522 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1511 + 1.0) / _1522);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1689 = frontier_phi_30_26_ladder;
        }
        float _1957;
        if (_1525 > 0.0)
        {
            _1957 = abs((1.0 - _1515) / _1525);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1525 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1515 + 1.0) / _1525);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1957 = frontier_phi_42_37_ladder;
        }
        float _2162;
        if (_1528 > 0.0)
        {
            _2162 = abs((1.0 - _1519) / _1528);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1528 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1519 + 1.0) / _1528);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2162 = frontier_phi_51_48_ladder;
        }
        float _2164 = isnan(_1957) ? _1689 : (isnan(_1689) ? _1957 : min(_1689, _1957));
        float _2165 = isnan(_2162) ? _2164 : (isnan(_2164) ? _2162 : min(_2164, _2162));
        float _2169 = (_2165 * _1522) + _1511;
        float _2170 = (_2165 * _1525) + _1515;
        float _2171 = (_2165 * _1528) + _1519;
        float _2172 = _2165 * 9.9999997473787516355514526367188e-05;
        float _2173 = (-1.0) - _2172;
        float _2175 = _2172 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2171 > _2175) || ((_2171 < _2173) || ((_2170 > _2175) || ((_2170 < _2173) || ((_2169 < _2173) || (_2169 > _2175))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2369 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2171, cbModelParam._m0[17u].z, fma(_2170, cbModelParam._m0[17u].y, _2169 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2171, cbModelParam._m0[18u].z, fma(_2170, cbModelParam._m0[18u].y, _2169 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2171, cbModelParam._m0[19u].z, fma(_2170, cbModelParam._m0[19u].y, _2169 * cbModelParam._m0[19u].x))), _1454);
            frontier_phi_27_51_ladder = _2369.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2369.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2369.x * cbModelParam._m0[1u].z;
        }
        _1547 = frontier_phi_27_51_ladder_2;
        _1549 = frontier_phi_27_51_ladder_1;
        _1551 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1531 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_522, _523, _524), _1454);
        _1547 = _1531.x * cbModelParam._m0[1u].z;
        _1549 = _1531.y * cbModelParam._m0[1u].z;
        _1551 = _1531.z * cbModelParam._m0[1u].z;
    }
    float _1563 = ((((1.0 - _543) * ((_530 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_543 * _530)) * _514;
    float _1564 = _1563 * ((cbModelParam._m0[1u].w * (_1547 - _1445)) + _1445);
    float _1565 = _1563 * ((cbModelParam._m0[1u].w * (_1549 - _1447)) + _1447);
    float _1566 = _1563 * ((cbModelParam._m0[1u].w * (_1551 - _1449)) + _1449);
    float _1569 = fma(_1566, cbSceneParam._m0[89u].z, fma(_1565, cbSceneParam._m0[89u].y, _1564 * cbSceneParam._m0[89u].x));
    float _1572 = fma(_1566, cbSceneParam._m0[90u].z, fma(_1565, cbSceneParam._m0[90u].y, _1564 * cbSceneParam._m0[90u].x));
    float _1575 = fma(_1566, cbSceneParam._m0[91u].z, fma(_1565, cbSceneParam._m0[91u].y, _1564 * cbSceneParam._m0[91u].x));
    vec4 _1583 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_447, _448));
    float _1585 = _1583.w;
    float _1597 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1585);
    float _1598 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1585);
    float _1599 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1585);
    uvec4 _1603 = floatBitsToUint(cbInstanceData._m0[_487 + 5u]);
    uint _1605 = _1603.x * 14u;
    uint _1606 = _1605 + 13u;
    float _1613 = _514 + (-1.0);
    float _1618 = (cbLight._m0[_1606].x * _1613) + 1.0;
    float _1619 = (cbLight._m0[_1606].y * _1613) + 1.0;
    float _1620 = (cbLight._m0[_1606].z * _1613) + 1.0;
    float _1621 = (cbLight._m0[_1606].w * _1613) + 1.0;
    uint _1622 = _1605 + 5u;
    float _1628 = isnan(1.0) ? _1619 : (isnan(_1619) ? 1.0 : min(_1619, 1.0));
    uint _1632 = _1605 + 4u;
    float _1642 = isnan(1.0) ? _1618 : (isnan(_1618) ? 1.0 : min(_1618, 1.0));
    uint _1646 = _1605 | 1u;
    float _1657 = dot(vec3(cbLight._m0[_1605].xyz), vec3(_398, _399, _400));
    float _1660 = dot(vec3(cbLight._m0[_1646].xyz), vec3(_398, _399, _400));
    float _3820 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
    float _3831 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
    float _1665 = (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * 0.3183098733425140380859375;
    float _1667 = (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * 0.3183098733425140380859375;
    float _1674 = ((cbLight._m0[_1622].x * _1628) * _1667) + (((cbLight._m0[_1632].x * _1597) * _1642) * _1665);
    float _1675 = ((_1628 * cbLight._m0[_1622].y) * _1667) + (((cbLight._m0[_1632].y * _1598) * _1642) * _1665);
    float _1676 = ((_1628 * cbLight._m0[_1622].z) * _1667) + (((cbLight._m0[_1632].z * _1599) * _1642) * _1665);
    uvec4 _1681 = floatBitsToUint(cbLight._m0[_1605 + 12u]);
    bool _1683 = _1681.x == 0u;
    float _1694;
    float _1696;
    float _1698;
    if (_1683)
    {
        _1694 = _1674;
        _1696 = _1675;
        _1698 = _1676;
    }
    else
    {
        uint _1702 = _1605 + 6u;
        float _1718 = (dot(vec3(cbLight._m0[_1605 + 2u].xyz), vec3(_398, _399, _400)) * 0.5) + 0.5;
        float _1719 = _1718 * _1718;
        float _3842 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1720 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1721 = isnan(1.0) ? _1620 : (isnan(_1620) ? 1.0 : min(_1620, 1.0));
        _1694 = (((cbLight._m0[_1702].x * 0.3183098733425140380859375) * _1720) * _1721) + _1674;
        _1696 = (((cbLight._m0[_1702].y * 0.3183098733425140380859375) * _1720) * _1721) + _1675;
        _1698 = (((cbLight._m0[_1702].z * 0.3183098733425140380859375) * _1720) * _1721) + _1676;
    }
    bool _1701 = _1681.y == 0u;
    float _1739;
    float _1741;
    float _1743;
    if (_1701)
    {
        _1739 = _1694;
        _1741 = _1696;
        _1743 = _1698;
    }
    else
    {
        uint _1901 = _1605 + 7u;
        float _1917 = (dot(vec3(cbLight._m0[_1605 + 3u].xyz), vec3(_398, _399, _400)) * 0.5) + 0.5;
        float _1918 = _1917 * _1917;
        float _3858 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1919 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1920 = isnan(1.0) ? _1621 : (isnan(_1621) ? 1.0 : min(_1621, 1.0));
        _1739 = (((cbLight._m0[_1901].x * 0.3183098733425140380859375) * _1919) * _1920) + _1694;
        _1741 = (((cbLight._m0[_1901].y * 0.3183098733425140380859375) * _1919) * _1920) + _1696;
        _1743 = (((cbLight._m0[_1901].z * 0.3183098733425140380859375) * _1919) * _1920) + _1698;
    }
    uint _1746 = _1605 + 8u;
    float _1759 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1605].w)) * _401) * 0.949999988079071044921875);
    float _1760 = _1759 * _1759;
    float _1761 = cbLight._m0[_1605].x + _426;
    float _1762 = cbLight._m0[_1605].y + _427;
    float _1763 = cbLight._m0[_1605].z + _428;
    float _1767 = inversesqrt(dot(vec3(_1761, _1762, _1763), vec3(_1761, _1762, _1763)));
    float _1768 = _1767 * _1761;
    float _1769 = _1767 * _1762;
    float _1770 = _1767 * _1763;
    float _1771 = dot(vec3(_398, _399, _400), vec3(cbLight._m0[_1605].xyz));
    float _3874 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1774 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _3885 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _1775 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _1776 = dot(vec3(_398, _399, _400), vec3(_1768, _1769, _1770));
    float _3896 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _1779 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _1780 = dot(vec3(cbLight._m0[_1605].xyz), vec3(_1768, _1769, _1770));
    float _3907 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1784 = _1760 * _1760;
    float _1788 = ((_1779 * _1779) * (_1784 + (-1.0))) + 1.0;
    float _1799 = (exp2(log2(1.0 - (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1800 = 1.0 - _1760;
    float _1811 = (0.5 / (((_1775 * ((_1774 * _1800) + _1760)) + 9.9999999392252902907785028219223e-09) + (((_1775 * _1800) + _1760) * _1774))) * _1774;
    float _3918 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _1813 = (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_1784 / ((_1788 * _1788) * 3.141590118408203125));
    uint _1827 = _1605 + 9u;
    float _1838 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1646].w)) * _401) * 0.949999988079071044921875);
    float _1839 = _1838 * _1838;
    float _1840 = cbLight._m0[_1646].x + _426;
    float _1841 = cbLight._m0[_1646].y + _427;
    float _1842 = cbLight._m0[_1646].z + _428;
    float _1846 = inversesqrt(dot(vec3(_1840, _1841, _1842), vec3(_1840, _1841, _1842)));
    float _1847 = _1846 * _1840;
    float _1848 = _1846 * _1841;
    float _1849 = _1846 * _1842;
    float _1850 = dot(vec3(_398, _399, _400), vec3(cbLight._m0[_1646].xyz));
    float _3929 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _1853 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _1854 = dot(vec3(_398, _399, _400), vec3(_1847, _1848, _1849));
    float _3940 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1857 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _1858 = dot(vec3(cbLight._m0[_1646].xyz), vec3(_1847, _1848, _1849));
    float _3951 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1862 = _1839 * _1839;
    float _1866 = ((_1857 * _1857) * (_1862 + (-1.0))) + 1.0;
    float _1875 = (exp2(log2(1.0 - (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1876 = 1.0 - _1839;
    float _1886 = (0.5 / (((_1775 * ((_1853 * _1876) + _1839)) + 9.9999999392252902907785028219223e-09) + (((_1775 * _1876) + _1839) * _1853))) * _1853;
    float _3962 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1888 = (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1862 / ((_1866 * _1866) * 3.141590118408203125));
    float _1898 = (((_1875 * cbLight._m0[_1827].x) * _1888) * _1628) + ((((cbLight._m0[_1746].x * _1597) * _1799) * _1813) * _1642);
    float _1899 = (((_1875 * cbLight._m0[_1827].y) * _1888) * _1628) + ((((cbLight._m0[_1746].y * _1598) * _1799) * _1813) * _1642);
    float _1900 = (((_1875 * cbLight._m0[_1827].z) * _1888) * _1628) + ((((cbLight._m0[_1746].z * _1599) * _1799) * _1813) * _1642);
    float _1962;
    float _1964;
    float _1966;
    if (_1683)
    {
        _1962 = _1898;
        _1964 = _1899;
        _1966 = _1900;
    }
    else
    {
        uint _1968 = _1605 + 2u;
        uint _1972 = _1605 + 10u;
        float _1986 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1968].w)) * _401) * 0.949999988079071044921875);
        float _1987 = _1986 * _1986;
        float _1988 = cbLight._m0[_1968].x + _426;
        float _1989 = cbLight._m0[_1968].y + _427;
        float _1990 = cbLight._m0[_1968].z + _428;
        float _1994 = inversesqrt(dot(vec3(_1988, _1989, _1990), vec3(_1988, _1989, _1990)));
        float _1995 = _1994 * _1988;
        float _1996 = _1994 * _1989;
        float _1997 = _1994 * _1990;
        float _1998 = dot(vec3(_398, _399, _400), vec3(cbLight._m0[_1968].xyz));
        float _3973 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
        float _2001 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _2002 = dot(vec3(_398, _399, _400), vec3(_1995, _1996, _1997));
        float _3984 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        float _2005 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _2006 = dot(vec3(cbLight._m0[_1968].xyz), vec3(_1995, _1996, _1997));
        float _3995 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2010 = _1987 * _1987;
        float _2014 = ((_2005 * _2005) * (_2010 + (-1.0))) + 1.0;
        float _2023 = (exp2(log2(1.0 - (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2024 = 1.0 - _1987;
        float _2034 = (0.5 / (((_1775 * ((_2001 * _2024) + _1987)) + 9.9999999392252902907785028219223e-09) + (((_1775 * _2024) + _1987) * _2001))) * _2001;
        float _4006 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
        float _2036 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_2010 / ((_2014 * _2014) * 3.141590118408203125));
        float _2037 = isnan(1.0) ? _1620 : (isnan(_1620) ? 1.0 : min(_1620, 1.0));
        _1962 = (((_2023 * cbLight._m0[_1972].x) * _2036) * _2037) + _1898;
        _1964 = (((_2023 * cbLight._m0[_1972].y) * _2036) * _2037) + _1899;
        _1966 = (((_2023 * cbLight._m0[_1972].z) * _2036) * _2037) + _1900;
    }
    float _2072;
    float _2074;
    float _2076;
    if (_1701)
    {
        _2072 = _1962;
        _2074 = _1964;
        _2076 = _1966;
    }
    else
    {
        uint _2083 = _1605 + 3u;
        uint _2087 = _1605 + 11u;
        float _2101 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2083].w)) * _401) * 0.949999988079071044921875);
        float _2102 = _2101 * _2101;
        float _2103 = cbLight._m0[_2083].x + _426;
        float _2104 = cbLight._m0[_2083].y + _427;
        float _2105 = cbLight._m0[_2083].z + _428;
        float _2109 = inversesqrt(dot(vec3(_2103, _2104, _2105), vec3(_2103, _2104, _2105)));
        float _2110 = _2109 * _2103;
        float _2111 = _2109 * _2104;
        float _2112 = _2109 * _2105;
        float _2113 = dot(vec3(_398, _399, _400), vec3(cbLight._m0[_2083].xyz));
        float _4022 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
        float _2116 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _2117 = dot(vec3(_398, _399, _400), vec3(_2110, _2111, _2112));
        float _4033 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2120 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _2121 = dot(vec3(cbLight._m0[_2083].xyz), vec3(_2110, _2111, _2112));
        float _4044 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2125 = _2102 * _2102;
        float _2129 = ((_2120 * _2120) * (_2125 + (-1.0))) + 1.0;
        float _2138 = (exp2(log2(1.0 - (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2139 = 1.0 - _2102;
        float _2149 = (0.5 / (((_1775 * ((_2116 * _2139) + _2102)) + 9.9999999392252902907785028219223e-09) + (((_1775 * _2139) + _2102) * _2116))) * _2116;
        float _4055 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
        float _2151 = (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_2125 / ((_2129 * _2129) * 3.141590118408203125));
        float _2152 = isnan(1.0) ? _1621 : (isnan(_1621) ? 1.0 : min(_1621, 1.0));
        _2072 = (((_2138 * cbLight._m0[_2087].x) * _2151) * _2152) + _1962;
        _2074 = (((_2138 * cbLight._m0[_2087].y) * _2151) * _2152) + _1964;
        _2076 = (((_2138 * cbLight._m0[_2087].z) * _2151) * _2152) + _1966;
    }
    float _2286;
    float _2288;
    float _2290;
    float _2292;
    float _2294;
    float _2296;
    if (_1603.y == 0u)
    {
        float _2227 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2228 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2227;
        float _2229 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2227;
        float _2230 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2227;
        uvec4 _2242 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2243 = _2242.x;
        uint _2254 = uint((float(_2242.y) * floor(float(uint(cbSceneParam._m0[85u].y * _448) / _2243))) + floor(float(uint(cbSceneParam._m0[85u].x * _447) / _2243)));
        float _2264 = (log2(_2230 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2265 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        uint _2268 = uint(isnan(14.0) ? _2265 : (isnan(_2265) ? 14.0 : min(_2265, 14.0)));
        uvec4 _2273 = texelFetch(g_lightClusterGridBuffer, int(((_2268 << 2u) + (_2254 << 6u)) >> 2u));
        uint _2274 = _2273.x;
        uint _2275 = _2242.z;
        float _2374;
        float _2376;
        float _2378;
        float _2380;
        float _2382;
        float _2384;
        if (((((1u << ((_2275 >> 4u) & 15u)) + 4294967295u) & _2274) == 0u) || ((_2275 & 240u) == 0u))
        {
            _2374 = 0.0;
            _2376 = 0.0;
            _2378 = 0.0;
            _2380 = 0.0;
            _2382 = 0.0;
            _2384 = 0.0;
        }
        else
        {
            float _2375;
            float _2377;
            float _2379;
            float _2381;
            float _2383;
            float _2385;
            float _2526 = 0.0;
            float _2527 = 0.0;
            float _2528 = 0.0;
            float _2529 = 0.0;
            float _2530 = 0.0;
            float _2531 = 0.0;
            uint _2532 = 0u;
            uint _2541;
            bool _2542;
            for (;;)
            {
                _2541 = texelFetch(g_lightClassification, int((((_2268 << 5u) + (_2254 << 9u)) + (_2532 << 2u)) >> 2u)).x;
                _2542 = _2541 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2542)
                {
                    frontier_phi_68_pred = _2528;
                    frontier_phi_68_pred_1 = _2531;
                    frontier_phi_68_pred_2 = _2530;
                    frontier_phi_68_pred_3 = _2529;
                    frontier_phi_68_pred_4 = _2527;
                    frontier_phi_68_pred_5 = _2526;
                }
                else
                {
                    float _2671;
                    float _2672;
                    float _2673;
                    float _2674;
                    float _2675;
                    float _2676;
                    uint _2677;
                    _2671 = _2526;
                    _2672 = _2527;
                    _2673 = _2528;
                    _2674 = _2529;
                    _2675 = _2530;
                    _2676 = _2531;
                    _2677 = _2541;
                    float _2598;
                    float _2599;
                    float _2600;
                    float _2601;
                    float _2602;
                    float _2603;
                    for (;;)
                    {
                        uint _2681 = uint(findLSB(_2677)) + (_2532 << 5u);
                        uint _2678 = (_2677 + 4294967295u) & _2677;
                        uint _2683 = _2681 * 48u;
                        vec4 _2697 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2683)).x, texelFetch(g_PointLightRenderingBuffer, int(_2683 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2683 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2683 + 3u)).x));
                        uint _2703 = (_2681 * 48u) + 4u;
                        vec4 _2716 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2703)).x, texelFetch(g_PointLightRenderingBuffer, int(_2703 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2703 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2703 + 3u)).x));
                        uint _2722 = (_2681 * 48u) + 8u;
                        vec3 _2733 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2722)).x, texelFetch(g_PointLightRenderingBuffer, int(_2722 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2722 + 2u)).x));
                        float _2737 = _2697.x - _2228;
                        float _2738 = _2697.y - _2229;
                        float _2739 = _2697.z - _2230;
                        float _2740 = dot(vec3(_2737, _2738, _2739), vec3(_2737, _2738, _2739));
                        float _2743 = inversesqrt(_2740);
                        float _2744 = _2743 * _2737;
                        float _2745 = _2743 * _2738;
                        float _2746 = _2743 * _2739;
                        float _2747 = dot(vec3(_468, _471, _474), vec3(_2744, _2745, _2746));
                        float _2752 = 1.0 - (_2740 * _2697.w);
                        float _4081 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
                        float _2753 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
                        float _2754 = sqrt(_2740) * _2716.w;
                        float _2757 = 1.39999997615814208984375 / (_2754 + 1.39999997615814208984375);
                        float _2758 = _2757 * _2757;
                        float _2761 = ((1.0 - _2758) * _2747) + _2758;
                        float _2764 = _2754 * _2754;
                        float _2768 = ((isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0))) * _2753) / ((_2764 * 0.699999988079071044921875) + 1.0);
                        float _2772 = (-0.0) - _2228;
                        float _2773 = (-0.0) - _2229;
                        float _2774 = (-0.0) - _2230;
                        float _2778 = inversesqrt(dot(vec3(_2772, _2773, _2774), vec3(_2772, _2773, _2774)));
                        float _2779 = _2778 * _2772;
                        float _2780 = _2778 * _2773;
                        float _2781 = _2778 * _2774;
                        float _2789 = exp2(log2(1.0 / ((_2764 * 3.5) + 5.0)) * 0.25);
                        float _2790 = 1.0 - _530;
                        float _2797 = sqrt(1.0 - ((1.0 - (_2790 * _2790)) * (1.0 - (_2789 * _2789))));
                        float _2798 = _2797 * _2797;
                        float _2799 = _2798 * _2798;
                        float _2800 = _2779 + _2744;
                        float _2801 = _2780 + _2745;
                        float _2802 = _2781 + _2746;
                        float _2806 = inversesqrt(dot(vec3(_2800, _2801, _2802), vec3(_2800, _2801, _2802)));
                        float _2810 = dot(vec3(_468, _471, _474), vec3(_2779, _2780, _2781));
                        float _4097 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
                        float _2813 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
                        float _2814 = dot(vec3(_468, _471, _474), vec3(_2806 * _2800, _2806 * _2801, _2806 * _2802));
                        float _4108 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
                        float _2817 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                        float _2821 = ((_2817 * _2817) * (_2799 + (-1.0))) + 1.0;
                        float _2822 = _2757 * _2798;
                        float _2823 = _2822 * _2822;
                        float _2826 = ((1.0 - _2823) * _2747) + _2823;
                        float _4119 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
                        float _2827 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
                        float _2828 = 1.0 - _2798;
                        float _2838 = (0.5 / (((_2827 * ((_2813 * _2828) + _2798)) + 9.9999999392252902907785028219223e-09) + (((_2827 * _2828) + _2798) * _2813))) * _2827;
                        float _4130 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
                        float _2849 = (((_2799 * 3.1415927410125732421875) * (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)))) / ((_2821 * _2821) * ((_2764 * 2.1991131305694580078125) + 3.141590118408203125))) * _2753;
                        _2601 = (_2768 * _2716.x) + _2674;
                        _2602 = (_2768 * _2716.y) + _2675;
                        _2603 = (_2768 * _2716.z) + _2676;
                        _2598 = (_2849 * _2733.x) + _2671;
                        _2599 = (_2849 * _2733.y) + _2672;
                        _2600 = (_2849 * _2733.z) + _2673;
                        if (_2678 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2671 = _2598;
                            _2672 = _2599;
                            _2673 = _2600;
                            _2674 = _2601;
                            _2675 = _2602;
                            _2676 = _2603;
                            _2677 = _2678;
                        }
                    }
                    frontier_phi_68_pred = _2600;
                    frontier_phi_68_pred_1 = _2603;
                    frontier_phi_68_pred_2 = _2602;
                    frontier_phi_68_pred_3 = _2601;
                    frontier_phi_68_pred_4 = _2599;
                    frontier_phi_68_pred_5 = _2598;
                }
                _2379 = frontier_phi_68_pred;
                _2385 = frontier_phi_68_pred_1;
                _2383 = frontier_phi_68_pred_2;
                _2381 = frontier_phi_68_pred_3;
                _2377 = frontier_phi_68_pred_4;
                _2375 = frontier_phi_68_pred_5;
                uint _2533 = _2532 + 1u;
                if (_2533 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2526 = _2375;
                    _2527 = _2377;
                    _2528 = _2379;
                    _2529 = _2381;
                    _2530 = _2383;
                    _2531 = _2385;
                    _2532 = _2533;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2374 = _2375;
            _2376 = _2377;
            _2378 = _2379;
            _2380 = _2381;
            _2382 = _2383;
            _2384 = _2385;
        }
        uvec4 _2388 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2389 = _2388.z;
        uint _2391 = (_2389 >> 8u) & 15u;
        float _2494;
        float _2496;
        float _2498;
        float _2500;
        float _2502;
        float _2504;
        if (((4294967295u << _2391) & _2274) == 0u)
        {
            _2494 = _2374;
            _2496 = _2376;
            _2498 = _2378;
            _2500 = _2380;
            _2502 = _2382;
            _2504 = _2384;
        }
        else
        {
            float _2519 = inversesqrt(dot(vec3(_2228, _2229, _2230), vec3(_2228, _2229, _2230)));
            float _2520 = _2519 * _2228;
            float _2521 = _2519 * _2229;
            float _2522 = _2519 * _2230;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2391 < ((_2389 >> 12u) & 15u))
            {
                float _2495;
                float _2497;
                float _2499;
                float _2501;
                float _2503;
                float _2505;
                float _2654 = _2374;
                float _2655 = _2376;
                float _2656 = _2378;
                float _2657 = _2380;
                float _2658 = _2382;
                float _2659 = _2384;
                uint _2660 = _2391;
                uint _2669;
                bool _2670;
                for (;;)
                {
                    _2669 = texelFetch(g_lightClassification, int((((_2268 << 5u) + (_2254 << 9u)) + (_2660 << 2u)) >> 2u)).x;
                    _2670 = _2669 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2670)
                    {
                        frontier_phi_79_pred = _2659;
                        frontier_phi_79_pred_1 = _2658;
                        frontier_phi_79_pred_2 = _2657;
                        frontier_phi_79_pred_3 = _2656;
                        frontier_phi_79_pred_4 = _2655;
                        frontier_phi_79_pred_5 = _2654;
                    }
                    else
                    {
                        float _2863;
                        float _2864;
                        float _2865;
                        float _2866;
                        float _2867;
                        float _2868;
                        float _3159;
                        float _3160;
                        float _3161;
                        float _3162;
                        float _3163;
                        float _3164;
                        float _2876 = _2654;
                        float _2877 = _2655;
                        float _2878 = _2656;
                        float _2879 = _2657;
                        float _2880 = _2658;
                        float _2881 = _2659;
                        uint _2882 = _2669;
                        uint _2883;
                        vec4 _2908;
                        float _2909;
                        vec4 _2924;
                        vec3 _2936;
                        vec4 _2952;
                        vec4 _2968;
                        float _3015;
                        bool _3016;
                        for (;;)
                        {
                            uint _2893 = ((_2660 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2882));
                            _2883 = (_2882 + 4294967295u) & _2882;
                            uint _2895 = _2893 * 40u;
                            _2908 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2895)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 3u)).x));
                            _2909 = _2908.w;
                            uint _2911 = (_2893 * 40u) + 4u;
                            _2924 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 3u)).x));
                            uint _2926 = (_2893 * 40u) + 8u;
                            _2936 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2926)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 2u)).x));
                            uint _2939 = (_2893 * 40u) + 16u;
                            _2952 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2939)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 3u)).x));
                            uint _2955 = (_2893 * 40u) + 20u;
                            _2968 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2955)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 3u)).x));
                            uint _2971 = (_2893 * 40u) + 24u;
                            vec4 _2984 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2971)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 3u)).x));
                            uint _2990 = (_2893 * 40u) + 28u;
                            vec4 _3003 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2990)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 3u)).x));
                            _3015 = fma(_2230, _3003.z, fma(_2229, _3003.y, _3003.x * _2228)) + _3003.w;
                            _3016 = !((fma(_2230, _2984.z, fma(_2229, _2984.y, _2984.x * _2228)) + _2984.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3016)
                            {
                                float _3043 = _2908.x - _2228;
                                float _3044 = _2908.y - _2229;
                                float _3045 = _2908.z - _2230;
                                float _3046 = dot(vec3(_3043, _3044, _3045), vec3(_3043, _3044, _3045));
                                float _3049 = inversesqrt(_3046);
                                float _3050 = _3049 * _3043;
                                float _3051 = _3049 * _3044;
                                float _3052 = _3049 * _3045;
                                float _3056 = 1.0 - (_3046 / (_2909 * _2909));
                                float _4141 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                                float _3057 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
                                float _3061 = sqrt(_3046) * _2924.w;
                                float _3063 = 1.39999997615814208984375 / (_3061 + 1.39999997615814208984375);
                                float _3064 = _3063 * _3063;
                                float _3067 = ((1.0 - _3064) * dot(vec3(_3050, _3051, _3052), vec3(_468, _471, _474))) + _3064;
                                float _3070 = _3061 * _3061;
                                float _3074 = (fma(_2230, _2952.z, fma(_2229, _2952.y, _2952.x * _2228)) + _2952.w) / _3015;
                                float _3075 = (fma(_2230, _2968.z, fma(_2229, _2968.y, _2968.x * _2228)) + _2968.w) / _3015;
                                float _3079 = 1.0 - dot(vec2(_3074, _3075), vec2(_3074, _3075));
                                float _4157 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                                float _3080 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
                                float _3081 = _3080 * (((isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0))) * _3057) / ((_3070 * 0.699999988079071044921875) + 1.0));
                                float _3093 = exp2(log2(1.0 / ((_3070 * 3.5) + 5.0)) * 0.25);
                                float _3094 = 1.0 - _530;
                                float _3101 = sqrt(1.0 - ((1.0 - (_3094 * _3094)) * (1.0 - (_3093 * _3093))));
                                float _3102 = _3101 * _3101;
                                float _3103 = _3102 * _3102;
                                float _3104 = _3050 - _2520;
                                float _3105 = _3051 - _2521;
                                float _3106 = _3052 - _2522;
                                float _3110 = inversesqrt(dot(vec3(_3104, _3105, _3106), vec3(_3104, _3105, _3106)));
                                float _3114 = dot(vec3(_468, _471, _474), vec3((-0.0) - _2520, (-0.0) - _2521, (-0.0) - _2522));
                                float _4168 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                                float _3117 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                                float _3118 = dot(vec3(_468, _471, _474), vec3(_3110 * _3104, _3110 * _3105, _3110 * _3106));
                                float _4179 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                                float _3121 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
                                float _3125 = ((_3121 * _3121) * (_3103 + (-1.0))) + 1.0;
                                float _3126 = _3063 * _3102;
                                float _3127 = _3126 * _3126;
                                float _3133 = ((1.0 - _3127) * dot(vec3(_468, _471, _474), vec3(_3050, _3051, _3052))) + _3127;
                                float _4190 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                                float _3134 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                                float _3135 = 1.0 - _3102;
                                float _3145 = (0.5 / (((_3134 * ((_3117 * _3135) + _3102)) + 9.9999999392252902907785028219223e-09) + (((_3134 * _3135) + _3102) * _3117))) * _3134;
                                float _4201 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                                float _3155 = (_3080 * _3057) * (((_3103 * 3.1415927410125732421875) * (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) / ((_3125 * _3125) * ((_3070 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3081 * _2924.z;
                                frontier_phi_85_pred_1 = _3081 * _2924.y;
                                frontier_phi_85_pred_2 = _3081 * _2924.x;
                                frontier_phi_85_pred_3 = _3155 * _2936.z;
                                frontier_phi_85_pred_4 = _3155 * _2936.y;
                                frontier_phi_85_pred_5 = _3155 * _2936.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3164 = frontier_phi_85_pred;
                            _3163 = frontier_phi_85_pred_1;
                            _3162 = frontier_phi_85_pred_2;
                            _3161 = frontier_phi_85_pred_3;
                            _3160 = frontier_phi_85_pred_4;
                            _3159 = frontier_phi_85_pred_5;
                            _2866 = _3162 + _2879;
                            _2867 = _3163 + _2880;
                            _2868 = _3164 + _2881;
                            _2863 = _3159 + _2876;
                            _2864 = _3160 + _2877;
                            _2865 = _3161 + _2878;
                            if (_2883 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2876 = _2863;
                                _2877 = _2864;
                                _2878 = _2865;
                                _2879 = _2866;
                                _2880 = _2867;
                                _2881 = _2868;
                                _2882 = _2883;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2868;
                        frontier_phi_79_pred_1 = _2867;
                        frontier_phi_79_pred_2 = _2866;
                        frontier_phi_79_pred_3 = _2865;
                        frontier_phi_79_pred_4 = _2864;
                        frontier_phi_79_pred_5 = _2863;
                    }
                    _2505 = frontier_phi_79_pred;
                    _2503 = frontier_phi_79_pred_1;
                    _2501 = frontier_phi_79_pred_2;
                    _2499 = frontier_phi_79_pred_3;
                    _2497 = frontier_phi_79_pred_4;
                    _2495 = frontier_phi_79_pred_5;
                    uint _2661 = _2660 + 1u;
                    if (_2661 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2654 = _2495;
                        _2655 = _2497;
                        _2656 = _2499;
                        _2657 = _2501;
                        _2658 = _2503;
                        _2659 = _2505;
                        _2660 = _2661;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2501;
                frontier_phi_60_61_ladder_1 = _2505;
                frontier_phi_60_61_ladder_2 = _2503;
                frontier_phi_60_61_ladder_3 = _2499;
                frontier_phi_60_61_ladder_4 = _2497;
                frontier_phi_60_61_ladder_5 = _2495;
            }
            else
            {
                frontier_phi_60_61_ladder = _2380;
                frontier_phi_60_61_ladder_1 = _2384;
                frontier_phi_60_61_ladder_2 = _2382;
                frontier_phi_60_61_ladder_3 = _2378;
                frontier_phi_60_61_ladder_4 = _2376;
                frontier_phi_60_61_ladder_5 = _2374;
            }
            _2494 = frontier_phi_60_61_ladder_5;
            _2496 = frontier_phi_60_61_ladder_4;
            _2498 = frontier_phi_60_61_ladder_3;
            _2500 = frontier_phi_60_61_ladder;
            _2502 = frontier_phi_60_61_ladder_2;
            _2504 = frontier_phi_60_61_ladder_1;
        }
        float _2509 = isnan(1.0) ? _514 : (isnan(_514) ? 1.0 : min(_514, 1.0));
        _2286 = (_2509 * _2500) + _1739;
        _2288 = (_2509 * _2502) + _1741;
        _2290 = (_2509 * _2504) + _1743;
        _2292 = ((_2494 * 0.039999999105930328369140625) * _2509) + _2072;
        _2294 = ((_2496 * 0.039999999105930328369140625) * _2509) + _2074;
        _2296 = ((_2498 * 0.039999999105930328369140625) * _2509) + _2076;
    }
    else
    {
        _2286 = _1739;
        _2288 = _1741;
        _2290 = _1743;
        _2292 = _2072;
        _2294 = _2074;
        _2296 = _2076;
    }
    float _4217 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _4228 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _4239 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _2313 = ((isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_2286 + ((isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0))) * _514))) + ((_2292 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _1352)) * cbPerFrame._m0[3u].x);
    float _2314 = ((isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_2288 + ((isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0))) * _514))) + ((_2294 + ((isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))) * _1352)) * cbPerFrame._m0[3u].x);
    float _2315 = ((isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_2290 + ((isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0))) * _514))) + ((_2296 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _1352)) * cbPerFrame._m0[3u].x);
    uint _2316 = _487 + 6u;
    float _2324 = _447 / cbSceneParam._m0[86u].x;
    float _2325 = _448 / cbSceneParam._m0[86u].y;
    vec4 _2339 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2324, _2325, (log2((isnan(cbSceneParam._m0[77u].w) ? _421 : (isnan(_421) ? cbSceneParam._m0[77u].w : min(_421, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2341 = _2339.x;
    float _2342 = _2339.y;
    float _2343 = _2339.z;
    float _2344 = _2339.w;
    float _2436;
    float _2438;
    float _2440;
    float _2442;
    if (_421 > cbSceneParam._m0[78u].w)
    {
        float _2399 = isnan(_421) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _421 : min(cbSceneParam._m0[80u].w, _421));
        float _2400 = _2399 / _421;
        float _2411 = _2400 * _271;
        float _2412 = _272 * _2400;
        float _2413 = (-0.0) - _2412;
        float _2414 = _2400 * _273;
        float _2416 = (cbSceneParam._m0[77u].w * _2413) / _2399;
        float _2417 = _2416 + cbSceneParam._m0[79u].w;
        float _2418 = cbSceneParam._m0[79u].w - _2412;
        float _2424 = sqrt(((_2411 * _2411) + (_2412 * _2412)) + (_2414 * _2414));
        float _2427 = (1.0 - (cbSceneParam._m0[77u].w / _2399)) * _2424;
        float _2432 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2434 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2611;
        if (abs((_2413 - _2416) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2611 = ((((_2417 > 0.0) ? exp2(_2432 * _2417) : (2.0 - exp2(_2434 * _2417))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2427;
        }
        else
        {
            float _2555 = 1.0 / cbSceneParam._m0[80u].x;
            float _2556 = isnan(_2418) ? _2417 : (isnan(_2417) ? _2418 : max(_2417, _2418));
            float _2557 = isnan(_2418) ? _2417 : (isnan(_2417) ? _2418 : min(_2417, _2418));
            float _2566 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : min(_2556, 0.0));
            float _2567 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : min(_2557, 0.0));
            _2611 = ((abs(_2424 / _2413) * cbSceneParam._m0[80u].y) * ((((_2566 - _2567) * 2.0) - ((exp2(_2432 * (isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0)))) - exp2(_2432 * (isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0))))) * _2555)) - ((exp2(_2434 * _2566) - exp2(_2434 * _2567)) * _2555))) + (_2427 * cbSceneParam._m0[80u].z);
        }
        vec4 _2613 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2324, _2325, 1.0), 0.0);
        float _2622 = exp2((_2611 * (-1.44269502162933349609375)) * (1.0 - _2613.w));
        float _2623 = log2(_2622);
        float _2639 = log2(_2344);
        _2436 = (exp2(_2639 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2623 * cbSceneParam._m0[78u].x)) * _2613.x) / cbSceneParam._m0[78u].x)) + _2341;
        _2438 = (exp2(_2639 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2623 * cbSceneParam._m0[78u].y)) * _2613.y) / cbSceneParam._m0[78u].y)) + _2342;
        _2440 = (exp2(_2639 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2623 * cbSceneParam._m0[78u].z)) * _2613.z) / cbSceneParam._m0[78u].z)) + _2343;
        _2442 = _2622 * _2344;
    }
    else
    {
        _2436 = _2341;
        _2438 = _2342;
        _2440 = _2343;
        _2442 = _2344;
    }
    bool _2649;
    vec4 _2452;
    vec4 _2474;
    float _2476;
    float _2480;
    float _2481;
    float _2482;
    float _2483;
    bool _2493;
    for (;;)
    {
        _2452 = cbMatDynParam._m0[0u];
        float _2454 = roundEven(_2452.y);
        bool _2455 = _2454 == 3.0;
        float _2456 = log2(_2442);
        float _2463 = exp2(_2456 * cbSceneParam._m0[78u].x) * _2313;
        float _2464 = exp2(_2456 * cbSceneParam._m0[78u].y) * _2314;
        float _2465 = exp2(_2456 * cbSceneParam._m0[78u].z) * _2315;
        float _2472 = _435 + (-0.5);
        _2474 = cbMtdParam._m0[1u];
        _2476 = _2474.y * _2472;
        float _2479 = (_2454 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2480 = _2479 * (_2455 ? _2463 : (_2463 + (cbSceneParam._m0[72u].w * _2436)));
        _2481 = _2479 * (_2455 ? _2464 : (_2464 + (cbSceneParam._m0[72u].w * _2438)));
        _2482 = _2479 * (_2455 ? _2465 : (_2465 + (cbSceneParam._m0[72u].w * _2440)));
        _2483 = _2472 * 0.999000012874603271484375;
        _2493 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2493)
        {
            if ((cbInstanceData._m0[_487 + 7u].x + _2483) < 0.5)
            {
                _2649 = true;
                break;
            }
        }
        uint _2590 = _489 + uint(_2452.w);
        if ((cbInstanceData._m0[_2590].w < 1.0) && ((cbInstanceData._m0[_2590].w + _2483) < 0.5))
        {
            _2649 = true;
            break;
        }
        if ((_2476 + 1.0) < _2474.x)
        {
            _2649 = true;
            break;
        }
        _2649 = false;
        break;
    }
    float _2854;
    if (_2649)
    {
        discard_state = true;
        _2854 = 0.0;
    }
    else
    {
        _2854 = cbInstanceData._m0[_2316].w;
    }
    SV_Target.x = _2480;
    SV_Target.y = _2481;
    SV_Target.z = _2482;
    SV_Target.w = _2854;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2316].w;
    discard_exit();
}


