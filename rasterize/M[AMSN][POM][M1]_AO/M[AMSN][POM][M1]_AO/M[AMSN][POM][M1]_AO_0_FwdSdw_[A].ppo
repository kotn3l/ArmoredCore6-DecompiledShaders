#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_POM_M1_AO_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_POM_M1_AO_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_POM_M1_AO_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_POM_M1_AO_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _951;
float _3625;
float _3626;
float _3627;
float _3628;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _198 = _197 * _190;
    float _199 = _197 * _191;
    float _200 = _197 * _192;
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212 = _211 * TANGENT.x;
    float _213 = _211 * TANGENT.y;
    float _214 = _211 * TANGENT.z;
    float _219;
    float _220;
    float _221;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
    }
    else
    {
        _219 = _205;
        _220 = _206;
        _221 = _207;
    }
    float _265 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _275 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _265);
    float _276 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _265);
    float _277 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _265);
    float _286 = dot(vec3(_275, _276, _277), vec3(_198, _199, _200));
    float _289 = dot(vec3(_275, _276, _277), vec3(_212, _213, _214));
    float _292 = dot(vec3(_275, _276, _277), vec3(_219, _220, _221));
    float _298 = inversesqrt(dot(vec3(_286, _289, _292), vec3(_286, _289, _292)));
    vec4 _311 = texture(sampler2D(M_AMSN_POM_M1_AO_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _322 = dot(vec4(_311), vec4(1.0, 0.0, 0.0, 0.0)) + (-0.5);
    float _330 = (((cbMtdParam._m0[10u].y * _286) * _298) * _322) + TEXCOORD.x;
    float _331 = (((_289 * cbMtdParam._m0[10u].y) * _298) * _322) + TEXCOORD.y;
    vec4 _343 = texture(sampler2D(M_AMSN_POM_M1_AO_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_330 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_331 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _348 = _343.x * cbMtdParam._m0[9u].x;
    float _349 = _343.y * cbMtdParam._m0[9u].y;
    float _350 = _343.z * cbMtdParam._m0[9u].z;
    vec4 _362 = texture(sampler2D(M_AMSN_POM_M1_AO_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _364 = _362.x;
    vec4 _376 = texture(sampler2D(M_AMSN_POM_M1_AO_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _330) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _331) + cbTextureTilingScale._m0[1u].w));
    float _380 = _376.z;
    float _385 = (_376.x * 2.0) + (-1.0);
    float _387 = (_376.y * 2.0) + (-1.0);
    float _388 = dot(vec2(_385, _387), vec2(_385, _387));
    float _3637 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _393 = sqrt(1.0 - (isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))));
    float _396 = fma(_393, _219, fma(_387, _212, _385 * _198));
    float _399 = fma(_393, _220, fma(_387, _213, _385 * _199));
    float _402 = fma(_393, _221, fma(_387, _214, _385 * _200));
    float _406 = inversesqrt(dot(vec3(_396, _399, _402), vec3(_396, _399, _402)));
    float _407 = _406 * _396;
    float _408 = _406 * _399;
    float _409 = _406 * _402;
    float _411 = cbMtdParam._m0[10u].x + _376.w;
    float _415 = inversesqrt(dot(vec3(_407, _408, _409), vec3(_407, _408, _409)));
    float _416 = _415 * _407;
    float _417 = _415 * _408;
    float _418 = _415 * _409;
    float _3648 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _419 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _3659 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _3670 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _3681 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _3692 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _3703 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _424 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _440 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _444 = inversesqrt(dot(vec3(_275, _276, _277), vec3(_275, _276, _277)));
    float _445 = _275 * _444;
    float _446 = _276 * _444;
    float _447 = _277 * _444;
    vec4 _452 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _454 = _452.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _631 = sqrt(((_275 * _275) + (_276 * _276)) + (_277 * _277));
        float _637 = (cbMatDynParam._m0[5u].x * _631) + cbMatDynParam._m0[5u].y;
        float _3714 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
        float _638 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _642 = (cbMatDynParam._m0[5u].z * _631) + cbMatDynParam._m0[5u].w;
        float _3725 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) - _638)) + _638) < ((_454 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _466 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _467 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _487 = fma(_418, cbSceneParam._m0[5u].z, fma(_417, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _416));
    float _490 = fma(_418, cbSceneParam._m0[6u].z, fma(_417, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _416));
    float _493 = fma(_418, cbSceneParam._m0[7u].z, fma(_417, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _416));
    uint _506 = uint(roundEven(NORMAL.w)) * 13u;
    uint _508 = _506 + 9u;
    uint _509 = _508 + uint(cbMatDynParam._m0[0u].w);
    float _515 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0)))) * cbInstanceData._m0[_509].x;
    float _516 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0)))) * cbInstanceData._m0[_509].y;
    float _517 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0)))) * cbInstanceData._m0[_509].z;
    float _3736 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _518 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _3747 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _519 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _3758 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _520 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _521 = 1.0 - _424;
    float _522 = _518 * _521;
    float _523 = _519 * _521;
    float _524 = _520 * _521;
    float _529 = (_518 + (-0.039999999105930328369140625)) * _424;
    float _530 = (_519 + (-0.039999999105930328369140625)) * _424;
    float _531 = (_520 + (-0.039999999105930328369140625)) * _424;
    float _532 = _529 + 0.039999999105930328369140625;
    float _534 = _530 + 0.039999999105930328369140625;
    float _535 = _531 + 0.039999999105930328369140625;
    vec4 _544 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _466, cbSceneParam._m0[86u].y * _467));
    float _548 = ((isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * TEXCOORD.z) * _544.x;
    float _549 = dot(vec3(_416, _417, _418), vec3(_445, _446, _447));
    float _552 = _549 * 2.0;
    float _556 = (_552 * _416) - _445;
    float _557 = (_552 * _417) - _446;
    float _558 = (_552 * _418) - _447;
    float _562 = abs(dot(vec3(_445, _446, _447), vec3(_416, _417, _418)));
    float _3769 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _564 = sqrt(_419);
    float _577 = exp2((_564 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_564 * 3.0));
    float _583 = (1.0 - _577) * ((_564 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _584 = _577 * _564;
    float _612 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _616 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _620 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _950;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _676 = fma(_620, cbModelParam._m0[26u].z, fma(_616, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _612));
        float _680 = fma(_620, cbModelParam._m0[27u].z, fma(_616, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _612));
        float _684 = fma(_620, cbModelParam._m0[28u].z, fma(_616, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _612));
        float _708 = _612 + _416;
        float _709 = _616 + _417;
        float _710 = _620 + _418;
        float _720 = fma(_710, cbModelParam._m0[26u].z, fma(_709, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _708)) - _676;
        float _721 = fma(_710, cbModelParam._m0[27u].z, fma(_709, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _708)) - _680;
        float _722 = fma(_710, cbModelParam._m0[28u].z, fma(_709, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _708)) - _684;
        float _726 = inversesqrt(dot(vec3(_720, _721, _722), vec3(_720, _721, _722)));
        float _739 = ((_726 * _720) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_676 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _740 = ((_726 * _721) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_680 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _741 = ((_726 * _722) / cbModelParam._m0[34u].z) + ((((((_684 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _744 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_739, _740, _741), 0.0);
        vec4 _751 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_739, _740, _741), 0.0);
        vec4 _758 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_739, _740, _741), 0.0);
        vec4 _765 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_739, _740, _741), 0.0);
        float _778 = exp2((_744.w + (-0.5)) * 20.0) * 2.0;
        float _779 = _778 * (_744.x + (-0.5));
        float _780 = _778 * (_744.y + (-0.5));
        float _781 = _778 * (_744.z + (-0.5));
        float _788 = exp2((_751.w + (-0.5)) * 20.0) * 2.0;
        float _789 = _788 * (_751.x + (-0.5));
        float _790 = _788 * (_751.y + (-0.5));
        float _791 = _788 * (_751.z + (-0.5));
        float _798 = exp2((_758.w + (-0.5)) * 20.0) * 2.0;
        float _799 = _798 * (_758.x + (-0.5));
        float _800 = _798 * (_758.y + (-0.5));
        float _801 = _798 * (_758.z + (-0.5));
        float _808 = exp2((_765.w + (-0.5)) * 20.0) * 2.0;
        float _809 = _808 * (_765.x + (-0.5));
        float _810 = _808 * (_765.y + (-0.5));
        float _811 = _808 * (_765.z + (-0.5));
        float _812 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _813 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _814 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _815 = _779 * 0.5;
        float _816 = _789 * 0.5;
        float _817 = _799 * 0.5;
        float _818 = dot(vec3(_815, _816, _817), vec3(_815, _816, _817));
        float _823 = (_818 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_818);
        float _832 = (dot(vec3(_416, _417, _418), vec3(_823 * _815, _823 * _816, _823 * _817)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _842 = sqrt(((_816 * _816) + (_815 * _815)) + (_817 * _817)) / (_812 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _843 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _844 = _843 * 2.0;
        float _848 = (1.0 - _843) / (_843 + 1.0);
        float _3817 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _849 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _858 = ((((1.0 - _849) * (_844 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_844 + 1.0))) + _849) * _812;
        float _859 = _780 * 0.5;
        float _860 = _790 * 0.5;
        float _861 = _800 * 0.5;
        float _862 = dot(vec3(_859, _860, _861), vec3(_859, _860, _861));
        float _867 = (_862 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_862);
        float _875 = (dot(vec3(_416, _417, _418), vec3(_867 * _859, _867 * _860, _867 * _861)) + 1.0) * 0.5;
        float _3828 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _884 = sqrt(((_860 * _860) + (_859 * _859)) + (_861 * _861)) / (_813 + 9.9999997473787516355514526367188e-06);
        float _3839 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _885 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _886 = _885 * 2.0;
        float _890 = (1.0 - _885) / (_885 + 1.0);
        float _3850 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _891 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _900 = ((((1.0 - _891) * (_886 + 2.0)) * exp2(log2(isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_886 + 1.0))) + _891) * _813;
        float _901 = _781 * 0.5;
        float _902 = _791 * 0.5;
        float _903 = _801 * 0.5;
        float _904 = dot(vec3(_901, _902, _903), vec3(_901, _902, _903));
        float _909 = (_904 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_904);
        float _917 = (dot(vec3(_416, _417, _418), vec3(_909 * _901, _909 * _902, _909 * _903)) + 1.0) * 0.5;
        float _3861 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _926 = sqrt(((_902 * _902) + (_901 * _901)) + (_903 * _903)) / (_814 + 9.9999997473787516355514526367188e-06);
        float _3872 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _928 = _927 * 2.0;
        float _932 = (1.0 - _927) / (_927 + 1.0);
        float _3883 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _942 = ((((1.0 - _933) * (_928 + 2.0)) * exp2(log2(isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_928 + 1.0))) + _933) * _814;
        _950 = _781;
        _952 = _780;
        _953 = _779;
        _954 = _791;
        _955 = _790;
        _956 = _789;
        _957 = _801;
        _958 = _800;
        _959 = _799;
        _960 = _814;
        _961 = _813;
        _962 = _812;
        _963 = cbModelParam._m0[36u].z * (isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0)));
        _964 = cbModelParam._m0[36u].z * (isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0)));
        _965 = cbModelParam._m0[36u].z * (isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0)));
    }
    else
    {
        _950 = _951;
        _952 = _951;
        _953 = _951;
        _954 = _951;
        _955 = _951;
        _956 = _951;
        _957 = _951;
        _958 = _951;
        _959 = _951;
        _960 = _951;
        _961 = _951;
        _962 = _951;
        _963 = 0.0;
        _964 = 0.0;
        _965 = 0.0;
    }
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _994 = fma(_620, cbModelParam._m0[30u].z, fma(_616, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _612));
        float _998 = fma(_620, cbModelParam._m0[31u].z, fma(_616, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _612));
        float _1002 = fma(_620, cbModelParam._m0[32u].z, fma(_616, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _612));
        float _1025 = _612 + _416;
        float _1026 = _616 + _417;
        float _1027 = _620 + _418;
        float _1037 = fma(_1027, cbModelParam._m0[30u].z, fma(_1026, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1025)) - _994;
        float _1038 = fma(_1027, cbModelParam._m0[31u].z, fma(_1026, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1025)) - _998;
        float _1039 = fma(_1027, cbModelParam._m0[32u].z, fma(_1026, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1025)) - _1002;
        float _1043 = inversesqrt(dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039)));
        float _1056 = ((_1043 * _1037) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_994 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1057 = ((_1043 * _1038) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_998 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1058 = ((_1043 * _1039) / cbModelParam._m0[35u].z) + ((((((_1002 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        float _1093 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1060.x + (-0.5));
        float _1095 = _1093 * (_1060.y + (-0.5));
        float _1096 = _1093 * (_1060.z + (-0.5));
        float _1103 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1067.x + (-0.5));
        float _1105 = _1103 * (_1067.y + (-0.5));
        float _1106 = _1103 * (_1067.z + (-0.5));
        float _1113 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1074.x + (-0.5));
        float _1115 = _1113 * (_1074.y + (-0.5));
        float _1116 = _1113 * (_1074.z + (-0.5));
        float _1123 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1081.x + (-0.5));
        float _1125 = _1123 * (_1081.y + (-0.5));
        float _1126 = _1123 * (_1081.z + (-0.5));
        float _1127 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1128 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1129 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1130 = _1094 * 0.5;
        float _1131 = _1104 * 0.5;
        float _1132 = _1114 * 0.5;
        float _1133 = dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132));
        float _1138 = (_1133 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1133);
        float _1146 = (dot(vec3(_416, _417, _418), vec3(_1138 * _1130, _1138 * _1131, _1138 * _1132)) + 1.0) * 0.5;
        float _3924 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1155 = sqrt(((_1131 * _1131) + (_1130 * _1130)) + (_1132 * _1132)) / (_1127 + 9.9999997473787516355514526367188e-06);
        float _3935 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1157 = _1156 * 2.0;
        float _1161 = (1.0 - _1156) / (_1156 + 1.0);
        float _3946 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1171 = ((((1.0 - _1162) * (_1157 + 2.0)) * exp2(log2(isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1157 + 1.0))) + _1162) * _1127;
        float _1172 = _1095 * 0.5;
        float _1173 = _1105 * 0.5;
        float _1174 = _1115 * 0.5;
        float _1175 = dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174));
        float _1180 = (_1175 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1175);
        float _1188 = (dot(vec3(_416, _417, _418), vec3(_1180 * _1172, _1180 * _1173, _1180 * _1174)) + 1.0) * 0.5;
        float _3957 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1197 = sqrt(((_1173 * _1173) + (_1172 * _1172)) + (_1174 * _1174)) / (_1128 + 9.9999997473787516355514526367188e-06);
        float _3968 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _3979 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_1199 + 1.0))) + _1204) * _1128;
        float _1214 = _1096 * 0.5;
        float _1215 = _1106 * 0.5;
        float _1216 = _1116 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1230 = (dot(vec3(_416, _417, _418), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _3990 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1239 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1129 + 9.9999997473787516355514526367188e-06);
        float _4001 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _4012 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1241 + 1.0))) + _1246) * _1129;
        _1263 = _1096;
        _1264 = _1095;
        _1265 = _1094;
        _1266 = _1106;
        _1267 = _1105;
        _1268 = _1104;
        _1269 = _1116;
        _1270 = _1115;
        _1271 = _1114;
        _1272 = _1129;
        _1273 = _1128;
        _1274 = _1127;
        _1275 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)));
        _1276 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
        _1277 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
    }
    else
    {
        _1263 = _951;
        _1264 = _951;
        _1265 = _951;
        _1266 = _951;
        _1267 = _951;
        _1268 = _951;
        _1269 = _951;
        _1270 = _951;
        _1271 = _951;
        _1272 = _951;
        _1273 = _951;
        _1274 = _951;
        _1275 = 0.0;
        _1276 = 0.0;
        _1277 = 0.0;
    }
    float _1287 = (cbModelParam._m0[1u].x * (_1275 - _963)) + _963;
    float _1288 = (cbModelParam._m0[1u].x * (_1276 - _964)) + _964;
    float _1289 = (cbModelParam._m0[1u].x * (_1277 - _965)) + _965;
    float _1310 = fma(_1289, cbSceneParam._m0[89u].z, fma(_1288, cbSceneParam._m0[89u].y, _1287 * cbSceneParam._m0[89u].x));
    float _1313 = fma(_1289, cbSceneParam._m0[90u].z, fma(_1288, cbSceneParam._m0[90u].y, _1287 * cbSceneParam._m0[90u].x));
    float _1316 = fma(_1289, cbSceneParam._m0[91u].z, fma(_1288, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1287));
    float _1331 = _556 * 0.5;
    float _1332 = _557 * 0.5;
    float _1333 = _558 * 0.5;
    float _1334 = dot(vec4(_1331, _1332, _1333, 1.0), vec4(_1265, _1268, _1271, _1274));
    float _1337 = dot(vec4(_1331, _1332, _1333, 1.0), vec4(_1264, _1267, _1270, _1273));
    float _1340 = dot(vec4(_1331, _1332, _1333, 1.0), vec4(_1263, _1266, _1269, _1272));
    float _1374;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1347 = dot(vec4(_1331, _1332, _1333, 1.0), vec4(_950, _954, _957, _960));
        float _1351 = dot(vec4(_1331, _1332, _1333, 1.0), vec4(_952, _955, _958, _961));
        float _1355 = dot(vec4(_1331, _1332, _1333, 1.0), vec4(_953, _956, _959, _962));
        float _1362 = dot(vec4(cbModelParam._m0[39u]), vec4(_1331, _1332, _1333, 1.0));
        _1374 = dot(vec3(isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)), isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)), isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1362) ? 0.0 : (isnan(0.0) ? _1362 : max(0.0, _1362))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1374 = 1.0;
    }
    float _1385;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1376 = dot(vec4(cbModelParam._m0[40u]), vec4(_1331, _1332, _1333, 1.0));
        _1385 = dot(vec3(isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)), isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)), isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1376) ? 0.0 : (isnan(0.0) ? _1376 : max(0.0, _1376))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1385 = 1.0;
    }
    float _1389 = (_1385 * cbModelParam._m0[1u].x) + (_1374 * (1.0 - cbModelParam._m0[1u].x));
    float _1399 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _419);
    float _1400 = isnan(_1399) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1399 : min(cbModelParam._m0[25u].z, _1399));
    float _1482;
    float _1484;
    float _1486;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1449 = fma(_620, cbModelParam._m0[13u].z, fma(_616, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _612)) + cbModelParam._m0[13u].w;
        float _1453 = fma(_620, cbModelParam._m0[14u].z, fma(_616, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _612)) + cbModelParam._m0[14u].w;
        float _1457 = fma(_620, cbModelParam._m0[15u].z, fma(_616, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _612)) + cbModelParam._m0[15u].w;
        float _1460 = fma(_558, cbModelParam._m0[13u].z, fma(_557, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _556));
        float _1463 = fma(_558, cbModelParam._m0[14u].z, fma(_557, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _556));
        float _1466 = fma(_558, cbModelParam._m0[15u].z, fma(_557, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _556));
        float _1494;
        if (_1460 > 0.0)
        {
            _1494 = abs((1.0 - _1449) / _1460);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1460 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1449 + 1.0) / _1460);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1494 = frontier_phi_19_17_ladder;
        }
        float _1670;
        if (_1463 > 0.0)
        {
            _1670 = abs((1.0 - _1453) / _1463);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1463 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1453 + 1.0) / _1463);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1670 = frontier_phi_28_24_ladder;
        }
        float _1966;
        if (_1466 > 0.0)
        {
            _1966 = abs((1.0 - _1457) / _1466);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1457 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1966 = frontier_phi_40_35_ladder;
        }
        float _1968 = isnan(_1670) ? _1494 : (isnan(_1494) ? _1670 : min(_1494, _1670));
        float _1969 = isnan(_1966) ? _1968 : (isnan(_1968) ? _1966 : min(_1968, _1966));
        float _1973 = (_1969 * _1460) + _1449;
        float _1974 = (_1969 * _1463) + _1453;
        float _1975 = (_1969 * _1466) + _1457;
        float _1976 = _1969 * 9.9999997473787516355514526367188e-05;
        float _1978 = (-1.0) - _1976;
        float _1980 = _1976 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1975 > _1980) || ((_1975 < _1978) || ((_1974 > _1980) || ((_1974 < _1978) || ((_1973 < _1978) || (_1973 > _1980))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2120 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1975, cbModelParam._m0[9u].z, fma(_1974, cbModelParam._m0[9u].y, _1973 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1975, cbModelParam._m0[10u].z, fma(_1974, cbModelParam._m0[10u].y, _1973 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1975, cbModelParam._m0[11u].z, fma(_1974, cbModelParam._m0[11u].y, _1973 * cbModelParam._m0[11u].x))), _1400);
            frontier_phi_18_40_ladder = _2120.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2120.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2120.x * cbModelParam._m0[1u].y;
        }
        _1482 = frontier_phi_18_40_ladder_2;
        _1484 = frontier_phi_18_40_ladder_1;
        _1486 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1470 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_556, _557, _558), _1400);
        _1482 = _1470.x * cbModelParam._m0[1u].y;
        _1484 = _1470.y * cbModelParam._m0[1u].y;
        _1486 = _1470.z * cbModelParam._m0[1u].y;
    }
    float _1490 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _419);
    float _1491 = isnan(_1490) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1490 : min(cbModelParam._m0[25u].w, _1490));
    float _1584;
    float _1586;
    float _1588;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1548 = fma(_620, cbModelParam._m0[21u].z, fma(_616, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _612)) + cbModelParam._m0[21u].w;
        float _1552 = fma(_620, cbModelParam._m0[22u].z, fma(_616, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _612)) + cbModelParam._m0[22u].w;
        float _1556 = fma(_620, cbModelParam._m0[23u].z, fma(_616, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _612)) + cbModelParam._m0[23u].w;
        float _1559 = fma(_558, cbModelParam._m0[21u].z, fma(_557, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _556));
        float _1562 = fma(_558, cbModelParam._m0[22u].z, fma(_557, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _556));
        float _1565 = fma(_558, cbModelParam._m0[23u].z, fma(_557, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _556));
        float _1675;
        if (_1559 > 0.0)
        {
            _1675 = abs((1.0 - _1548) / _1559);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1559 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1548 + 1.0) / _1559);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1675 = frontier_phi_30_26_ladder;
        }
        float _1993;
        if (_1562 > 0.0)
        {
            _1993 = abs((1.0 - _1552) / _1562);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1562 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1552 + 1.0) / _1562);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1993 = frontier_phi_42_37_ladder;
        }
        float _2331;
        if (_1565 > 0.0)
        {
            _2331 = abs((1.0 - _1556) / _1565);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1565 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1556 + 1.0) / _1565);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2331 = frontier_phi_52_49_ladder;
        }
        float _2333 = isnan(_1993) ? _1675 : (isnan(_1675) ? _1993 : min(_1675, _1993));
        float _2334 = isnan(_2331) ? _2333 : (isnan(_2333) ? _2331 : min(_2333, _2331));
        float _2338 = (_2334 * _1559) + _1548;
        float _2339 = (_2334 * _1562) + _1552;
        float _2340 = (_2334 * _1565) + _1556;
        float _2341 = _2334 * 9.9999997473787516355514526367188e-05;
        float _2342 = (-1.0) - _2341;
        float _2344 = _2341 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2340 > _2344) || ((_2340 < _2342) || ((_2339 > _2344) || ((_2339 < _2342) || ((_2338 < _2342) || (_2338 > _2344))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2462 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2340, cbModelParam._m0[17u].z, fma(_2339, cbModelParam._m0[17u].y, _2338 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2340, cbModelParam._m0[18u].z, fma(_2339, cbModelParam._m0[18u].y, _2338 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2340, cbModelParam._m0[19u].z, fma(_2339, cbModelParam._m0[19u].y, _2338 * cbModelParam._m0[19u].x))), _1491);
            frontier_phi_27_52_ladder = _2462.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2462.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2462.x * cbModelParam._m0[1u].z;
        }
        _1584 = frontier_phi_27_52_ladder_2;
        _1586 = frontier_phi_27_52_ladder_1;
        _1588 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1568 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_556, _557, _558), _1491);
        _1584 = _1568.x * cbModelParam._m0[1u].z;
        _1586 = _1568.y * cbModelParam._m0[1u].z;
        _1588 = _1568.z * cbModelParam._m0[1u].z;
    }
    float _1601 = (((_583 * _532) + _584) * _548) * ((cbModelParam._m0[1u].w * (_1584 - _1482)) + _1482);
    float _1603 = (((_583 * _534) + _584) * _548) * ((cbModelParam._m0[1u].w * (_1586 - _1484)) + _1484);
    float _1605 = (((_583 * _535) + _584) * _548) * ((cbModelParam._m0[1u].w * (_1588 - _1486)) + _1486);
    float _1608 = fma(_1605, cbSceneParam._m0[89u].z, fma(_1603, cbSceneParam._m0[89u].y, _1601 * cbSceneParam._m0[89u].x));
    float _1611 = fma(_1605, cbSceneParam._m0[90u].z, fma(_1603, cbSceneParam._m0[90u].y, _1601 * cbSceneParam._m0[90u].x));
    float _1614 = fma(_1605, cbSceneParam._m0[91u].z, fma(_1603, cbSceneParam._m0[91u].y, _1601 * cbSceneParam._m0[91u].x));
    float _1649 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1653 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1657 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1661 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1662 = _1649 / _1661;
    float _1663 = _1653 / _1661;
    float _1664 = _1657 / _1661;
    float _1811;
    float _1812;
    float _1813;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1691 = ((uint(_1664 > cbSceneParam._m0[59u].y) + uint(_1664 > cbSceneParam._m0[59u].x)) + uint(_1664 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1692 = _1691 + 43u;
        uint _1700 = _1691 + 44u;
        uint _1708 = _1691 + 45u;
        uint _1716 = _1691 + 46u;
        float _1727 = fma(_1661, cbSceneParam._m0[_1692].w, fma(_1657, cbSceneParam._m0[_1692].z, fma(_1653, cbSceneParam._m0[_1692].y, _1649 * cbSceneParam._m0[_1692].x)));
        float _1731 = fma(_1661, cbSceneParam._m0[_1700].w, fma(_1657, cbSceneParam._m0[_1700].z, fma(_1653, cbSceneParam._m0[_1700].y, _1649 * cbSceneParam._m0[_1700].x)));
        float _1739 = fma(_1661, cbSceneParam._m0[_1716].w, fma(_1657, cbSceneParam._m0[_1716].z, fma(_1653, cbSceneParam._m0[_1716].y, _1649 * cbSceneParam._m0[_1716].x)));
        float _1744 = cbSceneParam._m0[33u].z * _1739;
        float _1746 = cbSceneParam._m0[33u].w * _1739;
        float _1749 = fma(_1661, cbSceneParam._m0[_1708].w, fma(_1657, cbSceneParam._m0[_1708].z, fma(_1653, cbSceneParam._m0[_1708].y, _1649 * cbSceneParam._m0[_1708].x))) / _1739;
        float _1797 = (cbSceneParam._m0[33u].x - sqrt(((_1663 * _1663) + (_1662 * _1662)) + (_1664 * _1664))) * cbSceneParam._m0[33u].y;
        float _4138 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1804 = (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1744 + _1727) / _1739, (_1746 + _1731) / _1739), _1749), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1746 + _1727) / _1739, (_1731 - _1744) / _1739), _1749), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1727 - _1744) / _1739, (_1731 - _1746) / _1739), _1749), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1727 - _1746) / _1739, (_1744 + _1731) / _1739), _1749), 0.0)).x), vec4(0.25)));
        _1811 = 1.0 - (_1804 * cbSceneParam._m0[34u].x);
        _1812 = 1.0 - (_1804 * cbSceneParam._m0[34u].y);
        _1813 = 1.0 - (_1804 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1811 = 1.0;
        _1812 = 1.0;
        _1813 = 1.0;
    }
    float _1877;
    float _1879;
    float _1881;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1865 = fma(_1661, cbSceneParam._m0[63u].w, fma(_1657, cbSceneParam._m0[63u].z, fma(_1653, cbSceneParam._m0[63u].y, _1649 * cbSceneParam._m0[63u].x)));
        float _1866 = fma(_1661, cbSceneParam._m0[60u].w, fma(_1657, cbSceneParam._m0[60u].z, fma(_1653, cbSceneParam._m0[60u].y, _1649 * cbSceneParam._m0[60u].x))) / _1865;
        float _1867 = fma(_1661, cbSceneParam._m0[61u].w, fma(_1657, cbSceneParam._m0[61u].z, fma(_1653, cbSceneParam._m0[61u].y, _1649 * cbSceneParam._m0[61u].x))) / _1865;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1866 >= cbSceneParam._m0[64u].x) && (_1867 >= cbSceneParam._m0[64u].y)) && (_1866 <= cbSceneParam._m0[64u].z)) && (_1867 <= cbSceneParam._m0[64u].w))
        {
            float _2006 = fma(_1661, cbSceneParam._m0[62u].w, fma(_1657, cbSceneParam._m0[62u].z, fma(_1653, cbSceneParam._m0[62u].y, _1649 * cbSceneParam._m0[62u].x))) / _1865;
            float _2010 = isnan(cbSceneParam._m0[41u].w) ? _2006 : (isnan(_2006) ? cbSceneParam._m0[41u].w : max(_2006, cbSceneParam._m0[41u].w));
            float _2053 = (cbSceneParam._m0[33u].x - sqrt(((_1663 * _1663) + (_1662 * _1662)) + (_1664 * _1664))) * cbSceneParam._m0[33u].y;
            float _4154 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
            float _2060 = (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1866, cbSceneParam._m0[33u].w + _1867), _2010), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1866, _1867 - cbSceneParam._m0[33u].z), _2010), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1866 - cbSceneParam._m0[33u].z, _1867 - cbSceneParam._m0[33u].w), _2010), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1866 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1867), _2010), 0.0)).x), vec4(0.25)));
            float _2064 = 1.0 - (_2060 * cbSceneParam._m0[34u].x);
            float _2065 = 1.0 - (_2060 * cbSceneParam._m0[34u].y);
            float _2066 = 1.0 - (_2060 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2065) ? _1812 : (isnan(_1812) ? _2065 : min(_1812, _2065));
            frontier_phi_39_38_ladder_1 = isnan(_2064) ? _1811 : (isnan(_1811) ? _2064 : min(_1811, _2064));
            frontier_phi_39_38_ladder_2 = isnan(_2066) ? _1813 : (isnan(_1813) ? _2066 : min(_1813, _2066));
        }
        else
        {
            frontier_phi_39_38_ladder = _1812;
            frontier_phi_39_38_ladder_1 = _1811;
            frontier_phi_39_38_ladder_2 = _1813;
        }
        _1877 = frontier_phi_39_38_ladder_1;
        _1879 = frontier_phi_39_38_ladder;
        _1881 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1877 = _1811;
        _1879 = _1812;
        _1881 = _1813;
    }
    uvec4 _1886 = floatBitsToUint(cbInstanceData._m0[_506 + 5u]);
    uint _1888 = _1886.x * 14u;
    uint _1889 = _1888 + 13u;
    float _1896 = _548 + (-1.0);
    float _1901 = (cbLight._m0[_1889].x * _1896) + 1.0;
    float _1902 = (cbLight._m0[_1889].y * _1896) + 1.0;
    float _1903 = (cbLight._m0[_1889].z * _1896) + 1.0;
    float _1904 = (cbLight._m0[_1889].w * _1896) + 1.0;
    uint _1905 = _1888 + 5u;
    float _1911 = isnan(1.0) ? _1902 : (isnan(_1902) ? 1.0 : min(_1902, 1.0));
    uint _1915 = _1888 + 4u;
    float _1925 = isnan(1.0) ? _1901 : (isnan(_1901) ? 1.0 : min(_1901, 1.0));
    uint _1929 = _1888 | 1u;
    float _1940 = dot(vec3(cbLight._m0[_1888].xyz), vec3(_416, _417, _418));
    float _1943 = dot(vec3(cbLight._m0[_1929].xyz), vec3(_416, _417, _418));
    float _4190 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _4201 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
    float _1948 = (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * 0.3183098733425140380859375;
    float _1950 = (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * 0.3183098733425140380859375;
    float _1957 = ((cbLight._m0[_1905].x * _1911) * _1950) + (((cbLight._m0[_1915].x * _1877) * _1925) * _1948);
    float _1958 = ((_1911 * cbLight._m0[_1905].y) * _1950) + (((cbLight._m0[_1915].y * _1879) * _1925) * _1948);
    float _1959 = ((_1911 * cbLight._m0[_1905].z) * _1950) + (((cbLight._m0[_1915].z * _1881) * _1925) * _1948);
    uvec4 _1963 = floatBitsToUint(cbLight._m0[_1888 + 12u]);
    bool _1965 = _1963.x == 0u;
    float _2067;
    float _2069;
    float _2071;
    if (_1965)
    {
        _2067 = _1957;
        _2069 = _1958;
        _2071 = _1959;
    }
    else
    {
        uint _2075 = _1888 + 6u;
        float _2091 = (dot(vec3(cbLight._m0[_1888 + 2u].xyz), vec3(_416, _417, _418)) * 0.5) + 0.5;
        float _2092 = _2091 * _2091;
        float _4212 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2093 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _2094 = isnan(1.0) ? _1903 : (isnan(_1903) ? 1.0 : min(_1903, 1.0));
        _2067 = (((cbLight._m0[_2075].x * 0.3183098733425140380859375) * _2093) * _2094) + _1957;
        _2069 = (((cbLight._m0[_2075].y * 0.3183098733425140380859375) * _2093) * _2094) + _1958;
        _2071 = (((cbLight._m0[_2075].z * 0.3183098733425140380859375) * _2093) * _2094) + _1959;
    }
    bool _2074 = _1963.y == 0u;
    float _2129;
    float _2131;
    float _2133;
    if (_2074)
    {
        _2129 = _2067;
        _2131 = _2069;
        _2133 = _2071;
    }
    else
    {
        uint _2302 = _1888 + 7u;
        float _2318 = (dot(vec3(cbLight._m0[_1888 + 3u].xyz), vec3(_416, _417, _418)) * 0.5) + 0.5;
        float _2319 = _2318 * _2318;
        float _4228 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2320 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _2321 = isnan(1.0) ? _1904 : (isnan(_1904) ? 1.0 : min(_1904, 1.0));
        _2129 = (((cbLight._m0[_2302].x * 0.3183098733425140380859375) * _2320) * _2321) + _2067;
        _2131 = (((cbLight._m0[_2302].y * 0.3183098733425140380859375) * _2320) * _2321) + _2069;
        _2133 = (((cbLight._m0[_2302].z * 0.3183098733425140380859375) * _2320) * _2321) + _2071;
    }
    uint _2136 = _1888 + 8u;
    float _2149 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1888].w)) * _419) * 0.949999988079071044921875);
    float _2150 = _2149 * _2149;
    float _2151 = cbLight._m0[_1888].x + _445;
    float _2152 = cbLight._m0[_1888].y + _446;
    float _2153 = cbLight._m0[_1888].z + _447;
    float _2157 = inversesqrt(dot(vec3(_2151, _2152, _2153), vec3(_2151, _2152, _2153)));
    float _2158 = _2157 * _2151;
    float _2159 = _2157 * _2152;
    float _2160 = _2157 * _2153;
    float _2161 = dot(vec3(_416, _417, _418), vec3(cbLight._m0[_1888].xyz));
    float _4244 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2164 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _4255 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _2165 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
    float _2166 = dot(vec3(_416, _417, _418), vec3(_2158, _2159, _2160));
    float _4266 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2169 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
    float _2170 = dot(vec3(cbLight._m0[_1888].xyz), vec3(_2158, _2159, _2160));
    float _4277 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2174 = _2150 * _2150;
    float _2178 = ((_2169 * _2169) * (_2174 + (-1.0))) + 1.0;
    float _2186 = exp2(log2(1.0 - (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0)))) * 5.0);
    float _2187 = 0.959999978542327880859375 - _529;
    float _2189 = 0.959999978542327880859375 - _530;
    float _2190 = 0.959999978542327880859375 - _531;
    float _2197 = 1.0 - _2150;
    float _2208 = (0.5 / (((_2165 * ((_2164 * _2197) + _2150)) + 9.9999999392252902907785028219223e-09) + (((_2165 * _2197) + _2150) * _2164))) * _2164;
    float _4288 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2210 = (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_2174 / ((_2178 * _2178) * 3.141590118408203125));
    uint _2224 = _1888 + 9u;
    float _2235 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1929].w)) * _419) * 0.949999988079071044921875);
    float _2236 = _2235 * _2235;
    float _2237 = cbLight._m0[_1929].x + _445;
    float _2238 = cbLight._m0[_1929].y + _446;
    float _2239 = cbLight._m0[_1929].z + _447;
    float _2243 = inversesqrt(dot(vec3(_2237, _2238, _2239), vec3(_2237, _2238, _2239)));
    float _2244 = _2243 * _2237;
    float _2245 = _2243 * _2238;
    float _2246 = _2243 * _2239;
    float _2247 = dot(vec3(_416, _417, _418), vec3(cbLight._m0[_1929].xyz));
    float _4299 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2250 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
    float _2251 = dot(vec3(_416, _417, _418), vec3(_2244, _2245, _2246));
    float _4310 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2254 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
    float _2255 = dot(vec3(cbLight._m0[_1929].xyz), vec3(_2244, _2245, _2246));
    float _4321 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2259 = _2236 * _2236;
    float _2263 = ((_2254 * _2254) * (_2259 + (-1.0))) + 1.0;
    float _2270 = exp2(log2(1.0 - (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0)))) * 5.0);
    float _2277 = 1.0 - _2236;
    float _2287 = (0.5 / (((_2165 * ((_2250 * _2277) + _2236)) + 9.9999999392252902907785028219223e-09) + (((_2165 * _2277) + _2236) * _2250))) * _2250;
    float _4332 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2289 = (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_2259 / ((_2263 * _2263) * 3.141590118408203125));
    float _2299 = (((((_2270 * _2187) + _532) * cbLight._m0[_2224].x) * _2289) * _1911) + ((((cbLight._m0[_2136].x * _1877) * ((_2186 * _2187) + _532)) * _2210) * _1925);
    float _2300 = (((((_2270 * _2189) + _534) * cbLight._m0[_2224].y) * _2289) * _1911) + ((((cbLight._m0[_2136].y * _1879) * ((_2186 * _2189) + _534)) * _2210) * _1925);
    float _2301 = (((((_2270 * _2190) + _535) * cbLight._m0[_2224].z) * _2289) * _1911) + ((((cbLight._m0[_2136].z * _1881) * ((_2186 * _2190) + _535)) * _2210) * _1925);
    float _2357;
    float _2359;
    float _2361;
    if (_1965)
    {
        _2357 = _2299;
        _2359 = _2300;
        _2361 = _2301;
    }
    else
    {
        uint _2363 = _1888 + 2u;
        uint _2367 = _1888 + 10u;
        float _2381 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2363].w)) * _419) * 0.949999988079071044921875);
        float _2382 = _2381 * _2381;
        float _2383 = cbLight._m0[_2363].x + _445;
        float _2384 = cbLight._m0[_2363].y + _446;
        float _2385 = cbLight._m0[_2363].z + _447;
        float _2389 = inversesqrt(dot(vec3(_2383, _2384, _2385), vec3(_2383, _2384, _2385)));
        float _2390 = _2389 * _2383;
        float _2391 = _2389 * _2384;
        float _2392 = _2389 * _2385;
        float _2393 = dot(vec3(_416, _417, _418), vec3(cbLight._m0[_2363].xyz));
        float _4343 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2396 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _2397 = dot(vec3(_416, _417, _418), vec3(_2390, _2391, _2392));
        float _4354 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2400 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _2401 = dot(vec3(cbLight._m0[_2363].xyz), vec3(_2390, _2391, _2392));
        float _4365 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2405 = _2382 * _2382;
        float _2409 = ((_2400 * _2400) * (_2405 + (-1.0))) + 1.0;
        float _2416 = exp2(log2(1.0 - (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)))) * 5.0);
        float _2423 = 1.0 - _2382;
        float _2433 = (0.5 / (((_2165 * ((_2396 * _2423) + _2382)) + 9.9999999392252902907785028219223e-09) + (((_2165 * _2423) + _2382) * _2396))) * _2396;
        float _4376 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2435 = (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_2405 / ((_2409 * _2409) * 3.141590118408203125));
        float _2436 = isnan(1.0) ? _1903 : (isnan(_1903) ? 1.0 : min(_1903, 1.0));
        _2357 = (((((_2416 * _2187) + _532) * cbLight._m0[_2367].x) * _2435) * _2436) + _2299;
        _2359 = (((((_2416 * _2189) + _534) * cbLight._m0[_2367].y) * _2435) * _2436) + _2300;
        _2361 = (((((_2416 * _2190) + _535) * cbLight._m0[_2367].z) * _2435) * _2436) + _2301;
    }
    float _2467;
    float _2469;
    float _2471;
    if (_2074)
    {
        _2467 = _2357;
        _2469 = _2359;
        _2471 = _2361;
    }
    else
    {
        uint _2478 = _1888 + 3u;
        uint _2482 = _1888 + 11u;
        float _2496 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2478].w)) * _419) * 0.949999988079071044921875);
        float _2497 = _2496 * _2496;
        float _2498 = cbLight._m0[_2478].x + _445;
        float _2499 = cbLight._m0[_2478].y + _446;
        float _2500 = cbLight._m0[_2478].z + _447;
        float _2504 = inversesqrt(dot(vec3(_2498, _2499, _2500), vec3(_2498, _2499, _2500)));
        float _2505 = _2504 * _2498;
        float _2506 = _2504 * _2499;
        float _2507 = _2504 * _2500;
        float _2508 = dot(vec3(_416, _417, _418), vec3(cbLight._m0[_2478].xyz));
        float _4392 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2511 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _2512 = dot(vec3(_416, _417, _418), vec3(_2505, _2506, _2507));
        float _4403 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2515 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _2516 = dot(vec3(cbLight._m0[_2478].xyz), vec3(_2505, _2506, _2507));
        float _4414 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2520 = _2497 * _2497;
        float _2524 = ((_2515 * _2515) * (_2520 + (-1.0))) + 1.0;
        float _2531 = exp2(log2(1.0 - (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0)))) * 5.0);
        float _2538 = 1.0 - _2497;
        float _2548 = (0.5 / (((_2165 * ((_2511 * _2538) + _2497)) + 9.9999999392252902907785028219223e-09) + (((_2165 * _2538) + _2497) * _2511))) * _2511;
        float _4425 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2550 = (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_2520 / ((_2524 * _2524) * 3.141590118408203125));
        float _2551 = isnan(1.0) ? _1904 : (isnan(_1904) ? 1.0 : min(_1904, 1.0));
        _2467 = (((((_2531 * _2187) + _532) * cbLight._m0[_2482].x) * _2550) * _2551) + _2357;
        _2469 = (((((_2531 * _2189) + _534) * cbLight._m0[_2482].y) * _2550) * _2551) + _2359;
        _2471 = (((((_2531 * _2190) + _535) * cbLight._m0[_2482].z) * _2550) * _2551) + _2361;
    }
    float _2616;
    float _2618;
    float _2620;
    float _2622;
    float _2624;
    float _2626;
    if (_1886.y == 0u)
    {
        uvec4 _2572 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2573 = _2572.x;
        uint _2584 = uint((float(_2572.y) * floor(float(uint(cbSceneParam._m0[85u].y * _467) / _2573))) + floor(float(uint(cbSceneParam._m0[85u].x * _466) / _2573)));
        float _2594 = (log2(_1664 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2595 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        uint _2598 = uint(isnan(14.0) ? _2595 : (isnan(_2595) ? 14.0 : min(_2595, 14.0)));
        uvec4 _2603 = texelFetch(g_lightClusterGridBuffer, int(((_2598 << 2u) + (_2584 << 6u)) >> 2u));
        uint _2604 = _2603.x;
        uint _2605 = _2572.z;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        if (((((1u << ((_2605 >> 4u) & 15u)) + 4294967295u) & _2604) == 0u) || ((_2605 & 240u) == 0u))
        {
            _2683 = 0.0;
            _2685 = 0.0;
            _2687 = 0.0;
            _2689 = 0.0;
            _2691 = 0.0;
            _2693 = 0.0;
        }
        else
        {
            float _2684;
            float _2686;
            float _2688;
            float _2690;
            float _2692;
            float _2694;
            float _2835 = 0.0;
            float _2836 = 0.0;
            float _2837 = 0.0;
            float _2838 = 0.0;
            float _2839 = 0.0;
            float _2840 = 0.0;
            uint _2841 = 0u;
            uint _2850;
            bool _2851;
            for (;;)
            {
                _2850 = texelFetch(g_lightClassification, int((((_2598 << 5u) + (_2584 << 9u)) + (_2841 << 2u)) >> 2u)).x;
                _2851 = _2850 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2851)
                {
                    frontier_phi_73_pred = _2840;
                    frontier_phi_73_pred_1 = _2839;
                    frontier_phi_73_pred_2 = _2838;
                    frontier_phi_73_pred_3 = _2837;
                    frontier_phi_73_pred_4 = _2836;
                    frontier_phi_73_pred_5 = _2835;
                }
                else
                {
                    float _2980;
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    float _2985;
                    uint _2986;
                    _2980 = _2835;
                    _2981 = _2836;
                    _2982 = _2837;
                    _2983 = _2838;
                    _2984 = _2839;
                    _2985 = _2840;
                    _2986 = _2850;
                    float _2907;
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    for (;;)
                    {
                        uint _2990 = uint(findLSB(_2986)) + (_2841 << 5u);
                        uint _2987 = (_2986 + 4294967295u) & _2986;
                        uint _2992 = _2990 * 48u;
                        vec4 _3006 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2992)).x, texelFetch(g_PointLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2992 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2992 + 3u)).x));
                        uint _3012 = (_2990 * 48u) + 4u;
                        vec4 _3025 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3012)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 3u)).x));
                        uint _3031 = (_2990 * 48u) + 8u;
                        vec3 _3042 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3031)).x, texelFetch(g_PointLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3031 + 2u)).x));
                        float _3046 = _3006.x - _1662;
                        float _3047 = _3006.y - _1663;
                        float _3048 = _3006.z - _1664;
                        float _3049 = dot(vec3(_3046, _3047, _3048), vec3(_3046, _3047, _3048));
                        float _3052 = inversesqrt(_3049);
                        float _3053 = _3052 * _3046;
                        float _3054 = _3052 * _3047;
                        float _3055 = _3052 * _3048;
                        float _3056 = dot(vec3(_487, _490, _493), vec3(_3053, _3054, _3055));
                        float _3061 = 1.0 - (_3049 * _3006.w);
                        float _4451 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                        float _3062 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
                        float _3063 = sqrt(_3049) * _3025.w;
                        float _3066 = 1.39999997615814208984375 / (_3063 + 1.39999997615814208984375);
                        float _3067 = _3066 * _3066;
                        float _3070 = ((1.0 - _3067) * _3056) + _3067;
                        float _3073 = _3063 * _3063;
                        float _3077 = ((isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0))) * _3062) / ((_3073 * 0.699999988079071044921875) + 1.0);
                        float _3081 = (-0.0) - _1662;
                        float _3082 = (-0.0) - _1663;
                        float _3083 = (-0.0) - _1664;
                        float _3087 = inversesqrt(dot(vec3(_3081, _3082, _3083), vec3(_3081, _3082, _3083)));
                        float _3088 = _3087 * _3081;
                        float _3089 = _3087 * _3082;
                        float _3090 = _3087 * _3083;
                        float _3097 = exp2(log2(1.0 / ((_3073 * 3.5) + 5.0)) * 0.25);
                        float _3098 = 1.0 - _564;
                        float _3105 = sqrt(1.0 - ((1.0 - (_3098 * _3098)) * (1.0 - (_3097 * _3097))));
                        float _3106 = _3105 * _3105;
                        float _3107 = _3106 * _3106;
                        float _3108 = _3088 + _3053;
                        float _3109 = _3089 + _3054;
                        float _3110 = _3090 + _3055;
                        float _3114 = inversesqrt(dot(vec3(_3108, _3109, _3110), vec3(_3108, _3109, _3110)));
                        float _3118 = dot(vec3(_487, _490, _493), vec3(_3088, _3089, _3090));
                        float _4467 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                        float _3121 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                        float _3122 = dot(vec3(_487, _490, _493), vec3(_3114 * _3108, _3114 * _3109, _3114 * _3110));
                        float _4478 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                        float _3125 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                        float _3129 = ((_3125 * _3125) * (_3107 + (-1.0))) + 1.0;
                        float _3130 = _3066 * _3106;
                        float _3131 = _3130 * _3130;
                        float _3134 = ((1.0 - _3131) * _3056) + _3131;
                        float _4489 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                        float _3135 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
                        float _3136 = 1.0 - _3106;
                        float _3146 = (0.5 / (((_3135 * ((_3121 * _3136) + _3106)) + 9.9999999392252902907785028219223e-09) + (((_3135 * _3136) + _3106) * _3121))) * _3135;
                        float _4500 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                        float _3157 = (((_3107 * 3.1415927410125732421875) * (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0)))) / ((_3129 * _3129) * ((_3073 * 2.1991131305694580078125) + 3.141590118408203125))) * _3062;
                        _2910 = (_3077 * _3025.x) + _2983;
                        _2911 = (_3077 * _3025.y) + _2984;
                        _2912 = (_3077 * _3025.z) + _2985;
                        _2907 = (_3157 * _3042.x) + _2980;
                        _2908 = (_3157 * _3042.y) + _2981;
                        _2909 = (_3157 * _3042.z) + _2982;
                        if (_2987 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2980 = _2907;
                            _2981 = _2908;
                            _2982 = _2909;
                            _2983 = _2910;
                            _2984 = _2911;
                            _2985 = _2912;
                            _2986 = _2987;
                        }
                    }
                    frontier_phi_73_pred = _2912;
                    frontier_phi_73_pred_1 = _2911;
                    frontier_phi_73_pred_2 = _2910;
                    frontier_phi_73_pred_3 = _2909;
                    frontier_phi_73_pred_4 = _2908;
                    frontier_phi_73_pred_5 = _2907;
                }
                _2694 = frontier_phi_73_pred;
                _2692 = frontier_phi_73_pred_1;
                _2690 = frontier_phi_73_pred_2;
                _2688 = frontier_phi_73_pred_3;
                _2686 = frontier_phi_73_pred_4;
                _2684 = frontier_phi_73_pred_5;
                uint _2842 = _2841 + 1u;
                if (_2842 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2835 = _2684;
                    _2836 = _2686;
                    _2837 = _2688;
                    _2838 = _2690;
                    _2839 = _2692;
                    _2840 = _2694;
                    _2841 = _2842;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2683 = _2684;
            _2685 = _2686;
            _2687 = _2688;
            _2689 = _2690;
            _2691 = _2692;
            _2693 = _2694;
        }
        uvec4 _2697 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2698 = _2697.z;
        uint _2700 = (_2698 >> 8u) & 15u;
        float _2803;
        float _2805;
        float _2807;
        float _2809;
        float _2811;
        float _2813;
        if (((4294967295u << _2700) & _2604) == 0u)
        {
            _2803 = _2683;
            _2805 = _2685;
            _2807 = _2687;
            _2809 = _2689;
            _2811 = _2691;
            _2813 = _2693;
        }
        else
        {
            float _2828 = inversesqrt(dot(vec3(_1662, _1663, _1664), vec3(_1662, _1663, _1664)));
            float _2829 = _2828 * _1662;
            float _2830 = _2828 * _1663;
            float _2831 = _2828 * _1664;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2700 < ((_2698 >> 12u) & 15u))
            {
                float _2804;
                float _2806;
                float _2808;
                float _2810;
                float _2812;
                float _2814;
                float _2963 = _2683;
                float _2964 = _2685;
                float _2965 = _2687;
                float _2966 = _2689;
                float _2967 = _2691;
                float _2968 = _2693;
                uint _2969 = _2700;
                uint _2978;
                bool _2979;
                for (;;)
                {
                    _2978 = texelFetch(g_lightClassification, int((((_2598 << 5u) + (_2584 << 9u)) + (_2969 << 2u)) >> 2u)).x;
                    _2979 = _2978 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2979)
                    {
                        frontier_phi_84_pred = _2967;
                        frontier_phi_84_pred_1 = _2966;
                        frontier_phi_84_pred_2 = _2965;
                        frontier_phi_84_pred_3 = _2964;
                        frontier_phi_84_pred_4 = _2963;
                        frontier_phi_84_pred_5 = _2968;
                    }
                    else
                    {
                        float _3171;
                        float _3172;
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3184 = _2963;
                        float _3185 = _2964;
                        float _3186 = _2965;
                        float _3187 = _2966;
                        float _3188 = _2967;
                        float _3189 = _2968;
                        uint _3190 = _2978;
                        uint _3191;
                        vec4 _3216;
                        float _3217;
                        vec4 _3232;
                        vec3 _3244;
                        vec4 _3260;
                        vec4 _3276;
                        float _3323;
                        bool _3324;
                        for (;;)
                        {
                            uint _3201 = ((_2969 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3190));
                            _3191 = (_3190 + 4294967295u) & _3190;
                            uint _3203 = _3201 * 40u;
                            _3216 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 3u)).x));
                            _3217 = _3216.w;
                            uint _3219 = (_3201 * 40u) + 4u;
                            _3232 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3219)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 3u)).x));
                            uint _3234 = (_3201 * 40u) + 8u;
                            _3244 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x));
                            uint _3247 = (_3201 * 40u) + 16u;
                            _3260 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3247)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 3u)).x));
                            uint _3263 = (_3201 * 40u) + 20u;
                            _3276 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 3u)).x));
                            uint _3279 = (_3201 * 40u) + 24u;
                            vec4 _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            uint _3298 = (_3201 * 40u) + 28u;
                            vec4 _3311 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 3u)).x));
                            _3323 = fma(_1664, _3311.z, fma(_1663, _3311.y, _3311.x * _1662)) + _3311.w;
                            _3324 = !((fma(_1664, _3292.z, fma(_1663, _3292.y, _3292.x * _1662)) + _3292.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3324)
                            {
                                float _3351 = _3216.x - _1662;
                                float _3352 = _3216.y - _1663;
                                float _3353 = _3216.z - _1664;
                                float _3354 = dot(vec3(_3351, _3352, _3353), vec3(_3351, _3352, _3353));
                                float _3357 = inversesqrt(_3354);
                                float _3358 = _3357 * _3351;
                                float _3359 = _3357 * _3352;
                                float _3360 = _3357 * _3353;
                                float _3364 = 1.0 - (_3354 / (_3217 * _3217));
                                float _4511 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                                float _3365 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                                float _3369 = sqrt(_3354) * _3232.w;
                                float _3371 = 1.39999997615814208984375 / (_3369 + 1.39999997615814208984375);
                                float _3372 = _3371 * _3371;
                                float _3375 = ((1.0 - _3372) * dot(vec3(_3358, _3359, _3360), vec3(_487, _490, _493))) + _3372;
                                float _3378 = _3369 * _3369;
                                float _3382 = (fma(_1664, _3260.z, fma(_1663, _3260.y, _3260.x * _1662)) + _3260.w) / _3323;
                                float _3383 = (fma(_1664, _3276.z, fma(_1663, _3276.y, _3276.x * _1662)) + _3276.w) / _3323;
                                float _3387 = 1.0 - dot(vec2(_3382, _3383), vec2(_3382, _3383));
                                float _4527 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                                float _3388 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                                float _3389 = _3388 * (((isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0))) * _3365) / ((_3378 * 0.699999988079071044921875) + 1.0));
                                float _3401 = exp2(log2(1.0 / ((_3378 * 3.5) + 5.0)) * 0.25);
                                float _3402 = 1.0 - _564;
                                float _3409 = sqrt(1.0 - ((1.0 - (_3402 * _3402)) * (1.0 - (_3401 * _3401))));
                                float _3410 = _3409 * _3409;
                                float _3411 = _3410 * _3410;
                                float _3412 = _3358 - _2829;
                                float _3413 = _3359 - _2830;
                                float _3414 = _3360 - _2831;
                                float _3418 = inversesqrt(dot(vec3(_3412, _3413, _3414), vec3(_3412, _3413, _3414)));
                                float _3422 = dot(vec3(_487, _490, _493), vec3((-0.0) - _2829, (-0.0) - _2830, (-0.0) - _2831));
                                float _4538 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                                float _3425 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
                                float _3426 = dot(vec3(_487, _490, _493), vec3(_3418 * _3412, _3418 * _3413, _3418 * _3414));
                                float _4549 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                                float _3429 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                                float _3433 = ((_3429 * _3429) * (_3411 + (-1.0))) + 1.0;
                                float _3434 = _3371 * _3410;
                                float _3435 = _3434 * _3434;
                                float _3441 = ((1.0 - _3435) * dot(vec3(_487, _490, _493), vec3(_3358, _3359, _3360))) + _3435;
                                float _4560 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                                float _3442 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                                float _3443 = 1.0 - _3410;
                                float _3453 = (0.5 / (((_3442 * ((_3425 * _3443) + _3410)) + 9.9999999392252902907785028219223e-09) + (((_3442 * _3443) + _3410) * _3425))) * _3442;
                                float _4571 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                                float _3463 = (_3388 * _3365) * (((_3411 * 3.1415927410125732421875) * (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0)))) / ((_3433 * _3433) * ((_3378 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3389 * _3232.y;
                                frontier_phi_90_pred_1 = _3389 * _3232.x;
                                frontier_phi_90_pred_2 = _3463 * _3244.z;
                                frontier_phi_90_pred_3 = _3463 * _3244.y;
                                frontier_phi_90_pred_4 = _3463 * _3244.x;
                                frontier_phi_90_pred_5 = _3389 * _3232.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3471 = frontier_phi_90_pred;
                            _3470 = frontier_phi_90_pred_1;
                            _3469 = frontier_phi_90_pred_2;
                            _3468 = frontier_phi_90_pred_3;
                            _3467 = frontier_phi_90_pred_4;
                            _3472 = frontier_phi_90_pred_5;
                            _3174 = _3470 + _3187;
                            _3175 = _3471 + _3188;
                            _3176 = _3472 + _3189;
                            _3171 = _3467 + _3184;
                            _3172 = _3468 + _3185;
                            _3173 = _3469 + _3186;
                            if (_3191 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3184 = _3171;
                                _3185 = _3172;
                                _3186 = _3173;
                                _3187 = _3174;
                                _3188 = _3175;
                                _3189 = _3176;
                                _3190 = _3191;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3175;
                        frontier_phi_84_pred_1 = _3174;
                        frontier_phi_84_pred_2 = _3173;
                        frontier_phi_84_pred_3 = _3172;
                        frontier_phi_84_pred_4 = _3171;
                        frontier_phi_84_pred_5 = _3176;
                    }
                    _2812 = frontier_phi_84_pred;
                    _2810 = frontier_phi_84_pred_1;
                    _2808 = frontier_phi_84_pred_2;
                    _2806 = frontier_phi_84_pred_3;
                    _2804 = frontier_phi_84_pred_4;
                    _2814 = frontier_phi_84_pred_5;
                    uint _2970 = _2969 + 1u;
                    if (_2970 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2963 = _2804;
                        _2964 = _2806;
                        _2965 = _2808;
                        _2966 = _2810;
                        _2967 = _2812;
                        _2968 = _2814;
                        _2969 = _2970;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2814;
                frontier_phi_65_66_ladder_1 = _2810;
                frontier_phi_65_66_ladder_2 = _2812;
                frontier_phi_65_66_ladder_3 = _2806;
                frontier_phi_65_66_ladder_4 = _2804;
                frontier_phi_65_66_ladder_5 = _2808;
            }
            else
            {
                frontier_phi_65_66_ladder = _2693;
                frontier_phi_65_66_ladder_1 = _2689;
                frontier_phi_65_66_ladder_2 = _2691;
                frontier_phi_65_66_ladder_3 = _2685;
                frontier_phi_65_66_ladder_4 = _2683;
                frontier_phi_65_66_ladder_5 = _2687;
            }
            _2803 = frontier_phi_65_66_ladder_4;
            _2805 = frontier_phi_65_66_ladder_3;
            _2807 = frontier_phi_65_66_ladder_5;
            _2809 = frontier_phi_65_66_ladder_1;
            _2811 = frontier_phi_65_66_ladder_2;
            _2813 = frontier_phi_65_66_ladder;
        }
        float _2818 = isnan(1.0) ? _548 : (isnan(_548) ? 1.0 : min(_548, 1.0));
        _2616 = (_2818 * _2809) + _2129;
        _2618 = (_2818 * _2811) + _2131;
        _2620 = (_2818 * _2813) + _2133;
        _2622 = ((_2803 * _532) * _2818) + _2467;
        _2624 = ((_2805 * _534) * _2818) + _2469;
        _2626 = ((_2807 * _535) * _2818) + _2471;
    }
    else
    {
        _2616 = _2129;
        _2618 = _2131;
        _2620 = _2133;
        _2622 = _2467;
        _2624 = _2469;
        _2626 = _2471;
    }
    float _4587 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _4598 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _4609 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _2643 = ((isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * (_2616 + ((isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0))) * _548))) + ((_2622 + ((isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))) * _1389)) * cbPerFrame._m0[3u].x);
    float _2644 = ((isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (_2618 + ((isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0))) * _548))) + ((_2624 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _1389)) * cbPerFrame._m0[3u].x);
    float _2645 = ((isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * (_2620 + ((isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0))) * _548))) + ((_2626 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _1389)) * cbPerFrame._m0[3u].x);
    uint _2646 = _506 + 6u;
    float _2654 = _466 / cbSceneParam._m0[86u].x;
    float _2655 = _467 / cbSceneParam._m0[86u].y;
    vec4 _2669 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2654, _2655, (log2((isnan(cbSceneParam._m0[77u].w) ? _440 : (isnan(_440) ? cbSceneParam._m0[77u].w : min(_440, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2671 = _2669.x;
    float _2672 = _2669.y;
    float _2673 = _2669.z;
    float _2674 = _2669.w;
    float _2745;
    float _2747;
    float _2749;
    float _2751;
    if (_440 > cbSceneParam._m0[78u].w)
    {
        float _2708 = isnan(_440) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _440 : min(cbSceneParam._m0[80u].w, _440));
        float _2709 = _2708 / _440;
        float _2720 = _2709 * _275;
        float _2721 = _276 * _2709;
        float _2722 = (-0.0) - _2721;
        float _2723 = _2709 * _277;
        float _2725 = (cbSceneParam._m0[77u].w * _2722) / _2708;
        float _2726 = _2725 + cbSceneParam._m0[79u].w;
        float _2727 = cbSceneParam._m0[79u].w - _2721;
        float _2733 = sqrt(((_2720 * _2720) + (_2721 * _2721)) + (_2723 * _2723));
        float _2736 = (1.0 - (cbSceneParam._m0[77u].w / _2708)) * _2733;
        float _2741 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2743 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2920;
        if (abs((_2722 - _2725) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2920 = ((((_2726 > 0.0) ? exp2(_2741 * _2726) : (2.0 - exp2(_2743 * _2726))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2736;
        }
        else
        {
            float _2864 = 1.0 / cbSceneParam._m0[80u].x;
            float _2865 = isnan(_2727) ? _2726 : (isnan(_2726) ? _2727 : max(_2726, _2727));
            float _2866 = isnan(_2727) ? _2726 : (isnan(_2726) ? _2727 : min(_2726, _2727));
            float _2875 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : min(_2865, 0.0));
            float _2876 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : min(_2866, 0.0));
            _2920 = ((abs(_2733 / _2722) * cbSceneParam._m0[80u].y) * ((((_2875 - _2876) * 2.0) - ((exp2(_2741 * (isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0)))) - exp2(_2741 * (isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0))))) * _2864)) - ((exp2(_2743 * _2875) - exp2(_2743 * _2876)) * _2864))) + (_2736 * cbSceneParam._m0[80u].z);
        }
        vec4 _2922 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2654, _2655, 1.0), 0.0);
        float _2931 = exp2((_2920 * (-1.44269502162933349609375)) * (1.0 - _2922.w));
        float _2932 = log2(_2931);
        float _2948 = log2(_2674);
        _2745 = (exp2(_2948 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2932 * cbSceneParam._m0[78u].x)) * _2922.x) / cbSceneParam._m0[78u].x)) + _2671;
        _2747 = (exp2(_2948 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2932 * cbSceneParam._m0[78u].y)) * _2922.y) / cbSceneParam._m0[78u].y)) + _2672;
        _2749 = (exp2(_2948 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2932 * cbSceneParam._m0[78u].z)) * _2922.z) / cbSceneParam._m0[78u].z)) + _2673;
        _2751 = _2931 * _2674;
    }
    else
    {
        _2745 = _2671;
        _2747 = _2672;
        _2749 = _2673;
        _2751 = _2674;
    }
    bool _2958;
    vec4 _2761;
    vec4 _2783;
    float _2785;
    float _2789;
    float _2790;
    float _2791;
    float _2792;
    bool _2802;
    for (;;)
    {
        _2761 = cbMatDynParam._m0[0u];
        float _2763 = roundEven(_2761.y);
        bool _2764 = _2763 == 3.0;
        float _2765 = log2(_2751);
        float _2772 = exp2(_2765 * cbSceneParam._m0[78u].x) * _2643;
        float _2773 = exp2(_2765 * cbSceneParam._m0[78u].y) * _2644;
        float _2774 = exp2(_2765 * cbSceneParam._m0[78u].z) * _2645;
        float _2781 = _454 + (-0.5);
        _2783 = cbMtdParam._m0[1u];
        _2785 = _2783.y * _2781;
        float _2788 = (_2763 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2789 = _2788 * (_2764 ? _2772 : (_2772 + (cbSceneParam._m0[72u].w * _2745)));
        _2790 = _2788 * (_2764 ? _2773 : (_2773 + (cbSceneParam._m0[72u].w * _2747)));
        _2791 = _2788 * (_2764 ? _2774 : (_2774 + (cbSceneParam._m0[72u].w * _2749)));
        _2792 = _2781 * 0.999000012874603271484375;
        _2802 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2802)
        {
            if ((cbInstanceData._m0[_506 + 7u].x + _2792) < 0.5)
            {
                _2958 = true;
                break;
            }
        }
        uint _2899 = _508 + uint(_2761.w);
        if ((cbInstanceData._m0[_2899].w < 1.0) && ((cbInstanceData._m0[_2899].w + _2792) < 0.5))
        {
            _2958 = true;
            break;
        }
        if ((_2785 + 1.0) < _2783.x)
        {
            _2958 = true;
            break;
        }
        _2958 = false;
        break;
    }
    float _3162;
    if (_2958)
    {
        discard_state = true;
        _3162 = 0.0;
    }
    else
    {
        _3162 = cbInstanceData._m0[_2646].w;
    }
    SV_Target.x = _2789;
    SV_Target.y = _2790;
    SV_Target.z = _2791;
    SV_Target.w = _3162;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2646].w;
    discard_exit();
}


