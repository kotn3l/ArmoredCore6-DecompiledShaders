#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_POM_M1_AO_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_POM_M1_AO_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_POM_M1_AO_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _916;
float _3569;
float _3570;
float _3571;
float _3572;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    float _263 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _273 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _263);
    float _274 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _263);
    float _275 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _263);
    float _284 = dot(vec3(_273, _274, _275), vec3(_196, _197, _198));
    float _287 = dot(vec3(_273, _274, _275), vec3(_210, _211, _212));
    float _290 = dot(vec3(_273, _274, _275), vec3(_217, _218, _219));
    float _296 = inversesqrt(dot(vec3(_284, _287, _290), vec3(_284, _287, _290)));
    vec4 _309 = texture(sampler2D(M_AMSN_POM_M1_AO_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _320 = dot(vec4(_309), vec4(1.0, 0.0, 0.0, 0.0)) + (-0.5);
    float _328 = (((cbMtdParam._m0[10u].y * _284) * _296) * _320) + TEXCOORD.x;
    float _329 = (((_287 * cbMtdParam._m0[10u].y) * _296) * _320) + TEXCOORD.y;
    vec4 _341 = texture(sampler2D(M_AMSN_POM_M1_AO_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_328 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_329 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _346 = _341.x * cbMtdParam._m0[9u].x;
    float _347 = _341.y * cbMtdParam._m0[9u].y;
    float _348 = _341.z * cbMtdParam._m0[9u].z;
    vec4 _360 = texture(sampler2D(M_AMSN_POM_M1_AO_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _328) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _329) + cbTextureTilingScale._m0[1u].w));
    float _364 = _360.z;
    float _369 = (_360.x * 2.0) + (-1.0);
    float _371 = (_360.y * 2.0) + (-1.0);
    float _372 = dot(vec2(_369, _371), vec2(_369, _371));
    float _3581 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _377 = sqrt(1.0 - (isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))));
    float _380 = fma(_377, _217, fma(_371, _210, _369 * _196));
    float _383 = fma(_377, _218, fma(_371, _211, _369 * _197));
    float _386 = fma(_377, _219, fma(_371, _212, _369 * _198));
    float _390 = inversesqrt(dot(vec3(_380, _383, _386), vec3(_380, _383, _386)));
    float _391 = _390 * _380;
    float _392 = _390 * _383;
    float _393 = _390 * _386;
    float _395 = cbMtdParam._m0[10u].x + _360.w;
    float _399 = inversesqrt(dot(vec3(_391, _392, _393), vec3(_391, _392, _393)));
    float _400 = _399 * _391;
    float _401 = _399 * _392;
    float _402 = _399 * _393;
    float _3592 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _403 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
    float _3603 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _3614 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _3625 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _3636 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _423 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _427 = inversesqrt(dot(vec3(_273, _274, _275), vec3(_273, _274, _275)));
    float _428 = _273 * _427;
    float _429 = _274 * _427;
    float _430 = _275 * _427;
    vec4 _435 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _437 = _435.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _596 = sqrt(((_273 * _273) + (_274 * _274)) + (_275 * _275));
        float _602 = (cbMatDynParam._m0[5u].x * _596) + cbMatDynParam._m0[5u].y;
        float _3647 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
        float _603 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _607 = (cbMatDynParam._m0[5u].z * _596) + cbMatDynParam._m0[5u].w;
        float _3658 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) - _603)) + _603) < ((_437 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _449 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _450 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _470 = fma(_402, cbSceneParam._m0[5u].z, fma(_401, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _400));
    float _473 = fma(_402, cbSceneParam._m0[6u].z, fma(_401, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _400));
    float _476 = fma(_402, cbSceneParam._m0[7u].z, fma(_401, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _400));
    uint _489 = uint(roundEven(NORMAL.w)) * 13u;
    uint _491 = _489 + 9u;
    uint _492 = _491 + uint(cbMatDynParam._m0[0u].w);
    float _498 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0)))) * cbInstanceData._m0[_492].x;
    float _499 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0)))) * cbInstanceData._m0[_492].y;
    float _500 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0)))) * cbInstanceData._m0[_492].z;
    float _3669 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _501 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _3680 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _502 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    float _3691 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _503 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    vec4 _512 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _449, cbSceneParam._m0[86u].y * _450));
    float _516 = ((isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * TEXCOORD.z) * _512.x;
    float _517 = dot(vec3(_400, _401, _402), vec3(_428, _429, _430));
    float _520 = _517 * 2.0;
    float _524 = (_520 * _400) - _428;
    float _525 = (_520 * _401) - _429;
    float _526 = (_520 * _402) - _430;
    float _530 = abs(dot(vec3(_428, _429, _430), vec3(_400, _401, _402)));
    float _3702 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _532 = sqrt(_403);
    float _545 = exp2((_532 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_532 * 3.0));
    float _577 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _581 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _585 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _915;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _641 = fma(_585, cbModelParam._m0[26u].z, fma(_581, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _577));
        float _645 = fma(_585, cbModelParam._m0[27u].z, fma(_581, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _577));
        float _649 = fma(_585, cbModelParam._m0[28u].z, fma(_581, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _577));
        float _673 = _577 + _400;
        float _674 = _581 + _401;
        float _675 = _585 + _402;
        float _685 = fma(_675, cbModelParam._m0[26u].z, fma(_674, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _673)) - _641;
        float _686 = fma(_675, cbModelParam._m0[27u].z, fma(_674, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _673)) - _645;
        float _687 = fma(_675, cbModelParam._m0[28u].z, fma(_674, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _673)) - _649;
        float _691 = inversesqrt(dot(vec3(_685, _686, _687), vec3(_685, _686, _687)));
        float _704 = ((_691 * _685) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_641 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _705 = ((_691 * _686) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_645 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _706 = ((_691 * _687) / cbModelParam._m0[34u].z) + ((((((_649 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _709 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_704, _705, _706), 0.0);
        vec4 _716 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_704, _705, _706), 0.0);
        vec4 _723 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_704, _705, _706), 0.0);
        vec4 _730 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_704, _705, _706), 0.0);
        float _743 = exp2((_709.w + (-0.5)) * 20.0) * 2.0;
        float _744 = _743 * (_709.x + (-0.5));
        float _745 = _743 * (_709.y + (-0.5));
        float _746 = _743 * (_709.z + (-0.5));
        float _753 = exp2((_716.w + (-0.5)) * 20.0) * 2.0;
        float _754 = _753 * (_716.x + (-0.5));
        float _755 = _753 * (_716.y + (-0.5));
        float _756 = _753 * (_716.z + (-0.5));
        float _763 = exp2((_723.w + (-0.5)) * 20.0) * 2.0;
        float _764 = _763 * (_723.x + (-0.5));
        float _765 = _763 * (_723.y + (-0.5));
        float _766 = _763 * (_723.z + (-0.5));
        float _773 = exp2((_730.w + (-0.5)) * 20.0) * 2.0;
        float _774 = _773 * (_730.x + (-0.5));
        float _775 = _773 * (_730.y + (-0.5));
        float _776 = _773 * (_730.z + (-0.5));
        float _777 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _778 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _779 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _780 = _744 * 0.5;
        float _781 = _754 * 0.5;
        float _782 = _764 * 0.5;
        float _783 = dot(vec3(_780, _781, _782), vec3(_780, _781, _782));
        float _788 = (_783 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_783);
        float _797 = (dot(vec3(_400, _401, _402), vec3(_788 * _780, _788 * _781, _788 * _782)) + 1.0) * 0.5;
        float _3728 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _807 = sqrt(((_781 * _781) + (_780 * _780)) + (_782 * _782)) / (_777 + 9.9999997473787516355514526367188e-06);
        float _3739 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _808 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _809 = _808 * 2.0;
        float _813 = (1.0 - _808) / (_808 + 1.0);
        float _3750 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _814 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _823 = ((((1.0 - _814) * (_809 + 2.0)) * exp2(log2(isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * (_809 + 1.0))) + _814) * _777;
        float _824 = _745 * 0.5;
        float _825 = _755 * 0.5;
        float _826 = _765 * 0.5;
        float _827 = dot(vec3(_824, _825, _826), vec3(_824, _825, _826));
        float _832 = (_827 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_827);
        float _840 = (dot(vec3(_400, _401, _402), vec3(_832 * _824, _832 * _825, _832 * _826)) + 1.0) * 0.5;
        float _3761 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _849 = sqrt(((_825 * _825) + (_824 * _824)) + (_826 * _826)) / (_778 + 9.9999997473787516355514526367188e-06);
        float _3772 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _850 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _851 = _850 * 2.0;
        float _855 = (1.0 - _850) / (_850 + 1.0);
        float _3783 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _856 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _865 = ((((1.0 - _856) * (_851 + 2.0)) * exp2(log2(isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * (_851 + 1.0))) + _856) * _778;
        float _866 = _746 * 0.5;
        float _867 = _756 * 0.5;
        float _868 = _766 * 0.5;
        float _869 = dot(vec3(_866, _867, _868), vec3(_866, _867, _868));
        float _874 = (_869 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_869);
        float _882 = (dot(vec3(_400, _401, _402), vec3(_874 * _866, _874 * _867, _874 * _868)) + 1.0) * 0.5;
        float _3794 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _891 = sqrt(((_867 * _867) + (_866 * _866)) + (_868 * _868)) / (_779 + 9.9999997473787516355514526367188e-06);
        float _3805 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _893 = _892 * 2.0;
        float _897 = (1.0 - _892) / (_892 + 1.0);
        float _3816 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _907 = ((((1.0 - _898) * (_893 + 2.0)) * exp2(log2(isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_893 + 1.0))) + _898) * _779;
        _915 = _746;
        _917 = _745;
        _918 = _744;
        _919 = _756;
        _920 = _755;
        _921 = _754;
        _922 = _766;
        _923 = _765;
        _924 = _764;
        _925 = _779;
        _926 = _778;
        _927 = _777;
        _928 = cbModelParam._m0[36u].z * (isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0)));
        _929 = cbModelParam._m0[36u].z * (isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0)));
        _930 = cbModelParam._m0[36u].z * (isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0)));
    }
    else
    {
        _915 = _916;
        _917 = _916;
        _918 = _916;
        _919 = _916;
        _920 = _916;
        _921 = _916;
        _922 = _916;
        _923 = _916;
        _924 = _916;
        _925 = _916;
        _926 = _916;
        _927 = _916;
        _928 = 0.0;
        _929 = 0.0;
        _930 = 0.0;
    }
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _959 = fma(_585, cbModelParam._m0[30u].z, fma(_581, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _577));
        float _963 = fma(_585, cbModelParam._m0[31u].z, fma(_581, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _577));
        float _967 = fma(_585, cbModelParam._m0[32u].z, fma(_581, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _577));
        float _990 = _577 + _400;
        float _991 = _581 + _401;
        float _992 = _585 + _402;
        float _1002 = fma(_992, cbModelParam._m0[30u].z, fma(_991, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _990)) - _959;
        float _1003 = fma(_992, cbModelParam._m0[31u].z, fma(_991, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _990)) - _963;
        float _1004 = fma(_992, cbModelParam._m0[32u].z, fma(_991, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _990)) - _967;
        float _1008 = inversesqrt(dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004)));
        float _1021 = ((_1008 * _1002) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_959 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1022 = ((_1008 * _1003) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_963 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1023 = ((_1008 * _1004) / cbModelParam._m0[35u].z) + ((((((_967 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        float _1058 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1025.x + (-0.5));
        float _1060 = _1058 * (_1025.y + (-0.5));
        float _1061 = _1058 * (_1025.z + (-0.5));
        float _1068 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1032.x + (-0.5));
        float _1070 = _1068 * (_1032.y + (-0.5));
        float _1071 = _1068 * (_1032.z + (-0.5));
        float _1078 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1039.x + (-0.5));
        float _1080 = _1078 * (_1039.y + (-0.5));
        float _1081 = _1078 * (_1039.z + (-0.5));
        float _1088 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1046.x + (-0.5));
        float _1090 = _1088 * (_1046.y + (-0.5));
        float _1091 = _1088 * (_1046.z + (-0.5));
        float _1092 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1093 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1094 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1095 = _1059 * 0.5;
        float _1096 = _1069 * 0.5;
        float _1097 = _1079 * 0.5;
        float _1098 = dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097));
        float _1103 = (_1098 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1098);
        float _1111 = (dot(vec3(_400, _401, _402), vec3(_1103 * _1095, _1103 * _1096, _1103 * _1097)) + 1.0) * 0.5;
        float _3857 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1120 = sqrt(((_1096 * _1096) + (_1095 * _1095)) + (_1097 * _1097)) / (_1092 + 9.9999997473787516355514526367188e-06);
        float _3868 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1122 = _1121 * 2.0;
        float _1126 = (1.0 - _1121) / (_1121 + 1.0);
        float _3879 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1136 = ((((1.0 - _1127) * (_1122 + 2.0)) * exp2(log2(isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_1122 + 1.0))) + _1127) * _1092;
        float _1137 = _1060 * 0.5;
        float _1138 = _1070 * 0.5;
        float _1139 = _1080 * 0.5;
        float _1140 = dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139));
        float _1145 = (_1140 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1140);
        float _1153 = (dot(vec3(_400, _401, _402), vec3(_1145 * _1137, _1145 * _1138, _1145 * _1139)) + 1.0) * 0.5;
        float _3890 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1162 = sqrt(((_1138 * _1138) + (_1137 * _1137)) + (_1139 * _1139)) / (_1093 + 9.9999997473787516355514526367188e-06);
        float _3901 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1164 = _1163 * 2.0;
        float _1168 = (1.0 - _1163) / (_1163 + 1.0);
        float _3912 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1178 = ((((1.0 - _1169) * (_1164 + 2.0)) * exp2(log2(isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_1164 + 1.0))) + _1169) * _1093;
        float _1179 = _1061 * 0.5;
        float _1180 = _1071 * 0.5;
        float _1181 = _1081 * 0.5;
        float _1182 = dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181));
        float _1187 = (_1182 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1182);
        float _1195 = (dot(vec3(_400, _401, _402), vec3(_1187 * _1179, _1187 * _1180, _1187 * _1181)) + 1.0) * 0.5;
        float _3923 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1204 = sqrt(((_1180 * _1180) + (_1179 * _1179)) + (_1181 * _1181)) / (_1094 + 9.9999997473787516355514526367188e-06);
        float _3934 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1206 = _1205 * 2.0;
        float _1210 = (1.0 - _1205) / (_1205 + 1.0);
        float _3945 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1220 = ((((1.0 - _1211) * (_1206 + 2.0)) * exp2(log2(isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_1206 + 1.0))) + _1211) * _1094;
        _1228 = _1061;
        _1229 = _1060;
        _1230 = _1059;
        _1231 = _1071;
        _1232 = _1070;
        _1233 = _1069;
        _1234 = _1081;
        _1235 = _1080;
        _1236 = _1079;
        _1237 = _1094;
        _1238 = _1093;
        _1239 = _1092;
        _1240 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0)));
        _1241 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0)));
        _1242 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)));
    }
    else
    {
        _1228 = _916;
        _1229 = _916;
        _1230 = _916;
        _1231 = _916;
        _1232 = _916;
        _1233 = _916;
        _1234 = _916;
        _1235 = _916;
        _1236 = _916;
        _1237 = _916;
        _1238 = _916;
        _1239 = _916;
        _1240 = 0.0;
        _1241 = 0.0;
        _1242 = 0.0;
    }
    float _1252 = (cbModelParam._m0[1u].x * (_1240 - _928)) + _928;
    float _1253 = (cbModelParam._m0[1u].x * (_1241 - _929)) + _929;
    float _1254 = (cbModelParam._m0[1u].x * (_1242 - _930)) + _930;
    float _1275 = fma(_1254, cbSceneParam._m0[89u].z, fma(_1253, cbSceneParam._m0[89u].y, _1252 * cbSceneParam._m0[89u].x));
    float _1278 = fma(_1254, cbSceneParam._m0[90u].z, fma(_1253, cbSceneParam._m0[90u].y, _1252 * cbSceneParam._m0[90u].x));
    float _1281 = fma(_1254, cbSceneParam._m0[91u].z, fma(_1253, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1252));
    float _1296 = _524 * 0.5;
    float _1297 = _525 * 0.5;
    float _1298 = _526 * 0.5;
    float _1299 = dot(vec4(_1296, _1297, _1298, 1.0), vec4(_1230, _1233, _1236, _1239));
    float _1302 = dot(vec4(_1296, _1297, _1298, 1.0), vec4(_1229, _1232, _1235, _1238));
    float _1305 = dot(vec4(_1296, _1297, _1298, 1.0), vec4(_1228, _1231, _1234, _1237));
    float _1339;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1312 = dot(vec4(_1296, _1297, _1298, 1.0), vec4(_915, _919, _922, _925));
        float _1316 = dot(vec4(_1296, _1297, _1298, 1.0), vec4(_917, _920, _923, _926));
        float _1320 = dot(vec4(_1296, _1297, _1298, 1.0), vec4(_918, _921, _924, _927));
        float _1327 = dot(vec4(cbModelParam._m0[39u]), vec4(_1296, _1297, _1298, 1.0));
        _1339 = dot(vec3(isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)), isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)), isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1327) ? 0.0 : (isnan(0.0) ? _1327 : max(0.0, _1327))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1339 = 1.0;
    }
    float _1350;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1341 = dot(vec4(cbModelParam._m0[40u]), vec4(_1296, _1297, _1298, 1.0));
        _1350 = dot(vec3(isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)), isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)), isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1341) ? 0.0 : (isnan(0.0) ? _1341 : max(0.0, _1341))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1350 = 1.0;
    }
    float _1354 = (_1350 * cbModelParam._m0[1u].x) + (_1339 * (1.0 - cbModelParam._m0[1u].x));
    float _1364 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _403);
    float _1365 = isnan(_1364) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1364 : min(cbModelParam._m0[25u].z, _1364));
    float _1447;
    float _1449;
    float _1451;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1414 = fma(_585, cbModelParam._m0[13u].z, fma(_581, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _577)) + cbModelParam._m0[13u].w;
        float _1418 = fma(_585, cbModelParam._m0[14u].z, fma(_581, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _577)) + cbModelParam._m0[14u].w;
        float _1422 = fma(_585, cbModelParam._m0[15u].z, fma(_581, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _577)) + cbModelParam._m0[15u].w;
        float _1425 = fma(_526, cbModelParam._m0[13u].z, fma(_525, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _524));
        float _1428 = fma(_526, cbModelParam._m0[14u].z, fma(_525, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _524));
        float _1431 = fma(_526, cbModelParam._m0[15u].z, fma(_525, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _524));
        float _1459;
        if (_1425 > 0.0)
        {
            _1459 = abs((1.0 - _1414) / _1425);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1425 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1414 + 1.0) / _1425);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1459 = frontier_phi_19_17_ladder;
        }
        float _1633;
        if (_1428 > 0.0)
        {
            _1633 = abs((1.0 - _1418) / _1428);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1428 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1418 + 1.0) / _1428);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1633 = frontier_phi_28_24_ladder;
        }
        float _1929;
        if (_1431 > 0.0)
        {
            _1929 = abs((1.0 - _1422) / _1431);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1431 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1422 + 1.0) / _1431);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1929 = frontier_phi_40_35_ladder;
        }
        float _1931 = isnan(_1633) ? _1459 : (isnan(_1459) ? _1633 : min(_1459, _1633));
        float _1932 = isnan(_1929) ? _1931 : (isnan(_1931) ? _1929 : min(_1931, _1929));
        float _1936 = (_1932 * _1425) + _1414;
        float _1937 = (_1932 * _1428) + _1418;
        float _1938 = (_1932 * _1431) + _1422;
        float _1939 = _1932 * 9.9999997473787516355514526367188e-05;
        float _1941 = (-1.0) - _1939;
        float _1943 = _1939 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1938 > _1943) || ((_1938 < _1941) || ((_1937 > _1943) || ((_1937 < _1941) || ((_1936 < _1941) || (_1936 > _1943))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2083 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1938, cbModelParam._m0[9u].z, fma(_1937, cbModelParam._m0[9u].y, _1936 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1938, cbModelParam._m0[10u].z, fma(_1937, cbModelParam._m0[10u].y, _1936 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1938, cbModelParam._m0[11u].z, fma(_1937, cbModelParam._m0[11u].y, _1936 * cbModelParam._m0[11u].x))), _1365);
            frontier_phi_18_40_ladder = _2083.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2083.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2083.x * cbModelParam._m0[1u].y;
        }
        _1447 = frontier_phi_18_40_ladder_2;
        _1449 = frontier_phi_18_40_ladder_1;
        _1451 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1435 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_524, _525, _526), _1365);
        _1447 = _1435.x * cbModelParam._m0[1u].y;
        _1449 = _1435.y * cbModelParam._m0[1u].y;
        _1451 = _1435.z * cbModelParam._m0[1u].y;
    }
    float _1455 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _403);
    float _1456 = isnan(_1455) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1455 : min(cbModelParam._m0[25u].w, _1455));
    float _1549;
    float _1551;
    float _1553;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1513 = fma(_585, cbModelParam._m0[21u].z, fma(_581, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _577)) + cbModelParam._m0[21u].w;
        float _1517 = fma(_585, cbModelParam._m0[22u].z, fma(_581, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _577)) + cbModelParam._m0[22u].w;
        float _1521 = fma(_585, cbModelParam._m0[23u].z, fma(_581, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _577)) + cbModelParam._m0[23u].w;
        float _1524 = fma(_526, cbModelParam._m0[21u].z, fma(_525, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _524));
        float _1527 = fma(_526, cbModelParam._m0[22u].z, fma(_525, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _524));
        float _1530 = fma(_526, cbModelParam._m0[23u].z, fma(_525, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _524));
        float _1638;
        if (_1524 > 0.0)
        {
            _1638 = abs((1.0 - _1513) / _1524);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1524 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1513 + 1.0) / _1524);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1638 = frontier_phi_30_26_ladder;
        }
        float _1956;
        if (_1527 > 0.0)
        {
            _1956 = abs((1.0 - _1517) / _1527);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1527 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1517 + 1.0) / _1527);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1956 = frontier_phi_42_37_ladder;
        }
        float _2283;
        if (_1530 > 0.0)
        {
            _2283 = abs((1.0 - _1521) / _1530);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1530 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1521 + 1.0) / _1530);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2283 = frontier_phi_52_49_ladder;
        }
        float _2285 = isnan(_1956) ? _1638 : (isnan(_1638) ? _1956 : min(_1638, _1956));
        float _2286 = isnan(_2283) ? _2285 : (isnan(_2285) ? _2283 : min(_2285, _2283));
        float _2290 = (_2286 * _1524) + _1513;
        float _2291 = (_2286 * _1527) + _1517;
        float _2292 = (_2286 * _1530) + _1521;
        float _2293 = _2286 * 9.9999997473787516355514526367188e-05;
        float _2294 = (-1.0) - _2293;
        float _2296 = _2293 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2292 > _2296) || ((_2292 < _2294) || ((_2291 > _2296) || ((_2291 < _2294) || ((_2290 < _2294) || (_2290 > _2296))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2410 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2292, cbModelParam._m0[17u].z, fma(_2291, cbModelParam._m0[17u].y, _2290 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2292, cbModelParam._m0[18u].z, fma(_2291, cbModelParam._m0[18u].y, _2290 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2292, cbModelParam._m0[19u].z, fma(_2291, cbModelParam._m0[19u].y, _2290 * cbModelParam._m0[19u].x))), _1456);
            frontier_phi_27_52_ladder = _2410.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2410.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2410.x * cbModelParam._m0[1u].z;
        }
        _1549 = frontier_phi_27_52_ladder_2;
        _1551 = frontier_phi_27_52_ladder_1;
        _1553 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1533 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_524, _525, _526), _1456);
        _1549 = _1533.x * cbModelParam._m0[1u].z;
        _1551 = _1533.y * cbModelParam._m0[1u].z;
        _1553 = _1533.z * cbModelParam._m0[1u].z;
    }
    float _1565 = ((((1.0 - _545) * ((_532 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_545 * _532)) * _516;
    float _1566 = _1565 * ((cbModelParam._m0[1u].w * (_1549 - _1447)) + _1447);
    float _1567 = _1565 * ((cbModelParam._m0[1u].w * (_1551 - _1449)) + _1449);
    float _1568 = _1565 * ((cbModelParam._m0[1u].w * (_1553 - _1451)) + _1451);
    float _1571 = fma(_1568, cbSceneParam._m0[89u].z, fma(_1567, cbSceneParam._m0[89u].y, _1566 * cbSceneParam._m0[89u].x));
    float _1574 = fma(_1568, cbSceneParam._m0[90u].z, fma(_1567, cbSceneParam._m0[90u].y, _1566 * cbSceneParam._m0[90u].x));
    float _1577 = fma(_1568, cbSceneParam._m0[91u].z, fma(_1567, cbSceneParam._m0[91u].y, _1566 * cbSceneParam._m0[91u].x));
    float _1612 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1616 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1620 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1624 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1625 = _1612 / _1624;
    float _1626 = _1616 / _1624;
    float _1627 = _1620 / _1624;
    float _1774;
    float _1775;
    float _1776;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1654 = ((uint(_1627 > cbSceneParam._m0[59u].y) + uint(_1627 > cbSceneParam._m0[59u].x)) + uint(_1627 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1655 = _1654 + 43u;
        uint _1663 = _1654 + 44u;
        uint _1671 = _1654 + 45u;
        uint _1679 = _1654 + 46u;
        float _1690 = fma(_1624, cbSceneParam._m0[_1655].w, fma(_1620, cbSceneParam._m0[_1655].z, fma(_1616, cbSceneParam._m0[_1655].y, _1612 * cbSceneParam._m0[_1655].x)));
        float _1694 = fma(_1624, cbSceneParam._m0[_1663].w, fma(_1620, cbSceneParam._m0[_1663].z, fma(_1616, cbSceneParam._m0[_1663].y, _1612 * cbSceneParam._m0[_1663].x)));
        float _1702 = fma(_1624, cbSceneParam._m0[_1679].w, fma(_1620, cbSceneParam._m0[_1679].z, fma(_1616, cbSceneParam._m0[_1679].y, _1612 * cbSceneParam._m0[_1679].x)));
        float _1707 = cbSceneParam._m0[33u].z * _1702;
        float _1709 = cbSceneParam._m0[33u].w * _1702;
        float _1712 = fma(_1624, cbSceneParam._m0[_1671].w, fma(_1620, cbSceneParam._m0[_1671].z, fma(_1616, cbSceneParam._m0[_1671].y, _1612 * cbSceneParam._m0[_1671].x))) / _1702;
        float _1760 = (cbSceneParam._m0[33u].x - sqrt(((_1626 * _1626) + (_1625 * _1625)) + (_1627 * _1627))) * cbSceneParam._m0[33u].y;
        float _4071 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1767 = (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1707 + _1690) / _1702, (_1709 + _1694) / _1702), _1712), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1709 + _1690) / _1702, (_1694 - _1707) / _1702), _1712), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1690 - _1707) / _1702, (_1694 - _1709) / _1702), _1712), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1690 - _1709) / _1702, (_1707 + _1694) / _1702), _1712), 0.0)).x), vec4(0.25)));
        _1774 = 1.0 - (_1767 * cbSceneParam._m0[34u].x);
        _1775 = 1.0 - (_1767 * cbSceneParam._m0[34u].y);
        _1776 = 1.0 - (_1767 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1774 = 1.0;
        _1775 = 1.0;
        _1776 = 1.0;
    }
    float _1840;
    float _1842;
    float _1844;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1828 = fma(_1624, cbSceneParam._m0[63u].w, fma(_1620, cbSceneParam._m0[63u].z, fma(_1616, cbSceneParam._m0[63u].y, _1612 * cbSceneParam._m0[63u].x)));
        float _1829 = fma(_1624, cbSceneParam._m0[60u].w, fma(_1620, cbSceneParam._m0[60u].z, fma(_1616, cbSceneParam._m0[60u].y, _1612 * cbSceneParam._m0[60u].x))) / _1828;
        float _1830 = fma(_1624, cbSceneParam._m0[61u].w, fma(_1620, cbSceneParam._m0[61u].z, fma(_1616, cbSceneParam._m0[61u].y, _1612 * cbSceneParam._m0[61u].x))) / _1828;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1829 >= cbSceneParam._m0[64u].x) && (_1830 >= cbSceneParam._m0[64u].y)) && (_1829 <= cbSceneParam._m0[64u].z)) && (_1830 <= cbSceneParam._m0[64u].w))
        {
            float _1969 = fma(_1624, cbSceneParam._m0[62u].w, fma(_1620, cbSceneParam._m0[62u].z, fma(_1616, cbSceneParam._m0[62u].y, _1612 * cbSceneParam._m0[62u].x))) / _1828;
            float _1973 = isnan(cbSceneParam._m0[41u].w) ? _1969 : (isnan(_1969) ? cbSceneParam._m0[41u].w : max(_1969, cbSceneParam._m0[41u].w));
            float _2016 = (cbSceneParam._m0[33u].x - sqrt(((_1626 * _1626) + (_1625 * _1625)) + (_1627 * _1627))) * cbSceneParam._m0[33u].y;
            float _4087 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
            float _2023 = (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1829, cbSceneParam._m0[33u].w + _1830), _1973), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1829, _1830 - cbSceneParam._m0[33u].z), _1973), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1829 - cbSceneParam._m0[33u].z, _1830 - cbSceneParam._m0[33u].w), _1973), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1829 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1830), _1973), 0.0)).x), vec4(0.25)));
            float _2027 = 1.0 - (_2023 * cbSceneParam._m0[34u].x);
            float _2028 = 1.0 - (_2023 * cbSceneParam._m0[34u].y);
            float _2029 = 1.0 - (_2023 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2028) ? _1775 : (isnan(_1775) ? _2028 : min(_1775, _2028));
            frontier_phi_39_38_ladder_1 = isnan(_2027) ? _1774 : (isnan(_1774) ? _2027 : min(_1774, _2027));
            frontier_phi_39_38_ladder_2 = isnan(_2029) ? _1776 : (isnan(_1776) ? _2029 : min(_1776, _2029));
        }
        else
        {
            frontier_phi_39_38_ladder = _1775;
            frontier_phi_39_38_ladder_1 = _1774;
            frontier_phi_39_38_ladder_2 = _1776;
        }
        _1840 = frontier_phi_39_38_ladder_1;
        _1842 = frontier_phi_39_38_ladder;
        _1844 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1840 = _1774;
        _1842 = _1775;
        _1844 = _1776;
    }
    uvec4 _1849 = floatBitsToUint(cbInstanceData._m0[_489 + 5u]);
    uint _1851 = _1849.x * 14u;
    uint _1852 = _1851 + 13u;
    float _1859 = _516 + (-1.0);
    float _1864 = (cbLight._m0[_1852].x * _1859) + 1.0;
    float _1865 = (cbLight._m0[_1852].y * _1859) + 1.0;
    float _1866 = (cbLight._m0[_1852].z * _1859) + 1.0;
    float _1867 = (cbLight._m0[_1852].w * _1859) + 1.0;
    uint _1868 = _1851 + 5u;
    float _1874 = isnan(1.0) ? _1865 : (isnan(_1865) ? 1.0 : min(_1865, 1.0));
    uint _1878 = _1851 + 4u;
    float _1888 = isnan(1.0) ? _1864 : (isnan(_1864) ? 1.0 : min(_1864, 1.0));
    uint _1892 = _1851 | 1u;
    float _1903 = dot(vec3(cbLight._m0[_1851].xyz), vec3(_400, _401, _402));
    float _1906 = dot(vec3(cbLight._m0[_1892].xyz), vec3(_400, _401, _402));
    float _4123 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _4134 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1911 = (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * 0.3183098733425140380859375;
    float _1913 = (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * 0.3183098733425140380859375;
    float _1920 = ((cbLight._m0[_1868].x * _1874) * _1913) + (((cbLight._m0[_1878].x * _1840) * _1888) * _1911);
    float _1921 = ((_1874 * cbLight._m0[_1868].y) * _1913) + (((cbLight._m0[_1878].y * _1842) * _1888) * _1911);
    float _1922 = ((_1874 * cbLight._m0[_1868].z) * _1913) + (((cbLight._m0[_1878].z * _1844) * _1888) * _1911);
    uvec4 _1926 = floatBitsToUint(cbLight._m0[_1851 + 12u]);
    bool _1928 = _1926.x == 0u;
    float _2030;
    float _2032;
    float _2034;
    if (_1928)
    {
        _2030 = _1920;
        _2032 = _1921;
        _2034 = _1922;
    }
    else
    {
        uint _2038 = _1851 + 6u;
        float _2054 = (dot(vec3(cbLight._m0[_1851 + 2u].xyz), vec3(_400, _401, _402)) * 0.5) + 0.5;
        float _2055 = _2054 * _2054;
        float _4145 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
        float _2056 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _2057 = isnan(1.0) ? _1866 : (isnan(_1866) ? 1.0 : min(_1866, 1.0));
        _2030 = (((cbLight._m0[_2038].x * 0.3183098733425140380859375) * _2056) * _2057) + _1920;
        _2032 = (((cbLight._m0[_2038].y * 0.3183098733425140380859375) * _2056) * _2057) + _1921;
        _2034 = (((cbLight._m0[_2038].z * 0.3183098733425140380859375) * _2056) * _2057) + _1922;
    }
    bool _2037 = _1926.y == 0u;
    float _2092;
    float _2094;
    float _2096;
    if (_2037)
    {
        _2092 = _2030;
        _2094 = _2032;
        _2096 = _2034;
    }
    else
    {
        uint _2254 = _1851 + 7u;
        float _2270 = (dot(vec3(cbLight._m0[_1851 + 3u].xyz), vec3(_400, _401, _402)) * 0.5) + 0.5;
        float _2271 = _2270 * _2270;
        float _4161 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2272 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _2273 = isnan(1.0) ? _1867 : (isnan(_1867) ? 1.0 : min(_1867, 1.0));
        _2092 = (((cbLight._m0[_2254].x * 0.3183098733425140380859375) * _2272) * _2273) + _2030;
        _2094 = (((cbLight._m0[_2254].y * 0.3183098733425140380859375) * _2272) * _2273) + _2032;
        _2096 = (((cbLight._m0[_2254].z * 0.3183098733425140380859375) * _2272) * _2273) + _2034;
    }
    uint _2099 = _1851 + 8u;
    float _2112 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1851].w)) * _403) * 0.949999988079071044921875);
    float _2113 = _2112 * _2112;
    float _2114 = cbLight._m0[_1851].x + _428;
    float _2115 = cbLight._m0[_1851].y + _429;
    float _2116 = cbLight._m0[_1851].z + _430;
    float _2120 = inversesqrt(dot(vec3(_2114, _2115, _2116), vec3(_2114, _2115, _2116)));
    float _2121 = _2120 * _2114;
    float _2122 = _2120 * _2115;
    float _2123 = _2120 * _2116;
    float _2124 = dot(vec3(_400, _401, _402), vec3(cbLight._m0[_1851].xyz));
    float _4177 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2127 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _4188 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _2128 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _2129 = dot(vec3(_400, _401, _402), vec3(_2121, _2122, _2123));
    float _4199 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2132 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _2133 = dot(vec3(cbLight._m0[_1851].xyz), vec3(_2121, _2122, _2123));
    float _4210 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2137 = _2113 * _2113;
    float _2141 = ((_2132 * _2132) * (_2137 + (-1.0))) + 1.0;
    float _2152 = (exp2(log2(1.0 - (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2153 = 1.0 - _2113;
    float _2164 = (0.5 / (((_2128 * ((_2127 * _2153) + _2113)) + 9.9999999392252902907785028219223e-09) + (((_2128 * _2153) + _2113) * _2127))) * _2127;
    float _4221 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2166 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_2137 / ((_2141 * _2141) * 3.141590118408203125));
    uint _2180 = _1851 + 9u;
    float _2191 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1892].w)) * _403) * 0.949999988079071044921875);
    float _2192 = _2191 * _2191;
    float _2193 = cbLight._m0[_1892].x + _428;
    float _2194 = cbLight._m0[_1892].y + _429;
    float _2195 = cbLight._m0[_1892].z + _430;
    float _2199 = inversesqrt(dot(vec3(_2193, _2194, _2195), vec3(_2193, _2194, _2195)));
    float _2200 = _2199 * _2193;
    float _2201 = _2199 * _2194;
    float _2202 = _2199 * _2195;
    float _2203 = dot(vec3(_400, _401, _402), vec3(cbLight._m0[_1892].xyz));
    float _4232 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2206 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _2207 = dot(vec3(_400, _401, _402), vec3(_2200, _2201, _2202));
    float _4243 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2210 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
    float _2211 = dot(vec3(cbLight._m0[_1892].xyz), vec3(_2200, _2201, _2202));
    float _4254 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2215 = _2192 * _2192;
    float _2219 = ((_2210 * _2210) * (_2215 + (-1.0))) + 1.0;
    float _2228 = (exp2(log2(1.0 - (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2229 = 1.0 - _2192;
    float _2239 = (0.5 / (((_2128 * ((_2206 * _2229) + _2192)) + 9.9999999392252902907785028219223e-09) + (((_2128 * _2229) + _2192) * _2206))) * _2206;
    float _4265 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2241 = (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_2215 / ((_2219 * _2219) * 3.141590118408203125));
    float _2251 = (((_2228 * cbLight._m0[_2180].x) * _2241) * _1874) + ((((cbLight._m0[_2099].x * _1840) * _2152) * _2166) * _1888);
    float _2252 = (((_2228 * cbLight._m0[_2180].y) * _2241) * _1874) + ((((cbLight._m0[_2099].y * _1842) * _2152) * _2166) * _1888);
    float _2253 = (((_2228 * cbLight._m0[_2180].z) * _2241) * _1874) + ((((cbLight._m0[_2099].z * _1844) * _2152) * _2166) * _1888);
    float _2309;
    float _2311;
    float _2313;
    if (_1928)
    {
        _2309 = _2251;
        _2311 = _2252;
        _2313 = _2253;
    }
    else
    {
        uint _2315 = _1851 + 2u;
        uint _2319 = _1851 + 10u;
        float _2333 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2315].w)) * _403) * 0.949999988079071044921875);
        float _2334 = _2333 * _2333;
        float _2335 = cbLight._m0[_2315].x + _428;
        float _2336 = cbLight._m0[_2315].y + _429;
        float _2337 = cbLight._m0[_2315].z + _430;
        float _2341 = inversesqrt(dot(vec3(_2335, _2336, _2337), vec3(_2335, _2336, _2337)));
        float _2342 = _2341 * _2335;
        float _2343 = _2341 * _2336;
        float _2344 = _2341 * _2337;
        float _2345 = dot(vec3(_400, _401, _402), vec3(cbLight._m0[_2315].xyz));
        float _4276 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2348 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _2349 = dot(vec3(_400, _401, _402), vec3(_2342, _2343, _2344));
        float _4287 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2352 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _2353 = dot(vec3(cbLight._m0[_2315].xyz), vec3(_2342, _2343, _2344));
        float _4298 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2357 = _2334 * _2334;
        float _2361 = ((_2352 * _2352) * (_2357 + (-1.0))) + 1.0;
        float _2370 = (exp2(log2(1.0 - (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2371 = 1.0 - _2334;
        float _2381 = (0.5 / (((_2128 * ((_2348 * _2371) + _2334)) + 9.9999999392252902907785028219223e-09) + (((_2128 * _2371) + _2334) * _2348))) * _2348;
        float _4309 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2383 = (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_2357 / ((_2361 * _2361) * 3.141590118408203125));
        float _2384 = isnan(1.0) ? _1866 : (isnan(_1866) ? 1.0 : min(_1866, 1.0));
        _2309 = (((_2370 * cbLight._m0[_2319].x) * _2383) * _2384) + _2251;
        _2311 = (((_2370 * cbLight._m0[_2319].y) * _2383) * _2384) + _2252;
        _2313 = (((_2370 * cbLight._m0[_2319].z) * _2383) * _2384) + _2253;
    }
    float _2415;
    float _2417;
    float _2419;
    if (_2037)
    {
        _2415 = _2309;
        _2417 = _2311;
        _2419 = _2313;
    }
    else
    {
        uint _2426 = _1851 + 3u;
        uint _2430 = _1851 + 11u;
        float _2444 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2426].w)) * _403) * 0.949999988079071044921875);
        float _2445 = _2444 * _2444;
        float _2446 = cbLight._m0[_2426].x + _428;
        float _2447 = cbLight._m0[_2426].y + _429;
        float _2448 = cbLight._m0[_2426].z + _430;
        float _2452 = inversesqrt(dot(vec3(_2446, _2447, _2448), vec3(_2446, _2447, _2448)));
        float _2453 = _2452 * _2446;
        float _2454 = _2452 * _2447;
        float _2455 = _2452 * _2448;
        float _2456 = dot(vec3(_400, _401, _402), vec3(cbLight._m0[_2426].xyz));
        float _4325 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2459 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _2460 = dot(vec3(_400, _401, _402), vec3(_2453, _2454, _2455));
        float _4336 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2463 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _2464 = dot(vec3(cbLight._m0[_2426].xyz), vec3(_2453, _2454, _2455));
        float _4347 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2468 = _2445 * _2445;
        float _2472 = ((_2463 * _2463) * (_2468 + (-1.0))) + 1.0;
        float _2481 = (exp2(log2(1.0 - (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2482 = 1.0 - _2445;
        float _2492 = (0.5 / (((_2128 * ((_2459 * _2482) + _2445)) + 9.9999999392252902907785028219223e-09) + (((_2128 * _2482) + _2445) * _2459))) * _2459;
        float _4358 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2494 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_2468 / ((_2472 * _2472) * 3.141590118408203125));
        float _2495 = isnan(1.0) ? _1867 : (isnan(_1867) ? 1.0 : min(_1867, 1.0));
        _2415 = (((_2481 * cbLight._m0[_2430].x) * _2494) * _2495) + _2309;
        _2417 = (((_2481 * cbLight._m0[_2430].y) * _2494) * _2495) + _2311;
        _2419 = (((_2481 * cbLight._m0[_2430].z) * _2494) * _2495) + _2313;
    }
    float _2560;
    float _2562;
    float _2564;
    float _2566;
    float _2568;
    float _2570;
    if (_1849.y == 0u)
    {
        uvec4 _2516 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2517 = _2516.x;
        uint _2528 = uint((float(_2516.y) * floor(float(uint(cbSceneParam._m0[85u].y * _450) / _2517))) + floor(float(uint(cbSceneParam._m0[85u].x * _449) / _2517)));
        float _2538 = (log2(_1627 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2539 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        uint _2542 = uint(isnan(14.0) ? _2539 : (isnan(_2539) ? 14.0 : min(_2539, 14.0)));
        uvec4 _2547 = texelFetch(g_lightClusterGridBuffer, int(((_2542 << 2u) + (_2528 << 6u)) >> 2u));
        uint _2548 = _2547.x;
        uint _2549 = _2516.z;
        float _2627;
        float _2629;
        float _2631;
        float _2633;
        float _2635;
        float _2637;
        if (((((1u << ((_2549 >> 4u) & 15u)) + 4294967295u) & _2548) == 0u) || ((_2549 & 240u) == 0u))
        {
            _2627 = 0.0;
            _2629 = 0.0;
            _2631 = 0.0;
            _2633 = 0.0;
            _2635 = 0.0;
            _2637 = 0.0;
        }
        else
        {
            float _2628;
            float _2630;
            float _2632;
            float _2634;
            float _2636;
            float _2638;
            float _2779 = 0.0;
            float _2780 = 0.0;
            float _2781 = 0.0;
            float _2782 = 0.0;
            float _2783 = 0.0;
            float _2784 = 0.0;
            uint _2785 = 0u;
            uint _2794;
            bool _2795;
            for (;;)
            {
                _2794 = texelFetch(g_lightClassification, int((((_2542 << 5u) + (_2528 << 9u)) + (_2785 << 2u)) >> 2u)).x;
                _2795 = _2794 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2795)
                {
                    frontier_phi_73_pred = _2784;
                    frontier_phi_73_pred_1 = _2783;
                    frontier_phi_73_pred_2 = _2782;
                    frontier_phi_73_pred_3 = _2781;
                    frontier_phi_73_pred_4 = _2780;
                    frontier_phi_73_pred_5 = _2779;
                }
                else
                {
                    float _2924;
                    float _2925;
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    uint _2930;
                    _2924 = _2779;
                    _2925 = _2780;
                    _2926 = _2781;
                    _2927 = _2782;
                    _2928 = _2783;
                    _2929 = _2784;
                    _2930 = _2794;
                    float _2851;
                    float _2852;
                    float _2853;
                    float _2854;
                    float _2855;
                    float _2856;
                    for (;;)
                    {
                        uint _2934 = uint(findLSB(_2930)) + (_2785 << 5u);
                        uint _2931 = (_2930 + 4294967295u) & _2930;
                        uint _2936 = _2934 * 48u;
                        vec4 _2950 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2936)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 3u)).x));
                        uint _2956 = (_2934 * 48u) + 4u;
                        vec4 _2969 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2956)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 3u)).x));
                        uint _2975 = (_2934 * 48u) + 8u;
                        vec3 _2986 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2975)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 2u)).x));
                        float _2990 = _2950.x - _1625;
                        float _2991 = _2950.y - _1626;
                        float _2992 = _2950.z - _1627;
                        float _2993 = dot(vec3(_2990, _2991, _2992), vec3(_2990, _2991, _2992));
                        float _2996 = inversesqrt(_2993);
                        float _2997 = _2996 * _2990;
                        float _2998 = _2996 * _2991;
                        float _2999 = _2996 * _2992;
                        float _3000 = dot(vec3(_470, _473, _476), vec3(_2997, _2998, _2999));
                        float _3005 = 1.0 - (_2993 * _2950.w);
                        float _4384 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                        float _3006 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
                        float _3007 = sqrt(_2993) * _2969.w;
                        float _3010 = 1.39999997615814208984375 / (_3007 + 1.39999997615814208984375);
                        float _3011 = _3010 * _3010;
                        float _3014 = ((1.0 - _3011) * _3000) + _3011;
                        float _3017 = _3007 * _3007;
                        float _3021 = ((isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0))) * _3006) / ((_3017 * 0.699999988079071044921875) + 1.0);
                        float _3025 = (-0.0) - _1625;
                        float _3026 = (-0.0) - _1626;
                        float _3027 = (-0.0) - _1627;
                        float _3031 = inversesqrt(dot(vec3(_3025, _3026, _3027), vec3(_3025, _3026, _3027)));
                        float _3032 = _3031 * _3025;
                        float _3033 = _3031 * _3026;
                        float _3034 = _3031 * _3027;
                        float _3041 = exp2(log2(1.0 / ((_3017 * 3.5) + 5.0)) * 0.25);
                        float _3042 = 1.0 - _532;
                        float _3049 = sqrt(1.0 - ((1.0 - (_3042 * _3042)) * (1.0 - (_3041 * _3041))));
                        float _3050 = _3049 * _3049;
                        float _3051 = _3050 * _3050;
                        float _3052 = _3032 + _2997;
                        float _3053 = _3033 + _2998;
                        float _3054 = _3034 + _2999;
                        float _3058 = inversesqrt(dot(vec3(_3052, _3053, _3054), vec3(_3052, _3053, _3054)));
                        float _3062 = dot(vec3(_470, _473, _476), vec3(_3032, _3033, _3034));
                        float _4400 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                        float _3065 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                        float _3066 = dot(vec3(_470, _473, _476), vec3(_3058 * _3052, _3058 * _3053, _3058 * _3054));
                        float _4411 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                        float _3069 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                        float _3073 = ((_3069 * _3069) * (_3051 + (-1.0))) + 1.0;
                        float _3074 = _3010 * _3050;
                        float _3075 = _3074 * _3074;
                        float _3078 = ((1.0 - _3075) * _3000) + _3075;
                        float _4422 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                        float _3079 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
                        float _3080 = 1.0 - _3050;
                        float _3090 = (0.5 / (((_3079 * ((_3065 * _3080) + _3050)) + 9.9999999392252902907785028219223e-09) + (((_3079 * _3080) + _3050) * _3065))) * _3079;
                        float _4433 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                        float _3101 = (((_3051 * 3.1415927410125732421875) * (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)))) / ((_3073 * _3073) * ((_3017 * 2.1991131305694580078125) + 3.141590118408203125))) * _3006;
                        _2854 = (_3021 * _2969.x) + _2927;
                        _2855 = (_3021 * _2969.y) + _2928;
                        _2856 = (_3021 * _2969.z) + _2929;
                        _2851 = (_3101 * _2986.x) + _2924;
                        _2852 = (_3101 * _2986.y) + _2925;
                        _2853 = (_3101 * _2986.z) + _2926;
                        if (_2931 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2924 = _2851;
                            _2925 = _2852;
                            _2926 = _2853;
                            _2927 = _2854;
                            _2928 = _2855;
                            _2929 = _2856;
                            _2930 = _2931;
                        }
                    }
                    frontier_phi_73_pred = _2856;
                    frontier_phi_73_pred_1 = _2855;
                    frontier_phi_73_pred_2 = _2854;
                    frontier_phi_73_pred_3 = _2853;
                    frontier_phi_73_pred_4 = _2852;
                    frontier_phi_73_pred_5 = _2851;
                }
                _2638 = frontier_phi_73_pred;
                _2636 = frontier_phi_73_pred_1;
                _2634 = frontier_phi_73_pred_2;
                _2632 = frontier_phi_73_pred_3;
                _2630 = frontier_phi_73_pred_4;
                _2628 = frontier_phi_73_pred_5;
                uint _2786 = _2785 + 1u;
                if (_2786 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2779 = _2628;
                    _2780 = _2630;
                    _2781 = _2632;
                    _2782 = _2634;
                    _2783 = _2636;
                    _2784 = _2638;
                    _2785 = _2786;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2627 = _2628;
            _2629 = _2630;
            _2631 = _2632;
            _2633 = _2634;
            _2635 = _2636;
            _2637 = _2638;
        }
        uvec4 _2641 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2642 = _2641.z;
        uint _2644 = (_2642 >> 8u) & 15u;
        float _2747;
        float _2749;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        if (((4294967295u << _2644) & _2548) == 0u)
        {
            _2747 = _2627;
            _2749 = _2629;
            _2751 = _2631;
            _2753 = _2633;
            _2755 = _2635;
            _2757 = _2637;
        }
        else
        {
            float _2772 = inversesqrt(dot(vec3(_1625, _1626, _1627), vec3(_1625, _1626, _1627)));
            float _2773 = _2772 * _1625;
            float _2774 = _2772 * _1626;
            float _2775 = _2772 * _1627;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2644 < ((_2642 >> 12u) & 15u))
            {
                float _2748;
                float _2750;
                float _2752;
                float _2754;
                float _2756;
                float _2758;
                float _2907 = _2627;
                float _2908 = _2629;
                float _2909 = _2631;
                float _2910 = _2633;
                float _2911 = _2635;
                float _2912 = _2637;
                uint _2913 = _2644;
                uint _2922;
                bool _2923;
                for (;;)
                {
                    _2922 = texelFetch(g_lightClassification, int((((_2542 << 5u) + (_2528 << 9u)) + (_2913 << 2u)) >> 2u)).x;
                    _2923 = _2922 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2923)
                    {
                        frontier_phi_84_pred = _2911;
                        frontier_phi_84_pred_1 = _2910;
                        frontier_phi_84_pred_2 = _2909;
                        frontier_phi_84_pred_3 = _2908;
                        frontier_phi_84_pred_4 = _2907;
                        frontier_phi_84_pred_5 = _2912;
                    }
                    else
                    {
                        float _3115;
                        float _3116;
                        float _3117;
                        float _3118;
                        float _3119;
                        float _3120;
                        float _3411;
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3415;
                        float _3416;
                        float _3128 = _2907;
                        float _3129 = _2908;
                        float _3130 = _2909;
                        float _3131 = _2910;
                        float _3132 = _2911;
                        float _3133 = _2912;
                        uint _3134 = _2922;
                        uint _3135;
                        vec4 _3160;
                        float _3161;
                        vec4 _3176;
                        vec3 _3188;
                        vec4 _3204;
                        vec4 _3220;
                        float _3267;
                        bool _3268;
                        for (;;)
                        {
                            uint _3145 = ((_2913 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3134));
                            _3135 = (_3134 + 4294967295u) & _3134;
                            uint _3147 = _3145 * 40u;
                            _3160 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 3u)).x));
                            _3161 = _3160.w;
                            uint _3163 = (_3145 * 40u) + 4u;
                            _3176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 3u)).x));
                            uint _3178 = (_3145 * 40u) + 8u;
                            _3188 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x));
                            uint _3191 = (_3145 * 40u) + 16u;
                            _3204 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3191)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 3u)).x));
                            uint _3207 = (_3145 * 40u) + 20u;
                            _3220 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3207)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 3u)).x));
                            uint _3223 = (_3145 * 40u) + 24u;
                            vec4 _3236 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3223)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 3u)).x));
                            uint _3242 = (_3145 * 40u) + 28u;
                            vec4 _3255 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 3u)).x));
                            _3267 = fma(_1627, _3255.z, fma(_1626, _3255.y, _3255.x * _1625)) + _3255.w;
                            _3268 = !((fma(_1627, _3236.z, fma(_1626, _3236.y, _3236.x * _1625)) + _3236.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3268)
                            {
                                float _3295 = _3160.x - _1625;
                                float _3296 = _3160.y - _1626;
                                float _3297 = _3160.z - _1627;
                                float _3298 = dot(vec3(_3295, _3296, _3297), vec3(_3295, _3296, _3297));
                                float _3301 = inversesqrt(_3298);
                                float _3302 = _3301 * _3295;
                                float _3303 = _3301 * _3296;
                                float _3304 = _3301 * _3297;
                                float _3308 = 1.0 - (_3298 / (_3161 * _3161));
                                float _4444 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                                float _3309 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
                                float _3313 = sqrt(_3298) * _3176.w;
                                float _3315 = 1.39999997615814208984375 / (_3313 + 1.39999997615814208984375);
                                float _3316 = _3315 * _3315;
                                float _3319 = ((1.0 - _3316) * dot(vec3(_3302, _3303, _3304), vec3(_470, _473, _476))) + _3316;
                                float _3322 = _3313 * _3313;
                                float _3326 = (fma(_1627, _3204.z, fma(_1626, _3204.y, _3204.x * _1625)) + _3204.w) / _3267;
                                float _3327 = (fma(_1627, _3220.z, fma(_1626, _3220.y, _3220.x * _1625)) + _3220.w) / _3267;
                                float _3331 = 1.0 - dot(vec2(_3326, _3327), vec2(_3326, _3327));
                                float _4460 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3332 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
                                float _3333 = _3332 * (((isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0))) * _3309) / ((_3322 * 0.699999988079071044921875) + 1.0));
                                float _3345 = exp2(log2(1.0 / ((_3322 * 3.5) + 5.0)) * 0.25);
                                float _3346 = 1.0 - _532;
                                float _3353 = sqrt(1.0 - ((1.0 - (_3346 * _3346)) * (1.0 - (_3345 * _3345))));
                                float _3354 = _3353 * _3353;
                                float _3355 = _3354 * _3354;
                                float _3356 = _3302 - _2773;
                                float _3357 = _3303 - _2774;
                                float _3358 = _3304 - _2775;
                                float _3362 = inversesqrt(dot(vec3(_3356, _3357, _3358), vec3(_3356, _3357, _3358)));
                                float _3366 = dot(vec3(_470, _473, _476), vec3((-0.0) - _2773, (-0.0) - _2774, (-0.0) - _2775));
                                float _4471 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                                float _3369 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                                float _3370 = dot(vec3(_470, _473, _476), vec3(_3362 * _3356, _3362 * _3357, _3362 * _3358));
                                float _4482 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3373 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
                                float _3377 = ((_3373 * _3373) * (_3355 + (-1.0))) + 1.0;
                                float _3378 = _3315 * _3354;
                                float _3379 = _3378 * _3378;
                                float _3385 = ((1.0 - _3379) * dot(vec3(_470, _473, _476), vec3(_3302, _3303, _3304))) + _3379;
                                float _4493 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3386 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                                float _3387 = 1.0 - _3354;
                                float _3397 = (0.5 / (((_3386 * ((_3369 * _3387) + _3354)) + 9.9999999392252902907785028219223e-09) + (((_3386 * _3387) + _3354) * _3369))) * _3386;
                                float _4504 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                                float _3407 = (_3332 * _3309) * (((_3355 * 3.1415927410125732421875) * (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0)))) / ((_3377 * _3377) * ((_3322 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3333 * _3176.y;
                                frontier_phi_90_pred_1 = _3333 * _3176.x;
                                frontier_phi_90_pred_2 = _3407 * _3188.z;
                                frontier_phi_90_pred_3 = _3407 * _3188.y;
                                frontier_phi_90_pred_4 = _3407 * _3188.x;
                                frontier_phi_90_pred_5 = _3333 * _3176.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3415 = frontier_phi_90_pred;
                            _3414 = frontier_phi_90_pred_1;
                            _3413 = frontier_phi_90_pred_2;
                            _3412 = frontier_phi_90_pred_3;
                            _3411 = frontier_phi_90_pred_4;
                            _3416 = frontier_phi_90_pred_5;
                            _3118 = _3414 + _3131;
                            _3119 = _3415 + _3132;
                            _3120 = _3416 + _3133;
                            _3115 = _3411 + _3128;
                            _3116 = _3412 + _3129;
                            _3117 = _3413 + _3130;
                            if (_3135 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3128 = _3115;
                                _3129 = _3116;
                                _3130 = _3117;
                                _3131 = _3118;
                                _3132 = _3119;
                                _3133 = _3120;
                                _3134 = _3135;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3119;
                        frontier_phi_84_pred_1 = _3118;
                        frontier_phi_84_pred_2 = _3117;
                        frontier_phi_84_pred_3 = _3116;
                        frontier_phi_84_pred_4 = _3115;
                        frontier_phi_84_pred_5 = _3120;
                    }
                    _2756 = frontier_phi_84_pred;
                    _2754 = frontier_phi_84_pred_1;
                    _2752 = frontier_phi_84_pred_2;
                    _2750 = frontier_phi_84_pred_3;
                    _2748 = frontier_phi_84_pred_4;
                    _2758 = frontier_phi_84_pred_5;
                    uint _2914 = _2913 + 1u;
                    if (_2914 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2907 = _2748;
                        _2908 = _2750;
                        _2909 = _2752;
                        _2910 = _2754;
                        _2911 = _2756;
                        _2912 = _2758;
                        _2913 = _2914;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2758;
                frontier_phi_65_66_ladder_1 = _2754;
                frontier_phi_65_66_ladder_2 = _2756;
                frontier_phi_65_66_ladder_3 = _2750;
                frontier_phi_65_66_ladder_4 = _2748;
                frontier_phi_65_66_ladder_5 = _2752;
            }
            else
            {
                frontier_phi_65_66_ladder = _2637;
                frontier_phi_65_66_ladder_1 = _2633;
                frontier_phi_65_66_ladder_2 = _2635;
                frontier_phi_65_66_ladder_3 = _2629;
                frontier_phi_65_66_ladder_4 = _2627;
                frontier_phi_65_66_ladder_5 = _2631;
            }
            _2747 = frontier_phi_65_66_ladder_4;
            _2749 = frontier_phi_65_66_ladder_3;
            _2751 = frontier_phi_65_66_ladder_5;
            _2753 = frontier_phi_65_66_ladder_1;
            _2755 = frontier_phi_65_66_ladder_2;
            _2757 = frontier_phi_65_66_ladder;
        }
        float _2762 = isnan(1.0) ? _516 : (isnan(_516) ? 1.0 : min(_516, 1.0));
        _2560 = (_2762 * _2753) + _2092;
        _2562 = (_2762 * _2755) + _2094;
        _2564 = (_2762 * _2757) + _2096;
        _2566 = ((_2747 * 0.039999999105930328369140625) * _2762) + _2415;
        _2568 = ((_2749 * 0.039999999105930328369140625) * _2762) + _2417;
        _2570 = ((_2751 * 0.039999999105930328369140625) * _2762) + _2419;
    }
    else
    {
        _2560 = _2092;
        _2562 = _2094;
        _2564 = _2096;
        _2566 = _2415;
        _2568 = _2417;
        _2570 = _2419;
    }
    float _4520 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _4531 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _4542 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _2587 = ((isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_2560 + ((isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0))) * _516))) + ((_2566 + ((isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))) * _1354)) * cbPerFrame._m0[3u].x);
    float _2588 = ((isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2562 + ((isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0))) * _516))) + ((_2568 + ((isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))) * _1354)) * cbPerFrame._m0[3u].x);
    float _2589 = ((isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * (_2564 + ((isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0))) * _516))) + ((_2570 + ((isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))) * _1354)) * cbPerFrame._m0[3u].x);
    uint _2590 = _489 + 6u;
    float _2598 = _449 / cbSceneParam._m0[86u].x;
    float _2599 = _450 / cbSceneParam._m0[86u].y;
    vec4 _2613 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2598, _2599, (log2((isnan(cbSceneParam._m0[77u].w) ? _423 : (isnan(_423) ? cbSceneParam._m0[77u].w : min(_423, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2615 = _2613.x;
    float _2616 = _2613.y;
    float _2617 = _2613.z;
    float _2618 = _2613.w;
    float _2689;
    float _2691;
    float _2693;
    float _2695;
    if (_423 > cbSceneParam._m0[78u].w)
    {
        float _2652 = isnan(_423) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _423 : min(cbSceneParam._m0[80u].w, _423));
        float _2653 = _2652 / _423;
        float _2664 = _2653 * _273;
        float _2665 = _274 * _2653;
        float _2666 = (-0.0) - _2665;
        float _2667 = _2653 * _275;
        float _2669 = (cbSceneParam._m0[77u].w * _2666) / _2652;
        float _2670 = _2669 + cbSceneParam._m0[79u].w;
        float _2671 = cbSceneParam._m0[79u].w - _2665;
        float _2677 = sqrt(((_2664 * _2664) + (_2665 * _2665)) + (_2667 * _2667));
        float _2680 = (1.0 - (cbSceneParam._m0[77u].w / _2652)) * _2677;
        float _2685 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2687 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2864;
        if (abs((_2666 - _2669) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2864 = ((((_2670 > 0.0) ? exp2(_2685 * _2670) : (2.0 - exp2(_2687 * _2670))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2680;
        }
        else
        {
            float _2808 = 1.0 / cbSceneParam._m0[80u].x;
            float _2809 = isnan(_2671) ? _2670 : (isnan(_2670) ? _2671 : max(_2670, _2671));
            float _2810 = isnan(_2671) ? _2670 : (isnan(_2670) ? _2671 : min(_2670, _2671));
            float _2819 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : min(_2809, 0.0));
            float _2820 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : min(_2810, 0.0));
            _2864 = ((abs(_2677 / _2666) * cbSceneParam._m0[80u].y) * ((((_2819 - _2820) * 2.0) - ((exp2(_2685 * (isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0)))) - exp2(_2685 * (isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0))))) * _2808)) - ((exp2(_2687 * _2819) - exp2(_2687 * _2820)) * _2808))) + (_2680 * cbSceneParam._m0[80u].z);
        }
        vec4 _2866 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2598, _2599, 1.0), 0.0);
        float _2875 = exp2((_2864 * (-1.44269502162933349609375)) * (1.0 - _2866.w));
        float _2876 = log2(_2875);
        float _2892 = log2(_2618);
        _2689 = (exp2(_2892 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2876 * cbSceneParam._m0[78u].x)) * _2866.x) / cbSceneParam._m0[78u].x)) + _2615;
        _2691 = (exp2(_2892 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2876 * cbSceneParam._m0[78u].y)) * _2866.y) / cbSceneParam._m0[78u].y)) + _2616;
        _2693 = (exp2(_2892 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2876 * cbSceneParam._m0[78u].z)) * _2866.z) / cbSceneParam._m0[78u].z)) + _2617;
        _2695 = _2875 * _2618;
    }
    else
    {
        _2689 = _2615;
        _2691 = _2616;
        _2693 = _2617;
        _2695 = _2618;
    }
    bool _2902;
    vec4 _2705;
    vec4 _2727;
    float _2729;
    float _2733;
    float _2734;
    float _2735;
    float _2736;
    bool _2746;
    for (;;)
    {
        _2705 = cbMatDynParam._m0[0u];
        float _2707 = roundEven(_2705.y);
        bool _2708 = _2707 == 3.0;
        float _2709 = log2(_2695);
        float _2716 = exp2(_2709 * cbSceneParam._m0[78u].x) * _2587;
        float _2717 = exp2(_2709 * cbSceneParam._m0[78u].y) * _2588;
        float _2718 = exp2(_2709 * cbSceneParam._m0[78u].z) * _2589;
        float _2725 = _437 + (-0.5);
        _2727 = cbMtdParam._m0[1u];
        _2729 = _2727.y * _2725;
        float _2732 = (_2707 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2733 = _2732 * (_2708 ? _2716 : (_2716 + (cbSceneParam._m0[72u].w * _2689)));
        _2734 = _2732 * (_2708 ? _2717 : (_2717 + (cbSceneParam._m0[72u].w * _2691)));
        _2735 = _2732 * (_2708 ? _2718 : (_2718 + (cbSceneParam._m0[72u].w * _2693)));
        _2736 = _2725 * 0.999000012874603271484375;
        _2746 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2746)
        {
            if ((cbInstanceData._m0[_489 + 7u].x + _2736) < 0.5)
            {
                _2902 = true;
                break;
            }
        }
        uint _2843 = _491 + uint(_2705.w);
        if ((cbInstanceData._m0[_2843].w < 1.0) && ((cbInstanceData._m0[_2843].w + _2736) < 0.5))
        {
            _2902 = true;
            break;
        }
        if ((_2729 + 1.0) < _2727.x)
        {
            _2902 = true;
            break;
        }
        _2902 = false;
        break;
    }
    float _3106;
    if (_2902)
    {
        discard_state = true;
        _3106 = 0.0;
    }
    else
    {
        _3106 = cbInstanceData._m0[_2590].w;
    }
    SV_Target.x = _2733;
    SV_Target.y = _2734;
    SV_Target.z = _2735;
    SV_Target.w = _3106;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2590].w;
    discard_exit();
}


