#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_POM_M1_AO_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_POM_M1_AO_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_POM_M1_AO_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _869;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _211;
    float _212;
    float _213;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
    }
    else
    {
        _211 = _197;
        _212 = _198;
        _213 = _199;
    }
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    float _278 = dot(vec3(_267, _268, _269), vec3(_190, _191, _192));
    float _281 = dot(vec3(_267, _268, _269), vec3(_204, _205, _206));
    float _284 = dot(vec3(_267, _268, _269), vec3(_211, _212, _213));
    float _290 = inversesqrt(dot(vec3(_278, _281, _284), vec3(_278, _281, _284)));
    vec4 _303 = texture(sampler2D(M_AMSN_POM_M1_AO_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _314 = dot(vec4(_303), vec4(1.0, 0.0, 0.0, 0.0)) + (-0.5);
    float _322 = (((cbMtdParam._m0[10u].y * _278) * _290) * _314) + TEXCOORD.x;
    float _323 = (((_281 * cbMtdParam._m0[10u].y) * _290) * _314) + TEXCOORD.y;
    vec4 _335 = texture(sampler2D(M_AMSN_POM_M1_AO_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_322 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_323 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _340 = _335.x * cbMtdParam._m0[9u].x;
    float _341 = _335.y * cbMtdParam._m0[9u].y;
    float _342 = _335.z * cbMtdParam._m0[9u].z;
    vec4 _354 = texture(sampler2D(M_AMSN_POM_M1_AO_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _322) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _323) + cbTextureTilingScale._m0[1u].w));
    float _358 = _354.z;
    float _363 = (_354.x * 2.0) + (-1.0);
    float _365 = (_354.y * 2.0) + (-1.0);
    float _366 = dot(vec2(_363, _365), vec2(_363, _365));
    float _3209 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _371 = sqrt(1.0 - (isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0))));
    float _374 = fma(_371, _211, fma(_365, _204, _363 * _190));
    float _377 = fma(_371, _212, fma(_365, _205, _363 * _191));
    float _380 = fma(_371, _213, fma(_365, _206, _363 * _192));
    float _384 = inversesqrt(dot(vec3(_374, _377, _380), vec3(_374, _377, _380)));
    float _385 = _384 * _374;
    float _386 = _384 * _377;
    float _387 = _384 * _380;
    float _389 = cbMtdParam._m0[10u].x + _354.w;
    float _393 = inversesqrt(dot(vec3(_385, _386, _387), vec3(_385, _386, _387)));
    float _394 = _393 * _385;
    float _395 = _393 * _386;
    float _396 = _393 * _387;
    float _3220 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _397 = isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0));
    float _3231 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _3242 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _3253 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _3264 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _417 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _421 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _422 = _267 * _421;
    float _423 = _268 * _421;
    float _424 = _269 * _421;
    float _430 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _431 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _452 = fma(_396, cbSceneParam._m0[5u].z, fma(_395, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _394));
    float _455 = fma(_396, cbSceneParam._m0[6u].z, fma(_395, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _394));
    float _458 = fma(_396, cbSceneParam._m0[7u].z, fma(_395, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _394));
    uint _471 = uint(roundEven(NORMAL.w)) * 13u;
    uint _474 = (_471 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _480 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0)))) * cbInstanceData._m0[_474].x;
    float _481 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0)))) * cbInstanceData._m0[_474].y;
    float _482 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0)))) * cbInstanceData._m0[_474].z;
    float _3275 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _483 = isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0));
    float _3286 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _484 = isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0));
    float _3297 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _485 = isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0));
    vec4 _494 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _430, cbSceneParam._m0[86u].y * _431));
    float _498 = ((isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0))) * TEXCOORD.z) * _494.x;
    float _499 = dot(vec3(_394, _395, _396), vec3(_422, _423, _424));
    float _502 = _499 * 2.0;
    float _506 = (_502 * _394) - _422;
    float _507 = (_502 * _395) - _423;
    float _508 = (_502 * _396) - _424;
    float _512 = abs(dot(vec3(_422, _423, _424), vec3(_394, _395, _396)));
    float _3308 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _514 = sqrt(_397);
    float _527 = exp2((_514 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_514 * 3.0));
    float _559 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _563 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _567 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _868;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _594 = fma(_567, cbModelParam._m0[26u].z, fma(_563, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _559));
        float _598 = fma(_567, cbModelParam._m0[27u].z, fma(_563, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _559));
        float _602 = fma(_567, cbModelParam._m0[28u].z, fma(_563, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _559));
        float _626 = _559 + _394;
        float _627 = _563 + _395;
        float _628 = _567 + _396;
        float _638 = fma(_628, cbModelParam._m0[26u].z, fma(_627, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _626)) - _594;
        float _639 = fma(_628, cbModelParam._m0[27u].z, fma(_627, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _626)) - _598;
        float _640 = fma(_628, cbModelParam._m0[28u].z, fma(_627, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _626)) - _602;
        float _644 = inversesqrt(dot(vec3(_638, _639, _640), vec3(_638, _639, _640)));
        float _657 = ((_644 * _638) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_594 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _658 = ((_644 * _639) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_598 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _659 = ((_644 * _640) / cbModelParam._m0[34u].z) + ((((((_602 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _662 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_657, _658, _659), 0.0);
        vec4 _669 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_657, _658, _659), 0.0);
        vec4 _676 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_657, _658, _659), 0.0);
        vec4 _683 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_657, _658, _659), 0.0);
        float _696 = exp2((_662.w + (-0.5)) * 20.0) * 2.0;
        float _697 = _696 * (_662.x + (-0.5));
        float _698 = _696 * (_662.y + (-0.5));
        float _699 = _696 * (_662.z + (-0.5));
        float _706 = exp2((_669.w + (-0.5)) * 20.0) * 2.0;
        float _707 = _706 * (_669.x + (-0.5));
        float _708 = _706 * (_669.y + (-0.5));
        float _709 = _706 * (_669.z + (-0.5));
        float _716 = exp2((_676.w + (-0.5)) * 20.0) * 2.0;
        float _717 = _716 * (_676.x + (-0.5));
        float _718 = _716 * (_676.y + (-0.5));
        float _719 = _716 * (_676.z + (-0.5));
        float _726 = exp2((_683.w + (-0.5)) * 20.0) * 2.0;
        float _727 = _726 * (_683.x + (-0.5));
        float _728 = _726 * (_683.y + (-0.5));
        float _729 = _726 * (_683.z + (-0.5));
        float _730 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _731 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _732 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _733 = _697 * 0.5;
        float _734 = _707 * 0.5;
        float _735 = _717 * 0.5;
        float _736 = dot(vec3(_733, _734, _735), vec3(_733, _734, _735));
        float _741 = (_736 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_736);
        float _750 = (dot(vec3(_394, _395, _396), vec3(_741 * _733, _741 * _734, _741 * _735)) + 1.0) * 0.5;
        float _3334 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _760 = sqrt(((_734 * _734) + (_733 * _733)) + (_735 * _735)) / (_730 + 9.9999997473787516355514526367188e-06);
        float _3345 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _761 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
        float _762 = _761 * 2.0;
        float _766 = (1.0 - _761) / (_761 + 1.0);
        float _3356 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _767 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
        float _776 = ((((1.0 - _767) * (_762 + 2.0)) * exp2(log2(isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0))) * (_762 + 1.0))) + _767) * _730;
        float _777 = _698 * 0.5;
        float _778 = _708 * 0.5;
        float _779 = _718 * 0.5;
        float _780 = dot(vec3(_777, _778, _779), vec3(_777, _778, _779));
        float _785 = (_780 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_780);
        float _793 = (dot(vec3(_394, _395, _396), vec3(_785 * _777, _785 * _778, _785 * _779)) + 1.0) * 0.5;
        float _3367 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _802 = sqrt(((_778 * _778) + (_777 * _777)) + (_779 * _779)) / (_731 + 9.9999997473787516355514526367188e-06);
        float _3378 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _803 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
        float _804 = _803 * 2.0;
        float _808 = (1.0 - _803) / (_803 + 1.0);
        float _3389 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _809 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
        float _818 = ((((1.0 - _809) * (_804 + 2.0)) * exp2(log2(isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0))) * (_804 + 1.0))) + _809) * _731;
        float _819 = _699 * 0.5;
        float _820 = _709 * 0.5;
        float _821 = _719 * 0.5;
        float _822 = dot(vec3(_819, _820, _821), vec3(_819, _820, _821));
        float _827 = (_822 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_822);
        float _835 = (dot(vec3(_394, _395, _396), vec3(_827 * _819, _827 * _820, _827 * _821)) + 1.0) * 0.5;
        float _3400 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _844 = sqrt(((_820 * _820) + (_819 * _819)) + (_821 * _821)) / (_732 + 9.9999997473787516355514526367188e-06);
        float _3411 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _845 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
        float _846 = _845 * 2.0;
        float _850 = (1.0 - _845) / (_845 + 1.0);
        float _3422 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _851 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
        float _860 = ((((1.0 - _851) * (_846 + 2.0)) * exp2(log2(isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0))) * (_846 + 1.0))) + _851) * _732;
        _868 = _699;
        _870 = _698;
        _871 = _697;
        _872 = _709;
        _873 = _708;
        _874 = _707;
        _875 = _719;
        _876 = _718;
        _877 = _717;
        _878 = _732;
        _879 = _731;
        _880 = _730;
        _881 = cbModelParam._m0[36u].z * (isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0)));
        _882 = cbModelParam._m0[36u].z * (isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0)));
        _883 = cbModelParam._m0[36u].z * (isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0)));
    }
    else
    {
        _868 = _869;
        _870 = _869;
        _871 = _869;
        _872 = _869;
        _873 = _869;
        _874 = _869;
        _875 = _869;
        _876 = _869;
        _877 = _869;
        _878 = _869;
        _879 = _869;
        _880 = _869;
        _881 = 0.0;
        _882 = 0.0;
        _883 = 0.0;
    }
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _909 = fma(_567, cbModelParam._m0[30u].z, fma(_563, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _559));
        float _913 = fma(_567, cbModelParam._m0[31u].z, fma(_563, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _559));
        float _917 = fma(_567, cbModelParam._m0[32u].z, fma(_563, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _559));
        float _940 = _559 + _394;
        float _941 = _563 + _395;
        float _942 = _567 + _396;
        float _952 = fma(_942, cbModelParam._m0[30u].z, fma(_941, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _940)) - _909;
        float _953 = fma(_942, cbModelParam._m0[31u].z, fma(_941, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _940)) - _913;
        float _954 = fma(_942, cbModelParam._m0[32u].z, fma(_941, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _940)) - _917;
        float _958 = inversesqrt(dot(vec3(_952, _953, _954), vec3(_952, _953, _954)));
        float _971 = ((_958 * _952) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_909 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _972 = ((_958 * _953) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_913 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _973 = ((_958 * _954) / cbModelParam._m0[35u].z) + ((((((_917 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        float _1008 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_975.x + (-0.5));
        float _1010 = _1008 * (_975.y + (-0.5));
        float _1011 = _1008 * (_975.z + (-0.5));
        float _1018 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_982.x + (-0.5));
        float _1020 = _1018 * (_982.y + (-0.5));
        float _1021 = _1018 * (_982.z + (-0.5));
        float _1028 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_989.x + (-0.5));
        float _1030 = _1028 * (_989.y + (-0.5));
        float _1031 = _1028 * (_989.z + (-0.5));
        float _1038 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_996.x + (-0.5));
        float _1040 = _1038 * (_996.y + (-0.5));
        float _1041 = _1038 * (_996.z + (-0.5));
        float _1042 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1043 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = _1009 * 0.5;
        float _1046 = _1019 * 0.5;
        float _1047 = _1029 * 0.5;
        float _1048 = dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047));
        float _1053 = (_1048 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1048);
        float _1061 = (dot(vec3(_394, _395, _396), vec3(_1053 * _1045, _1053 * _1046, _1053 * _1047)) + 1.0) * 0.5;
        float _3463 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1070 = sqrt(((_1046 * _1046) + (_1045 * _1045)) + (_1047 * _1047)) / (_1042 + 9.9999997473787516355514526367188e-06);
        float _3474 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _1072 = _1071 * 2.0;
        float _1076 = (1.0 - _1071) / (_1071 + 1.0);
        float _3485 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _1086 = ((((1.0 - _1077) * (_1072 + 2.0)) * exp2(log2(isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0))) * (_1072 + 1.0))) + _1077) * _1042;
        float _1087 = _1010 * 0.5;
        float _1088 = _1020 * 0.5;
        float _1089 = _1030 * 0.5;
        float _1090 = dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089));
        float _1095 = (_1090 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1090);
        float _1103 = (dot(vec3(_394, _395, _396), vec3(_1095 * _1087, _1095 * _1088, _1095 * _1089)) + 1.0) * 0.5;
        float _3496 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1112 = sqrt(((_1088 * _1088) + (_1087 * _1087)) + (_1089 * _1089)) / (_1043 + 9.9999997473787516355514526367188e-06);
        float _3507 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _1114 = _1113 * 2.0;
        float _1118 = (1.0 - _1113) / (_1113 + 1.0);
        float _3518 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _1128 = ((((1.0 - _1119) * (_1114 + 2.0)) * exp2(log2(isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))) * (_1114 + 1.0))) + _1119) * _1043;
        float _1129 = _1011 * 0.5;
        float _1130 = _1021 * 0.5;
        float _1131 = _1031 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1145 = (dot(vec3(_394, _395, _396), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _3529 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1154 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _3540 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _3551 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) * (_1156 + 1.0))) + _1161) * _1044;
        _1178 = _1011;
        _1179 = _1010;
        _1180 = _1009;
        _1181 = _1021;
        _1182 = _1020;
        _1183 = _1019;
        _1184 = _1031;
        _1185 = _1030;
        _1186 = _1029;
        _1187 = _1044;
        _1188 = _1043;
        _1189 = _1042;
        _1190 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0)));
        _1191 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)));
        _1192 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
    }
    else
    {
        _1178 = _869;
        _1179 = _869;
        _1180 = _869;
        _1181 = _869;
        _1182 = _869;
        _1183 = _869;
        _1184 = _869;
        _1185 = _869;
        _1186 = _869;
        _1187 = _869;
        _1188 = _869;
        _1189 = _869;
        _1190 = 0.0;
        _1191 = 0.0;
        _1192 = 0.0;
    }
    float _1202 = (cbModelParam._m0[1u].x * (_1190 - _881)) + _881;
    float _1203 = (cbModelParam._m0[1u].x * (_1191 - _882)) + _882;
    float _1204 = (cbModelParam._m0[1u].x * (_1192 - _883)) + _883;
    float _1225 = fma(_1204, cbSceneParam._m0[89u].z, fma(_1203, cbSceneParam._m0[89u].y, _1202 * cbSceneParam._m0[89u].x));
    float _1228 = fma(_1204, cbSceneParam._m0[90u].z, fma(_1203, cbSceneParam._m0[90u].y, _1202 * cbSceneParam._m0[90u].x));
    float _1231 = fma(_1204, cbSceneParam._m0[91u].z, fma(_1203, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1202));
    float _1246 = _506 * 0.5;
    float _1247 = _507 * 0.5;
    float _1248 = _508 * 0.5;
    float _1249 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_1180, _1183, _1186, _1189));
    float _1252 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_1179, _1182, _1185, _1188));
    float _1255 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_1178, _1181, _1184, _1187));
    float _1289;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1262 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_868, _872, _875, _878));
        float _1266 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_870, _873, _876, _879));
        float _1270 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_871, _874, _877, _880));
        float _1277 = dot(vec4(cbModelParam._m0[39u]), vec4(_1246, _1247, _1248, 1.0));
        _1289 = dot(vec3(isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)), isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)), isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1277) ? 0.0 : (isnan(0.0) ? _1277 : max(0.0, _1277))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1289 = 1.0;
    }
    float _1300;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1291 = dot(vec4(cbModelParam._m0[40u]), vec4(_1246, _1247, _1248, 1.0));
        _1300 = dot(vec3(isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)), isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)), isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1291) ? 0.0 : (isnan(0.0) ? _1291 : max(0.0, _1291))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1300 = 1.0;
    }
    float _1304 = (_1300 * cbModelParam._m0[1u].x) + (_1289 * (1.0 - cbModelParam._m0[1u].x));
    float _1314 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _397);
    float _1315 = isnan(_1314) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1314 : min(cbModelParam._m0[25u].z, _1314));
    float _1397;
    float _1399;
    float _1401;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1364 = fma(_567, cbModelParam._m0[13u].z, fma(_563, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _559)) + cbModelParam._m0[13u].w;
        float _1368 = fma(_567, cbModelParam._m0[14u].z, fma(_563, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _559)) + cbModelParam._m0[14u].w;
        float _1372 = fma(_567, cbModelParam._m0[15u].z, fma(_563, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _559)) + cbModelParam._m0[15u].w;
        float _1375 = fma(_508, cbModelParam._m0[13u].z, fma(_507, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _506));
        float _1378 = fma(_508, cbModelParam._m0[14u].z, fma(_507, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _506));
        float _1381 = fma(_508, cbModelParam._m0[15u].z, fma(_507, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _506));
        float _1409;
        if (_1375 > 0.0)
        {
            _1409 = abs((1.0 - _1364) / _1375);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1375 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1364 + 1.0) / _1375);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1409 = frontier_phi_16_14_ladder;
        }
        float _1636;
        if (_1378 > 0.0)
        {
            _1636 = abs((1.0 - _1368) / _1378);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1378 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1368 + 1.0) / _1378);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1636 = frontier_phi_25_21_ladder;
        }
        float _1882;
        if (_1381 > 0.0)
        {
            _1882 = abs((1.0 - _1372) / _1381);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1381 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1372 + 1.0) / _1381);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1882 = frontier_phi_37_32_ladder;
        }
        float _1884 = isnan(_1636) ? _1409 : (isnan(_1409) ? _1636 : min(_1409, _1636));
        float _1885 = isnan(_1882) ? _1884 : (isnan(_1884) ? _1882 : min(_1884, _1882));
        float _1889 = (_1885 * _1375) + _1364;
        float _1890 = (_1885 * _1378) + _1368;
        float _1891 = (_1885 * _1381) + _1372;
        float _1892 = _1885 * 9.9999997473787516355514526367188e-05;
        float _1894 = (-1.0) - _1892;
        float _1896 = _1892 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1891 > _1896) || ((_1891 < _1894) || ((_1890 > _1896) || ((_1890 < _1894) || ((_1889 < _1894) || (_1889 > _1896))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2015 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1891, cbModelParam._m0[9u].z, fma(_1890, cbModelParam._m0[9u].y, _1889 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1891, cbModelParam._m0[10u].z, fma(_1890, cbModelParam._m0[10u].y, _1889 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1891, cbModelParam._m0[11u].z, fma(_1890, cbModelParam._m0[11u].y, _1889 * cbModelParam._m0[11u].x))), _1315);
            frontier_phi_15_37_ladder = _2015.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2015.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2015.x * cbModelParam._m0[1u].y;
        }
        _1397 = frontier_phi_15_37_ladder_2;
        _1399 = frontier_phi_15_37_ladder_1;
        _1401 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1385 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_506, _507, _508), _1315);
        _1397 = _1385.x * cbModelParam._m0[1u].y;
        _1399 = _1385.y * cbModelParam._m0[1u].y;
        _1401 = _1385.z * cbModelParam._m0[1u].y;
    }
    float _1405 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _397);
    float _1406 = isnan(_1405) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1405 : min(cbModelParam._m0[25u].w, _1405));
    float _1499;
    float _1501;
    float _1503;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1463 = fma(_567, cbModelParam._m0[21u].z, fma(_563, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _559)) + cbModelParam._m0[21u].w;
        float _1467 = fma(_567, cbModelParam._m0[22u].z, fma(_563, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _559)) + cbModelParam._m0[22u].w;
        float _1471 = fma(_567, cbModelParam._m0[23u].z, fma(_563, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _559)) + cbModelParam._m0[23u].w;
        float _1474 = fma(_508, cbModelParam._m0[21u].z, fma(_507, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _506));
        float _1477 = fma(_508, cbModelParam._m0[22u].z, fma(_507, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _506));
        float _1480 = fma(_508, cbModelParam._m0[23u].z, fma(_507, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _506));
        float _1641;
        if (_1474 > 0.0)
        {
            _1641 = abs((1.0 - _1463) / _1474);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1474 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1463 + 1.0) / _1474);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1641 = frontier_phi_27_23_ladder;
        }
        float _1909;
        if (_1477 > 0.0)
        {
            _1909 = abs((1.0 - _1467) / _1477);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1477 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1467 + 1.0) / _1477);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1909 = frontier_phi_39_34_ladder;
        }
        float _2114;
        if (_1480 > 0.0)
        {
            _2114 = abs((1.0 - _1471) / _1480);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1480 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1471 + 1.0) / _1480);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2114 = frontier_phi_48_45_ladder;
        }
        float _2116 = isnan(_1909) ? _1641 : (isnan(_1641) ? _1909 : min(_1641, _1909));
        float _2117 = isnan(_2114) ? _2116 : (isnan(_2116) ? _2114 : min(_2116, _2114));
        float _2121 = (_2117 * _1474) + _1463;
        float _2122 = (_2117 * _1477) + _1467;
        float _2123 = (_2117 * _1480) + _1471;
        float _2124 = _2117 * 9.9999997473787516355514526367188e-05;
        float _2125 = (-1.0) - _2124;
        float _2127 = _2124 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2123 > _2127) || ((_2123 < _2125) || ((_2122 > _2127) || ((_2122 < _2125) || ((_2121 < _2125) || (_2121 > _2127))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2321 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2123, cbModelParam._m0[17u].z, fma(_2122, cbModelParam._m0[17u].y, _2121 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2123, cbModelParam._m0[18u].z, fma(_2122, cbModelParam._m0[18u].y, _2121 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2123, cbModelParam._m0[19u].z, fma(_2122, cbModelParam._m0[19u].y, _2121 * cbModelParam._m0[19u].x))), _1406);
            frontier_phi_24_48_ladder = _2321.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2321.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2321.x * cbModelParam._m0[1u].z;
        }
        _1499 = frontier_phi_24_48_ladder_2;
        _1501 = frontier_phi_24_48_ladder_1;
        _1503 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1483 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_506, _507, _508), _1406);
        _1499 = _1483.x * cbModelParam._m0[1u].z;
        _1501 = _1483.y * cbModelParam._m0[1u].z;
        _1503 = _1483.z * cbModelParam._m0[1u].z;
    }
    float _1515 = ((((1.0 - _527) * ((_514 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_527 * _514)) * _498;
    float _1516 = _1515 * ((cbModelParam._m0[1u].w * (_1499 - _1397)) + _1397);
    float _1517 = _1515 * ((cbModelParam._m0[1u].w * (_1501 - _1399)) + _1399);
    float _1518 = _1515 * ((cbModelParam._m0[1u].w * (_1503 - _1401)) + _1401);
    float _1521 = fma(_1518, cbSceneParam._m0[89u].z, fma(_1517, cbSceneParam._m0[89u].y, _1516 * cbSceneParam._m0[89u].x));
    float _1524 = fma(_1518, cbSceneParam._m0[90u].z, fma(_1517, cbSceneParam._m0[90u].y, _1516 * cbSceneParam._m0[90u].x));
    float _1527 = fma(_1518, cbSceneParam._m0[91u].z, fma(_1517, cbSceneParam._m0[91u].y, _1516 * cbSceneParam._m0[91u].x));
    vec4 _1535 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_430, _431));
    float _1537 = _1535.w;
    float _1549 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1537);
    float _1550 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1537);
    float _1551 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1537);
    uvec4 _1555 = floatBitsToUint(cbInstanceData._m0[_471 + 5u]);
    uint _1557 = _1555.x * 14u;
    uint _1558 = _1557 + 13u;
    float _1565 = _498 + (-1.0);
    float _1570 = (cbLight._m0[_1558].x * _1565) + 1.0;
    float _1571 = (cbLight._m0[_1558].y * _1565) + 1.0;
    float _1572 = (cbLight._m0[_1558].z * _1565) + 1.0;
    float _1573 = (cbLight._m0[_1558].w * _1565) + 1.0;
    uint _1574 = _1557 + 5u;
    float _1580 = isnan(1.0) ? _1571 : (isnan(_1571) ? 1.0 : min(_1571, 1.0));
    uint _1584 = _1557 + 4u;
    float _1594 = isnan(1.0) ? _1570 : (isnan(_1570) ? 1.0 : min(_1570, 1.0));
    uint _1598 = _1557 | 1u;
    float _1609 = dot(vec3(cbLight._m0[_1557].xyz), vec3(_394, _395, _396));
    float _1612 = dot(vec3(cbLight._m0[_1598].xyz), vec3(_394, _395, _396));
    float _3687 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
    float _3698 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
    float _1617 = (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * 0.3183098733425140380859375;
    float _1619 = (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * 0.3183098733425140380859375;
    float _1626 = ((cbLight._m0[_1574].x * _1580) * _1619) + (((cbLight._m0[_1584].x * _1549) * _1594) * _1617);
    float _1627 = ((_1580 * cbLight._m0[_1574].y) * _1619) + (((cbLight._m0[_1584].y * _1550) * _1594) * _1617);
    float _1628 = ((_1580 * cbLight._m0[_1574].z) * _1619) + (((cbLight._m0[_1584].z * _1551) * _1594) * _1617);
    uvec4 _1633 = floatBitsToUint(cbLight._m0[_1557 + 12u]);
    bool _1635 = _1633.x == 0u;
    float _1646;
    float _1648;
    float _1650;
    if (_1635)
    {
        _1646 = _1626;
        _1648 = _1627;
        _1650 = _1628;
    }
    else
    {
        uint _1654 = _1557 + 6u;
        float _1670 = (dot(vec3(cbLight._m0[_1557 + 2u].xyz), vec3(_394, _395, _396)) * 0.5) + 0.5;
        float _1671 = _1670 * _1670;
        float _3709 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1673 = isnan(1.0) ? _1572 : (isnan(_1572) ? 1.0 : min(_1572, 1.0));
        _1646 = (((cbLight._m0[_1654].x * 0.3183098733425140380859375) * _1672) * _1673) + _1626;
        _1648 = (((cbLight._m0[_1654].y * 0.3183098733425140380859375) * _1672) * _1673) + _1627;
        _1650 = (((cbLight._m0[_1654].z * 0.3183098733425140380859375) * _1672) * _1673) + _1628;
    }
    bool _1653 = _1633.y == 0u;
    float _1691;
    float _1693;
    float _1695;
    if (_1653)
    {
        _1691 = _1646;
        _1693 = _1648;
        _1695 = _1650;
    }
    else
    {
        uint _1853 = _1557 + 7u;
        float _1869 = (dot(vec3(cbLight._m0[_1557 + 3u].xyz), vec3(_394, _395, _396)) * 0.5) + 0.5;
        float _1870 = _1869 * _1869;
        float _3725 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
        float _1871 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1872 = isnan(1.0) ? _1573 : (isnan(_1573) ? 1.0 : min(_1573, 1.0));
        _1691 = (((cbLight._m0[_1853].x * 0.3183098733425140380859375) * _1871) * _1872) + _1646;
        _1693 = (((cbLight._m0[_1853].y * 0.3183098733425140380859375) * _1871) * _1872) + _1648;
        _1695 = (((cbLight._m0[_1853].z * 0.3183098733425140380859375) * _1871) * _1872) + _1650;
    }
    uint _1698 = _1557 + 8u;
    float _1711 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1557].w)) * _397) * 0.949999988079071044921875);
    float _1712 = _1711 * _1711;
    float _1713 = cbLight._m0[_1557].x + _422;
    float _1714 = cbLight._m0[_1557].y + _423;
    float _1715 = cbLight._m0[_1557].z + _424;
    float _1719 = inversesqrt(dot(vec3(_1713, _1714, _1715), vec3(_1713, _1714, _1715)));
    float _1720 = _1719 * _1713;
    float _1721 = _1719 * _1714;
    float _1722 = _1719 * _1715;
    float _1723 = dot(vec3(_394, _395, _396), vec3(cbLight._m0[_1557].xyz));
    float _3741 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
    float _1726 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _3752 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _1727 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _1728 = dot(vec3(_394, _395, _396), vec3(_1720, _1721, _1722));
    float _3763 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
    float _1731 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _1732 = dot(vec3(cbLight._m0[_1557].xyz), vec3(_1720, _1721, _1722));
    float _3774 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
    float _1736 = _1712 * _1712;
    float _1740 = ((_1731 * _1731) * (_1736 + (-1.0))) + 1.0;
    float _1751 = (exp2(log2(1.0 - (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1752 = 1.0 - _1712;
    float _1763 = (0.5 / (((_1727 * ((_1726 * _1752) + _1712)) + 9.9999999392252902907785028219223e-09) + (((_1727 * _1752) + _1712) * _1726))) * _1726;
    float _3785 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _1765 = (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))) * (_1736 / ((_1740 * _1740) * 3.141590118408203125));
    uint _1779 = _1557 + 9u;
    float _1790 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1598].w)) * _397) * 0.949999988079071044921875);
    float _1791 = _1790 * _1790;
    float _1792 = cbLight._m0[_1598].x + _422;
    float _1793 = cbLight._m0[_1598].y + _423;
    float _1794 = cbLight._m0[_1598].z + _424;
    float _1798 = inversesqrt(dot(vec3(_1792, _1793, _1794), vec3(_1792, _1793, _1794)));
    float _1799 = _1798 * _1792;
    float _1800 = _1798 * _1793;
    float _1801 = _1798 * _1794;
    float _1802 = dot(vec3(_394, _395, _396), vec3(cbLight._m0[_1598].xyz));
    float _3796 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
    float _1805 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _1806 = dot(vec3(_394, _395, _396), vec3(_1799, _1800, _1801));
    float _3807 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _1809 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _1810 = dot(vec3(cbLight._m0[_1598].xyz), vec3(_1799, _1800, _1801));
    float _3818 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1814 = _1791 * _1791;
    float _1818 = ((_1809 * _1809) * (_1814 + (-1.0))) + 1.0;
    float _1827 = (exp2(log2(1.0 - (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1828 = 1.0 - _1791;
    float _1838 = (0.5 / (((_1727 * ((_1805 * _1828) + _1791)) + 9.9999999392252902907785028219223e-09) + (((_1727 * _1828) + _1791) * _1805))) * _1805;
    float _3829 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1840 = (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_1814 / ((_1818 * _1818) * 3.141590118408203125));
    float _1850 = (((_1827 * cbLight._m0[_1779].x) * _1840) * _1580) + ((((cbLight._m0[_1698].x * _1549) * _1751) * _1765) * _1594);
    float _1851 = (((_1827 * cbLight._m0[_1779].y) * _1840) * _1580) + ((((cbLight._m0[_1698].y * _1550) * _1751) * _1765) * _1594);
    float _1852 = (((_1827 * cbLight._m0[_1779].z) * _1840) * _1580) + ((((cbLight._m0[_1698].z * _1551) * _1751) * _1765) * _1594);
    float _1914;
    float _1916;
    float _1918;
    if (_1635)
    {
        _1914 = _1850;
        _1916 = _1851;
        _1918 = _1852;
    }
    else
    {
        uint _1920 = _1557 + 2u;
        uint _1924 = _1557 + 10u;
        float _1938 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1920].w)) * _397) * 0.949999988079071044921875);
        float _1939 = _1938 * _1938;
        float _1940 = cbLight._m0[_1920].x + _422;
        float _1941 = cbLight._m0[_1920].y + _423;
        float _1942 = cbLight._m0[_1920].z + _424;
        float _1946 = inversesqrt(dot(vec3(_1940, _1941, _1942), vec3(_1940, _1941, _1942)));
        float _1947 = _1946 * _1940;
        float _1948 = _1946 * _1941;
        float _1949 = _1946 * _1942;
        float _1950 = dot(vec3(_394, _395, _396), vec3(cbLight._m0[_1920].xyz));
        float _3840 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
        float _1953 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1954 = dot(vec3(_394, _395, _396), vec3(_1947, _1948, _1949));
        float _3851 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
        float _1957 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1958 = dot(vec3(cbLight._m0[_1920].xyz), vec3(_1947, _1948, _1949));
        float _3862 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
        float _1962 = _1939 * _1939;
        float _1966 = ((_1957 * _1957) * (_1962 + (-1.0))) + 1.0;
        float _1975 = (exp2(log2(1.0 - (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1976 = 1.0 - _1939;
        float _1986 = (0.5 / (((_1727 * ((_1953 * _1976) + _1939)) + 9.9999999392252902907785028219223e-09) + (((_1727 * _1976) + _1939) * _1953))) * _1953;
        float _3873 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
        float _1988 = (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * (_1962 / ((_1966 * _1966) * 3.141590118408203125));
        float _1989 = isnan(1.0) ? _1572 : (isnan(_1572) ? 1.0 : min(_1572, 1.0));
        _1914 = (((_1975 * cbLight._m0[_1924].x) * _1988) * _1989) + _1850;
        _1916 = (((_1975 * cbLight._m0[_1924].y) * _1988) * _1989) + _1851;
        _1918 = (((_1975 * cbLight._m0[_1924].z) * _1988) * _1989) + _1852;
    }
    float _2024;
    float _2026;
    float _2028;
    if (_1653)
    {
        _2024 = _1914;
        _2026 = _1916;
        _2028 = _1918;
    }
    else
    {
        uint _2035 = _1557 + 3u;
        uint _2039 = _1557 + 11u;
        float _2053 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2035].w)) * _397) * 0.949999988079071044921875);
        float _2054 = _2053 * _2053;
        float _2055 = cbLight._m0[_2035].x + _422;
        float _2056 = cbLight._m0[_2035].y + _423;
        float _2057 = cbLight._m0[_2035].z + _424;
        float _2061 = inversesqrt(dot(vec3(_2055, _2056, _2057), vec3(_2055, _2056, _2057)));
        float _2062 = _2061 * _2055;
        float _2063 = _2061 * _2056;
        float _2064 = _2061 * _2057;
        float _2065 = dot(vec3(_394, _395, _396), vec3(cbLight._m0[_2035].xyz));
        float _3889 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        float _2068 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _2069 = dot(vec3(_394, _395, _396), vec3(_2062, _2063, _2064));
        float _3900 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2072 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _2073 = dot(vec3(cbLight._m0[_2035].xyz), vec3(_2062, _2063, _2064));
        float _3911 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2077 = _2054 * _2054;
        float _2081 = ((_2072 * _2072) * (_2077 + (-1.0))) + 1.0;
        float _2090 = (exp2(log2(1.0 - (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2091 = 1.0 - _2054;
        float _2101 = (0.5 / (((_1727 * ((_2068 * _2091) + _2054)) + 9.9999999392252902907785028219223e-09) + (((_1727 * _2091) + _2054) * _2068))) * _2068;
        float _3922 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
        float _2103 = (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_2077 / ((_2081 * _2081) * 3.141590118408203125));
        float _2104 = isnan(1.0) ? _1573 : (isnan(_1573) ? 1.0 : min(_1573, 1.0));
        _2024 = (((_2090 * cbLight._m0[_2039].x) * _2103) * _2104) + _1914;
        _2026 = (((_2090 * cbLight._m0[_2039].y) * _2103) * _2104) + _1916;
        _2028 = (((_2090 * cbLight._m0[_2039].z) * _2103) * _2104) + _1918;
    }
    float _2238;
    float _2240;
    float _2242;
    float _2244;
    float _2246;
    float _2248;
    if (_1555.y == 0u)
    {
        float _2179 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2180 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2179;
        float _2181 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2179;
        float _2182 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2179;
        uvec4 _2194 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2195 = _2194.x;
        uint _2206 = uint((float(_2194.y) * floor(float(uint(cbSceneParam._m0[85u].y * _431) / _2195))) + floor(float(uint(cbSceneParam._m0[85u].x * _430) / _2195)));
        float _2216 = (log2(_2182 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2217 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        uint _2220 = uint(isnan(14.0) ? _2217 : (isnan(_2217) ? 14.0 : min(_2217, 14.0)));
        uvec4 _2225 = texelFetch(g_lightClusterGridBuffer, int(((_2220 << 2u) + (_2206 << 6u)) >> 2u));
        uint _2226 = _2225.x;
        uint _2227 = _2194.z;
        float _2326;
        float _2328;
        float _2330;
        float _2332;
        float _2334;
        float _2336;
        if (((((1u << ((_2227 >> 4u) & 15u)) + 4294967295u) & _2226) == 0u) || ((_2227 & 240u) == 0u))
        {
            _2326 = 0.0;
            _2328 = 0.0;
            _2330 = 0.0;
            _2332 = 0.0;
            _2334 = 0.0;
            _2336 = 0.0;
        }
        else
        {
            float _2327;
            float _2329;
            float _2331;
            float _2333;
            float _2335;
            float _2337;
            float _2470 = 0.0;
            float _2471 = 0.0;
            float _2472 = 0.0;
            float _2473 = 0.0;
            float _2474 = 0.0;
            float _2475 = 0.0;
            uint _2476 = 0u;
            uint _2485;
            bool _2486;
            for (;;)
            {
                _2485 = texelFetch(g_lightClassification, int((((_2220 << 5u) + (_2206 << 9u)) + (_2476 << 2u)) >> 2u)).x;
                _2486 = _2485 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2486)
                {
                    frontier_phi_63_pred = _2475;
                    frontier_phi_63_pred_1 = _2474;
                    frontier_phi_63_pred_2 = _2473;
                    frontier_phi_63_pred_3 = _2472;
                    frontier_phi_63_pred_4 = _2471;
                    frontier_phi_63_pred_5 = _2470;
                }
                else
                {
                    float _2594;
                    float _2595;
                    float _2596;
                    float _2597;
                    float _2598;
                    float _2599;
                    uint _2600;
                    _2594 = _2470;
                    _2595 = _2471;
                    _2596 = _2472;
                    _2597 = _2473;
                    _2598 = _2474;
                    _2599 = _2475;
                    _2600 = _2485;
                    float _2526;
                    float _2527;
                    float _2528;
                    float _2529;
                    float _2530;
                    float _2531;
                    for (;;)
                    {
                        uint _2604 = uint(findLSB(_2600)) + (_2476 << 5u);
                        uint _2601 = (_2600 + 4294967295u) & _2600;
                        uint _2606 = _2604 * 48u;
                        vec4 _2620 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2606)).x, texelFetch(g_PointLightRenderingBuffer, int(_2606 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2606 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2606 + 3u)).x));
                        uint _2626 = (_2604 * 48u) + 4u;
                        vec4 _2639 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2626)).x, texelFetch(g_PointLightRenderingBuffer, int(_2626 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2626 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2626 + 3u)).x));
                        uint _2645 = (_2604 * 48u) + 8u;
                        vec3 _2656 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2645)).x, texelFetch(g_PointLightRenderingBuffer, int(_2645 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2645 + 2u)).x));
                        float _2660 = _2620.x - _2180;
                        float _2661 = _2620.y - _2181;
                        float _2662 = _2620.z - _2182;
                        float _2663 = dot(vec3(_2660, _2661, _2662), vec3(_2660, _2661, _2662));
                        float _2666 = inversesqrt(_2663);
                        float _2667 = _2666 * _2660;
                        float _2668 = _2666 * _2661;
                        float _2669 = _2666 * _2662;
                        float _2670 = dot(vec3(_452, _455, _458), vec3(_2667, _2668, _2669));
                        float _2675 = 1.0 - (_2663 * _2620.w);
                        float _3948 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
                        float _2676 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
                        float _2677 = sqrt(_2663) * _2639.w;
                        float _2680 = 1.39999997615814208984375 / (_2677 + 1.39999997615814208984375);
                        float _2681 = _2680 * _2680;
                        float _2684 = ((1.0 - _2681) * _2670) + _2681;
                        float _2687 = _2677 * _2677;
                        float _2691 = ((isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0))) * _2676) / ((_2687 * 0.699999988079071044921875) + 1.0);
                        float _2695 = (-0.0) - _2180;
                        float _2696 = (-0.0) - _2181;
                        float _2697 = (-0.0) - _2182;
                        float _2701 = inversesqrt(dot(vec3(_2695, _2696, _2697), vec3(_2695, _2696, _2697)));
                        float _2702 = _2701 * _2695;
                        float _2703 = _2701 * _2696;
                        float _2704 = _2701 * _2697;
                        float _2712 = exp2(log2(1.0 / ((_2687 * 3.5) + 5.0)) * 0.25);
                        float _2713 = 1.0 - _514;
                        float _2720 = sqrt(1.0 - ((1.0 - (_2713 * _2713)) * (1.0 - (_2712 * _2712))));
                        float _2721 = _2720 * _2720;
                        float _2722 = _2721 * _2721;
                        float _2723 = _2702 + _2667;
                        float _2724 = _2703 + _2668;
                        float _2725 = _2704 + _2669;
                        float _2729 = inversesqrt(dot(vec3(_2723, _2724, _2725), vec3(_2723, _2724, _2725)));
                        float _2733 = dot(vec3(_452, _455, _458), vec3(_2702, _2703, _2704));
                        float _3964 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
                        float _2736 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
                        float _2737 = dot(vec3(_452, _455, _458), vec3(_2729 * _2723, _2729 * _2724, _2729 * _2725));
                        float _3975 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
                        float _2740 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
                        float _2744 = ((_2740 * _2740) * (_2722 + (-1.0))) + 1.0;
                        float _2745 = _2680 * _2721;
                        float _2746 = _2745 * _2745;
                        float _2749 = ((1.0 - _2746) * _2670) + _2746;
                        float _3986 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
                        float _2750 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
                        float _2751 = 1.0 - _2721;
                        float _2761 = (0.5 / (((_2750 * ((_2736 * _2751) + _2721)) + 9.9999999392252902907785028219223e-09) + (((_2750 * _2751) + _2721) * _2736))) * _2750;
                        float _3997 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
                        float _2772 = (((_2722 * 3.1415927410125732421875) * (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) / ((_2744 * _2744) * ((_2687 * 2.1991131305694580078125) + 3.141590118408203125))) * _2676;
                        _2529 = (_2691 * _2639.x) + _2597;
                        _2530 = (_2691 * _2639.y) + _2598;
                        _2531 = (_2691 * _2639.z) + _2599;
                        _2526 = (_2772 * _2656.x) + _2594;
                        _2527 = (_2772 * _2656.y) + _2595;
                        _2528 = (_2772 * _2656.z) + _2596;
                        if (_2601 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2594 = _2526;
                            _2595 = _2527;
                            _2596 = _2528;
                            _2597 = _2529;
                            _2598 = _2530;
                            _2599 = _2531;
                            _2600 = _2601;
                        }
                    }
                    frontier_phi_63_pred = _2531;
                    frontier_phi_63_pred_1 = _2530;
                    frontier_phi_63_pred_2 = _2529;
                    frontier_phi_63_pred_3 = _2528;
                    frontier_phi_63_pred_4 = _2527;
                    frontier_phi_63_pred_5 = _2526;
                }
                _2337 = frontier_phi_63_pred;
                _2335 = frontier_phi_63_pred_1;
                _2333 = frontier_phi_63_pred_2;
                _2331 = frontier_phi_63_pred_3;
                _2329 = frontier_phi_63_pred_4;
                _2327 = frontier_phi_63_pred_5;
                uint _2477 = _2476 + 1u;
                if (_2477 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2470 = _2327;
                    _2471 = _2329;
                    _2472 = _2331;
                    _2473 = _2333;
                    _2474 = _2335;
                    _2475 = _2337;
                    _2476 = _2477;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2326 = _2327;
            _2328 = _2329;
            _2330 = _2331;
            _2332 = _2333;
            _2334 = _2335;
            _2336 = _2337;
        }
        uvec4 _2340 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2341 = _2340.z;
        uint _2343 = (_2341 >> 8u) & 15u;
        float _2438;
        float _2440;
        float _2442;
        float _2444;
        float _2446;
        float _2448;
        if (((4294967295u << _2343) & _2226) == 0u)
        {
            _2438 = _2326;
            _2440 = _2328;
            _2442 = _2330;
            _2444 = _2332;
            _2446 = _2334;
            _2448 = _2336;
        }
        else
        {
            float _2463 = inversesqrt(dot(vec3(_2180, _2181, _2182), vec3(_2180, _2181, _2182)));
            float _2464 = _2463 * _2180;
            float _2465 = _2463 * _2181;
            float _2466 = _2463 * _2182;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2343 < ((_2341 >> 12u) & 15u))
            {
                float _2439;
                float _2441;
                float _2443;
                float _2445;
                float _2447;
                float _2449;
                float _2577 = _2326;
                float _2578 = _2328;
                float _2579 = _2330;
                float _2580 = _2332;
                float _2581 = _2334;
                float _2582 = _2336;
                uint _2583 = _2343;
                uint _2592;
                bool _2593;
                for (;;)
                {
                    _2592 = texelFetch(g_lightClassification, int((((_2220 << 5u) + (_2206 << 9u)) + (_2583 << 2u)) >> 2u)).x;
                    _2593 = _2592 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2593)
                    {
                        frontier_phi_69_pred = _2582;
                        frontier_phi_69_pred_1 = _2581;
                        frontier_phi_69_pred_2 = _2580;
                        frontier_phi_69_pred_3 = _2579;
                        frontier_phi_69_pred_4 = _2578;
                        frontier_phi_69_pred_5 = _2577;
                    }
                    else
                    {
                        float _2777;
                        float _2778;
                        float _2779;
                        float _2780;
                        float _2781;
                        float _2782;
                        float _3073;
                        float _3074;
                        float _3075;
                        float _3076;
                        float _3077;
                        float _3078;
                        float _2790 = _2577;
                        float _2791 = _2578;
                        float _2792 = _2579;
                        float _2793 = _2580;
                        float _2794 = _2581;
                        float _2795 = _2582;
                        uint _2796 = _2592;
                        uint _2797;
                        vec4 _2822;
                        float _2823;
                        vec4 _2838;
                        vec3 _2850;
                        vec4 _2866;
                        vec4 _2882;
                        float _2929;
                        bool _2930;
                        for (;;)
                        {
                            uint _2807 = ((_2583 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2796));
                            _2797 = (_2796 + 4294967295u) & _2796;
                            uint _2809 = _2807 * 40u;
                            _2822 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2809)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 3u)).x));
                            _2823 = _2822.w;
                            uint _2825 = (_2807 * 40u) + 4u;
                            _2838 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2825)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 3u)).x));
                            uint _2840 = (_2807 * 40u) + 8u;
                            _2850 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2840)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 2u)).x));
                            uint _2853 = (_2807 * 40u) + 16u;
                            _2866 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2853)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 3u)).x));
                            uint _2869 = (_2807 * 40u) + 20u;
                            _2882 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2869)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 3u)).x));
                            uint _2885 = (_2807 * 40u) + 24u;
                            vec4 _2898 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2885)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 3u)).x));
                            uint _2904 = (_2807 * 40u) + 28u;
                            vec4 _2917 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2904)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 3u)).x));
                            _2929 = fma(_2182, _2917.z, fma(_2181, _2917.y, _2917.x * _2180)) + _2917.w;
                            _2930 = !((fma(_2182, _2898.z, fma(_2181, _2898.y, _2898.x * _2180)) + _2898.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2930)
                            {
                                float _2957 = _2822.x - _2180;
                                float _2958 = _2822.y - _2181;
                                float _2959 = _2822.z - _2182;
                                float _2960 = dot(vec3(_2957, _2958, _2959), vec3(_2957, _2958, _2959));
                                float _2963 = inversesqrt(_2960);
                                float _2964 = _2963 * _2957;
                                float _2965 = _2963 * _2958;
                                float _2966 = _2963 * _2959;
                                float _2970 = 1.0 - (_2960 / (_2823 * _2823));
                                float _4008 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
                                float _2971 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
                                float _2975 = sqrt(_2960) * _2838.w;
                                float _2977 = 1.39999997615814208984375 / (_2975 + 1.39999997615814208984375);
                                float _2978 = _2977 * _2977;
                                float _2981 = ((1.0 - _2978) * dot(vec3(_2964, _2965, _2966), vec3(_452, _455, _458))) + _2978;
                                float _2984 = _2975 * _2975;
                                float _2988 = (fma(_2182, _2866.z, fma(_2181, _2866.y, _2866.x * _2180)) + _2866.w) / _2929;
                                float _2989 = (fma(_2182, _2882.z, fma(_2181, _2882.y, _2882.x * _2180)) + _2882.w) / _2929;
                                float _2993 = 1.0 - dot(vec2(_2988, _2989), vec2(_2988, _2989));
                                float _4024 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                                float _2994 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
                                float _2995 = _2994 * (((isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0))) * _2971) / ((_2984 * 0.699999988079071044921875) + 1.0));
                                float _3007 = exp2(log2(1.0 / ((_2984 * 3.5) + 5.0)) * 0.25);
                                float _3008 = 1.0 - _514;
                                float _3015 = sqrt(1.0 - ((1.0 - (_3008 * _3008)) * (1.0 - (_3007 * _3007))));
                                float _3016 = _3015 * _3015;
                                float _3017 = _3016 * _3016;
                                float _3018 = _2964 - _2464;
                                float _3019 = _2965 - _2465;
                                float _3020 = _2966 - _2466;
                                float _3024 = inversesqrt(dot(vec3(_3018, _3019, _3020), vec3(_3018, _3019, _3020)));
                                float _3028 = dot(vec3(_452, _455, _458), vec3((-0.0) - _2464, (-0.0) - _2465, (-0.0) - _2466));
                                float _4035 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                                float _3031 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
                                float _3032 = dot(vec3(_452, _455, _458), vec3(_3024 * _3018, _3024 * _3019, _3024 * _3020));
                                float _4046 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                                float _3035 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
                                float _3039 = ((_3035 * _3035) * (_3017 + (-1.0))) + 1.0;
                                float _3040 = _2977 * _3016;
                                float _3041 = _3040 * _3040;
                                float _3047 = ((1.0 - _3041) * dot(vec3(_452, _455, _458), vec3(_2964, _2965, _2966))) + _3041;
                                float _4057 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                                float _3048 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
                                float _3049 = 1.0 - _3016;
                                float _3059 = (0.5 / (((_3048 * ((_3031 * _3049) + _3016)) + 9.9999999392252902907785028219223e-09) + (((_3048 * _3049) + _3016) * _3031))) * _3048;
                                float _4068 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                                float _3069 = (_2994 * _2971) * (((_3017 * 3.1415927410125732421875) * (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0)))) / ((_3039 * _3039) * ((_2984 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2995 * _2838.z;
                                frontier_phi_75_pred_1 = _2995 * _2838.y;
                                frontier_phi_75_pred_2 = _2995 * _2838.x;
                                frontier_phi_75_pred_3 = _3069 * _2850.z;
                                frontier_phi_75_pred_4 = _3069 * _2850.y;
                                frontier_phi_75_pred_5 = _3069 * _2850.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3078 = frontier_phi_75_pred;
                            _3077 = frontier_phi_75_pred_1;
                            _3076 = frontier_phi_75_pred_2;
                            _3075 = frontier_phi_75_pred_3;
                            _3074 = frontier_phi_75_pred_4;
                            _3073 = frontier_phi_75_pred_5;
                            _2780 = _3076 + _2793;
                            _2781 = _3077 + _2794;
                            _2782 = _3078 + _2795;
                            _2777 = _3073 + _2790;
                            _2778 = _3074 + _2791;
                            _2779 = _3075 + _2792;
                            if (_2797 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2790 = _2777;
                                _2791 = _2778;
                                _2792 = _2779;
                                _2793 = _2780;
                                _2794 = _2781;
                                _2795 = _2782;
                                _2796 = _2797;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2782;
                        frontier_phi_69_pred_1 = _2781;
                        frontier_phi_69_pred_2 = _2780;
                        frontier_phi_69_pred_3 = _2779;
                        frontier_phi_69_pred_4 = _2778;
                        frontier_phi_69_pred_5 = _2777;
                    }
                    _2449 = frontier_phi_69_pred;
                    _2447 = frontier_phi_69_pred_1;
                    _2445 = frontier_phi_69_pred_2;
                    _2443 = frontier_phi_69_pred_3;
                    _2441 = frontier_phi_69_pred_4;
                    _2439 = frontier_phi_69_pred_5;
                    uint _2584 = _2583 + 1u;
                    if (_2584 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2577 = _2439;
                        _2578 = _2441;
                        _2579 = _2443;
                        _2580 = _2445;
                        _2581 = _2447;
                        _2582 = _2449;
                        _2583 = _2584;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2449;
                frontier_phi_57_58_ladder_1 = _2447;
                frontier_phi_57_58_ladder_2 = _2445;
                frontier_phi_57_58_ladder_3 = _2443;
                frontier_phi_57_58_ladder_4 = _2441;
                frontier_phi_57_58_ladder_5 = _2439;
            }
            else
            {
                frontier_phi_57_58_ladder = _2336;
                frontier_phi_57_58_ladder_1 = _2334;
                frontier_phi_57_58_ladder_2 = _2332;
                frontier_phi_57_58_ladder_3 = _2330;
                frontier_phi_57_58_ladder_4 = _2328;
                frontier_phi_57_58_ladder_5 = _2326;
            }
            _2438 = frontier_phi_57_58_ladder_5;
            _2440 = frontier_phi_57_58_ladder_4;
            _2442 = frontier_phi_57_58_ladder_3;
            _2444 = frontier_phi_57_58_ladder_2;
            _2446 = frontier_phi_57_58_ladder_1;
            _2448 = frontier_phi_57_58_ladder;
        }
        float _2453 = isnan(1.0) ? _498 : (isnan(_498) ? 1.0 : min(_498, 1.0));
        _2238 = (_2453 * _2444) + _1691;
        _2240 = (_2453 * _2446) + _1693;
        _2242 = (_2453 * _2448) + _1695;
        _2244 = ((_2438 * 0.039999999105930328369140625) * _2453) + _2024;
        _2246 = ((_2440 * 0.039999999105930328369140625) * _2453) + _2026;
        _2248 = ((_2442 * 0.039999999105930328369140625) * _2453) + _2028;
    }
    else
    {
        _2238 = _1691;
        _2240 = _1693;
        _2242 = _1695;
        _2244 = _2024;
        _2246 = _2026;
        _2248 = _2028;
    }
    float _4084 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _4095 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _4106 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    uint _2268 = _471 + 6u;
    float _2276 = _430 / cbSceneParam._m0[86u].x;
    float _2277 = _431 / cbSceneParam._m0[86u].y;
    vec4 _2291 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2276, _2277, (log2((isnan(cbSceneParam._m0[77u].w) ? _417 : (isnan(_417) ? cbSceneParam._m0[77u].w : min(_417, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2293 = _2291.x;
    float _2294 = _2291.y;
    float _2295 = _2291.z;
    float _2296 = _2291.w;
    float _2388;
    float _2390;
    float _2392;
    float _2394;
    if (_417 > cbSceneParam._m0[78u].w)
    {
        float _2351 = isnan(_417) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _417 : min(cbSceneParam._m0[80u].w, _417));
        float _2352 = _2351 / _417;
        float _2363 = _2352 * _267;
        float _2364 = _268 * _2352;
        float _2365 = (-0.0) - _2364;
        float _2366 = _2352 * _269;
        float _2368 = (cbSceneParam._m0[77u].w * _2365) / _2351;
        float _2369 = _2368 + cbSceneParam._m0[79u].w;
        float _2370 = cbSceneParam._m0[79u].w - _2364;
        float _2376 = sqrt(((_2363 * _2363) + (_2364 * _2364)) + (_2366 * _2366));
        float _2379 = (1.0 - (cbSceneParam._m0[77u].w / _2351)) * _2376;
        float _2384 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2386 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2539;
        if (abs((_2365 - _2368) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2539 = ((((_2369 > 0.0) ? exp2(_2384 * _2369) : (2.0 - exp2(_2386 * _2369))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2379;
        }
        else
        {
            float _2499 = 1.0 / cbSceneParam._m0[80u].x;
            float _2500 = isnan(_2370) ? _2369 : (isnan(_2369) ? _2370 : max(_2369, _2370));
            float _2501 = isnan(_2370) ? _2369 : (isnan(_2369) ? _2370 : min(_2369, _2370));
            float _2510 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : min(_2500, 0.0));
            float _2511 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : min(_2501, 0.0));
            _2539 = ((abs(_2376 / _2365) * cbSceneParam._m0[80u].y) * ((((_2510 - _2511) * 2.0) - ((exp2(_2384 * (isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0)))) - exp2(_2384 * (isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0))))) * _2499)) - ((exp2(_2386 * _2510) - exp2(_2386 * _2511)) * _2499))) + (_2379 * cbSceneParam._m0[80u].z);
        }
        vec4 _2541 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2276, _2277, 1.0), 0.0);
        float _2550 = exp2((_2539 * (-1.44269502162933349609375)) * (1.0 - _2541.w));
        float _2551 = log2(_2550);
        float _2567 = log2(_2296);
        _2388 = (exp2(_2567 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2551 * cbSceneParam._m0[78u].x)) * _2541.x) / cbSceneParam._m0[78u].x)) + _2293;
        _2390 = (exp2(_2567 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2551 * cbSceneParam._m0[78u].y)) * _2541.y) / cbSceneParam._m0[78u].y)) + _2294;
        _2392 = (exp2(_2567 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2551 * cbSceneParam._m0[78u].z)) * _2541.z) / cbSceneParam._m0[78u].z)) + _2295;
        _2394 = _2550 * _2296;
    }
    else
    {
        _2388 = _2293;
        _2390 = _2294;
        _2392 = _2295;
        _2394 = _2296;
    }
    float _2406 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2407 = _2406 == 3.0;
    float _2408 = log2(_2394);
    float _2415 = exp2(_2408 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_2238 + ((isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0))) * _498))) + ((_2244 + ((isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))) * _1304)) * cbPerFrame._m0[3u].x));
    float _2416 = exp2(_2408 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_2240 + ((isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0))) * _498))) + ((_2246 + ((isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))) * _1304)) * cbPerFrame._m0[3u].x));
    float _2417 = exp2(_2408 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_2242 + ((isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0))) * _498))) + ((_2248 + ((isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))) * _1304)) * cbPerFrame._m0[3u].x));
    float _2426 = (_2406 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2426 * (_2407 ? _2415 : (_2415 + (cbSceneParam._m0[72u].w * _2388)));
    SV_Target.y = _2426 * (_2407 ? _2416 : (_2416 + (cbSceneParam._m0[72u].w * _2390)));
    SV_Target.z = _2426 * (_2407 ? _2417 : (_2417 + (cbSceneParam._m0[72u].w * _2392)));
    SV_Target.w = cbInstanceData._m0[_2268].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2268].w;
}


