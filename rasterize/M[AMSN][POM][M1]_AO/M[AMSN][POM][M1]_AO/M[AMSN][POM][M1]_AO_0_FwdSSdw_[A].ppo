#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_POM_M1_AO_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_POM_M1_AO_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_POM_M1_AO_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_POM_M1_AO_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _949;
float _3364;
float _3365;
float _3366;
float _3367;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    float _263 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _273 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _263);
    float _274 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _263);
    float _275 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _263);
    float _284 = dot(vec3(_273, _274, _275), vec3(_196, _197, _198));
    float _287 = dot(vec3(_273, _274, _275), vec3(_210, _211, _212));
    float _290 = dot(vec3(_273, _274, _275), vec3(_217, _218, _219));
    float _296 = inversesqrt(dot(vec3(_284, _287, _290), vec3(_284, _287, _290)));
    vec4 _309 = texture(sampler2D(M_AMSN_POM_M1_AO_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _320 = dot(vec4(_309), vec4(1.0, 0.0, 0.0, 0.0)) + (-0.5);
    float _328 = (((cbMtdParam._m0[10u].y * _284) * _296) * _320) + TEXCOORD.x;
    float _329 = (((_287 * cbMtdParam._m0[10u].y) * _296) * _320) + TEXCOORD.y;
    vec4 _341 = texture(sampler2D(M_AMSN_POM_M1_AO_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_328 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_329 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _346 = _341.x * cbMtdParam._m0[9u].x;
    float _347 = _341.y * cbMtdParam._m0[9u].y;
    float _348 = _341.z * cbMtdParam._m0[9u].z;
    vec4 _360 = texture(sampler2D(M_AMSN_POM_M1_AO_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _362 = _360.x;
    vec4 _374 = texture(sampler2D(M_AMSN_POM_M1_AO_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _328) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _329) + cbTextureTilingScale._m0[1u].w));
    float _378 = _374.z;
    float _383 = (_374.x * 2.0) + (-1.0);
    float _385 = (_374.y * 2.0) + (-1.0);
    float _386 = dot(vec2(_383, _385), vec2(_383, _385));
    float _3376 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _391 = sqrt(1.0 - (isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0))));
    float _394 = fma(_391, _217, fma(_385, _210, _383 * _196));
    float _397 = fma(_391, _218, fma(_385, _211, _383 * _197));
    float _400 = fma(_391, _219, fma(_385, _212, _383 * _198));
    float _404 = inversesqrt(dot(vec3(_394, _397, _400), vec3(_394, _397, _400)));
    float _405 = _404 * _394;
    float _406 = _404 * _397;
    float _407 = _404 * _400;
    float _409 = cbMtdParam._m0[10u].x + _374.w;
    float _413 = inversesqrt(dot(vec3(_405, _406, _407), vec3(_405, _406, _407)));
    float _414 = _413 * _405;
    float _415 = _413 * _406;
    float _416 = _413 * _407;
    float _3387 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _417 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
    float _3398 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _3409 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _3420 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _3431 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _3442 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _422 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
    float _438 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _442 = inversesqrt(dot(vec3(_273, _274, _275), vec3(_273, _274, _275)));
    float _443 = _273 * _442;
    float _444 = _274 * _442;
    float _445 = _275 * _442;
    vec4 _450 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _452 = _450.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _629 = sqrt(((_273 * _273) + (_274 * _274)) + (_275 * _275));
        float _635 = (cbMatDynParam._m0[5u].x * _629) + cbMatDynParam._m0[5u].y;
        float _3453 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
        float _636 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _640 = (cbMatDynParam._m0[5u].z * _629) + cbMatDynParam._m0[5u].w;
        float _3464 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))) - _636)) + _636) < ((_452 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _464 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _465 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _485 = fma(_416, cbSceneParam._m0[5u].z, fma(_415, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _414));
    float _488 = fma(_416, cbSceneParam._m0[6u].z, fma(_415, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _414));
    float _491 = fma(_416, cbSceneParam._m0[7u].z, fma(_415, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _414));
    uint _504 = uint(roundEven(NORMAL.w)) * 13u;
    uint _506 = _504 + 9u;
    uint _507 = _506 + uint(cbMatDynParam._m0[0u].w);
    float _513 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0)))) * cbInstanceData._m0[_507].x;
    float _514 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0)))) * cbInstanceData._m0[_507].y;
    float _515 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0)))) * cbInstanceData._m0[_507].z;
    float _3475 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _516 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
    float _3486 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _517 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
    float _3497 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _518 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
    float _519 = 1.0 - _422;
    float _520 = _516 * _519;
    float _521 = _517 * _519;
    float _522 = _518 * _519;
    float _527 = (_516 + (-0.039999999105930328369140625)) * _422;
    float _528 = (_517 + (-0.039999999105930328369140625)) * _422;
    float _529 = (_518 + (-0.039999999105930328369140625)) * _422;
    float _530 = _527 + 0.039999999105930328369140625;
    float _532 = _528 + 0.039999999105930328369140625;
    float _533 = _529 + 0.039999999105930328369140625;
    vec4 _542 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _464, cbSceneParam._m0[86u].y * _465));
    float _546 = ((isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0))) * TEXCOORD.z) * _542.x;
    float _547 = dot(vec3(_414, _415, _416), vec3(_443, _444, _445));
    float _550 = _547 * 2.0;
    float _554 = (_550 * _414) - _443;
    float _555 = (_550 * _415) - _444;
    float _556 = (_550 * _416) - _445;
    float _560 = abs(dot(vec3(_443, _444, _445), vec3(_414, _415, _416)));
    float _3508 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _562 = sqrt(_417);
    float _575 = exp2((_562 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_562 * 3.0));
    float _581 = (1.0 - _575) * ((_562 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _582 = _575 * _562;
    float _610 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _614 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _618 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _948;
    float _950;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _674 = fma(_618, cbModelParam._m0[26u].z, fma(_614, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _610));
        float _678 = fma(_618, cbModelParam._m0[27u].z, fma(_614, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _610));
        float _682 = fma(_618, cbModelParam._m0[28u].z, fma(_614, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _610));
        float _706 = _610 + _414;
        float _707 = _614 + _415;
        float _708 = _618 + _416;
        float _718 = fma(_708, cbModelParam._m0[26u].z, fma(_707, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _706)) - _674;
        float _719 = fma(_708, cbModelParam._m0[27u].z, fma(_707, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _706)) - _678;
        float _720 = fma(_708, cbModelParam._m0[28u].z, fma(_707, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _706)) - _682;
        float _724 = inversesqrt(dot(vec3(_718, _719, _720), vec3(_718, _719, _720)));
        float _737 = ((_724 * _718) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_674 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _738 = ((_724 * _719) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_678 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _739 = ((_724 * _720) / cbModelParam._m0[34u].z) + ((((((_682 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _742 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_737, _738, _739), 0.0);
        vec4 _749 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_737, _738, _739), 0.0);
        vec4 _756 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_737, _738, _739), 0.0);
        vec4 _763 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_737, _738, _739), 0.0);
        float _776 = exp2((_742.w + (-0.5)) * 20.0) * 2.0;
        float _777 = _776 * (_742.x + (-0.5));
        float _778 = _776 * (_742.y + (-0.5));
        float _779 = _776 * (_742.z + (-0.5));
        float _786 = exp2((_749.w + (-0.5)) * 20.0) * 2.0;
        float _787 = _786 * (_749.x + (-0.5));
        float _788 = _786 * (_749.y + (-0.5));
        float _789 = _786 * (_749.z + (-0.5));
        float _796 = exp2((_756.w + (-0.5)) * 20.0) * 2.0;
        float _797 = _796 * (_756.x + (-0.5));
        float _798 = _796 * (_756.y + (-0.5));
        float _799 = _796 * (_756.z + (-0.5));
        float _806 = exp2((_763.w + (-0.5)) * 20.0) * 2.0;
        float _807 = _806 * (_763.x + (-0.5));
        float _808 = _806 * (_763.y + (-0.5));
        float _809 = _806 * (_763.z + (-0.5));
        float _810 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _811 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _812 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _813 = _777 * 0.5;
        float _814 = _787 * 0.5;
        float _815 = _797 * 0.5;
        float _816 = dot(vec3(_813, _814, _815), vec3(_813, _814, _815));
        float _821 = (_816 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_816);
        float _830 = (dot(vec3(_414, _415, _416), vec3(_821 * _813, _821 * _814, _821 * _815)) + 1.0) * 0.5;
        float _3534 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _840 = sqrt(((_814 * _814) + (_813 * _813)) + (_815 * _815)) / (_810 + 9.9999997473787516355514526367188e-06);
        float _3545 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _842 = _841 * 2.0;
        float _846 = (1.0 - _841) / (_841 + 1.0);
        float _3556 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _856 = ((((1.0 - _847) * (_842 + 2.0)) * exp2(log2(isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) * (_842 + 1.0))) + _847) * _810;
        float _857 = _778 * 0.5;
        float _858 = _788 * 0.5;
        float _859 = _798 * 0.5;
        float _860 = dot(vec3(_857, _858, _859), vec3(_857, _858, _859));
        float _865 = (_860 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_860);
        float _873 = (dot(vec3(_414, _415, _416), vec3(_865 * _857, _865 * _858, _865 * _859)) + 1.0) * 0.5;
        float _3567 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _882 = sqrt(((_858 * _858) + (_857 * _857)) + (_859 * _859)) / (_811 + 9.9999997473787516355514526367188e-06);
        float _3578 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _883 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _884 = _883 * 2.0;
        float _888 = (1.0 - _883) / (_883 + 1.0);
        float _3589 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _889 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _898 = ((((1.0 - _889) * (_884 + 2.0)) * exp2(log2(isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) * (_884 + 1.0))) + _889) * _811;
        float _899 = _779 * 0.5;
        float _900 = _789 * 0.5;
        float _901 = _799 * 0.5;
        float _902 = dot(vec3(_899, _900, _901), vec3(_899, _900, _901));
        float _907 = (_902 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_902);
        float _915 = (dot(vec3(_414, _415, _416), vec3(_907 * _899, _907 * _900, _907 * _901)) + 1.0) * 0.5;
        float _3600 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _924 = sqrt(((_900 * _900) + (_899 * _899)) + (_901 * _901)) / (_812 + 9.9999997473787516355514526367188e-06);
        float _3611 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _925 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _926 = _925 * 2.0;
        float _930 = (1.0 - _925) / (_925 + 1.0);
        float _3622 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _931 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _940 = ((((1.0 - _931) * (_926 + 2.0)) * exp2(log2(isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * (_926 + 1.0))) + _931) * _812;
        _948 = _779;
        _950 = _778;
        _951 = _777;
        _952 = _789;
        _953 = _788;
        _954 = _787;
        _955 = _799;
        _956 = _798;
        _957 = _797;
        _958 = _812;
        _959 = _811;
        _960 = _810;
        _961 = cbModelParam._m0[36u].z * (isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0)));
        _962 = cbModelParam._m0[36u].z * (isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0)));
        _963 = cbModelParam._m0[36u].z * (isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0)));
    }
    else
    {
        _948 = _949;
        _950 = _949;
        _951 = _949;
        _952 = _949;
        _953 = _949;
        _954 = _949;
        _955 = _949;
        _956 = _949;
        _957 = _949;
        _958 = _949;
        _959 = _949;
        _960 = _949;
        _961 = 0.0;
        _962 = 0.0;
        _963 = 0.0;
    }
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _992 = fma(_618, cbModelParam._m0[30u].z, fma(_614, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _610));
        float _996 = fma(_618, cbModelParam._m0[31u].z, fma(_614, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _610));
        float _1000 = fma(_618, cbModelParam._m0[32u].z, fma(_614, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _610));
        float _1023 = _610 + _414;
        float _1024 = _614 + _415;
        float _1025 = _618 + _416;
        float _1035 = fma(_1025, cbModelParam._m0[30u].z, fma(_1024, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1023)) - _992;
        float _1036 = fma(_1025, cbModelParam._m0[31u].z, fma(_1024, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1023)) - _996;
        float _1037 = fma(_1025, cbModelParam._m0[32u].z, fma(_1024, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1023)) - _1000;
        float _1041 = inversesqrt(dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037)));
        float _1054 = ((_1041 * _1035) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_992 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1055 = ((_1041 * _1036) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_996 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1056 = ((_1041 * _1037) / cbModelParam._m0[35u].z) + ((((((_1000 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1054, _1055, _1056), 0.0);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1054, _1055, _1056), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1054, _1055, _1056), 0.0);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1054, _1055, _1056), 0.0);
        float _1091 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1058.x + (-0.5));
        float _1093 = _1091 * (_1058.y + (-0.5));
        float _1094 = _1091 * (_1058.z + (-0.5));
        float _1101 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1065.x + (-0.5));
        float _1103 = _1101 * (_1065.y + (-0.5));
        float _1104 = _1101 * (_1065.z + (-0.5));
        float _1111 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1072.x + (-0.5));
        float _1113 = _1111 * (_1072.y + (-0.5));
        float _1114 = _1111 * (_1072.z + (-0.5));
        float _1121 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1079.x + (-0.5));
        float _1123 = _1121 * (_1079.y + (-0.5));
        float _1124 = _1121 * (_1079.z + (-0.5));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1127 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1128 = _1092 * 0.5;
        float _1129 = _1102 * 0.5;
        float _1130 = _1112 * 0.5;
        float _1131 = dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130));
        float _1136 = (_1131 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1131);
        float _1144 = (dot(vec3(_414, _415, _416), vec3(_1136 * _1128, _1136 * _1129, _1136 * _1130)) + 1.0) * 0.5;
        float _3663 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1153 = sqrt(((_1129 * _1129) + (_1128 * _1128)) + (_1130 * _1130)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _3674 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1155 = _1154 * 2.0;
        float _1159 = (1.0 - _1154) / (_1154 + 1.0);
        float _3685 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _1169 = ((((1.0 - _1160) * (_1155 + 2.0)) * exp2(log2(isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * (_1155 + 1.0))) + _1160) * _1125;
        float _1170 = _1093 * 0.5;
        float _1171 = _1103 * 0.5;
        float _1172 = _1113 * 0.5;
        float _1173 = dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172));
        float _1178 = (_1173 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1173);
        float _1186 = (dot(vec3(_414, _415, _416), vec3(_1178 * _1170, _1178 * _1171, _1178 * _1172)) + 1.0) * 0.5;
        float _3696 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1195 = sqrt(((_1171 * _1171) + (_1170 * _1170)) + (_1172 * _1172)) / (_1126 + 9.9999997473787516355514526367188e-06);
        float _3707 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1197 = _1196 * 2.0;
        float _1201 = (1.0 - _1196) / (_1196 + 1.0);
        float _3718 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1211 = ((((1.0 - _1202) * (_1197 + 2.0)) * exp2(log2(isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * (_1197 + 1.0))) + _1202) * _1126;
        float _1212 = _1094 * 0.5;
        float _1213 = _1104 * 0.5;
        float _1214 = _1114 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1228 = (dot(vec3(_414, _415, _416), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1237 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1127 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _3751 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_1239 + 1.0))) + _1244) * _1127;
        _1261 = _1094;
        _1262 = _1093;
        _1263 = _1092;
        _1264 = _1104;
        _1265 = _1103;
        _1266 = _1102;
        _1267 = _1114;
        _1268 = _1113;
        _1269 = _1112;
        _1270 = _1127;
        _1271 = _1126;
        _1272 = _1125;
        _1273 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)));
        _1274 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)));
        _1275 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
    }
    else
    {
        _1261 = _949;
        _1262 = _949;
        _1263 = _949;
        _1264 = _949;
        _1265 = _949;
        _1266 = _949;
        _1267 = _949;
        _1268 = _949;
        _1269 = _949;
        _1270 = _949;
        _1271 = _949;
        _1272 = _949;
        _1273 = 0.0;
        _1274 = 0.0;
        _1275 = 0.0;
    }
    float _1285 = (cbModelParam._m0[1u].x * (_1273 - _961)) + _961;
    float _1286 = (cbModelParam._m0[1u].x * (_1274 - _962)) + _962;
    float _1287 = (cbModelParam._m0[1u].x * (_1275 - _963)) + _963;
    float _1308 = fma(_1287, cbSceneParam._m0[89u].z, fma(_1286, cbSceneParam._m0[89u].y, _1285 * cbSceneParam._m0[89u].x));
    float _1311 = fma(_1287, cbSceneParam._m0[90u].z, fma(_1286, cbSceneParam._m0[90u].y, _1285 * cbSceneParam._m0[90u].x));
    float _1314 = fma(_1287, cbSceneParam._m0[91u].z, fma(_1286, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1285));
    float _1329 = _554 * 0.5;
    float _1330 = _555 * 0.5;
    float _1331 = _556 * 0.5;
    float _1332 = dot(vec4(_1329, _1330, _1331, 1.0), vec4(_1263, _1266, _1269, _1272));
    float _1335 = dot(vec4(_1329, _1330, _1331, 1.0), vec4(_1262, _1265, _1268, _1271));
    float _1338 = dot(vec4(_1329, _1330, _1331, 1.0), vec4(_1261, _1264, _1267, _1270));
    float _1372;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1345 = dot(vec4(_1329, _1330, _1331, 1.0), vec4(_948, _952, _955, _958));
        float _1349 = dot(vec4(_1329, _1330, _1331, 1.0), vec4(_950, _953, _956, _959));
        float _1353 = dot(vec4(_1329, _1330, _1331, 1.0), vec4(_951, _954, _957, _960));
        float _1360 = dot(vec4(cbModelParam._m0[39u]), vec4(_1329, _1330, _1331, 1.0));
        _1372 = dot(vec3(isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)), isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)), isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1360) ? 0.0 : (isnan(0.0) ? _1360 : max(0.0, _1360))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1372 = 1.0;
    }
    float _1383;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1374 = dot(vec4(cbModelParam._m0[40u]), vec4(_1329, _1330, _1331, 1.0));
        _1383 = dot(vec3(isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)), isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)), isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1374) ? 0.0 : (isnan(0.0) ? _1374 : max(0.0, _1374))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1383 = 1.0;
    }
    float _1387 = (_1383 * cbModelParam._m0[1u].x) + (_1372 * (1.0 - cbModelParam._m0[1u].x));
    float _1397 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _417);
    float _1398 = isnan(_1397) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1397 : min(cbModelParam._m0[25u].z, _1397));
    float _1480;
    float _1482;
    float _1484;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1447 = fma(_618, cbModelParam._m0[13u].z, fma(_614, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _610)) + cbModelParam._m0[13u].w;
        float _1451 = fma(_618, cbModelParam._m0[14u].z, fma(_614, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _610)) + cbModelParam._m0[14u].w;
        float _1455 = fma(_618, cbModelParam._m0[15u].z, fma(_614, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _610)) + cbModelParam._m0[15u].w;
        float _1458 = fma(_556, cbModelParam._m0[13u].z, fma(_555, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _554));
        float _1461 = fma(_556, cbModelParam._m0[14u].z, fma(_555, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _554));
        float _1464 = fma(_556, cbModelParam._m0[15u].z, fma(_555, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _554));
        float _1492;
        if (_1458 > 0.0)
        {
            _1492 = abs((1.0 - _1447) / _1458);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1458 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1447 + 1.0) / _1458);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1492 = frontier_phi_19_17_ladder;
        }
        float _1721;
        if (_1461 > 0.0)
        {
            _1721 = abs((1.0 - _1451) / _1461);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1461 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1451 + 1.0) / _1461);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1721 = frontier_phi_28_24_ladder;
        }
        float _1978;
        if (_1464 > 0.0)
        {
            _1978 = abs((1.0 - _1455) / _1464);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1464 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1455 + 1.0) / _1464);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1978 = frontier_phi_40_35_ladder;
        }
        float _1980 = isnan(_1721) ? _1492 : (isnan(_1492) ? _1721 : min(_1492, _1721));
        float _1981 = isnan(_1978) ? _1980 : (isnan(_1980) ? _1978 : min(_1980, _1978));
        float _1985 = (_1981 * _1458) + _1447;
        float _1986 = (_1981 * _1461) + _1451;
        float _1987 = (_1981 * _1464) + _1455;
        float _1988 = _1981 * 9.9999997473787516355514526367188e-05;
        float _1990 = (-1.0) - _1988;
        float _1992 = _1988 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1987 > _1992) || ((_1987 < _1990) || ((_1986 > _1992) || ((_1986 < _1990) || ((_1985 < _1990) || (_1985 > _1992))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2115 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1987, cbModelParam._m0[9u].z, fma(_1986, cbModelParam._m0[9u].y, _1985 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1987, cbModelParam._m0[10u].z, fma(_1986, cbModelParam._m0[10u].y, _1985 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1987, cbModelParam._m0[11u].z, fma(_1986, cbModelParam._m0[11u].y, _1985 * cbModelParam._m0[11u].x))), _1398);
            frontier_phi_18_40_ladder = _2115.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2115.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2115.x * cbModelParam._m0[1u].y;
        }
        _1480 = frontier_phi_18_40_ladder_2;
        _1482 = frontier_phi_18_40_ladder_1;
        _1484 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1468 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_554, _555, _556), _1398);
        _1480 = _1468.x * cbModelParam._m0[1u].y;
        _1482 = _1468.y * cbModelParam._m0[1u].y;
        _1484 = _1468.z * cbModelParam._m0[1u].y;
    }
    float _1488 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _417);
    float _1489 = isnan(_1488) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1488 : min(cbModelParam._m0[25u].w, _1488));
    float _1582;
    float _1584;
    float _1586;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1546 = fma(_618, cbModelParam._m0[21u].z, fma(_614, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _610)) + cbModelParam._m0[21u].w;
        float _1550 = fma(_618, cbModelParam._m0[22u].z, fma(_614, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _610)) + cbModelParam._m0[22u].w;
        float _1554 = fma(_618, cbModelParam._m0[23u].z, fma(_614, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _610)) + cbModelParam._m0[23u].w;
        float _1557 = fma(_556, cbModelParam._m0[21u].z, fma(_555, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _554));
        float _1560 = fma(_556, cbModelParam._m0[22u].z, fma(_555, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _554));
        float _1563 = fma(_556, cbModelParam._m0[23u].z, fma(_555, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _554));
        float _1726;
        if (_1557 > 0.0)
        {
            _1726 = abs((1.0 - _1546) / _1557);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1557 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1546 + 1.0) / _1557);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1726 = frontier_phi_30_26_ladder;
        }
        float _2005;
        if (_1560 > 0.0)
        {
            _2005 = abs((1.0 - _1550) / _1560);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1560 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1550 + 1.0) / _1560);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2005 = frontier_phi_42_37_ladder;
        }
        float _2218;
        if (_1563 > 0.0)
        {
            _2218 = abs((1.0 - _1554) / _1563);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1563 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1554 + 1.0) / _1563);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2218 = frontier_phi_51_48_ladder;
        }
        float _2220 = isnan(_2005) ? _1726 : (isnan(_1726) ? _2005 : min(_1726, _2005));
        float _2221 = isnan(_2218) ? _2220 : (isnan(_2220) ? _2218 : min(_2220, _2218));
        float _2225 = (_2221 * _1557) + _1546;
        float _2226 = (_2221 * _1560) + _1550;
        float _2227 = (_2221 * _1563) + _1554;
        float _2228 = _2221 * 9.9999997473787516355514526367188e-05;
        float _2229 = (-1.0) - _2228;
        float _2231 = _2228 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2227 > _2231) || ((_2227 < _2229) || ((_2226 > _2231) || ((_2226 < _2229) || ((_2225 < _2229) || (_2225 > _2231))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2425 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2227, cbModelParam._m0[17u].z, fma(_2226, cbModelParam._m0[17u].y, _2225 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2227, cbModelParam._m0[18u].z, fma(_2226, cbModelParam._m0[18u].y, _2225 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2227, cbModelParam._m0[19u].z, fma(_2226, cbModelParam._m0[19u].y, _2225 * cbModelParam._m0[19u].x))), _1489);
            frontier_phi_27_51_ladder = _2425.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2425.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2425.x * cbModelParam._m0[1u].z;
        }
        _1582 = frontier_phi_27_51_ladder_2;
        _1584 = frontier_phi_27_51_ladder_1;
        _1586 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1566 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_554, _555, _556), _1489);
        _1582 = _1566.x * cbModelParam._m0[1u].z;
        _1584 = _1566.y * cbModelParam._m0[1u].z;
        _1586 = _1566.z * cbModelParam._m0[1u].z;
    }
    float _1599 = (((_581 * _530) + _582) * _546) * ((cbModelParam._m0[1u].w * (_1582 - _1480)) + _1480);
    float _1601 = (((_581 * _532) + _582) * _546) * ((cbModelParam._m0[1u].w * (_1584 - _1482)) + _1482);
    float _1603 = (((_581 * _533) + _582) * _546) * ((cbModelParam._m0[1u].w * (_1586 - _1484)) + _1484);
    float _1606 = fma(_1603, cbSceneParam._m0[89u].z, fma(_1601, cbSceneParam._m0[89u].y, _1599 * cbSceneParam._m0[89u].x));
    float _1609 = fma(_1603, cbSceneParam._m0[90u].z, fma(_1601, cbSceneParam._m0[90u].y, _1599 * cbSceneParam._m0[90u].x));
    float _1612 = fma(_1603, cbSceneParam._m0[91u].z, fma(_1601, cbSceneParam._m0[91u].y, _1599 * cbSceneParam._m0[91u].x));
    vec4 _1620 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_464, _465));
    float _1622 = _1620.w;
    float _1634 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1622);
    float _1635 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1622);
    float _1636 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1622);
    uvec4 _1640 = floatBitsToUint(cbInstanceData._m0[_504 + 5u]);
    uint _1642 = _1640.x * 14u;
    uint _1643 = _1642 + 13u;
    float _1650 = _546 + (-1.0);
    float _1655 = (cbLight._m0[_1643].x * _1650) + 1.0;
    float _1656 = (cbLight._m0[_1643].y * _1650) + 1.0;
    float _1657 = (cbLight._m0[_1643].z * _1650) + 1.0;
    float _1658 = (cbLight._m0[_1643].w * _1650) + 1.0;
    uint _1659 = _1642 + 5u;
    float _1665 = isnan(1.0) ? _1656 : (isnan(_1656) ? 1.0 : min(_1656, 1.0));
    uint _1669 = _1642 + 4u;
    float _1679 = isnan(1.0) ? _1655 : (isnan(_1655) ? 1.0 : min(_1655, 1.0));
    uint _1683 = _1642 | 1u;
    float _1694 = dot(vec3(cbLight._m0[_1642].xyz), vec3(_414, _415, _416));
    float _1697 = dot(vec3(cbLight._m0[_1683].xyz), vec3(_414, _415, _416));
    float _3887 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
    float _3898 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
    float _1702 = (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * 0.3183098733425140380859375;
    float _1704 = (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * 0.3183098733425140380859375;
    float _1711 = ((cbLight._m0[_1659].x * _1665) * _1704) + (((cbLight._m0[_1669].x * _1634) * _1679) * _1702);
    float _1712 = ((_1665 * cbLight._m0[_1659].y) * _1704) + (((cbLight._m0[_1669].y * _1635) * _1679) * _1702);
    float _1713 = ((_1665 * cbLight._m0[_1659].z) * _1704) + (((cbLight._m0[_1669].z * _1636) * _1679) * _1702);
    uvec4 _1718 = floatBitsToUint(cbLight._m0[_1642 + 12u]);
    bool _1720 = _1718.x == 0u;
    float _1731;
    float _1733;
    float _1735;
    if (_1720)
    {
        _1731 = _1711;
        _1733 = _1712;
        _1735 = _1713;
    }
    else
    {
        uint _1739 = _1642 + 6u;
        float _1755 = (dot(vec3(cbLight._m0[_1642 + 2u].xyz), vec3(_414, _415, _416)) * 0.5) + 0.5;
        float _1756 = _1755 * _1755;
        float _3909 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1757 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1758 = isnan(1.0) ? _1657 : (isnan(_1657) ? 1.0 : min(_1657, 1.0));
        _1731 = (((cbLight._m0[_1739].x * 0.3183098733425140380859375) * _1757) * _1758) + _1711;
        _1733 = (((cbLight._m0[_1739].y * 0.3183098733425140380859375) * _1757) * _1758) + _1712;
        _1735 = (((cbLight._m0[_1739].z * 0.3183098733425140380859375) * _1757) * _1758) + _1713;
    }
    bool _1738 = _1718.y == 0u;
    float _1776;
    float _1778;
    float _1780;
    if (_1738)
    {
        _1776 = _1731;
        _1778 = _1733;
        _1780 = _1735;
    }
    else
    {
        uint _1949 = _1642 + 7u;
        float _1965 = (dot(vec3(cbLight._m0[_1642 + 3u].xyz), vec3(_414, _415, _416)) * 0.5) + 0.5;
        float _1966 = _1965 * _1965;
        float _3925 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1967 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1968 = isnan(1.0) ? _1658 : (isnan(_1658) ? 1.0 : min(_1658, 1.0));
        _1776 = (((cbLight._m0[_1949].x * 0.3183098733425140380859375) * _1967) * _1968) + _1731;
        _1778 = (((cbLight._m0[_1949].y * 0.3183098733425140380859375) * _1967) * _1968) + _1733;
        _1780 = (((cbLight._m0[_1949].z * 0.3183098733425140380859375) * _1967) * _1968) + _1735;
    }
    uint _1783 = _1642 + 8u;
    float _1796 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1642].w)) * _417) * 0.949999988079071044921875);
    float _1797 = _1796 * _1796;
    float _1798 = cbLight._m0[_1642].x + _443;
    float _1799 = cbLight._m0[_1642].y + _444;
    float _1800 = cbLight._m0[_1642].z + _445;
    float _1804 = inversesqrt(dot(vec3(_1798, _1799, _1800), vec3(_1798, _1799, _1800)));
    float _1805 = _1804 * _1798;
    float _1806 = _1804 * _1799;
    float _1807 = _1804 * _1800;
    float _1808 = dot(vec3(_414, _415, _416), vec3(cbLight._m0[_1642].xyz));
    float _3941 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1811 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _3952 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _1812 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _1813 = dot(vec3(_414, _415, _416), vec3(_1805, _1806, _1807));
    float _3963 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _1816 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _1817 = dot(vec3(cbLight._m0[_1642].xyz), vec3(_1805, _1806, _1807));
    float _3974 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _1821 = _1797 * _1797;
    float _1825 = ((_1816 * _1816) * (_1821 + (-1.0))) + 1.0;
    float _1833 = exp2(log2(1.0 - (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0)))) * 5.0);
    float _1834 = 0.959999978542327880859375 - _527;
    float _1836 = 0.959999978542327880859375 - _528;
    float _1837 = 0.959999978542327880859375 - _529;
    float _1844 = 1.0 - _1797;
    float _1855 = (0.5 / (((_1812 * ((_1811 * _1844) + _1797)) + 9.9999999392252902907785028219223e-09) + (((_1812 * _1844) + _1797) * _1811))) * _1811;
    float _3985 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1857 = (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1821 / ((_1825 * _1825) * 3.141590118408203125));
    uint _1871 = _1642 + 9u;
    float _1882 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1683].w)) * _417) * 0.949999988079071044921875);
    float _1883 = _1882 * _1882;
    float _1884 = cbLight._m0[_1683].x + _443;
    float _1885 = cbLight._m0[_1683].y + _444;
    float _1886 = cbLight._m0[_1683].z + _445;
    float _1890 = inversesqrt(dot(vec3(_1884, _1885, _1886), vec3(_1884, _1885, _1886)));
    float _1891 = _1890 * _1884;
    float _1892 = _1890 * _1885;
    float _1893 = _1890 * _1886;
    float _1894 = dot(vec3(_414, _415, _416), vec3(cbLight._m0[_1683].xyz));
    float _3996 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _1897 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _1898 = dot(vec3(_414, _415, _416), vec3(_1891, _1892, _1893));
    float _4007 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _1901 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _1902 = dot(vec3(cbLight._m0[_1683].xyz), vec3(_1891, _1892, _1893));
    float _4018 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1906 = _1883 * _1883;
    float _1910 = ((_1901 * _1901) * (_1906 + (-1.0))) + 1.0;
    float _1917 = exp2(log2(1.0 - (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0)))) * 5.0);
    float _1924 = 1.0 - _1883;
    float _1934 = (0.5 / (((_1812 * ((_1897 * _1924) + _1883)) + 9.9999999392252902907785028219223e-09) + (((_1812 * _1924) + _1883) * _1897))) * _1897;
    float _4029 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
    float _1936 = (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_1906 / ((_1910 * _1910) * 3.141590118408203125));
    float _1946 = (((((_1917 * _1834) + _530) * cbLight._m0[_1871].x) * _1936) * _1665) + ((((cbLight._m0[_1783].x * _1634) * ((_1833 * _1834) + _530)) * _1857) * _1679);
    float _1947 = (((((_1917 * _1836) + _532) * cbLight._m0[_1871].y) * _1936) * _1665) + ((((cbLight._m0[_1783].y * _1635) * ((_1833 * _1836) + _532)) * _1857) * _1679);
    float _1948 = (((((_1917 * _1837) + _533) * cbLight._m0[_1871].z) * _1936) * _1665) + ((((cbLight._m0[_1783].z * _1636) * ((_1833 * _1837) + _533)) * _1857) * _1679);
    float _2010;
    float _2012;
    float _2014;
    if (_1720)
    {
        _2010 = _1946;
        _2012 = _1947;
        _2014 = _1948;
    }
    else
    {
        uint _2016 = _1642 + 2u;
        uint _2020 = _1642 + 10u;
        float _2034 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2016].w)) * _417) * 0.949999988079071044921875);
        float _2035 = _2034 * _2034;
        float _2036 = cbLight._m0[_2016].x + _443;
        float _2037 = cbLight._m0[_2016].y + _444;
        float _2038 = cbLight._m0[_2016].z + _445;
        float _2042 = inversesqrt(dot(vec3(_2036, _2037, _2038), vec3(_2036, _2037, _2038)));
        float _2043 = _2042 * _2036;
        float _2044 = _2042 * _2037;
        float _2045 = _2042 * _2038;
        float _2046 = dot(vec3(_414, _415, _416), vec3(cbLight._m0[_2016].xyz));
        float _4040 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
        float _2049 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _2050 = dot(vec3(_414, _415, _416), vec3(_2043, _2044, _2045));
        float _4051 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
        float _2053 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _2054 = dot(vec3(cbLight._m0[_2016].xyz), vec3(_2043, _2044, _2045));
        float _4062 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2058 = _2035 * _2035;
        float _2062 = ((_2053 * _2053) * (_2058 + (-1.0))) + 1.0;
        float _2069 = exp2(log2(1.0 - (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) * 5.0);
        float _2076 = 1.0 - _2035;
        float _2086 = (0.5 / (((_1812 * ((_2049 * _2076) + _2035)) + 9.9999999392252902907785028219223e-09) + (((_1812 * _2076) + _2035) * _2049))) * _2049;
        float _4073 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
        float _2088 = (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_2058 / ((_2062 * _2062) * 3.141590118408203125));
        float _2089 = isnan(1.0) ? _1657 : (isnan(_1657) ? 1.0 : min(_1657, 1.0));
        _2010 = (((((_2069 * _1834) + _530) * cbLight._m0[_2020].x) * _2088) * _2089) + _1946;
        _2012 = (((((_2069 * _1836) + _532) * cbLight._m0[_2020].y) * _2088) * _2089) + _1947;
        _2014 = (((((_2069 * _1837) + _533) * cbLight._m0[_2020].z) * _2088) * _2089) + _1948;
    }
    float _2124;
    float _2126;
    float _2128;
    if (_1738)
    {
        _2124 = _2010;
        _2126 = _2012;
        _2128 = _2014;
    }
    else
    {
        uint _2135 = _1642 + 3u;
        uint _2139 = _1642 + 11u;
        float _2153 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2135].w)) * _417) * 0.949999988079071044921875);
        float _2154 = _2153 * _2153;
        float _2155 = cbLight._m0[_2135].x + _443;
        float _2156 = cbLight._m0[_2135].y + _444;
        float _2157 = cbLight._m0[_2135].z + _445;
        float _2161 = inversesqrt(dot(vec3(_2155, _2156, _2157), vec3(_2155, _2156, _2157)));
        float _2162 = _2161 * _2155;
        float _2163 = _2161 * _2156;
        float _2164 = _2161 * _2157;
        float _2165 = dot(vec3(_414, _415, _416), vec3(cbLight._m0[_2135].xyz));
        float _4089 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2168 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _2169 = dot(vec3(_414, _415, _416), vec3(_2162, _2163, _2164));
        float _4100 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        float _2172 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _2173 = dot(vec3(cbLight._m0[_2135].xyz), vec3(_2162, _2163, _2164));
        float _4111 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2177 = _2154 * _2154;
        float _2181 = ((_2172 * _2172) * (_2177 + (-1.0))) + 1.0;
        float _2188 = exp2(log2(1.0 - (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) * 5.0);
        float _2195 = 1.0 - _2154;
        float _2205 = (0.5 / (((_1812 * ((_2168 * _2195) + _2154)) + 9.9999999392252902907785028219223e-09) + (((_1812 * _2195) + _2154) * _2168))) * _2168;
        float _4122 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
        float _2207 = (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_2177 / ((_2181 * _2181) * 3.141590118408203125));
        float _2208 = isnan(1.0) ? _1658 : (isnan(_1658) ? 1.0 : min(_1658, 1.0));
        _2124 = (((((_2188 * _1834) + _530) * cbLight._m0[_2139].x) * _2207) * _2208) + _2010;
        _2126 = (((((_2188 * _1836) + _532) * cbLight._m0[_2139].y) * _2207) * _2208) + _2012;
        _2128 = (((((_2188 * _1837) + _533) * cbLight._m0[_2139].z) * _2207) * _2208) + _2014;
    }
    float _2342;
    float _2344;
    float _2346;
    float _2348;
    float _2350;
    float _2352;
    if (_1640.y == 0u)
    {
        float _2283 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2284 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2283;
        float _2285 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2283;
        float _2286 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2283;
        uvec4 _2298 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2299 = _2298.x;
        uint _2310 = uint((float(_2298.y) * floor(float(uint(cbSceneParam._m0[85u].y * _465) / _2299))) + floor(float(uint(cbSceneParam._m0[85u].x * _464) / _2299)));
        float _2320 = (log2(_2286 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2321 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        uint _2324 = uint(isnan(14.0) ? _2321 : (isnan(_2321) ? 14.0 : min(_2321, 14.0)));
        uvec4 _2329 = texelFetch(g_lightClusterGridBuffer, int(((_2324 << 2u) + (_2310 << 6u)) >> 2u));
        uint _2330 = _2329.x;
        uint _2331 = _2298.z;
        float _2430;
        float _2432;
        float _2434;
        float _2436;
        float _2438;
        float _2440;
        if (((((1u << ((_2331 >> 4u) & 15u)) + 4294967295u) & _2330) == 0u) || ((_2331 & 240u) == 0u))
        {
            _2430 = 0.0;
            _2432 = 0.0;
            _2434 = 0.0;
            _2436 = 0.0;
            _2438 = 0.0;
            _2440 = 0.0;
        }
        else
        {
            float _2431;
            float _2433;
            float _2435;
            float _2437;
            float _2439;
            float _2441;
            float _2582 = 0.0;
            float _2583 = 0.0;
            float _2584 = 0.0;
            float _2585 = 0.0;
            float _2586 = 0.0;
            float _2587 = 0.0;
            uint _2588 = 0u;
            uint _2597;
            bool _2598;
            for (;;)
            {
                _2597 = texelFetch(g_lightClassification, int((((_2324 << 5u) + (_2310 << 9u)) + (_2588 << 2u)) >> 2u)).x;
                _2598 = _2597 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2598)
                {
                    frontier_phi_68_pred = _2584;
                    frontier_phi_68_pred_1 = _2587;
                    frontier_phi_68_pred_2 = _2586;
                    frontier_phi_68_pred_3 = _2585;
                    frontier_phi_68_pred_4 = _2583;
                    frontier_phi_68_pred_5 = _2582;
                }
                else
                {
                    float _2727;
                    float _2728;
                    float _2729;
                    float _2730;
                    float _2731;
                    float _2732;
                    uint _2733;
                    _2727 = _2582;
                    _2728 = _2583;
                    _2729 = _2584;
                    _2730 = _2585;
                    _2731 = _2586;
                    _2732 = _2587;
                    _2733 = _2597;
                    float _2654;
                    float _2655;
                    float _2656;
                    float _2657;
                    float _2658;
                    float _2659;
                    for (;;)
                    {
                        uint _2737 = uint(findLSB(_2733)) + (_2588 << 5u);
                        uint _2734 = (_2733 + 4294967295u) & _2733;
                        uint _2739 = _2737 * 48u;
                        vec4 _2753 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2739)).x, texelFetch(g_PointLightRenderingBuffer, int(_2739 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2739 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2739 + 3u)).x));
                        uint _2759 = (_2737 * 48u) + 4u;
                        vec4 _2772 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2759)).x, texelFetch(g_PointLightRenderingBuffer, int(_2759 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2759 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2759 + 3u)).x));
                        uint _2778 = (_2737 * 48u) + 8u;
                        vec3 _2789 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2778)).x, texelFetch(g_PointLightRenderingBuffer, int(_2778 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2778 + 2u)).x));
                        float _2793 = _2753.x - _2284;
                        float _2794 = _2753.y - _2285;
                        float _2795 = _2753.z - _2286;
                        float _2796 = dot(vec3(_2793, _2794, _2795), vec3(_2793, _2794, _2795));
                        float _2799 = inversesqrt(_2796);
                        float _2800 = _2799 * _2793;
                        float _2801 = _2799 * _2794;
                        float _2802 = _2799 * _2795;
                        float _2803 = dot(vec3(_485, _488, _491), vec3(_2800, _2801, _2802));
                        float _2808 = 1.0 - (_2796 * _2753.w);
                        float _4148 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
                        float _2809 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
                        float _2810 = sqrt(_2796) * _2772.w;
                        float _2813 = 1.39999997615814208984375 / (_2810 + 1.39999997615814208984375);
                        float _2814 = _2813 * _2813;
                        float _2817 = ((1.0 - _2814) * _2803) + _2814;
                        float _2820 = _2810 * _2810;
                        float _2824 = ((isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0))) * _2809) / ((_2820 * 0.699999988079071044921875) + 1.0);
                        float _2828 = (-0.0) - _2284;
                        float _2829 = (-0.0) - _2285;
                        float _2830 = (-0.0) - _2286;
                        float _2834 = inversesqrt(dot(vec3(_2828, _2829, _2830), vec3(_2828, _2829, _2830)));
                        float _2835 = _2834 * _2828;
                        float _2836 = _2834 * _2829;
                        float _2837 = _2834 * _2830;
                        float _2845 = exp2(log2(1.0 / ((_2820 * 3.5) + 5.0)) * 0.25);
                        float _2846 = 1.0 - _562;
                        float _2853 = sqrt(1.0 - ((1.0 - (_2846 * _2846)) * (1.0 - (_2845 * _2845))));
                        float _2854 = _2853 * _2853;
                        float _2855 = _2854 * _2854;
                        float _2856 = _2835 + _2800;
                        float _2857 = _2836 + _2801;
                        float _2858 = _2837 + _2802;
                        float _2862 = inversesqrt(dot(vec3(_2856, _2857, _2858), vec3(_2856, _2857, _2858)));
                        float _2866 = dot(vec3(_485, _488, _491), vec3(_2835, _2836, _2837));
                        float _4164 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
                        float _2869 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
                        float _2870 = dot(vec3(_485, _488, _491), vec3(_2862 * _2856, _2862 * _2857, _2862 * _2858));
                        float _4175 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
                        float _2873 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
                        float _2877 = ((_2873 * _2873) * (_2855 + (-1.0))) + 1.0;
                        float _2878 = _2813 * _2854;
                        float _2879 = _2878 * _2878;
                        float _2882 = ((1.0 - _2879) * _2803) + _2879;
                        float _4186 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
                        float _2883 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
                        float _2884 = 1.0 - _2854;
                        float _2894 = (0.5 / (((_2883 * ((_2869 * _2884) + _2854)) + 9.9999999392252902907785028219223e-09) + (((_2883 * _2884) + _2854) * _2869))) * _2883;
                        float _4197 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
                        float _2905 = (((_2855 * 3.1415927410125732421875) * (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) / ((_2877 * _2877) * ((_2820 * 2.1991131305694580078125) + 3.141590118408203125))) * _2809;
                        _2657 = (_2824 * _2772.x) + _2730;
                        _2658 = (_2824 * _2772.y) + _2731;
                        _2659 = (_2824 * _2772.z) + _2732;
                        _2654 = (_2905 * _2789.x) + _2727;
                        _2655 = (_2905 * _2789.y) + _2728;
                        _2656 = (_2905 * _2789.z) + _2729;
                        if (_2734 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2727 = _2654;
                            _2728 = _2655;
                            _2729 = _2656;
                            _2730 = _2657;
                            _2731 = _2658;
                            _2732 = _2659;
                            _2733 = _2734;
                        }
                    }
                    frontier_phi_68_pred = _2656;
                    frontier_phi_68_pred_1 = _2659;
                    frontier_phi_68_pred_2 = _2658;
                    frontier_phi_68_pred_3 = _2657;
                    frontier_phi_68_pred_4 = _2655;
                    frontier_phi_68_pred_5 = _2654;
                }
                _2435 = frontier_phi_68_pred;
                _2441 = frontier_phi_68_pred_1;
                _2439 = frontier_phi_68_pred_2;
                _2437 = frontier_phi_68_pred_3;
                _2433 = frontier_phi_68_pred_4;
                _2431 = frontier_phi_68_pred_5;
                uint _2589 = _2588 + 1u;
                if (_2589 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2582 = _2431;
                    _2583 = _2433;
                    _2584 = _2435;
                    _2585 = _2437;
                    _2586 = _2439;
                    _2587 = _2441;
                    _2588 = _2589;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2430 = _2431;
            _2432 = _2433;
            _2434 = _2435;
            _2436 = _2437;
            _2438 = _2439;
            _2440 = _2441;
        }
        uvec4 _2444 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2445 = _2444.z;
        uint _2447 = (_2445 >> 8u) & 15u;
        float _2550;
        float _2552;
        float _2554;
        float _2556;
        float _2558;
        float _2560;
        if (((4294967295u << _2447) & _2330) == 0u)
        {
            _2550 = _2430;
            _2552 = _2432;
            _2554 = _2434;
            _2556 = _2436;
            _2558 = _2438;
            _2560 = _2440;
        }
        else
        {
            float _2575 = inversesqrt(dot(vec3(_2284, _2285, _2286), vec3(_2284, _2285, _2286)));
            float _2576 = _2575 * _2284;
            float _2577 = _2575 * _2285;
            float _2578 = _2575 * _2286;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2447 < ((_2445 >> 12u) & 15u))
            {
                float _2551;
                float _2553;
                float _2555;
                float _2557;
                float _2559;
                float _2561;
                float _2710 = _2430;
                float _2711 = _2432;
                float _2712 = _2434;
                float _2713 = _2436;
                float _2714 = _2438;
                float _2715 = _2440;
                uint _2716 = _2447;
                uint _2725;
                bool _2726;
                for (;;)
                {
                    _2725 = texelFetch(g_lightClassification, int((((_2324 << 5u) + (_2310 << 9u)) + (_2716 << 2u)) >> 2u)).x;
                    _2726 = _2725 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2726)
                    {
                        frontier_phi_79_pred = _2715;
                        frontier_phi_79_pred_1 = _2714;
                        frontier_phi_79_pred_2 = _2713;
                        frontier_phi_79_pred_3 = _2712;
                        frontier_phi_79_pred_4 = _2711;
                        frontier_phi_79_pred_5 = _2710;
                    }
                    else
                    {
                        float _2919;
                        float _2920;
                        float _2921;
                        float _2922;
                        float _2923;
                        float _2924;
                        float _3215;
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _2932 = _2710;
                        float _2933 = _2711;
                        float _2934 = _2712;
                        float _2935 = _2713;
                        float _2936 = _2714;
                        float _2937 = _2715;
                        uint _2938 = _2725;
                        uint _2939;
                        vec4 _2964;
                        float _2965;
                        vec4 _2980;
                        vec3 _2992;
                        vec4 _3008;
                        vec4 _3024;
                        float _3071;
                        bool _3072;
                        for (;;)
                        {
                            uint _2949 = ((_2716 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2938));
                            _2939 = (_2938 + 4294967295u) & _2938;
                            uint _2951 = _2949 * 40u;
                            _2964 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2951)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 3u)).x));
                            _2965 = _2964.w;
                            uint _2967 = (_2949 * 40u) + 4u;
                            _2980 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2967)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 3u)).x));
                            uint _2982 = (_2949 * 40u) + 8u;
                            _2992 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2982)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 2u)).x));
                            uint _2995 = (_2949 * 40u) + 16u;
                            _3008 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2995)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 3u)).x));
                            uint _3011 = (_2949 * 40u) + 20u;
                            _3024 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3011)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 3u)).x));
                            uint _3027 = (_2949 * 40u) + 24u;
                            vec4 _3040 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3027)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 3u)).x));
                            uint _3046 = (_2949 * 40u) + 28u;
                            vec4 _3059 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 3u)).x));
                            _3071 = fma(_2286, _3059.z, fma(_2285, _3059.y, _3059.x * _2284)) + _3059.w;
                            _3072 = !((fma(_2286, _3040.z, fma(_2285, _3040.y, _3040.x * _2284)) + _3040.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3072)
                            {
                                float _3099 = _2964.x - _2284;
                                float _3100 = _2964.y - _2285;
                                float _3101 = _2964.z - _2286;
                                float _3102 = dot(vec3(_3099, _3100, _3101), vec3(_3099, _3100, _3101));
                                float _3105 = inversesqrt(_3102);
                                float _3106 = _3105 * _3099;
                                float _3107 = _3105 * _3100;
                                float _3108 = _3105 * _3101;
                                float _3112 = 1.0 - (_3102 / (_2965 * _2965));
                                float _4208 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                                float _3113 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                                float _3117 = sqrt(_3102) * _2980.w;
                                float _3119 = 1.39999997615814208984375 / (_3117 + 1.39999997615814208984375);
                                float _3120 = _3119 * _3119;
                                float _3123 = ((1.0 - _3120) * dot(vec3(_3106, _3107, _3108), vec3(_485, _488, _491))) + _3120;
                                float _3126 = _3117 * _3117;
                                float _3130 = (fma(_2286, _3008.z, fma(_2285, _3008.y, _3008.x * _2284)) + _3008.w) / _3071;
                                float _3131 = (fma(_2286, _3024.z, fma(_2285, _3024.y, _3024.x * _2284)) + _3024.w) / _3071;
                                float _3135 = 1.0 - dot(vec2(_3130, _3131), vec2(_3130, _3131));
                                float _4224 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                                float _3136 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
                                float _3137 = _3136 * (((isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0))) * _3113) / ((_3126 * 0.699999988079071044921875) + 1.0));
                                float _3149 = exp2(log2(1.0 / ((_3126 * 3.5) + 5.0)) * 0.25);
                                float _3150 = 1.0 - _562;
                                float _3157 = sqrt(1.0 - ((1.0 - (_3150 * _3150)) * (1.0 - (_3149 * _3149))));
                                float _3158 = _3157 * _3157;
                                float _3159 = _3158 * _3158;
                                float _3160 = _3106 - _2576;
                                float _3161 = _3107 - _2577;
                                float _3162 = _3108 - _2578;
                                float _3166 = inversesqrt(dot(vec3(_3160, _3161, _3162), vec3(_3160, _3161, _3162)));
                                float _3170 = dot(vec3(_485, _488, _491), vec3((-0.0) - _2576, (-0.0) - _2577, (-0.0) - _2578));
                                float _4235 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                                float _3173 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
                                float _3174 = dot(vec3(_485, _488, _491), vec3(_3166 * _3160, _3166 * _3161, _3166 * _3162));
                                float _4246 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                                float _3177 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
                                float _3181 = ((_3177 * _3177) * (_3159 + (-1.0))) + 1.0;
                                float _3182 = _3119 * _3158;
                                float _3183 = _3182 * _3182;
                                float _3189 = ((1.0 - _3183) * dot(vec3(_485, _488, _491), vec3(_3106, _3107, _3108))) + _3183;
                                float _4257 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                                float _3190 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
                                float _3191 = 1.0 - _3158;
                                float _3201 = (0.5 / (((_3190 * ((_3173 * _3191) + _3158)) + 9.9999999392252902907785028219223e-09) + (((_3190 * _3191) + _3158) * _3173))) * _3190;
                                float _4268 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                                float _3211 = (_3136 * _3113) * (((_3159 * 3.1415927410125732421875) * (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0)))) / ((_3181 * _3181) * ((_3126 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3137 * _2980.z;
                                frontier_phi_85_pred_1 = _3137 * _2980.y;
                                frontier_phi_85_pred_2 = _3137 * _2980.x;
                                frontier_phi_85_pred_3 = _3211 * _2992.z;
                                frontier_phi_85_pred_4 = _3211 * _2992.y;
                                frontier_phi_85_pred_5 = _3211 * _2992.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3220 = frontier_phi_85_pred;
                            _3219 = frontier_phi_85_pred_1;
                            _3218 = frontier_phi_85_pred_2;
                            _3217 = frontier_phi_85_pred_3;
                            _3216 = frontier_phi_85_pred_4;
                            _3215 = frontier_phi_85_pred_5;
                            _2922 = _3218 + _2935;
                            _2923 = _3219 + _2936;
                            _2924 = _3220 + _2937;
                            _2919 = _3215 + _2932;
                            _2920 = _3216 + _2933;
                            _2921 = _3217 + _2934;
                            if (_2939 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2932 = _2919;
                                _2933 = _2920;
                                _2934 = _2921;
                                _2935 = _2922;
                                _2936 = _2923;
                                _2937 = _2924;
                                _2938 = _2939;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2924;
                        frontier_phi_79_pred_1 = _2923;
                        frontier_phi_79_pred_2 = _2922;
                        frontier_phi_79_pred_3 = _2921;
                        frontier_phi_79_pred_4 = _2920;
                        frontier_phi_79_pred_5 = _2919;
                    }
                    _2561 = frontier_phi_79_pred;
                    _2559 = frontier_phi_79_pred_1;
                    _2557 = frontier_phi_79_pred_2;
                    _2555 = frontier_phi_79_pred_3;
                    _2553 = frontier_phi_79_pred_4;
                    _2551 = frontier_phi_79_pred_5;
                    uint _2717 = _2716 + 1u;
                    if (_2717 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2710 = _2551;
                        _2711 = _2553;
                        _2712 = _2555;
                        _2713 = _2557;
                        _2714 = _2559;
                        _2715 = _2561;
                        _2716 = _2717;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2557;
                frontier_phi_60_61_ladder_1 = _2561;
                frontier_phi_60_61_ladder_2 = _2559;
                frontier_phi_60_61_ladder_3 = _2555;
                frontier_phi_60_61_ladder_4 = _2553;
                frontier_phi_60_61_ladder_5 = _2551;
            }
            else
            {
                frontier_phi_60_61_ladder = _2436;
                frontier_phi_60_61_ladder_1 = _2440;
                frontier_phi_60_61_ladder_2 = _2438;
                frontier_phi_60_61_ladder_3 = _2434;
                frontier_phi_60_61_ladder_4 = _2432;
                frontier_phi_60_61_ladder_5 = _2430;
            }
            _2550 = frontier_phi_60_61_ladder_5;
            _2552 = frontier_phi_60_61_ladder_4;
            _2554 = frontier_phi_60_61_ladder_3;
            _2556 = frontier_phi_60_61_ladder;
            _2558 = frontier_phi_60_61_ladder_2;
            _2560 = frontier_phi_60_61_ladder_1;
        }
        float _2565 = isnan(1.0) ? _546 : (isnan(_546) ? 1.0 : min(_546, 1.0));
        _2342 = (_2565 * _2556) + _1776;
        _2344 = (_2565 * _2558) + _1778;
        _2346 = (_2565 * _2560) + _1780;
        _2348 = ((_2550 * _530) * _2565) + _2124;
        _2350 = ((_2552 * _532) * _2565) + _2126;
        _2352 = ((_2554 * _533) * _2565) + _2128;
    }
    else
    {
        _2342 = _1776;
        _2344 = _1778;
        _2346 = _1780;
        _2348 = _2124;
        _2350 = _2126;
        _2352 = _2128;
    }
    float _4284 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _4295 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _4306 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _2369 = ((isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_2342 + ((isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0))) * _546))) + ((_2348 + ((isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))) * _1387)) * cbPerFrame._m0[3u].x);
    float _2370 = ((isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_2344 + ((isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0))) * _546))) + ((_2350 + ((isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))) * _1387)) * cbPerFrame._m0[3u].x);
    float _2371 = ((isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_2346 + ((isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0))) * _546))) + ((_2352 + ((isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))) * _1387)) * cbPerFrame._m0[3u].x);
    uint _2372 = _504 + 6u;
    float _2380 = _464 / cbSceneParam._m0[86u].x;
    float _2381 = _465 / cbSceneParam._m0[86u].y;
    vec4 _2395 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2380, _2381, (log2((isnan(cbSceneParam._m0[77u].w) ? _438 : (isnan(_438) ? cbSceneParam._m0[77u].w : min(_438, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2397 = _2395.x;
    float _2398 = _2395.y;
    float _2399 = _2395.z;
    float _2400 = _2395.w;
    float _2492;
    float _2494;
    float _2496;
    float _2498;
    if (_438 > cbSceneParam._m0[78u].w)
    {
        float _2455 = isnan(_438) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _438 : min(cbSceneParam._m0[80u].w, _438));
        float _2456 = _2455 / _438;
        float _2467 = _2456 * _273;
        float _2468 = _274 * _2456;
        float _2469 = (-0.0) - _2468;
        float _2470 = _2456 * _275;
        float _2472 = (cbSceneParam._m0[77u].w * _2469) / _2455;
        float _2473 = _2472 + cbSceneParam._m0[79u].w;
        float _2474 = cbSceneParam._m0[79u].w - _2468;
        float _2480 = sqrt(((_2467 * _2467) + (_2468 * _2468)) + (_2470 * _2470));
        float _2483 = (1.0 - (cbSceneParam._m0[77u].w / _2455)) * _2480;
        float _2488 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2490 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2667;
        if (abs((_2469 - _2472) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2667 = ((((_2473 > 0.0) ? exp2(_2488 * _2473) : (2.0 - exp2(_2490 * _2473))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2483;
        }
        else
        {
            float _2611 = 1.0 / cbSceneParam._m0[80u].x;
            float _2612 = isnan(_2474) ? _2473 : (isnan(_2473) ? _2474 : max(_2473, _2474));
            float _2613 = isnan(_2474) ? _2473 : (isnan(_2473) ? _2474 : min(_2473, _2474));
            float _2622 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : min(_2612, 0.0));
            float _2623 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : min(_2613, 0.0));
            _2667 = ((abs(_2480 / _2469) * cbSceneParam._m0[80u].y) * ((((_2622 - _2623) * 2.0) - ((exp2(_2488 * (isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0)))) - exp2(_2488 * (isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0))))) * _2611)) - ((exp2(_2490 * _2622) - exp2(_2490 * _2623)) * _2611))) + (_2483 * cbSceneParam._m0[80u].z);
        }
        vec4 _2669 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2380, _2381, 1.0), 0.0);
        float _2678 = exp2((_2667 * (-1.44269502162933349609375)) * (1.0 - _2669.w));
        float _2679 = log2(_2678);
        float _2695 = log2(_2400);
        _2492 = (exp2(_2695 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2679 * cbSceneParam._m0[78u].x)) * _2669.x) / cbSceneParam._m0[78u].x)) + _2397;
        _2494 = (exp2(_2695 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2679 * cbSceneParam._m0[78u].y)) * _2669.y) / cbSceneParam._m0[78u].y)) + _2398;
        _2496 = (exp2(_2695 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2679 * cbSceneParam._m0[78u].z)) * _2669.z) / cbSceneParam._m0[78u].z)) + _2399;
        _2498 = _2678 * _2400;
    }
    else
    {
        _2492 = _2397;
        _2494 = _2398;
        _2496 = _2399;
        _2498 = _2400;
    }
    bool _2705;
    vec4 _2508;
    vec4 _2530;
    float _2532;
    float _2536;
    float _2537;
    float _2538;
    float _2539;
    bool _2549;
    for (;;)
    {
        _2508 = cbMatDynParam._m0[0u];
        float _2510 = roundEven(_2508.y);
        bool _2511 = _2510 == 3.0;
        float _2512 = log2(_2498);
        float _2519 = exp2(_2512 * cbSceneParam._m0[78u].x) * _2369;
        float _2520 = exp2(_2512 * cbSceneParam._m0[78u].y) * _2370;
        float _2521 = exp2(_2512 * cbSceneParam._m0[78u].z) * _2371;
        float _2528 = _452 + (-0.5);
        _2530 = cbMtdParam._m0[1u];
        _2532 = _2530.y * _2528;
        float _2535 = (_2510 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2536 = _2535 * (_2511 ? _2519 : (_2519 + (cbSceneParam._m0[72u].w * _2492)));
        _2537 = _2535 * (_2511 ? _2520 : (_2520 + (cbSceneParam._m0[72u].w * _2494)));
        _2538 = _2535 * (_2511 ? _2521 : (_2521 + (cbSceneParam._m0[72u].w * _2496)));
        _2539 = _2528 * 0.999000012874603271484375;
        _2549 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2549)
        {
            if ((cbInstanceData._m0[_504 + 7u].x + _2539) < 0.5)
            {
                _2705 = true;
                break;
            }
        }
        uint _2646 = _506 + uint(_2508.w);
        if ((cbInstanceData._m0[_2646].w < 1.0) && ((cbInstanceData._m0[_2646].w + _2539) < 0.5))
        {
            _2705 = true;
            break;
        }
        if ((_2532 + 1.0) < _2530.x)
        {
            _2705 = true;
            break;
        }
        _2705 = false;
        break;
    }
    float _2910;
    if (_2705)
    {
        discard_state = true;
        _2910 = 0.0;
    }
    else
    {
        _2910 = cbInstanceData._m0[_2372].w;
    }
    SV_Target.x = _2536;
    SV_Target.y = _2537;
    SV_Target.z = _2538;
    SV_Target.w = _2910;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2372].w;
    discard_exit();
}


