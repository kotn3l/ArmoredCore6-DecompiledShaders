#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_POM_M1_AO_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_POM_M1_AO_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_POM_M1_AO_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_POM_M1_AO_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _947;
float _3338;
float _3339;
float _3340;
float _3341;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    float _282 = dot(vec3(_271, _272, _273), vec3(_194, _195, _196));
    float _285 = dot(vec3(_271, _272, _273), vec3(_208, _209, _210));
    float _288 = dot(vec3(_271, _272, _273), vec3(_215, _216, _217));
    float _294 = inversesqrt(dot(vec3(_282, _285, _288), vec3(_282, _285, _288)));
    vec4 _307 = texture(sampler2D(M_AMSN_POM_M1_AO_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _318 = dot(vec4(_307), vec4(1.0, 0.0, 0.0, 0.0)) + (-0.5);
    float _326 = (((cbMtdParam._m0[10u].y * _282) * _294) * _318) + TEXCOORD.x;
    float _327 = (((_285 * cbMtdParam._m0[10u].y) * _294) * _318) + TEXCOORD.y;
    vec4 _339 = texture(sampler2D(M_AMSN_POM_M1_AO_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_326 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_327 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _344 = _339.x * cbMtdParam._m0[9u].x;
    float _345 = _339.y * cbMtdParam._m0[9u].y;
    float _346 = _339.z * cbMtdParam._m0[9u].z;
    vec4 _358 = texture(sampler2D(M_AMSN_POM_M1_AO_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _360 = _358.x;
    vec4 _372 = texture(sampler2D(M_AMSN_POM_M1_AO_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _326) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _327) + cbTextureTilingScale._m0[1u].w));
    float _376 = _372.z;
    float _381 = (_372.x * 2.0) + (-1.0);
    float _383 = (_372.y * 2.0) + (-1.0);
    float _384 = dot(vec2(_381, _383), vec2(_381, _383));
    float _3350 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _389 = sqrt(1.0 - (isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0))));
    float _392 = fma(_389, _215, fma(_383, _208, _381 * _194));
    float _395 = fma(_389, _216, fma(_383, _209, _381 * _195));
    float _398 = fma(_389, _217, fma(_383, _210, _381 * _196));
    float _402 = inversesqrt(dot(vec3(_392, _395, _398), vec3(_392, _395, _398)));
    float _403 = _402 * _392;
    float _404 = _402 * _395;
    float _405 = _402 * _398;
    float _407 = cbMtdParam._m0[10u].x + _372.w;
    float _411 = inversesqrt(dot(vec3(_403, _404, _405), vec3(_403, _404, _405)));
    float _412 = _411 * _403;
    float _413 = _411 * _404;
    float _414 = _411 * _405;
    float _3361 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _415 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
    float _3372 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _3383 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _3394 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _3405 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _3416 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _420 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
    float _436 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _440 = inversesqrt(dot(vec3(_271, _272, _273), vec3(_271, _272, _273)));
    float _441 = _271 * _440;
    float _442 = _272 * _440;
    float _443 = _273 * _440;
    vec4 _448 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _450 = _448.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _627 = sqrt(((_271 * _271) + (_272 * _272)) + (_273 * _273));
        float _633 = (cbMatDynParam._m0[5u].x * _627) + cbMatDynParam._m0[5u].y;
        float _3427 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
        float _634 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _638 = (cbMatDynParam._m0[5u].z * _627) + cbMatDynParam._m0[5u].w;
        float _3438 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0))) - _634)) + _634) < ((_450 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _462 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _463 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _483 = fma(_414, cbSceneParam._m0[5u].z, fma(_413, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _412));
    float _486 = fma(_414, cbSceneParam._m0[6u].z, fma(_413, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _412));
    float _489 = fma(_414, cbSceneParam._m0[7u].z, fma(_413, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _412));
    uint _502 = uint(roundEven(NORMAL.w)) * 13u;
    uint _504 = _502 + 9u;
    uint _505 = _504 + uint(cbMatDynParam._m0[0u].w);
    float _511 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0)))) * cbInstanceData._m0[_505].x;
    float _512 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0)))) * cbInstanceData._m0[_505].y;
    float _513 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0)))) * cbInstanceData._m0[_505].z;
    float _3449 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _514 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
    float _3460 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _515 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
    float _3471 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _516 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
    float _517 = 1.0 - _420;
    float _518 = _514 * _517;
    float _519 = _515 * _517;
    float _520 = _516 * _517;
    float _525 = (_514 + (-0.039999999105930328369140625)) * _420;
    float _526 = (_515 + (-0.039999999105930328369140625)) * _420;
    float _527 = (_516 + (-0.039999999105930328369140625)) * _420;
    float _528 = _525 + 0.039999999105930328369140625;
    float _530 = _526 + 0.039999999105930328369140625;
    float _531 = _527 + 0.039999999105930328369140625;
    vec4 _540 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _462, cbSceneParam._m0[86u].y * _463));
    float _544 = ((isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0))) * TEXCOORD.z) * _540.x;
    float _545 = dot(vec3(_412, _413, _414), vec3(_441, _442, _443));
    float _548 = _545 * 2.0;
    float _552 = (_548 * _412) - _441;
    float _553 = (_548 * _413) - _442;
    float _554 = (_548 * _414) - _443;
    float _558 = abs(dot(vec3(_441, _442, _443), vec3(_412, _413, _414)));
    float _3482 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _560 = sqrt(_415);
    float _573 = exp2((_560 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_560 * 3.0));
    float _579 = (1.0 - _573) * ((_560 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _580 = _573 * _560;
    float _608 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _612 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _616 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _946;
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _672 = fma(_616, cbModelParam._m0[26u].z, fma(_612, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _608));
        float _676 = fma(_616, cbModelParam._m0[27u].z, fma(_612, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _608));
        float _680 = fma(_616, cbModelParam._m0[28u].z, fma(_612, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _608));
        float _704 = _608 + _412;
        float _705 = _612 + _413;
        float _706 = _616 + _414;
        float _716 = fma(_706, cbModelParam._m0[26u].z, fma(_705, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _704)) - _672;
        float _717 = fma(_706, cbModelParam._m0[27u].z, fma(_705, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _704)) - _676;
        float _718 = fma(_706, cbModelParam._m0[28u].z, fma(_705, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _704)) - _680;
        float _722 = inversesqrt(dot(vec3(_716, _717, _718), vec3(_716, _717, _718)));
        float _735 = ((_722 * _716) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_672 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _736 = ((_722 * _717) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_676 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _737 = ((_722 * _718) / cbModelParam._m0[34u].z) + ((((((_680 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _740 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_735, _736, _737), 0.0);
        vec4 _747 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_735, _736, _737), 0.0);
        vec4 _754 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_735, _736, _737), 0.0);
        vec4 _761 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_735, _736, _737), 0.0);
        float _774 = exp2((_740.w + (-0.5)) * 20.0) * 2.0;
        float _775 = _774 * (_740.x + (-0.5));
        float _776 = _774 * (_740.y + (-0.5));
        float _777 = _774 * (_740.z + (-0.5));
        float _784 = exp2((_747.w + (-0.5)) * 20.0) * 2.0;
        float _785 = _784 * (_747.x + (-0.5));
        float _786 = _784 * (_747.y + (-0.5));
        float _787 = _784 * (_747.z + (-0.5));
        float _794 = exp2((_754.w + (-0.5)) * 20.0) * 2.0;
        float _795 = _794 * (_754.x + (-0.5));
        float _796 = _794 * (_754.y + (-0.5));
        float _797 = _794 * (_754.z + (-0.5));
        float _804 = exp2((_761.w + (-0.5)) * 20.0) * 2.0;
        float _805 = _804 * (_761.x + (-0.5));
        float _806 = _804 * (_761.y + (-0.5));
        float _807 = _804 * (_761.z + (-0.5));
        float _808 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _809 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _810 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _811 = _775 * 0.5;
        float _812 = _785 * 0.5;
        float _813 = _795 * 0.5;
        float _814 = dot(vec3(_811, _812, _813), vec3(_811, _812, _813));
        float _819 = (_814 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_814);
        float _828 = (dot(vec3(_412, _413, _414), vec3(_819 * _811, _819 * _812, _819 * _813)) + 1.0) * 0.5;
        float _3508 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _838 = sqrt(((_812 * _812) + (_811 * _811)) + (_813 * _813)) / (_808 + 9.9999997473787516355514526367188e-06);
        float _3519 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _839 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _840 = _839 * 2.0;
        float _844 = (1.0 - _839) / (_839 + 1.0);
        float _3530 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _845 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
        float _854 = ((((1.0 - _845) * (_840 + 2.0)) * exp2(log2(isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * (_840 + 1.0))) + _845) * _808;
        float _855 = _776 * 0.5;
        float _856 = _786 * 0.5;
        float _857 = _796 * 0.5;
        float _858 = dot(vec3(_855, _856, _857), vec3(_855, _856, _857));
        float _863 = (_858 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_858);
        float _871 = (dot(vec3(_412, _413, _414), vec3(_863 * _855, _863 * _856, _863 * _857)) + 1.0) * 0.5;
        float _3541 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _880 = sqrt(((_856 * _856) + (_855 * _855)) + (_857 * _857)) / (_809 + 9.9999997473787516355514526367188e-06);
        float _3552 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _881 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _882 = _881 * 2.0;
        float _886 = (1.0 - _881) / (_881 + 1.0);
        float _3563 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _887 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _896 = ((((1.0 - _887) * (_882 + 2.0)) * exp2(log2(isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))) * (_882 + 1.0))) + _887) * _809;
        float _897 = _777 * 0.5;
        float _898 = _787 * 0.5;
        float _899 = _797 * 0.5;
        float _900 = dot(vec3(_897, _898, _899), vec3(_897, _898, _899));
        float _905 = (_900 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_900);
        float _913 = (dot(vec3(_412, _413, _414), vec3(_905 * _897, _905 * _898, _905 * _899)) + 1.0) * 0.5;
        float _3574 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _922 = sqrt(((_898 * _898) + (_897 * _897)) + (_899 * _899)) / (_810 + 9.9999997473787516355514526367188e-06);
        float _3585 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _923 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _924 = _923 * 2.0;
        float _928 = (1.0 - _923) / (_923 + 1.0);
        float _3596 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _929 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _938 = ((((1.0 - _929) * (_924 + 2.0)) * exp2(log2(isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) * (_924 + 1.0))) + _929) * _810;
        _946 = _777;
        _948 = _776;
        _949 = _775;
        _950 = _787;
        _951 = _786;
        _952 = _785;
        _953 = _797;
        _954 = _796;
        _955 = _795;
        _956 = _810;
        _957 = _809;
        _958 = _808;
        _959 = cbModelParam._m0[36u].z * (isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0)));
        _960 = cbModelParam._m0[36u].z * (isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0)));
        _961 = cbModelParam._m0[36u].z * (isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0)));
    }
    else
    {
        _946 = _947;
        _948 = _947;
        _949 = _947;
        _950 = _947;
        _951 = _947;
        _952 = _947;
        _953 = _947;
        _954 = _947;
        _955 = _947;
        _956 = _947;
        _957 = _947;
        _958 = _947;
        _959 = 0.0;
        _960 = 0.0;
        _961 = 0.0;
    }
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _990 = fma(_616, cbModelParam._m0[30u].z, fma(_612, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _608));
        float _994 = fma(_616, cbModelParam._m0[31u].z, fma(_612, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _608));
        float _998 = fma(_616, cbModelParam._m0[32u].z, fma(_612, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _608));
        float _1021 = _608 + _412;
        float _1022 = _612 + _413;
        float _1023 = _616 + _414;
        float _1033 = fma(_1023, cbModelParam._m0[30u].z, fma(_1022, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1021)) - _990;
        float _1034 = fma(_1023, cbModelParam._m0[31u].z, fma(_1022, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1021)) - _994;
        float _1035 = fma(_1023, cbModelParam._m0[32u].z, fma(_1022, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1021)) - _998;
        float _1039 = inversesqrt(dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035)));
        float _1052 = ((_1039 * _1033) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_990 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1053 = ((_1039 * _1034) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_994 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1054 = ((_1039 * _1035) / cbModelParam._m0[35u].z) + ((((((_998 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        float _1089 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1056.x + (-0.5));
        float _1091 = _1089 * (_1056.y + (-0.5));
        float _1092 = _1089 * (_1056.z + (-0.5));
        float _1099 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1063.x + (-0.5));
        float _1101 = _1099 * (_1063.y + (-0.5));
        float _1102 = _1099 * (_1063.z + (-0.5));
        float _1109 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1070.x + (-0.5));
        float _1111 = _1109 * (_1070.y + (-0.5));
        float _1112 = _1109 * (_1070.z + (-0.5));
        float _1119 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1077.x + (-0.5));
        float _1121 = _1119 * (_1077.y + (-0.5));
        float _1122 = _1119 * (_1077.z + (-0.5));
        float _1123 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = _1090 * 0.5;
        float _1127 = _1100 * 0.5;
        float _1128 = _1110 * 0.5;
        float _1129 = dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128));
        float _1134 = (_1129 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1129);
        float _1142 = (dot(vec3(_412, _413, _414), vec3(_1134 * _1126, _1134 * _1127, _1134 * _1128)) + 1.0) * 0.5;
        float _3637 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1151 = sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128)) / (_1123 + 9.9999997473787516355514526367188e-06);
        float _3648 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _3659 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * (_1153 + 1.0))) + _1158) * _1123;
        float _1168 = _1091 * 0.5;
        float _1169 = _1101 * 0.5;
        float _1170 = _1111 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1184 = (dot(vec3(_412, _413, _414), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _3670 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1193 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1124 + 9.9999997473787516355514526367188e-06);
        float _3681 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _3692 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * (_1195 + 1.0))) + _1200) * _1124;
        float _1210 = _1092 * 0.5;
        float _1211 = _1102 * 0.5;
        float _1212 = _1112 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_412, _413, _414), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _3703 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _3714 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _3725 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_1237 + 1.0))) + _1242) * _1125;
        _1259 = _1092;
        _1260 = _1091;
        _1261 = _1090;
        _1262 = _1102;
        _1263 = _1101;
        _1264 = _1100;
        _1265 = _1112;
        _1266 = _1111;
        _1267 = _1110;
        _1268 = _1125;
        _1269 = _1124;
        _1270 = _1123;
        _1271 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
        _1272 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
        _1273 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
    }
    else
    {
        _1259 = _947;
        _1260 = _947;
        _1261 = _947;
        _1262 = _947;
        _1263 = _947;
        _1264 = _947;
        _1265 = _947;
        _1266 = _947;
        _1267 = _947;
        _1268 = _947;
        _1269 = _947;
        _1270 = _947;
        _1271 = 0.0;
        _1272 = 0.0;
        _1273 = 0.0;
    }
    float _1283 = (cbModelParam._m0[1u].x * (_1271 - _959)) + _959;
    float _1284 = (cbModelParam._m0[1u].x * (_1272 - _960)) + _960;
    float _1285 = (cbModelParam._m0[1u].x * (_1273 - _961)) + _961;
    float _1306 = fma(_1285, cbSceneParam._m0[89u].z, fma(_1284, cbSceneParam._m0[89u].y, _1283 * cbSceneParam._m0[89u].x));
    float _1309 = fma(_1285, cbSceneParam._m0[90u].z, fma(_1284, cbSceneParam._m0[90u].y, _1283 * cbSceneParam._m0[90u].x));
    float _1312 = fma(_1285, cbSceneParam._m0[91u].z, fma(_1284, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1283));
    float _1327 = _552 * 0.5;
    float _1328 = _553 * 0.5;
    float _1329 = _554 * 0.5;
    float _1330 = dot(vec4(_1327, _1328, _1329, 1.0), vec4(_1261, _1264, _1267, _1270));
    float _1333 = dot(vec4(_1327, _1328, _1329, 1.0), vec4(_1260, _1263, _1266, _1269));
    float _1336 = dot(vec4(_1327, _1328, _1329, 1.0), vec4(_1259, _1262, _1265, _1268));
    float _1370;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1343 = dot(vec4(_1327, _1328, _1329, 1.0), vec4(_946, _950, _953, _956));
        float _1347 = dot(vec4(_1327, _1328, _1329, 1.0), vec4(_948, _951, _954, _957));
        float _1351 = dot(vec4(_1327, _1328, _1329, 1.0), vec4(_949, _952, _955, _958));
        float _1358 = dot(vec4(cbModelParam._m0[39u]), vec4(_1327, _1328, _1329, 1.0));
        _1370 = dot(vec3(isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)), isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)), isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1358) ? 0.0 : (isnan(0.0) ? _1358 : max(0.0, _1358))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1370 = 1.0;
    }
    float _1381;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1372 = dot(vec4(cbModelParam._m0[40u]), vec4(_1327, _1328, _1329, 1.0));
        _1381 = dot(vec3(isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)), isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)), isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1372) ? 0.0 : (isnan(0.0) ? _1372 : max(0.0, _1372))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1381 = 1.0;
    }
    float _1385 = (_1381 * cbModelParam._m0[1u].x) + (_1370 * (1.0 - cbModelParam._m0[1u].x));
    float _1395 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _415);
    float _1396 = isnan(_1395) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1395 : min(cbModelParam._m0[25u].z, _1395));
    float _1478;
    float _1480;
    float _1482;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1445 = fma(_616, cbModelParam._m0[13u].z, fma(_612, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _608)) + cbModelParam._m0[13u].w;
        float _1449 = fma(_616, cbModelParam._m0[14u].z, fma(_612, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _608)) + cbModelParam._m0[14u].w;
        float _1453 = fma(_616, cbModelParam._m0[15u].z, fma(_612, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _608)) + cbModelParam._m0[15u].w;
        float _1456 = fma(_554, cbModelParam._m0[13u].z, fma(_553, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _552));
        float _1459 = fma(_554, cbModelParam._m0[14u].z, fma(_553, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _552));
        float _1462 = fma(_554, cbModelParam._m0[15u].z, fma(_553, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _552));
        float _1490;
        if (_1456 > 0.0)
        {
            _1490 = abs((1.0 - _1445) / _1456);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1456 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1445 + 1.0) / _1456);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1490 = frontier_phi_19_17_ladder;
        }
        float _1698;
        if (_1459 > 0.0)
        {
            _1698 = abs((1.0 - _1449) / _1459);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1459 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1449 + 1.0) / _1459);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1698 = frontier_phi_28_24_ladder;
        }
        float _1952;
        if (_1462 > 0.0)
        {
            _1952 = abs((1.0 - _1453) / _1462);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1462 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1453 + 1.0) / _1462);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1952 = frontier_phi_40_35_ladder;
        }
        float _1954 = isnan(_1698) ? _1490 : (isnan(_1490) ? _1698 : min(_1490, _1698));
        float _1955 = isnan(_1952) ? _1954 : (isnan(_1954) ? _1952 : min(_1954, _1952));
        float _1959 = (_1955 * _1456) + _1445;
        float _1960 = (_1955 * _1459) + _1449;
        float _1961 = (_1955 * _1462) + _1453;
        float _1962 = _1955 * 9.9999997473787516355514526367188e-05;
        float _1964 = (-1.0) - _1962;
        float _1966 = _1962 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1961 > _1966) || ((_1961 < _1964) || ((_1960 > _1966) || ((_1960 < _1964) || ((_1959 < _1964) || (_1959 > _1966))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2089 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1961, cbModelParam._m0[9u].z, fma(_1960, cbModelParam._m0[9u].y, _1959 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1961, cbModelParam._m0[10u].z, fma(_1960, cbModelParam._m0[10u].y, _1959 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1961, cbModelParam._m0[11u].z, fma(_1960, cbModelParam._m0[11u].y, _1959 * cbModelParam._m0[11u].x))), _1396);
            frontier_phi_18_40_ladder = _2089.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2089.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2089.x * cbModelParam._m0[1u].y;
        }
        _1478 = frontier_phi_18_40_ladder_2;
        _1480 = frontier_phi_18_40_ladder_1;
        _1482 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1466 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_552, _553, _554), _1396);
        _1478 = _1466.x * cbModelParam._m0[1u].y;
        _1480 = _1466.y * cbModelParam._m0[1u].y;
        _1482 = _1466.z * cbModelParam._m0[1u].y;
    }
    float _1486 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _415);
    float _1487 = isnan(_1486) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1486 : min(cbModelParam._m0[25u].w, _1486));
    float _1580;
    float _1582;
    float _1584;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1544 = fma(_616, cbModelParam._m0[21u].z, fma(_612, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _608)) + cbModelParam._m0[21u].w;
        float _1548 = fma(_616, cbModelParam._m0[22u].z, fma(_612, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _608)) + cbModelParam._m0[22u].w;
        float _1552 = fma(_616, cbModelParam._m0[23u].z, fma(_612, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _608)) + cbModelParam._m0[23u].w;
        float _1555 = fma(_554, cbModelParam._m0[21u].z, fma(_553, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _552));
        float _1558 = fma(_554, cbModelParam._m0[22u].z, fma(_553, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _552));
        float _1561 = fma(_554, cbModelParam._m0[23u].z, fma(_553, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _552));
        float _1703;
        if (_1555 > 0.0)
        {
            _1703 = abs((1.0 - _1544) / _1555);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1544 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1703 = frontier_phi_30_26_ladder;
        }
        float _1979;
        if (_1558 > 0.0)
        {
            _1979 = abs((1.0 - _1548) / _1558);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1558 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1548 + 1.0) / _1558);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1979 = frontier_phi_42_37_ladder;
        }
        float _2192;
        if (_1561 > 0.0)
        {
            _2192 = abs((1.0 - _1552) / _1561);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1561 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1552 + 1.0) / _1561);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2192 = frontier_phi_51_48_ladder;
        }
        float _2194 = isnan(_1979) ? _1703 : (isnan(_1703) ? _1979 : min(_1703, _1979));
        float _2195 = isnan(_2192) ? _2194 : (isnan(_2194) ? _2192 : min(_2194, _2192));
        float _2199 = (_2195 * _1555) + _1544;
        float _2200 = (_2195 * _1558) + _1548;
        float _2201 = (_2195 * _1561) + _1552;
        float _2202 = _2195 * 9.9999997473787516355514526367188e-05;
        float _2203 = (-1.0) - _2202;
        float _2205 = _2202 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2201 > _2205) || ((_2201 < _2203) || ((_2200 > _2205) || ((_2200 < _2203) || ((_2199 < _2203) || (_2199 > _2205))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2399 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2201, cbModelParam._m0[17u].z, fma(_2200, cbModelParam._m0[17u].y, _2199 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2201, cbModelParam._m0[18u].z, fma(_2200, cbModelParam._m0[18u].y, _2199 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2201, cbModelParam._m0[19u].z, fma(_2200, cbModelParam._m0[19u].y, _2199 * cbModelParam._m0[19u].x))), _1487);
            frontier_phi_27_51_ladder = _2399.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2399.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2399.x * cbModelParam._m0[1u].z;
        }
        _1580 = frontier_phi_27_51_ladder_2;
        _1582 = frontier_phi_27_51_ladder_1;
        _1584 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1564 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_552, _553, _554), _1487);
        _1580 = _1564.x * cbModelParam._m0[1u].z;
        _1582 = _1564.y * cbModelParam._m0[1u].z;
        _1584 = _1564.z * cbModelParam._m0[1u].z;
    }
    float _1597 = (((_579 * _528) + _580) * _544) * ((cbModelParam._m0[1u].w * (_1580 - _1478)) + _1478);
    float _1599 = (((_579 * _530) + _580) * _544) * ((cbModelParam._m0[1u].w * (_1582 - _1480)) + _1480);
    float _1601 = (((_579 * _531) + _580) * _544) * ((cbModelParam._m0[1u].w * (_1584 - _1482)) + _1482);
    float _1604 = fma(_1601, cbSceneParam._m0[89u].z, fma(_1599, cbSceneParam._m0[89u].y, _1597 * cbSceneParam._m0[89u].x));
    float _1607 = fma(_1601, cbSceneParam._m0[90u].z, fma(_1599, cbSceneParam._m0[90u].y, _1597 * cbSceneParam._m0[90u].x));
    float _1610 = fma(_1601, cbSceneParam._m0[91u].z, fma(_1599, cbSceneParam._m0[91u].y, _1597 * cbSceneParam._m0[91u].x));
    uvec4 _1620 = floatBitsToUint(cbInstanceData._m0[_502 + 5u]);
    uint _1622 = _1620.x * 14u;
    uint _1623 = _1622 + 13u;
    float _1630 = _544 + (-1.0);
    float _1635 = (cbLight._m0[_1623].x * _1630) + 1.0;
    float _1636 = (cbLight._m0[_1623].y * _1630) + 1.0;
    float _1637 = (cbLight._m0[_1623].z * _1630) + 1.0;
    float _1638 = (cbLight._m0[_1623].w * _1630) + 1.0;
    uint _1639 = _1622 + 5u;
    float _1645 = isnan(1.0) ? _1636 : (isnan(_1636) ? 1.0 : min(_1636, 1.0));
    uint _1649 = _1622 + 4u;
    float _1656 = isnan(1.0) ? _1635 : (isnan(_1635) ? 1.0 : min(_1635, 1.0));
    uint _1660 = _1622 | 1u;
    float _1671 = dot(vec3(cbLight._m0[_1622].xyz), vec3(_412, _413, _414));
    float _1674 = dot(vec3(cbLight._m0[_1660].xyz), vec3(_412, _413, _414));
    float _3861 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
    float _3872 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
    float _1679 = (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * 0.3183098733425140380859375;
    float _1681 = (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * 0.3183098733425140380859375;
    float _1688 = ((cbLight._m0[_1639].x * _1645) * _1681) + ((cbLight._m0[_1649].x * _1656) * _1679);
    float _1689 = ((_1645 * cbLight._m0[_1639].y) * _1681) + ((_1656 * cbLight._m0[_1649].y) * _1679);
    float _1690 = ((_1645 * cbLight._m0[_1639].z) * _1681) + ((_1656 * cbLight._m0[_1649].z) * _1679);
    uvec4 _1695 = floatBitsToUint(cbLight._m0[_1622 + 12u]);
    bool _1697 = _1695.x == 0u;
    float _1708;
    float _1710;
    float _1712;
    if (_1697)
    {
        _1708 = _1688;
        _1710 = _1689;
        _1712 = _1690;
    }
    else
    {
        uint _1716 = _1622 + 6u;
        float _1732 = (dot(vec3(cbLight._m0[_1622 + 2u].xyz), vec3(_412, _413, _414)) * 0.5) + 0.5;
        float _1733 = _1732 * _1732;
        float _3883 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1735 = isnan(1.0) ? _1637 : (isnan(_1637) ? 1.0 : min(_1637, 1.0));
        _1708 = (((cbLight._m0[_1716].x * 0.3183098733425140380859375) * _1734) * _1735) + _1688;
        _1710 = (((cbLight._m0[_1716].y * 0.3183098733425140380859375) * _1734) * _1735) + _1689;
        _1712 = (((cbLight._m0[_1716].z * 0.3183098733425140380859375) * _1734) * _1735) + _1690;
    }
    bool _1715 = _1695.y == 0u;
    float _1753;
    float _1755;
    float _1757;
    if (_1715)
    {
        _1753 = _1708;
        _1755 = _1710;
        _1757 = _1712;
    }
    else
    {
        uint _1923 = _1622 + 7u;
        float _1939 = (dot(vec3(cbLight._m0[_1622 + 3u].xyz), vec3(_412, _413, _414)) * 0.5) + 0.5;
        float _1940 = _1939 * _1939;
        float _3899 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
        float _1941 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1942 = isnan(1.0) ? _1638 : (isnan(_1638) ? 1.0 : min(_1638, 1.0));
        _1753 = (((cbLight._m0[_1923].x * 0.3183098733425140380859375) * _1941) * _1942) + _1708;
        _1755 = (((cbLight._m0[_1923].y * 0.3183098733425140380859375) * _1941) * _1942) + _1710;
        _1757 = (((cbLight._m0[_1923].z * 0.3183098733425140380859375) * _1941) * _1942) + _1712;
    }
    uint _1760 = _1622 + 8u;
    float _1773 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1622].w)) * _415) * 0.949999988079071044921875);
    float _1774 = _1773 * _1773;
    float _1775 = cbLight._m0[_1622].x + _441;
    float _1776 = cbLight._m0[_1622].y + _442;
    float _1777 = cbLight._m0[_1622].z + _443;
    float _1781 = inversesqrt(dot(vec3(_1775, _1776, _1777), vec3(_1775, _1776, _1777)));
    float _1782 = _1781 * _1775;
    float _1783 = _1781 * _1776;
    float _1784 = _1781 * _1777;
    float _1785 = dot(vec3(_412, _413, _414), vec3(cbLight._m0[_1622].xyz));
    float _3915 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _1788 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _3926 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _1789 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _1790 = dot(vec3(_412, _413, _414), vec3(_1782, _1783, _1784));
    float _3937 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
    float _1793 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _1794 = dot(vec3(cbLight._m0[_1622].xyz), vec3(_1782, _1783, _1784));
    float _3948 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1798 = _1774 * _1774;
    float _1802 = ((_1793 * _1793) * (_1798 + (-1.0))) + 1.0;
    float _1810 = exp2(log2(1.0 - (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) * 5.0);
    float _1811 = 0.959999978542327880859375 - _525;
    float _1813 = 0.959999978542327880859375 - _526;
    float _1814 = 0.959999978542327880859375 - _527;
    float _1821 = 1.0 - _1774;
    float _1832 = (0.5 / (((_1789 * ((_1788 * _1821) + _1774)) + 9.9999999392252902907785028219223e-09) + (((_1789 * _1821) + _1774) * _1788))) * _1788;
    float _3959 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1834 = (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_1798 / ((_1802 * _1802) * 3.141590118408203125));
    uint _1845 = _1622 + 9u;
    float _1856 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1660].w)) * _415) * 0.949999988079071044921875);
    float _1857 = _1856 * _1856;
    float _1858 = cbLight._m0[_1660].x + _441;
    float _1859 = cbLight._m0[_1660].y + _442;
    float _1860 = cbLight._m0[_1660].z + _443;
    float _1864 = inversesqrt(dot(vec3(_1858, _1859, _1860), vec3(_1858, _1859, _1860)));
    float _1865 = _1864 * _1858;
    float _1866 = _1864 * _1859;
    float _1867 = _1864 * _1860;
    float _1868 = dot(vec3(_412, _413, _414), vec3(cbLight._m0[_1660].xyz));
    float _3970 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1871 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _1872 = dot(vec3(_412, _413, _414), vec3(_1865, _1866, _1867));
    float _3981 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _1875 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _1876 = dot(vec3(cbLight._m0[_1660].xyz), vec3(_1865, _1866, _1867));
    float _3992 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1880 = _1857 * _1857;
    float _1884 = ((_1875 * _1875) * (_1880 + (-1.0))) + 1.0;
    float _1891 = exp2(log2(1.0 - (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) * 5.0);
    float _1898 = 1.0 - _1857;
    float _1908 = (0.5 / (((_1789 * ((_1871 * _1898) + _1857)) + 9.9999999392252902907785028219223e-09) + (((_1789 * _1898) + _1857) * _1871))) * _1871;
    float _4003 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1910 = (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_1880 / ((_1884 * _1884) * 3.141590118408203125));
    float _1920 = (((((_1891 * _1811) + _528) * cbLight._m0[_1845].x) * _1910) * _1645) + (((((_1810 * _1811) + _528) * cbLight._m0[_1760].x) * _1834) * _1656);
    float _1921 = (((((_1891 * _1813) + _530) * cbLight._m0[_1845].y) * _1910) * _1645) + (((((_1810 * _1813) + _530) * cbLight._m0[_1760].y) * _1834) * _1656);
    float _1922 = (((((_1891 * _1814) + _531) * cbLight._m0[_1845].z) * _1910) * _1645) + (((((_1810 * _1814) + _531) * cbLight._m0[_1760].z) * _1834) * _1656);
    float _1984;
    float _1986;
    float _1988;
    if (_1697)
    {
        _1984 = _1920;
        _1986 = _1921;
        _1988 = _1922;
    }
    else
    {
        uint _1990 = _1622 + 2u;
        uint _1994 = _1622 + 10u;
        float _2008 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1990].w)) * _415) * 0.949999988079071044921875);
        float _2009 = _2008 * _2008;
        float _2010 = cbLight._m0[_1990].x + _441;
        float _2011 = cbLight._m0[_1990].y + _442;
        float _2012 = cbLight._m0[_1990].z + _443;
        float _2016 = inversesqrt(dot(vec3(_2010, _2011, _2012), vec3(_2010, _2011, _2012)));
        float _2017 = _2016 * _2010;
        float _2018 = _2016 * _2011;
        float _2019 = _2016 * _2012;
        float _2020 = dot(vec3(_412, _413, _414), vec3(cbLight._m0[_1990].xyz));
        float _4014 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
        float _2023 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _2024 = dot(vec3(_412, _413, _414), vec3(_2017, _2018, _2019));
        float _4025 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
        float _2027 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _2028 = dot(vec3(cbLight._m0[_1990].xyz), vec3(_2017, _2018, _2019));
        float _4036 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
        float _2032 = _2009 * _2009;
        float _2036 = ((_2027 * _2027) * (_2032 + (-1.0))) + 1.0;
        float _2043 = exp2(log2(1.0 - (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) * 5.0);
        float _2050 = 1.0 - _2009;
        float _2060 = (0.5 / (((_1789 * ((_2023 * _2050) + _2009)) + 9.9999999392252902907785028219223e-09) + (((_1789 * _2050) + _2009) * _2023))) * _2023;
        float _4047 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
        float _2062 = (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_2032 / ((_2036 * _2036) * 3.141590118408203125));
        float _2063 = isnan(1.0) ? _1637 : (isnan(_1637) ? 1.0 : min(_1637, 1.0));
        _1984 = (((((_2043 * _1811) + _528) * cbLight._m0[_1994].x) * _2062) * _2063) + _1920;
        _1986 = (((((_2043 * _1813) + _530) * cbLight._m0[_1994].y) * _2062) * _2063) + _1921;
        _1988 = (((((_2043 * _1814) + _531) * cbLight._m0[_1994].z) * _2062) * _2063) + _1922;
    }
    float _2098;
    float _2100;
    float _2102;
    if (_1715)
    {
        _2098 = _1984;
        _2100 = _1986;
        _2102 = _1988;
    }
    else
    {
        uint _2109 = _1622 + 3u;
        uint _2113 = _1622 + 11u;
        float _2127 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2109].w)) * _415) * 0.949999988079071044921875);
        float _2128 = _2127 * _2127;
        float _2129 = cbLight._m0[_2109].x + _441;
        float _2130 = cbLight._m0[_2109].y + _442;
        float _2131 = cbLight._m0[_2109].z + _443;
        float _2135 = inversesqrt(dot(vec3(_2129, _2130, _2131), vec3(_2129, _2130, _2131)));
        float _2136 = _2135 * _2129;
        float _2137 = _2135 * _2130;
        float _2138 = _2135 * _2131;
        float _2139 = dot(vec3(_412, _413, _414), vec3(cbLight._m0[_2109].xyz));
        float _4063 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2142 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _2143 = dot(vec3(_412, _413, _414), vec3(_2136, _2137, _2138));
        float _4074 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        float _2146 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _2147 = dot(vec3(cbLight._m0[_2109].xyz), vec3(_2136, _2137, _2138));
        float _4085 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2151 = _2128 * _2128;
        float _2155 = ((_2146 * _2146) * (_2151 + (-1.0))) + 1.0;
        float _2162 = exp2(log2(1.0 - (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) * 5.0);
        float _2169 = 1.0 - _2128;
        float _2179 = (0.5 / (((_1789 * ((_2142 * _2169) + _2128)) + 9.9999999392252902907785028219223e-09) + (((_1789 * _2169) + _2128) * _2142))) * _2142;
        float _4096 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2181 = (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_2151 / ((_2155 * _2155) * 3.141590118408203125));
        float _2182 = isnan(1.0) ? _1638 : (isnan(_1638) ? 1.0 : min(_1638, 1.0));
        _2098 = (((((_2162 * _1811) + _528) * cbLight._m0[_2113].x) * _2181) * _2182) + _1984;
        _2100 = (((((_2162 * _1813) + _530) * cbLight._m0[_2113].y) * _2181) * _2182) + _1986;
        _2102 = (((((_2162 * _1814) + _531) * cbLight._m0[_2113].z) * _2181) * _2182) + _1988;
    }
    float _2316;
    float _2318;
    float _2320;
    float _2322;
    float _2324;
    float _2326;
    if (_1620.y == 0u)
    {
        float _2257 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2258 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2257;
        float _2259 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2257;
        float _2260 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2257;
        uvec4 _2272 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2273 = _2272.x;
        uint _2284 = uint((float(_2272.y) * floor(float(uint(cbSceneParam._m0[85u].y * _463) / _2273))) + floor(float(uint(cbSceneParam._m0[85u].x * _462) / _2273)));
        float _2294 = (log2(_2260 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2295 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        uint _2298 = uint(isnan(14.0) ? _2295 : (isnan(_2295) ? 14.0 : min(_2295, 14.0)));
        uvec4 _2303 = texelFetch(g_lightClusterGridBuffer, int(((_2298 << 2u) + (_2284 << 6u)) >> 2u));
        uint _2304 = _2303.x;
        uint _2305 = _2272.z;
        float _2404;
        float _2406;
        float _2408;
        float _2410;
        float _2412;
        float _2414;
        if (((((1u << ((_2305 >> 4u) & 15u)) + 4294967295u) & _2304) == 0u) || ((_2305 & 240u) == 0u))
        {
            _2404 = 0.0;
            _2406 = 0.0;
            _2408 = 0.0;
            _2410 = 0.0;
            _2412 = 0.0;
            _2414 = 0.0;
        }
        else
        {
            float _2405;
            float _2407;
            float _2409;
            float _2411;
            float _2413;
            float _2415;
            float _2556 = 0.0;
            float _2557 = 0.0;
            float _2558 = 0.0;
            float _2559 = 0.0;
            float _2560 = 0.0;
            float _2561 = 0.0;
            uint _2562 = 0u;
            uint _2571;
            bool _2572;
            for (;;)
            {
                _2571 = texelFetch(g_lightClassification, int((((_2298 << 5u) + (_2284 << 9u)) + (_2562 << 2u)) >> 2u)).x;
                _2572 = _2571 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2572)
                {
                    frontier_phi_68_pred = _2558;
                    frontier_phi_68_pred_1 = _2561;
                    frontier_phi_68_pred_2 = _2560;
                    frontier_phi_68_pred_3 = _2559;
                    frontier_phi_68_pred_4 = _2557;
                    frontier_phi_68_pred_5 = _2556;
                }
                else
                {
                    float _2701;
                    float _2702;
                    float _2703;
                    float _2704;
                    float _2705;
                    float _2706;
                    uint _2707;
                    _2701 = _2556;
                    _2702 = _2557;
                    _2703 = _2558;
                    _2704 = _2559;
                    _2705 = _2560;
                    _2706 = _2561;
                    _2707 = _2571;
                    float _2628;
                    float _2629;
                    float _2630;
                    float _2631;
                    float _2632;
                    float _2633;
                    for (;;)
                    {
                        uint _2711 = uint(findLSB(_2707)) + (_2562 << 5u);
                        uint _2708 = (_2707 + 4294967295u) & _2707;
                        uint _2713 = _2711 * 48u;
                        vec4 _2727 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2713)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 3u)).x));
                        uint _2733 = (_2711 * 48u) + 4u;
                        vec4 _2746 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2733)).x, texelFetch(g_PointLightRenderingBuffer, int(_2733 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2733 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2733 + 3u)).x));
                        uint _2752 = (_2711 * 48u) + 8u;
                        vec3 _2763 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2752)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 2u)).x));
                        float _2767 = _2727.x - _2258;
                        float _2768 = _2727.y - _2259;
                        float _2769 = _2727.z - _2260;
                        float _2770 = dot(vec3(_2767, _2768, _2769), vec3(_2767, _2768, _2769));
                        float _2773 = inversesqrt(_2770);
                        float _2774 = _2773 * _2767;
                        float _2775 = _2773 * _2768;
                        float _2776 = _2773 * _2769;
                        float _2777 = dot(vec3(_483, _486, _489), vec3(_2774, _2775, _2776));
                        float _2782 = 1.0 - (_2770 * _2727.w);
                        float _4122 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
                        float _2783 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
                        float _2784 = sqrt(_2770) * _2746.w;
                        float _2787 = 1.39999997615814208984375 / (_2784 + 1.39999997615814208984375);
                        float _2788 = _2787 * _2787;
                        float _2791 = ((1.0 - _2788) * _2777) + _2788;
                        float _2794 = _2784 * _2784;
                        float _2798 = ((isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0))) * _2783) / ((_2794 * 0.699999988079071044921875) + 1.0);
                        float _2802 = (-0.0) - _2258;
                        float _2803 = (-0.0) - _2259;
                        float _2804 = (-0.0) - _2260;
                        float _2808 = inversesqrt(dot(vec3(_2802, _2803, _2804), vec3(_2802, _2803, _2804)));
                        float _2809 = _2808 * _2802;
                        float _2810 = _2808 * _2803;
                        float _2811 = _2808 * _2804;
                        float _2819 = exp2(log2(1.0 / ((_2794 * 3.5) + 5.0)) * 0.25);
                        float _2820 = 1.0 - _560;
                        float _2827 = sqrt(1.0 - ((1.0 - (_2820 * _2820)) * (1.0 - (_2819 * _2819))));
                        float _2828 = _2827 * _2827;
                        float _2829 = _2828 * _2828;
                        float _2830 = _2809 + _2774;
                        float _2831 = _2810 + _2775;
                        float _2832 = _2811 + _2776;
                        float _2836 = inversesqrt(dot(vec3(_2830, _2831, _2832), vec3(_2830, _2831, _2832)));
                        float _2840 = dot(vec3(_483, _486, _489), vec3(_2809, _2810, _2811));
                        float _4138 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
                        float _2843 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
                        float _2844 = dot(vec3(_483, _486, _489), vec3(_2836 * _2830, _2836 * _2831, _2836 * _2832));
                        float _4149 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
                        float _2847 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
                        float _2851 = ((_2847 * _2847) * (_2829 + (-1.0))) + 1.0;
                        float _2852 = _2787 * _2828;
                        float _2853 = _2852 * _2852;
                        float _2856 = ((1.0 - _2853) * _2777) + _2853;
                        float _4160 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
                        float _2857 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
                        float _2858 = 1.0 - _2828;
                        float _2868 = (0.5 / (((_2857 * ((_2843 * _2858) + _2828)) + 9.9999999392252902907785028219223e-09) + (((_2857 * _2858) + _2828) * _2843))) * _2857;
                        float _4171 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
                        float _2879 = (((_2829 * 3.1415927410125732421875) * (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) / ((_2851 * _2851) * ((_2794 * 2.1991131305694580078125) + 3.141590118408203125))) * _2783;
                        _2631 = (_2798 * _2746.x) + _2704;
                        _2632 = (_2798 * _2746.y) + _2705;
                        _2633 = (_2798 * _2746.z) + _2706;
                        _2628 = (_2879 * _2763.x) + _2701;
                        _2629 = (_2879 * _2763.y) + _2702;
                        _2630 = (_2879 * _2763.z) + _2703;
                        if (_2708 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2701 = _2628;
                            _2702 = _2629;
                            _2703 = _2630;
                            _2704 = _2631;
                            _2705 = _2632;
                            _2706 = _2633;
                            _2707 = _2708;
                        }
                    }
                    frontier_phi_68_pred = _2630;
                    frontier_phi_68_pred_1 = _2633;
                    frontier_phi_68_pred_2 = _2632;
                    frontier_phi_68_pred_3 = _2631;
                    frontier_phi_68_pred_4 = _2629;
                    frontier_phi_68_pred_5 = _2628;
                }
                _2409 = frontier_phi_68_pred;
                _2415 = frontier_phi_68_pred_1;
                _2413 = frontier_phi_68_pred_2;
                _2411 = frontier_phi_68_pred_3;
                _2407 = frontier_phi_68_pred_4;
                _2405 = frontier_phi_68_pred_5;
                uint _2563 = _2562 + 1u;
                if (_2563 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2556 = _2405;
                    _2557 = _2407;
                    _2558 = _2409;
                    _2559 = _2411;
                    _2560 = _2413;
                    _2561 = _2415;
                    _2562 = _2563;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2404 = _2405;
            _2406 = _2407;
            _2408 = _2409;
            _2410 = _2411;
            _2412 = _2413;
            _2414 = _2415;
        }
        uvec4 _2418 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2419 = _2418.z;
        uint _2421 = (_2419 >> 8u) & 15u;
        float _2524;
        float _2526;
        float _2528;
        float _2530;
        float _2532;
        float _2534;
        if (((4294967295u << _2421) & _2304) == 0u)
        {
            _2524 = _2404;
            _2526 = _2406;
            _2528 = _2408;
            _2530 = _2410;
            _2532 = _2412;
            _2534 = _2414;
        }
        else
        {
            float _2549 = inversesqrt(dot(vec3(_2258, _2259, _2260), vec3(_2258, _2259, _2260)));
            float _2550 = _2549 * _2258;
            float _2551 = _2549 * _2259;
            float _2552 = _2549 * _2260;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2421 < ((_2419 >> 12u) & 15u))
            {
                float _2525;
                float _2527;
                float _2529;
                float _2531;
                float _2533;
                float _2535;
                float _2684 = _2404;
                float _2685 = _2406;
                float _2686 = _2408;
                float _2687 = _2410;
                float _2688 = _2412;
                float _2689 = _2414;
                uint _2690 = _2421;
                uint _2699;
                bool _2700;
                for (;;)
                {
                    _2699 = texelFetch(g_lightClassification, int((((_2298 << 5u) + (_2284 << 9u)) + (_2690 << 2u)) >> 2u)).x;
                    _2700 = _2699 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2700)
                    {
                        frontier_phi_79_pred = _2689;
                        frontier_phi_79_pred_1 = _2688;
                        frontier_phi_79_pred_2 = _2687;
                        frontier_phi_79_pred_3 = _2686;
                        frontier_phi_79_pred_4 = _2685;
                        frontier_phi_79_pred_5 = _2684;
                    }
                    else
                    {
                        float _2893;
                        float _2894;
                        float _2895;
                        float _2896;
                        float _2897;
                        float _2898;
                        float _3189;
                        float _3190;
                        float _3191;
                        float _3192;
                        float _3193;
                        float _3194;
                        float _2906 = _2684;
                        float _2907 = _2685;
                        float _2908 = _2686;
                        float _2909 = _2687;
                        float _2910 = _2688;
                        float _2911 = _2689;
                        uint _2912 = _2699;
                        uint _2913;
                        vec4 _2938;
                        float _2939;
                        vec4 _2954;
                        vec3 _2966;
                        vec4 _2982;
                        vec4 _2998;
                        float _3045;
                        bool _3046;
                        for (;;)
                        {
                            uint _2923 = ((_2690 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2912));
                            _2913 = (_2912 + 4294967295u) & _2912;
                            uint _2925 = _2923 * 40u;
                            _2938 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2925)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 3u)).x));
                            _2939 = _2938.w;
                            uint _2941 = (_2923 * 40u) + 4u;
                            _2954 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2941)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 3u)).x));
                            uint _2956 = (_2923 * 40u) + 8u;
                            _2966 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2956)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 2u)).x));
                            uint _2969 = (_2923 * 40u) + 16u;
                            _2982 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2969)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 3u)).x));
                            uint _2985 = (_2923 * 40u) + 20u;
                            _2998 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2985)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 3u)).x));
                            uint _3001 = (_2923 * 40u) + 24u;
                            vec4 _3014 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3001)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 3u)).x));
                            uint _3020 = (_2923 * 40u) + 28u;
                            vec4 _3033 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3020)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 3u)).x));
                            _3045 = fma(_2260, _3033.z, fma(_2259, _3033.y, _3033.x * _2258)) + _3033.w;
                            _3046 = !((fma(_2260, _3014.z, fma(_2259, _3014.y, _3014.x * _2258)) + _3014.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3046)
                            {
                                float _3073 = _2938.x - _2258;
                                float _3074 = _2938.y - _2259;
                                float _3075 = _2938.z - _2260;
                                float _3076 = dot(vec3(_3073, _3074, _3075), vec3(_3073, _3074, _3075));
                                float _3079 = inversesqrt(_3076);
                                float _3080 = _3079 * _3073;
                                float _3081 = _3079 * _3074;
                                float _3082 = _3079 * _3075;
                                float _3086 = 1.0 - (_3076 / (_2939 * _2939));
                                float _4182 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                                float _3087 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                                float _3091 = sqrt(_3076) * _2954.w;
                                float _3093 = 1.39999997615814208984375 / (_3091 + 1.39999997615814208984375);
                                float _3094 = _3093 * _3093;
                                float _3097 = ((1.0 - _3094) * dot(vec3(_3080, _3081, _3082), vec3(_483, _486, _489))) + _3094;
                                float _3100 = _3091 * _3091;
                                float _3104 = (fma(_2260, _2982.z, fma(_2259, _2982.y, _2982.x * _2258)) + _2982.w) / _3045;
                                float _3105 = (fma(_2260, _2998.z, fma(_2259, _2998.y, _2998.x * _2258)) + _2998.w) / _3045;
                                float _3109 = 1.0 - dot(vec2(_3104, _3105), vec2(_3104, _3105));
                                float _4198 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                                float _3110 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
                                float _3111 = _3110 * (((isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0))) * _3087) / ((_3100 * 0.699999988079071044921875) + 1.0));
                                float _3123 = exp2(log2(1.0 / ((_3100 * 3.5) + 5.0)) * 0.25);
                                float _3124 = 1.0 - _560;
                                float _3131 = sqrt(1.0 - ((1.0 - (_3124 * _3124)) * (1.0 - (_3123 * _3123))));
                                float _3132 = _3131 * _3131;
                                float _3133 = _3132 * _3132;
                                float _3134 = _3080 - _2550;
                                float _3135 = _3081 - _2551;
                                float _3136 = _3082 - _2552;
                                float _3140 = inversesqrt(dot(vec3(_3134, _3135, _3136), vec3(_3134, _3135, _3136)));
                                float _3144 = dot(vec3(_483, _486, _489), vec3((-0.0) - _2550, (-0.0) - _2551, (-0.0) - _2552));
                                float _4209 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                                float _3147 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
                                float _3148 = dot(vec3(_483, _486, _489), vec3(_3140 * _3134, _3140 * _3135, _3140 * _3136));
                                float _4220 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                                float _3151 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
                                float _3155 = ((_3151 * _3151) * (_3133 + (-1.0))) + 1.0;
                                float _3156 = _3093 * _3132;
                                float _3157 = _3156 * _3156;
                                float _3163 = ((1.0 - _3157) * dot(vec3(_483, _486, _489), vec3(_3080, _3081, _3082))) + _3157;
                                float _4231 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                                float _3164 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
                                float _3165 = 1.0 - _3132;
                                float _3175 = (0.5 / (((_3164 * ((_3147 * _3165) + _3132)) + 9.9999999392252902907785028219223e-09) + (((_3164 * _3165) + _3132) * _3147))) * _3164;
                                float _4242 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                                float _3185 = (_3110 * _3087) * (((_3133 * 3.1415927410125732421875) * (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) / ((_3155 * _3155) * ((_3100 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3111 * _2954.z;
                                frontier_phi_85_pred_1 = _3111 * _2954.y;
                                frontier_phi_85_pred_2 = _3111 * _2954.x;
                                frontier_phi_85_pred_3 = _3185 * _2966.z;
                                frontier_phi_85_pred_4 = _3185 * _2966.y;
                                frontier_phi_85_pred_5 = _3185 * _2966.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3194 = frontier_phi_85_pred;
                            _3193 = frontier_phi_85_pred_1;
                            _3192 = frontier_phi_85_pred_2;
                            _3191 = frontier_phi_85_pred_3;
                            _3190 = frontier_phi_85_pred_4;
                            _3189 = frontier_phi_85_pred_5;
                            _2896 = _3192 + _2909;
                            _2897 = _3193 + _2910;
                            _2898 = _3194 + _2911;
                            _2893 = _3189 + _2906;
                            _2894 = _3190 + _2907;
                            _2895 = _3191 + _2908;
                            if (_2913 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2906 = _2893;
                                _2907 = _2894;
                                _2908 = _2895;
                                _2909 = _2896;
                                _2910 = _2897;
                                _2911 = _2898;
                                _2912 = _2913;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2898;
                        frontier_phi_79_pred_1 = _2897;
                        frontier_phi_79_pred_2 = _2896;
                        frontier_phi_79_pred_3 = _2895;
                        frontier_phi_79_pred_4 = _2894;
                        frontier_phi_79_pred_5 = _2893;
                    }
                    _2535 = frontier_phi_79_pred;
                    _2533 = frontier_phi_79_pred_1;
                    _2531 = frontier_phi_79_pred_2;
                    _2529 = frontier_phi_79_pred_3;
                    _2527 = frontier_phi_79_pred_4;
                    _2525 = frontier_phi_79_pred_5;
                    uint _2691 = _2690 + 1u;
                    if (_2691 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2684 = _2525;
                        _2685 = _2527;
                        _2686 = _2529;
                        _2687 = _2531;
                        _2688 = _2533;
                        _2689 = _2535;
                        _2690 = _2691;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2531;
                frontier_phi_60_61_ladder_1 = _2535;
                frontier_phi_60_61_ladder_2 = _2533;
                frontier_phi_60_61_ladder_3 = _2529;
                frontier_phi_60_61_ladder_4 = _2527;
                frontier_phi_60_61_ladder_5 = _2525;
            }
            else
            {
                frontier_phi_60_61_ladder = _2410;
                frontier_phi_60_61_ladder_1 = _2414;
                frontier_phi_60_61_ladder_2 = _2412;
                frontier_phi_60_61_ladder_3 = _2408;
                frontier_phi_60_61_ladder_4 = _2406;
                frontier_phi_60_61_ladder_5 = _2404;
            }
            _2524 = frontier_phi_60_61_ladder_5;
            _2526 = frontier_phi_60_61_ladder_4;
            _2528 = frontier_phi_60_61_ladder_3;
            _2530 = frontier_phi_60_61_ladder;
            _2532 = frontier_phi_60_61_ladder_2;
            _2534 = frontier_phi_60_61_ladder_1;
        }
        float _2539 = isnan(1.0) ? _544 : (isnan(_544) ? 1.0 : min(_544, 1.0));
        _2316 = (_2539 * _2530) + _1753;
        _2318 = (_2539 * _2532) + _1755;
        _2320 = (_2539 * _2534) + _1757;
        _2322 = ((_2524 * _528) * _2539) + _2098;
        _2324 = ((_2526 * _530) * _2539) + _2100;
        _2326 = ((_2528 * _531) * _2539) + _2102;
    }
    else
    {
        _2316 = _1753;
        _2318 = _1755;
        _2320 = _1757;
        _2322 = _2098;
        _2324 = _2100;
        _2326 = _2102;
    }
    float _4258 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _4269 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _4280 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _2343 = ((isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_2316 + ((isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0))) * _544))) + ((_2322 + ((isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))) * _1385)) * cbPerFrame._m0[3u].x);
    float _2344 = ((isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_2318 + ((isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0))) * _544))) + ((_2324 + ((isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))) * _1385)) * cbPerFrame._m0[3u].x);
    float _2345 = ((isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_2320 + ((isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0))) * _544))) + ((_2326 + ((isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))) * _1385)) * cbPerFrame._m0[3u].x);
    uint _2346 = _502 + 6u;
    float _2354 = _462 / cbSceneParam._m0[86u].x;
    float _2355 = _463 / cbSceneParam._m0[86u].y;
    vec4 _2369 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2354, _2355, (log2((isnan(cbSceneParam._m0[77u].w) ? _436 : (isnan(_436) ? cbSceneParam._m0[77u].w : min(_436, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2371 = _2369.x;
    float _2372 = _2369.y;
    float _2373 = _2369.z;
    float _2374 = _2369.w;
    float _2466;
    float _2468;
    float _2470;
    float _2472;
    if (_436 > cbSceneParam._m0[78u].w)
    {
        float _2429 = isnan(_436) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _436 : min(cbSceneParam._m0[80u].w, _436));
        float _2430 = _2429 / _436;
        float _2441 = _2430 * _271;
        float _2442 = _272 * _2430;
        float _2443 = (-0.0) - _2442;
        float _2444 = _2430 * _273;
        float _2446 = (cbSceneParam._m0[77u].w * _2443) / _2429;
        float _2447 = _2446 + cbSceneParam._m0[79u].w;
        float _2448 = cbSceneParam._m0[79u].w - _2442;
        float _2454 = sqrt(((_2441 * _2441) + (_2442 * _2442)) + (_2444 * _2444));
        float _2457 = (1.0 - (cbSceneParam._m0[77u].w / _2429)) * _2454;
        float _2462 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2464 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2641;
        if (abs((_2443 - _2446) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2641 = ((((_2447 > 0.0) ? exp2(_2462 * _2447) : (2.0 - exp2(_2464 * _2447))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2457;
        }
        else
        {
            float _2585 = 1.0 / cbSceneParam._m0[80u].x;
            float _2586 = isnan(_2448) ? _2447 : (isnan(_2447) ? _2448 : max(_2447, _2448));
            float _2587 = isnan(_2448) ? _2447 : (isnan(_2447) ? _2448 : min(_2447, _2448));
            float _2596 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : min(_2586, 0.0));
            float _2597 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : min(_2587, 0.0));
            _2641 = ((abs(_2454 / _2443) * cbSceneParam._m0[80u].y) * ((((_2596 - _2597) * 2.0) - ((exp2(_2462 * (isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0)))) - exp2(_2462 * (isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0))))) * _2585)) - ((exp2(_2464 * _2596) - exp2(_2464 * _2597)) * _2585))) + (_2457 * cbSceneParam._m0[80u].z);
        }
        vec4 _2643 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2354, _2355, 1.0), 0.0);
        float _2652 = exp2((_2641 * (-1.44269502162933349609375)) * (1.0 - _2643.w));
        float _2653 = log2(_2652);
        float _2669 = log2(_2374);
        _2466 = (exp2(_2669 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2653 * cbSceneParam._m0[78u].x)) * _2643.x) / cbSceneParam._m0[78u].x)) + _2371;
        _2468 = (exp2(_2669 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2653 * cbSceneParam._m0[78u].y)) * _2643.y) / cbSceneParam._m0[78u].y)) + _2372;
        _2470 = (exp2(_2669 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2653 * cbSceneParam._m0[78u].z)) * _2643.z) / cbSceneParam._m0[78u].z)) + _2373;
        _2472 = _2652 * _2374;
    }
    else
    {
        _2466 = _2371;
        _2468 = _2372;
        _2470 = _2373;
        _2472 = _2374;
    }
    bool _2679;
    vec4 _2482;
    vec4 _2504;
    float _2506;
    float _2510;
    float _2511;
    float _2512;
    float _2513;
    bool _2523;
    for (;;)
    {
        _2482 = cbMatDynParam._m0[0u];
        float _2484 = roundEven(_2482.y);
        bool _2485 = _2484 == 3.0;
        float _2486 = log2(_2472);
        float _2493 = exp2(_2486 * cbSceneParam._m0[78u].x) * _2343;
        float _2494 = exp2(_2486 * cbSceneParam._m0[78u].y) * _2344;
        float _2495 = exp2(_2486 * cbSceneParam._m0[78u].z) * _2345;
        float _2502 = _450 + (-0.5);
        _2504 = cbMtdParam._m0[1u];
        _2506 = _2504.y * _2502;
        float _2509 = (_2484 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2510 = _2509 * (_2485 ? _2493 : (_2493 + (cbSceneParam._m0[72u].w * _2466)));
        _2511 = _2509 * (_2485 ? _2494 : (_2494 + (cbSceneParam._m0[72u].w * _2468)));
        _2512 = _2509 * (_2485 ? _2495 : (_2495 + (cbSceneParam._m0[72u].w * _2470)));
        _2513 = _2502 * 0.999000012874603271484375;
        _2523 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2523)
        {
            if ((cbInstanceData._m0[_502 + 7u].x + _2513) < 0.5)
            {
                _2679 = true;
                break;
            }
        }
        uint _2620 = _504 + uint(_2482.w);
        if ((cbInstanceData._m0[_2620].w < 1.0) && ((cbInstanceData._m0[_2620].w + _2513) < 0.5))
        {
            _2679 = true;
            break;
        }
        if ((_2506 + 1.0) < _2504.x)
        {
            _2679 = true;
            break;
        }
        _2679 = false;
        break;
    }
    float _2884;
    if (_2679)
    {
        discard_state = true;
        _2884 = 0.0;
    }
    else
    {
        _2884 = cbInstanceData._m0[_2346].w;
    }
    SV_Target.x = _2510;
    SV_Target.y = _2511;
    SV_Target.z = _2512;
    SV_Target.w = _2884;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2346].w;
    discard_exit();
}


