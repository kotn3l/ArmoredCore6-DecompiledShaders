#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_POM_M1_AO_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_POM_M1_AO_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_POM_M1_AO_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _871;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    float _280 = dot(vec3(_269, _270, _271), vec3(_192, _193, _194));
    float _283 = dot(vec3(_269, _270, _271), vec3(_206, _207, _208));
    float _286 = dot(vec3(_269, _270, _271), vec3(_213, _214, _215));
    float _292 = inversesqrt(dot(vec3(_280, _283, _286), vec3(_280, _283, _286)));
    vec4 _305 = texture(sampler2D(M_AMSN_POM_M1_AO_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _316 = dot(vec4(_305), vec4(1.0, 0.0, 0.0, 0.0)) + (-0.5);
    float _324 = (((cbMtdParam._m0[10u].y * _280) * _292) * _316) + TEXCOORD.x;
    float _325 = (((_283 * cbMtdParam._m0[10u].y) * _292) * _316) + TEXCOORD.y;
    vec4 _337 = texture(sampler2D(M_AMSN_POM_M1_AO_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_324 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_325 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _342 = _337.x * cbMtdParam._m0[9u].x;
    float _343 = _337.y * cbMtdParam._m0[9u].y;
    float _344 = _337.z * cbMtdParam._m0[9u].z;
    vec4 _356 = texture(sampler2D(M_AMSN_POM_M1_AO_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _324) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _325) + cbTextureTilingScale._m0[1u].w));
    float _360 = _356.z;
    float _365 = (_356.x * 2.0) + (-1.0);
    float _367 = (_356.y * 2.0) + (-1.0);
    float _368 = dot(vec2(_365, _367), vec2(_365, _367));
    float _3470 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _373 = sqrt(1.0 - (isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0))));
    float _376 = fma(_373, _213, fma(_367, _206, _365 * _192));
    float _379 = fma(_373, _214, fma(_367, _207, _365 * _193));
    float _382 = fma(_373, _215, fma(_367, _208, _365 * _194));
    float _386 = inversesqrt(dot(vec3(_376, _379, _382), vec3(_376, _379, _382)));
    float _387 = _386 * _376;
    float _388 = _386 * _379;
    float _389 = _386 * _382;
    float _391 = cbMtdParam._m0[10u].x + _356.w;
    float _395 = inversesqrt(dot(vec3(_387, _388, _389), vec3(_387, _388, _389)));
    float _396 = _395 * _387;
    float _397 = _395 * _388;
    float _398 = _395 * _389;
    float _3481 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _399 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
    float _3492 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _3503 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _3514 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _3525 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _419 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _423 = inversesqrt(dot(vec3(_269, _270, _271), vec3(_269, _270, _271)));
    float _424 = _269 * _423;
    float _425 = _270 * _423;
    float _426 = _271 * _423;
    float _432 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _433 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _454 = fma(_398, cbSceneParam._m0[5u].z, fma(_397, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _396));
    float _457 = fma(_398, cbSceneParam._m0[6u].z, fma(_397, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _396));
    float _460 = fma(_398, cbSceneParam._m0[7u].z, fma(_397, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _396));
    uint _473 = uint(roundEven(NORMAL.w)) * 13u;
    uint _476 = (_473 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _482 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0)))) * cbInstanceData._m0[_476].x;
    float _483 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0)))) * cbInstanceData._m0[_476].y;
    float _484 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0)))) * cbInstanceData._m0[_476].z;
    float _3536 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _485 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
    float _3547 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _486 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
    float _3558 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _487 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
    vec4 _496 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _432, cbSceneParam._m0[86u].y * _433));
    float _500 = ((isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * TEXCOORD.z) * _496.x;
    float _501 = dot(vec3(_396, _397, _398), vec3(_424, _425, _426));
    float _504 = _501 * 2.0;
    float _508 = (_504 * _396) - _424;
    float _509 = (_504 * _397) - _425;
    float _510 = (_504 * _398) - _426;
    float _514 = abs(dot(vec3(_424, _425, _426), vec3(_396, _397, _398)));
    float _3569 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _516 = sqrt(_399);
    float _529 = exp2((_516 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_516 * 3.0));
    float _561 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _565 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _569 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _870;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _596 = fma(_569, cbModelParam._m0[26u].z, fma(_565, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _561));
        float _600 = fma(_569, cbModelParam._m0[27u].z, fma(_565, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _561));
        float _604 = fma(_569, cbModelParam._m0[28u].z, fma(_565, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _561));
        float _628 = _561 + _396;
        float _629 = _565 + _397;
        float _630 = _569 + _398;
        float _640 = fma(_630, cbModelParam._m0[26u].z, fma(_629, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _628)) - _596;
        float _641 = fma(_630, cbModelParam._m0[27u].z, fma(_629, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _628)) - _600;
        float _642 = fma(_630, cbModelParam._m0[28u].z, fma(_629, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _628)) - _604;
        float _646 = inversesqrt(dot(vec3(_640, _641, _642), vec3(_640, _641, _642)));
        float _659 = ((_646 * _640) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_596 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _660 = ((_646 * _641) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_600 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _661 = ((_646 * _642) / cbModelParam._m0[34u].z) + ((((((_604 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _664 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_659, _660, _661), 0.0);
        vec4 _671 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_659, _660, _661), 0.0);
        vec4 _678 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_659, _660, _661), 0.0);
        vec4 _685 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_659, _660, _661), 0.0);
        float _698 = exp2((_664.w + (-0.5)) * 20.0) * 2.0;
        float _699 = _698 * (_664.x + (-0.5));
        float _700 = _698 * (_664.y + (-0.5));
        float _701 = _698 * (_664.z + (-0.5));
        float _708 = exp2((_671.w + (-0.5)) * 20.0) * 2.0;
        float _709 = _708 * (_671.x + (-0.5));
        float _710 = _708 * (_671.y + (-0.5));
        float _711 = _708 * (_671.z + (-0.5));
        float _718 = exp2((_678.w + (-0.5)) * 20.0) * 2.0;
        float _719 = _718 * (_678.x + (-0.5));
        float _720 = _718 * (_678.y + (-0.5));
        float _721 = _718 * (_678.z + (-0.5));
        float _728 = exp2((_685.w + (-0.5)) * 20.0) * 2.0;
        float _729 = _728 * (_685.x + (-0.5));
        float _730 = _728 * (_685.y + (-0.5));
        float _731 = _728 * (_685.z + (-0.5));
        float _732 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _733 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _734 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _735 = _699 * 0.5;
        float _736 = _709 * 0.5;
        float _737 = _719 * 0.5;
        float _738 = dot(vec3(_735, _736, _737), vec3(_735, _736, _737));
        float _743 = (_738 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_738);
        float _752 = (dot(vec3(_396, _397, _398), vec3(_743 * _735, _743 * _736, _743 * _737)) + 1.0) * 0.5;
        float _3595 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _762 = sqrt(((_736 * _736) + (_735 * _735)) + (_737 * _737)) / (_732 + 9.9999997473787516355514526367188e-06);
        float _3606 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _763 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _764 = _763 * 2.0;
        float _768 = (1.0 - _763) / (_763 + 1.0);
        float _3617 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _769 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _778 = ((((1.0 - _769) * (_764 + 2.0)) * exp2(log2(isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))) * (_764 + 1.0))) + _769) * _732;
        float _779 = _700 * 0.5;
        float _780 = _710 * 0.5;
        float _781 = _720 * 0.5;
        float _782 = dot(vec3(_779, _780, _781), vec3(_779, _780, _781));
        float _787 = (_782 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_782);
        float _795 = (dot(vec3(_396, _397, _398), vec3(_787 * _779, _787 * _780, _787 * _781)) + 1.0) * 0.5;
        float _3628 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _804 = sqrt(((_780 * _780) + (_779 * _779)) + (_781 * _781)) / (_733 + 9.9999997473787516355514526367188e-06);
        float _3639 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _806 = _805 * 2.0;
        float _810 = (1.0 - _805) / (_805 + 1.0);
        float _3650 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _811 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _820 = ((((1.0 - _811) * (_806 + 2.0)) * exp2(log2(isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * (_806 + 1.0))) + _811) * _733;
        float _821 = _701 * 0.5;
        float _822 = _711 * 0.5;
        float _823 = _721 * 0.5;
        float _824 = dot(vec3(_821, _822, _823), vec3(_821, _822, _823));
        float _829 = (_824 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_824);
        float _837 = (dot(vec3(_396, _397, _398), vec3(_829 * _821, _829 * _822, _829 * _823)) + 1.0) * 0.5;
        float _3661 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _846 = sqrt(((_822 * _822) + (_821 * _821)) + (_823 * _823)) / (_734 + 9.9999997473787516355514526367188e-06);
        float _3672 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _848 = _847 * 2.0;
        float _852 = (1.0 - _847) / (_847 + 1.0);
        float _3683 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _853 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _862 = ((((1.0 - _853) * (_848 + 2.0)) * exp2(log2(isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * (_848 + 1.0))) + _853) * _734;
        _870 = _701;
        _872 = _700;
        _873 = _699;
        _874 = _711;
        _875 = _710;
        _876 = _709;
        _877 = _721;
        _878 = _720;
        _879 = _719;
        _880 = _734;
        _881 = _733;
        _882 = _732;
        _883 = cbModelParam._m0[36u].z * (isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0)));
        _884 = cbModelParam._m0[36u].z * (isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0)));
        _885 = cbModelParam._m0[36u].z * (isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0)));
    }
    else
    {
        _870 = _871;
        _872 = _871;
        _873 = _871;
        _874 = _871;
        _875 = _871;
        _876 = _871;
        _877 = _871;
        _878 = _871;
        _879 = _871;
        _880 = _871;
        _881 = _871;
        _882 = _871;
        _883 = 0.0;
        _884 = 0.0;
        _885 = 0.0;
    }
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _911 = fma(_569, cbModelParam._m0[30u].z, fma(_565, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _561));
        float _915 = fma(_569, cbModelParam._m0[31u].z, fma(_565, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _561));
        float _919 = fma(_569, cbModelParam._m0[32u].z, fma(_565, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _561));
        float _942 = _561 + _396;
        float _943 = _565 + _397;
        float _944 = _569 + _398;
        float _954 = fma(_944, cbModelParam._m0[30u].z, fma(_943, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _942)) - _911;
        float _955 = fma(_944, cbModelParam._m0[31u].z, fma(_943, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _942)) - _915;
        float _956 = fma(_944, cbModelParam._m0[32u].z, fma(_943, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _942)) - _919;
        float _960 = inversesqrt(dot(vec3(_954, _955, _956), vec3(_954, _955, _956)));
        float _973 = ((_960 * _954) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_911 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _974 = ((_960 * _955) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_915 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _975 = ((_960 * _956) / cbModelParam._m0[35u].z) + ((((((_919 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        float _1010 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_977.x + (-0.5));
        float _1012 = _1010 * (_977.y + (-0.5));
        float _1013 = _1010 * (_977.z + (-0.5));
        float _1020 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_984.x + (-0.5));
        float _1022 = _1020 * (_984.y + (-0.5));
        float _1023 = _1020 * (_984.z + (-0.5));
        float _1030 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_991.x + (-0.5));
        float _1032 = _1030 * (_991.y + (-0.5));
        float _1033 = _1030 * (_991.z + (-0.5));
        float _1040 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_998.x + (-0.5));
        float _1042 = _1040 * (_998.y + (-0.5));
        float _1043 = _1040 * (_998.z + (-0.5));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1047 = _1011 * 0.5;
        float _1048 = _1021 * 0.5;
        float _1049 = _1031 * 0.5;
        float _1050 = dot(vec3(_1047, _1048, _1049), vec3(_1047, _1048, _1049));
        float _1055 = (_1050 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1050);
        float _1063 = (dot(vec3(_396, _397, _398), vec3(_1055 * _1047, _1055 * _1048, _1055 * _1049)) + 1.0) * 0.5;
        float _3724 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1072 = sqrt(((_1048 * _1048) + (_1047 * _1047)) + (_1049 * _1049)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _3735 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1074 = _1073 * 2.0;
        float _1078 = (1.0 - _1073) / (_1073 + 1.0);
        float _3746 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1088 = ((((1.0 - _1079) * (_1074 + 2.0)) * exp2(log2(isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_1074 + 1.0))) + _1079) * _1044;
        float _1089 = _1012 * 0.5;
        float _1090 = _1022 * 0.5;
        float _1091 = _1032 * 0.5;
        float _1092 = dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091));
        float _1097 = (_1092 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1092);
        float _1105 = (dot(vec3(_396, _397, _398), vec3(_1097 * _1089, _1097 * _1090, _1097 * _1091)) + 1.0) * 0.5;
        float _3757 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1114 = sqrt(((_1090 * _1090) + (_1089 * _1089)) + (_1091 * _1091)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _3768 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1116 = _1115 * 2.0;
        float _1120 = (1.0 - _1115) / (_1115 + 1.0);
        float _3779 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1130 = ((((1.0 - _1121) * (_1116 + 2.0)) * exp2(log2(isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (_1116 + 1.0))) + _1121) * _1045;
        float _1131 = _1013 * 0.5;
        float _1132 = _1023 * 0.5;
        float _1133 = _1033 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1147 = (dot(vec3(_396, _397, _398), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _3790 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1156 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1046 + 9.9999997473787516355514526367188e-06);
        float _3801 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _3812 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * (_1158 + 1.0))) + _1163) * _1046;
        _1180 = _1013;
        _1181 = _1012;
        _1182 = _1011;
        _1183 = _1023;
        _1184 = _1022;
        _1185 = _1021;
        _1186 = _1033;
        _1187 = _1032;
        _1188 = _1031;
        _1189 = _1046;
        _1190 = _1045;
        _1191 = _1044;
        _1192 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0)));
        _1193 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)));
        _1194 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
    }
    else
    {
        _1180 = _871;
        _1181 = _871;
        _1182 = _871;
        _1183 = _871;
        _1184 = _871;
        _1185 = _871;
        _1186 = _871;
        _1187 = _871;
        _1188 = _871;
        _1189 = _871;
        _1190 = _871;
        _1191 = _871;
        _1192 = 0.0;
        _1193 = 0.0;
        _1194 = 0.0;
    }
    float _1204 = (cbModelParam._m0[1u].x * (_1192 - _883)) + _883;
    float _1205 = (cbModelParam._m0[1u].x * (_1193 - _884)) + _884;
    float _1206 = (cbModelParam._m0[1u].x * (_1194 - _885)) + _885;
    float _1227 = fma(_1206, cbSceneParam._m0[89u].z, fma(_1205, cbSceneParam._m0[89u].y, _1204 * cbSceneParam._m0[89u].x));
    float _1230 = fma(_1206, cbSceneParam._m0[90u].z, fma(_1205, cbSceneParam._m0[90u].y, _1204 * cbSceneParam._m0[90u].x));
    float _1233 = fma(_1206, cbSceneParam._m0[91u].z, fma(_1205, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1204));
    float _1248 = _508 * 0.5;
    float _1249 = _509 * 0.5;
    float _1250 = _510 * 0.5;
    float _1251 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_1182, _1185, _1188, _1191));
    float _1254 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_1181, _1184, _1187, _1190));
    float _1257 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_1180, _1183, _1186, _1189));
    float _1291;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1264 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_870, _874, _877, _880));
        float _1268 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_872, _875, _878, _881));
        float _1272 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_873, _876, _879, _882));
        float _1279 = dot(vec4(cbModelParam._m0[39u]), vec4(_1248, _1249, _1250, 1.0));
        _1291 = dot(vec3(isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)), isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)), isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1279) ? 0.0 : (isnan(0.0) ? _1279 : max(0.0, _1279))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1291 = 1.0;
    }
    float _1302;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1293 = dot(vec4(cbModelParam._m0[40u]), vec4(_1248, _1249, _1250, 1.0));
        _1302 = dot(vec3(isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)), isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)), isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1293) ? 0.0 : (isnan(0.0) ? _1293 : max(0.0, _1293))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1302 = 1.0;
    }
    float _1306 = (_1302 * cbModelParam._m0[1u].x) + (_1291 * (1.0 - cbModelParam._m0[1u].x));
    float _1316 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _399);
    float _1317 = isnan(_1316) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1316 : min(cbModelParam._m0[25u].z, _1316));
    float _1399;
    float _1401;
    float _1403;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1366 = fma(_569, cbModelParam._m0[13u].z, fma(_565, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _561)) + cbModelParam._m0[13u].w;
        float _1370 = fma(_569, cbModelParam._m0[14u].z, fma(_565, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _561)) + cbModelParam._m0[14u].w;
        float _1374 = fma(_569, cbModelParam._m0[15u].z, fma(_565, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _561)) + cbModelParam._m0[15u].w;
        float _1377 = fma(_510, cbModelParam._m0[13u].z, fma(_509, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _508));
        float _1380 = fma(_510, cbModelParam._m0[14u].z, fma(_509, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _508));
        float _1383 = fma(_510, cbModelParam._m0[15u].z, fma(_509, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _508));
        float _1411;
        if (_1377 > 0.0)
        {
            _1411 = abs((1.0 - _1366) / _1377);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1377 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1366 + 1.0) / _1377);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1411 = frontier_phi_16_14_ladder;
        }
        float _1585;
        if (_1380 > 0.0)
        {
            _1585 = abs((1.0 - _1370) / _1380);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1380 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1370 + 1.0) / _1380);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1585 = frontier_phi_25_21_ladder;
        }
        float _1881;
        if (_1383 > 0.0)
        {
            _1881 = abs((1.0 - _1374) / _1383);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1383 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1374 + 1.0) / _1383);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1881 = frontier_phi_37_32_ladder;
        }
        float _1883 = isnan(_1585) ? _1411 : (isnan(_1411) ? _1585 : min(_1411, _1585));
        float _1884 = isnan(_1881) ? _1883 : (isnan(_1883) ? _1881 : min(_1883, _1881));
        float _1888 = (_1884 * _1377) + _1366;
        float _1889 = (_1884 * _1380) + _1370;
        float _1890 = (_1884 * _1383) + _1374;
        float _1891 = _1884 * 9.9999997473787516355514526367188e-05;
        float _1893 = (-1.0) - _1891;
        float _1895 = _1891 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1890 > _1895) || ((_1890 < _1893) || ((_1889 > _1895) || ((_1889 < _1893) || ((_1888 < _1893) || (_1888 > _1895))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2035 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1890, cbModelParam._m0[9u].z, fma(_1889, cbModelParam._m0[9u].y, _1888 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1890, cbModelParam._m0[10u].z, fma(_1889, cbModelParam._m0[10u].y, _1888 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1890, cbModelParam._m0[11u].z, fma(_1889, cbModelParam._m0[11u].y, _1888 * cbModelParam._m0[11u].x))), _1317);
            frontier_phi_15_37_ladder = _2035.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2035.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2035.z * cbModelParam._m0[1u].y;
        }
        _1399 = frontier_phi_15_37_ladder_1;
        _1401 = frontier_phi_15_37_ladder;
        _1403 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1387 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_508, _509, _510), _1317);
        _1399 = _1387.x * cbModelParam._m0[1u].y;
        _1401 = _1387.y * cbModelParam._m0[1u].y;
        _1403 = _1387.z * cbModelParam._m0[1u].y;
    }
    float _1407 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _399);
    float _1408 = isnan(_1407) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1407 : min(cbModelParam._m0[25u].w, _1407));
    float _1501;
    float _1503;
    float _1505;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1465 = fma(_569, cbModelParam._m0[21u].z, fma(_565, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _561)) + cbModelParam._m0[21u].w;
        float _1469 = fma(_569, cbModelParam._m0[22u].z, fma(_565, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _561)) + cbModelParam._m0[22u].w;
        float _1473 = fma(_569, cbModelParam._m0[23u].z, fma(_565, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _561)) + cbModelParam._m0[23u].w;
        float _1476 = fma(_510, cbModelParam._m0[21u].z, fma(_509, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _508));
        float _1479 = fma(_510, cbModelParam._m0[22u].z, fma(_509, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _508));
        float _1482 = fma(_510, cbModelParam._m0[23u].z, fma(_509, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _508));
        float _1590;
        if (_1476 > 0.0)
        {
            _1590 = abs((1.0 - _1465) / _1476);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1476 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1465 + 1.0) / _1476);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1590 = frontier_phi_27_23_ladder;
        }
        float _1908;
        if (_1479 > 0.0)
        {
            _1908 = abs((1.0 - _1469) / _1479);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1479 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1469 + 1.0) / _1479);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1908 = frontier_phi_39_34_ladder;
        }
        float _2235;
        if (_1482 > 0.0)
        {
            _2235 = abs((1.0 - _1473) / _1482);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1482 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1473 + 1.0) / _1482);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2235 = frontier_phi_49_46_ladder;
        }
        float _2237 = isnan(_1908) ? _1590 : (isnan(_1590) ? _1908 : min(_1590, _1908));
        float _2238 = isnan(_2235) ? _2237 : (isnan(_2237) ? _2235 : min(_2237, _2235));
        float _2242 = (_2238 * _1476) + _1465;
        float _2243 = (_2238 * _1479) + _1469;
        float _2244 = (_2238 * _1482) + _1473;
        float _2245 = _2238 * 9.9999997473787516355514526367188e-05;
        float _2246 = (-1.0) - _2245;
        float _2248 = _2245 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2244 > _2248) || ((_2244 < _2246) || ((_2243 > _2248) || ((_2243 < _2246) || ((_2242 < _2246) || (_2242 > _2248))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2362 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2244, cbModelParam._m0[17u].z, fma(_2243, cbModelParam._m0[17u].y, _2242 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2244, cbModelParam._m0[18u].z, fma(_2243, cbModelParam._m0[18u].y, _2242 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2244, cbModelParam._m0[19u].z, fma(_2243, cbModelParam._m0[19u].y, _2242 * cbModelParam._m0[19u].x))), _1408);
            frontier_phi_24_49_ladder = _2362.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2362.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2362.x * cbModelParam._m0[1u].z;
        }
        _1501 = frontier_phi_24_49_ladder_2;
        _1503 = frontier_phi_24_49_ladder_1;
        _1505 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1485 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_508, _509, _510), _1408);
        _1501 = _1485.x * cbModelParam._m0[1u].z;
        _1503 = _1485.y * cbModelParam._m0[1u].z;
        _1505 = _1485.z * cbModelParam._m0[1u].z;
    }
    float _1517 = ((((1.0 - _529) * ((_516 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_529 * _516)) * _500;
    float _1518 = _1517 * ((cbModelParam._m0[1u].w * (_1501 - _1399)) + _1399);
    float _1519 = _1517 * ((cbModelParam._m0[1u].w * (_1503 - _1401)) + _1401);
    float _1520 = _1517 * ((cbModelParam._m0[1u].w * (_1505 - _1403)) + _1403);
    float _1523 = fma(_1520, cbSceneParam._m0[89u].z, fma(_1519, cbSceneParam._m0[89u].y, _1518 * cbSceneParam._m0[89u].x));
    float _1526 = fma(_1520, cbSceneParam._m0[90u].z, fma(_1519, cbSceneParam._m0[90u].y, _1518 * cbSceneParam._m0[90u].x));
    float _1529 = fma(_1520, cbSceneParam._m0[91u].z, fma(_1519, cbSceneParam._m0[91u].y, _1518 * cbSceneParam._m0[91u].x));
    float _1564 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1568 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1572 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1576 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1577 = _1564 / _1576;
    float _1578 = _1568 / _1576;
    float _1579 = _1572 / _1576;
    float _1726;
    float _1727;
    float _1728;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1606 = ((uint(_1579 > cbSceneParam._m0[59u].y) + uint(_1579 > cbSceneParam._m0[59u].x)) + uint(_1579 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1607 = _1606 + 43u;
        uint _1615 = _1606 + 44u;
        uint _1623 = _1606 + 45u;
        uint _1631 = _1606 + 46u;
        float _1642 = fma(_1576, cbSceneParam._m0[_1607].w, fma(_1572, cbSceneParam._m0[_1607].z, fma(_1568, cbSceneParam._m0[_1607].y, _1564 * cbSceneParam._m0[_1607].x)));
        float _1646 = fma(_1576, cbSceneParam._m0[_1615].w, fma(_1572, cbSceneParam._m0[_1615].z, fma(_1568, cbSceneParam._m0[_1615].y, _1564 * cbSceneParam._m0[_1615].x)));
        float _1654 = fma(_1576, cbSceneParam._m0[_1631].w, fma(_1572, cbSceneParam._m0[_1631].z, fma(_1568, cbSceneParam._m0[_1631].y, _1564 * cbSceneParam._m0[_1631].x)));
        float _1659 = cbSceneParam._m0[33u].z * _1654;
        float _1661 = cbSceneParam._m0[33u].w * _1654;
        float _1664 = fma(_1576, cbSceneParam._m0[_1623].w, fma(_1572, cbSceneParam._m0[_1623].z, fma(_1568, cbSceneParam._m0[_1623].y, _1564 * cbSceneParam._m0[_1623].x))) / _1654;
        float _1712 = (cbSceneParam._m0[33u].x - sqrt(((_1578 * _1578) + (_1577 * _1577)) + (_1579 * _1579))) * cbSceneParam._m0[33u].y;
        float _3938 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1719 = (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1659 + _1642) / _1654, (_1661 + _1646) / _1654), _1664), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1661 + _1642) / _1654, (_1646 - _1659) / _1654), _1664), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1642 - _1659) / _1654, (_1646 - _1661) / _1654), _1664), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1642 - _1661) / _1654, (_1659 + _1646) / _1654), _1664), 0.0)).x), vec4(0.25)));
        _1726 = 1.0 - (_1719 * cbSceneParam._m0[34u].x);
        _1727 = 1.0 - (_1719 * cbSceneParam._m0[34u].y);
        _1728 = 1.0 - (_1719 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1726 = 1.0;
        _1727 = 1.0;
        _1728 = 1.0;
    }
    float _1792;
    float _1794;
    float _1796;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1780 = fma(_1576, cbSceneParam._m0[63u].w, fma(_1572, cbSceneParam._m0[63u].z, fma(_1568, cbSceneParam._m0[63u].y, _1564 * cbSceneParam._m0[63u].x)));
        float _1781 = fma(_1576, cbSceneParam._m0[60u].w, fma(_1572, cbSceneParam._m0[60u].z, fma(_1568, cbSceneParam._m0[60u].y, _1564 * cbSceneParam._m0[60u].x))) / _1780;
        float _1782 = fma(_1576, cbSceneParam._m0[61u].w, fma(_1572, cbSceneParam._m0[61u].z, fma(_1568, cbSceneParam._m0[61u].y, _1564 * cbSceneParam._m0[61u].x))) / _1780;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1781 >= cbSceneParam._m0[64u].x) && (_1782 >= cbSceneParam._m0[64u].y)) && (_1781 <= cbSceneParam._m0[64u].z)) && (_1782 <= cbSceneParam._m0[64u].w))
        {
            float _1921 = fma(_1576, cbSceneParam._m0[62u].w, fma(_1572, cbSceneParam._m0[62u].z, fma(_1568, cbSceneParam._m0[62u].y, _1564 * cbSceneParam._m0[62u].x))) / _1780;
            float _1925 = isnan(cbSceneParam._m0[41u].w) ? _1921 : (isnan(_1921) ? cbSceneParam._m0[41u].w : max(_1921, cbSceneParam._m0[41u].w));
            float _1968 = (cbSceneParam._m0[33u].x - sqrt(((_1578 * _1578) + (_1577 * _1577)) + (_1579 * _1579))) * cbSceneParam._m0[33u].y;
            float _3954 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
            float _1975 = (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1781, cbSceneParam._m0[33u].w + _1782), _1925), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1781, _1782 - cbSceneParam._m0[33u].z), _1925), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1781 - cbSceneParam._m0[33u].z, _1782 - cbSceneParam._m0[33u].w), _1925), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1781 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1782), _1925), 0.0)).x), vec4(0.25)));
            float _1979 = 1.0 - (_1975 * cbSceneParam._m0[34u].x);
            float _1980 = 1.0 - (_1975 * cbSceneParam._m0[34u].y);
            float _1981 = 1.0 - (_1975 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1980) ? _1727 : (isnan(_1727) ? _1980 : min(_1727, _1980));
            frontier_phi_36_35_ladder_1 = isnan(_1981) ? _1728 : (isnan(_1728) ? _1981 : min(_1728, _1981));
            frontier_phi_36_35_ladder_2 = isnan(_1979) ? _1726 : (isnan(_1726) ? _1979 : min(_1726, _1979));
        }
        else
        {
            frontier_phi_36_35_ladder = _1727;
            frontier_phi_36_35_ladder_1 = _1728;
            frontier_phi_36_35_ladder_2 = _1726;
        }
        _1792 = frontier_phi_36_35_ladder_2;
        _1794 = frontier_phi_36_35_ladder;
        _1796 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1792 = _1726;
        _1794 = _1727;
        _1796 = _1728;
    }
    uvec4 _1801 = floatBitsToUint(cbInstanceData._m0[_473 + 5u]);
    uint _1803 = _1801.x * 14u;
    uint _1804 = _1803 + 13u;
    float _1811 = _500 + (-1.0);
    float _1816 = (cbLight._m0[_1804].x * _1811) + 1.0;
    float _1817 = (cbLight._m0[_1804].y * _1811) + 1.0;
    float _1818 = (cbLight._m0[_1804].z * _1811) + 1.0;
    float _1819 = (cbLight._m0[_1804].w * _1811) + 1.0;
    uint _1820 = _1803 + 5u;
    float _1826 = isnan(1.0) ? _1817 : (isnan(_1817) ? 1.0 : min(_1817, 1.0));
    uint _1830 = _1803 + 4u;
    float _1840 = isnan(1.0) ? _1816 : (isnan(_1816) ? 1.0 : min(_1816, 1.0));
    uint _1844 = _1803 | 1u;
    float _1855 = dot(vec3(cbLight._m0[_1803].xyz), vec3(_396, _397, _398));
    float _1858 = dot(vec3(cbLight._m0[_1844].xyz), vec3(_396, _397, _398));
    float _3990 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _4001 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1863 = (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * 0.3183098733425140380859375;
    float _1865 = (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * 0.3183098733425140380859375;
    float _1872 = ((cbLight._m0[_1820].x * _1826) * _1865) + (((cbLight._m0[_1830].x * _1792) * _1840) * _1863);
    float _1873 = ((_1826 * cbLight._m0[_1820].y) * _1865) + (((cbLight._m0[_1830].y * _1794) * _1840) * _1863);
    float _1874 = ((_1826 * cbLight._m0[_1820].z) * _1865) + (((cbLight._m0[_1830].z * _1796) * _1840) * _1863);
    uvec4 _1878 = floatBitsToUint(cbLight._m0[_1803 + 12u]);
    bool _1880 = _1878.x == 0u;
    float _1982;
    float _1984;
    float _1986;
    if (_1880)
    {
        _1982 = _1872;
        _1984 = _1873;
        _1986 = _1874;
    }
    else
    {
        uint _1990 = _1803 + 6u;
        float _2006 = (dot(vec3(cbLight._m0[_1803 + 2u].xyz), vec3(_396, _397, _398)) * 0.5) + 0.5;
        float _2007 = _2006 * _2006;
        float _4012 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        float _2008 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _2009 = isnan(1.0) ? _1818 : (isnan(_1818) ? 1.0 : min(_1818, 1.0));
        _1982 = (((cbLight._m0[_1990].x * 0.3183098733425140380859375) * _2008) * _2009) + _1872;
        _1984 = (((cbLight._m0[_1990].y * 0.3183098733425140380859375) * _2008) * _2009) + _1873;
        _1986 = (((cbLight._m0[_1990].z * 0.3183098733425140380859375) * _2008) * _2009) + _1874;
    }
    bool _1989 = _1878.y == 0u;
    float _2044;
    float _2046;
    float _2048;
    if (_1989)
    {
        _2044 = _1982;
        _2046 = _1984;
        _2048 = _1986;
    }
    else
    {
        uint _2206 = _1803 + 7u;
        float _2222 = (dot(vec3(cbLight._m0[_1803 + 3u].xyz), vec3(_396, _397, _398)) * 0.5) + 0.5;
        float _2223 = _2222 * _2222;
        float _4028 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2224 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _2225 = isnan(1.0) ? _1819 : (isnan(_1819) ? 1.0 : min(_1819, 1.0));
        _2044 = (((cbLight._m0[_2206].x * 0.3183098733425140380859375) * _2224) * _2225) + _1982;
        _2046 = (((cbLight._m0[_2206].y * 0.3183098733425140380859375) * _2224) * _2225) + _1984;
        _2048 = (((cbLight._m0[_2206].z * 0.3183098733425140380859375) * _2224) * _2225) + _1986;
    }
    uint _2051 = _1803 + 8u;
    float _2064 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1803].w)) * _399) * 0.949999988079071044921875);
    float _2065 = _2064 * _2064;
    float _2066 = cbLight._m0[_1803].x + _424;
    float _2067 = cbLight._m0[_1803].y + _425;
    float _2068 = cbLight._m0[_1803].z + _426;
    float _2072 = inversesqrt(dot(vec3(_2066, _2067, _2068), vec3(_2066, _2067, _2068)));
    float _2073 = _2072 * _2066;
    float _2074 = _2072 * _2067;
    float _2075 = _2072 * _2068;
    float _2076 = dot(vec3(_396, _397, _398), vec3(cbLight._m0[_1803].xyz));
    float _4044 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2079 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _4055 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _2080 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _2081 = dot(vec3(_396, _397, _398), vec3(_2073, _2074, _2075));
    float _4066 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2084 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _2085 = dot(vec3(cbLight._m0[_1803].xyz), vec3(_2073, _2074, _2075));
    float _4077 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2089 = _2065 * _2065;
    float _2093 = ((_2084 * _2084) * (_2089 + (-1.0))) + 1.0;
    float _2104 = (exp2(log2(1.0 - (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2105 = 1.0 - _2065;
    float _2116 = (0.5 / (((_2080 * ((_2079 * _2105) + _2065)) + 9.9999999392252902907785028219223e-09) + (((_2080 * _2105) + _2065) * _2079))) * _2079;
    float _4088 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _2118 = (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_2089 / ((_2093 * _2093) * 3.141590118408203125));
    uint _2132 = _1803 + 9u;
    float _2143 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1844].w)) * _399) * 0.949999988079071044921875);
    float _2144 = _2143 * _2143;
    float _2145 = cbLight._m0[_1844].x + _424;
    float _2146 = cbLight._m0[_1844].y + _425;
    float _2147 = cbLight._m0[_1844].z + _426;
    float _2151 = inversesqrt(dot(vec3(_2145, _2146, _2147), vec3(_2145, _2146, _2147)));
    float _2152 = _2151 * _2145;
    float _2153 = _2151 * _2146;
    float _2154 = _2151 * _2147;
    float _2155 = dot(vec3(_396, _397, _398), vec3(cbLight._m0[_1844].xyz));
    float _4099 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2158 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _2159 = dot(vec3(_396, _397, _398), vec3(_2152, _2153, _2154));
    float _4110 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2162 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _2163 = dot(vec3(cbLight._m0[_1844].xyz), vec3(_2152, _2153, _2154));
    float _4121 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2167 = _2144 * _2144;
    float _2171 = ((_2162 * _2162) * (_2167 + (-1.0))) + 1.0;
    float _2180 = (exp2(log2(1.0 - (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2181 = 1.0 - _2144;
    float _2191 = (0.5 / (((_2080 * ((_2158 * _2181) + _2144)) + 9.9999999392252902907785028219223e-09) + (((_2080 * _2181) + _2144) * _2158))) * _2158;
    float _4132 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2193 = (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_2167 / ((_2171 * _2171) * 3.141590118408203125));
    float _2203 = (((_2180 * cbLight._m0[_2132].x) * _2193) * _1826) + ((((cbLight._m0[_2051].x * _1792) * _2104) * _2118) * _1840);
    float _2204 = (((_2180 * cbLight._m0[_2132].y) * _2193) * _1826) + ((((cbLight._m0[_2051].y * _1794) * _2104) * _2118) * _1840);
    float _2205 = (((_2180 * cbLight._m0[_2132].z) * _2193) * _1826) + ((((cbLight._m0[_2051].z * _1796) * _2104) * _2118) * _1840);
    float _2261;
    float _2263;
    float _2265;
    if (_1880)
    {
        _2261 = _2203;
        _2263 = _2204;
        _2265 = _2205;
    }
    else
    {
        uint _2267 = _1803 + 2u;
        uint _2271 = _1803 + 10u;
        float _2285 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2267].w)) * _399) * 0.949999988079071044921875);
        float _2286 = _2285 * _2285;
        float _2287 = cbLight._m0[_2267].x + _424;
        float _2288 = cbLight._m0[_2267].y + _425;
        float _2289 = cbLight._m0[_2267].z + _426;
        float _2293 = inversesqrt(dot(vec3(_2287, _2288, _2289), vec3(_2287, _2288, _2289)));
        float _2294 = _2293 * _2287;
        float _2295 = _2293 * _2288;
        float _2296 = _2293 * _2289;
        float _2297 = dot(vec3(_396, _397, _398), vec3(cbLight._m0[_2267].xyz));
        float _4143 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2300 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _2301 = dot(vec3(_396, _397, _398), vec3(_2294, _2295, _2296));
        float _4154 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2304 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _2305 = dot(vec3(cbLight._m0[_2267].xyz), vec3(_2294, _2295, _2296));
        float _4165 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2309 = _2286 * _2286;
        float _2313 = ((_2304 * _2304) * (_2309 + (-1.0))) + 1.0;
        float _2322 = (exp2(log2(1.0 - (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2323 = 1.0 - _2286;
        float _2333 = (0.5 / (((_2080 * ((_2300 * _2323) + _2286)) + 9.9999999392252902907785028219223e-09) + (((_2080 * _2323) + _2286) * _2300))) * _2300;
        float _4176 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2335 = (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_2309 / ((_2313 * _2313) * 3.141590118408203125));
        float _2336 = isnan(1.0) ? _1818 : (isnan(_1818) ? 1.0 : min(_1818, 1.0));
        _2261 = (((_2322 * cbLight._m0[_2271].x) * _2335) * _2336) + _2203;
        _2263 = (((_2322 * cbLight._m0[_2271].y) * _2335) * _2336) + _2204;
        _2265 = (((_2322 * cbLight._m0[_2271].z) * _2335) * _2336) + _2205;
    }
    float _2367;
    float _2369;
    float _2371;
    if (_1989)
    {
        _2367 = _2261;
        _2369 = _2263;
        _2371 = _2265;
    }
    else
    {
        uint _2378 = _1803 + 3u;
        uint _2382 = _1803 + 11u;
        float _2396 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2378].w)) * _399) * 0.949999988079071044921875);
        float _2397 = _2396 * _2396;
        float _2398 = cbLight._m0[_2378].x + _424;
        float _2399 = cbLight._m0[_2378].y + _425;
        float _2400 = cbLight._m0[_2378].z + _426;
        float _2404 = inversesqrt(dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400)));
        float _2405 = _2404 * _2398;
        float _2406 = _2404 * _2399;
        float _2407 = _2404 * _2400;
        float _2408 = dot(vec3(_396, _397, _398), vec3(cbLight._m0[_2378].xyz));
        float _4192 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2411 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _2412 = dot(vec3(_396, _397, _398), vec3(_2405, _2406, _2407));
        float _4203 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2415 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _2416 = dot(vec3(cbLight._m0[_2378].xyz), vec3(_2405, _2406, _2407));
        float _4214 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2420 = _2397 * _2397;
        float _2424 = ((_2415 * _2415) * (_2420 + (-1.0))) + 1.0;
        float _2433 = (exp2(log2(1.0 - (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2434 = 1.0 - _2397;
        float _2444 = (0.5 / (((_2080 * ((_2411 * _2434) + _2397)) + 9.9999999392252902907785028219223e-09) + (((_2080 * _2434) + _2397) * _2411))) * _2411;
        float _4225 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2446 = (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_2420 / ((_2424 * _2424) * 3.141590118408203125));
        float _2447 = isnan(1.0) ? _1819 : (isnan(_1819) ? 1.0 : min(_1819, 1.0));
        _2367 = (((_2433 * cbLight._m0[_2382].x) * _2446) * _2447) + _2261;
        _2369 = (((_2433 * cbLight._m0[_2382].y) * _2446) * _2447) + _2263;
        _2371 = (((_2433 * cbLight._m0[_2382].z) * _2446) * _2447) + _2265;
    }
    float _2512;
    float _2514;
    float _2516;
    float _2518;
    float _2520;
    float _2522;
    if (_1801.y == 0u)
    {
        uvec4 _2468 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2469 = _2468.x;
        uint _2480 = uint((float(_2468.y) * floor(float(uint(cbSceneParam._m0[85u].y * _433) / _2469))) + floor(float(uint(cbSceneParam._m0[85u].x * _432) / _2469)));
        float _2490 = (log2(_1579 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2491 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        uint _2494 = uint(isnan(14.0) ? _2491 : (isnan(_2491) ? 14.0 : min(_2491, 14.0)));
        uvec4 _2499 = texelFetch(g_lightClusterGridBuffer, int(((_2494 << 2u) + (_2480 << 6u)) >> 2u));
        uint _2500 = _2499.x;
        uint _2501 = _2468.z;
        float _2579;
        float _2581;
        float _2583;
        float _2585;
        float _2587;
        float _2589;
        if (((((1u << ((_2501 >> 4u) & 15u)) + 4294967295u) & _2500) == 0u) || ((_2501 & 240u) == 0u))
        {
            _2579 = 0.0;
            _2581 = 0.0;
            _2583 = 0.0;
            _2585 = 0.0;
            _2587 = 0.0;
            _2589 = 0.0;
        }
        else
        {
            float _2580;
            float _2582;
            float _2584;
            float _2586;
            float _2588;
            float _2590;
            float _2723 = 0.0;
            float _2724 = 0.0;
            float _2725 = 0.0;
            float _2726 = 0.0;
            float _2727 = 0.0;
            float _2728 = 0.0;
            uint _2729 = 0u;
            uint _2738;
            bool _2739;
            for (;;)
            {
                _2738 = texelFetch(g_lightClassification, int((((_2494 << 5u) + (_2480 << 9u)) + (_2729 << 2u)) >> 2u)).x;
                _2739 = _2738 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2739)
                {
                    frontier_phi_68_pred = _2728;
                    frontier_phi_68_pred_1 = _2727;
                    frontier_phi_68_pred_2 = _2726;
                    frontier_phi_68_pred_3 = _2724;
                    frontier_phi_68_pred_4 = _2723;
                    frontier_phi_68_pred_5 = _2725;
                }
                else
                {
                    float _2847;
                    float _2848;
                    float _2849;
                    float _2850;
                    float _2851;
                    float _2852;
                    uint _2853;
                    _2847 = _2723;
                    _2848 = _2724;
                    _2849 = _2725;
                    _2850 = _2726;
                    _2851 = _2727;
                    _2852 = _2728;
                    _2853 = _2738;
                    float _2779;
                    float _2780;
                    float _2781;
                    float _2782;
                    float _2783;
                    float _2784;
                    for (;;)
                    {
                        uint _2857 = uint(findLSB(_2853)) + (_2729 << 5u);
                        uint _2854 = (_2853 + 4294967295u) & _2853;
                        uint _2859 = _2857 * 48u;
                        vec4 _2873 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2859)).x, texelFetch(g_PointLightRenderingBuffer, int(_2859 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2859 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2859 + 3u)).x));
                        uint _2879 = (_2857 * 48u) + 4u;
                        vec4 _2892 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2879)).x, texelFetch(g_PointLightRenderingBuffer, int(_2879 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2879 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2879 + 3u)).x));
                        uint _2898 = (_2857 * 48u) + 8u;
                        vec3 _2909 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2898)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 2u)).x));
                        float _2913 = _2873.x - _1577;
                        float _2914 = _2873.y - _1578;
                        float _2915 = _2873.z - _1579;
                        float _2916 = dot(vec3(_2913, _2914, _2915), vec3(_2913, _2914, _2915));
                        float _2919 = inversesqrt(_2916);
                        float _2920 = _2919 * _2913;
                        float _2921 = _2919 * _2914;
                        float _2922 = _2919 * _2915;
                        float _2923 = dot(vec3(_454, _457, _460), vec3(_2920, _2921, _2922));
                        float _2928 = 1.0 - (_2916 * _2873.w);
                        float _4251 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
                        float _2929 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
                        float _2930 = sqrt(_2916) * _2892.w;
                        float _2933 = 1.39999997615814208984375 / (_2930 + 1.39999997615814208984375);
                        float _2934 = _2933 * _2933;
                        float _2937 = ((1.0 - _2934) * _2923) + _2934;
                        float _2940 = _2930 * _2930;
                        float _2944 = ((isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0))) * _2929) / ((_2940 * 0.699999988079071044921875) + 1.0);
                        float _2948 = (-0.0) - _1577;
                        float _2949 = (-0.0) - _1578;
                        float _2950 = (-0.0) - _1579;
                        float _2954 = inversesqrt(dot(vec3(_2948, _2949, _2950), vec3(_2948, _2949, _2950)));
                        float _2955 = _2954 * _2948;
                        float _2956 = _2954 * _2949;
                        float _2957 = _2954 * _2950;
                        float _2964 = exp2(log2(1.0 / ((_2940 * 3.5) + 5.0)) * 0.25);
                        float _2965 = 1.0 - _516;
                        float _2972 = sqrt(1.0 - ((1.0 - (_2965 * _2965)) * (1.0 - (_2964 * _2964))));
                        float _2973 = _2972 * _2972;
                        float _2974 = _2973 * _2973;
                        float _2975 = _2955 + _2920;
                        float _2976 = _2956 + _2921;
                        float _2977 = _2957 + _2922;
                        float _2981 = inversesqrt(dot(vec3(_2975, _2976, _2977), vec3(_2975, _2976, _2977)));
                        float _2985 = dot(vec3(_454, _457, _460), vec3(_2955, _2956, _2957));
                        float _4267 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
                        float _2988 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                        float _2989 = dot(vec3(_454, _457, _460), vec3(_2981 * _2975, _2981 * _2976, _2981 * _2977));
                        float _4278 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                        float _2992 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                        float _2996 = ((_2992 * _2992) * (_2974 + (-1.0))) + 1.0;
                        float _2997 = _2933 * _2973;
                        float _2998 = _2997 * _2997;
                        float _3001 = ((1.0 - _2998) * _2923) + _2998;
                        float _4289 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                        float _3002 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
                        float _3003 = 1.0 - _2973;
                        float _3013 = (0.5 / (((_3002 * ((_2988 * _3003) + _2973)) + 9.9999999392252902907785028219223e-09) + (((_3002 * _3003) + _2973) * _2988))) * _3002;
                        float _4300 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                        float _3024 = (((_2974 * 3.1415927410125732421875) * (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) / ((_2996 * _2996) * ((_2940 * 2.1991131305694580078125) + 3.141590118408203125))) * _2929;
                        _2782 = (_2944 * _2892.x) + _2850;
                        _2783 = (_2944 * _2892.y) + _2851;
                        _2784 = (_2944 * _2892.z) + _2852;
                        _2779 = (_3024 * _2909.x) + _2847;
                        _2780 = (_3024 * _2909.y) + _2848;
                        _2781 = (_3024 * _2909.z) + _2849;
                        if (_2854 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2847 = _2779;
                            _2848 = _2780;
                            _2849 = _2781;
                            _2850 = _2782;
                            _2851 = _2783;
                            _2852 = _2784;
                            _2853 = _2854;
                        }
                    }
                    frontier_phi_68_pred = _2784;
                    frontier_phi_68_pred_1 = _2783;
                    frontier_phi_68_pred_2 = _2782;
                    frontier_phi_68_pred_3 = _2780;
                    frontier_phi_68_pred_4 = _2779;
                    frontier_phi_68_pred_5 = _2781;
                }
                _2590 = frontier_phi_68_pred;
                _2588 = frontier_phi_68_pred_1;
                _2586 = frontier_phi_68_pred_2;
                _2582 = frontier_phi_68_pred_3;
                _2580 = frontier_phi_68_pred_4;
                _2584 = frontier_phi_68_pred_5;
                uint _2730 = _2729 + 1u;
                if (_2730 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2723 = _2580;
                    _2724 = _2582;
                    _2725 = _2584;
                    _2726 = _2586;
                    _2727 = _2588;
                    _2728 = _2590;
                    _2729 = _2730;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2579 = _2580;
            _2581 = _2582;
            _2583 = _2584;
            _2585 = _2586;
            _2587 = _2588;
            _2589 = _2590;
        }
        uvec4 _2593 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2594 = _2593.z;
        uint _2596 = (_2594 >> 8u) & 15u;
        float _2691;
        float _2693;
        float _2695;
        float _2697;
        float _2699;
        float _2701;
        if (((4294967295u << _2596) & _2500) == 0u)
        {
            _2691 = _2579;
            _2693 = _2581;
            _2695 = _2583;
            _2697 = _2585;
            _2699 = _2587;
            _2701 = _2589;
        }
        else
        {
            float _2716 = inversesqrt(dot(vec3(_1577, _1578, _1579), vec3(_1577, _1578, _1579)));
            float _2717 = _2716 * _1577;
            float _2718 = _2716 * _1578;
            float _2719 = _2716 * _1579;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2596 < ((_2594 >> 12u) & 15u))
            {
                float _2692;
                float _2694;
                float _2696;
                float _2698;
                float _2700;
                float _2702;
                float _2830 = _2579;
                float _2831 = _2581;
                float _2832 = _2583;
                float _2833 = _2585;
                float _2834 = _2587;
                float _2835 = _2589;
                uint _2836 = _2596;
                uint _2845;
                bool _2846;
                for (;;)
                {
                    _2845 = texelFetch(g_lightClassification, int((((_2494 << 5u) + (_2480 << 9u)) + (_2836 << 2u)) >> 2u)).x;
                    _2846 = _2845 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2846)
                    {
                        frontier_phi_74_pred = _2832;
                        frontier_phi_74_pred_1 = _2831;
                        frontier_phi_74_pred_2 = _2830;
                        frontier_phi_74_pred_3 = _2835;
                        frontier_phi_74_pred_4 = _2834;
                        frontier_phi_74_pred_5 = _2833;
                    }
                    else
                    {
                        float _3029;
                        float _3030;
                        float _3031;
                        float _3032;
                        float _3033;
                        float _3034;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3042 = _2830;
                        float _3043 = _2831;
                        float _3044 = _2832;
                        float _3045 = _2833;
                        float _3046 = _2834;
                        float _3047 = _2835;
                        uint _3048 = _2845;
                        uint _3049;
                        vec4 _3074;
                        float _3075;
                        vec4 _3090;
                        vec3 _3102;
                        vec4 _3118;
                        vec4 _3134;
                        float _3181;
                        bool _3182;
                        for (;;)
                        {
                            uint _3059 = ((_2836 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3048));
                            _3049 = (_3048 + 4294967295u) & _3048;
                            uint _3061 = _3059 * 40u;
                            _3074 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3061)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 3u)).x));
                            _3075 = _3074.w;
                            uint _3077 = (_3059 * 40u) + 4u;
                            _3090 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3077)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 3u)).x));
                            uint _3092 = (_3059 * 40u) + 8u;
                            _3102 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 2u)).x));
                            uint _3105 = (_3059 * 40u) + 16u;
                            _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            uint _3121 = (_3059 * 40u) + 20u;
                            _3134 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3121)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 3u)).x));
                            uint _3137 = (_3059 * 40u) + 24u;
                            vec4 _3150 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3137)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 3u)).x));
                            uint _3156 = (_3059 * 40u) + 28u;
                            vec4 _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            _3181 = fma(_1579, _3169.z, fma(_1578, _3169.y, _3169.x * _1577)) + _3169.w;
                            _3182 = !((fma(_1579, _3150.z, fma(_1578, _3150.y, _3150.x * _1577)) + _3150.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3182)
                            {
                                float _3209 = _3074.x - _1577;
                                float _3210 = _3074.y - _1578;
                                float _3211 = _3074.z - _1579;
                                float _3212 = dot(vec3(_3209, _3210, _3211), vec3(_3209, _3210, _3211));
                                float _3215 = inversesqrt(_3212);
                                float _3216 = _3215 * _3209;
                                float _3217 = _3215 * _3210;
                                float _3218 = _3215 * _3211;
                                float _3222 = 1.0 - (_3212 / (_3075 * _3075));
                                float _4311 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                                float _3223 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
                                float _3227 = sqrt(_3212) * _3090.w;
                                float _3229 = 1.39999997615814208984375 / (_3227 + 1.39999997615814208984375);
                                float _3230 = _3229 * _3229;
                                float _3233 = ((1.0 - _3230) * dot(vec3(_3216, _3217, _3218), vec3(_454, _457, _460))) + _3230;
                                float _3236 = _3227 * _3227;
                                float _3240 = (fma(_1579, _3118.z, fma(_1578, _3118.y, _3118.x * _1577)) + _3118.w) / _3181;
                                float _3241 = (fma(_1579, _3134.z, fma(_1578, _3134.y, _3134.x * _1577)) + _3134.w) / _3181;
                                float _3245 = 1.0 - dot(vec2(_3240, _3241), vec2(_3240, _3241));
                                float _4327 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                                float _3246 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                                float _3247 = _3246 * (((isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0))) * _3223) / ((_3236 * 0.699999988079071044921875) + 1.0));
                                float _3259 = exp2(log2(1.0 / ((_3236 * 3.5) + 5.0)) * 0.25);
                                float _3260 = 1.0 - _516;
                                float _3267 = sqrt(1.0 - ((1.0 - (_3260 * _3260)) * (1.0 - (_3259 * _3259))));
                                float _3268 = _3267 * _3267;
                                float _3269 = _3268 * _3268;
                                float _3270 = _3216 - _2717;
                                float _3271 = _3217 - _2718;
                                float _3272 = _3218 - _2719;
                                float _3276 = inversesqrt(dot(vec3(_3270, _3271, _3272), vec3(_3270, _3271, _3272)));
                                float _3280 = dot(vec3(_454, _457, _460), vec3((-0.0) - _2717, (-0.0) - _2718, (-0.0) - _2719));
                                float _4338 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                                float _3283 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                                float _3284 = dot(vec3(_454, _457, _460), vec3(_3276 * _3270, _3276 * _3271, _3276 * _3272));
                                float _4349 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3287 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                                float _3291 = ((_3287 * _3287) * (_3269 + (-1.0))) + 1.0;
                                float _3292 = _3229 * _3268;
                                float _3293 = _3292 * _3292;
                                float _3299 = ((1.0 - _3293) * dot(vec3(_454, _457, _460), vec3(_3216, _3217, _3218))) + _3293;
                                float _4360 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                                float _3300 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
                                float _3301 = 1.0 - _3268;
                                float _3311 = (0.5 / (((_3300 * ((_3283 * _3301) + _3268)) + 9.9999999392252902907785028219223e-09) + (((_3300 * _3301) + _3268) * _3283))) * _3300;
                                float _4371 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                                float _3321 = (_3246 * _3223) * (((_3269 * 3.1415927410125732421875) * (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0)))) / ((_3291 * _3291) * ((_3236 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3321 * _3102.z;
                                frontier_phi_80_pred_1 = _3321 * _3102.y;
                                frontier_phi_80_pred_2 = _3321 * _3102.x;
                                frontier_phi_80_pred_3 = _3247 * _3090.z;
                                frontier_phi_80_pred_4 = _3247 * _3090.y;
                                frontier_phi_80_pred_5 = _3247 * _3090.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3327 = frontier_phi_80_pred;
                            _3326 = frontier_phi_80_pred_1;
                            _3325 = frontier_phi_80_pred_2;
                            _3330 = frontier_phi_80_pred_3;
                            _3329 = frontier_phi_80_pred_4;
                            _3328 = frontier_phi_80_pred_5;
                            _3032 = _3328 + _3045;
                            _3033 = _3329 + _3046;
                            _3034 = _3330 + _3047;
                            _3029 = _3325 + _3042;
                            _3030 = _3326 + _3043;
                            _3031 = _3327 + _3044;
                            if (_3049 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3042 = _3029;
                                _3043 = _3030;
                                _3044 = _3031;
                                _3045 = _3032;
                                _3046 = _3033;
                                _3047 = _3034;
                                _3048 = _3049;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3031;
                        frontier_phi_74_pred_1 = _3030;
                        frontier_phi_74_pred_2 = _3029;
                        frontier_phi_74_pred_3 = _3034;
                        frontier_phi_74_pred_4 = _3033;
                        frontier_phi_74_pred_5 = _3032;
                    }
                    _2696 = frontier_phi_74_pred;
                    _2694 = frontier_phi_74_pred_1;
                    _2692 = frontier_phi_74_pred_2;
                    _2702 = frontier_phi_74_pred_3;
                    _2700 = frontier_phi_74_pred_4;
                    _2698 = frontier_phi_74_pred_5;
                    uint _2837 = _2836 + 1u;
                    if (_2837 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2830 = _2692;
                        _2831 = _2694;
                        _2832 = _2696;
                        _2833 = _2698;
                        _2834 = _2700;
                        _2835 = _2702;
                        _2836 = _2837;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2700;
                frontier_phi_62_63_ladder_1 = _2698;
                frontier_phi_62_63_ladder_2 = _2696;
                frontier_phi_62_63_ladder_3 = _2702;
                frontier_phi_62_63_ladder_4 = _2694;
                frontier_phi_62_63_ladder_5 = _2692;
            }
            else
            {
                frontier_phi_62_63_ladder = _2587;
                frontier_phi_62_63_ladder_1 = _2585;
                frontier_phi_62_63_ladder_2 = _2583;
                frontier_phi_62_63_ladder_3 = _2589;
                frontier_phi_62_63_ladder_4 = _2581;
                frontier_phi_62_63_ladder_5 = _2579;
            }
            _2691 = frontier_phi_62_63_ladder_5;
            _2693 = frontier_phi_62_63_ladder_4;
            _2695 = frontier_phi_62_63_ladder_2;
            _2697 = frontier_phi_62_63_ladder_1;
            _2699 = frontier_phi_62_63_ladder;
            _2701 = frontier_phi_62_63_ladder_3;
        }
        float _2706 = isnan(1.0) ? _500 : (isnan(_500) ? 1.0 : min(_500, 1.0));
        _2512 = (_2706 * _2697) + _2044;
        _2514 = (_2706 * _2699) + _2046;
        _2516 = (_2706 * _2701) + _2048;
        _2518 = ((_2691 * 0.039999999105930328369140625) * _2706) + _2367;
        _2520 = ((_2693 * 0.039999999105930328369140625) * _2706) + _2369;
        _2522 = ((_2695 * 0.039999999105930328369140625) * _2706) + _2371;
    }
    else
    {
        _2512 = _2044;
        _2514 = _2046;
        _2516 = _2048;
        _2518 = _2367;
        _2520 = _2369;
        _2522 = _2371;
    }
    float _4387 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _4398 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _4409 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    uint _2542 = _473 + 6u;
    float _2550 = _432 / cbSceneParam._m0[86u].x;
    float _2551 = _433 / cbSceneParam._m0[86u].y;
    vec4 _2565 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2550, _2551, (log2((isnan(cbSceneParam._m0[77u].w) ? _419 : (isnan(_419) ? cbSceneParam._m0[77u].w : min(_419, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2567 = _2565.x;
    float _2568 = _2565.y;
    float _2569 = _2565.z;
    float _2570 = _2565.w;
    float _2641;
    float _2643;
    float _2645;
    float _2647;
    if (_419 > cbSceneParam._m0[78u].w)
    {
        float _2604 = isnan(_419) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _419 : min(cbSceneParam._m0[80u].w, _419));
        float _2605 = _2604 / _419;
        float _2616 = _2605 * _269;
        float _2617 = _270 * _2605;
        float _2618 = (-0.0) - _2617;
        float _2619 = _2605 * _271;
        float _2621 = (cbSceneParam._m0[77u].w * _2618) / _2604;
        float _2622 = _2621 + cbSceneParam._m0[79u].w;
        float _2623 = cbSceneParam._m0[79u].w - _2617;
        float _2629 = sqrt(((_2616 * _2616) + (_2617 * _2617)) + (_2619 * _2619));
        float _2632 = (1.0 - (cbSceneParam._m0[77u].w / _2604)) * _2629;
        float _2637 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2639 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2792;
        if (abs((_2618 - _2621) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2792 = ((((_2622 > 0.0) ? exp2(_2637 * _2622) : (2.0 - exp2(_2639 * _2622))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2632;
        }
        else
        {
            float _2752 = 1.0 / cbSceneParam._m0[80u].x;
            float _2753 = isnan(_2623) ? _2622 : (isnan(_2622) ? _2623 : max(_2622, _2623));
            float _2754 = isnan(_2623) ? _2622 : (isnan(_2622) ? _2623 : min(_2622, _2623));
            float _2763 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : min(_2753, 0.0));
            float _2764 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : min(_2754, 0.0));
            _2792 = ((abs(_2629 / _2618) * cbSceneParam._m0[80u].y) * ((((_2763 - _2764) * 2.0) - ((exp2(_2637 * (isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0)))) - exp2(_2637 * (isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0))))) * _2752)) - ((exp2(_2639 * _2763) - exp2(_2639 * _2764)) * _2752))) + (_2632 * cbSceneParam._m0[80u].z);
        }
        vec4 _2794 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2550, _2551, 1.0), 0.0);
        float _2803 = exp2((_2792 * (-1.44269502162933349609375)) * (1.0 - _2794.w));
        float _2804 = log2(_2803);
        float _2820 = log2(_2570);
        _2641 = (exp2(_2820 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2804 * cbSceneParam._m0[78u].x)) * _2794.x) / cbSceneParam._m0[78u].x)) + _2567;
        _2643 = (exp2(_2820 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2804 * cbSceneParam._m0[78u].y)) * _2794.y) / cbSceneParam._m0[78u].y)) + _2568;
        _2645 = (exp2(_2820 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2804 * cbSceneParam._m0[78u].z)) * _2794.z) / cbSceneParam._m0[78u].z)) + _2569;
        _2647 = _2803 * _2570;
    }
    else
    {
        _2641 = _2567;
        _2643 = _2568;
        _2645 = _2569;
        _2647 = _2570;
    }
    float _2659 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2660 = _2659 == 3.0;
    float _2661 = log2(_2647);
    float _2668 = exp2(_2661 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_2512 + ((isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0))) * _500))) + ((_2518 + ((isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))) * _1306)) * cbPerFrame._m0[3u].x));
    float _2669 = exp2(_2661 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_2514 + ((isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0))) * _500))) + ((_2520 + ((isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))) * _1306)) * cbPerFrame._m0[3u].x));
    float _2670 = exp2(_2661 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_2516 + ((isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0))) * _500))) + ((_2522 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _1306)) * cbPerFrame._m0[3u].x));
    float _2679 = (_2659 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2679 * (_2660 ? _2668 : (_2668 + (cbSceneParam._m0[72u].w * _2641)));
    SV_Target.y = _2679 * (_2660 ? _2669 : (_2669 + (cbSceneParam._m0[72u].w * _2643)));
    SV_Target.z = _2679 * (_2660 ? _2670 : (_2670 + (cbSceneParam._m0[72u].w * _2645)));
    SV_Target.w = cbInstanceData._m0[_2542].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2542].w;
}


