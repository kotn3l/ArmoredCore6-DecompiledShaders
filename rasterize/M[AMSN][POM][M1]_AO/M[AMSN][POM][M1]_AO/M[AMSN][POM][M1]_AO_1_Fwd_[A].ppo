#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_POM_M1_AO_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_POM_M1_AO_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_POM_M1_AO_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _912;
float _3282;
float _3283;
float _3284;
float _3285;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    float _280 = dot(vec3(_269, _270, _271), vec3(_192, _193, _194));
    float _283 = dot(vec3(_269, _270, _271), vec3(_206, _207, _208));
    float _286 = dot(vec3(_269, _270, _271), vec3(_213, _214, _215));
    float _292 = inversesqrt(dot(vec3(_280, _283, _286), vec3(_280, _283, _286)));
    vec4 _305 = texture(sampler2D(M_AMSN_POM_M1_AO_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _316 = dot(vec4(_305), vec4(1.0, 0.0, 0.0, 0.0)) + (-0.5);
    float _324 = (((cbMtdParam._m0[10u].y * _280) * _292) * _316) + TEXCOORD.x;
    float _325 = (((_283 * cbMtdParam._m0[10u].y) * _292) * _316) + TEXCOORD.y;
    vec4 _337 = texture(sampler2D(M_AMSN_POM_M1_AO_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_324 * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (_325 * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _342 = _337.x * cbMtdParam._m0[9u].x;
    float _343 = _337.y * cbMtdParam._m0[9u].y;
    float _344 = _337.z * cbMtdParam._m0[9u].z;
    vec4 _356 = texture(sampler2D(M_AMSN_POM_M1_AO_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _324) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _325) + cbTextureTilingScale._m0[1u].w));
    float _360 = _356.z;
    float _365 = (_356.x * 2.0) + (-1.0);
    float _367 = (_356.y * 2.0) + (-1.0);
    float _368 = dot(vec2(_365, _367), vec2(_365, _367));
    float _3294 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _373 = sqrt(1.0 - (isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0))));
    float _376 = fma(_373, _213, fma(_367, _206, _365 * _192));
    float _379 = fma(_373, _214, fma(_367, _207, _365 * _193));
    float _382 = fma(_373, _215, fma(_367, _208, _365 * _194));
    float _386 = inversesqrt(dot(vec3(_376, _379, _382), vec3(_376, _379, _382)));
    float _387 = _386 * _376;
    float _388 = _386 * _379;
    float _389 = _386 * _382;
    float _391 = cbMtdParam._m0[10u].x + _356.w;
    float _395 = inversesqrt(dot(vec3(_387, _388, _389), vec3(_387, _388, _389)));
    float _396 = _395 * _387;
    float _397 = _395 * _388;
    float _398 = _395 * _389;
    float _3305 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _399 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
    float _3316 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _3327 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _3338 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _3349 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _419 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _423 = inversesqrt(dot(vec3(_269, _270, _271), vec3(_269, _270, _271)));
    float _424 = _269 * _423;
    float _425 = _270 * _423;
    float _426 = _271 * _423;
    vec4 _431 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _433 = _431.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _592 = sqrt(((_269 * _269) + (_270 * _270)) + (_271 * _271));
        float _598 = (cbMatDynParam._m0[5u].x * _592) + cbMatDynParam._m0[5u].y;
        float _3360 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
        float _599 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
        float _603 = (cbMatDynParam._m0[5u].z * _592) + cbMatDynParam._m0[5u].w;
        float _3371 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0))) - _599)) + _599) < ((_433 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _445 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _446 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _466 = fma(_398, cbSceneParam._m0[5u].z, fma(_397, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _396));
    float _469 = fma(_398, cbSceneParam._m0[6u].z, fma(_397, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _396));
    float _472 = fma(_398, cbSceneParam._m0[7u].z, fma(_397, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _396));
    uint _485 = uint(roundEven(NORMAL.w)) * 13u;
    uint _487 = _485 + 9u;
    uint _488 = _487 + uint(cbMatDynParam._m0[0u].w);
    float _494 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0)))) * cbInstanceData._m0[_488].x;
    float _495 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0)))) * cbInstanceData._m0[_488].y;
    float _496 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0)))) * cbInstanceData._m0[_488].z;
    float _3382 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _497 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
    float _3393 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _498 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
    float _3404 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _499 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
    vec4 _508 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _445, cbSceneParam._m0[86u].y * _446));
    float _512 = ((isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0))) * TEXCOORD.z) * _508.x;
    float _513 = dot(vec3(_396, _397, _398), vec3(_424, _425, _426));
    float _516 = _513 * 2.0;
    float _520 = (_516 * _396) - _424;
    float _521 = (_516 * _397) - _425;
    float _522 = (_516 * _398) - _426;
    float _526 = abs(dot(vec3(_424, _425, _426), vec3(_396, _397, _398)));
    float _3415 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _528 = sqrt(_399);
    float _541 = exp2((_528 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_528 * 3.0));
    float _573 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _577 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _581 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _911;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _637 = fma(_581, cbModelParam._m0[26u].z, fma(_577, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _573));
        float _641 = fma(_581, cbModelParam._m0[27u].z, fma(_577, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _573));
        float _645 = fma(_581, cbModelParam._m0[28u].z, fma(_577, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _573));
        float _669 = _573 + _396;
        float _670 = _577 + _397;
        float _671 = _581 + _398;
        float _681 = fma(_671, cbModelParam._m0[26u].z, fma(_670, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _669)) - _637;
        float _682 = fma(_671, cbModelParam._m0[27u].z, fma(_670, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _669)) - _641;
        float _683 = fma(_671, cbModelParam._m0[28u].z, fma(_670, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _669)) - _645;
        float _687 = inversesqrt(dot(vec3(_681, _682, _683), vec3(_681, _682, _683)));
        float _700 = ((_687 * _681) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_637 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _701 = ((_687 * _682) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_641 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _702 = ((_687 * _683) / cbModelParam._m0[34u].z) + ((((((_645 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _705 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_700, _701, _702), 0.0);
        vec4 _712 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_700, _701, _702), 0.0);
        vec4 _719 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_700, _701, _702), 0.0);
        vec4 _726 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_700, _701, _702), 0.0);
        float _739 = exp2((_705.w + (-0.5)) * 20.0) * 2.0;
        float _740 = _739 * (_705.x + (-0.5));
        float _741 = _739 * (_705.y + (-0.5));
        float _742 = _739 * (_705.z + (-0.5));
        float _749 = exp2((_712.w + (-0.5)) * 20.0) * 2.0;
        float _750 = _749 * (_712.x + (-0.5));
        float _751 = _749 * (_712.y + (-0.5));
        float _752 = _749 * (_712.z + (-0.5));
        float _759 = exp2((_719.w + (-0.5)) * 20.0) * 2.0;
        float _760 = _759 * (_719.x + (-0.5));
        float _761 = _759 * (_719.y + (-0.5));
        float _762 = _759 * (_719.z + (-0.5));
        float _769 = exp2((_726.w + (-0.5)) * 20.0) * 2.0;
        float _770 = _769 * (_726.x + (-0.5));
        float _771 = _769 * (_726.y + (-0.5));
        float _772 = _769 * (_726.z + (-0.5));
        float _773 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _774 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _775 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _776 = _740 * 0.5;
        float _777 = _750 * 0.5;
        float _778 = _760 * 0.5;
        float _779 = dot(vec3(_776, _777, _778), vec3(_776, _777, _778));
        float _784 = (_779 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_779);
        float _793 = (dot(vec3(_396, _397, _398), vec3(_784 * _776, _784 * _777, _784 * _778)) + 1.0) * 0.5;
        float _3441 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _803 = sqrt(((_777 * _777) + (_776 * _776)) + (_778 * _778)) / (_773 + 9.9999997473787516355514526367188e-06);
        float _3452 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _804 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
        float _805 = _804 * 2.0;
        float _809 = (1.0 - _804) / (_804 + 1.0);
        float _3463 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _810 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _819 = ((((1.0 - _810) * (_805 + 2.0)) * exp2(log2(isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))) * (_805 + 1.0))) + _810) * _773;
        float _820 = _741 * 0.5;
        float _821 = _751 * 0.5;
        float _822 = _761 * 0.5;
        float _823 = dot(vec3(_820, _821, _822), vec3(_820, _821, _822));
        float _828 = (_823 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_823);
        float _836 = (dot(vec3(_396, _397, _398), vec3(_828 * _820, _828 * _821, _828 * _822)) + 1.0) * 0.5;
        float _3474 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _845 = sqrt(((_821 * _821) + (_820 * _820)) + (_822 * _822)) / (_774 + 9.9999997473787516355514526367188e-06);
        float _3485 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _846 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _847 = _846 * 2.0;
        float _851 = (1.0 - _846) / (_846 + 1.0);
        float _3496 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _852 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _861 = ((((1.0 - _852) * (_847 + 2.0)) * exp2(log2(isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))) * (_847 + 1.0))) + _852) * _774;
        float _862 = _742 * 0.5;
        float _863 = _752 * 0.5;
        float _864 = _762 * 0.5;
        float _865 = dot(vec3(_862, _863, _864), vec3(_862, _863, _864));
        float _870 = (_865 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_865);
        float _878 = (dot(vec3(_396, _397, _398), vec3(_870 * _862, _870 * _863, _870 * _864)) + 1.0) * 0.5;
        float _3507 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _887 = sqrt(((_863 * _863) + (_862 * _862)) + (_864 * _864)) / (_775 + 9.9999997473787516355514526367188e-06);
        float _3518 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _889 = _888 * 2.0;
        float _893 = (1.0 - _888) / (_888 + 1.0);
        float _3529 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _903 = ((((1.0 - _894) * (_889 + 2.0)) * exp2(log2(isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))) * (_889 + 1.0))) + _894) * _775;
        _911 = _742;
        _913 = _741;
        _914 = _740;
        _915 = _752;
        _916 = _751;
        _917 = _750;
        _918 = _762;
        _919 = _761;
        _920 = _760;
        _921 = _775;
        _922 = _774;
        _923 = _773;
        _924 = cbModelParam._m0[36u].z * (isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0)));
        _925 = cbModelParam._m0[36u].z * (isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0)));
        _926 = cbModelParam._m0[36u].z * (isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0)));
    }
    else
    {
        _911 = _912;
        _913 = _912;
        _914 = _912;
        _915 = _912;
        _916 = _912;
        _917 = _912;
        _918 = _912;
        _919 = _912;
        _920 = _912;
        _921 = _912;
        _922 = _912;
        _923 = _912;
        _924 = 0.0;
        _925 = 0.0;
        _926 = 0.0;
    }
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _955 = fma(_581, cbModelParam._m0[30u].z, fma(_577, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _573));
        float _959 = fma(_581, cbModelParam._m0[31u].z, fma(_577, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _573));
        float _963 = fma(_581, cbModelParam._m0[32u].z, fma(_577, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _573));
        float _986 = _573 + _396;
        float _987 = _577 + _397;
        float _988 = _581 + _398;
        float _998 = fma(_988, cbModelParam._m0[30u].z, fma(_987, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _986)) - _955;
        float _999 = fma(_988, cbModelParam._m0[31u].z, fma(_987, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _986)) - _959;
        float _1000 = fma(_988, cbModelParam._m0[32u].z, fma(_987, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _986)) - _963;
        float _1004 = inversesqrt(dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000)));
        float _1017 = ((_1004 * _998) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_955 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1018 = ((_1004 * _999) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_959 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1019 = ((_1004 * _1000) / cbModelParam._m0[35u].z) + ((((((_963 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        float _1054 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1021.x + (-0.5));
        float _1056 = _1054 * (_1021.y + (-0.5));
        float _1057 = _1054 * (_1021.z + (-0.5));
        float _1064 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1028.x + (-0.5));
        float _1066 = _1064 * (_1028.y + (-0.5));
        float _1067 = _1064 * (_1028.z + (-0.5));
        float _1074 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1035.x + (-0.5));
        float _1076 = _1074 * (_1035.y + (-0.5));
        float _1077 = _1074 * (_1035.z + (-0.5));
        float _1084 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1042.x + (-0.5));
        float _1086 = _1084 * (_1042.y + (-0.5));
        float _1087 = _1084 * (_1042.z + (-0.5));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1090 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1091 = _1055 * 0.5;
        float _1092 = _1065 * 0.5;
        float _1093 = _1075 * 0.5;
        float _1094 = dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093));
        float _1099 = (_1094 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1094);
        float _1107 = (dot(vec3(_396, _397, _398), vec3(_1099 * _1091, _1099 * _1092, _1099 * _1093)) + 1.0) * 0.5;
        float _3570 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1116 = sqrt(((_1092 * _1092) + (_1091 * _1091)) + (_1093 * _1093)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _3581 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _1118 = _1117 * 2.0;
        float _1122 = (1.0 - _1117) / (_1117 + 1.0);
        float _3592 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _1132 = ((((1.0 - _1123) * (_1118 + 2.0)) * exp2(log2(isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * (_1118 + 1.0))) + _1123) * _1088;
        float _1133 = _1056 * 0.5;
        float _1134 = _1066 * 0.5;
        float _1135 = _1076 * 0.5;
        float _1136 = dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135));
        float _1141 = (_1136 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1136);
        float _1149 = (dot(vec3(_396, _397, _398), vec3(_1141 * _1133, _1141 * _1134, _1141 * _1135)) + 1.0) * 0.5;
        float _3603 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1158 = sqrt(((_1134 * _1134) + (_1133 * _1133)) + (_1135 * _1135)) / (_1089 + 9.9999997473787516355514526367188e-06);
        float _3614 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _3625 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * (_1160 + 1.0))) + _1165) * _1089;
        float _1175 = _1057 * 0.5;
        float _1176 = _1067 * 0.5;
        float _1177 = _1077 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(_396, _397, _398), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3636 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1090 + 9.9999997473787516355514526367188e-06);
        float _3647 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3658 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * (_1202 + 1.0))) + _1207) * _1090;
        _1224 = _1057;
        _1225 = _1056;
        _1226 = _1055;
        _1227 = _1067;
        _1228 = _1066;
        _1229 = _1065;
        _1230 = _1077;
        _1231 = _1076;
        _1232 = _1075;
        _1233 = _1090;
        _1234 = _1089;
        _1235 = _1088;
        _1236 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)));
        _1237 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
        _1238 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
    }
    else
    {
        _1224 = _912;
        _1225 = _912;
        _1226 = _912;
        _1227 = _912;
        _1228 = _912;
        _1229 = _912;
        _1230 = _912;
        _1231 = _912;
        _1232 = _912;
        _1233 = _912;
        _1234 = _912;
        _1235 = _912;
        _1236 = 0.0;
        _1237 = 0.0;
        _1238 = 0.0;
    }
    float _1248 = (cbModelParam._m0[1u].x * (_1236 - _924)) + _924;
    float _1249 = (cbModelParam._m0[1u].x * (_1237 - _925)) + _925;
    float _1250 = (cbModelParam._m0[1u].x * (_1238 - _926)) + _926;
    float _1271 = fma(_1250, cbSceneParam._m0[89u].z, fma(_1249, cbSceneParam._m0[89u].y, _1248 * cbSceneParam._m0[89u].x));
    float _1274 = fma(_1250, cbSceneParam._m0[90u].z, fma(_1249, cbSceneParam._m0[90u].y, _1248 * cbSceneParam._m0[90u].x));
    float _1277 = fma(_1250, cbSceneParam._m0[91u].z, fma(_1249, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1248));
    float _1292 = _520 * 0.5;
    float _1293 = _521 * 0.5;
    float _1294 = _522 * 0.5;
    float _1295 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_1226, _1229, _1232, _1235));
    float _1298 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_1225, _1228, _1231, _1234));
    float _1301 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_1224, _1227, _1230, _1233));
    float _1335;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1308 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_911, _915, _918, _921));
        float _1312 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_913, _916, _919, _922));
        float _1316 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_914, _917, _920, _923));
        float _1323 = dot(vec4(cbModelParam._m0[39u]), vec4(_1292, _1293, _1294, 1.0));
        _1335 = dot(vec3(isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)), isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)), isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1323) ? 0.0 : (isnan(0.0) ? _1323 : max(0.0, _1323))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1335 = 1.0;
    }
    float _1346;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1337 = dot(vec4(cbModelParam._m0[40u]), vec4(_1292, _1293, _1294, 1.0));
        _1346 = dot(vec3(isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)), isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)), isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1337) ? 0.0 : (isnan(0.0) ? _1337 : max(0.0, _1337))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1346 = 1.0;
    }
    float _1350 = (_1346 * cbModelParam._m0[1u].x) + (_1335 * (1.0 - cbModelParam._m0[1u].x));
    float _1360 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _399);
    float _1361 = isnan(_1360) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1360 : min(cbModelParam._m0[25u].z, _1360));
    float _1443;
    float _1445;
    float _1447;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1410 = fma(_581, cbModelParam._m0[13u].z, fma(_577, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _573)) + cbModelParam._m0[13u].w;
        float _1414 = fma(_581, cbModelParam._m0[14u].z, fma(_577, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _573)) + cbModelParam._m0[14u].w;
        float _1418 = fma(_581, cbModelParam._m0[15u].z, fma(_577, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _573)) + cbModelParam._m0[15u].w;
        float _1421 = fma(_522, cbModelParam._m0[13u].z, fma(_521, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _520));
        float _1424 = fma(_522, cbModelParam._m0[14u].z, fma(_521, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _520));
        float _1427 = fma(_522, cbModelParam._m0[15u].z, fma(_521, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _520));
        float _1455;
        if (_1421 > 0.0)
        {
            _1455 = abs((1.0 - _1410) / _1421);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1421 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1410 + 1.0) / _1421);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1455 = frontier_phi_19_17_ladder;
        }
        float _1661;
        if (_1424 > 0.0)
        {
            _1661 = abs((1.0 - _1414) / _1424);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1424 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1414 + 1.0) / _1424);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1661 = frontier_phi_28_24_ladder;
        }
        float _1904;
        if (_1427 > 0.0)
        {
            _1904 = abs((1.0 - _1418) / _1427);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1427 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1418 + 1.0) / _1427);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1904 = frontier_phi_40_35_ladder;
        }
        float _1906 = isnan(_1661) ? _1455 : (isnan(_1455) ? _1661 : min(_1455, _1661));
        float _1907 = isnan(_1904) ? _1906 : (isnan(_1906) ? _1904 : min(_1906, _1904));
        float _1911 = (_1907 * _1421) + _1410;
        float _1912 = (_1907 * _1424) + _1414;
        float _1913 = (_1907 * _1427) + _1418;
        float _1914 = _1907 * 9.9999997473787516355514526367188e-05;
        float _1916 = (-1.0) - _1914;
        float _1918 = _1914 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1913 > _1918) || ((_1913 < _1916) || ((_1912 > _1918) || ((_1912 < _1916) || ((_1911 < _1916) || (_1911 > _1918))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2037 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1913, cbModelParam._m0[9u].z, fma(_1912, cbModelParam._m0[9u].y, _1911 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1913, cbModelParam._m0[10u].z, fma(_1912, cbModelParam._m0[10u].y, _1911 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1913, cbModelParam._m0[11u].z, fma(_1912, cbModelParam._m0[11u].y, _1911 * cbModelParam._m0[11u].x))), _1361);
            frontier_phi_18_40_ladder = _2037.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2037.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2037.x * cbModelParam._m0[1u].y;
        }
        _1443 = frontier_phi_18_40_ladder_2;
        _1445 = frontier_phi_18_40_ladder_1;
        _1447 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1431 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_520, _521, _522), _1361);
        _1443 = _1431.x * cbModelParam._m0[1u].y;
        _1445 = _1431.y * cbModelParam._m0[1u].y;
        _1447 = _1431.z * cbModelParam._m0[1u].y;
    }
    float _1451 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _399);
    float _1452 = isnan(_1451) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1451 : min(cbModelParam._m0[25u].w, _1451));
    float _1545;
    float _1547;
    float _1549;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1509 = fma(_581, cbModelParam._m0[21u].z, fma(_577, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _573)) + cbModelParam._m0[21u].w;
        float _1513 = fma(_581, cbModelParam._m0[22u].z, fma(_577, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _573)) + cbModelParam._m0[22u].w;
        float _1517 = fma(_581, cbModelParam._m0[23u].z, fma(_577, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _573)) + cbModelParam._m0[23u].w;
        float _1520 = fma(_522, cbModelParam._m0[21u].z, fma(_521, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _520));
        float _1523 = fma(_522, cbModelParam._m0[22u].z, fma(_521, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _520));
        float _1526 = fma(_522, cbModelParam._m0[23u].z, fma(_521, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _520));
        float _1666;
        if (_1520 > 0.0)
        {
            _1666 = abs((1.0 - _1509) / _1520);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1520 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1509 + 1.0) / _1520);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1666 = frontier_phi_30_26_ladder;
        }
        float _1931;
        if (_1523 > 0.0)
        {
            _1931 = abs((1.0 - _1513) / _1523);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1523 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1513 + 1.0) / _1523);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1931 = frontier_phi_42_37_ladder;
        }
        float _2136;
        if (_1526 > 0.0)
        {
            _2136 = abs((1.0 - _1517) / _1526);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1526 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1517 + 1.0) / _1526);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2136 = frontier_phi_51_48_ladder;
        }
        float _2138 = isnan(_1931) ? _1666 : (isnan(_1666) ? _1931 : min(_1666, _1931));
        float _2139 = isnan(_2136) ? _2138 : (isnan(_2138) ? _2136 : min(_2138, _2136));
        float _2143 = (_2139 * _1520) + _1509;
        float _2144 = (_2139 * _1523) + _1513;
        float _2145 = (_2139 * _1526) + _1517;
        float _2146 = _2139 * 9.9999997473787516355514526367188e-05;
        float _2147 = (-1.0) - _2146;
        float _2149 = _2146 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2145 > _2149) || ((_2145 < _2147) || ((_2144 > _2149) || ((_2144 < _2147) || ((_2143 < _2147) || (_2143 > _2149))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2343 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2145, cbModelParam._m0[17u].z, fma(_2144, cbModelParam._m0[17u].y, _2143 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2145, cbModelParam._m0[18u].z, fma(_2144, cbModelParam._m0[18u].y, _2143 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2145, cbModelParam._m0[19u].z, fma(_2144, cbModelParam._m0[19u].y, _2143 * cbModelParam._m0[19u].x))), _1452);
            frontier_phi_27_51_ladder = _2343.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2343.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2343.x * cbModelParam._m0[1u].z;
        }
        _1545 = frontier_phi_27_51_ladder_2;
        _1547 = frontier_phi_27_51_ladder_1;
        _1549 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1529 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_520, _521, _522), _1452);
        _1545 = _1529.x * cbModelParam._m0[1u].z;
        _1547 = _1529.y * cbModelParam._m0[1u].z;
        _1549 = _1529.z * cbModelParam._m0[1u].z;
    }
    float _1561 = ((((1.0 - _541) * ((_528 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_541 * _528)) * _512;
    float _1562 = _1561 * ((cbModelParam._m0[1u].w * (_1545 - _1443)) + _1443);
    float _1563 = _1561 * ((cbModelParam._m0[1u].w * (_1547 - _1445)) + _1445);
    float _1564 = _1561 * ((cbModelParam._m0[1u].w * (_1549 - _1447)) + _1447);
    float _1567 = fma(_1564, cbSceneParam._m0[89u].z, fma(_1563, cbSceneParam._m0[89u].y, _1562 * cbSceneParam._m0[89u].x));
    float _1570 = fma(_1564, cbSceneParam._m0[90u].z, fma(_1563, cbSceneParam._m0[90u].y, _1562 * cbSceneParam._m0[90u].x));
    float _1573 = fma(_1564, cbSceneParam._m0[91u].z, fma(_1563, cbSceneParam._m0[91u].y, _1562 * cbSceneParam._m0[91u].x));
    uvec4 _1583 = floatBitsToUint(cbInstanceData._m0[_485 + 5u]);
    uint _1585 = _1583.x * 14u;
    uint _1586 = _1585 + 13u;
    float _1593 = _512 + (-1.0);
    float _1598 = (cbLight._m0[_1586].x * _1593) + 1.0;
    float _1599 = (cbLight._m0[_1586].y * _1593) + 1.0;
    float _1600 = (cbLight._m0[_1586].z * _1593) + 1.0;
    float _1601 = (cbLight._m0[_1586].w * _1593) + 1.0;
    uint _1602 = _1585 + 5u;
    float _1608 = isnan(1.0) ? _1599 : (isnan(_1599) ? 1.0 : min(_1599, 1.0));
    uint _1612 = _1585 + 4u;
    float _1619 = isnan(1.0) ? _1598 : (isnan(_1598) ? 1.0 : min(_1598, 1.0));
    uint _1623 = _1585 | 1u;
    float _1634 = dot(vec3(cbLight._m0[_1585].xyz), vec3(_396, _397, _398));
    float _1637 = dot(vec3(cbLight._m0[_1623].xyz), vec3(_396, _397, _398));
    float _3794 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
    float _3805 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
    float _1642 = (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * 0.3183098733425140380859375;
    float _1644 = (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * 0.3183098733425140380859375;
    float _1651 = ((cbLight._m0[_1602].x * _1608) * _1644) + ((cbLight._m0[_1612].x * _1619) * _1642);
    float _1652 = ((_1608 * cbLight._m0[_1602].y) * _1644) + ((_1619 * cbLight._m0[_1612].y) * _1642);
    float _1653 = ((_1608 * cbLight._m0[_1602].z) * _1644) + ((_1619 * cbLight._m0[_1612].z) * _1642);
    uvec4 _1658 = floatBitsToUint(cbLight._m0[_1585 + 12u]);
    bool _1660 = _1658.x == 0u;
    float _1671;
    float _1673;
    float _1675;
    if (_1660)
    {
        _1671 = _1651;
        _1673 = _1652;
        _1675 = _1653;
    }
    else
    {
        uint _1679 = _1585 + 6u;
        float _1695 = (dot(vec3(cbLight._m0[_1585 + 2u].xyz), vec3(_396, _397, _398)) * 0.5) + 0.5;
        float _1696 = _1695 * _1695;
        float _3816 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1697 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1698 = isnan(1.0) ? _1600 : (isnan(_1600) ? 1.0 : min(_1600, 1.0));
        _1671 = (((cbLight._m0[_1679].x * 0.3183098733425140380859375) * _1697) * _1698) + _1651;
        _1673 = (((cbLight._m0[_1679].y * 0.3183098733425140380859375) * _1697) * _1698) + _1652;
        _1675 = (((cbLight._m0[_1679].z * 0.3183098733425140380859375) * _1697) * _1698) + _1653;
    }
    bool _1678 = _1658.y == 0u;
    float _1716;
    float _1718;
    float _1720;
    if (_1678)
    {
        _1716 = _1671;
        _1718 = _1673;
        _1720 = _1675;
    }
    else
    {
        uint _1875 = _1585 + 7u;
        float _1891 = (dot(vec3(cbLight._m0[_1585 + 3u].xyz), vec3(_396, _397, _398)) * 0.5) + 0.5;
        float _1892 = _1891 * _1891;
        float _3832 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
        float _1893 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1894 = isnan(1.0) ? _1601 : (isnan(_1601) ? 1.0 : min(_1601, 1.0));
        _1716 = (((cbLight._m0[_1875].x * 0.3183098733425140380859375) * _1893) * _1894) + _1671;
        _1718 = (((cbLight._m0[_1875].y * 0.3183098733425140380859375) * _1893) * _1894) + _1673;
        _1720 = (((cbLight._m0[_1875].z * 0.3183098733425140380859375) * _1893) * _1894) + _1675;
    }
    uint _1723 = _1585 + 8u;
    float _1736 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1585].w)) * _399) * 0.949999988079071044921875);
    float _1737 = _1736 * _1736;
    float _1738 = cbLight._m0[_1585].x + _424;
    float _1739 = cbLight._m0[_1585].y + _425;
    float _1740 = cbLight._m0[_1585].z + _426;
    float _1744 = inversesqrt(dot(vec3(_1738, _1739, _1740), vec3(_1738, _1739, _1740)));
    float _1745 = _1744 * _1738;
    float _1746 = _1744 * _1739;
    float _1747 = _1744 * _1740;
    float _1748 = dot(vec3(_396, _397, _398), vec3(cbLight._m0[_1585].xyz));
    float _3848 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _1751 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _3859 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _1752 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _1753 = dot(vec3(_396, _397, _398), vec3(_1745, _1746, _1747));
    float _3870 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
    float _1756 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _1757 = dot(vec3(cbLight._m0[_1585].xyz), vec3(_1745, _1746, _1747));
    float _3881 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _1761 = _1737 * _1737;
    float _1765 = ((_1756 * _1756) * (_1761 + (-1.0))) + 1.0;
    float _1776 = (exp2(log2(1.0 - (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1777 = 1.0 - _1737;
    float _1788 = (0.5 / (((_1752 * ((_1751 * _1777) + _1737)) + 9.9999999392252902907785028219223e-09) + (((_1752 * _1777) + _1737) * _1751))) * _1751;
    float _3892 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1790 = (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * (_1761 / ((_1765 * _1765) * 3.141590118408203125));
    uint _1801 = _1585 + 9u;
    float _1812 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1623].w)) * _399) * 0.949999988079071044921875);
    float _1813 = _1812 * _1812;
    float _1814 = cbLight._m0[_1623].x + _424;
    float _1815 = cbLight._m0[_1623].y + _425;
    float _1816 = cbLight._m0[_1623].z + _426;
    float _1820 = inversesqrt(dot(vec3(_1814, _1815, _1816), vec3(_1814, _1815, _1816)));
    float _1821 = _1820 * _1814;
    float _1822 = _1820 * _1815;
    float _1823 = _1820 * _1816;
    float _1824 = dot(vec3(_396, _397, _398), vec3(cbLight._m0[_1623].xyz));
    float _3903 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _1827 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _1828 = dot(vec3(_396, _397, _398), vec3(_1821, _1822, _1823));
    float _3914 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1831 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _1832 = dot(vec3(cbLight._m0[_1623].xyz), vec3(_1821, _1822, _1823));
    float _3925 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1836 = _1813 * _1813;
    float _1840 = ((_1831 * _1831) * (_1836 + (-1.0))) + 1.0;
    float _1849 = (exp2(log2(1.0 - (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1850 = 1.0 - _1813;
    float _1860 = (0.5 / (((_1752 * ((_1827 * _1850) + _1813)) + 9.9999999392252902907785028219223e-09) + (((_1752 * _1850) + _1813) * _1827))) * _1827;
    float _3936 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1862 = (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_1836 / ((_1840 * _1840) * 3.141590118408203125));
    float _1872 = (((_1849 * cbLight._m0[_1801].x) * _1862) * _1608) + (((_1776 * cbLight._m0[_1723].x) * _1790) * _1619);
    float _1873 = (((_1849 * cbLight._m0[_1801].y) * _1862) * _1608) + (((_1776 * cbLight._m0[_1723].y) * _1790) * _1619);
    float _1874 = (((_1849 * cbLight._m0[_1801].z) * _1862) * _1608) + (((_1776 * cbLight._m0[_1723].z) * _1790) * _1619);
    float _1936;
    float _1938;
    float _1940;
    if (_1660)
    {
        _1936 = _1872;
        _1938 = _1873;
        _1940 = _1874;
    }
    else
    {
        uint _1942 = _1585 + 2u;
        uint _1946 = _1585 + 10u;
        float _1960 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1942].w)) * _399) * 0.949999988079071044921875);
        float _1961 = _1960 * _1960;
        float _1962 = cbLight._m0[_1942].x + _424;
        float _1963 = cbLight._m0[_1942].y + _425;
        float _1964 = cbLight._m0[_1942].z + _426;
        float _1968 = inversesqrt(dot(vec3(_1962, _1963, _1964), vec3(_1962, _1963, _1964)));
        float _1969 = _1968 * _1962;
        float _1970 = _1968 * _1963;
        float _1971 = _1968 * _1964;
        float _1972 = dot(vec3(_396, _397, _398), vec3(cbLight._m0[_1942].xyz));
        float _3947 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
        float _1975 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1976 = dot(vec3(_396, _397, _398), vec3(_1969, _1970, _1971));
        float _3958 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
        float _1979 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1980 = dot(vec3(cbLight._m0[_1942].xyz), vec3(_1969, _1970, _1971));
        float _3969 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        float _1984 = _1961 * _1961;
        float _1988 = ((_1979 * _1979) * (_1984 + (-1.0))) + 1.0;
        float _1997 = (exp2(log2(1.0 - (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1998 = 1.0 - _1961;
        float _2008 = (0.5 / (((_1752 * ((_1975 * _1998) + _1961)) + 9.9999999392252902907785028219223e-09) + (((_1752 * _1998) + _1961) * _1975))) * _1975;
        float _3980 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
        float _2010 = (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_1984 / ((_1988 * _1988) * 3.141590118408203125));
        float _2011 = isnan(1.0) ? _1600 : (isnan(_1600) ? 1.0 : min(_1600, 1.0));
        _1936 = (((_1997 * cbLight._m0[_1946].x) * _2010) * _2011) + _1872;
        _1938 = (((_1997 * cbLight._m0[_1946].y) * _2010) * _2011) + _1873;
        _1940 = (((_1997 * cbLight._m0[_1946].z) * _2010) * _2011) + _1874;
    }
    float _2046;
    float _2048;
    float _2050;
    if (_1678)
    {
        _2046 = _1936;
        _2048 = _1938;
        _2050 = _1940;
    }
    else
    {
        uint _2057 = _1585 + 3u;
        uint _2061 = _1585 + 11u;
        float _2075 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2057].w)) * _399) * 0.949999988079071044921875);
        float _2076 = _2075 * _2075;
        float _2077 = cbLight._m0[_2057].x + _424;
        float _2078 = cbLight._m0[_2057].y + _425;
        float _2079 = cbLight._m0[_2057].z + _426;
        float _2083 = inversesqrt(dot(vec3(_2077, _2078, _2079), vec3(_2077, _2078, _2079)));
        float _2084 = _2083 * _2077;
        float _2085 = _2083 * _2078;
        float _2086 = _2083 * _2079;
        float _2087 = dot(vec3(_396, _397, _398), vec3(cbLight._m0[_2057].xyz));
        float _3996 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        float _2090 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _2091 = dot(vec3(_396, _397, _398), vec3(_2084, _2085, _2086));
        float _4007 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
        float _2094 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _2095 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_2084, _2085, _2086));
        float _4018 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        float _2099 = _2076 * _2076;
        float _2103 = ((_2094 * _2094) * (_2099 + (-1.0))) + 1.0;
        float _2112 = (exp2(log2(1.0 - (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2113 = 1.0 - _2076;
        float _2123 = (0.5 / (((_1752 * ((_2090 * _2113) + _2076)) + 9.9999999392252902907785028219223e-09) + (((_1752 * _2113) + _2076) * _2090))) * _2090;
        float _4029 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2125 = (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_2099 / ((_2103 * _2103) * 3.141590118408203125));
        float _2126 = isnan(1.0) ? _1601 : (isnan(_1601) ? 1.0 : min(_1601, 1.0));
        _2046 = (((_2112 * cbLight._m0[_2061].x) * _2125) * _2126) + _1936;
        _2048 = (((_2112 * cbLight._m0[_2061].y) * _2125) * _2126) + _1938;
        _2050 = (((_2112 * cbLight._m0[_2061].z) * _2125) * _2126) + _1940;
    }
    float _2260;
    float _2262;
    float _2264;
    float _2266;
    float _2268;
    float _2270;
    if (_1583.y == 0u)
    {
        float _2201 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2202 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2201;
        float _2203 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2201;
        float _2204 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2201;
        uvec4 _2216 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2217 = _2216.x;
        uint _2228 = uint((float(_2216.y) * floor(float(uint(cbSceneParam._m0[85u].y * _446) / _2217))) + floor(float(uint(cbSceneParam._m0[85u].x * _445) / _2217)));
        float _2238 = (log2(_2204 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2239 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        uint _2242 = uint(isnan(14.0) ? _2239 : (isnan(_2239) ? 14.0 : min(_2239, 14.0)));
        uvec4 _2247 = texelFetch(g_lightClusterGridBuffer, int(((_2242 << 2u) + (_2228 << 6u)) >> 2u));
        uint _2248 = _2247.x;
        uint _2249 = _2216.z;
        float _2348;
        float _2350;
        float _2352;
        float _2354;
        float _2356;
        float _2358;
        if (((((1u << ((_2249 >> 4u) & 15u)) + 4294967295u) & _2248) == 0u) || ((_2249 & 240u) == 0u))
        {
            _2348 = 0.0;
            _2350 = 0.0;
            _2352 = 0.0;
            _2354 = 0.0;
            _2356 = 0.0;
            _2358 = 0.0;
        }
        else
        {
            float _2349;
            float _2351;
            float _2353;
            float _2355;
            float _2357;
            float _2359;
            float _2500 = 0.0;
            float _2501 = 0.0;
            float _2502 = 0.0;
            float _2503 = 0.0;
            float _2504 = 0.0;
            float _2505 = 0.0;
            uint _2506 = 0u;
            uint _2515;
            bool _2516;
            for (;;)
            {
                _2515 = texelFetch(g_lightClassification, int((((_2242 << 5u) + (_2228 << 9u)) + (_2506 << 2u)) >> 2u)).x;
                _2516 = _2515 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2516)
                {
                    frontier_phi_68_pred = _2502;
                    frontier_phi_68_pred_1 = _2505;
                    frontier_phi_68_pred_2 = _2504;
                    frontier_phi_68_pred_3 = _2503;
                    frontier_phi_68_pred_4 = _2501;
                    frontier_phi_68_pred_5 = _2500;
                }
                else
                {
                    float _2645;
                    float _2646;
                    float _2647;
                    float _2648;
                    float _2649;
                    float _2650;
                    uint _2651;
                    _2645 = _2500;
                    _2646 = _2501;
                    _2647 = _2502;
                    _2648 = _2503;
                    _2649 = _2504;
                    _2650 = _2505;
                    _2651 = _2515;
                    float _2572;
                    float _2573;
                    float _2574;
                    float _2575;
                    float _2576;
                    float _2577;
                    for (;;)
                    {
                        uint _2655 = uint(findLSB(_2651)) + (_2506 << 5u);
                        uint _2652 = (_2651 + 4294967295u) & _2651;
                        uint _2657 = _2655 * 48u;
                        vec4 _2671 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2657)).x, texelFetch(g_PointLightRenderingBuffer, int(_2657 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2657 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2657 + 3u)).x));
                        uint _2677 = (_2655 * 48u) + 4u;
                        vec4 _2690 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2677)).x, texelFetch(g_PointLightRenderingBuffer, int(_2677 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2677 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2677 + 3u)).x));
                        uint _2696 = (_2655 * 48u) + 8u;
                        vec3 _2707 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2696)).x, texelFetch(g_PointLightRenderingBuffer, int(_2696 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2696 + 2u)).x));
                        float _2711 = _2671.x - _2202;
                        float _2712 = _2671.y - _2203;
                        float _2713 = _2671.z - _2204;
                        float _2714 = dot(vec3(_2711, _2712, _2713), vec3(_2711, _2712, _2713));
                        float _2717 = inversesqrt(_2714);
                        float _2718 = _2717 * _2711;
                        float _2719 = _2717 * _2712;
                        float _2720 = _2717 * _2713;
                        float _2721 = dot(vec3(_466, _469, _472), vec3(_2718, _2719, _2720));
                        float _2726 = 1.0 - (_2714 * _2671.w);
                        float _4055 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
                        float _2727 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
                        float _2728 = sqrt(_2714) * _2690.w;
                        float _2731 = 1.39999997615814208984375 / (_2728 + 1.39999997615814208984375);
                        float _2732 = _2731 * _2731;
                        float _2735 = ((1.0 - _2732) * _2721) + _2732;
                        float _2738 = _2728 * _2728;
                        float _2742 = ((isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0))) * _2727) / ((_2738 * 0.699999988079071044921875) + 1.0);
                        float _2746 = (-0.0) - _2202;
                        float _2747 = (-0.0) - _2203;
                        float _2748 = (-0.0) - _2204;
                        float _2752 = inversesqrt(dot(vec3(_2746, _2747, _2748), vec3(_2746, _2747, _2748)));
                        float _2753 = _2752 * _2746;
                        float _2754 = _2752 * _2747;
                        float _2755 = _2752 * _2748;
                        float _2763 = exp2(log2(1.0 / ((_2738 * 3.5) + 5.0)) * 0.25);
                        float _2764 = 1.0 - _528;
                        float _2771 = sqrt(1.0 - ((1.0 - (_2764 * _2764)) * (1.0 - (_2763 * _2763))));
                        float _2772 = _2771 * _2771;
                        float _2773 = _2772 * _2772;
                        float _2774 = _2753 + _2718;
                        float _2775 = _2754 + _2719;
                        float _2776 = _2755 + _2720;
                        float _2780 = inversesqrt(dot(vec3(_2774, _2775, _2776), vec3(_2774, _2775, _2776)));
                        float _2784 = dot(vec3(_466, _469, _472), vec3(_2753, _2754, _2755));
                        float _4071 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
                        float _2787 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
                        float _2788 = dot(vec3(_466, _469, _472), vec3(_2780 * _2774, _2780 * _2775, _2780 * _2776));
                        float _4082 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
                        float _2791 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
                        float _2795 = ((_2791 * _2791) * (_2773 + (-1.0))) + 1.0;
                        float _2796 = _2731 * _2772;
                        float _2797 = _2796 * _2796;
                        float _2800 = ((1.0 - _2797) * _2721) + _2797;
                        float _4093 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
                        float _2801 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
                        float _2802 = 1.0 - _2772;
                        float _2812 = (0.5 / (((_2801 * ((_2787 * _2802) + _2772)) + 9.9999999392252902907785028219223e-09) + (((_2801 * _2802) + _2772) * _2787))) * _2801;
                        float _4104 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
                        float _2823 = (((_2773 * 3.1415927410125732421875) * (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0)))) / ((_2795 * _2795) * ((_2738 * 2.1991131305694580078125) + 3.141590118408203125))) * _2727;
                        _2575 = (_2742 * _2690.x) + _2648;
                        _2576 = (_2742 * _2690.y) + _2649;
                        _2577 = (_2742 * _2690.z) + _2650;
                        _2572 = (_2823 * _2707.x) + _2645;
                        _2573 = (_2823 * _2707.y) + _2646;
                        _2574 = (_2823 * _2707.z) + _2647;
                        if (_2652 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2645 = _2572;
                            _2646 = _2573;
                            _2647 = _2574;
                            _2648 = _2575;
                            _2649 = _2576;
                            _2650 = _2577;
                            _2651 = _2652;
                        }
                    }
                    frontier_phi_68_pred = _2574;
                    frontier_phi_68_pred_1 = _2577;
                    frontier_phi_68_pred_2 = _2576;
                    frontier_phi_68_pred_3 = _2575;
                    frontier_phi_68_pred_4 = _2573;
                    frontier_phi_68_pred_5 = _2572;
                }
                _2353 = frontier_phi_68_pred;
                _2359 = frontier_phi_68_pred_1;
                _2357 = frontier_phi_68_pred_2;
                _2355 = frontier_phi_68_pred_3;
                _2351 = frontier_phi_68_pred_4;
                _2349 = frontier_phi_68_pred_5;
                uint _2507 = _2506 + 1u;
                if (_2507 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2500 = _2349;
                    _2501 = _2351;
                    _2502 = _2353;
                    _2503 = _2355;
                    _2504 = _2357;
                    _2505 = _2359;
                    _2506 = _2507;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2348 = _2349;
            _2350 = _2351;
            _2352 = _2353;
            _2354 = _2355;
            _2356 = _2357;
            _2358 = _2359;
        }
        uvec4 _2362 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2363 = _2362.z;
        uint _2365 = (_2363 >> 8u) & 15u;
        float _2468;
        float _2470;
        float _2472;
        float _2474;
        float _2476;
        float _2478;
        if (((4294967295u << _2365) & _2248) == 0u)
        {
            _2468 = _2348;
            _2470 = _2350;
            _2472 = _2352;
            _2474 = _2354;
            _2476 = _2356;
            _2478 = _2358;
        }
        else
        {
            float _2493 = inversesqrt(dot(vec3(_2202, _2203, _2204), vec3(_2202, _2203, _2204)));
            float _2494 = _2493 * _2202;
            float _2495 = _2493 * _2203;
            float _2496 = _2493 * _2204;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2365 < ((_2363 >> 12u) & 15u))
            {
                float _2469;
                float _2471;
                float _2473;
                float _2475;
                float _2477;
                float _2479;
                float _2628 = _2348;
                float _2629 = _2350;
                float _2630 = _2352;
                float _2631 = _2354;
                float _2632 = _2356;
                float _2633 = _2358;
                uint _2634 = _2365;
                uint _2643;
                bool _2644;
                for (;;)
                {
                    _2643 = texelFetch(g_lightClassification, int((((_2242 << 5u) + (_2228 << 9u)) + (_2634 << 2u)) >> 2u)).x;
                    _2644 = _2643 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2644)
                    {
                        frontier_phi_79_pred = _2633;
                        frontier_phi_79_pred_1 = _2632;
                        frontier_phi_79_pred_2 = _2631;
                        frontier_phi_79_pred_3 = _2630;
                        frontier_phi_79_pred_4 = _2629;
                        frontier_phi_79_pred_5 = _2628;
                    }
                    else
                    {
                        float _2837;
                        float _2838;
                        float _2839;
                        float _2840;
                        float _2841;
                        float _2842;
                        float _3133;
                        float _3134;
                        float _3135;
                        float _3136;
                        float _3137;
                        float _3138;
                        float _2850 = _2628;
                        float _2851 = _2629;
                        float _2852 = _2630;
                        float _2853 = _2631;
                        float _2854 = _2632;
                        float _2855 = _2633;
                        uint _2856 = _2643;
                        uint _2857;
                        vec4 _2882;
                        float _2883;
                        vec4 _2898;
                        vec3 _2910;
                        vec4 _2926;
                        vec4 _2942;
                        float _2989;
                        bool _2990;
                        for (;;)
                        {
                            uint _2867 = ((_2634 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2856));
                            _2857 = (_2856 + 4294967295u) & _2856;
                            uint _2869 = _2867 * 40u;
                            _2882 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2869)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 3u)).x));
                            _2883 = _2882.w;
                            uint _2885 = (_2867 * 40u) + 4u;
                            _2898 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2885)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 3u)).x));
                            uint _2900 = (_2867 * 40u) + 8u;
                            _2910 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2900)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 2u)).x));
                            uint _2913 = (_2867 * 40u) + 16u;
                            _2926 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2913)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 3u)).x));
                            uint _2929 = (_2867 * 40u) + 20u;
                            _2942 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2929)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 3u)).x));
                            uint _2945 = (_2867 * 40u) + 24u;
                            vec4 _2958 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2945)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 3u)).x));
                            uint _2964 = (_2867 * 40u) + 28u;
                            vec4 _2977 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2964)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 3u)).x));
                            _2989 = fma(_2204, _2977.z, fma(_2203, _2977.y, _2977.x * _2202)) + _2977.w;
                            _2990 = !((fma(_2204, _2958.z, fma(_2203, _2958.y, _2958.x * _2202)) + _2958.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2990)
                            {
                                float _3017 = _2882.x - _2202;
                                float _3018 = _2882.y - _2203;
                                float _3019 = _2882.z - _2204;
                                float _3020 = dot(vec3(_3017, _3018, _3019), vec3(_3017, _3018, _3019));
                                float _3023 = inversesqrt(_3020);
                                float _3024 = _3023 * _3017;
                                float _3025 = _3023 * _3018;
                                float _3026 = _3023 * _3019;
                                float _3030 = 1.0 - (_3020 / (_2883 * _2883));
                                float _4115 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                                float _3031 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
                                float _3035 = sqrt(_3020) * _2898.w;
                                float _3037 = 1.39999997615814208984375 / (_3035 + 1.39999997615814208984375);
                                float _3038 = _3037 * _3037;
                                float _3041 = ((1.0 - _3038) * dot(vec3(_3024, _3025, _3026), vec3(_466, _469, _472))) + _3038;
                                float _3044 = _3035 * _3035;
                                float _3048 = (fma(_2204, _2926.z, fma(_2203, _2926.y, _2926.x * _2202)) + _2926.w) / _2989;
                                float _3049 = (fma(_2204, _2942.z, fma(_2203, _2942.y, _2942.x * _2202)) + _2942.w) / _2989;
                                float _3053 = 1.0 - dot(vec2(_3048, _3049), vec2(_3048, _3049));
                                float _4131 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                                float _3054 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
                                float _3055 = _3054 * (((isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0))) * _3031) / ((_3044 * 0.699999988079071044921875) + 1.0));
                                float _3067 = exp2(log2(1.0 / ((_3044 * 3.5) + 5.0)) * 0.25);
                                float _3068 = 1.0 - _528;
                                float _3075 = sqrt(1.0 - ((1.0 - (_3068 * _3068)) * (1.0 - (_3067 * _3067))));
                                float _3076 = _3075 * _3075;
                                float _3077 = _3076 * _3076;
                                float _3078 = _3024 - _2494;
                                float _3079 = _3025 - _2495;
                                float _3080 = _3026 - _2496;
                                float _3084 = inversesqrt(dot(vec3(_3078, _3079, _3080), vec3(_3078, _3079, _3080)));
                                float _3088 = dot(vec3(_466, _469, _472), vec3((-0.0) - _2494, (-0.0) - _2495, (-0.0) - _2496));
                                float _4142 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                                float _3091 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
                                float _3092 = dot(vec3(_466, _469, _472), vec3(_3084 * _3078, _3084 * _3079, _3084 * _3080));
                                float _4153 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                                float _3095 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
                                float _3099 = ((_3095 * _3095) * (_3077 + (-1.0))) + 1.0;
                                float _3100 = _3037 * _3076;
                                float _3101 = _3100 * _3100;
                                float _3107 = ((1.0 - _3101) * dot(vec3(_466, _469, _472), vec3(_3024, _3025, _3026))) + _3101;
                                float _4164 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                                float _3108 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
                                float _3109 = 1.0 - _3076;
                                float _3119 = (0.5 / (((_3108 * ((_3091 * _3109) + _3076)) + 9.9999999392252902907785028219223e-09) + (((_3108 * _3109) + _3076) * _3091))) * _3108;
                                float _4175 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                                float _3129 = (_3054 * _3031) * (((_3077 * 3.1415927410125732421875) * (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0)))) / ((_3099 * _3099) * ((_3044 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3055 * _2898.z;
                                frontier_phi_85_pred_1 = _3055 * _2898.y;
                                frontier_phi_85_pred_2 = _3055 * _2898.x;
                                frontier_phi_85_pred_3 = _3129 * _2910.z;
                                frontier_phi_85_pred_4 = _3129 * _2910.y;
                                frontier_phi_85_pred_5 = _3129 * _2910.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3138 = frontier_phi_85_pred;
                            _3137 = frontier_phi_85_pred_1;
                            _3136 = frontier_phi_85_pred_2;
                            _3135 = frontier_phi_85_pred_3;
                            _3134 = frontier_phi_85_pred_4;
                            _3133 = frontier_phi_85_pred_5;
                            _2840 = _3136 + _2853;
                            _2841 = _3137 + _2854;
                            _2842 = _3138 + _2855;
                            _2837 = _3133 + _2850;
                            _2838 = _3134 + _2851;
                            _2839 = _3135 + _2852;
                            if (_2857 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2850 = _2837;
                                _2851 = _2838;
                                _2852 = _2839;
                                _2853 = _2840;
                                _2854 = _2841;
                                _2855 = _2842;
                                _2856 = _2857;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2842;
                        frontier_phi_79_pred_1 = _2841;
                        frontier_phi_79_pred_2 = _2840;
                        frontier_phi_79_pred_3 = _2839;
                        frontier_phi_79_pred_4 = _2838;
                        frontier_phi_79_pred_5 = _2837;
                    }
                    _2479 = frontier_phi_79_pred;
                    _2477 = frontier_phi_79_pred_1;
                    _2475 = frontier_phi_79_pred_2;
                    _2473 = frontier_phi_79_pred_3;
                    _2471 = frontier_phi_79_pred_4;
                    _2469 = frontier_phi_79_pred_5;
                    uint _2635 = _2634 + 1u;
                    if (_2635 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2628 = _2469;
                        _2629 = _2471;
                        _2630 = _2473;
                        _2631 = _2475;
                        _2632 = _2477;
                        _2633 = _2479;
                        _2634 = _2635;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2475;
                frontier_phi_60_61_ladder_1 = _2479;
                frontier_phi_60_61_ladder_2 = _2477;
                frontier_phi_60_61_ladder_3 = _2473;
                frontier_phi_60_61_ladder_4 = _2471;
                frontier_phi_60_61_ladder_5 = _2469;
            }
            else
            {
                frontier_phi_60_61_ladder = _2354;
                frontier_phi_60_61_ladder_1 = _2358;
                frontier_phi_60_61_ladder_2 = _2356;
                frontier_phi_60_61_ladder_3 = _2352;
                frontier_phi_60_61_ladder_4 = _2350;
                frontier_phi_60_61_ladder_5 = _2348;
            }
            _2468 = frontier_phi_60_61_ladder_5;
            _2470 = frontier_phi_60_61_ladder_4;
            _2472 = frontier_phi_60_61_ladder_3;
            _2474 = frontier_phi_60_61_ladder;
            _2476 = frontier_phi_60_61_ladder_2;
            _2478 = frontier_phi_60_61_ladder_1;
        }
        float _2483 = isnan(1.0) ? _512 : (isnan(_512) ? 1.0 : min(_512, 1.0));
        _2260 = (_2483 * _2474) + _1716;
        _2262 = (_2483 * _2476) + _1718;
        _2264 = (_2483 * _2478) + _1720;
        _2266 = ((_2468 * 0.039999999105930328369140625) * _2483) + _2046;
        _2268 = ((_2470 * 0.039999999105930328369140625) * _2483) + _2048;
        _2270 = ((_2472 * 0.039999999105930328369140625) * _2483) + _2050;
    }
    else
    {
        _2260 = _1716;
        _2262 = _1718;
        _2264 = _1720;
        _2266 = _2046;
        _2268 = _2048;
        _2270 = _2050;
    }
    float _4191 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _4202 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _4213 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _2287 = ((isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_2260 + ((isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0))) * _512))) + ((_2266 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _1350)) * cbPerFrame._m0[3u].x);
    float _2288 = ((isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_2262 + ((isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0))) * _512))) + ((_2268 + ((isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))) * _1350)) * cbPerFrame._m0[3u].x);
    float _2289 = ((isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_2264 + ((isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0))) * _512))) + ((_2270 + ((isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))) * _1350)) * cbPerFrame._m0[3u].x);
    uint _2290 = _485 + 6u;
    float _2298 = _445 / cbSceneParam._m0[86u].x;
    float _2299 = _446 / cbSceneParam._m0[86u].y;
    vec4 _2313 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2298, _2299, (log2((isnan(cbSceneParam._m0[77u].w) ? _419 : (isnan(_419) ? cbSceneParam._m0[77u].w : min(_419, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2315 = _2313.x;
    float _2316 = _2313.y;
    float _2317 = _2313.z;
    float _2318 = _2313.w;
    float _2410;
    float _2412;
    float _2414;
    float _2416;
    if (_419 > cbSceneParam._m0[78u].w)
    {
        float _2373 = isnan(_419) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _419 : min(cbSceneParam._m0[80u].w, _419));
        float _2374 = _2373 / _419;
        float _2385 = _2374 * _269;
        float _2386 = _270 * _2374;
        float _2387 = (-0.0) - _2386;
        float _2388 = _2374 * _271;
        float _2390 = (cbSceneParam._m0[77u].w * _2387) / _2373;
        float _2391 = _2390 + cbSceneParam._m0[79u].w;
        float _2392 = cbSceneParam._m0[79u].w - _2386;
        float _2398 = sqrt(((_2385 * _2385) + (_2386 * _2386)) + (_2388 * _2388));
        float _2401 = (1.0 - (cbSceneParam._m0[77u].w / _2373)) * _2398;
        float _2406 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2408 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2585;
        if (abs((_2387 - _2390) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2585 = ((((_2391 > 0.0) ? exp2(_2406 * _2391) : (2.0 - exp2(_2408 * _2391))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2401;
        }
        else
        {
            float _2529 = 1.0 / cbSceneParam._m0[80u].x;
            float _2530 = isnan(_2392) ? _2391 : (isnan(_2391) ? _2392 : max(_2391, _2392));
            float _2531 = isnan(_2392) ? _2391 : (isnan(_2391) ? _2392 : min(_2391, _2392));
            float _2540 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : min(_2530, 0.0));
            float _2541 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : min(_2531, 0.0));
            _2585 = ((abs(_2398 / _2387) * cbSceneParam._m0[80u].y) * ((((_2540 - _2541) * 2.0) - ((exp2(_2406 * (isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0)))) - exp2(_2406 * (isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0))))) * _2529)) - ((exp2(_2408 * _2540) - exp2(_2408 * _2541)) * _2529))) + (_2401 * cbSceneParam._m0[80u].z);
        }
        vec4 _2587 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2298, _2299, 1.0), 0.0);
        float _2596 = exp2((_2585 * (-1.44269502162933349609375)) * (1.0 - _2587.w));
        float _2597 = log2(_2596);
        float _2613 = log2(_2318);
        _2410 = (exp2(_2613 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2597 * cbSceneParam._m0[78u].x)) * _2587.x) / cbSceneParam._m0[78u].x)) + _2315;
        _2412 = (exp2(_2613 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2597 * cbSceneParam._m0[78u].y)) * _2587.y) / cbSceneParam._m0[78u].y)) + _2316;
        _2414 = (exp2(_2613 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2597 * cbSceneParam._m0[78u].z)) * _2587.z) / cbSceneParam._m0[78u].z)) + _2317;
        _2416 = _2596 * _2318;
    }
    else
    {
        _2410 = _2315;
        _2412 = _2316;
        _2414 = _2317;
        _2416 = _2318;
    }
    bool _2623;
    vec4 _2426;
    vec4 _2448;
    float _2450;
    float _2454;
    float _2455;
    float _2456;
    float _2457;
    bool _2467;
    for (;;)
    {
        _2426 = cbMatDynParam._m0[0u];
        float _2428 = roundEven(_2426.y);
        bool _2429 = _2428 == 3.0;
        float _2430 = log2(_2416);
        float _2437 = exp2(_2430 * cbSceneParam._m0[78u].x) * _2287;
        float _2438 = exp2(_2430 * cbSceneParam._m0[78u].y) * _2288;
        float _2439 = exp2(_2430 * cbSceneParam._m0[78u].z) * _2289;
        float _2446 = _433 + (-0.5);
        _2448 = cbMtdParam._m0[1u];
        _2450 = _2448.y * _2446;
        float _2453 = (_2428 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2454 = _2453 * (_2429 ? _2437 : (_2437 + (cbSceneParam._m0[72u].w * _2410)));
        _2455 = _2453 * (_2429 ? _2438 : (_2438 + (cbSceneParam._m0[72u].w * _2412)));
        _2456 = _2453 * (_2429 ? _2439 : (_2439 + (cbSceneParam._m0[72u].w * _2414)));
        _2457 = _2446 * 0.999000012874603271484375;
        _2467 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2467)
        {
            if ((cbInstanceData._m0[_485 + 7u].x + _2457) < 0.5)
            {
                _2623 = true;
                break;
            }
        }
        uint _2564 = _487 + uint(_2426.w);
        if ((cbInstanceData._m0[_2564].w < 1.0) && ((cbInstanceData._m0[_2564].w + _2457) < 0.5))
        {
            _2623 = true;
            break;
        }
        if ((_2450 + 1.0) < _2448.x)
        {
            _2623 = true;
            break;
        }
        _2623 = false;
        break;
    }
    float _2828;
    if (_2623)
    {
        discard_state = true;
        _2828 = 0.0;
    }
    else
    {
        _2828 = cbInstanceData._m0[_2290].w;
    }
    SV_Target.x = _2454;
    SV_Target.y = _2455;
    SV_Target.z = _2456;
    SV_Target.w = _2828;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2290].w;
    discard_exit();
}


