#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1002;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _278 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _281 = _278.x;
    vec4 _299 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _316 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _281) + cbMtdParam._m0[12u].x) * _299.x;
    float _318 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _281) + cbMtdParam._m0[12u].y) * _299.y;
    float _320 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _281) + cbMtdParam._m0[12u].z) * _299.z;
    vec4 _341 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _377 = cbMtdParam._m0[21u].w + _263;
    float _378 = cbMtdParam._m0[22u].x + _264;
    float _379 = cbMtdParam._m0[22u].y + _265;
    float _393 = (-0.0) - dot(vec3(_377, _378, _379), vec3(_192, _193, _194));
    float _394 = (-0.0) - dot(vec3(_377, _378, _379), vec3(_206, _207, _208));
    float _395 = (-0.0) - dot(vec3(_377, _378, _379), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _399 = inversesqrt(dot(vec3(_393, _394, _395), vec3(_393, _394, _395)));
    float _402 = _399 * _395;
    float _405 = ((_399 * _393) + ((cbMtdParam._m0[19u].w * _281) * ((_341.x * 2.0) + (-1.0)))) * cbMtdParam._m0[18u].z;
    float _406 = ((_399 * _394) + ((cbMtdParam._m0[20u].x * _281) * ((_341.y * 2.0) + (-1.0)))) * cbMtdParam._m0[18u].y;
    float _407 = fract(TEXCOORD.x);
    float _408 = fract(TEXCOORD.y);
    float _414;
    if (_405 > 0.0)
    {
        _414 = (1.0 - _407) / _405;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_405 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _407) / _405;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _414 = frontier_phi_3_2_ladder;
    }
    float _422;
    if (_406 > 0.0)
    {
        _422 = (1.0 - _408) / _406;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_406 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _408) / _406;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _422 = frontier_phi_7_6_ladder;
    }
    float _426 = (_402 > 0.0) ? (cbMtdParam._m0[15u].x / _402) : 5000.0;
    float _427 = isnan(_422) ? _414 : (isnan(_414) ? _422 : min(_414, _422));
    float _428 = isnan(_426) ? _427 : (isnan(_427) ? _426 : min(_427, _426));
    float _432 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _439 = ((_428 * _402) + _432) / _432;
    vec4 _463 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * ((((((_407 + (-0.5)) + (_428 * _405)) / _439) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((((((_408 + (-0.5)) + (_428 * _406)) / _439) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _479 = _281 * 0.1500000059604644775390625;
    float _487 = (_479 * (((_463.x * _281) * cbMtdParam._m0[9u].x) - _316)) + _316;
    float _488 = (_479 * (((_463.y * _281) * cbMtdParam._m0[9u].y) - _318)) + _318;
    float _489 = (_479 * (((_463.z * _281) * cbMtdParam._m0[9u].z) - _320)) + _320;
    vec4 _501 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _505 = _501.z;
    float _508 = (_501.x * 2.0) + (-1.0);
    float _509 = (_501.y * 2.0) + (-1.0);
    float _510 = dot(vec2(_508, _509), vec2(_508, _509));
    float _3353 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _515 = sqrt(1.0 - (isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0))));
    float _518 = fma(_515, _199, fma(_509, _206, _508 * _192));
    float _521 = fma(_515, _200, fma(_509, _207, _508 * _193));
    float _524 = fma(_515, _201, fma(_509, _208, _508 * _194));
    float _528 = inversesqrt(dot(vec3(_518, _521, _524), vec3(_518, _521, _524)));
    float _529 = _528 * _518;
    float _530 = _528 * _521;
    float _531 = _528 * _524;
    float _3364 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _532 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
    float _3375 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _3386 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _3397 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _551 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _555 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _556 = _263 * _555;
    float _557 = _264 * _555;
    float _558 = _265 * _555;
    float _564 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _565 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _586 = fma(_531, cbSceneParam._m0[5u].z, fma(_530, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _529));
    float _589 = fma(_531, cbSceneParam._m0[6u].z, fma(_530, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _529));
    float _592 = fma(_531, cbSceneParam._m0[7u].z, fma(_530, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _529));
    uint _605 = uint(roundEven(NORMAL.w)) * 13u;
    uint _608 = (_605 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _614 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0)))) * cbInstanceData._m0[_608].x;
    float _615 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0)))) * cbInstanceData._m0[_608].y;
    float _616 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0)))) * cbInstanceData._m0[_608].z;
    float _3408 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _617 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
    float _3419 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _618 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
    float _3430 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _619 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
    vec4 _628 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _564, cbSceneParam._m0[86u].y * _565));
    float _631 = _628.x * TEXCOORD.z;
    float _632 = dot(vec3(_529, _530, _531), vec3(_556, _557, _558));
    float _635 = _632 * 2.0;
    float _639 = (_635 * _529) - _556;
    float _640 = (_635 * _530) - _557;
    float _641 = (_635 * _531) - _558;
    float _645 = abs(dot(vec3(_556, _557, _558), vec3(_529, _530, _531)));
    float _3441 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _647 = sqrt(_532);
    float _660 = exp2((_647 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_647 * 3.0));
    float _692 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _696 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _700 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1001;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _728 = fma(_700, cbModelParam._m0[26u].z, fma(_696, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _692));
        float _732 = fma(_700, cbModelParam._m0[27u].z, fma(_696, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _692));
        float _736 = fma(_700, cbModelParam._m0[28u].z, fma(_696, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _692));
        float _759 = _692 + _529;
        float _760 = _696 + _530;
        float _761 = _700 + _531;
        float _771 = fma(_761, cbModelParam._m0[26u].z, fma(_760, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _759)) - _728;
        float _772 = fma(_761, cbModelParam._m0[27u].z, fma(_760, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _759)) - _732;
        float _773 = fma(_761, cbModelParam._m0[28u].z, fma(_760, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _759)) - _736;
        float _777 = inversesqrt(dot(vec3(_771, _772, _773), vec3(_771, _772, _773)));
        float _790 = ((_777 * _771) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_728 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _791 = ((_777 * _772) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_732 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _792 = ((_777 * _773) / cbModelParam._m0[34u].z) + ((((((_736 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _795 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_790, _791, _792), 0.0);
        vec4 _802 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_790, _791, _792), 0.0);
        vec4 _809 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_790, _791, _792), 0.0);
        vec4 _816 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_790, _791, _792), 0.0);
        float _829 = exp2((_795.w + (-0.5)) * 20.0) * 2.0;
        float _830 = _829 * (_795.x + (-0.5));
        float _831 = _829 * (_795.y + (-0.5));
        float _832 = _829 * (_795.z + (-0.5));
        float _839 = exp2((_802.w + (-0.5)) * 20.0) * 2.0;
        float _840 = _839 * (_802.x + (-0.5));
        float _841 = _839 * (_802.y + (-0.5));
        float _842 = _839 * (_802.z + (-0.5));
        float _849 = exp2((_809.w + (-0.5)) * 20.0) * 2.0;
        float _850 = _849 * (_809.x + (-0.5));
        float _851 = _849 * (_809.y + (-0.5));
        float _852 = _849 * (_809.z + (-0.5));
        float _859 = exp2((_816.w + (-0.5)) * 20.0) * 2.0;
        float _860 = _859 * (_816.x + (-0.5));
        float _861 = _859 * (_816.y + (-0.5));
        float _862 = _859 * (_816.z + (-0.5));
        float _863 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _864 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _865 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _866 = _830 * 0.5;
        float _867 = _840 * 0.5;
        float _868 = _850 * 0.5;
        float _869 = dot(vec3(_866, _867, _868), vec3(_866, _867, _868));
        float _874 = (_869 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_869);
        float _883 = (dot(vec3(_529, _530, _531), vec3(_874 * _866, _874 * _867, _874 * _868)) + 1.0) * 0.5;
        float _3467 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _893 = sqrt(((_867 * _867) + (_866 * _866)) + (_868 * _868)) / (_863 + 9.9999997473787516355514526367188e-06);
        float _3478 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _895 = _894 * 2.0;
        float _899 = (1.0 - _894) / (_894 + 1.0);
        float _3489 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _900 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _909 = ((((1.0 - _900) * (_895 + 2.0)) * exp2(log2(isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))) * (_895 + 1.0))) + _900) * _863;
        float _910 = _831 * 0.5;
        float _911 = _841 * 0.5;
        float _912 = _851 * 0.5;
        float _913 = dot(vec3(_910, _911, _912), vec3(_910, _911, _912));
        float _918 = (_913 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_913);
        float _926 = (dot(vec3(_529, _530, _531), vec3(_918 * _910, _918 * _911, _918 * _912)) + 1.0) * 0.5;
        float _3500 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _935 = sqrt(((_911 * _911) + (_910 * _910)) + (_912 * _912)) / (_864 + 9.9999997473787516355514526367188e-06);
        float _3511 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _937 = _936 * 2.0;
        float _941 = (1.0 - _936) / (_936 + 1.0);
        float _3522 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _951 = ((((1.0 - _942) * (_937 + 2.0)) * exp2(log2(isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))) * (_937 + 1.0))) + _942) * _864;
        float _952 = _832 * 0.5;
        float _953 = _842 * 0.5;
        float _954 = _852 * 0.5;
        float _955 = dot(vec3(_952, _953, _954), vec3(_952, _953, _954));
        float _960 = (_955 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_955);
        float _968 = (dot(vec3(_529, _530, _531), vec3(_960 * _952, _960 * _953, _960 * _954)) + 1.0) * 0.5;
        float _3533 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _977 = sqrt(((_953 * _953) + (_952 * _952)) + (_954 * _954)) / (_865 + 9.9999997473787516355514526367188e-06);
        float _3544 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _979 = _978 * 2.0;
        float _983 = (1.0 - _978) / (_978 + 1.0);
        float _3555 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _993 = ((((1.0 - _984) * (_979 + 2.0)) * exp2(log2(isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))) * (_979 + 1.0))) + _984) * _865;
        _1001 = _832;
        _1003 = _831;
        _1004 = _830;
        _1005 = _842;
        _1006 = _841;
        _1007 = _840;
        _1008 = _852;
        _1009 = _851;
        _1010 = _850;
        _1011 = _865;
        _1012 = _864;
        _1013 = _863;
        _1014 = cbModelParam._m0[36u].z * (isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0)));
        _1015 = cbModelParam._m0[36u].z * (isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0)));
        _1016 = cbModelParam._m0[36u].z * (isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0)));
    }
    else
    {
        _1001 = _1002;
        _1003 = _1002;
        _1004 = _1002;
        _1005 = _1002;
        _1006 = _1002;
        _1007 = _1002;
        _1008 = _1002;
        _1009 = _1002;
        _1010 = _1002;
        _1011 = _1002;
        _1012 = _1002;
        _1013 = _1002;
        _1014 = 0.0;
        _1015 = 0.0;
        _1016 = 0.0;
    }
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1042 = fma(_700, cbModelParam._m0[30u].z, fma(_696, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _692));
        float _1046 = fma(_700, cbModelParam._m0[31u].z, fma(_696, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _692));
        float _1050 = fma(_700, cbModelParam._m0[32u].z, fma(_696, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _692));
        float _1073 = _692 + _529;
        float _1074 = _696 + _530;
        float _1075 = _700 + _531;
        float _1085 = fma(_1075, cbModelParam._m0[30u].z, fma(_1074, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1073)) - _1042;
        float _1086 = fma(_1075, cbModelParam._m0[31u].z, fma(_1074, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1073)) - _1046;
        float _1087 = fma(_1075, cbModelParam._m0[32u].z, fma(_1074, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1073)) - _1050;
        float _1091 = inversesqrt(dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087)));
        float _1104 = ((_1091 * _1085) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1042 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1105 = ((_1091 * _1086) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1046 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1106 = ((_1091 * _1087) / cbModelParam._m0[35u].z) + ((((((_1050 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        float _1141 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1108.x + (-0.5));
        float _1143 = _1141 * (_1108.y + (-0.5));
        float _1144 = _1141 * (_1108.z + (-0.5));
        float _1151 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1115.x + (-0.5));
        float _1153 = _1151 * (_1115.y + (-0.5));
        float _1154 = _1151 * (_1115.z + (-0.5));
        float _1161 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1122.x + (-0.5));
        float _1163 = _1161 * (_1122.y + (-0.5));
        float _1164 = _1161 * (_1122.z + (-0.5));
        float _1171 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1129.x + (-0.5));
        float _1173 = _1171 * (_1129.y + (-0.5));
        float _1174 = _1171 * (_1129.z + (-0.5));
        float _1175 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1176 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = _1142 * 0.5;
        float _1179 = _1152 * 0.5;
        float _1180 = _1162 * 0.5;
        float _1181 = dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180));
        float _1186 = (_1181 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1181);
        float _1194 = (dot(vec3(_529, _530, _531), vec3(_1186 * _1178, _1186 * _1179, _1186 * _1180)) + 1.0) * 0.5;
        float _3596 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1203 = sqrt(((_1179 * _1179) + (_1178 * _1178)) + (_1180 * _1180)) / (_1175 + 9.9999997473787516355514526367188e-06);
        float _3607 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1205 = _1204 * 2.0;
        float _1209 = (1.0 - _1204) / (_1204 + 1.0);
        float _3618 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1219 = ((((1.0 - _1210) * (_1205 + 2.0)) * exp2(log2(isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_1205 + 1.0))) + _1210) * _1175;
        float _1220 = _1143 * 0.5;
        float _1221 = _1153 * 0.5;
        float _1222 = _1163 * 0.5;
        float _1223 = dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222));
        float _1228 = (_1223 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1223);
        float _1236 = (dot(vec3(_529, _530, _531), vec3(_1228 * _1220, _1228 * _1221, _1228 * _1222)) + 1.0) * 0.5;
        float _3629 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1245 = sqrt(((_1221 * _1221) + (_1220 * _1220)) + (_1222 * _1222)) / (_1176 + 9.9999997473787516355514526367188e-06);
        float _3640 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1247 = _1246 * 2.0;
        float _1251 = (1.0 - _1246) / (_1246 + 1.0);
        float _3651 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1261 = ((((1.0 - _1252) * (_1247 + 2.0)) * exp2(log2(isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_1247 + 1.0))) + _1252) * _1176;
        float _1262 = _1144 * 0.5;
        float _1263 = _1154 * 0.5;
        float _1264 = _1164 * 0.5;
        float _1265 = dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264));
        float _1270 = (_1265 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1265);
        float _1278 = (dot(vec3(_529, _530, _531), vec3(_1270 * _1262, _1270 * _1263, _1270 * _1264)) + 1.0) * 0.5;
        float _3662 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1287 = sqrt(((_1263 * _1263) + (_1262 * _1262)) + (_1264 * _1264)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _3673 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1289 = _1288 * 2.0;
        float _1293 = (1.0 - _1288) / (_1288 + 1.0);
        float _3684 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1303 = ((((1.0 - _1294) * (_1289 + 2.0)) * exp2(log2(isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * (_1289 + 1.0))) + _1294) * _1177;
        _1311 = _1144;
        _1312 = _1143;
        _1313 = _1142;
        _1314 = _1154;
        _1315 = _1153;
        _1316 = _1152;
        _1317 = _1164;
        _1318 = _1163;
        _1319 = _1162;
        _1320 = _1177;
        _1321 = _1176;
        _1322 = _1175;
        _1323 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)));
        _1324 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)));
        _1325 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)));
    }
    else
    {
        _1311 = _1002;
        _1312 = _1002;
        _1313 = _1002;
        _1314 = _1002;
        _1315 = _1002;
        _1316 = _1002;
        _1317 = _1002;
        _1318 = _1002;
        _1319 = _1002;
        _1320 = _1002;
        _1321 = _1002;
        _1322 = _1002;
        _1323 = 0.0;
        _1324 = 0.0;
        _1325 = 0.0;
    }
    float _1335 = (cbModelParam._m0[1u].x * (_1323 - _1014)) + _1014;
    float _1336 = (cbModelParam._m0[1u].x * (_1324 - _1015)) + _1015;
    float _1337 = (cbModelParam._m0[1u].x * (_1325 - _1016)) + _1016;
    float _1358 = fma(_1337, cbSceneParam._m0[89u].z, fma(_1336, cbSceneParam._m0[89u].y, _1335 * cbSceneParam._m0[89u].x));
    float _1361 = fma(_1337, cbSceneParam._m0[90u].z, fma(_1336, cbSceneParam._m0[90u].y, _1335 * cbSceneParam._m0[90u].x));
    float _1364 = fma(_1337, cbSceneParam._m0[91u].z, fma(_1336, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1335));
    float _1379 = _639 * 0.5;
    float _1380 = _640 * 0.5;
    float _1381 = _641 * 0.5;
    float _1382 = dot(vec4(_1379, _1380, _1381, 1.0), vec4(_1313, _1316, _1319, _1322));
    float _1385 = dot(vec4(_1379, _1380, _1381, 1.0), vec4(_1312, _1315, _1318, _1321));
    float _1388 = dot(vec4(_1379, _1380, _1381, 1.0), vec4(_1311, _1314, _1317, _1320));
    float _1422;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1395 = dot(vec4(_1379, _1380, _1381, 1.0), vec4(_1001, _1005, _1008, _1011));
        float _1399 = dot(vec4(_1379, _1380, _1381, 1.0), vec4(_1003, _1006, _1009, _1012));
        float _1403 = dot(vec4(_1379, _1380, _1381, 1.0), vec4(_1004, _1007, _1010, _1013));
        float _1410 = dot(vec4(cbModelParam._m0[39u]), vec4(_1379, _1380, _1381, 1.0));
        _1422 = dot(vec3(isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)), isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)), isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1410) ? 0.0 : (isnan(0.0) ? _1410 : max(0.0, _1410))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1422 = 1.0;
    }
    float _1433;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1424 = dot(vec4(cbModelParam._m0[40u]), vec4(_1379, _1380, _1381, 1.0));
        _1433 = dot(vec3(isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)), isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)), isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1424) ? 0.0 : (isnan(0.0) ? _1424 : max(0.0, _1424))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1433 = 1.0;
    }
    float _1437 = (_1433 * cbModelParam._m0[1u].x) + (_1422 * (1.0 - cbModelParam._m0[1u].x));
    float _1447 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _532);
    float _1448 = isnan(_1447) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1447 : min(cbModelParam._m0[25u].z, _1447));
    float _1529;
    float _1531;
    float _1533;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1496 = fma(_700, cbModelParam._m0[13u].z, fma(_696, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _692)) + cbModelParam._m0[13u].w;
        float _1500 = fma(_700, cbModelParam._m0[14u].z, fma(_696, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _692)) + cbModelParam._m0[14u].w;
        float _1504 = fma(_700, cbModelParam._m0[15u].z, fma(_696, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _692)) + cbModelParam._m0[15u].w;
        float _1507 = fma(_641, cbModelParam._m0[13u].z, fma(_640, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _639));
        float _1510 = fma(_641, cbModelParam._m0[14u].z, fma(_640, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _639));
        float _1513 = fma(_641, cbModelParam._m0[15u].z, fma(_640, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _639));
        float _1541;
        if (_1507 > 0.0)
        {
            _1541 = abs((1.0 - _1496) / _1507);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1507 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1496 + 1.0) / _1507);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1541 = frontier_phi_22_20_ladder;
        }
        float _1709;
        if (_1510 > 0.0)
        {
            _1709 = abs((1.0 - _1500) / _1510);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1510 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1500 + 1.0) / _1510);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1709 = frontier_phi_31_27_ladder;
        }
        float _2153;
        if (_1513 > 0.0)
        {
            _2153 = abs((1.0 - _1504) / _1513);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1513 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1504 + 1.0) / _1513);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2153 = frontier_phi_43_38_ladder;
        }
        float _2155 = isnan(_1709) ? _1541 : (isnan(_1541) ? _1709 : min(_1541, _1709));
        float _2156 = isnan(_2153) ? _2155 : (isnan(_2155) ? _2153 : min(_2155, _2153));
        float _2160 = (_2156 * _1507) + _1496;
        float _2161 = (_2156 * _1510) + _1500;
        float _2162 = (_2156 * _1513) + _1504;
        float _2163 = _2156 * 9.9999997473787516355514526367188e-05;
        float _2165 = (-1.0) - _2163;
        float _2167 = _2163 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_2162 > _2167) || ((_2162 < _2165) || ((_2161 > _2167) || ((_2161 < _2165) || ((_2160 < _2165) || (_2160 > _2167))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2396 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2162, cbModelParam._m0[9u].z, fma(_2161, cbModelParam._m0[9u].y, _2160 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2162, cbModelParam._m0[10u].z, fma(_2161, cbModelParam._m0[10u].y, _2160 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2162, cbModelParam._m0[11u].z, fma(_2161, cbModelParam._m0[11u].y, _2160 * cbModelParam._m0[11u].x))), _1448);
            frontier_phi_21_43_ladder = _2396.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2396.x * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2396.z * cbModelParam._m0[1u].y;
        }
        _1529 = frontier_phi_21_43_ladder_1;
        _1531 = frontier_phi_21_43_ladder;
        _1533 = frontier_phi_21_43_ladder_2;
    }
    else
    {
        vec4 _1517 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_639, _640, _641), _1448);
        _1529 = _1517.x * cbModelParam._m0[1u].y;
        _1531 = _1517.y * cbModelParam._m0[1u].y;
        _1533 = _1517.z * cbModelParam._m0[1u].y;
    }
    float _1537 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _532);
    float _1538 = isnan(_1537) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1537 : min(cbModelParam._m0[25u].w, _1537));
    float _1626;
    float _1628;
    float _1630;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1590 = fma(_700, cbModelParam._m0[21u].z, fma(_696, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _692)) + cbModelParam._m0[21u].w;
        float _1594 = fma(_700, cbModelParam._m0[22u].z, fma(_696, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _692)) + cbModelParam._m0[22u].w;
        float _1598 = fma(_700, cbModelParam._m0[23u].z, fma(_696, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _692)) + cbModelParam._m0[23u].w;
        float _1601 = fma(_641, cbModelParam._m0[21u].z, fma(_640, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _639));
        float _1604 = fma(_641, cbModelParam._m0[22u].z, fma(_640, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _639));
        float _1607 = fma(_641, cbModelParam._m0[23u].z, fma(_640, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _639));
        float _1714;
        if (_1601 > 0.0)
        {
            _1714 = abs((1.0 - _1590) / _1601);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1590 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1714 = frontier_phi_33_29_ladder;
        }
        float _2180;
        if (_1604 > 0.0)
        {
            _2180 = abs((1.0 - _1594) / _1604);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1594 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _2180 = frontier_phi_45_40_ladder;
        }
        float _2517;
        if (_1607 > 0.0)
        {
            _2517 = abs((1.0 - _1598) / _1607);
        }
        else
        {
            float frontier_phi_57_52_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_57_52_ladder = abs((_1598 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_57_52_ladder = 5000.0;
            }
            _2517 = frontier_phi_57_52_ladder;
        }
        float _2519 = isnan(_2180) ? _1714 : (isnan(_1714) ? _2180 : min(_1714, _2180));
        float _2520 = isnan(_2517) ? _2519 : (isnan(_2519) ? _2517 : min(_2519, _2517));
        float _2524 = (_2520 * _1601) + _1590;
        float _2525 = (_2520 * _1604) + _1594;
        float _2526 = (_2520 * _1607) + _1598;
        float _2527 = _2520 * 9.9999997473787516355514526367188e-05;
        float _2528 = (-1.0) - _2527;
        float _2530 = _2527 + 1.0;
        float frontier_phi_30_57_ladder;
        float frontier_phi_30_57_ladder_1;
        float frontier_phi_30_57_ladder_2;
        if ((_2526 > _2530) || ((_2526 < _2528) || ((_2525 > _2530) || ((_2525 < _2528) || ((_2524 < _2528) || (_2524 > _2530))))))
        {
            frontier_phi_30_57_ladder = 0.0;
            frontier_phi_30_57_ladder_1 = 0.0;
            frontier_phi_30_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2647 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2526, cbModelParam._m0[17u].z, fma(_2525, cbModelParam._m0[17u].y, _2524 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2526, cbModelParam._m0[18u].z, fma(_2525, cbModelParam._m0[18u].y, _2524 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2526, cbModelParam._m0[19u].z, fma(_2525, cbModelParam._m0[19u].y, _2524 * cbModelParam._m0[19u].x))), _1538);
            frontier_phi_30_57_ladder = _2647.z * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_1 = _2647.y * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_2 = _2647.x * cbModelParam._m0[1u].z;
        }
        _1626 = frontier_phi_30_57_ladder_2;
        _1628 = frontier_phi_30_57_ladder_1;
        _1630 = frontier_phi_30_57_ladder;
    }
    else
    {
        vec4 _1610 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_639, _640, _641), _1538);
        _1626 = _1610.x * cbModelParam._m0[1u].z;
        _1628 = _1610.y * cbModelParam._m0[1u].z;
        _1630 = _1610.z * cbModelParam._m0[1u].z;
    }
    float _1642 = ((((1.0 - _660) * ((_647 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_660 * _647)) * _631;
    float _1643 = _1642 * ((cbModelParam._m0[1u].w * (_1626 - _1529)) + _1529);
    float _1644 = _1642 * ((cbModelParam._m0[1u].w * (_1628 - _1531)) + _1531);
    float _1645 = _1642 * ((cbModelParam._m0[1u].w * (_1630 - _1533)) + _1533);
    float _1648 = fma(_1645, cbSceneParam._m0[89u].z, fma(_1644, cbSceneParam._m0[89u].y, _1643 * cbSceneParam._m0[89u].x));
    float _1651 = fma(_1645, cbSceneParam._m0[90u].z, fma(_1644, cbSceneParam._m0[90u].y, _1643 * cbSceneParam._m0[90u].x));
    float _1654 = fma(_1645, cbSceneParam._m0[91u].z, fma(_1644, cbSceneParam._m0[91u].y, _1643 * cbSceneParam._m0[91u].x));
    float _1688 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1692 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1696 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1700 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1701 = _1688 / _1700;
    float _1702 = _1692 / _1700;
    float _1703 = _1696 / _1700;
    float _1850;
    float _1851;
    float _1852;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1730 = ((uint(_1703 > cbSceneParam._m0[59u].y) + uint(_1703 > cbSceneParam._m0[59u].x)) + uint(_1703 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1731 = _1730 + 43u;
        uint _1739 = _1730 + 44u;
        uint _1747 = _1730 + 45u;
        uint _1755 = _1730 + 46u;
        float _1766 = fma(_1700, cbSceneParam._m0[_1731].w, fma(_1696, cbSceneParam._m0[_1731].z, fma(_1692, cbSceneParam._m0[_1731].y, _1688 * cbSceneParam._m0[_1731].x)));
        float _1770 = fma(_1700, cbSceneParam._m0[_1739].w, fma(_1696, cbSceneParam._m0[_1739].z, fma(_1692, cbSceneParam._m0[_1739].y, _1688 * cbSceneParam._m0[_1739].x)));
        float _1778 = fma(_1700, cbSceneParam._m0[_1755].w, fma(_1696, cbSceneParam._m0[_1755].z, fma(_1692, cbSceneParam._m0[_1755].y, _1688 * cbSceneParam._m0[_1755].x)));
        float _1783 = cbSceneParam._m0[33u].z * _1778;
        float _1785 = cbSceneParam._m0[33u].w * _1778;
        float _1788 = fma(_1700, cbSceneParam._m0[_1747].w, fma(_1696, cbSceneParam._m0[_1747].z, fma(_1692, cbSceneParam._m0[_1747].y, _1688 * cbSceneParam._m0[_1747].x))) / _1778;
        float _1836 = (cbSceneParam._m0[33u].x - sqrt(((_1702 * _1702) + (_1701 * _1701)) + (_1703 * _1703))) * cbSceneParam._m0[33u].y;
        float _3810 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1843 = (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1783 + _1766) / _1778, (_1785 + _1770) / _1778), _1788), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1785 + _1766) / _1778, (_1770 - _1783) / _1778), _1788), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1766 - _1783) / _1778, (_1770 - _1785) / _1778), _1788), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1766 - _1785) / _1778, (_1783 + _1770) / _1778), _1788), 0.0)).x), vec4(0.25)));
        _1850 = 1.0 - (_1843 * cbSceneParam._m0[34u].x);
        _1851 = 1.0 - (_1843 * cbSceneParam._m0[34u].y);
        _1852 = 1.0 - (_1843 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1850 = 1.0;
        _1851 = 1.0;
        _1852 = 1.0;
    }
    float _1916;
    float _1918;
    float _1920;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1904 = fma(_1700, cbSceneParam._m0[63u].w, fma(_1696, cbSceneParam._m0[63u].z, fma(_1692, cbSceneParam._m0[63u].y, _1688 * cbSceneParam._m0[63u].x)));
        float _1905 = fma(_1700, cbSceneParam._m0[60u].w, fma(_1696, cbSceneParam._m0[60u].z, fma(_1692, cbSceneParam._m0[60u].y, _1688 * cbSceneParam._m0[60u].x))) / _1904;
        float _1906 = fma(_1700, cbSceneParam._m0[61u].w, fma(_1696, cbSceneParam._m0[61u].z, fma(_1692, cbSceneParam._m0[61u].y, _1688 * cbSceneParam._m0[61u].x))) / _1904;
        float frontier_phi_42_41_ladder;
        float frontier_phi_42_41_ladder_1;
        float frontier_phi_42_41_ladder_2;
        if ((((_1905 >= cbSceneParam._m0[64u].x) && (_1906 >= cbSceneParam._m0[64u].y)) && (_1905 <= cbSceneParam._m0[64u].z)) && (_1906 <= cbSceneParam._m0[64u].w))
        {
            float _2193 = fma(_1700, cbSceneParam._m0[62u].w, fma(_1696, cbSceneParam._m0[62u].z, fma(_1692, cbSceneParam._m0[62u].y, _1688 * cbSceneParam._m0[62u].x))) / _1904;
            float _2197 = isnan(cbSceneParam._m0[41u].w) ? _2193 : (isnan(_2193) ? cbSceneParam._m0[41u].w : max(_2193, cbSceneParam._m0[41u].w));
            float _2240 = (cbSceneParam._m0[33u].x - sqrt(((_1702 * _1702) + (_1701 * _1701)) + (_1703 * _1703))) * cbSceneParam._m0[33u].y;
            float _3826 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
            float _2247 = (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1905, cbSceneParam._m0[33u].w + _1906), _2197), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1905, _1906 - cbSceneParam._m0[33u].z), _2197), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1905 - cbSceneParam._m0[33u].z, _1906 - cbSceneParam._m0[33u].w), _2197), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1905 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1906), _2197), 0.0)).x), vec4(0.25)));
            float _2251 = 1.0 - (_2247 * cbSceneParam._m0[34u].x);
            float _2252 = 1.0 - (_2247 * cbSceneParam._m0[34u].y);
            float _2253 = 1.0 - (_2247 * cbSceneParam._m0[34u].z);
            frontier_phi_42_41_ladder = isnan(_2252) ? _1851 : (isnan(_1851) ? _2252 : min(_1851, _2252));
            frontier_phi_42_41_ladder_1 = isnan(_2251) ? _1850 : (isnan(_1850) ? _2251 : min(_1850, _2251));
            frontier_phi_42_41_ladder_2 = isnan(_2253) ? _1852 : (isnan(_1852) ? _2253 : min(_1852, _2253));
        }
        else
        {
            frontier_phi_42_41_ladder = _1851;
            frontier_phi_42_41_ladder_1 = _1850;
            frontier_phi_42_41_ladder_2 = _1852;
        }
        _1916 = frontier_phi_42_41_ladder_1;
        _1918 = frontier_phi_42_41_ladder;
        _1920 = frontier_phi_42_41_ladder_2;
    }
    else
    {
        _1916 = _1850;
        _1918 = _1851;
        _1920 = _1852;
    }
    uvec4 _1925 = floatBitsToUint(cbInstanceData._m0[_605 + 5u]);
    uint _1927 = _1925.x * 14u;
    uint _1928 = _1927 + 13u;
    float _1933 = _631 + (-1.0);
    float _1936 = (cbLight._m0[_1928].x * _1933) + 1.0;
    float _1937 = (cbLight._m0[_1928].y * _1933) + 1.0;
    uint _1938 = _1927 + 5u;
    float _1944 = isnan(1.0) ? _1937 : (isnan(_1937) ? 1.0 : min(_1937, 1.0));
    uint _1948 = _1927 + 4u;
    float _1957 = isnan(1.0) ? _1936 : (isnan(_1936) ? 1.0 : min(_1936, 1.0));
    uint _1961 = _1927 | 1u;
    float _1972 = dot(vec3(cbLight._m0[_1927].xyz), vec3(_529, _530, _531));
    float _1975 = dot(vec3(cbLight._m0[_1961].xyz), vec3(_529, _530, _531));
    float _3862 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _3873 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1980 = (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * 0.3183098733425140380859375;
    float _1982 = (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * 0.3183098733425140380859375;
    float _1989 = ((cbLight._m0[_1938].x * _1944) * _1982) + (((cbLight._m0[_1948].x * _1916) * _1957) * _1980);
    float _1990 = ((_1944 * cbLight._m0[_1938].y) * _1982) + (((cbLight._m0[_1948].y * _1918) * _1957) * _1980);
    float _1991 = ((_1944 * cbLight._m0[_1938].z) * _1982) + (((cbLight._m0[_1948].z * _1920) * _1957) * _1980);
    uint _1993 = _1927 + 8u;
    float _2006 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1927].w)) * _532) * 0.949999988079071044921875);
    float _2007 = _2006 * _2006;
    float _2008 = cbLight._m0[_1927].x + _556;
    float _2009 = cbLight._m0[_1927].y + _557;
    float _2010 = cbLight._m0[_1927].z + _558;
    float _2014 = inversesqrt(dot(vec3(_2008, _2009, _2010), vec3(_2008, _2009, _2010)));
    float _2015 = _2014 * _2008;
    float _2016 = _2014 * _2009;
    float _2017 = _2014 * _2010;
    float _2018 = dot(vec3(_529, _530, _531), vec3(cbLight._m0[_1927].xyz));
    float _3884 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2021 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _3895 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _2022 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _2023 = dot(vec3(_529, _530, _531), vec3(_2015, _2016, _2017));
    float _3906 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _2026 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _2027 = dot(vec3(cbLight._m0[_1927].xyz), vec3(_2015, _2016, _2017));
    float _3917 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2031 = _2007 * _2007;
    float _2035 = ((_2026 * _2026) * (_2031 + (-1.0))) + 1.0;
    float _2046 = (exp2(log2(1.0 - (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2047 = 1.0 - _2007;
    float _2058 = (0.5 / (((_2022 * ((_2021 * _2047) + _2007)) + 9.9999999392252902907785028219223e-09) + (((_2022 * _2047) + _2007) * _2021))) * _2021;
    float _3928 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2060 = (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * (_2031 / ((_2035 * _2035) * 3.141590118408203125));
    uint _2074 = _1927 + 9u;
    float _2085 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1961].w)) * _532) * 0.949999988079071044921875);
    float _2086 = _2085 * _2085;
    float _2087 = cbLight._m0[_1961].x + _556;
    float _2088 = cbLight._m0[_1961].y + _557;
    float _2089 = cbLight._m0[_1961].z + _558;
    float _2093 = inversesqrt(dot(vec3(_2087, _2088, _2089), vec3(_2087, _2088, _2089)));
    float _2094 = _2093 * _2087;
    float _2095 = _2093 * _2088;
    float _2096 = _2093 * _2089;
    float _2097 = dot(vec3(_529, _530, _531), vec3(cbLight._m0[_1961].xyz));
    float _3939 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2100 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _2101 = dot(vec3(_529, _530, _531), vec3(_2094, _2095, _2096));
    float _3950 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2104 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _2105 = dot(vec3(cbLight._m0[_1961].xyz), vec3(_2094, _2095, _2096));
    float _3961 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2109 = _2086 * _2086;
    float _2113 = ((_2104 * _2104) * (_2109 + (-1.0))) + 1.0;
    float _2122 = (exp2(log2(1.0 - (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2123 = 1.0 - _2086;
    float _2133 = (0.5 / (((_2022 * ((_2100 * _2123) + _2086)) + 9.9999999392252902907785028219223e-09) + (((_2022 * _2123) + _2086) * _2100))) * _2100;
    float _3972 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2135 = (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * (_2109 / ((_2113 * _2113) * 3.141590118408203125));
    float _2145 = (((_2122 * cbLight._m0[_2074].x) * _2135) * _1944) + ((((cbLight._m0[_1993].x * _1916) * _2046) * _2060) * _1957);
    float _2146 = (((_2122 * cbLight._m0[_2074].y) * _2135) * _1944) + ((((cbLight._m0[_1993].y * _1918) * _2046) * _2060) * _1957);
    float _2147 = (((_2122 * cbLight._m0[_2074].z) * _2135) * _1944) + ((((cbLight._m0[_1993].z * _1920) * _2046) * _2060) * _1957);
    float _2310;
    float _2312;
    float _2314;
    float _2316;
    float _2318;
    float _2320;
    if (_1925.y == 0u)
    {
        uvec4 _2265 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2266 = _2265.x;
        uint _2277 = uint((float(_2265.y) * floor(float(uint(cbSceneParam._m0[85u].y * _565) / _2266))) + floor(float(uint(cbSceneParam._m0[85u].x * _564) / _2266)));
        float _2287 = (log2(_1703 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2288 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        uint _2291 = uint(isnan(14.0) ? _2288 : (isnan(_2288) ? 14.0 : min(_2288, 14.0)));
        uvec4 _2296 = texelFetch(g_lightClusterGridBuffer, int(((_2291 << 2u) + (_2277 << 6u)) >> 2u));
        uint _2297 = _2296.x;
        uint _2298 = _2265.z;
        float _2405;
        float _2407;
        float _2409;
        float _2411;
        float _2413;
        float _2415;
        if (((((1u << ((_2298 >> 4u) & 15u)) + 4294967295u) & _2297) == 0u) || ((_2298 & 240u) == 0u))
        {
            _2405 = 0.0;
            _2407 = 0.0;
            _2409 = 0.0;
            _2411 = 0.0;
            _2413 = 0.0;
            _2415 = 0.0;
        }
        else
        {
            float _2406;
            float _2408;
            float _2410;
            float _2412;
            float _2414;
            float _2416;
            float _2575 = 0.0;
            float _2576 = 0.0;
            float _2577 = 0.0;
            float _2578 = 0.0;
            float _2579 = 0.0;
            float _2580 = 0.0;
            uint _2581 = 0u;
            uint _2590;
            bool _2591;
            for (;;)
            {
                _2590 = texelFetch(g_lightClassification, int((((_2291 << 5u) + (_2277 << 9u)) + (_2581 << 2u)) >> 2u)).x;
                _2591 = _2590 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2591)
                {
                    frontier_phi_66_pred = _2576;
                    frontier_phi_66_pred_1 = _2575;
                    frontier_phi_66_pred_2 = _2577;
                    frontier_phi_66_pred_3 = _2580;
                    frontier_phi_66_pred_4 = _2579;
                    frontier_phi_66_pred_5 = _2578;
                }
                else
                {
                    float _2720;
                    float _2721;
                    float _2722;
                    float _2723;
                    float _2724;
                    float _2725;
                    uint _2726;
                    _2720 = _2575;
                    _2721 = _2576;
                    _2722 = _2577;
                    _2723 = _2578;
                    _2724 = _2579;
                    _2725 = _2580;
                    _2726 = _2590;
                    float _2652;
                    float _2653;
                    float _2654;
                    float _2655;
                    float _2656;
                    float _2657;
                    for (;;)
                    {
                        uint _2730 = uint(findLSB(_2726)) + (_2581 << 5u);
                        uint _2727 = (_2726 + 4294967295u) & _2726;
                        uint _2732 = _2730 * 48u;
                        vec4 _2746 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2732)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 3u)).x));
                        uint _2752 = (_2730 * 48u) + 4u;
                        vec4 _2765 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2752)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 3u)).x));
                        uint _2771 = (_2730 * 48u) + 8u;
                        vec3 _2782 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2771)).x, texelFetch(g_PointLightRenderingBuffer, int(_2771 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2771 + 2u)).x));
                        float _2786 = _2746.x - _1701;
                        float _2787 = _2746.y - _1702;
                        float _2788 = _2746.z - _1703;
                        float _2789 = dot(vec3(_2786, _2787, _2788), vec3(_2786, _2787, _2788));
                        float _2792 = inversesqrt(_2789);
                        float _2793 = _2792 * _2786;
                        float _2794 = _2792 * _2787;
                        float _2795 = _2792 * _2788;
                        float _2796 = dot(vec3(_586, _589, _592), vec3(_2793, _2794, _2795));
                        float _2801 = 1.0 - (_2789 * _2746.w);
                        float _3993 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                        float _2802 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
                        float _2803 = sqrt(_2789) * _2765.w;
                        float _2806 = 1.39999997615814208984375 / (_2803 + 1.39999997615814208984375);
                        float _2807 = _2806 * _2806;
                        float _2810 = ((1.0 - _2807) * _2796) + _2807;
                        float _2813 = _2803 * _2803;
                        float _2817 = ((isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0))) * _2802) / ((_2813 * 0.699999988079071044921875) + 1.0);
                        float _2821 = (-0.0) - _1701;
                        float _2822 = (-0.0) - _1702;
                        float _2823 = (-0.0) - _1703;
                        float _2827 = inversesqrt(dot(vec3(_2821, _2822, _2823), vec3(_2821, _2822, _2823)));
                        float _2828 = _2827 * _2821;
                        float _2829 = _2827 * _2822;
                        float _2830 = _2827 * _2823;
                        float _2837 = exp2(log2(1.0 / ((_2813 * 3.5) + 5.0)) * 0.25);
                        float _2838 = 1.0 - _647;
                        float _2845 = sqrt(1.0 - ((1.0 - (_2838 * _2838)) * (1.0 - (_2837 * _2837))));
                        float _2846 = _2845 * _2845;
                        float _2847 = _2846 * _2846;
                        float _2848 = _2828 + _2793;
                        float _2849 = _2829 + _2794;
                        float _2850 = _2830 + _2795;
                        float _2854 = inversesqrt(dot(vec3(_2848, _2849, _2850), vec3(_2848, _2849, _2850)));
                        float _2858 = dot(vec3(_586, _589, _592), vec3(_2828, _2829, _2830));
                        float _4009 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
                        float _2861 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
                        float _2862 = dot(vec3(_586, _589, _592), vec3(_2854 * _2848, _2854 * _2849, _2854 * _2850));
                        float _4020 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
                        float _2865 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
                        float _2869 = ((_2865 * _2865) * (_2847 + (-1.0))) + 1.0;
                        float _2870 = _2806 * _2846;
                        float _2871 = _2870 * _2870;
                        float _2874 = ((1.0 - _2871) * _2796) + _2871;
                        float _4031 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
                        float _2875 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
                        float _2876 = 1.0 - _2846;
                        float _2886 = (0.5 / (((_2875 * ((_2861 * _2876) + _2846)) + 9.9999999392252902907785028219223e-09) + (((_2875 * _2876) + _2846) * _2861))) * _2875;
                        float _4042 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
                        float _2897 = (((_2847 * 3.1415927410125732421875) * (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) / ((_2869 * _2869) * ((_2813 * 2.1991131305694580078125) + 3.141590118408203125))) * _2802;
                        _2655 = (_2817 * _2765.x) + _2723;
                        _2656 = (_2817 * _2765.y) + _2724;
                        _2657 = (_2817 * _2765.z) + _2725;
                        _2652 = (_2897 * _2782.x) + _2720;
                        _2653 = (_2897 * _2782.y) + _2721;
                        _2654 = (_2897 * _2782.z) + _2722;
                        if (_2727 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2720 = _2652;
                            _2721 = _2653;
                            _2722 = _2654;
                            _2723 = _2655;
                            _2724 = _2656;
                            _2725 = _2657;
                            _2726 = _2727;
                        }
                    }
                    frontier_phi_66_pred = _2653;
                    frontier_phi_66_pred_1 = _2652;
                    frontier_phi_66_pred_2 = _2654;
                    frontier_phi_66_pred_3 = _2657;
                    frontier_phi_66_pred_4 = _2656;
                    frontier_phi_66_pred_5 = _2655;
                }
                _2408 = frontier_phi_66_pred;
                _2406 = frontier_phi_66_pred_1;
                _2410 = frontier_phi_66_pred_2;
                _2416 = frontier_phi_66_pred_3;
                _2414 = frontier_phi_66_pred_4;
                _2412 = frontier_phi_66_pred_5;
                uint _2582 = _2581 + 1u;
                if (_2582 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2575 = _2406;
                    _2576 = _2408;
                    _2577 = _2410;
                    _2578 = _2412;
                    _2579 = _2414;
                    _2580 = _2416;
                    _2581 = _2582;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2405 = _2406;
            _2407 = _2408;
            _2409 = _2410;
            _2411 = _2412;
            _2413 = _2414;
            _2415 = _2416;
        }
        uvec4 _2419 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2420 = _2419.z;
        uint _2422 = (_2420 >> 8u) & 15u;
        float _2543;
        float _2545;
        float _2547;
        float _2549;
        float _2551;
        float _2553;
        if (((4294967295u << _2422) & _2297) == 0u)
        {
            _2543 = _2405;
            _2545 = _2407;
            _2547 = _2409;
            _2549 = _2411;
            _2551 = _2413;
            _2553 = _2415;
        }
        else
        {
            float _2568 = inversesqrt(dot(vec3(_1701, _1702, _1703), vec3(_1701, _1702, _1703)));
            float _2569 = _2568 * _1701;
            float _2570 = _2568 * _1702;
            float _2571 = _2568 * _1703;
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            float frontier_phi_59_60_ladder_3;
            float frontier_phi_59_60_ladder_4;
            float frontier_phi_59_60_ladder_5;
            if (_2422 < ((_2420 >> 12u) & 15u))
            {
                float _2544;
                float _2546;
                float _2548;
                float _2550;
                float _2552;
                float _2554;
                float _2703 = _2405;
                float _2704 = _2407;
                float _2705 = _2409;
                float _2706 = _2411;
                float _2707 = _2413;
                float _2708 = _2415;
                uint _2709 = _2422;
                uint _2718;
                bool _2719;
                for (;;)
                {
                    _2718 = texelFetch(g_lightClassification, int((((_2291 << 5u) + (_2277 << 9u)) + (_2709 << 2u)) >> 2u)).x;
                    _2719 = _2718 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2719)
                    {
                        frontier_phi_72_pred = _2704;
                        frontier_phi_72_pred_1 = _2703;
                        frontier_phi_72_pred_2 = _2708;
                        frontier_phi_72_pred_3 = _2707;
                        frontier_phi_72_pred_4 = _2706;
                        frontier_phi_72_pred_5 = _2705;
                    }
                    else
                    {
                        float _2902;
                        float _2903;
                        float _2904;
                        float _2905;
                        float _2906;
                        float _2907;
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3201;
                        float _2915 = _2703;
                        float _2916 = _2704;
                        float _2917 = _2705;
                        float _2918 = _2706;
                        float _2919 = _2707;
                        float _2920 = _2708;
                        uint _2921 = _2718;
                        uint _2922;
                        vec4 _2947;
                        float _2948;
                        vec4 _2963;
                        vec3 _2975;
                        vec4 _2991;
                        vec4 _3006;
                        float _3052;
                        bool _3053;
                        for (;;)
                        {
                            uint _2932 = ((_2709 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2921));
                            _2922 = (_2921 + 4294967295u) & _2921;
                            uint _2934 = _2932 * 40u;
                            _2947 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2934)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 3u)).x));
                            _2948 = _2947.w;
                            uint _2950 = (_2932 * 40u) + 4u;
                            _2963 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2950)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 3u)).x));
                            uint _2965 = (_2932 * 40u) + 8u;
                            _2975 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 2u)).x));
                            uint _2978 = (_2932 * 40u) + 16u;
                            _2991 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2978)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 3u)).x));
                            uint _2993 = (_2932 * 40u) + 20u;
                            _3006 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2993)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 3u)).x));
                            uint _3008 = (_2932 * 40u) + 24u;
                            vec4 _3021 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3008)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 3u)).x));
                            uint _3027 = (_2932 * 40u) + 28u;
                            vec4 _3040 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3027)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 3u)).x));
                            _3052 = fma(_1703, _3040.z, fma(_1702, _3040.y, _3040.x * _1701)) + _3040.w;
                            _3053 = !((fma(_1703, _3021.z, fma(_1702, _3021.y, _3021.x * _1701)) + _3021.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3053)
                            {
                                float _3080 = _2947.x - _1701;
                                float _3081 = _2947.y - _1702;
                                float _3082 = _2947.z - _1703;
                                float _3083 = dot(vec3(_3080, _3081, _3082), vec3(_3080, _3081, _3082));
                                float _3086 = inversesqrt(_3083);
                                float _3087 = _3086 * _3080;
                                float _3088 = _3086 * _3081;
                                float _3089 = _3086 * _3082;
                                float _3093 = 1.0 - (_3083 / (_2948 * _2948));
                                float _4053 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                                float _3094 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
                                float _3098 = sqrt(_3083) * _2963.w;
                                float _3100 = 1.39999997615814208984375 / (_3098 + 1.39999997615814208984375);
                                float _3101 = _3100 * _3100;
                                float _3104 = ((1.0 - _3101) * dot(vec3(_3087, _3088, _3089), vec3(_586, _589, _592))) + _3101;
                                float _3107 = _3098 * _3098;
                                float _3111 = (fma(_1703, _2991.z, fma(_1702, _2991.y, _2991.x * _1701)) + _2991.w) / _3052;
                                float _3112 = (fma(_1703, _3006.z, fma(_1702, _3006.y, _3006.x * _1701)) + _3006.w) / _3052;
                                float _3116 = 1.0 - dot(vec2(_3111, _3112), vec2(_3111, _3112));
                                float _4069 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                                float _3117 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
                                float _3118 = _3117 * (((isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0))) * _3094) / ((_3107 * 0.699999988079071044921875) + 1.0));
                                float _3130 = exp2(log2(1.0 / ((_3107 * 3.5) + 5.0)) * 0.25);
                                float _3131 = 1.0 - _647;
                                float _3138 = sqrt(1.0 - ((1.0 - (_3131 * _3131)) * (1.0 - (_3130 * _3130))));
                                float _3139 = _3138 * _3138;
                                float _3140 = _3139 * _3139;
                                float _3141 = _3087 - _2569;
                                float _3142 = _3088 - _2570;
                                float _3143 = _3089 - _2571;
                                float _3147 = inversesqrt(dot(vec3(_3141, _3142, _3143), vec3(_3141, _3142, _3143)));
                                float _3151 = dot(vec3(_586, _589, _592), vec3((-0.0) - _2569, (-0.0) - _2570, (-0.0) - _2571));
                                float _4080 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                                float _3154 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
                                float _3155 = dot(vec3(_586, _589, _592), vec3(_3147 * _3141, _3147 * _3142, _3147 * _3143));
                                float _4091 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                                float _3158 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
                                float _3162 = ((_3158 * _3158) * (_3140 + (-1.0))) + 1.0;
                                float _3163 = _3100 * _3139;
                                float _3164 = _3163 * _3163;
                                float _3170 = ((1.0 - _3164) * dot(vec3(_586, _589, _592), vec3(_3087, _3088, _3089))) + _3164;
                                float _4102 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                                float _3171 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
                                float _3172 = 1.0 - _3139;
                                float _3182 = (0.5 / (((_3171 * ((_3154 * _3172) + _3139)) + 9.9999999392252902907785028219223e-09) + (((_3171 * _3172) + _3139) * _3154))) * _3171;
                                float _4113 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                                float _3192 = (_3117 * _3094) * (((_3140 * 3.1415927410125732421875) * (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0)))) / ((_3162 * _3162) * ((_3107 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3192 * _2975.y;
                                frontier_phi_78_pred_1 = _3192 * _2975.x;
                                frontier_phi_78_pred_2 = _3118 * _2963.z;
                                frontier_phi_78_pred_3 = _3118 * _2963.y;
                                frontier_phi_78_pred_4 = _3118 * _2963.x;
                                frontier_phi_78_pred_5 = _3192 * _2975.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3197 = frontier_phi_78_pred;
                            _3196 = frontier_phi_78_pred_1;
                            _3201 = frontier_phi_78_pred_2;
                            _3200 = frontier_phi_78_pred_3;
                            _3199 = frontier_phi_78_pred_4;
                            _3198 = frontier_phi_78_pred_5;
                            _2905 = _3199 + _2918;
                            _2906 = _3200 + _2919;
                            _2907 = _3201 + _2920;
                            _2902 = _3196 + _2915;
                            _2903 = _3197 + _2916;
                            _2904 = _3198 + _2917;
                            if (_2922 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2915 = _2902;
                                _2916 = _2903;
                                _2917 = _2904;
                                _2918 = _2905;
                                _2919 = _2906;
                                _2920 = _2907;
                                _2921 = _2922;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2903;
                        frontier_phi_72_pred_1 = _2902;
                        frontier_phi_72_pred_2 = _2907;
                        frontier_phi_72_pred_3 = _2906;
                        frontier_phi_72_pred_4 = _2905;
                        frontier_phi_72_pred_5 = _2904;
                    }
                    _2546 = frontier_phi_72_pred;
                    _2544 = frontier_phi_72_pred_1;
                    _2554 = frontier_phi_72_pred_2;
                    _2552 = frontier_phi_72_pred_3;
                    _2550 = frontier_phi_72_pred_4;
                    _2548 = frontier_phi_72_pred_5;
                    uint _2710 = _2709 + 1u;
                    if (_2710 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2703 = _2544;
                        _2704 = _2546;
                        _2705 = _2548;
                        _2706 = _2550;
                        _2707 = _2552;
                        _2708 = _2554;
                        _2709 = _2710;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _2554;
                frontier_phi_59_60_ladder_1 = _2550;
                frontier_phi_59_60_ladder_2 = _2548;
                frontier_phi_59_60_ladder_3 = _2546;
                frontier_phi_59_60_ladder_4 = _2544;
                frontier_phi_59_60_ladder_5 = _2552;
            }
            else
            {
                frontier_phi_59_60_ladder = _2415;
                frontier_phi_59_60_ladder_1 = _2411;
                frontier_phi_59_60_ladder_2 = _2409;
                frontier_phi_59_60_ladder_3 = _2407;
                frontier_phi_59_60_ladder_4 = _2405;
                frontier_phi_59_60_ladder_5 = _2413;
            }
            _2543 = frontier_phi_59_60_ladder_4;
            _2545 = frontier_phi_59_60_ladder_3;
            _2547 = frontier_phi_59_60_ladder_2;
            _2549 = frontier_phi_59_60_ladder_1;
            _2551 = frontier_phi_59_60_ladder_5;
            _2553 = frontier_phi_59_60_ladder;
        }
        float _2558 = isnan(1.0) ? _631 : (isnan(_631) ? 1.0 : min(_631, 1.0));
        _2310 = (_2558 * _2549) + _1989;
        _2312 = (_2558 * _2551) + _1990;
        _2314 = (_2558 * _2553) + _1991;
        _2316 = ((_2543 * 0.039999999105930328369140625) * _2558) + _2145;
        _2318 = ((_2545 * 0.039999999105930328369140625) * _2558) + _2146;
        _2320 = ((_2547 * 0.039999999105930328369140625) * _2558) + _2147;
    }
    else
    {
        _2310 = _1989;
        _2312 = _1990;
        _2314 = _1991;
        _2316 = _2145;
        _2318 = _2146;
        _2320 = _2147;
    }
    float _4129 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _4140 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _4151 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _2337 = ((isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_2310 + ((isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0))) * _631))) + ((_2316 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _1437)) * cbPerFrame._m0[3u].x);
    float _2338 = ((isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_2312 + ((isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0))) * _631))) + ((_2318 + ((isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))) * _1437)) * cbPerFrame._m0[3u].x);
    float _2339 = ((isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_2314 + ((isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0))) * _631))) + ((_2320 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _1437)) * cbPerFrame._m0[3u].x);
    uint _2343 = _605 + 6u;
    float _2351 = _564 / cbSceneParam._m0[86u].x;
    float _2352 = _565 / cbSceneParam._m0[86u].y;
    vec4 _2366 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2351, _2352, (log2((isnan(cbSceneParam._m0[77u].w) ? _551 : (isnan(_551) ? cbSceneParam._m0[77u].w : min(_551, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2368 = _2366.x;
    float _2369 = _2366.y;
    float _2370 = _2366.z;
    float _2371 = _2366.w;
    float _2467;
    float _2469;
    float _2471;
    float _2473;
    if (_551 > cbSceneParam._m0[78u].w)
    {
        float _2430 = isnan(_551) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _551 : min(cbSceneParam._m0[80u].w, _551));
        float _2431 = _2430 / _551;
        float _2442 = _2431 * _263;
        float _2443 = _264 * _2431;
        float _2444 = (-0.0) - _2443;
        float _2445 = _2431 * _265;
        float _2447 = (cbSceneParam._m0[77u].w * _2444) / _2430;
        float _2448 = _2447 + cbSceneParam._m0[79u].w;
        float _2449 = cbSceneParam._m0[79u].w - _2443;
        float _2455 = sqrt(((_2442 * _2442) + (_2443 * _2443)) + (_2445 * _2445));
        float _2458 = (1.0 - (cbSceneParam._m0[77u].w / _2430)) * _2455;
        float _2463 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2465 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2665;
        if (abs((_2444 - _2447) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2665 = ((((_2448 > 0.0) ? exp2(_2463 * _2448) : (2.0 - exp2(_2465 * _2448))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2458;
        }
        else
        {
            float _2604 = 1.0 / cbSceneParam._m0[80u].x;
            float _2605 = isnan(_2449) ? _2448 : (isnan(_2448) ? _2449 : max(_2448, _2449));
            float _2606 = isnan(_2449) ? _2448 : (isnan(_2448) ? _2449 : min(_2448, _2449));
            float _2615 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : min(_2605, 0.0));
            float _2616 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : min(_2606, 0.0));
            _2665 = ((abs(_2455 / _2444) * cbSceneParam._m0[80u].y) * ((((_2615 - _2616) * 2.0) - ((exp2(_2463 * (isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0)))) - exp2(_2463 * (isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0))))) * _2604)) - ((exp2(_2465 * _2615) - exp2(_2465 * _2616)) * _2604))) + (_2458 * cbSceneParam._m0[80u].z);
        }
        vec4 _2667 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2351, _2352, 1.0), 0.0);
        float _2676 = exp2((_2665 * (-1.44269502162933349609375)) * (1.0 - _2667.w));
        float _2677 = log2(_2676);
        float _2693 = log2(_2371);
        _2467 = (exp2(_2693 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2677 * cbSceneParam._m0[78u].x)) * _2667.x) / cbSceneParam._m0[78u].x)) + _2368;
        _2469 = (exp2(_2693 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2677 * cbSceneParam._m0[78u].y)) * _2667.y) / cbSceneParam._m0[78u].y)) + _2369;
        _2471 = (exp2(_2693 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2677 * cbSceneParam._m0[78u].z)) * _2667.z) / cbSceneParam._m0[78u].z)) + _2370;
        _2473 = _2676 * _2371;
    }
    else
    {
        _2467 = _2368;
        _2469 = _2369;
        _2471 = _2370;
        _2473 = _2371;
    }
    float _2485 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2486 = _2485 == 3.0;
    float _2487 = log2(_2473);
    float _2494 = exp2(_2487 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0)));
    float _2495 = exp2(_2487 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0)));
    float _2496 = exp2(_2487 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0)));
    float _2505 = (_2485 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2505 * (_2486 ? _2494 : (_2494 + (cbSceneParam._m0[72u].w * _2467)));
    SV_Target.y = _2505 * (_2486 ? _2495 : (_2495 + (cbSceneParam._m0[72u].w * _2469)));
    SV_Target.z = _2505 * (_2486 ? _2496 : (_2496 + (cbSceneParam._m0[72u].w * _2471)));
    SV_Target.w = cbInstanceData._m0[_2343].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2343].w;
}


