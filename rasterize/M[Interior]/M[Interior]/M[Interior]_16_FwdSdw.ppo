#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D M_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1272;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _200 = _199 * _192;
    float _201 = _199 * _193;
    float _202 = _199 * _194;
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = _206 * NORMAL.x;
    float _208 = _206 * NORMAL.y;
    float _209 = _206 * NORMAL.z;
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214 = _213 * TANGENT.x;
    float _215 = _213 * TANGENT.y;
    float _216 = _213 * TANGENT.z;
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    vec4 _286 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _289 = _286.x;
    vec4 _307 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _324 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _289) + cbMtdParam._m0[12u].x) * _307.x;
    float _326 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _289) + cbMtdParam._m0[12u].y) * _307.y;
    float _328 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _289) + cbMtdParam._m0[12u].z) * _307.z;
    vec4 _349 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _385 = cbMtdParam._m0[21u].w + _271;
    float _386 = cbMtdParam._m0[22u].x + _272;
    float _387 = cbMtdParam._m0[22u].y + _273;
    float _401 = (-0.0) - dot(vec3(_385, _386, _387), vec3(_200, _201, _202));
    float _402 = (-0.0) - dot(vec3(_385, _386, _387), vec3(_214, _215, _216));
    float _403 = (-0.0) - dot(vec3(_385, _386, _387), vec3((-0.0) - _207, (-0.0) - _208, (-0.0) - _209));
    float _407 = inversesqrt(dot(vec3(_401, _402, _403), vec3(_401, _402, _403)));
    float _410 = _407 * _403;
    float _411 = (_407 * _401) + ((cbMtdParam._m0[19u].w * _289) * ((_349.x * 2.0) + (-1.0)));
    float _412 = (_407 * _402) + ((cbMtdParam._m0[20u].x * _289) * ((_349.y * 2.0) + (-1.0)));
    float _413 = _411 * cbMtdParam._m0[18u].z;
    float _414 = _412 * cbMtdParam._m0[18u].y;
    float _415 = fract(TEXCOORD.x);
    float _416 = fract(TEXCOORD.y);
    float _422;
    if (_413 > 0.0)
    {
        _422 = (1.0 - _415) / _413;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_413 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _415) / _413;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _422 = frontier_phi_3_2_ladder;
    }
    float _430;
    if (_414 > 0.0)
    {
        _430 = (1.0 - _416) / _414;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_414 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _416) / _414;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _430 = frontier_phi_7_6_ladder;
    }
    bool _432 = _410 > 0.0;
    float _434 = _432 ? (cbMtdParam._m0[15u].x / _410) : 5000.0;
    float _435 = isnan(_430) ? _422 : (isnan(_422) ? _430 : min(_422, _430));
    float _436 = isnan(_434) ? _435 : (isnan(_435) ? _434 : min(_435, _434));
    float _440 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _441 = _415 + (-0.5);
    float _444 = _416 + (-0.5);
    float _447 = ((_436 * _410) + _440) / _440;
    vec4 _471 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_441 + (_436 * _413)) / _447) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_444 + (_436 * _414)) / _447) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _484 = (_471.x * _289) * cbMtdParam._m0[9u].x;
    float _485 = (_471.y * _289) * cbMtdParam._m0[9u].y;
    float _486 = (_471.z * _289) * cbMtdParam._m0[9u].z;
    float _504 = _411 * cbMtdParam._m0[20u].z;
    float _505 = _412 * cbMtdParam._m0[20u].y;
    bool _506 = _504 > 0.0;
    float _511;
    if (_506)
    {
        _511 = (1.0 - _415) / _504;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_504 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _415) / _504;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _511 = frontier_phi_11_10_ladder;
    }
    bool _513 = _505 > 0.0;
    float _518;
    if (_513)
    {
        _518 = (1.0 - _416) / _505;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_505 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _416) / _505;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _518 = frontier_phi_15_14_ladder;
    }
    float _521 = _432 ? (cbMtdParam._m0[16u].x / _410) : 5000.0;
    float _522 = isnan(_518) ? _511 : (isnan(_511) ? _518 : min(_511, _518));
    float _523 = isnan(_521) ? _522 : (isnan(_522) ? _521 : min(_522, _521));
    float _527 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _531 = ((_523 * _410) + _527) / _527;
    float _536 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _538 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _554 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_441 + (_523 * _504)) / _531) + 0.5) + _536) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_444 + (_523 * _505)) / _531) + 0.5) + _538) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _569;
    if (_506)
    {
        _569 = (1.0 - _415) / _504;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_504 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _415) / _504;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _569 = frontier_phi_19_18_ladder;
    }
    float _575;
    if (_513)
    {
        _575 = (1.0 - _416) / _505;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_505 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _416) / _505;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _575 = frontier_phi_23_22_ladder;
    }
    float _577 = isnan(_575) ? _569 : (isnan(_569) ? _575 : min(_569, _575));
    float _578 = isnan(_521) ? _577 : (isnan(_577) ? _521 : min(_577, _521));
    float _585 = ((_578 * _410) + _527) / _527;
    vec4 _606 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_441 + (_578 * _504)) / _585) + 0.5) + _536) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_444 + (_578 * _505)) / _585) + 0.5) + _538) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _608 = _606.x;
    float _618 = (((((cbMtdParam._m0[10u].x * _289) * _554.x) - _484) * _289) * _608) + _484;
    float _619 = (((((cbMtdParam._m0[10u].y * _289) * _554.y) - _485) * _289) * _608) + _485;
    float _620 = (((((cbMtdParam._m0[10u].z * _289) * _554.z) - _486) * _289) * _608) + _486;
    float _634 = _411 * cbMtdParam._m0[21u].x;
    float _635 = _412 * cbMtdParam._m0[20u].w;
    bool _636 = _634 > 0.0;
    float _641;
    if (_636)
    {
        _641 = (1.0 - _415) / _634;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_634 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _415) / _634;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _641 = frontier_phi_27_26_ladder;
    }
    bool _643 = _635 > 0.0;
    float _648;
    if (_643)
    {
        _648 = (1.0 - _416) / _635;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_635 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _416) / _635;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _648 = frontier_phi_31_30_ladder;
    }
    float _651 = _432 ? (cbMtdParam._m0[17u].z / _410) : 5000.0;
    float _652 = isnan(_648) ? _641 : (isnan(_641) ? _648 : min(_641, _648));
    float _653 = isnan(_651) ? _652 : (isnan(_652) ? _651 : min(_652, _651));
    float _657 = cbMtdParam._m0[17u].z * cbMtdParam._m0[15u].z;
    float _661 = ((_653 * _410) + _657) / _657;
    float _666 = cbMtdParam._m0[17u].y - cbMtdParam._m0[21u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    float _668 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    vec4 _685 = texture(sampler2D(M_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_441 + (_653 * _634)) / _661) + 0.5) + _666) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_444 + (_653 * _635)) / _661) + 0.5) + _668) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[7u].w));
    float _700;
    if (_636)
    {
        _700 = (1.0 - _415) / _634;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_634 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _415) / _634;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _700 = frontier_phi_35_34_ladder;
    }
    float _706;
    if (_643)
    {
        _706 = (1.0 - _416) / _635;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_635 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _416) / _635;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _706 = frontier_phi_39_38_ladder;
    }
    float _708 = isnan(_706) ? _700 : (isnan(_700) ? _706 : min(_700, _706));
    float _709 = isnan(_651) ? _708 : (isnan(_708) ? _651 : min(_708, _651));
    float _716 = ((_709 * _410) + _657) / _657;
    vec4 _736 = texture(sampler2D(M_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_441 + (_709 * _634)) / _716) + 0.5) + _666) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_444 + (_709 * _635)) / _716) + 0.5) + _668) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[8u].w));
    float _738 = _736.x;
    float _748 = _289 * 0.1500000059604644775390625;
    float _759 = (_748 * ((_618 - _324) + (((((cbMtdParam._m0[14u].x * _289) * _685.x) - _618) * _289) * _738))) + _324;
    float _760 = (_748 * ((_619 - _326) + (((((cbMtdParam._m0[14u].y * _289) * _685.y) - _619) * _289) * _738))) + _326;
    float _761 = (_748 * ((_620 - _328) + (((((cbMtdParam._m0[14u].z * _289) * _685.z) - _620) * _289) * _738))) + _328;
    vec4 _773 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _777 = _773.z;
    float _780 = (_773.x * 2.0) + (-1.0);
    float _781 = (_773.y * 2.0) + (-1.0);
    float _782 = dot(vec2(_780, _781), vec2(_780, _781));
    float _3709 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _787 = sqrt(1.0 - (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))));
    float _790 = fma(_787, _207, fma(_781, _214, _780 * _200));
    float _793 = fma(_787, _208, fma(_781, _215, _780 * _201));
    float _796 = fma(_787, _209, fma(_781, _216, _780 * _202));
    float _800 = inversesqrt(dot(vec3(_790, _793, _796), vec3(_790, _793, _796)));
    float _801 = _800 * _790;
    float _802 = _800 * _793;
    float _803 = _800 * _796;
    float _3720 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _804 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _3731 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _3742 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _3753 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _823 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _827 = inversesqrt(dot(vec3(_271, _272, _273), vec3(_271, _272, _273)));
    float _828 = _271 * _827;
    float _829 = _272 * _827;
    float _830 = _273 * _827;
    float _836 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _837 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _856 = fma(_803, cbSceneParam._m0[5u].z, fma(_802, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _801));
    float _859 = fma(_803, cbSceneParam._m0[6u].z, fma(_802, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _801));
    float _862 = fma(_803, cbSceneParam._m0[7u].z, fma(_802, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _801));
    uint _875 = uint(roundEven(NORMAL.w)) * 13u;
    uint _878 = (_875 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _884 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0)))) * cbInstanceData._m0[_878].x;
    float _885 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0)))) * cbInstanceData._m0[_878].y;
    float _886 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0)))) * cbInstanceData._m0[_878].z;
    float _3764 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _887 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    float _3775 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _888 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _3786 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _889 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    vec4 _898 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _836, cbSceneParam._m0[86u].y * _837));
    float _901 = _898.x * TEXCOORD.z;
    float _902 = dot(vec3(_801, _802, _803), vec3(_828, _829, _830));
    float _905 = _902 * 2.0;
    float _909 = (_905 * _801) - _828;
    float _910 = (_905 * _802) - _829;
    float _911 = (_905 * _803) - _830;
    float _915 = abs(dot(vec3(_828, _829, _830), vec3(_801, _802, _803)));
    float _3797 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _917 = sqrt(_804);
    float _930 = exp2((_917 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_917 * 3.0));
    float _962 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _966 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _970 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1271;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _998 = fma(_970, cbModelParam._m0[26u].z, fma(_966, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _962));
        float _1002 = fma(_970, cbModelParam._m0[27u].z, fma(_966, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _962));
        float _1006 = fma(_970, cbModelParam._m0[28u].z, fma(_966, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _962));
        float _1029 = _962 + _801;
        float _1030 = _966 + _802;
        float _1031 = _970 + _803;
        float _1041 = fma(_1031, cbModelParam._m0[26u].z, fma(_1030, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1029)) - _998;
        float _1042 = fma(_1031, cbModelParam._m0[27u].z, fma(_1030, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1029)) - _1002;
        float _1043 = fma(_1031, cbModelParam._m0[28u].z, fma(_1030, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1029)) - _1006;
        float _1047 = inversesqrt(dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043)));
        float _1060 = ((_1047 * _1041) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_998 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1061 = ((_1047 * _1042) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1002 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1062 = ((_1047 * _1043) / cbModelParam._m0[34u].z) + ((((((_1006 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        float _1099 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1065.x + (-0.5));
        float _1101 = _1099 * (_1065.y + (-0.5));
        float _1102 = _1099 * (_1065.z + (-0.5));
        float _1109 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1072.x + (-0.5));
        float _1111 = _1109 * (_1072.y + (-0.5));
        float _1112 = _1109 * (_1072.z + (-0.5));
        float _1119 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1079.x + (-0.5));
        float _1121 = _1119 * (_1079.y + (-0.5));
        float _1122 = _1119 * (_1079.z + (-0.5));
        float _1129 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1086.x + (-0.5));
        float _1131 = _1129 * (_1086.y + (-0.5));
        float _1132 = _1129 * (_1086.z + (-0.5));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1136 = _1100 * 0.5;
        float _1137 = _1110 * 0.5;
        float _1138 = _1120 * 0.5;
        float _1139 = dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138));
        float _1144 = (_1139 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1139);
        float _1153 = (dot(vec3(_801, _802, _803), vec3(_1144 * _1136, _1144 * _1137, _1144 * _1138)) + 1.0) * 0.5;
        float _3823 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1163 = sqrt(((_1137 * _1137) + (_1136 * _1136)) + (_1138 * _1138)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _3834 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1165 = _1164 * 2.0;
        float _1169 = (1.0 - _1164) / (_1164 + 1.0);
        float _3845 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1179 = ((((1.0 - _1170) * (_1165 + 2.0)) * exp2(log2(isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_1165 + 1.0))) + _1170) * _1133;
        float _1180 = _1101 * 0.5;
        float _1181 = _1111 * 0.5;
        float _1182 = _1121 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1196 = (dot(vec3(_801, _802, _803), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _3856 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1205 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _3867 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _3878 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_1207 + 1.0))) + _1212) * _1134;
        float _1222 = _1102 * 0.5;
        float _1223 = _1112 * 0.5;
        float _1224 = _1122 * 0.5;
        float _1225 = dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224));
        float _1230 = (_1225 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1225);
        float _1238 = (dot(vec3(_801, _802, _803), vec3(_1230 * _1222, _1230 * _1223, _1230 * _1224)) + 1.0) * 0.5;
        float _3889 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1247 = sqrt(((_1223 * _1223) + (_1222 * _1222)) + (_1224 * _1224)) / (_1135 + 9.9999997473787516355514526367188e-06);
        float _3900 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1249 = _1248 * 2.0;
        float _1253 = (1.0 - _1248) / (_1248 + 1.0);
        float _3911 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1263 = ((((1.0 - _1254) * (_1249 + 2.0)) * exp2(log2(isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1249 + 1.0))) + _1254) * _1135;
        _1271 = _1102;
        _1273 = _1101;
        _1274 = _1100;
        _1275 = _1112;
        _1276 = _1111;
        _1277 = _1110;
        _1278 = _1122;
        _1279 = _1121;
        _1280 = _1120;
        _1281 = _1135;
        _1282 = _1134;
        _1283 = _1133;
        _1284 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)));
        _1285 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
        _1286 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)));
    }
    else
    {
        _1271 = _1272;
        _1273 = _1272;
        _1274 = _1272;
        _1275 = _1272;
        _1276 = _1272;
        _1277 = _1272;
        _1278 = _1272;
        _1279 = _1272;
        _1280 = _1272;
        _1281 = _1272;
        _1282 = _1272;
        _1283 = _1272;
        _1284 = 0.0;
        _1285 = 0.0;
        _1286 = 0.0;
    }
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1312 = fma(_970, cbModelParam._m0[30u].z, fma(_966, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _962));
        float _1316 = fma(_970, cbModelParam._m0[31u].z, fma(_966, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _962));
        float _1320 = fma(_970, cbModelParam._m0[32u].z, fma(_966, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _962));
        float _1343 = _962 + _801;
        float _1344 = _966 + _802;
        float _1345 = _970 + _803;
        float _1355 = fma(_1345, cbModelParam._m0[30u].z, fma(_1344, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1343)) - _1312;
        float _1356 = fma(_1345, cbModelParam._m0[31u].z, fma(_1344, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1343)) - _1316;
        float _1357 = fma(_1345, cbModelParam._m0[32u].z, fma(_1344, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1343)) - _1320;
        float _1361 = inversesqrt(dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357)));
        float _1374 = ((_1361 * _1355) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1312 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1375 = ((_1361 * _1356) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1316 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1376 = ((_1361 * _1357) / cbModelParam._m0[35u].z) + ((((((_1320 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1378 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        vec4 _1385 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        vec4 _1392 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        float _1411 = exp2((_1378.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1378.x + (-0.5));
        float _1413 = _1411 * (_1378.y + (-0.5));
        float _1414 = _1411 * (_1378.z + (-0.5));
        float _1421 = exp2((_1385.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1385.x + (-0.5));
        float _1423 = _1421 * (_1385.y + (-0.5));
        float _1424 = _1421 * (_1385.z + (-0.5));
        float _1431 = exp2((_1392.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1392.x + (-0.5));
        float _1433 = _1431 * (_1392.y + (-0.5));
        float _1434 = _1431 * (_1392.z + (-0.5));
        float _1441 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1399.x + (-0.5));
        float _1443 = _1441 * (_1399.y + (-0.5));
        float _1444 = _1441 * (_1399.z + (-0.5));
        float _1445 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1446 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1447 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1448 = _1412 * 0.5;
        float _1449 = _1422 * 0.5;
        float _1450 = _1432 * 0.5;
        float _1451 = dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450));
        float _1456 = (_1451 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1451);
        float _1464 = (dot(vec3(_801, _802, _803), vec3(_1456 * _1448, _1456 * _1449, _1456 * _1450)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1473 = sqrt(((_1449 * _1449) + (_1448 * _1448)) + (_1450 * _1450)) / (_1445 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1475 = _1474 * 2.0;
        float _1479 = (1.0 - _1474) / (_1474 + 1.0);
        float _3974 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1489 = ((((1.0 - _1480) * (_1475 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1475 + 1.0))) + _1480) * _1445;
        float _1490 = _1413 * 0.5;
        float _1491 = _1423 * 0.5;
        float _1492 = _1433 * 0.5;
        float _1493 = dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492));
        float _1498 = (_1493 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1493);
        float _1506 = (dot(vec3(_801, _802, _803), vec3(_1498 * _1490, _1498 * _1491, _1498 * _1492)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1515 = sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492)) / (_1446 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1517 = _1516 * 2.0;
        float _1521 = (1.0 - _1516) / (_1516 + 1.0);
        float _4007 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1531 = ((((1.0 - _1522) * (_1517 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1517 + 1.0))) + _1522) * _1446;
        float _1532 = _1414 * 0.5;
        float _1533 = _1424 * 0.5;
        float _1534 = _1434 * 0.5;
        float _1535 = dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534));
        float _1540 = (_1535 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1535);
        float _1548 = (dot(vec3(_801, _802, _803), vec3(_1540 * _1532, _1540 * _1533, _1540 * _1534)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1557 = sqrt(((_1533 * _1533) + (_1532 * _1532)) + (_1534 * _1534)) / (_1447 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1559 = _1558 * 2.0;
        float _1563 = (1.0 - _1558) / (_1558 + 1.0);
        float _4040 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1573 = ((((1.0 - _1564) * (_1559 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1559 + 1.0))) + _1564) * _1447;
        _1581 = _1414;
        _1582 = _1413;
        _1583 = _1412;
        _1584 = _1424;
        _1585 = _1423;
        _1586 = _1422;
        _1587 = _1434;
        _1588 = _1433;
        _1589 = _1432;
        _1590 = _1447;
        _1591 = _1446;
        _1592 = _1445;
        _1593 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)));
        _1594 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)));
        _1595 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)));
    }
    else
    {
        _1581 = _1272;
        _1582 = _1272;
        _1583 = _1272;
        _1584 = _1272;
        _1585 = _1272;
        _1586 = _1272;
        _1587 = _1272;
        _1588 = _1272;
        _1589 = _1272;
        _1590 = _1272;
        _1591 = _1272;
        _1592 = _1272;
        _1593 = 0.0;
        _1594 = 0.0;
        _1595 = 0.0;
    }
    float _1605 = (cbModelParam._m0[1u].x * (_1593 - _1284)) + _1284;
    float _1606 = (cbModelParam._m0[1u].x * (_1594 - _1285)) + _1285;
    float _1607 = (cbModelParam._m0[1u].x * (_1595 - _1286)) + _1286;
    float _1628 = fma(_1607, cbSceneParam._m0[89u].z, fma(_1606, cbSceneParam._m0[89u].y, _1605 * cbSceneParam._m0[89u].x));
    float _1631 = fma(_1607, cbSceneParam._m0[90u].z, fma(_1606, cbSceneParam._m0[90u].y, _1605 * cbSceneParam._m0[90u].x));
    float _1634 = fma(_1607, cbSceneParam._m0[91u].z, fma(_1606, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1605));
    float _1649 = _909 * 0.5;
    float _1650 = _910 * 0.5;
    float _1651 = _911 * 0.5;
    float _1652 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1583, _1586, _1589, _1592));
    float _1655 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1582, _1585, _1588, _1591));
    float _1658 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1581, _1584, _1587, _1590));
    float _1692;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1665 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1271, _1275, _1278, _1281));
        float _1669 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1273, _1276, _1279, _1282));
        float _1673 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1274, _1277, _1280, _1283));
        float _1680 = dot(vec4(cbModelParam._m0[39u]), vec4(_1649, _1650, _1651, 1.0));
        _1692 = dot(vec3(isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)), isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)), isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1680) ? 0.0 : (isnan(0.0) ? _1680 : max(0.0, _1680))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1692 = 1.0;
    }
    float _1703;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1694 = dot(vec4(cbModelParam._m0[40u]), vec4(_1649, _1650, _1651, 1.0));
        _1703 = dot(vec3(isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)), isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)), isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1694) ? 0.0 : (isnan(0.0) ? _1694 : max(0.0, _1694))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1703 = 1.0;
    }
    float _1707 = (_1703 * cbModelParam._m0[1u].x) + (_1692 * (1.0 - cbModelParam._m0[1u].x));
    float _1717 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _804);
    float _1718 = isnan(_1717) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1717 : min(cbModelParam._m0[25u].z, _1717));
    float _1798;
    float _1800;
    float _1802;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1765 = fma(_970, cbModelParam._m0[13u].z, fma(_966, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _962)) + cbModelParam._m0[13u].w;
        float _1769 = fma(_970, cbModelParam._m0[14u].z, fma(_966, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _962)) + cbModelParam._m0[14u].w;
        float _1773 = fma(_970, cbModelParam._m0[15u].z, fma(_966, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _962)) + cbModelParam._m0[15u].w;
        float _1776 = fma(_911, cbModelParam._m0[13u].z, fma(_910, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _909));
        float _1779 = fma(_911, cbModelParam._m0[14u].z, fma(_910, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _909));
        float _1782 = fma(_911, cbModelParam._m0[15u].z, fma(_910, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _909));
        float _1810;
        if (_1776 > 0.0)
        {
            _1810 = abs((1.0 - _1765) / _1776);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1765 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1810 = frontier_phi_54_52_ladder;
        }
        float _1978;
        if (_1779 > 0.0)
        {
            _1978 = abs((1.0 - _1769) / _1779);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1769 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _1978 = frontier_phi_63_59_ladder;
        }
        float _2422;
        if (_1782 > 0.0)
        {
            _2422 = abs((1.0 - _1773) / _1782);
        }
        else
        {
            float frontier_phi_75_70_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_75_70_ladder = abs((_1773 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_75_70_ladder = 5000.0;
            }
            _2422 = frontier_phi_75_70_ladder;
        }
        float _2424 = isnan(_1978) ? _1810 : (isnan(_1810) ? _1978 : min(_1810, _1978));
        float _2425 = isnan(_2422) ? _2424 : (isnan(_2424) ? _2422 : min(_2424, _2422));
        float _2429 = (_2425 * _1776) + _1765;
        float _2430 = (_2425 * _1779) + _1769;
        float _2431 = (_2425 * _1782) + _1773;
        float _2432 = _2425 * 9.9999997473787516355514526367188e-05;
        float _2434 = (-1.0) - _2432;
        float _2436 = _2432 + 1.0;
        float frontier_phi_53_75_ladder;
        float frontier_phi_53_75_ladder_1;
        float frontier_phi_53_75_ladder_2;
        if ((_2431 > _2436) || ((_2431 < _2434) || ((_2430 > _2436) || ((_2430 < _2434) || ((_2429 < _2434) || (_2429 > _2436))))))
        {
            frontier_phi_53_75_ladder = 0.0;
            frontier_phi_53_75_ladder_1 = 0.0;
            frontier_phi_53_75_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2665 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2431, cbModelParam._m0[9u].z, fma(_2430, cbModelParam._m0[9u].y, _2429 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2431, cbModelParam._m0[10u].z, fma(_2430, cbModelParam._m0[10u].y, _2429 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2431, cbModelParam._m0[11u].z, fma(_2430, cbModelParam._m0[11u].y, _2429 * cbModelParam._m0[11u].x))), _1718);
            frontier_phi_53_75_ladder = _2665.z * cbModelParam._m0[1u].y;
            frontier_phi_53_75_ladder_1 = _2665.y * cbModelParam._m0[1u].y;
            frontier_phi_53_75_ladder_2 = _2665.x * cbModelParam._m0[1u].y;
        }
        _1798 = frontier_phi_53_75_ladder_2;
        _1800 = frontier_phi_53_75_ladder_1;
        _1802 = frontier_phi_53_75_ladder;
    }
    else
    {
        vec4 _1786 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_909, _910, _911), _1718);
        _1798 = _1786.x * cbModelParam._m0[1u].y;
        _1800 = _1786.y * cbModelParam._m0[1u].y;
        _1802 = _1786.z * cbModelParam._m0[1u].y;
    }
    float _1806 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _804);
    float _1807 = isnan(_1806) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1806 : min(cbModelParam._m0[25u].w, _1806));
    float _1895;
    float _1897;
    float _1899;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1859 = fma(_970, cbModelParam._m0[21u].z, fma(_966, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _962)) + cbModelParam._m0[21u].w;
        float _1863 = fma(_970, cbModelParam._m0[22u].z, fma(_966, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _962)) + cbModelParam._m0[22u].w;
        float _1867 = fma(_970, cbModelParam._m0[23u].z, fma(_966, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _962)) + cbModelParam._m0[23u].w;
        float _1870 = fma(_911, cbModelParam._m0[21u].z, fma(_910, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _909));
        float _1873 = fma(_911, cbModelParam._m0[22u].z, fma(_910, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _909));
        float _1876 = fma(_911, cbModelParam._m0[23u].z, fma(_910, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _909));
        float _1983;
        if (_1870 > 0.0)
        {
            _1983 = abs((1.0 - _1859) / _1870);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1859 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _1983 = frontier_phi_65_61_ladder;
        }
        float _2449;
        if (_1873 > 0.0)
        {
            _2449 = abs((1.0 - _1863) / _1873);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1863 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2449 = frontier_phi_77_72_ladder;
        }
        float _2786;
        if (_1876 > 0.0)
        {
            _2786 = abs((1.0 - _1867) / _1876);
        }
        else
        {
            float frontier_phi_89_84_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_89_84_ladder = abs((_1867 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_89_84_ladder = 5000.0;
            }
            _2786 = frontier_phi_89_84_ladder;
        }
        float _2788 = isnan(_2449) ? _1983 : (isnan(_1983) ? _2449 : min(_1983, _2449));
        float _2789 = isnan(_2786) ? _2788 : (isnan(_2788) ? _2786 : min(_2788, _2786));
        float _2793 = (_2789 * _1870) + _1859;
        float _2794 = (_2789 * _1873) + _1863;
        float _2795 = (_2789 * _1876) + _1867;
        float _2796 = _2789 * 9.9999997473787516355514526367188e-05;
        float _2797 = (-1.0) - _2796;
        float _2799 = _2796 + 1.0;
        float frontier_phi_62_89_ladder;
        float frontier_phi_62_89_ladder_1;
        float frontier_phi_62_89_ladder_2;
        if ((_2795 > _2799) || ((_2795 < _2797) || ((_2794 > _2799) || ((_2794 < _2797) || ((_2793 < _2797) || (_2793 > _2799))))))
        {
            frontier_phi_62_89_ladder = 0.0;
            frontier_phi_62_89_ladder_1 = 0.0;
            frontier_phi_62_89_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2916 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2795, cbModelParam._m0[17u].z, fma(_2794, cbModelParam._m0[17u].y, _2793 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2795, cbModelParam._m0[18u].z, fma(_2794, cbModelParam._m0[18u].y, _2793 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2795, cbModelParam._m0[19u].z, fma(_2794, cbModelParam._m0[19u].y, _2793 * cbModelParam._m0[19u].x))), _1807);
            frontier_phi_62_89_ladder = _2916.z * cbModelParam._m0[1u].z;
            frontier_phi_62_89_ladder_1 = _2916.y * cbModelParam._m0[1u].z;
            frontier_phi_62_89_ladder_2 = _2916.x * cbModelParam._m0[1u].z;
        }
        _1895 = frontier_phi_62_89_ladder_2;
        _1897 = frontier_phi_62_89_ladder_1;
        _1899 = frontier_phi_62_89_ladder;
    }
    else
    {
        vec4 _1879 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_909, _910, _911), _1807);
        _1895 = _1879.x * cbModelParam._m0[1u].z;
        _1897 = _1879.y * cbModelParam._m0[1u].z;
        _1899 = _1879.z * cbModelParam._m0[1u].z;
    }
    float _1911 = ((((1.0 - _930) * ((_917 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_930 * _917)) * _901;
    float _1912 = _1911 * ((cbModelParam._m0[1u].w * (_1895 - _1798)) + _1798);
    float _1913 = _1911 * ((cbModelParam._m0[1u].w * (_1897 - _1800)) + _1800);
    float _1914 = _1911 * ((cbModelParam._m0[1u].w * (_1899 - _1802)) + _1802);
    float _1917 = fma(_1914, cbSceneParam._m0[89u].z, fma(_1913, cbSceneParam._m0[89u].y, _1912 * cbSceneParam._m0[89u].x));
    float _1920 = fma(_1914, cbSceneParam._m0[90u].z, fma(_1913, cbSceneParam._m0[90u].y, _1912 * cbSceneParam._m0[90u].x));
    float _1923 = fma(_1914, cbSceneParam._m0[91u].z, fma(_1913, cbSceneParam._m0[91u].y, _1912 * cbSceneParam._m0[91u].x));
    float _1957 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1961 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1965 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1969 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1970 = _1957 / _1969;
    float _1971 = _1961 / _1969;
    float _1972 = _1965 / _1969;
    float _2119;
    float _2120;
    float _2121;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1999 = ((uint(_1972 > cbSceneParam._m0[59u].y) + uint(_1972 > cbSceneParam._m0[59u].x)) + uint(_1972 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2000 = _1999 + 43u;
        uint _2008 = _1999 + 44u;
        uint _2016 = _1999 + 45u;
        uint _2024 = _1999 + 46u;
        float _2035 = fma(_1969, cbSceneParam._m0[_2000].w, fma(_1965, cbSceneParam._m0[_2000].z, fma(_1961, cbSceneParam._m0[_2000].y, _1957 * cbSceneParam._m0[_2000].x)));
        float _2039 = fma(_1969, cbSceneParam._m0[_2008].w, fma(_1965, cbSceneParam._m0[_2008].z, fma(_1961, cbSceneParam._m0[_2008].y, _1957 * cbSceneParam._m0[_2008].x)));
        float _2047 = fma(_1969, cbSceneParam._m0[_2024].w, fma(_1965, cbSceneParam._m0[_2024].z, fma(_1961, cbSceneParam._m0[_2024].y, _1957 * cbSceneParam._m0[_2024].x)));
        float _2052 = cbSceneParam._m0[33u].z * _2047;
        float _2054 = cbSceneParam._m0[33u].w * _2047;
        float _2057 = fma(_1969, cbSceneParam._m0[_2016].w, fma(_1965, cbSceneParam._m0[_2016].z, fma(_1961, cbSceneParam._m0[_2016].y, _1957 * cbSceneParam._m0[_2016].x))) / _2047;
        float _2105 = (cbSceneParam._m0[33u].x - sqrt(((_1971 * _1971) + (_1970 * _1970)) + (_1972 * _1972))) * cbSceneParam._m0[33u].y;
        float _4166 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2112 = (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2052 + _2035) / _2047, (_2054 + _2039) / _2047), _2057), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2054 + _2035) / _2047, (_2039 - _2052) / _2047), _2057), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2035 - _2052) / _2047, (_2039 - _2054) / _2047), _2057), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2035 - _2054) / _2047, (_2052 + _2039) / _2047), _2057), 0.0)).x), vec4(0.25)));
        _2119 = 1.0 - (_2112 * cbSceneParam._m0[34u].x);
        _2120 = 1.0 - (_2112 * cbSceneParam._m0[34u].y);
        _2121 = 1.0 - (_2112 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2119 = 1.0;
        _2120 = 1.0;
        _2121 = 1.0;
    }
    float _2185;
    float _2187;
    float _2189;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2173 = fma(_1969, cbSceneParam._m0[63u].w, fma(_1965, cbSceneParam._m0[63u].z, fma(_1961, cbSceneParam._m0[63u].y, _1957 * cbSceneParam._m0[63u].x)));
        float _2174 = fma(_1969, cbSceneParam._m0[60u].w, fma(_1965, cbSceneParam._m0[60u].z, fma(_1961, cbSceneParam._m0[60u].y, _1957 * cbSceneParam._m0[60u].x))) / _2173;
        float _2175 = fma(_1969, cbSceneParam._m0[61u].w, fma(_1965, cbSceneParam._m0[61u].z, fma(_1961, cbSceneParam._m0[61u].y, _1957 * cbSceneParam._m0[61u].x))) / _2173;
        float frontier_phi_74_73_ladder;
        float frontier_phi_74_73_ladder_1;
        float frontier_phi_74_73_ladder_2;
        if ((((_2174 >= cbSceneParam._m0[64u].x) && (_2175 >= cbSceneParam._m0[64u].y)) && (_2174 <= cbSceneParam._m0[64u].z)) && (_2175 <= cbSceneParam._m0[64u].w))
        {
            float _2462 = fma(_1969, cbSceneParam._m0[62u].w, fma(_1965, cbSceneParam._m0[62u].z, fma(_1961, cbSceneParam._m0[62u].y, _1957 * cbSceneParam._m0[62u].x))) / _2173;
            float _2466 = isnan(cbSceneParam._m0[41u].w) ? _2462 : (isnan(_2462) ? cbSceneParam._m0[41u].w : max(_2462, cbSceneParam._m0[41u].w));
            float _2509 = (cbSceneParam._m0[33u].x - sqrt(((_1971 * _1971) + (_1970 * _1970)) + (_1972 * _1972))) * cbSceneParam._m0[33u].y;
            float _4182 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
            float _2516 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2174, cbSceneParam._m0[33u].w + _2175), _2466), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2174, _2175 - cbSceneParam._m0[33u].z), _2466), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2174 - cbSceneParam._m0[33u].z, _2175 - cbSceneParam._m0[33u].w), _2466), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2174 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2175), _2466), 0.0)).x), vec4(0.25)));
            float _2520 = 1.0 - (_2516 * cbSceneParam._m0[34u].x);
            float _2521 = 1.0 - (_2516 * cbSceneParam._m0[34u].y);
            float _2522 = 1.0 - (_2516 * cbSceneParam._m0[34u].z);
            frontier_phi_74_73_ladder = isnan(_2520) ? _2119 : (isnan(_2119) ? _2520 : min(_2119, _2520));
            frontier_phi_74_73_ladder_1 = isnan(_2521) ? _2120 : (isnan(_2120) ? _2521 : min(_2120, _2521));
            frontier_phi_74_73_ladder_2 = isnan(_2522) ? _2121 : (isnan(_2121) ? _2522 : min(_2121, _2522));
        }
        else
        {
            frontier_phi_74_73_ladder = _2119;
            frontier_phi_74_73_ladder_1 = _2120;
            frontier_phi_74_73_ladder_2 = _2121;
        }
        _2185 = frontier_phi_74_73_ladder;
        _2187 = frontier_phi_74_73_ladder_1;
        _2189 = frontier_phi_74_73_ladder_2;
    }
    else
    {
        _2185 = _2119;
        _2187 = _2120;
        _2189 = _2121;
    }
    uvec4 _2194 = floatBitsToUint(cbInstanceData._m0[_875 + 5u]);
    uint _2196 = _2194.x * 14u;
    uint _2197 = _2196 + 13u;
    float _2202 = _901 + (-1.0);
    float _2205 = (cbLight._m0[_2197].x * _2202) + 1.0;
    float _2206 = (cbLight._m0[_2197].y * _2202) + 1.0;
    uint _2207 = _2196 + 5u;
    float _2213 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
    uint _2217 = _2196 + 4u;
    float _2226 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
    uint _2230 = _2196 | 1u;
    float _2241 = dot(vec3(cbLight._m0[_2196].xyz), vec3(_801, _802, _803));
    float _2244 = dot(vec3(cbLight._m0[_2230].xyz), vec3(_801, _802, _803));
    float _4218 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _4229 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2249 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * 0.3183098733425140380859375;
    float _2251 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * 0.3183098733425140380859375;
    float _2258 = ((cbLight._m0[_2207].x * _2213) * _2251) + (((cbLight._m0[_2217].x * _2185) * _2226) * _2249);
    float _2259 = ((_2213 * cbLight._m0[_2207].y) * _2251) + (((cbLight._m0[_2217].y * _2187) * _2226) * _2249);
    float _2260 = ((_2213 * cbLight._m0[_2207].z) * _2251) + (((cbLight._m0[_2217].z * _2189) * _2226) * _2249);
    uint _2262 = _2196 + 8u;
    float _2275 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2196].w)) * _804) * 0.949999988079071044921875);
    float _2276 = _2275 * _2275;
    float _2277 = cbLight._m0[_2196].x + _828;
    float _2278 = cbLight._m0[_2196].y + _829;
    float _2279 = cbLight._m0[_2196].z + _830;
    float _2283 = inversesqrt(dot(vec3(_2277, _2278, _2279), vec3(_2277, _2278, _2279)));
    float _2284 = _2283 * _2277;
    float _2285 = _2283 * _2278;
    float _2286 = _2283 * _2279;
    float _2287 = dot(vec3(_801, _802, _803), vec3(cbLight._m0[_2196].xyz));
    float _4240 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2290 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
    float _4251 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _2291 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
    float _2292 = dot(vec3(_801, _802, _803), vec3(_2284, _2285, _2286));
    float _4262 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2295 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _2296 = dot(vec3(cbLight._m0[_2196].xyz), vec3(_2284, _2285, _2286));
    float _4273 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2300 = _2276 * _2276;
    float _2304 = ((_2295 * _2295) * (_2300 + (-1.0))) + 1.0;
    float _2315 = (exp2(log2(1.0 - (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2316 = 1.0 - _2276;
    float _2327 = (0.5 / (((_2291 * ((_2290 * _2316) + _2276)) + 9.9999999392252902907785028219223e-09) + (((_2291 * _2316) + _2276) * _2290))) * _2290;
    float _4284 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2329 = (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_2300 / ((_2304 * _2304) * 3.141590118408203125));
    uint _2343 = _2196 + 9u;
    float _2354 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2230].w)) * _804) * 0.949999988079071044921875);
    float _2355 = _2354 * _2354;
    float _2356 = cbLight._m0[_2230].x + _828;
    float _2357 = cbLight._m0[_2230].y + _829;
    float _2358 = cbLight._m0[_2230].z + _830;
    float _2362 = inversesqrt(dot(vec3(_2356, _2357, _2358), vec3(_2356, _2357, _2358)));
    float _2363 = _2362 * _2356;
    float _2364 = _2362 * _2357;
    float _2365 = _2362 * _2358;
    float _2366 = dot(vec3(_801, _802, _803), vec3(cbLight._m0[_2230].xyz));
    float _4295 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2369 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
    float _2370 = dot(vec3(_801, _802, _803), vec3(_2363, _2364, _2365));
    float _4306 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2373 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _2374 = dot(vec3(cbLight._m0[_2230].xyz), vec3(_2363, _2364, _2365));
    float _4317 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2378 = _2355 * _2355;
    float _2382 = ((_2373 * _2373) * (_2378 + (-1.0))) + 1.0;
    float _2391 = (exp2(log2(1.0 - (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2392 = 1.0 - _2355;
    float _2402 = (0.5 / (((_2291 * ((_2369 * _2392) + _2355)) + 9.9999999392252902907785028219223e-09) + (((_2291 * _2392) + _2355) * _2369))) * _2369;
    float _4328 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _2404 = (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_2378 / ((_2382 * _2382) * 3.141590118408203125));
    float _2414 = (((_2391 * cbLight._m0[_2343].x) * _2404) * _2213) + ((((cbLight._m0[_2262].x * _2185) * _2315) * _2329) * _2226);
    float _2415 = (((_2391 * cbLight._m0[_2343].y) * _2404) * _2213) + ((((cbLight._m0[_2262].y * _2187) * _2315) * _2329) * _2226);
    float _2416 = (((_2391 * cbLight._m0[_2343].z) * _2404) * _2213) + ((((cbLight._m0[_2262].z * _2189) * _2315) * _2329) * _2226);
    float _2579;
    float _2581;
    float _2583;
    float _2585;
    float _2587;
    float _2589;
    if (_2194.y == 0u)
    {
        uvec4 _2534 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2535 = _2534.x;
        uint _2546 = uint((float(_2534.y) * floor(float(uint(cbSceneParam._m0[85u].y * _837) / _2535))) + floor(float(uint(cbSceneParam._m0[85u].x * _836) / _2535)));
        float _2556 = (log2(_1972 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2557 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        uint _2560 = uint(isnan(14.0) ? _2557 : (isnan(_2557) ? 14.0 : min(_2557, 14.0)));
        uvec4 _2565 = texelFetch(g_lightClusterGridBuffer, int(((_2560 << 2u) + (_2546 << 6u)) >> 2u));
        uint _2566 = _2565.x;
        uint _2567 = _2534.z;
        float _2674;
        float _2676;
        float _2678;
        float _2680;
        float _2682;
        float _2684;
        if (((((1u << ((_2567 >> 4u) & 15u)) + 4294967295u) & _2566) == 0u) || ((_2567 & 240u) == 0u))
        {
            _2674 = 0.0;
            _2676 = 0.0;
            _2678 = 0.0;
            _2680 = 0.0;
            _2682 = 0.0;
            _2684 = 0.0;
        }
        else
        {
            float _2675;
            float _2677;
            float _2679;
            float _2681;
            float _2683;
            float _2685;
            float _2844 = 0.0;
            float _2845 = 0.0;
            float _2846 = 0.0;
            float _2847 = 0.0;
            float _2848 = 0.0;
            float _2849 = 0.0;
            uint _2850 = 0u;
            uint _2859;
            bool _2860;
            for (;;)
            {
                _2859 = texelFetch(g_lightClassification, int((((_2560 << 5u) + (_2546 << 9u)) + (_2850 << 2u)) >> 2u)).x;
                _2860 = _2859 == 0u;
                float frontier_phi_98_pred;
                float frontier_phi_98_pred_1;
                float frontier_phi_98_pred_2;
                float frontier_phi_98_pred_3;
                float frontier_phi_98_pred_4;
                float frontier_phi_98_pred_5;
                if (_2860)
                {
                    frontier_phi_98_pred = _2844;
                    frontier_phi_98_pred_1 = _2845;
                    frontier_phi_98_pred_2 = _2849;
                    frontier_phi_98_pred_3 = _2848;
                    frontier_phi_98_pred_4 = _2847;
                    frontier_phi_98_pred_5 = _2846;
                }
                else
                {
                    float _2989;
                    float _2990;
                    float _2991;
                    float _2992;
                    float _2993;
                    float _2994;
                    uint _2995;
                    _2989 = _2844;
                    _2990 = _2845;
                    _2991 = _2846;
                    _2992 = _2847;
                    _2993 = _2848;
                    _2994 = _2849;
                    _2995 = _2859;
                    float _2921;
                    float _2922;
                    float _2923;
                    float _2924;
                    float _2925;
                    float _2926;
                    for (;;)
                    {
                        uint _2999 = uint(findLSB(_2995)) + (_2850 << 5u);
                        uint _2996 = (_2995 + 4294967295u) & _2995;
                        uint _3001 = _2999 * 48u;
                        vec4 _3015 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3001)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 3u)).x));
                        uint _3021 = (_2999 * 48u) + 4u;
                        vec4 _3034 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3021)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 3u)).x));
                        uint _3040 = (_2999 * 48u) + 8u;
                        vec3 _3051 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3040)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 2u)).x));
                        float _3055 = _3015.x - _1970;
                        float _3056 = _3015.y - _1971;
                        float _3057 = _3015.z - _1972;
                        float _3058 = dot(vec3(_3055, _3056, _3057), vec3(_3055, _3056, _3057));
                        float _3061 = inversesqrt(_3058);
                        float _3062 = _3061 * _3055;
                        float _3063 = _3061 * _3056;
                        float _3064 = _3061 * _3057;
                        float _3065 = dot(vec3(_856, _859, _862), vec3(_3062, _3063, _3064));
                        float _3070 = 1.0 - (_3058 * _3015.w);
                        float _4349 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                        float _3071 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                        float _3072 = sqrt(_3058) * _3034.w;
                        float _3075 = 1.39999997615814208984375 / (_3072 + 1.39999997615814208984375);
                        float _3076 = _3075 * _3075;
                        float _3079 = ((1.0 - _3076) * _3065) + _3076;
                        float _3082 = _3072 * _3072;
                        float _3086 = ((isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0))) * _3071) / ((_3082 * 0.699999988079071044921875) + 1.0);
                        float _3090 = (-0.0) - _1970;
                        float _3091 = (-0.0) - _1971;
                        float _3092 = (-0.0) - _1972;
                        float _3096 = inversesqrt(dot(vec3(_3090, _3091, _3092), vec3(_3090, _3091, _3092)));
                        float _3097 = _3096 * _3090;
                        float _3098 = _3096 * _3091;
                        float _3099 = _3096 * _3092;
                        float _3106 = exp2(log2(1.0 / ((_3082 * 3.5) + 5.0)) * 0.25);
                        float _3107 = 1.0 - _917;
                        float _3114 = sqrt(1.0 - ((1.0 - (_3107 * _3107)) * (1.0 - (_3106 * _3106))));
                        float _3115 = _3114 * _3114;
                        float _3116 = _3115 * _3115;
                        float _3117 = _3097 + _3062;
                        float _3118 = _3098 + _3063;
                        float _3119 = _3099 + _3064;
                        float _3123 = inversesqrt(dot(vec3(_3117, _3118, _3119), vec3(_3117, _3118, _3119)));
                        float _3127 = dot(vec3(_856, _859, _862), vec3(_3097, _3098, _3099));
                        float _4365 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                        float _3130 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                        float _3131 = dot(vec3(_856, _859, _862), vec3(_3123 * _3117, _3123 * _3118, _3123 * _3119));
                        float _4376 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                        float _3134 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
                        float _3138 = ((_3134 * _3134) * (_3116 + (-1.0))) + 1.0;
                        float _3139 = _3075 * _3115;
                        float _3140 = _3139 * _3139;
                        float _3143 = ((1.0 - _3140) * _3065) + _3140;
                        float _4387 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                        float _3144 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
                        float _3145 = 1.0 - _3115;
                        float _3155 = (0.5 / (((_3144 * ((_3130 * _3145) + _3115)) + 9.9999999392252902907785028219223e-09) + (((_3144 * _3145) + _3115) * _3130))) * _3144;
                        float _4398 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                        float _3166 = (((_3116 * 3.1415927410125732421875) * (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0)))) / ((_3138 * _3138) * ((_3082 * 2.1991131305694580078125) + 3.141590118408203125))) * _3071;
                        _2924 = (_3086 * _3034.x) + _2992;
                        _2925 = (_3086 * _3034.y) + _2993;
                        _2926 = (_3086 * _3034.z) + _2994;
                        _2921 = (_3166 * _3051.x) + _2989;
                        _2922 = (_3166 * _3051.y) + _2990;
                        _2923 = (_3166 * _3051.z) + _2991;
                        if (_2996 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2989 = _2921;
                            _2990 = _2922;
                            _2991 = _2923;
                            _2992 = _2924;
                            _2993 = _2925;
                            _2994 = _2926;
                            _2995 = _2996;
                        }
                    }
                    frontier_phi_98_pred = _2921;
                    frontier_phi_98_pred_1 = _2922;
                    frontier_phi_98_pred_2 = _2926;
                    frontier_phi_98_pred_3 = _2925;
                    frontier_phi_98_pred_4 = _2924;
                    frontier_phi_98_pred_5 = _2923;
                }
                _2675 = frontier_phi_98_pred;
                _2677 = frontier_phi_98_pred_1;
                _2685 = frontier_phi_98_pred_2;
                _2683 = frontier_phi_98_pred_3;
                _2681 = frontier_phi_98_pred_4;
                _2679 = frontier_phi_98_pred_5;
                uint _2851 = _2850 + 1u;
                if (_2851 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2844 = _2675;
                    _2845 = _2677;
                    _2846 = _2679;
                    _2847 = _2681;
                    _2848 = _2683;
                    _2849 = _2685;
                    _2850 = _2851;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2674 = _2675;
            _2676 = _2677;
            _2678 = _2679;
            _2680 = _2681;
            _2682 = _2683;
            _2684 = _2685;
        }
        uvec4 _2688 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2689 = _2688.z;
        uint _2691 = (_2689 >> 8u) & 15u;
        float _2812;
        float _2814;
        float _2816;
        float _2818;
        float _2820;
        float _2822;
        if (((4294967295u << _2691) & _2566) == 0u)
        {
            _2812 = _2674;
            _2814 = _2676;
            _2816 = _2678;
            _2818 = _2680;
            _2820 = _2682;
            _2822 = _2684;
        }
        else
        {
            float _2837 = inversesqrt(dot(vec3(_1970, _1971, _1972), vec3(_1970, _1971, _1972)));
            float _2838 = _2837 * _1970;
            float _2839 = _2837 * _1971;
            float _2840 = _2837 * _1972;
            float frontier_phi_91_92_ladder;
            float frontier_phi_91_92_ladder_1;
            float frontier_phi_91_92_ladder_2;
            float frontier_phi_91_92_ladder_3;
            float frontier_phi_91_92_ladder_4;
            float frontier_phi_91_92_ladder_5;
            if (_2691 < ((_2689 >> 12u) & 15u))
            {
                float _2813;
                float _2815;
                float _2817;
                float _2819;
                float _2821;
                float _2823;
                float _2972 = _2674;
                float _2973 = _2676;
                float _2974 = _2678;
                float _2975 = _2680;
                float _2976 = _2682;
                float _2977 = _2684;
                uint _2978 = _2691;
                uint _2987;
                bool _2988;
                for (;;)
                {
                    _2987 = texelFetch(g_lightClassification, int((((_2560 << 5u) + (_2546 << 9u)) + (_2978 << 2u)) >> 2u)).x;
                    _2988 = _2987 == 0u;
                    float frontier_phi_104_pred;
                    float frontier_phi_104_pred_1;
                    float frontier_phi_104_pred_2;
                    float frontier_phi_104_pred_3;
                    float frontier_phi_104_pred_4;
                    float frontier_phi_104_pred_5;
                    if (_2988)
                    {
                        frontier_phi_104_pred = _2977;
                        frontier_phi_104_pred_1 = _2976;
                        frontier_phi_104_pred_2 = _2975;
                        frontier_phi_104_pred_3 = _2974;
                        frontier_phi_104_pred_4 = _2973;
                        frontier_phi_104_pred_5 = _2972;
                    }
                    else
                    {
                        float _3171;
                        float _3172;
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3184 = _2972;
                        float _3185 = _2973;
                        float _3186 = _2974;
                        float _3187 = _2975;
                        float _3188 = _2976;
                        float _3189 = _2977;
                        uint _3190 = _2987;
                        uint _3191;
                        vec4 _3216;
                        float _3217;
                        vec4 _3232;
                        vec3 _3244;
                        vec4 _3259;
                        vec4 _3274;
                        float _3320;
                        bool _3321;
                        for (;;)
                        {
                            uint _3201 = ((_2978 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3190));
                            _3191 = (_3190 + 4294967295u) & _3190;
                            uint _3203 = _3201 * 40u;
                            _3216 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 3u)).x));
                            _3217 = _3216.w;
                            uint _3219 = (_3201 * 40u) + 4u;
                            _3232 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3219)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 3u)).x));
                            uint _3234 = (_3201 * 40u) + 8u;
                            _3244 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x));
                            uint _3246 = (_3201 * 40u) + 16u;
                            _3259 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 3u)).x));
                            uint _3261 = (_3201 * 40u) + 20u;
                            _3274 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 3u)).x));
                            uint _3276 = (_3201 * 40u) + 24u;
                            vec4 _3289 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 3u)).x));
                            uint _3295 = (_3201 * 40u) + 28u;
                            vec4 _3308 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 3u)).x));
                            _3320 = fma(_1972, _3308.z, fma(_1971, _3308.y, _3308.x * _1970)) + _3308.w;
                            _3321 = !((fma(_1972, _3289.z, fma(_1971, _3289.y, _3289.x * _1970)) + _3289.w) <= 0.0);
                            float frontier_phi_110_pred;
                            float frontier_phi_110_pred_1;
                            float frontier_phi_110_pred_2;
                            float frontier_phi_110_pred_3;
                            float frontier_phi_110_pred_4;
                            float frontier_phi_110_pred_5;
                            if (_3321)
                            {
                                float _3348 = _3216.x - _1970;
                                float _3349 = _3216.y - _1971;
                                float _3350 = _3216.z - _1972;
                                float _3351 = dot(vec3(_3348, _3349, _3350), vec3(_3348, _3349, _3350));
                                float _3354 = inversesqrt(_3351);
                                float _3355 = _3354 * _3348;
                                float _3356 = _3354 * _3349;
                                float _3357 = _3354 * _3350;
                                float _3361 = 1.0 - (_3351 / (_3217 * _3217));
                                float _4409 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3362 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                                float _3366 = sqrt(_3351) * _3232.w;
                                float _3368 = 1.39999997615814208984375 / (_3366 + 1.39999997615814208984375);
                                float _3369 = _3368 * _3368;
                                float _3372 = ((1.0 - _3369) * dot(vec3(_3355, _3356, _3357), vec3(_856, _859, _862))) + _3369;
                                float _3375 = _3366 * _3366;
                                float _3379 = (fma(_1972, _3259.z, fma(_1971, _3259.y, _3259.x * _1970)) + _3259.w) / _3320;
                                float _3380 = (fma(_1972, _3274.z, fma(_1971, _3274.y, _3274.x * _1970)) + _3274.w) / _3320;
                                float _3384 = 1.0 - dot(vec2(_3379, _3380), vec2(_3379, _3380));
                                float _4425 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                                float _3385 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                                float _3386 = _3385 * (((isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0))) * _3362) / ((_3375 * 0.699999988079071044921875) + 1.0));
                                float _3398 = exp2(log2(1.0 / ((_3375 * 3.5) + 5.0)) * 0.25);
                                float _3399 = 1.0 - _917;
                                float _3406 = sqrt(1.0 - ((1.0 - (_3399 * _3399)) * (1.0 - (_3398 * _3398))));
                                float _3407 = _3406 * _3406;
                                float _3408 = _3407 * _3407;
                                float _3409 = _3355 - _2838;
                                float _3410 = _3356 - _2839;
                                float _3411 = _3357 - _2840;
                                float _3415 = inversesqrt(dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411)));
                                float _3419 = dot(vec3(_856, _859, _862), vec3((-0.0) - _2838, (-0.0) - _2839, (-0.0) - _2840));
                                float _4436 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                                float _3422 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                                float _3423 = dot(vec3(_856, _859, _862), vec3(_3415 * _3409, _3415 * _3410, _3415 * _3411));
                                float _4447 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3426 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                                float _3430 = ((_3426 * _3426) * (_3408 + (-1.0))) + 1.0;
                                float _3431 = _3368 * _3407;
                                float _3432 = _3431 * _3431;
                                float _3438 = ((1.0 - _3432) * dot(vec3(_856, _859, _862), vec3(_3355, _3356, _3357))) + _3432;
                                float _4458 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                                float _3439 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                                float _3440 = 1.0 - _3407;
                                float _3450 = (0.5 / (((_3439 * ((_3422 * _3440) + _3407)) + 9.9999999392252902907785028219223e-09) + (((_3439 * _3440) + _3407) * _3422))) * _3439;
                                float _4469 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3460 = (_3385 * _3362) * (((_3408 * 3.1415927410125732421875) * (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0)))) / ((_3430 * _3430) * ((_3375 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_110_pred = _3460 * _3244.z;
                                frontier_phi_110_pred_1 = _3386 * _3232.z;
                                frontier_phi_110_pred_2 = _3386 * _3232.y;
                                frontier_phi_110_pred_3 = _3386 * _3232.x;
                                frontier_phi_110_pred_4 = _3460 * _3244.y;
                                frontier_phi_110_pred_5 = _3460 * _3244.x;
                            }
                            else
                            {
                                frontier_phi_110_pred = 0.0;
                                frontier_phi_110_pred_1 = 0.0;
                                frontier_phi_110_pred_2 = 0.0;
                                frontier_phi_110_pred_3 = 0.0;
                                frontier_phi_110_pred_4 = 0.0;
                                frontier_phi_110_pred_5 = 0.0;
                            }
                            _3466 = frontier_phi_110_pred;
                            _3469 = frontier_phi_110_pred_1;
                            _3468 = frontier_phi_110_pred_2;
                            _3467 = frontier_phi_110_pred_3;
                            _3465 = frontier_phi_110_pred_4;
                            _3464 = frontier_phi_110_pred_5;
                            _3174 = _3467 + _3187;
                            _3175 = _3468 + _3188;
                            _3176 = _3469 + _3189;
                            _3171 = _3464 + _3184;
                            _3172 = _3465 + _3185;
                            _3173 = _3466 + _3186;
                            if (_3191 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3184 = _3171;
                                _3185 = _3172;
                                _3186 = _3173;
                                _3187 = _3174;
                                _3188 = _3175;
                                _3189 = _3176;
                                _3190 = _3191;
                                continue;
                            }
                        }
                        frontier_phi_104_pred = _3176;
                        frontier_phi_104_pred_1 = _3175;
                        frontier_phi_104_pred_2 = _3174;
                        frontier_phi_104_pred_3 = _3173;
                        frontier_phi_104_pred_4 = _3172;
                        frontier_phi_104_pred_5 = _3171;
                    }
                    _2823 = frontier_phi_104_pred;
                    _2821 = frontier_phi_104_pred_1;
                    _2819 = frontier_phi_104_pred_2;
                    _2817 = frontier_phi_104_pred_3;
                    _2815 = frontier_phi_104_pred_4;
                    _2813 = frontier_phi_104_pred_5;
                    uint _2979 = _2978 + 1u;
                    if (_2979 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2972 = _2813;
                        _2973 = _2815;
                        _2974 = _2817;
                        _2975 = _2819;
                        _2976 = _2821;
                        _2977 = _2823;
                        _2978 = _2979;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_91_92_ladder = _2823;
                frontier_phi_91_92_ladder_1 = _2821;
                frontier_phi_91_92_ladder_2 = _2819;
                frontier_phi_91_92_ladder_3 = _2817;
                frontier_phi_91_92_ladder_4 = _2815;
                frontier_phi_91_92_ladder_5 = _2813;
            }
            else
            {
                frontier_phi_91_92_ladder = _2684;
                frontier_phi_91_92_ladder_1 = _2682;
                frontier_phi_91_92_ladder_2 = _2680;
                frontier_phi_91_92_ladder_3 = _2678;
                frontier_phi_91_92_ladder_4 = _2676;
                frontier_phi_91_92_ladder_5 = _2674;
            }
            _2812 = frontier_phi_91_92_ladder_5;
            _2814 = frontier_phi_91_92_ladder_4;
            _2816 = frontier_phi_91_92_ladder_3;
            _2818 = frontier_phi_91_92_ladder_2;
            _2820 = frontier_phi_91_92_ladder_1;
            _2822 = frontier_phi_91_92_ladder;
        }
        float _2827 = isnan(1.0) ? _901 : (isnan(_901) ? 1.0 : min(_901, 1.0));
        _2579 = (_2827 * _2818) + _2258;
        _2581 = (_2827 * _2820) + _2259;
        _2583 = (_2827 * _2822) + _2260;
        _2585 = ((_2812 * 0.039999999105930328369140625) * _2827) + _2414;
        _2587 = ((_2814 * 0.039999999105930328369140625) * _2827) + _2415;
        _2589 = ((_2816 * 0.039999999105930328369140625) * _2827) + _2416;
    }
    else
    {
        _2579 = _2258;
        _2581 = _2259;
        _2583 = _2260;
        _2585 = _2414;
        _2587 = _2415;
        _2589 = _2416;
    }
    float _4485 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _4496 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _4507 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _2606 = ((isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_2579 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _901))) + ((_2585 + ((isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0))) * _1707)) * cbPerFrame._m0[3u].x);
    float _2607 = ((isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (_2581 + ((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _901))) + ((_2587 + ((isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))) * _1707)) * cbPerFrame._m0[3u].x);
    float _2608 = ((isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (_2583 + ((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _901))) + ((_2589 + ((isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0))) * _1707)) * cbPerFrame._m0[3u].x);
    uint _2612 = _875 + 6u;
    float _2620 = _836 / cbSceneParam._m0[86u].x;
    float _2621 = _837 / cbSceneParam._m0[86u].y;
    vec4 _2635 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2620, _2621, (log2((isnan(cbSceneParam._m0[77u].w) ? _823 : (isnan(_823) ? cbSceneParam._m0[77u].w : min(_823, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2637 = _2635.x;
    float _2638 = _2635.y;
    float _2639 = _2635.z;
    float _2640 = _2635.w;
    float _2736;
    float _2738;
    float _2740;
    float _2742;
    if (_823 > cbSceneParam._m0[78u].w)
    {
        float _2699 = isnan(_823) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _823 : min(cbSceneParam._m0[80u].w, _823));
        float _2700 = _2699 / _823;
        float _2711 = _2700 * _271;
        float _2712 = _272 * _2700;
        float _2713 = (-0.0) - _2712;
        float _2714 = _2700 * _273;
        float _2716 = (cbSceneParam._m0[77u].w * _2713) / _2699;
        float _2717 = _2716 + cbSceneParam._m0[79u].w;
        float _2718 = cbSceneParam._m0[79u].w - _2712;
        float _2724 = sqrt(((_2711 * _2711) + (_2712 * _2712)) + (_2714 * _2714));
        float _2727 = (1.0 - (cbSceneParam._m0[77u].w / _2699)) * _2724;
        float _2732 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2734 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2934;
        if (abs((_2713 - _2716) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2934 = ((((_2717 > 0.0) ? exp2(_2732 * _2717) : (2.0 - exp2(_2734 * _2717))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2727;
        }
        else
        {
            float _2873 = 1.0 / cbSceneParam._m0[80u].x;
            float _2874 = isnan(_2718) ? _2717 : (isnan(_2717) ? _2718 : max(_2717, _2718));
            float _2875 = isnan(_2718) ? _2717 : (isnan(_2717) ? _2718 : min(_2717, _2718));
            float _2884 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : min(_2874, 0.0));
            float _2885 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : min(_2875, 0.0));
            _2934 = ((abs(_2724 / _2713) * cbSceneParam._m0[80u].y) * ((((_2884 - _2885) * 2.0) - ((exp2(_2732 * (isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0)))) - exp2(_2732 * (isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0))))) * _2873)) - ((exp2(_2734 * _2884) - exp2(_2734 * _2885)) * _2873))) + (_2727 * cbSceneParam._m0[80u].z);
        }
        vec4 _2936 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2620, _2621, 1.0), 0.0);
        float _2945 = exp2((_2934 * (-1.44269502162933349609375)) * (1.0 - _2936.w));
        float _2946 = log2(_2945);
        float _2962 = log2(_2640);
        _2736 = (exp2(_2962 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2946 * cbSceneParam._m0[78u].x)) * _2936.x) / cbSceneParam._m0[78u].x)) + _2637;
        _2738 = (exp2(_2962 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2946 * cbSceneParam._m0[78u].y)) * _2936.y) / cbSceneParam._m0[78u].y)) + _2638;
        _2740 = (exp2(_2962 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2946 * cbSceneParam._m0[78u].z)) * _2936.z) / cbSceneParam._m0[78u].z)) + _2639;
        _2742 = _2945 * _2640;
    }
    else
    {
        _2736 = _2637;
        _2738 = _2638;
        _2740 = _2639;
        _2742 = _2640;
    }
    float _2754 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2755 = _2754 == 3.0;
    float _2756 = log2(_2742);
    float _2763 = exp2(_2756 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0)));
    float _2764 = exp2(_2756 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0)));
    float _2765 = exp2(_2756 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0)));
    float _2774 = (_2754 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2774 * (_2755 ? _2763 : (_2763 + (cbSceneParam._m0[72u].w * _2736)));
    SV_Target.y = _2774 * (_2755 ? _2764 : (_2764 + (cbSceneParam._m0[72u].w * _2738)));
    SV_Target.z = _2774 * (_2755 ? _2765 : (_2765 + (cbSceneParam._m0[72u].w * _2740)));
    SV_Target.w = cbInstanceData._m0[_2612].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2612].w;
}


