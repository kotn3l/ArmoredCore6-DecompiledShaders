#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D M_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1304;
float _3502;
float _3503;
float _3504;
float _3505;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _202 = _201 * _194;
    float _203 = _201 * _195;
    float _204 = _201 * _196;
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = _208 * NORMAL.x;
    float _210 = _208 * NORMAL.y;
    float _211 = _208 * NORMAL.z;
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216 = _215 * TANGENT.x;
    float _217 = _215 * TANGENT.y;
    float _218 = _215 * TANGENT.z;
    float _263 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _273 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _263);
    float _274 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _263);
    float _275 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _263);
    vec4 _288 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _291 = _288.x;
    vec4 _309 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _326 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _291) + cbMtdParam._m0[12u].x) * _309.x;
    float _328 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _291) + cbMtdParam._m0[12u].y) * _309.y;
    float _330 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _291) + cbMtdParam._m0[12u].z) * _309.z;
    vec4 _351 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _387 = cbMtdParam._m0[21u].w + _273;
    float _388 = cbMtdParam._m0[22u].x + _274;
    float _389 = cbMtdParam._m0[22u].y + _275;
    float _403 = (-0.0) - dot(vec3(_387, _388, _389), vec3(_202, _203, _204));
    float _404 = (-0.0) - dot(vec3(_387, _388, _389), vec3(_216, _217, _218));
    float _405 = (-0.0) - dot(vec3(_387, _388, _389), vec3((-0.0) - _209, (-0.0) - _210, (-0.0) - _211));
    float _409 = inversesqrt(dot(vec3(_403, _404, _405), vec3(_403, _404, _405)));
    float _412 = _409 * _405;
    float _413 = (_409 * _403) + ((cbMtdParam._m0[19u].w * _291) * ((_351.x * 2.0) + (-1.0)));
    float _414 = (_409 * _404) + ((cbMtdParam._m0[20u].x * _291) * ((_351.y * 2.0) + (-1.0)));
    float _415 = _413 * cbMtdParam._m0[18u].z;
    float _416 = _414 * cbMtdParam._m0[18u].y;
    float _417 = fract(TEXCOORD.x);
    float _418 = fract(TEXCOORD.y);
    float _424;
    if (_415 > 0.0)
    {
        _424 = (1.0 - _417) / _415;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_415 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _417) / _415;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _424 = frontier_phi_3_2_ladder;
    }
    float _432;
    if (_416 > 0.0)
    {
        _432 = (1.0 - _418) / _416;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_416 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _418) / _416;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _432 = frontier_phi_7_6_ladder;
    }
    bool _434 = _412 > 0.0;
    float _436 = _434 ? (cbMtdParam._m0[15u].x / _412) : 5000.0;
    float _437 = isnan(_432) ? _424 : (isnan(_424) ? _432 : min(_424, _432));
    float _438 = isnan(_436) ? _437 : (isnan(_437) ? _436 : min(_437, _436));
    float _442 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _443 = _417 + (-0.5);
    float _446 = _418 + (-0.5);
    float _449 = ((_438 * _412) + _442) / _442;
    vec4 _473 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_443 + (_438 * _415)) / _449) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_446 + (_438 * _416)) / _449) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _486 = (_473.x * _291) * cbMtdParam._m0[9u].x;
    float _487 = (_473.y * _291) * cbMtdParam._m0[9u].y;
    float _488 = (_473.z * _291) * cbMtdParam._m0[9u].z;
    float _506 = _413 * cbMtdParam._m0[20u].z;
    float _507 = _414 * cbMtdParam._m0[20u].y;
    bool _508 = _506 > 0.0;
    float _513;
    if (_508)
    {
        _513 = (1.0 - _417) / _506;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_506 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _417) / _506;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _513 = frontier_phi_11_10_ladder;
    }
    bool _515 = _507 > 0.0;
    float _520;
    if (_515)
    {
        _520 = (1.0 - _418) / _507;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_507 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _418) / _507;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _520 = frontier_phi_15_14_ladder;
    }
    float _523 = _434 ? (cbMtdParam._m0[16u].x / _412) : 5000.0;
    float _524 = isnan(_520) ? _513 : (isnan(_513) ? _520 : min(_513, _520));
    float _525 = isnan(_523) ? _524 : (isnan(_524) ? _523 : min(_524, _523));
    float _529 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _533 = ((_525 * _412) + _529) / _529;
    float _538 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _540 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _556 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_443 + (_525 * _506)) / _533) + 0.5) + _538) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_446 + (_525 * _507)) / _533) + 0.5) + _540) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _571;
    if (_508)
    {
        _571 = (1.0 - _417) / _506;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_506 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _417) / _506;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _571 = frontier_phi_19_18_ladder;
    }
    float _577;
    if (_515)
    {
        _577 = (1.0 - _418) / _507;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_507 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _418) / _507;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _577 = frontier_phi_23_22_ladder;
    }
    float _579 = isnan(_577) ? _571 : (isnan(_571) ? _577 : min(_571, _577));
    float _580 = isnan(_523) ? _579 : (isnan(_579) ? _523 : min(_579, _523));
    float _587 = ((_580 * _412) + _529) / _529;
    vec4 _608 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_443 + (_580 * _506)) / _587) + 0.5) + _538) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_446 + (_580 * _507)) / _587) + 0.5) + _540) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _610 = _608.x;
    float _620 = (((((cbMtdParam._m0[10u].x * _291) * _556.x) - _486) * _291) * _610) + _486;
    float _621 = (((((cbMtdParam._m0[10u].y * _291) * _556.y) - _487) * _291) * _610) + _487;
    float _622 = (((((cbMtdParam._m0[10u].z * _291) * _556.z) - _488) * _291) * _610) + _488;
    float _636 = _413 * cbMtdParam._m0[21u].x;
    float _637 = _414 * cbMtdParam._m0[20u].w;
    bool _638 = _636 > 0.0;
    float _643;
    if (_638)
    {
        _643 = (1.0 - _417) / _636;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_636 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _417) / _636;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _643 = frontier_phi_27_26_ladder;
    }
    bool _645 = _637 > 0.0;
    float _650;
    if (_645)
    {
        _650 = (1.0 - _418) / _637;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_637 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _418) / _637;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _650 = frontier_phi_31_30_ladder;
    }
    float _653 = _434 ? (cbMtdParam._m0[17u].z / _412) : 5000.0;
    float _654 = isnan(_650) ? _643 : (isnan(_643) ? _650 : min(_643, _650));
    float _655 = isnan(_653) ? _654 : (isnan(_654) ? _653 : min(_654, _653));
    float _659 = cbMtdParam._m0[17u].z * cbMtdParam._m0[15u].z;
    float _663 = ((_655 * _412) + _659) / _659;
    float _668 = cbMtdParam._m0[17u].y - cbMtdParam._m0[21u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    float _670 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    vec4 _687 = texture(sampler2D(M_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_443 + (_655 * _636)) / _663) + 0.5) + _668) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_446 + (_655 * _637)) / _663) + 0.5) + _670) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[7u].w));
    float _702;
    if (_638)
    {
        _702 = (1.0 - _417) / _636;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_636 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _417) / _636;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _702 = frontier_phi_35_34_ladder;
    }
    float _708;
    if (_645)
    {
        _708 = (1.0 - _418) / _637;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_637 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _418) / _637;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _708 = frontier_phi_39_38_ladder;
    }
    float _710 = isnan(_708) ? _702 : (isnan(_702) ? _708 : min(_702, _708));
    float _711 = isnan(_653) ? _710 : (isnan(_710) ? _653 : min(_710, _653));
    float _718 = ((_711 * _412) + _659) / _659;
    vec4 _738 = texture(sampler2D(M_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_443 + (_711 * _636)) / _718) + 0.5) + _668) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_446 + (_711 * _637)) / _718) + 0.5) + _670) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[8u].w));
    float _740 = _738.x;
    vec4 _764 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _768 = _764.z;
    float _771 = (_764.x * 2.0) + (-1.0);
    float _772 = (_764.y * 2.0) + (-1.0);
    float _773 = dot(vec2(_771, _772), vec2(_771, _772));
    float _3564 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _778 = sqrt(1.0 - (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0))));
    float _781 = fma(_778, _209, fma(_772, _216, _771 * _202));
    float _784 = fma(_778, _210, fma(_772, _217, _771 * _203));
    float _787 = fma(_778, _211, fma(_772, _218, _771 * _204));
    float _791 = inversesqrt(dot(vec3(_781, _784, _787), vec3(_781, _784, _787)));
    float _792 = _791 * _781;
    float _793 = _791 * _784;
    float _794 = _791 * _787;
    float _3575 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _795 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
    float _3586 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _3597 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _3608 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _814 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _818 = inversesqrt(dot(vec3(_273, _274, _275), vec3(_273, _274, _275)));
    float _819 = _273 * _818;
    float _820 = _274 * _818;
    float _821 = _275 * _818;
    vec4 _826 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _828 = _826.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _985 = sqrt(((_273 * _273) + (_274 * _274)) + (_275 * _275));
        float _991 = (cbMatDynParam._m0[5u].x * _985) + cbMatDynParam._m0[5u].y;
        float _3619 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _996 = (cbMatDynParam._m0[5u].z * _985) + cbMatDynParam._m0[5u].w;
        float _3630 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) - _992)) + _992) < ((_828 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _840 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _841 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _860 = fma(_794, cbSceneParam._m0[5u].z, fma(_793, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _792));
    float _863 = fma(_794, cbSceneParam._m0[6u].z, fma(_793, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _792));
    float _866 = fma(_794, cbSceneParam._m0[7u].z, fma(_793, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _792));
    uint _879 = uint(roundEven(NORMAL.w)) * 13u;
    uint _881 = _879 + 9u;
    uint _882 = _881 + uint(cbMatDynParam._m0[0u].w);
    float _888 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0)))) * cbInstanceData._m0[_882].x;
    float _889 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0)))) * cbInstanceData._m0[_882].y;
    float _890 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0)))) * cbInstanceData._m0[_882].z;
    float _3641 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _891 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
    float _3652 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _892 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    float _3663 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _893 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    vec4 _902 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _840, cbSceneParam._m0[86u].y * _841));
    float _905 = _902.x * TEXCOORD.z;
    float _906 = dot(vec3(_792, _793, _794), vec3(_819, _820, _821));
    float _909 = _906 * 2.0;
    float _913 = (_909 * _792) - _819;
    float _914 = (_909 * _793) - _820;
    float _915 = (_909 * _794) - _821;
    float _919 = abs(dot(vec3(_819, _820, _821), vec3(_792, _793, _794)));
    float _3674 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _921 = sqrt(_795);
    float _934 = exp2((_921 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_921 * 3.0));
    float _966 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _970 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _974 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1303;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1030 = fma(_974, cbModelParam._m0[26u].z, fma(_970, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _966));
        float _1034 = fma(_974, cbModelParam._m0[27u].z, fma(_970, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _966));
        float _1038 = fma(_974, cbModelParam._m0[28u].z, fma(_970, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _966));
        float _1061 = _966 + _792;
        float _1062 = _970 + _793;
        float _1063 = _974 + _794;
        float _1073 = fma(_1063, cbModelParam._m0[26u].z, fma(_1062, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1061)) - _1030;
        float _1074 = fma(_1063, cbModelParam._m0[27u].z, fma(_1062, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1061)) - _1034;
        float _1075 = fma(_1063, cbModelParam._m0[28u].z, fma(_1062, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1061)) - _1038;
        float _1079 = inversesqrt(dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075)));
        float _1092 = ((_1079 * _1073) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1030 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1093 = ((_1079 * _1074) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1034 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1094 = ((_1079 * _1075) / cbModelParam._m0[34u].z) + ((((((_1038 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        float _1131 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1097.x + (-0.5));
        float _1133 = _1131 * (_1097.y + (-0.5));
        float _1134 = _1131 * (_1097.z + (-0.5));
        float _1141 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1104.x + (-0.5));
        float _1143 = _1141 * (_1104.y + (-0.5));
        float _1144 = _1141 * (_1104.z + (-0.5));
        float _1151 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1111.x + (-0.5));
        float _1153 = _1151 * (_1111.y + (-0.5));
        float _1154 = _1151 * (_1111.z + (-0.5));
        float _1161 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1118.x + (-0.5));
        float _1163 = _1161 * (_1118.y + (-0.5));
        float _1164 = _1161 * (_1118.z + (-0.5));
        float _1165 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1166 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1167 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1168 = _1132 * 0.5;
        float _1169 = _1142 * 0.5;
        float _1170 = _1152 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1185 = (dot(vec3(_792, _793, _794), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _3700 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1195 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1165 + 9.9999997473787516355514526367188e-06);
        float _3711 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1197 = _1196 * 2.0;
        float _1201 = (1.0 - _1196) / (_1196 + 1.0);
        float _3722 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1211 = ((((1.0 - _1202) * (_1197 + 2.0)) * exp2(log2(isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * (_1197 + 1.0))) + _1202) * _1165;
        float _1212 = _1133 * 0.5;
        float _1213 = _1143 * 0.5;
        float _1214 = _1153 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1228 = (dot(vec3(_792, _793, _794), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _3733 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1237 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1166 + 9.9999997473787516355514526367188e-06);
        float _3744 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _3755 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * (_1239 + 1.0))) + _1244) * _1166;
        float _1254 = _1134 * 0.5;
        float _1255 = _1144 * 0.5;
        float _1256 = _1154 * 0.5;
        float _1257 = dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256));
        float _1262 = (_1257 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1257);
        float _1270 = (dot(vec3(_792, _793, _794), vec3(_1262 * _1254, _1262 * _1255, _1262 * _1256)) + 1.0) * 0.5;
        float _3766 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1279 = sqrt(((_1255 * _1255) + (_1254 * _1254)) + (_1256 * _1256)) / (_1167 + 9.9999997473787516355514526367188e-06);
        float _3777 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _3788 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * (_1281 + 1.0))) + _1286) * _1167;
        _1303 = _1134;
        _1305 = _1133;
        _1306 = _1132;
        _1307 = _1144;
        _1308 = _1143;
        _1309 = _1142;
        _1310 = _1154;
        _1311 = _1153;
        _1312 = _1152;
        _1313 = _1167;
        _1314 = _1166;
        _1315 = _1165;
        _1316 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)));
        _1317 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
        _1318 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
    }
    else
    {
        _1303 = _1304;
        _1305 = _1304;
        _1306 = _1304;
        _1307 = _1304;
        _1308 = _1304;
        _1309 = _1304;
        _1310 = _1304;
        _1311 = _1304;
        _1312 = _1304;
        _1313 = _1304;
        _1314 = _1304;
        _1315 = _1304;
        _1316 = 0.0;
        _1317 = 0.0;
        _1318 = 0.0;
    }
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1347 = fma(_974, cbModelParam._m0[30u].z, fma(_970, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _966));
        float _1351 = fma(_974, cbModelParam._m0[31u].z, fma(_970, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _966));
        float _1355 = fma(_974, cbModelParam._m0[32u].z, fma(_970, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _966));
        float _1378 = _966 + _792;
        float _1379 = _970 + _793;
        float _1380 = _974 + _794;
        float _1390 = fma(_1380, cbModelParam._m0[30u].z, fma(_1379, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1378)) - _1347;
        float _1391 = fma(_1380, cbModelParam._m0[31u].z, fma(_1379, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1378)) - _1351;
        float _1392 = fma(_1380, cbModelParam._m0[32u].z, fma(_1379, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1378)) - _1355;
        float _1396 = inversesqrt(dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392)));
        float _1409 = ((_1396 * _1390) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1347 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1410 = ((_1396 * _1391) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1351 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1411 = ((_1396 * _1392) / cbModelParam._m0[35u].z) + ((((((_1355 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        vec4 _1420 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        vec4 _1427 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        float _1446 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1447 = _1446 * (_1413.x + (-0.5));
        float _1448 = _1446 * (_1413.y + (-0.5));
        float _1449 = _1446 * (_1413.z + (-0.5));
        float _1456 = exp2((_1420.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1420.x + (-0.5));
        float _1458 = _1456 * (_1420.y + (-0.5));
        float _1459 = _1456 * (_1420.z + (-0.5));
        float _1466 = exp2((_1427.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1427.x + (-0.5));
        float _1468 = _1466 * (_1427.y + (-0.5));
        float _1469 = _1466 * (_1427.z + (-0.5));
        float _1476 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1434.x + (-0.5));
        float _1478 = _1476 * (_1434.y + (-0.5));
        float _1479 = _1476 * (_1434.z + (-0.5));
        float _1480 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1481 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1482 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1483 = _1447 * 0.5;
        float _1484 = _1457 * 0.5;
        float _1485 = _1467 * 0.5;
        float _1486 = dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485));
        float _1491 = (_1486 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1486);
        float _1499 = (dot(vec3(_792, _793, _794), vec3(_1491 * _1483, _1491 * _1484, _1491 * _1485)) + 1.0) * 0.5;
        float _3829 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1508 = sqrt(((_1484 * _1484) + (_1483 * _1483)) + (_1485 * _1485)) / (_1480 + 9.9999997473787516355514526367188e-06);
        float _3840 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1510 = _1509 * 2.0;
        float _1514 = (1.0 - _1509) / (_1509 + 1.0);
        float _3851 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1524 = ((((1.0 - _1515) * (_1510 + 2.0)) * exp2(log2(isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_1510 + 1.0))) + _1515) * _1480;
        float _1525 = _1448 * 0.5;
        float _1526 = _1458 * 0.5;
        float _1527 = _1468 * 0.5;
        float _1528 = dot(vec3(_1525, _1526, _1527), vec3(_1525, _1526, _1527));
        float _1533 = (_1528 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1528);
        float _1541 = (dot(vec3(_792, _793, _794), vec3(_1533 * _1525, _1533 * _1526, _1533 * _1527)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1550 = sqrt(((_1526 * _1526) + (_1525 * _1525)) + (_1527 * _1527)) / (_1481 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1552 = _1551 * 2.0;
        float _1556 = (1.0 - _1551) / (_1551 + 1.0);
        float _3884 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1566 = ((((1.0 - _1557) * (_1552 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1552 + 1.0))) + _1557) * _1481;
        float _1567 = _1449 * 0.5;
        float _1568 = _1459 * 0.5;
        float _1569 = _1469 * 0.5;
        float _1570 = dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569));
        float _1575 = (_1570 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1570);
        float _1583 = (dot(vec3(_792, _793, _794), vec3(_1575 * _1567, _1575 * _1568, _1575 * _1569)) + 1.0) * 0.5;
        float _3895 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1592 = sqrt(((_1568 * _1568) + (_1567 * _1567)) + (_1569 * _1569)) / (_1482 + 9.9999997473787516355514526367188e-06);
        float _3906 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1594 = _1593 * 2.0;
        float _1598 = (1.0 - _1593) / (_1593 + 1.0);
        float _3917 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1608 = ((((1.0 - _1599) * (_1594 + 2.0)) * exp2(log2(isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_1594 + 1.0))) + _1599) * _1482;
        _1616 = _1449;
        _1617 = _1448;
        _1618 = _1447;
        _1619 = _1459;
        _1620 = _1458;
        _1621 = _1457;
        _1622 = _1469;
        _1623 = _1468;
        _1624 = _1467;
        _1625 = _1482;
        _1626 = _1481;
        _1627 = _1480;
        _1628 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)));
        _1629 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)));
        _1630 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)));
    }
    else
    {
        _1616 = _1304;
        _1617 = _1304;
        _1618 = _1304;
        _1619 = _1304;
        _1620 = _1304;
        _1621 = _1304;
        _1622 = _1304;
        _1623 = _1304;
        _1624 = _1304;
        _1625 = _1304;
        _1626 = _1304;
        _1627 = _1304;
        _1628 = 0.0;
        _1629 = 0.0;
        _1630 = 0.0;
    }
    float _1640 = (cbModelParam._m0[1u].x * (_1628 - _1316)) + _1316;
    float _1641 = (cbModelParam._m0[1u].x * (_1629 - _1317)) + _1317;
    float _1642 = (cbModelParam._m0[1u].x * (_1630 - _1318)) + _1318;
    float _1663 = fma(_1642, cbSceneParam._m0[89u].z, fma(_1641, cbSceneParam._m0[89u].y, _1640 * cbSceneParam._m0[89u].x));
    float _1666 = fma(_1642, cbSceneParam._m0[90u].z, fma(_1641, cbSceneParam._m0[90u].y, _1640 * cbSceneParam._m0[90u].x));
    float _1669 = fma(_1642, cbSceneParam._m0[91u].z, fma(_1641, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1640));
    float _1684 = _913 * 0.5;
    float _1685 = _914 * 0.5;
    float _1686 = _915 * 0.5;
    float _1687 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1618, _1621, _1624, _1627));
    float _1690 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1617, _1620, _1623, _1626));
    float _1693 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1616, _1619, _1622, _1625));
    float _1727;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1700 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1303, _1307, _1310, _1313));
        float _1704 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1305, _1308, _1311, _1314));
        float _1708 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1306, _1309, _1312, _1315));
        float _1715 = dot(vec4(cbModelParam._m0[39u]), vec4(_1684, _1685, _1686, 1.0));
        _1727 = dot(vec3(isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)), isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)), isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1715) ? 0.0 : (isnan(0.0) ? _1715 : max(0.0, _1715))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1727 = 1.0;
    }
    float _1738;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1729 = dot(vec4(cbModelParam._m0[40u]), vec4(_1684, _1685, _1686, 1.0));
        _1738 = dot(vec3(isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)), isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)), isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1729) ? 0.0 : (isnan(0.0) ? _1729 : max(0.0, _1729))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1738 = 1.0;
    }
    float _1742 = (_1738 * cbModelParam._m0[1u].x) + (_1727 * (1.0 - cbModelParam._m0[1u].x));
    float _1752 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _795);
    float _1753 = isnan(_1752) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1752 : min(cbModelParam._m0[25u].z, _1752));
    float _1833;
    float _1835;
    float _1837;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1800 = fma(_974, cbModelParam._m0[13u].z, fma(_970, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _966)) + cbModelParam._m0[13u].w;
        float _1804 = fma(_974, cbModelParam._m0[14u].z, fma(_970, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _966)) + cbModelParam._m0[14u].w;
        float _1808 = fma(_974, cbModelParam._m0[15u].z, fma(_970, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _966)) + cbModelParam._m0[15u].w;
        float _1811 = fma(_915, cbModelParam._m0[13u].z, fma(_914, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _913));
        float _1814 = fma(_915, cbModelParam._m0[14u].z, fma(_914, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _913));
        float _1817 = fma(_915, cbModelParam._m0[15u].z, fma(_914, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _913));
        float _1845;
        if (_1811 > 0.0)
        {
            _1845 = abs((1.0 - _1800) / _1811);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1811 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1800 + 1.0) / _1811);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1845 = frontier_phi_57_55_ladder;
        }
        float _2214;
        if (_1814 > 0.0)
        {
            _2214 = abs((1.0 - _1804) / _1814);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1804 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _2214 = frontier_phi_66_62_ladder;
        }
        float _2538;
        if (_1817 > 0.0)
        {
            _2538 = abs((1.0 - _1808) / _1817);
        }
        else
        {
            float frontier_phi_80_73_ladder;
            if (_1817 < 0.0)
            {
                frontier_phi_80_73_ladder = abs((_1808 + 1.0) / _1817);
            }
            else
            {
                frontier_phi_80_73_ladder = 5000.0;
            }
            _2538 = frontier_phi_80_73_ladder;
        }
        float _2540 = isnan(_2214) ? _1845 : (isnan(_1845) ? _2214 : min(_1845, _2214));
        float _2541 = isnan(_2538) ? _2540 : (isnan(_2540) ? _2538 : min(_2540, _2538));
        float _2545 = (_2541 * _1811) + _1800;
        float _2546 = (_2541 * _1814) + _1804;
        float _2547 = (_2541 * _1817) + _1808;
        float _2548 = _2541 * 9.9999997473787516355514526367188e-05;
        float _2549 = (-1.0) - _2548;
        float _2551 = _2548 + 1.0;
        float frontier_phi_56_80_ladder;
        float frontier_phi_56_80_ladder_1;
        float frontier_phi_56_80_ladder_2;
        if ((_2547 > _2551) || ((_2547 < _2549) || ((_2546 > _2551) || ((_2546 < _2549) || ((_2545 < _2549) || (_2545 > _2551))))))
        {
            frontier_phi_56_80_ladder = 0.0;
            frontier_phi_56_80_ladder_1 = 0.0;
            frontier_phi_56_80_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2689 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2547, cbModelParam._m0[9u].z, fma(_2546, cbModelParam._m0[9u].y, _2545 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2547, cbModelParam._m0[10u].z, fma(_2546, cbModelParam._m0[10u].y, _2545 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2547, cbModelParam._m0[11u].z, fma(_2546, cbModelParam._m0[11u].y, _2545 * cbModelParam._m0[11u].x))), _1753);
            frontier_phi_56_80_ladder = _2689.z * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_1 = _2689.y * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_2 = _2689.x * cbModelParam._m0[1u].y;
        }
        _1833 = frontier_phi_56_80_ladder_2;
        _1835 = frontier_phi_56_80_ladder_1;
        _1837 = frontier_phi_56_80_ladder;
    }
    else
    {
        vec4 _1821 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_913, _914, _915), _1753);
        _1833 = _1821.x * cbModelParam._m0[1u].y;
        _1835 = _1821.y * cbModelParam._m0[1u].y;
        _1837 = _1821.z * cbModelParam._m0[1u].y;
    }
    float _1841 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _795);
    float _1842 = isnan(_1841) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1841 : min(cbModelParam._m0[25u].w, _1841));
    float _1930;
    float _1932;
    float _1934;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1894 = fma(_974, cbModelParam._m0[21u].z, fma(_970, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _966)) + cbModelParam._m0[21u].w;
        float _1898 = fma(_974, cbModelParam._m0[22u].z, fma(_970, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _966)) + cbModelParam._m0[22u].w;
        float _1902 = fma(_974, cbModelParam._m0[23u].z, fma(_970, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _966)) + cbModelParam._m0[23u].w;
        float _1905 = fma(_915, cbModelParam._m0[21u].z, fma(_914, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _913));
        float _1908 = fma(_915, cbModelParam._m0[22u].z, fma(_914, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _913));
        float _1911 = fma(_915, cbModelParam._m0[23u].z, fma(_914, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _913));
        float _2219;
        if (_1905 > 0.0)
        {
            _2219 = abs((1.0 - _1894) / _1905);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1905 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1894 + 1.0) / _1905);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _2219 = frontier_phi_68_64_ladder;
        }
        float _2564;
        if (_1908 > 0.0)
        {
            _2564 = abs((1.0 - _1898) / _1908);
        }
        else
        {
            float frontier_phi_82_75_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_82_75_ladder = abs((_1898 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_82_75_ladder = 5000.0;
            }
            _2564 = frontier_phi_82_75_ladder;
        }
        float _2754;
        if (_1911 > 0.0)
        {
            _2754 = abs((1.0 - _1902) / _1911);
        }
        else
        {
            float frontier_phi_100_93_ladder;
            if (_1911 < 0.0)
            {
                frontier_phi_100_93_ladder = abs((_1902 + 1.0) / _1911);
            }
            else
            {
                frontier_phi_100_93_ladder = 5000.0;
            }
            _2754 = frontier_phi_100_93_ladder;
        }
        float _2756 = isnan(_2564) ? _2219 : (isnan(_2219) ? _2564 : min(_2219, _2564));
        float _2757 = isnan(_2754) ? _2756 : (isnan(_2756) ? _2754 : min(_2756, _2754));
        float _2761 = (_2757 * _1905) + _1894;
        float _2762 = (_2757 * _1908) + _1898;
        float _2763 = (_2757 * _1911) + _1902;
        float _2764 = _2757 * 9.9999997473787516355514526367188e-05;
        float _2765 = (-1.0) - _2764;
        float _2767 = _2764 + 1.0;
        float frontier_phi_65_100_ladder;
        float frontier_phi_65_100_ladder_1;
        float frontier_phi_65_100_ladder_2;
        if ((_2763 > _2767) || ((_2763 < _2765) || ((_2762 > _2767) || ((_2762 < _2765) || ((_2761 < _2765) || (_2761 > _2767))))))
        {
            frontier_phi_65_100_ladder = 0.0;
            frontier_phi_65_100_ladder_1 = 0.0;
            frontier_phi_65_100_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3005 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2763, cbModelParam._m0[17u].z, fma(_2762, cbModelParam._m0[17u].y, _2761 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2763, cbModelParam._m0[18u].z, fma(_2762, cbModelParam._m0[18u].y, _2761 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2763, cbModelParam._m0[19u].z, fma(_2762, cbModelParam._m0[19u].y, _2761 * cbModelParam._m0[19u].x))), _1842);
            frontier_phi_65_100_ladder = _3005.y * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_1 = _3005.x * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_2 = _3005.z * cbModelParam._m0[1u].z;
        }
        _1930 = frontier_phi_65_100_ladder_1;
        _1932 = frontier_phi_65_100_ladder;
        _1934 = frontier_phi_65_100_ladder_2;
    }
    else
    {
        vec4 _1914 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_913, _914, _915), _1842);
        _1930 = _1914.x * cbModelParam._m0[1u].z;
        _1932 = _1914.y * cbModelParam._m0[1u].z;
        _1934 = _1914.z * cbModelParam._m0[1u].z;
    }
    float _1946 = ((((1.0 - _934) * ((_921 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_934 * _921)) * _905;
    float _1947 = _1946 * ((cbModelParam._m0[1u].w * (_1930 - _1833)) + _1833);
    float _1948 = _1946 * ((cbModelParam._m0[1u].w * (_1932 - _1835)) + _1835);
    float _1949 = _1946 * ((cbModelParam._m0[1u].w * (_1934 - _1837)) + _1837);
    float _1952 = fma(_1949, cbSceneParam._m0[89u].z, fma(_1948, cbSceneParam._m0[89u].y, _1947 * cbSceneParam._m0[89u].x));
    float _1955 = fma(_1949, cbSceneParam._m0[90u].z, fma(_1948, cbSceneParam._m0[90u].y, _1947 * cbSceneParam._m0[90u].x));
    float _1958 = fma(_1949, cbSceneParam._m0[91u].z, fma(_1948, cbSceneParam._m0[91u].y, _1947 * cbSceneParam._m0[91u].x));
    vec4 _1966 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_840, _841));
    float _1968 = _1966.w;
    float _1980 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1968);
    float _1981 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1968);
    float _1982 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1968);
    uvec4 _1986 = floatBitsToUint(cbInstanceData._m0[_879 + 5u]);
    uint _1988 = _1986.x * 14u;
    uint _1989 = _1988 + 13u;
    float _1994 = _905 + (-1.0);
    float _1997 = (cbLight._m0[_1989].x * _1994) + 1.0;
    float _1998 = (cbLight._m0[_1989].y * _1994) + 1.0;
    uint _1999 = _1988 + 5u;
    float _2005 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
    uint _2009 = _1988 + 4u;
    float _2018 = isnan(1.0) ? _1997 : (isnan(_1997) ? 1.0 : min(_1997, 1.0));
    uint _2022 = _1988 | 1u;
    float _2033 = dot(vec3(cbLight._m0[_1988].xyz), vec3(_792, _793, _794));
    float _2036 = dot(vec3(cbLight._m0[_2022].xyz), vec3(_792, _793, _794));
    float _4053 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _4064 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2041 = (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * 0.3183098733425140380859375;
    float _2043 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * 0.3183098733425140380859375;
    float _2050 = ((cbLight._m0[_1999].x * _2005) * _2043) + (((cbLight._m0[_2009].x * _1980) * _2018) * _2041);
    float _2051 = ((_2005 * cbLight._m0[_1999].y) * _2043) + (((cbLight._m0[_2009].y * _1981) * _2018) * _2041);
    float _2052 = ((_2005 * cbLight._m0[_1999].z) * _2043) + (((cbLight._m0[_2009].z * _1982) * _2018) * _2041);
    uint _2054 = _1988 + 8u;
    float _2067 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1988].w)) * _795) * 0.949999988079071044921875);
    float _2068 = _2067 * _2067;
    float _2069 = cbLight._m0[_1988].x + _819;
    float _2070 = cbLight._m0[_1988].y + _820;
    float _2071 = cbLight._m0[_1988].z + _821;
    float _2075 = inversesqrt(dot(vec3(_2069, _2070, _2071), vec3(_2069, _2070, _2071)));
    float _2076 = _2075 * _2069;
    float _2077 = _2075 * _2070;
    float _2078 = _2075 * _2071;
    float _2079 = dot(vec3(_792, _793, _794), vec3(cbLight._m0[_1988].xyz));
    float _4075 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _2082 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _4086 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _2083 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _2084 = dot(vec3(_792, _793, _794), vec3(_2076, _2077, _2078));
    float _4097 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2087 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _2088 = dot(vec3(cbLight._m0[_1988].xyz), vec3(_2076, _2077, _2078));
    float _4108 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2092 = _2068 * _2068;
    float _2096 = ((_2087 * _2087) * (_2092 + (-1.0))) + 1.0;
    float _2107 = (exp2(log2(1.0 - (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2108 = 1.0 - _2068;
    float _2119 = (0.5 / (((_2083 * ((_2082 * _2108) + _2068)) + 9.9999999392252902907785028219223e-09) + (((_2083 * _2108) + _2068) * _2082))) * _2082;
    float _4119 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2121 = (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_2092 / ((_2096 * _2096) * 3.141590118408203125));
    uint _2135 = _1988 + 9u;
    float _2146 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2022].w)) * _795) * 0.949999988079071044921875);
    float _2147 = _2146 * _2146;
    float _2148 = cbLight._m0[_2022].x + _819;
    float _2149 = cbLight._m0[_2022].y + _820;
    float _2150 = cbLight._m0[_2022].z + _821;
    float _2154 = inversesqrt(dot(vec3(_2148, _2149, _2150), vec3(_2148, _2149, _2150)));
    float _2155 = _2154 * _2148;
    float _2156 = _2154 * _2149;
    float _2157 = _2154 * _2150;
    float _2158 = dot(vec3(_792, _793, _794), vec3(cbLight._m0[_2022].xyz));
    float _4130 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2161 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _2162 = dot(vec3(_792, _793, _794), vec3(_2155, _2156, _2157));
    float _4141 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2165 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _2166 = dot(vec3(cbLight._m0[_2022].xyz), vec3(_2155, _2156, _2157));
    float _4152 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2170 = _2147 * _2147;
    float _2174 = ((_2165 * _2165) * (_2170 + (-1.0))) + 1.0;
    float _2183 = (exp2(log2(1.0 - (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2184 = 1.0 - _2147;
    float _2194 = (0.5 / (((_2083 * ((_2161 * _2184) + _2147)) + 9.9999999392252902907785028219223e-09) + (((_2083 * _2184) + _2147) * _2161))) * _2161;
    float _4163 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2196 = (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_2170 / ((_2174 * _2174) * 3.141590118408203125));
    float _2206 = (((_2183 * cbLight._m0[_2135].x) * _2196) * _2005) + ((((cbLight._m0[_2054].x * _1980) * _2107) * _2121) * _2018);
    float _2207 = (((_2183 * cbLight._m0[_2135].y) * _2196) * _2005) + ((((cbLight._m0[_2054].y * _1981) * _2107) * _2121) * _2018);
    float _2208 = (((_2183 * cbLight._m0[_2135].z) * _2196) * _2005) + ((((cbLight._m0[_2054].z * _1982) * _2107) * _2121) * _2018);
    float _2323;
    float _2325;
    float _2327;
    float _2329;
    float _2331;
    float _2333;
    if (_1986.y == 0u)
    {
        float _2263 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2264 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2263;
        float _2265 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2263;
        float _2266 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2263;
        uvec4 _2278 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2279 = _2278.x;
        uint _2290 = uint((float(_2278.y) * floor(float(uint(cbSceneParam._m0[85u].y * _841) / _2279))) + floor(float(uint(cbSceneParam._m0[85u].x * _840) / _2279)));
        float _2300 = (log2(_2266 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2301 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        uint _2304 = uint(isnan(14.0) ? _2301 : (isnan(_2301) ? 14.0 : min(_2301, 14.0)));
        uvec4 _2309 = texelFetch(g_lightClusterGridBuffer, int(((_2304 << 2u) + (_2290 << 6u)) >> 2u));
        uint _2310 = _2309.x;
        uint _2311 = _2278.z;
        float _2417;
        float _2419;
        float _2421;
        float _2423;
        float _2425;
        float _2427;
        if (((((1u << ((_2311 >> 4u) & 15u)) + 4294967295u) & _2310) == 0u) || ((_2311 & 240u) == 0u))
        {
            _2417 = 0.0;
            _2419 = 0.0;
            _2421 = 0.0;
            _2423 = 0.0;
            _2425 = 0.0;
            _2427 = 0.0;
        }
        else
        {
            float _2418;
            float _2420;
            float _2422;
            float _2424;
            float _2426;
            float _2428;
            float _2601 = 0.0;
            float _2602 = 0.0;
            float _2603 = 0.0;
            float _2604 = 0.0;
            float _2605 = 0.0;
            float _2606 = 0.0;
            uint _2607 = 0u;
            uint _2616;
            bool _2617;
            for (;;)
            {
                _2616 = texelFetch(g_lightClassification, int((((_2304 << 5u) + (_2290 << 9u)) + (_2607 << 2u)) >> 2u)).x;
                _2617 = _2616 == 0u;
                float frontier_phi_95_pred;
                float frontier_phi_95_pred_1;
                float frontier_phi_95_pred_2;
                float frontier_phi_95_pred_3;
                float frontier_phi_95_pred_4;
                float frontier_phi_95_pred_5;
                if (_2617)
                {
                    frontier_phi_95_pred = _2602;
                    frontier_phi_95_pred_1 = _2601;
                    frontier_phi_95_pred_2 = _2603;
                    frontier_phi_95_pred_3 = _2606;
                    frontier_phi_95_pred_4 = _2605;
                    frontier_phi_95_pred_5 = _2604;
                }
                else
                {
                    float _2797;
                    float _2798;
                    float _2799;
                    float _2800;
                    float _2801;
                    float _2802;
                    uint _2803;
                    _2797 = _2601;
                    _2798 = _2602;
                    _2799 = _2603;
                    _2800 = _2604;
                    _2801 = _2605;
                    _2802 = _2606;
                    _2803 = _2616;
                    float _2698;
                    float _2699;
                    float _2700;
                    float _2701;
                    float _2702;
                    float _2703;
                    for (;;)
                    {
                        uint _2807 = uint(findLSB(_2803)) + (_2607 << 5u);
                        uint _2804 = (_2803 + 4294967295u) & _2803;
                        uint _2809 = _2807 * 48u;
                        vec4 _2823 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2809)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 3u)).x));
                        uint _2829 = (_2807 * 48u) + 4u;
                        vec4 _2842 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2829)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 3u)).x));
                        uint _2848 = (_2807 * 48u) + 8u;
                        vec3 _2859 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2848)).x, texelFetch(g_PointLightRenderingBuffer, int(_2848 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2848 + 2u)).x));
                        float _2863 = _2823.x - _2264;
                        float _2864 = _2823.y - _2265;
                        float _2865 = _2823.z - _2266;
                        float _2866 = dot(vec3(_2863, _2864, _2865), vec3(_2863, _2864, _2865));
                        float _2869 = inversesqrt(_2866);
                        float _2870 = _2869 * _2863;
                        float _2871 = _2869 * _2864;
                        float _2872 = _2869 * _2865;
                        float _2873 = dot(vec3(_860, _863, _866), vec3(_2870, _2871, _2872));
                        float _2878 = 1.0 - (_2866 * _2823.w);
                        float _4184 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
                        float _2879 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
                        float _2880 = sqrt(_2866) * _2842.w;
                        float _2883 = 1.39999997615814208984375 / (_2880 + 1.39999997615814208984375);
                        float _2884 = _2883 * _2883;
                        float _2887 = ((1.0 - _2884) * _2873) + _2884;
                        float _2890 = _2880 * _2880;
                        float _2894 = ((isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0))) * _2879) / ((_2890 * 0.699999988079071044921875) + 1.0);
                        float _2898 = (-0.0) - _2264;
                        float _2899 = (-0.0) - _2265;
                        float _2900 = (-0.0) - _2266;
                        float _2904 = inversesqrt(dot(vec3(_2898, _2899, _2900), vec3(_2898, _2899, _2900)));
                        float _2905 = _2904 * _2898;
                        float _2906 = _2904 * _2899;
                        float _2907 = _2904 * _2900;
                        float _2915 = exp2(log2(1.0 / ((_2890 * 3.5) + 5.0)) * 0.25);
                        float _2916 = 1.0 - _921;
                        float _2923 = sqrt(1.0 - ((1.0 - (_2916 * _2916)) * (1.0 - (_2915 * _2915))));
                        float _2924 = _2923 * _2923;
                        float _2925 = _2924 * _2924;
                        float _2926 = _2905 + _2870;
                        float _2927 = _2906 + _2871;
                        float _2928 = _2907 + _2872;
                        float _2932 = inversesqrt(dot(vec3(_2926, _2927, _2928), vec3(_2926, _2927, _2928)));
                        float _2936 = dot(vec3(_860, _863, _866), vec3(_2905, _2906, _2907));
                        float _4200 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
                        float _2939 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                        float _2940 = dot(vec3(_860, _863, _866), vec3(_2932 * _2926, _2932 * _2927, _2932 * _2928));
                        float _4211 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
                        float _2943 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
                        float _2947 = ((_2943 * _2943) * (_2925 + (-1.0))) + 1.0;
                        float _2948 = _2883 * _2924;
                        float _2949 = _2948 * _2948;
                        float _2952 = ((1.0 - _2949) * _2873) + _2949;
                        float _4222 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
                        float _2953 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
                        float _2954 = 1.0 - _2924;
                        float _2964 = (0.5 / (((_2953 * ((_2939 * _2954) + _2924)) + 9.9999999392252902907785028219223e-09) + (((_2953 * _2954) + _2924) * _2939))) * _2953;
                        float _4233 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
                        float _2975 = (((_2925 * 3.1415927410125732421875) * (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0)))) / ((_2947 * _2947) * ((_2890 * 2.1991131305694580078125) + 3.141590118408203125))) * _2879;
                        _2701 = (_2894 * _2842.x) + _2800;
                        _2702 = (_2894 * _2842.y) + _2801;
                        _2703 = (_2894 * _2842.z) + _2802;
                        _2698 = (_2975 * _2859.x) + _2797;
                        _2699 = (_2975 * _2859.y) + _2798;
                        _2700 = (_2975 * _2859.z) + _2799;
                        if (_2804 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2797 = _2698;
                            _2798 = _2699;
                            _2799 = _2700;
                            _2800 = _2701;
                            _2801 = _2702;
                            _2802 = _2703;
                            _2803 = _2804;
                        }
                    }
                    frontier_phi_95_pred = _2699;
                    frontier_phi_95_pred_1 = _2698;
                    frontier_phi_95_pred_2 = _2700;
                    frontier_phi_95_pred_3 = _2703;
                    frontier_phi_95_pred_4 = _2702;
                    frontier_phi_95_pred_5 = _2701;
                }
                _2420 = frontier_phi_95_pred;
                _2418 = frontier_phi_95_pred_1;
                _2422 = frontier_phi_95_pred_2;
                _2428 = frontier_phi_95_pred_3;
                _2426 = frontier_phi_95_pred_4;
                _2424 = frontier_phi_95_pred_5;
                uint _2608 = _2607 + 1u;
                if (_2608 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2601 = _2418;
                    _2602 = _2420;
                    _2603 = _2422;
                    _2604 = _2424;
                    _2605 = _2426;
                    _2606 = _2428;
                    _2607 = _2608;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2417 = _2418;
            _2419 = _2420;
            _2421 = _2422;
            _2423 = _2424;
            _2425 = _2426;
            _2427 = _2428;
        }
        uvec4 _2431 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2432 = _2431.z;
        uint _2434 = (_2432 >> 8u) & 15u;
        float _2569;
        float _2571;
        float _2573;
        float _2575;
        float _2577;
        float _2579;
        if (((4294967295u << _2434) & _2310) == 0u)
        {
            _2569 = _2417;
            _2571 = _2419;
            _2573 = _2421;
            _2575 = _2423;
            _2577 = _2425;
            _2579 = _2427;
        }
        else
        {
            float _2594 = inversesqrt(dot(vec3(_2264, _2265, _2266), vec3(_2264, _2265, _2266)));
            float _2595 = _2594 * _2264;
            float _2596 = _2594 * _2265;
            float _2597 = _2594 * _2266;
            float frontier_phi_84_85_ladder;
            float frontier_phi_84_85_ladder_1;
            float frontier_phi_84_85_ladder_2;
            float frontier_phi_84_85_ladder_3;
            float frontier_phi_84_85_ladder_4;
            float frontier_phi_84_85_ladder_5;
            if (_2434 < ((_2432 >> 12u) & 15u))
            {
                float _2570;
                float _2572;
                float _2574;
                float _2576;
                float _2578;
                float _2580;
                float _2780 = _2417;
                float _2781 = _2419;
                float _2782 = _2421;
                float _2783 = _2423;
                float _2784 = _2425;
                float _2785 = _2427;
                uint _2786 = _2434;
                uint _2795;
                bool _2796;
                for (;;)
                {
                    _2795 = texelFetch(g_lightClassification, int((((_2304 << 5u) + (_2290 << 9u)) + (_2786 << 2u)) >> 2u)).x;
                    _2796 = _2795 == 0u;
                    float frontier_phi_109_pred;
                    float frontier_phi_109_pred_1;
                    float frontier_phi_109_pred_2;
                    float frontier_phi_109_pred_3;
                    float frontier_phi_109_pred_4;
                    float frontier_phi_109_pred_5;
                    if (_2796)
                    {
                        frontier_phi_109_pred = _2781;
                        frontier_phi_109_pred_1 = _2780;
                        frontier_phi_109_pred_2 = _2785;
                        frontier_phi_109_pred_3 = _2784;
                        frontier_phi_109_pred_4 = _2783;
                        frontier_phi_109_pred_5 = _2782;
                    }
                    else
                    {
                        float _3010;
                        float _3011;
                        float _3012;
                        float _3013;
                        float _3014;
                        float _3015;
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3023 = _2780;
                        float _3024 = _2781;
                        float _3025 = _2782;
                        float _3026 = _2783;
                        float _3027 = _2784;
                        float _3028 = _2785;
                        uint _3029 = _2795;
                        uint _3030;
                        vec4 _3055;
                        float _3056;
                        vec4 _3071;
                        vec3 _3083;
                        vec4 _3098;
                        vec4 _3113;
                        float _3159;
                        bool _3160;
                        for (;;)
                        {
                            uint _3040 = ((_2786 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3029));
                            _3030 = (_3029 + 4294967295u) & _3029;
                            uint _3042 = _3040 * 40u;
                            _3055 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3042)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 3u)).x));
                            _3056 = _3055.w;
                            uint _3058 = (_3040 * 40u) + 4u;
                            _3071 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3058)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 3u)).x));
                            uint _3073 = (_3040 * 40u) + 8u;
                            _3083 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3073)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 2u)).x));
                            uint _3085 = (_3040 * 40u) + 16u;
                            _3098 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3085)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 3u)).x));
                            uint _3100 = (_3040 * 40u) + 20u;
                            _3113 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 3u)).x));
                            uint _3115 = (_3040 * 40u) + 24u;
                            vec4 _3128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 3u)).x));
                            uint _3134 = (_3040 * 40u) + 28u;
                            vec4 _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            _3159 = fma(_2266, _3147.z, fma(_2265, _3147.y, _3147.x * _2264)) + _3147.w;
                            _3160 = !((fma(_2266, _3128.z, fma(_2265, _3128.y, _3128.x * _2264)) + _3128.w) <= 0.0);
                            float frontier_phi_115_pred;
                            float frontier_phi_115_pred_1;
                            float frontier_phi_115_pred_2;
                            float frontier_phi_115_pred_3;
                            float frontier_phi_115_pred_4;
                            float frontier_phi_115_pred_5;
                            if (_3160)
                            {
                                float _3187 = _3055.x - _2264;
                                float _3188 = _3055.y - _2265;
                                float _3189 = _3055.z - _2266;
                                float _3190 = dot(vec3(_3187, _3188, _3189), vec3(_3187, _3188, _3189));
                                float _3193 = inversesqrt(_3190);
                                float _3194 = _3193 * _3187;
                                float _3195 = _3193 * _3188;
                                float _3196 = _3193 * _3189;
                                float _3200 = 1.0 - (_3190 / (_3056 * _3056));
                                float _4244 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                                float _3201 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
                                float _3205 = sqrt(_3190) * _3071.w;
                                float _3207 = 1.39999997615814208984375 / (_3205 + 1.39999997615814208984375);
                                float _3208 = _3207 * _3207;
                                float _3211 = ((1.0 - _3208) * dot(vec3(_3194, _3195, _3196), vec3(_860, _863, _866))) + _3208;
                                float _3214 = _3205 * _3205;
                                float _3218 = (fma(_2266, _3098.z, fma(_2265, _3098.y, _3098.x * _2264)) + _3098.w) / _3159;
                                float _3219 = (fma(_2266, _3113.z, fma(_2265, _3113.y, _3113.x * _2264)) + _3113.w) / _3159;
                                float _3223 = 1.0 - dot(vec2(_3218, _3219), vec2(_3218, _3219));
                                float _4260 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                                float _3224 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
                                float _3225 = _3224 * (((isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0))) * _3201) / ((_3214 * 0.699999988079071044921875) + 1.0));
                                float _3237 = exp2(log2(1.0 / ((_3214 * 3.5) + 5.0)) * 0.25);
                                float _3238 = 1.0 - _921;
                                float _3245 = sqrt(1.0 - ((1.0 - (_3238 * _3238)) * (1.0 - (_3237 * _3237))));
                                float _3246 = _3245 * _3245;
                                float _3247 = _3246 * _3246;
                                float _3248 = _3194 - _2595;
                                float _3249 = _3195 - _2596;
                                float _3250 = _3196 - _2597;
                                float _3254 = inversesqrt(dot(vec3(_3248, _3249, _3250), vec3(_3248, _3249, _3250)));
                                float _3258 = dot(vec3(_860, _863, _866), vec3((-0.0) - _2595, (-0.0) - _2596, (-0.0) - _2597));
                                float _4271 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                                float _3261 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
                                float _3262 = dot(vec3(_860, _863, _866), vec3(_3254 * _3248, _3254 * _3249, _3254 * _3250));
                                float _4282 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                                float _3265 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
                                float _3269 = ((_3265 * _3265) * (_3247 + (-1.0))) + 1.0;
                                float _3270 = _3207 * _3246;
                                float _3271 = _3270 * _3270;
                                float _3277 = ((1.0 - _3271) * dot(vec3(_860, _863, _866), vec3(_3194, _3195, _3196))) + _3271;
                                float _4293 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                                float _3278 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                                float _3279 = 1.0 - _3246;
                                float _3289 = (0.5 / (((_3278 * ((_3261 * _3279) + _3246)) + 9.9999999392252902907785028219223e-09) + (((_3278 * _3279) + _3246) * _3261))) * _3278;
                                float _4304 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                                float _3299 = (_3224 * _3201) * (((_3247 * 3.1415927410125732421875) * (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0)))) / ((_3269 * _3269) * ((_3214 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_115_pred = _3225 * _3071.y;
                                frontier_phi_115_pred_1 = _3225 * _3071.x;
                                frontier_phi_115_pred_2 = _3299 * _3083.z;
                                frontier_phi_115_pred_3 = _3299 * _3083.y;
                                frontier_phi_115_pred_4 = _3299 * _3083.x;
                                frontier_phi_115_pred_5 = _3225 * _3071.z;
                            }
                            else
                            {
                                frontier_phi_115_pred = 0.0;
                                frontier_phi_115_pred_1 = 0.0;
                                frontier_phi_115_pred_2 = 0.0;
                                frontier_phi_115_pred_3 = 0.0;
                                frontier_phi_115_pred_4 = 0.0;
                                frontier_phi_115_pred_5 = 0.0;
                            }
                            _3307 = frontier_phi_115_pred;
                            _3306 = frontier_phi_115_pred_1;
                            _3305 = frontier_phi_115_pred_2;
                            _3304 = frontier_phi_115_pred_3;
                            _3303 = frontier_phi_115_pred_4;
                            _3308 = frontier_phi_115_pred_5;
                            _3013 = _3306 + _3026;
                            _3014 = _3307 + _3027;
                            _3015 = _3308 + _3028;
                            _3010 = _3303 + _3023;
                            _3011 = _3304 + _3024;
                            _3012 = _3305 + _3025;
                            if (_3030 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3023 = _3010;
                                _3024 = _3011;
                                _3025 = _3012;
                                _3026 = _3013;
                                _3027 = _3014;
                                _3028 = _3015;
                                _3029 = _3030;
                                continue;
                            }
                        }
                        frontier_phi_109_pred = _3011;
                        frontier_phi_109_pred_1 = _3010;
                        frontier_phi_109_pred_2 = _3015;
                        frontier_phi_109_pred_3 = _3014;
                        frontier_phi_109_pred_4 = _3013;
                        frontier_phi_109_pred_5 = _3012;
                    }
                    _2572 = frontier_phi_109_pred;
                    _2570 = frontier_phi_109_pred_1;
                    _2580 = frontier_phi_109_pred_2;
                    _2578 = frontier_phi_109_pred_3;
                    _2576 = frontier_phi_109_pred_4;
                    _2574 = frontier_phi_109_pred_5;
                    uint _2787 = _2786 + 1u;
                    if (_2787 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2780 = _2570;
                        _2781 = _2572;
                        _2782 = _2574;
                        _2783 = _2576;
                        _2784 = _2578;
                        _2785 = _2580;
                        _2786 = _2787;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_84_85_ladder = _2570;
                frontier_phi_84_85_ladder_1 = _2574;
                frontier_phi_84_85_ladder_2 = _2580;
                frontier_phi_84_85_ladder_3 = _2578;
                frontier_phi_84_85_ladder_4 = _2576;
                frontier_phi_84_85_ladder_5 = _2572;
            }
            else
            {
                frontier_phi_84_85_ladder = _2417;
                frontier_phi_84_85_ladder_1 = _2421;
                frontier_phi_84_85_ladder_2 = _2427;
                frontier_phi_84_85_ladder_3 = _2425;
                frontier_phi_84_85_ladder_4 = _2423;
                frontier_phi_84_85_ladder_5 = _2419;
            }
            _2569 = frontier_phi_84_85_ladder;
            _2571 = frontier_phi_84_85_ladder_5;
            _2573 = frontier_phi_84_85_ladder_1;
            _2575 = frontier_phi_84_85_ladder_4;
            _2577 = frontier_phi_84_85_ladder_3;
            _2579 = frontier_phi_84_85_ladder_2;
        }
        float _2584 = isnan(1.0) ? _905 : (isnan(_905) ? 1.0 : min(_905, 1.0));
        _2323 = (_2584 * _2575) + _2050;
        _2325 = (_2584 * _2577) + _2051;
        _2327 = (_2584 * _2579) + _2052;
        _2329 = ((_2569 * 0.039999999105930328369140625) * _2584) + _2206;
        _2331 = ((_2571 * 0.039999999105930328369140625) * _2584) + _2207;
        _2333 = ((_2573 * 0.039999999105930328369140625) * _2584) + _2208;
    }
    else
    {
        _2323 = _2050;
        _2325 = _2051;
        _2327 = _2052;
        _2329 = _2206;
        _2331 = _2207;
        _2333 = _2208;
    }
    uint _2339 = _881 + uint(cbMatDynParam._m0[0u].w);
    float _4320 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _4331 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _4342 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _2364 = (((isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_2323 + ((isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))) * _905))) + ((_2329 + ((isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))) * _1742)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2339].x * ((((((cbMtdParam._m0[14u].x * _291) * _687.x) - _620) * _291) * _740) + _620));
    float _2366 = ((cbInstanceData._m0[_2339].y * ((((((cbMtdParam._m0[14u].y * _291) * _687.y) - _621) * _291) * _740) + _621)) + ((_2331 + ((isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))) * _1742)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_2325 + ((isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))) * _905)));
    float _2368 = ((cbInstanceData._m0[_2339].z * ((((((cbMtdParam._m0[14u].z * _291) * _687.z) - _622) * _291) * _740) + _622)) + ((_2333 + ((isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0))) * _1742)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_2327 + ((isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))) * _905)));
    float _2369 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2370 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2371 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    uint _2372 = _879 + 6u;
    float _2380 = _840 / cbSceneParam._m0[86u].x;
    float _2381 = _841 / cbSceneParam._m0[86u].y;
    vec4 _2395 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2380, _2381, (log2((isnan(cbSceneParam._m0[77u].w) ? _814 : (isnan(_814) ? cbSceneParam._m0[77u].w : min(_814, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2397 = _2395.x;
    float _2398 = _2395.y;
    float _2399 = _2395.z;
    float _2400 = _2395.w;
    float _2480;
    float _2482;
    float _2484;
    float _2486;
    if (_814 > cbSceneParam._m0[78u].w)
    {
        float _2442 = isnan(_814) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _814 : min(cbSceneParam._m0[80u].w, _814));
        float _2443 = _2442 / _814;
        float _2454 = _2443 * _273;
        float _2455 = _274 * _2443;
        float _2456 = (-0.0) - _2455;
        float _2457 = _2443 * _275;
        float _2459 = (cbSceneParam._m0[77u].w * _2456) / _2442;
        float _2460 = _2459 + cbSceneParam._m0[79u].w;
        float _2461 = cbSceneParam._m0[79u].w - _2455;
        float _2467 = sqrt(((_2454 * _2454) + (_2455 * _2455)) + (_2457 * _2457));
        float _2470 = (1.0 - (cbSceneParam._m0[77u].w / _2442)) * _2467;
        float _2476 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2478 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2711;
        if (abs((_2456 - _2459) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2711 = ((((_2460 > 0.0) ? exp2(_2476 * _2460) : (2.0 - exp2(_2478 * _2460))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2470;
        }
        else
        {
            float _2630 = 1.0 / cbSceneParam._m0[80u].x;
            float _2631 = isnan(_2461) ? _2460 : (isnan(_2460) ? _2461 : max(_2460, _2461));
            float _2632 = isnan(_2461) ? _2460 : (isnan(_2460) ? _2461 : min(_2460, _2461));
            float _2641 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : min(_2631, 0.0));
            float _2642 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : min(_2632, 0.0));
            _2711 = ((abs(_2467 / _2456) * cbSceneParam._m0[80u].y) * ((((_2641 - _2642) * 2.0) - ((exp2(_2476 * (isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0)))) - exp2(_2476 * (isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0))))) * _2630)) - ((exp2(_2478 * _2641) - exp2(_2478 * _2642)) * _2630))) + (_2470 * cbSceneParam._m0[80u].z);
        }
        vec4 _2713 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2380, _2381, 1.0), 0.0);
        float _2722 = exp2((_2711 * (-1.44269502162933349609375)) * (1.0 - _2713.w));
        float _2723 = log2(_2722);
        float _2739 = log2(_2400);
        _2480 = (exp2(_2739 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2723 * cbSceneParam._m0[78u].x)) * _2713.x) / cbSceneParam._m0[78u].x)) + _2397;
        _2482 = (exp2(_2739 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2723 * cbSceneParam._m0[78u].y)) * _2713.y) / cbSceneParam._m0[78u].y)) + _2398;
        _2484 = (exp2(_2739 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2723 * cbSceneParam._m0[78u].z)) * _2713.z) / cbSceneParam._m0[78u].z)) + _2399;
        _2486 = _2722 * _2400;
    }
    else
    {
        _2480 = _2397;
        _2482 = _2398;
        _2484 = _2399;
        _2486 = _2400;
    }
    bool _2749;
    vec4 _2496;
    vec4 _2518;
    float _2520;
    float _2524;
    float _2525;
    float _2526;
    float _2527;
    bool _2537;
    for (;;)
    {
        _2496 = cbMatDynParam._m0[0u];
        float _2498 = roundEven(_2496.y);
        bool _2499 = _2498 == 3.0;
        float _2500 = log2(_2486);
        float _2507 = exp2(_2500 * cbSceneParam._m0[78u].x) * _2369;
        float _2508 = exp2(_2500 * cbSceneParam._m0[78u].y) * _2370;
        float _2509 = exp2(_2500 * cbSceneParam._m0[78u].z) * _2371;
        float _2516 = _828 + (-0.5);
        _2518 = cbMtdParam._m0[1u];
        _2520 = _2518.y * _2516;
        float _2523 = (_2498 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2524 = _2523 * (_2499 ? _2507 : (_2507 + (cbSceneParam._m0[72u].w * _2480)));
        _2525 = _2523 * (_2499 ? _2508 : (_2508 + (cbSceneParam._m0[72u].w * _2482)));
        _2526 = _2523 * (_2499 ? _2509 : (_2509 + (cbSceneParam._m0[72u].w * _2484)));
        _2527 = _2516 * 0.999000012874603271484375;
        _2537 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2537)
        {
            if ((cbInstanceData._m0[_879 + 7u].x + _2527) < 0.5)
            {
                _2749 = true;
                break;
            }
        }
        uint _2665 = _881 + uint(_2496.w);
        if ((cbInstanceData._m0[_2665].w < 1.0) && ((cbInstanceData._m0[_2665].w + _2527) < 0.5))
        {
            _2749 = true;
            break;
        }
        if ((_2520 + 1.0) < _2518.x)
        {
            _2749 = true;
            break;
        }
        _2749 = false;
        break;
    }
    float _2980;
    if (_2749)
    {
        discard_state = true;
        _2980 = 0.0;
    }
    else
    {
        _2980 = cbInstanceData._m0[_2372].w;
    }
    SV_Target.x = _2524;
    SV_Target.y = _2525;
    SV_Target.z = _2526;
    SV_Target.w = _2980;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2372].w;
    discard_exit();
}


