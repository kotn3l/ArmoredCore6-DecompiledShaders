#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _439;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _276 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _279 = _276.x;
    vec4 _297 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _314 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _279) + cbMtdParam._m0[12u].x) * _297.x;
    float _316 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _279) + cbMtdParam._m0[12u].y) * _297.y;
    float _318 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _279) + cbMtdParam._m0[12u].z) * _297.z;
    vec4 _352 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _367 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _374 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _386 = cbMtdParam._m0[22u].z + _261;
    float _387 = cbMtdParam._m0[22u].w + _262;
    float _388 = cbMtdParam._m0[23u].x + _263;
    float _402 = (-0.0) - dot(vec3(_386, _387, _388), vec3(_367 * _190, _367 * _191, _367 * _192));
    float _403 = (-0.0) - dot(vec3(_386, _387, _388), vec3(_374 * _204, _374 * _205, _374 * _206));
    float _404 = (-0.0) - dot(vec3(_386, _387, _388), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _408 = inversesqrt(dot(vec3(_402, _403, _404), vec3(_402, _403, _404)));
    float _409 = _408 * _404;
    float _414 = ((cbMtdParam._m0[19u].y * _402) * _408) + (((_352.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _415 = ((cbMtdParam._m0[19u].z * _403) * _408) + (((_352.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _418 = fract(cbMtdParam._m0[19u].y * TEXCOORD.x);
    float _419 = fract(cbMtdParam._m0[19u].z * TEXCOORD.y);
    float _437;
    float _440;
    float _442;
    if (_414 > 0.0)
    {
        float _423 = (1.0 - _418) / _414;
        _437 = _423;
        _440 = ((cbMtdParam._m0[16u].z + 1.0) - fract(_423 * _409)) * 0.16666667163372039794921875;
        _442 = (fract((_423 * _415) + _419) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_414 < 0.0)
        {
            float _438 = ((-0.0) - _418) / _414;
            frontier_phi_3_2_ladder = (fract((_438 * _415) + _419) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_1 = _438;
            frontier_phi_3_2_ladder_2 = (fract(_438 * _409) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _439;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _437 = frontier_phi_3_2_ladder_1;
        _440 = frontier_phi_3_2_ladder_2;
        _442 = frontier_phi_3_2_ladder;
    }
    float _468;
    float _470;
    float _472;
    if (_415 > 0.0)
    {
        float _455 = (1.0 - _419) / _415;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_455 < _437)
        {
            frontier_phi_8_5_ladder = (fract((_455 * _414) + _418) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_1 = _455;
            frontier_phi_8_5_ladder_2 = (fract(_455 * _409) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
        }
        else
        {
            frontier_phi_8_5_ladder = _440;
            frontier_phi_8_5_ladder_1 = _437;
            frontier_phi_8_5_ladder_2 = _442;
        }
        _468 = frontier_phi_8_5_ladder_1;
        _470 = frontier_phi_8_5_ladder;
        _472 = frontier_phi_8_5_ladder_2;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_415 < 0.0)
        {
            float _469 = ((-0.0) - _419) / _415;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_469 < _437)
            {
                frontier_phi_8_6_ladder_9_ladder = (fract((_469 * _414) + _418) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = _469;
                frontier_phi_8_6_ladder_9_ladder_2 = fract(_469 * _409) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _440;
                frontier_phi_8_6_ladder_9_ladder_1 = _437;
                frontier_phi_8_6_ladder_9_ladder_2 = _442;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _440;
            frontier_phi_8_6_ladder_1 = _437;
            frontier_phi_8_6_ladder_2 = _442;
        }
        _468 = frontier_phi_8_6_ladder_1;
        _470 = frontier_phi_8_6_ladder;
        _472 = frontier_phi_8_6_ladder_2;
    }
    float _476 = (_409 > 0.0) ? (cbMtdParam._m0[16u].y / _409) : 5000.0;
    float _489;
    float _490;
    if (_476 < _468)
    {
        _489 = ((_418 + cbMtdParam._m0[16u].z) + (_476 * _414)) * 0.16666667163372039794921875;
        _490 = (((_476 * _415) + _419) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _489 = _470;
        _490 = _472;
    }
    vec4 _492 = texture(sampler2D(M_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_489, _490));
    float _503 = _279 * 0.1500000059604644775390625;
    float _511 = (_503 * (((cbMtdParam._m0[13u].x * _279) * _492.x) - _314)) + _314;
    float _512 = (_503 * (((cbMtdParam._m0[13u].y * _279) * _492.y) - _316)) + _316;
    float _513 = (_503 * (((cbMtdParam._m0[13u].z * _279) * _492.z) - _318)) + _318;
    vec4 _525 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _529 = _525.z;
    float _532 = (_525.x * 2.0) + (-1.0);
    float _533 = (_525.y * 2.0) + (-1.0);
    float _534 = dot(vec2(_532, _533), vec2(_532, _533));
    float _3130 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _539 = sqrt(1.0 - (isnan(1.0) ? _3130 : (isnan(_3130) ? 1.0 : min(_3130, 1.0))));
    float _542 = fma(_539, _197, fma(_533, _204, _532 * _190));
    float _545 = fma(_539, _198, fma(_533, _205, _532 * _191));
    float _548 = fma(_539, _199, fma(_533, _206, _532 * _192));
    float _552 = inversesqrt(dot(vec3(_542, _545, _548), vec3(_542, _545, _548)));
    float _553 = _552 * _542;
    float _554 = _552 * _545;
    float _555 = _552 * _548;
    float _3141 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _556 = isnan(1.0) ? _3141 : (isnan(_3141) ? 1.0 : min(_3141, 1.0));
    float _3152 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _3163 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _3174 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _575 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _579 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _580 = _261 * _579;
    float _581 = _262 * _579;
    float _582 = _263 * _579;
    float _588 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _589 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _610 = fma(_555, cbSceneParam._m0[5u].z, fma(_554, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _553));
    float _613 = fma(_555, cbSceneParam._m0[6u].z, fma(_554, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _553));
    float _616 = fma(_555, cbSceneParam._m0[7u].z, fma(_554, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _553));
    uint _629 = uint(roundEven(NORMAL.w)) * 13u;
    uint _631 = (_629 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _637 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3152 : (isnan(_3152) ? 1.0 : min(_3152, 1.0)))) * cbInstanceData._m0[_631].x;
    float _638 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3163 : (isnan(_3163) ? 1.0 : min(_3163, 1.0)))) * cbInstanceData._m0[_631].y;
    float _639 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3174 : (isnan(_3174) ? 1.0 : min(_3174, 1.0)))) * cbInstanceData._m0[_631].z;
    float _3185 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _640 = isnan(1.0) ? _3185 : (isnan(_3185) ? 1.0 : min(_3185, 1.0));
    float _3196 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _641 = isnan(1.0) ? _3196 : (isnan(_3196) ? 1.0 : min(_3196, 1.0));
    float _3207 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _642 = isnan(1.0) ? _3207 : (isnan(_3207) ? 1.0 : min(_3207, 1.0));
    vec4 _651 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _588, cbSceneParam._m0[86u].y * _589));
    float _654 = _651.x * TEXCOORD.z;
    float _655 = dot(vec3(_553, _554, _555), vec3(_580, _581, _582));
    float _658 = _655 * 2.0;
    float _662 = (_658 * _553) - _580;
    float _663 = (_658 * _554) - _581;
    float _664 = (_658 * _555) - _582;
    float _668 = abs(dot(vec3(_580, _581, _582), vec3(_553, _554, _555)));
    float _3218 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _670 = sqrt(_556);
    float _683 = exp2((_670 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3218 : (isnan(_3218) ? 1.0 : min(_3218, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_670 * 3.0));
    float _715 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _719 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _723 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _756 = fma(_723, cbModelParam._m0[26u].z, fma(_719, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _715));
        float _760 = fma(_723, cbModelParam._m0[27u].z, fma(_719, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _715));
        float _764 = fma(_723, cbModelParam._m0[28u].z, fma(_719, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _715));
        float _788 = _715 + _553;
        float _789 = _719 + _554;
        float _790 = _723 + _555;
        float _800 = fma(_790, cbModelParam._m0[26u].z, fma(_789, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _788)) - _756;
        float _801 = fma(_790, cbModelParam._m0[27u].z, fma(_789, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _788)) - _760;
        float _802 = fma(_790, cbModelParam._m0[28u].z, fma(_789, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _788)) - _764;
        float _806 = inversesqrt(dot(vec3(_800, _801, _802), vec3(_800, _801, _802)));
        float _819 = ((_806 * _800) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_756 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _820 = ((_806 * _801) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_760 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _821 = ((_806 * _802) / cbModelParam._m0[34u].z) + ((((((_764 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _824 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_819, _820, _821), 0.0);
        vec4 _831 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_819, _820, _821), 0.0);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_819, _820, _821), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_819, _820, _821), 0.0);
        float _858 = exp2((_824.w + (-0.5)) * 20.0) * 2.0;
        float _859 = _858 * (_824.x + (-0.5));
        float _860 = _858 * (_824.y + (-0.5));
        float _861 = _858 * (_824.z + (-0.5));
        float _868 = exp2((_831.w + (-0.5)) * 20.0) * 2.0;
        float _869 = _868 * (_831.x + (-0.5));
        float _870 = _868 * (_831.y + (-0.5));
        float _871 = _868 * (_831.z + (-0.5));
        float _878 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _879 = _878 * (_838.x + (-0.5));
        float _880 = _878 * (_838.y + (-0.5));
        float _881 = _878 * (_838.z + (-0.5));
        float _888 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_845.x + (-0.5));
        float _890 = _888 * (_845.y + (-0.5));
        float _891 = _888 * (_845.z + (-0.5));
        float _892 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _893 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _894 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _895 = _859 * 0.5;
        float _896 = _869 * 0.5;
        float _897 = _879 * 0.5;
        float _898 = dot(vec3(_895, _896, _897), vec3(_895, _896, _897));
        float _903 = (_898 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_898);
        float _912 = (dot(vec3(_553, _554, _555), vec3(_903 * _895, _903 * _896, _903 * _897)) + 1.0) * 0.5;
        float _3244 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _922 = sqrt(((_896 * _896) + (_895 * _895)) + (_897 * _897)) / (_892 + 9.9999997473787516355514526367188e-06);
        float _3255 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _923 = isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0));
        float _924 = _923 * 2.0;
        float _928 = (1.0 - _923) / (_923 + 1.0);
        float _3266 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _929 = isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0));
        float _938 = ((((1.0 - _929) * (_924 + 2.0)) * exp2(log2(isnan(1.0) ? _3244 : (isnan(_3244) ? 1.0 : min(_3244, 1.0))) * (_924 + 1.0))) + _929) * _892;
        float _939 = _860 * 0.5;
        float _940 = _870 * 0.5;
        float _941 = _880 * 0.5;
        float _942 = dot(vec3(_939, _940, _941), vec3(_939, _940, _941));
        float _947 = (_942 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_942);
        float _955 = (dot(vec3(_553, _554, _555), vec3(_947 * _939, _947 * _940, _947 * _941)) + 1.0) * 0.5;
        float _3277 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _964 = sqrt(((_940 * _940) + (_939 * _939)) + (_941 * _941)) / (_893 + 9.9999997473787516355514526367188e-06);
        float _3288 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0));
        float _966 = _965 * 2.0;
        float _970 = (1.0 - _965) / (_965 + 1.0);
        float _3299 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0));
        float _980 = ((((1.0 - _971) * (_966 + 2.0)) * exp2(log2(isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0))) * (_966 + 1.0))) + _971) * _893;
        float _981 = _861 * 0.5;
        float _982 = _871 * 0.5;
        float _983 = _881 * 0.5;
        float _984 = dot(vec3(_981, _982, _983), vec3(_981, _982, _983));
        float _989 = (_984 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_984);
        float _997 = (dot(vec3(_553, _554, _555), vec3(_989 * _981, _989 * _982, _989 * _983)) + 1.0) * 0.5;
        float _3310 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1006 = sqrt(((_982 * _982) + (_981 * _981)) + (_983 * _983)) / (_894 + 9.9999997473787516355514526367188e-06);
        float _3321 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0));
        float _1008 = _1007 * 2.0;
        float _1012 = (1.0 - _1007) / (_1007 + 1.0);
        float _3332 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0));
        float _1022 = ((((1.0 - _1013) * (_1008 + 2.0)) * exp2(log2(isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0))) * (_1008 + 1.0))) + _1013) * _894;
        _1030 = _861;
        _1031 = _860;
        _1032 = _859;
        _1033 = _871;
        _1034 = _870;
        _1035 = _869;
        _1036 = _881;
        _1037 = _880;
        _1038 = _879;
        _1039 = _894;
        _1040 = _893;
        _1041 = _892;
        _1042 = cbModelParam._m0[36u].z * (isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0)));
        _1043 = cbModelParam._m0[36u].z * (isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0)));
        _1044 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0)));
    }
    else
    {
        _1030 = _439;
        _1031 = _439;
        _1032 = _439;
        _1033 = _439;
        _1034 = _439;
        _1035 = _439;
        _1036 = _439;
        _1037 = _439;
        _1038 = _439;
        _1039 = _439;
        _1040 = _439;
        _1041 = _439;
        _1042 = 0.0;
        _1043 = 0.0;
        _1044 = 0.0;
    }
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1070 = fma(_723, cbModelParam._m0[30u].z, fma(_719, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _715));
        float _1074 = fma(_723, cbModelParam._m0[31u].z, fma(_719, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _715));
        float _1078 = fma(_723, cbModelParam._m0[32u].z, fma(_719, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _715));
        float _1101 = _715 + _553;
        float _1102 = _719 + _554;
        float _1103 = _723 + _555;
        float _1113 = fma(_1103, cbModelParam._m0[30u].z, fma(_1102, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1101)) - _1070;
        float _1114 = fma(_1103, cbModelParam._m0[31u].z, fma(_1102, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1101)) - _1074;
        float _1115 = fma(_1103, cbModelParam._m0[32u].z, fma(_1102, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1101)) - _1078;
        float _1119 = inversesqrt(dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115)));
        float _1132 = ((_1119 * _1113) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1070 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1133 = ((_1119 * _1114) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1074 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1134 = ((_1119 * _1115) / cbModelParam._m0[35u].z) + ((((((_1078 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        float _1169 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1136.x + (-0.5));
        float _1171 = _1169 * (_1136.y + (-0.5));
        float _1172 = _1169 * (_1136.z + (-0.5));
        float _1179 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1143.x + (-0.5));
        float _1181 = _1179 * (_1143.y + (-0.5));
        float _1182 = _1179 * (_1143.z + (-0.5));
        float _1189 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1150.x + (-0.5));
        float _1191 = _1189 * (_1150.y + (-0.5));
        float _1192 = _1189 * (_1150.z + (-0.5));
        float _1199 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1157.x + (-0.5));
        float _1201 = _1199 * (_1157.y + (-0.5));
        float _1202 = _1199 * (_1157.z + (-0.5));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1205 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1206 = _1170 * 0.5;
        float _1207 = _1180 * 0.5;
        float _1208 = _1190 * 0.5;
        float _1209 = dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208));
        float _1214 = (_1209 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1209);
        float _1222 = (dot(vec3(_553, _554, _555), vec3(_1214 * _1206, _1214 * _1207, _1214 * _1208)) + 1.0) * 0.5;
        float _3373 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1231 = sqrt(((_1207 * _1207) + (_1206 * _1206)) + (_1208 * _1208)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _3384 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0));
        float _1233 = _1232 * 2.0;
        float _1237 = (1.0 - _1232) / (_1232 + 1.0);
        float _3395 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
        float _1247 = ((((1.0 - _1238) * (_1233 + 2.0)) * exp2(log2(isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0))) * (_1233 + 1.0))) + _1238) * _1203;
        float _1248 = _1171 * 0.5;
        float _1249 = _1181 * 0.5;
        float _1250 = _1191 * 0.5;
        float _1251 = dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250));
        float _1256 = (_1251 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1251);
        float _1264 = (dot(vec3(_553, _554, _555), vec3(_1256 * _1248, _1256 * _1249, _1256 * _1250)) + 1.0) * 0.5;
        float _3406 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1273 = sqrt(((_1249 * _1249) + (_1248 * _1248)) + (_1250 * _1250)) / (_1204 + 9.9999997473787516355514526367188e-06);
        float _3417 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _3428 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0))) * (_1275 + 1.0))) + _1280) * _1204;
        float _1290 = _1172 * 0.5;
        float _1291 = _1182 * 0.5;
        float _1292 = _1192 * 0.5;
        float _1293 = dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292));
        float _1298 = (_1293 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1293);
        float _1306 = (dot(vec3(_553, _554, _555), vec3(_1298 * _1290, _1298 * _1291, _1298 * _1292)) + 1.0) * 0.5;
        float _3439 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1315 = sqrt(((_1291 * _1291) + (_1290 * _1290)) + (_1292 * _1292)) / (_1205 + 9.9999997473787516355514526367188e-06);
        float _3450 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _3461 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0))) * (_1317 + 1.0))) + _1322) * _1205;
        _1339 = _1172;
        _1340 = _1171;
        _1341 = _1170;
        _1342 = _1182;
        _1343 = _1181;
        _1344 = _1180;
        _1345 = _1192;
        _1346 = _1191;
        _1347 = _1190;
        _1348 = _1205;
        _1349 = _1204;
        _1350 = _1203;
        _1351 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)));
        _1352 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
        _1353 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
    }
    else
    {
        _1339 = _439;
        _1340 = _439;
        _1341 = _439;
        _1342 = _439;
        _1343 = _439;
        _1344 = _439;
        _1345 = _439;
        _1346 = _439;
        _1347 = _439;
        _1348 = _439;
        _1349 = _439;
        _1350 = _439;
        _1351 = 0.0;
        _1352 = 0.0;
        _1353 = 0.0;
    }
    float _1363 = (cbModelParam._m0[1u].x * (_1351 - _1042)) + _1042;
    float _1364 = (cbModelParam._m0[1u].x * (_1352 - _1043)) + _1043;
    float _1365 = (cbModelParam._m0[1u].x * (_1353 - _1044)) + _1044;
    float _1386 = fma(_1365, cbSceneParam._m0[89u].z, fma(_1364, cbSceneParam._m0[89u].y, _1363 * cbSceneParam._m0[89u].x));
    float _1389 = fma(_1365, cbSceneParam._m0[90u].z, fma(_1364, cbSceneParam._m0[90u].y, _1363 * cbSceneParam._m0[90u].x));
    float _1392 = fma(_1365, cbSceneParam._m0[91u].z, fma(_1364, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1363));
    float _1407 = _662 * 0.5;
    float _1408 = _663 * 0.5;
    float _1409 = _664 * 0.5;
    float _1410 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1341, _1344, _1347, _1350));
    float _1413 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1340, _1343, _1346, _1349));
    float _1416 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1339, _1342, _1345, _1348));
    float _1450;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1423 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1030, _1033, _1036, _1039));
        float _1427 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1031, _1034, _1037, _1040));
        float _1431 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1032, _1035, _1038, _1041));
        float _1438 = dot(vec4(cbModelParam._m0[39u]), vec4(_1407, _1408, _1409, 1.0));
        _1450 = dot(vec3(isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)), isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)), isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1438) ? 0.0 : (isnan(0.0) ? _1438 : max(0.0, _1438))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1450 = 1.0;
    }
    float _1461;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1452 = dot(vec4(cbModelParam._m0[40u]), vec4(_1407, _1408, _1409, 1.0));
        _1461 = dot(vec3(isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)), isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)), isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1452) ? 0.0 : (isnan(0.0) ? _1452 : max(0.0, _1452))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1461 = 1.0;
    }
    float _1465 = (_1461 * cbModelParam._m0[1u].x) + (_1450 * (1.0 - cbModelParam._m0[1u].x));
    float _1475 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _556);
    float _1476 = isnan(_1475) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1475 : min(cbModelParam._m0[25u].z, _1475));
    float _1558;
    float _1560;
    float _1562;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1525 = fma(_723, cbModelParam._m0[13u].z, fma(_719, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _715)) + cbModelParam._m0[13u].w;
        float _1529 = fma(_723, cbModelParam._m0[14u].z, fma(_719, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _715)) + cbModelParam._m0[14u].w;
        float _1533 = fma(_723, cbModelParam._m0[15u].z, fma(_719, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _715)) + cbModelParam._m0[15u].w;
        float _1536 = fma(_664, cbModelParam._m0[13u].z, fma(_663, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _662));
        float _1539 = fma(_664, cbModelParam._m0[14u].z, fma(_663, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _662));
        float _1542 = fma(_664, cbModelParam._m0[15u].z, fma(_663, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _662));
        float _1570;
        if (_1536 > 0.0)
        {
            _1570 = abs((1.0 - _1525) / _1536);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1536 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1525 + 1.0) / _1536);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1570 = frontier_phi_26_24_ladder;
        }
        float _1941;
        if (_1539 > 0.0)
        {
            _1941 = abs((1.0 - _1529) / _1539);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1539 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1529 + 1.0) / _1539);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1941 = frontier_phi_35_31_ladder;
        }
        float _2241;
        if (_1542 > 0.0)
        {
            _2241 = abs((1.0 - _1533) / _1542);
        }
        else
        {
            float frontier_phi_49_42_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_49_42_ladder = abs((_1533 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_49_42_ladder = 5000.0;
            }
            _2241 = frontier_phi_49_42_ladder;
        }
        float _2243 = isnan(_1941) ? _1570 : (isnan(_1570) ? _1941 : min(_1570, _1941));
        float _2244 = isnan(_2241) ? _2243 : (isnan(_2243) ? _2241 : min(_2243, _2241));
        float _2248 = (_2244 * _1536) + _1525;
        float _2249 = (_2244 * _1539) + _1529;
        float _2250 = (_2244 * _1542) + _1533;
        float _2251 = _2244 * 9.9999997473787516355514526367188e-05;
        float _2252 = (-1.0) - _2251;
        float _2254 = _2251 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2250 > _2254) || ((_2250 < _2252) || ((_2249 > _2254) || ((_2249 < _2252) || ((_2248 < _2252) || (_2248 > _2254))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2376 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2250, cbModelParam._m0[9u].z, fma(_2249, cbModelParam._m0[9u].y, _2248 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2250, cbModelParam._m0[10u].z, fma(_2249, cbModelParam._m0[10u].y, _2248 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2250, cbModelParam._m0[11u].z, fma(_2249, cbModelParam._m0[11u].y, _2248 * cbModelParam._m0[11u].x))), _1476);
            frontier_phi_25_49_ladder = _2376.z * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_1 = _2376.y * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_2 = _2376.x * cbModelParam._m0[1u].y;
        }
        _1558 = frontier_phi_25_49_ladder_2;
        _1560 = frontier_phi_25_49_ladder_1;
        _1562 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1546 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_662, _663, _664), _1476);
        _1558 = _1546.x * cbModelParam._m0[1u].y;
        _1560 = _1546.y * cbModelParam._m0[1u].y;
        _1562 = _1546.z * cbModelParam._m0[1u].y;
    }
    float _1566 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _556);
    float _1567 = isnan(_1566) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1566 : min(cbModelParam._m0[25u].w, _1566));
    float _1657;
    float _1659;
    float _1661;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1621 = fma(_723, cbModelParam._m0[21u].z, fma(_719, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _715)) + cbModelParam._m0[21u].w;
        float _1625 = fma(_723, cbModelParam._m0[22u].z, fma(_719, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _715)) + cbModelParam._m0[22u].w;
        float _1629 = fma(_723, cbModelParam._m0[23u].z, fma(_719, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _715)) + cbModelParam._m0[23u].w;
        float _1632 = fma(_664, cbModelParam._m0[21u].z, fma(_663, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _662));
        float _1635 = fma(_664, cbModelParam._m0[22u].z, fma(_663, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _662));
        float _1638 = fma(_664, cbModelParam._m0[23u].z, fma(_663, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _662));
        float _1946;
        if (_1632 > 0.0)
        {
            _1946 = abs((1.0 - _1621) / _1632);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1621 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1946 = frontier_phi_37_33_ladder;
        }
        float _2267;
        if (_1635 > 0.0)
        {
            _2267 = abs((1.0 - _1625) / _1635);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_1625 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _2267 = frontier_phi_51_44_ladder;
        }
        float _2436;
        if (_1638 > 0.0)
        {
            _2436 = abs((1.0 - _1629) / _1638);
        }
        else
        {
            float frontier_phi_65_60_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_65_60_ladder = abs((_1629 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_65_60_ladder = 5000.0;
            }
            _2436 = frontier_phi_65_60_ladder;
        }
        float _2438 = isnan(_2267) ? _1946 : (isnan(_1946) ? _2267 : min(_1946, _2267));
        float _2439 = isnan(_2436) ? _2438 : (isnan(_2438) ? _2436 : min(_2438, _2436));
        float _2443 = (_2439 * _1632) + _1621;
        float _2444 = (_2439 * _1635) + _1625;
        float _2445 = (_2439 * _1638) + _1629;
        float _2446 = _2439 * 9.9999997473787516355514526367188e-05;
        float _2447 = (-1.0) - _2446;
        float _2449 = _2446 + 1.0;
        float frontier_phi_34_65_ladder;
        float frontier_phi_34_65_ladder_1;
        float frontier_phi_34_65_ladder_2;
        if ((_2445 > _2449) || ((_2445 < _2447) || ((_2444 > _2449) || ((_2444 < _2447) || ((_2443 < _2447) || (_2443 > _2449))))))
        {
            frontier_phi_34_65_ladder = 0.0;
            frontier_phi_34_65_ladder_1 = 0.0;
            frontier_phi_34_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2678 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2445, cbModelParam._m0[17u].z, fma(_2444, cbModelParam._m0[17u].y, _2443 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2445, cbModelParam._m0[18u].z, fma(_2444, cbModelParam._m0[18u].y, _2443 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2445, cbModelParam._m0[19u].z, fma(_2444, cbModelParam._m0[19u].y, _2443 * cbModelParam._m0[19u].x))), _1567);
            frontier_phi_34_65_ladder = _2678.y * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_1 = _2678.x * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_2 = _2678.z * cbModelParam._m0[1u].z;
        }
        _1657 = frontier_phi_34_65_ladder_1;
        _1659 = frontier_phi_34_65_ladder;
        _1661 = frontier_phi_34_65_ladder_2;
    }
    else
    {
        vec4 _1641 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_662, _663, _664), _1567);
        _1657 = _1641.x * cbModelParam._m0[1u].z;
        _1659 = _1641.y * cbModelParam._m0[1u].z;
        _1661 = _1641.z * cbModelParam._m0[1u].z;
    }
    float _1673 = ((((1.0 - _683) * ((_670 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_683 * _670)) * _654;
    float _1674 = _1673 * ((cbModelParam._m0[1u].w * (_1657 - _1558)) + _1558);
    float _1675 = _1673 * ((cbModelParam._m0[1u].w * (_1659 - _1560)) + _1560);
    float _1676 = _1673 * ((cbModelParam._m0[1u].w * (_1661 - _1562)) + _1562);
    float _1679 = fma(_1676, cbSceneParam._m0[89u].z, fma(_1675, cbSceneParam._m0[89u].y, _1674 * cbSceneParam._m0[89u].x));
    float _1682 = fma(_1676, cbSceneParam._m0[90u].z, fma(_1675, cbSceneParam._m0[90u].y, _1674 * cbSceneParam._m0[90u].x));
    float _1685 = fma(_1676, cbSceneParam._m0[91u].z, fma(_1675, cbSceneParam._m0[91u].y, _1674 * cbSceneParam._m0[91u].x));
    vec4 _1693 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_588, _589));
    float _1695 = _1693.w;
    float _1707 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1695);
    float _1708 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1695);
    float _1709 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1695);
    uvec4 _1713 = floatBitsToUint(cbInstanceData._m0[_629 + 5u]);
    uint _1715 = _1713.x * 14u;
    uint _1716 = _1715 + 13u;
    float _1721 = _654 + (-1.0);
    float _1724 = (cbLight._m0[_1716].x * _1721) + 1.0;
    float _1725 = (cbLight._m0[_1716].y * _1721) + 1.0;
    uint _1726 = _1715 + 5u;
    float _1732 = isnan(1.0) ? _1725 : (isnan(_1725) ? 1.0 : min(_1725, 1.0));
    uint _1736 = _1715 + 4u;
    float _1745 = isnan(1.0) ? _1724 : (isnan(_1724) ? 1.0 : min(_1724, 1.0));
    uint _1749 = _1715 | 1u;
    float _1760 = dot(vec3(cbLight._m0[_1715].xyz), vec3(_553, _554, _555));
    float _1763 = dot(vec3(cbLight._m0[_1749].xyz), vec3(_553, _554, _555));
    float _3597 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _3608 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _1768 = (isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) * 0.3183098733425140380859375;
    float _1770 = (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) * 0.3183098733425140380859375;
    float _1777 = ((cbLight._m0[_1726].x * _1732) * _1770) + (((cbLight._m0[_1736].x * _1707) * _1745) * _1768);
    float _1778 = ((_1732 * cbLight._m0[_1726].y) * _1770) + (((cbLight._m0[_1736].y * _1708) * _1745) * _1768);
    float _1779 = ((_1732 * cbLight._m0[_1726].z) * _1770) + (((cbLight._m0[_1736].z * _1709) * _1745) * _1768);
    uint _1781 = _1715 + 8u;
    float _1794 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1715].w)) * _556) * 0.949999988079071044921875);
    float _1795 = _1794 * _1794;
    float _1796 = cbLight._m0[_1715].x + _580;
    float _1797 = cbLight._m0[_1715].y + _581;
    float _1798 = cbLight._m0[_1715].z + _582;
    float _1802 = inversesqrt(dot(vec3(_1796, _1797, _1798), vec3(_1796, _1797, _1798)));
    float _1803 = _1802 * _1796;
    float _1804 = _1802 * _1797;
    float _1805 = _1802 * _1798;
    float _1806 = dot(vec3(_553, _554, _555), vec3(cbLight._m0[_1715].xyz));
    float _3619 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _1809 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
    float _3630 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _1810 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
    float _1811 = dot(vec3(_553, _554, _555), vec3(_1803, _1804, _1805));
    float _3641 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _1814 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
    float _1815 = dot(vec3(cbLight._m0[_1715].xyz), vec3(_1803, _1804, _1805));
    float _3652 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1819 = _1795 * _1795;
    float _1823 = ((_1814 * _1814) * (_1819 + (-1.0))) + 1.0;
    float _1834 = (exp2(log2(1.0 - (isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1835 = 1.0 - _1795;
    float _1846 = (0.5 / (((_1810 * ((_1809 * _1835) + _1795)) + 9.9999999392252902907785028219223e-09) + (((_1810 * _1835) + _1795) * _1809))) * _1809;
    float _3663 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
    float _1848 = (isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * (_1819 / ((_1823 * _1823) * 3.141590118408203125));
    uint _1862 = _1715 + 9u;
    float _1873 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1749].w)) * _556) * 0.949999988079071044921875);
    float _1874 = _1873 * _1873;
    float _1875 = cbLight._m0[_1749].x + _580;
    float _1876 = cbLight._m0[_1749].y + _581;
    float _1877 = cbLight._m0[_1749].z + _582;
    float _1881 = inversesqrt(dot(vec3(_1875, _1876, _1877), vec3(_1875, _1876, _1877)));
    float _1882 = _1881 * _1875;
    float _1883 = _1881 * _1876;
    float _1884 = _1881 * _1877;
    float _1885 = dot(vec3(_553, _554, _555), vec3(cbLight._m0[_1749].xyz));
    float _3674 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1888 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
    float _1889 = dot(vec3(_553, _554, _555), vec3(_1882, _1883, _1884));
    float _3685 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1892 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _1893 = dot(vec3(cbLight._m0[_1749].xyz), vec3(_1882, _1883, _1884));
    float _3696 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _1897 = _1874 * _1874;
    float _1901 = ((_1892 * _1892) * (_1897 + (-1.0))) + 1.0;
    float _1910 = (exp2(log2(1.0 - (isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1911 = 1.0 - _1874;
    float _1921 = (0.5 / (((_1810 * ((_1888 * _1911) + _1874)) + 9.9999999392252902907785028219223e-09) + (((_1810 * _1911) + _1874) * _1888))) * _1888;
    float _3707 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
    float _1923 = (isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * (_1897 / ((_1901 * _1901) * 3.141590118408203125));
    float _1933 = (((_1910 * cbLight._m0[_1862].x) * _1923) * _1732) + ((((cbLight._m0[_1781].x * _1707) * _1834) * _1848) * _1745);
    float _1934 = (((_1910 * cbLight._m0[_1862].y) * _1923) * _1732) + ((((cbLight._m0[_1781].y * _1708) * _1834) * _1848) * _1745);
    float _1935 = (((_1910 * cbLight._m0[_1862].z) * _1923) * _1732) + ((((cbLight._m0[_1781].z * _1709) * _1834) * _1848) * _1745);
    float _2050;
    float _2052;
    float _2054;
    float _2056;
    float _2058;
    float _2060;
    if (_1713.y == 0u)
    {
        float _1990 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1991 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1990;
        float _1992 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1990;
        float _1993 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1990;
        uvec4 _2005 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2006 = _2005.x;
        uint _2017 = uint((float(_2005.y) * floor(float(uint(cbSceneParam._m0[85u].y * _589) / _2006))) + floor(float(uint(cbSceneParam._m0[85u].x * _588) / _2006)));
        float _2027 = (log2(_1993 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2028 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        uint _2031 = uint(isnan(14.0) ? _2028 : (isnan(_2028) ? 14.0 : min(_2028, 14.0)));
        uvec4 _2036 = texelFetch(g_lightClusterGridBuffer, int(((_2031 << 2u) + (_2017 << 6u)) >> 2u));
        uint _2037 = _2036.x;
        uint _2038 = _2005.z;
        float _2128;
        float _2130;
        float _2132;
        float _2134;
        float _2136;
        float _2138;
        if (((((1u << ((_2038 >> 4u) & 15u)) + 4294967295u) & _2037) == 0u) || ((_2038 & 240u) == 0u))
        {
            _2128 = 0.0;
            _2130 = 0.0;
            _2132 = 0.0;
            _2134 = 0.0;
            _2136 = 0.0;
            _2138 = 0.0;
        }
        else
        {
            float _2129;
            float _2131;
            float _2133;
            float _2135;
            float _2137;
            float _2139;
            float _2304 = 0.0;
            float _2305 = 0.0;
            float _2306 = 0.0;
            float _2307 = 0.0;
            float _2308 = 0.0;
            float _2309 = 0.0;
            uint _2310 = 0u;
            uint _2319;
            bool _2320;
            for (;;)
            {
                _2319 = texelFetch(g_lightClassification, int((((_2031 << 5u) + (_2017 << 9u)) + (_2310 << 2u)) >> 2u)).x;
                _2320 = _2319 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                float frontier_phi_62_pred_3;
                float frontier_phi_62_pred_4;
                float frontier_phi_62_pred_5;
                if (_2320)
                {
                    frontier_phi_62_pred = _2305;
                    frontier_phi_62_pred_1 = _2304;
                    frontier_phi_62_pred_2 = _2306;
                    frontier_phi_62_pred_3 = _2309;
                    frontier_phi_62_pred_4 = _2308;
                    frontier_phi_62_pred_5 = _2307;
                }
                else
                {
                    float _2479;
                    float _2480;
                    float _2481;
                    float _2482;
                    float _2483;
                    float _2484;
                    uint _2485;
                    _2479 = _2304;
                    _2480 = _2305;
                    _2481 = _2306;
                    _2482 = _2307;
                    _2483 = _2308;
                    _2484 = _2309;
                    _2485 = _2319;
                    float _2385;
                    float _2386;
                    float _2387;
                    float _2388;
                    float _2389;
                    float _2390;
                    for (;;)
                    {
                        uint _2489 = uint(findLSB(_2485)) + (_2310 << 5u);
                        uint _2486 = (_2485 + 4294967295u) & _2485;
                        uint _2491 = _2489 * 48u;
                        vec4 _2505 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2491)).x, texelFetch(g_PointLightRenderingBuffer, int(_2491 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2491 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2491 + 3u)).x));
                        uint _2511 = (_2489 * 48u) + 4u;
                        vec4 _2524 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2511)).x, texelFetch(g_PointLightRenderingBuffer, int(_2511 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2511 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2511 + 3u)).x));
                        uint _2530 = (_2489 * 48u) + 8u;
                        vec3 _2541 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2530)).x, texelFetch(g_PointLightRenderingBuffer, int(_2530 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2530 + 2u)).x));
                        float _2545 = _2505.x - _1991;
                        float _2546 = _2505.y - _1992;
                        float _2547 = _2505.z - _1993;
                        float _2548 = dot(vec3(_2545, _2546, _2547), vec3(_2545, _2546, _2547));
                        float _2551 = inversesqrt(_2548);
                        float _2552 = _2551 * _2545;
                        float _2553 = _2551 * _2546;
                        float _2554 = _2551 * _2547;
                        float _2555 = dot(vec3(_610, _613, _616), vec3(_2552, _2553, _2554));
                        float _2560 = 1.0 - (_2548 * _2505.w);
                        float _3728 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
                        float _2561 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
                        float _2562 = sqrt(_2548) * _2524.w;
                        float _2565 = 1.39999997615814208984375 / (_2562 + 1.39999997615814208984375);
                        float _2566 = _2565 * _2565;
                        float _2569 = ((1.0 - _2566) * _2555) + _2566;
                        float _2572 = _2562 * _2562;
                        float _2576 = ((isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0))) * _2561) / ((_2572 * 0.699999988079071044921875) + 1.0);
                        float _2580 = (-0.0) - _1991;
                        float _2581 = (-0.0) - _1992;
                        float _2582 = (-0.0) - _1993;
                        float _2586 = inversesqrt(dot(vec3(_2580, _2581, _2582), vec3(_2580, _2581, _2582)));
                        float _2587 = _2586 * _2580;
                        float _2588 = _2586 * _2581;
                        float _2589 = _2586 * _2582;
                        float _2597 = exp2(log2(1.0 / ((_2572 * 3.5) + 5.0)) * 0.25);
                        float _2598 = 1.0 - _670;
                        float _2605 = sqrt(1.0 - ((1.0 - (_2598 * _2598)) * (1.0 - (_2597 * _2597))));
                        float _2606 = _2605 * _2605;
                        float _2607 = _2606 * _2606;
                        float _2608 = _2587 + _2552;
                        float _2609 = _2588 + _2553;
                        float _2610 = _2589 + _2554;
                        float _2614 = inversesqrt(dot(vec3(_2608, _2609, _2610), vec3(_2608, _2609, _2610)));
                        float _2618 = dot(vec3(_610, _613, _616), vec3(_2587, _2588, _2589));
                        float _3744 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
                        float _2621 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
                        float _2622 = dot(vec3(_610, _613, _616), vec3(_2614 * _2608, _2614 * _2609, _2614 * _2610));
                        float _3755 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
                        float _2625 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
                        float _2629 = ((_2625 * _2625) * (_2607 + (-1.0))) + 1.0;
                        float _2630 = _2565 * _2606;
                        float _2631 = _2630 * _2630;
                        float _2634 = ((1.0 - _2631) * _2555) + _2631;
                        float _3766 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
                        float _2635 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
                        float _2636 = 1.0 - _2606;
                        float _2646 = (0.5 / (((_2635 * ((_2621 * _2636) + _2606)) + 9.9999999392252902907785028219223e-09) + (((_2635 * _2636) + _2606) * _2621))) * _2635;
                        float _3777 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
                        float _2657 = (((_2607 * 3.1415927410125732421875) * (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0)))) / ((_2629 * _2629) * ((_2572 * 2.1991131305694580078125) + 3.141590118408203125))) * _2561;
                        _2388 = (_2576 * _2524.x) + _2482;
                        _2389 = (_2576 * _2524.y) + _2483;
                        _2390 = (_2576 * _2524.z) + _2484;
                        _2385 = (_2657 * _2541.x) + _2479;
                        _2386 = (_2657 * _2541.y) + _2480;
                        _2387 = (_2657 * _2541.z) + _2481;
                        if (_2486 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2479 = _2385;
                            _2480 = _2386;
                            _2481 = _2387;
                            _2482 = _2388;
                            _2483 = _2389;
                            _2484 = _2390;
                            _2485 = _2486;
                        }
                    }
                    frontier_phi_62_pred = _2386;
                    frontier_phi_62_pred_1 = _2385;
                    frontier_phi_62_pred_2 = _2387;
                    frontier_phi_62_pred_3 = _2390;
                    frontier_phi_62_pred_4 = _2389;
                    frontier_phi_62_pred_5 = _2388;
                }
                _2131 = frontier_phi_62_pred;
                _2129 = frontier_phi_62_pred_1;
                _2133 = frontier_phi_62_pred_2;
                _2139 = frontier_phi_62_pred_3;
                _2137 = frontier_phi_62_pred_4;
                _2135 = frontier_phi_62_pred_5;
                uint _2311 = _2310 + 1u;
                if (_2311 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2304 = _2129;
                    _2305 = _2131;
                    _2306 = _2133;
                    _2307 = _2135;
                    _2308 = _2137;
                    _2309 = _2139;
                    _2310 = _2311;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2128 = _2129;
            _2130 = _2131;
            _2132 = _2133;
            _2134 = _2135;
            _2136 = _2137;
            _2138 = _2139;
        }
        uvec4 _2142 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2143 = _2142.z;
        uint _2145 = (_2143 >> 8u) & 15u;
        float _2272;
        float _2274;
        float _2276;
        float _2278;
        float _2280;
        float _2282;
        if (((4294967295u << _2145) & _2037) == 0u)
        {
            _2272 = _2128;
            _2274 = _2130;
            _2276 = _2132;
            _2278 = _2134;
            _2280 = _2136;
            _2282 = _2138;
        }
        else
        {
            float _2297 = inversesqrt(dot(vec3(_1991, _1992, _1993), vec3(_1991, _1992, _1993)));
            float _2298 = _2297 * _1991;
            float _2299 = _2297 * _1992;
            float _2300 = _2297 * _1993;
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            float frontier_phi_53_54_ladder_3;
            float frontier_phi_53_54_ladder_4;
            float frontier_phi_53_54_ladder_5;
            if (_2145 < ((_2143 >> 12u) & 15u))
            {
                float _2273;
                float _2275;
                float _2277;
                float _2279;
                float _2281;
                float _2283;
                float _2462 = _2128;
                float _2463 = _2130;
                float _2464 = _2132;
                float _2465 = _2134;
                float _2466 = _2136;
                float _2467 = _2138;
                uint _2468 = _2145;
                uint _2477;
                bool _2478;
                for (;;)
                {
                    _2477 = texelFetch(g_lightClassification, int((((_2031 << 5u) + (_2017 << 9u)) + (_2468 << 2u)) >> 2u)).x;
                    _2478 = _2477 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2478)
                    {
                        frontier_phi_71_pred = _2463;
                        frontier_phi_71_pred_1 = _2462;
                        frontier_phi_71_pred_2 = _2467;
                        frontier_phi_71_pred_3 = _2466;
                        frontier_phi_71_pred_4 = _2465;
                        frontier_phi_71_pred_5 = _2464;
                    }
                    else
                    {
                        float _2683;
                        float _2684;
                        float _2685;
                        float _2686;
                        float _2687;
                        float _2688;
                        float _2976;
                        float _2977;
                        float _2978;
                        float _2979;
                        float _2980;
                        float _2981;
                        float _2696 = _2462;
                        float _2697 = _2463;
                        float _2698 = _2464;
                        float _2699 = _2465;
                        float _2700 = _2466;
                        float _2701 = _2467;
                        uint _2702 = _2477;
                        uint _2703;
                        vec4 _2728;
                        float _2729;
                        vec4 _2744;
                        vec3 _2756;
                        vec4 _2771;
                        vec4 _2786;
                        float _2832;
                        bool _2833;
                        for (;;)
                        {
                            uint _2713 = ((_2468 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2702));
                            _2703 = (_2702 + 4294967295u) & _2702;
                            uint _2715 = _2713 * 40u;
                            _2728 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2715)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2715 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2715 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2715 + 3u)).x));
                            _2729 = _2728.w;
                            uint _2731 = (_2713 * 40u) + 4u;
                            _2744 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2731)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2731 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2731 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2731 + 3u)).x));
                            uint _2746 = (_2713 * 40u) + 8u;
                            _2756 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2746)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2746 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2746 + 2u)).x));
                            uint _2758 = (_2713 * 40u) + 16u;
                            _2771 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2758)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2758 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2758 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2758 + 3u)).x));
                            uint _2773 = (_2713 * 40u) + 20u;
                            _2786 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2773)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2773 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2773 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2773 + 3u)).x));
                            uint _2788 = (_2713 * 40u) + 24u;
                            vec4 _2801 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2788)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2788 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2788 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2788 + 3u)).x));
                            uint _2807 = (_2713 * 40u) + 28u;
                            vec4 _2820 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2807)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 3u)).x));
                            _2832 = fma(_1993, _2820.z, fma(_1992, _2820.y, _2820.x * _1991)) + _2820.w;
                            _2833 = !((fma(_1993, _2801.z, fma(_1992, _2801.y, _2801.x * _1991)) + _2801.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_2833)
                            {
                                float _2860 = _2728.x - _1991;
                                float _2861 = _2728.y - _1992;
                                float _2862 = _2728.z - _1993;
                                float _2863 = dot(vec3(_2860, _2861, _2862), vec3(_2860, _2861, _2862));
                                float _2866 = inversesqrt(_2863);
                                float _2867 = _2866 * _2860;
                                float _2868 = _2866 * _2861;
                                float _2869 = _2866 * _2862;
                                float _2873 = 1.0 - (_2863 / (_2729 * _2729));
                                float _3788 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
                                float _2874 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
                                float _2878 = sqrt(_2863) * _2744.w;
                                float _2880 = 1.39999997615814208984375 / (_2878 + 1.39999997615814208984375);
                                float _2881 = _2880 * _2880;
                                float _2884 = ((1.0 - _2881) * dot(vec3(_2867, _2868, _2869), vec3(_610, _613, _616))) + _2881;
                                float _2887 = _2878 * _2878;
                                float _2891 = (fma(_1993, _2771.z, fma(_1992, _2771.y, _2771.x * _1991)) + _2771.w) / _2832;
                                float _2892 = (fma(_1993, _2786.z, fma(_1992, _2786.y, _2786.x * _1991)) + _2786.w) / _2832;
                                float _2896 = 1.0 - dot(vec2(_2891, _2892), vec2(_2891, _2892));
                                float _3804 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
                                float _2897 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
                                float _2898 = _2897 * (((isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0))) * _2874) / ((_2887 * 0.699999988079071044921875) + 1.0));
                                float _2910 = exp2(log2(1.0 / ((_2887 * 3.5) + 5.0)) * 0.25);
                                float _2911 = 1.0 - _670;
                                float _2918 = sqrt(1.0 - ((1.0 - (_2911 * _2911)) * (1.0 - (_2910 * _2910))));
                                float _2919 = _2918 * _2918;
                                float _2920 = _2919 * _2919;
                                float _2921 = _2867 - _2298;
                                float _2922 = _2868 - _2299;
                                float _2923 = _2869 - _2300;
                                float _2927 = inversesqrt(dot(vec3(_2921, _2922, _2923), vec3(_2921, _2922, _2923)));
                                float _2931 = dot(vec3(_610, _613, _616), vec3((-0.0) - _2298, (-0.0) - _2299, (-0.0) - _2300));
                                float _3815 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
                                float _2934 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
                                float _2935 = dot(vec3(_610, _613, _616), vec3(_2927 * _2921, _2927 * _2922, _2927 * _2923));
                                float _3826 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
                                float _2938 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
                                float _2942 = ((_2938 * _2938) * (_2920 + (-1.0))) + 1.0;
                                float _2943 = _2880 * _2919;
                                float _2944 = _2943 * _2943;
                                float _2950 = ((1.0 - _2944) * dot(vec3(_610, _613, _616), vec3(_2867, _2868, _2869))) + _2944;
                                float _3837 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
                                float _2951 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
                                float _2952 = 1.0 - _2919;
                                float _2962 = (0.5 / (((_2951 * ((_2934 * _2952) + _2919)) + 9.9999999392252902907785028219223e-09) + (((_2951 * _2952) + _2919) * _2934))) * _2951;
                                float _3848 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                                float _2972 = (_2897 * _2874) * (((_2920 * 3.1415927410125732421875) * (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0)))) / ((_2942 * _2942) * ((_2887 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _2972 * _2756.y;
                                frontier_phi_77_pred_1 = _2972 * _2756.x;
                                frontier_phi_77_pred_2 = _2898 * _2744.z;
                                frontier_phi_77_pred_3 = _2898 * _2744.y;
                                frontier_phi_77_pred_4 = _2898 * _2744.x;
                                frontier_phi_77_pred_5 = _2972 * _2756.z;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _2977 = frontier_phi_77_pred;
                            _2976 = frontier_phi_77_pred_1;
                            _2981 = frontier_phi_77_pred_2;
                            _2980 = frontier_phi_77_pred_3;
                            _2979 = frontier_phi_77_pred_4;
                            _2978 = frontier_phi_77_pred_5;
                            _2686 = _2979 + _2699;
                            _2687 = _2980 + _2700;
                            _2688 = _2981 + _2701;
                            _2683 = _2976 + _2696;
                            _2684 = _2977 + _2697;
                            _2685 = _2978 + _2698;
                            if (_2703 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2696 = _2683;
                                _2697 = _2684;
                                _2698 = _2685;
                                _2699 = _2686;
                                _2700 = _2687;
                                _2701 = _2688;
                                _2702 = _2703;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2684;
                        frontier_phi_71_pred_1 = _2683;
                        frontier_phi_71_pred_2 = _2688;
                        frontier_phi_71_pred_3 = _2687;
                        frontier_phi_71_pred_4 = _2686;
                        frontier_phi_71_pred_5 = _2685;
                    }
                    _2275 = frontier_phi_71_pred;
                    _2273 = frontier_phi_71_pred_1;
                    _2283 = frontier_phi_71_pred_2;
                    _2281 = frontier_phi_71_pred_3;
                    _2279 = frontier_phi_71_pred_4;
                    _2277 = frontier_phi_71_pred_5;
                    uint _2469 = _2468 + 1u;
                    if (_2469 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2462 = _2273;
                        _2463 = _2275;
                        _2464 = _2277;
                        _2465 = _2279;
                        _2466 = _2281;
                        _2467 = _2283;
                        _2468 = _2469;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _2283;
                frontier_phi_53_54_ladder_1 = _2279;
                frontier_phi_53_54_ladder_2 = _2277;
                frontier_phi_53_54_ladder_3 = _2275;
                frontier_phi_53_54_ladder_4 = _2273;
                frontier_phi_53_54_ladder_5 = _2281;
            }
            else
            {
                frontier_phi_53_54_ladder = _2138;
                frontier_phi_53_54_ladder_1 = _2134;
                frontier_phi_53_54_ladder_2 = _2132;
                frontier_phi_53_54_ladder_3 = _2130;
                frontier_phi_53_54_ladder_4 = _2128;
                frontier_phi_53_54_ladder_5 = _2136;
            }
            _2272 = frontier_phi_53_54_ladder_4;
            _2274 = frontier_phi_53_54_ladder_3;
            _2276 = frontier_phi_53_54_ladder_2;
            _2278 = frontier_phi_53_54_ladder_1;
            _2280 = frontier_phi_53_54_ladder_5;
            _2282 = frontier_phi_53_54_ladder;
        }
        float _2287 = isnan(1.0) ? _654 : (isnan(_654) ? 1.0 : min(_654, 1.0));
        _2050 = (_2287 * _2278) + _1777;
        _2052 = (_2287 * _2280) + _1778;
        _2054 = (_2287 * _2282) + _1779;
        _2056 = ((_2272 * 0.039999999105930328369140625) * _2287) + _1933;
        _2058 = ((_2274 * 0.039999999105930328369140625) * _2287) + _1934;
        _2060 = ((_2276 * 0.039999999105930328369140625) * _2287) + _1935;
    }
    else
    {
        _2050 = _1777;
        _2052 = _1778;
        _2054 = _1779;
        _2056 = _1933;
        _2058 = _1934;
        _2060 = _1935;
    }
    float _3864 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _3875 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _3886 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _2077 = ((isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_2050 + ((isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0))) * _654))) + ((_2056 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _1465)) * cbPerFrame._m0[3u].x);
    float _2078 = ((isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * (_2052 + ((isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0))) * _654))) + ((_2058 + ((isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))) * _1465)) * cbPerFrame._m0[3u].x);
    float _2079 = ((isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_2054 + ((isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))) * _654))) + ((_2060 + ((isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))) * _1465)) * cbPerFrame._m0[3u].x);
    uint _2083 = _629 + 6u;
    float _2091 = _588 / cbSceneParam._m0[86u].x;
    float _2092 = _589 / cbSceneParam._m0[86u].y;
    vec4 _2106 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2091, _2092, (log2((isnan(cbSceneParam._m0[77u].w) ? _575 : (isnan(_575) ? cbSceneParam._m0[77u].w : min(_575, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2108 = _2106.x;
    float _2109 = _2106.y;
    float _2110 = _2106.z;
    float _2111 = _2106.w;
    float _2191;
    float _2193;
    float _2195;
    float _2197;
    if (_575 > cbSceneParam._m0[78u].w)
    {
        float _2153 = isnan(_575) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _575 : min(cbSceneParam._m0[80u].w, _575));
        float _2154 = _2153 / _575;
        float _2165 = _2154 * _261;
        float _2166 = _262 * _2154;
        float _2167 = (-0.0) - _2166;
        float _2168 = _2154 * _263;
        float _2170 = (cbSceneParam._m0[77u].w * _2167) / _2153;
        float _2171 = _2170 + cbSceneParam._m0[79u].w;
        float _2172 = cbSceneParam._m0[79u].w - _2166;
        float _2178 = sqrt(((_2165 * _2165) + (_2166 * _2166)) + (_2168 * _2168));
        float _2181 = (1.0 - (cbSceneParam._m0[77u].w / _2153)) * _2178;
        float _2187 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2189 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2398;
        if (abs((_2167 - _2170) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2398 = ((((_2171 > 0.0) ? exp2(_2187 * _2171) : (2.0 - exp2(_2189 * _2171))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2181;
        }
        else
        {
            float _2333 = 1.0 / cbSceneParam._m0[80u].x;
            float _2334 = isnan(_2172) ? _2171 : (isnan(_2171) ? _2172 : max(_2171, _2172));
            float _2335 = isnan(_2172) ? _2171 : (isnan(_2171) ? _2172 : min(_2171, _2172));
            float _2344 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : min(_2334, 0.0));
            float _2345 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : min(_2335, 0.0));
            _2398 = ((abs(_2178 / _2167) * cbSceneParam._m0[80u].y) * ((((_2344 - _2345) * 2.0) - ((exp2(_2187 * (isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0)))) - exp2(_2187 * (isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0))))) * _2333)) - ((exp2(_2189 * _2344) - exp2(_2189 * _2345)) * _2333))) + (_2181 * cbSceneParam._m0[80u].z);
        }
        vec4 _2400 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2091, _2092, 1.0), 0.0);
        float _2409 = exp2((_2398 * (-1.44269502162933349609375)) * (1.0 - _2400.w));
        float _2410 = log2(_2409);
        float _2426 = log2(_2111);
        _2191 = (exp2(_2426 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2410 * cbSceneParam._m0[78u].x)) * _2400.x) / cbSceneParam._m0[78u].x)) + _2108;
        _2193 = (exp2(_2426 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2410 * cbSceneParam._m0[78u].y)) * _2400.y) / cbSceneParam._m0[78u].y)) + _2109;
        _2195 = (exp2(_2426 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2410 * cbSceneParam._m0[78u].z)) * _2400.z) / cbSceneParam._m0[78u].z)) + _2110;
        _2197 = _2409 * _2111;
    }
    else
    {
        _2191 = _2108;
        _2193 = _2109;
        _2195 = _2110;
        _2197 = _2111;
    }
    float _2209 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2210 = _2209 == 3.0;
    float _2211 = log2(_2197);
    float _2218 = exp2(_2211 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0)));
    float _2219 = exp2(_2211 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0)));
    float _2220 = exp2(_2211 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0)));
    float _2229 = (_2209 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2229 * (_2210 ? _2218 : (_2218 + (cbSceneParam._m0[72u].w * _2191)));
    SV_Target.y = _2229 * (_2210 ? _2219 : (_2219 + (cbSceneParam._m0[72u].w * _2193)));
    SV_Target.z = _2229 * (_2210 ? _2220 : (_2220 + (cbSceneParam._m0[72u].w * _2195)));
    SV_Target.w = cbInstanceData._m0[_2083].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2083].w;
}


