#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1128;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    vec4 _282 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _285 = _282.x;
    vec4 _303 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _320 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _285) + cbMtdParam._m0[12u].x) * _303.x;
    float _322 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _285) + cbMtdParam._m0[12u].y) * _303.y;
    float _324 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _285) + cbMtdParam._m0[12u].z) * _303.z;
    vec4 _345 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _381 = cbMtdParam._m0[21u].w + _267;
    float _382 = cbMtdParam._m0[22u].x + _268;
    float _383 = cbMtdParam._m0[22u].y + _269;
    float _397 = (-0.0) - dot(vec3(_381, _382, _383), vec3(_196, _197, _198));
    float _398 = (-0.0) - dot(vec3(_381, _382, _383), vec3(_210, _211, _212));
    float _399 = (-0.0) - dot(vec3(_381, _382, _383), vec3((-0.0) - _203, (-0.0) - _204, (-0.0) - _205));
    float _403 = inversesqrt(dot(vec3(_397, _398, _399), vec3(_397, _398, _399)));
    float _406 = _403 * _399;
    float _407 = (_403 * _397) + ((cbMtdParam._m0[19u].w * _285) * ((_345.x * 2.0) + (-1.0)));
    float _408 = (_403 * _398) + ((cbMtdParam._m0[20u].x * _285) * ((_345.y * 2.0) + (-1.0)));
    float _409 = _407 * cbMtdParam._m0[18u].z;
    float _410 = _408 * cbMtdParam._m0[18u].y;
    float _411 = fract(TEXCOORD.x);
    float _412 = fract(TEXCOORD.y);
    float _418;
    if (_409 > 0.0)
    {
        _418 = (1.0 - _411) / _409;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_409 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _411) / _409;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _418 = frontier_phi_3_2_ladder;
    }
    float _426;
    if (_410 > 0.0)
    {
        _426 = (1.0 - _412) / _410;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_410 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _412) / _410;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _426 = frontier_phi_7_6_ladder;
    }
    bool _428 = _406 > 0.0;
    float _430 = _428 ? (cbMtdParam._m0[15u].x / _406) : 5000.0;
    float _431 = isnan(_426) ? _418 : (isnan(_418) ? _426 : min(_418, _426));
    float _432 = isnan(_430) ? _431 : (isnan(_431) ? _430 : min(_431, _430));
    float _436 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _437 = _411 + (-0.5);
    float _440 = _412 + (-0.5);
    float _443 = ((_432 * _406) + _436) / _436;
    vec4 _467 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_437 + (_432 * _409)) / _443) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_440 + (_432 * _410)) / _443) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _480 = (_467.x * _285) * cbMtdParam._m0[9u].x;
    float _481 = (_467.y * _285) * cbMtdParam._m0[9u].y;
    float _482 = (_467.z * _285) * cbMtdParam._m0[9u].z;
    float _500 = _407 * cbMtdParam._m0[20u].z;
    float _501 = _408 * cbMtdParam._m0[20u].y;
    bool _502 = _500 > 0.0;
    float _507;
    if (_502)
    {
        _507 = (1.0 - _411) / _500;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_500 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _411) / _500;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _507 = frontier_phi_11_10_ladder;
    }
    bool _509 = _501 > 0.0;
    float _514;
    if (_509)
    {
        _514 = (1.0 - _412) / _501;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_501 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _412) / _501;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _514 = frontier_phi_15_14_ladder;
    }
    float _517 = _428 ? (cbMtdParam._m0[16u].x / _406) : 5000.0;
    float _518 = isnan(_514) ? _507 : (isnan(_507) ? _514 : min(_507, _514));
    float _519 = isnan(_517) ? _518 : (isnan(_518) ? _517 : min(_518, _517));
    float _523 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _527 = ((_519 * _406) + _523) / _523;
    float _532 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _534 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _550 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_437 + (_519 * _500)) / _527) + 0.5) + _532) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_440 + (_519 * _501)) / _527) + 0.5) + _534) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _565;
    if (_502)
    {
        _565 = (1.0 - _411) / _500;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_500 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _411) / _500;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _565 = frontier_phi_19_18_ladder;
    }
    float _571;
    if (_509)
    {
        _571 = (1.0 - _412) / _501;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_501 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _412) / _501;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _571 = frontier_phi_23_22_ladder;
    }
    float _573 = isnan(_571) ? _565 : (isnan(_565) ? _571 : min(_565, _571));
    float _574 = isnan(_517) ? _573 : (isnan(_573) ? _517 : min(_573, _517));
    float _581 = ((_574 * _406) + _523) / _523;
    vec4 _602 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_437 + (_574 * _500)) / _581) + 0.5) + _532) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_440 + (_574 * _501)) / _581) + 0.5) + _534) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _604 = _602.x;
    vec4 _628 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _632 = _628.z;
    float _635 = (_628.x * 2.0) + (-1.0);
    float _636 = (_628.y * 2.0) + (-1.0);
    float _637 = dot(vec2(_635, _636), vec2(_635, _636));
    float _3538 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _642 = sqrt(1.0 - (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))));
    float _645 = fma(_642, _203, fma(_636, _210, _635 * _196));
    float _648 = fma(_642, _204, fma(_636, _211, _635 * _197));
    float _651 = fma(_642, _205, fma(_636, _212, _635 * _198));
    float _655 = inversesqrt(dot(vec3(_645, _648, _651), vec3(_645, _648, _651)));
    float _656 = _655 * _645;
    float _657 = _655 * _648;
    float _658 = _655 * _651;
    float _3549 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _659 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
    float _3560 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3571 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _3582 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _678 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _682 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _683 = _267 * _682;
    float _684 = _268 * _682;
    float _685 = _269 * _682;
    float _691 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _692 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _712 = fma(_658, cbSceneParam._m0[5u].z, fma(_657, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _656));
    float _715 = fma(_658, cbSceneParam._m0[6u].z, fma(_657, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _656));
    float _718 = fma(_658, cbSceneParam._m0[7u].z, fma(_657, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _656));
    uint _731 = uint(roundEven(NORMAL.w)) * 13u;
    uint _733 = _731 + 9u;
    uint _734 = _733 + uint(cbMatDynParam._m0[0u].w);
    float _740 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0)))) * cbInstanceData._m0[_734].x;
    float _741 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0)))) * cbInstanceData._m0[_734].y;
    float _742 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0)))) * cbInstanceData._m0[_734].z;
    float _3593 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _743 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
    float _3604 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _744 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
    float _3615 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _745 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
    vec4 _754 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _691, cbSceneParam._m0[86u].y * _692));
    float _757 = _754.x * TEXCOORD.z;
    float _758 = dot(vec3(_656, _657, _658), vec3(_683, _684, _685));
    float _761 = _758 * 2.0;
    float _765 = (_761 * _656) - _683;
    float _766 = (_761 * _657) - _684;
    float _767 = (_761 * _658) - _685;
    float _771 = abs(dot(vec3(_683, _684, _685), vec3(_656, _657, _658)));
    float _3626 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _773 = sqrt(_659);
    float _786 = exp2((_773 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_773 * 3.0));
    float _818 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1127;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _854 = fma(_826, cbModelParam._m0[26u].z, fma(_822, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _818));
        float _858 = fma(_826, cbModelParam._m0[27u].z, fma(_822, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _818));
        float _862 = fma(_826, cbModelParam._m0[28u].z, fma(_822, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _818));
        float _885 = _818 + _656;
        float _886 = _822 + _657;
        float _887 = _826 + _658;
        float _897 = fma(_887, cbModelParam._m0[26u].z, fma(_886, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _885)) - _854;
        float _898 = fma(_887, cbModelParam._m0[27u].z, fma(_886, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _885)) - _858;
        float _899 = fma(_887, cbModelParam._m0[28u].z, fma(_886, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _885)) - _862;
        float _903 = inversesqrt(dot(vec3(_897, _898, _899), vec3(_897, _898, _899)));
        float _916 = ((_903 * _897) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_854 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _917 = ((_903 * _898) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_858 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _918 = ((_903 * _899) / cbModelParam._m0[34u].z) + ((((((_862 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        vec4 _935 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        vec4 _942 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        float _955 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_921.x + (-0.5));
        float _957 = _955 * (_921.y + (-0.5));
        float _958 = _955 * (_921.z + (-0.5));
        float _965 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_928.x + (-0.5));
        float _967 = _965 * (_928.y + (-0.5));
        float _968 = _965 * (_928.z + (-0.5));
        float _975 = exp2((_935.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_935.x + (-0.5));
        float _977 = _975 * (_935.y + (-0.5));
        float _978 = _975 * (_935.z + (-0.5));
        float _985 = exp2((_942.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_942.x + (-0.5));
        float _987 = _985 * (_942.y + (-0.5));
        float _988 = _985 * (_942.z + (-0.5));
        float _989 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _990 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _991 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _992 = _956 * 0.5;
        float _993 = _966 * 0.5;
        float _994 = _976 * 0.5;
        float _995 = dot(vec3(_992, _993, _994), vec3(_992, _993, _994));
        float _1000 = (_995 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_995);
        float _1009 = (dot(vec3(_656, _657, _658), vec3(_1000 * _992, _1000 * _993, _1000 * _994)) + 1.0) * 0.5;
        float _3652 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1019 = sqrt(((_993 * _993) + (_992 * _992)) + (_994 * _994)) / (_989 + 9.9999997473787516355514526367188e-06);
        float _3663 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _1021 = _1020 * 2.0;
        float _1025 = (1.0 - _1020) / (_1020 + 1.0);
        float _3674 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1035 = ((((1.0 - _1026) * (_1021 + 2.0)) * exp2(log2(isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0))) * (_1021 + 1.0))) + _1026) * _989;
        float _1036 = _957 * 0.5;
        float _1037 = _967 * 0.5;
        float _1038 = _977 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1052 = (dot(vec3(_656, _657, _658), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _3685 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1061 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_990 + 9.9999997473787516355514526367188e-06);
        float _3696 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _1063 = _1062 * 2.0;
        float _1067 = (1.0 - _1062) / (_1062 + 1.0);
        float _3707 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1077 = ((((1.0 - _1068) * (_1063 + 2.0)) * exp2(log2(isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) * (_1063 + 1.0))) + _1068) * _990;
        float _1078 = _958 * 0.5;
        float _1079 = _968 * 0.5;
        float _1080 = _978 * 0.5;
        float _1081 = dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080));
        float _1086 = (_1081 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1081);
        float _1094 = (dot(vec3(_656, _657, _658), vec3(_1086 * _1078, _1086 * _1079, _1086 * _1080)) + 1.0) * 0.5;
        float _3718 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1103 = sqrt(((_1079 * _1079) + (_1078 * _1078)) + (_1080 * _1080)) / (_991 + 9.9999997473787516355514526367188e-06);
        float _3729 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _1105 = _1104 * 2.0;
        float _1109 = (1.0 - _1104) / (_1104 + 1.0);
        float _3740 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1119 = ((((1.0 - _1110) * (_1105 + 2.0)) * exp2(log2(isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * (_1105 + 1.0))) + _1110) * _991;
        _1127 = _958;
        _1129 = _957;
        _1130 = _956;
        _1131 = _968;
        _1132 = _967;
        _1133 = _966;
        _1134 = _978;
        _1135 = _977;
        _1136 = _976;
        _1137 = _991;
        _1138 = _990;
        _1139 = _989;
        _1140 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0)));
        _1141 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0)));
        _1142 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)));
    }
    else
    {
        _1127 = _1128;
        _1129 = _1128;
        _1130 = _1128;
        _1131 = _1128;
        _1132 = _1128;
        _1133 = _1128;
        _1134 = _1128;
        _1135 = _1128;
        _1136 = _1128;
        _1137 = _1128;
        _1138 = _1128;
        _1139 = _1128;
        _1140 = 0.0;
        _1141 = 0.0;
        _1142 = 0.0;
    }
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1168 = fma(_826, cbModelParam._m0[30u].z, fma(_822, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _818));
        float _1172 = fma(_826, cbModelParam._m0[31u].z, fma(_822, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _818));
        float _1176 = fma(_826, cbModelParam._m0[32u].z, fma(_822, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _818));
        float _1199 = _818 + _656;
        float _1200 = _822 + _657;
        float _1201 = _826 + _658;
        float _1211 = fma(_1201, cbModelParam._m0[30u].z, fma(_1200, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1199)) - _1168;
        float _1212 = fma(_1201, cbModelParam._m0[31u].z, fma(_1200, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1199)) - _1172;
        float _1213 = fma(_1201, cbModelParam._m0[32u].z, fma(_1200, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1199)) - _1176;
        float _1217 = inversesqrt(dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213)));
        float _1230 = ((_1217 * _1211) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1168 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1231 = ((_1217 * _1212) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1172 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1232 = ((_1217 * _1213) / cbModelParam._m0[35u].z) + ((((((_1176 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        float _1267 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1234.x + (-0.5));
        float _1269 = _1267 * (_1234.y + (-0.5));
        float _1270 = _1267 * (_1234.z + (-0.5));
        float _1277 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1241.x + (-0.5));
        float _1279 = _1277 * (_1241.y + (-0.5));
        float _1280 = _1277 * (_1241.z + (-0.5));
        float _1287 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1248.x + (-0.5));
        float _1289 = _1287 * (_1248.y + (-0.5));
        float _1290 = _1287 * (_1248.z + (-0.5));
        float _1297 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1255.x + (-0.5));
        float _1299 = _1297 * (_1255.y + (-0.5));
        float _1300 = _1297 * (_1255.z + (-0.5));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = _1268 * 0.5;
        float _1305 = _1278 * 0.5;
        float _1306 = _1288 * 0.5;
        float _1307 = dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306));
        float _1312 = (_1307 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1307);
        float _1320 = (dot(vec3(_656, _657, _658), vec3(_1312 * _1304, _1312 * _1305, _1312 * _1306)) + 1.0) * 0.5;
        float _3781 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1329 = sqrt(((_1305 * _1305) + (_1304 * _1304)) + (_1306 * _1306)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _3792 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _3803 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0))) * (_1331 + 1.0))) + _1336) * _1301;
        float _1346 = _1269 * 0.5;
        float _1347 = _1279 * 0.5;
        float _1348 = _1289 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1362 = (dot(vec3(_656, _657, _658), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _3814 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1371 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _3825 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _3836 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * (_1373 + 1.0))) + _1378) * _1302;
        float _1388 = _1270 * 0.5;
        float _1389 = _1280 * 0.5;
        float _1390 = _1290 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1404 = (dot(vec3(_656, _657, _658), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _3847 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1413 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _3858 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _3869 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * (_1415 + 1.0))) + _1420) * _1303;
        _1437 = _1270;
        _1438 = _1269;
        _1439 = _1268;
        _1440 = _1280;
        _1441 = _1279;
        _1442 = _1278;
        _1443 = _1290;
        _1444 = _1289;
        _1445 = _1288;
        _1446 = _1303;
        _1447 = _1302;
        _1448 = _1301;
        _1449 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
        _1450 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
        _1451 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
    }
    else
    {
        _1437 = _1128;
        _1438 = _1128;
        _1439 = _1128;
        _1440 = _1128;
        _1441 = _1128;
        _1442 = _1128;
        _1443 = _1128;
        _1444 = _1128;
        _1445 = _1128;
        _1446 = _1128;
        _1447 = _1128;
        _1448 = _1128;
        _1449 = 0.0;
        _1450 = 0.0;
        _1451 = 0.0;
    }
    float _1461 = (cbModelParam._m0[1u].x * (_1449 - _1140)) + _1140;
    float _1462 = (cbModelParam._m0[1u].x * (_1450 - _1141)) + _1141;
    float _1463 = (cbModelParam._m0[1u].x * (_1451 - _1142)) + _1142;
    float _1484 = fma(_1463, cbSceneParam._m0[89u].z, fma(_1462, cbSceneParam._m0[89u].y, _1461 * cbSceneParam._m0[89u].x));
    float _1487 = fma(_1463, cbSceneParam._m0[90u].z, fma(_1462, cbSceneParam._m0[90u].y, _1461 * cbSceneParam._m0[90u].x));
    float _1490 = fma(_1463, cbSceneParam._m0[91u].z, fma(_1462, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1461));
    float _1505 = _765 * 0.5;
    float _1506 = _766 * 0.5;
    float _1507 = _767 * 0.5;
    float _1508 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1439, _1442, _1445, _1448));
    float _1511 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1438, _1441, _1444, _1447));
    float _1514 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1437, _1440, _1443, _1446));
    float _1548;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1521 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1127, _1131, _1134, _1137));
        float _1525 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1129, _1132, _1135, _1138));
        float _1529 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1130, _1133, _1136, _1139));
        float _1536 = dot(vec4(cbModelParam._m0[39u]), vec4(_1505, _1506, _1507, 1.0));
        _1548 = dot(vec3(isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)), isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)), isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1536) ? 0.0 : (isnan(0.0) ? _1536 : max(0.0, _1536))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1548 = 1.0;
    }
    float _1559;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1550 = dot(vec4(cbModelParam._m0[40u]), vec4(_1505, _1506, _1507, 1.0));
        _1559 = dot(vec3(isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)), isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)), isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1550) ? 0.0 : (isnan(0.0) ? _1550 : max(0.0, _1550))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1559 = 1.0;
    }
    float _1563 = (_1559 * cbModelParam._m0[1u].x) + (_1548 * (1.0 - cbModelParam._m0[1u].x));
    float _1573 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _659);
    float _1574 = isnan(_1573) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1573 : min(cbModelParam._m0[25u].z, _1573));
    float _1655;
    float _1657;
    float _1659;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1622 = fma(_826, cbModelParam._m0[13u].z, fma(_822, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _818)) + cbModelParam._m0[13u].w;
        float _1626 = fma(_826, cbModelParam._m0[14u].z, fma(_822, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _818)) + cbModelParam._m0[14u].w;
        float _1630 = fma(_826, cbModelParam._m0[15u].z, fma(_822, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _818)) + cbModelParam._m0[15u].w;
        float _1633 = fma(_767, cbModelParam._m0[13u].z, fma(_766, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _765));
        float _1636 = fma(_767, cbModelParam._m0[14u].z, fma(_766, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _765));
        float _1639 = fma(_767, cbModelParam._m0[15u].z, fma(_766, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _765));
        float _1667;
        if (_1633 > 0.0)
        {
            _1667 = abs((1.0 - _1622) / _1633);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1622 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1667 = frontier_phi_38_36_ladder;
        }
        float _1835;
        if (_1636 > 0.0)
        {
            _1835 = abs((1.0 - _1626) / _1636);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1636 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1626 + 1.0) / _1636);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _1835 = frontier_phi_47_43_ladder;
        }
        float _2279;
        if (_1639 > 0.0)
        {
            _2279 = abs((1.0 - _1630) / _1639);
        }
        else
        {
            float frontier_phi_59_54_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_59_54_ladder = abs((_1630 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_59_54_ladder = 5000.0;
            }
            _2279 = frontier_phi_59_54_ladder;
        }
        float _2281 = isnan(_1835) ? _1667 : (isnan(_1667) ? _1835 : min(_1667, _1835));
        float _2282 = isnan(_2279) ? _2281 : (isnan(_2281) ? _2279 : min(_2281, _2279));
        float _2286 = (_2282 * _1633) + _1622;
        float _2287 = (_2282 * _1636) + _1626;
        float _2288 = (_2282 * _1639) + _1630;
        float _2289 = _2282 * 9.9999997473787516355514526367188e-05;
        float _2291 = (-1.0) - _2289;
        float _2293 = _2289 + 1.0;
        float frontier_phi_37_59_ladder;
        float frontier_phi_37_59_ladder_1;
        float frontier_phi_37_59_ladder_2;
        if ((_2288 > _2293) || ((_2288 < _2291) || ((_2287 > _2293) || ((_2287 < _2291) || ((_2286 < _2291) || (_2286 > _2293))))))
        {
            frontier_phi_37_59_ladder = 0.0;
            frontier_phi_37_59_ladder_1 = 0.0;
            frontier_phi_37_59_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2538 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2288, cbModelParam._m0[9u].z, fma(_2287, cbModelParam._m0[9u].y, _2286 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2288, cbModelParam._m0[10u].z, fma(_2287, cbModelParam._m0[10u].y, _2286 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2288, cbModelParam._m0[11u].z, fma(_2287, cbModelParam._m0[11u].y, _2286 * cbModelParam._m0[11u].x))), _1574);
            frontier_phi_37_59_ladder = _2538.z * cbModelParam._m0[1u].y;
            frontier_phi_37_59_ladder_1 = _2538.y * cbModelParam._m0[1u].y;
            frontier_phi_37_59_ladder_2 = _2538.x * cbModelParam._m0[1u].y;
        }
        _1655 = frontier_phi_37_59_ladder_2;
        _1657 = frontier_phi_37_59_ladder_1;
        _1659 = frontier_phi_37_59_ladder;
    }
    else
    {
        vec4 _1643 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_765, _766, _767), _1574);
        _1655 = _1643.x * cbModelParam._m0[1u].y;
        _1657 = _1643.y * cbModelParam._m0[1u].y;
        _1659 = _1643.z * cbModelParam._m0[1u].y;
    }
    float _1663 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _659);
    float _1664 = isnan(_1663) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1663 : min(cbModelParam._m0[25u].w, _1663));
    float _1752;
    float _1754;
    float _1756;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1716 = fma(_826, cbModelParam._m0[21u].z, fma(_822, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _818)) + cbModelParam._m0[21u].w;
        float _1720 = fma(_826, cbModelParam._m0[22u].z, fma(_822, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _818)) + cbModelParam._m0[22u].w;
        float _1724 = fma(_826, cbModelParam._m0[23u].z, fma(_822, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _818)) + cbModelParam._m0[23u].w;
        float _1727 = fma(_767, cbModelParam._m0[21u].z, fma(_766, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _765));
        float _1730 = fma(_767, cbModelParam._m0[22u].z, fma(_766, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _765));
        float _1733 = fma(_767, cbModelParam._m0[23u].z, fma(_766, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _765));
        float _1840;
        if (_1727 > 0.0)
        {
            _1840 = abs((1.0 - _1716) / _1727);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1716 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _1840 = frontier_phi_49_45_ladder;
        }
        float _2306;
        if (_1730 > 0.0)
        {
            _2306 = abs((1.0 - _1720) / _1730);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1720 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2306 = frontier_phi_61_56_ladder;
        }
        float _2659;
        if (_1733 > 0.0)
        {
            _2659 = abs((1.0 - _1724) / _1733);
        }
        else
        {
            float frontier_phi_73_68_ladder;
            if (_1733 < 0.0)
            {
                frontier_phi_73_68_ladder = abs((_1724 + 1.0) / _1733);
            }
            else
            {
                frontier_phi_73_68_ladder = 5000.0;
            }
            _2659 = frontier_phi_73_68_ladder;
        }
        float _2661 = isnan(_2306) ? _1840 : (isnan(_1840) ? _2306 : min(_1840, _2306));
        float _2662 = isnan(_2659) ? _2661 : (isnan(_2661) ? _2659 : min(_2661, _2659));
        float _2666 = (_2662 * _1727) + _1716;
        float _2667 = (_2662 * _1730) + _1720;
        float _2668 = (_2662 * _1733) + _1724;
        float _2669 = _2662 * 9.9999997473787516355514526367188e-05;
        float _2670 = (-1.0) - _2669;
        float _2672 = _2669 + 1.0;
        float frontier_phi_46_73_ladder;
        float frontier_phi_46_73_ladder_1;
        float frontier_phi_46_73_ladder_2;
        if ((_2668 > _2672) || ((_2668 < _2670) || ((_2667 > _2672) || ((_2667 < _2670) || ((_2666 < _2670) || (_2666 > _2672))))))
        {
            frontier_phi_46_73_ladder = 0.0;
            frontier_phi_46_73_ladder_1 = 0.0;
            frontier_phi_46_73_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2789 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2668, cbModelParam._m0[17u].z, fma(_2667, cbModelParam._m0[17u].y, _2666 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2668, cbModelParam._m0[18u].z, fma(_2667, cbModelParam._m0[18u].y, _2666 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2668, cbModelParam._m0[19u].z, fma(_2667, cbModelParam._m0[19u].y, _2666 * cbModelParam._m0[19u].x))), _1664);
            frontier_phi_46_73_ladder = _2789.z * cbModelParam._m0[1u].z;
            frontier_phi_46_73_ladder_1 = _2789.y * cbModelParam._m0[1u].z;
            frontier_phi_46_73_ladder_2 = _2789.x * cbModelParam._m0[1u].z;
        }
        _1752 = frontier_phi_46_73_ladder_2;
        _1754 = frontier_phi_46_73_ladder_1;
        _1756 = frontier_phi_46_73_ladder;
    }
    else
    {
        vec4 _1736 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_765, _766, _767), _1664);
        _1752 = _1736.x * cbModelParam._m0[1u].z;
        _1754 = _1736.y * cbModelParam._m0[1u].z;
        _1756 = _1736.z * cbModelParam._m0[1u].z;
    }
    float _1768 = ((((1.0 - _786) * ((_773 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_786 * _773)) * _757;
    float _1769 = _1768 * ((cbModelParam._m0[1u].w * (_1752 - _1655)) + _1655);
    float _1770 = _1768 * ((cbModelParam._m0[1u].w * (_1754 - _1657)) + _1657);
    float _1771 = _1768 * ((cbModelParam._m0[1u].w * (_1756 - _1659)) + _1659);
    float _1774 = fma(_1771, cbSceneParam._m0[89u].z, fma(_1770, cbSceneParam._m0[89u].y, _1769 * cbSceneParam._m0[89u].x));
    float _1777 = fma(_1771, cbSceneParam._m0[90u].z, fma(_1770, cbSceneParam._m0[90u].y, _1769 * cbSceneParam._m0[90u].x));
    float _1780 = fma(_1771, cbSceneParam._m0[91u].z, fma(_1770, cbSceneParam._m0[91u].y, _1769 * cbSceneParam._m0[91u].x));
    float _1814 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1818 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1822 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1826 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1827 = _1814 / _1826;
    float _1828 = _1818 / _1826;
    float _1829 = _1822 / _1826;
    float _1976;
    float _1977;
    float _1978;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1856 = ((uint(_1829 > cbSceneParam._m0[59u].y) + uint(_1829 > cbSceneParam._m0[59u].x)) + uint(_1829 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1857 = _1856 + 43u;
        uint _1865 = _1856 + 44u;
        uint _1873 = _1856 + 45u;
        uint _1881 = _1856 + 46u;
        float _1892 = fma(_1826, cbSceneParam._m0[_1857].w, fma(_1822, cbSceneParam._m0[_1857].z, fma(_1818, cbSceneParam._m0[_1857].y, _1814 * cbSceneParam._m0[_1857].x)));
        float _1896 = fma(_1826, cbSceneParam._m0[_1865].w, fma(_1822, cbSceneParam._m0[_1865].z, fma(_1818, cbSceneParam._m0[_1865].y, _1814 * cbSceneParam._m0[_1865].x)));
        float _1904 = fma(_1826, cbSceneParam._m0[_1881].w, fma(_1822, cbSceneParam._m0[_1881].z, fma(_1818, cbSceneParam._m0[_1881].y, _1814 * cbSceneParam._m0[_1881].x)));
        float _1909 = cbSceneParam._m0[33u].z * _1904;
        float _1911 = cbSceneParam._m0[33u].w * _1904;
        float _1914 = fma(_1826, cbSceneParam._m0[_1873].w, fma(_1822, cbSceneParam._m0[_1873].z, fma(_1818, cbSceneParam._m0[_1873].y, _1814 * cbSceneParam._m0[_1873].x))) / _1904;
        float _1962 = (cbSceneParam._m0[33u].x - sqrt(((_1828 * _1828) + (_1827 * _1827)) + (_1829 * _1829))) * cbSceneParam._m0[33u].y;
        float _3995 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
        float _1969 = (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1909 + _1892) / _1904, (_1911 + _1896) / _1904), _1914), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1911 + _1892) / _1904, (_1896 - _1909) / _1904), _1914), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1892 - _1909) / _1904, (_1896 - _1911) / _1904), _1914), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1892 - _1911) / _1904, (_1909 + _1896) / _1904), _1914), 0.0)).x), vec4(0.25)));
        _1976 = 1.0 - (_1969 * cbSceneParam._m0[34u].x);
        _1977 = 1.0 - (_1969 * cbSceneParam._m0[34u].y);
        _1978 = 1.0 - (_1969 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1976 = 1.0;
        _1977 = 1.0;
        _1978 = 1.0;
    }
    float _2042;
    float _2044;
    float _2046;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2030 = fma(_1826, cbSceneParam._m0[63u].w, fma(_1822, cbSceneParam._m0[63u].z, fma(_1818, cbSceneParam._m0[63u].y, _1814 * cbSceneParam._m0[63u].x)));
        float _2031 = fma(_1826, cbSceneParam._m0[60u].w, fma(_1822, cbSceneParam._m0[60u].z, fma(_1818, cbSceneParam._m0[60u].y, _1814 * cbSceneParam._m0[60u].x))) / _2030;
        float _2032 = fma(_1826, cbSceneParam._m0[61u].w, fma(_1822, cbSceneParam._m0[61u].z, fma(_1818, cbSceneParam._m0[61u].y, _1814 * cbSceneParam._m0[61u].x))) / _2030;
        float frontier_phi_58_57_ladder;
        float frontier_phi_58_57_ladder_1;
        float frontier_phi_58_57_ladder_2;
        if ((((_2031 >= cbSceneParam._m0[64u].x) && (_2032 >= cbSceneParam._m0[64u].y)) && (_2031 <= cbSceneParam._m0[64u].z)) && (_2032 <= cbSceneParam._m0[64u].w))
        {
            float _2319 = fma(_1826, cbSceneParam._m0[62u].w, fma(_1822, cbSceneParam._m0[62u].z, fma(_1818, cbSceneParam._m0[62u].y, _1814 * cbSceneParam._m0[62u].x))) / _2030;
            float _2323 = isnan(cbSceneParam._m0[41u].w) ? _2319 : (isnan(_2319) ? cbSceneParam._m0[41u].w : max(_2319, cbSceneParam._m0[41u].w));
            float _2366 = (cbSceneParam._m0[33u].x - sqrt(((_1828 * _1828) + (_1827 * _1827)) + (_1829 * _1829))) * cbSceneParam._m0[33u].y;
            float _4011 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
            float _2373 = (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2031, cbSceneParam._m0[33u].w + _2032), _2323), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2031, _2032 - cbSceneParam._m0[33u].z), _2323), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2031 - cbSceneParam._m0[33u].z, _2032 - cbSceneParam._m0[33u].w), _2323), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2031 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2032), _2323), 0.0)).x), vec4(0.25)));
            float _2377 = 1.0 - (_2373 * cbSceneParam._m0[34u].x);
            float _2378 = 1.0 - (_2373 * cbSceneParam._m0[34u].y);
            float _2379 = 1.0 - (_2373 * cbSceneParam._m0[34u].z);
            frontier_phi_58_57_ladder = isnan(_2379) ? _1978 : (isnan(_1978) ? _2379 : min(_1978, _2379));
            frontier_phi_58_57_ladder_1 = isnan(_2378) ? _1977 : (isnan(_1977) ? _2378 : min(_1977, _2378));
            frontier_phi_58_57_ladder_2 = isnan(_2377) ? _1976 : (isnan(_1976) ? _2377 : min(_1976, _2377));
        }
        else
        {
            frontier_phi_58_57_ladder = _1978;
            frontier_phi_58_57_ladder_1 = _1977;
            frontier_phi_58_57_ladder_2 = _1976;
        }
        _2042 = frontier_phi_58_57_ladder_2;
        _2044 = frontier_phi_58_57_ladder_1;
        _2046 = frontier_phi_58_57_ladder;
    }
    else
    {
        _2042 = _1976;
        _2044 = _1977;
        _2046 = _1978;
    }
    uvec4 _2051 = floatBitsToUint(cbInstanceData._m0[_731 + 5u]);
    uint _2053 = _2051.x * 14u;
    uint _2054 = _2053 + 13u;
    float _2059 = _757 + (-1.0);
    float _2062 = (cbLight._m0[_2054].x * _2059) + 1.0;
    float _2063 = (cbLight._m0[_2054].y * _2059) + 1.0;
    uint _2064 = _2053 + 5u;
    float _2070 = isnan(1.0) ? _2063 : (isnan(_2063) ? 1.0 : min(_2063, 1.0));
    uint _2074 = _2053 + 4u;
    float _2083 = isnan(1.0) ? _2062 : (isnan(_2062) ? 1.0 : min(_2062, 1.0));
    uint _2087 = _2053 | 1u;
    float _2098 = dot(vec3(cbLight._m0[_2053].xyz), vec3(_656, _657, _658));
    float _2101 = dot(vec3(cbLight._m0[_2087].xyz), vec3(_656, _657, _658));
    float _4047 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _4058 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2106 = (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * 0.3183098733425140380859375;
    float _2108 = (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * 0.3183098733425140380859375;
    float _2115 = ((cbLight._m0[_2064].x * _2070) * _2108) + (((cbLight._m0[_2074].x * _2042) * _2083) * _2106);
    float _2116 = ((_2070 * cbLight._m0[_2064].y) * _2108) + (((cbLight._m0[_2074].y * _2044) * _2083) * _2106);
    float _2117 = ((_2070 * cbLight._m0[_2064].z) * _2108) + (((cbLight._m0[_2074].z * _2046) * _2083) * _2106);
    uint _2119 = _2053 + 8u;
    float _2132 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2053].w)) * _659) * 0.949999988079071044921875);
    float _2133 = _2132 * _2132;
    float _2134 = cbLight._m0[_2053].x + _683;
    float _2135 = cbLight._m0[_2053].y + _684;
    float _2136 = cbLight._m0[_2053].z + _685;
    float _2140 = inversesqrt(dot(vec3(_2134, _2135, _2136), vec3(_2134, _2135, _2136)));
    float _2141 = _2140 * _2134;
    float _2142 = _2140 * _2135;
    float _2143 = _2140 * _2136;
    float _2144 = dot(vec3(_656, _657, _658), vec3(cbLight._m0[_2053].xyz));
    float _4069 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2147 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _4080 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _2148 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _2149 = dot(vec3(_656, _657, _658), vec3(_2141, _2142, _2143));
    float _4091 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2152 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _2153 = dot(vec3(cbLight._m0[_2053].xyz), vec3(_2141, _2142, _2143));
    float _4102 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2157 = _2133 * _2133;
    float _2161 = ((_2152 * _2152) * (_2157 + (-1.0))) + 1.0;
    float _2172 = (exp2(log2(1.0 - (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2173 = 1.0 - _2133;
    float _2184 = (0.5 / (((_2148 * ((_2147 * _2173) + _2133)) + 9.9999999392252902907785028219223e-09) + (((_2148 * _2173) + _2133) * _2147))) * _2147;
    float _4113 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2186 = (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_2157 / ((_2161 * _2161) * 3.141590118408203125));
    uint _2200 = _2053 + 9u;
    float _2211 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2087].w)) * _659) * 0.949999988079071044921875);
    float _2212 = _2211 * _2211;
    float _2213 = cbLight._m0[_2087].x + _683;
    float _2214 = cbLight._m0[_2087].y + _684;
    float _2215 = cbLight._m0[_2087].z + _685;
    float _2219 = inversesqrt(dot(vec3(_2213, _2214, _2215), vec3(_2213, _2214, _2215)));
    float _2220 = _2219 * _2213;
    float _2221 = _2219 * _2214;
    float _2222 = _2219 * _2215;
    float _2223 = dot(vec3(_656, _657, _658), vec3(cbLight._m0[_2087].xyz));
    float _4124 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2226 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
    float _2227 = dot(vec3(_656, _657, _658), vec3(_2220, _2221, _2222));
    float _4135 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2230 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _2231 = dot(vec3(cbLight._m0[_2087].xyz), vec3(_2220, _2221, _2222));
    float _4146 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2235 = _2212 * _2212;
    float _2239 = ((_2230 * _2230) * (_2235 + (-1.0))) + 1.0;
    float _2248 = (exp2(log2(1.0 - (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2249 = 1.0 - _2212;
    float _2259 = (0.5 / (((_2148 * ((_2226 * _2249) + _2212)) + 9.9999999392252902907785028219223e-09) + (((_2148 * _2249) + _2212) * _2226))) * _2226;
    float _4157 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2261 = (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_2235 / ((_2239 * _2239) * 3.141590118408203125));
    float _2271 = (((_2248 * cbLight._m0[_2200].x) * _2261) * _2070) + ((((cbLight._m0[_2119].x * _2042) * _2172) * _2186) * _2083);
    float _2272 = (((_2248 * cbLight._m0[_2200].y) * _2261) * _2070) + ((((cbLight._m0[_2119].y * _2044) * _2172) * _2186) * _2083);
    float _2273 = (((_2248 * cbLight._m0[_2200].z) * _2261) * _2070) + ((((cbLight._m0[_2119].z * _2046) * _2172) * _2186) * _2083);
    float _2436;
    float _2438;
    float _2440;
    float _2442;
    float _2444;
    float _2446;
    if (_2051.y == 0u)
    {
        uvec4 _2391 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2392 = _2391.x;
        uint _2403 = uint((float(_2391.y) * floor(float(uint(cbSceneParam._m0[85u].y * _692) / _2392))) + floor(float(uint(cbSceneParam._m0[85u].x * _691) / _2392)));
        float _2413 = (log2(_1829 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2414 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        uint _2417 = uint(isnan(14.0) ? _2414 : (isnan(_2414) ? 14.0 : min(_2414, 14.0)));
        uvec4 _2422 = texelFetch(g_lightClusterGridBuffer, int(((_2417 << 2u) + (_2403 << 6u)) >> 2u));
        uint _2423 = _2422.x;
        uint _2424 = _2391.z;
        float _2547;
        float _2549;
        float _2551;
        float _2553;
        float _2555;
        float _2557;
        if (((((1u << ((_2424 >> 4u) & 15u)) + 4294967295u) & _2423) == 0u) || ((_2424 & 240u) == 0u))
        {
            _2547 = 0.0;
            _2549 = 0.0;
            _2551 = 0.0;
            _2553 = 0.0;
            _2555 = 0.0;
            _2557 = 0.0;
        }
        else
        {
            float _2548;
            float _2550;
            float _2552;
            float _2554;
            float _2556;
            float _2558;
            float _2717 = 0.0;
            float _2718 = 0.0;
            float _2719 = 0.0;
            float _2720 = 0.0;
            float _2721 = 0.0;
            float _2722 = 0.0;
            uint _2723 = 0u;
            uint _2732;
            bool _2733;
            for (;;)
            {
                _2732 = texelFetch(g_lightClassification, int((((_2417 << 5u) + (_2403 << 9u)) + (_2723 << 2u)) >> 2u)).x;
                _2733 = _2732 == 0u;
                float frontier_phi_82_pred;
                float frontier_phi_82_pred_1;
                float frontier_phi_82_pred_2;
                float frontier_phi_82_pred_3;
                float frontier_phi_82_pred_4;
                float frontier_phi_82_pred_5;
                if (_2733)
                {
                    frontier_phi_82_pred = _2717;
                    frontier_phi_82_pred_1 = _2722;
                    frontier_phi_82_pred_2 = _2721;
                    frontier_phi_82_pred_3 = _2720;
                    frontier_phi_82_pred_4 = _2719;
                    frontier_phi_82_pred_5 = _2718;
                }
                else
                {
                    float _2862;
                    float _2863;
                    float _2864;
                    float _2865;
                    float _2866;
                    float _2867;
                    uint _2868;
                    _2862 = _2717;
                    _2863 = _2718;
                    _2864 = _2719;
                    _2865 = _2720;
                    _2866 = _2721;
                    _2867 = _2722;
                    _2868 = _2732;
                    float _2794;
                    float _2795;
                    float _2796;
                    float _2797;
                    float _2798;
                    float _2799;
                    for (;;)
                    {
                        uint _2872 = uint(findLSB(_2868)) + (_2723 << 5u);
                        uint _2869 = (_2868 + 4294967295u) & _2868;
                        uint _2874 = _2872 * 48u;
                        vec4 _2888 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2874)).x, texelFetch(g_PointLightRenderingBuffer, int(_2874 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2874 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2874 + 3u)).x));
                        uint _2894 = (_2872 * 48u) + 4u;
                        vec4 _2907 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2894)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 3u)).x));
                        uint _2913 = (_2872 * 48u) + 8u;
                        vec3 _2924 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2913)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 2u)).x));
                        float _2928 = _2888.x - _1827;
                        float _2929 = _2888.y - _1828;
                        float _2930 = _2888.z - _1829;
                        float _2931 = dot(vec3(_2928, _2929, _2930), vec3(_2928, _2929, _2930));
                        float _2934 = inversesqrt(_2931);
                        float _2935 = _2934 * _2928;
                        float _2936 = _2934 * _2929;
                        float _2937 = _2934 * _2930;
                        float _2938 = dot(vec3(_712, _715, _718), vec3(_2935, _2936, _2937));
                        float _2943 = 1.0 - (_2931 * _2888.w);
                        float _4178 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
                        float _2944 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
                        float _2945 = sqrt(_2931) * _2907.w;
                        float _2948 = 1.39999997615814208984375 / (_2945 + 1.39999997615814208984375);
                        float _2949 = _2948 * _2948;
                        float _2952 = ((1.0 - _2949) * _2938) + _2949;
                        float _2955 = _2945 * _2945;
                        float _2959 = ((isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0))) * _2944) / ((_2955 * 0.699999988079071044921875) + 1.0);
                        float _2963 = (-0.0) - _1827;
                        float _2964 = (-0.0) - _1828;
                        float _2965 = (-0.0) - _1829;
                        float _2969 = inversesqrt(dot(vec3(_2963, _2964, _2965), vec3(_2963, _2964, _2965)));
                        float _2970 = _2969 * _2963;
                        float _2971 = _2969 * _2964;
                        float _2972 = _2969 * _2965;
                        float _2979 = exp2(log2(1.0 / ((_2955 * 3.5) + 5.0)) * 0.25);
                        float _2980 = 1.0 - _773;
                        float _2987 = sqrt(1.0 - ((1.0 - (_2980 * _2980)) * (1.0 - (_2979 * _2979))));
                        float _2988 = _2987 * _2987;
                        float _2989 = _2988 * _2988;
                        float _2990 = _2970 + _2935;
                        float _2991 = _2971 + _2936;
                        float _2992 = _2972 + _2937;
                        float _2996 = inversesqrt(dot(vec3(_2990, _2991, _2992), vec3(_2990, _2991, _2992)));
                        float _3000 = dot(vec3(_712, _715, _718), vec3(_2970, _2971, _2972));
                        float _4194 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                        float _3003 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
                        float _3004 = dot(vec3(_712, _715, _718), vec3(_2996 * _2990, _2996 * _2991, _2996 * _2992));
                        float _4205 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                        float _3007 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
                        float _3011 = ((_3007 * _3007) * (_2989 + (-1.0))) + 1.0;
                        float _3012 = _2948 * _2988;
                        float _3013 = _3012 * _3012;
                        float _3016 = ((1.0 - _3013) * _2938) + _3013;
                        float _4216 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                        float _3017 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
                        float _3018 = 1.0 - _2988;
                        float _3028 = (0.5 / (((_3017 * ((_3003 * _3018) + _2988)) + 9.9999999392252902907785028219223e-09) + (((_3017 * _3018) + _2988) * _3003))) * _3017;
                        float _4227 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                        float _3039 = (((_2989 * 3.1415927410125732421875) * (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0)))) / ((_3011 * _3011) * ((_2955 * 2.1991131305694580078125) + 3.141590118408203125))) * _2944;
                        _2797 = (_2959 * _2907.x) + _2865;
                        _2798 = (_2959 * _2907.y) + _2866;
                        _2799 = (_2959 * _2907.z) + _2867;
                        _2794 = (_3039 * _2924.x) + _2862;
                        _2795 = (_3039 * _2924.y) + _2863;
                        _2796 = (_3039 * _2924.z) + _2864;
                        if (_2869 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2862 = _2794;
                            _2863 = _2795;
                            _2864 = _2796;
                            _2865 = _2797;
                            _2866 = _2798;
                            _2867 = _2799;
                            _2868 = _2869;
                        }
                    }
                    frontier_phi_82_pred = _2794;
                    frontier_phi_82_pred_1 = _2799;
                    frontier_phi_82_pred_2 = _2798;
                    frontier_phi_82_pred_3 = _2797;
                    frontier_phi_82_pred_4 = _2796;
                    frontier_phi_82_pred_5 = _2795;
                }
                _2548 = frontier_phi_82_pred;
                _2558 = frontier_phi_82_pred_1;
                _2556 = frontier_phi_82_pred_2;
                _2554 = frontier_phi_82_pred_3;
                _2552 = frontier_phi_82_pred_4;
                _2550 = frontier_phi_82_pred_5;
                uint _2724 = _2723 + 1u;
                if (_2724 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2717 = _2548;
                    _2718 = _2550;
                    _2719 = _2552;
                    _2720 = _2554;
                    _2721 = _2556;
                    _2722 = _2558;
                    _2723 = _2724;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2547 = _2548;
            _2549 = _2550;
            _2551 = _2552;
            _2553 = _2554;
            _2555 = _2556;
            _2557 = _2558;
        }
        uvec4 _2561 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2562 = _2561.z;
        uint _2564 = (_2562 >> 8u) & 15u;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        float _2695;
        if (((4294967295u << _2564) & _2423) == 0u)
        {
            _2685 = _2547;
            _2687 = _2549;
            _2689 = _2551;
            _2691 = _2553;
            _2693 = _2555;
            _2695 = _2557;
        }
        else
        {
            float _2710 = inversesqrt(dot(vec3(_1827, _1828, _1829), vec3(_1827, _1828, _1829)));
            float _2711 = _2710 * _1827;
            float _2712 = _2710 * _1828;
            float _2713 = _2710 * _1829;
            float frontier_phi_75_76_ladder;
            float frontier_phi_75_76_ladder_1;
            float frontier_phi_75_76_ladder_2;
            float frontier_phi_75_76_ladder_3;
            float frontier_phi_75_76_ladder_4;
            float frontier_phi_75_76_ladder_5;
            if (_2564 < ((_2562 >> 12u) & 15u))
            {
                float _2686;
                float _2688;
                float _2690;
                float _2692;
                float _2694;
                float _2696;
                float _2845 = _2547;
                float _2846 = _2549;
                float _2847 = _2551;
                float _2848 = _2553;
                float _2849 = _2555;
                float _2850 = _2557;
                uint _2851 = _2564;
                uint _2860;
                bool _2861;
                for (;;)
                {
                    _2860 = texelFetch(g_lightClassification, int((((_2417 << 5u) + (_2403 << 9u)) + (_2851 << 2u)) >> 2u)).x;
                    _2861 = _2860 == 0u;
                    float frontier_phi_88_pred;
                    float frontier_phi_88_pred_1;
                    float frontier_phi_88_pred_2;
                    float frontier_phi_88_pred_3;
                    float frontier_phi_88_pred_4;
                    float frontier_phi_88_pred_5;
                    if (_2861)
                    {
                        frontier_phi_88_pred = _2848;
                        frontier_phi_88_pred_1 = _2849;
                        frontier_phi_88_pred_2 = _2850;
                        frontier_phi_88_pred_3 = _2847;
                        frontier_phi_88_pred_4 = _2846;
                        frontier_phi_88_pred_5 = _2845;
                    }
                    else
                    {
                        float _3044;
                        float _3045;
                        float _3046;
                        float _3047;
                        float _3048;
                        float _3049;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3057 = _2845;
                        float _3058 = _2846;
                        float _3059 = _2847;
                        float _3060 = _2848;
                        float _3061 = _2849;
                        float _3062 = _2850;
                        uint _3063 = _2860;
                        uint _3064;
                        vec4 _3089;
                        float _3090;
                        vec4 _3105;
                        vec3 _3117;
                        vec4 _3132;
                        vec4 _3147;
                        float _3193;
                        bool _3194;
                        for (;;)
                        {
                            uint _3074 = ((_2851 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3063));
                            _3064 = (_3063 + 4294967295u) & _3063;
                            uint _3076 = _3074 * 40u;
                            _3089 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3076)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 3u)).x));
                            _3090 = _3089.w;
                            uint _3092 = (_3074 * 40u) + 4u;
                            _3105 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 3u)).x));
                            uint _3107 = (_3074 * 40u) + 8u;
                            _3117 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 2u)).x));
                            uint _3119 = (_3074 * 40u) + 16u;
                            _3132 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 3u)).x));
                            uint _3134 = (_3074 * 40u) + 20u;
                            _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            uint _3149 = (_3074 * 40u) + 24u;
                            vec4 _3162 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3149)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 3u)).x));
                            uint _3168 = (_3074 * 40u) + 28u;
                            vec4 _3181 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 3u)).x));
                            _3193 = fma(_1829, _3181.z, fma(_1828, _3181.y, _3181.x * _1827)) + _3181.w;
                            _3194 = !((fma(_1829, _3162.z, fma(_1828, _3162.y, _3162.x * _1827)) + _3162.w) <= 0.0);
                            float frontier_phi_94_pred;
                            float frontier_phi_94_pred_1;
                            float frontier_phi_94_pred_2;
                            float frontier_phi_94_pred_3;
                            float frontier_phi_94_pred_4;
                            float frontier_phi_94_pred_5;
                            if (_3194)
                            {
                                float _3221 = _3089.x - _1827;
                                float _3222 = _3089.y - _1828;
                                float _3223 = _3089.z - _1829;
                                float _3224 = dot(vec3(_3221, _3222, _3223), vec3(_3221, _3222, _3223));
                                float _3227 = inversesqrt(_3224);
                                float _3228 = _3227 * _3221;
                                float _3229 = _3227 * _3222;
                                float _3230 = _3227 * _3223;
                                float _3234 = 1.0 - (_3224 / (_3090 * _3090));
                                float _4238 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3235 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
                                float _3239 = sqrt(_3224) * _3105.w;
                                float _3241 = 1.39999997615814208984375 / (_3239 + 1.39999997615814208984375);
                                float _3242 = _3241 * _3241;
                                float _3245 = ((1.0 - _3242) * dot(vec3(_3228, _3229, _3230), vec3(_712, _715, _718))) + _3242;
                                float _3248 = _3239 * _3239;
                                float _3252 = (fma(_1829, _3132.z, fma(_1828, _3132.y, _3132.x * _1827)) + _3132.w) / _3193;
                                float _3253 = (fma(_1829, _3147.z, fma(_1828, _3147.y, _3147.x * _1827)) + _3147.w) / _3193;
                                float _3257 = 1.0 - dot(vec2(_3252, _3253), vec2(_3252, _3253));
                                float _4254 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                                float _3258 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
                                float _3259 = _3258 * (((isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0))) * _3235) / ((_3248 * 0.699999988079071044921875) + 1.0));
                                float _3271 = exp2(log2(1.0 / ((_3248 * 3.5) + 5.0)) * 0.25);
                                float _3272 = 1.0 - _773;
                                float _3279 = sqrt(1.0 - ((1.0 - (_3272 * _3272)) * (1.0 - (_3271 * _3271))));
                                float _3280 = _3279 * _3279;
                                float _3281 = _3280 * _3280;
                                float _3282 = _3228 - _2711;
                                float _3283 = _3229 - _2712;
                                float _3284 = _3230 - _2713;
                                float _3288 = inversesqrt(dot(vec3(_3282, _3283, _3284), vec3(_3282, _3283, _3284)));
                                float _3292 = dot(vec3(_712, _715, _718), vec3((-0.0) - _2711, (-0.0) - _2712, (-0.0) - _2713));
                                float _4265 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                                float _3295 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
                                float _3296 = dot(vec3(_712, _715, _718), vec3(_3288 * _3282, _3288 * _3283, _3288 * _3284));
                                float _4276 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3299 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
                                float _3303 = ((_3299 * _3299) * (_3281 + (-1.0))) + 1.0;
                                float _3304 = _3241 * _3280;
                                float _3305 = _3304 * _3304;
                                float _3311 = ((1.0 - _3305) * dot(vec3(_712, _715, _718), vec3(_3228, _3229, _3230))) + _3305;
                                float _4287 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                                float _3312 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
                                float _3313 = 1.0 - _3280;
                                float _3323 = (0.5 / (((_3312 * ((_3295 * _3313) + _3280)) + 9.9999999392252902907785028219223e-09) + (((_3312 * _3313) + _3280) * _3295))) * _3312;
                                float _4298 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                                float _3333 = (_3258 * _3235) * (((_3281 * 3.1415927410125732421875) * (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0)))) / ((_3303 * _3303) * ((_3248 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_94_pred = _3333 * _3117.x;
                                frontier_phi_94_pred_1 = _3333 * _3117.y;
                                frontier_phi_94_pred_2 = _3259 * _3105.z;
                                frontier_phi_94_pred_3 = _3259 * _3105.y;
                                frontier_phi_94_pred_4 = _3259 * _3105.x;
                                frontier_phi_94_pred_5 = _3333 * _3117.z;
                            }
                            else
                            {
                                frontier_phi_94_pred = 0.0;
                                frontier_phi_94_pred_1 = 0.0;
                                frontier_phi_94_pred_2 = 0.0;
                                frontier_phi_94_pred_3 = 0.0;
                                frontier_phi_94_pred_4 = 0.0;
                                frontier_phi_94_pred_5 = 0.0;
                            }
                            _3337 = frontier_phi_94_pred;
                            _3338 = frontier_phi_94_pred_1;
                            _3342 = frontier_phi_94_pred_2;
                            _3341 = frontier_phi_94_pred_3;
                            _3340 = frontier_phi_94_pred_4;
                            _3339 = frontier_phi_94_pred_5;
                            _3047 = _3340 + _3060;
                            _3048 = _3341 + _3061;
                            _3049 = _3342 + _3062;
                            _3044 = _3337 + _3057;
                            _3045 = _3338 + _3058;
                            _3046 = _3339 + _3059;
                            if (_3064 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3057 = _3044;
                                _3058 = _3045;
                                _3059 = _3046;
                                _3060 = _3047;
                                _3061 = _3048;
                                _3062 = _3049;
                                _3063 = _3064;
                                continue;
                            }
                        }
                        frontier_phi_88_pred = _3047;
                        frontier_phi_88_pred_1 = _3048;
                        frontier_phi_88_pred_2 = _3049;
                        frontier_phi_88_pred_3 = _3046;
                        frontier_phi_88_pred_4 = _3045;
                        frontier_phi_88_pred_5 = _3044;
                    }
                    _2692 = frontier_phi_88_pred;
                    _2694 = frontier_phi_88_pred_1;
                    _2696 = frontier_phi_88_pred_2;
                    _2690 = frontier_phi_88_pred_3;
                    _2688 = frontier_phi_88_pred_4;
                    _2686 = frontier_phi_88_pred_5;
                    uint _2852 = _2851 + 1u;
                    if (_2852 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2845 = _2686;
                        _2846 = _2688;
                        _2847 = _2690;
                        _2848 = _2692;
                        _2849 = _2694;
                        _2850 = _2696;
                        _2851 = _2852;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_75_76_ladder = _2694;
                frontier_phi_75_76_ladder_1 = _2696;
                frontier_phi_75_76_ladder_2 = _2692;
                frontier_phi_75_76_ladder_3 = _2690;
                frontier_phi_75_76_ladder_4 = _2688;
                frontier_phi_75_76_ladder_5 = _2686;
            }
            else
            {
                frontier_phi_75_76_ladder = _2555;
                frontier_phi_75_76_ladder_1 = _2557;
                frontier_phi_75_76_ladder_2 = _2553;
                frontier_phi_75_76_ladder_3 = _2551;
                frontier_phi_75_76_ladder_4 = _2549;
                frontier_phi_75_76_ladder_5 = _2547;
            }
            _2685 = frontier_phi_75_76_ladder_5;
            _2687 = frontier_phi_75_76_ladder_4;
            _2689 = frontier_phi_75_76_ladder_3;
            _2691 = frontier_phi_75_76_ladder_2;
            _2693 = frontier_phi_75_76_ladder;
            _2695 = frontier_phi_75_76_ladder_1;
        }
        float _2700 = isnan(1.0) ? _757 : (isnan(_757) ? 1.0 : min(_757, 1.0));
        _2436 = (_2700 * _2691) + _2115;
        _2438 = (_2700 * _2693) + _2116;
        _2440 = (_2700 * _2695) + _2117;
        _2442 = ((_2685 * 0.039999999105930328369140625) * _2700) + _2271;
        _2444 = ((_2687 * 0.039999999105930328369140625) * _2700) + _2272;
        _2446 = ((_2689 * 0.039999999105930328369140625) * _2700) + _2273;
    }
    else
    {
        _2436 = _2115;
        _2438 = _2116;
        _2440 = _2117;
        _2442 = _2271;
        _2444 = _2272;
        _2446 = _2273;
    }
    uint _2452 = _733 + uint(cbMatDynParam._m0[0u].w);
    float _4314 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _4325 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _4336 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _2477 = (((isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_2436 + ((isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))) * _757))) + ((_2442 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1563)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2452].x * ((((((cbMtdParam._m0[10u].x * _285) * _550.x) - _480) * _285) * _604) + _480));
    float _2479 = ((cbInstanceData._m0[_2452].y * ((((((cbMtdParam._m0[10u].y * _285) * _550.y) - _481) * _285) * _604) + _481)) + ((_2444 + ((isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))) * _1563)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (_2438 + ((isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))) * _757)));
    float _2481 = ((cbInstanceData._m0[_2452].z * ((((((cbMtdParam._m0[10u].z * _285) * _550.z) - _482) * _285) * _604) + _482)) + ((_2446 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1563)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_2440 + ((isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))) * _757)));
    uint _2485 = _731 + 6u;
    float _2493 = _691 / cbSceneParam._m0[86u].x;
    float _2494 = _692 / cbSceneParam._m0[86u].y;
    vec4 _2508 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2493, _2494, (log2((isnan(cbSceneParam._m0[77u].w) ? _678 : (isnan(_678) ? cbSceneParam._m0[77u].w : min(_678, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2510 = _2508.x;
    float _2511 = _2508.y;
    float _2512 = _2508.z;
    float _2513 = _2508.w;
    float _2609;
    float _2611;
    float _2613;
    float _2615;
    if (_678 > cbSceneParam._m0[78u].w)
    {
        float _2572 = isnan(_678) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _678 : min(cbSceneParam._m0[80u].w, _678));
        float _2573 = _2572 / _678;
        float _2584 = _2573 * _267;
        float _2585 = _268 * _2573;
        float _2586 = (-0.0) - _2585;
        float _2587 = _2573 * _269;
        float _2589 = (cbSceneParam._m0[77u].w * _2586) / _2572;
        float _2590 = _2589 + cbSceneParam._m0[79u].w;
        float _2591 = cbSceneParam._m0[79u].w - _2585;
        float _2597 = sqrt(((_2584 * _2584) + (_2585 * _2585)) + (_2587 * _2587));
        float _2600 = (1.0 - (cbSceneParam._m0[77u].w / _2572)) * _2597;
        float _2605 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2607 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2807;
        if (abs((_2586 - _2589) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2807 = ((((_2590 > 0.0) ? exp2(_2605 * _2590) : (2.0 - exp2(_2607 * _2590))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2600;
        }
        else
        {
            float _2746 = 1.0 / cbSceneParam._m0[80u].x;
            float _2747 = isnan(_2591) ? _2590 : (isnan(_2590) ? _2591 : max(_2590, _2591));
            float _2748 = isnan(_2591) ? _2590 : (isnan(_2590) ? _2591 : min(_2590, _2591));
            float _2757 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : min(_2747, 0.0));
            float _2758 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : min(_2748, 0.0));
            _2807 = ((abs(_2597 / _2586) * cbSceneParam._m0[80u].y) * ((((_2757 - _2758) * 2.0) - ((exp2(_2605 * (isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0)))) - exp2(_2605 * (isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0))))) * _2746)) - ((exp2(_2607 * _2757) - exp2(_2607 * _2758)) * _2746))) + (_2600 * cbSceneParam._m0[80u].z);
        }
        vec4 _2809 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2493, _2494, 1.0), 0.0);
        float _2818 = exp2((_2807 * (-1.44269502162933349609375)) * (1.0 - _2809.w));
        float _2819 = log2(_2818);
        float _2835 = log2(_2513);
        _2609 = (exp2(_2835 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2819 * cbSceneParam._m0[78u].x)) * _2809.x) / cbSceneParam._m0[78u].x)) + _2510;
        _2611 = (exp2(_2835 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2819 * cbSceneParam._m0[78u].y)) * _2809.y) / cbSceneParam._m0[78u].y)) + _2511;
        _2613 = (exp2(_2835 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2819 * cbSceneParam._m0[78u].z)) * _2809.z) / cbSceneParam._m0[78u].z)) + _2512;
        _2615 = _2818 * _2513;
    }
    else
    {
        _2609 = _2510;
        _2611 = _2511;
        _2613 = _2512;
        _2615 = _2513;
    }
    float _2627 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2628 = _2627 == 3.0;
    float _2629 = log2(_2615);
    float _2636 = exp2(_2629 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0)));
    float _2637 = exp2(_2629 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0)));
    float _2638 = exp2(_2629 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0)));
    float _2647 = (_2627 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2647 * (_2628 ? _2636 : (_2636 + (cbSceneParam._m0[72u].w * _2609)));
    SV_Target.y = _2647 * (_2628 ? _2637 : (_2637 + (cbSceneParam._m0[72u].w * _2611)));
    SV_Target.z = _2647 * (_2628 ? _2638 : (_2638 + (cbSceneParam._m0[72u].w * _2613)));
    SV_Target.w = cbInstanceData._m0[_2485].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2485].w;
}


