#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D M_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1315;
float _3497;
float _3498;
float _3499;
float _3500;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _202 = _201 * _194;
    float _203 = _201 * _195;
    float _204 = _201 * _196;
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = _208 * NORMAL.x;
    float _210 = _208 * NORMAL.y;
    float _211 = _208 * NORMAL.z;
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216 = _215 * TANGENT.x;
    float _217 = _215 * TANGENT.y;
    float _218 = _215 * TANGENT.z;
    float _263 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _273 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _263);
    float _274 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _263);
    float _275 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _263);
    vec4 _288 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _291 = _288.x;
    vec4 _309 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _326 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _291) + cbMtdParam._m0[12u].x) * _309.x;
    float _328 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _291) + cbMtdParam._m0[12u].y) * _309.y;
    float _330 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _291) + cbMtdParam._m0[12u].z) * _309.z;
    vec4 _351 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _387 = cbMtdParam._m0[21u].w + _273;
    float _388 = cbMtdParam._m0[22u].x + _274;
    float _389 = cbMtdParam._m0[22u].y + _275;
    float _403 = (-0.0) - dot(vec3(_387, _388, _389), vec3(_202, _203, _204));
    float _404 = (-0.0) - dot(vec3(_387, _388, _389), vec3(_216, _217, _218));
    float _405 = (-0.0) - dot(vec3(_387, _388, _389), vec3((-0.0) - _209, (-0.0) - _210, (-0.0) - _211));
    float _409 = inversesqrt(dot(vec3(_403, _404, _405), vec3(_403, _404, _405)));
    float _412 = _409 * _405;
    float _413 = (_409 * _403) + ((cbMtdParam._m0[19u].w * _291) * ((_351.x * 2.0) + (-1.0)));
    float _414 = (_409 * _404) + ((cbMtdParam._m0[20u].x * _291) * ((_351.y * 2.0) + (-1.0)));
    float _415 = _413 * cbMtdParam._m0[18u].z;
    float _416 = _414 * cbMtdParam._m0[18u].y;
    float _417 = fract(TEXCOORD.x);
    float _418 = fract(TEXCOORD.y);
    float _424;
    if (_415 > 0.0)
    {
        _424 = (1.0 - _417) / _415;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_415 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _417) / _415;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _424 = frontier_phi_3_2_ladder;
    }
    float _432;
    if (_416 > 0.0)
    {
        _432 = (1.0 - _418) / _416;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_416 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _418) / _416;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _432 = frontier_phi_7_6_ladder;
    }
    bool _434 = _412 > 0.0;
    float _436 = _434 ? (cbMtdParam._m0[15u].x / _412) : 5000.0;
    float _437 = isnan(_432) ? _424 : (isnan(_424) ? _432 : min(_424, _432));
    float _438 = isnan(_436) ? _437 : (isnan(_437) ? _436 : min(_437, _436));
    float _442 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _443 = _417 + (-0.5);
    float _446 = _418 + (-0.5);
    float _449 = ((_438 * _412) + _442) / _442;
    vec4 _473 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_443 + (_438 * _415)) / _449) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_446 + (_438 * _416)) / _449) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _486 = (_473.x * _291) * cbMtdParam._m0[9u].x;
    float _487 = (_473.y * _291) * cbMtdParam._m0[9u].y;
    float _488 = (_473.z * _291) * cbMtdParam._m0[9u].z;
    float _506 = _413 * cbMtdParam._m0[20u].z;
    float _507 = _414 * cbMtdParam._m0[20u].y;
    bool _508 = _506 > 0.0;
    float _513;
    if (_508)
    {
        _513 = (1.0 - _417) / _506;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_506 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _417) / _506;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _513 = frontier_phi_11_10_ladder;
    }
    bool _515 = _507 > 0.0;
    float _520;
    if (_515)
    {
        _520 = (1.0 - _418) / _507;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_507 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _418) / _507;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _520 = frontier_phi_15_14_ladder;
    }
    float _523 = _434 ? (cbMtdParam._m0[16u].x / _412) : 5000.0;
    float _524 = isnan(_520) ? _513 : (isnan(_513) ? _520 : min(_513, _520));
    float _525 = isnan(_523) ? _524 : (isnan(_524) ? _523 : min(_524, _523));
    float _529 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _533 = ((_525 * _412) + _529) / _529;
    float _538 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _540 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _556 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_443 + (_525 * _506)) / _533) + 0.5) + _538) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_446 + (_525 * _507)) / _533) + 0.5) + _540) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _571;
    if (_508)
    {
        _571 = (1.0 - _417) / _506;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_506 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _417) / _506;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _571 = frontier_phi_19_18_ladder;
    }
    float _577;
    if (_515)
    {
        _577 = (1.0 - _418) / _507;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_507 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _418) / _507;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _577 = frontier_phi_23_22_ladder;
    }
    float _579 = isnan(_577) ? _571 : (isnan(_571) ? _577 : min(_571, _577));
    float _580 = isnan(_523) ? _579 : (isnan(_579) ? _523 : min(_579, _523));
    float _587 = ((_580 * _412) + _529) / _529;
    vec4 _608 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_443 + (_580 * _506)) / _587) + 0.5) + _538) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_446 + (_580 * _507)) / _587) + 0.5) + _540) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _610 = _608.x;
    float _620 = (((((cbMtdParam._m0[10u].x * _291) * _556.x) - _486) * _291) * _610) + _486;
    float _621 = (((((cbMtdParam._m0[10u].y * _291) * _556.y) - _487) * _291) * _610) + _487;
    float _622 = (((((cbMtdParam._m0[10u].z * _291) * _556.z) - _488) * _291) * _610) + _488;
    float _636 = _413 * cbMtdParam._m0[21u].x;
    float _637 = _414 * cbMtdParam._m0[20u].w;
    bool _638 = _636 > 0.0;
    float _643;
    if (_638)
    {
        _643 = (1.0 - _417) / _636;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_636 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _417) / _636;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _643 = frontier_phi_27_26_ladder;
    }
    bool _645 = _637 > 0.0;
    float _650;
    if (_645)
    {
        _650 = (1.0 - _418) / _637;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_637 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _418) / _637;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _650 = frontier_phi_31_30_ladder;
    }
    float _653 = _434 ? (cbMtdParam._m0[17u].z / _412) : 5000.0;
    float _654 = isnan(_650) ? _643 : (isnan(_643) ? _650 : min(_643, _650));
    float _655 = isnan(_653) ? _654 : (isnan(_654) ? _653 : min(_654, _653));
    float _659 = cbMtdParam._m0[17u].z * cbMtdParam._m0[15u].z;
    float _663 = ((_655 * _412) + _659) / _659;
    float _668 = cbMtdParam._m0[17u].y - cbMtdParam._m0[21u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    float _670 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    vec4 _687 = texture(sampler2D(M_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_443 + (_655 * _636)) / _663) + 0.5) + _668) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_446 + (_655 * _637)) / _663) + 0.5) + _670) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[7u].w));
    float _702;
    if (_638)
    {
        _702 = (1.0 - _417) / _636;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_636 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _417) / _636;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _702 = frontier_phi_35_34_ladder;
    }
    float _708;
    if (_645)
    {
        _708 = (1.0 - _418) / _637;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_637 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _418) / _637;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _708 = frontier_phi_39_38_ladder;
    }
    float _710 = isnan(_708) ? _702 : (isnan(_702) ? _708 : min(_702, _708));
    float _711 = isnan(_653) ? _710 : (isnan(_710) ? _653 : min(_710, _653));
    float _718 = ((_711 * _412) + _659) / _659;
    vec4 _738 = texture(sampler2D(M_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_443 + (_711 * _636)) / _718) + 0.5) + _668) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_446 + (_711 * _637)) / _718) + 0.5) + _670) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[8u].w));
    float _740 = _738.x;
    float _750 = _291 * 0.1500000059604644775390625;
    float _761 = (_750 * ((_620 - _326) + (((((cbMtdParam._m0[14u].x * _291) * _687.x) - _620) * _291) * _740))) + _326;
    float _762 = (_750 * ((_621 - _328) + (((((cbMtdParam._m0[14u].y * _291) * _687.y) - _621) * _291) * _740))) + _328;
    float _763 = (_750 * ((_622 - _330) + (((((cbMtdParam._m0[14u].z * _291) * _687.z) - _622) * _291) * _740))) + _330;
    vec4 _775 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _779 = _775.z;
    float _782 = (_775.x * 2.0) + (-1.0);
    float _783 = (_775.y * 2.0) + (-1.0);
    float _784 = dot(vec2(_782, _783), vec2(_782, _783));
    float _3559 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _789 = sqrt(1.0 - (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))));
    float _792 = fma(_789, _209, fma(_783, _216, _782 * _202));
    float _795 = fma(_789, _210, fma(_783, _217, _782 * _203));
    float _798 = fma(_789, _211, fma(_783, _218, _782 * _204));
    float _802 = inversesqrt(dot(vec3(_792, _795, _798), vec3(_792, _795, _798)));
    float _803 = _802 * _792;
    float _804 = _802 * _795;
    float _805 = _802 * _798;
    float _3570 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _806 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
    float _3581 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _3592 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _3603 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _825 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _829 = inversesqrt(dot(vec3(_273, _274, _275), vec3(_273, _274, _275)));
    float _830 = _273 * _829;
    float _831 = _274 * _829;
    float _832 = _275 * _829;
    vec4 _837 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _839 = _837.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _996 = sqrt(((_273 * _273) + (_274 * _274)) + (_275 * _275));
        float _1002 = (cbMatDynParam._m0[5u].x * _996) + cbMatDynParam._m0[5u].y;
        float _3614 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _1007 = (cbMatDynParam._m0[5u].z * _996) + cbMatDynParam._m0[5u].w;
        float _3625 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))) - _1003)) + _1003) < ((_839 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _851 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _852 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _871 = fma(_805, cbSceneParam._m0[5u].z, fma(_804, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _803));
    float _874 = fma(_805, cbSceneParam._m0[6u].z, fma(_804, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _803));
    float _877 = fma(_805, cbSceneParam._m0[7u].z, fma(_804, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _803));
    uint _890 = uint(roundEven(NORMAL.w)) * 13u;
    uint _892 = _890 + 9u;
    uint _893 = _892 + uint(cbMatDynParam._m0[0u].w);
    float _899 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0)))) * cbInstanceData._m0[_893].x;
    float _900 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0)))) * cbInstanceData._m0[_893].y;
    float _901 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0)))) * cbInstanceData._m0[_893].z;
    float _3636 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _902 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
    float _3647 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _903 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
    float _3658 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _904 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    vec4 _913 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _851, cbSceneParam._m0[86u].y * _852));
    float _916 = _913.x * TEXCOORD.z;
    float _917 = dot(vec3(_803, _804, _805), vec3(_830, _831, _832));
    float _920 = _917 * 2.0;
    float _924 = (_920 * _803) - _830;
    float _925 = (_920 * _804) - _831;
    float _926 = (_920 * _805) - _832;
    float _930 = abs(dot(vec3(_830, _831, _832), vec3(_803, _804, _805)));
    float _3669 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _932 = sqrt(_806);
    float _945 = exp2((_932 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_932 * 3.0));
    float _977 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _981 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _985 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1314;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1041 = fma(_985, cbModelParam._m0[26u].z, fma(_981, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _977));
        float _1045 = fma(_985, cbModelParam._m0[27u].z, fma(_981, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _977));
        float _1049 = fma(_985, cbModelParam._m0[28u].z, fma(_981, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _977));
        float _1072 = _977 + _803;
        float _1073 = _981 + _804;
        float _1074 = _985 + _805;
        float _1084 = fma(_1074, cbModelParam._m0[26u].z, fma(_1073, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1072)) - _1041;
        float _1085 = fma(_1074, cbModelParam._m0[27u].z, fma(_1073, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1072)) - _1045;
        float _1086 = fma(_1074, cbModelParam._m0[28u].z, fma(_1073, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1072)) - _1049;
        float _1090 = inversesqrt(dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086)));
        float _1103 = ((_1090 * _1084) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1041 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1104 = ((_1090 * _1085) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1045 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1105 = ((_1090 * _1086) / cbModelParam._m0[34u].z) + ((((((_1049 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        float _1142 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1108.x + (-0.5));
        float _1144 = _1142 * (_1108.y + (-0.5));
        float _1145 = _1142 * (_1108.z + (-0.5));
        float _1152 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1115.x + (-0.5));
        float _1154 = _1152 * (_1115.y + (-0.5));
        float _1155 = _1152 * (_1115.z + (-0.5));
        float _1162 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1122.x + (-0.5));
        float _1164 = _1162 * (_1122.y + (-0.5));
        float _1165 = _1162 * (_1122.z + (-0.5));
        float _1172 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1129.x + (-0.5));
        float _1174 = _1172 * (_1129.y + (-0.5));
        float _1175 = _1172 * (_1129.z + (-0.5));
        float _1176 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = _1143 * 0.5;
        float _1180 = _1153 * 0.5;
        float _1181 = _1163 * 0.5;
        float _1182 = dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181));
        float _1187 = (_1182 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1182);
        float _1196 = (dot(vec3(_803, _804, _805), vec3(_1187 * _1179, _1187 * _1180, _1187 * _1181)) + 1.0) * 0.5;
        float _3695 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1206 = sqrt(((_1180 * _1180) + (_1179 * _1179)) + (_1181 * _1181)) / (_1176 + 9.9999997473787516355514526367188e-06);
        float _3706 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _3717 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * (_1208 + 1.0))) + _1213) * _1176;
        float _1223 = _1144 * 0.5;
        float _1224 = _1154 * 0.5;
        float _1225 = _1164 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_803, _804, _805), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _3728 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _3739 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _3750 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * (_1250 + 1.0))) + _1255) * _1177;
        float _1265 = _1145 * 0.5;
        float _1266 = _1155 * 0.5;
        float _1267 = _1165 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_803, _804, _805), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _3761 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _3772 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _3783 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * (_1292 + 1.0))) + _1297) * _1178;
        _1314 = _1145;
        _1316 = _1144;
        _1317 = _1143;
        _1318 = _1155;
        _1319 = _1154;
        _1320 = _1153;
        _1321 = _1165;
        _1322 = _1164;
        _1323 = _1163;
        _1324 = _1178;
        _1325 = _1177;
        _1326 = _1176;
        _1327 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
        _1328 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1329 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
    }
    else
    {
        _1314 = _1315;
        _1316 = _1315;
        _1317 = _1315;
        _1318 = _1315;
        _1319 = _1315;
        _1320 = _1315;
        _1321 = _1315;
        _1322 = _1315;
        _1323 = _1315;
        _1324 = _1315;
        _1325 = _1315;
        _1326 = _1315;
        _1327 = 0.0;
        _1328 = 0.0;
        _1329 = 0.0;
    }
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1358 = fma(_985, cbModelParam._m0[30u].z, fma(_981, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _977));
        float _1362 = fma(_985, cbModelParam._m0[31u].z, fma(_981, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _977));
        float _1366 = fma(_985, cbModelParam._m0[32u].z, fma(_981, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _977));
        float _1389 = _977 + _803;
        float _1390 = _981 + _804;
        float _1391 = _985 + _805;
        float _1401 = fma(_1391, cbModelParam._m0[30u].z, fma(_1390, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1389)) - _1358;
        float _1402 = fma(_1391, cbModelParam._m0[31u].z, fma(_1390, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1389)) - _1362;
        float _1403 = fma(_1391, cbModelParam._m0[32u].z, fma(_1390, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1389)) - _1366;
        float _1407 = inversesqrt(dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403)));
        float _1420 = ((_1407 * _1401) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1358 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1421 = ((_1407 * _1402) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1362 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1422 = ((_1407 * _1403) / cbModelParam._m0[35u].z) + ((((((_1366 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1420, _1421, _1422), 0.0);
        vec4 _1431 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1420, _1421, _1422), 0.0);
        vec4 _1438 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1420, _1421, _1422), 0.0);
        vec4 _1445 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1420, _1421, _1422), 0.0);
        float _1457 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1458 = _1457 * (_1424.x + (-0.5));
        float _1459 = _1457 * (_1424.y + (-0.5));
        float _1460 = _1457 * (_1424.z + (-0.5));
        float _1467 = exp2((_1431.w + (-0.5)) * 20.0) * 2.0;
        float _1468 = _1467 * (_1431.x + (-0.5));
        float _1469 = _1467 * (_1431.y + (-0.5));
        float _1470 = _1467 * (_1431.z + (-0.5));
        float _1477 = exp2((_1438.w + (-0.5)) * 20.0) * 2.0;
        float _1478 = _1477 * (_1438.x + (-0.5));
        float _1479 = _1477 * (_1438.y + (-0.5));
        float _1480 = _1477 * (_1438.z + (-0.5));
        float _1487 = exp2((_1445.w + (-0.5)) * 20.0) * 2.0;
        float _1488 = _1487 * (_1445.x + (-0.5));
        float _1489 = _1487 * (_1445.y + (-0.5));
        float _1490 = _1487 * (_1445.z + (-0.5));
        float _1491 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1492 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1493 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1494 = _1458 * 0.5;
        float _1495 = _1468 * 0.5;
        float _1496 = _1478 * 0.5;
        float _1497 = dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496));
        float _1502 = (_1497 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1497);
        float _1510 = (dot(vec3(_803, _804, _805), vec3(_1502 * _1494, _1502 * _1495, _1502 * _1496)) + 1.0) * 0.5;
        float _3824 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1519 = sqrt(((_1495 * _1495) + (_1494 * _1494)) + (_1496 * _1496)) / (_1491 + 9.9999997473787516355514526367188e-06);
        float _3835 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1521 = _1520 * 2.0;
        float _1525 = (1.0 - _1520) / (_1520 + 1.0);
        float _3846 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1535 = ((((1.0 - _1526) * (_1521 + 2.0)) * exp2(log2(isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * (_1521 + 1.0))) + _1526) * _1491;
        float _1536 = _1459 * 0.5;
        float _1537 = _1469 * 0.5;
        float _1538 = _1479 * 0.5;
        float _1539 = dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538));
        float _1544 = (_1539 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1539);
        float _1552 = (dot(vec3(_803, _804, _805), vec3(_1544 * _1536, _1544 * _1537, _1544 * _1538)) + 1.0) * 0.5;
        float _3857 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1561 = sqrt(((_1537 * _1537) + (_1536 * _1536)) + (_1538 * _1538)) / (_1492 + 9.9999997473787516355514526367188e-06);
        float _3868 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1563 = _1562 * 2.0;
        float _1567 = (1.0 - _1562) / (_1562 + 1.0);
        float _3879 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1577 = ((((1.0 - _1568) * (_1563 + 2.0)) * exp2(log2(isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_1563 + 1.0))) + _1568) * _1492;
        float _1578 = _1460 * 0.5;
        float _1579 = _1470 * 0.5;
        float _1580 = _1480 * 0.5;
        float _1581 = dot(vec3(_1578, _1579, _1580), vec3(_1578, _1579, _1580));
        float _1586 = (_1581 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1581);
        float _1594 = (dot(vec3(_803, _804, _805), vec3(_1586 * _1578, _1586 * _1579, _1586 * _1580)) + 1.0) * 0.5;
        float _3890 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1603 = sqrt(((_1579 * _1579) + (_1578 * _1578)) + (_1580 * _1580)) / (_1493 + 9.9999997473787516355514526367188e-06);
        float _3901 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1605 = _1604 * 2.0;
        float _1609 = (1.0 - _1604) / (_1604 + 1.0);
        float _3912 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1619 = ((((1.0 - _1610) * (_1605 + 2.0)) * exp2(log2(isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_1605 + 1.0))) + _1610) * _1493;
        _1627 = _1460;
        _1628 = _1459;
        _1629 = _1458;
        _1630 = _1470;
        _1631 = _1469;
        _1632 = _1468;
        _1633 = _1480;
        _1634 = _1479;
        _1635 = _1478;
        _1636 = _1493;
        _1637 = _1492;
        _1638 = _1491;
        _1639 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)));
        _1640 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)));
        _1641 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)));
    }
    else
    {
        _1627 = _1315;
        _1628 = _1315;
        _1629 = _1315;
        _1630 = _1315;
        _1631 = _1315;
        _1632 = _1315;
        _1633 = _1315;
        _1634 = _1315;
        _1635 = _1315;
        _1636 = _1315;
        _1637 = _1315;
        _1638 = _1315;
        _1639 = 0.0;
        _1640 = 0.0;
        _1641 = 0.0;
    }
    float _1651 = (cbModelParam._m0[1u].x * (_1639 - _1327)) + _1327;
    float _1652 = (cbModelParam._m0[1u].x * (_1640 - _1328)) + _1328;
    float _1653 = (cbModelParam._m0[1u].x * (_1641 - _1329)) + _1329;
    float _1674 = fma(_1653, cbSceneParam._m0[89u].z, fma(_1652, cbSceneParam._m0[89u].y, _1651 * cbSceneParam._m0[89u].x));
    float _1677 = fma(_1653, cbSceneParam._m0[90u].z, fma(_1652, cbSceneParam._m0[90u].y, _1651 * cbSceneParam._m0[90u].x));
    float _1680 = fma(_1653, cbSceneParam._m0[91u].z, fma(_1652, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1651));
    float _1695 = _924 * 0.5;
    float _1696 = _925 * 0.5;
    float _1697 = _926 * 0.5;
    float _1698 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1629, _1632, _1635, _1638));
    float _1701 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1628, _1631, _1634, _1637));
    float _1704 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1627, _1630, _1633, _1636));
    float _1738;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1711 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1314, _1318, _1321, _1324));
        float _1715 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1316, _1319, _1322, _1325));
        float _1719 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1317, _1320, _1323, _1326));
        float _1726 = dot(vec4(cbModelParam._m0[39u]), vec4(_1695, _1696, _1697, 1.0));
        _1738 = dot(vec3(isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)), isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)), isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1726) ? 0.0 : (isnan(0.0) ? _1726 : max(0.0, _1726))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1738 = 1.0;
    }
    float _1749;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1740 = dot(vec4(cbModelParam._m0[40u]), vec4(_1695, _1696, _1697, 1.0));
        _1749 = dot(vec3(isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)), isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)), isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1740) ? 0.0 : (isnan(0.0) ? _1740 : max(0.0, _1740))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1749 = 1.0;
    }
    float _1753 = (_1749 * cbModelParam._m0[1u].x) + (_1738 * (1.0 - cbModelParam._m0[1u].x));
    float _1763 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _806);
    float _1764 = isnan(_1763) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1763 : min(cbModelParam._m0[25u].z, _1763));
    float _1844;
    float _1846;
    float _1848;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1811 = fma(_985, cbModelParam._m0[13u].z, fma(_981, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _977)) + cbModelParam._m0[13u].w;
        float _1815 = fma(_985, cbModelParam._m0[14u].z, fma(_981, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _977)) + cbModelParam._m0[14u].w;
        float _1819 = fma(_985, cbModelParam._m0[15u].z, fma(_981, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _977)) + cbModelParam._m0[15u].w;
        float _1822 = fma(_926, cbModelParam._m0[13u].z, fma(_925, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _924));
        float _1825 = fma(_926, cbModelParam._m0[14u].z, fma(_925, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _924));
        float _1828 = fma(_926, cbModelParam._m0[15u].z, fma(_925, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _924));
        float _1856;
        if (_1822 > 0.0)
        {
            _1856 = abs((1.0 - _1811) / _1822);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1811 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1856 = frontier_phi_57_55_ladder;
        }
        float _2225;
        if (_1825 > 0.0)
        {
            _2225 = abs((1.0 - _1815) / _1825);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1815 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _2225 = frontier_phi_66_62_ladder;
        }
        float _2533;
        if (_1828 > 0.0)
        {
            _2533 = abs((1.0 - _1819) / _1828);
        }
        else
        {
            float frontier_phi_80_73_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_80_73_ladder = abs((_1819 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_80_73_ladder = 5000.0;
            }
            _2533 = frontier_phi_80_73_ladder;
        }
        float _2535 = isnan(_2225) ? _1856 : (isnan(_1856) ? _2225 : min(_1856, _2225));
        float _2536 = isnan(_2533) ? _2535 : (isnan(_2535) ? _2533 : min(_2535, _2533));
        float _2540 = (_2536 * _1822) + _1811;
        float _2541 = (_2536 * _1825) + _1815;
        float _2542 = (_2536 * _1828) + _1819;
        float _2543 = _2536 * 9.9999997473787516355514526367188e-05;
        float _2544 = (-1.0) - _2543;
        float _2546 = _2543 + 1.0;
        float frontier_phi_56_80_ladder;
        float frontier_phi_56_80_ladder_1;
        float frontier_phi_56_80_ladder_2;
        if ((_2542 > _2546) || ((_2542 < _2544) || ((_2541 > _2546) || ((_2541 < _2544) || ((_2540 < _2544) || (_2540 > _2546))))))
        {
            frontier_phi_56_80_ladder = 0.0;
            frontier_phi_56_80_ladder_1 = 0.0;
            frontier_phi_56_80_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2684 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2542, cbModelParam._m0[9u].z, fma(_2541, cbModelParam._m0[9u].y, _2540 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2542, cbModelParam._m0[10u].z, fma(_2541, cbModelParam._m0[10u].y, _2540 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2542, cbModelParam._m0[11u].z, fma(_2541, cbModelParam._m0[11u].y, _2540 * cbModelParam._m0[11u].x))), _1764);
            frontier_phi_56_80_ladder = _2684.z * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_1 = _2684.y * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_2 = _2684.x * cbModelParam._m0[1u].y;
        }
        _1844 = frontier_phi_56_80_ladder_2;
        _1846 = frontier_phi_56_80_ladder_1;
        _1848 = frontier_phi_56_80_ladder;
    }
    else
    {
        vec4 _1832 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_924, _925, _926), _1764);
        _1844 = _1832.x * cbModelParam._m0[1u].y;
        _1846 = _1832.y * cbModelParam._m0[1u].y;
        _1848 = _1832.z * cbModelParam._m0[1u].y;
    }
    float _1852 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _806);
    float _1853 = isnan(_1852) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1852 : min(cbModelParam._m0[25u].w, _1852));
    float _1941;
    float _1943;
    float _1945;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1905 = fma(_985, cbModelParam._m0[21u].z, fma(_981, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _977)) + cbModelParam._m0[21u].w;
        float _1909 = fma(_985, cbModelParam._m0[22u].z, fma(_981, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _977)) + cbModelParam._m0[22u].w;
        float _1913 = fma(_985, cbModelParam._m0[23u].z, fma(_981, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _977)) + cbModelParam._m0[23u].w;
        float _1916 = fma(_926, cbModelParam._m0[21u].z, fma(_925, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _924));
        float _1919 = fma(_926, cbModelParam._m0[22u].z, fma(_925, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _924));
        float _1922 = fma(_926, cbModelParam._m0[23u].z, fma(_925, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _924));
        float _2230;
        if (_1916 > 0.0)
        {
            _2230 = abs((1.0 - _1905) / _1916);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1905 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _2230 = frontier_phi_68_64_ladder;
        }
        float _2559;
        if (_1919 > 0.0)
        {
            _2559 = abs((1.0 - _1909) / _1919);
        }
        else
        {
            float frontier_phi_82_75_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_82_75_ladder = abs((_1909 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_82_75_ladder = 5000.0;
            }
            _2559 = frontier_phi_82_75_ladder;
        }
        float _2749;
        if (_1922 > 0.0)
        {
            _2749 = abs((1.0 - _1913) / _1922);
        }
        else
        {
            float frontier_phi_100_93_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_100_93_ladder = abs((_1913 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_100_93_ladder = 5000.0;
            }
            _2749 = frontier_phi_100_93_ladder;
        }
        float _2751 = isnan(_2559) ? _2230 : (isnan(_2230) ? _2559 : min(_2230, _2559));
        float _2752 = isnan(_2749) ? _2751 : (isnan(_2751) ? _2749 : min(_2751, _2749));
        float _2756 = (_2752 * _1916) + _1905;
        float _2757 = (_2752 * _1919) + _1909;
        float _2758 = (_2752 * _1922) + _1913;
        float _2759 = _2752 * 9.9999997473787516355514526367188e-05;
        float _2760 = (-1.0) - _2759;
        float _2762 = _2759 + 1.0;
        float frontier_phi_65_100_ladder;
        float frontier_phi_65_100_ladder_1;
        float frontier_phi_65_100_ladder_2;
        if ((_2758 > _2762) || ((_2758 < _2760) || ((_2757 > _2762) || ((_2757 < _2760) || ((_2756 < _2760) || (_2756 > _2762))))))
        {
            frontier_phi_65_100_ladder = 0.0;
            frontier_phi_65_100_ladder_1 = 0.0;
            frontier_phi_65_100_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3000 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2758, cbModelParam._m0[17u].z, fma(_2757, cbModelParam._m0[17u].y, _2756 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2758, cbModelParam._m0[18u].z, fma(_2757, cbModelParam._m0[18u].y, _2756 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2758, cbModelParam._m0[19u].z, fma(_2757, cbModelParam._m0[19u].y, _2756 * cbModelParam._m0[19u].x))), _1853);
            frontier_phi_65_100_ladder = _3000.y * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_1 = _3000.x * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_2 = _3000.z * cbModelParam._m0[1u].z;
        }
        _1941 = frontier_phi_65_100_ladder_1;
        _1943 = frontier_phi_65_100_ladder;
        _1945 = frontier_phi_65_100_ladder_2;
    }
    else
    {
        vec4 _1925 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_924, _925, _926), _1853);
        _1941 = _1925.x * cbModelParam._m0[1u].z;
        _1943 = _1925.y * cbModelParam._m0[1u].z;
        _1945 = _1925.z * cbModelParam._m0[1u].z;
    }
    float _1957 = ((((1.0 - _945) * ((_932 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_945 * _932)) * _916;
    float _1958 = _1957 * ((cbModelParam._m0[1u].w * (_1941 - _1844)) + _1844);
    float _1959 = _1957 * ((cbModelParam._m0[1u].w * (_1943 - _1846)) + _1846);
    float _1960 = _1957 * ((cbModelParam._m0[1u].w * (_1945 - _1848)) + _1848);
    float _1963 = fma(_1960, cbSceneParam._m0[89u].z, fma(_1959, cbSceneParam._m0[89u].y, _1958 * cbSceneParam._m0[89u].x));
    float _1966 = fma(_1960, cbSceneParam._m0[90u].z, fma(_1959, cbSceneParam._m0[90u].y, _1958 * cbSceneParam._m0[90u].x));
    float _1969 = fma(_1960, cbSceneParam._m0[91u].z, fma(_1959, cbSceneParam._m0[91u].y, _1958 * cbSceneParam._m0[91u].x));
    vec4 _1977 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_851, _852));
    float _1979 = _1977.w;
    float _1991 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1979);
    float _1992 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1979);
    float _1993 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1979);
    uvec4 _1997 = floatBitsToUint(cbInstanceData._m0[_890 + 5u]);
    uint _1999 = _1997.x * 14u;
    uint _2000 = _1999 + 13u;
    float _2005 = _916 + (-1.0);
    float _2008 = (cbLight._m0[_2000].x * _2005) + 1.0;
    float _2009 = (cbLight._m0[_2000].y * _2005) + 1.0;
    uint _2010 = _1999 + 5u;
    float _2016 = isnan(1.0) ? _2009 : (isnan(_2009) ? 1.0 : min(_2009, 1.0));
    uint _2020 = _1999 + 4u;
    float _2029 = isnan(1.0) ? _2008 : (isnan(_2008) ? 1.0 : min(_2008, 1.0));
    uint _2033 = _1999 | 1u;
    float _2044 = dot(vec3(cbLight._m0[_1999].xyz), vec3(_803, _804, _805));
    float _2047 = dot(vec3(cbLight._m0[_2033].xyz), vec3(_803, _804, _805));
    float _4048 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _4059 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2052 = (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * 0.3183098733425140380859375;
    float _2054 = (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * 0.3183098733425140380859375;
    float _2061 = ((cbLight._m0[_2010].x * _2016) * _2054) + (((cbLight._m0[_2020].x * _1991) * _2029) * _2052);
    float _2062 = ((_2016 * cbLight._m0[_2010].y) * _2054) + (((cbLight._m0[_2020].y * _1992) * _2029) * _2052);
    float _2063 = ((_2016 * cbLight._m0[_2010].z) * _2054) + (((cbLight._m0[_2020].z * _1993) * _2029) * _2052);
    uint _2065 = _1999 + 8u;
    float _2078 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1999].w)) * _806) * 0.949999988079071044921875);
    float _2079 = _2078 * _2078;
    float _2080 = cbLight._m0[_1999].x + _830;
    float _2081 = cbLight._m0[_1999].y + _831;
    float _2082 = cbLight._m0[_1999].z + _832;
    float _2086 = inversesqrt(dot(vec3(_2080, _2081, _2082), vec3(_2080, _2081, _2082)));
    float _2087 = _2086 * _2080;
    float _2088 = _2086 * _2081;
    float _2089 = _2086 * _2082;
    float _2090 = dot(vec3(_803, _804, _805), vec3(cbLight._m0[_1999].xyz));
    float _4070 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2093 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _4081 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _2094 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _2095 = dot(vec3(_803, _804, _805), vec3(_2087, _2088, _2089));
    float _4092 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2098 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _2099 = dot(vec3(cbLight._m0[_1999].xyz), vec3(_2087, _2088, _2089));
    float _4103 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2103 = _2079 * _2079;
    float _2107 = ((_2098 * _2098) * (_2103 + (-1.0))) + 1.0;
    float _2118 = (exp2(log2(1.0 - (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2119 = 1.0 - _2079;
    float _2130 = (0.5 / (((_2094 * ((_2093 * _2119) + _2079)) + 9.9999999392252902907785028219223e-09) + (((_2094 * _2119) + _2079) * _2093))) * _2093;
    float _4114 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2132 = (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_2103 / ((_2107 * _2107) * 3.141590118408203125));
    uint _2146 = _1999 + 9u;
    float _2157 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2033].w)) * _806) * 0.949999988079071044921875);
    float _2158 = _2157 * _2157;
    float _2159 = cbLight._m0[_2033].x + _830;
    float _2160 = cbLight._m0[_2033].y + _831;
    float _2161 = cbLight._m0[_2033].z + _832;
    float _2165 = inversesqrt(dot(vec3(_2159, _2160, _2161), vec3(_2159, _2160, _2161)));
    float _2166 = _2165 * _2159;
    float _2167 = _2165 * _2160;
    float _2168 = _2165 * _2161;
    float _2169 = dot(vec3(_803, _804, _805), vec3(cbLight._m0[_2033].xyz));
    float _4125 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2172 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _2173 = dot(vec3(_803, _804, _805), vec3(_2166, _2167, _2168));
    float _4136 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2176 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _2177 = dot(vec3(cbLight._m0[_2033].xyz), vec3(_2166, _2167, _2168));
    float _4147 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2181 = _2158 * _2158;
    float _2185 = ((_2176 * _2176) * (_2181 + (-1.0))) + 1.0;
    float _2194 = (exp2(log2(1.0 - (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2195 = 1.0 - _2158;
    float _2205 = (0.5 / (((_2094 * ((_2172 * _2195) + _2158)) + 9.9999999392252902907785028219223e-09) + (((_2094 * _2195) + _2158) * _2172))) * _2172;
    float _4158 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2207 = (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_2181 / ((_2185 * _2185) * 3.141590118408203125));
    float _2217 = (((_2194 * cbLight._m0[_2146].x) * _2207) * _2016) + ((((cbLight._m0[_2065].x * _1991) * _2118) * _2132) * _2029);
    float _2218 = (((_2194 * cbLight._m0[_2146].y) * _2207) * _2016) + ((((cbLight._m0[_2065].y * _1992) * _2118) * _2132) * _2029);
    float _2219 = (((_2194 * cbLight._m0[_2146].z) * _2207) * _2016) + ((((cbLight._m0[_2065].z * _1993) * _2118) * _2132) * _2029);
    float _2334;
    float _2336;
    float _2338;
    float _2340;
    float _2342;
    float _2344;
    if (_1997.y == 0u)
    {
        float _2274 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2275 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2274;
        float _2276 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2274;
        float _2277 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2274;
        uvec4 _2289 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2290 = _2289.x;
        uint _2301 = uint((float(_2289.y) * floor(float(uint(cbSceneParam._m0[85u].y * _852) / _2290))) + floor(float(uint(cbSceneParam._m0[85u].x * _851) / _2290)));
        float _2311 = (log2(_2277 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2312 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        uint _2315 = uint(isnan(14.0) ? _2312 : (isnan(_2312) ? 14.0 : min(_2312, 14.0)));
        uvec4 _2320 = texelFetch(g_lightClusterGridBuffer, int(((_2315 << 2u) + (_2301 << 6u)) >> 2u));
        uint _2321 = _2320.x;
        uint _2322 = _2289.z;
        float _2412;
        float _2414;
        float _2416;
        float _2418;
        float _2420;
        float _2422;
        if (((((1u << ((_2322 >> 4u) & 15u)) + 4294967295u) & _2321) == 0u) || ((_2322 & 240u) == 0u))
        {
            _2412 = 0.0;
            _2414 = 0.0;
            _2416 = 0.0;
            _2418 = 0.0;
            _2420 = 0.0;
            _2422 = 0.0;
        }
        else
        {
            float _2413;
            float _2415;
            float _2417;
            float _2419;
            float _2421;
            float _2423;
            float _2596 = 0.0;
            float _2597 = 0.0;
            float _2598 = 0.0;
            float _2599 = 0.0;
            float _2600 = 0.0;
            float _2601 = 0.0;
            uint _2602 = 0u;
            uint _2611;
            bool _2612;
            for (;;)
            {
                _2611 = texelFetch(g_lightClassification, int((((_2315 << 5u) + (_2301 << 9u)) + (_2602 << 2u)) >> 2u)).x;
                _2612 = _2611 == 0u;
                float frontier_phi_95_pred;
                float frontier_phi_95_pred_1;
                float frontier_phi_95_pred_2;
                float frontier_phi_95_pred_3;
                float frontier_phi_95_pred_4;
                float frontier_phi_95_pred_5;
                if (_2612)
                {
                    frontier_phi_95_pred = _2597;
                    frontier_phi_95_pred_1 = _2596;
                    frontier_phi_95_pred_2 = _2598;
                    frontier_phi_95_pred_3 = _2601;
                    frontier_phi_95_pred_4 = _2600;
                    frontier_phi_95_pred_5 = _2599;
                }
                else
                {
                    float _2792;
                    float _2793;
                    float _2794;
                    float _2795;
                    float _2796;
                    float _2797;
                    uint _2798;
                    _2792 = _2596;
                    _2793 = _2597;
                    _2794 = _2598;
                    _2795 = _2599;
                    _2796 = _2600;
                    _2797 = _2601;
                    _2798 = _2611;
                    float _2693;
                    float _2694;
                    float _2695;
                    float _2696;
                    float _2697;
                    float _2698;
                    for (;;)
                    {
                        uint _2802 = uint(findLSB(_2798)) + (_2602 << 5u);
                        uint _2799 = (_2798 + 4294967295u) & _2798;
                        uint _2804 = _2802 * 48u;
                        vec4 _2818 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2804)).x, texelFetch(g_PointLightRenderingBuffer, int(_2804 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2804 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2804 + 3u)).x));
                        uint _2824 = (_2802 * 48u) + 4u;
                        vec4 _2837 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2824)).x, texelFetch(g_PointLightRenderingBuffer, int(_2824 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2824 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2824 + 3u)).x));
                        uint _2843 = (_2802 * 48u) + 8u;
                        vec3 _2854 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2843)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 2u)).x));
                        float _2858 = _2818.x - _2275;
                        float _2859 = _2818.y - _2276;
                        float _2860 = _2818.z - _2277;
                        float _2861 = dot(vec3(_2858, _2859, _2860), vec3(_2858, _2859, _2860));
                        float _2864 = inversesqrt(_2861);
                        float _2865 = _2864 * _2858;
                        float _2866 = _2864 * _2859;
                        float _2867 = _2864 * _2860;
                        float _2868 = dot(vec3(_871, _874, _877), vec3(_2865, _2866, _2867));
                        float _2873 = 1.0 - (_2861 * _2818.w);
                        float _4179 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
                        float _2874 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
                        float _2875 = sqrt(_2861) * _2837.w;
                        float _2878 = 1.39999997615814208984375 / (_2875 + 1.39999997615814208984375);
                        float _2879 = _2878 * _2878;
                        float _2882 = ((1.0 - _2879) * _2868) + _2879;
                        float _2885 = _2875 * _2875;
                        float _2889 = ((isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0))) * _2874) / ((_2885 * 0.699999988079071044921875) + 1.0);
                        float _2893 = (-0.0) - _2275;
                        float _2894 = (-0.0) - _2276;
                        float _2895 = (-0.0) - _2277;
                        float _2899 = inversesqrt(dot(vec3(_2893, _2894, _2895), vec3(_2893, _2894, _2895)));
                        float _2900 = _2899 * _2893;
                        float _2901 = _2899 * _2894;
                        float _2902 = _2899 * _2895;
                        float _2910 = exp2(log2(1.0 / ((_2885 * 3.5) + 5.0)) * 0.25);
                        float _2911 = 1.0 - _932;
                        float _2918 = sqrt(1.0 - ((1.0 - (_2911 * _2911)) * (1.0 - (_2910 * _2910))));
                        float _2919 = _2918 * _2918;
                        float _2920 = _2919 * _2919;
                        float _2921 = _2900 + _2865;
                        float _2922 = _2901 + _2866;
                        float _2923 = _2902 + _2867;
                        float _2927 = inversesqrt(dot(vec3(_2921, _2922, _2923), vec3(_2921, _2922, _2923)));
                        float _2931 = dot(vec3(_871, _874, _877), vec3(_2900, _2901, _2902));
                        float _4195 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
                        float _2934 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
                        float _2935 = dot(vec3(_871, _874, _877), vec3(_2927 * _2921, _2927 * _2922, _2927 * _2923));
                        float _4206 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
                        float _2938 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
                        float _2942 = ((_2938 * _2938) * (_2920 + (-1.0))) + 1.0;
                        float _2943 = _2878 * _2919;
                        float _2944 = _2943 * _2943;
                        float _2947 = ((1.0 - _2944) * _2868) + _2944;
                        float _4217 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
                        float _2948 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
                        float _2949 = 1.0 - _2919;
                        float _2959 = (0.5 / (((_2948 * ((_2934 * _2949) + _2919)) + 9.9999999392252902907785028219223e-09) + (((_2948 * _2949) + _2919) * _2934))) * _2948;
                        float _4228 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
                        float _2970 = (((_2920 * 3.1415927410125732421875) * (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0)))) / ((_2942 * _2942) * ((_2885 * 2.1991131305694580078125) + 3.141590118408203125))) * _2874;
                        _2696 = (_2889 * _2837.x) + _2795;
                        _2697 = (_2889 * _2837.y) + _2796;
                        _2698 = (_2889 * _2837.z) + _2797;
                        _2693 = (_2970 * _2854.x) + _2792;
                        _2694 = (_2970 * _2854.y) + _2793;
                        _2695 = (_2970 * _2854.z) + _2794;
                        if (_2799 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2792 = _2693;
                            _2793 = _2694;
                            _2794 = _2695;
                            _2795 = _2696;
                            _2796 = _2697;
                            _2797 = _2698;
                            _2798 = _2799;
                        }
                    }
                    frontier_phi_95_pred = _2694;
                    frontier_phi_95_pred_1 = _2693;
                    frontier_phi_95_pred_2 = _2695;
                    frontier_phi_95_pred_3 = _2698;
                    frontier_phi_95_pred_4 = _2697;
                    frontier_phi_95_pred_5 = _2696;
                }
                _2415 = frontier_phi_95_pred;
                _2413 = frontier_phi_95_pred_1;
                _2417 = frontier_phi_95_pred_2;
                _2423 = frontier_phi_95_pred_3;
                _2421 = frontier_phi_95_pred_4;
                _2419 = frontier_phi_95_pred_5;
                uint _2603 = _2602 + 1u;
                if (_2603 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2596 = _2413;
                    _2597 = _2415;
                    _2598 = _2417;
                    _2599 = _2419;
                    _2600 = _2421;
                    _2601 = _2423;
                    _2602 = _2603;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2412 = _2413;
            _2414 = _2415;
            _2416 = _2417;
            _2418 = _2419;
            _2420 = _2421;
            _2422 = _2423;
        }
        uvec4 _2426 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2427 = _2426.z;
        uint _2429 = (_2427 >> 8u) & 15u;
        float _2564;
        float _2566;
        float _2568;
        float _2570;
        float _2572;
        float _2574;
        if (((4294967295u << _2429) & _2321) == 0u)
        {
            _2564 = _2412;
            _2566 = _2414;
            _2568 = _2416;
            _2570 = _2418;
            _2572 = _2420;
            _2574 = _2422;
        }
        else
        {
            float _2589 = inversesqrt(dot(vec3(_2275, _2276, _2277), vec3(_2275, _2276, _2277)));
            float _2590 = _2589 * _2275;
            float _2591 = _2589 * _2276;
            float _2592 = _2589 * _2277;
            float frontier_phi_84_85_ladder;
            float frontier_phi_84_85_ladder_1;
            float frontier_phi_84_85_ladder_2;
            float frontier_phi_84_85_ladder_3;
            float frontier_phi_84_85_ladder_4;
            float frontier_phi_84_85_ladder_5;
            if (_2429 < ((_2427 >> 12u) & 15u))
            {
                float _2565;
                float _2567;
                float _2569;
                float _2571;
                float _2573;
                float _2575;
                float _2775 = _2412;
                float _2776 = _2414;
                float _2777 = _2416;
                float _2778 = _2418;
                float _2779 = _2420;
                float _2780 = _2422;
                uint _2781 = _2429;
                uint _2790;
                bool _2791;
                for (;;)
                {
                    _2790 = texelFetch(g_lightClassification, int((((_2315 << 5u) + (_2301 << 9u)) + (_2781 << 2u)) >> 2u)).x;
                    _2791 = _2790 == 0u;
                    float frontier_phi_109_pred;
                    float frontier_phi_109_pred_1;
                    float frontier_phi_109_pred_2;
                    float frontier_phi_109_pred_3;
                    float frontier_phi_109_pred_4;
                    float frontier_phi_109_pred_5;
                    if (_2791)
                    {
                        frontier_phi_109_pred = _2776;
                        frontier_phi_109_pred_1 = _2775;
                        frontier_phi_109_pred_2 = _2780;
                        frontier_phi_109_pred_3 = _2779;
                        frontier_phi_109_pred_4 = _2778;
                        frontier_phi_109_pred_5 = _2777;
                    }
                    else
                    {
                        float _3005;
                        float _3006;
                        float _3007;
                        float _3008;
                        float _3009;
                        float _3010;
                        float _3298;
                        float _3299;
                        float _3300;
                        float _3301;
                        float _3302;
                        float _3303;
                        float _3018 = _2775;
                        float _3019 = _2776;
                        float _3020 = _2777;
                        float _3021 = _2778;
                        float _3022 = _2779;
                        float _3023 = _2780;
                        uint _3024 = _2790;
                        uint _3025;
                        vec4 _3050;
                        float _3051;
                        vec4 _3066;
                        vec3 _3078;
                        vec4 _3093;
                        vec4 _3108;
                        float _3154;
                        bool _3155;
                        for (;;)
                        {
                            uint _3035 = ((_2781 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3024));
                            _3025 = (_3024 + 4294967295u) & _3024;
                            uint _3037 = _3035 * 40u;
                            _3050 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3037)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 3u)).x));
                            _3051 = _3050.w;
                            uint _3053 = (_3035 * 40u) + 4u;
                            _3066 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 3u)).x));
                            uint _3068 = (_3035 * 40u) + 8u;
                            _3078 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 2u)).x));
                            uint _3080 = (_3035 * 40u) + 16u;
                            _3093 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3080)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 3u)).x));
                            uint _3095 = (_3035 * 40u) + 20u;
                            _3108 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3095)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 3u)).x));
                            uint _3110 = (_3035 * 40u) + 24u;
                            vec4 _3123 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3110)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 3u)).x));
                            uint _3129 = (_3035 * 40u) + 28u;
                            vec4 _3142 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3129)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 3u)).x));
                            _3154 = fma(_2277, _3142.z, fma(_2276, _3142.y, _3142.x * _2275)) + _3142.w;
                            _3155 = !((fma(_2277, _3123.z, fma(_2276, _3123.y, _3123.x * _2275)) + _3123.w) <= 0.0);
                            float frontier_phi_115_pred;
                            float frontier_phi_115_pred_1;
                            float frontier_phi_115_pred_2;
                            float frontier_phi_115_pred_3;
                            float frontier_phi_115_pred_4;
                            float frontier_phi_115_pred_5;
                            if (_3155)
                            {
                                float _3182 = _3050.x - _2275;
                                float _3183 = _3050.y - _2276;
                                float _3184 = _3050.z - _2277;
                                float _3185 = dot(vec3(_3182, _3183, _3184), vec3(_3182, _3183, _3184));
                                float _3188 = inversesqrt(_3185);
                                float _3189 = _3188 * _3182;
                                float _3190 = _3188 * _3183;
                                float _3191 = _3188 * _3184;
                                float _3195 = 1.0 - (_3185 / (_3051 * _3051));
                                float _4239 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                                float _3196 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
                                float _3200 = sqrt(_3185) * _3066.w;
                                float _3202 = 1.39999997615814208984375 / (_3200 + 1.39999997615814208984375);
                                float _3203 = _3202 * _3202;
                                float _3206 = ((1.0 - _3203) * dot(vec3(_3189, _3190, _3191), vec3(_871, _874, _877))) + _3203;
                                float _3209 = _3200 * _3200;
                                float _3213 = (fma(_2277, _3093.z, fma(_2276, _3093.y, _3093.x * _2275)) + _3093.w) / _3154;
                                float _3214 = (fma(_2277, _3108.z, fma(_2276, _3108.y, _3108.x * _2275)) + _3108.w) / _3154;
                                float _3218 = 1.0 - dot(vec2(_3213, _3214), vec2(_3213, _3214));
                                float _4255 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                                float _3219 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                                float _3220 = _3219 * (((isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0))) * _3196) / ((_3209 * 0.699999988079071044921875) + 1.0));
                                float _3232 = exp2(log2(1.0 / ((_3209 * 3.5) + 5.0)) * 0.25);
                                float _3233 = 1.0 - _932;
                                float _3240 = sqrt(1.0 - ((1.0 - (_3233 * _3233)) * (1.0 - (_3232 * _3232))));
                                float _3241 = _3240 * _3240;
                                float _3242 = _3241 * _3241;
                                float _3243 = _3189 - _2590;
                                float _3244 = _3190 - _2591;
                                float _3245 = _3191 - _2592;
                                float _3249 = inversesqrt(dot(vec3(_3243, _3244, _3245), vec3(_3243, _3244, _3245)));
                                float _3253 = dot(vec3(_871, _874, _877), vec3((-0.0) - _2590, (-0.0) - _2591, (-0.0) - _2592));
                                float _4266 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                                float _3256 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
                                float _3257 = dot(vec3(_871, _874, _877), vec3(_3249 * _3243, _3249 * _3244, _3249 * _3245));
                                float _4277 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                                float _3260 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                                float _3264 = ((_3260 * _3260) * (_3242 + (-1.0))) + 1.0;
                                float _3265 = _3202 * _3241;
                                float _3266 = _3265 * _3265;
                                float _3272 = ((1.0 - _3266) * dot(vec3(_871, _874, _877), vec3(_3189, _3190, _3191))) + _3266;
                                float _4288 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                                float _3273 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
                                float _3274 = 1.0 - _3241;
                                float _3284 = (0.5 / (((_3273 * ((_3256 * _3274) + _3241)) + 9.9999999392252902907785028219223e-09) + (((_3273 * _3274) + _3241) * _3256))) * _3273;
                                float _4299 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3294 = (_3219 * _3196) * (((_3242 * 3.1415927410125732421875) * (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0)))) / ((_3264 * _3264) * ((_3209 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_115_pred = _3220 * _3066.y;
                                frontier_phi_115_pred_1 = _3220 * _3066.x;
                                frontier_phi_115_pred_2 = _3294 * _3078.z;
                                frontier_phi_115_pred_3 = _3294 * _3078.y;
                                frontier_phi_115_pred_4 = _3294 * _3078.x;
                                frontier_phi_115_pred_5 = _3220 * _3066.z;
                            }
                            else
                            {
                                frontier_phi_115_pred = 0.0;
                                frontier_phi_115_pred_1 = 0.0;
                                frontier_phi_115_pred_2 = 0.0;
                                frontier_phi_115_pred_3 = 0.0;
                                frontier_phi_115_pred_4 = 0.0;
                                frontier_phi_115_pred_5 = 0.0;
                            }
                            _3302 = frontier_phi_115_pred;
                            _3301 = frontier_phi_115_pred_1;
                            _3300 = frontier_phi_115_pred_2;
                            _3299 = frontier_phi_115_pred_3;
                            _3298 = frontier_phi_115_pred_4;
                            _3303 = frontier_phi_115_pred_5;
                            _3008 = _3301 + _3021;
                            _3009 = _3302 + _3022;
                            _3010 = _3303 + _3023;
                            _3005 = _3298 + _3018;
                            _3006 = _3299 + _3019;
                            _3007 = _3300 + _3020;
                            if (_3025 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3018 = _3005;
                                _3019 = _3006;
                                _3020 = _3007;
                                _3021 = _3008;
                                _3022 = _3009;
                                _3023 = _3010;
                                _3024 = _3025;
                                continue;
                            }
                        }
                        frontier_phi_109_pred = _3006;
                        frontier_phi_109_pred_1 = _3005;
                        frontier_phi_109_pred_2 = _3010;
                        frontier_phi_109_pred_3 = _3009;
                        frontier_phi_109_pred_4 = _3008;
                        frontier_phi_109_pred_5 = _3007;
                    }
                    _2567 = frontier_phi_109_pred;
                    _2565 = frontier_phi_109_pred_1;
                    _2575 = frontier_phi_109_pred_2;
                    _2573 = frontier_phi_109_pred_3;
                    _2571 = frontier_phi_109_pred_4;
                    _2569 = frontier_phi_109_pred_5;
                    uint _2782 = _2781 + 1u;
                    if (_2782 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2775 = _2565;
                        _2776 = _2567;
                        _2777 = _2569;
                        _2778 = _2571;
                        _2779 = _2573;
                        _2780 = _2575;
                        _2781 = _2782;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_84_85_ladder = _2565;
                frontier_phi_84_85_ladder_1 = _2569;
                frontier_phi_84_85_ladder_2 = _2575;
                frontier_phi_84_85_ladder_3 = _2573;
                frontier_phi_84_85_ladder_4 = _2571;
                frontier_phi_84_85_ladder_5 = _2567;
            }
            else
            {
                frontier_phi_84_85_ladder = _2412;
                frontier_phi_84_85_ladder_1 = _2416;
                frontier_phi_84_85_ladder_2 = _2422;
                frontier_phi_84_85_ladder_3 = _2420;
                frontier_phi_84_85_ladder_4 = _2418;
                frontier_phi_84_85_ladder_5 = _2414;
            }
            _2564 = frontier_phi_84_85_ladder;
            _2566 = frontier_phi_84_85_ladder_5;
            _2568 = frontier_phi_84_85_ladder_1;
            _2570 = frontier_phi_84_85_ladder_4;
            _2572 = frontier_phi_84_85_ladder_3;
            _2574 = frontier_phi_84_85_ladder_2;
        }
        float _2579 = isnan(1.0) ? _916 : (isnan(_916) ? 1.0 : min(_916, 1.0));
        _2334 = (_2579 * _2570) + _2061;
        _2336 = (_2579 * _2572) + _2062;
        _2338 = (_2579 * _2574) + _2063;
        _2340 = ((_2564 * 0.039999999105930328369140625) * _2579) + _2217;
        _2342 = ((_2566 * 0.039999999105930328369140625) * _2579) + _2218;
        _2344 = ((_2568 * 0.039999999105930328369140625) * _2579) + _2219;
    }
    else
    {
        _2334 = _2061;
        _2336 = _2062;
        _2338 = _2063;
        _2340 = _2217;
        _2342 = _2218;
        _2344 = _2219;
    }
    float _4315 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _4326 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _4337 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _2361 = ((isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_2334 + ((isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))) * _916))) + ((_2340 + ((isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0))) * _1753)) * cbPerFrame._m0[3u].x);
    float _2362 = ((isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_2336 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _916))) + ((_2342 + ((isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0))) * _1753)) * cbPerFrame._m0[3u].x);
    float _2363 = ((isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_2338 + ((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _916))) + ((_2344 + ((isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0))) * _1753)) * cbPerFrame._m0[3u].x);
    float _2364 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2365 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2366 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    uint _2367 = _890 + 6u;
    float _2375 = _851 / cbSceneParam._m0[86u].x;
    float _2376 = _852 / cbSceneParam._m0[86u].y;
    vec4 _2390 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2375, _2376, (log2((isnan(cbSceneParam._m0[77u].w) ? _825 : (isnan(_825) ? cbSceneParam._m0[77u].w : min(_825, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2392 = _2390.x;
    float _2393 = _2390.y;
    float _2394 = _2390.z;
    float _2395 = _2390.w;
    float _2475;
    float _2477;
    float _2479;
    float _2481;
    if (_825 > cbSceneParam._m0[78u].w)
    {
        float _2437 = isnan(_825) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _825 : min(cbSceneParam._m0[80u].w, _825));
        float _2438 = _2437 / _825;
        float _2449 = _2438 * _273;
        float _2450 = _274 * _2438;
        float _2451 = (-0.0) - _2450;
        float _2452 = _2438 * _275;
        float _2454 = (cbSceneParam._m0[77u].w * _2451) / _2437;
        float _2455 = _2454 + cbSceneParam._m0[79u].w;
        float _2456 = cbSceneParam._m0[79u].w - _2450;
        float _2462 = sqrt(((_2449 * _2449) + (_2450 * _2450)) + (_2452 * _2452));
        float _2465 = (1.0 - (cbSceneParam._m0[77u].w / _2437)) * _2462;
        float _2471 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2473 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2706;
        if (abs((_2451 - _2454) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2706 = ((((_2455 > 0.0) ? exp2(_2471 * _2455) : (2.0 - exp2(_2473 * _2455))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2465;
        }
        else
        {
            float _2625 = 1.0 / cbSceneParam._m0[80u].x;
            float _2626 = isnan(_2456) ? _2455 : (isnan(_2455) ? _2456 : max(_2455, _2456));
            float _2627 = isnan(_2456) ? _2455 : (isnan(_2455) ? _2456 : min(_2455, _2456));
            float _2636 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : min(_2626, 0.0));
            float _2637 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : min(_2627, 0.0));
            _2706 = ((abs(_2462 / _2451) * cbSceneParam._m0[80u].y) * ((((_2636 - _2637) * 2.0) - ((exp2(_2471 * (isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0)))) - exp2(_2471 * (isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0))))) * _2625)) - ((exp2(_2473 * _2636) - exp2(_2473 * _2637)) * _2625))) + (_2465 * cbSceneParam._m0[80u].z);
        }
        vec4 _2708 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2375, _2376, 1.0), 0.0);
        float _2717 = exp2((_2706 * (-1.44269502162933349609375)) * (1.0 - _2708.w));
        float _2718 = log2(_2717);
        float _2734 = log2(_2395);
        _2475 = (exp2(_2734 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2718 * cbSceneParam._m0[78u].x)) * _2708.x) / cbSceneParam._m0[78u].x)) + _2392;
        _2477 = (exp2(_2734 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2718 * cbSceneParam._m0[78u].y)) * _2708.y) / cbSceneParam._m0[78u].y)) + _2393;
        _2479 = (exp2(_2734 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2718 * cbSceneParam._m0[78u].z)) * _2708.z) / cbSceneParam._m0[78u].z)) + _2394;
        _2481 = _2717 * _2395;
    }
    else
    {
        _2475 = _2392;
        _2477 = _2393;
        _2479 = _2394;
        _2481 = _2395;
    }
    bool _2744;
    vec4 _2491;
    vec4 _2513;
    float _2515;
    float _2519;
    float _2520;
    float _2521;
    float _2522;
    bool _2532;
    for (;;)
    {
        _2491 = cbMatDynParam._m0[0u];
        float _2493 = roundEven(_2491.y);
        bool _2494 = _2493 == 3.0;
        float _2495 = log2(_2481);
        float _2502 = exp2(_2495 * cbSceneParam._m0[78u].x) * _2364;
        float _2503 = exp2(_2495 * cbSceneParam._m0[78u].y) * _2365;
        float _2504 = exp2(_2495 * cbSceneParam._m0[78u].z) * _2366;
        float _2511 = _839 + (-0.5);
        _2513 = cbMtdParam._m0[1u];
        _2515 = _2513.y * _2511;
        float _2518 = (_2493 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2519 = _2518 * (_2494 ? _2502 : (_2502 + (cbSceneParam._m0[72u].w * _2475)));
        _2520 = _2518 * (_2494 ? _2503 : (_2503 + (cbSceneParam._m0[72u].w * _2477)));
        _2521 = _2518 * (_2494 ? _2504 : (_2504 + (cbSceneParam._m0[72u].w * _2479)));
        _2522 = _2511 * 0.999000012874603271484375;
        _2532 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2532)
        {
            if ((cbInstanceData._m0[_890 + 7u].x + _2522) < 0.5)
            {
                _2744 = true;
                break;
            }
        }
        uint _2660 = _892 + uint(_2491.w);
        if ((cbInstanceData._m0[_2660].w < 1.0) && ((cbInstanceData._m0[_2660].w + _2522) < 0.5))
        {
            _2744 = true;
            break;
        }
        if ((_2515 + 1.0) < _2513.x)
        {
            _2744 = true;
            break;
        }
        _2744 = false;
        break;
    }
    float _2975;
    if (_2744)
    {
        discard_state = true;
        _2975 = 0.0;
    }
    else
    {
        _2975 = cbInstanceData._m0[_2367].w;
    }
    SV_Target.x = _2519;
    SV_Target.y = _2520;
    SV_Target.z = _2521;
    SV_Target.w = _2975;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2367].w;
    discard_exit();
}


