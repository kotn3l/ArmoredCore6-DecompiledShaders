#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1034;
float _3186;
float _3187;
float _3188;
float _3189;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _280 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _283 = _280.x;
    vec4 _301 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _318 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _283) + cbMtdParam._m0[12u].x) * _301.x;
    float _320 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _283) + cbMtdParam._m0[12u].y) * _301.y;
    float _322 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _283) + cbMtdParam._m0[12u].z) * _301.z;
    vec4 _343 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _379 = cbMtdParam._m0[21u].w + _265;
    float _380 = cbMtdParam._m0[22u].x + _266;
    float _381 = cbMtdParam._m0[22u].y + _267;
    float _395 = (-0.0) - dot(vec3(_379, _380, _381), vec3(_194, _195, _196));
    float _396 = (-0.0) - dot(vec3(_379, _380, _381), vec3(_208, _209, _210));
    float _397 = (-0.0) - dot(vec3(_379, _380, _381), vec3((-0.0) - _201, (-0.0) - _202, (-0.0) - _203));
    float _401 = inversesqrt(dot(vec3(_395, _396, _397), vec3(_395, _396, _397)));
    float _404 = _401 * _397;
    float _407 = ((_401 * _395) + ((cbMtdParam._m0[19u].w * _283) * ((_343.x * 2.0) + (-1.0)))) * cbMtdParam._m0[18u].z;
    float _408 = ((_401 * _396) + ((cbMtdParam._m0[20u].x * _283) * ((_343.y * 2.0) + (-1.0)))) * cbMtdParam._m0[18u].y;
    float _409 = fract(TEXCOORD.x);
    float _410 = fract(TEXCOORD.y);
    float _416;
    if (_407 > 0.0)
    {
        _416 = (1.0 - _409) / _407;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_407 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _409) / _407;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _416 = frontier_phi_3_2_ladder;
    }
    float _424;
    if (_408 > 0.0)
    {
        _424 = (1.0 - _410) / _408;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_408 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _410) / _408;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _424 = frontier_phi_7_6_ladder;
    }
    float _428 = (_404 > 0.0) ? (cbMtdParam._m0[15u].x / _404) : 5000.0;
    float _429 = isnan(_424) ? _416 : (isnan(_416) ? _424 : min(_416, _424));
    float _430 = isnan(_428) ? _429 : (isnan(_429) ? _428 : min(_429, _428));
    float _434 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _441 = ((_430 * _404) + _434) / _434;
    vec4 _465 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * ((((((_409 + (-0.5)) + (_430 * _407)) / _441) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((((((_410 + (-0.5)) + (_430 * _408)) / _441) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    vec4 _492 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _496 = _492.z;
    float _499 = (_492.x * 2.0) + (-1.0);
    float _500 = (_492.y * 2.0) + (-1.0);
    float _501 = dot(vec2(_499, _500), vec2(_499, _500));
    float _3208 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _506 = sqrt(1.0 - (isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0))));
    float _509 = fma(_506, _201, fma(_500, _208, _499 * _194));
    float _512 = fma(_506, _202, fma(_500, _209, _499 * _195));
    float _515 = fma(_506, _203, fma(_500, _210, _499 * _196));
    float _519 = inversesqrt(dot(vec3(_509, _512, _515), vec3(_509, _512, _515)));
    float _520 = _519 * _509;
    float _521 = _519 * _512;
    float _522 = _519 * _515;
    float _3219 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _523 = isnan(1.0) ? _3219 : (isnan(_3219) ? 1.0 : min(_3219, 1.0));
    float _3230 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3241 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3252 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _542 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _546 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _547 = _265 * _546;
    float _548 = _266 * _546;
    float _549 = _267 * _546;
    vec4 _554 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _556 = _554.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _715 = sqrt(((_265 * _265) + (_266 * _266)) + (_267 * _267));
        float _721 = (cbMatDynParam._m0[5u].x * _715) + cbMatDynParam._m0[5u].y;
        float _3263 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _722 = isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0));
        float _726 = (cbMatDynParam._m0[5u].z * _715) + cbMatDynParam._m0[5u].w;
        float _3274 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0))) - _722)) + _722) < ((_556 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _569 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _570 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _590 = fma(_522, cbSceneParam._m0[5u].z, fma(_521, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _520));
    float _593 = fma(_522, cbSceneParam._m0[6u].z, fma(_521, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _520));
    float _596 = fma(_522, cbSceneParam._m0[7u].z, fma(_521, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _520));
    uint _609 = uint(roundEven(NORMAL.w)) * 13u;
    uint _611 = _609 + 9u;
    uint _612 = _611 + uint(cbMatDynParam._m0[0u].w);
    float _618 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3230 : (isnan(_3230) ? 1.0 : min(_3230, 1.0)))) * cbInstanceData._m0[_612].x;
    float _619 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0)))) * cbInstanceData._m0[_612].y;
    float _620 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0)))) * cbInstanceData._m0[_612].z;
    float _3285 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _621 = isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0));
    float _3296 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _622 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
    float _3307 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _623 = isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0));
    vec4 _632 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _569, cbSceneParam._m0[86u].y * _570));
    float _635 = _632.x * TEXCOORD.z;
    float _636 = dot(vec3(_520, _521, _522), vec3(_547, _548, _549));
    float _639 = _636 * 2.0;
    float _643 = (_639 * _520) - _547;
    float _644 = (_639 * _521) - _548;
    float _645 = (_639 * _522) - _549;
    float _649 = abs(dot(vec3(_547, _548, _549), vec3(_520, _521, _522)));
    float _3318 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _651 = sqrt(_523);
    float _664 = exp2((_651 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_651 * 3.0));
    float _696 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _700 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _704 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1033;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _760 = fma(_704, cbModelParam._m0[26u].z, fma(_700, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _696));
        float _764 = fma(_704, cbModelParam._m0[27u].z, fma(_700, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _696));
        float _768 = fma(_704, cbModelParam._m0[28u].z, fma(_700, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _696));
        float _791 = _696 + _520;
        float _792 = _700 + _521;
        float _793 = _704 + _522;
        float _803 = fma(_793, cbModelParam._m0[26u].z, fma(_792, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _791)) - _760;
        float _804 = fma(_793, cbModelParam._m0[27u].z, fma(_792, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _791)) - _764;
        float _805 = fma(_793, cbModelParam._m0[28u].z, fma(_792, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _791)) - _768;
        float _809 = inversesqrt(dot(vec3(_803, _804, _805), vec3(_803, _804, _805)));
        float _822 = ((_809 * _803) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_760 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _823 = ((_809 * _804) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_764 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _824 = ((_809 * _805) / cbModelParam._m0[34u].z) + ((((((_768 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _827 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        vec4 _834 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        vec4 _841 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        vec4 _848 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        float _861 = exp2((_827.w + (-0.5)) * 20.0) * 2.0;
        float _862 = _861 * (_827.x + (-0.5));
        float _863 = _861 * (_827.y + (-0.5));
        float _864 = _861 * (_827.z + (-0.5));
        float _871 = exp2((_834.w + (-0.5)) * 20.0) * 2.0;
        float _872 = _871 * (_834.x + (-0.5));
        float _873 = _871 * (_834.y + (-0.5));
        float _874 = _871 * (_834.z + (-0.5));
        float _881 = exp2((_841.w + (-0.5)) * 20.0) * 2.0;
        float _882 = _881 * (_841.x + (-0.5));
        float _883 = _881 * (_841.y + (-0.5));
        float _884 = _881 * (_841.z + (-0.5));
        float _891 = exp2((_848.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_848.x + (-0.5));
        float _893 = _891 * (_848.y + (-0.5));
        float _894 = _891 * (_848.z + (-0.5));
        float _895 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _896 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _897 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _898 = _862 * 0.5;
        float _899 = _872 * 0.5;
        float _900 = _882 * 0.5;
        float _901 = dot(vec3(_898, _899, _900), vec3(_898, _899, _900));
        float _906 = (_901 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_901);
        float _915 = (dot(vec3(_520, _521, _522), vec3(_906 * _898, _906 * _899, _906 * _900)) + 1.0) * 0.5;
        float _3344 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _925 = sqrt(((_899 * _899) + (_898 * _898)) + (_900 * _900)) / (_895 + 9.9999997473787516355514526367188e-06);
        float _3355 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _926 = isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0));
        float _927 = _926 * 2.0;
        float _931 = (1.0 - _926) / (_926 + 1.0);
        float _3366 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
        float _941 = ((((1.0 - _932) * (_927 + 2.0)) * exp2(log2(isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0))) * (_927 + 1.0))) + _932) * _895;
        float _942 = _863 * 0.5;
        float _943 = _873 * 0.5;
        float _944 = _883 * 0.5;
        float _945 = dot(vec3(_942, _943, _944), vec3(_942, _943, _944));
        float _950 = (_945 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_945);
        float _958 = (dot(vec3(_520, _521, _522), vec3(_950 * _942, _950 * _943, _950 * _944)) + 1.0) * 0.5;
        float _3377 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _967 = sqrt(((_943 * _943) + (_942 * _942)) + (_944 * _944)) / (_896 + 9.9999997473787516355514526367188e-06);
        float _3388 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
        float _969 = _968 * 2.0;
        float _973 = (1.0 - _968) / (_968 + 1.0);
        float _3399 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
        float _983 = ((((1.0 - _974) * (_969 + 2.0)) * exp2(log2(isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0))) * (_969 + 1.0))) + _974) * _896;
        float _984 = _864 * 0.5;
        float _985 = _874 * 0.5;
        float _986 = _884 * 0.5;
        float _987 = dot(vec3(_984, _985, _986), vec3(_984, _985, _986));
        float _992 = (_987 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_987);
        float _1000 = (dot(vec3(_520, _521, _522), vec3(_992 * _984, _992 * _985, _992 * _986)) + 1.0) * 0.5;
        float _3410 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1009 = sqrt(((_985 * _985) + (_984 * _984)) + (_986 * _986)) / (_897 + 9.9999997473787516355514526367188e-06);
        float _3421 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
        float _1011 = _1010 * 2.0;
        float _1015 = (1.0 - _1010) / (_1010 + 1.0);
        float _3432 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _1025 = ((((1.0 - _1016) * (_1011 + 2.0)) * exp2(log2(isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0))) * (_1011 + 1.0))) + _1016) * _897;
        _1033 = _864;
        _1035 = _863;
        _1036 = _862;
        _1037 = _874;
        _1038 = _873;
        _1039 = _872;
        _1040 = _884;
        _1041 = _883;
        _1042 = _882;
        _1043 = _897;
        _1044 = _896;
        _1045 = _895;
        _1046 = cbModelParam._m0[36u].z * (isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0)));
        _1047 = cbModelParam._m0[36u].z * (isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0)));
        _1048 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0)));
    }
    else
    {
        _1033 = _1034;
        _1035 = _1034;
        _1036 = _1034;
        _1037 = _1034;
        _1038 = _1034;
        _1039 = _1034;
        _1040 = _1034;
        _1041 = _1034;
        _1042 = _1034;
        _1043 = _1034;
        _1044 = _1034;
        _1045 = _1034;
        _1046 = 0.0;
        _1047 = 0.0;
        _1048 = 0.0;
    }
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1077 = fma(_704, cbModelParam._m0[30u].z, fma(_700, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _696));
        float _1081 = fma(_704, cbModelParam._m0[31u].z, fma(_700, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _696));
        float _1085 = fma(_704, cbModelParam._m0[32u].z, fma(_700, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _696));
        float _1108 = _696 + _520;
        float _1109 = _700 + _521;
        float _1110 = _704 + _522;
        float _1120 = fma(_1110, cbModelParam._m0[30u].z, fma(_1109, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1108)) - _1077;
        float _1121 = fma(_1110, cbModelParam._m0[31u].z, fma(_1109, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1108)) - _1081;
        float _1122 = fma(_1110, cbModelParam._m0[32u].z, fma(_1109, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1108)) - _1085;
        float _1126 = inversesqrt(dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122)));
        float _1139 = ((_1126 * _1120) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1077 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1140 = ((_1126 * _1121) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1081 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1141 = ((_1126 * _1122) / cbModelParam._m0[35u].z) + ((((((_1085 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        float _1176 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1143.x + (-0.5));
        float _1178 = _1176 * (_1143.y + (-0.5));
        float _1179 = _1176 * (_1143.z + (-0.5));
        float _1186 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1150.x + (-0.5));
        float _1188 = _1186 * (_1150.y + (-0.5));
        float _1189 = _1186 * (_1150.z + (-0.5));
        float _1196 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1157.x + (-0.5));
        float _1198 = _1196 * (_1157.y + (-0.5));
        float _1199 = _1196 * (_1157.z + (-0.5));
        float _1206 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1164.x + (-0.5));
        float _1208 = _1206 * (_1164.y + (-0.5));
        float _1209 = _1206 * (_1164.z + (-0.5));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1213 = _1177 * 0.5;
        float _1214 = _1187 * 0.5;
        float _1215 = _1197 * 0.5;
        float _1216 = dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215));
        float _1221 = (_1216 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1216);
        float _1229 = (dot(vec3(_520, _521, _522), vec3(_1221 * _1213, _1221 * _1214, _1221 * _1215)) + 1.0) * 0.5;
        float _3473 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1238 = sqrt(((_1214 * _1214) + (_1213 * _1213)) + (_1215 * _1215)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _3484 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _3495 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0))) * (_1240 + 1.0))) + _1245) * _1210;
        float _1255 = _1178 * 0.5;
        float _1256 = _1188 * 0.5;
        float _1257 = _1198 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1271 = (dot(vec3(_520, _521, _522), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _3506 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1280 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _3517 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _1282 = _1281 * 2.0;
        float _1286 = (1.0 - _1281) / (_1281 + 1.0);
        float _3528 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _1296 = ((((1.0 - _1287) * (_1282 + 2.0)) * exp2(log2(isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))) * (_1282 + 1.0))) + _1287) * _1211;
        float _1297 = _1179 * 0.5;
        float _1298 = _1189 * 0.5;
        float _1299 = _1199 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1313 = (dot(vec3(_520, _521, _522), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _3539 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1322 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1212 + 9.9999997473787516355514526367188e-06);
        float _3550 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _3561 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))) * (_1324 + 1.0))) + _1329) * _1212;
        _1346 = _1179;
        _1347 = _1178;
        _1348 = _1177;
        _1349 = _1189;
        _1350 = _1188;
        _1351 = _1187;
        _1352 = _1199;
        _1353 = _1198;
        _1354 = _1197;
        _1355 = _1212;
        _1356 = _1211;
        _1357 = _1210;
        _1358 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
        _1359 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)));
        _1360 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
    }
    else
    {
        _1346 = _1034;
        _1347 = _1034;
        _1348 = _1034;
        _1349 = _1034;
        _1350 = _1034;
        _1351 = _1034;
        _1352 = _1034;
        _1353 = _1034;
        _1354 = _1034;
        _1355 = _1034;
        _1356 = _1034;
        _1357 = _1034;
        _1358 = 0.0;
        _1359 = 0.0;
        _1360 = 0.0;
    }
    float _1370 = (cbModelParam._m0[1u].x * (_1358 - _1046)) + _1046;
    float _1371 = (cbModelParam._m0[1u].x * (_1359 - _1047)) + _1047;
    float _1372 = (cbModelParam._m0[1u].x * (_1360 - _1048)) + _1048;
    float _1393 = fma(_1372, cbSceneParam._m0[89u].z, fma(_1371, cbSceneParam._m0[89u].y, _1370 * cbSceneParam._m0[89u].x));
    float _1396 = fma(_1372, cbSceneParam._m0[90u].z, fma(_1371, cbSceneParam._m0[90u].y, _1370 * cbSceneParam._m0[90u].x));
    float _1399 = fma(_1372, cbSceneParam._m0[91u].z, fma(_1371, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1370));
    float _1414 = _643 * 0.5;
    float _1415 = _644 * 0.5;
    float _1416 = _645 * 0.5;
    float _1417 = dot(vec4(_1414, _1415, _1416, 1.0), vec4(_1348, _1351, _1354, _1357));
    float _1420 = dot(vec4(_1414, _1415, _1416, 1.0), vec4(_1347, _1350, _1353, _1356));
    float _1423 = dot(vec4(_1414, _1415, _1416, 1.0), vec4(_1346, _1349, _1352, _1355));
    float _1457;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1430 = dot(vec4(_1414, _1415, _1416, 1.0), vec4(_1033, _1037, _1040, _1043));
        float _1434 = dot(vec4(_1414, _1415, _1416, 1.0), vec4(_1035, _1038, _1041, _1044));
        float _1438 = dot(vec4(_1414, _1415, _1416, 1.0), vec4(_1036, _1039, _1042, _1045));
        float _1445 = dot(vec4(cbModelParam._m0[39u]), vec4(_1414, _1415, _1416, 1.0));
        _1457 = dot(vec3(isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)), isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)), isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1445) ? 0.0 : (isnan(0.0) ? _1445 : max(0.0, _1445))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1457 = 1.0;
    }
    float _1468;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1459 = dot(vec4(cbModelParam._m0[40u]), vec4(_1414, _1415, _1416, 1.0));
        _1468 = dot(vec3(isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)), isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)), isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1459) ? 0.0 : (isnan(0.0) ? _1459 : max(0.0, _1459))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1468 = 1.0;
    }
    float _1472 = (_1468 * cbModelParam._m0[1u].x) + (_1457 * (1.0 - cbModelParam._m0[1u].x));
    float _1482 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _523);
    float _1483 = isnan(_1482) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1482 : min(cbModelParam._m0[25u].z, _1482));
    float _1564;
    float _1566;
    float _1568;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1531 = fma(_704, cbModelParam._m0[13u].z, fma(_700, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _696)) + cbModelParam._m0[13u].w;
        float _1535 = fma(_704, cbModelParam._m0[14u].z, fma(_700, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _696)) + cbModelParam._m0[14u].w;
        float _1539 = fma(_704, cbModelParam._m0[15u].z, fma(_700, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _696)) + cbModelParam._m0[15u].w;
        float _1542 = fma(_645, cbModelParam._m0[13u].z, fma(_644, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _643));
        float _1545 = fma(_645, cbModelParam._m0[14u].z, fma(_644, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _643));
        float _1548 = fma(_645, cbModelParam._m0[15u].z, fma(_644, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _643));
        float _1576;
        if (_1542 > 0.0)
        {
            _1576 = abs((1.0 - _1531) / _1542);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1531 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1576 = frontier_phi_25_23_ladder;
        }
        float _1945;
        if (_1545 > 0.0)
        {
            _1945 = abs((1.0 - _1535) / _1545);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1545 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1535 + 1.0) / _1545);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1945 = frontier_phi_34_30_ladder;
        }
        float _2269;
        if (_1548 > 0.0)
        {
            _2269 = abs((1.0 - _1539) / _1548);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1548 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1539 + 1.0) / _1548);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _2269 = frontier_phi_48_41_ladder;
        }
        float _2271 = isnan(_1945) ? _1576 : (isnan(_1576) ? _1945 : min(_1576, _1945));
        float _2272 = isnan(_2269) ? _2271 : (isnan(_2271) ? _2269 : min(_2271, _2269));
        float _2276 = (_2272 * _1542) + _1531;
        float _2277 = (_2272 * _1545) + _1535;
        float _2278 = (_2272 * _1548) + _1539;
        float _2279 = _2272 * 9.9999997473787516355514526367188e-05;
        float _2280 = (-1.0) - _2279;
        float _2282 = _2279 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2278 > _2282) || ((_2278 < _2280) || ((_2277 > _2282) || ((_2277 < _2280) || ((_2276 < _2280) || (_2276 > _2282))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2420 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2278, cbModelParam._m0[9u].z, fma(_2277, cbModelParam._m0[9u].y, _2276 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2278, cbModelParam._m0[10u].z, fma(_2277, cbModelParam._m0[10u].y, _2276 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2278, cbModelParam._m0[11u].z, fma(_2277, cbModelParam._m0[11u].y, _2276 * cbModelParam._m0[11u].x))), _1483);
            frontier_phi_24_48_ladder = _2420.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _2420.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _2420.x * cbModelParam._m0[1u].y;
        }
        _1564 = frontier_phi_24_48_ladder_2;
        _1566 = frontier_phi_24_48_ladder_1;
        _1568 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1552 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_643, _644, _645), _1483);
        _1564 = _1552.x * cbModelParam._m0[1u].y;
        _1566 = _1552.y * cbModelParam._m0[1u].y;
        _1568 = _1552.z * cbModelParam._m0[1u].y;
    }
    float _1572 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _523);
    float _1573 = isnan(_1572) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1572 : min(cbModelParam._m0[25u].w, _1572));
    float _1661;
    float _1663;
    float _1665;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1625 = fma(_704, cbModelParam._m0[21u].z, fma(_700, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _696)) + cbModelParam._m0[21u].w;
        float _1629 = fma(_704, cbModelParam._m0[22u].z, fma(_700, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _696)) + cbModelParam._m0[22u].w;
        float _1633 = fma(_704, cbModelParam._m0[23u].z, fma(_700, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _696)) + cbModelParam._m0[23u].w;
        float _1636 = fma(_645, cbModelParam._m0[21u].z, fma(_644, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _643));
        float _1639 = fma(_645, cbModelParam._m0[22u].z, fma(_644, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _643));
        float _1642 = fma(_645, cbModelParam._m0[23u].z, fma(_644, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _643));
        float _1950;
        if (_1636 > 0.0)
        {
            _1950 = abs((1.0 - _1625) / _1636);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1636 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1625 + 1.0) / _1636);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1950 = frontier_phi_36_32_ladder;
        }
        float _2295;
        if (_1639 > 0.0)
        {
            _2295 = abs((1.0 - _1629) / _1639);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1629 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _2295 = frontier_phi_50_43_ladder;
        }
        float _2485;
        if (_1642 > 0.0)
        {
            _2485 = abs((1.0 - _1633) / _1642);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1633 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2485 = frontier_phi_68_61_ladder;
        }
        float _2487 = isnan(_2295) ? _1950 : (isnan(_1950) ? _2295 : min(_1950, _2295));
        float _2488 = isnan(_2485) ? _2487 : (isnan(_2487) ? _2485 : min(_2487, _2485));
        float _2492 = (_2488 * _1636) + _1625;
        float _2493 = (_2488 * _1639) + _1629;
        float _2494 = (_2488 * _1642) + _1633;
        float _2495 = _2488 * 9.9999997473787516355514526367188e-05;
        float _2496 = (-1.0) - _2495;
        float _2498 = _2495 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2494 > _2498) || ((_2494 < _2496) || ((_2493 > _2498) || ((_2493 < _2496) || ((_2492 < _2496) || (_2492 > _2498))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2736 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2494, cbModelParam._m0[17u].z, fma(_2493, cbModelParam._m0[17u].y, _2492 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2494, cbModelParam._m0[18u].z, fma(_2493, cbModelParam._m0[18u].y, _2492 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2494, cbModelParam._m0[19u].z, fma(_2493, cbModelParam._m0[19u].y, _2492 * cbModelParam._m0[19u].x))), _1573);
            frontier_phi_33_68_ladder = _2736.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2736.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2736.x * cbModelParam._m0[1u].z;
        }
        _1661 = frontier_phi_33_68_ladder_2;
        _1663 = frontier_phi_33_68_ladder;
        _1665 = frontier_phi_33_68_ladder_1;
    }
    else
    {
        vec4 _1645 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_643, _644, _645), _1573);
        _1661 = _1645.x * cbModelParam._m0[1u].z;
        _1663 = _1645.y * cbModelParam._m0[1u].z;
        _1665 = _1645.z * cbModelParam._m0[1u].z;
    }
    float _1677 = ((((1.0 - _664) * ((_651 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_664 * _651)) * _635;
    float _1678 = _1677 * ((cbModelParam._m0[1u].w * (_1661 - _1564)) + _1564);
    float _1679 = _1677 * ((cbModelParam._m0[1u].w * (_1663 - _1566)) + _1566);
    float _1680 = _1677 * ((cbModelParam._m0[1u].w * (_1665 - _1568)) + _1568);
    float _1683 = fma(_1680, cbSceneParam._m0[89u].z, fma(_1679, cbSceneParam._m0[89u].y, _1678 * cbSceneParam._m0[89u].x));
    float _1686 = fma(_1680, cbSceneParam._m0[90u].z, fma(_1679, cbSceneParam._m0[90u].y, _1678 * cbSceneParam._m0[90u].x));
    float _1689 = fma(_1680, cbSceneParam._m0[91u].z, fma(_1679, cbSceneParam._m0[91u].y, _1678 * cbSceneParam._m0[91u].x));
    vec4 _1697 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_569, _570));
    float _1699 = _1697.w;
    float _1711 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1699);
    float _1712 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1699);
    float _1713 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1699);
    uvec4 _1717 = floatBitsToUint(cbInstanceData._m0[_609 + 5u]);
    uint _1719 = _1717.x * 14u;
    uint _1720 = _1719 + 13u;
    float _1725 = _635 + (-1.0);
    float _1728 = (cbLight._m0[_1720].x * _1725) + 1.0;
    float _1729 = (cbLight._m0[_1720].y * _1725) + 1.0;
    uint _1730 = _1719 + 5u;
    float _1736 = isnan(1.0) ? _1729 : (isnan(_1729) ? 1.0 : min(_1729, 1.0));
    uint _1740 = _1719 + 4u;
    float _1749 = isnan(1.0) ? _1728 : (isnan(_1728) ? 1.0 : min(_1728, 1.0));
    uint _1753 = _1719 | 1u;
    float _1764 = dot(vec3(cbLight._m0[_1719].xyz), vec3(_520, _521, _522));
    float _1767 = dot(vec3(cbLight._m0[_1753].xyz), vec3(_520, _521, _522));
    float _3697 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
    float _3708 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
    float _1772 = (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * 0.3183098733425140380859375;
    float _1774 = (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * 0.3183098733425140380859375;
    float _1781 = ((cbLight._m0[_1730].x * _1736) * _1774) + (((cbLight._m0[_1740].x * _1711) * _1749) * _1772);
    float _1782 = ((_1736 * cbLight._m0[_1730].y) * _1774) + (((cbLight._m0[_1740].y * _1712) * _1749) * _1772);
    float _1783 = ((_1736 * cbLight._m0[_1730].z) * _1774) + (((cbLight._m0[_1740].z * _1713) * _1749) * _1772);
    uint _1785 = _1719 + 8u;
    float _1798 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1719].w)) * _523) * 0.949999988079071044921875);
    float _1799 = _1798 * _1798;
    float _1800 = cbLight._m0[_1719].x + _547;
    float _1801 = cbLight._m0[_1719].y + _548;
    float _1802 = cbLight._m0[_1719].z + _549;
    float _1806 = inversesqrt(dot(vec3(_1800, _1801, _1802), vec3(_1800, _1801, _1802)));
    float _1807 = _1806 * _1800;
    float _1808 = _1806 * _1801;
    float _1809 = _1806 * _1802;
    float _1810 = dot(vec3(_520, _521, _522), vec3(cbLight._m0[_1719].xyz));
    float _3719 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1813 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _3730 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _1814 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    float _1815 = dot(vec3(_520, _521, _522), vec3(_1807, _1808, _1809));
    float _3741 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1818 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _1819 = dot(vec3(cbLight._m0[_1719].xyz), vec3(_1807, _1808, _1809));
    float _3752 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    float _1823 = _1799 * _1799;
    float _1827 = ((_1818 * _1818) * (_1823 + (-1.0))) + 1.0;
    float _1838 = (exp2(log2(1.0 - (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1839 = 1.0 - _1799;
    float _1850 = (0.5 / (((_1814 * ((_1813 * _1839) + _1799)) + 9.9999999392252902907785028219223e-09) + (((_1814 * _1839) + _1799) * _1813))) * _1813;
    float _3763 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _1852 = (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_1823 / ((_1827 * _1827) * 3.141590118408203125));
    uint _1866 = _1719 + 9u;
    float _1877 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1753].w)) * _523) * 0.949999988079071044921875);
    float _1878 = _1877 * _1877;
    float _1879 = cbLight._m0[_1753].x + _547;
    float _1880 = cbLight._m0[_1753].y + _548;
    float _1881 = cbLight._m0[_1753].z + _549;
    float _1885 = inversesqrt(dot(vec3(_1879, _1880, _1881), vec3(_1879, _1880, _1881)));
    float _1886 = _1885 * _1879;
    float _1887 = _1885 * _1880;
    float _1888 = _1885 * _1881;
    float _1889 = dot(vec3(_520, _521, _522), vec3(cbLight._m0[_1753].xyz));
    float _3774 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1892 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _1893 = dot(vec3(_520, _521, _522), vec3(_1886, _1887, _1888));
    float _3785 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _1896 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _1897 = dot(vec3(cbLight._m0[_1753].xyz), vec3(_1886, _1887, _1888));
    float _3796 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1901 = _1878 * _1878;
    float _1905 = ((_1896 * _1896) * (_1901 + (-1.0))) + 1.0;
    float _1914 = (exp2(log2(1.0 - (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1915 = 1.0 - _1878;
    float _1925 = (0.5 / (((_1814 * ((_1892 * _1915) + _1878)) + 9.9999999392252902907785028219223e-09) + (((_1814 * _1915) + _1878) * _1892))) * _1892;
    float _3807 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _1927 = (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * (_1901 / ((_1905 * _1905) * 3.141590118408203125));
    float _1937 = (((_1914 * cbLight._m0[_1866].x) * _1927) * _1736) + ((((cbLight._m0[_1785].x * _1711) * _1838) * _1852) * _1749);
    float _1938 = (((_1914 * cbLight._m0[_1866].y) * _1927) * _1736) + ((((cbLight._m0[_1785].y * _1712) * _1838) * _1852) * _1749);
    float _1939 = (((_1914 * cbLight._m0[_1866].z) * _1927) * _1736) + ((((cbLight._m0[_1785].z * _1713) * _1838) * _1852) * _1749);
    float _2054;
    float _2056;
    float _2058;
    float _2060;
    float _2062;
    float _2064;
    if (_1717.y == 0u)
    {
        float _1994 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1995 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1994;
        float _1996 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1994;
        float _1997 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1994;
        uvec4 _2009 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2010 = _2009.x;
        uint _2021 = uint((float(_2009.y) * floor(float(uint(cbSceneParam._m0[85u].y * _570) / _2010))) + floor(float(uint(cbSceneParam._m0[85u].x * _569) / _2010)));
        float _2031 = (log2(_1997 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2032 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        uint _2035 = uint(isnan(14.0) ? _2032 : (isnan(_2032) ? 14.0 : min(_2032, 14.0)));
        uvec4 _2040 = texelFetch(g_lightClusterGridBuffer, int(((_2035 << 2u) + (_2021 << 6u)) >> 2u));
        uint _2041 = _2040.x;
        uint _2042 = _2009.z;
        float _2148;
        float _2150;
        float _2152;
        float _2154;
        float _2156;
        float _2158;
        if (((((1u << ((_2042 >> 4u) & 15u)) + 4294967295u) & _2041) == 0u) || ((_2042 & 240u) == 0u))
        {
            _2148 = 0.0;
            _2150 = 0.0;
            _2152 = 0.0;
            _2154 = 0.0;
            _2156 = 0.0;
            _2158 = 0.0;
        }
        else
        {
            float _2149;
            float _2151;
            float _2153;
            float _2155;
            float _2157;
            float _2159;
            float _2332 = 0.0;
            float _2333 = 0.0;
            float _2334 = 0.0;
            float _2335 = 0.0;
            float _2336 = 0.0;
            float _2337 = 0.0;
            uint _2338 = 0u;
            uint _2347;
            bool _2348;
            for (;;)
            {
                _2347 = texelFetch(g_lightClassification, int((((_2035 << 5u) + (_2021 << 9u)) + (_2338 << 2u)) >> 2u)).x;
                _2348 = _2347 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2348)
                {
                    frontier_phi_63_pred = _2334;
                    frontier_phi_63_pred_1 = _2337;
                    frontier_phi_63_pred_2 = _2336;
                    frontier_phi_63_pred_3 = _2335;
                    frontier_phi_63_pred_4 = _2333;
                    frontier_phi_63_pred_5 = _2332;
                }
                else
                {
                    float _2528;
                    float _2529;
                    float _2530;
                    float _2531;
                    float _2532;
                    float _2533;
                    uint _2534;
                    _2528 = _2332;
                    _2529 = _2333;
                    _2530 = _2334;
                    _2531 = _2335;
                    _2532 = _2336;
                    _2533 = _2337;
                    _2534 = _2347;
                    float _2429;
                    float _2430;
                    float _2431;
                    float _2432;
                    float _2433;
                    float _2434;
                    for (;;)
                    {
                        uint _2538 = uint(findLSB(_2534)) + (_2338 << 5u);
                        uint _2535 = (_2534 + 4294967295u) & _2534;
                        uint _2540 = _2538 * 48u;
                        vec4 _2554 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2540)).x, texelFetch(g_PointLightRenderingBuffer, int(_2540 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2540 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2540 + 3u)).x));
                        uint _2560 = (_2538 * 48u) + 4u;
                        vec4 _2573 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2560)).x, texelFetch(g_PointLightRenderingBuffer, int(_2560 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2560 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2560 + 3u)).x));
                        uint _2579 = (_2538 * 48u) + 8u;
                        vec3 _2590 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2579)).x, texelFetch(g_PointLightRenderingBuffer, int(_2579 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2579 + 2u)).x));
                        float _2594 = _2554.x - _1995;
                        float _2595 = _2554.y - _1996;
                        float _2596 = _2554.z - _1997;
                        float _2597 = dot(vec3(_2594, _2595, _2596), vec3(_2594, _2595, _2596));
                        float _2600 = inversesqrt(_2597);
                        float _2601 = _2600 * _2594;
                        float _2602 = _2600 * _2595;
                        float _2603 = _2600 * _2596;
                        float _2604 = dot(vec3(_590, _593, _596), vec3(_2601, _2602, _2603));
                        float _2609 = 1.0 - (_2597 * _2554.w);
                        float _3828 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
                        float _2610 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
                        float _2611 = sqrt(_2597) * _2573.w;
                        float _2614 = 1.39999997615814208984375 / (_2611 + 1.39999997615814208984375);
                        float _2615 = _2614 * _2614;
                        float _2618 = ((1.0 - _2615) * _2604) + _2615;
                        float _2621 = _2611 * _2611;
                        float _2625 = ((isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0))) * _2610) / ((_2621 * 0.699999988079071044921875) + 1.0);
                        float _2629 = (-0.0) - _1995;
                        float _2630 = (-0.0) - _1996;
                        float _2631 = (-0.0) - _1997;
                        float _2635 = inversesqrt(dot(vec3(_2629, _2630, _2631), vec3(_2629, _2630, _2631)));
                        float _2636 = _2635 * _2629;
                        float _2637 = _2635 * _2630;
                        float _2638 = _2635 * _2631;
                        float _2646 = exp2(log2(1.0 / ((_2621 * 3.5) + 5.0)) * 0.25);
                        float _2647 = 1.0 - _651;
                        float _2654 = sqrt(1.0 - ((1.0 - (_2647 * _2647)) * (1.0 - (_2646 * _2646))));
                        float _2655 = _2654 * _2654;
                        float _2656 = _2655 * _2655;
                        float _2657 = _2636 + _2601;
                        float _2658 = _2637 + _2602;
                        float _2659 = _2638 + _2603;
                        float _2663 = inversesqrt(dot(vec3(_2657, _2658, _2659), vec3(_2657, _2658, _2659)));
                        float _2667 = dot(vec3(_590, _593, _596), vec3(_2636, _2637, _2638));
                        float _3844 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
                        float _2670 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
                        float _2671 = dot(vec3(_590, _593, _596), vec3(_2663 * _2657, _2663 * _2658, _2663 * _2659));
                        float _3855 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
                        float _2674 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
                        float _2678 = ((_2674 * _2674) * (_2656 + (-1.0))) + 1.0;
                        float _2679 = _2614 * _2655;
                        float _2680 = _2679 * _2679;
                        float _2683 = ((1.0 - _2680) * _2604) + _2680;
                        float _3866 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
                        float _2684 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
                        float _2685 = 1.0 - _2655;
                        float _2695 = (0.5 / (((_2684 * ((_2670 * _2685) + _2655)) + 9.9999999392252902907785028219223e-09) + (((_2684 * _2685) + _2655) * _2670))) * _2684;
                        float _3877 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
                        float _2706 = (((_2656 * 3.1415927410125732421875) * (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0)))) / ((_2678 * _2678) * ((_2621 * 2.1991131305694580078125) + 3.141590118408203125))) * _2610;
                        _2432 = (_2625 * _2573.x) + _2531;
                        _2433 = (_2625 * _2573.y) + _2532;
                        _2434 = (_2625 * _2573.z) + _2533;
                        _2429 = (_2706 * _2590.x) + _2528;
                        _2430 = (_2706 * _2590.y) + _2529;
                        _2431 = (_2706 * _2590.z) + _2530;
                        if (_2535 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2528 = _2429;
                            _2529 = _2430;
                            _2530 = _2431;
                            _2531 = _2432;
                            _2532 = _2433;
                            _2533 = _2434;
                            _2534 = _2535;
                        }
                    }
                    frontier_phi_63_pred = _2431;
                    frontier_phi_63_pred_1 = _2434;
                    frontier_phi_63_pred_2 = _2433;
                    frontier_phi_63_pred_3 = _2432;
                    frontier_phi_63_pred_4 = _2430;
                    frontier_phi_63_pred_5 = _2429;
                }
                _2153 = frontier_phi_63_pred;
                _2159 = frontier_phi_63_pred_1;
                _2157 = frontier_phi_63_pred_2;
                _2155 = frontier_phi_63_pred_3;
                _2151 = frontier_phi_63_pred_4;
                _2149 = frontier_phi_63_pred_5;
                uint _2339 = _2338 + 1u;
                if (_2339 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2332 = _2149;
                    _2333 = _2151;
                    _2334 = _2153;
                    _2335 = _2155;
                    _2336 = _2157;
                    _2337 = _2159;
                    _2338 = _2339;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2148 = _2149;
            _2150 = _2151;
            _2152 = _2153;
            _2154 = _2155;
            _2156 = _2157;
            _2158 = _2159;
        }
        uvec4 _2162 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2163 = _2162.z;
        uint _2165 = (_2163 >> 8u) & 15u;
        float _2300;
        float _2302;
        float _2304;
        float _2306;
        float _2308;
        float _2310;
        if (((4294967295u << _2165) & _2041) == 0u)
        {
            _2300 = _2148;
            _2302 = _2150;
            _2304 = _2152;
            _2306 = _2154;
            _2308 = _2156;
            _2310 = _2158;
        }
        else
        {
            float _2325 = inversesqrt(dot(vec3(_1995, _1996, _1997), vec3(_1995, _1996, _1997)));
            float _2326 = _2325 * _1995;
            float _2327 = _2325 * _1996;
            float _2328 = _2325 * _1997;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2165 < ((_2163 >> 12u) & 15u))
            {
                float _2301;
                float _2303;
                float _2305;
                float _2307;
                float _2309;
                float _2311;
                float _2511 = _2148;
                float _2512 = _2150;
                float _2513 = _2152;
                float _2514 = _2154;
                float _2515 = _2156;
                float _2516 = _2158;
                uint _2517 = _2165;
                uint _2526;
                bool _2527;
                for (;;)
                {
                    _2526 = texelFetch(g_lightClassification, int((((_2035 << 5u) + (_2021 << 9u)) + (_2517 << 2u)) >> 2u)).x;
                    _2527 = _2526 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2527)
                    {
                        frontier_phi_77_pred = _2516;
                        frontier_phi_77_pred_1 = _2515;
                        frontier_phi_77_pred_2 = _2514;
                        frontier_phi_77_pred_3 = _2513;
                        frontier_phi_77_pred_4 = _2512;
                        frontier_phi_77_pred_5 = _2511;
                    }
                    else
                    {
                        float _2741;
                        float _2742;
                        float _2743;
                        float _2744;
                        float _2745;
                        float _2746;
                        float _3035;
                        float _3036;
                        float _3037;
                        float _3038;
                        float _3039;
                        float _3040;
                        float _2754 = _2511;
                        float _2755 = _2512;
                        float _2756 = _2513;
                        float _2757 = _2514;
                        float _2758 = _2515;
                        float _2759 = _2516;
                        uint _2760 = _2526;
                        uint _2761;
                        vec4 _2786;
                        float _2787;
                        vec4 _2802;
                        vec3 _2814;
                        vec4 _2830;
                        vec4 _2845;
                        float _2891;
                        bool _2892;
                        for (;;)
                        {
                            uint _2771 = ((_2517 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2760));
                            _2761 = (_2760 + 4294967295u) & _2760;
                            uint _2773 = _2771 * 40u;
                            _2786 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2773)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2773 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2773 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2773 + 3u)).x));
                            _2787 = _2786.w;
                            uint _2789 = (_2771 * 40u) + 4u;
                            _2802 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2789)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2789 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2789 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2789 + 3u)).x));
                            uint _2804 = (_2771 * 40u) + 8u;
                            _2814 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2804)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2804 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2804 + 2u)).x));
                            uint _2817 = (_2771 * 40u) + 16u;
                            _2830 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2817)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 3u)).x));
                            uint _2832 = (_2771 * 40u) + 20u;
                            _2845 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2832)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 3u)).x));
                            uint _2847 = (_2771 * 40u) + 24u;
                            vec4 _2860 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2847)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 3u)).x));
                            uint _2866 = (_2771 * 40u) + 28u;
                            vec4 _2879 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2866)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 3u)).x));
                            _2891 = fma(_1997, _2879.z, fma(_1996, _2879.y, _2879.x * _1995)) + _2879.w;
                            _2892 = !((fma(_1997, _2860.z, fma(_1996, _2860.y, _2860.x * _1995)) + _2860.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2892)
                            {
                                float _2919 = _2786.x - _1995;
                                float _2920 = _2786.y - _1996;
                                float _2921 = _2786.z - _1997;
                                float _2922 = dot(vec3(_2919, _2920, _2921), vec3(_2919, _2920, _2921));
                                float _2925 = inversesqrt(_2922);
                                float _2926 = _2925 * _2919;
                                float _2927 = _2925 * _2920;
                                float _2928 = _2925 * _2921;
                                float _2932 = 1.0 - (_2922 / (_2787 * _2787));
                                float _3888 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
                                float _2933 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
                                float _2937 = sqrt(_2922) * _2802.w;
                                float _2939 = 1.39999997615814208984375 / (_2937 + 1.39999997615814208984375);
                                float _2940 = _2939 * _2939;
                                float _2943 = ((1.0 - _2940) * dot(vec3(_2926, _2927, _2928), vec3(_590, _593, _596))) + _2940;
                                float _2946 = _2937 * _2937;
                                float _2950 = (fma(_1997, _2830.z, fma(_1996, _2830.y, _2830.x * _1995)) + _2830.w) / _2891;
                                float _2951 = (fma(_1997, _2845.z, fma(_1996, _2845.y, _2845.x * _1995)) + _2845.w) / _2891;
                                float _2955 = 1.0 - dot(vec2(_2950, _2951), vec2(_2950, _2951));
                                float _3904 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
                                float _2956 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
                                float _2957 = _2956 * (((isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0))) * _2933) / ((_2946 * 0.699999988079071044921875) + 1.0));
                                float _2969 = exp2(log2(1.0 / ((_2946 * 3.5) + 5.0)) * 0.25);
                                float _2970 = 1.0 - _651;
                                float _2977 = sqrt(1.0 - ((1.0 - (_2970 * _2970)) * (1.0 - (_2969 * _2969))));
                                float _2978 = _2977 * _2977;
                                float _2979 = _2978 * _2978;
                                float _2980 = _2926 - _2326;
                                float _2981 = _2927 - _2327;
                                float _2982 = _2928 - _2328;
                                float _2986 = inversesqrt(dot(vec3(_2980, _2981, _2982), vec3(_2980, _2981, _2982)));
                                float _2990 = dot(vec3(_590, _593, _596), vec3((-0.0) - _2326, (-0.0) - _2327, (-0.0) - _2328));
                                float _3915 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
                                float _2993 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
                                float _2994 = dot(vec3(_590, _593, _596), vec3(_2986 * _2980, _2986 * _2981, _2986 * _2982));
                                float _3926 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                                float _2997 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
                                float _3001 = ((_2997 * _2997) * (_2979 + (-1.0))) + 1.0;
                                float _3002 = _2939 * _2978;
                                float _3003 = _3002 * _3002;
                                float _3009 = ((1.0 - _3003) * dot(vec3(_590, _593, _596), vec3(_2926, _2927, _2928))) + _3003;
                                float _3937 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                                float _3010 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
                                float _3011 = 1.0 - _2978;
                                float _3021 = (0.5 / (((_3010 * ((_2993 * _3011) + _2978)) + 9.9999999392252902907785028219223e-09) + (((_3010 * _3011) + _2978) * _2993))) * _3010;
                                float _3948 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                                float _3031 = (_2956 * _2933) * (((_2979 * 3.1415927410125732421875) * (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) / ((_3001 * _3001) * ((_2946 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _2957 * _2802.x;
                                frontier_phi_83_pred_1 = _2957 * _2802.z;
                                frontier_phi_83_pred_2 = _2957 * _2802.y;
                                frontier_phi_83_pred_3 = _3031 * _2814.z;
                                frontier_phi_83_pred_4 = _3031 * _2814.y;
                                frontier_phi_83_pred_5 = _3031 * _2814.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3038 = frontier_phi_83_pred;
                            _3040 = frontier_phi_83_pred_1;
                            _3039 = frontier_phi_83_pred_2;
                            _3037 = frontier_phi_83_pred_3;
                            _3036 = frontier_phi_83_pred_4;
                            _3035 = frontier_phi_83_pred_5;
                            _2744 = _3038 + _2757;
                            _2745 = _3039 + _2758;
                            _2746 = _3040 + _2759;
                            _2741 = _3035 + _2754;
                            _2742 = _3036 + _2755;
                            _2743 = _3037 + _2756;
                            if (_2761 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2754 = _2741;
                                _2755 = _2742;
                                _2756 = _2743;
                                _2757 = _2744;
                                _2758 = _2745;
                                _2759 = _2746;
                                _2760 = _2761;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2746;
                        frontier_phi_77_pred_1 = _2745;
                        frontier_phi_77_pred_2 = _2744;
                        frontier_phi_77_pred_3 = _2743;
                        frontier_phi_77_pred_4 = _2742;
                        frontier_phi_77_pred_5 = _2741;
                    }
                    _2311 = frontier_phi_77_pred;
                    _2309 = frontier_phi_77_pred_1;
                    _2307 = frontier_phi_77_pred_2;
                    _2305 = frontier_phi_77_pred_3;
                    _2303 = frontier_phi_77_pred_4;
                    _2301 = frontier_phi_77_pred_5;
                    uint _2518 = _2517 + 1u;
                    if (_2518 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2511 = _2301;
                        _2512 = _2303;
                        _2513 = _2305;
                        _2514 = _2307;
                        _2515 = _2309;
                        _2516 = _2311;
                        _2517 = _2518;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2303;
                frontier_phi_52_53_ladder_1 = _2311;
                frontier_phi_52_53_ladder_2 = _2309;
                frontier_phi_52_53_ladder_3 = _2307;
                frontier_phi_52_53_ladder_4 = _2305;
                frontier_phi_52_53_ladder_5 = _2301;
            }
            else
            {
                frontier_phi_52_53_ladder = _2150;
                frontier_phi_52_53_ladder_1 = _2158;
                frontier_phi_52_53_ladder_2 = _2156;
                frontier_phi_52_53_ladder_3 = _2154;
                frontier_phi_52_53_ladder_4 = _2152;
                frontier_phi_52_53_ladder_5 = _2148;
            }
            _2300 = frontier_phi_52_53_ladder_5;
            _2302 = frontier_phi_52_53_ladder;
            _2304 = frontier_phi_52_53_ladder_4;
            _2306 = frontier_phi_52_53_ladder_3;
            _2308 = frontier_phi_52_53_ladder_2;
            _2310 = frontier_phi_52_53_ladder_1;
        }
        float _2315 = isnan(1.0) ? _635 : (isnan(_635) ? 1.0 : min(_635, 1.0));
        _2054 = (_2315 * _2306) + _1781;
        _2056 = (_2315 * _2308) + _1782;
        _2058 = (_2315 * _2310) + _1783;
        _2060 = ((_2300 * 0.039999999105930328369140625) * _2315) + _1937;
        _2062 = ((_2302 * 0.039999999105930328369140625) * _2315) + _1938;
        _2064 = ((_2304 * 0.039999999105930328369140625) * _2315) + _1939;
    }
    else
    {
        _2054 = _1781;
        _2056 = _1782;
        _2058 = _1783;
        _2060 = _1937;
        _2062 = _1938;
        _2064 = _1939;
    }
    uint _2070 = _611 + uint(cbMatDynParam._m0[0u].w);
    float _3964 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _3975 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _3986 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _2095 = (((isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_2054 + ((isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))) * _635))) + ((_2060 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _1472)) * cbPerFrame._m0[3u].x)) + (((_465.x * _283) * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2070].x);
    float _2097 = ((((_465.y * _283) * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2070].y) + ((_2062 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _1472)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * (_2056 + ((isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0))) * _635)));
    float _2099 = ((((_465.z * _283) * cbMtdParam._m0[9u].z) * cbInstanceData._m0[_2070].z) + ((_2064 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _1472)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_2058 + ((isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))) * _635)));
    float _2100 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2101 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2102 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    uint _2103 = _609 + 6u;
    float _2111 = _569 / cbSceneParam._m0[86u].x;
    float _2112 = _570 / cbSceneParam._m0[86u].y;
    vec4 _2126 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2111, _2112, (log2((isnan(cbSceneParam._m0[77u].w) ? _542 : (isnan(_542) ? cbSceneParam._m0[77u].w : min(_542, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2128 = _2126.x;
    float _2129 = _2126.y;
    float _2130 = _2126.z;
    float _2131 = _2126.w;
    float _2211;
    float _2213;
    float _2215;
    float _2217;
    if (_542 > cbSceneParam._m0[78u].w)
    {
        float _2173 = isnan(_542) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _542 : min(cbSceneParam._m0[80u].w, _542));
        float _2174 = _2173 / _542;
        float _2185 = _2174 * _265;
        float _2186 = _266 * _2174;
        float _2187 = (-0.0) - _2186;
        float _2188 = _2174 * _267;
        float _2190 = (cbSceneParam._m0[77u].w * _2187) / _2173;
        float _2191 = _2190 + cbSceneParam._m0[79u].w;
        float _2192 = cbSceneParam._m0[79u].w - _2186;
        float _2198 = sqrt(((_2185 * _2185) + (_2186 * _2186)) + (_2188 * _2188));
        float _2201 = (1.0 - (cbSceneParam._m0[77u].w / _2173)) * _2198;
        float _2207 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2209 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2442;
        if (abs((_2187 - _2190) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2442 = ((((_2191 > 0.0) ? exp2(_2207 * _2191) : (2.0 - exp2(_2209 * _2191))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2201;
        }
        else
        {
            float _2361 = 1.0 / cbSceneParam._m0[80u].x;
            float _2362 = isnan(_2192) ? _2191 : (isnan(_2191) ? _2192 : max(_2191, _2192));
            float _2363 = isnan(_2192) ? _2191 : (isnan(_2191) ? _2192 : min(_2191, _2192));
            float _2372 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : min(_2362, 0.0));
            float _2373 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : min(_2363, 0.0));
            _2442 = ((abs(_2198 / _2187) * cbSceneParam._m0[80u].y) * ((((_2372 - _2373) * 2.0) - ((exp2(_2207 * (isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0)))) - exp2(_2207 * (isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0))))) * _2361)) - ((exp2(_2209 * _2372) - exp2(_2209 * _2373)) * _2361))) + (_2201 * cbSceneParam._m0[80u].z);
        }
        vec4 _2444 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2111, _2112, 1.0), 0.0);
        float _2453 = exp2((_2442 * (-1.44269502162933349609375)) * (1.0 - _2444.w));
        float _2454 = log2(_2453);
        float _2470 = log2(_2131);
        _2211 = (exp2(_2470 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2454 * cbSceneParam._m0[78u].x)) * _2444.x) / cbSceneParam._m0[78u].x)) + _2128;
        _2213 = (exp2(_2470 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2454 * cbSceneParam._m0[78u].y)) * _2444.y) / cbSceneParam._m0[78u].y)) + _2129;
        _2215 = (exp2(_2470 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2454 * cbSceneParam._m0[78u].z)) * _2444.z) / cbSceneParam._m0[78u].z)) + _2130;
        _2217 = _2453 * _2131;
    }
    else
    {
        _2211 = _2128;
        _2213 = _2129;
        _2215 = _2130;
        _2217 = _2131;
    }
    bool _2480;
    vec4 _2227;
    vec4 _2249;
    float _2251;
    float _2255;
    float _2256;
    float _2257;
    float _2258;
    bool _2268;
    for (;;)
    {
        _2227 = cbMatDynParam._m0[0u];
        float _2229 = roundEven(_2227.y);
        bool _2230 = _2229 == 3.0;
        float _2231 = log2(_2217);
        float _2238 = exp2(_2231 * cbSceneParam._m0[78u].x) * _2100;
        float _2239 = exp2(_2231 * cbSceneParam._m0[78u].y) * _2101;
        float _2240 = exp2(_2231 * cbSceneParam._m0[78u].z) * _2102;
        float _2247 = _556 + (-0.5);
        _2249 = cbMtdParam._m0[1u];
        _2251 = _2249.y * _2247;
        float _2254 = (_2229 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2255 = _2254 * (_2230 ? _2238 : (_2238 + (cbSceneParam._m0[72u].w * _2211)));
        _2256 = _2254 * (_2230 ? _2239 : (_2239 + (cbSceneParam._m0[72u].w * _2213)));
        _2257 = _2254 * (_2230 ? _2240 : (_2240 + (cbSceneParam._m0[72u].w * _2215)));
        _2258 = _2247 * 0.999000012874603271484375;
        _2268 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2268)
        {
            if ((cbInstanceData._m0[_609 + 7u].x + _2258) < 0.5)
            {
                _2480 = true;
                break;
            }
        }
        uint _2396 = _611 + uint(_2227.w);
        if ((cbInstanceData._m0[_2396].w < 1.0) && ((cbInstanceData._m0[_2396].w + _2258) < 0.5))
        {
            _2480 = true;
            break;
        }
        if ((_2251 + 1.0) < _2249.x)
        {
            _2480 = true;
            break;
        }
        _2480 = false;
        break;
    }
    float _2711;
    if (_2480)
    {
        discard_state = true;
        _2711 = 0.0;
    }
    else
    {
        _2711 = cbInstanceData._m0[_2103].w;
    }
    SV_Target.x = _2255;
    SV_Target.y = _2256;
    SV_Target.z = _2257;
    SV_Target.w = _2711;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2103].w;
    discard_exit();
}


