#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _797;
uint _1971;
uint _1972;
uint _1973;
uint _2216;
uint _2217;
uint _2218;
float _2465;
float _2466;
float _2467;
float _2468;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _285 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _320 = cbMtdParam._m0[21u].w + _261;
    float _321 = cbMtdParam._m0[22u].x + _262;
    float _322 = cbMtdParam._m0[22u].y + _263;
    float _336 = (-0.0) - dot(vec3(_320, _321, _322), vec3(_189 * _182, _189 * _183, _189 * _184));
    float _337 = (-0.0) - dot(vec3(_320, _321, _322), vec3(_203 * TANGENT.x, _203 * TANGENT.y, _203 * TANGENT.z));
    float _338 = (-0.0) - dot(vec3(_320, _321, _322), vec3((-0.0) - (_196 * NORMAL.x), (-0.0) - (_196 * NORMAL.y), (-0.0) - (_196 * NORMAL.z)));
    float _342 = inversesqrt(dot(vec3(_336, _337, _338), vec3(_336, _337, _338)));
    float _345 = _342 * _338;
    float _346 = (_342 * _336) + (((_285.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _347 = (_342 * _337) + (((_285.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _348 = _346 * cbMtdParam._m0[18u].z;
    float _349 = _347 * cbMtdParam._m0[18u].y;
    float _350 = fract(TEXCOORD.x);
    float _351 = fract(TEXCOORD.y);
    float _357;
    if (_348 > 0.0)
    {
        _357 = (1.0 - _350) / _348;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_348 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _350) / _348;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _357 = frontier_phi_3_2_ladder;
    }
    float _365;
    if (_349 > 0.0)
    {
        _365 = (1.0 - _351) / _349;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_349 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _351) / _349;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _365 = frontier_phi_7_6_ladder;
    }
    bool _367 = _345 > 0.0;
    float _369 = _367 ? (cbMtdParam._m0[15u].x / _345) : 5000.0;
    float _370 = isnan(_365) ? _357 : (isnan(_357) ? _365 : min(_357, _365));
    float _371 = isnan(_369) ? _370 : (isnan(_370) ? _369 : min(_370, _369));
    float _375 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _376 = _350 + (-0.5);
    float _379 = _351 + (-0.5);
    float _382 = ((_371 * _345) + _375) / _375;
    vec4 _406 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_376 + (_371 * _348)) / _382) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_379 + (_371 * _349)) / _382) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _416 = cbMtdParam._m0[9u].x * _406.x;
    float _417 = cbMtdParam._m0[9u].y * _406.y;
    float _418 = cbMtdParam._m0[9u].z * _406.z;
    float _436 = _346 * cbMtdParam._m0[20u].z;
    float _437 = _347 * cbMtdParam._m0[20u].y;
    bool _438 = _436 > 0.0;
    float _443;
    if (_438)
    {
        _443 = (1.0 - _350) / _436;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_436 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _350) / _436;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _443 = frontier_phi_11_10_ladder;
    }
    bool _445 = _437 > 0.0;
    float _450;
    if (_445)
    {
        _450 = (1.0 - _351) / _437;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_437 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _351) / _437;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _450 = frontier_phi_15_14_ladder;
    }
    float _453 = _367 ? (cbMtdParam._m0[16u].x / _345) : 5000.0;
    float _454 = isnan(_450) ? _443 : (isnan(_443) ? _450 : min(_443, _450));
    float _455 = isnan(_453) ? _454 : (isnan(_454) ? _453 : min(_454, _453));
    float _459 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _463 = ((_455 * _345) + _459) / _459;
    float _468 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _470 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _486 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_376 + (_455 * _436)) / _463) + 0.5) + _468) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_379 + (_455 * _437)) / _463) + 0.5) + _470) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _498;
    if (_438)
    {
        _498 = (1.0 - _350) / _436;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_436 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _350) / _436;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _498 = frontier_phi_19_18_ladder;
    }
    float _504;
    if (_445)
    {
        _504 = (1.0 - _351) / _437;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_437 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _351) / _437;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _504 = frontier_phi_23_22_ladder;
    }
    float _506 = isnan(_504) ? _498 : (isnan(_498) ? _504 : min(_498, _504));
    float _507 = isnan(_453) ? _506 : (isnan(_506) ? _453 : min(_506, _453));
    float _514 = ((_507 * _345) + _459) / _459;
    vec4 _535 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_376 + (_507 * _436)) / _514) + 0.5) + _468) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_379 + (_507 * _437)) / _514) + 0.5) + _470) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _537 = _535.x;
    float _562 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _566 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _567 = _261 * _566;
    float _568 = _262 * _566;
    float _569 = _263 * _566;
    vec4 _574 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _576 = _574.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _645 = sqrt(((_261 * _261) + (_262 * _262)) + (_263 * _263));
        float _652 = (cbMatDynParam._m0[5u].x * _645) + cbMatDynParam._m0[5u].y;
        float _2507 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
        float _653 = isnan(1.0) ? _2507 : (isnan(_2507) ? 1.0 : min(_2507, 1.0));
        float _657 = (cbMatDynParam._m0[5u].z * _645) + cbMatDynParam._m0[5u].w;
        float _2518 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2518 : (isnan(_2518) ? 1.0 : min(_2518, 1.0))) - _653)) + _653) < ((_576 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _588 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _589 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _598 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_588 * cbSceneParam._m0[86u].x, _589 * cbSceneParam._m0[86u].y));
    float _601 = _598.x * TEXCOORD.z;
    float _602 = (-0.0) - _567;
    float _603 = (-0.0) - _568;
    float _604 = (-0.0) - _569;
    float _626 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _630 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _634 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _796;
    float _798;
    float _799;
    float _800;
    float _801;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _719 = (cbModelParam._m0[37u].x * ((((fma(_634, cbModelParam._m0[26u].z, fma(_630, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _626)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _721 = (cbModelParam._m0[37u].y * ((((fma(_634, cbModelParam._m0[27u].z, fma(_630, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _626)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _722 = (((((fma(_634, cbModelParam._m0[28u].z, fma(_630, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _626)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _725 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_719, _721, _722), 0.0);
        vec4 _732 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_719, _721, _722), 0.0);
        vec4 _739 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_719, _721, _722), 0.0);
        vec4 _746 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_719, _721, _722), 0.0);
        float _759 = exp2((_725.w + (-0.5)) * 20.0) * 2.0;
        float _769 = exp2((_732.w + (-0.5)) * 20.0) * 2.0;
        float _779 = exp2((_739.w + (-0.5)) * 20.0) * 2.0;
        float _789 = exp2((_746.w + (-0.5)) * 20.0) * 2.0;
        float _790 = _789 * (_746.x + (-0.5));
        float _791 = _789 * (_746.y + (-0.5));
        float _792 = _789 * (_746.z + (-0.5));
        _796 = _759 * (_725.z + (-0.5));
        _798 = _759 * (_725.y + (-0.5));
        _799 = _759 * (_725.x + (-0.5));
        _800 = _769 * (_732.z + (-0.5));
        _801 = _769 * (_732.y + (-0.5));
        _802 = _769 * (_732.x + (-0.5));
        _803 = _779 * (_739.z + (-0.5));
        _804 = _779 * (_739.y + (-0.5));
        _805 = _779 * (_739.x + (-0.5));
        _806 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        _807 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        _808 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    }
    else
    {
        _796 = _797;
        _798 = _797;
        _799 = _797;
        _800 = _797;
        _801 = _797;
        _802 = _797;
        _803 = _797;
        _804 = _797;
        _805 = _797;
        _806 = _797;
        _807 = _797;
        _808 = _797;
    }
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _865 = (cbModelParam._m0[38u].x * ((((fma(_634, cbModelParam._m0[30u].z, fma(_630, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _626)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _866 = (cbModelParam._m0[38u].y * ((((fma(_634, cbModelParam._m0[31u].z, fma(_630, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _626)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _867 = (((((fma(_634, cbModelParam._m0[32u].z, fma(_630, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _626)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_865, _866, _867), 0.0);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_865, _866, _867), 0.0);
        vec4 _883 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_865, _866, _867), 0.0);
        vec4 _890 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_865, _866, _867), 0.0);
        float _902 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _912 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _922 = exp2((_883.w + (-0.5)) * 20.0) * 2.0;
        float _932 = exp2((_890.w + (-0.5)) * 20.0) * 2.0;
        float _933 = _932 * (_890.x + (-0.5));
        float _934 = _932 * (_890.y + (-0.5));
        float _935 = _932 * (_890.z + (-0.5));
        _939 = _902 * (_869.z + (-0.5));
        _940 = _902 * (_869.y + (-0.5));
        _941 = _902 * (_869.x + (-0.5));
        _942 = _912 * (_876.z + (-0.5));
        _943 = _912 * (_876.y + (-0.5));
        _944 = _912 * (_876.x + (-0.5));
        _945 = _922 * (_883.z + (-0.5));
        _946 = _922 * (_883.y + (-0.5));
        _947 = _922 * (_883.x + (-0.5));
        _948 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        _949 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        _950 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    }
    else
    {
        _939 = _797;
        _940 = _797;
        _941 = _797;
        _942 = _797;
        _943 = _797;
        _944 = _797;
        _945 = _797;
        _946 = _797;
        _947 = _797;
        _948 = _797;
        _949 = _797;
        _950 = _797;
    }
    float _965 = _567 * (-0.5);
    float _966 = _568 * (-0.5);
    float _967 = _569 * (-0.5);
    float _968 = dot(vec4(_965, _966, _967, 1.0), vec4(_941, _944, _947, _950));
    float _971 = dot(vec4(_965, _966, _967, 1.0), vec4(_940, _943, _946, _949));
    float _974 = dot(vec4(_965, _966, _967, 1.0), vec4(_939, _942, _945, _948));
    float _1009;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _981 = dot(vec4(_965, _966, _967, 1.0), vec4(_796, _800, _803, _806));
        float _985 = dot(vec4(_965, _966, _967, 1.0), vec4(_798, _801, _804, _807));
        float _989 = dot(vec4(_965, _966, _967, 1.0), vec4(_799, _802, _805, _808));
        float _996 = dot(vec4(cbModelParam._m0[39u]), vec4(_965, _966, _967, 1.0));
        _1009 = dot(vec3(isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0)), isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0)), isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_996) ? 0.0 : (isnan(0.0) ? _996 : max(0.0, _996))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1009 = 1.0;
    }
    float _1020;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1011 = dot(vec4(cbModelParam._m0[40u]), vec4(_965, _966, _967, 1.0));
        _1020 = dot(vec3(isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0)), isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0)), isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1011) ? 0.0 : (isnan(0.0) ? _1011 : max(0.0, _1011))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1020 = 1.0;
    }
    float _1024 = (_1020 * cbModelParam._m0[1u].x) + (_1009 * (1.0 - cbModelParam._m0[1u].x));
    float _1030 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1113;
    float _1115;
    float _1117;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1080 = fma(_634, cbModelParam._m0[13u].z, fma(_630, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _626)) + cbModelParam._m0[13u].w;
        float _1084 = fma(_634, cbModelParam._m0[14u].z, fma(_630, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _626)) + cbModelParam._m0[14u].w;
        float _1088 = fma(_634, cbModelParam._m0[15u].z, fma(_630, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _626)) + cbModelParam._m0[15u].w;
        float _1091 = fma(_604, cbModelParam._m0[13u].z, fma(_603, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _602));
        float _1094 = fma(_604, cbModelParam._m0[14u].z, fma(_603, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _602));
        float _1097 = fma(_604, cbModelParam._m0[15u].z, fma(_603, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _602));
        float _1123;
        if (_1091 > 0.0)
        {
            _1123 = abs((1.0 - _1080) / _1091);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1091 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1080 + 1.0) / _1091);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1123 = frontier_phi_41_39_ladder;
        }
        float _1399;
        if (_1094 > 0.0)
        {
            _1399 = abs((1.0 - _1084) / _1094);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1094 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1084 + 1.0) / _1094);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _1399 = frontier_phi_50_46_ladder;
        }
        float _1703;
        if (_1097 > 0.0)
        {
            _1703 = abs((1.0 - _1088) / _1097);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1097 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1088 + 1.0) / _1097);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _1703 = frontier_phi_64_57_ladder;
        }
        float _1705 = isnan(_1399) ? _1123 : (isnan(_1123) ? _1399 : min(_1123, _1399));
        float _1706 = isnan(_1703) ? _1705 : (isnan(_1705) ? _1703 : min(_1705, _1703));
        float _1710 = (_1706 * _1091) + _1080;
        float _1711 = (_1706 * _1094) + _1084;
        float _1712 = (_1706 * _1097) + _1088;
        float _1713 = _1706 * 9.9999997473787516355514526367188e-05;
        float _1714 = (-1.0) - _1713;
        float _1716 = _1713 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_1712 > _1716) || ((_1712 < _1714) || ((_1711 > _1716) || ((_1711 < _1714) || ((_1710 < _1714) || (_1710 > _1716))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1839 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1712, cbModelParam._m0[9u].z, fma(_1711, cbModelParam._m0[9u].y, _1710 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1712, cbModelParam._m0[10u].z, fma(_1711, cbModelParam._m0[10u].y, _1710 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1712, cbModelParam._m0[11u].z, fma(_1711, cbModelParam._m0[11u].y, _1710 * cbModelParam._m0[11u].x))), _1030);
            frontier_phi_40_64_ladder = _1839.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _1839.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _1839.x * cbModelParam._m0[1u].y;
        }
        _1113 = frontier_phi_40_64_ladder_2;
        _1115 = frontier_phi_40_64_ladder_1;
        _1117 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1101 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_602, _603, _604), _1030);
        _1113 = _1101.x * cbModelParam._m0[1u].y;
        _1115 = _1101.y * cbModelParam._m0[1u].y;
        _1117 = _1101.z * cbModelParam._m0[1u].y;
    }
    float _1120 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1208;
    float _1210;
    float _1212;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1172 = fma(_634, cbModelParam._m0[21u].z, fma(_630, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _626)) + cbModelParam._m0[21u].w;
        float _1176 = fma(_634, cbModelParam._m0[22u].z, fma(_630, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _626)) + cbModelParam._m0[22u].w;
        float _1180 = fma(_634, cbModelParam._m0[23u].z, fma(_630, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _626)) + cbModelParam._m0[23u].w;
        float _1183 = fma(_604, cbModelParam._m0[21u].z, fma(_603, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _602));
        float _1186 = fma(_604, cbModelParam._m0[22u].z, fma(_603, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _602));
        float _1189 = fma(_604, cbModelParam._m0[23u].z, fma(_603, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _602));
        float _1404;
        if (_1183 > 0.0)
        {
            _1404 = abs((1.0 - _1172) / _1183);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1183 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1172 + 1.0) / _1183);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _1404 = frontier_phi_52_48_ladder;
        }
        float _1729;
        if (_1186 > 0.0)
        {
            _1729 = abs((1.0 - _1176) / _1186);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1186 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1176 + 1.0) / _1186);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _1729 = frontier_phi_66_59_ladder;
        }
        float _1901;
        if (_1189 > 0.0)
        {
            _1901 = abs((1.0 - _1180) / _1189);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1189 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1180 + 1.0) / _1189);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _1901 = frontier_phi_84_77_ladder;
        }
        float _1903 = isnan(_1729) ? _1404 : (isnan(_1404) ? _1729 : min(_1404, _1729));
        float _1904 = isnan(_1901) ? _1903 : (isnan(_1903) ? _1901 : min(_1903, _1901));
        float _1908 = (_1904 * _1183) + _1172;
        float _1909 = (_1904 * _1186) + _1176;
        float _1910 = (_1904 * _1189) + _1180;
        float _1911 = _1904 * 9.9999997473787516355514526367188e-05;
        float _1912 = (-1.0) - _1911;
        float _1914 = _1911 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_1910 > _1914) || ((_1910 < _1912) || ((_1909 > _1914) || ((_1909 < _1912) || ((_1908 < _1912) || (_1908 > _1914))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2079 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1910, cbModelParam._m0[17u].z, fma(_1909, cbModelParam._m0[17u].y, _1908 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1910, cbModelParam._m0[18u].z, fma(_1909, cbModelParam._m0[18u].y, _1908 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1910, cbModelParam._m0[19u].z, fma(_1909, cbModelParam._m0[19u].y, _1908 * cbModelParam._m0[19u].x))), _1120);
            frontier_phi_49_84_ladder = _2079.x * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _2079.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _2079.z * cbModelParam._m0[1u].z;
        }
        _1208 = frontier_phi_49_84_ladder;
        _1210 = frontier_phi_49_84_ladder_1;
        _1212 = frontier_phi_49_84_ladder_2;
    }
    else
    {
        vec4 _1192 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_602, _603, _604), _1120);
        _1208 = _1192.x * cbModelParam._m0[1u].z;
        _1210 = _1192.y * cbModelParam._m0[1u].z;
        _1212 = _1192.z * cbModelParam._m0[1u].z;
    }
    float _1224 = _601 * 0.01200000010430812835693359375;
    float _1226 = _1224 * ((cbModelParam._m0[1u].w * (_1208 - _1113)) + _1113);
    float _1227 = _1224 * ((cbModelParam._m0[1u].w * (_1210 - _1115)) + _1115);
    float _1228 = _1224 * ((cbModelParam._m0[1u].w * (_1212 - _1117)) + _1117);
    float _1249 = fma(_1228, cbSceneParam._m0[89u].z, fma(_1227, cbSceneParam._m0[89u].y, _1226 * cbSceneParam._m0[89u].x));
    float _1252 = fma(_1228, cbSceneParam._m0[90u].z, fma(_1227, cbSceneParam._m0[90u].y, _1226 * cbSceneParam._m0[90u].x));
    float _1255 = fma(_1228, cbSceneParam._m0[91u].z, fma(_1227, cbSceneParam._m0[91u].y, _1226 * cbSceneParam._m0[91u].x));
    uint _1262 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1266 = floatBitsToUint(cbInstanceData._m0[_1262 + 5u]);
    uint _1268 = _1266.x * 14u;
    uint _1269 = _1268 + 13u;
    float _1274 = _601 + (-1.0);
    float _1277 = (cbLight._m0[_1269].x * _1274) + 1.0;
    float _1278 = (cbLight._m0[_1269].y * _1274) + 1.0;
    uint _1279 = _1268 + 8u;
    float _1290 = cbLight._m0[_1268].x + _567;
    float _1291 = cbLight._m0[_1268].y + _568;
    float _1292 = cbLight._m0[_1268].z + _569;
    float _1296 = inversesqrt(dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292)));
    float _1300 = dot(vec3(0.0), vec3(cbLight._m0[_1268].xyz));
    float _2644 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
    float _1303 = isnan(1.0) ? _2644 : (isnan(_2644) ? 1.0 : min(_2644, 1.0));
    float _1304 = dot(vec3(0.0), vec3(_567, _568, _569));
    float _2655 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
    float _1307 = isnan(1.0) ? _2655 : (isnan(_2655) ? 1.0 : min(_2655, 1.0));
    float _1308 = dot(vec3(cbLight._m0[_1268].xyz), vec3(_1290 * _1296, _1291 * _1296, _1292 * _1296));
    float _2666 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
    float _1319 = (exp2(log2(1.0 - (isnan(1.0) ? _2666 : (isnan(_2666) ? 1.0 : min(_2666, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1325 = (0.5 / ((_1303 + 9.9999999392252902907785028219223e-09) + _1307)) * _1303;
    float _2677 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
    float _1327 = (isnan(1.0) ? _2677 : (isnan(_2677) ? 1.0 : min(_2677, 1.0))) * 0.31831014156341552734375;
    float _1329 = isnan(1.0) ? _1277 : (isnan(_1277) ? 1.0 : min(_1277, 1.0));
    uint _1339 = _1268 + 9u;
    uint _1345 = _1268 | 1u;
    float _1351 = cbLight._m0[_1345].x + _567;
    float _1352 = cbLight._m0[_1345].y + _568;
    float _1353 = cbLight._m0[_1345].z + _569;
    float _1357 = inversesqrt(dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353)));
    float _1361 = dot(vec3(0.0), vec3(cbLight._m0[_1345].xyz));
    float _2693 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
    float _1364 = isnan(1.0) ? _2693 : (isnan(_2693) ? 1.0 : min(_2693, 1.0));
    float _1365 = dot(vec3(cbLight._m0[_1345].xyz), vec3(_1351 * _1357, _1352 * _1357, _1353 * _1357));
    float _2704 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
    float _1374 = (exp2(log2(1.0 - (isnan(1.0) ? _2704 : (isnan(_2704) ? 1.0 : min(_2704, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1378 = (0.5 / ((_1364 + 9.9999999392252902907785028219223e-09) + _1307)) * _1364;
    float _2715 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
    float _1380 = (isnan(1.0) ? _2715 : (isnan(_2715) ? 1.0 : min(_2715, 1.0))) * 0.31831014156341552734375;
    float _1381 = isnan(1.0) ? _1278 : (isnan(_1278) ? 1.0 : min(_1278, 1.0));
    float _1391 = (((_1374 * cbLight._m0[_1339].x) * _1380) * _1381) + (((_1319 * cbLight._m0[_1279].x) * _1327) * _1329);
    float _1392 = (((_1374 * cbLight._m0[_1339].y) * _1380) * _1381) + (((_1319 * cbLight._m0[_1279].y) * _1327) * _1329);
    float _1393 = (((_1374 * cbLight._m0[_1339].z) * _1380) * _1381) + (((_1319 * cbLight._m0[_1279].z) * _1327) * _1329);
    float _1509;
    float _1511;
    float _1513;
    if (_1266.y == 0u)
    {
        float _1449 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1450 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1449;
        float _1451 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1449;
        float _1452 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1449;
        uvec4 _1464 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1465 = _1464.x;
        uint _1476 = uint((float(_1464.y) * floor(float(uint(cbSceneParam._m0[85u].y * _589) / _1465))) + floor(float(uint(cbSceneParam._m0[85u].x * _588) / _1465)));
        float _1486 = (log2(_1452 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1487 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        uint _1490 = uint(isnan(14.0) ? _1487 : (isnan(_1487) ? 14.0 : min(_1487, 14.0)));
        uvec4 _1495 = texelFetch(g_lightClusterGridBuffer, int(((_1490 << 2u) + (_1476 << 6u)) >> 2u));
        uint _1496 = _1495.x;
        uint _1497 = _1464.z;
        float _1586;
        float _1588;
        float _1590;
        if (((((1u << ((_1497 >> 4u) & 15u)) + 4294967295u) & _1496) == 0u) || ((_1497 & 240u) == 0u))
        {
            _1586 = 0.0;
            _1588 = 0.0;
            _1590 = 0.0;
        }
        else
        {
            float _1587;
            float _1589;
            float _1591;
            float _1754 = 0.0;
            float _1755 = 0.0;
            float _1756 = 0.0;
            uint _1757 = 0u;
            uint _1766;
            bool _1767;
            for (;;)
            {
                _1766 = texelFetch(g_lightClassification, int((((_1490 << 5u) + (_1476 << 9u)) + (_1757 << 2u)) >> 2u)).x;
                _1767 = _1766 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                if (_1767)
                {
                    frontier_phi_79_pred = _1756;
                    frontier_phi_79_pred_1 = _1755;
                    frontier_phi_79_pred_2 = _1754;
                }
                else
                {
                    float _1941;
                    float _1942;
                    float _1943;
                    uint _1944;
                    _1941 = _1754;
                    _1942 = _1755;
                    _1943 = _1756;
                    _1944 = _1766;
                    float _1848;
                    float _1849;
                    float _1850;
                    for (;;)
                    {
                        uint _1948 = uint(findLSB(_1944)) + (_1757 << 5u);
                        uint _1945 = (_1944 + 4294967295u) & _1944;
                        uint _1950 = _1948 * 48u;
                        vec4 _1964 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1950)).x, texelFetch(g_PointLightRenderingBuffer, int(_1950 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1950 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1950 + 3u)).x));
                        uint _1981 = (_1948 * 48u) + 8u;
                        vec3 _1992 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_1981)).x, texelFetch(g_PointLightRenderingBuffer, int(_1981 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1981 + 2u)).x));
                        float _1996 = _1964.x - _1450;
                        float _1997 = _1964.y - _1451;
                        float _1998 = _1964.z - _1452;
                        float _1999 = dot(vec3(_1996, _1997, _1998), vec3(_1996, _1997, _1998));
                        float _2002 = inversesqrt(_1999);
                        float _2011 = 1.0 - (_1999 * _1964.w);
                        float _2741 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
                        float _2013 = sqrt(_1999) * uintBitsToFloat(uvec4(_1971, _1972, _1973, texelFetch(g_PointLightRenderingBuffer, int(((_1948 * 48u) + 4u) + 3u)).x)).w;
                        float _2016 = 1.39999997615814208984375 / (_2013 + 1.39999997615814208984375);
                        float _2017 = _2016 * _2016;
                        float _2020 = ((1.0 - _2017) * dot(vec3(0.0), vec3(_2002 * _1996, _2002 * _1997, _2002 * _1998))) + _2017;
                        float _2022 = (-0.0) - _1450;
                        float _2023 = (-0.0) - _1451;
                        float _2024 = (-0.0) - _1452;
                        float _2028 = inversesqrt(dot(vec3(_2022, _2023, _2024), vec3(_2022, _2023, _2024)));
                        float _2032 = dot(vec3(0.0), vec3(_2028 * _2022, _2028 * _2023, _2028 * _2024));
                        float _2752 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
                        float _2763 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
                        float _2036 = isnan(1.0) ? _2763 : (isnan(_2763) ? 1.0 : min(_2763, 1.0));
                        float _2040 = (0.5 / (((isnan(1.0) ? _2752 : (isnan(_2752) ? 1.0 : min(_2752, 1.0))) + 9.9999999392252902907785028219223e-09) + _2036)) * _2036;
                        float _2774 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
                        float _2049 = (((isnan(1.0) ? _2774 : (isnan(_2774) ? 1.0 : min(_2774, 1.0))) * 3.1415927410125732421875) / (((_2013 * _2013) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2741 : (isnan(_2741) ? 1.0 : min(_2741, 1.0)));
                        _1848 = (_2049 * _1992.x) + _1941;
                        _1849 = (_2049 * _1992.y) + _1942;
                        _1850 = (_2049 * _1992.z) + _1943;
                        if (_1945 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1941 = _1848;
                            _1942 = _1849;
                            _1943 = _1850;
                            _1944 = _1945;
                        }
                    }
                    frontier_phi_79_pred = _1850;
                    frontier_phi_79_pred_1 = _1849;
                    frontier_phi_79_pred_2 = _1848;
                }
                _1591 = frontier_phi_79_pred;
                _1589 = frontier_phi_79_pred_1;
                _1587 = frontier_phi_79_pred_2;
                uint _1758 = _1757 + 1u;
                if (_1758 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1754 = _1587;
                    _1755 = _1589;
                    _1756 = _1591;
                    _1757 = _1758;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1586 = _1587;
            _1588 = _1589;
            _1590 = _1591;
        }
        uvec4 _1594 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1595 = _1594.z;
        uint _1597 = (_1595 >> 8u) & 15u;
        float _1734;
        float _1736;
        float _1738;
        if (((4294967295u << _1597) & _1496) == 0u)
        {
            _1734 = _1586;
            _1736 = _1588;
            _1738 = _1590;
        }
        else
        {
            float _1750 = inversesqrt(dot(vec3(_1450, _1451, _1452), vec3(_1450, _1451, _1452)));
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            if (_1597 < ((_1595 >> 12u) & 15u))
            {
                float _1735;
                float _1737;
                float _1739;
                float _1927 = _1586;
                float _1928 = _1588;
                float _1929 = _1590;
                uint _1930 = _1597;
                uint _1939;
                bool _1940;
                for (;;)
                {
                    _1939 = texelFetch(g_lightClassification, int((((_1490 << 5u) + (_1476 << 9u)) + (_1930 << 2u)) >> 2u)).x;
                    _1940 = _1939 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    if (_1940)
                    {
                        frontier_phi_93_pred = _1929;
                        frontier_phi_93_pred_1 = _1928;
                        frontier_phi_93_pred_2 = _1927;
                    }
                    else
                    {
                        float _2084;
                        float _2085;
                        float _2086;
                        float _2305;
                        float _2306;
                        float _2307;
                        float _2094 = _1927;
                        float _2095 = _1928;
                        float _2096 = _1929;
                        uint _2097 = _1939;
                        uint _2098;
                        uint _2108;
                        vec4 _2123;
                        float _2124;
                        vec3 _2136;
                        vec4 _2151;
                        vec4 _2166;
                        float _2212;
                        bool _2213;
                        for (;;)
                        {
                            _2108 = ((_1930 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2097));
                            _2098 = (_2097 + 4294967295u) & _2097;
                            uint _2110 = _2108 * 40u;
                            _2123 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2110)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2110 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2110 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2110 + 3u)).x));
                            _2124 = _2123.w;
                            uint _2126 = (_2108 * 40u) + 8u;
                            _2136 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2126)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2126 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2126 + 2u)).x));
                            uint _2138 = (_2108 * 40u) + 16u;
                            _2151 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2138)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2138 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2138 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2138 + 3u)).x));
                            uint _2153 = (_2108 * 40u) + 20u;
                            _2166 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2153 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2153 + 3u)).x));
                            uint _2168 = (_2108 * 40u) + 24u;
                            vec4 _2181 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2168 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2168 + 3u)).x));
                            uint _2187 = (_2108 * 40u) + 28u;
                            vec4 _2200 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2187)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2187 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2187 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2187 + 3u)).x));
                            _2212 = fma(_1452, _2200.z, fma(_1451, _2200.y, _2200.x * _1450)) + _2200.w;
                            _2213 = !((fma(_1452, _2181.z, fma(_1451, _2181.y, _2181.x * _1450)) + _2181.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            if (_2213)
                            {
                                float _2247 = _2123.x - _1450;
                                float _2248 = _2123.y - _1451;
                                float _2249 = _2123.z - _1452;
                                float _2250 = dot(vec3(_2247, _2248, _2249), vec3(_2247, _2248, _2249));
                                float _2253 = inversesqrt(_2250);
                                float _2260 = 1.0 - (_2250 / (_2124 * _2124));
                                float _2785 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
                                float _2262 = sqrt(_2250) * uintBitsToFloat(uvec4(_2216, _2217, _2218, texelFetch(g_SpotLightRenderingBuffer, int(((_2108 * 40u) + 4u) + 3u)).x)).w;
                                float _2264 = 1.39999997615814208984375 / (_2262 + 1.39999997615814208984375);
                                float _2265 = _2264 * _2264;
                                float _2268 = (fma(_1452, _2151.z, fma(_1451, _2151.y, _2151.x * _1450)) + _2151.w) / _2212;
                                float _2269 = (fma(_1452, _2166.z, fma(_1451, _2166.y, _2166.x * _1450)) + _2166.w) / _2212;
                                float _2273 = 1.0 - dot(vec2(_2268, _2269), vec2(_2268, _2269));
                                float _2796 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
                                float _2281 = dot(vec3(0.0), vec3((-0.0) - (_1450 * _1750), (-0.0) - (_1451 * _1750), (-0.0) - (_1452 * _1750)));
                                float _2807 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
                                float _2289 = ((1.0 - _2265) * dot(vec3(0.0), vec3(_2253 * _2247, _2253 * _2248, _2253 * _2249))) + _2265;
                                float _2818 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
                                float _2290 = isnan(1.0) ? _2818 : (isnan(_2818) ? 1.0 : min(_2818, 1.0));
                                float _2294 = (0.5 / (((isnan(1.0) ? _2807 : (isnan(_2807) ? 1.0 : min(_2807, 1.0))) + 9.9999999392252902907785028219223e-09) + _2290)) * _2290;
                                float _2829 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
                                float _2301 = ((isnan(1.0) ? _2796 : (isnan(_2796) ? 1.0 : min(_2796, 1.0))) * (isnan(1.0) ? _2785 : (isnan(_2785) ? 1.0 : min(_2785, 1.0)))) * (((isnan(1.0) ? _2829 : (isnan(_2829) ? 1.0 : min(_2829, 1.0))) * 3.1415927410125732421875) / (((_2262 * _2262) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_99_pred = _2301 * _2136.z;
                                frontier_phi_99_pred_1 = _2301 * _2136.y;
                                frontier_phi_99_pred_2 = _2301 * _2136.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                            }
                            _2307 = frontier_phi_99_pred;
                            _2306 = frontier_phi_99_pred_1;
                            _2305 = frontier_phi_99_pred_2;
                            _2084 = _2305 + _2094;
                            _2085 = _2306 + _2095;
                            _2086 = _2307 + _2096;
                            if (_2098 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2094 = _2084;
                                _2095 = _2085;
                                _2096 = _2086;
                                _2097 = _2098;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _2086;
                        frontier_phi_93_pred_1 = _2085;
                        frontier_phi_93_pred_2 = _2084;
                    }
                    _1739 = frontier_phi_93_pred;
                    _1737 = frontier_phi_93_pred_1;
                    _1735 = frontier_phi_93_pred_2;
                    uint _1931 = _1930 + 1u;
                    if (_1931 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1927 = _1735;
                        _1928 = _1737;
                        _1929 = _1739;
                        _1930 = _1931;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _1739;
                frontier_phi_68_69_ladder_1 = _1737;
                frontier_phi_68_69_ladder_2 = _1735;
            }
            else
            {
                frontier_phi_68_69_ladder = _1590;
                frontier_phi_68_69_ladder_1 = _1588;
                frontier_phi_68_69_ladder_2 = _1586;
            }
            _1734 = frontier_phi_68_69_ladder_2;
            _1736 = frontier_phi_68_69_ladder_1;
            _1738 = frontier_phi_68_69_ladder;
        }
        float _1743 = isnan(1.0) ? _601 : (isnan(_601) ? 1.0 : min(_601, 1.0));
        _1509 = ((_1734 * 0.039999999105930328369140625) * _1743) + _1391;
        _1511 = ((_1736 * 0.039999999105930328369140625) * _1743) + _1392;
        _1513 = ((_1738 * 0.039999999105930328369140625) * _1743) + _1393;
    }
    else
    {
        _1509 = _1391;
        _1511 = _1392;
        _1513 = _1393;
    }
    uint _1519 = _1262 + 9u;
    uint _1520 = _1519 + uint(cbMatDynParam._m0[0u].w);
    float _1535 = (cbInstanceData._m0[_1520].x * ((_537 * ((_486.x * cbMtdParam._m0[10u].x) - _416)) + _416)) + ((_1509 + ((isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0))) * _1024)) * cbPerFrame._m0[3u].x);
    float _1536 = (cbInstanceData._m0[_1520].y * ((_537 * ((_486.y * cbMtdParam._m0[10u].y) - _417)) + _417)) + ((_1511 + ((isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0))) * _1024)) * cbPerFrame._m0[3u].x);
    float _1537 = (cbInstanceData._m0[_1520].z * ((_537 * ((_486.z * cbMtdParam._m0[10u].z) - _418)) + _418)) + ((_1513 + ((isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0))) * _1024)) * cbPerFrame._m0[3u].x);
    float _1538 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
    float _1539 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
    float _1540 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
    uint _1541 = _1262 + 6u;
    float _1549 = _588 / cbSceneParam._m0[86u].x;
    float _1550 = _589 / cbSceneParam._m0[86u].y;
    vec4 _1564 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1549, _1550, (log2((isnan(cbSceneParam._m0[77u].w) ? _562 : (isnan(_562) ? cbSceneParam._m0[77u].w : min(_562, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1566 = _1564.x;
    float _1567 = _1564.y;
    float _1568 = _1564.z;
    float _1569 = _1564.w;
    float _1643;
    float _1645;
    float _1647;
    float _1649;
    if (_562 > cbSceneParam._m0[78u].w)
    {
        float _1605 = isnan(_562) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _562 : min(cbSceneParam._m0[80u].w, _562));
        float _1606 = _1605 / _562;
        float _1617 = _1606 * _261;
        float _1618 = _262 * _1606;
        float _1619 = (-0.0) - _1618;
        float _1620 = _1606 * _263;
        float _1622 = (cbSceneParam._m0[77u].w * _1619) / _1605;
        float _1623 = _1622 + cbSceneParam._m0[79u].w;
        float _1624 = cbSceneParam._m0[79u].w - _1618;
        float _1630 = sqrt(((_1617 * _1617) + (_1618 * _1618)) + (_1620 * _1620));
        float _1633 = (1.0 - (cbSceneParam._m0[77u].w / _1605)) * _1630;
        float _1639 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1641 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1858;
        if (abs((_1619 - _1622) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1858 = ((((_1623 > 0.0) ? exp2(_1639 * _1623) : (2.0 - exp2(_1641 * _1623))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1633;
        }
        else
        {
            float _1780 = 1.0 / cbSceneParam._m0[80u].x;
            float _1781 = isnan(_1624) ? _1623 : (isnan(_1623) ? _1624 : max(_1623, _1624));
            float _1782 = isnan(_1624) ? _1623 : (isnan(_1623) ? _1624 : min(_1623, _1624));
            float _1791 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : min(_1781, 0.0));
            float _1792 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : min(_1782, 0.0));
            _1858 = ((abs(_1630 / _1619) * cbSceneParam._m0[80u].y) * ((((_1791 - _1792) * 2.0) - ((exp2(_1639 * (isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)))) - exp2(_1639 * (isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))))) * _1780)) - ((exp2(_1641 * _1791) - exp2(_1641 * _1792)) * _1780))) + (_1633 * cbSceneParam._m0[80u].z);
        }
        vec4 _1860 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1549, _1550, 1.0), 0.0);
        float _1869 = exp2((_1858 * (-1.44269502162933349609375)) * (1.0 - _1860.w));
        float _1870 = log2(_1869);
        float _1886 = log2(_1569);
        _1643 = (exp2(_1886 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1870 * cbSceneParam._m0[78u].x)) * _1860.x) / cbSceneParam._m0[78u].x)) + _1566;
        _1645 = (exp2(_1886 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1870 * cbSceneParam._m0[78u].y)) * _1860.y) / cbSceneParam._m0[78u].y)) + _1567;
        _1647 = (exp2(_1886 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1870 * cbSceneParam._m0[78u].z)) * _1860.z) / cbSceneParam._m0[78u].z)) + _1568;
        _1649 = _1869 * _1569;
    }
    else
    {
        _1643 = _1566;
        _1645 = _1567;
        _1647 = _1568;
        _1649 = _1569;
    }
    bool _1896;
    vec4 _1659;
    vec4 _1682;
    float _1684;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    bool _1702;
    for (;;)
    {
        _1659 = cbMatDynParam._m0[0u];
        float _1661 = roundEven(_1659.y);
        bool _1662 = _1661 == 3.0;
        float _1664 = log2(_1649);
        float _1671 = exp2(_1664 * cbSceneParam._m0[78u].x) * _1538;
        float _1672 = exp2(_1664 * cbSceneParam._m0[78u].y) * _1539;
        float _1673 = exp2(_1664 * cbSceneParam._m0[78u].z) * _1540;
        float _1680 = _576 + (-0.5);
        _1682 = cbMtdParam._m0[1u];
        _1684 = _1682.y * _1680;
        float _1687 = (_1661 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1688 = _1687 * (_1662 ? _1671 : (_1671 + (cbSceneParam._m0[72u].w * _1643)));
        _1689 = _1687 * (_1662 ? _1672 : (_1672 + (cbSceneParam._m0[72u].w * _1645)));
        _1690 = _1687 * (_1662 ? _1673 : (_1673 + (cbSceneParam._m0[72u].w * _1647)));
        _1691 = _1680 * 0.999000012874603271484375;
        _1702 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1702)
        {
            if ((cbInstanceData._m0[_1262 + 7u].x + _1691) < 0.5)
            {
                _1896 = true;
                break;
            }
        }
        uint _1815 = _1519 + uint(_1659.w);
        if ((cbInstanceData._m0[_1815].w < 1.0) && ((cbInstanceData._m0[_1815].w + _1691) < 0.5))
        {
            _1896 = true;
            break;
        }
        if ((_1684 + 1.0) < _1682.x)
        {
            _1896 = true;
            break;
        }
        _1896 = false;
        break;
    }
    float _2054;
    if (_1896)
    {
        discard_state = true;
        _2054 = 0.0;
    }
    else
    {
        _2054 = cbInstanceData._m0[_1541].w;
    }
    SV_Target.x = _1688;
    SV_Target.y = _1689;
    SV_Target.z = _1690;
    SV_Target.w = _2054;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1541].w;
    discard_exit();
}


