#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _437;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _188 = _187 * _180;
    float _189 = _187 * _181;
    float _190 = _187 * _182;
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _202 = _201 * TANGENT.x;
    float _203 = _201 * TANGENT.y;
    float _204 = _201 * TANGENT.z;
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    vec4 _274 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _277 = _274.x;
    vec4 _295 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _312 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _277) + cbMtdParam._m0[12u].x) * _295.x;
    float _314 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _277) + cbMtdParam._m0[12u].y) * _295.y;
    float _316 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _277) + cbMtdParam._m0[12u].z) * _295.z;
    vec4 _350 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _365 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _372 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _384 = cbMtdParam._m0[22u].z + _259;
    float _385 = cbMtdParam._m0[22u].w + _260;
    float _386 = cbMtdParam._m0[23u].x + _261;
    float _400 = (-0.0) - dot(vec3(_384, _385, _386), vec3(_365 * _188, _365 * _189, _365 * _190));
    float _401 = (-0.0) - dot(vec3(_384, _385, _386), vec3(_372 * _202, _372 * _203, _372 * _204));
    float _402 = (-0.0) - dot(vec3(_384, _385, _386), vec3((-0.0) - _195, (-0.0) - _196, (-0.0) - _197));
    float _406 = inversesqrt(dot(vec3(_400, _401, _402), vec3(_400, _401, _402)));
    float _407 = _406 * _402;
    float _412 = ((cbMtdParam._m0[19u].y * _400) * _406) + (((_350.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _413 = ((cbMtdParam._m0[19u].z * _401) * _406) + (((_350.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _416 = fract(cbMtdParam._m0[19u].y * TEXCOORD.x);
    float _417 = fract(cbMtdParam._m0[19u].z * TEXCOORD.y);
    float _435;
    float _438;
    float _440;
    if (_412 > 0.0)
    {
        float _421 = (1.0 - _416) / _412;
        _435 = _421;
        _438 = ((cbMtdParam._m0[16u].z + 1.0) - fract(_421 * _407)) * 0.16666667163372039794921875;
        _440 = (fract((_421 * _413) + _417) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_412 < 0.0)
        {
            float _436 = ((-0.0) - _416) / _412;
            frontier_phi_3_2_ladder = (fract((_436 * _413) + _417) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_1 = _436;
            frontier_phi_3_2_ladder_2 = (fract(_436 * _407) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _437;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _435 = frontier_phi_3_2_ladder_1;
        _438 = frontier_phi_3_2_ladder_2;
        _440 = frontier_phi_3_2_ladder;
    }
    float _466;
    float _468;
    float _470;
    if (_413 > 0.0)
    {
        float _453 = (1.0 - _417) / _413;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_453 < _435)
        {
            frontier_phi_8_5_ladder = (fract((_453 * _412) + _416) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_1 = _453;
            frontier_phi_8_5_ladder_2 = (fract(_453 * _407) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
        }
        else
        {
            frontier_phi_8_5_ladder = _438;
            frontier_phi_8_5_ladder_1 = _435;
            frontier_phi_8_5_ladder_2 = _440;
        }
        _466 = frontier_phi_8_5_ladder_1;
        _468 = frontier_phi_8_5_ladder;
        _470 = frontier_phi_8_5_ladder_2;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_413 < 0.0)
        {
            float _467 = ((-0.0) - _417) / _413;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_467 < _435)
            {
                frontier_phi_8_6_ladder_9_ladder = (fract((_467 * _412) + _416) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = _467;
                frontier_phi_8_6_ladder_9_ladder_2 = fract(_467 * _407) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _438;
                frontier_phi_8_6_ladder_9_ladder_1 = _435;
                frontier_phi_8_6_ladder_9_ladder_2 = _440;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _438;
            frontier_phi_8_6_ladder_1 = _435;
            frontier_phi_8_6_ladder_2 = _440;
        }
        _466 = frontier_phi_8_6_ladder_1;
        _468 = frontier_phi_8_6_ladder;
        _470 = frontier_phi_8_6_ladder_2;
    }
    float _474 = (_407 > 0.0) ? (cbMtdParam._m0[16u].y / _407) : 5000.0;
    float _487;
    float _488;
    if (_474 < _466)
    {
        _487 = ((_416 + cbMtdParam._m0[16u].z) + (_474 * _412)) * 0.16666667163372039794921875;
        _488 = (((_474 * _413) + _417) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _487 = _468;
        _488 = _470;
    }
    vec4 _490 = texture(sampler2D(M_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_487, _488));
    vec4 _506 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _510 = _506.z;
    float _513 = (_506.x * 2.0) + (-1.0);
    float _514 = (_506.y * 2.0) + (-1.0);
    float _515 = dot(vec2(_513, _514), vec2(_513, _514));
    float _3109 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _520 = sqrt(1.0 - (isnan(1.0) ? _3109 : (isnan(_3109) ? 1.0 : min(_3109, 1.0))));
    float _523 = fma(_520, _195, fma(_514, _202, _513 * _188));
    float _526 = fma(_520, _196, fma(_514, _203, _513 * _189));
    float _529 = fma(_520, _197, fma(_514, _204, _513 * _190));
    float _533 = inversesqrt(dot(vec3(_523, _526, _529), vec3(_523, _526, _529)));
    float _534 = _533 * _523;
    float _535 = _533 * _526;
    float _536 = _533 * _529;
    float _3120 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _537 = isnan(1.0) ? _3120 : (isnan(_3120) ? 1.0 : min(_3120, 1.0));
    float _3131 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _3142 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _3153 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _556 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _560 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _561 = _259 * _560;
    float _562 = _260 * _560;
    float _563 = _261 * _560;
    float _569 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _570 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _591 = fma(_536, cbSceneParam._m0[5u].z, fma(_535, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _534));
    float _594 = fma(_536, cbSceneParam._m0[6u].z, fma(_535, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _534));
    float _597 = fma(_536, cbSceneParam._m0[7u].z, fma(_535, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _534));
    uint _610 = uint(roundEven(NORMAL.w)) * 13u;
    uint _611 = _610 + 9u;
    uint _612 = _611 + uint(cbMatDynParam._m0[0u].w);
    float _618 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3131 : (isnan(_3131) ? 1.0 : min(_3131, 1.0)))) * cbInstanceData._m0[_612].x;
    float _619 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3142 : (isnan(_3142) ? 1.0 : min(_3142, 1.0)))) * cbInstanceData._m0[_612].y;
    float _620 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3153 : (isnan(_3153) ? 1.0 : min(_3153, 1.0)))) * cbInstanceData._m0[_612].z;
    float _3164 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _621 = isnan(1.0) ? _3164 : (isnan(_3164) ? 1.0 : min(_3164, 1.0));
    float _3175 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _622 = isnan(1.0) ? _3175 : (isnan(_3175) ? 1.0 : min(_3175, 1.0));
    float _3186 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _623 = isnan(1.0) ? _3186 : (isnan(_3186) ? 1.0 : min(_3186, 1.0));
    vec4 _632 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _569, cbSceneParam._m0[86u].y * _570));
    float _635 = _632.x * TEXCOORD.z;
    float _636 = dot(vec3(_534, _535, _536), vec3(_561, _562, _563));
    float _639 = _636 * 2.0;
    float _643 = (_639 * _534) - _561;
    float _644 = (_639 * _535) - _562;
    float _645 = (_639 * _536) - _563;
    float _649 = abs(dot(vec3(_561, _562, _563), vec3(_534, _535, _536)));
    float _3197 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _651 = sqrt(_537);
    float _664 = exp2((_651 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3197 : (isnan(_3197) ? 1.0 : min(_3197, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_651 * 3.0));
    float _696 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _700 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _704 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _737 = fma(_704, cbModelParam._m0[26u].z, fma(_700, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _696));
        float _741 = fma(_704, cbModelParam._m0[27u].z, fma(_700, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _696));
        float _745 = fma(_704, cbModelParam._m0[28u].z, fma(_700, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _696));
        float _769 = _696 + _534;
        float _770 = _700 + _535;
        float _771 = _704 + _536;
        float _781 = fma(_771, cbModelParam._m0[26u].z, fma(_770, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _769)) - _737;
        float _782 = fma(_771, cbModelParam._m0[27u].z, fma(_770, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _769)) - _741;
        float _783 = fma(_771, cbModelParam._m0[28u].z, fma(_770, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _769)) - _745;
        float _787 = inversesqrt(dot(vec3(_781, _782, _783), vec3(_781, _782, _783)));
        float _800 = ((_787 * _781) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_737 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _801 = ((_787 * _782) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_741 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _802 = ((_787 * _783) / cbModelParam._m0[34u].z) + ((((((_745 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _805 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_800, _801, _802), 0.0);
        vec4 _812 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_800, _801, _802), 0.0);
        vec4 _819 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_800, _801, _802), 0.0);
        vec4 _826 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_800, _801, _802), 0.0);
        float _839 = exp2((_805.w + (-0.5)) * 20.0) * 2.0;
        float _840 = _839 * (_805.x + (-0.5));
        float _841 = _839 * (_805.y + (-0.5));
        float _842 = _839 * (_805.z + (-0.5));
        float _849 = exp2((_812.w + (-0.5)) * 20.0) * 2.0;
        float _850 = _849 * (_812.x + (-0.5));
        float _851 = _849 * (_812.y + (-0.5));
        float _852 = _849 * (_812.z + (-0.5));
        float _859 = exp2((_819.w + (-0.5)) * 20.0) * 2.0;
        float _860 = _859 * (_819.x + (-0.5));
        float _861 = _859 * (_819.y + (-0.5));
        float _862 = _859 * (_819.z + (-0.5));
        float _869 = exp2((_826.w + (-0.5)) * 20.0) * 2.0;
        float _870 = _869 * (_826.x + (-0.5));
        float _871 = _869 * (_826.y + (-0.5));
        float _872 = _869 * (_826.z + (-0.5));
        float _873 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _874 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _875 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _876 = _840 * 0.5;
        float _877 = _850 * 0.5;
        float _878 = _860 * 0.5;
        float _879 = dot(vec3(_876, _877, _878), vec3(_876, _877, _878));
        float _884 = (_879 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_879);
        float _893 = (dot(vec3(_534, _535, _536), vec3(_884 * _876, _884 * _877, _884 * _878)) + 1.0) * 0.5;
        float _3223 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _903 = sqrt(((_877 * _877) + (_876 * _876)) + (_878 * _878)) / (_873 + 9.9999997473787516355514526367188e-06);
        float _3234 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _904 = isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0));
        float _905 = _904 * 2.0;
        float _909 = (1.0 - _904) / (_904 + 1.0);
        float _3245 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0));
        float _919 = ((((1.0 - _910) * (_905 + 2.0)) * exp2(log2(isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0))) * (_905 + 1.0))) + _910) * _873;
        float _920 = _841 * 0.5;
        float _921 = _851 * 0.5;
        float _922 = _861 * 0.5;
        float _923 = dot(vec3(_920, _921, _922), vec3(_920, _921, _922));
        float _928 = (_923 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_923);
        float _936 = (dot(vec3(_534, _535, _536), vec3(_928 * _920, _928 * _921, _928 * _922)) + 1.0) * 0.5;
        float _3256 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _945 = sqrt(((_921 * _921) + (_920 * _920)) + (_922 * _922)) / (_874 + 9.9999997473787516355514526367188e-06);
        float _3267 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _946 = isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0));
        float _947 = _946 * 2.0;
        float _951 = (1.0 - _946) / (_946 + 1.0);
        float _3278 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0));
        float _961 = ((((1.0 - _952) * (_947 + 2.0)) * exp2(log2(isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0))) * (_947 + 1.0))) + _952) * _874;
        float _962 = _842 * 0.5;
        float _963 = _852 * 0.5;
        float _964 = _862 * 0.5;
        float _965 = dot(vec3(_962, _963, _964), vec3(_962, _963, _964));
        float _970 = (_965 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_965);
        float _978 = (dot(vec3(_534, _535, _536), vec3(_970 * _962, _970 * _963, _970 * _964)) + 1.0) * 0.5;
        float _3289 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _987 = sqrt(((_963 * _963) + (_962 * _962)) + (_964 * _964)) / (_875 + 9.9999997473787516355514526367188e-06);
        float _3300 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0));
        float _989 = _988 * 2.0;
        float _993 = (1.0 - _988) / (_988 + 1.0);
        float _3311 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0));
        float _1003 = ((((1.0 - _994) * (_989 + 2.0)) * exp2(log2(isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0))) * (_989 + 1.0))) + _994) * _875;
        _1011 = _842;
        _1012 = _841;
        _1013 = _840;
        _1014 = _852;
        _1015 = _851;
        _1016 = _850;
        _1017 = _862;
        _1018 = _861;
        _1019 = _860;
        _1020 = _875;
        _1021 = _874;
        _1022 = _873;
        _1023 = cbModelParam._m0[36u].z * (isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0)));
        _1024 = cbModelParam._m0[36u].z * (isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0)));
        _1025 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0)));
    }
    else
    {
        _1011 = _437;
        _1012 = _437;
        _1013 = _437;
        _1014 = _437;
        _1015 = _437;
        _1016 = _437;
        _1017 = _437;
        _1018 = _437;
        _1019 = _437;
        _1020 = _437;
        _1021 = _437;
        _1022 = _437;
        _1023 = 0.0;
        _1024 = 0.0;
        _1025 = 0.0;
    }
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1051 = fma(_704, cbModelParam._m0[30u].z, fma(_700, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _696));
        float _1055 = fma(_704, cbModelParam._m0[31u].z, fma(_700, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _696));
        float _1059 = fma(_704, cbModelParam._m0[32u].z, fma(_700, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _696));
        float _1082 = _696 + _534;
        float _1083 = _700 + _535;
        float _1084 = _704 + _536;
        float _1094 = fma(_1084, cbModelParam._m0[30u].z, fma(_1083, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1082)) - _1051;
        float _1095 = fma(_1084, cbModelParam._m0[31u].z, fma(_1083, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1082)) - _1055;
        float _1096 = fma(_1084, cbModelParam._m0[32u].z, fma(_1083, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1082)) - _1059;
        float _1100 = inversesqrt(dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096)));
        float _1113 = ((_1100 * _1094) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1051 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1114 = ((_1100 * _1095) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1055 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1115 = ((_1100 * _1096) / cbModelParam._m0[35u].z) + ((((((_1059 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        float _1150 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1117.x + (-0.5));
        float _1152 = _1150 * (_1117.y + (-0.5));
        float _1153 = _1150 * (_1117.z + (-0.5));
        float _1160 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1124.x + (-0.5));
        float _1162 = _1160 * (_1124.y + (-0.5));
        float _1163 = _1160 * (_1124.z + (-0.5));
        float _1170 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1131.x + (-0.5));
        float _1172 = _1170 * (_1131.y + (-0.5));
        float _1173 = _1170 * (_1131.z + (-0.5));
        float _1180 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1138.x + (-0.5));
        float _1182 = _1180 * (_1138.y + (-0.5));
        float _1183 = _1180 * (_1138.z + (-0.5));
        float _1184 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1185 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1186 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1187 = _1151 * 0.5;
        float _1188 = _1161 * 0.5;
        float _1189 = _1171 * 0.5;
        float _1190 = dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189));
        float _1195 = (_1190 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1190);
        float _1203 = (dot(vec3(_534, _535, _536), vec3(_1195 * _1187, _1195 * _1188, _1195 * _1189)) + 1.0) * 0.5;
        float _3352 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1212 = sqrt(((_1188 * _1188) + (_1187 * _1187)) + (_1189 * _1189)) / (_1184 + 9.9999997473787516355514526367188e-06);
        float _3363 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
        float _1214 = _1213 * 2.0;
        float _1218 = (1.0 - _1213) / (_1213 + 1.0);
        float _3374 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
        float _1228 = ((((1.0 - _1219) * (_1214 + 2.0)) * exp2(log2(isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0))) * (_1214 + 1.0))) + _1219) * _1184;
        float _1229 = _1152 * 0.5;
        float _1230 = _1162 * 0.5;
        float _1231 = _1172 * 0.5;
        float _1232 = dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231));
        float _1237 = (_1232 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1232);
        float _1245 = (dot(vec3(_534, _535, _536), vec3(_1237 * _1229, _1237 * _1230, _1237 * _1231)) + 1.0) * 0.5;
        float _3385 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1254 = sqrt(((_1230 * _1230) + (_1229 * _1229)) + (_1231 * _1231)) / (_1185 + 9.9999997473787516355514526367188e-06);
        float _3396 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _3407 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0))) * (_1256 + 1.0))) + _1261) * _1185;
        float _1271 = _1153 * 0.5;
        float _1272 = _1163 * 0.5;
        float _1273 = _1173 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1287 = (dot(vec3(_534, _535, _536), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _3418 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1296 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1186 + 9.9999997473787516355514526367188e-06);
        float _3429 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _3440 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0))) * (_1298 + 1.0))) + _1303) * _1186;
        _1320 = _1153;
        _1321 = _1152;
        _1322 = _1151;
        _1323 = _1163;
        _1324 = _1162;
        _1325 = _1161;
        _1326 = _1173;
        _1327 = _1172;
        _1328 = _1171;
        _1329 = _1186;
        _1330 = _1185;
        _1331 = _1184;
        _1332 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)));
        _1333 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
        _1334 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
    }
    else
    {
        _1320 = _437;
        _1321 = _437;
        _1322 = _437;
        _1323 = _437;
        _1324 = _437;
        _1325 = _437;
        _1326 = _437;
        _1327 = _437;
        _1328 = _437;
        _1329 = _437;
        _1330 = _437;
        _1331 = _437;
        _1332 = 0.0;
        _1333 = 0.0;
        _1334 = 0.0;
    }
    float _1344 = (cbModelParam._m0[1u].x * (_1332 - _1023)) + _1023;
    float _1345 = (cbModelParam._m0[1u].x * (_1333 - _1024)) + _1024;
    float _1346 = (cbModelParam._m0[1u].x * (_1334 - _1025)) + _1025;
    float _1367 = fma(_1346, cbSceneParam._m0[89u].z, fma(_1345, cbSceneParam._m0[89u].y, _1344 * cbSceneParam._m0[89u].x));
    float _1370 = fma(_1346, cbSceneParam._m0[90u].z, fma(_1345, cbSceneParam._m0[90u].y, _1344 * cbSceneParam._m0[90u].x));
    float _1373 = fma(_1346, cbSceneParam._m0[91u].z, fma(_1345, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1344));
    float _1388 = _643 * 0.5;
    float _1389 = _644 * 0.5;
    float _1390 = _645 * 0.5;
    float _1391 = dot(vec4(_1388, _1389, _1390, 1.0), vec4(_1322, _1325, _1328, _1331));
    float _1394 = dot(vec4(_1388, _1389, _1390, 1.0), vec4(_1321, _1324, _1327, _1330));
    float _1397 = dot(vec4(_1388, _1389, _1390, 1.0), vec4(_1320, _1323, _1326, _1329));
    float _1431;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1404 = dot(vec4(_1388, _1389, _1390, 1.0), vec4(_1011, _1014, _1017, _1020));
        float _1408 = dot(vec4(_1388, _1389, _1390, 1.0), vec4(_1012, _1015, _1018, _1021));
        float _1412 = dot(vec4(_1388, _1389, _1390, 1.0), vec4(_1013, _1016, _1019, _1022));
        float _1419 = dot(vec4(cbModelParam._m0[39u]), vec4(_1388, _1389, _1390, 1.0));
        _1431 = dot(vec3(isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)), isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)), isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1419) ? 0.0 : (isnan(0.0) ? _1419 : max(0.0, _1419))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1431 = 1.0;
    }
    float _1442;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1433 = dot(vec4(cbModelParam._m0[40u]), vec4(_1388, _1389, _1390, 1.0));
        _1442 = dot(vec3(isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)), isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)), isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1433) ? 0.0 : (isnan(0.0) ? _1433 : max(0.0, _1433))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1442 = 1.0;
    }
    float _1446 = (_1442 * cbModelParam._m0[1u].x) + (_1431 * (1.0 - cbModelParam._m0[1u].x));
    float _1456 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _537);
    float _1457 = isnan(_1456) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1456 : min(cbModelParam._m0[25u].z, _1456));
    float _1539;
    float _1541;
    float _1543;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1506 = fma(_704, cbModelParam._m0[13u].z, fma(_700, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _696)) + cbModelParam._m0[13u].w;
        float _1510 = fma(_704, cbModelParam._m0[14u].z, fma(_700, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _696)) + cbModelParam._m0[14u].w;
        float _1514 = fma(_704, cbModelParam._m0[15u].z, fma(_700, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _696)) + cbModelParam._m0[15u].w;
        float _1517 = fma(_645, cbModelParam._m0[13u].z, fma(_644, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _643));
        float _1520 = fma(_645, cbModelParam._m0[14u].z, fma(_644, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _643));
        float _1523 = fma(_645, cbModelParam._m0[15u].z, fma(_644, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _643));
        float _1551;
        if (_1517 > 0.0)
        {
            _1551 = abs((1.0 - _1506) / _1517);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1517 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1506 + 1.0) / _1517);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1551 = frontier_phi_26_24_ladder;
        }
        float _1898;
        if (_1520 > 0.0)
        {
            _1898 = abs((1.0 - _1510) / _1520);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1520 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1510 + 1.0) / _1520);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1898 = frontier_phi_35_31_ladder;
        }
        float _2220;
        if (_1523 > 0.0)
        {
            _2220 = abs((1.0 - _1514) / _1523);
        }
        else
        {
            float frontier_phi_49_42_ladder;
            if (_1523 < 0.0)
            {
                frontier_phi_49_42_ladder = abs((_1514 + 1.0) / _1523);
            }
            else
            {
                frontier_phi_49_42_ladder = 5000.0;
            }
            _2220 = frontier_phi_49_42_ladder;
        }
        float _2222 = isnan(_1898) ? _1551 : (isnan(_1551) ? _1898 : min(_1551, _1898));
        float _2223 = isnan(_2220) ? _2222 : (isnan(_2222) ? _2220 : min(_2222, _2220));
        float _2227 = (_2223 * _1517) + _1506;
        float _2228 = (_2223 * _1520) + _1510;
        float _2229 = (_2223 * _1523) + _1514;
        float _2230 = _2223 * 9.9999997473787516355514526367188e-05;
        float _2231 = (-1.0) - _2230;
        float _2233 = _2230 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2229 > _2233) || ((_2229 < _2231) || ((_2228 > _2233) || ((_2228 < _2231) || ((_2227 < _2231) || (_2227 > _2233))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2355 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2229, cbModelParam._m0[9u].z, fma(_2228, cbModelParam._m0[9u].y, _2227 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2229, cbModelParam._m0[10u].z, fma(_2228, cbModelParam._m0[10u].y, _2227 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2229, cbModelParam._m0[11u].z, fma(_2228, cbModelParam._m0[11u].y, _2227 * cbModelParam._m0[11u].x))), _1457);
            frontier_phi_25_49_ladder = _2355.z * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_1 = _2355.y * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_2 = _2355.x * cbModelParam._m0[1u].y;
        }
        _1539 = frontier_phi_25_49_ladder_2;
        _1541 = frontier_phi_25_49_ladder_1;
        _1543 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1527 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_643, _644, _645), _1457);
        _1539 = _1527.x * cbModelParam._m0[1u].y;
        _1541 = _1527.y * cbModelParam._m0[1u].y;
        _1543 = _1527.z * cbModelParam._m0[1u].y;
    }
    float _1547 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _537);
    float _1548 = isnan(_1547) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1547 : min(cbModelParam._m0[25u].w, _1547));
    float _1638;
    float _1640;
    float _1642;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1602 = fma(_704, cbModelParam._m0[21u].z, fma(_700, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _696)) + cbModelParam._m0[21u].w;
        float _1606 = fma(_704, cbModelParam._m0[22u].z, fma(_700, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _696)) + cbModelParam._m0[22u].w;
        float _1610 = fma(_704, cbModelParam._m0[23u].z, fma(_700, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _696)) + cbModelParam._m0[23u].w;
        float _1613 = fma(_645, cbModelParam._m0[21u].z, fma(_644, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _643));
        float _1616 = fma(_645, cbModelParam._m0[22u].z, fma(_644, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _643));
        float _1619 = fma(_645, cbModelParam._m0[23u].z, fma(_644, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _643));
        float _1903;
        if (_1613 > 0.0)
        {
            _1903 = abs((1.0 - _1602) / _1613);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1613 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1602 + 1.0) / _1613);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1903 = frontier_phi_37_33_ladder;
        }
        float _2246;
        if (_1616 > 0.0)
        {
            _2246 = abs((1.0 - _1606) / _1616);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1616 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_1606 + 1.0) / _1616);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _2246 = frontier_phi_51_44_ladder;
        }
        float _2415;
        if (_1619 > 0.0)
        {
            _2415 = abs((1.0 - _1610) / _1619);
        }
        else
        {
            float frontier_phi_65_60_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_65_60_ladder = abs((_1610 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_65_60_ladder = 5000.0;
            }
            _2415 = frontier_phi_65_60_ladder;
        }
        float _2417 = isnan(_2246) ? _1903 : (isnan(_1903) ? _2246 : min(_1903, _2246));
        float _2418 = isnan(_2415) ? _2417 : (isnan(_2417) ? _2415 : min(_2417, _2415));
        float _2422 = (_2418 * _1613) + _1602;
        float _2423 = (_2418 * _1616) + _1606;
        float _2424 = (_2418 * _1619) + _1610;
        float _2425 = _2418 * 9.9999997473787516355514526367188e-05;
        float _2426 = (-1.0) - _2425;
        float _2428 = _2425 + 1.0;
        float frontier_phi_34_65_ladder;
        float frontier_phi_34_65_ladder_1;
        float frontier_phi_34_65_ladder_2;
        if ((_2424 > _2428) || ((_2424 < _2426) || ((_2423 > _2428) || ((_2423 < _2426) || ((_2422 < _2426) || (_2422 > _2428))))))
        {
            frontier_phi_34_65_ladder = 0.0;
            frontier_phi_34_65_ladder_1 = 0.0;
            frontier_phi_34_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2657 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2424, cbModelParam._m0[17u].z, fma(_2423, cbModelParam._m0[17u].y, _2422 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2424, cbModelParam._m0[18u].z, fma(_2423, cbModelParam._m0[18u].y, _2422 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2424, cbModelParam._m0[19u].z, fma(_2423, cbModelParam._m0[19u].y, _2422 * cbModelParam._m0[19u].x))), _1548);
            frontier_phi_34_65_ladder = _2657.y * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_1 = _2657.x * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_2 = _2657.z * cbModelParam._m0[1u].z;
        }
        _1638 = frontier_phi_34_65_ladder_1;
        _1640 = frontier_phi_34_65_ladder;
        _1642 = frontier_phi_34_65_ladder_2;
    }
    else
    {
        vec4 _1622 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_643, _644, _645), _1548);
        _1638 = _1622.x * cbModelParam._m0[1u].z;
        _1640 = _1622.y * cbModelParam._m0[1u].z;
        _1642 = _1622.z * cbModelParam._m0[1u].z;
    }
    float _1654 = ((((1.0 - _664) * ((_651 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_664 * _651)) * _635;
    float _1655 = _1654 * ((cbModelParam._m0[1u].w * (_1638 - _1539)) + _1539);
    float _1656 = _1654 * ((cbModelParam._m0[1u].w * (_1640 - _1541)) + _1541);
    float _1657 = _1654 * ((cbModelParam._m0[1u].w * (_1642 - _1543)) + _1543);
    float _1660 = fma(_1657, cbSceneParam._m0[89u].z, fma(_1656, cbSceneParam._m0[89u].y, _1655 * cbSceneParam._m0[89u].x));
    float _1663 = fma(_1657, cbSceneParam._m0[90u].z, fma(_1656, cbSceneParam._m0[90u].y, _1655 * cbSceneParam._m0[90u].x));
    float _1666 = fma(_1657, cbSceneParam._m0[91u].z, fma(_1656, cbSceneParam._m0[91u].y, _1655 * cbSceneParam._m0[91u].x));
    uvec4 _1676 = floatBitsToUint(cbInstanceData._m0[_610 + 5u]);
    uint _1678 = _1676.x * 14u;
    uint _1679 = _1678 + 13u;
    float _1684 = _635 + (-1.0);
    float _1687 = (cbLight._m0[_1679].x * _1684) + 1.0;
    float _1688 = (cbLight._m0[_1679].y * _1684) + 1.0;
    uint _1689 = _1678 + 5u;
    float _1695 = isnan(1.0) ? _1688 : (isnan(_1688) ? 1.0 : min(_1688, 1.0));
    uint _1699 = _1678 + 4u;
    float _1705 = isnan(1.0) ? _1687 : (isnan(_1687) ? 1.0 : min(_1687, 1.0));
    uint _1709 = _1678 | 1u;
    float _1720 = dot(vec3(cbLight._m0[_1678].xyz), vec3(_534, _535, _536));
    float _1723 = dot(vec3(cbLight._m0[_1709].xyz), vec3(_534, _535, _536));
    float _3576 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
    float _3587 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
    float _1728 = (isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) * 0.3183098733425140380859375;
    float _1730 = (isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) * 0.3183098733425140380859375;
    float _1737 = ((cbLight._m0[_1689].x * _1695) * _1730) + ((cbLight._m0[_1699].x * _1705) * _1728);
    float _1738 = ((_1695 * cbLight._m0[_1689].y) * _1730) + ((_1705 * cbLight._m0[_1699].y) * _1728);
    float _1739 = ((_1695 * cbLight._m0[_1689].z) * _1730) + ((_1705 * cbLight._m0[_1699].z) * _1728);
    uint _1741 = _1678 + 8u;
    float _1754 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1678].w)) * _537) * 0.949999988079071044921875);
    float _1755 = _1754 * _1754;
    float _1756 = cbLight._m0[_1678].x + _561;
    float _1757 = cbLight._m0[_1678].y + _562;
    float _1758 = cbLight._m0[_1678].z + _563;
    float _1762 = inversesqrt(dot(vec3(_1756, _1757, _1758), vec3(_1756, _1757, _1758)));
    float _1763 = _1762 * _1756;
    float _1764 = _1762 * _1757;
    float _1765 = _1762 * _1758;
    float _1766 = dot(vec3(_534, _535, _536), vec3(cbLight._m0[_1678].xyz));
    float _3598 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1769 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
    float _3609 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _1770 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
    float _1771 = dot(vec3(_534, _535, _536), vec3(_1763, _1764, _1765));
    float _3620 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1774 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
    float _1775 = dot(vec3(cbLight._m0[_1678].xyz), vec3(_1763, _1764, _1765));
    float _3631 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
    float _1779 = _1755 * _1755;
    float _1783 = ((_1774 * _1774) * (_1779 + (-1.0))) + 1.0;
    float _1794 = (exp2(log2(1.0 - (isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1795 = 1.0 - _1755;
    float _1806 = (0.5 / (((_1770 * ((_1769 * _1795) + _1755)) + 9.9999999392252902907785028219223e-09) + (((_1770 * _1795) + _1755) * _1769))) * _1769;
    float _3642 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _1808 = (isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * (_1779 / ((_1783 * _1783) * 3.141590118408203125));
    uint _1819 = _1678 + 9u;
    float _1830 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1709].w)) * _537) * 0.949999988079071044921875);
    float _1831 = _1830 * _1830;
    float _1832 = cbLight._m0[_1709].x + _561;
    float _1833 = cbLight._m0[_1709].y + _562;
    float _1834 = cbLight._m0[_1709].z + _563;
    float _1838 = inversesqrt(dot(vec3(_1832, _1833, _1834), vec3(_1832, _1833, _1834)));
    float _1839 = _1838 * _1832;
    float _1840 = _1838 * _1833;
    float _1841 = _1838 * _1834;
    float _1842 = dot(vec3(_534, _535, _536), vec3(cbLight._m0[_1709].xyz));
    float _3653 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _1845 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
    float _1846 = dot(vec3(_534, _535, _536), vec3(_1839, _1840, _1841));
    float _3664 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
    float _1849 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _1850 = dot(vec3(cbLight._m0[_1709].xyz), vec3(_1839, _1840, _1841));
    float _3675 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _1854 = _1831 * _1831;
    float _1858 = ((_1849 * _1849) * (_1854 + (-1.0))) + 1.0;
    float _1867 = (exp2(log2(1.0 - (isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1868 = 1.0 - _1831;
    float _1878 = (0.5 / (((_1770 * ((_1845 * _1868) + _1831)) + 9.9999999392252902907785028219223e-09) + (((_1770 * _1868) + _1831) * _1845))) * _1845;
    float _3686 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _1880 = (isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * (_1854 / ((_1858 * _1858) * 3.141590118408203125));
    float _1890 = (((_1867 * cbLight._m0[_1819].x) * _1880) * _1695) + (((_1794 * cbLight._m0[_1741].x) * _1808) * _1705);
    float _1891 = (((_1867 * cbLight._m0[_1819].y) * _1880) * _1695) + (((_1794 * cbLight._m0[_1741].y) * _1808) * _1705);
    float _1892 = (((_1867 * cbLight._m0[_1819].z) * _1880) * _1695) + (((_1794 * cbLight._m0[_1741].z) * _1808) * _1705);
    float _2007;
    float _2009;
    float _2011;
    float _2013;
    float _2015;
    float _2017;
    if (_1676.y == 0u)
    {
        float _1947 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1948 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1947;
        float _1949 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1947;
        float _1950 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1947;
        uvec4 _1962 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1963 = _1962.x;
        uint _1974 = uint((float(_1962.y) * floor(float(uint(cbSceneParam._m0[85u].y * _570) / _1963))) + floor(float(uint(cbSceneParam._m0[85u].x * _569) / _1963)));
        float _1984 = (log2(_1950 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1985 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        uint _1988 = uint(isnan(14.0) ? _1985 : (isnan(_1985) ? 14.0 : min(_1985, 14.0)));
        uvec4 _1993 = texelFetch(g_lightClusterGridBuffer, int(((_1988 << 2u) + (_1974 << 6u)) >> 2u));
        uint _1994 = _1993.x;
        uint _1995 = _1962.z;
        float _2107;
        float _2109;
        float _2111;
        float _2113;
        float _2115;
        float _2117;
        if (((((1u << ((_1995 >> 4u) & 15u)) + 4294967295u) & _1994) == 0u) || ((_1995 & 240u) == 0u))
        {
            _2107 = 0.0;
            _2109 = 0.0;
            _2111 = 0.0;
            _2113 = 0.0;
            _2115 = 0.0;
            _2117 = 0.0;
        }
        else
        {
            float _2108;
            float _2110;
            float _2112;
            float _2114;
            float _2116;
            float _2118;
            float _2283 = 0.0;
            float _2284 = 0.0;
            float _2285 = 0.0;
            float _2286 = 0.0;
            float _2287 = 0.0;
            float _2288 = 0.0;
            uint _2289 = 0u;
            uint _2298;
            bool _2299;
            for (;;)
            {
                _2298 = texelFetch(g_lightClassification, int((((_1988 << 5u) + (_1974 << 9u)) + (_2289 << 2u)) >> 2u)).x;
                _2299 = _2298 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                float frontier_phi_62_pred_3;
                float frontier_phi_62_pred_4;
                float frontier_phi_62_pred_5;
                if (_2299)
                {
                    frontier_phi_62_pred = _2284;
                    frontier_phi_62_pred_1 = _2283;
                    frontier_phi_62_pred_2 = _2285;
                    frontier_phi_62_pred_3 = _2288;
                    frontier_phi_62_pred_4 = _2287;
                    frontier_phi_62_pred_5 = _2286;
                }
                else
                {
                    float _2458;
                    float _2459;
                    float _2460;
                    float _2461;
                    float _2462;
                    float _2463;
                    uint _2464;
                    _2458 = _2283;
                    _2459 = _2284;
                    _2460 = _2285;
                    _2461 = _2286;
                    _2462 = _2287;
                    _2463 = _2288;
                    _2464 = _2298;
                    float _2364;
                    float _2365;
                    float _2366;
                    float _2367;
                    float _2368;
                    float _2369;
                    for (;;)
                    {
                        uint _2468 = uint(findLSB(_2464)) + (_2289 << 5u);
                        uint _2465 = (_2464 + 4294967295u) & _2464;
                        uint _2470 = _2468 * 48u;
                        vec4 _2484 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2470)).x, texelFetch(g_PointLightRenderingBuffer, int(_2470 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2470 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2470 + 3u)).x));
                        uint _2490 = (_2468 * 48u) + 4u;
                        vec4 _2503 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2490)).x, texelFetch(g_PointLightRenderingBuffer, int(_2490 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2490 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2490 + 3u)).x));
                        uint _2509 = (_2468 * 48u) + 8u;
                        vec3 _2520 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2509)).x, texelFetch(g_PointLightRenderingBuffer, int(_2509 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2509 + 2u)).x));
                        float _2524 = _2484.x - _1948;
                        float _2525 = _2484.y - _1949;
                        float _2526 = _2484.z - _1950;
                        float _2527 = dot(vec3(_2524, _2525, _2526), vec3(_2524, _2525, _2526));
                        float _2530 = inversesqrt(_2527);
                        float _2531 = _2530 * _2524;
                        float _2532 = _2530 * _2525;
                        float _2533 = _2530 * _2526;
                        float _2534 = dot(vec3(_591, _594, _597), vec3(_2531, _2532, _2533));
                        float _2539 = 1.0 - (_2527 * _2484.w);
                        float _3707 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
                        float _2540 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
                        float _2541 = sqrt(_2527) * _2503.w;
                        float _2544 = 1.39999997615814208984375 / (_2541 + 1.39999997615814208984375);
                        float _2545 = _2544 * _2544;
                        float _2548 = ((1.0 - _2545) * _2534) + _2545;
                        float _2551 = _2541 * _2541;
                        float _2555 = ((isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0))) * _2540) / ((_2551 * 0.699999988079071044921875) + 1.0);
                        float _2559 = (-0.0) - _1948;
                        float _2560 = (-0.0) - _1949;
                        float _2561 = (-0.0) - _1950;
                        float _2565 = inversesqrt(dot(vec3(_2559, _2560, _2561), vec3(_2559, _2560, _2561)));
                        float _2566 = _2565 * _2559;
                        float _2567 = _2565 * _2560;
                        float _2568 = _2565 * _2561;
                        float _2576 = exp2(log2(1.0 / ((_2551 * 3.5) + 5.0)) * 0.25);
                        float _2577 = 1.0 - _651;
                        float _2584 = sqrt(1.0 - ((1.0 - (_2577 * _2577)) * (1.0 - (_2576 * _2576))));
                        float _2585 = _2584 * _2584;
                        float _2586 = _2585 * _2585;
                        float _2587 = _2566 + _2531;
                        float _2588 = _2567 + _2532;
                        float _2589 = _2568 + _2533;
                        float _2593 = inversesqrt(dot(vec3(_2587, _2588, _2589), vec3(_2587, _2588, _2589)));
                        float _2597 = dot(vec3(_591, _594, _597), vec3(_2566, _2567, _2568));
                        float _3723 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
                        float _2600 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
                        float _2601 = dot(vec3(_591, _594, _597), vec3(_2593 * _2587, _2593 * _2588, _2593 * _2589));
                        float _3734 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
                        float _2604 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
                        float _2608 = ((_2604 * _2604) * (_2586 + (-1.0))) + 1.0;
                        float _2609 = _2544 * _2585;
                        float _2610 = _2609 * _2609;
                        float _2613 = ((1.0 - _2610) * _2534) + _2610;
                        float _3745 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
                        float _2614 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
                        float _2615 = 1.0 - _2585;
                        float _2625 = (0.5 / (((_2614 * ((_2600 * _2615) + _2585)) + 9.9999999392252902907785028219223e-09) + (((_2614 * _2615) + _2585) * _2600))) * _2614;
                        float _3756 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
                        float _2636 = (((_2586 * 3.1415927410125732421875) * (isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0)))) / ((_2608 * _2608) * ((_2551 * 2.1991131305694580078125) + 3.141590118408203125))) * _2540;
                        _2367 = (_2555 * _2503.x) + _2461;
                        _2368 = (_2555 * _2503.y) + _2462;
                        _2369 = (_2555 * _2503.z) + _2463;
                        _2364 = (_2636 * _2520.x) + _2458;
                        _2365 = (_2636 * _2520.y) + _2459;
                        _2366 = (_2636 * _2520.z) + _2460;
                        if (_2465 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2458 = _2364;
                            _2459 = _2365;
                            _2460 = _2366;
                            _2461 = _2367;
                            _2462 = _2368;
                            _2463 = _2369;
                            _2464 = _2465;
                        }
                    }
                    frontier_phi_62_pred = _2365;
                    frontier_phi_62_pred_1 = _2364;
                    frontier_phi_62_pred_2 = _2366;
                    frontier_phi_62_pred_3 = _2369;
                    frontier_phi_62_pred_4 = _2368;
                    frontier_phi_62_pred_5 = _2367;
                }
                _2110 = frontier_phi_62_pred;
                _2108 = frontier_phi_62_pred_1;
                _2112 = frontier_phi_62_pred_2;
                _2118 = frontier_phi_62_pred_3;
                _2116 = frontier_phi_62_pred_4;
                _2114 = frontier_phi_62_pred_5;
                uint _2290 = _2289 + 1u;
                if (_2290 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2283 = _2108;
                    _2284 = _2110;
                    _2285 = _2112;
                    _2286 = _2114;
                    _2287 = _2116;
                    _2288 = _2118;
                    _2289 = _2290;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2107 = _2108;
            _2109 = _2110;
            _2111 = _2112;
            _2113 = _2114;
            _2115 = _2116;
            _2117 = _2118;
        }
        uvec4 _2121 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2122 = _2121.z;
        uint _2124 = (_2122 >> 8u) & 15u;
        float _2251;
        float _2253;
        float _2255;
        float _2257;
        float _2259;
        float _2261;
        if (((4294967295u << _2124) & _1994) == 0u)
        {
            _2251 = _2107;
            _2253 = _2109;
            _2255 = _2111;
            _2257 = _2113;
            _2259 = _2115;
            _2261 = _2117;
        }
        else
        {
            float _2276 = inversesqrt(dot(vec3(_1948, _1949, _1950), vec3(_1948, _1949, _1950)));
            float _2277 = _2276 * _1948;
            float _2278 = _2276 * _1949;
            float _2279 = _2276 * _1950;
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            float frontier_phi_53_54_ladder_3;
            float frontier_phi_53_54_ladder_4;
            float frontier_phi_53_54_ladder_5;
            if (_2124 < ((_2122 >> 12u) & 15u))
            {
                float _2252;
                float _2254;
                float _2256;
                float _2258;
                float _2260;
                float _2262;
                float _2441 = _2107;
                float _2442 = _2109;
                float _2443 = _2111;
                float _2444 = _2113;
                float _2445 = _2115;
                float _2446 = _2117;
                uint _2447 = _2124;
                uint _2456;
                bool _2457;
                for (;;)
                {
                    _2456 = texelFetch(g_lightClassification, int((((_1988 << 5u) + (_1974 << 9u)) + (_2447 << 2u)) >> 2u)).x;
                    _2457 = _2456 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2457)
                    {
                        frontier_phi_71_pred = _2442;
                        frontier_phi_71_pred_1 = _2441;
                        frontier_phi_71_pred_2 = _2446;
                        frontier_phi_71_pred_3 = _2445;
                        frontier_phi_71_pred_4 = _2444;
                        frontier_phi_71_pred_5 = _2443;
                    }
                    else
                    {
                        float _2662;
                        float _2663;
                        float _2664;
                        float _2665;
                        float _2666;
                        float _2667;
                        float _2955;
                        float _2956;
                        float _2957;
                        float _2958;
                        float _2959;
                        float _2960;
                        float _2675 = _2441;
                        float _2676 = _2442;
                        float _2677 = _2443;
                        float _2678 = _2444;
                        float _2679 = _2445;
                        float _2680 = _2446;
                        uint _2681 = _2456;
                        uint _2682;
                        vec4 _2707;
                        float _2708;
                        vec4 _2723;
                        vec3 _2735;
                        vec4 _2750;
                        vec4 _2765;
                        float _2811;
                        bool _2812;
                        for (;;)
                        {
                            uint _2692 = ((_2447 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2681));
                            _2682 = (_2681 + 4294967295u) & _2681;
                            uint _2694 = _2692 * 40u;
                            _2707 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2694)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2694 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2694 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2694 + 3u)).x));
                            _2708 = _2707.w;
                            uint _2710 = (_2692 * 40u) + 4u;
                            _2723 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2710)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2710 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2710 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2710 + 3u)).x));
                            uint _2725 = (_2692 * 40u) + 8u;
                            _2735 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2725)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2725 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2725 + 2u)).x));
                            uint _2737 = (_2692 * 40u) + 16u;
                            _2750 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2737)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 3u)).x));
                            uint _2752 = (_2692 * 40u) + 20u;
                            _2765 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2752)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2752 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2752 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2752 + 3u)).x));
                            uint _2767 = (_2692 * 40u) + 24u;
                            vec4 _2780 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2767)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2767 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2767 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2767 + 3u)).x));
                            uint _2786 = (_2692 * 40u) + 28u;
                            vec4 _2799 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2786)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2786 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2786 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2786 + 3u)).x));
                            _2811 = fma(_1950, _2799.z, fma(_1949, _2799.y, _2799.x * _1948)) + _2799.w;
                            _2812 = !((fma(_1950, _2780.z, fma(_1949, _2780.y, _2780.x * _1948)) + _2780.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_2812)
                            {
                                float _2839 = _2707.x - _1948;
                                float _2840 = _2707.y - _1949;
                                float _2841 = _2707.z - _1950;
                                float _2842 = dot(vec3(_2839, _2840, _2841), vec3(_2839, _2840, _2841));
                                float _2845 = inversesqrt(_2842);
                                float _2846 = _2845 * _2839;
                                float _2847 = _2845 * _2840;
                                float _2848 = _2845 * _2841;
                                float _2852 = 1.0 - (_2842 / (_2708 * _2708));
                                float _3767 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
                                float _2853 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
                                float _2857 = sqrt(_2842) * _2723.w;
                                float _2859 = 1.39999997615814208984375 / (_2857 + 1.39999997615814208984375);
                                float _2860 = _2859 * _2859;
                                float _2863 = ((1.0 - _2860) * dot(vec3(_2846, _2847, _2848), vec3(_591, _594, _597))) + _2860;
                                float _2866 = _2857 * _2857;
                                float _2870 = (fma(_1950, _2750.z, fma(_1949, _2750.y, _2750.x * _1948)) + _2750.w) / _2811;
                                float _2871 = (fma(_1950, _2765.z, fma(_1949, _2765.y, _2765.x * _1948)) + _2765.w) / _2811;
                                float _2875 = 1.0 - dot(vec2(_2870, _2871), vec2(_2870, _2871));
                                float _3783 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
                                float _2876 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
                                float _2877 = _2876 * (((isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0))) * _2853) / ((_2866 * 0.699999988079071044921875) + 1.0));
                                float _2889 = exp2(log2(1.0 / ((_2866 * 3.5) + 5.0)) * 0.25);
                                float _2890 = 1.0 - _651;
                                float _2897 = sqrt(1.0 - ((1.0 - (_2890 * _2890)) * (1.0 - (_2889 * _2889))));
                                float _2898 = _2897 * _2897;
                                float _2899 = _2898 * _2898;
                                float _2900 = _2846 - _2277;
                                float _2901 = _2847 - _2278;
                                float _2902 = _2848 - _2279;
                                float _2906 = inversesqrt(dot(vec3(_2900, _2901, _2902), vec3(_2900, _2901, _2902)));
                                float _2910 = dot(vec3(_591, _594, _597), vec3((-0.0) - _2277, (-0.0) - _2278, (-0.0) - _2279));
                                float _3794 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
                                float _2913 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
                                float _2914 = dot(vec3(_591, _594, _597), vec3(_2906 * _2900, _2906 * _2901, _2906 * _2902));
                                float _3805 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
                                float _2917 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
                                float _2921 = ((_2917 * _2917) * (_2899 + (-1.0))) + 1.0;
                                float _2922 = _2859 * _2898;
                                float _2923 = _2922 * _2922;
                                float _2929 = ((1.0 - _2923) * dot(vec3(_591, _594, _597), vec3(_2846, _2847, _2848))) + _2923;
                                float _3816 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
                                float _2930 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
                                float _2931 = 1.0 - _2898;
                                float _2941 = (0.5 / (((_2930 * ((_2913 * _2931) + _2898)) + 9.9999999392252902907785028219223e-09) + (((_2930 * _2931) + _2898) * _2913))) * _2930;
                                float _3827 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                                float _2951 = (_2876 * _2853) * (((_2899 * 3.1415927410125732421875) * (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) / ((_2921 * _2921) * ((_2866 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _2951 * _2735.y;
                                frontier_phi_77_pred_1 = _2951 * _2735.x;
                                frontier_phi_77_pred_2 = _2877 * _2723.z;
                                frontier_phi_77_pred_3 = _2877 * _2723.y;
                                frontier_phi_77_pred_4 = _2877 * _2723.x;
                                frontier_phi_77_pred_5 = _2951 * _2735.z;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _2956 = frontier_phi_77_pred;
                            _2955 = frontier_phi_77_pred_1;
                            _2960 = frontier_phi_77_pred_2;
                            _2959 = frontier_phi_77_pred_3;
                            _2958 = frontier_phi_77_pred_4;
                            _2957 = frontier_phi_77_pred_5;
                            _2665 = _2958 + _2678;
                            _2666 = _2959 + _2679;
                            _2667 = _2960 + _2680;
                            _2662 = _2955 + _2675;
                            _2663 = _2956 + _2676;
                            _2664 = _2957 + _2677;
                            if (_2682 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2675 = _2662;
                                _2676 = _2663;
                                _2677 = _2664;
                                _2678 = _2665;
                                _2679 = _2666;
                                _2680 = _2667;
                                _2681 = _2682;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2663;
                        frontier_phi_71_pred_1 = _2662;
                        frontier_phi_71_pred_2 = _2667;
                        frontier_phi_71_pred_3 = _2666;
                        frontier_phi_71_pred_4 = _2665;
                        frontier_phi_71_pred_5 = _2664;
                    }
                    _2254 = frontier_phi_71_pred;
                    _2252 = frontier_phi_71_pred_1;
                    _2262 = frontier_phi_71_pred_2;
                    _2260 = frontier_phi_71_pred_3;
                    _2258 = frontier_phi_71_pred_4;
                    _2256 = frontier_phi_71_pred_5;
                    uint _2448 = _2447 + 1u;
                    if (_2448 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2441 = _2252;
                        _2442 = _2254;
                        _2443 = _2256;
                        _2444 = _2258;
                        _2445 = _2260;
                        _2446 = _2262;
                        _2447 = _2448;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _2262;
                frontier_phi_53_54_ladder_1 = _2258;
                frontier_phi_53_54_ladder_2 = _2256;
                frontier_phi_53_54_ladder_3 = _2254;
                frontier_phi_53_54_ladder_4 = _2252;
                frontier_phi_53_54_ladder_5 = _2260;
            }
            else
            {
                frontier_phi_53_54_ladder = _2117;
                frontier_phi_53_54_ladder_1 = _2113;
                frontier_phi_53_54_ladder_2 = _2111;
                frontier_phi_53_54_ladder_3 = _2109;
                frontier_phi_53_54_ladder_4 = _2107;
                frontier_phi_53_54_ladder_5 = _2115;
            }
            _2251 = frontier_phi_53_54_ladder_4;
            _2253 = frontier_phi_53_54_ladder_3;
            _2255 = frontier_phi_53_54_ladder_2;
            _2257 = frontier_phi_53_54_ladder_1;
            _2259 = frontier_phi_53_54_ladder_5;
            _2261 = frontier_phi_53_54_ladder;
        }
        float _2266 = isnan(1.0) ? _635 : (isnan(_635) ? 1.0 : min(_635, 1.0));
        _2007 = (_2266 * _2257) + _1737;
        _2009 = (_2266 * _2259) + _1738;
        _2011 = (_2266 * _2261) + _1739;
        _2013 = ((_2251 * 0.039999999105930328369140625) * _2266) + _1890;
        _2015 = ((_2253 * 0.039999999105930328369140625) * _2266) + _1891;
        _2017 = ((_2255 * 0.039999999105930328369140625) * _2266) + _1892;
    }
    else
    {
        _2007 = _1737;
        _2009 = _1738;
        _2011 = _1739;
        _2013 = _1890;
        _2015 = _1891;
        _2017 = _1892;
    }
    uint _2023 = _611 + uint(cbMatDynParam._m0[0u].w);
    float _3843 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _3854 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _3865 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _2054 = (((isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * (_2007 + ((isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0))) * _635))) + ((_2013 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _1446)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[13u].x * _277) * _490.x) * cbInstanceData._m0[_2023].x);
    float _2056 = ((((cbMtdParam._m0[13u].y * _277) * _490.y) * cbInstanceData._m0[_2023].y) + ((_2015 + ((isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))) * _1446)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_2009 + ((isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0))) * _635)));
    float _2058 = ((((cbMtdParam._m0[13u].z * _277) * _490.z) * cbInstanceData._m0[_2023].z) + ((_2017 + ((isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))) * _1446)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_2011 + ((isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0))) * _635)));
    uint _2062 = _610 + 6u;
    float _2070 = _569 / cbSceneParam._m0[86u].x;
    float _2071 = _570 / cbSceneParam._m0[86u].y;
    vec4 _2085 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2070, _2071, (log2((isnan(cbSceneParam._m0[77u].w) ? _556 : (isnan(_556) ? cbSceneParam._m0[77u].w : min(_556, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2087 = _2085.x;
    float _2088 = _2085.y;
    float _2089 = _2085.z;
    float _2090 = _2085.w;
    float _2170;
    float _2172;
    float _2174;
    float _2176;
    if (_556 > cbSceneParam._m0[78u].w)
    {
        float _2132 = isnan(_556) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _556 : min(cbSceneParam._m0[80u].w, _556));
        float _2133 = _2132 / _556;
        float _2144 = _2133 * _259;
        float _2145 = _260 * _2133;
        float _2146 = (-0.0) - _2145;
        float _2147 = _2133 * _261;
        float _2149 = (cbSceneParam._m0[77u].w * _2146) / _2132;
        float _2150 = _2149 + cbSceneParam._m0[79u].w;
        float _2151 = cbSceneParam._m0[79u].w - _2145;
        float _2157 = sqrt(((_2144 * _2144) + (_2145 * _2145)) + (_2147 * _2147));
        float _2160 = (1.0 - (cbSceneParam._m0[77u].w / _2132)) * _2157;
        float _2166 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2168 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2377;
        if (abs((_2146 - _2149) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2377 = ((((_2150 > 0.0) ? exp2(_2166 * _2150) : (2.0 - exp2(_2168 * _2150))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2160;
        }
        else
        {
            float _2312 = 1.0 / cbSceneParam._m0[80u].x;
            float _2313 = isnan(_2151) ? _2150 : (isnan(_2150) ? _2151 : max(_2150, _2151));
            float _2314 = isnan(_2151) ? _2150 : (isnan(_2150) ? _2151 : min(_2150, _2151));
            float _2323 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : min(_2313, 0.0));
            float _2324 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : min(_2314, 0.0));
            _2377 = ((abs(_2157 / _2146) * cbSceneParam._m0[80u].y) * ((((_2323 - _2324) * 2.0) - ((exp2(_2166 * (isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0)))) - exp2(_2166 * (isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0))))) * _2312)) - ((exp2(_2168 * _2323) - exp2(_2168 * _2324)) * _2312))) + (_2160 * cbSceneParam._m0[80u].z);
        }
        vec4 _2379 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2070, _2071, 1.0), 0.0);
        float _2388 = exp2((_2377 * (-1.44269502162933349609375)) * (1.0 - _2379.w));
        float _2389 = log2(_2388);
        float _2405 = log2(_2090);
        _2170 = (exp2(_2405 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2389 * cbSceneParam._m0[78u].x)) * _2379.x) / cbSceneParam._m0[78u].x)) + _2087;
        _2172 = (exp2(_2405 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2389 * cbSceneParam._m0[78u].y)) * _2379.y) / cbSceneParam._m0[78u].y)) + _2088;
        _2174 = (exp2(_2405 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2389 * cbSceneParam._m0[78u].z)) * _2379.z) / cbSceneParam._m0[78u].z)) + _2089;
        _2176 = _2388 * _2090;
    }
    else
    {
        _2170 = _2087;
        _2172 = _2088;
        _2174 = _2089;
        _2176 = _2090;
    }
    float _2188 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2189 = _2188 == 3.0;
    float _2190 = log2(_2176);
    float _2197 = exp2(_2190 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0)));
    float _2198 = exp2(_2190 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0)));
    float _2199 = exp2(_2190 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0)));
    float _2208 = (_2188 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2208 * (_2189 ? _2197 : (_2197 + (cbSceneParam._m0[72u].w * _2170)));
    SV_Target.y = _2208 * (_2189 ? _2198 : (_2198 + (cbSceneParam._m0[72u].w * _2172)));
    SV_Target.z = _2208 * (_2189 ? _2199 : (_2199 + (cbSceneParam._m0[72u].w * _2174)));
    SV_Target.w = cbInstanceData._m0[_2062].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2062].w;
}


