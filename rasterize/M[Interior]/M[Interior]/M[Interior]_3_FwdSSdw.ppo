#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D M_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _881;
uint _2043;
uint _2044;
uint _2045;
uint _2279;
uint _2280;
uint _2281;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _287 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _322 = cbMtdParam._m0[21u].w + _263;
    float _323 = cbMtdParam._m0[22u].x + _264;
    float _324 = cbMtdParam._m0[22u].y + _265;
    float _338 = (-0.0) - dot(vec3(_322, _323, _324), vec3(_191 * _184, _191 * _185, _191 * _186));
    float _339 = (-0.0) - dot(vec3(_322, _323, _324), vec3(_205 * TANGENT.x, _205 * TANGENT.y, _205 * TANGENT.z));
    float _340 = (-0.0) - dot(vec3(_322, _323, _324), vec3((-0.0) - (_198 * NORMAL.x), (-0.0) - (_198 * NORMAL.y), (-0.0) - (_198 * NORMAL.z)));
    float _344 = inversesqrt(dot(vec3(_338, _339, _340), vec3(_338, _339, _340)));
    float _347 = _344 * _340;
    float _348 = (_344 * _338) + (((_287.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _349 = (_344 * _339) + (((_287.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _350 = _348 * cbMtdParam._m0[18u].z;
    float _351 = _349 * cbMtdParam._m0[18u].y;
    float _352 = fract(TEXCOORD.x);
    float _353 = fract(TEXCOORD.y);
    float _359;
    if (_350 > 0.0)
    {
        _359 = (1.0 - _352) / _350;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_350 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _352) / _350;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _359 = frontier_phi_3_2_ladder;
    }
    float _367;
    if (_351 > 0.0)
    {
        _367 = (1.0 - _353) / _351;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_351 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _353) / _351;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _367 = frontier_phi_7_6_ladder;
    }
    bool _369 = _347 > 0.0;
    float _371 = _369 ? (cbMtdParam._m0[15u].x / _347) : 5000.0;
    float _372 = isnan(_367) ? _359 : (isnan(_359) ? _367 : min(_359, _367));
    float _373 = isnan(_371) ? _372 : (isnan(_372) ? _371 : min(_372, _371));
    float _377 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _378 = _352 + (-0.5);
    float _381 = _353 + (-0.5);
    float _384 = ((_373 * _347) + _377) / _377;
    vec4 _408 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_378 + (_373 * _350)) / _384) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_381 + (_373 * _351)) / _384) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _418 = cbMtdParam._m0[9u].x * _408.x;
    float _419 = cbMtdParam._m0[9u].y * _408.y;
    float _420 = cbMtdParam._m0[9u].z * _408.z;
    float _438 = _348 * cbMtdParam._m0[20u].z;
    float _439 = _349 * cbMtdParam._m0[20u].y;
    bool _440 = _438 > 0.0;
    float _445;
    if (_440)
    {
        _445 = (1.0 - _352) / _438;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_438 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _352) / _438;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _445 = frontier_phi_11_10_ladder;
    }
    bool _447 = _439 > 0.0;
    float _452;
    if (_447)
    {
        _452 = (1.0 - _353) / _439;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_439 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _353) / _439;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _452 = frontier_phi_15_14_ladder;
    }
    float _455 = _369 ? (cbMtdParam._m0[16u].x / _347) : 5000.0;
    float _456 = isnan(_452) ? _445 : (isnan(_445) ? _452 : min(_445, _452));
    float _457 = isnan(_455) ? _456 : (isnan(_456) ? _455 : min(_456, _455));
    float _461 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _465 = ((_457 * _347) + _461) / _461;
    float _470 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _472 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _488 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_378 + (_457 * _438)) / _465) + 0.5) + _470) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_381 + (_457 * _439)) / _465) + 0.5) + _472) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _500;
    if (_440)
    {
        _500 = (1.0 - _352) / _438;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_438 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _352) / _438;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _500 = frontier_phi_19_18_ladder;
    }
    float _506;
    if (_447)
    {
        _506 = (1.0 - _353) / _439;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_439 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _353) / _439;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _506 = frontier_phi_23_22_ladder;
    }
    float _508 = isnan(_506) ? _500 : (isnan(_500) ? _506 : min(_500, _506));
    float _509 = isnan(_455) ? _508 : (isnan(_508) ? _455 : min(_508, _455));
    float _516 = ((_509 * _347) + _461) / _461;
    vec4 _537 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_378 + (_509 * _438)) / _516) + 0.5) + _470) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_381 + (_509 * _439)) / _516) + 0.5) + _472) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _539 = _537.x;
    float _546 = (_539 * ((_488.x * cbMtdParam._m0[10u].x) - _418)) + _418;
    float _547 = (_539 * ((_488.y * cbMtdParam._m0[10u].y) - _419)) + _419;
    float _548 = (_539 * ((_488.z * cbMtdParam._m0[10u].z) - _420)) + _420;
    float _562 = _348 * cbMtdParam._m0[21u].x;
    float _563 = _349 * cbMtdParam._m0[20u].w;
    bool _564 = _562 > 0.0;
    float _569;
    if (_564)
    {
        _569 = (1.0 - _352) / _562;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_562 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _352) / _562;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _569 = frontier_phi_27_26_ladder;
    }
    bool _571 = _563 > 0.0;
    float _576;
    if (_571)
    {
        _576 = (1.0 - _353) / _563;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_563 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _353) / _563;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _576 = frontier_phi_31_30_ladder;
    }
    float _579 = _369 ? (cbMtdParam._m0[17u].z / _347) : 5000.0;
    float _580 = isnan(_576) ? _569 : (isnan(_569) ? _576 : min(_569, _576));
    float _581 = isnan(_579) ? _580 : (isnan(_580) ? _579 : min(_580, _579));
    float _585 = cbMtdParam._m0[17u].z * cbMtdParam._m0[15u].z;
    float _589 = ((_581 * _347) + _585) / _585;
    float _594 = cbMtdParam._m0[17u].y - cbMtdParam._m0[21u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    float _596 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    vec4 _613 = texture(sampler2D(M_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_378 + (_581 * _562)) / _589) + 0.5) + _594) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_381 + (_581 * _563)) / _589) + 0.5) + _596) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[7u].w));
    float _625;
    if (_564)
    {
        _625 = (1.0 - _352) / _562;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_562 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _352) / _562;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _625 = frontier_phi_35_34_ladder;
    }
    float _631;
    if (_571)
    {
        _631 = (1.0 - _353) / _563;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_563 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _353) / _563;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _631 = frontier_phi_39_38_ladder;
    }
    float _633 = isnan(_631) ? _625 : (isnan(_625) ? _631 : min(_625, _631));
    float _634 = isnan(_579) ? _633 : (isnan(_633) ? _579 : min(_633, _579));
    float _641 = ((_634 * _347) + _585) / _585;
    vec4 _661 = texture(sampler2D(M_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_378 + (_634 * _562)) / _641) + 0.5) + _594) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_381 + (_634 * _563)) / _641) + 0.5) + _596) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[8u].w));
    float _663 = _661.x;
    float _688 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _692 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _693 = _263 * _692;
    float _694 = _264 * _692;
    float _695 = _265 * _692;
    float _701 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _702 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _711 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_701 * cbSceneParam._m0[86u].x, _702 * cbSceneParam._m0[86u].y));
    float _714 = _711.x * TEXCOORD.z;
    float _715 = (-0.0) - _693;
    float _716 = (-0.0) - _694;
    float _717 = (-0.0) - _695;
    float _739 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _743 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _880;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _803 = (cbModelParam._m0[37u].x * ((((fma(_747, cbModelParam._m0[26u].z, fma(_743, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _739)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _805 = (cbModelParam._m0[37u].y * ((((fma(_747, cbModelParam._m0[27u].z, fma(_743, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _739)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _806 = (((((fma(_747, cbModelParam._m0[28u].z, fma(_743, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _739)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _809 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_803, _805, _806), 0.0);
        vec4 _816 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_803, _805, _806), 0.0);
        vec4 _823 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_803, _805, _806), 0.0);
        vec4 _830 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_803, _805, _806), 0.0);
        float _843 = exp2((_809.w + (-0.5)) * 20.0) * 2.0;
        float _853 = exp2((_816.w + (-0.5)) * 20.0) * 2.0;
        float _863 = exp2((_823.w + (-0.5)) * 20.0) * 2.0;
        float _873 = exp2((_830.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_830.x + (-0.5));
        float _875 = _873 * (_830.y + (-0.5));
        float _876 = _873 * (_830.z + (-0.5));
        _880 = _843 * (_809.z + (-0.5));
        _882 = _843 * (_809.y + (-0.5));
        _883 = _843 * (_809.x + (-0.5));
        _884 = _853 * (_816.z + (-0.5));
        _885 = _853 * (_816.y + (-0.5));
        _886 = _853 * (_816.x + (-0.5));
        _887 = _863 * (_823.z + (-0.5));
        _888 = _863 * (_823.y + (-0.5));
        _889 = _863 * (_823.x + (-0.5));
        _890 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        _891 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        _892 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    }
    else
    {
        _880 = _881;
        _882 = _881;
        _883 = _881;
        _884 = _881;
        _885 = _881;
        _886 = _881;
        _887 = _881;
        _888 = _881;
        _889 = _881;
        _890 = _881;
        _891 = _881;
        _892 = _881;
    }
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _946 = (cbModelParam._m0[38u].x * ((((fma(_747, cbModelParam._m0[30u].z, fma(_743, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _739)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _947 = (cbModelParam._m0[38u].y * ((((fma(_747, cbModelParam._m0[31u].z, fma(_743, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _739)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _948 = (((((fma(_747, cbModelParam._m0[32u].z, fma(_743, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _739)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        float _983 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _993 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_971.x + (-0.5));
        float _1015 = _1013 * (_971.y + (-0.5));
        float _1016 = _1013 * (_971.z + (-0.5));
        _1020 = _983 * (_950.z + (-0.5));
        _1021 = _983 * (_950.y + (-0.5));
        _1022 = _983 * (_950.x + (-0.5));
        _1023 = _993 * (_957.z + (-0.5));
        _1024 = _993 * (_957.y + (-0.5));
        _1025 = _993 * (_957.x + (-0.5));
        _1026 = _1003 * (_964.z + (-0.5));
        _1027 = _1003 * (_964.y + (-0.5));
        _1028 = _1003 * (_964.x + (-0.5));
        _1029 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        _1030 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        _1031 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    }
    else
    {
        _1020 = _881;
        _1021 = _881;
        _1022 = _881;
        _1023 = _881;
        _1024 = _881;
        _1025 = _881;
        _1026 = _881;
        _1027 = _881;
        _1028 = _881;
        _1029 = _881;
        _1030 = _881;
        _1031 = _881;
    }
    float _1046 = _693 * (-0.5);
    float _1047 = _694 * (-0.5);
    float _1048 = _695 * (-0.5);
    float _1049 = dot(vec4(_1046, _1047, _1048, 1.0), vec4(_1022, _1025, _1028, _1031));
    float _1052 = dot(vec4(_1046, _1047, _1048, 1.0), vec4(_1021, _1024, _1027, _1030));
    float _1055 = dot(vec4(_1046, _1047, _1048, 1.0), vec4(_1020, _1023, _1026, _1029));
    float _1090;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1062 = dot(vec4(_1046, _1047, _1048, 1.0), vec4(_880, _884, _887, _890));
        float _1066 = dot(vec4(_1046, _1047, _1048, 1.0), vec4(_882, _885, _888, _891));
        float _1070 = dot(vec4(_1046, _1047, _1048, 1.0), vec4(_883, _886, _889, _892));
        float _1077 = dot(vec4(cbModelParam._m0[39u]), vec4(_1046, _1047, _1048, 1.0));
        _1090 = dot(vec3(isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0)), isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)), isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1077) ? 0.0 : (isnan(0.0) ? _1077 : max(0.0, _1077))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1090 = 1.0;
    }
    float _1101;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1092 = dot(vec4(cbModelParam._m0[40u]), vec4(_1046, _1047, _1048, 1.0));
        _1101 = dot(vec3(isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0)), isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0)), isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1092) ? 0.0 : (isnan(0.0) ? _1092 : max(0.0, _1092))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1101 = 1.0;
    }
    float _1105 = (_1101 * cbModelParam._m0[1u].x) + (_1090 * (1.0 - cbModelParam._m0[1u].x));
    float _1111 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1192;
    float _1194;
    float _1196;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1159 = fma(_747, cbModelParam._m0[13u].z, fma(_743, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _739)) + cbModelParam._m0[13u].w;
        float _1163 = fma(_747, cbModelParam._m0[14u].z, fma(_743, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _739)) + cbModelParam._m0[14u].w;
        float _1167 = fma(_747, cbModelParam._m0[15u].z, fma(_743, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _739)) + cbModelParam._m0[15u].w;
        float _1170 = fma(_717, cbModelParam._m0[13u].z, fma(_716, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _715));
        float _1173 = fma(_717, cbModelParam._m0[14u].z, fma(_716, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _715));
        float _1176 = fma(_717, cbModelParam._m0[15u].z, fma(_716, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _715));
        float _1202;
        if (_1170 > 0.0)
        {
            _1202 = abs((1.0 - _1159) / _1170);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1170 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1159 + 1.0) / _1170);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1202 = frontier_phi_54_52_ladder;
        }
        float _1501;
        if (_1173 > 0.0)
        {
            _1501 = abs((1.0 - _1163) / _1173);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1173 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1163 + 1.0) / _1173);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _1501 = frontier_phi_63_59_ladder;
        }
        float _1796;
        if (_1176 > 0.0)
        {
            _1796 = abs((1.0 - _1167) / _1176);
        }
        else
        {
            float frontier_phi_77_70_ladder;
            if (_1176 < 0.0)
            {
                frontier_phi_77_70_ladder = abs((_1167 + 1.0) / _1176);
            }
            else
            {
                frontier_phi_77_70_ladder = 5000.0;
            }
            _1796 = frontier_phi_77_70_ladder;
        }
        float _1798 = isnan(_1501) ? _1202 : (isnan(_1202) ? _1501 : min(_1202, _1501));
        float _1799 = isnan(_1796) ? _1798 : (isnan(_1798) ? _1796 : min(_1798, _1796));
        float _1803 = (_1799 * _1170) + _1159;
        float _1804 = (_1799 * _1173) + _1163;
        float _1805 = (_1799 * _1176) + _1167;
        float _1806 = _1799 * 9.9999997473787516355514526367188e-05;
        float _1807 = (-1.0) - _1806;
        float _1809 = _1806 + 1.0;
        float frontier_phi_53_77_ladder;
        float frontier_phi_53_77_ladder_1;
        float frontier_phi_53_77_ladder_2;
        if ((_1805 > _1809) || ((_1805 < _1807) || ((_1804 > _1809) || ((_1804 < _1807) || ((_1803 < _1807) || (_1803 > _1809))))))
        {
            frontier_phi_53_77_ladder = 0.0;
            frontier_phi_53_77_ladder_1 = 0.0;
            frontier_phi_53_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1916 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1805, cbModelParam._m0[9u].z, fma(_1804, cbModelParam._m0[9u].y, _1803 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1805, cbModelParam._m0[10u].z, fma(_1804, cbModelParam._m0[10u].y, _1803 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1805, cbModelParam._m0[11u].z, fma(_1804, cbModelParam._m0[11u].y, _1803 * cbModelParam._m0[11u].x))), _1111);
            frontier_phi_53_77_ladder = _1916.z * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_1 = _1916.y * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_2 = _1916.x * cbModelParam._m0[1u].y;
        }
        _1192 = frontier_phi_53_77_ladder_2;
        _1194 = frontier_phi_53_77_ladder_1;
        _1196 = frontier_phi_53_77_ladder;
    }
    else
    {
        vec4 _1180 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_715, _716, _717), _1111);
        _1192 = _1180.x * cbModelParam._m0[1u].y;
        _1194 = _1180.y * cbModelParam._m0[1u].y;
        _1196 = _1180.z * cbModelParam._m0[1u].y;
    }
    float _1199 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1287;
    float _1289;
    float _1291;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1251 = fma(_747, cbModelParam._m0[21u].z, fma(_743, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _739)) + cbModelParam._m0[21u].w;
        float _1255 = fma(_747, cbModelParam._m0[22u].z, fma(_743, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _739)) + cbModelParam._m0[22u].w;
        float _1259 = fma(_747, cbModelParam._m0[23u].z, fma(_743, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _739)) + cbModelParam._m0[23u].w;
        float _1262 = fma(_717, cbModelParam._m0[21u].z, fma(_716, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _715));
        float _1265 = fma(_717, cbModelParam._m0[22u].z, fma(_716, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _715));
        float _1268 = fma(_717, cbModelParam._m0[23u].z, fma(_716, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _715));
        float _1506;
        if (_1262 > 0.0)
        {
            _1506 = abs((1.0 - _1251) / _1262);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1262 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1251 + 1.0) / _1262);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _1506 = frontier_phi_65_61_ladder;
        }
        float _1822;
        if (_1265 > 0.0)
        {
            _1822 = abs((1.0 - _1255) / _1265);
        }
        else
        {
            float frontier_phi_79_72_ladder;
            if (_1265 < 0.0)
            {
                frontier_phi_79_72_ladder = abs((_1255 + 1.0) / _1265);
            }
            else
            {
                frontier_phi_79_72_ladder = 5000.0;
            }
            _1822 = frontier_phi_79_72_ladder;
        }
        float _1973;
        if (_1268 > 0.0)
        {
            _1973 = abs((1.0 - _1259) / _1268);
        }
        else
        {
            float frontier_phi_93_88_ladder;
            if (_1268 < 0.0)
            {
                frontier_phi_93_88_ladder = abs((_1259 + 1.0) / _1268);
            }
            else
            {
                frontier_phi_93_88_ladder = 5000.0;
            }
            _1973 = frontier_phi_93_88_ladder;
        }
        float _1975 = isnan(_1822) ? _1506 : (isnan(_1506) ? _1822 : min(_1506, _1822));
        float _1976 = isnan(_1973) ? _1975 : (isnan(_1975) ? _1973 : min(_1975, _1973));
        float _1980 = (_1976 * _1262) + _1251;
        float _1981 = (_1976 * _1265) + _1255;
        float _1982 = (_1976 * _1268) + _1259;
        float _1983 = _1976 * 9.9999997473787516355514526367188e-05;
        float _1984 = (-1.0) - _1983;
        float _1986 = _1983 + 1.0;
        float frontier_phi_62_93_ladder;
        float frontier_phi_62_93_ladder_1;
        float frontier_phi_62_93_ladder_2;
        if ((_1982 > _1986) || ((_1982 < _1984) || ((_1981 > _1986) || ((_1981 < _1984) || ((_1980 < _1984) || (_1980 > _1986))))))
        {
            frontier_phi_62_93_ladder = 0.0;
            frontier_phi_62_93_ladder_1 = 0.0;
            frontier_phi_62_93_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2142 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1982, cbModelParam._m0[17u].z, fma(_1981, cbModelParam._m0[17u].y, _1980 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1982, cbModelParam._m0[18u].z, fma(_1981, cbModelParam._m0[18u].y, _1980 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1982, cbModelParam._m0[19u].z, fma(_1981, cbModelParam._m0[19u].y, _1980 * cbModelParam._m0[19u].x))), _1199);
            frontier_phi_62_93_ladder = _2142.z * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_1 = _2142.y * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_2 = _2142.x * cbModelParam._m0[1u].z;
        }
        _1287 = frontier_phi_62_93_ladder_2;
        _1289 = frontier_phi_62_93_ladder_1;
        _1291 = frontier_phi_62_93_ladder;
    }
    else
    {
        vec4 _1271 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_715, _716, _717), _1199);
        _1287 = _1271.x * cbModelParam._m0[1u].z;
        _1289 = _1271.y * cbModelParam._m0[1u].z;
        _1291 = _1271.z * cbModelParam._m0[1u].z;
    }
    float _1303 = _714 * 0.01200000010430812835693359375;
    float _1305 = _1303 * ((cbModelParam._m0[1u].w * (_1287 - _1192)) + _1192);
    float _1306 = _1303 * ((cbModelParam._m0[1u].w * (_1289 - _1194)) + _1194);
    float _1307 = _1303 * ((cbModelParam._m0[1u].w * (_1291 - _1196)) + _1196);
    float _1328 = fma(_1307, cbSceneParam._m0[89u].z, fma(_1306, cbSceneParam._m0[89u].y, _1305 * cbSceneParam._m0[89u].x));
    float _1331 = fma(_1307, cbSceneParam._m0[90u].z, fma(_1306, cbSceneParam._m0[90u].y, _1305 * cbSceneParam._m0[90u].x));
    float _1334 = fma(_1307, cbSceneParam._m0[91u].z, fma(_1306, cbSceneParam._m0[91u].y, _1305 * cbSceneParam._m0[91u].x));
    vec4 _1342 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_701, _702));
    float _1344 = _1342.w;
    uint _1360 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1365 = floatBitsToUint(cbInstanceData._m0[_1360 + 5u]);
    uint _1367 = _1365.x * 14u;
    uint _1368 = _1367 + 13u;
    float _1373 = _714 + (-1.0);
    float _1376 = (cbLight._m0[_1368].x * _1373) + 1.0;
    float _1377 = (cbLight._m0[_1368].y * _1373) + 1.0;
    uint _1378 = _1367 + 8u;
    float _1389 = cbLight._m0[_1367].x + _693;
    float _1390 = cbLight._m0[_1367].y + _694;
    float _1391 = cbLight._m0[_1367].z + _695;
    float _1395 = inversesqrt(dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391)));
    float _1399 = dot(vec3(0.0), vec3(cbLight._m0[_1367].xyz));
    float _2704 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
    float _1402 = isnan(1.0) ? _2704 : (isnan(_2704) ? 1.0 : min(_2704, 1.0));
    float _1403 = dot(vec3(0.0), vec3(_693, _694, _695));
    float _2715 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
    float _1406 = isnan(1.0) ? _2715 : (isnan(_2715) ? 1.0 : min(_2715, 1.0));
    float _1407 = dot(vec3(cbLight._m0[_1367].xyz), vec3(_1389 * _1395, _1390 * _1395, _1391 * _1395));
    float _2726 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
    float _1418 = (exp2(log2(1.0 - (isnan(1.0) ? _2726 : (isnan(_2726) ? 1.0 : min(_2726, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1424 = (0.5 / ((_1402 + 9.9999999392252902907785028219223e-09) + _1406)) * _1402;
    float _2737 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
    float _1426 = (isnan(1.0) ? _2737 : (isnan(_2737) ? 1.0 : min(_2737, 1.0))) * 0.31831014156341552734375;
    float _1428 = isnan(1.0) ? _1376 : (isnan(_1376) ? 1.0 : min(_1376, 1.0));
    uint _1441 = _1367 + 9u;
    uint _1447 = _1367 | 1u;
    float _1453 = cbLight._m0[_1447].x + _693;
    float _1454 = cbLight._m0[_1447].y + _694;
    float _1455 = cbLight._m0[_1447].z + _695;
    float _1459 = inversesqrt(dot(vec3(_1453, _1454, _1455), vec3(_1453, _1454, _1455)));
    float _1463 = dot(vec3(0.0), vec3(cbLight._m0[_1447].xyz));
    float _2753 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
    float _1466 = isnan(1.0) ? _2753 : (isnan(_2753) ? 1.0 : min(_2753, 1.0));
    float _1467 = dot(vec3(cbLight._m0[_1447].xyz), vec3(_1453 * _1459, _1454 * _1459, _1455 * _1459));
    float _2764 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
    float _1476 = (exp2(log2(1.0 - (isnan(1.0) ? _2764 : (isnan(_2764) ? 1.0 : min(_2764, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1480 = (0.5 / ((_1466 + 9.9999999392252902907785028219223e-09) + _1406)) * _1466;
    float _2775 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
    float _1482 = (isnan(1.0) ? _2775 : (isnan(_2775) ? 1.0 : min(_2775, 1.0))) * 0.31831014156341552734375;
    float _1483 = isnan(1.0) ? _1377 : (isnan(_1377) ? 1.0 : min(_1377, 1.0));
    float _1493 = (((_1476 * cbLight._m0[_1441].x) * _1482) * _1483) + ((((cbLight._m0[_1378].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1344))) * _1418) * _1426) * _1428);
    float _1494 = (((_1476 * cbLight._m0[_1441].y) * _1482) * _1483) + ((((cbLight._m0[_1378].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1344))) * _1418) * _1426) * _1428);
    float _1495 = (((_1476 * cbLight._m0[_1441].z) * _1482) * _1483) + ((((cbLight._m0[_1378].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1344))) * _1418) * _1426) * _1428);
    float _1611;
    float _1613;
    float _1615;
    if (_1365.y == 0u)
    {
        float _1551 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1552 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1551;
        float _1553 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1551;
        float _1554 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1551;
        uvec4 _1566 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1567 = _1566.x;
        uint _1578 = uint((float(_1566.y) * floor(float(uint(cbSceneParam._m0[85u].y * _702) / _1567))) + floor(float(uint(cbSceneParam._m0[85u].x * _701) / _1567)));
        float _1588 = (log2(_1554 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1589 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        uint _1592 = uint(isnan(14.0) ? _1589 : (isnan(_1589) ? 14.0 : min(_1589, 14.0)));
        uvec4 _1597 = texelFetch(g_lightClusterGridBuffer, int(((_1592 << 2u) + (_1578 << 6u)) >> 2u));
        uint _1598 = _1597.x;
        uint _1599 = _1566.z;
        float _1688;
        float _1690;
        float _1692;
        if (((((1u << ((_1599 >> 4u) & 15u)) + 4294967295u) & _1598) == 0u) || ((_1599 & 240u) == 0u))
        {
            _1688 = 0.0;
            _1690 = 0.0;
            _1692 = 0.0;
        }
        else
        {
            float _1689;
            float _1691;
            float _1693;
            float _1847 = 0.0;
            float _1848 = 0.0;
            float _1849 = 0.0;
            uint _1850 = 0u;
            uint _1859;
            bool _1860;
            for (;;)
            {
                _1859 = texelFetch(g_lightClassification, int((((_1592 << 5u) + (_1578 << 9u)) + (_1850 << 2u)) >> 2u)).x;
                _1860 = _1859 == 0u;
                float frontier_phi_90_pred;
                float frontier_phi_90_pred_1;
                float frontier_phi_90_pred_2;
                if (_1860)
                {
                    frontier_phi_90_pred = _1849;
                    frontier_phi_90_pred_1 = _1848;
                    frontier_phi_90_pred_2 = _1847;
                }
                else
                {
                    float _2013;
                    float _2014;
                    float _2015;
                    uint _2016;
                    _2013 = _1847;
                    _2014 = _1848;
                    _2015 = _1849;
                    _2016 = _1859;
                    float _1925;
                    float _1926;
                    float _1927;
                    for (;;)
                    {
                        uint _2020 = uint(findLSB(_2016)) + (_1850 << 5u);
                        uint _2017 = (_2016 + 4294967295u) & _2016;
                        uint _2022 = _2020 * 48u;
                        vec4 _2036 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2022)).x, texelFetch(g_PointLightRenderingBuffer, int(_2022 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2022 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2022 + 3u)).x));
                        uint _2053 = (_2020 * 48u) + 8u;
                        vec3 _2064 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2053)).x, texelFetch(g_PointLightRenderingBuffer, int(_2053 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2053 + 2u)).x));
                        float _2068 = _2036.x - _1552;
                        float _2069 = _2036.y - _1553;
                        float _2070 = _2036.z - _1554;
                        float _2071 = dot(vec3(_2068, _2069, _2070), vec3(_2068, _2069, _2070));
                        float _2074 = inversesqrt(_2071);
                        float _2083 = 1.0 - (_2071 * _2036.w);
                        float _2801 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
                        float _2085 = sqrt(_2071) * uintBitsToFloat(uvec4(_2043, _2044, _2045, texelFetch(g_PointLightRenderingBuffer, int(((_2020 * 48u) + 4u) + 3u)).x)).w;
                        float _2088 = 1.39999997615814208984375 / (_2085 + 1.39999997615814208984375);
                        float _2089 = _2088 * _2088;
                        float _2092 = ((1.0 - _2089) * dot(vec3(0.0), vec3(_2074 * _2068, _2074 * _2069, _2074 * _2070))) + _2089;
                        float _2094 = (-0.0) - _1552;
                        float _2095 = (-0.0) - _1553;
                        float _2096 = (-0.0) - _1554;
                        float _2100 = inversesqrt(dot(vec3(_2094, _2095, _2096), vec3(_2094, _2095, _2096)));
                        float _2104 = dot(vec3(0.0), vec3(_2100 * _2094, _2100 * _2095, _2100 * _2096));
                        float _2812 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
                        float _2823 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
                        float _2108 = isnan(1.0) ? _2823 : (isnan(_2823) ? 1.0 : min(_2823, 1.0));
                        float _2112 = (0.5 / (((isnan(1.0) ? _2812 : (isnan(_2812) ? 1.0 : min(_2812, 1.0))) + 9.9999999392252902907785028219223e-09) + _2108)) * _2108;
                        float _2834 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
                        float _2121 = (((isnan(1.0) ? _2834 : (isnan(_2834) ? 1.0 : min(_2834, 1.0))) * 3.1415927410125732421875) / (((_2085 * _2085) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2801 : (isnan(_2801) ? 1.0 : min(_2801, 1.0)));
                        _1925 = (_2121 * _2064.x) + _2013;
                        _1926 = (_2121 * _2064.y) + _2014;
                        _1927 = (_2121 * _2064.z) + _2015;
                        if (_2017 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2013 = _1925;
                            _2014 = _1926;
                            _2015 = _1927;
                            _2016 = _2017;
                        }
                    }
                    frontier_phi_90_pred = _1927;
                    frontier_phi_90_pred_1 = _1926;
                    frontier_phi_90_pred_2 = _1925;
                }
                _1693 = frontier_phi_90_pred;
                _1691 = frontier_phi_90_pred_1;
                _1689 = frontier_phi_90_pred_2;
                uint _1851 = _1850 + 1u;
                if (_1851 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1847 = _1689;
                    _1848 = _1691;
                    _1849 = _1693;
                    _1850 = _1851;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1688 = _1689;
            _1690 = _1691;
            _1692 = _1693;
        }
        uvec4 _1696 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1697 = _1696.z;
        uint _1699 = (_1697 >> 8u) & 15u;
        float _1827;
        float _1829;
        float _1831;
        if (((4294967295u << _1699) & _1598) == 0u)
        {
            _1827 = _1688;
            _1829 = _1690;
            _1831 = _1692;
        }
        else
        {
            float _1843 = inversesqrt(dot(vec3(_1552, _1553, _1554), vec3(_1552, _1553, _1554)));
            float frontier_phi_81_82_ladder;
            float frontier_phi_81_82_ladder_1;
            float frontier_phi_81_82_ladder_2;
            if (_1699 < ((_1697 >> 12u) & 15u))
            {
                float _1828;
                float _1830;
                float _1832;
                float _1999 = _1688;
                float _2000 = _1690;
                float _2001 = _1692;
                uint _2002 = _1699;
                uint _2011;
                bool _2012;
                for (;;)
                {
                    _2011 = texelFetch(g_lightClassification, int((((_1592 << 5u) + (_1578 << 9u)) + (_2002 << 2u)) >> 2u)).x;
                    _2012 = _2011 == 0u;
                    float frontier_phi_99_pred;
                    float frontier_phi_99_pred_1;
                    float frontier_phi_99_pred_2;
                    if (_2012)
                    {
                        frontier_phi_99_pred = _2001;
                        frontier_phi_99_pred_1 = _2000;
                        frontier_phi_99_pred_2 = _1999;
                    }
                    else
                    {
                        float _2147;
                        float _2148;
                        float _2149;
                        float _2368;
                        float _2369;
                        float _2370;
                        float _2157 = _1999;
                        float _2158 = _2000;
                        float _2159 = _2001;
                        uint _2160 = _2011;
                        uint _2161;
                        uint _2171;
                        vec4 _2186;
                        float _2187;
                        vec3 _2199;
                        vec4 _2214;
                        vec4 _2229;
                        float _2275;
                        bool _2276;
                        for (;;)
                        {
                            _2171 = ((_2002 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2160));
                            _2161 = (_2160 + 4294967295u) & _2160;
                            uint _2173 = _2171 * 40u;
                            _2186 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2173 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2173 + 3u)).x));
                            _2187 = _2186.w;
                            uint _2189 = (_2171 * 40u) + 8u;
                            _2199 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2189 + 2u)).x));
                            uint _2201 = (_2171 * 40u) + 16u;
                            _2214 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2201 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2201 + 3u)).x));
                            uint _2216 = (_2171 * 40u) + 20u;
                            _2229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2216 + 3u)).x));
                            uint _2231 = (_2171 * 40u) + 24u;
                            vec4 _2244 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2231)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2231 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2231 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2231 + 3u)).x));
                            uint _2250 = (_2171 * 40u) + 28u;
                            vec4 _2263 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2250 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2250 + 3u)).x));
                            _2275 = fma(_1554, _2263.z, fma(_1553, _2263.y, _2263.x * _1552)) + _2263.w;
                            _2276 = !((fma(_1554, _2244.z, fma(_1553, _2244.y, _2244.x * _1552)) + _2244.w) <= 0.0);
                            float frontier_phi_105_pred;
                            float frontier_phi_105_pred_1;
                            float frontier_phi_105_pred_2;
                            if (_2276)
                            {
                                float _2310 = _2186.x - _1552;
                                float _2311 = _2186.y - _1553;
                                float _2312 = _2186.z - _1554;
                                float _2313 = dot(vec3(_2310, _2311, _2312), vec3(_2310, _2311, _2312));
                                float _2316 = inversesqrt(_2313);
                                float _2323 = 1.0 - (_2313 / (_2187 * _2187));
                                float _2845 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
                                float _2325 = sqrt(_2313) * uintBitsToFloat(uvec4(_2279, _2280, _2281, texelFetch(g_SpotLightRenderingBuffer, int(((_2171 * 40u) + 4u) + 3u)).x)).w;
                                float _2327 = 1.39999997615814208984375 / (_2325 + 1.39999997615814208984375);
                                float _2328 = _2327 * _2327;
                                float _2331 = (fma(_1554, _2214.z, fma(_1553, _2214.y, _2214.x * _1552)) + _2214.w) / _2275;
                                float _2332 = (fma(_1554, _2229.z, fma(_1553, _2229.y, _2229.x * _1552)) + _2229.w) / _2275;
                                float _2336 = 1.0 - dot(vec2(_2331, _2332), vec2(_2331, _2332));
                                float _2856 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
                                float _2344 = dot(vec3(0.0), vec3((-0.0) - (_1552 * _1843), (-0.0) - (_1553 * _1843), (-0.0) - (_1554 * _1843)));
                                float _2867 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
                                float _2352 = ((1.0 - _2328) * dot(vec3(0.0), vec3(_2316 * _2310, _2316 * _2311, _2316 * _2312))) + _2328;
                                float _2878 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
                                float _2353 = isnan(1.0) ? _2878 : (isnan(_2878) ? 1.0 : min(_2878, 1.0));
                                float _2357 = (0.5 / (((isnan(1.0) ? _2867 : (isnan(_2867) ? 1.0 : min(_2867, 1.0))) + 9.9999999392252902907785028219223e-09) + _2353)) * _2353;
                                float _2889 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
                                float _2364 = ((isnan(1.0) ? _2856 : (isnan(_2856) ? 1.0 : min(_2856, 1.0))) * (isnan(1.0) ? _2845 : (isnan(_2845) ? 1.0 : min(_2845, 1.0)))) * (((isnan(1.0) ? _2889 : (isnan(_2889) ? 1.0 : min(_2889, 1.0))) * 3.1415927410125732421875) / (((_2325 * _2325) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_105_pred = _2364 * _2199.z;
                                frontier_phi_105_pred_1 = _2364 * _2199.y;
                                frontier_phi_105_pred_2 = _2364 * _2199.x;
                            }
                            else
                            {
                                frontier_phi_105_pred = 0.0;
                                frontier_phi_105_pred_1 = 0.0;
                                frontier_phi_105_pred_2 = 0.0;
                            }
                            _2370 = frontier_phi_105_pred;
                            _2369 = frontier_phi_105_pred_1;
                            _2368 = frontier_phi_105_pred_2;
                            _2147 = _2368 + _2157;
                            _2148 = _2369 + _2158;
                            _2149 = _2370 + _2159;
                            if (_2161 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2157 = _2147;
                                _2158 = _2148;
                                _2159 = _2149;
                                _2160 = _2161;
                                continue;
                            }
                        }
                        frontier_phi_99_pred = _2149;
                        frontier_phi_99_pred_1 = _2148;
                        frontier_phi_99_pred_2 = _2147;
                    }
                    _1832 = frontier_phi_99_pred;
                    _1830 = frontier_phi_99_pred_1;
                    _1828 = frontier_phi_99_pred_2;
                    uint _2003 = _2002 + 1u;
                    if (_2003 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1999 = _1828;
                        _2000 = _1830;
                        _2001 = _1832;
                        _2002 = _2003;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_81_82_ladder = _1830;
                frontier_phi_81_82_ladder_1 = _1828;
                frontier_phi_81_82_ladder_2 = _1832;
            }
            else
            {
                frontier_phi_81_82_ladder = _1690;
                frontier_phi_81_82_ladder_1 = _1688;
                frontier_phi_81_82_ladder_2 = _1692;
            }
            _1827 = frontier_phi_81_82_ladder_1;
            _1829 = frontier_phi_81_82_ladder;
            _1831 = frontier_phi_81_82_ladder_2;
        }
        float _1836 = isnan(1.0) ? _714 : (isnan(_714) ? 1.0 : min(_714, 1.0));
        _1611 = ((_1827 * 0.039999999105930328369140625) * _1836) + _1493;
        _1613 = ((_1829 * 0.039999999105930328369140625) * _1836) + _1494;
        _1615 = ((_1831 * 0.039999999105930328369140625) * _1836) + _1495;
    }
    else
    {
        _1611 = _1493;
        _1613 = _1494;
        _1615 = _1495;
    }
    uint _1622 = (_1360 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1637 = (cbInstanceData._m0[_1622].x * ((_663 * ((_613.x * cbMtdParam._m0[14u].x) - _546)) + _546)) + ((_1611 + ((isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0))) * _1105)) * cbPerFrame._m0[3u].x);
    float _1638 = (cbInstanceData._m0[_1622].y * ((_663 * ((_613.y * cbMtdParam._m0[14u].y) - _547)) + _547)) + ((_1613 + ((isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0))) * _1105)) * cbPerFrame._m0[3u].x);
    float _1639 = (cbInstanceData._m0[_1622].z * ((_663 * ((_613.z * cbMtdParam._m0[14u].z) - _548)) + _548)) + ((_1615 + ((isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0))) * _1105)) * cbPerFrame._m0[3u].x);
    uint _1643 = _1360 + 6u;
    float _1651 = _701 / cbSceneParam._m0[86u].x;
    float _1652 = _702 / cbSceneParam._m0[86u].y;
    vec4 _1666 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1651, _1652, (log2((isnan(cbSceneParam._m0[77u].w) ? _688 : (isnan(_688) ? cbSceneParam._m0[77u].w : min(_688, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1668 = _1666.x;
    float _1669 = _1666.y;
    float _1670 = _1666.z;
    float _1671 = _1666.w;
    float _1745;
    float _1747;
    float _1749;
    float _1751;
    if (_688 > cbSceneParam._m0[78u].w)
    {
        float _1707 = isnan(_688) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _688 : min(cbSceneParam._m0[80u].w, _688));
        float _1708 = _1707 / _688;
        float _1719 = _1708 * _263;
        float _1720 = _264 * _1708;
        float _1721 = (-0.0) - _1720;
        float _1722 = _1708 * _265;
        float _1724 = (cbSceneParam._m0[77u].w * _1721) / _1707;
        float _1725 = _1724 + cbSceneParam._m0[79u].w;
        float _1726 = cbSceneParam._m0[79u].w - _1720;
        float _1732 = sqrt(((_1719 * _1719) + (_1720 * _1720)) + (_1722 * _1722));
        float _1735 = (1.0 - (cbSceneParam._m0[77u].w / _1707)) * _1732;
        float _1741 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1743 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1935;
        if (abs((_1721 - _1724) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1935 = ((((_1725 > 0.0) ? exp2(_1741 * _1725) : (2.0 - exp2(_1743 * _1725))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1735;
        }
        else
        {
            float _1873 = 1.0 / cbSceneParam._m0[80u].x;
            float _1874 = isnan(_1726) ? _1725 : (isnan(_1725) ? _1726 : max(_1725, _1726));
            float _1875 = isnan(_1726) ? _1725 : (isnan(_1725) ? _1726 : min(_1725, _1726));
            float _1884 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : min(_1874, 0.0));
            float _1885 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : min(_1875, 0.0));
            _1935 = ((abs(_1732 / _1721) * cbSceneParam._m0[80u].y) * ((((_1884 - _1885) * 2.0) - ((exp2(_1741 * (isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0)))) - exp2(_1741 * (isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))))) * _1873)) - ((exp2(_1743 * _1884) - exp2(_1743 * _1885)) * _1873))) + (_1735 * cbSceneParam._m0[80u].z);
        }
        vec4 _1937 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1651, _1652, 1.0), 0.0);
        float _1946 = exp2((_1935 * (-1.44269502162933349609375)) * (1.0 - _1937.w));
        float _1947 = log2(_1946);
        float _1963 = log2(_1671);
        _1745 = (exp2(_1963 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1947 * cbSceneParam._m0[78u].x)) * _1937.x) / cbSceneParam._m0[78u].x)) + _1668;
        _1747 = (exp2(_1963 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1947 * cbSceneParam._m0[78u].y)) * _1937.y) / cbSceneParam._m0[78u].y)) + _1669;
        _1749 = (exp2(_1963 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1947 * cbSceneParam._m0[78u].z)) * _1937.z) / cbSceneParam._m0[78u].z)) + _1670;
        _1751 = _1946 * _1671;
    }
    else
    {
        _1745 = _1668;
        _1747 = _1669;
        _1749 = _1670;
        _1751 = _1671;
    }
    float _1763 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1764 = _1763 == 3.0;
    float _1766 = log2(_1751);
    float _1773 = exp2(_1766 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)));
    float _1774 = exp2(_1766 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)));
    float _1775 = exp2(_1766 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)));
    float _1784 = (_1763 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1784 * (_1764 ? _1773 : (_1773 + (cbSceneParam._m0[72u].w * _1745)));
    SV_Target.y = _1784 * (_1764 ? _1774 : (_1774 + (cbSceneParam._m0[72u].w * _1747)));
    SV_Target.z = _1784 * (_1764 ? _1775 : (_1775 + (cbSceneParam._m0[72u].w * _1749)));
    SV_Target.w = cbInstanceData._m0[_1643].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1643].w;
}


