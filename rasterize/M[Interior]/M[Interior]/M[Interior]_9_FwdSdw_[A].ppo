#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _445;
float _3495;
float _3496;
float _3497;
float _3498;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    vec4 _282 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _285 = _282.x;
    vec4 _303 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _320 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _285) + cbMtdParam._m0[12u].x) * _303.x;
    float _322 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _285) + cbMtdParam._m0[12u].y) * _303.y;
    float _324 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _285) + cbMtdParam._m0[12u].z) * _303.z;
    vec4 _358 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _373 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _380 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _392 = cbMtdParam._m0[22u].z + _267;
    float _393 = cbMtdParam._m0[22u].w + _268;
    float _394 = cbMtdParam._m0[23u].x + _269;
    float _408 = (-0.0) - dot(vec3(_392, _393, _394), vec3(_373 * _196, _373 * _197, _373 * _198));
    float _409 = (-0.0) - dot(vec3(_392, _393, _394), vec3(_380 * _210, _380 * _211, _380 * _212));
    float _410 = (-0.0) - dot(vec3(_392, _393, _394), vec3((-0.0) - _203, (-0.0) - _204, (-0.0) - _205));
    float _414 = inversesqrt(dot(vec3(_408, _409, _410), vec3(_408, _409, _410)));
    float _415 = _414 * _410;
    float _420 = ((cbMtdParam._m0[19u].y * _408) * _414) + (((_358.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _421 = ((cbMtdParam._m0[19u].z * _409) * _414) + (((_358.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _424 = fract(cbMtdParam._m0[19u].y * TEXCOORD.x);
    float _425 = fract(cbMtdParam._m0[19u].z * TEXCOORD.y);
    float _443;
    float _446;
    float _448;
    if (_420 > 0.0)
    {
        float _429 = (1.0 - _424) / _420;
        _443 = _429;
        _446 = ((cbMtdParam._m0[16u].z + 1.0) - fract(_429 * _415)) * 0.16666667163372039794921875;
        _448 = (fract((_429 * _421) + _425) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_420 < 0.0)
        {
            float _444 = ((-0.0) - _424) / _420;
            frontier_phi_3_2_ladder = (fract(_444 * _415) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _444;
            frontier_phi_3_2_ladder_2 = (fract((_444 * _421) + _425) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _445;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _443 = frontier_phi_3_2_ladder_1;
        _446 = frontier_phi_3_2_ladder;
        _448 = frontier_phi_3_2_ladder_2;
    }
    float _474;
    float _476;
    float _478;
    if (_421 > 0.0)
    {
        float _461 = (1.0 - _425) / _421;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_461 < _443)
        {
            frontier_phi_8_5_ladder = (fract(_461 * _415) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_461 * _420) + _424) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _461;
        }
        else
        {
            frontier_phi_8_5_ladder = _448;
            frontier_phi_8_5_ladder_1 = _446;
            frontier_phi_8_5_ladder_2 = _443;
        }
        _474 = frontier_phi_8_5_ladder_2;
        _476 = frontier_phi_8_5_ladder_1;
        _478 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_421 < 0.0)
        {
            float _475 = ((-0.0) - _425) / _421;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_475 < _443)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_475 * _415) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_475 * _420) + _424) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _475;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _448;
                frontier_phi_8_6_ladder_9_ladder_1 = _446;
                frontier_phi_8_6_ladder_9_ladder_2 = _443;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _448;
            frontier_phi_8_6_ladder_1 = _446;
            frontier_phi_8_6_ladder_2 = _443;
        }
        _474 = frontier_phi_8_6_ladder_2;
        _476 = frontier_phi_8_6_ladder_1;
        _478 = frontier_phi_8_6_ladder;
    }
    float _482 = (_415 > 0.0) ? (cbMtdParam._m0[16u].y / _415) : 5000.0;
    float _495;
    float _496;
    if (_482 < _474)
    {
        _495 = ((_424 + cbMtdParam._m0[16u].z) + (_482 * _420)) * 0.16666667163372039794921875;
        _496 = (((_482 * _421) + _425) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _495 = _476;
        _496 = _478;
    }
    vec4 _498 = texture(sampler2D(M_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_495, _496));
    vec4 _514 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _518 = _514.z;
    float _521 = (_514.x * 2.0) + (-1.0);
    float _522 = (_514.y * 2.0) + (-1.0);
    float _523 = dot(vec2(_521, _522), vec2(_521, _522));
    float _3507 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _528 = sqrt(1.0 - (isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))));
    float _531 = fma(_528, _203, fma(_522, _210, _521 * _196));
    float _534 = fma(_528, _204, fma(_522, _211, _521 * _197));
    float _537 = fma(_528, _205, fma(_522, _212, _521 * _198));
    float _541 = inversesqrt(dot(vec3(_531, _534, _537), vec3(_531, _534, _537)));
    float _542 = _541 * _531;
    float _543 = _541 * _534;
    float _544 = _541 * _537;
    float _3518 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _545 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
    float _3529 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3540 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _3551 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _564 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _568 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _569 = _267 * _568;
    float _570 = _268 * _568;
    float _571 = _269 * _568;
    vec4 _576 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _578 = _576.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _741 = sqrt(((_267 * _267) + (_268 * _268)) + (_269 * _269));
        float _747 = (cbMatDynParam._m0[5u].x * _741) + cbMatDynParam._m0[5u].y;
        float _3562 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _748 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _752 = (cbMatDynParam._m0[5u].z * _741) + cbMatDynParam._m0[5u].w;
        float _3573 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) - _748)) + _748) < ((_578 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _596 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _597 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _617 = fma(_544, cbSceneParam._m0[5u].z, fma(_543, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _542));
    float _620 = fma(_544, cbSceneParam._m0[6u].z, fma(_543, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _542));
    float _623 = fma(_544, cbSceneParam._m0[7u].z, fma(_543, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _542));
    uint _636 = uint(roundEven(NORMAL.w)) * 13u;
    uint _637 = _636 + 9u;
    uint _638 = _637 + uint(cbMatDynParam._m0[0u].w);
    float _644 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0)))) * cbInstanceData._m0[_638].x;
    float _645 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0)))) * cbInstanceData._m0[_638].y;
    float _646 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0)))) * cbInstanceData._m0[_638].z;
    float _3584 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _647 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
    float _3595 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _648 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    float _3606 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _649 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    vec4 _658 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _596, cbSceneParam._m0[86u].y * _597));
    float _661 = _658.x * TEXCOORD.z;
    float _662 = dot(vec3(_542, _543, _544), vec3(_569, _570, _571));
    float _665 = _662 * 2.0;
    float _669 = (_665 * _542) - _569;
    float _670 = (_665 * _543) - _570;
    float _671 = (_665 * _544) - _571;
    float _675 = abs(dot(vec3(_569, _570, _571), vec3(_542, _543, _544)));
    float _3617 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _677 = sqrt(_545);
    float _690 = exp2((_677 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_677 * 3.0));
    float _722 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _726 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _730 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _786 = fma(_730, cbModelParam._m0[26u].z, fma(_726, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _722));
        float _790 = fma(_730, cbModelParam._m0[27u].z, fma(_726, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _722));
        float _794 = fma(_730, cbModelParam._m0[28u].z, fma(_726, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _722));
        float _818 = _722 + _542;
        float _819 = _726 + _543;
        float _820 = _730 + _544;
        float _830 = fma(_820, cbModelParam._m0[26u].z, fma(_819, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _818)) - _786;
        float _831 = fma(_820, cbModelParam._m0[27u].z, fma(_819, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _818)) - _790;
        float _832 = fma(_820, cbModelParam._m0[28u].z, fma(_819, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _818)) - _794;
        float _836 = inversesqrt(dot(vec3(_830, _831, _832), vec3(_830, _831, _832)));
        float _849 = ((_836 * _830) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_786 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _850 = ((_836 * _831) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_790 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _851 = ((_836 * _832) / cbModelParam._m0[34u].z) + ((((((_794 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        vec4 _868 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        float _888 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_854.x + (-0.5));
        float _890 = _888 * (_854.y + (-0.5));
        float _891 = _888 * (_854.z + (-0.5));
        float _898 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_861.x + (-0.5));
        float _900 = _898 * (_861.y + (-0.5));
        float _901 = _898 * (_861.z + (-0.5));
        float _908 = exp2((_868.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_868.x + (-0.5));
        float _910 = _908 * (_868.y + (-0.5));
        float _911 = _908 * (_868.z + (-0.5));
        float _918 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _919 = _918 * (_875.x + (-0.5));
        float _920 = _918 * (_875.y + (-0.5));
        float _921 = _918 * (_875.z + (-0.5));
        float _922 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _923 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _924 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _925 = _889 * 0.5;
        float _926 = _899 * 0.5;
        float _927 = _909 * 0.5;
        float _928 = dot(vec3(_925, _926, _927), vec3(_925, _926, _927));
        float _933 = (_928 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_928);
        float _942 = (dot(vec3(_542, _543, _544), vec3(_933 * _925, _933 * _926, _933 * _927)) + 1.0) * 0.5;
        float _3643 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _952 = sqrt(((_926 * _926) + (_925 * _925)) + (_927 * _927)) / (_922 + 9.9999997473787516355514526367188e-06);
        float _3654 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _953 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _954 = _953 * 2.0;
        float _958 = (1.0 - _953) / (_953 + 1.0);
        float _3665 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _968 = ((((1.0 - _959) * (_954 + 2.0)) * exp2(log2(isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * (_954 + 1.0))) + _959) * _922;
        float _969 = _890 * 0.5;
        float _970 = _900 * 0.5;
        float _971 = _910 * 0.5;
        float _972 = dot(vec3(_969, _970, _971), vec3(_969, _970, _971));
        float _977 = (_972 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_972);
        float _985 = (dot(vec3(_542, _543, _544), vec3(_977 * _969, _977 * _970, _977 * _971)) + 1.0) * 0.5;
        float _3676 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _994 = sqrt(((_970 * _970) + (_969 * _969)) + (_971 * _971)) / (_923 + 9.9999997473787516355514526367188e-06);
        float _3687 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _995 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _996 = _995 * 2.0;
        float _1000 = (1.0 - _995) / (_995 + 1.0);
        float _3698 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1010 = ((((1.0 - _1001) * (_996 + 2.0)) * exp2(log2(isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * (_996 + 1.0))) + _1001) * _923;
        float _1011 = _891 * 0.5;
        float _1012 = _901 * 0.5;
        float _1013 = _911 * 0.5;
        float _1014 = dot(vec3(_1011, _1012, _1013), vec3(_1011, _1012, _1013));
        float _1019 = (_1014 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1014);
        float _1027 = (dot(vec3(_542, _543, _544), vec3(_1019 * _1011, _1019 * _1012, _1019 * _1013)) + 1.0) * 0.5;
        float _3709 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1036 = sqrt(((_1012 * _1012) + (_1011 * _1011)) + (_1013 * _1013)) / (_924 + 9.9999997473787516355514526367188e-06);
        float _3720 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1038 = _1037 * 2.0;
        float _1042 = (1.0 - _1037) / (_1037 + 1.0);
        float _3731 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1052 = ((((1.0 - _1043) * (_1038 + 2.0)) * exp2(log2(isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * (_1038 + 1.0))) + _1043) * _924;
        _1060 = _891;
        _1061 = _890;
        _1062 = _889;
        _1063 = _901;
        _1064 = _900;
        _1065 = _899;
        _1066 = _911;
        _1067 = _910;
        _1068 = _909;
        _1069 = _924;
        _1070 = _923;
        _1071 = _922;
        _1072 = cbModelParam._m0[36u].z * (isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0)));
        _1073 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0)));
        _1074 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0)));
    }
    else
    {
        _1060 = _445;
        _1061 = _445;
        _1062 = _445;
        _1063 = _445;
        _1064 = _445;
        _1065 = _445;
        _1066 = _445;
        _1067 = _445;
        _1068 = _445;
        _1069 = _445;
        _1070 = _445;
        _1071 = _445;
        _1072 = 0.0;
        _1073 = 0.0;
        _1074 = 0.0;
    }
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1103 = fma(_730, cbModelParam._m0[30u].z, fma(_726, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _722));
        float _1107 = fma(_730, cbModelParam._m0[31u].z, fma(_726, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _722));
        float _1111 = fma(_730, cbModelParam._m0[32u].z, fma(_726, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _722));
        float _1134 = _722 + _542;
        float _1135 = _726 + _543;
        float _1136 = _730 + _544;
        float _1146 = fma(_1136, cbModelParam._m0[30u].z, fma(_1135, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1134)) - _1103;
        float _1147 = fma(_1136, cbModelParam._m0[31u].z, fma(_1135, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1134)) - _1107;
        float _1148 = fma(_1136, cbModelParam._m0[32u].z, fma(_1135, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1134)) - _1111;
        float _1152 = inversesqrt(dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148)));
        float _1165 = ((_1152 * _1146) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1103 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1166 = ((_1152 * _1147) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1107 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1167 = ((_1152 * _1148) / cbModelParam._m0[35u].z) + ((((((_1111 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        float _1202 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1169.x + (-0.5));
        float _1204 = _1202 * (_1169.y + (-0.5));
        float _1205 = _1202 * (_1169.z + (-0.5));
        float _1212 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1176.x + (-0.5));
        float _1214 = _1212 * (_1176.y + (-0.5));
        float _1215 = _1212 * (_1176.z + (-0.5));
        float _1222 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1183.x + (-0.5));
        float _1224 = _1222 * (_1183.y + (-0.5));
        float _1225 = _1222 * (_1183.z + (-0.5));
        float _1232 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1190.x + (-0.5));
        float _1234 = _1232 * (_1190.y + (-0.5));
        float _1235 = _1232 * (_1190.z + (-0.5));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = _1203 * 0.5;
        float _1240 = _1213 * 0.5;
        float _1241 = _1223 * 0.5;
        float _1242 = dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241));
        float _1247 = (_1242 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1242);
        float _1255 = (dot(vec3(_542, _543, _544), vec3(_1247 * _1239, _1247 * _1240, _1247 * _1241)) + 1.0) * 0.5;
        float _3772 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1264 = sqrt(((_1240 * _1240) + (_1239 * _1239)) + (_1241 * _1241)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _3783 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1266 = _1265 * 2.0;
        float _1270 = (1.0 - _1265) / (_1265 + 1.0);
        float _3794 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1280 = ((((1.0 - _1271) * (_1266 + 2.0)) * exp2(log2(isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * (_1266 + 1.0))) + _1271) * _1236;
        float _1281 = _1204 * 0.5;
        float _1282 = _1214 * 0.5;
        float _1283 = _1224 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1297 = (dot(vec3(_542, _543, _544), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _3805 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1306 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _3816 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _3827 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_1308 + 1.0))) + _1313) * _1237;
        float _1323 = _1205 * 0.5;
        float _1324 = _1215 * 0.5;
        float _1325 = _1225 * 0.5;
        float _1326 = dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325));
        float _1331 = (_1326 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1326);
        float _1339 = (dot(vec3(_542, _543, _544), vec3(_1331 * _1323, _1331 * _1324, _1331 * _1325)) + 1.0) * 0.5;
        float _3838 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1348 = sqrt(((_1324 * _1324) + (_1323 * _1323)) + (_1325 * _1325)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _3849 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1350 = _1349 * 2.0;
        float _1354 = (1.0 - _1349) / (_1349 + 1.0);
        float _3860 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1364 = ((((1.0 - _1355) * (_1350 + 2.0)) * exp2(log2(isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_1350 + 1.0))) + _1355) * _1238;
        _1372 = _1205;
        _1373 = _1204;
        _1374 = _1203;
        _1375 = _1215;
        _1376 = _1214;
        _1377 = _1213;
        _1378 = _1225;
        _1379 = _1224;
        _1380 = _1223;
        _1381 = _1238;
        _1382 = _1237;
        _1383 = _1236;
        _1384 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)));
        _1385 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
        _1386 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)));
    }
    else
    {
        _1372 = _445;
        _1373 = _445;
        _1374 = _445;
        _1375 = _445;
        _1376 = _445;
        _1377 = _445;
        _1378 = _445;
        _1379 = _445;
        _1380 = _445;
        _1381 = _445;
        _1382 = _445;
        _1383 = _445;
        _1384 = 0.0;
        _1385 = 0.0;
        _1386 = 0.0;
    }
    float _1396 = (cbModelParam._m0[1u].x * (_1384 - _1072)) + _1072;
    float _1397 = (cbModelParam._m0[1u].x * (_1385 - _1073)) + _1073;
    float _1398 = (cbModelParam._m0[1u].x * (_1386 - _1074)) + _1074;
    float _1419 = fma(_1398, cbSceneParam._m0[89u].z, fma(_1397, cbSceneParam._m0[89u].y, _1396 * cbSceneParam._m0[89u].x));
    float _1422 = fma(_1398, cbSceneParam._m0[90u].z, fma(_1397, cbSceneParam._m0[90u].y, _1396 * cbSceneParam._m0[90u].x));
    float _1425 = fma(_1398, cbSceneParam._m0[91u].z, fma(_1397, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1396));
    float _1440 = _669 * 0.5;
    float _1441 = _670 * 0.5;
    float _1442 = _671 * 0.5;
    float _1443 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1374, _1377, _1380, _1383));
    float _1446 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1373, _1376, _1379, _1382));
    float _1449 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1372, _1375, _1378, _1381));
    float _1483;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1456 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1060, _1063, _1066, _1069));
        float _1460 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1061, _1064, _1067, _1070));
        float _1464 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1062, _1065, _1068, _1071));
        float _1471 = dot(vec4(cbModelParam._m0[39u]), vec4(_1440, _1441, _1442, 1.0));
        _1483 = dot(vec3(isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)), isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)), isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1471) ? 0.0 : (isnan(0.0) ? _1471 : max(0.0, _1471))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1483 = 1.0;
    }
    float _1494;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1485 = dot(vec4(cbModelParam._m0[40u]), vec4(_1440, _1441, _1442, 1.0));
        _1494 = dot(vec3(isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)), isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)), isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1485) ? 0.0 : (isnan(0.0) ? _1485 : max(0.0, _1485))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1494 = 1.0;
    }
    float _1498 = (_1494 * cbModelParam._m0[1u].x) + (_1483 * (1.0 - cbModelParam._m0[1u].x));
    float _1508 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _545);
    float _1509 = isnan(_1508) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1508 : min(cbModelParam._m0[25u].z, _1508));
    float _1591;
    float _1593;
    float _1595;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1558 = fma(_730, cbModelParam._m0[13u].z, fma(_726, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _722)) + cbModelParam._m0[13u].w;
        float _1562 = fma(_730, cbModelParam._m0[14u].z, fma(_726, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _722)) + cbModelParam._m0[14u].w;
        float _1566 = fma(_730, cbModelParam._m0[15u].z, fma(_726, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _722)) + cbModelParam._m0[15u].w;
        float _1569 = fma(_671, cbModelParam._m0[13u].z, fma(_670, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _669));
        float _1572 = fma(_671, cbModelParam._m0[14u].z, fma(_670, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _669));
        float _1575 = fma(_671, cbModelParam._m0[15u].z, fma(_670, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _669));
        float _1603;
        if (_1569 > 0.0)
        {
            _1603 = abs((1.0 - _1558) / _1569);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1569 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1558 + 1.0) / _1569);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1603 = frontier_phi_29_27_ladder;
        }
        float _1773;
        if (_1572 > 0.0)
        {
            _1773 = abs((1.0 - _1562) / _1572);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1572 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1562 + 1.0) / _1572);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1773 = frontier_phi_38_34_ladder;
        }
        float _2217;
        if (_1575 > 0.0)
        {
            _2217 = abs((1.0 - _1566) / _1575);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1575 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1566 + 1.0) / _1575);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _2217 = frontier_phi_50_45_ladder;
        }
        float _2219 = isnan(_1773) ? _1603 : (isnan(_1603) ? _1773 : min(_1603, _1773));
        float _2220 = isnan(_2217) ? _2219 : (isnan(_2219) ? _2217 : min(_2219, _2217));
        float _2224 = (_2220 * _1569) + _1558;
        float _2225 = (_2220 * _1572) + _1562;
        float _2226 = (_2220 * _1575) + _1566;
        float _2227 = _2220 * 9.9999997473787516355514526367188e-05;
        float _2229 = (-1.0) - _2227;
        float _2231 = _2227 + 1.0;
        float frontier_phi_28_50_ladder;
        float frontier_phi_28_50_ladder_1;
        float frontier_phi_28_50_ladder_2;
        if ((_2226 > _2231) || ((_2226 < _2229) || ((_2225 > _2231) || ((_2225 < _2229) || ((_2224 < _2229) || (_2224 > _2231))))))
        {
            frontier_phi_28_50_ladder = 0.0;
            frontier_phi_28_50_ladder_1 = 0.0;
            frontier_phi_28_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2482 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2226, cbModelParam._m0[9u].z, fma(_2225, cbModelParam._m0[9u].y, _2224 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2226, cbModelParam._m0[10u].z, fma(_2225, cbModelParam._m0[10u].y, _2224 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2226, cbModelParam._m0[11u].z, fma(_2225, cbModelParam._m0[11u].y, _2224 * cbModelParam._m0[11u].x))), _1509);
            frontier_phi_28_50_ladder = _2482.z * cbModelParam._m0[1u].y;
            frontier_phi_28_50_ladder_1 = _2482.y * cbModelParam._m0[1u].y;
            frontier_phi_28_50_ladder_2 = _2482.x * cbModelParam._m0[1u].y;
        }
        _1591 = frontier_phi_28_50_ladder_2;
        _1593 = frontier_phi_28_50_ladder_1;
        _1595 = frontier_phi_28_50_ladder;
    }
    else
    {
        vec4 _1579 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_669, _670, _671), _1509);
        _1591 = _1579.x * cbModelParam._m0[1u].y;
        _1593 = _1579.y * cbModelParam._m0[1u].y;
        _1595 = _1579.z * cbModelParam._m0[1u].y;
    }
    float _1599 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _545);
    float _1600 = isnan(_1599) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1599 : min(cbModelParam._m0[25u].w, _1599));
    float _1690;
    float _1692;
    float _1694;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1654 = fma(_730, cbModelParam._m0[21u].z, fma(_726, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _722)) + cbModelParam._m0[21u].w;
        float _1658 = fma(_730, cbModelParam._m0[22u].z, fma(_726, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _722)) + cbModelParam._m0[22u].w;
        float _1662 = fma(_730, cbModelParam._m0[23u].z, fma(_726, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _722)) + cbModelParam._m0[23u].w;
        float _1665 = fma(_671, cbModelParam._m0[21u].z, fma(_670, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _669));
        float _1668 = fma(_671, cbModelParam._m0[22u].z, fma(_670, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _669));
        float _1671 = fma(_671, cbModelParam._m0[23u].z, fma(_670, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _669));
        float _1778;
        if (_1665 > 0.0)
        {
            _1778 = abs((1.0 - _1654) / _1665);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1665 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1654 + 1.0) / _1665);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1778 = frontier_phi_40_36_ladder;
        }
        float _2244;
        if (_1668 > 0.0)
        {
            _2244 = abs((1.0 - _1658) / _1668);
        }
        else
        {
            float frontier_phi_52_47_ladder;
            if (_1668 < 0.0)
            {
                frontier_phi_52_47_ladder = abs((_1658 + 1.0) / _1668);
            }
            else
            {
                frontier_phi_52_47_ladder = 5000.0;
            }
            _2244 = frontier_phi_52_47_ladder;
        }
        float _2611;
        if (_1671 > 0.0)
        {
            _2611 = abs((1.0 - _1662) / _1671);
        }
        else
        {
            float frontier_phi_64_59_ladder;
            if (_1671 < 0.0)
            {
                frontier_phi_64_59_ladder = abs((_1662 + 1.0) / _1671);
            }
            else
            {
                frontier_phi_64_59_ladder = 5000.0;
            }
            _2611 = frontier_phi_64_59_ladder;
        }
        float _2613 = isnan(_2244) ? _1778 : (isnan(_1778) ? _2244 : min(_1778, _2244));
        float _2614 = isnan(_2611) ? _2613 : (isnan(_2613) ? _2611 : min(_2613, _2611));
        float _2618 = (_2614 * _1665) + _1654;
        float _2619 = (_2614 * _1668) + _1658;
        float _2620 = (_2614 * _1671) + _1662;
        float _2621 = _2614 * 9.9999997473787516355514526367188e-05;
        float _2622 = (-1.0) - _2621;
        float _2624 = _2621 + 1.0;
        float frontier_phi_37_64_ladder;
        float frontier_phi_37_64_ladder_1;
        float frontier_phi_37_64_ladder_2;
        if ((_2620 > _2624) || ((_2620 < _2622) || ((_2619 > _2624) || ((_2619 < _2622) || ((_2618 < _2622) || (_2618 > _2624))))))
        {
            frontier_phi_37_64_ladder = 0.0;
            frontier_phi_37_64_ladder_1 = 0.0;
            frontier_phi_37_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2757 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2620, cbModelParam._m0[17u].z, fma(_2619, cbModelParam._m0[17u].y, _2618 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2620, cbModelParam._m0[18u].z, fma(_2619, cbModelParam._m0[18u].y, _2618 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2620, cbModelParam._m0[19u].z, fma(_2619, cbModelParam._m0[19u].y, _2618 * cbModelParam._m0[19u].x))), _1600);
            frontier_phi_37_64_ladder = _2757.z * cbModelParam._m0[1u].z;
            frontier_phi_37_64_ladder_1 = _2757.y * cbModelParam._m0[1u].z;
            frontier_phi_37_64_ladder_2 = _2757.x * cbModelParam._m0[1u].z;
        }
        _1690 = frontier_phi_37_64_ladder_2;
        _1692 = frontier_phi_37_64_ladder_1;
        _1694 = frontier_phi_37_64_ladder;
    }
    else
    {
        vec4 _1674 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_669, _670, _671), _1600);
        _1690 = _1674.x * cbModelParam._m0[1u].z;
        _1692 = _1674.y * cbModelParam._m0[1u].z;
        _1694 = _1674.z * cbModelParam._m0[1u].z;
    }
    float _1706 = ((((1.0 - _690) * ((_677 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_690 * _677)) * _661;
    float _1707 = _1706 * ((cbModelParam._m0[1u].w * (_1690 - _1591)) + _1591);
    float _1708 = _1706 * ((cbModelParam._m0[1u].w * (_1692 - _1593)) + _1593);
    float _1709 = _1706 * ((cbModelParam._m0[1u].w * (_1694 - _1595)) + _1595);
    float _1712 = fma(_1709, cbSceneParam._m0[89u].z, fma(_1708, cbSceneParam._m0[89u].y, _1707 * cbSceneParam._m0[89u].x));
    float _1715 = fma(_1709, cbSceneParam._m0[90u].z, fma(_1708, cbSceneParam._m0[90u].y, _1707 * cbSceneParam._m0[90u].x));
    float _1718 = fma(_1709, cbSceneParam._m0[91u].z, fma(_1708, cbSceneParam._m0[91u].y, _1707 * cbSceneParam._m0[91u].x));
    float _1752 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1756 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1760 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1764 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1765 = _1752 / _1764;
    float _1766 = _1756 / _1764;
    float _1767 = _1760 / _1764;
    float _1914;
    float _1915;
    float _1916;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1794 = ((uint(_1767 > cbSceneParam._m0[59u].y) + uint(_1767 > cbSceneParam._m0[59u].x)) + uint(_1767 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1795 = _1794 + 43u;
        uint _1803 = _1794 + 44u;
        uint _1811 = _1794 + 45u;
        uint _1819 = _1794 + 46u;
        float _1830 = fma(_1764, cbSceneParam._m0[_1795].w, fma(_1760, cbSceneParam._m0[_1795].z, fma(_1756, cbSceneParam._m0[_1795].y, _1752 * cbSceneParam._m0[_1795].x)));
        float _1834 = fma(_1764, cbSceneParam._m0[_1803].w, fma(_1760, cbSceneParam._m0[_1803].z, fma(_1756, cbSceneParam._m0[_1803].y, _1752 * cbSceneParam._m0[_1803].x)));
        float _1842 = fma(_1764, cbSceneParam._m0[_1819].w, fma(_1760, cbSceneParam._m0[_1819].z, fma(_1756, cbSceneParam._m0[_1819].y, _1752 * cbSceneParam._m0[_1819].x)));
        float _1847 = cbSceneParam._m0[33u].z * _1842;
        float _1849 = cbSceneParam._m0[33u].w * _1842;
        float _1852 = fma(_1764, cbSceneParam._m0[_1811].w, fma(_1760, cbSceneParam._m0[_1811].z, fma(_1756, cbSceneParam._m0[_1811].y, _1752 * cbSceneParam._m0[_1811].x))) / _1842;
        float _1900 = (cbSceneParam._m0[33u].x - sqrt(((_1766 * _1766) + (_1765 * _1765)) + (_1767 * _1767))) * cbSceneParam._m0[33u].y;
        float _3986 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
        float _1907 = (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1847 + _1830) / _1842, (_1849 + _1834) / _1842), _1852), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1849 + _1830) / _1842, (_1834 - _1847) / _1842), _1852), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1830 - _1847) / _1842, (_1834 - _1849) / _1842), _1852), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1830 - _1849) / _1842, (_1847 + _1834) / _1842), _1852), 0.0)).x), vec4(0.25)));
        _1914 = 1.0 - (_1907 * cbSceneParam._m0[34u].x);
        _1915 = 1.0 - (_1907 * cbSceneParam._m0[34u].y);
        _1916 = 1.0 - (_1907 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1914 = 1.0;
        _1915 = 1.0;
        _1916 = 1.0;
    }
    float _1980;
    float _1982;
    float _1984;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1968 = fma(_1764, cbSceneParam._m0[63u].w, fma(_1760, cbSceneParam._m0[63u].z, fma(_1756, cbSceneParam._m0[63u].y, _1752 * cbSceneParam._m0[63u].x)));
        float _1969 = fma(_1764, cbSceneParam._m0[60u].w, fma(_1760, cbSceneParam._m0[60u].z, fma(_1756, cbSceneParam._m0[60u].y, _1752 * cbSceneParam._m0[60u].x))) / _1968;
        float _1970 = fma(_1764, cbSceneParam._m0[61u].w, fma(_1760, cbSceneParam._m0[61u].z, fma(_1756, cbSceneParam._m0[61u].y, _1752 * cbSceneParam._m0[61u].x))) / _1968;
        float frontier_phi_49_48_ladder;
        float frontier_phi_49_48_ladder_1;
        float frontier_phi_49_48_ladder_2;
        if ((((_1969 >= cbSceneParam._m0[64u].x) && (_1970 >= cbSceneParam._m0[64u].y)) && (_1969 <= cbSceneParam._m0[64u].z)) && (_1970 <= cbSceneParam._m0[64u].w))
        {
            float _2257 = fma(_1764, cbSceneParam._m0[62u].w, fma(_1760, cbSceneParam._m0[62u].z, fma(_1756, cbSceneParam._m0[62u].y, _1752 * cbSceneParam._m0[62u].x))) / _1968;
            float _2261 = isnan(cbSceneParam._m0[41u].w) ? _2257 : (isnan(_2257) ? cbSceneParam._m0[41u].w : max(_2257, cbSceneParam._m0[41u].w));
            float _2304 = (cbSceneParam._m0[33u].x - sqrt(((_1766 * _1766) + (_1765 * _1765)) + (_1767 * _1767))) * cbSceneParam._m0[33u].y;
            float _4002 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
            float _2311 = (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1969, cbSceneParam._m0[33u].w + _1970), _2261), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1969, _1970 - cbSceneParam._m0[33u].z), _2261), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1969 - cbSceneParam._m0[33u].z, _1970 - cbSceneParam._m0[33u].w), _2261), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1969 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1970), _2261), 0.0)).x), vec4(0.25)));
            float _2315 = 1.0 - (_2311 * cbSceneParam._m0[34u].x);
            float _2316 = 1.0 - (_2311 * cbSceneParam._m0[34u].y);
            float _2317 = 1.0 - (_2311 * cbSceneParam._m0[34u].z);
            frontier_phi_49_48_ladder = isnan(_2317) ? _1916 : (isnan(_1916) ? _2317 : min(_1916, _2317));
            frontier_phi_49_48_ladder_1 = isnan(_2316) ? _1915 : (isnan(_1915) ? _2316 : min(_1915, _2316));
            frontier_phi_49_48_ladder_2 = isnan(_2315) ? _1914 : (isnan(_1914) ? _2315 : min(_1914, _2315));
        }
        else
        {
            frontier_phi_49_48_ladder = _1916;
            frontier_phi_49_48_ladder_1 = _1915;
            frontier_phi_49_48_ladder_2 = _1914;
        }
        _1980 = frontier_phi_49_48_ladder_2;
        _1982 = frontier_phi_49_48_ladder_1;
        _1984 = frontier_phi_49_48_ladder;
    }
    else
    {
        _1980 = _1914;
        _1982 = _1915;
        _1984 = _1916;
    }
    uvec4 _1989 = floatBitsToUint(cbInstanceData._m0[_636 + 5u]);
    uint _1991 = _1989.x * 14u;
    uint _1992 = _1991 + 13u;
    float _1997 = _661 + (-1.0);
    float _2000 = (cbLight._m0[_1992].x * _1997) + 1.0;
    float _2001 = (cbLight._m0[_1992].y * _1997) + 1.0;
    uint _2002 = _1991 + 5u;
    float _2008 = isnan(1.0) ? _2001 : (isnan(_2001) ? 1.0 : min(_2001, 1.0));
    uint _2012 = _1991 + 4u;
    float _2021 = isnan(1.0) ? _2000 : (isnan(_2000) ? 1.0 : min(_2000, 1.0));
    uint _2025 = _1991 | 1u;
    float _2036 = dot(vec3(cbLight._m0[_1991].xyz), vec3(_542, _543, _544));
    float _2039 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_542, _543, _544));
    float _4038 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _4049 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2044 = (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * 0.3183098733425140380859375;
    float _2046 = (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * 0.3183098733425140380859375;
    float _2053 = ((cbLight._m0[_2002].x * _2008) * _2046) + (((cbLight._m0[_2012].x * _1980) * _2021) * _2044);
    float _2054 = ((_2008 * cbLight._m0[_2002].y) * _2046) + (((cbLight._m0[_2012].y * _1982) * _2021) * _2044);
    float _2055 = ((_2008 * cbLight._m0[_2002].z) * _2046) + (((cbLight._m0[_2012].z * _1984) * _2021) * _2044);
    uint _2057 = _1991 + 8u;
    float _2070 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1991].w)) * _545) * 0.949999988079071044921875);
    float _2071 = _2070 * _2070;
    float _2072 = cbLight._m0[_1991].x + _569;
    float _2073 = cbLight._m0[_1991].y + _570;
    float _2074 = cbLight._m0[_1991].z + _571;
    float _2078 = inversesqrt(dot(vec3(_2072, _2073, _2074), vec3(_2072, _2073, _2074)));
    float _2079 = _2078 * _2072;
    float _2080 = _2078 * _2073;
    float _2081 = _2078 * _2074;
    float _2082 = dot(vec3(_542, _543, _544), vec3(cbLight._m0[_1991].xyz));
    float _4060 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2085 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _4071 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _2086 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _2087 = dot(vec3(_542, _543, _544), vec3(_2079, _2080, _2081));
    float _4082 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2090 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _2091 = dot(vec3(cbLight._m0[_1991].xyz), vec3(_2079, _2080, _2081));
    float _4093 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2095 = _2071 * _2071;
    float _2099 = ((_2090 * _2090) * (_2095 + (-1.0))) + 1.0;
    float _2110 = (exp2(log2(1.0 - (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2111 = 1.0 - _2071;
    float _2122 = (0.5 / (((_2086 * ((_2085 * _2111) + _2071)) + 9.9999999392252902907785028219223e-09) + (((_2086 * _2111) + _2071) * _2085))) * _2085;
    float _4104 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2124 = (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_2095 / ((_2099 * _2099) * 3.141590118408203125));
    uint _2138 = _1991 + 9u;
    float _2149 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2025].w)) * _545) * 0.949999988079071044921875);
    float _2150 = _2149 * _2149;
    float _2151 = cbLight._m0[_2025].x + _569;
    float _2152 = cbLight._m0[_2025].y + _570;
    float _2153 = cbLight._m0[_2025].z + _571;
    float _2157 = inversesqrt(dot(vec3(_2151, _2152, _2153), vec3(_2151, _2152, _2153)));
    float _2158 = _2157 * _2151;
    float _2159 = _2157 * _2152;
    float _2160 = _2157 * _2153;
    float _2161 = dot(vec3(_542, _543, _544), vec3(cbLight._m0[_2025].xyz));
    float _4115 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2164 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _2165 = dot(vec3(_542, _543, _544), vec3(_2158, _2159, _2160));
    float _4126 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2168 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _2169 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_2158, _2159, _2160));
    float _4137 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2173 = _2150 * _2150;
    float _2177 = ((_2168 * _2168) * (_2173 + (-1.0))) + 1.0;
    float _2186 = (exp2(log2(1.0 - (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2187 = 1.0 - _2150;
    float _2197 = (0.5 / (((_2086 * ((_2164 * _2187) + _2150)) + 9.9999999392252902907785028219223e-09) + (((_2086 * _2187) + _2150) * _2164))) * _2164;
    float _4148 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2199 = (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_2173 / ((_2177 * _2177) * 3.141590118408203125));
    float _2209 = (((_2186 * cbLight._m0[_2138].x) * _2199) * _2008) + ((((cbLight._m0[_2057].x * _1980) * _2110) * _2124) * _2021);
    float _2210 = (((_2186 * cbLight._m0[_2138].y) * _2199) * _2008) + ((((cbLight._m0[_2057].y * _1982) * _2110) * _2124) * _2021);
    float _2211 = (((_2186 * cbLight._m0[_2138].z) * _2199) * _2008) + ((((cbLight._m0[_2057].z * _1984) * _2110) * _2124) * _2021);
    float _2374;
    float _2376;
    float _2378;
    float _2380;
    float _2382;
    float _2384;
    if (_1989.y == 0u)
    {
        uvec4 _2329 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2330 = _2329.x;
        uint _2341 = uint((float(_2329.y) * floor(float(uint(cbSceneParam._m0[85u].y * _597) / _2330))) + floor(float(uint(cbSceneParam._m0[85u].x * _596) / _2330)));
        float _2351 = (log2(_1767 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2352 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        uint _2355 = uint(isnan(14.0) ? _2352 : (isnan(_2352) ? 14.0 : min(_2352, 14.0)));
        uvec4 _2360 = texelFetch(g_lightClusterGridBuffer, int(((_2355 << 2u) + (_2341 << 6u)) >> 2u));
        uint _2361 = _2360.x;
        uint _2362 = _2329.z;
        float _2491;
        float _2493;
        float _2495;
        float _2497;
        float _2499;
        float _2501;
        if (((((1u << ((_2362 >> 4u) & 15u)) + 4294967295u) & _2361) == 0u) || ((_2362 & 240u) == 0u))
        {
            _2491 = 0.0;
            _2493 = 0.0;
            _2495 = 0.0;
            _2497 = 0.0;
            _2499 = 0.0;
            _2501 = 0.0;
        }
        else
        {
            float _2492;
            float _2494;
            float _2496;
            float _2498;
            float _2500;
            float _2502;
            float _2669 = 0.0;
            float _2670 = 0.0;
            float _2671 = 0.0;
            float _2672 = 0.0;
            float _2673 = 0.0;
            float _2674 = 0.0;
            uint _2675 = 0u;
            uint _2684;
            bool _2685;
            for (;;)
            {
                _2684 = texelFetch(g_lightClassification, int((((_2355 << 5u) + (_2341 << 9u)) + (_2675 << 2u)) >> 2u)).x;
                _2685 = _2684 == 0u;
                float frontier_phi_75_pred;
                float frontier_phi_75_pred_1;
                float frontier_phi_75_pred_2;
                float frontier_phi_75_pred_3;
                float frontier_phi_75_pred_4;
                float frontier_phi_75_pred_5;
                if (_2685)
                {
                    frontier_phi_75_pred = _2672;
                    frontier_phi_75_pred_1 = _2674;
                    frontier_phi_75_pred_2 = _2673;
                    frontier_phi_75_pred_3 = _2671;
                    frontier_phi_75_pred_4 = _2670;
                    frontier_phi_75_pred_5 = _2669;
                }
                else
                {
                    float _2835;
                    float _2836;
                    float _2837;
                    float _2838;
                    float _2839;
                    float _2840;
                    uint _2841;
                    _2835 = _2669;
                    _2836 = _2670;
                    _2837 = _2671;
                    _2838 = _2672;
                    _2839 = _2673;
                    _2840 = _2674;
                    _2841 = _2684;
                    float _2762;
                    float _2763;
                    float _2764;
                    float _2765;
                    float _2766;
                    float _2767;
                    for (;;)
                    {
                        uint _2845 = uint(findLSB(_2841)) + (_2675 << 5u);
                        uint _2842 = (_2841 + 4294967295u) & _2841;
                        uint _2847 = _2845 * 48u;
                        vec4 _2861 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2847)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 3u)).x));
                        uint _2867 = (_2845 * 48u) + 4u;
                        vec4 _2880 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2867)).x, texelFetch(g_PointLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2867 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2867 + 3u)).x));
                        uint _2886 = (_2845 * 48u) + 8u;
                        vec3 _2897 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2886)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 2u)).x));
                        float _2901 = _2861.x - _1765;
                        float _2902 = _2861.y - _1766;
                        float _2903 = _2861.z - _1767;
                        float _2904 = dot(vec3(_2901, _2902, _2903), vec3(_2901, _2902, _2903));
                        float _2907 = inversesqrt(_2904);
                        float _2908 = _2907 * _2901;
                        float _2909 = _2907 * _2902;
                        float _2910 = _2907 * _2903;
                        float _2911 = dot(vec3(_617, _620, _623), vec3(_2908, _2909, _2910));
                        float _2916 = 1.0 - (_2904 * _2861.w);
                        float _4169 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
                        float _2917 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
                        float _2918 = sqrt(_2904) * _2880.w;
                        float _2921 = 1.39999997615814208984375 / (_2918 + 1.39999997615814208984375);
                        float _2922 = _2921 * _2921;
                        float _2925 = ((1.0 - _2922) * _2911) + _2922;
                        float _2928 = _2918 * _2918;
                        float _2932 = ((isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0))) * _2917) / ((_2928 * 0.699999988079071044921875) + 1.0);
                        float _2936 = (-0.0) - _1765;
                        float _2937 = (-0.0) - _1766;
                        float _2938 = (-0.0) - _1767;
                        float _2942 = inversesqrt(dot(vec3(_2936, _2937, _2938), vec3(_2936, _2937, _2938)));
                        float _2943 = _2942 * _2936;
                        float _2944 = _2942 * _2937;
                        float _2945 = _2942 * _2938;
                        float _2952 = exp2(log2(1.0 / ((_2928 * 3.5) + 5.0)) * 0.25);
                        float _2953 = 1.0 - _677;
                        float _2960 = sqrt(1.0 - ((1.0 - (_2953 * _2953)) * (1.0 - (_2952 * _2952))));
                        float _2961 = _2960 * _2960;
                        float _2962 = _2961 * _2961;
                        float _2963 = _2943 + _2908;
                        float _2964 = _2944 + _2909;
                        float _2965 = _2945 + _2910;
                        float _2969 = inversesqrt(dot(vec3(_2963, _2964, _2965), vec3(_2963, _2964, _2965)));
                        float _2973 = dot(vec3(_617, _620, _623), vec3(_2943, _2944, _2945));
                        float _4185 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
                        float _2976 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                        float _2977 = dot(vec3(_617, _620, _623), vec3(_2969 * _2963, _2969 * _2964, _2969 * _2965));
                        float _4196 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                        float _2980 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                        float _2984 = ((_2980 * _2980) * (_2962 + (-1.0))) + 1.0;
                        float _2985 = _2921 * _2961;
                        float _2986 = _2985 * _2985;
                        float _2989 = ((1.0 - _2986) * _2911) + _2986;
                        float _4207 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                        float _2990 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
                        float _2991 = 1.0 - _2961;
                        float _3001 = (0.5 / (((_2990 * ((_2976 * _2991) + _2961)) + 9.9999999392252902907785028219223e-09) + (((_2990 * _2991) + _2961) * _2976))) * _2990;
                        float _4218 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                        float _3012 = (((_2962 * 3.1415927410125732421875) * (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0)))) / ((_2984 * _2984) * ((_2928 * 2.1991131305694580078125) + 3.141590118408203125))) * _2917;
                        _2765 = (_2932 * _2880.x) + _2838;
                        _2766 = (_2932 * _2880.y) + _2839;
                        _2767 = (_2932 * _2880.z) + _2840;
                        _2762 = (_3012 * _2897.x) + _2835;
                        _2763 = (_3012 * _2897.y) + _2836;
                        _2764 = (_3012 * _2897.z) + _2837;
                        if (_2842 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2835 = _2762;
                            _2836 = _2763;
                            _2837 = _2764;
                            _2838 = _2765;
                            _2839 = _2766;
                            _2840 = _2767;
                            _2841 = _2842;
                        }
                    }
                    frontier_phi_75_pred = _2765;
                    frontier_phi_75_pred_1 = _2767;
                    frontier_phi_75_pred_2 = _2766;
                    frontier_phi_75_pred_3 = _2764;
                    frontier_phi_75_pred_4 = _2763;
                    frontier_phi_75_pred_5 = _2762;
                }
                _2498 = frontier_phi_75_pred;
                _2502 = frontier_phi_75_pred_1;
                _2500 = frontier_phi_75_pred_2;
                _2496 = frontier_phi_75_pred_3;
                _2494 = frontier_phi_75_pred_4;
                _2492 = frontier_phi_75_pred_5;
                uint _2676 = _2675 + 1u;
                if (_2676 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2669 = _2492;
                    _2670 = _2494;
                    _2671 = _2496;
                    _2672 = _2498;
                    _2673 = _2500;
                    _2674 = _2502;
                    _2675 = _2676;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2491 = _2492;
            _2493 = _2494;
            _2495 = _2496;
            _2497 = _2498;
            _2499 = _2500;
            _2501 = _2502;
        }
        uvec4 _2505 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2506 = _2505.z;
        uint _2508 = (_2506 >> 8u) & 15u;
        float _2637;
        float _2639;
        float _2641;
        float _2643;
        float _2645;
        float _2647;
        if (((4294967295u << _2508) & _2361) == 0u)
        {
            _2637 = _2491;
            _2639 = _2493;
            _2641 = _2495;
            _2643 = _2497;
            _2645 = _2499;
            _2647 = _2501;
        }
        else
        {
            float _2662 = inversesqrt(dot(vec3(_1765, _1766, _1767), vec3(_1765, _1766, _1767)));
            float _2663 = _2662 * _1765;
            float _2664 = _2662 * _1766;
            float _2665 = _2662 * _1767;
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2508 < ((_2506 >> 12u) & 15u))
            {
                float _2638;
                float _2640;
                float _2642;
                float _2644;
                float _2646;
                float _2648;
                float _2818 = _2491;
                float _2819 = _2493;
                float _2820 = _2495;
                float _2821 = _2497;
                float _2822 = _2499;
                float _2823 = _2501;
                uint _2824 = _2508;
                uint _2833;
                bool _2834;
                for (;;)
                {
                    _2833 = texelFetch(g_lightClassification, int((((_2355 << 5u) + (_2341 << 9u)) + (_2824 << 2u)) >> 2u)).x;
                    _2834 = _2833 == 0u;
                    float frontier_phi_86_pred;
                    float frontier_phi_86_pred_1;
                    float frontier_phi_86_pred_2;
                    float frontier_phi_86_pred_3;
                    float frontier_phi_86_pred_4;
                    float frontier_phi_86_pred_5;
                    if (_2834)
                    {
                        frontier_phi_86_pred = _2823;
                        frontier_phi_86_pred_1 = _2822;
                        frontier_phi_86_pred_2 = _2821;
                        frontier_phi_86_pred_3 = _2820;
                        frontier_phi_86_pred_4 = _2819;
                        frontier_phi_86_pred_5 = _2818;
                    }
                    else
                    {
                        float _3026;
                        float _3027;
                        float _3028;
                        float _3029;
                        float _3030;
                        float _3031;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3039 = _2818;
                        float _3040 = _2819;
                        float _3041 = _2820;
                        float _3042 = _2821;
                        float _3043 = _2822;
                        float _3044 = _2823;
                        uint _3045 = _2833;
                        uint _3046;
                        vec4 _3071;
                        float _3072;
                        vec4 _3087;
                        vec3 _3099;
                        vec4 _3114;
                        vec4 _3129;
                        float _3175;
                        bool _3176;
                        for (;;)
                        {
                            uint _3056 = ((_2824 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3045));
                            _3046 = (_3045 + 4294967295u) & _3045;
                            uint _3058 = _3056 * 40u;
                            _3071 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3058)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 3u)).x));
                            _3072 = _3071.w;
                            uint _3074 = (_3056 * 40u) + 4u;
                            _3087 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3074)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 3u)).x));
                            uint _3089 = (_3056 * 40u) + 8u;
                            _3099 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3089)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 2u)).x));
                            uint _3101 = (_3056 * 40u) + 16u;
                            _3114 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 3u)).x));
                            uint _3116 = (_3056 * 40u) + 20u;
                            _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            uint _3131 = (_3056 * 40u) + 24u;
                            vec4 _3144 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 3u)).x));
                            uint _3150 = (_3056 * 40u) + 28u;
                            vec4 _3163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 3u)).x));
                            _3175 = fma(_1767, _3163.z, fma(_1766, _3163.y, _3163.x * _1765)) + _3163.w;
                            _3176 = !((fma(_1767, _3144.z, fma(_1766, _3144.y, _3144.x * _1765)) + _3144.w) <= 0.0);
                            float frontier_phi_92_pred;
                            float frontier_phi_92_pred_1;
                            float frontier_phi_92_pred_2;
                            float frontier_phi_92_pred_3;
                            float frontier_phi_92_pred_4;
                            float frontier_phi_92_pred_5;
                            if (_3176)
                            {
                                float _3203 = _3071.x - _1765;
                                float _3204 = _3071.y - _1766;
                                float _3205 = _3071.z - _1767;
                                float _3206 = dot(vec3(_3203, _3204, _3205), vec3(_3203, _3204, _3205));
                                float _3209 = inversesqrt(_3206);
                                float _3210 = _3209 * _3203;
                                float _3211 = _3209 * _3204;
                                float _3212 = _3209 * _3205;
                                float _3216 = 1.0 - (_3206 / (_3072 * _3072));
                                float _4229 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                                float _3217 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
                                float _3221 = sqrt(_3206) * _3087.w;
                                float _3223 = 1.39999997615814208984375 / (_3221 + 1.39999997615814208984375);
                                float _3224 = _3223 * _3223;
                                float _3227 = ((1.0 - _3224) * dot(vec3(_3210, _3211, _3212), vec3(_617, _620, _623))) + _3224;
                                float _3230 = _3221 * _3221;
                                float _3234 = (fma(_1767, _3114.z, fma(_1766, _3114.y, _3114.x * _1765)) + _3114.w) / _3175;
                                float _3235 = (fma(_1767, _3129.z, fma(_1766, _3129.y, _3129.x * _1765)) + _3129.w) / _3175;
                                float _3239 = 1.0 - dot(vec2(_3234, _3235), vec2(_3234, _3235));
                                float _4245 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                                float _3240 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                                float _3241 = _3240 * (((isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0))) * _3217) / ((_3230 * 0.699999988079071044921875) + 1.0));
                                float _3253 = exp2(log2(1.0 / ((_3230 * 3.5) + 5.0)) * 0.25);
                                float _3254 = 1.0 - _677;
                                float _3261 = sqrt(1.0 - ((1.0 - (_3254 * _3254)) * (1.0 - (_3253 * _3253))));
                                float _3262 = _3261 * _3261;
                                float _3263 = _3262 * _3262;
                                float _3264 = _3210 - _2663;
                                float _3265 = _3211 - _2664;
                                float _3266 = _3212 - _2665;
                                float _3270 = inversesqrt(dot(vec3(_3264, _3265, _3266), vec3(_3264, _3265, _3266)));
                                float _3274 = dot(vec3(_617, _620, _623), vec3((-0.0) - _2663, (-0.0) - _2664, (-0.0) - _2665));
                                float _4256 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                                float _3277 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                                float _3278 = dot(vec3(_617, _620, _623), vec3(_3270 * _3264, _3270 * _3265, _3270 * _3266));
                                float _4267 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                                float _3281 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                                float _3285 = ((_3281 * _3281) * (_3263 + (-1.0))) + 1.0;
                                float _3286 = _3223 * _3262;
                                float _3287 = _3286 * _3286;
                                float _3293 = ((1.0 - _3287) * dot(vec3(_617, _620, _623), vec3(_3210, _3211, _3212))) + _3287;
                                float _4278 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                                float _3294 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                                float _3295 = 1.0 - _3262;
                                float _3305 = (0.5 / (((_3294 * ((_3277 * _3295) + _3262)) + 9.9999999392252902907785028219223e-09) + (((_3294 * _3295) + _3262) * _3277))) * _3294;
                                float _4289 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                                float _3315 = (_3240 * _3217) * (((_3263 * 3.1415927410125732421875) * (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) / ((_3285 * _3285) * ((_3230 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_92_pred = _3241 * _3087.z;
                                frontier_phi_92_pred_1 = _3241 * _3087.y;
                                frontier_phi_92_pred_2 = _3241 * _3087.x;
                                frontier_phi_92_pred_3 = _3315 * _3099.z;
                                frontier_phi_92_pred_4 = _3315 * _3099.y;
                                frontier_phi_92_pred_5 = _3315 * _3099.x;
                            }
                            else
                            {
                                frontier_phi_92_pred = 0.0;
                                frontier_phi_92_pred_1 = 0.0;
                                frontier_phi_92_pred_2 = 0.0;
                                frontier_phi_92_pred_3 = 0.0;
                                frontier_phi_92_pred_4 = 0.0;
                                frontier_phi_92_pred_5 = 0.0;
                            }
                            _3324 = frontier_phi_92_pred;
                            _3323 = frontier_phi_92_pred_1;
                            _3322 = frontier_phi_92_pred_2;
                            _3321 = frontier_phi_92_pred_3;
                            _3320 = frontier_phi_92_pred_4;
                            _3319 = frontier_phi_92_pred_5;
                            _3029 = _3322 + _3042;
                            _3030 = _3323 + _3043;
                            _3031 = _3324 + _3044;
                            _3026 = _3319 + _3039;
                            _3027 = _3320 + _3040;
                            _3028 = _3321 + _3041;
                            if (_3046 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3039 = _3026;
                                _3040 = _3027;
                                _3041 = _3028;
                                _3042 = _3029;
                                _3043 = _3030;
                                _3044 = _3031;
                                _3045 = _3046;
                                continue;
                            }
                        }
                        frontier_phi_86_pred = _3031;
                        frontier_phi_86_pred_1 = _3030;
                        frontier_phi_86_pred_2 = _3029;
                        frontier_phi_86_pred_3 = _3028;
                        frontier_phi_86_pred_4 = _3027;
                        frontier_phi_86_pred_5 = _3026;
                    }
                    _2648 = frontier_phi_86_pred;
                    _2646 = frontier_phi_86_pred_1;
                    _2644 = frontier_phi_86_pred_2;
                    _2642 = frontier_phi_86_pred_3;
                    _2640 = frontier_phi_86_pred_4;
                    _2638 = frontier_phi_86_pred_5;
                    uint _2825 = _2824 + 1u;
                    if (_2825 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2818 = _2638;
                        _2819 = _2640;
                        _2820 = _2642;
                        _2821 = _2644;
                        _2822 = _2646;
                        _2823 = _2648;
                        _2824 = _2825;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _2644;
                frontier_phi_66_67_ladder_1 = _2648;
                frontier_phi_66_67_ladder_2 = _2646;
                frontier_phi_66_67_ladder_3 = _2642;
                frontier_phi_66_67_ladder_4 = _2640;
                frontier_phi_66_67_ladder_5 = _2638;
            }
            else
            {
                frontier_phi_66_67_ladder = _2497;
                frontier_phi_66_67_ladder_1 = _2501;
                frontier_phi_66_67_ladder_2 = _2499;
                frontier_phi_66_67_ladder_3 = _2495;
                frontier_phi_66_67_ladder_4 = _2493;
                frontier_phi_66_67_ladder_5 = _2491;
            }
            _2637 = frontier_phi_66_67_ladder_5;
            _2639 = frontier_phi_66_67_ladder_4;
            _2641 = frontier_phi_66_67_ladder_3;
            _2643 = frontier_phi_66_67_ladder;
            _2645 = frontier_phi_66_67_ladder_2;
            _2647 = frontier_phi_66_67_ladder_1;
        }
        float _2652 = isnan(1.0) ? _661 : (isnan(_661) ? 1.0 : min(_661, 1.0));
        _2374 = (_2652 * _2643) + _2053;
        _2376 = (_2652 * _2645) + _2054;
        _2378 = (_2652 * _2647) + _2055;
        _2380 = ((_2637 * 0.039999999105930328369140625) * _2652) + _2209;
        _2382 = ((_2639 * 0.039999999105930328369140625) * _2652) + _2210;
        _2384 = ((_2641 * 0.039999999105930328369140625) * _2652) + _2211;
    }
    else
    {
        _2374 = _2053;
        _2376 = _2054;
        _2378 = _2055;
        _2380 = _2209;
        _2382 = _2210;
        _2384 = _2211;
    }
    uint _2390 = _637 + uint(cbMatDynParam._m0[0u].w);
    float _4305 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _4316 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _4327 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _2421 = (((isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_2374 + ((isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0))) * _661))) + ((_2380 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _1498)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[13u].x * _285) * _498.x) * cbInstanceData._m0[_2390].x);
    float _2423 = ((((cbMtdParam._m0[13u].y * _285) * _498.y) * cbInstanceData._m0[_2390].y) + ((_2382 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _1498)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2376 + ((isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))) * _661)));
    float _2425 = ((((cbMtdParam._m0[13u].z * _285) * _498.z) * cbInstanceData._m0[_2390].z) + ((_2384 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _1498)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_2378 + ((isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))) * _661)));
    float _2426 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2427 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
    float _2428 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    uint _2429 = _636 + 6u;
    float _2437 = _596 / cbSceneParam._m0[86u].x;
    float _2438 = _597 / cbSceneParam._m0[86u].y;
    vec4 _2452 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2437, _2438, (log2((isnan(cbSceneParam._m0[77u].w) ? _564 : (isnan(_564) ? cbSceneParam._m0[77u].w : min(_564, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2454 = _2452.x;
    float _2455 = _2452.y;
    float _2456 = _2452.z;
    float _2457 = _2452.w;
    float _2553;
    float _2555;
    float _2557;
    float _2559;
    if (_564 > cbSceneParam._m0[78u].w)
    {
        float _2516 = isnan(_564) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _564 : min(cbSceneParam._m0[80u].w, _564));
        float _2517 = _2516 / _564;
        float _2528 = _2517 * _267;
        float _2529 = _268 * _2517;
        float _2530 = (-0.0) - _2529;
        float _2531 = _2517 * _269;
        float _2533 = (cbSceneParam._m0[77u].w * _2530) / _2516;
        float _2534 = _2533 + cbSceneParam._m0[79u].w;
        float _2535 = cbSceneParam._m0[79u].w - _2529;
        float _2541 = sqrt(((_2528 * _2528) + (_2529 * _2529)) + (_2531 * _2531));
        float _2544 = (1.0 - (cbSceneParam._m0[77u].w / _2516)) * _2541;
        float _2549 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2551 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2775;
        if (abs((_2530 - _2533) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2775 = ((((_2534 > 0.0) ? exp2(_2549 * _2534) : (2.0 - exp2(_2551 * _2534))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2544;
        }
        else
        {
            float _2698 = 1.0 / cbSceneParam._m0[80u].x;
            float _2699 = isnan(_2535) ? _2534 : (isnan(_2534) ? _2535 : max(_2534, _2535));
            float _2700 = isnan(_2535) ? _2534 : (isnan(_2534) ? _2535 : min(_2534, _2535));
            float _2709 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : min(_2699, 0.0));
            float _2710 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : min(_2700, 0.0));
            _2775 = ((abs(_2541 / _2530) * cbSceneParam._m0[80u].y) * ((((_2709 - _2710) * 2.0) - ((exp2(_2549 * (isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0)))) - exp2(_2549 * (isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0))))) * _2698)) - ((exp2(_2551 * _2709) - exp2(_2551 * _2710)) * _2698))) + (_2544 * cbSceneParam._m0[80u].z);
        }
        vec4 _2777 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2437, _2438, 1.0), 0.0);
        float _2786 = exp2((_2775 * (-1.44269502162933349609375)) * (1.0 - _2777.w));
        float _2787 = log2(_2786);
        float _2803 = log2(_2457);
        _2553 = (exp2(_2803 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2787 * cbSceneParam._m0[78u].x)) * _2777.x) / cbSceneParam._m0[78u].x)) + _2454;
        _2555 = (exp2(_2803 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2787 * cbSceneParam._m0[78u].y)) * _2777.y) / cbSceneParam._m0[78u].y)) + _2455;
        _2557 = (exp2(_2803 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2787 * cbSceneParam._m0[78u].z)) * _2777.z) / cbSceneParam._m0[78u].z)) + _2456;
        _2559 = _2786 * _2457;
    }
    else
    {
        _2553 = _2454;
        _2555 = _2455;
        _2557 = _2456;
        _2559 = _2457;
    }
    bool _2813;
    vec4 _2569;
    vec4 _2591;
    float _2593;
    float _2597;
    float _2598;
    float _2599;
    float _2600;
    bool _2610;
    for (;;)
    {
        _2569 = cbMatDynParam._m0[0u];
        float _2571 = roundEven(_2569.y);
        bool _2572 = _2571 == 3.0;
        float _2573 = log2(_2559);
        float _2580 = exp2(_2573 * cbSceneParam._m0[78u].x) * _2426;
        float _2581 = exp2(_2573 * cbSceneParam._m0[78u].y) * _2427;
        float _2582 = exp2(_2573 * cbSceneParam._m0[78u].z) * _2428;
        float _2589 = _578 + (-0.5);
        _2591 = cbMtdParam._m0[1u];
        _2593 = _2591.y * _2589;
        float _2596 = (_2571 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2597 = _2596 * (_2572 ? _2580 : (_2580 + (cbSceneParam._m0[72u].w * _2553)));
        _2598 = _2596 * (_2572 ? _2581 : (_2581 + (cbSceneParam._m0[72u].w * _2555)));
        _2599 = _2596 * (_2572 ? _2582 : (_2582 + (cbSceneParam._m0[72u].w * _2557)));
        _2600 = _2589 * 0.999000012874603271484375;
        _2610 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2610)
        {
            if ((cbInstanceData._m0[_636 + 7u].x + _2600) < 0.5)
            {
                _2813 = true;
                break;
            }
        }
        uint _2733 = _637 + uint(_2569.w);
        if ((cbInstanceData._m0[_2733].w < 1.0) && ((cbInstanceData._m0[_2733].w + _2600) < 0.5))
        {
            _2813 = true;
            break;
        }
        if ((_2593 + 1.0) < _2591.x)
        {
            _2813 = true;
            break;
        }
        _2813 = false;
        break;
    }
    float _3017;
    if (_2813)
    {
        discard_state = true;
        _3017 = 0.0;
    }
    else
    {
        _3017 = cbInstanceData._m0[_2429].w;
    }
    SV_Target.x = _2597;
    SV_Target.y = _2598;
    SV_Target.z = _2599;
    SV_Target.w = _3017;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2429].w;
    discard_exit();
}


