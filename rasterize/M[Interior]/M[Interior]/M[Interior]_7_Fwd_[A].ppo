#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _382;
float _2812;
float _2813;
float _2814;
float _2815;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _186 = _185 * _178;
    float _187 = _185 * _179;
    float _188 = _185 * _180;
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _196 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _197 = _196 * TANGENT.x;
    float _198 = _196 * TANGENT.y;
    float _199 = _196 * TANGENT.z;
    float _244 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _254 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _244);
    float _255 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _244);
    float _256 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _244);
    vec4 _291 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _307 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _314 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _326 = cbMtdParam._m0[22u].z + _254;
    float _327 = cbMtdParam._m0[22u].w + _255;
    float _328 = cbMtdParam._m0[23u].x + _256;
    float _345 = (-0.0) - dot(vec3(_326, _327, _328), vec3(_307 * _186, _307 * _187, _307 * _188));
    float _346 = (-0.0) - dot(vec3(_326, _327, _328), vec3(_314 * _197, _314 * _198, _314 * _199));
    float _347 = (-0.0) - dot(vec3(_326, _327, _328), vec3((-0.0) - (NORMAL.x * _192), (-0.0) - (NORMAL.y * _192), (-0.0) - (NORMAL.z * _192)));
    float _351 = inversesqrt(dot(vec3(_345, _346, _347), vec3(_345, _346, _347)));
    float _352 = _351 * _347;
    float _357 = ((cbMtdParam._m0[19u].y * _345) * _351) + (((_291.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _358 = ((cbMtdParam._m0[19u].z * _346) * _351) + (((_291.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _361 = fract(cbMtdParam._m0[19u].y * TEXCOORD.x);
    float _362 = fract(cbMtdParam._m0[19u].z * TEXCOORD.y);
    float _380;
    float _383;
    float _385;
    if (_357 > 0.0)
    {
        float _366 = (1.0 - _361) / _357;
        _380 = _366;
        _383 = ((cbMtdParam._m0[16u].z + 1.0) - fract(_366 * _352)) * 0.16666667163372039794921875;
        _385 = (fract((_366 * _358) + _362) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_357 < 0.0)
        {
            float _381 = ((-0.0) - _361) / _357;
            frontier_phi_3_2_ladder = _381;
            frontier_phi_3_2_ladder_1 = (fract((_381 * _358) + _362) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_381 * _352) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _382;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _380 = frontier_phi_3_2_ladder;
        _383 = frontier_phi_3_2_ladder_2;
        _385 = frontier_phi_3_2_ladder_1;
    }
    float _411;
    float _413;
    float _415;
    if (_358 > 0.0)
    {
        float _398 = (1.0 - _362) / _358;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_398 < _380)
        {
            frontier_phi_8_5_ladder = (fract(_398 * _352) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_398 * _357) + _361) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _398;
        }
        else
        {
            frontier_phi_8_5_ladder = _385;
            frontier_phi_8_5_ladder_1 = _383;
            frontier_phi_8_5_ladder_2 = _380;
        }
        _411 = frontier_phi_8_5_ladder_2;
        _413 = frontier_phi_8_5_ladder_1;
        _415 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_358 < 0.0)
        {
            float _412 = ((-0.0) - _362) / _358;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_412 < _380)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_412 * _352) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_412 * _357) + _361) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _412;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _385;
                frontier_phi_8_6_ladder_9_ladder_1 = _383;
                frontier_phi_8_6_ladder_9_ladder_2 = _380;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _385;
            frontier_phi_8_6_ladder_1 = _383;
            frontier_phi_8_6_ladder_2 = _380;
        }
        _411 = frontier_phi_8_6_ladder_2;
        _413 = frontier_phi_8_6_ladder_1;
        _415 = frontier_phi_8_6_ladder;
    }
    float _419 = (_352 > 0.0) ? (cbMtdParam._m0[16u].y / _352) : 5000.0;
    float _432;
    float _433;
    if (_419 < _411)
    {
        _432 = ((_361 + cbMtdParam._m0[16u].z) + (_419 * _357)) * 0.16666667163372039794921875;
        _433 = (((_419 * _358) + _362) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _432 = _413;
        _433 = _415;
    }
    vec4 _435 = texture(sampler2D(M_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_432, _433));
    float _440 = _435.x * cbMtdParam._m0[13u].x;
    float _441 = _435.y * cbMtdParam._m0[13u].y;
    float _442 = _435.z * cbMtdParam._m0[13u].z;
    float _2824 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _2835 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _2846 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _461 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _465 = inversesqrt(dot(vec3(_254, _255, _256), vec3(_254, _255, _256)));
    float _466 = _254 * _465;
    float _467 = _255 * _465;
    float _468 = _256 * _465;
    vec4 _473 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _475 = _473.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _576 = sqrt(((_254 * _254) + (_255 * _255)) + (_256 * _256));
        float _583 = (cbMatDynParam._m0[5u].x * _576) + cbMatDynParam._m0[5u].y;
        float _2857 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
        float _584 = isnan(1.0) ? _2857 : (isnan(_2857) ? 1.0 : min(_2857, 1.0));
        float _588 = (cbMatDynParam._m0[5u].z * _576) + cbMatDynParam._m0[5u].w;
        float _2868 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2868 : (isnan(_2868) ? 1.0 : min(_2868, 1.0))) - _584)) + _584) < ((_475 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _493 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _494 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _507 = uint(roundEven(NORMAL.w)) * 13u;
    uint _508 = _507 + 9u;
    uint _509 = _508 + uint(cbMatDynParam._m0[0u].w);
    float _515 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2824 : (isnan(_2824) ? 1.0 : min(_2824, 1.0)))) * cbInstanceData._m0[_509].x;
    float _516 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2835 : (isnan(_2835) ? 1.0 : min(_2835, 1.0)))) * cbInstanceData._m0[_509].y;
    float _517 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2846 : (isnan(_2846) ? 1.0 : min(_2846, 1.0)))) * cbInstanceData._m0[_509].z;
    float _2879 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _518 = isnan(1.0) ? _2879 : (isnan(_2879) ? 1.0 : min(_2879, 1.0));
    float _2890 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _519 = isnan(1.0) ? _2890 : (isnan(_2890) ? 1.0 : min(_2890, 1.0));
    float _2901 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _520 = isnan(1.0) ? _2901 : (isnan(_2901) ? 1.0 : min(_2901, 1.0));
    vec4 _529 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _493, cbSceneParam._m0[86u].y * _494));
    float _532 = _529.x * TEXCOORD.z;
    float _533 = (-0.0) - _466;
    float _534 = (-0.0) - _467;
    float _535 = (-0.0) - _468;
    float _557 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _561 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _565 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _651 = (cbModelParam._m0[37u].x * ((((fma(_565, cbModelParam._m0[26u].z, fma(_561, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _557)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _653 = (cbModelParam._m0[37u].y * ((((fma(_565, cbModelParam._m0[27u].z, fma(_561, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _557)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _654 = (((((fma(_565, cbModelParam._m0[28u].z, fma(_561, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _557)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _657 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_651, _653, _654), 0.0);
        vec4 _664 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_651, _653, _654), 0.0);
        vec4 _671 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_651, _653, _654), 0.0);
        vec4 _678 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_651, _653, _654), 0.0);
        float _691 = exp2((_657.w + (-0.5)) * 20.0) * 2.0;
        float _692 = _691 * (_657.x + (-0.5));
        float _693 = _691 * (_657.y + (-0.5));
        float _694 = _691 * (_657.z + (-0.5));
        float _701 = exp2((_664.w + (-0.5)) * 20.0) * 2.0;
        float _702 = _701 * (_664.x + (-0.5));
        float _703 = _701 * (_664.y + (-0.5));
        float _704 = _701 * (_664.z + (-0.5));
        float _711 = exp2((_671.w + (-0.5)) * 20.0) * 2.0;
        float _712 = _711 * (_671.x + (-0.5));
        float _713 = _711 * (_671.y + (-0.5));
        float _714 = _711 * (_671.z + (-0.5));
        float _721 = exp2((_678.w + (-0.5)) * 20.0) * 2.0;
        float _722 = _721 * (_678.x + (-0.5));
        float _723 = _721 * (_678.y + (-0.5));
        float _724 = _721 * (_678.z + (-0.5));
        float _725 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _726 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _727 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _728 = _692 * 0.5;
        float _729 = _702 * 0.5;
        float _730 = _712 * 0.5;
        float _731 = dot(vec3(_728, _729, _730), vec3(_728, _729, _730));
        float _736 = (_731 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_731);
        float _745 = (dot(vec3(0.0), vec3(_736 * _728, _736 * _729, _736 * _730)) + 1.0) * 0.5;
        float _2927 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _755 = sqrt(((_729 * _729) + (_728 * _728)) + (_730 * _730)) / (_725 + 9.9999997473787516355514526367188e-06);
        float _2938 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _756 = isnan(1.0) ? _2938 : (isnan(_2938) ? 1.0 : min(_2938, 1.0));
        float _757 = _756 * 2.0;
        float _761 = (1.0 - _756) / (_756 + 1.0);
        float _2949 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _762 = isnan(1.0) ? _2949 : (isnan(_2949) ? 1.0 : min(_2949, 1.0));
        float _771 = ((((1.0 - _762) * (_757 + 2.0)) * exp2(log2(isnan(1.0) ? _2927 : (isnan(_2927) ? 1.0 : min(_2927, 1.0))) * (_757 + 1.0))) + _762) * _725;
        float _772 = _693 * 0.5;
        float _773 = _703 * 0.5;
        float _774 = _713 * 0.5;
        float _775 = dot(vec3(_772, _773, _774), vec3(_772, _773, _774));
        float _780 = (_775 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_775);
        float _788 = (dot(vec3(0.0), vec3(_780 * _772, _780 * _773, _780 * _774)) + 1.0) * 0.5;
        float _2960 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _797 = sqrt(((_773 * _773) + (_772 * _772)) + (_774 * _774)) / (_726 + 9.9999997473787516355514526367188e-06);
        float _2971 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _798 = isnan(1.0) ? _2971 : (isnan(_2971) ? 1.0 : min(_2971, 1.0));
        float _799 = _798 * 2.0;
        float _803 = (1.0 - _798) / (_798 + 1.0);
        float _2982 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _804 = isnan(1.0) ? _2982 : (isnan(_2982) ? 1.0 : min(_2982, 1.0));
        float _813 = ((((1.0 - _804) * (_799 + 2.0)) * exp2(log2(isnan(1.0) ? _2960 : (isnan(_2960) ? 1.0 : min(_2960, 1.0))) * (_799 + 1.0))) + _804) * _726;
        float _814 = _694 * 0.5;
        float _815 = _704 * 0.5;
        float _816 = _714 * 0.5;
        float _817 = dot(vec3(_814, _815, _816), vec3(_814, _815, _816));
        float _822 = (_817 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_817);
        float _830 = (dot(vec3(0.0), vec3(_822 * _814, _822 * _815, _822 * _816)) + 1.0) * 0.5;
        float _2993 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _839 = sqrt(((_815 * _815) + (_814 * _814)) + (_816 * _816)) / (_727 + 9.9999997473787516355514526367188e-06);
        float _3004 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _840 = isnan(1.0) ? _3004 : (isnan(_3004) ? 1.0 : min(_3004, 1.0));
        float _841 = _840 * 2.0;
        float _845 = (1.0 - _840) / (_840 + 1.0);
        float _3015 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _846 = isnan(1.0) ? _3015 : (isnan(_3015) ? 1.0 : min(_3015, 1.0));
        float _855 = ((((1.0 - _846) * (_841 + 2.0)) * exp2(log2(isnan(1.0) ? _2993 : (isnan(_2993) ? 1.0 : min(_2993, 1.0))) * (_841 + 1.0))) + _846) * _727;
        _863 = _694;
        _864 = _693;
        _865 = _692;
        _866 = _704;
        _867 = _703;
        _868 = _702;
        _869 = _714;
        _870 = _713;
        _871 = _712;
        _872 = _727;
        _873 = _726;
        _874 = _725;
        _875 = cbModelParam._m0[36u].z * (isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0)));
        _876 = cbModelParam._m0[36u].z * (isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0)));
        _877 = cbModelParam._m0[36u].z * (isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0)));
    }
    else
    {
        _863 = _382;
        _864 = _382;
        _865 = _382;
        _866 = _382;
        _867 = _382;
        _868 = _382;
        _869 = _382;
        _870 = _382;
        _871 = _382;
        _872 = _382;
        _873 = _382;
        _874 = _382;
        _875 = 0.0;
        _876 = 0.0;
        _877 = 0.0;
    }
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _934 = (cbModelParam._m0[38u].x * ((((fma(_565, cbModelParam._m0[30u].z, fma(_561, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _557)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _935 = (cbModelParam._m0[38u].y * ((((fma(_565, cbModelParam._m0[31u].z, fma(_561, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _557)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _936 = (((((fma(_565, cbModelParam._m0[32u].z, fma(_561, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _557)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        vec4 _945 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        float _971 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_938.x + (-0.5));
        float _973 = _971 * (_938.y + (-0.5));
        float _974 = _971 * (_938.z + (-0.5));
        float _981 = exp2((_945.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_945.x + (-0.5));
        float _983 = _981 * (_945.y + (-0.5));
        float _984 = _981 * (_945.z + (-0.5));
        float _991 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_952.x + (-0.5));
        float _993 = _991 * (_952.y + (-0.5));
        float _994 = _991 * (_952.z + (-0.5));
        float _1001 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_959.x + (-0.5));
        float _1003 = _1001 * (_959.y + (-0.5));
        float _1004 = _1001 * (_959.z + (-0.5));
        float _1005 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1006 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1007 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1008 = _972 * 0.5;
        float _1009 = _982 * 0.5;
        float _1010 = _992 * 0.5;
        float _1011 = dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010));
        float _1016 = (_1011 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1011);
        float _1024 = (dot(vec3(0.0), vec3(_1016 * _1008, _1016 * _1009, _1016 * _1010)) + 1.0) * 0.5;
        float _3056 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1033 = sqrt(((_1009 * _1009) + (_1008 * _1008)) + (_1010 * _1010)) / (_1005 + 9.9999997473787516355514526367188e-06);
        float _3067 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3067 : (isnan(_3067) ? 1.0 : min(_3067, 1.0));
        float _1035 = _1034 * 2.0;
        float _1039 = (1.0 - _1034) / (_1034 + 1.0);
        float _3078 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3078 : (isnan(_3078) ? 1.0 : min(_3078, 1.0));
        float _1049 = ((((1.0 - _1040) * (_1035 + 2.0)) * exp2(log2(isnan(1.0) ? _3056 : (isnan(_3056) ? 1.0 : min(_3056, 1.0))) * (_1035 + 1.0))) + _1040) * _1005;
        float _1050 = _973 * 0.5;
        float _1051 = _983 * 0.5;
        float _1052 = _993 * 0.5;
        float _1053 = dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052));
        float _1058 = (_1053 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1053);
        float _1066 = (dot(vec3(0.0), vec3(_1058 * _1050, _1058 * _1051, _1058 * _1052)) + 1.0) * 0.5;
        float _3089 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1075 = sqrt(((_1051 * _1051) + (_1050 * _1050)) + (_1052 * _1052)) / (_1006 + 9.9999997473787516355514526367188e-06);
        float _3100 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3100 : (isnan(_3100) ? 1.0 : min(_3100, 1.0));
        float _1077 = _1076 * 2.0;
        float _1081 = (1.0 - _1076) / (_1076 + 1.0);
        float _3111 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3111 : (isnan(_3111) ? 1.0 : min(_3111, 1.0));
        float _1091 = ((((1.0 - _1082) * (_1077 + 2.0)) * exp2(log2(isnan(1.0) ? _3089 : (isnan(_3089) ? 1.0 : min(_3089, 1.0))) * (_1077 + 1.0))) + _1082) * _1006;
        float _1092 = _974 * 0.5;
        float _1093 = _984 * 0.5;
        float _1094 = _994 * 0.5;
        float _1095 = dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094));
        float _1100 = (_1095 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1095);
        float _1108 = (dot(vec3(0.0), vec3(_1100 * _1092, _1100 * _1093, _1100 * _1094)) + 1.0) * 0.5;
        float _3122 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1117 = sqrt(((_1093 * _1093) + (_1092 * _1092)) + (_1094 * _1094)) / (_1007 + 9.9999997473787516355514526367188e-06);
        float _3133 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3133 : (isnan(_3133) ? 1.0 : min(_3133, 1.0));
        float _1119 = _1118 * 2.0;
        float _1123 = (1.0 - _1118) / (_1118 + 1.0);
        float _3144 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3144 : (isnan(_3144) ? 1.0 : min(_3144, 1.0));
        float _1133 = ((((1.0 - _1124) * (_1119 + 2.0)) * exp2(log2(isnan(1.0) ? _3122 : (isnan(_3122) ? 1.0 : min(_3122, 1.0))) * (_1119 + 1.0))) + _1124) * _1007;
        _1141 = _974;
        _1142 = _973;
        _1143 = _972;
        _1144 = _984;
        _1145 = _983;
        _1146 = _982;
        _1147 = _994;
        _1148 = _993;
        _1149 = _992;
        _1150 = _1007;
        _1151 = _1006;
        _1152 = _1005;
        _1153 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0)));
        _1154 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0)));
        _1155 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)));
    }
    else
    {
        _1141 = _382;
        _1142 = _382;
        _1143 = _382;
        _1144 = _382;
        _1145 = _382;
        _1146 = _382;
        _1147 = _382;
        _1148 = _382;
        _1149 = _382;
        _1150 = _382;
        _1151 = _382;
        _1152 = _382;
        _1153 = 0.0;
        _1154 = 0.0;
        _1155 = 0.0;
    }
    float _1165 = (cbModelParam._m0[1u].x * (_1153 - _875)) + _875;
    float _1166 = (cbModelParam._m0[1u].x * (_1154 - _876)) + _876;
    float _1167 = (cbModelParam._m0[1u].x * (_1155 - _877)) + _877;
    float _1188 = fma(_1167, cbSceneParam._m0[89u].z, fma(_1166, cbSceneParam._m0[89u].y, _1165 * cbSceneParam._m0[89u].x));
    float _1191 = fma(_1167, cbSceneParam._m0[90u].z, fma(_1166, cbSceneParam._m0[90u].y, _1165 * cbSceneParam._m0[90u].x));
    float _1194 = fma(_1167, cbSceneParam._m0[91u].z, fma(_1166, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1165));
    float _1209 = _466 * (-0.5);
    float _1210 = _467 * (-0.5);
    float _1211 = _468 * (-0.5);
    float _1212 = dot(vec4(_1209, _1210, _1211, 1.0), vec4(_1143, _1146, _1149, _1152));
    float _1215 = dot(vec4(_1209, _1210, _1211, 1.0), vec4(_1142, _1145, _1148, _1151));
    float _1218 = dot(vec4(_1209, _1210, _1211, 1.0), vec4(_1141, _1144, _1147, _1150));
    float _1252;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1225 = dot(vec4(_1209, _1210, _1211, 1.0), vec4(_863, _866, _869, _872));
        float _1229 = dot(vec4(_1209, _1210, _1211, 1.0), vec4(_864, _867, _870, _873));
        float _1233 = dot(vec4(_1209, _1210, _1211, 1.0), vec4(_865, _868, _871, _874));
        float _1240 = dot(vec4(cbModelParam._m0[39u]), vec4(_1209, _1210, _1211, 1.0));
        _1252 = dot(vec3(isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)), isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)), isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1240) ? 0.0 : (isnan(0.0) ? _1240 : max(0.0, _1240))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1252 = 1.0;
    }
    float _1263;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1254 = dot(vec4(cbModelParam._m0[40u]), vec4(_1209, _1210, _1211, 1.0));
        _1263 = dot(vec3(isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)), isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)), isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1254) ? 0.0 : (isnan(0.0) ? _1254 : max(0.0, _1254))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1263 = 1.0;
    }
    float _1267 = (_1263 * cbModelParam._m0[1u].x) + (_1252 * (1.0 - cbModelParam._m0[1u].x));
    float _1276 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1359;
    float _1361;
    float _1363;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1326 = fma(_565, cbModelParam._m0[13u].z, fma(_561, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _557)) + cbModelParam._m0[13u].w;
        float _1330 = fma(_565, cbModelParam._m0[14u].z, fma(_561, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _557)) + cbModelParam._m0[14u].w;
        float _1334 = fma(_565, cbModelParam._m0[15u].z, fma(_561, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _557)) + cbModelParam._m0[15u].w;
        float _1337 = fma(_535, cbModelParam._m0[13u].z, fma(_534, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _533));
        float _1340 = fma(_535, cbModelParam._m0[14u].z, fma(_534, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _533));
        float _1343 = fma(_535, cbModelParam._m0[15u].z, fma(_534, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _533));
        float _1369;
        if (_1337 > 0.0)
        {
            _1369 = abs((1.0 - _1326) / _1337);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1337 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1326 + 1.0) / _1337);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1369 = frontier_phi_29_27_ladder;
        }
        float _1666;
        if (_1340 > 0.0)
        {
            _1666 = abs((1.0 - _1330) / _1340);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1340 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1330 + 1.0) / _1340);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1666 = frontier_phi_38_34_ladder;
        }
        float _1977;
        if (_1343 > 0.0)
        {
            _1977 = abs((1.0 - _1334) / _1343);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1343 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1334 + 1.0) / _1343);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _1977 = frontier_phi_52_45_ladder;
        }
        float _1979 = isnan(_1666) ? _1369 : (isnan(_1369) ? _1666 : min(_1369, _1666));
        float _1980 = isnan(_1977) ? _1979 : (isnan(_1979) ? _1977 : min(_1979, _1977));
        float _1984 = (_1980 * _1337) + _1326;
        float _1985 = (_1980 * _1340) + _1330;
        float _1986 = (_1980 * _1343) + _1334;
        float _1987 = _1980 * 9.9999997473787516355514526367188e-05;
        float _1988 = (-1.0) - _1987;
        float _1990 = _1987 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_1986 > _1990) || ((_1986 < _1988) || ((_1985 > _1990) || ((_1985 < _1988) || ((_1984 < _1988) || (_1984 > _1990))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2125 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1986, cbModelParam._m0[9u].z, fma(_1985, cbModelParam._m0[9u].y, _1984 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1986, cbModelParam._m0[10u].z, fma(_1985, cbModelParam._m0[10u].y, _1984 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1986, cbModelParam._m0[11u].z, fma(_1985, cbModelParam._m0[11u].y, _1984 * cbModelParam._m0[11u].x))), _1276);
            frontier_phi_28_52_ladder = _2125.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _2125.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _2125.x * cbModelParam._m0[1u].y;
        }
        _1359 = frontier_phi_28_52_ladder_2;
        _1361 = frontier_phi_28_52_ladder_1;
        _1363 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1347 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_533, _534, _535), _1276);
        _1359 = _1347.x * cbModelParam._m0[1u].y;
        _1361 = _1347.y * cbModelParam._m0[1u].y;
        _1363 = _1347.z * cbModelParam._m0[1u].y;
    }
    float _1366 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1456;
    float _1458;
    float _1460;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1420 = fma(_565, cbModelParam._m0[21u].z, fma(_561, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _557)) + cbModelParam._m0[21u].w;
        float _1424 = fma(_565, cbModelParam._m0[22u].z, fma(_561, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _557)) + cbModelParam._m0[22u].w;
        float _1428 = fma(_565, cbModelParam._m0[23u].z, fma(_561, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _557)) + cbModelParam._m0[23u].w;
        float _1431 = fma(_535, cbModelParam._m0[21u].z, fma(_534, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _533));
        float _1434 = fma(_535, cbModelParam._m0[22u].z, fma(_534, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _533));
        float _1437 = fma(_535, cbModelParam._m0[23u].z, fma(_534, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _533));
        float _1671;
        if (_1431 > 0.0)
        {
            _1671 = abs((1.0 - _1420) / _1431);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1431 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1420 + 1.0) / _1431);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1671 = frontier_phi_40_36_ladder;
        }
        float _2003;
        if (_1434 > 0.0)
        {
            _2003 = abs((1.0 - _1424) / _1434);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1434 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1424 + 1.0) / _1434);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _2003 = frontier_phi_54_47_ladder;
        }
        float _2190;
        if (_1437 > 0.0)
        {
            _2190 = abs((1.0 - _1428) / _1437);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1437 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1428 + 1.0) / _1437);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2190 = frontier_phi_72_65_ladder;
        }
        float _2192 = isnan(_2003) ? _1671 : (isnan(_1671) ? _2003 : min(_1671, _2003));
        float _2193 = isnan(_2190) ? _2192 : (isnan(_2192) ? _2190 : min(_2192, _2190));
        float _2197 = (_2193 * _1431) + _1420;
        float _2198 = (_2193 * _1434) + _1424;
        float _2199 = (_2193 * _1437) + _1428;
        float _2200 = _2193 * 9.9999997473787516355514526367188e-05;
        float _2201 = (-1.0) - _2200;
        float _2203 = _2200 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2199 > _2203) || ((_2199 < _2201) || ((_2198 > _2203) || ((_2198 < _2201) || ((_2197 < _2201) || (_2197 > _2203))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2391 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2199, cbModelParam._m0[17u].z, fma(_2198, cbModelParam._m0[17u].y, _2197 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2199, cbModelParam._m0[18u].z, fma(_2198, cbModelParam._m0[18u].y, _2197 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2199, cbModelParam._m0[19u].z, fma(_2198, cbModelParam._m0[19u].y, _2197 * cbModelParam._m0[19u].x))), _1366);
            frontier_phi_37_72_ladder = _2391.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2391.y * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2391.x * cbModelParam._m0[1u].z;
        }
        _1456 = frontier_phi_37_72_ladder_2;
        _1458 = frontier_phi_37_72_ladder_1;
        _1460 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1440 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_533, _534, _535), _1366);
        _1456 = _1440.x * cbModelParam._m0[1u].z;
        _1458 = _1440.y * cbModelParam._m0[1u].z;
        _1460 = _1440.z * cbModelParam._m0[1u].z;
    }
    float _1472 = _532 * 0.01200000010430812835693359375;
    float _1474 = _1472 * ((cbModelParam._m0[1u].w * (_1456 - _1359)) + _1359);
    float _1475 = _1472 * ((cbModelParam._m0[1u].w * (_1458 - _1361)) + _1361);
    float _1476 = _1472 * ((cbModelParam._m0[1u].w * (_1460 - _1363)) + _1363);
    float _1479 = fma(_1476, cbSceneParam._m0[89u].z, fma(_1475, cbSceneParam._m0[89u].y, _1474 * cbSceneParam._m0[89u].x));
    float _1482 = fma(_1476, cbSceneParam._m0[90u].z, fma(_1475, cbSceneParam._m0[90u].y, _1474 * cbSceneParam._m0[90u].x));
    float _1485 = fma(_1476, cbSceneParam._m0[91u].z, fma(_1475, cbSceneParam._m0[91u].y, _1474 * cbSceneParam._m0[91u].x));
    uvec4 _1495 = floatBitsToUint(cbInstanceData._m0[_507 + 5u]);
    uint _1497 = _1495.x * 14u;
    uint _1498 = _1497 + 13u;
    float _1503 = _532 + (-1.0);
    float _1506 = (cbLight._m0[_1498].x * _1503) + 1.0;
    float _1507 = (cbLight._m0[_1498].y * _1503) + 1.0;
    uint _1508 = _1497 + 5u;
    float _1514 = isnan(1.0) ? _1507 : (isnan(_1507) ? 1.0 : min(_1507, 1.0));
    uint _1518 = _1497 + 4u;
    float _1524 = isnan(1.0) ? _1506 : (isnan(_1506) ? 1.0 : min(_1506, 1.0));
    uint _1528 = _1497 | 1u;
    float _1539 = dot(vec3(cbLight._m0[_1497].xyz), vec3(0.0));
    float _1542 = dot(vec3(cbLight._m0[_1528].xyz), vec3(0.0));
    float _3280 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
    float _3291 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
    float _1547 = (isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0))) * 0.3183098733425140380859375;
    float _1549 = (isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0))) * 0.3183098733425140380859375;
    float _1556 = ((cbLight._m0[_1508].x * _1514) * _1549) + ((cbLight._m0[_1518].x * _1524) * _1547);
    float _1557 = ((_1514 * cbLight._m0[_1508].y) * _1549) + ((_1524 * cbLight._m0[_1518].y) * _1547);
    float _1558 = ((_1514 * cbLight._m0[_1508].z) * _1549) + ((_1524 * cbLight._m0[_1518].z) * _1547);
    uint _1559 = _1497 + 8u;
    float _1565 = cbLight._m0[_1497].x + _466;
    float _1566 = cbLight._m0[_1497].y + _467;
    float _1567 = cbLight._m0[_1497].z + _468;
    float _1571 = inversesqrt(dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567)));
    float _1575 = dot(vec3(0.0), vec3(cbLight._m0[_1497].xyz));
    float _3302 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
    float _1578 = isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0));
    float _1579 = dot(vec3(0.0), vec3(_466, _467, _468));
    float _3313 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
    float _1582 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
    float _1583 = dot(vec3(cbLight._m0[_1497].xyz), vec3(_1565 * _1571, _1566 * _1571, _1567 * _1571));
    float _3324 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
    float _1594 = (exp2(log2(1.0 - (isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1600 = (0.5 / ((_1578 + 9.9999999392252902907785028219223e-09) + _1582)) * _1578;
    float _3335 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
    float _1602 = (isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0))) * 0.31831014156341552734375;
    uint _1613 = _1497 + 9u;
    float _1619 = cbLight._m0[_1528].x + _466;
    float _1620 = cbLight._m0[_1528].y + _467;
    float _1621 = cbLight._m0[_1528].z + _468;
    float _1625 = inversesqrt(dot(vec3(_1619, _1620, _1621), vec3(_1619, _1620, _1621)));
    float _1629 = dot(vec3(0.0), vec3(cbLight._m0[_1528].xyz));
    float _3346 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
    float _1632 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
    float _1633 = dot(vec3(cbLight._m0[_1528].xyz), vec3(_1619 * _1625, _1620 * _1625, _1621 * _1625));
    float _3357 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
    float _1642 = (exp2(log2(1.0 - (isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1646 = (0.5 / ((_1632 + 9.9999999392252902907785028219223e-09) + _1582)) * _1632;
    float _3368 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
    float _1648 = (isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0))) * 0.31831014156341552734375;
    float _1658 = (((_1642 * cbLight._m0[_1613].x) * _1648) * _1514) + (((_1594 * cbLight._m0[_1559].x) * _1602) * _1524);
    float _1659 = (((_1642 * cbLight._m0[_1613].y) * _1648) * _1514) + (((_1594 * cbLight._m0[_1559].y) * _1602) * _1524);
    float _1660 = (((_1642 * cbLight._m0[_1613].z) * _1648) * _1514) + (((_1594 * cbLight._m0[_1559].z) * _1602) * _1524);
    float _1776;
    float _1778;
    float _1780;
    float _1782;
    float _1784;
    float _1786;
    if (_1495.y == 0u)
    {
        float _1716 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1717 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1716;
        float _1718 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1716;
        float _1719 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1716;
        uvec4 _1731 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1732 = _1731.x;
        uint _1743 = uint((float(_1731.y) * floor(float(uint(cbSceneParam._m0[85u].y * _494) / _1732))) + floor(float(uint(cbSceneParam._m0[85u].x * _493) / _1732)));
        float _1753 = (log2(_1719 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1754 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        uint _1757 = uint(isnan(14.0) ? _1754 : (isnan(_1754) ? 14.0 : min(_1754, 14.0)));
        uvec4 _1762 = texelFetch(g_lightClusterGridBuffer, int(((_1757 << 2u) + (_1743 << 6u)) >> 2u));
        uint _1763 = _1762.x;
        uint _1764 = _1731.z;
        float _1854;
        float _1856;
        float _1858;
        float _1860;
        float _1862;
        float _1864;
        if (((((1u << ((_1764 >> 4u) & 15u)) + 4294967295u) & _1763) == 0u) || ((_1764 & 240u) == 0u))
        {
            _1854 = 0.0;
            _1856 = 0.0;
            _1858 = 0.0;
            _1860 = 0.0;
            _1862 = 0.0;
            _1864 = 0.0;
        }
        else
        {
            float _1855;
            float _1857;
            float _1859;
            float _1861;
            float _1863;
            float _1865;
            float _2037 = 0.0;
            float _2038 = 0.0;
            float _2039 = 0.0;
            float _2040 = 0.0;
            float _2041 = 0.0;
            float _2042 = 0.0;
            uint _2043 = 0u;
            uint _2052;
            bool _2053;
            for (;;)
            {
                _2052 = texelFetch(g_lightClassification, int((((_1757 << 5u) + (_1743 << 9u)) + (_2043 << 2u)) >> 2u)).x;
                _2053 = _2052 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2053)
                {
                    frontier_phi_67_pred = _2040;
                    frontier_phi_67_pred_1 = _2039;
                    frontier_phi_67_pred_2 = _2038;
                    frontier_phi_67_pred_3 = _2037;
                    frontier_phi_67_pred_4 = _2041;
                    frontier_phi_67_pred_5 = _2042;
                }
                else
                {
                    float _2233;
                    float _2234;
                    float _2235;
                    float _2236;
                    float _2237;
                    float _2238;
                    uint _2239;
                    _2233 = _2037;
                    _2234 = _2038;
                    _2235 = _2039;
                    _2236 = _2040;
                    _2237 = _2041;
                    _2238 = _2042;
                    _2239 = _2052;
                    float _2134;
                    float _2135;
                    float _2136;
                    float _2137;
                    float _2138;
                    float _2139;
                    for (;;)
                    {
                        uint _2243 = uint(findLSB(_2239)) + (_2043 << 5u);
                        uint _2240 = (_2239 + 4294967295u) & _2239;
                        uint _2245 = _2243 * 48u;
                        vec4 _2259 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2245)).x, texelFetch(g_PointLightRenderingBuffer, int(_2245 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2245 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2245 + 3u)).x));
                        uint _2265 = (_2243 * 48u) + 4u;
                        vec4 _2278 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2265)).x, texelFetch(g_PointLightRenderingBuffer, int(_2265 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2265 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2265 + 3u)).x));
                        uint _2284 = (_2243 * 48u) + 8u;
                        vec3 _2295 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2284)).x, texelFetch(g_PointLightRenderingBuffer, int(_2284 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2284 + 2u)).x));
                        float _2299 = _2259.x - _1717;
                        float _2300 = _2259.y - _1718;
                        float _2301 = _2259.z - _1719;
                        float _2302 = dot(vec3(_2299, _2300, _2301), vec3(_2299, _2300, _2301));
                        float _2305 = inversesqrt(_2302);
                        float _2314 = 1.0 - (_2302 * _2259.w);
                        float _3389 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
                        float _2315 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
                        float _2316 = sqrt(_2302) * _2278.w;
                        float _2319 = 1.39999997615814208984375 / (_2316 + 1.39999997615814208984375);
                        float _2320 = _2319 * _2319;
                        float _2323 = ((1.0 - _2320) * dot(vec3(0.0), vec3(_2305 * _2299, _2305 * _2300, _2305 * _2301))) + _2320;
                        float _2326 = _2316 * _2316;
                        float _2330 = ((isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0))) * _2315) / ((_2326 * 0.699999988079071044921875) + 1.0);
                        float _2334 = (-0.0) - _1717;
                        float _2335 = (-0.0) - _1718;
                        float _2336 = (-0.0) - _1719;
                        float _2340 = inversesqrt(dot(vec3(_2334, _2335, _2336), vec3(_2334, _2335, _2336)));
                        float _2344 = dot(vec3(0.0), vec3(_2340 * _2334, _2340 * _2335, _2340 * _2336));
                        float _3405 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
                        float _3416 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
                        float _2348 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
                        float _2352 = (0.5 / (((isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0))) + 9.9999999392252902907785028219223e-09) + _2348)) * _2348;
                        float _3427 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
                        float _2361 = (((isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0))) * 3.1415927410125732421875) / ((_2326 * 2.1991131305694580078125) + 3.141590118408203125)) * _2315;
                        _2137 = (_2330 * _2278.x) + _2236;
                        _2138 = (_2330 * _2278.y) + _2237;
                        _2139 = (_2330 * _2278.z) + _2238;
                        _2134 = (_2361 * _2295.x) + _2233;
                        _2135 = (_2361 * _2295.y) + _2234;
                        _2136 = (_2361 * _2295.z) + _2235;
                        if (_2240 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2233 = _2134;
                            _2234 = _2135;
                            _2235 = _2136;
                            _2236 = _2137;
                            _2237 = _2138;
                            _2238 = _2139;
                            _2239 = _2240;
                        }
                    }
                    frontier_phi_67_pred = _2137;
                    frontier_phi_67_pred_1 = _2136;
                    frontier_phi_67_pred_2 = _2135;
                    frontier_phi_67_pred_3 = _2134;
                    frontier_phi_67_pred_4 = _2138;
                    frontier_phi_67_pred_5 = _2139;
                }
                _1861 = frontier_phi_67_pred;
                _1859 = frontier_phi_67_pred_1;
                _1857 = frontier_phi_67_pred_2;
                _1855 = frontier_phi_67_pred_3;
                _1863 = frontier_phi_67_pred_4;
                _1865 = frontier_phi_67_pred_5;
                uint _2044 = _2043 + 1u;
                if (_2044 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2037 = _1855;
                    _2038 = _1857;
                    _2039 = _1859;
                    _2040 = _1861;
                    _2041 = _1863;
                    _2042 = _1865;
                    _2043 = _2044;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1854 = _1855;
            _1856 = _1857;
            _1858 = _1859;
            _1860 = _1861;
            _1862 = _1863;
            _1864 = _1865;
        }
        uvec4 _1868 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1869 = _1868.z;
        uint _1871 = (_1869 >> 8u) & 15u;
        float _2008;
        float _2010;
        float _2012;
        float _2014;
        float _2016;
        float _2018;
        if (((4294967295u << _1871) & _1763) == 0u)
        {
            _2008 = _1854;
            _2010 = _1856;
            _2012 = _1858;
            _2014 = _1860;
            _2016 = _1862;
            _2018 = _1864;
        }
        else
        {
            float _2033 = inversesqrt(dot(vec3(_1717, _1718, _1719), vec3(_1717, _1718, _1719)));
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_1871 < ((_1869 >> 12u) & 15u))
            {
                float _2009;
                float _2011;
                float _2013;
                float _2015;
                float _2017;
                float _2019;
                float _2216 = _1854;
                float _2217 = _1856;
                float _2218 = _1858;
                float _2219 = _1860;
                float _2220 = _1862;
                float _2221 = _1864;
                uint _2222 = _1871;
                uint _2231;
                bool _2232;
                for (;;)
                {
                    _2231 = texelFetch(g_lightClassification, int((((_1757 << 5u) + (_1743 << 9u)) + (_2222 << 2u)) >> 2u)).x;
                    _2232 = _2231 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2232)
                    {
                        frontier_phi_81_pred = _2219;
                        frontier_phi_81_pred_1 = _2218;
                        frontier_phi_81_pred_2 = _2217;
                        frontier_phi_81_pred_3 = _2216;
                        frontier_phi_81_pred_4 = _2221;
                        frontier_phi_81_pred_5 = _2220;
                    }
                    else
                    {
                        float _2396;
                        float _2397;
                        float _2398;
                        float _2399;
                        float _2400;
                        float _2401;
                        float _2645;
                        float _2646;
                        float _2647;
                        float _2648;
                        float _2649;
                        float _2650;
                        float _2409 = _2216;
                        float _2410 = _2217;
                        float _2411 = _2218;
                        float _2412 = _2219;
                        float _2413 = _2220;
                        float _2414 = _2221;
                        uint _2415 = _2231;
                        uint _2416;
                        vec4 _2441;
                        float _2442;
                        vec4 _2457;
                        vec3 _2469;
                        vec4 _2484;
                        vec4 _2499;
                        float _2545;
                        bool _2546;
                        for (;;)
                        {
                            uint _2426 = ((_2222 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2415));
                            _2416 = (_2415 + 4294967295u) & _2415;
                            uint _2428 = _2426 * 40u;
                            _2441 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2428 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2428 + 3u)).x));
                            _2442 = _2441.w;
                            uint _2444 = (_2426 * 40u) + 4u;
                            _2457 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2444)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2444 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2444 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2444 + 3u)).x));
                            uint _2459 = (_2426 * 40u) + 8u;
                            _2469 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2459)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2459 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2459 + 2u)).x));
                            uint _2471 = (_2426 * 40u) + 16u;
                            _2484 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2471)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2471 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2471 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2471 + 3u)).x));
                            uint _2486 = (_2426 * 40u) + 20u;
                            _2499 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2486 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2486 + 3u)).x));
                            uint _2501 = (_2426 * 40u) + 24u;
                            vec4 _2514 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2501)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2501 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2501 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2501 + 3u)).x));
                            uint _2520 = (_2426 * 40u) + 28u;
                            vec4 _2533 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2520 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2520 + 3u)).x));
                            _2545 = fma(_1719, _2533.z, fma(_1718, _2533.y, _2533.x * _1717)) + _2533.w;
                            _2546 = !((fma(_1719, _2514.z, fma(_1718, _2514.y, _2514.x * _1717)) + _2514.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_2546)
                            {
                                float _2573 = _2441.x - _1717;
                                float _2574 = _2441.y - _1718;
                                float _2575 = _2441.z - _1719;
                                float _2576 = dot(vec3(_2573, _2574, _2575), vec3(_2573, _2574, _2575));
                                float _2579 = inversesqrt(_2576);
                                float _2580 = _2579 * _2573;
                                float _2581 = _2579 * _2574;
                                float _2582 = _2579 * _2575;
                                float _2586 = 1.0 - (_2576 / (_2442 * _2442));
                                float _3438 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
                                float _2587 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
                                float _2591 = sqrt(_2576) * _2457.w;
                                float _2593 = 1.39999997615814208984375 / (_2591 + 1.39999997615814208984375);
                                float _2594 = _2593 * _2593;
                                float _2595 = 1.0 - _2594;
                                float _2597 = (_2595 * dot(vec3(_2580, _2581, _2582), vec3(0.0))) + _2594;
                                float _2600 = _2591 * _2591;
                                float _2604 = (fma(_1719, _2484.z, fma(_1718, _2484.y, _2484.x * _1717)) + _2484.w) / _2545;
                                float _2605 = (fma(_1719, _2499.z, fma(_1718, _2499.y, _2499.x * _1717)) + _2499.w) / _2545;
                                float _2609 = 1.0 - dot(vec2(_2604, _2605), vec2(_2604, _2605));
                                float _3454 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
                                float _2610 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
                                float _2611 = _2610 * (((isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0))) * _2587) / ((_2600 * 0.699999988079071044921875) + 1.0));
                                float _2621 = dot(vec3(0.0), vec3((-0.0) - (_1717 * _2033), (-0.0) - (_1718 * _2033), (-0.0) - (_1719 * _2033)));
                                float _3465 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
                                float _2629 = (_2595 * dot(vec3(0.0), vec3(_2580, _2581, _2582))) + _2594;
                                float _3476 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
                                float _2630 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
                                float _2634 = (0.5 / (((isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0))) + 9.9999999392252902907785028219223e-09) + _2630)) * _2630;
                                float _3487 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
                                float _2641 = (_2610 * _2587) * (((isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0))) * 3.1415927410125732421875) / ((_2600 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_87_pred = _2611 * _2457.x;
                                frontier_phi_87_pred_1 = _2641 * _2469.z;
                                frontier_phi_87_pred_2 = _2641 * _2469.y;
                                frontier_phi_87_pred_3 = _2641 * _2469.x;
                                frontier_phi_87_pred_4 = _2611 * _2457.z;
                                frontier_phi_87_pred_5 = _2611 * _2457.y;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _2648 = frontier_phi_87_pred;
                            _2647 = frontier_phi_87_pred_1;
                            _2646 = frontier_phi_87_pred_2;
                            _2645 = frontier_phi_87_pred_3;
                            _2650 = frontier_phi_87_pred_4;
                            _2649 = frontier_phi_87_pred_5;
                            _2399 = _2648 + _2412;
                            _2400 = _2649 + _2413;
                            _2401 = _2650 + _2414;
                            _2396 = _2645 + _2409;
                            _2397 = _2646 + _2410;
                            _2398 = _2647 + _2411;
                            if (_2416 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2409 = _2396;
                                _2410 = _2397;
                                _2411 = _2398;
                                _2412 = _2399;
                                _2413 = _2400;
                                _2414 = _2401;
                                _2415 = _2416;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2399;
                        frontier_phi_81_pred_1 = _2398;
                        frontier_phi_81_pred_2 = _2397;
                        frontier_phi_81_pred_3 = _2396;
                        frontier_phi_81_pred_4 = _2401;
                        frontier_phi_81_pred_5 = _2400;
                    }
                    _2015 = frontier_phi_81_pred;
                    _2013 = frontier_phi_81_pred_1;
                    _2011 = frontier_phi_81_pred_2;
                    _2009 = frontier_phi_81_pred_3;
                    _2019 = frontier_phi_81_pred_4;
                    _2017 = frontier_phi_81_pred_5;
                    uint _2223 = _2222 + 1u;
                    if (_2223 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2216 = _2009;
                        _2217 = _2011;
                        _2218 = _2013;
                        _2219 = _2015;
                        _2220 = _2017;
                        _2221 = _2019;
                        _2222 = _2223;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2019;
                frontier_phi_56_57_ladder_1 = _2017;
                frontier_phi_56_57_ladder_2 = _2015;
                frontier_phi_56_57_ladder_3 = _2011;
                frontier_phi_56_57_ladder_4 = _2009;
                frontier_phi_56_57_ladder_5 = _2013;
            }
            else
            {
                frontier_phi_56_57_ladder = _1864;
                frontier_phi_56_57_ladder_1 = _1862;
                frontier_phi_56_57_ladder_2 = _1860;
                frontier_phi_56_57_ladder_3 = _1856;
                frontier_phi_56_57_ladder_4 = _1854;
                frontier_phi_56_57_ladder_5 = _1858;
            }
            _2008 = frontier_phi_56_57_ladder_4;
            _2010 = frontier_phi_56_57_ladder_3;
            _2012 = frontier_phi_56_57_ladder_5;
            _2014 = frontier_phi_56_57_ladder_2;
            _2016 = frontier_phi_56_57_ladder_1;
            _2018 = frontier_phi_56_57_ladder;
        }
        float _2023 = isnan(1.0) ? _532 : (isnan(_532) ? 1.0 : min(_532, 1.0));
        _1776 = (_2023 * _2014) + _1556;
        _1778 = (_2023 * _2016) + _1557;
        _1780 = (_2023 * _2018) + _1558;
        _1782 = ((_2008 * 0.039999999105930328369140625) * _2023) + _1658;
        _1784 = ((_2010 * 0.039999999105930328369140625) * _2023) + _1659;
        _1786 = ((_2012 * 0.039999999105930328369140625) * _2023) + _1660;
    }
    else
    {
        _1776 = _1556;
        _1778 = _1557;
        _1780 = _1558;
        _1782 = _1658;
        _1784 = _1659;
        _1786 = _1660;
    }
    float _3503 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _3514 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _3525 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _1803 = ((isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))) * (_1776 + ((isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0))) * _532))) + ((_1782 + ((isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0))) * _1267)) * cbPerFrame._m0[3u].x);
    float _1804 = ((isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))) * (_1778 + ((isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0))) * _532))) + ((_1784 + ((isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))) * _1267)) * cbPerFrame._m0[3u].x);
    float _1805 = ((isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))) * (_1780 + ((isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0))) * _532))) + ((_1786 + ((isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0))) * _1267)) * cbPerFrame._m0[3u].x);
    float _1806 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
    float _1807 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1808 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    uint _1809 = _507 + 6u;
    float _1817 = _493 / cbSceneParam._m0[86u].x;
    float _1818 = _494 / cbSceneParam._m0[86u].y;
    vec4 _1832 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1817, _1818, (log2((isnan(cbSceneParam._m0[77u].w) ? _461 : (isnan(_461) ? cbSceneParam._m0[77u].w : min(_461, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1834 = _1832.x;
    float _1835 = _1832.y;
    float _1836 = _1832.z;
    float _1837 = _1832.w;
    float _1917;
    float _1919;
    float _1921;
    float _1923;
    if (_461 > cbSceneParam._m0[78u].w)
    {
        float _1879 = isnan(_461) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _461 : min(cbSceneParam._m0[80u].w, _461));
        float _1880 = _1879 / _461;
        float _1891 = _1880 * _254;
        float _1892 = _255 * _1880;
        float _1893 = (-0.0) - _1892;
        float _1894 = _1880 * _256;
        float _1896 = (cbSceneParam._m0[77u].w * _1893) / _1879;
        float _1897 = _1896 + cbSceneParam._m0[79u].w;
        float _1898 = cbSceneParam._m0[79u].w - _1892;
        float _1904 = sqrt(((_1891 * _1891) + (_1892 * _1892)) + (_1894 * _1894));
        float _1907 = (1.0 - (cbSceneParam._m0[77u].w / _1879)) * _1904;
        float _1913 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1915 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2147;
        if (abs((_1893 - _1896) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2147 = ((((_1897 > 0.0) ? exp2(_1913 * _1897) : (2.0 - exp2(_1915 * _1897))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1907;
        }
        else
        {
            float _2066 = 1.0 / cbSceneParam._m0[80u].x;
            float _2067 = isnan(_1898) ? _1897 : (isnan(_1897) ? _1898 : max(_1897, _1898));
            float _2068 = isnan(_1898) ? _1897 : (isnan(_1897) ? _1898 : min(_1897, _1898));
            float _2077 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : min(_2067, 0.0));
            float _2078 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : min(_2068, 0.0));
            _2147 = ((abs(_1904 / _1893) * cbSceneParam._m0[80u].y) * ((((_2077 - _2078) * 2.0) - ((exp2(_1913 * (isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0)))) - exp2(_1913 * (isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0))))) * _2066)) - ((exp2(_1915 * _2077) - exp2(_1915 * _2078)) * _2066))) + (_1907 * cbSceneParam._m0[80u].z);
        }
        vec4 _2149 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1817, _1818, 1.0), 0.0);
        float _2158 = exp2((_2147 * (-1.44269502162933349609375)) * (1.0 - _2149.w));
        float _2159 = log2(_2158);
        float _2175 = log2(_1837);
        _1917 = (exp2(_2175 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2159 * cbSceneParam._m0[78u].x)) * _2149.x) / cbSceneParam._m0[78u].x)) + _1834;
        _1919 = (exp2(_2175 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2159 * cbSceneParam._m0[78u].y)) * _2149.y) / cbSceneParam._m0[78u].y)) + _1835;
        _1921 = (exp2(_2175 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2159 * cbSceneParam._m0[78u].z)) * _2149.z) / cbSceneParam._m0[78u].z)) + _1836;
        _1923 = _2158 * _1837;
    }
    else
    {
        _1917 = _1834;
        _1919 = _1835;
        _1921 = _1836;
        _1923 = _1837;
    }
    bool _2185;
    vec4 _1933;
    vec4 _1956;
    float _1958;
    float _1962;
    float _1963;
    float _1964;
    float _1965;
    bool _1976;
    for (;;)
    {
        _1933 = cbMatDynParam._m0[0u];
        float _1935 = roundEven(_1933.y);
        bool _1936 = _1935 == 3.0;
        float _1938 = log2(_1923);
        float _1945 = exp2(_1938 * cbSceneParam._m0[78u].x) * _1806;
        float _1946 = exp2(_1938 * cbSceneParam._m0[78u].y) * _1807;
        float _1947 = exp2(_1938 * cbSceneParam._m0[78u].z) * _1808;
        float _1954 = _475 + (-0.5);
        _1956 = cbMtdParam._m0[1u];
        _1958 = _1956.y * _1954;
        float _1961 = (_1935 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1962 = _1961 * (_1936 ? _1945 : (_1945 + (cbSceneParam._m0[72u].w * _1917)));
        _1963 = _1961 * (_1936 ? _1946 : (_1946 + (cbSceneParam._m0[72u].w * _1919)));
        _1964 = _1961 * (_1936 ? _1947 : (_1947 + (cbSceneParam._m0[72u].w * _1921)));
        _1965 = _1954 * 0.999000012874603271484375;
        _1976 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1976)
        {
            if ((cbInstanceData._m0[_507 + 7u].x + _1965) < 0.5)
            {
                _2185 = true;
                break;
            }
        }
        uint _2101 = _508 + uint(_1933.w);
        if ((cbInstanceData._m0[_2101].w < 1.0) && ((cbInstanceData._m0[_2101].w + _1965) < 0.5))
        {
            _2185 = true;
            break;
        }
        if ((_1958 + 1.0) < _1956.x)
        {
            _2185 = true;
            break;
        }
        _2185 = false;
        break;
    }
    float _2366;
    if (_2185)
    {
        discard_state = true;
        _2366 = 0.0;
    }
    else
    {
        _2366 = cbInstanceData._m0[_1809].w;
    }
    SV_Target.x = _1962;
    SV_Target.y = _1963;
    SV_Target.z = _1964;
    SV_Target.w = _2366;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1809].w;
    discard_exit();
}


