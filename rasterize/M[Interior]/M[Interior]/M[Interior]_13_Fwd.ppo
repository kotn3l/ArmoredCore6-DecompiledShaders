#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D M_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1044;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _285 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _320 = cbMtdParam._m0[21u].w + _261;
    float _321 = cbMtdParam._m0[22u].x + _262;
    float _322 = cbMtdParam._m0[22u].y + _263;
    float _336 = (-0.0) - dot(vec3(_320, _321, _322), vec3(_189 * _182, _189 * _183, _189 * _184));
    float _337 = (-0.0) - dot(vec3(_320, _321, _322), vec3(_203 * TANGENT.x, _203 * TANGENT.y, _203 * TANGENT.z));
    float _338 = (-0.0) - dot(vec3(_320, _321, _322), vec3((-0.0) - (_196 * NORMAL.x), (-0.0) - (_196 * NORMAL.y), (-0.0) - (_196 * NORMAL.z)));
    float _342 = inversesqrt(dot(vec3(_336, _337, _338), vec3(_336, _337, _338)));
    float _345 = _342 * _338;
    float _346 = (_342 * _336) + (((_285.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _347 = (_342 * _337) + (((_285.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _348 = _346 * cbMtdParam._m0[18u].z;
    float _349 = _347 * cbMtdParam._m0[18u].y;
    float _350 = fract(TEXCOORD.x);
    float _351 = fract(TEXCOORD.y);
    float _357;
    if (_348 > 0.0)
    {
        _357 = (1.0 - _350) / _348;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_348 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _350) / _348;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _357 = frontier_phi_3_2_ladder;
    }
    float _365;
    if (_349 > 0.0)
    {
        _365 = (1.0 - _351) / _349;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_349 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _351) / _349;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _365 = frontier_phi_7_6_ladder;
    }
    bool _367 = _345 > 0.0;
    float _369 = _367 ? (cbMtdParam._m0[15u].x / _345) : 5000.0;
    float _370 = isnan(_365) ? _357 : (isnan(_357) ? _365 : min(_357, _365));
    float _371 = isnan(_369) ? _370 : (isnan(_370) ? _369 : min(_370, _369));
    float _375 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _376 = _350 + (-0.5);
    float _379 = _351 + (-0.5);
    float _382 = ((_371 * _345) + _375) / _375;
    vec4 _406 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_376 + (_371 * _348)) / _382) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_379 + (_371 * _349)) / _382) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _416 = cbMtdParam._m0[9u].x * _406.x;
    float _417 = cbMtdParam._m0[9u].y * _406.y;
    float _418 = cbMtdParam._m0[9u].z * _406.z;
    float _436 = _346 * cbMtdParam._m0[20u].z;
    float _437 = _347 * cbMtdParam._m0[20u].y;
    bool _438 = _436 > 0.0;
    float _443;
    if (_438)
    {
        _443 = (1.0 - _350) / _436;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_436 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _350) / _436;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _443 = frontier_phi_11_10_ladder;
    }
    bool _445 = _437 > 0.0;
    float _450;
    if (_445)
    {
        _450 = (1.0 - _351) / _437;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_437 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _351) / _437;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _450 = frontier_phi_15_14_ladder;
    }
    float _453 = _367 ? (cbMtdParam._m0[16u].x / _345) : 5000.0;
    float _454 = isnan(_450) ? _443 : (isnan(_443) ? _450 : min(_443, _450));
    float _455 = isnan(_453) ? _454 : (isnan(_454) ? _453 : min(_454, _453));
    float _459 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _463 = ((_455 * _345) + _459) / _459;
    float _468 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _470 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _486 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_376 + (_455 * _436)) / _463) + 0.5) + _468) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_379 + (_455 * _437)) / _463) + 0.5) + _470) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _498;
    if (_438)
    {
        _498 = (1.0 - _350) / _436;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_436 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _350) / _436;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _498 = frontier_phi_19_18_ladder;
    }
    float _504;
    if (_445)
    {
        _504 = (1.0 - _351) / _437;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_437 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _351) / _437;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _504 = frontier_phi_23_22_ladder;
    }
    float _506 = isnan(_504) ? _498 : (isnan(_498) ? _504 : min(_498, _504));
    float _507 = isnan(_453) ? _506 : (isnan(_506) ? _453 : min(_506, _453));
    float _514 = ((_507 * _345) + _459) / _459;
    vec4 _535 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_376 + (_507 * _436)) / _514) + 0.5) + _468) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_379 + (_507 * _437)) / _514) + 0.5) + _470) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _537 = _535.x;
    float _544 = (_537 * ((_486.x * cbMtdParam._m0[10u].x) - _416)) + _416;
    float _545 = (_537 * ((_486.y * cbMtdParam._m0[10u].y) - _417)) + _417;
    float _546 = (_537 * ((_486.z * cbMtdParam._m0[10u].z) - _418)) + _418;
    float _560 = _346 * cbMtdParam._m0[21u].x;
    float _561 = _347 * cbMtdParam._m0[20u].w;
    bool _562 = _560 > 0.0;
    float _567;
    if (_562)
    {
        _567 = (1.0 - _350) / _560;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_560 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _350) / _560;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _567 = frontier_phi_27_26_ladder;
    }
    bool _569 = _561 > 0.0;
    float _574;
    if (_569)
    {
        _574 = (1.0 - _351) / _561;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_561 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _351) / _561;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _574 = frontier_phi_31_30_ladder;
    }
    float _577 = _367 ? (cbMtdParam._m0[17u].z / _345) : 5000.0;
    float _578 = isnan(_574) ? _567 : (isnan(_567) ? _574 : min(_567, _574));
    float _579 = isnan(_577) ? _578 : (isnan(_578) ? _577 : min(_578, _577));
    float _583 = cbMtdParam._m0[17u].z * cbMtdParam._m0[15u].z;
    float _587 = ((_579 * _345) + _583) / _583;
    float _592 = cbMtdParam._m0[17u].y - cbMtdParam._m0[21u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    float _594 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    vec4 _611 = texture(sampler2D(M_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_376 + (_579 * _560)) / _587) + 0.5) + _592) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_379 + (_579 * _561)) / _587) + 0.5) + _594) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[7u].w));
    float _623;
    if (_562)
    {
        _623 = (1.0 - _350) / _560;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_560 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _350) / _560;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _623 = frontier_phi_35_34_ladder;
    }
    float _629;
    if (_569)
    {
        _629 = (1.0 - _351) / _561;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_561 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _351) / _561;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _629 = frontier_phi_39_38_ladder;
    }
    float _631 = isnan(_629) ? _623 : (isnan(_623) ? _629 : min(_623, _629));
    float _632 = isnan(_577) ? _631 : (isnan(_631) ? _577 : min(_631, _577));
    float _639 = ((_632 * _345) + _583) / _583;
    vec4 _659 = texture(sampler2D(M_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_376 + (_632 * _560)) / _639) + 0.5) + _592) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_379 + (_632 * _561)) / _639) + 0.5) + _594) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[8u].w));
    float _661 = _659.x;
    float _668 = (_661 * ((_611.x * cbMtdParam._m0[14u].x) - _544)) + _544;
    float _669 = (_661 * ((_611.y * cbMtdParam._m0[14u].y) - _545)) + _545;
    float _670 = (_661 * ((_611.z * cbMtdParam._m0[14u].z) - _546)) + _546;
    float _3016 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _3027 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _3038 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _689 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _693 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _694 = _261 * _693;
    float _695 = _262 * _693;
    float _696 = _263 * _693;
    float _702 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _703 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _716 = uint(roundEven(NORMAL.w)) * 13u;
    uint _719 = (_716 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _725 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3016 : (isnan(_3016) ? 1.0 : min(_3016, 1.0)))) * cbInstanceData._m0[_719].x;
    float _726 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3027 : (isnan(_3027) ? 1.0 : min(_3027, 1.0)))) * cbInstanceData._m0[_719].y;
    float _727 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3038 : (isnan(_3038) ? 1.0 : min(_3038, 1.0)))) * cbInstanceData._m0[_719].z;
    float _3049 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _728 = isnan(1.0) ? _3049 : (isnan(_3049) ? 1.0 : min(_3049, 1.0));
    float _3060 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _729 = isnan(1.0) ? _3060 : (isnan(_3060) ? 1.0 : min(_3060, 1.0));
    float _3071 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _730 = isnan(1.0) ? _3071 : (isnan(_3071) ? 1.0 : min(_3071, 1.0));
    vec4 _739 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _702, cbSceneParam._m0[86u].y * _703));
    float _742 = _739.x * TEXCOORD.z;
    float _743 = (-0.0) - _694;
    float _744 = (-0.0) - _695;
    float _745 = (-0.0) - _696;
    float _767 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _775 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1043;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _831 = (cbModelParam._m0[37u].x * ((((fma(_775, cbModelParam._m0[26u].z, fma(_771, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _767)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _833 = (cbModelParam._m0[37u].y * ((((fma(_775, cbModelParam._m0[27u].z, fma(_771, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _767)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _834 = (((((fma(_775, cbModelParam._m0[28u].z, fma(_771, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _767)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _837 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_831, _833, _834), 0.0);
        vec4 _844 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_831, _833, _834), 0.0);
        vec4 _851 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_831, _833, _834), 0.0);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_831, _833, _834), 0.0);
        float _871 = exp2((_837.w + (-0.5)) * 20.0) * 2.0;
        float _872 = _871 * (_837.x + (-0.5));
        float _873 = _871 * (_837.y + (-0.5));
        float _874 = _871 * (_837.z + (-0.5));
        float _881 = exp2((_844.w + (-0.5)) * 20.0) * 2.0;
        float _882 = _881 * (_844.x + (-0.5));
        float _883 = _881 * (_844.y + (-0.5));
        float _884 = _881 * (_844.z + (-0.5));
        float _891 = exp2((_851.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_851.x + (-0.5));
        float _893 = _891 * (_851.y + (-0.5));
        float _894 = _891 * (_851.z + (-0.5));
        float _901 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _902 = _901 * (_858.x + (-0.5));
        float _903 = _901 * (_858.y + (-0.5));
        float _904 = _901 * (_858.z + (-0.5));
        float _905 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _908 = _872 * 0.5;
        float _909 = _882 * 0.5;
        float _910 = _892 * 0.5;
        float _911 = dot(vec3(_908, _909, _910), vec3(_908, _909, _910));
        float _916 = (_911 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_911);
        float _925 = (dot(vec3(0.0), vec3(_916 * _908, _916 * _909, _916 * _910)) + 1.0) * 0.5;
        float _3097 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _935 = sqrt(((_909 * _909) + (_908 * _908)) + (_910 * _910)) / (_905 + 9.9999997473787516355514526367188e-06);
        float _3108 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3108 : (isnan(_3108) ? 1.0 : min(_3108, 1.0));
        float _937 = _936 * 2.0;
        float _941 = (1.0 - _936) / (_936 + 1.0);
        float _3119 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3119 : (isnan(_3119) ? 1.0 : min(_3119, 1.0));
        float _951 = ((((1.0 - _942) * (_937 + 2.0)) * exp2(log2(isnan(1.0) ? _3097 : (isnan(_3097) ? 1.0 : min(_3097, 1.0))) * (_937 + 1.0))) + _942) * _905;
        float _952 = _873 * 0.5;
        float _953 = _883 * 0.5;
        float _954 = _893 * 0.5;
        float _955 = dot(vec3(_952, _953, _954), vec3(_952, _953, _954));
        float _960 = (_955 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_955);
        float _968 = (dot(vec3(0.0), vec3(_960 * _952, _960 * _953, _960 * _954)) + 1.0) * 0.5;
        float _3130 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _977 = sqrt(((_953 * _953) + (_952 * _952)) + (_954 * _954)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3141 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3141 : (isnan(_3141) ? 1.0 : min(_3141, 1.0));
        float _979 = _978 * 2.0;
        float _983 = (1.0 - _978) / (_978 + 1.0);
        float _3152 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3152 : (isnan(_3152) ? 1.0 : min(_3152, 1.0));
        float _993 = ((((1.0 - _984) * (_979 + 2.0)) * exp2(log2(isnan(1.0) ? _3130 : (isnan(_3130) ? 1.0 : min(_3130, 1.0))) * (_979 + 1.0))) + _984) * _906;
        float _994 = _874 * 0.5;
        float _995 = _884 * 0.5;
        float _996 = _894 * 0.5;
        float _997 = dot(vec3(_994, _995, _996), vec3(_994, _995, _996));
        float _1002 = (_997 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_997);
        float _1010 = (dot(vec3(0.0), vec3(_1002 * _994, _1002 * _995, _1002 * _996)) + 1.0) * 0.5;
        float _3163 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1019 = sqrt(((_995 * _995) + (_994 * _994)) + (_996 * _996)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _3174 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3174 : (isnan(_3174) ? 1.0 : min(_3174, 1.0));
        float _1021 = _1020 * 2.0;
        float _1025 = (1.0 - _1020) / (_1020 + 1.0);
        float _3185 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3185 : (isnan(_3185) ? 1.0 : min(_3185, 1.0));
        float _1035 = ((((1.0 - _1026) * (_1021 + 2.0)) * exp2(log2(isnan(1.0) ? _3163 : (isnan(_3163) ? 1.0 : min(_3163, 1.0))) * (_1021 + 1.0))) + _1026) * _907;
        _1043 = _874;
        _1045 = _873;
        _1046 = _872;
        _1047 = _884;
        _1048 = _883;
        _1049 = _882;
        _1050 = _894;
        _1051 = _893;
        _1052 = _892;
        _1053 = _907;
        _1054 = _906;
        _1055 = _905;
        _1056 = cbModelParam._m0[36u].z * (isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0)));
        _1057 = cbModelParam._m0[36u].z * (isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0)));
        _1058 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0)));
    }
    else
    {
        _1043 = _1044;
        _1045 = _1044;
        _1046 = _1044;
        _1047 = _1044;
        _1048 = _1044;
        _1049 = _1044;
        _1050 = _1044;
        _1051 = _1044;
        _1052 = _1044;
        _1053 = _1044;
        _1054 = _1044;
        _1055 = _1044;
        _1056 = 0.0;
        _1057 = 0.0;
        _1058 = 0.0;
    }
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1112 = (cbModelParam._m0[38u].x * ((((fma(_775, cbModelParam._m0[30u].z, fma(_771, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _767)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1113 = (cbModelParam._m0[38u].y * ((((fma(_775, cbModelParam._m0[31u].z, fma(_771, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _767)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1114 = (((((fma(_775, cbModelParam._m0[32u].z, fma(_771, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _767)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1112, _1113, _1114), 0.0);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1112, _1113, _1114), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1112, _1113, _1114), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1112, _1113, _1114), 0.0);
        float _1149 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1116.x + (-0.5));
        float _1151 = _1149 * (_1116.y + (-0.5));
        float _1152 = _1149 * (_1116.z + (-0.5));
        float _1159 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1123.x + (-0.5));
        float _1161 = _1159 * (_1123.y + (-0.5));
        float _1162 = _1159 * (_1123.z + (-0.5));
        float _1169 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1130.x + (-0.5));
        float _1171 = _1169 * (_1130.y + (-0.5));
        float _1172 = _1169 * (_1130.z + (-0.5));
        float _1179 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1137.x + (-0.5));
        float _1181 = _1179 * (_1137.y + (-0.5));
        float _1182 = _1179 * (_1137.z + (-0.5));
        float _1183 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1184 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1185 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1186 = _1150 * 0.5;
        float _1187 = _1160 * 0.5;
        float _1188 = _1170 * 0.5;
        float _1189 = dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188));
        float _1194 = (_1189 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1189);
        float _1202 = (dot(vec3(0.0), vec3(_1194 * _1186, _1194 * _1187, _1194 * _1188)) + 1.0) * 0.5;
        float _3226 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1211 = sqrt(((_1187 * _1187) + (_1186 * _1186)) + (_1188 * _1188)) / (_1183 + 9.9999997473787516355514526367188e-06);
        float _3237 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0));
        float _1213 = _1212 * 2.0;
        float _1217 = (1.0 - _1212) / (_1212 + 1.0);
        float _3248 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0));
        float _1227 = ((((1.0 - _1218) * (_1213 + 2.0)) * exp2(log2(isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0))) * (_1213 + 1.0))) + _1218) * _1183;
        float _1228 = _1151 * 0.5;
        float _1229 = _1161 * 0.5;
        float _1230 = _1171 * 0.5;
        float _1231 = dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230));
        float _1236 = (_1231 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1231);
        float _1244 = (dot(vec3(0.0), vec3(_1236 * _1228, _1236 * _1229, _1236 * _1230)) + 1.0) * 0.5;
        float _3259 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1253 = sqrt(((_1229 * _1229) + (_1228 * _1228)) + (_1230 * _1230)) / (_1184 + 9.9999997473787516355514526367188e-06);
        float _3270 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0));
        float _1255 = _1254 * 2.0;
        float _1259 = (1.0 - _1254) / (_1254 + 1.0);
        float _3281 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0));
        float _1269 = ((((1.0 - _1260) * (_1255 + 2.0)) * exp2(log2(isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0))) * (_1255 + 1.0))) + _1260) * _1184;
        float _1270 = _1152 * 0.5;
        float _1271 = _1162 * 0.5;
        float _1272 = _1172 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1286 = (dot(vec3(0.0), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _3292 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1295 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1185 + 9.9999997473787516355514526367188e-06);
        float _3303 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _3314 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0))) * (_1297 + 1.0))) + _1302) * _1185;
        _1319 = _1152;
        _1320 = _1151;
        _1321 = _1150;
        _1322 = _1162;
        _1323 = _1161;
        _1324 = _1160;
        _1325 = _1172;
        _1326 = _1171;
        _1327 = _1170;
        _1328 = _1185;
        _1329 = _1184;
        _1330 = _1183;
        _1331 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)));
        _1332 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)));
        _1333 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
    }
    else
    {
        _1319 = _1044;
        _1320 = _1044;
        _1321 = _1044;
        _1322 = _1044;
        _1323 = _1044;
        _1324 = _1044;
        _1325 = _1044;
        _1326 = _1044;
        _1327 = _1044;
        _1328 = _1044;
        _1329 = _1044;
        _1330 = _1044;
        _1331 = 0.0;
        _1332 = 0.0;
        _1333 = 0.0;
    }
    float _1343 = (cbModelParam._m0[1u].x * (_1331 - _1056)) + _1056;
    float _1344 = (cbModelParam._m0[1u].x * (_1332 - _1057)) + _1057;
    float _1345 = (cbModelParam._m0[1u].x * (_1333 - _1058)) + _1058;
    float _1366 = fma(_1345, cbSceneParam._m0[89u].z, fma(_1344, cbSceneParam._m0[89u].y, _1343 * cbSceneParam._m0[89u].x));
    float _1369 = fma(_1345, cbSceneParam._m0[90u].z, fma(_1344, cbSceneParam._m0[90u].y, _1343 * cbSceneParam._m0[90u].x));
    float _1372 = fma(_1345, cbSceneParam._m0[91u].z, fma(_1344, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1343));
    float _1387 = _694 * (-0.5);
    float _1388 = _695 * (-0.5);
    float _1389 = _696 * (-0.5);
    float _1390 = dot(vec4(_1387, _1388, _1389, 1.0), vec4(_1321, _1324, _1327, _1330));
    float _1393 = dot(vec4(_1387, _1388, _1389, 1.0), vec4(_1320, _1323, _1326, _1329));
    float _1396 = dot(vec4(_1387, _1388, _1389, 1.0), vec4(_1319, _1322, _1325, _1328));
    float _1430;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1403 = dot(vec4(_1387, _1388, _1389, 1.0), vec4(_1043, _1047, _1050, _1053));
        float _1407 = dot(vec4(_1387, _1388, _1389, 1.0), vec4(_1045, _1048, _1051, _1054));
        float _1411 = dot(vec4(_1387, _1388, _1389, 1.0), vec4(_1046, _1049, _1052, _1055));
        float _1418 = dot(vec4(cbModelParam._m0[39u]), vec4(_1387, _1388, _1389, 1.0));
        _1430 = dot(vec3(isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)), isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)), isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1418) ? 0.0 : (isnan(0.0) ? _1418 : max(0.0, _1418))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1430 = 1.0;
    }
    float _1441;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1432 = dot(vec4(cbModelParam._m0[40u]), vec4(_1387, _1388, _1389, 1.0));
        _1441 = dot(vec3(isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)), isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)), isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1432) ? 0.0 : (isnan(0.0) ? _1432 : max(0.0, _1432))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1441 = 1.0;
    }
    float _1445 = (_1441 * cbModelParam._m0[1u].x) + (_1430 * (1.0 - cbModelParam._m0[1u].x));
    float _1454 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1534;
    float _1536;
    float _1538;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1501 = fma(_775, cbModelParam._m0[13u].z, fma(_771, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _767)) + cbModelParam._m0[13u].w;
        float _1505 = fma(_775, cbModelParam._m0[14u].z, fma(_771, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _767)) + cbModelParam._m0[14u].w;
        float _1509 = fma(_775, cbModelParam._m0[15u].z, fma(_771, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _767)) + cbModelParam._m0[15u].w;
        float _1512 = fma(_745, cbModelParam._m0[13u].z, fma(_744, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _743));
        float _1515 = fma(_745, cbModelParam._m0[14u].z, fma(_744, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _743));
        float _1518 = fma(_745, cbModelParam._m0[15u].z, fma(_744, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _743));
        float _1544;
        if (_1512 > 0.0)
        {
            _1544 = abs((1.0 - _1501) / _1512);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1512 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1501 + 1.0) / _1512);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1544 = frontier_phi_54_52_ladder;
        }
        float _1840;
        if (_1515 > 0.0)
        {
            _1840 = abs((1.0 - _1505) / _1515);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1505 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _1840 = frontier_phi_63_59_ladder;
        }
        float _2142;
        if (_1518 > 0.0)
        {
            _2142 = abs((1.0 - _1509) / _1518);
        }
        else
        {
            float frontier_phi_77_70_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_77_70_ladder = abs((_1509 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_77_70_ladder = 5000.0;
            }
            _2142 = frontier_phi_77_70_ladder;
        }
        float _2144 = isnan(_1840) ? _1544 : (isnan(_1544) ? _1840 : min(_1544, _1840));
        float _2145 = isnan(_2142) ? _2144 : (isnan(_2144) ? _2142 : min(_2144, _2142));
        float _2149 = (_2145 * _1512) + _1501;
        float _2150 = (_2145 * _1515) + _1505;
        float _2151 = (_2145 * _1518) + _1509;
        float _2152 = _2145 * 9.9999997473787516355514526367188e-05;
        float _2153 = (-1.0) - _2152;
        float _2155 = _2152 + 1.0;
        float frontier_phi_53_77_ladder;
        float frontier_phi_53_77_ladder_1;
        float frontier_phi_53_77_ladder_2;
        if ((_2151 > _2155) || ((_2151 < _2153) || ((_2150 > _2155) || ((_2150 < _2153) || ((_2149 < _2153) || (_2149 > _2155))))))
        {
            frontier_phi_53_77_ladder = 0.0;
            frontier_phi_53_77_ladder_1 = 0.0;
            frontier_phi_53_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2274 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2151, cbModelParam._m0[9u].z, fma(_2150, cbModelParam._m0[9u].y, _2149 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2151, cbModelParam._m0[10u].z, fma(_2150, cbModelParam._m0[10u].y, _2149 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2151, cbModelParam._m0[11u].z, fma(_2150, cbModelParam._m0[11u].y, _2149 * cbModelParam._m0[11u].x))), _1454);
            frontier_phi_53_77_ladder = _2274.x * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_1 = _2274.y * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_2 = _2274.z * cbModelParam._m0[1u].y;
        }
        _1534 = frontier_phi_53_77_ladder;
        _1536 = frontier_phi_53_77_ladder_1;
        _1538 = frontier_phi_53_77_ladder_2;
    }
    else
    {
        vec4 _1522 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_743, _744, _745), _1454);
        _1534 = _1522.x * cbModelParam._m0[1u].y;
        _1536 = _1522.y * cbModelParam._m0[1u].y;
        _1538 = _1522.z * cbModelParam._m0[1u].y;
    }
    float _1541 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1629;
    float _1631;
    float _1633;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1593 = fma(_775, cbModelParam._m0[21u].z, fma(_771, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _767)) + cbModelParam._m0[21u].w;
        float _1597 = fma(_775, cbModelParam._m0[22u].z, fma(_771, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _767)) + cbModelParam._m0[22u].w;
        float _1601 = fma(_775, cbModelParam._m0[23u].z, fma(_771, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _767)) + cbModelParam._m0[23u].w;
        float _1604 = fma(_745, cbModelParam._m0[21u].z, fma(_744, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _743));
        float _1607 = fma(_745, cbModelParam._m0[22u].z, fma(_744, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _743));
        float _1610 = fma(_745, cbModelParam._m0[23u].z, fma(_744, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _743));
        float _1845;
        if (_1604 > 0.0)
        {
            _1845 = abs((1.0 - _1593) / _1604);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1593 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _1845 = frontier_phi_65_61_ladder;
        }
        float _2168;
        if (_1607 > 0.0)
        {
            _2168 = abs((1.0 - _1597) / _1607);
        }
        else
        {
            float frontier_phi_79_72_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_79_72_ladder = abs((_1597 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_79_72_ladder = 5000.0;
            }
            _2168 = frontier_phi_79_72_ladder;
        }
        float _2334;
        if (_1610 > 0.0)
        {
            _2334 = abs((1.0 - _1601) / _1610);
        }
        else
        {
            float frontier_phi_93_88_ladder;
            if (_1610 < 0.0)
            {
                frontier_phi_93_88_ladder = abs((_1601 + 1.0) / _1610);
            }
            else
            {
                frontier_phi_93_88_ladder = 5000.0;
            }
            _2334 = frontier_phi_93_88_ladder;
        }
        float _2336 = isnan(_2168) ? _1845 : (isnan(_1845) ? _2168 : min(_1845, _2168));
        float _2337 = isnan(_2334) ? _2336 : (isnan(_2336) ? _2334 : min(_2336, _2334));
        float _2341 = (_2337 * _1604) + _1593;
        float _2342 = (_2337 * _1607) + _1597;
        float _2343 = (_2337 * _1610) + _1601;
        float _2344 = _2337 * 9.9999997473787516355514526367188e-05;
        float _2345 = (-1.0) - _2344;
        float _2347 = _2344 + 1.0;
        float frontier_phi_62_93_ladder;
        float frontier_phi_62_93_ladder_1;
        float frontier_phi_62_93_ladder_2;
        if ((_2343 > _2347) || ((_2343 < _2345) || ((_2342 > _2347) || ((_2342 < _2345) || ((_2341 < _2345) || (_2341 > _2347))))))
        {
            frontier_phi_62_93_ladder = 0.0;
            frontier_phi_62_93_ladder_1 = 0.0;
            frontier_phi_62_93_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2526 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2343, cbModelParam._m0[17u].z, fma(_2342, cbModelParam._m0[17u].y, _2341 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2343, cbModelParam._m0[18u].z, fma(_2342, cbModelParam._m0[18u].y, _2341 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2343, cbModelParam._m0[19u].z, fma(_2342, cbModelParam._m0[19u].y, _2341 * cbModelParam._m0[19u].x))), _1541);
            frontier_phi_62_93_ladder = _2526.z * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_1 = _2526.y * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_2 = _2526.x * cbModelParam._m0[1u].z;
        }
        _1629 = frontier_phi_62_93_ladder_2;
        _1631 = frontier_phi_62_93_ladder_1;
        _1633 = frontier_phi_62_93_ladder;
    }
    else
    {
        vec4 _1613 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_743, _744, _745), _1541);
        _1629 = _1613.x * cbModelParam._m0[1u].z;
        _1631 = _1613.y * cbModelParam._m0[1u].z;
        _1633 = _1613.z * cbModelParam._m0[1u].z;
    }
    float _1645 = _742 * 0.01200000010430812835693359375;
    float _1647 = _1645 * ((cbModelParam._m0[1u].w * (_1629 - _1534)) + _1534);
    float _1648 = _1645 * ((cbModelParam._m0[1u].w * (_1631 - _1536)) + _1536);
    float _1649 = _1645 * ((cbModelParam._m0[1u].w * (_1633 - _1538)) + _1538);
    float _1652 = fma(_1649, cbSceneParam._m0[89u].z, fma(_1648, cbSceneParam._m0[89u].y, _1647 * cbSceneParam._m0[89u].x));
    float _1655 = fma(_1649, cbSceneParam._m0[90u].z, fma(_1648, cbSceneParam._m0[90u].y, _1647 * cbSceneParam._m0[90u].x));
    float _1658 = fma(_1649, cbSceneParam._m0[91u].z, fma(_1648, cbSceneParam._m0[91u].y, _1647 * cbSceneParam._m0[91u].x));
    uvec4 _1669 = floatBitsToUint(cbInstanceData._m0[_716 + 5u]);
    uint _1671 = _1669.x * 14u;
    uint _1672 = _1671 + 13u;
    float _1677 = _742 + (-1.0);
    float _1680 = (cbLight._m0[_1672].x * _1677) + 1.0;
    float _1681 = (cbLight._m0[_1672].y * _1677) + 1.0;
    uint _1682 = _1671 + 5u;
    float _1688 = isnan(1.0) ? _1681 : (isnan(_1681) ? 1.0 : min(_1681, 1.0));
    uint _1692 = _1671 + 4u;
    float _1698 = isnan(1.0) ? _1680 : (isnan(_1680) ? 1.0 : min(_1680, 1.0));
    uint _1702 = _1671 | 1u;
    float _1713 = dot(vec3(cbLight._m0[_1671].xyz), vec3(0.0));
    float _1716 = dot(vec3(cbLight._m0[_1702].xyz), vec3(0.0));
    float _3450 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
    float _3461 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
    float _1721 = (isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0))) * 0.3183098733425140380859375;
    float _1723 = (isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0))) * 0.3183098733425140380859375;
    float _1730 = ((cbLight._m0[_1682].x * _1688) * _1723) + ((cbLight._m0[_1692].x * _1698) * _1721);
    float _1731 = ((_1688 * cbLight._m0[_1682].y) * _1723) + ((_1698 * cbLight._m0[_1692].y) * _1721);
    float _1732 = ((_1688 * cbLight._m0[_1682].z) * _1723) + ((_1698 * cbLight._m0[_1692].z) * _1721);
    uint _1733 = _1671 + 8u;
    float _1739 = cbLight._m0[_1671].x + _694;
    float _1740 = cbLight._m0[_1671].y + _695;
    float _1741 = cbLight._m0[_1671].z + _696;
    float _1745 = inversesqrt(dot(vec3(_1739, _1740, _1741), vec3(_1739, _1740, _1741)));
    float _1749 = dot(vec3(0.0), vec3(cbLight._m0[_1671].xyz));
    float _3472 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
    float _1752 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
    float _1753 = dot(vec3(0.0), vec3(_694, _695, _696));
    float _3483 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
    float _1756 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
    float _1757 = dot(vec3(cbLight._m0[_1671].xyz), vec3(_1739 * _1745, _1740 * _1745, _1741 * _1745));
    float _3494 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _1768 = (exp2(log2(1.0 - (isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1774 = (0.5 / ((_1752 + 9.9999999392252902907785028219223e-09) + _1756)) * _1752;
    float _3505 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
    float _1776 = (isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0))) * 0.31831014156341552734375;
    uint _1787 = _1671 + 9u;
    float _1793 = cbLight._m0[_1702].x + _694;
    float _1794 = cbLight._m0[_1702].y + _695;
    float _1795 = cbLight._m0[_1702].z + _696;
    float _1799 = inversesqrt(dot(vec3(_1793, _1794, _1795), vec3(_1793, _1794, _1795)));
    float _1803 = dot(vec3(0.0), vec3(cbLight._m0[_1702].xyz));
    float _3516 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
    float _1806 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
    float _1807 = dot(vec3(cbLight._m0[_1702].xyz), vec3(_1793 * _1799, _1794 * _1799, _1795 * _1799));
    float _3527 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
    float _1816 = (exp2(log2(1.0 - (isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1820 = (0.5 / ((_1806 + 9.9999999392252902907785028219223e-09) + _1756)) * _1806;
    float _3538 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1822 = (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) * 0.31831014156341552734375;
    float _1832 = (((_1816 * cbLight._m0[_1787].x) * _1822) * _1688) + (((_1768 * cbLight._m0[_1733].x) * _1776) * _1698);
    float _1833 = (((_1816 * cbLight._m0[_1787].y) * _1822) * _1688) + (((_1768 * cbLight._m0[_1733].y) * _1776) * _1698);
    float _1834 = (((_1816 * cbLight._m0[_1787].z) * _1822) * _1688) + (((_1768 * cbLight._m0[_1733].z) * _1776) * _1698);
    float _1950;
    float _1952;
    float _1954;
    float _1956;
    float _1958;
    float _1960;
    if (_1669.y == 0u)
    {
        float _1890 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1891 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1890;
        float _1892 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1890;
        float _1893 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1890;
        uvec4 _1905 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1906 = _1905.x;
        uint _1917 = uint((float(_1905.y) * floor(float(uint(cbSceneParam._m0[85u].y * _703) / _1906))) + floor(float(uint(cbSceneParam._m0[85u].x * _702) / _1906)));
        float _1927 = (log2(_1893 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1928 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
        uint _1931 = uint(isnan(14.0) ? _1928 : (isnan(_1928) ? 14.0 : min(_1928, 14.0)));
        uvec4 _1936 = texelFetch(g_lightClusterGridBuffer, int(((_1931 << 2u) + (_1917 << 6u)) >> 2u));
        uint _1937 = _1936.x;
        uint _1938 = _1905.z;
        float _2028;
        float _2030;
        float _2032;
        float _2034;
        float _2036;
        float _2038;
        if (((((1u << ((_1938 >> 4u) & 15u)) + 4294967295u) & _1937) == 0u) || ((_1938 & 240u) == 0u))
        {
            _2028 = 0.0;
            _2030 = 0.0;
            _2032 = 0.0;
            _2034 = 0.0;
            _2036 = 0.0;
            _2038 = 0.0;
        }
        else
        {
            float _2029;
            float _2031;
            float _2033;
            float _2035;
            float _2037;
            float _2039;
            float _2202 = 0.0;
            float _2203 = 0.0;
            float _2204 = 0.0;
            float _2205 = 0.0;
            float _2206 = 0.0;
            float _2207 = 0.0;
            uint _2208 = 0u;
            uint _2217;
            bool _2218;
            for (;;)
            {
                _2217 = texelFetch(g_lightClassification, int((((_1931 << 5u) + (_1917 << 9u)) + (_2208 << 2u)) >> 2u)).x;
                _2218 = _2217 == 0u;
                float frontier_phi_90_pred;
                float frontier_phi_90_pred_1;
                float frontier_phi_90_pred_2;
                float frontier_phi_90_pred_3;
                float frontier_phi_90_pred_4;
                float frontier_phi_90_pred_5;
                if (_2218)
                {
                    frontier_phi_90_pred = _2207;
                    frontier_phi_90_pred_1 = _2202;
                    frontier_phi_90_pred_2 = _2203;
                    frontier_phi_90_pred_3 = _2204;
                    frontier_phi_90_pred_4 = _2205;
                    frontier_phi_90_pred_5 = _2206;
                }
                else
                {
                    float _2377;
                    float _2378;
                    float _2379;
                    float _2380;
                    float _2381;
                    float _2382;
                    uint _2383;
                    _2377 = _2202;
                    _2378 = _2203;
                    _2379 = _2204;
                    _2380 = _2205;
                    _2381 = _2206;
                    _2382 = _2207;
                    _2383 = _2217;
                    float _2283;
                    float _2284;
                    float _2285;
                    float _2286;
                    float _2287;
                    float _2288;
                    for (;;)
                    {
                        uint _2387 = uint(findLSB(_2383)) + (_2208 << 5u);
                        uint _2384 = (_2383 + 4294967295u) & _2383;
                        uint _2389 = _2387 * 48u;
                        vec4 _2403 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2389)).x, texelFetch(g_PointLightRenderingBuffer, int(_2389 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2389 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2389 + 3u)).x));
                        uint _2409 = (_2387 * 48u) + 4u;
                        vec4 _2422 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2409)).x, texelFetch(g_PointLightRenderingBuffer, int(_2409 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2409 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2409 + 3u)).x));
                        uint _2428 = (_2387 * 48u) + 8u;
                        vec3 _2439 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2428)).x, texelFetch(g_PointLightRenderingBuffer, int(_2428 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2428 + 2u)).x));
                        float _2443 = _2403.x - _1891;
                        float _2444 = _2403.y - _1892;
                        float _2445 = _2403.z - _1893;
                        float _2446 = dot(vec3(_2443, _2444, _2445), vec3(_2443, _2444, _2445));
                        float _2449 = inversesqrt(_2446);
                        float _2458 = 1.0 - (_2446 * _2403.w);
                        float _3559 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
                        float _2459 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
                        float _2460 = sqrt(_2446) * _2422.w;
                        float _2463 = 1.39999997615814208984375 / (_2460 + 1.39999997615814208984375);
                        float _2464 = _2463 * _2463;
                        float _2467 = ((1.0 - _2464) * dot(vec3(0.0), vec3(_2449 * _2443, _2449 * _2444, _2449 * _2445))) + _2464;
                        float _2470 = _2460 * _2460;
                        float _2474 = ((isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0))) * _2459) / ((_2470 * 0.699999988079071044921875) + 1.0);
                        float _2478 = (-0.0) - _1891;
                        float _2479 = (-0.0) - _1892;
                        float _2480 = (-0.0) - _1893;
                        float _2484 = inversesqrt(dot(vec3(_2478, _2479, _2480), vec3(_2478, _2479, _2480)));
                        float _2488 = dot(vec3(0.0), vec3(_2484 * _2478, _2484 * _2479, _2484 * _2480));
                        float _3575 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
                        float _3586 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
                        float _2492 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
                        float _2496 = (0.5 / (((isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0))) + 9.9999999392252902907785028219223e-09) + _2492)) * _2492;
                        float _3597 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
                        float _2505 = (((isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) * 3.1415927410125732421875) / ((_2470 * 2.1991131305694580078125) + 3.141590118408203125)) * _2459;
                        _2286 = (_2474 * _2422.x) + _2380;
                        _2287 = (_2474 * _2422.y) + _2381;
                        _2288 = (_2474 * _2422.z) + _2382;
                        _2283 = (_2505 * _2439.x) + _2377;
                        _2284 = (_2505 * _2439.y) + _2378;
                        _2285 = (_2505 * _2439.z) + _2379;
                        if (_2384 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2377 = _2283;
                            _2378 = _2284;
                            _2379 = _2285;
                            _2380 = _2286;
                            _2381 = _2287;
                            _2382 = _2288;
                            _2383 = _2384;
                        }
                    }
                    frontier_phi_90_pred = _2288;
                    frontier_phi_90_pred_1 = _2283;
                    frontier_phi_90_pred_2 = _2284;
                    frontier_phi_90_pred_3 = _2285;
                    frontier_phi_90_pred_4 = _2286;
                    frontier_phi_90_pred_5 = _2287;
                }
                _2039 = frontier_phi_90_pred;
                _2029 = frontier_phi_90_pred_1;
                _2031 = frontier_phi_90_pred_2;
                _2033 = frontier_phi_90_pred_3;
                _2035 = frontier_phi_90_pred_4;
                _2037 = frontier_phi_90_pred_5;
                uint _2209 = _2208 + 1u;
                if (_2209 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2202 = _2029;
                    _2203 = _2031;
                    _2204 = _2033;
                    _2205 = _2035;
                    _2206 = _2037;
                    _2207 = _2039;
                    _2208 = _2209;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2028 = _2029;
            _2030 = _2031;
            _2032 = _2033;
            _2034 = _2035;
            _2036 = _2037;
            _2038 = _2039;
        }
        uvec4 _2042 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2043 = _2042.z;
        uint _2045 = (_2043 >> 8u) & 15u;
        float _2173;
        float _2175;
        float _2177;
        float _2179;
        float _2181;
        float _2183;
        if (((4294967295u << _2045) & _1937) == 0u)
        {
            _2173 = _2028;
            _2175 = _2030;
            _2177 = _2032;
            _2179 = _2034;
            _2181 = _2036;
            _2183 = _2038;
        }
        else
        {
            float _2198 = inversesqrt(dot(vec3(_1891, _1892, _1893), vec3(_1891, _1892, _1893)));
            float frontier_phi_81_82_ladder;
            float frontier_phi_81_82_ladder_1;
            float frontier_phi_81_82_ladder_2;
            float frontier_phi_81_82_ladder_3;
            float frontier_phi_81_82_ladder_4;
            float frontier_phi_81_82_ladder_5;
            if (_2045 < ((_2043 >> 12u) & 15u))
            {
                float _2174;
                float _2176;
                float _2178;
                float _2180;
                float _2182;
                float _2184;
                float _2360 = _2028;
                float _2361 = _2030;
                float _2362 = _2032;
                float _2363 = _2034;
                float _2364 = _2036;
                float _2365 = _2038;
                uint _2366 = _2045;
                uint _2375;
                bool _2376;
                for (;;)
                {
                    _2375 = texelFetch(g_lightClassification, int((((_1931 << 5u) + (_1917 << 9u)) + (_2366 << 2u)) >> 2u)).x;
                    _2376 = _2375 == 0u;
                    float frontier_phi_99_pred;
                    float frontier_phi_99_pred_1;
                    float frontier_phi_99_pred_2;
                    float frontier_phi_99_pred_3;
                    float frontier_phi_99_pred_4;
                    float frontier_phi_99_pred_5;
                    if (_2376)
                    {
                        frontier_phi_99_pred = _2363;
                        frontier_phi_99_pred_1 = _2362;
                        frontier_phi_99_pred_2 = _2361;
                        frontier_phi_99_pred_3 = _2360;
                        frontier_phi_99_pred_4 = _2365;
                        frontier_phi_99_pred_5 = _2364;
                    }
                    else
                    {
                        float _2531;
                        float _2532;
                        float _2533;
                        float _2534;
                        float _2535;
                        float _2536;
                        float _2780;
                        float _2781;
                        float _2782;
                        float _2783;
                        float _2784;
                        float _2785;
                        float _2544 = _2360;
                        float _2545 = _2361;
                        float _2546 = _2362;
                        float _2547 = _2363;
                        float _2548 = _2364;
                        float _2549 = _2365;
                        uint _2550 = _2375;
                        uint _2551;
                        vec4 _2576;
                        float _2577;
                        vec4 _2592;
                        vec3 _2604;
                        vec4 _2619;
                        vec4 _2634;
                        float _2680;
                        bool _2681;
                        for (;;)
                        {
                            uint _2561 = ((_2366 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2550));
                            _2551 = (_2550 + 4294967295u) & _2550;
                            uint _2563 = _2561 * 40u;
                            _2576 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2563)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2563 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2563 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2563 + 3u)).x));
                            _2577 = _2576.w;
                            uint _2579 = (_2561 * 40u) + 4u;
                            _2592 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2579 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2579 + 3u)).x));
                            uint _2594 = (_2561 * 40u) + 8u;
                            _2604 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2594)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2594 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2594 + 2u)).x));
                            uint _2606 = (_2561 * 40u) + 16u;
                            _2619 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2606)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2606 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2606 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2606 + 3u)).x));
                            uint _2621 = (_2561 * 40u) + 20u;
                            _2634 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2621 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2621 + 3u)).x));
                            uint _2636 = (_2561 * 40u) + 24u;
                            vec4 _2649 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2636)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2636 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2636 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2636 + 3u)).x));
                            uint _2655 = (_2561 * 40u) + 28u;
                            vec4 _2668 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2655)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2655 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2655 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2655 + 3u)).x));
                            _2680 = fma(_1893, _2668.z, fma(_1892, _2668.y, _2668.x * _1891)) + _2668.w;
                            _2681 = !((fma(_1893, _2649.z, fma(_1892, _2649.y, _2649.x * _1891)) + _2649.w) <= 0.0);
                            float frontier_phi_105_pred;
                            float frontier_phi_105_pred_1;
                            float frontier_phi_105_pred_2;
                            float frontier_phi_105_pred_3;
                            float frontier_phi_105_pred_4;
                            float frontier_phi_105_pred_5;
                            if (_2681)
                            {
                                float _2708 = _2576.x - _1891;
                                float _2709 = _2576.y - _1892;
                                float _2710 = _2576.z - _1893;
                                float _2711 = dot(vec3(_2708, _2709, _2710), vec3(_2708, _2709, _2710));
                                float _2714 = inversesqrt(_2711);
                                float _2715 = _2714 * _2708;
                                float _2716 = _2714 * _2709;
                                float _2717 = _2714 * _2710;
                                float _2721 = 1.0 - (_2711 / (_2577 * _2577));
                                float _3608 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
                                float _2722 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
                                float _2726 = sqrt(_2711) * _2592.w;
                                float _2728 = 1.39999997615814208984375 / (_2726 + 1.39999997615814208984375);
                                float _2729 = _2728 * _2728;
                                float _2730 = 1.0 - _2729;
                                float _2732 = (_2730 * dot(vec3(_2715, _2716, _2717), vec3(0.0))) + _2729;
                                float _2735 = _2726 * _2726;
                                float _2739 = (fma(_1893, _2619.z, fma(_1892, _2619.y, _2619.x * _1891)) + _2619.w) / _2680;
                                float _2740 = (fma(_1893, _2634.z, fma(_1892, _2634.y, _2634.x * _1891)) + _2634.w) / _2680;
                                float _2744 = 1.0 - dot(vec2(_2739, _2740), vec2(_2739, _2740));
                                float _3624 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
                                float _2745 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
                                float _2746 = _2745 * (((isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0))) * _2722) / ((_2735 * 0.699999988079071044921875) + 1.0));
                                float _2756 = dot(vec3(0.0), vec3((-0.0) - (_1891 * _2198), (-0.0) - (_1892 * _2198), (-0.0) - (_1893 * _2198)));
                                float _3635 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
                                float _2764 = (_2730 * dot(vec3(0.0), vec3(_2715, _2716, _2717))) + _2729;
                                float _3646 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
                                float _2765 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
                                float _2769 = (0.5 / (((isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) + 9.9999999392252902907785028219223e-09) + _2765)) * _2765;
                                float _3657 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
                                float _2776 = (_2745 * _2722) * (((isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))) * 3.1415927410125732421875) / ((_2735 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_105_pred = _2746 * _2592.z;
                                frontier_phi_105_pred_1 = _2776 * _2604.x;
                                frontier_phi_105_pred_2 = _2776 * _2604.y;
                                frontier_phi_105_pred_3 = _2776 * _2604.z;
                                frontier_phi_105_pred_4 = _2746 * _2592.x;
                                frontier_phi_105_pred_5 = _2746 * _2592.y;
                            }
                            else
                            {
                                frontier_phi_105_pred = 0.0;
                                frontier_phi_105_pred_1 = 0.0;
                                frontier_phi_105_pred_2 = 0.0;
                                frontier_phi_105_pred_3 = 0.0;
                                frontier_phi_105_pred_4 = 0.0;
                                frontier_phi_105_pred_5 = 0.0;
                            }
                            _2785 = frontier_phi_105_pred;
                            _2780 = frontier_phi_105_pred_1;
                            _2781 = frontier_phi_105_pred_2;
                            _2782 = frontier_phi_105_pred_3;
                            _2783 = frontier_phi_105_pred_4;
                            _2784 = frontier_phi_105_pred_5;
                            _2534 = _2783 + _2547;
                            _2535 = _2784 + _2548;
                            _2536 = _2785 + _2549;
                            _2531 = _2780 + _2544;
                            _2532 = _2781 + _2545;
                            _2533 = _2782 + _2546;
                            if (_2551 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2544 = _2531;
                                _2545 = _2532;
                                _2546 = _2533;
                                _2547 = _2534;
                                _2548 = _2535;
                                _2549 = _2536;
                                _2550 = _2551;
                                continue;
                            }
                        }
                        frontier_phi_99_pred = _2534;
                        frontier_phi_99_pred_1 = _2533;
                        frontier_phi_99_pred_2 = _2532;
                        frontier_phi_99_pred_3 = _2531;
                        frontier_phi_99_pred_4 = _2536;
                        frontier_phi_99_pred_5 = _2535;
                    }
                    _2180 = frontier_phi_99_pred;
                    _2178 = frontier_phi_99_pred_1;
                    _2176 = frontier_phi_99_pred_2;
                    _2174 = frontier_phi_99_pred_3;
                    _2184 = frontier_phi_99_pred_4;
                    _2182 = frontier_phi_99_pred_5;
                    uint _2367 = _2366 + 1u;
                    if (_2367 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2360 = _2174;
                        _2361 = _2176;
                        _2362 = _2178;
                        _2363 = _2180;
                        _2364 = _2182;
                        _2365 = _2184;
                        _2366 = _2367;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_81_82_ladder = _2184;
                frontier_phi_81_82_ladder_1 = _2180;
                frontier_phi_81_82_ladder_2 = _2178;
                frontier_phi_81_82_ladder_3 = _2176;
                frontier_phi_81_82_ladder_4 = _2174;
                frontier_phi_81_82_ladder_5 = _2182;
            }
            else
            {
                frontier_phi_81_82_ladder = _2038;
                frontier_phi_81_82_ladder_1 = _2034;
                frontier_phi_81_82_ladder_2 = _2032;
                frontier_phi_81_82_ladder_3 = _2030;
                frontier_phi_81_82_ladder_4 = _2028;
                frontier_phi_81_82_ladder_5 = _2036;
            }
            _2173 = frontier_phi_81_82_ladder_4;
            _2175 = frontier_phi_81_82_ladder_3;
            _2177 = frontier_phi_81_82_ladder_2;
            _2179 = frontier_phi_81_82_ladder_1;
            _2181 = frontier_phi_81_82_ladder_5;
            _2183 = frontier_phi_81_82_ladder;
        }
        float _2188 = isnan(1.0) ? _742 : (isnan(_742) ? 1.0 : min(_742, 1.0));
        _1950 = (_2188 * _2179) + _1730;
        _1952 = (_2188 * _2181) + _1731;
        _1954 = (_2188 * _2183) + _1732;
        _1956 = ((_2173 * 0.039999999105930328369140625) * _2188) + _1832;
        _1958 = ((_2175 * 0.039999999105930328369140625) * _2188) + _1833;
        _1960 = ((_2177 * 0.039999999105930328369140625) * _2188) + _1834;
    }
    else
    {
        _1950 = _1730;
        _1952 = _1731;
        _1954 = _1732;
        _1956 = _1832;
        _1958 = _1833;
        _1960 = _1834;
    }
    float _3673 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _3684 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _3695 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _1977 = ((isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * (_1950 + ((isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0))) * _742))) + ((_1956 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _1445)) * cbPerFrame._m0[3u].x);
    float _1978 = ((isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * (_1952 + ((isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0))) * _742))) + ((_1958 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _1445)) * cbPerFrame._m0[3u].x);
    float _1979 = ((isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * (_1954 + ((isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0))) * _742))) + ((_1960 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _1445)) * cbPerFrame._m0[3u].x);
    uint _1983 = _716 + 6u;
    float _1991 = _702 / cbSceneParam._m0[86u].x;
    float _1992 = _703 / cbSceneParam._m0[86u].y;
    vec4 _2006 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1991, _1992, (log2((isnan(cbSceneParam._m0[77u].w) ? _689 : (isnan(_689) ? cbSceneParam._m0[77u].w : min(_689, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2008 = _2006.x;
    float _2009 = _2006.y;
    float _2010 = _2006.z;
    float _2011 = _2006.w;
    float _2091;
    float _2093;
    float _2095;
    float _2097;
    if (_689 > cbSceneParam._m0[78u].w)
    {
        float _2053 = isnan(_689) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _689 : min(cbSceneParam._m0[80u].w, _689));
        float _2054 = _2053 / _689;
        float _2065 = _2054 * _261;
        float _2066 = _262 * _2054;
        float _2067 = (-0.0) - _2066;
        float _2068 = _2054 * _263;
        float _2070 = (cbSceneParam._m0[77u].w * _2067) / _2053;
        float _2071 = _2070 + cbSceneParam._m0[79u].w;
        float _2072 = cbSceneParam._m0[79u].w - _2066;
        float _2078 = sqrt(((_2065 * _2065) + (_2066 * _2066)) + (_2068 * _2068));
        float _2081 = (1.0 - (cbSceneParam._m0[77u].w / _2053)) * _2078;
        float _2087 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2089 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2296;
        if (abs((_2067 - _2070) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2296 = ((((_2071 > 0.0) ? exp2(_2087 * _2071) : (2.0 - exp2(_2089 * _2071))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2081;
        }
        else
        {
            float _2231 = 1.0 / cbSceneParam._m0[80u].x;
            float _2232 = isnan(_2072) ? _2071 : (isnan(_2071) ? _2072 : max(_2071, _2072));
            float _2233 = isnan(_2072) ? _2071 : (isnan(_2071) ? _2072 : min(_2071, _2072));
            float _2242 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : min(_2232, 0.0));
            float _2243 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : min(_2233, 0.0));
            _2296 = ((abs(_2078 / _2067) * cbSceneParam._m0[80u].y) * ((((_2242 - _2243) * 2.0) - ((exp2(_2087 * (isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0)))) - exp2(_2087 * (isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0))))) * _2231)) - ((exp2(_2089 * _2242) - exp2(_2089 * _2243)) * _2231))) + (_2081 * cbSceneParam._m0[80u].z);
        }
        vec4 _2298 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1991, _1992, 1.0), 0.0);
        float _2307 = exp2((_2296 * (-1.44269502162933349609375)) * (1.0 - _2298.w));
        float _2308 = log2(_2307);
        float _2324 = log2(_2011);
        _2091 = (exp2(_2324 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2308 * cbSceneParam._m0[78u].x)) * _2298.x) / cbSceneParam._m0[78u].x)) + _2008;
        _2093 = (exp2(_2324 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2308 * cbSceneParam._m0[78u].y)) * _2298.y) / cbSceneParam._m0[78u].y)) + _2009;
        _2095 = (exp2(_2324 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2308 * cbSceneParam._m0[78u].z)) * _2298.z) / cbSceneParam._m0[78u].z)) + _2010;
        _2097 = _2307 * _2011;
    }
    else
    {
        _2091 = _2008;
        _2093 = _2009;
        _2095 = _2010;
        _2097 = _2011;
    }
    float _2109 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2110 = _2109 == 3.0;
    float _2112 = log2(_2097);
    float _2119 = exp2(_2112 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0)));
    float _2120 = exp2(_2112 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0)));
    float _2121 = exp2(_2112 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0)));
    float _2130 = (_2109 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2130 * (_2110 ? _2119 : (_2119 + (cbSceneParam._m0[72u].w * _2091)));
    SV_Target.y = _2130 * (_2110 ? _2120 : (_2120 + (cbSceneParam._m0[72u].w * _2093)));
    SV_Target.z = _2130 * (_2110 ? _2121 : (_2121 + (cbSceneParam._m0[72u].w * _2095)));
    SV_Target.w = cbInstanceData._m0[_1983].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1983].w;
}


