#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _991;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _278 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _281 = _278.x;
    vec4 _299 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _316 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _281) + cbMtdParam._m0[12u].x) * _299.x;
    float _318 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _281) + cbMtdParam._m0[12u].y) * _299.y;
    float _320 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _281) + cbMtdParam._m0[12u].z) * _299.z;
    vec4 _341 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _377 = cbMtdParam._m0[21u].w + _263;
    float _378 = cbMtdParam._m0[22u].x + _264;
    float _379 = cbMtdParam._m0[22u].y + _265;
    float _393 = (-0.0) - dot(vec3(_377, _378, _379), vec3(_192, _193, _194));
    float _394 = (-0.0) - dot(vec3(_377, _378, _379), vec3(_206, _207, _208));
    float _395 = (-0.0) - dot(vec3(_377, _378, _379), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _399 = inversesqrt(dot(vec3(_393, _394, _395), vec3(_393, _394, _395)));
    float _402 = _399 * _395;
    float _405 = ((_399 * _393) + ((cbMtdParam._m0[19u].w * _281) * ((_341.x * 2.0) + (-1.0)))) * cbMtdParam._m0[18u].z;
    float _406 = ((_399 * _394) + ((cbMtdParam._m0[20u].x * _281) * ((_341.y * 2.0) + (-1.0)))) * cbMtdParam._m0[18u].y;
    float _407 = fract(TEXCOORD.x);
    float _408 = fract(TEXCOORD.y);
    float _414;
    if (_405 > 0.0)
    {
        _414 = (1.0 - _407) / _405;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_405 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _407) / _405;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _414 = frontier_phi_3_2_ladder;
    }
    float _422;
    if (_406 > 0.0)
    {
        _422 = (1.0 - _408) / _406;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_406 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _408) / _406;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _422 = frontier_phi_7_6_ladder;
    }
    float _426 = (_402 > 0.0) ? (cbMtdParam._m0[15u].x / _402) : 5000.0;
    float _427 = isnan(_422) ? _414 : (isnan(_414) ? _422 : min(_414, _422));
    float _428 = isnan(_426) ? _427 : (isnan(_427) ? _426 : min(_427, _426));
    float _432 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _439 = ((_428 * _402) + _432) / _432;
    vec4 _463 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * ((((((_407 + (-0.5)) + (_428 * _405)) / _439) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((((((_408 + (-0.5)) + (_428 * _406)) / _439) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    vec4 _490 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _494 = _490.z;
    float _497 = (_490.x * 2.0) + (-1.0);
    float _498 = (_490.y * 2.0) + (-1.0);
    float _499 = dot(vec2(_497, _498), vec2(_497, _498));
    float _3358 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _504 = sqrt(1.0 - (isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0))));
    float _507 = fma(_504, _199, fma(_498, _206, _497 * _192));
    float _510 = fma(_504, _200, fma(_498, _207, _497 * _193));
    float _513 = fma(_504, _201, fma(_498, _208, _497 * _194));
    float _517 = inversesqrt(dot(vec3(_507, _510, _513), vec3(_507, _510, _513)));
    float _518 = _517 * _507;
    float _519 = _517 * _510;
    float _520 = _517 * _513;
    float _3369 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _521 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
    float _3380 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3391 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3402 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _540 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _544 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _545 = _263 * _544;
    float _546 = _264 * _544;
    float _547 = _265 * _544;
    float _553 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _554 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _575 = fma(_520, cbSceneParam._m0[5u].z, fma(_519, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _518));
    float _578 = fma(_520, cbSceneParam._m0[6u].z, fma(_519, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _518));
    float _581 = fma(_520, cbSceneParam._m0[7u].z, fma(_519, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _518));
    uint _594 = uint(roundEven(NORMAL.w)) * 13u;
    uint _596 = _594 + 9u;
    uint _597 = _596 + uint(cbMatDynParam._m0[0u].w);
    float _603 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0)))) * cbInstanceData._m0[_597].x;
    float _604 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0)))) * cbInstanceData._m0[_597].y;
    float _605 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0)))) * cbInstanceData._m0[_597].z;
    float _3413 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _606 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
    float _3424 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _607 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
    float _3435 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _608 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
    vec4 _617 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _553, cbSceneParam._m0[86u].y * _554));
    float _620 = _617.x * TEXCOORD.z;
    float _621 = dot(vec3(_518, _519, _520), vec3(_545, _546, _547));
    float _624 = _621 * 2.0;
    float _628 = (_624 * _518) - _545;
    float _629 = (_624 * _519) - _546;
    float _630 = (_624 * _520) - _547;
    float _634 = abs(dot(vec3(_545, _546, _547), vec3(_518, _519, _520)));
    float _3446 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _636 = sqrt(_521);
    float _649 = exp2((_636 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_636 * 3.0));
    float _681 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _685 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _689 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _990;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _717 = fma(_689, cbModelParam._m0[26u].z, fma(_685, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _681));
        float _721 = fma(_689, cbModelParam._m0[27u].z, fma(_685, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _681));
        float _725 = fma(_689, cbModelParam._m0[28u].z, fma(_685, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _681));
        float _748 = _681 + _518;
        float _749 = _685 + _519;
        float _750 = _689 + _520;
        float _760 = fma(_750, cbModelParam._m0[26u].z, fma(_749, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _748)) - _717;
        float _761 = fma(_750, cbModelParam._m0[27u].z, fma(_749, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _748)) - _721;
        float _762 = fma(_750, cbModelParam._m0[28u].z, fma(_749, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _748)) - _725;
        float _766 = inversesqrt(dot(vec3(_760, _761, _762), vec3(_760, _761, _762)));
        float _779 = ((_766 * _760) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_717 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _780 = ((_766 * _761) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_721 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _781 = ((_766 * _762) / cbModelParam._m0[34u].z) + ((((((_725 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _784 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_779, _780, _781), 0.0);
        vec4 _791 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_779, _780, _781), 0.0);
        vec4 _798 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_779, _780, _781), 0.0);
        vec4 _805 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_779, _780, _781), 0.0);
        float _818 = exp2((_784.w + (-0.5)) * 20.0) * 2.0;
        float _819 = _818 * (_784.x + (-0.5));
        float _820 = _818 * (_784.y + (-0.5));
        float _821 = _818 * (_784.z + (-0.5));
        float _828 = exp2((_791.w + (-0.5)) * 20.0) * 2.0;
        float _829 = _828 * (_791.x + (-0.5));
        float _830 = _828 * (_791.y + (-0.5));
        float _831 = _828 * (_791.z + (-0.5));
        float _838 = exp2((_798.w + (-0.5)) * 20.0) * 2.0;
        float _839 = _838 * (_798.x + (-0.5));
        float _840 = _838 * (_798.y + (-0.5));
        float _841 = _838 * (_798.z + (-0.5));
        float _848 = exp2((_805.w + (-0.5)) * 20.0) * 2.0;
        float _849 = _848 * (_805.x + (-0.5));
        float _850 = _848 * (_805.y + (-0.5));
        float _851 = _848 * (_805.z + (-0.5));
        float _852 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _853 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _854 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _855 = _819 * 0.5;
        float _856 = _829 * 0.5;
        float _857 = _839 * 0.5;
        float _858 = dot(vec3(_855, _856, _857), vec3(_855, _856, _857));
        float _863 = (_858 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_858);
        float _872 = (dot(vec3(_518, _519, _520), vec3(_863 * _855, _863 * _856, _863 * _857)) + 1.0) * 0.5;
        float _3472 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _882 = sqrt(((_856 * _856) + (_855 * _855)) + (_857 * _857)) / (_852 + 9.9999997473787516355514526367188e-06);
        float _3483 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _883 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
        float _884 = _883 * 2.0;
        float _888 = (1.0 - _883) / (_883 + 1.0);
        float _3494 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _889 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
        float _898 = ((((1.0 - _889) * (_884 + 2.0)) * exp2(log2(isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0))) * (_884 + 1.0))) + _889) * _852;
        float _899 = _820 * 0.5;
        float _900 = _830 * 0.5;
        float _901 = _840 * 0.5;
        float _902 = dot(vec3(_899, _900, _901), vec3(_899, _900, _901));
        float _907 = (_902 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_902);
        float _915 = (dot(vec3(_518, _519, _520), vec3(_907 * _899, _907 * _900, _907 * _901)) + 1.0) * 0.5;
        float _3505 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _924 = sqrt(((_900 * _900) + (_899 * _899)) + (_901 * _901)) / (_853 + 9.9999997473787516355514526367188e-06);
        float _3516 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _925 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _926 = _925 * 2.0;
        float _930 = (1.0 - _925) / (_925 + 1.0);
        float _3527 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _931 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _940 = ((((1.0 - _931) * (_926 + 2.0)) * exp2(log2(isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0))) * (_926 + 1.0))) + _931) * _853;
        float _941 = _821 * 0.5;
        float _942 = _831 * 0.5;
        float _943 = _841 * 0.5;
        float _944 = dot(vec3(_941, _942, _943), vec3(_941, _942, _943));
        float _949 = (_944 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_944);
        float _957 = (dot(vec3(_518, _519, _520), vec3(_949 * _941, _949 * _942, _949 * _943)) + 1.0) * 0.5;
        float _3538 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _966 = sqrt(((_942 * _942) + (_941 * _941)) + (_943 * _943)) / (_854 + 9.9999997473787516355514526367188e-06);
        float _3549 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _968 = _967 * 2.0;
        float _972 = (1.0 - _967) / (_967 + 1.0);
        float _3560 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _982 = ((((1.0 - _973) * (_968 + 2.0)) * exp2(log2(isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) * (_968 + 1.0))) + _973) * _854;
        _990 = _821;
        _992 = _820;
        _993 = _819;
        _994 = _831;
        _995 = _830;
        _996 = _829;
        _997 = _841;
        _998 = _840;
        _999 = _839;
        _1000 = _854;
        _1001 = _853;
        _1002 = _852;
        _1003 = cbModelParam._m0[36u].z * (isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0)));
        _1004 = cbModelParam._m0[36u].z * (isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0)));
        _1005 = cbModelParam._m0[36u].z * (isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0)));
    }
    else
    {
        _990 = _991;
        _992 = _991;
        _993 = _991;
        _994 = _991;
        _995 = _991;
        _996 = _991;
        _997 = _991;
        _998 = _991;
        _999 = _991;
        _1000 = _991;
        _1001 = _991;
        _1002 = _991;
        _1003 = 0.0;
        _1004 = 0.0;
        _1005 = 0.0;
    }
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1031 = fma(_689, cbModelParam._m0[30u].z, fma(_685, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _681));
        float _1035 = fma(_689, cbModelParam._m0[31u].z, fma(_685, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _681));
        float _1039 = fma(_689, cbModelParam._m0[32u].z, fma(_685, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _681));
        float _1062 = _681 + _518;
        float _1063 = _685 + _519;
        float _1064 = _689 + _520;
        float _1074 = fma(_1064, cbModelParam._m0[30u].z, fma(_1063, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1062)) - _1031;
        float _1075 = fma(_1064, cbModelParam._m0[31u].z, fma(_1063, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1062)) - _1035;
        float _1076 = fma(_1064, cbModelParam._m0[32u].z, fma(_1063, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1062)) - _1039;
        float _1080 = inversesqrt(dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076)));
        float _1093 = ((_1080 * _1074) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1031 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1094 = ((_1080 * _1075) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1035 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1095 = ((_1080 * _1076) / cbModelParam._m0[35u].z) + ((((((_1039 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1093, _1094, _1095), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1093, _1094, _1095), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1093, _1094, _1095), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1093, _1094, _1095), 0.0);
        float _1130 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1097.x + (-0.5));
        float _1132 = _1130 * (_1097.y + (-0.5));
        float _1133 = _1130 * (_1097.z + (-0.5));
        float _1140 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1104.x + (-0.5));
        float _1142 = _1140 * (_1104.y + (-0.5));
        float _1143 = _1140 * (_1104.z + (-0.5));
        float _1150 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1111.x + (-0.5));
        float _1152 = _1150 * (_1111.y + (-0.5));
        float _1153 = _1150 * (_1111.z + (-0.5));
        float _1160 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1118.x + (-0.5));
        float _1162 = _1160 * (_1118.y + (-0.5));
        float _1163 = _1160 * (_1118.z + (-0.5));
        float _1164 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1165 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1166 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1167 = _1131 * 0.5;
        float _1168 = _1141 * 0.5;
        float _1169 = _1151 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1183 = (dot(vec3(_518, _519, _520), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _3601 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1192 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1164 + 9.9999997473787516355514526367188e-06);
        float _3612 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _3623 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * (_1194 + 1.0))) + _1199) * _1164;
        float _1209 = _1132 * 0.5;
        float _1210 = _1142 * 0.5;
        float _1211 = _1152 * 0.5;
        float _1212 = dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211));
        float _1217 = (_1212 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1212);
        float _1225 = (dot(vec3(_518, _519, _520), vec3(_1217 * _1209, _1217 * _1210, _1217 * _1211)) + 1.0) * 0.5;
        float _3634 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1234 = sqrt(((_1210 * _1210) + (_1209 * _1209)) + (_1211 * _1211)) / (_1165 + 9.9999997473787516355514526367188e-06);
        float _3645 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _1236 = _1235 * 2.0;
        float _1240 = (1.0 - _1235) / (_1235 + 1.0);
        float _3656 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _1250 = ((((1.0 - _1241) * (_1236 + 2.0)) * exp2(log2(isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * (_1236 + 1.0))) + _1241) * _1165;
        float _1251 = _1133 * 0.5;
        float _1252 = _1143 * 0.5;
        float _1253 = _1153 * 0.5;
        float _1254 = dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253));
        float _1259 = (_1254 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1254);
        float _1267 = (dot(vec3(_518, _519, _520), vec3(_1259 * _1251, _1259 * _1252, _1259 * _1253)) + 1.0) * 0.5;
        float _3667 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1276 = sqrt(((_1252 * _1252) + (_1251 * _1251)) + (_1253 * _1253)) / (_1166 + 9.9999997473787516355514526367188e-06);
        float _3678 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1278 = _1277 * 2.0;
        float _1282 = (1.0 - _1277) / (_1277 + 1.0);
        float _3689 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _1292 = ((((1.0 - _1283) * (_1278 + 2.0)) * exp2(log2(isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * (_1278 + 1.0))) + _1283) * _1166;
        _1300 = _1133;
        _1301 = _1132;
        _1302 = _1131;
        _1303 = _1143;
        _1304 = _1142;
        _1305 = _1141;
        _1306 = _1153;
        _1307 = _1152;
        _1308 = _1151;
        _1309 = _1166;
        _1310 = _1165;
        _1311 = _1164;
        _1312 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
        _1313 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)));
        _1314 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)));
    }
    else
    {
        _1300 = _991;
        _1301 = _991;
        _1302 = _991;
        _1303 = _991;
        _1304 = _991;
        _1305 = _991;
        _1306 = _991;
        _1307 = _991;
        _1308 = _991;
        _1309 = _991;
        _1310 = _991;
        _1311 = _991;
        _1312 = 0.0;
        _1313 = 0.0;
        _1314 = 0.0;
    }
    float _1324 = (cbModelParam._m0[1u].x * (_1312 - _1003)) + _1003;
    float _1325 = (cbModelParam._m0[1u].x * (_1313 - _1004)) + _1004;
    float _1326 = (cbModelParam._m0[1u].x * (_1314 - _1005)) + _1005;
    float _1347 = fma(_1326, cbSceneParam._m0[89u].z, fma(_1325, cbSceneParam._m0[89u].y, _1324 * cbSceneParam._m0[89u].x));
    float _1350 = fma(_1326, cbSceneParam._m0[90u].z, fma(_1325, cbSceneParam._m0[90u].y, _1324 * cbSceneParam._m0[90u].x));
    float _1353 = fma(_1326, cbSceneParam._m0[91u].z, fma(_1325, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1324));
    float _1368 = _628 * 0.5;
    float _1369 = _629 * 0.5;
    float _1370 = _630 * 0.5;
    float _1371 = dot(vec4(_1368, _1369, _1370, 1.0), vec4(_1302, _1305, _1308, _1311));
    float _1374 = dot(vec4(_1368, _1369, _1370, 1.0), vec4(_1301, _1304, _1307, _1310));
    float _1377 = dot(vec4(_1368, _1369, _1370, 1.0), vec4(_1300, _1303, _1306, _1309));
    float _1411;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1384 = dot(vec4(_1368, _1369, _1370, 1.0), vec4(_990, _994, _997, _1000));
        float _1388 = dot(vec4(_1368, _1369, _1370, 1.0), vec4(_992, _995, _998, _1001));
        float _1392 = dot(vec4(_1368, _1369, _1370, 1.0), vec4(_993, _996, _999, _1002));
        float _1399 = dot(vec4(cbModelParam._m0[39u]), vec4(_1368, _1369, _1370, 1.0));
        _1411 = dot(vec3(isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)), isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)), isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1399) ? 0.0 : (isnan(0.0) ? _1399 : max(0.0, _1399))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1411 = 1.0;
    }
    float _1422;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1413 = dot(vec4(cbModelParam._m0[40u]), vec4(_1368, _1369, _1370, 1.0));
        _1422 = dot(vec3(isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)), isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)), isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1413) ? 0.0 : (isnan(0.0) ? _1413 : max(0.0, _1413))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1422 = 1.0;
    }
    float _1426 = (_1422 * cbModelParam._m0[1u].x) + (_1411 * (1.0 - cbModelParam._m0[1u].x));
    float _1436 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _521);
    float _1437 = isnan(_1436) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1436 : min(cbModelParam._m0[25u].z, _1436));
    float _1518;
    float _1520;
    float _1522;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1485 = fma(_689, cbModelParam._m0[13u].z, fma(_685, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _681)) + cbModelParam._m0[13u].w;
        float _1489 = fma(_689, cbModelParam._m0[14u].z, fma(_685, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _681)) + cbModelParam._m0[14u].w;
        float _1493 = fma(_689, cbModelParam._m0[15u].z, fma(_685, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _681)) + cbModelParam._m0[15u].w;
        float _1496 = fma(_630, cbModelParam._m0[13u].z, fma(_629, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _628));
        float _1499 = fma(_630, cbModelParam._m0[14u].z, fma(_629, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _628));
        float _1502 = fma(_630, cbModelParam._m0[15u].z, fma(_629, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _628));
        float _1530;
        if (_1496 > 0.0)
        {
            _1530 = abs((1.0 - _1485) / _1496);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1496 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1485 + 1.0) / _1496);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1530 = frontier_phi_22_20_ladder;
        }
        float _1698;
        if (_1499 > 0.0)
        {
            _1698 = abs((1.0 - _1489) / _1499);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1499 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1489 + 1.0) / _1499);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1698 = frontier_phi_31_27_ladder;
        }
        float _2142;
        if (_1502 > 0.0)
        {
            _2142 = abs((1.0 - _1493) / _1502);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1502 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1493 + 1.0) / _1502);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2142 = frontier_phi_43_38_ladder;
        }
        float _2144 = isnan(_1698) ? _1530 : (isnan(_1530) ? _1698 : min(_1530, _1698));
        float _2145 = isnan(_2142) ? _2144 : (isnan(_2144) ? _2142 : min(_2144, _2142));
        float _2149 = (_2145 * _1496) + _1485;
        float _2150 = (_2145 * _1499) + _1489;
        float _2151 = (_2145 * _1502) + _1493;
        float _2152 = _2145 * 9.9999997473787516355514526367188e-05;
        float _2154 = (-1.0) - _2152;
        float _2156 = _2152 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_2151 > _2156) || ((_2151 < _2154) || ((_2150 > _2156) || ((_2150 < _2154) || ((_2149 < _2154) || (_2149 > _2156))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2401 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2151, cbModelParam._m0[9u].z, fma(_2150, cbModelParam._m0[9u].y, _2149 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2151, cbModelParam._m0[10u].z, fma(_2150, cbModelParam._m0[10u].y, _2149 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2151, cbModelParam._m0[11u].z, fma(_2150, cbModelParam._m0[11u].y, _2149 * cbModelParam._m0[11u].x))), _1437);
            frontier_phi_21_43_ladder = _2401.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2401.x * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2401.z * cbModelParam._m0[1u].y;
        }
        _1518 = frontier_phi_21_43_ladder_1;
        _1520 = frontier_phi_21_43_ladder;
        _1522 = frontier_phi_21_43_ladder_2;
    }
    else
    {
        vec4 _1506 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_628, _629, _630), _1437);
        _1518 = _1506.x * cbModelParam._m0[1u].y;
        _1520 = _1506.y * cbModelParam._m0[1u].y;
        _1522 = _1506.z * cbModelParam._m0[1u].y;
    }
    float _1526 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _521);
    float _1527 = isnan(_1526) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1526 : min(cbModelParam._m0[25u].w, _1526));
    float _1615;
    float _1617;
    float _1619;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1579 = fma(_689, cbModelParam._m0[21u].z, fma(_685, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _681)) + cbModelParam._m0[21u].w;
        float _1583 = fma(_689, cbModelParam._m0[22u].z, fma(_685, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _681)) + cbModelParam._m0[22u].w;
        float _1587 = fma(_689, cbModelParam._m0[23u].z, fma(_685, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _681)) + cbModelParam._m0[23u].w;
        float _1590 = fma(_630, cbModelParam._m0[21u].z, fma(_629, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _628));
        float _1593 = fma(_630, cbModelParam._m0[22u].z, fma(_629, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _628));
        float _1596 = fma(_630, cbModelParam._m0[23u].z, fma(_629, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _628));
        float _1703;
        if (_1590 > 0.0)
        {
            _1703 = abs((1.0 - _1579) / _1590);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1590 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1579 + 1.0) / _1590);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1703 = frontier_phi_33_29_ladder;
        }
        float _2169;
        if (_1593 > 0.0)
        {
            _2169 = abs((1.0 - _1583) / _1593);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1593 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1583 + 1.0) / _1593);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _2169 = frontier_phi_45_40_ladder;
        }
        float _2522;
        if (_1596 > 0.0)
        {
            _2522 = abs((1.0 - _1587) / _1596);
        }
        else
        {
            float frontier_phi_57_52_ladder;
            if (_1596 < 0.0)
            {
                frontier_phi_57_52_ladder = abs((_1587 + 1.0) / _1596);
            }
            else
            {
                frontier_phi_57_52_ladder = 5000.0;
            }
            _2522 = frontier_phi_57_52_ladder;
        }
        float _2524 = isnan(_2169) ? _1703 : (isnan(_1703) ? _2169 : min(_1703, _2169));
        float _2525 = isnan(_2522) ? _2524 : (isnan(_2524) ? _2522 : min(_2524, _2522));
        float _2529 = (_2525 * _1590) + _1579;
        float _2530 = (_2525 * _1593) + _1583;
        float _2531 = (_2525 * _1596) + _1587;
        float _2532 = _2525 * 9.9999997473787516355514526367188e-05;
        float _2533 = (-1.0) - _2532;
        float _2535 = _2532 + 1.0;
        float frontier_phi_30_57_ladder;
        float frontier_phi_30_57_ladder_1;
        float frontier_phi_30_57_ladder_2;
        if ((_2531 > _2535) || ((_2531 < _2533) || ((_2530 > _2535) || ((_2530 < _2533) || ((_2529 < _2533) || (_2529 > _2535))))))
        {
            frontier_phi_30_57_ladder = 0.0;
            frontier_phi_30_57_ladder_1 = 0.0;
            frontier_phi_30_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2652 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2531, cbModelParam._m0[17u].z, fma(_2530, cbModelParam._m0[17u].y, _2529 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2531, cbModelParam._m0[18u].z, fma(_2530, cbModelParam._m0[18u].y, _2529 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2531, cbModelParam._m0[19u].z, fma(_2530, cbModelParam._m0[19u].y, _2529 * cbModelParam._m0[19u].x))), _1527);
            frontier_phi_30_57_ladder = _2652.z * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_1 = _2652.y * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_2 = _2652.x * cbModelParam._m0[1u].z;
        }
        _1615 = frontier_phi_30_57_ladder_2;
        _1617 = frontier_phi_30_57_ladder_1;
        _1619 = frontier_phi_30_57_ladder;
    }
    else
    {
        vec4 _1599 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_628, _629, _630), _1527);
        _1615 = _1599.x * cbModelParam._m0[1u].z;
        _1617 = _1599.y * cbModelParam._m0[1u].z;
        _1619 = _1599.z * cbModelParam._m0[1u].z;
    }
    float _1631 = ((((1.0 - _649) * ((_636 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_649 * _636)) * _620;
    float _1632 = _1631 * ((cbModelParam._m0[1u].w * (_1615 - _1518)) + _1518);
    float _1633 = _1631 * ((cbModelParam._m0[1u].w * (_1617 - _1520)) + _1520);
    float _1634 = _1631 * ((cbModelParam._m0[1u].w * (_1619 - _1522)) + _1522);
    float _1637 = fma(_1634, cbSceneParam._m0[89u].z, fma(_1633, cbSceneParam._m0[89u].y, _1632 * cbSceneParam._m0[89u].x));
    float _1640 = fma(_1634, cbSceneParam._m0[90u].z, fma(_1633, cbSceneParam._m0[90u].y, _1632 * cbSceneParam._m0[90u].x));
    float _1643 = fma(_1634, cbSceneParam._m0[91u].z, fma(_1633, cbSceneParam._m0[91u].y, _1632 * cbSceneParam._m0[91u].x));
    float _1677 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1681 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1685 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1689 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1690 = _1677 / _1689;
    float _1691 = _1681 / _1689;
    float _1692 = _1685 / _1689;
    float _1839;
    float _1840;
    float _1841;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1719 = ((uint(_1692 > cbSceneParam._m0[59u].y) + uint(_1692 > cbSceneParam._m0[59u].x)) + uint(_1692 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1720 = _1719 + 43u;
        uint _1728 = _1719 + 44u;
        uint _1736 = _1719 + 45u;
        uint _1744 = _1719 + 46u;
        float _1755 = fma(_1689, cbSceneParam._m0[_1720].w, fma(_1685, cbSceneParam._m0[_1720].z, fma(_1681, cbSceneParam._m0[_1720].y, _1677 * cbSceneParam._m0[_1720].x)));
        float _1759 = fma(_1689, cbSceneParam._m0[_1728].w, fma(_1685, cbSceneParam._m0[_1728].z, fma(_1681, cbSceneParam._m0[_1728].y, _1677 * cbSceneParam._m0[_1728].x)));
        float _1767 = fma(_1689, cbSceneParam._m0[_1744].w, fma(_1685, cbSceneParam._m0[_1744].z, fma(_1681, cbSceneParam._m0[_1744].y, _1677 * cbSceneParam._m0[_1744].x)));
        float _1772 = cbSceneParam._m0[33u].z * _1767;
        float _1774 = cbSceneParam._m0[33u].w * _1767;
        float _1777 = fma(_1689, cbSceneParam._m0[_1736].w, fma(_1685, cbSceneParam._m0[_1736].z, fma(_1681, cbSceneParam._m0[_1736].y, _1677 * cbSceneParam._m0[_1736].x))) / _1767;
        float _1825 = (cbSceneParam._m0[33u].x - sqrt(((_1691 * _1691) + (_1690 * _1690)) + (_1692 * _1692))) * cbSceneParam._m0[33u].y;
        float _3815 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1832 = (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1772 + _1755) / _1767, (_1774 + _1759) / _1767), _1777), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1774 + _1755) / _1767, (_1759 - _1772) / _1767), _1777), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1755 - _1772) / _1767, (_1759 - _1774) / _1767), _1777), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1755 - _1774) / _1767, (_1772 + _1759) / _1767), _1777), 0.0)).x), vec4(0.25)));
        _1839 = 1.0 - (_1832 * cbSceneParam._m0[34u].x);
        _1840 = 1.0 - (_1832 * cbSceneParam._m0[34u].y);
        _1841 = 1.0 - (_1832 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1839 = 1.0;
        _1840 = 1.0;
        _1841 = 1.0;
    }
    float _1905;
    float _1907;
    float _1909;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1893 = fma(_1689, cbSceneParam._m0[63u].w, fma(_1685, cbSceneParam._m0[63u].z, fma(_1681, cbSceneParam._m0[63u].y, _1677 * cbSceneParam._m0[63u].x)));
        float _1894 = fma(_1689, cbSceneParam._m0[60u].w, fma(_1685, cbSceneParam._m0[60u].z, fma(_1681, cbSceneParam._m0[60u].y, _1677 * cbSceneParam._m0[60u].x))) / _1893;
        float _1895 = fma(_1689, cbSceneParam._m0[61u].w, fma(_1685, cbSceneParam._m0[61u].z, fma(_1681, cbSceneParam._m0[61u].y, _1677 * cbSceneParam._m0[61u].x))) / _1893;
        float frontier_phi_42_41_ladder;
        float frontier_phi_42_41_ladder_1;
        float frontier_phi_42_41_ladder_2;
        if ((((_1894 >= cbSceneParam._m0[64u].x) && (_1895 >= cbSceneParam._m0[64u].y)) && (_1894 <= cbSceneParam._m0[64u].z)) && (_1895 <= cbSceneParam._m0[64u].w))
        {
            float _2182 = fma(_1689, cbSceneParam._m0[62u].w, fma(_1685, cbSceneParam._m0[62u].z, fma(_1681, cbSceneParam._m0[62u].y, _1677 * cbSceneParam._m0[62u].x))) / _1893;
            float _2186 = isnan(cbSceneParam._m0[41u].w) ? _2182 : (isnan(_2182) ? cbSceneParam._m0[41u].w : max(_2182, cbSceneParam._m0[41u].w));
            float _2229 = (cbSceneParam._m0[33u].x - sqrt(((_1691 * _1691) + (_1690 * _1690)) + (_1692 * _1692))) * cbSceneParam._m0[33u].y;
            float _3831 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
            float _2236 = (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1894, cbSceneParam._m0[33u].w + _1895), _2186), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1894, _1895 - cbSceneParam._m0[33u].z), _2186), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1894 - cbSceneParam._m0[33u].z, _1895 - cbSceneParam._m0[33u].w), _2186), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1894 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1895), _2186), 0.0)).x), vec4(0.25)));
            float _2240 = 1.0 - (_2236 * cbSceneParam._m0[34u].x);
            float _2241 = 1.0 - (_2236 * cbSceneParam._m0[34u].y);
            float _2242 = 1.0 - (_2236 * cbSceneParam._m0[34u].z);
            frontier_phi_42_41_ladder = isnan(_2241) ? _1840 : (isnan(_1840) ? _2241 : min(_1840, _2241));
            frontier_phi_42_41_ladder_1 = isnan(_2240) ? _1839 : (isnan(_1839) ? _2240 : min(_1839, _2240));
            frontier_phi_42_41_ladder_2 = isnan(_2242) ? _1841 : (isnan(_1841) ? _2242 : min(_1841, _2242));
        }
        else
        {
            frontier_phi_42_41_ladder = _1840;
            frontier_phi_42_41_ladder_1 = _1839;
            frontier_phi_42_41_ladder_2 = _1841;
        }
        _1905 = frontier_phi_42_41_ladder_1;
        _1907 = frontier_phi_42_41_ladder;
        _1909 = frontier_phi_42_41_ladder_2;
    }
    else
    {
        _1905 = _1839;
        _1907 = _1840;
        _1909 = _1841;
    }
    uvec4 _1914 = floatBitsToUint(cbInstanceData._m0[_594 + 5u]);
    uint _1916 = _1914.x * 14u;
    uint _1917 = _1916 + 13u;
    float _1922 = _620 + (-1.0);
    float _1925 = (cbLight._m0[_1917].x * _1922) + 1.0;
    float _1926 = (cbLight._m0[_1917].y * _1922) + 1.0;
    uint _1927 = _1916 + 5u;
    float _1933 = isnan(1.0) ? _1926 : (isnan(_1926) ? 1.0 : min(_1926, 1.0));
    uint _1937 = _1916 + 4u;
    float _1946 = isnan(1.0) ? _1925 : (isnan(_1925) ? 1.0 : min(_1925, 1.0));
    uint _1950 = _1916 | 1u;
    float _1961 = dot(vec3(cbLight._m0[_1916].xyz), vec3(_518, _519, _520));
    float _1964 = dot(vec3(cbLight._m0[_1950].xyz), vec3(_518, _519, _520));
    float _3867 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _3878 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1969 = (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * 0.3183098733425140380859375;
    float _1971 = (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * 0.3183098733425140380859375;
    float _1978 = ((cbLight._m0[_1927].x * _1933) * _1971) + (((cbLight._m0[_1937].x * _1905) * _1946) * _1969);
    float _1979 = ((_1933 * cbLight._m0[_1927].y) * _1971) + (((cbLight._m0[_1937].y * _1907) * _1946) * _1969);
    float _1980 = ((_1933 * cbLight._m0[_1927].z) * _1971) + (((cbLight._m0[_1937].z * _1909) * _1946) * _1969);
    uint _1982 = _1916 + 8u;
    float _1995 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1916].w)) * _521) * 0.949999988079071044921875);
    float _1996 = _1995 * _1995;
    float _1997 = cbLight._m0[_1916].x + _545;
    float _1998 = cbLight._m0[_1916].y + _546;
    float _1999 = cbLight._m0[_1916].z + _547;
    float _2003 = inversesqrt(dot(vec3(_1997, _1998, _1999), vec3(_1997, _1998, _1999)));
    float _2004 = _2003 * _1997;
    float _2005 = _2003 * _1998;
    float _2006 = _2003 * _1999;
    float _2007 = dot(vec3(_518, _519, _520), vec3(cbLight._m0[_1916].xyz));
    float _3889 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2010 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _3900 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _2011 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _2012 = dot(vec3(_518, _519, _520), vec3(_2004, _2005, _2006));
    float _3911 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2015 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _2016 = dot(vec3(cbLight._m0[_1916].xyz), vec3(_2004, _2005, _2006));
    float _3922 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2020 = _1996 * _1996;
    float _2024 = ((_2015 * _2015) * (_2020 + (-1.0))) + 1.0;
    float _2035 = (exp2(log2(1.0 - (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2036 = 1.0 - _1996;
    float _2047 = (0.5 / (((_2011 * ((_2010 * _2036) + _1996)) + 9.9999999392252902907785028219223e-09) + (((_2011 * _2036) + _1996) * _2010))) * _2010;
    float _3933 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2049 = (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_2020 / ((_2024 * _2024) * 3.141590118408203125));
    uint _2063 = _1916 + 9u;
    float _2074 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1950].w)) * _521) * 0.949999988079071044921875);
    float _2075 = _2074 * _2074;
    float _2076 = cbLight._m0[_1950].x + _545;
    float _2077 = cbLight._m0[_1950].y + _546;
    float _2078 = cbLight._m0[_1950].z + _547;
    float _2082 = inversesqrt(dot(vec3(_2076, _2077, _2078), vec3(_2076, _2077, _2078)));
    float _2083 = _2082 * _2076;
    float _2084 = _2082 * _2077;
    float _2085 = _2082 * _2078;
    float _2086 = dot(vec3(_518, _519, _520), vec3(cbLight._m0[_1950].xyz));
    float _3944 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2089 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _2090 = dot(vec3(_518, _519, _520), vec3(_2083, _2084, _2085));
    float _3955 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2093 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _2094 = dot(vec3(cbLight._m0[_1950].xyz), vec3(_2083, _2084, _2085));
    float _3966 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2098 = _2075 * _2075;
    float _2102 = ((_2093 * _2093) * (_2098 + (-1.0))) + 1.0;
    float _2111 = (exp2(log2(1.0 - (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2112 = 1.0 - _2075;
    float _2122 = (0.5 / (((_2011 * ((_2089 * _2112) + _2075)) + 9.9999999392252902907785028219223e-09) + (((_2011 * _2112) + _2075) * _2089))) * _2089;
    float _3977 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2124 = (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_2098 / ((_2102 * _2102) * 3.141590118408203125));
    float _2134 = (((_2111 * cbLight._m0[_2063].x) * _2124) * _1933) + ((((cbLight._m0[_1982].x * _1905) * _2035) * _2049) * _1946);
    float _2135 = (((_2111 * cbLight._m0[_2063].y) * _2124) * _1933) + ((((cbLight._m0[_1982].y * _1907) * _2035) * _2049) * _1946);
    float _2136 = (((_2111 * cbLight._m0[_2063].z) * _2124) * _1933) + ((((cbLight._m0[_1982].z * _1909) * _2035) * _2049) * _1946);
    float _2299;
    float _2301;
    float _2303;
    float _2305;
    float _2307;
    float _2309;
    if (_1914.y == 0u)
    {
        uvec4 _2254 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2255 = _2254.x;
        uint _2266 = uint((float(_2254.y) * floor(float(uint(cbSceneParam._m0[85u].y * _554) / _2255))) + floor(float(uint(cbSceneParam._m0[85u].x * _553) / _2255)));
        float _2276 = (log2(_1692 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2277 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        uint _2280 = uint(isnan(14.0) ? _2277 : (isnan(_2277) ? 14.0 : min(_2277, 14.0)));
        uvec4 _2285 = texelFetch(g_lightClusterGridBuffer, int(((_2280 << 2u) + (_2266 << 6u)) >> 2u));
        uint _2286 = _2285.x;
        uint _2287 = _2254.z;
        float _2410;
        float _2412;
        float _2414;
        float _2416;
        float _2418;
        float _2420;
        if (((((1u << ((_2287 >> 4u) & 15u)) + 4294967295u) & _2286) == 0u) || ((_2287 & 240u) == 0u))
        {
            _2410 = 0.0;
            _2412 = 0.0;
            _2414 = 0.0;
            _2416 = 0.0;
            _2418 = 0.0;
            _2420 = 0.0;
        }
        else
        {
            float _2411;
            float _2413;
            float _2415;
            float _2417;
            float _2419;
            float _2421;
            float _2580 = 0.0;
            float _2581 = 0.0;
            float _2582 = 0.0;
            float _2583 = 0.0;
            float _2584 = 0.0;
            float _2585 = 0.0;
            uint _2586 = 0u;
            uint _2595;
            bool _2596;
            for (;;)
            {
                _2595 = texelFetch(g_lightClassification, int((((_2280 << 5u) + (_2266 << 9u)) + (_2586 << 2u)) >> 2u)).x;
                _2596 = _2595 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2596)
                {
                    frontier_phi_66_pred = _2581;
                    frontier_phi_66_pred_1 = _2580;
                    frontier_phi_66_pred_2 = _2582;
                    frontier_phi_66_pred_3 = _2585;
                    frontier_phi_66_pred_4 = _2584;
                    frontier_phi_66_pred_5 = _2583;
                }
                else
                {
                    float _2725;
                    float _2726;
                    float _2727;
                    float _2728;
                    float _2729;
                    float _2730;
                    uint _2731;
                    _2725 = _2580;
                    _2726 = _2581;
                    _2727 = _2582;
                    _2728 = _2583;
                    _2729 = _2584;
                    _2730 = _2585;
                    _2731 = _2595;
                    float _2657;
                    float _2658;
                    float _2659;
                    float _2660;
                    float _2661;
                    float _2662;
                    for (;;)
                    {
                        uint _2735 = uint(findLSB(_2731)) + (_2586 << 5u);
                        uint _2732 = (_2731 + 4294967295u) & _2731;
                        uint _2737 = _2735 * 48u;
                        vec4 _2751 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2737)).x, texelFetch(g_PointLightRenderingBuffer, int(_2737 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2737 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2737 + 3u)).x));
                        uint _2757 = (_2735 * 48u) + 4u;
                        vec4 _2770 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2757)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 3u)).x));
                        uint _2776 = (_2735 * 48u) + 8u;
                        vec3 _2787 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2776)).x, texelFetch(g_PointLightRenderingBuffer, int(_2776 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2776 + 2u)).x));
                        float _2791 = _2751.x - _1690;
                        float _2792 = _2751.y - _1691;
                        float _2793 = _2751.z - _1692;
                        float _2794 = dot(vec3(_2791, _2792, _2793), vec3(_2791, _2792, _2793));
                        float _2797 = inversesqrt(_2794);
                        float _2798 = _2797 * _2791;
                        float _2799 = _2797 * _2792;
                        float _2800 = _2797 * _2793;
                        float _2801 = dot(vec3(_575, _578, _581), vec3(_2798, _2799, _2800));
                        float _2806 = 1.0 - (_2794 * _2751.w);
                        float _3998 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
                        float _2807 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
                        float _2808 = sqrt(_2794) * _2770.w;
                        float _2811 = 1.39999997615814208984375 / (_2808 + 1.39999997615814208984375);
                        float _2812 = _2811 * _2811;
                        float _2815 = ((1.0 - _2812) * _2801) + _2812;
                        float _2818 = _2808 * _2808;
                        float _2822 = ((isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0))) * _2807) / ((_2818 * 0.699999988079071044921875) + 1.0);
                        float _2826 = (-0.0) - _1690;
                        float _2827 = (-0.0) - _1691;
                        float _2828 = (-0.0) - _1692;
                        float _2832 = inversesqrt(dot(vec3(_2826, _2827, _2828), vec3(_2826, _2827, _2828)));
                        float _2833 = _2832 * _2826;
                        float _2834 = _2832 * _2827;
                        float _2835 = _2832 * _2828;
                        float _2842 = exp2(log2(1.0 / ((_2818 * 3.5) + 5.0)) * 0.25);
                        float _2843 = 1.0 - _636;
                        float _2850 = sqrt(1.0 - ((1.0 - (_2843 * _2843)) * (1.0 - (_2842 * _2842))));
                        float _2851 = _2850 * _2850;
                        float _2852 = _2851 * _2851;
                        float _2853 = _2833 + _2798;
                        float _2854 = _2834 + _2799;
                        float _2855 = _2835 + _2800;
                        float _2859 = inversesqrt(dot(vec3(_2853, _2854, _2855), vec3(_2853, _2854, _2855)));
                        float _2863 = dot(vec3(_575, _578, _581), vec3(_2833, _2834, _2835));
                        float _4014 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
                        float _2866 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
                        float _2867 = dot(vec3(_575, _578, _581), vec3(_2859 * _2853, _2859 * _2854, _2859 * _2855));
                        float _4025 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
                        float _2870 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
                        float _2874 = ((_2870 * _2870) * (_2852 + (-1.0))) + 1.0;
                        float _2875 = _2811 * _2851;
                        float _2876 = _2875 * _2875;
                        float _2879 = ((1.0 - _2876) * _2801) + _2876;
                        float _4036 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
                        float _2880 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
                        float _2881 = 1.0 - _2851;
                        float _2891 = (0.5 / (((_2880 * ((_2866 * _2881) + _2851)) + 9.9999999392252902907785028219223e-09) + (((_2880 * _2881) + _2851) * _2866))) * _2880;
                        float _4047 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
                        float _2902 = (((_2852 * 3.1415927410125732421875) * (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) / ((_2874 * _2874) * ((_2818 * 2.1991131305694580078125) + 3.141590118408203125))) * _2807;
                        _2660 = (_2822 * _2770.x) + _2728;
                        _2661 = (_2822 * _2770.y) + _2729;
                        _2662 = (_2822 * _2770.z) + _2730;
                        _2657 = (_2902 * _2787.x) + _2725;
                        _2658 = (_2902 * _2787.y) + _2726;
                        _2659 = (_2902 * _2787.z) + _2727;
                        if (_2732 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2725 = _2657;
                            _2726 = _2658;
                            _2727 = _2659;
                            _2728 = _2660;
                            _2729 = _2661;
                            _2730 = _2662;
                            _2731 = _2732;
                        }
                    }
                    frontier_phi_66_pred = _2658;
                    frontier_phi_66_pred_1 = _2657;
                    frontier_phi_66_pred_2 = _2659;
                    frontier_phi_66_pred_3 = _2662;
                    frontier_phi_66_pred_4 = _2661;
                    frontier_phi_66_pred_5 = _2660;
                }
                _2413 = frontier_phi_66_pred;
                _2411 = frontier_phi_66_pred_1;
                _2415 = frontier_phi_66_pred_2;
                _2421 = frontier_phi_66_pred_3;
                _2419 = frontier_phi_66_pred_4;
                _2417 = frontier_phi_66_pred_5;
                uint _2587 = _2586 + 1u;
                if (_2587 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2580 = _2411;
                    _2581 = _2413;
                    _2582 = _2415;
                    _2583 = _2417;
                    _2584 = _2419;
                    _2585 = _2421;
                    _2586 = _2587;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2410 = _2411;
            _2412 = _2413;
            _2414 = _2415;
            _2416 = _2417;
            _2418 = _2419;
            _2420 = _2421;
        }
        uvec4 _2424 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2425 = _2424.z;
        uint _2427 = (_2425 >> 8u) & 15u;
        float _2548;
        float _2550;
        float _2552;
        float _2554;
        float _2556;
        float _2558;
        if (((4294967295u << _2427) & _2286) == 0u)
        {
            _2548 = _2410;
            _2550 = _2412;
            _2552 = _2414;
            _2554 = _2416;
            _2556 = _2418;
            _2558 = _2420;
        }
        else
        {
            float _2573 = inversesqrt(dot(vec3(_1690, _1691, _1692), vec3(_1690, _1691, _1692)));
            float _2574 = _2573 * _1690;
            float _2575 = _2573 * _1691;
            float _2576 = _2573 * _1692;
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            float frontier_phi_59_60_ladder_3;
            float frontier_phi_59_60_ladder_4;
            float frontier_phi_59_60_ladder_5;
            if (_2427 < ((_2425 >> 12u) & 15u))
            {
                float _2549;
                float _2551;
                float _2553;
                float _2555;
                float _2557;
                float _2559;
                float _2708 = _2410;
                float _2709 = _2412;
                float _2710 = _2414;
                float _2711 = _2416;
                float _2712 = _2418;
                float _2713 = _2420;
                uint _2714 = _2427;
                uint _2723;
                bool _2724;
                for (;;)
                {
                    _2723 = texelFetch(g_lightClassification, int((((_2280 << 5u) + (_2266 << 9u)) + (_2714 << 2u)) >> 2u)).x;
                    _2724 = _2723 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2724)
                    {
                        frontier_phi_72_pred = _2709;
                        frontier_phi_72_pred_1 = _2708;
                        frontier_phi_72_pred_2 = _2713;
                        frontier_phi_72_pred_3 = _2712;
                        frontier_phi_72_pred_4 = _2711;
                        frontier_phi_72_pred_5 = _2710;
                    }
                    else
                    {
                        float _2907;
                        float _2908;
                        float _2909;
                        float _2910;
                        float _2911;
                        float _2912;
                        float _3201;
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3205;
                        float _3206;
                        float _2920 = _2708;
                        float _2921 = _2709;
                        float _2922 = _2710;
                        float _2923 = _2711;
                        float _2924 = _2712;
                        float _2925 = _2713;
                        uint _2926 = _2723;
                        uint _2927;
                        vec4 _2952;
                        float _2953;
                        vec4 _2968;
                        vec3 _2980;
                        vec4 _2996;
                        vec4 _3011;
                        float _3057;
                        bool _3058;
                        for (;;)
                        {
                            uint _2937 = ((_2714 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2926));
                            _2927 = (_2926 + 4294967295u) & _2926;
                            uint _2939 = _2937 * 40u;
                            _2952 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2939)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 3u)).x));
                            _2953 = _2952.w;
                            uint _2955 = (_2937 * 40u) + 4u;
                            _2968 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2955)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 3u)).x));
                            uint _2970 = (_2937 * 40u) + 8u;
                            _2980 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 2u)).x));
                            uint _2983 = (_2937 * 40u) + 16u;
                            _2996 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2983)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 3u)).x));
                            uint _2998 = (_2937 * 40u) + 20u;
                            _3011 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2998)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 3u)).x));
                            uint _3013 = (_2937 * 40u) + 24u;
                            vec4 _3026 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3013)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 3u)).x));
                            uint _3032 = (_2937 * 40u) + 28u;
                            vec4 _3045 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 3u)).x));
                            _3057 = fma(_1692, _3045.z, fma(_1691, _3045.y, _3045.x * _1690)) + _3045.w;
                            _3058 = !((fma(_1692, _3026.z, fma(_1691, _3026.y, _3026.x * _1690)) + _3026.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3058)
                            {
                                float _3085 = _2952.x - _1690;
                                float _3086 = _2952.y - _1691;
                                float _3087 = _2952.z - _1692;
                                float _3088 = dot(vec3(_3085, _3086, _3087), vec3(_3085, _3086, _3087));
                                float _3091 = inversesqrt(_3088);
                                float _3092 = _3091 * _3085;
                                float _3093 = _3091 * _3086;
                                float _3094 = _3091 * _3087;
                                float _3098 = 1.0 - (_3088 / (_2953 * _2953));
                                float _4058 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                                float _3099 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
                                float _3103 = sqrt(_3088) * _2968.w;
                                float _3105 = 1.39999997615814208984375 / (_3103 + 1.39999997615814208984375);
                                float _3106 = _3105 * _3105;
                                float _3109 = ((1.0 - _3106) * dot(vec3(_3092, _3093, _3094), vec3(_575, _578, _581))) + _3106;
                                float _3112 = _3103 * _3103;
                                float _3116 = (fma(_1692, _2996.z, fma(_1691, _2996.y, _2996.x * _1690)) + _2996.w) / _3057;
                                float _3117 = (fma(_1692, _3011.z, fma(_1691, _3011.y, _3011.x * _1690)) + _3011.w) / _3057;
                                float _3121 = 1.0 - dot(vec2(_3116, _3117), vec2(_3116, _3117));
                                float _4074 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                                float _3122 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
                                float _3123 = _3122 * (((isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0))) * _3099) / ((_3112 * 0.699999988079071044921875) + 1.0));
                                float _3135 = exp2(log2(1.0 / ((_3112 * 3.5) + 5.0)) * 0.25);
                                float _3136 = 1.0 - _636;
                                float _3143 = sqrt(1.0 - ((1.0 - (_3136 * _3136)) * (1.0 - (_3135 * _3135))));
                                float _3144 = _3143 * _3143;
                                float _3145 = _3144 * _3144;
                                float _3146 = _3092 - _2574;
                                float _3147 = _3093 - _2575;
                                float _3148 = _3094 - _2576;
                                float _3152 = inversesqrt(dot(vec3(_3146, _3147, _3148), vec3(_3146, _3147, _3148)));
                                float _3156 = dot(vec3(_575, _578, _581), vec3((-0.0) - _2574, (-0.0) - _2575, (-0.0) - _2576));
                                float _4085 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                                float _3159 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
                                float _3160 = dot(vec3(_575, _578, _581), vec3(_3152 * _3146, _3152 * _3147, _3152 * _3148));
                                float _4096 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                                float _3163 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
                                float _3167 = ((_3163 * _3163) * (_3145 + (-1.0))) + 1.0;
                                float _3168 = _3105 * _3144;
                                float _3169 = _3168 * _3168;
                                float _3175 = ((1.0 - _3169) * dot(vec3(_575, _578, _581), vec3(_3092, _3093, _3094))) + _3169;
                                float _4107 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                                float _3176 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
                                float _3177 = 1.0 - _3144;
                                float _3187 = (0.5 / (((_3176 * ((_3159 * _3177) + _3144)) + 9.9999999392252902907785028219223e-09) + (((_3176 * _3177) + _3144) * _3159))) * _3176;
                                float _4118 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                                float _3197 = (_3122 * _3099) * (((_3145 * 3.1415927410125732421875) * (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0)))) / ((_3167 * _3167) * ((_3112 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3197 * _2980.y;
                                frontier_phi_78_pred_1 = _3197 * _2980.x;
                                frontier_phi_78_pred_2 = _3123 * _2968.z;
                                frontier_phi_78_pred_3 = _3123 * _2968.y;
                                frontier_phi_78_pred_4 = _3123 * _2968.x;
                                frontier_phi_78_pred_5 = _3197 * _2980.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3202 = frontier_phi_78_pred;
                            _3201 = frontier_phi_78_pred_1;
                            _3206 = frontier_phi_78_pred_2;
                            _3205 = frontier_phi_78_pred_3;
                            _3204 = frontier_phi_78_pred_4;
                            _3203 = frontier_phi_78_pred_5;
                            _2910 = _3204 + _2923;
                            _2911 = _3205 + _2924;
                            _2912 = _3206 + _2925;
                            _2907 = _3201 + _2920;
                            _2908 = _3202 + _2921;
                            _2909 = _3203 + _2922;
                            if (_2927 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2920 = _2907;
                                _2921 = _2908;
                                _2922 = _2909;
                                _2923 = _2910;
                                _2924 = _2911;
                                _2925 = _2912;
                                _2926 = _2927;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2908;
                        frontier_phi_72_pred_1 = _2907;
                        frontier_phi_72_pred_2 = _2912;
                        frontier_phi_72_pred_3 = _2911;
                        frontier_phi_72_pred_4 = _2910;
                        frontier_phi_72_pred_5 = _2909;
                    }
                    _2551 = frontier_phi_72_pred;
                    _2549 = frontier_phi_72_pred_1;
                    _2559 = frontier_phi_72_pred_2;
                    _2557 = frontier_phi_72_pred_3;
                    _2555 = frontier_phi_72_pred_4;
                    _2553 = frontier_phi_72_pred_5;
                    uint _2715 = _2714 + 1u;
                    if (_2715 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2708 = _2549;
                        _2709 = _2551;
                        _2710 = _2553;
                        _2711 = _2555;
                        _2712 = _2557;
                        _2713 = _2559;
                        _2714 = _2715;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _2559;
                frontier_phi_59_60_ladder_1 = _2555;
                frontier_phi_59_60_ladder_2 = _2553;
                frontier_phi_59_60_ladder_3 = _2551;
                frontier_phi_59_60_ladder_4 = _2549;
                frontier_phi_59_60_ladder_5 = _2557;
            }
            else
            {
                frontier_phi_59_60_ladder = _2420;
                frontier_phi_59_60_ladder_1 = _2416;
                frontier_phi_59_60_ladder_2 = _2414;
                frontier_phi_59_60_ladder_3 = _2412;
                frontier_phi_59_60_ladder_4 = _2410;
                frontier_phi_59_60_ladder_5 = _2418;
            }
            _2548 = frontier_phi_59_60_ladder_4;
            _2550 = frontier_phi_59_60_ladder_3;
            _2552 = frontier_phi_59_60_ladder_2;
            _2554 = frontier_phi_59_60_ladder_1;
            _2556 = frontier_phi_59_60_ladder_5;
            _2558 = frontier_phi_59_60_ladder;
        }
        float _2563 = isnan(1.0) ? _620 : (isnan(_620) ? 1.0 : min(_620, 1.0));
        _2299 = (_2563 * _2554) + _1978;
        _2301 = (_2563 * _2556) + _1979;
        _2303 = (_2563 * _2558) + _1980;
        _2305 = ((_2548 * 0.039999999105930328369140625) * _2563) + _2134;
        _2307 = ((_2550 * 0.039999999105930328369140625) * _2563) + _2135;
        _2309 = ((_2552 * 0.039999999105930328369140625) * _2563) + _2136;
    }
    else
    {
        _2299 = _1978;
        _2301 = _1979;
        _2303 = _1980;
        _2305 = _2134;
        _2307 = _2135;
        _2309 = _2136;
    }
    uint _2315 = _596 + uint(cbMatDynParam._m0[0u].w);
    float _4134 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _4145 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _4156 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _2340 = (((isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_2299 + ((isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0))) * _620))) + ((_2305 + ((isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))) * _1426)) * cbPerFrame._m0[3u].x)) + (((_463.x * _281) * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2315].x);
    float _2342 = ((((_463.y * _281) * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2315].y) + ((_2307 + ((isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) * _1426)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_2301 + ((isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0))) * _620)));
    float _2344 = ((((_463.z * _281) * cbMtdParam._m0[9u].z) * cbInstanceData._m0[_2315].z) + ((_2309 + ((isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))) * _1426)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_2303 + ((isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0))) * _620)));
    uint _2348 = _594 + 6u;
    float _2356 = _553 / cbSceneParam._m0[86u].x;
    float _2357 = _554 / cbSceneParam._m0[86u].y;
    vec4 _2371 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2356, _2357, (log2((isnan(cbSceneParam._m0[77u].w) ? _540 : (isnan(_540) ? cbSceneParam._m0[77u].w : min(_540, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2373 = _2371.x;
    float _2374 = _2371.y;
    float _2375 = _2371.z;
    float _2376 = _2371.w;
    float _2472;
    float _2474;
    float _2476;
    float _2478;
    if (_540 > cbSceneParam._m0[78u].w)
    {
        float _2435 = isnan(_540) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _540 : min(cbSceneParam._m0[80u].w, _540));
        float _2436 = _2435 / _540;
        float _2447 = _2436 * _263;
        float _2448 = _264 * _2436;
        float _2449 = (-0.0) - _2448;
        float _2450 = _2436 * _265;
        float _2452 = (cbSceneParam._m0[77u].w * _2449) / _2435;
        float _2453 = _2452 + cbSceneParam._m0[79u].w;
        float _2454 = cbSceneParam._m0[79u].w - _2448;
        float _2460 = sqrt(((_2447 * _2447) + (_2448 * _2448)) + (_2450 * _2450));
        float _2463 = (1.0 - (cbSceneParam._m0[77u].w / _2435)) * _2460;
        float _2468 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2470 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2670;
        if (abs((_2449 - _2452) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2670 = ((((_2453 > 0.0) ? exp2(_2468 * _2453) : (2.0 - exp2(_2470 * _2453))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2463;
        }
        else
        {
            float _2609 = 1.0 / cbSceneParam._m0[80u].x;
            float _2610 = isnan(_2454) ? _2453 : (isnan(_2453) ? _2454 : max(_2453, _2454));
            float _2611 = isnan(_2454) ? _2453 : (isnan(_2453) ? _2454 : min(_2453, _2454));
            float _2620 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : min(_2610, 0.0));
            float _2621 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : min(_2611, 0.0));
            _2670 = ((abs(_2460 / _2449) * cbSceneParam._m0[80u].y) * ((((_2620 - _2621) * 2.0) - ((exp2(_2468 * (isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0)))) - exp2(_2468 * (isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0))))) * _2609)) - ((exp2(_2470 * _2620) - exp2(_2470 * _2621)) * _2609))) + (_2463 * cbSceneParam._m0[80u].z);
        }
        vec4 _2672 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2356, _2357, 1.0), 0.0);
        float _2681 = exp2((_2670 * (-1.44269502162933349609375)) * (1.0 - _2672.w));
        float _2682 = log2(_2681);
        float _2698 = log2(_2376);
        _2472 = (exp2(_2698 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2682 * cbSceneParam._m0[78u].x)) * _2672.x) / cbSceneParam._m0[78u].x)) + _2373;
        _2474 = (exp2(_2698 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2682 * cbSceneParam._m0[78u].y)) * _2672.y) / cbSceneParam._m0[78u].y)) + _2374;
        _2476 = (exp2(_2698 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2682 * cbSceneParam._m0[78u].z)) * _2672.z) / cbSceneParam._m0[78u].z)) + _2375;
        _2478 = _2681 * _2376;
    }
    else
    {
        _2472 = _2373;
        _2474 = _2374;
        _2476 = _2375;
        _2478 = _2376;
    }
    float _2490 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2491 = _2490 == 3.0;
    float _2492 = log2(_2478);
    float _2499 = exp2(_2492 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0)));
    float _2500 = exp2(_2492 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0)));
    float _2501 = exp2(_2492 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0)));
    float _2510 = (_2490 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2510 * (_2491 ? _2499 : (_2499 + (cbSceneParam._m0[72u].w * _2472)));
    SV_Target.y = _2510 * (_2491 ? _2500 : (_2500 + (cbSceneParam._m0[72u].w * _2474)));
    SV_Target.z = _2510 * (_2491 ? _2501 : (_2501 + (cbSceneParam._m0[72u].w * _2476)));
    SV_Target.w = cbInstanceData._m0[_2348].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2348].w;
}


