#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D M_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1094;
float _3355;
float _3356;
float _3357;
float _3358;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    vec4 _293 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _328 = cbMtdParam._m0[21u].w + _269;
    float _329 = cbMtdParam._m0[22u].x + _270;
    float _330 = cbMtdParam._m0[22u].y + _271;
    float _344 = (-0.0) - dot(vec3(_328, _329, _330), vec3(_197 * _190, _197 * _191, _197 * _192));
    float _345 = (-0.0) - dot(vec3(_328, _329, _330), vec3(_211 * TANGENT.x, _211 * TANGENT.y, _211 * TANGENT.z));
    float _346 = (-0.0) - dot(vec3(_328, _329, _330), vec3((-0.0) - (_204 * NORMAL.x), (-0.0) - (_204 * NORMAL.y), (-0.0) - (_204 * NORMAL.z)));
    float _350 = inversesqrt(dot(vec3(_344, _345, _346), vec3(_344, _345, _346)));
    float _353 = _350 * _346;
    float _354 = (_350 * _344) + (((_293.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _355 = (_350 * _345) + (((_293.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _356 = _354 * cbMtdParam._m0[18u].z;
    float _357 = _355 * cbMtdParam._m0[18u].y;
    float _358 = fract(TEXCOORD.x);
    float _359 = fract(TEXCOORD.y);
    float _365;
    if (_356 > 0.0)
    {
        _365 = (1.0 - _358) / _356;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_356 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _358) / _356;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _365 = frontier_phi_3_2_ladder;
    }
    float _373;
    if (_357 > 0.0)
    {
        _373 = (1.0 - _359) / _357;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_357 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _359) / _357;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _373 = frontier_phi_7_6_ladder;
    }
    bool _375 = _353 > 0.0;
    float _377 = _375 ? (cbMtdParam._m0[15u].x / _353) : 5000.0;
    float _378 = isnan(_373) ? _365 : (isnan(_365) ? _373 : min(_365, _373));
    float _379 = isnan(_377) ? _378 : (isnan(_378) ? _377 : min(_378, _377));
    float _383 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _384 = _358 + (-0.5);
    float _387 = _359 + (-0.5);
    float _390 = ((_379 * _353) + _383) / _383;
    vec4 _414 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_384 + (_379 * _356)) / _390) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_387 + (_379 * _357)) / _390) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _424 = cbMtdParam._m0[9u].x * _414.x;
    float _425 = cbMtdParam._m0[9u].y * _414.y;
    float _426 = cbMtdParam._m0[9u].z * _414.z;
    float _444 = _354 * cbMtdParam._m0[20u].z;
    float _445 = _355 * cbMtdParam._m0[20u].y;
    bool _446 = _444 > 0.0;
    float _451;
    if (_446)
    {
        _451 = (1.0 - _358) / _444;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_444 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _358) / _444;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _451 = frontier_phi_11_10_ladder;
    }
    bool _453 = _445 > 0.0;
    float _458;
    if (_453)
    {
        _458 = (1.0 - _359) / _445;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_445 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _359) / _445;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _458 = frontier_phi_15_14_ladder;
    }
    float _461 = _375 ? (cbMtdParam._m0[16u].x / _353) : 5000.0;
    float _462 = isnan(_458) ? _451 : (isnan(_451) ? _458 : min(_451, _458));
    float _463 = isnan(_461) ? _462 : (isnan(_462) ? _461 : min(_462, _461));
    float _467 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _471 = ((_463 * _353) + _467) / _467;
    float _476 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _478 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _494 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_384 + (_463 * _444)) / _471) + 0.5) + _476) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_387 + (_463 * _445)) / _471) + 0.5) + _478) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _506;
    if (_446)
    {
        _506 = (1.0 - _358) / _444;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_444 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _358) / _444;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _506 = frontier_phi_19_18_ladder;
    }
    float _512;
    if (_453)
    {
        _512 = (1.0 - _359) / _445;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_445 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _359) / _445;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _512 = frontier_phi_23_22_ladder;
    }
    float _514 = isnan(_512) ? _506 : (isnan(_506) ? _512 : min(_506, _512));
    float _515 = isnan(_461) ? _514 : (isnan(_514) ? _461 : min(_514, _461));
    float _522 = ((_515 * _353) + _467) / _467;
    vec4 _543 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_384 + (_515 * _444)) / _522) + 0.5) + _476) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_387 + (_515 * _445)) / _522) + 0.5) + _478) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _545 = _543.x;
    float _552 = (_545 * ((_494.x * cbMtdParam._m0[10u].x) - _424)) + _424;
    float _553 = (_545 * ((_494.y * cbMtdParam._m0[10u].y) - _425)) + _425;
    float _554 = (_545 * ((_494.z * cbMtdParam._m0[10u].z) - _426)) + _426;
    float _568 = _354 * cbMtdParam._m0[21u].x;
    float _569 = _355 * cbMtdParam._m0[20u].w;
    bool _570 = _568 > 0.0;
    float _575;
    if (_570)
    {
        _575 = (1.0 - _358) / _568;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_568 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _358) / _568;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _575 = frontier_phi_27_26_ladder;
    }
    bool _577 = _569 > 0.0;
    float _582;
    if (_577)
    {
        _582 = (1.0 - _359) / _569;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_569 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _359) / _569;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _582 = frontier_phi_31_30_ladder;
    }
    float _585 = _375 ? (cbMtdParam._m0[17u].z / _353) : 5000.0;
    float _586 = isnan(_582) ? _575 : (isnan(_575) ? _582 : min(_575, _582));
    float _587 = isnan(_585) ? _586 : (isnan(_586) ? _585 : min(_586, _585));
    float _591 = cbMtdParam._m0[17u].z * cbMtdParam._m0[15u].z;
    float _595 = ((_587 * _353) + _591) / _591;
    float _600 = cbMtdParam._m0[17u].y - cbMtdParam._m0[21u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    float _602 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    vec4 _619 = texture(sampler2D(M_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_384 + (_587 * _568)) / _595) + 0.5) + _600) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_387 + (_587 * _569)) / _595) + 0.5) + _602) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[7u].w));
    float _631;
    if (_570)
    {
        _631 = (1.0 - _358) / _568;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_568 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _358) / _568;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _631 = frontier_phi_35_34_ladder;
    }
    float _637;
    if (_577)
    {
        _637 = (1.0 - _359) / _569;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_569 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _359) / _569;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _637 = frontier_phi_39_38_ladder;
    }
    float _639 = isnan(_637) ? _631 : (isnan(_631) ? _637 : min(_631, _637));
    float _640 = isnan(_585) ? _639 : (isnan(_639) ? _585 : min(_639, _585));
    float _647 = ((_640 * _353) + _591) / _591;
    vec4 _667 = texture(sampler2D(M_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_384 + (_640 * _568)) / _647) + 0.5) + _600) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_387 + (_640 * _569)) / _647) + 0.5) + _602) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[8u].w));
    float _669 = _667.x;
    float _676 = (_669 * ((_619.x * cbMtdParam._m0[14u].x) - _552)) + _552;
    float _677 = (_669 * ((_619.y * cbMtdParam._m0[14u].y) - _553)) + _553;
    float _678 = (_669 * ((_619.z * cbMtdParam._m0[14u].z) - _554)) + _554;
    float _3417 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _3428 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _3439 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _697 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _701 = inversesqrt(dot(vec3(_269, _270, _271), vec3(_269, _270, _271)));
    float _702 = _269 * _701;
    float _703 = _270 * _701;
    float _704 = _271 * _701;
    vec4 _709 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _711 = _709.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _807 = sqrt(((_269 * _269) + (_270 * _270)) + (_271 * _271));
        float _814 = (cbMatDynParam._m0[5u].x * _807) + cbMatDynParam._m0[5u].y;
        float _3450 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _815 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
        float _819 = (cbMatDynParam._m0[5u].z * _807) + cbMatDynParam._m0[5u].w;
        float _3461 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0))) - _815)) + _815) < ((_711 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _723 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _724 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _737 = uint(roundEven(NORMAL.w)) * 13u;
    uint _739 = _737 + 9u;
    uint _740 = _739 + uint(cbMatDynParam._m0[0u].w);
    float _746 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0)))) * cbInstanceData._m0[_740].x;
    float _747 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0)))) * cbInstanceData._m0[_740].y;
    float _748 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0)))) * cbInstanceData._m0[_740].z;
    float _3472 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _749 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
    float _3483 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _750 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
    float _3494 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _751 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
    vec4 _760 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _723, cbSceneParam._m0[86u].y * _724));
    float _763 = _760.x * TEXCOORD.z;
    float _764 = (-0.0) - _702;
    float _765 = (-0.0) - _703;
    float _766 = (-0.0) - _704;
    float _788 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _792 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _796 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1093;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _881 = (cbModelParam._m0[37u].x * ((((fma(_796, cbModelParam._m0[26u].z, fma(_792, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _788)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _883 = (cbModelParam._m0[37u].y * ((((fma(_796, cbModelParam._m0[27u].z, fma(_792, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _788)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _884 = (((((fma(_796, cbModelParam._m0[28u].z, fma(_792, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _788)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_881, _883, _884), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_881, _883, _884), 0.0);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_881, _883, _884), 0.0);
        vec4 _908 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_881, _883, _884), 0.0);
        float _921 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_887.x + (-0.5));
        float _923 = _921 * (_887.y + (-0.5));
        float _924 = _921 * (_887.z + (-0.5));
        float _931 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_894.x + (-0.5));
        float _933 = _931 * (_894.y + (-0.5));
        float _934 = _931 * (_894.z + (-0.5));
        float _941 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_901.x + (-0.5));
        float _943 = _941 * (_901.y + (-0.5));
        float _944 = _941 * (_901.z + (-0.5));
        float _951 = exp2((_908.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_908.x + (-0.5));
        float _953 = _951 * (_908.y + (-0.5));
        float _954 = _951 * (_908.z + (-0.5));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = _922 * 0.5;
        float _959 = _932 * 0.5;
        float _960 = _942 * 0.5;
        float _961 = dot(vec3(_958, _959, _960), vec3(_958, _959, _960));
        float _966 = (_961 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_961);
        float _975 = (dot(vec3(0.0), vec3(_966 * _958, _966 * _959, _966 * _960)) + 1.0) * 0.5;
        float _3520 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _985 = sqrt(((_959 * _959) + (_958 * _958)) + (_960 * _960)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _3531 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
        float _987 = _986 * 2.0;
        float _991 = (1.0 - _986) / (_986 + 1.0);
        float _3542 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
        float _1001 = ((((1.0 - _992) * (_987 + 2.0)) * exp2(log2(isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0))) * (_987 + 1.0))) + _992) * _955;
        float _1002 = _923 * 0.5;
        float _1003 = _933 * 0.5;
        float _1004 = _943 * 0.5;
        float _1005 = dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004));
        float _1010 = (_1005 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1005);
        float _1018 = (dot(vec3(0.0), vec3(_1010 * _1002, _1010 * _1003, _1010 * _1004)) + 1.0) * 0.5;
        float _3553 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1027 = sqrt(((_1003 * _1003) + (_1002 * _1002)) + (_1004 * _1004)) / (_956 + 9.9999997473787516355514526367188e-06);
        float _3564 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _3575 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0))) * (_1029 + 1.0))) + _1034) * _956;
        float _1044 = _924 * 0.5;
        float _1045 = _934 * 0.5;
        float _1046 = _944 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1060 = (dot(vec3(0.0), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _3586 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1069 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _3597 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
        float _1071 = _1070 * 2.0;
        float _1075 = (1.0 - _1070) / (_1070 + 1.0);
        float _3608 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _1085 = ((((1.0 - _1076) * (_1071 + 2.0)) * exp2(log2(isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0))) * (_1071 + 1.0))) + _1076) * _957;
        _1093 = _924;
        _1095 = _923;
        _1096 = _922;
        _1097 = _934;
        _1098 = _933;
        _1099 = _932;
        _1100 = _944;
        _1101 = _943;
        _1102 = _942;
        _1103 = _957;
        _1104 = _956;
        _1105 = _955;
        _1106 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0)));
        _1107 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
        _1108 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)));
    }
    else
    {
        _1093 = _1094;
        _1095 = _1094;
        _1096 = _1094;
        _1097 = _1094;
        _1098 = _1094;
        _1099 = _1094;
        _1100 = _1094;
        _1101 = _1094;
        _1102 = _1094;
        _1103 = _1094;
        _1104 = _1094;
        _1105 = _1094;
        _1106 = 0.0;
        _1107 = 0.0;
        _1108 = 0.0;
    }
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1165 = (cbModelParam._m0[38u].x * ((((fma(_796, cbModelParam._m0[30u].z, fma(_792, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _788)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1166 = (cbModelParam._m0[38u].y * ((((fma(_796, cbModelParam._m0[31u].z, fma(_792, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _788)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1167 = (((((fma(_796, cbModelParam._m0[32u].z, fma(_792, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _788)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        float _1202 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1169.x + (-0.5));
        float _1204 = _1202 * (_1169.y + (-0.5));
        float _1205 = _1202 * (_1169.z + (-0.5));
        float _1212 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1176.x + (-0.5));
        float _1214 = _1212 * (_1176.y + (-0.5));
        float _1215 = _1212 * (_1176.z + (-0.5));
        float _1222 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1183.x + (-0.5));
        float _1224 = _1222 * (_1183.y + (-0.5));
        float _1225 = _1222 * (_1183.z + (-0.5));
        float _1232 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1190.x + (-0.5));
        float _1234 = _1232 * (_1190.y + (-0.5));
        float _1235 = _1232 * (_1190.z + (-0.5));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = _1203 * 0.5;
        float _1240 = _1213 * 0.5;
        float _1241 = _1223 * 0.5;
        float _1242 = dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241));
        float _1247 = (_1242 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1242);
        float _1255 = (dot(vec3(0.0), vec3(_1247 * _1239, _1247 * _1240, _1247 * _1241)) + 1.0) * 0.5;
        float _3649 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1264 = sqrt(((_1240 * _1240) + (_1239 * _1239)) + (_1241 * _1241)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _3660 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _1266 = _1265 * 2.0;
        float _1270 = (1.0 - _1265) / (_1265 + 1.0);
        float _3671 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _1280 = ((((1.0 - _1271) * (_1266 + 2.0)) * exp2(log2(isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))) * (_1266 + 1.0))) + _1271) * _1236;
        float _1281 = _1204 * 0.5;
        float _1282 = _1214 * 0.5;
        float _1283 = _1224 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1297 = (dot(vec3(0.0), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _3682 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1306 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _3693 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _3704 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * (_1308 + 1.0))) + _1313) * _1237;
        float _1323 = _1205 * 0.5;
        float _1324 = _1215 * 0.5;
        float _1325 = _1225 * 0.5;
        float _1326 = dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325));
        float _1331 = (_1326 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1326);
        float _1339 = (dot(vec3(0.0), vec3(_1331 * _1323, _1331 * _1324, _1331 * _1325)) + 1.0) * 0.5;
        float _3715 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1348 = sqrt(((_1324 * _1324) + (_1323 * _1323)) + (_1325 * _1325)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _3726 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1350 = _1349 * 2.0;
        float _1354 = (1.0 - _1349) / (_1349 + 1.0);
        float _3737 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1364 = ((((1.0 - _1355) * (_1350 + 2.0)) * exp2(log2(isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))) * (_1350 + 1.0))) + _1355) * _1238;
        _1372 = _1205;
        _1373 = _1204;
        _1374 = _1203;
        _1375 = _1215;
        _1376 = _1214;
        _1377 = _1213;
        _1378 = _1225;
        _1379 = _1224;
        _1380 = _1223;
        _1381 = _1238;
        _1382 = _1237;
        _1383 = _1236;
        _1384 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)));
        _1385 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
        _1386 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)));
    }
    else
    {
        _1372 = _1094;
        _1373 = _1094;
        _1374 = _1094;
        _1375 = _1094;
        _1376 = _1094;
        _1377 = _1094;
        _1378 = _1094;
        _1379 = _1094;
        _1380 = _1094;
        _1381 = _1094;
        _1382 = _1094;
        _1383 = _1094;
        _1384 = 0.0;
        _1385 = 0.0;
        _1386 = 0.0;
    }
    float _1396 = (cbModelParam._m0[1u].x * (_1384 - _1106)) + _1106;
    float _1397 = (cbModelParam._m0[1u].x * (_1385 - _1107)) + _1107;
    float _1398 = (cbModelParam._m0[1u].x * (_1386 - _1108)) + _1108;
    float _1419 = fma(_1398, cbSceneParam._m0[89u].z, fma(_1397, cbSceneParam._m0[89u].y, _1396 * cbSceneParam._m0[89u].x));
    float _1422 = fma(_1398, cbSceneParam._m0[90u].z, fma(_1397, cbSceneParam._m0[90u].y, _1396 * cbSceneParam._m0[90u].x));
    float _1425 = fma(_1398, cbSceneParam._m0[91u].z, fma(_1397, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1396));
    float _1440 = _702 * (-0.5);
    float _1441 = _703 * (-0.5);
    float _1442 = _704 * (-0.5);
    float _1443 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1374, _1377, _1380, _1383));
    float _1446 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1373, _1376, _1379, _1382));
    float _1449 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1372, _1375, _1378, _1381));
    float _1483;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1456 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1093, _1097, _1100, _1103));
        float _1460 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1095, _1098, _1101, _1104));
        float _1464 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1096, _1099, _1102, _1105));
        float _1471 = dot(vec4(cbModelParam._m0[39u]), vec4(_1440, _1441, _1442, 1.0));
        _1483 = dot(vec3(isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)), isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)), isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1471) ? 0.0 : (isnan(0.0) ? _1471 : max(0.0, _1471))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1483 = 1.0;
    }
    float _1494;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1485 = dot(vec4(cbModelParam._m0[40u]), vec4(_1440, _1441, _1442, 1.0));
        _1494 = dot(vec3(isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)), isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)), isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1485) ? 0.0 : (isnan(0.0) ? _1485 : max(0.0, _1485))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1494 = 1.0;
    }
    float _1498 = (_1494 * cbModelParam._m0[1u].x) + (_1483 * (1.0 - cbModelParam._m0[1u].x));
    float _1507 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1587;
    float _1589;
    float _1591;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1554 = fma(_796, cbModelParam._m0[13u].z, fma(_792, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _788)) + cbModelParam._m0[13u].w;
        float _1558 = fma(_796, cbModelParam._m0[14u].z, fma(_792, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _788)) + cbModelParam._m0[14u].w;
        float _1562 = fma(_796, cbModelParam._m0[15u].z, fma(_792, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _788)) + cbModelParam._m0[15u].w;
        float _1565 = fma(_766, cbModelParam._m0[13u].z, fma(_765, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _764));
        float _1568 = fma(_766, cbModelParam._m0[14u].z, fma(_765, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _764));
        float _1571 = fma(_766, cbModelParam._m0[15u].z, fma(_765, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _764));
        float _1597;
        if (_1565 > 0.0)
        {
            _1597 = abs((1.0 - _1554) / _1565);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1565 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1554 + 1.0) / _1565);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1597 = frontier_phi_57_55_ladder;
        }
        float _1767;
        if (_1568 > 0.0)
        {
            _1767 = abs((1.0 - _1558) / _1568);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1568 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1558 + 1.0) / _1568);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _1767 = frontier_phi_66_62_ladder;
        }
        float _2161;
        if (_1571 > 0.0)
        {
            _2161 = abs((1.0 - _1562) / _1571);
        }
        else
        {
            float frontier_phi_78_73_ladder;
            if (_1571 < 0.0)
            {
                frontier_phi_78_73_ladder = abs((_1562 + 1.0) / _1571);
            }
            else
            {
                frontier_phi_78_73_ladder = 5000.0;
            }
            _2161 = frontier_phi_78_73_ladder;
        }
        float _2163 = isnan(_1767) ? _1597 : (isnan(_1597) ? _1767 : min(_1597, _1767));
        float _2164 = isnan(_2161) ? _2163 : (isnan(_2163) ? _2161 : min(_2163, _2161));
        float _2168 = (_2164 * _1565) + _1554;
        float _2169 = (_2164 * _1568) + _1558;
        float _2170 = (_2164 * _1571) + _1562;
        float _2171 = _2164 * 9.9999997473787516355514526367188e-05;
        float _2173 = (-1.0) - _2171;
        float _2175 = _2171 + 1.0;
        float frontier_phi_56_78_ladder;
        float frontier_phi_56_78_ladder_1;
        float frontier_phi_56_78_ladder_2;
        if ((_2170 > _2175) || ((_2170 < _2173) || ((_2169 > _2175) || ((_2169 < _2173) || ((_2168 < _2173) || (_2168 > _2175))))))
        {
            frontier_phi_56_78_ladder = 0.0;
            frontier_phi_56_78_ladder_1 = 0.0;
            frontier_phi_56_78_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2404 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2170, cbModelParam._m0[9u].z, fma(_2169, cbModelParam._m0[9u].y, _2168 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2170, cbModelParam._m0[10u].z, fma(_2169, cbModelParam._m0[10u].y, _2168 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2170, cbModelParam._m0[11u].z, fma(_2169, cbModelParam._m0[11u].y, _2168 * cbModelParam._m0[11u].x))), _1507);
            frontier_phi_56_78_ladder = _2404.z * cbModelParam._m0[1u].y;
            frontier_phi_56_78_ladder_1 = _2404.y * cbModelParam._m0[1u].y;
            frontier_phi_56_78_ladder_2 = _2404.x * cbModelParam._m0[1u].y;
        }
        _1587 = frontier_phi_56_78_ladder_2;
        _1589 = frontier_phi_56_78_ladder_1;
        _1591 = frontier_phi_56_78_ladder;
    }
    else
    {
        vec4 _1575 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_764, _765, _766), _1507);
        _1587 = _1575.x * cbModelParam._m0[1u].y;
        _1589 = _1575.y * cbModelParam._m0[1u].y;
        _1591 = _1575.z * cbModelParam._m0[1u].y;
    }
    float _1594 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1682;
    float _1684;
    float _1686;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1646 = fma(_796, cbModelParam._m0[21u].z, fma(_792, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _788)) + cbModelParam._m0[21u].w;
        float _1650 = fma(_796, cbModelParam._m0[22u].z, fma(_792, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _788)) + cbModelParam._m0[22u].w;
        float _1654 = fma(_796, cbModelParam._m0[23u].z, fma(_792, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _788)) + cbModelParam._m0[23u].w;
        float _1657 = fma(_766, cbModelParam._m0[21u].z, fma(_765, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _764));
        float _1660 = fma(_766, cbModelParam._m0[22u].z, fma(_765, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _764));
        float _1663 = fma(_766, cbModelParam._m0[23u].z, fma(_765, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _764));
        float _1772;
        if (_1657 > 0.0)
        {
            _1772 = abs((1.0 - _1646) / _1657);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1646 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _1772 = frontier_phi_68_64_ladder;
        }
        float _2188;
        if (_1660 > 0.0)
        {
            _2188 = abs((1.0 - _1650) / _1660);
        }
        else
        {
            float frontier_phi_80_75_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_80_75_ladder = abs((_1650 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_80_75_ladder = 5000.0;
            }
            _2188 = frontier_phi_80_75_ladder;
        }
        float _2535;
        if (_1663 > 0.0)
        {
            _2535 = abs((1.0 - _1654) / _1663);
        }
        else
        {
            float frontier_phi_92_87_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_92_87_ladder = abs((_1654 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_92_87_ladder = 5000.0;
            }
            _2535 = frontier_phi_92_87_ladder;
        }
        float _2537 = isnan(_2188) ? _1772 : (isnan(_1772) ? _2188 : min(_1772, _2188));
        float _2538 = isnan(_2535) ? _2537 : (isnan(_2537) ? _2535 : min(_2537, _2535));
        float _2542 = (_2538 * _1657) + _1646;
        float _2543 = (_2538 * _1660) + _1650;
        float _2544 = (_2538 * _1663) + _1654;
        float _2545 = _2538 * 9.9999997473787516355514526367188e-05;
        float _2546 = (-1.0) - _2545;
        float _2548 = _2545 + 1.0;
        float frontier_phi_65_92_ladder;
        float frontier_phi_65_92_ladder_1;
        float frontier_phi_65_92_ladder_2;
        if ((_2544 > _2548) || ((_2544 < _2546) || ((_2543 > _2548) || ((_2543 < _2546) || ((_2542 < _2546) || (_2542 > _2548))))))
        {
            frontier_phi_65_92_ladder = 0.0;
            frontier_phi_65_92_ladder_1 = 0.0;
            frontier_phi_65_92_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2678 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2544, cbModelParam._m0[17u].z, fma(_2543, cbModelParam._m0[17u].y, _2542 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2544, cbModelParam._m0[18u].z, fma(_2543, cbModelParam._m0[18u].y, _2542 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2544, cbModelParam._m0[19u].z, fma(_2543, cbModelParam._m0[19u].y, _2542 * cbModelParam._m0[19u].x))), _1594);
            frontier_phi_65_92_ladder = _2678.z * cbModelParam._m0[1u].z;
            frontier_phi_65_92_ladder_1 = _2678.y * cbModelParam._m0[1u].z;
            frontier_phi_65_92_ladder_2 = _2678.x * cbModelParam._m0[1u].z;
        }
        _1682 = frontier_phi_65_92_ladder_2;
        _1684 = frontier_phi_65_92_ladder_1;
        _1686 = frontier_phi_65_92_ladder;
    }
    else
    {
        vec4 _1666 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_764, _765, _766), _1594);
        _1682 = _1666.x * cbModelParam._m0[1u].z;
        _1684 = _1666.y * cbModelParam._m0[1u].z;
        _1686 = _1666.z * cbModelParam._m0[1u].z;
    }
    float _1698 = _763 * 0.01200000010430812835693359375;
    float _1700 = _1698 * ((cbModelParam._m0[1u].w * (_1682 - _1587)) + _1587);
    float _1701 = _1698 * ((cbModelParam._m0[1u].w * (_1684 - _1589)) + _1589);
    float _1702 = _1698 * ((cbModelParam._m0[1u].w * (_1686 - _1591)) + _1591);
    float _1705 = fma(_1702, cbSceneParam._m0[89u].z, fma(_1701, cbSceneParam._m0[89u].y, _1700 * cbSceneParam._m0[89u].x));
    float _1708 = fma(_1702, cbSceneParam._m0[90u].z, fma(_1701, cbSceneParam._m0[90u].y, _1700 * cbSceneParam._m0[90u].x));
    float _1711 = fma(_1702, cbSceneParam._m0[91u].z, fma(_1701, cbSceneParam._m0[91u].y, _1700 * cbSceneParam._m0[91u].x));
    float _1746 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1750 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1754 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1758 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1759 = _1746 / _1758;
    float _1760 = _1750 / _1758;
    float _1761 = _1754 / _1758;
    float _1909;
    float _1910;
    float _1911;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1788 = ((uint(_1761 > cbSceneParam._m0[59u].y) + uint(_1761 > cbSceneParam._m0[59u].x)) + uint(_1761 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1789 = _1788 + 43u;
        uint _1797 = _1788 + 44u;
        uint _1805 = _1788 + 45u;
        uint _1813 = _1788 + 46u;
        float _1824 = fma(_1758, cbSceneParam._m0[_1789].w, fma(_1754, cbSceneParam._m0[_1789].z, fma(_1750, cbSceneParam._m0[_1789].y, _1746 * cbSceneParam._m0[_1789].x)));
        float _1828 = fma(_1758, cbSceneParam._m0[_1797].w, fma(_1754, cbSceneParam._m0[_1797].z, fma(_1750, cbSceneParam._m0[_1797].y, _1746 * cbSceneParam._m0[_1797].x)));
        float _1836 = fma(_1758, cbSceneParam._m0[_1813].w, fma(_1754, cbSceneParam._m0[_1813].z, fma(_1750, cbSceneParam._m0[_1813].y, _1746 * cbSceneParam._m0[_1813].x)));
        float _1841 = cbSceneParam._m0[33u].z * _1836;
        float _1843 = cbSceneParam._m0[33u].w * _1836;
        float _1846 = fma(_1758, cbSceneParam._m0[_1805].w, fma(_1754, cbSceneParam._m0[_1805].z, fma(_1750, cbSceneParam._m0[_1805].y, _1746 * cbSceneParam._m0[_1805].x))) / _1836;
        float _1894 = (cbSceneParam._m0[33u].x - sqrt(((_1760 * _1760) + (_1759 * _1759)) + (_1761 * _1761))) * cbSceneParam._m0[33u].y;
        float _3863 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
        float _1902 = (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1841 + _1824) / _1836, (_1843 + _1828) / _1836), _1846), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1843 + _1824) / _1836, (_1828 - _1841) / _1836), _1846), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1824 - _1841) / _1836, (_1828 - _1843) / _1836), _1846), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1824 - _1843) / _1836, (_1841 + _1828) / _1836), _1846), 0.0)).x), vec4(0.25)));
        _1909 = 1.0 - (_1902 * cbSceneParam._m0[34u].x);
        _1910 = 1.0 - (_1902 * cbSceneParam._m0[34u].y);
        _1911 = 1.0 - (_1902 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1909 = 1.0;
        _1910 = 1.0;
        _1911 = 1.0;
    }
    float _1975;
    float _1977;
    float _1979;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1963 = fma(_1758, cbSceneParam._m0[63u].w, fma(_1754, cbSceneParam._m0[63u].z, fma(_1750, cbSceneParam._m0[63u].y, _1746 * cbSceneParam._m0[63u].x)));
        float _1964 = fma(_1758, cbSceneParam._m0[60u].w, fma(_1754, cbSceneParam._m0[60u].z, fma(_1750, cbSceneParam._m0[60u].y, _1746 * cbSceneParam._m0[60u].x))) / _1963;
        float _1965 = fma(_1758, cbSceneParam._m0[61u].w, fma(_1754, cbSceneParam._m0[61u].z, fma(_1750, cbSceneParam._m0[61u].y, _1746 * cbSceneParam._m0[61u].x))) / _1963;
        float frontier_phi_77_76_ladder;
        float frontier_phi_77_76_ladder_1;
        float frontier_phi_77_76_ladder_2;
        if ((((_1964 >= cbSceneParam._m0[64u].x) && (_1965 >= cbSceneParam._m0[64u].y)) && (_1964 <= cbSceneParam._m0[64u].z)) && (_1965 <= cbSceneParam._m0[64u].w))
        {
            float _2201 = fma(_1758, cbSceneParam._m0[62u].w, fma(_1754, cbSceneParam._m0[62u].z, fma(_1750, cbSceneParam._m0[62u].y, _1746 * cbSceneParam._m0[62u].x))) / _1963;
            float _2205 = isnan(cbSceneParam._m0[41u].w) ? _2201 : (isnan(_2201) ? cbSceneParam._m0[41u].w : max(_2201, cbSceneParam._m0[41u].w));
            float _2248 = (cbSceneParam._m0[33u].x - sqrt(((_1760 * _1760) + (_1759 * _1759)) + (_1761 * _1761))) * cbSceneParam._m0[33u].y;
            float _3879 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
            float _2255 = (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1964, cbSceneParam._m0[33u].w + _1965), _2205), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1964, _1965 - cbSceneParam._m0[33u].z), _2205), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1964 - cbSceneParam._m0[33u].z, _1965 - cbSceneParam._m0[33u].w), _2205), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1964 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1965), _2205), 0.0)).x), vec4(0.25)));
            float _2259 = 1.0 - (_2255 * cbSceneParam._m0[34u].x);
            float _2260 = 1.0 - (_2255 * cbSceneParam._m0[34u].y);
            float _2261 = 1.0 - (_2255 * cbSceneParam._m0[34u].z);
            frontier_phi_77_76_ladder = isnan(_2261) ? _1911 : (isnan(_1911) ? _2261 : min(_1911, _2261));
            frontier_phi_77_76_ladder_1 = isnan(_2260) ? _1910 : (isnan(_1910) ? _2260 : min(_1910, _2260));
            frontier_phi_77_76_ladder_2 = isnan(_2259) ? _1909 : (isnan(_1909) ? _2259 : min(_1909, _2259));
        }
        else
        {
            frontier_phi_77_76_ladder = _1911;
            frontier_phi_77_76_ladder_1 = _1910;
            frontier_phi_77_76_ladder_2 = _1909;
        }
        _1975 = frontier_phi_77_76_ladder_2;
        _1977 = frontier_phi_77_76_ladder_1;
        _1979 = frontier_phi_77_76_ladder;
    }
    else
    {
        _1975 = _1909;
        _1977 = _1910;
        _1979 = _1911;
    }
    uvec4 _1984 = floatBitsToUint(cbInstanceData._m0[_737 + 5u]);
    uint _1986 = _1984.x * 14u;
    uint _1987 = _1986 + 13u;
    float _1992 = _763 + (-1.0);
    float _1995 = (cbLight._m0[_1987].x * _1992) + 1.0;
    float _1996 = (cbLight._m0[_1987].y * _1992) + 1.0;
    uint _1997 = _1986 + 5u;
    float _2003 = isnan(1.0) ? _1996 : (isnan(_1996) ? 1.0 : min(_1996, 1.0));
    uint _2007 = _1986 + 4u;
    float _2016 = isnan(1.0) ? _1995 : (isnan(_1995) ? 1.0 : min(_1995, 1.0));
    uint _2020 = _1986 | 1u;
    float _2031 = dot(vec3(cbLight._m0[_1986].xyz), vec3(0.0));
    float _2034 = dot(vec3(cbLight._m0[_2020].xyz), vec3(0.0));
    float _3915 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _3926 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2039 = (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * 0.3183098733425140380859375;
    float _2041 = (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * 0.3183098733425140380859375;
    float _2048 = ((cbLight._m0[_1997].x * _2003) * _2041) + (((cbLight._m0[_2007].x * _1975) * _2016) * _2039);
    float _2049 = ((_2003 * cbLight._m0[_1997].y) * _2041) + (((cbLight._m0[_2007].y * _1977) * _2016) * _2039);
    float _2050 = ((_2003 * cbLight._m0[_1997].z) * _2041) + (((cbLight._m0[_2007].z * _1979) * _2016) * _2039);
    uint _2051 = _1986 + 8u;
    float _2057 = cbLight._m0[_1986].x + _702;
    float _2058 = cbLight._m0[_1986].y + _703;
    float _2059 = cbLight._m0[_1986].z + _704;
    float _2063 = inversesqrt(dot(vec3(_2057, _2058, _2059), vec3(_2057, _2058, _2059)));
    float _2067 = dot(vec3(0.0), vec3(cbLight._m0[_1986].xyz));
    float _3937 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2070 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _2071 = dot(vec3(0.0), vec3(_702, _703, _704));
    float _3948 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2074 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _2075 = dot(vec3(cbLight._m0[_1986].xyz), vec3(_2057 * _2063, _2058 * _2063, _2059 * _2063));
    float _3959 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2086 = (exp2(log2(1.0 - (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2092 = (0.5 / ((_2070 + 9.9999999392252902907785028219223e-09) + _2074)) * _2070;
    float _3970 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2094 = (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * 0.31831014156341552734375;
    uint _2108 = _1986 + 9u;
    float _2114 = cbLight._m0[_2020].x + _702;
    float _2115 = cbLight._m0[_2020].y + _703;
    float _2116 = cbLight._m0[_2020].z + _704;
    float _2120 = inversesqrt(dot(vec3(_2114, _2115, _2116), vec3(_2114, _2115, _2116)));
    float _2124 = dot(vec3(0.0), vec3(cbLight._m0[_2020].xyz));
    float _3981 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2127 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _2128 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_2114 * _2120, _2115 * _2120, _2116 * _2120));
    float _3992 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2137 = (exp2(log2(1.0 - (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2141 = (0.5 / ((_2127 + 9.9999999392252902907785028219223e-09) + _2074)) * _2127;
    float _4003 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2143 = (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * 0.31831014156341552734375;
    float _2153 = (((_2137 * cbLight._m0[_2108].x) * _2143) * _2003) + ((((cbLight._m0[_2051].x * _1975) * _2086) * _2094) * _2016);
    float _2154 = (((_2137 * cbLight._m0[_2108].y) * _2143) * _2003) + ((((cbLight._m0[_2051].y * _1977) * _2086) * _2094) * _2016);
    float _2155 = (((_2137 * cbLight._m0[_2108].z) * _2143) * _2003) + ((((cbLight._m0[_2051].z * _1979) * _2086) * _2094) * _2016);
    float _2318;
    float _2320;
    float _2322;
    float _2324;
    float _2326;
    float _2328;
    if (_1984.y == 0u)
    {
        uvec4 _2273 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2274 = _2273.x;
        uint _2285 = uint((float(_2273.y) * floor(float(uint(cbSceneParam._m0[85u].y * _724) / _2274))) + floor(float(uint(cbSceneParam._m0[85u].x * _723) / _2274)));
        float _2295 = (log2(_1761 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2296 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        uint _2299 = uint(isnan(14.0) ? _2296 : (isnan(_2296) ? 14.0 : min(_2296, 14.0)));
        uvec4 _2304 = texelFetch(g_lightClusterGridBuffer, int(((_2299 << 2u) + (_2285 << 6u)) >> 2u));
        uint _2305 = _2304.x;
        uint _2306 = _2273.z;
        float _2413;
        float _2415;
        float _2417;
        float _2419;
        float _2421;
        float _2423;
        if (((((1u << ((_2306 >> 4u) & 15u)) + 4294967295u) & _2305) == 0u) || ((_2306 & 240u) == 0u))
        {
            _2413 = 0.0;
            _2415 = 0.0;
            _2417 = 0.0;
            _2419 = 0.0;
            _2421 = 0.0;
            _2423 = 0.0;
        }
        else
        {
            float _2414;
            float _2416;
            float _2418;
            float _2420;
            float _2422;
            float _2424;
            float _2590 = 0.0;
            float _2591 = 0.0;
            float _2592 = 0.0;
            float _2593 = 0.0;
            float _2594 = 0.0;
            float _2595 = 0.0;
            uint _2596 = 0u;
            uint _2605;
            bool _2606;
            for (;;)
            {
                _2605 = texelFetch(g_lightClassification, int((((_2299 << 5u) + (_2285 << 9u)) + (_2596 << 2u)) >> 2u)).x;
                _2606 = _2605 == 0u;
                float frontier_phi_103_pred;
                float frontier_phi_103_pred_1;
                float frontier_phi_103_pred_2;
                float frontier_phi_103_pred_3;
                float frontier_phi_103_pred_4;
                float frontier_phi_103_pred_5;
                if (_2606)
                {
                    frontier_phi_103_pred = _2591;
                    frontier_phi_103_pred_1 = _2595;
                    frontier_phi_103_pred_2 = _2594;
                    frontier_phi_103_pred_3 = _2593;
                    frontier_phi_103_pred_4 = _2592;
                    frontier_phi_103_pred_5 = _2590;
                }
                else
                {
                    float _2756;
                    float _2757;
                    float _2758;
                    float _2759;
                    float _2760;
                    float _2761;
                    uint _2762;
                    _2756 = _2590;
                    _2757 = _2591;
                    _2758 = _2592;
                    _2759 = _2593;
                    _2760 = _2594;
                    _2761 = _2595;
                    _2762 = _2605;
                    float _2683;
                    float _2684;
                    float _2685;
                    float _2686;
                    float _2687;
                    float _2688;
                    for (;;)
                    {
                        uint _2766 = uint(findLSB(_2762)) + (_2596 << 5u);
                        uint _2763 = (_2762 + 4294967295u) & _2762;
                        uint _2768 = _2766 * 48u;
                        vec4 _2782 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2768)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 3u)).x));
                        uint _2788 = (_2766 * 48u) + 4u;
                        vec4 _2801 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2788)).x, texelFetch(g_PointLightRenderingBuffer, int(_2788 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2788 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2788 + 3u)).x));
                        uint _2807 = (_2766 * 48u) + 8u;
                        vec3 _2818 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2807)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 2u)).x));
                        float _2822 = _2782.x - _1759;
                        float _2823 = _2782.y - _1760;
                        float _2824 = _2782.z - _1761;
                        float _2825 = dot(vec3(_2822, _2823, _2824), vec3(_2822, _2823, _2824));
                        float _2828 = inversesqrt(_2825);
                        float _2837 = 1.0 - (_2825 * _2782.w);
                        float _4024 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
                        float _2838 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
                        float _2839 = sqrt(_2825) * _2801.w;
                        float _2842 = 1.39999997615814208984375 / (_2839 + 1.39999997615814208984375);
                        float _2843 = _2842 * _2842;
                        float _2846 = ((1.0 - _2843) * dot(vec3(0.0), vec3(_2828 * _2822, _2828 * _2823, _2828 * _2824))) + _2843;
                        float _2849 = _2839 * _2839;
                        float _2853 = ((isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0))) * _2838) / ((_2849 * 0.699999988079071044921875) + 1.0);
                        float _2857 = (-0.0) - _1759;
                        float _2858 = (-0.0) - _1760;
                        float _2859 = (-0.0) - _1761;
                        float _2863 = inversesqrt(dot(vec3(_2857, _2858, _2859), vec3(_2857, _2858, _2859)));
                        float _2867 = dot(vec3(0.0), vec3(_2863 * _2857, _2863 * _2858, _2863 * _2859));
                        float _4040 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
                        float _4051 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
                        float _2871 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
                        float _2875 = (0.5 / (((isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) + 9.9999999392252902907785028219223e-09) + _2871)) * _2871;
                        float _4062 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
                        float _2884 = (((isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * 3.1415927410125732421875) / ((_2849 * 2.1991131305694580078125) + 3.141590118408203125)) * _2838;
                        _2686 = (_2853 * _2801.x) + _2759;
                        _2687 = (_2853 * _2801.y) + _2760;
                        _2688 = (_2853 * _2801.z) + _2761;
                        _2683 = (_2884 * _2818.x) + _2756;
                        _2684 = (_2884 * _2818.y) + _2757;
                        _2685 = (_2884 * _2818.z) + _2758;
                        if (_2763 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2756 = _2683;
                            _2757 = _2684;
                            _2758 = _2685;
                            _2759 = _2686;
                            _2760 = _2687;
                            _2761 = _2688;
                            _2762 = _2763;
                        }
                    }
                    frontier_phi_103_pred = _2684;
                    frontier_phi_103_pred_1 = _2688;
                    frontier_phi_103_pred_2 = _2687;
                    frontier_phi_103_pred_3 = _2686;
                    frontier_phi_103_pred_4 = _2685;
                    frontier_phi_103_pred_5 = _2683;
                }
                _2416 = frontier_phi_103_pred;
                _2424 = frontier_phi_103_pred_1;
                _2422 = frontier_phi_103_pred_2;
                _2420 = frontier_phi_103_pred_3;
                _2418 = frontier_phi_103_pred_4;
                _2414 = frontier_phi_103_pred_5;
                uint _2597 = _2596 + 1u;
                if (_2597 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2590 = _2414;
                    _2591 = _2416;
                    _2592 = _2418;
                    _2593 = _2420;
                    _2594 = _2422;
                    _2595 = _2424;
                    _2596 = _2597;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2413 = _2414;
            _2415 = _2416;
            _2417 = _2418;
            _2419 = _2420;
            _2421 = _2422;
            _2423 = _2424;
        }
        uvec4 _2427 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2428 = _2427.z;
        uint _2430 = (_2428 >> 8u) & 15u;
        float _2561;
        float _2563;
        float _2565;
        float _2567;
        float _2569;
        float _2571;
        if (((4294967295u << _2430) & _2305) == 0u)
        {
            _2561 = _2413;
            _2563 = _2415;
            _2565 = _2417;
            _2567 = _2419;
            _2569 = _2421;
            _2571 = _2423;
        }
        else
        {
            float _2586 = inversesqrt(dot(vec3(_1759, _1760, _1761), vec3(_1759, _1760, _1761)));
            float frontier_phi_94_95_ladder;
            float frontier_phi_94_95_ladder_1;
            float frontier_phi_94_95_ladder_2;
            float frontier_phi_94_95_ladder_3;
            float frontier_phi_94_95_ladder_4;
            float frontier_phi_94_95_ladder_5;
            if (_2430 < ((_2428 >> 12u) & 15u))
            {
                float _2562;
                float _2564;
                float _2566;
                float _2568;
                float _2570;
                float _2572;
                float _2739 = _2413;
                float _2740 = _2415;
                float _2741 = _2417;
                float _2742 = _2419;
                float _2743 = _2421;
                float _2744 = _2423;
                uint _2745 = _2430;
                uint _2754;
                bool _2755;
                for (;;)
                {
                    _2754 = texelFetch(g_lightClassification, int((((_2299 << 5u) + (_2285 << 9u)) + (_2745 << 2u)) >> 2u)).x;
                    _2755 = _2754 == 0u;
                    float frontier_phi_114_pred;
                    float frontier_phi_114_pred_1;
                    float frontier_phi_114_pred_2;
                    float frontier_phi_114_pred_3;
                    float frontier_phi_114_pred_4;
                    float frontier_phi_114_pred_5;
                    if (_2755)
                    {
                        frontier_phi_114_pred = _2744;
                        frontier_phi_114_pred_1 = _2743;
                        frontier_phi_114_pred_2 = _2742;
                        frontier_phi_114_pred_3 = _2741;
                        frontier_phi_114_pred_4 = _2740;
                        frontier_phi_114_pred_5 = _2739;
                    }
                    else
                    {
                        float _2898;
                        float _2899;
                        float _2900;
                        float _2901;
                        float _2902;
                        float _2903;
                        float _3147;
                        float _3148;
                        float _3149;
                        float _3150;
                        float _3151;
                        float _3152;
                        float _2911 = _2739;
                        float _2912 = _2740;
                        float _2913 = _2741;
                        float _2914 = _2742;
                        float _2915 = _2743;
                        float _2916 = _2744;
                        uint _2917 = _2754;
                        uint _2918;
                        vec4 _2943;
                        float _2944;
                        vec4 _2959;
                        vec3 _2971;
                        vec4 _2986;
                        vec4 _3001;
                        float _3047;
                        bool _3048;
                        for (;;)
                        {
                            uint _2928 = ((_2745 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2917));
                            _2918 = (_2917 + 4294967295u) & _2917;
                            uint _2930 = _2928 * 40u;
                            _2943 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2930)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 3u)).x));
                            _2944 = _2943.w;
                            uint _2946 = (_2928 * 40u) + 4u;
                            _2959 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 3u)).x));
                            uint _2961 = (_2928 * 40u) + 8u;
                            _2971 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2961)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 2u)).x));
                            uint _2973 = (_2928 * 40u) + 16u;
                            _2986 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 3u)).x));
                            uint _2988 = (_2928 * 40u) + 20u;
                            _3001 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2988)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 3u)).x));
                            uint _3003 = (_2928 * 40u) + 24u;
                            vec4 _3016 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3003)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 3u)).x));
                            uint _3022 = (_2928 * 40u) + 28u;
                            vec4 _3035 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3022)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 3u)).x));
                            _3047 = fma(_1761, _3035.z, fma(_1760, _3035.y, _3035.x * _1759)) + _3035.w;
                            _3048 = !((fma(_1761, _3016.z, fma(_1760, _3016.y, _3016.x * _1759)) + _3016.w) <= 0.0);
                            float frontier_phi_120_pred;
                            float frontier_phi_120_pred_1;
                            float frontier_phi_120_pred_2;
                            float frontier_phi_120_pred_3;
                            float frontier_phi_120_pred_4;
                            float frontier_phi_120_pred_5;
                            if (_3048)
                            {
                                float _3075 = _2943.x - _1759;
                                float _3076 = _2943.y - _1760;
                                float _3077 = _2943.z - _1761;
                                float _3078 = dot(vec3(_3075, _3076, _3077), vec3(_3075, _3076, _3077));
                                float _3081 = inversesqrt(_3078);
                                float _3082 = _3081 * _3075;
                                float _3083 = _3081 * _3076;
                                float _3084 = _3081 * _3077;
                                float _3088 = 1.0 - (_3078 / (_2944 * _2944));
                                float _4073 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                                float _3089 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
                                float _3093 = sqrt(_3078) * _2959.w;
                                float _3095 = 1.39999997615814208984375 / (_3093 + 1.39999997615814208984375);
                                float _3096 = _3095 * _3095;
                                float _3097 = 1.0 - _3096;
                                float _3099 = (_3097 * dot(vec3(_3082, _3083, _3084), vec3(0.0))) + _3096;
                                float _3102 = _3093 * _3093;
                                float _3106 = (fma(_1761, _2986.z, fma(_1760, _2986.y, _2986.x * _1759)) + _2986.w) / _3047;
                                float _3107 = (fma(_1761, _3001.z, fma(_1760, _3001.y, _3001.x * _1759)) + _3001.w) / _3047;
                                float _3111 = 1.0 - dot(vec2(_3106, _3107), vec2(_3106, _3107));
                                float _4089 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                                float _3112 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
                                float _3113 = _3112 * (((isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0))) * _3089) / ((_3102 * 0.699999988079071044921875) + 1.0));
                                float _3123 = dot(vec3(0.0), vec3((-0.0) - (_1759 * _2586), (-0.0) - (_1760 * _2586), (-0.0) - (_1761 * _2586)));
                                float _4100 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                                float _3131 = (_3097 * dot(vec3(0.0), vec3(_3082, _3083, _3084))) + _3096;
                                float _4111 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                                float _3132 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
                                float _3136 = (0.5 / (((isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) + 9.9999999392252902907785028219223e-09) + _3132)) * _3132;
                                float _4122 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                                float _3143 = (_3112 * _3089) * (((isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * 3.1415927410125732421875) / ((_3102 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_120_pred = _3113 * _2959.z;
                                frontier_phi_120_pred_1 = _3113 * _2959.y;
                                frontier_phi_120_pred_2 = _3113 * _2959.x;
                                frontier_phi_120_pred_3 = _3143 * _2971.z;
                                frontier_phi_120_pred_4 = _3143 * _2971.y;
                                frontier_phi_120_pred_5 = _3143 * _2971.x;
                            }
                            else
                            {
                                frontier_phi_120_pred = 0.0;
                                frontier_phi_120_pred_1 = 0.0;
                                frontier_phi_120_pred_2 = 0.0;
                                frontier_phi_120_pred_3 = 0.0;
                                frontier_phi_120_pred_4 = 0.0;
                                frontier_phi_120_pred_5 = 0.0;
                            }
                            _3152 = frontier_phi_120_pred;
                            _3151 = frontier_phi_120_pred_1;
                            _3150 = frontier_phi_120_pred_2;
                            _3149 = frontier_phi_120_pred_3;
                            _3148 = frontier_phi_120_pred_4;
                            _3147 = frontier_phi_120_pred_5;
                            _2901 = _3150 + _2914;
                            _2902 = _3151 + _2915;
                            _2903 = _3152 + _2916;
                            _2898 = _3147 + _2911;
                            _2899 = _3148 + _2912;
                            _2900 = _3149 + _2913;
                            if (_2918 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2911 = _2898;
                                _2912 = _2899;
                                _2913 = _2900;
                                _2914 = _2901;
                                _2915 = _2902;
                                _2916 = _2903;
                                _2917 = _2918;
                                continue;
                            }
                        }
                        frontier_phi_114_pred = _2903;
                        frontier_phi_114_pred_1 = _2902;
                        frontier_phi_114_pred_2 = _2901;
                        frontier_phi_114_pred_3 = _2900;
                        frontier_phi_114_pred_4 = _2899;
                        frontier_phi_114_pred_5 = _2898;
                    }
                    _2572 = frontier_phi_114_pred;
                    _2570 = frontier_phi_114_pred_1;
                    _2568 = frontier_phi_114_pred_2;
                    _2566 = frontier_phi_114_pred_3;
                    _2564 = frontier_phi_114_pred_4;
                    _2562 = frontier_phi_114_pred_5;
                    uint _2746 = _2745 + 1u;
                    if (_2746 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2739 = _2562;
                        _2740 = _2564;
                        _2741 = _2566;
                        _2742 = _2568;
                        _2743 = _2570;
                        _2744 = _2572;
                        _2745 = _2746;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_94_95_ladder = _2568;
                frontier_phi_94_95_ladder_1 = _2572;
                frontier_phi_94_95_ladder_2 = _2570;
                frontier_phi_94_95_ladder_3 = _2566;
                frontier_phi_94_95_ladder_4 = _2564;
                frontier_phi_94_95_ladder_5 = _2562;
            }
            else
            {
                frontier_phi_94_95_ladder = _2419;
                frontier_phi_94_95_ladder_1 = _2423;
                frontier_phi_94_95_ladder_2 = _2421;
                frontier_phi_94_95_ladder_3 = _2417;
                frontier_phi_94_95_ladder_4 = _2415;
                frontier_phi_94_95_ladder_5 = _2413;
            }
            _2561 = frontier_phi_94_95_ladder_5;
            _2563 = frontier_phi_94_95_ladder_4;
            _2565 = frontier_phi_94_95_ladder_3;
            _2567 = frontier_phi_94_95_ladder;
            _2569 = frontier_phi_94_95_ladder_2;
            _2571 = frontier_phi_94_95_ladder_1;
        }
        float _2576 = isnan(1.0) ? _763 : (isnan(_763) ? 1.0 : min(_763, 1.0));
        _2318 = (_2576 * _2567) + _2048;
        _2320 = (_2576 * _2569) + _2049;
        _2322 = (_2576 * _2571) + _2050;
        _2324 = ((_2561 * 0.039999999105930328369140625) * _2576) + _2153;
        _2326 = ((_2563 * 0.039999999105930328369140625) * _2576) + _2154;
        _2328 = ((_2565 * 0.039999999105930328369140625) * _2576) + _2155;
    }
    else
    {
        _2318 = _2048;
        _2320 = _2049;
        _2322 = _2050;
        _2324 = _2153;
        _2326 = _2154;
        _2328 = _2155;
    }
    float _4138 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _4149 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _4160 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _2345 = ((isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_2318 + ((isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0))) * _763))) + ((_2324 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _1498)) * cbPerFrame._m0[3u].x);
    float _2346 = ((isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_2320 + ((isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))) * _763))) + ((_2326 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _1498)) * cbPerFrame._m0[3u].x);
    float _2347 = ((isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_2322 + ((isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))) * _763))) + ((_2328 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _1498)) * cbPerFrame._m0[3u].x);
    float _2348 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2349 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2350 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    uint _2351 = _737 + 6u;
    float _2359 = _723 / cbSceneParam._m0[86u].x;
    float _2360 = _724 / cbSceneParam._m0[86u].y;
    vec4 _2374 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2359, _2360, (log2((isnan(cbSceneParam._m0[77u].w) ? _697 : (isnan(_697) ? cbSceneParam._m0[77u].w : min(_697, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2376 = _2374.x;
    float _2377 = _2374.y;
    float _2378 = _2374.z;
    float _2379 = _2374.w;
    float _2475;
    float _2477;
    float _2479;
    float _2481;
    if (_697 > cbSceneParam._m0[78u].w)
    {
        float _2438 = isnan(_697) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _697 : min(cbSceneParam._m0[80u].w, _697));
        float _2439 = _2438 / _697;
        float _2450 = _2439 * _269;
        float _2451 = _270 * _2439;
        float _2452 = (-0.0) - _2451;
        float _2453 = _2439 * _271;
        float _2455 = (cbSceneParam._m0[77u].w * _2452) / _2438;
        float _2456 = _2455 + cbSceneParam._m0[79u].w;
        float _2457 = cbSceneParam._m0[79u].w - _2451;
        float _2463 = sqrt(((_2450 * _2450) + (_2451 * _2451)) + (_2453 * _2453));
        float _2466 = (1.0 - (cbSceneParam._m0[77u].w / _2438)) * _2463;
        float _2471 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2473 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2696;
        if (abs((_2452 - _2455) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2696 = ((((_2456 > 0.0) ? exp2(_2471 * _2456) : (2.0 - exp2(_2473 * _2456))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2466;
        }
        else
        {
            float _2619 = 1.0 / cbSceneParam._m0[80u].x;
            float _2620 = isnan(_2457) ? _2456 : (isnan(_2456) ? _2457 : max(_2456, _2457));
            float _2621 = isnan(_2457) ? _2456 : (isnan(_2456) ? _2457 : min(_2456, _2457));
            float _2630 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : min(_2620, 0.0));
            float _2631 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : min(_2621, 0.0));
            _2696 = ((abs(_2463 / _2452) * cbSceneParam._m0[80u].y) * ((((_2630 - _2631) * 2.0) - ((exp2(_2471 * (isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0)))) - exp2(_2471 * (isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0))))) * _2619)) - ((exp2(_2473 * _2630) - exp2(_2473 * _2631)) * _2619))) + (_2466 * cbSceneParam._m0[80u].z);
        }
        vec4 _2698 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2359, _2360, 1.0), 0.0);
        float _2707 = exp2((_2696 * (-1.44269502162933349609375)) * (1.0 - _2698.w));
        float _2708 = log2(_2707);
        float _2724 = log2(_2379);
        _2475 = (exp2(_2724 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2708 * cbSceneParam._m0[78u].x)) * _2698.x) / cbSceneParam._m0[78u].x)) + _2376;
        _2477 = (exp2(_2724 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2708 * cbSceneParam._m0[78u].y)) * _2698.y) / cbSceneParam._m0[78u].y)) + _2377;
        _2479 = (exp2(_2724 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2708 * cbSceneParam._m0[78u].z)) * _2698.z) / cbSceneParam._m0[78u].z)) + _2378;
        _2481 = _2707 * _2379;
    }
    else
    {
        _2475 = _2376;
        _2477 = _2377;
        _2479 = _2378;
        _2481 = _2379;
    }
    bool _2734;
    vec4 _2491;
    vec4 _2514;
    float _2516;
    float _2520;
    float _2521;
    float _2522;
    float _2523;
    bool _2534;
    for (;;)
    {
        _2491 = cbMatDynParam._m0[0u];
        float _2493 = roundEven(_2491.y);
        bool _2494 = _2493 == 3.0;
        float _2496 = log2(_2481);
        float _2503 = exp2(_2496 * cbSceneParam._m0[78u].x) * _2348;
        float _2504 = exp2(_2496 * cbSceneParam._m0[78u].y) * _2349;
        float _2505 = exp2(_2496 * cbSceneParam._m0[78u].z) * _2350;
        float _2512 = _711 + (-0.5);
        _2514 = cbMtdParam._m0[1u];
        _2516 = _2514.y * _2512;
        float _2519 = (_2493 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2520 = _2519 * (_2494 ? _2503 : (_2503 + (cbSceneParam._m0[72u].w * _2475)));
        _2521 = _2519 * (_2494 ? _2504 : (_2504 + (cbSceneParam._m0[72u].w * _2477)));
        _2522 = _2519 * (_2494 ? _2505 : (_2505 + (cbSceneParam._m0[72u].w * _2479)));
        _2523 = _2512 * 0.999000012874603271484375;
        _2534 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2534)
        {
            if ((cbInstanceData._m0[_737 + 7u].x + _2523) < 0.5)
            {
                _2734 = true;
                break;
            }
        }
        uint _2654 = _739 + uint(_2491.w);
        if ((cbInstanceData._m0[_2654].w < 1.0) && ((cbInstanceData._m0[_2654].w + _2523) < 0.5))
        {
            _2734 = true;
            break;
        }
        if ((_2516 + 1.0) < _2514.x)
        {
            _2734 = true;
            break;
        }
        _2734 = false;
        break;
    }
    float _2889;
    if (_2734)
    {
        discard_state = true;
        _2889 = 0.0;
    }
    else
    {
        _2889 = cbInstanceData._m0[_2351].w;
    }
    SV_Target.x = _2520;
    SV_Target.y = _2521;
    SV_Target.z = _2522;
    SV_Target.w = _2889;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2351].w;
    discard_exit();
}


