#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D M_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1092;
float _3093;
float _3094;
float _3095;
float _3096;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    vec4 _291 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _326 = cbMtdParam._m0[21u].w + _267;
    float _327 = cbMtdParam._m0[22u].x + _268;
    float _328 = cbMtdParam._m0[22u].y + _269;
    float _342 = (-0.0) - dot(vec3(_326, _327, _328), vec3(_195 * _188, _195 * _189, _195 * _190));
    float _343 = (-0.0) - dot(vec3(_326, _327, _328), vec3(_209 * TANGENT.x, _209 * TANGENT.y, _209 * TANGENT.z));
    float _344 = (-0.0) - dot(vec3(_326, _327, _328), vec3((-0.0) - (_202 * NORMAL.x), (-0.0) - (_202 * NORMAL.y), (-0.0) - (_202 * NORMAL.z)));
    float _348 = inversesqrt(dot(vec3(_342, _343, _344), vec3(_342, _343, _344)));
    float _351 = _348 * _344;
    float _352 = (_348 * _342) + (((_291.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _353 = (_348 * _343) + (((_291.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _354 = _352 * cbMtdParam._m0[18u].z;
    float _355 = _353 * cbMtdParam._m0[18u].y;
    float _356 = fract(TEXCOORD.x);
    float _357 = fract(TEXCOORD.y);
    float _363;
    if (_354 > 0.0)
    {
        _363 = (1.0 - _356) / _354;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_354 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _356) / _354;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _363 = frontier_phi_3_2_ladder;
    }
    float _371;
    if (_355 > 0.0)
    {
        _371 = (1.0 - _357) / _355;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_355 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _357) / _355;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _371 = frontier_phi_7_6_ladder;
    }
    bool _373 = _351 > 0.0;
    float _375 = _373 ? (cbMtdParam._m0[15u].x / _351) : 5000.0;
    float _376 = isnan(_371) ? _363 : (isnan(_363) ? _371 : min(_363, _371));
    float _377 = isnan(_375) ? _376 : (isnan(_376) ? _375 : min(_376, _375));
    float _381 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _382 = _356 + (-0.5);
    float _385 = _357 + (-0.5);
    float _388 = ((_377 * _351) + _381) / _381;
    vec4 _412 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_382 + (_377 * _354)) / _388) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_385 + (_377 * _355)) / _388) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _422 = cbMtdParam._m0[9u].x * _412.x;
    float _423 = cbMtdParam._m0[9u].y * _412.y;
    float _424 = cbMtdParam._m0[9u].z * _412.z;
    float _442 = _352 * cbMtdParam._m0[20u].z;
    float _443 = _353 * cbMtdParam._m0[20u].y;
    bool _444 = _442 > 0.0;
    float _449;
    if (_444)
    {
        _449 = (1.0 - _356) / _442;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_442 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _356) / _442;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _449 = frontier_phi_11_10_ladder;
    }
    bool _451 = _443 > 0.0;
    float _456;
    if (_451)
    {
        _456 = (1.0 - _357) / _443;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_443 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _357) / _443;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _456 = frontier_phi_15_14_ladder;
    }
    float _459 = _373 ? (cbMtdParam._m0[16u].x / _351) : 5000.0;
    float _460 = isnan(_456) ? _449 : (isnan(_449) ? _456 : min(_449, _456));
    float _461 = isnan(_459) ? _460 : (isnan(_460) ? _459 : min(_460, _459));
    float _465 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _469 = ((_461 * _351) + _465) / _465;
    float _474 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _476 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _492 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_382 + (_461 * _442)) / _469) + 0.5) + _474) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_385 + (_461 * _443)) / _469) + 0.5) + _476) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _504;
    if (_444)
    {
        _504 = (1.0 - _356) / _442;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_442 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _356) / _442;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _504 = frontier_phi_19_18_ladder;
    }
    float _510;
    if (_451)
    {
        _510 = (1.0 - _357) / _443;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_443 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _357) / _443;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _510 = frontier_phi_23_22_ladder;
    }
    float _512 = isnan(_510) ? _504 : (isnan(_504) ? _510 : min(_504, _510));
    float _513 = isnan(_459) ? _512 : (isnan(_512) ? _459 : min(_512, _459));
    float _520 = ((_513 * _351) + _465) / _465;
    vec4 _541 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_382 + (_513 * _442)) / _520) + 0.5) + _474) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_385 + (_513 * _443)) / _520) + 0.5) + _476) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _543 = _541.x;
    float _550 = (_543 * ((_492.x * cbMtdParam._m0[10u].x) - _422)) + _422;
    float _551 = (_543 * ((_492.y * cbMtdParam._m0[10u].y) - _423)) + _423;
    float _552 = (_543 * ((_492.z * cbMtdParam._m0[10u].z) - _424)) + _424;
    float _566 = _352 * cbMtdParam._m0[21u].x;
    float _567 = _353 * cbMtdParam._m0[20u].w;
    bool _568 = _566 > 0.0;
    float _573;
    if (_568)
    {
        _573 = (1.0 - _356) / _566;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_566 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _356) / _566;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _573 = frontier_phi_27_26_ladder;
    }
    bool _575 = _567 > 0.0;
    float _580;
    if (_575)
    {
        _580 = (1.0 - _357) / _567;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_567 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _357) / _567;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _580 = frontier_phi_31_30_ladder;
    }
    float _583 = _373 ? (cbMtdParam._m0[17u].z / _351) : 5000.0;
    float _584 = isnan(_580) ? _573 : (isnan(_573) ? _580 : min(_573, _580));
    float _585 = isnan(_583) ? _584 : (isnan(_584) ? _583 : min(_584, _583));
    float _589 = cbMtdParam._m0[17u].z * cbMtdParam._m0[15u].z;
    float _593 = ((_585 * _351) + _589) / _589;
    float _598 = cbMtdParam._m0[17u].y - cbMtdParam._m0[21u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    float _600 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    vec4 _617 = texture(sampler2D(M_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_382 + (_585 * _566)) / _593) + 0.5) + _598) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_385 + (_585 * _567)) / _593) + 0.5) + _600) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[7u].w));
    float _629;
    if (_568)
    {
        _629 = (1.0 - _356) / _566;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_566 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _356) / _566;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _629 = frontier_phi_35_34_ladder;
    }
    float _635;
    if (_575)
    {
        _635 = (1.0 - _357) / _567;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_567 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _357) / _567;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _635 = frontier_phi_39_38_ladder;
    }
    float _637 = isnan(_635) ? _629 : (isnan(_629) ? _635 : min(_629, _635));
    float _638 = isnan(_583) ? _637 : (isnan(_637) ? _583 : min(_637, _583));
    float _645 = ((_638 * _351) + _589) / _589;
    vec4 _665 = texture(sampler2D(M_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_382 + (_638 * _566)) / _645) + 0.5) + _598) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_385 + (_638 * _567)) / _645) + 0.5) + _600) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[8u].w));
    float _667 = _665.x;
    float _674 = (_667 * ((_617.x * cbMtdParam._m0[14u].x) - _550)) + _550;
    float _675 = (_667 * ((_617.y * cbMtdParam._m0[14u].y) - _551)) + _551;
    float _676 = (_667 * ((_617.z * cbMtdParam._m0[14u].z) - _552)) + _552;
    float _3155 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _3166 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _3177 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _695 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _699 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _700 = _267 * _699;
    float _701 = _268 * _699;
    float _702 = _269 * _699;
    vec4 _707 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _709 = _707.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _805 = sqrt(((_267 * _267) + (_268 * _268)) + (_269 * _269));
        float _812 = (cbMatDynParam._m0[5u].x * _805) + cbMatDynParam._m0[5u].y;
        float _3188 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _813 = isnan(1.0) ? _3188 : (isnan(_3188) ? 1.0 : min(_3188, 1.0));
        float _817 = (cbMatDynParam._m0[5u].z * _805) + cbMatDynParam._m0[5u].w;
        float _3199 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3199 : (isnan(_3199) ? 1.0 : min(_3199, 1.0))) - _813)) + _813) < ((_709 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _721 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _722 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _735 = uint(roundEven(NORMAL.w)) * 13u;
    uint _737 = _735 + 9u;
    uint _738 = _737 + uint(cbMatDynParam._m0[0u].w);
    float _744 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3155 : (isnan(_3155) ? 1.0 : min(_3155, 1.0)))) * cbInstanceData._m0[_738].x;
    float _745 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3166 : (isnan(_3166) ? 1.0 : min(_3166, 1.0)))) * cbInstanceData._m0[_738].y;
    float _746 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3177 : (isnan(_3177) ? 1.0 : min(_3177, 1.0)))) * cbInstanceData._m0[_738].z;
    float _3210 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _747 = isnan(1.0) ? _3210 : (isnan(_3210) ? 1.0 : min(_3210, 1.0));
    float _3221 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _748 = isnan(1.0) ? _3221 : (isnan(_3221) ? 1.0 : min(_3221, 1.0));
    float _3232 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _749 = isnan(1.0) ? _3232 : (isnan(_3232) ? 1.0 : min(_3232, 1.0));
    vec4 _758 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _721, cbSceneParam._m0[86u].y * _722));
    float _761 = _758.x * TEXCOORD.z;
    float _762 = (-0.0) - _700;
    float _763 = (-0.0) - _701;
    float _764 = (-0.0) - _702;
    float _786 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _790 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _794 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1091;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _879 = (cbModelParam._m0[37u].x * ((((fma(_794, cbModelParam._m0[26u].z, fma(_790, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _786)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _881 = (cbModelParam._m0[37u].y * ((((fma(_794, cbModelParam._m0[27u].z, fma(_790, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _786)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _882 = (((((fma(_794, cbModelParam._m0[28u].z, fma(_790, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _786)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_879, _881, _882), 0.0);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_879, _881, _882), 0.0);
        vec4 _899 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_879, _881, _882), 0.0);
        vec4 _906 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_879, _881, _882), 0.0);
        float _919 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_885.x + (-0.5));
        float _921 = _919 * (_885.y + (-0.5));
        float _922 = _919 * (_885.z + (-0.5));
        float _929 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_892.x + (-0.5));
        float _931 = _929 * (_892.y + (-0.5));
        float _932 = _929 * (_892.z + (-0.5));
        float _939 = exp2((_899.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_899.x + (-0.5));
        float _941 = _939 * (_899.y + (-0.5));
        float _942 = _939 * (_899.z + (-0.5));
        float _949 = exp2((_906.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_906.x + (-0.5));
        float _951 = _949 * (_906.y + (-0.5));
        float _952 = _949 * (_906.z + (-0.5));
        float _953 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _954 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = _920 * 0.5;
        float _957 = _930 * 0.5;
        float _958 = _940 * 0.5;
        float _959 = dot(vec3(_956, _957, _958), vec3(_956, _957, _958));
        float _964 = (_959 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_959);
        float _973 = (dot(vec3(0.0), vec3(_964 * _956, _964 * _957, _964 * _958)) + 1.0) * 0.5;
        float _3258 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _983 = sqrt(((_957 * _957) + (_956 * _956)) + (_958 * _958)) / (_953 + 9.9999997473787516355514526367188e-06);
        float _3269 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0));
        float _985 = _984 * 2.0;
        float _989 = (1.0 - _984) / (_984 + 1.0);
        float _3280 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0));
        float _999 = ((((1.0 - _990) * (_985 + 2.0)) * exp2(log2(isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0))) * (_985 + 1.0))) + _990) * _953;
        float _1000 = _921 * 0.5;
        float _1001 = _931 * 0.5;
        float _1002 = _941 * 0.5;
        float _1003 = dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002));
        float _1008 = (_1003 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1003);
        float _1016 = (dot(vec3(0.0), vec3(_1008 * _1000, _1008 * _1001, _1008 * _1002)) + 1.0) * 0.5;
        float _3291 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1025 = sqrt(((_1001 * _1001) + (_1000 * _1000)) + (_1002 * _1002)) / (_954 + 9.9999997473787516355514526367188e-06);
        float _3302 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0));
        float _1027 = _1026 * 2.0;
        float _1031 = (1.0 - _1026) / (_1026 + 1.0);
        float _3313 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
        float _1041 = ((((1.0 - _1032) * (_1027 + 2.0)) * exp2(log2(isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0))) * (_1027 + 1.0))) + _1032) * _954;
        float _1042 = _922 * 0.5;
        float _1043 = _932 * 0.5;
        float _1044 = _942 * 0.5;
        float _1045 = dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044));
        float _1050 = (_1045 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1045);
        float _1058 = (dot(vec3(0.0), vec3(_1050 * _1042, _1050 * _1043, _1050 * _1044)) + 1.0) * 0.5;
        float _3324 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1067 = sqrt(((_1043 * _1043) + (_1042 * _1042)) + (_1044 * _1044)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _3335 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
        float _1069 = _1068 * 2.0;
        float _1073 = (1.0 - _1068) / (_1068 + 1.0);
        float _3346 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
        float _1083 = ((((1.0 - _1074) * (_1069 + 2.0)) * exp2(log2(isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0))) * (_1069 + 1.0))) + _1074) * _955;
        _1091 = _922;
        _1093 = _921;
        _1094 = _920;
        _1095 = _932;
        _1096 = _931;
        _1097 = _930;
        _1098 = _942;
        _1099 = _941;
        _1100 = _940;
        _1101 = _955;
        _1102 = _954;
        _1103 = _953;
        _1104 = cbModelParam._m0[36u].z * (isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0)));
        _1105 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0)));
        _1106 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0)));
    }
    else
    {
        _1091 = _1092;
        _1093 = _1092;
        _1094 = _1092;
        _1095 = _1092;
        _1096 = _1092;
        _1097 = _1092;
        _1098 = _1092;
        _1099 = _1092;
        _1100 = _1092;
        _1101 = _1092;
        _1102 = _1092;
        _1103 = _1092;
        _1104 = 0.0;
        _1105 = 0.0;
        _1106 = 0.0;
    }
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1163 = (cbModelParam._m0[38u].x * ((((fma(_794, cbModelParam._m0[30u].z, fma(_790, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _786)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1164 = (cbModelParam._m0[38u].y * ((((fma(_794, cbModelParam._m0[31u].z, fma(_790, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _786)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1165 = (((((fma(_794, cbModelParam._m0[32u].z, fma(_790, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _786)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        float _1200 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1167.x + (-0.5));
        float _1202 = _1200 * (_1167.y + (-0.5));
        float _1203 = _1200 * (_1167.z + (-0.5));
        float _1210 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1174.x + (-0.5));
        float _1212 = _1210 * (_1174.y + (-0.5));
        float _1213 = _1210 * (_1174.z + (-0.5));
        float _1220 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1181.x + (-0.5));
        float _1222 = _1220 * (_1181.y + (-0.5));
        float _1223 = _1220 * (_1181.z + (-0.5));
        float _1230 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1188.x + (-0.5));
        float _1232 = _1230 * (_1188.y + (-0.5));
        float _1233 = _1230 * (_1188.z + (-0.5));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = _1201 * 0.5;
        float _1238 = _1211 * 0.5;
        float _1239 = _1221 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1253 = (dot(vec3(0.0), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _3387 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1262 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _3398 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _3409 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0))) * (_1264 + 1.0))) + _1269) * _1234;
        float _1279 = _1202 * 0.5;
        float _1280 = _1212 * 0.5;
        float _1281 = _1222 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(0.0), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _3420 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _3431 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _3442 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0))) * (_1306 + 1.0))) + _1311) * _1235;
        float _1321 = _1203 * 0.5;
        float _1322 = _1213 * 0.5;
        float _1323 = _1223 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1337 = (dot(vec3(0.0), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _3453 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1346 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _3464 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _3475 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0))) * (_1348 + 1.0))) + _1353) * _1236;
        _1370 = _1203;
        _1371 = _1202;
        _1372 = _1201;
        _1373 = _1213;
        _1374 = _1212;
        _1375 = _1211;
        _1376 = _1223;
        _1377 = _1222;
        _1378 = _1221;
        _1379 = _1236;
        _1380 = _1235;
        _1381 = _1234;
        _1382 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
        _1383 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
        _1384 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
    }
    else
    {
        _1370 = _1092;
        _1371 = _1092;
        _1372 = _1092;
        _1373 = _1092;
        _1374 = _1092;
        _1375 = _1092;
        _1376 = _1092;
        _1377 = _1092;
        _1378 = _1092;
        _1379 = _1092;
        _1380 = _1092;
        _1381 = _1092;
        _1382 = 0.0;
        _1383 = 0.0;
        _1384 = 0.0;
    }
    float _1394 = (cbModelParam._m0[1u].x * (_1382 - _1104)) + _1104;
    float _1395 = (cbModelParam._m0[1u].x * (_1383 - _1105)) + _1105;
    float _1396 = (cbModelParam._m0[1u].x * (_1384 - _1106)) + _1106;
    float _1417 = fma(_1396, cbSceneParam._m0[89u].z, fma(_1395, cbSceneParam._m0[89u].y, _1394 * cbSceneParam._m0[89u].x));
    float _1420 = fma(_1396, cbSceneParam._m0[90u].z, fma(_1395, cbSceneParam._m0[90u].y, _1394 * cbSceneParam._m0[90u].x));
    float _1423 = fma(_1396, cbSceneParam._m0[91u].z, fma(_1395, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1394));
    float _1438 = _700 * (-0.5);
    float _1439 = _701 * (-0.5);
    float _1440 = _702 * (-0.5);
    float _1441 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1372, _1375, _1378, _1381));
    float _1444 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1371, _1374, _1377, _1380));
    float _1447 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1370, _1373, _1376, _1379));
    float _1481;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1454 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1091, _1095, _1098, _1101));
        float _1458 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1093, _1096, _1099, _1102));
        float _1462 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1094, _1097, _1100, _1103));
        float _1469 = dot(vec4(cbModelParam._m0[39u]), vec4(_1438, _1439, _1440, 1.0));
        _1481 = dot(vec3(isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)), isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)), isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1469) ? 0.0 : (isnan(0.0) ? _1469 : max(0.0, _1469))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1481 = 1.0;
    }
    float _1492;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1483 = dot(vec4(cbModelParam._m0[40u]), vec4(_1438, _1439, _1440, 1.0));
        _1492 = dot(vec3(isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)), isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1483) ? 0.0 : (isnan(0.0) ? _1483 : max(0.0, _1483))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1492 = 1.0;
    }
    float _1496 = (_1492 * cbModelParam._m0[1u].x) + (_1481 * (1.0 - cbModelParam._m0[1u].x));
    float _1505 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1585;
    float _1587;
    float _1589;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1552 = fma(_794, cbModelParam._m0[13u].z, fma(_790, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _786)) + cbModelParam._m0[13u].w;
        float _1556 = fma(_794, cbModelParam._m0[14u].z, fma(_790, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _786)) + cbModelParam._m0[14u].w;
        float _1560 = fma(_794, cbModelParam._m0[15u].z, fma(_790, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _786)) + cbModelParam._m0[15u].w;
        float _1563 = fma(_764, cbModelParam._m0[13u].z, fma(_763, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _762));
        float _1566 = fma(_764, cbModelParam._m0[14u].z, fma(_763, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _762));
        float _1569 = fma(_764, cbModelParam._m0[15u].z, fma(_763, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _762));
        float _1595;
        if (_1563 > 0.0)
        {
            _1595 = abs((1.0 - _1552) / _1563);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1563 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1552 + 1.0) / _1563);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1595 = frontier_phi_57_55_ladder;
        }
        float _1915;
        if (_1566 > 0.0)
        {
            _1915 = abs((1.0 - _1556) / _1566);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1566 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1556 + 1.0) / _1566);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _1915 = frontier_phi_66_62_ladder;
        }
        float _2226;
        if (_1569 > 0.0)
        {
            _2226 = abs((1.0 - _1560) / _1569);
        }
        else
        {
            float frontier_phi_80_73_ladder;
            if (_1569 < 0.0)
            {
                frontier_phi_80_73_ladder = abs((_1560 + 1.0) / _1569);
            }
            else
            {
                frontier_phi_80_73_ladder = 5000.0;
            }
            _2226 = frontier_phi_80_73_ladder;
        }
        float _2228 = isnan(_1915) ? _1595 : (isnan(_1595) ? _1915 : min(_1595, _1915));
        float _2229 = isnan(_2226) ? _2228 : (isnan(_2228) ? _2226 : min(_2228, _2226));
        float _2233 = (_2229 * _1563) + _1552;
        float _2234 = (_2229 * _1566) + _1556;
        float _2235 = (_2229 * _1569) + _1560;
        float _2236 = _2229 * 9.9999997473787516355514526367188e-05;
        float _2237 = (-1.0) - _2236;
        float _2239 = _2236 + 1.0;
        float frontier_phi_56_80_ladder;
        float frontier_phi_56_80_ladder_1;
        float frontier_phi_56_80_ladder_2;
        if ((_2235 > _2239) || ((_2235 < _2237) || ((_2234 > _2239) || ((_2234 < _2237) || ((_2233 < _2237) || (_2233 > _2239))))))
        {
            frontier_phi_56_80_ladder = 0.0;
            frontier_phi_56_80_ladder_1 = 0.0;
            frontier_phi_56_80_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2374 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2235, cbModelParam._m0[9u].z, fma(_2234, cbModelParam._m0[9u].y, _2233 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2235, cbModelParam._m0[10u].z, fma(_2234, cbModelParam._m0[10u].y, _2233 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2235, cbModelParam._m0[11u].z, fma(_2234, cbModelParam._m0[11u].y, _2233 * cbModelParam._m0[11u].x))), _1505);
            frontier_phi_56_80_ladder = _2374.z * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_1 = _2374.y * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_2 = _2374.x * cbModelParam._m0[1u].y;
        }
        _1585 = frontier_phi_56_80_ladder_2;
        _1587 = frontier_phi_56_80_ladder_1;
        _1589 = frontier_phi_56_80_ladder;
    }
    else
    {
        vec4 _1573 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_762, _763, _764), _1505);
        _1585 = _1573.x * cbModelParam._m0[1u].y;
        _1587 = _1573.y * cbModelParam._m0[1u].y;
        _1589 = _1573.z * cbModelParam._m0[1u].y;
    }
    float _1592 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1680;
    float _1682;
    float _1684;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1644 = fma(_794, cbModelParam._m0[21u].z, fma(_790, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _786)) + cbModelParam._m0[21u].w;
        float _1648 = fma(_794, cbModelParam._m0[22u].z, fma(_790, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _786)) + cbModelParam._m0[22u].w;
        float _1652 = fma(_794, cbModelParam._m0[23u].z, fma(_790, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _786)) + cbModelParam._m0[23u].w;
        float _1655 = fma(_764, cbModelParam._m0[21u].z, fma(_763, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _762));
        float _1658 = fma(_764, cbModelParam._m0[22u].z, fma(_763, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _762));
        float _1661 = fma(_764, cbModelParam._m0[23u].z, fma(_763, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _762));
        float _1920;
        if (_1655 > 0.0)
        {
            _1920 = abs((1.0 - _1644) / _1655);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1644 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _1920 = frontier_phi_68_64_ladder;
        }
        float _2252;
        if (_1658 > 0.0)
        {
            _2252 = abs((1.0 - _1648) / _1658);
        }
        else
        {
            float frontier_phi_82_75_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_82_75_ladder = abs((_1648 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_82_75_ladder = 5000.0;
            }
            _2252 = frontier_phi_82_75_ladder;
        }
        float _2439;
        if (_1661 > 0.0)
        {
            _2439 = abs((1.0 - _1652) / _1661);
        }
        else
        {
            float frontier_phi_100_93_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_100_93_ladder = abs((_1652 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_100_93_ladder = 5000.0;
            }
            _2439 = frontier_phi_100_93_ladder;
        }
        float _2441 = isnan(_2252) ? _1920 : (isnan(_1920) ? _2252 : min(_1920, _2252));
        float _2442 = isnan(_2439) ? _2441 : (isnan(_2441) ? _2439 : min(_2441, _2439));
        float _2446 = (_2442 * _1655) + _1644;
        float _2447 = (_2442 * _1658) + _1648;
        float _2448 = (_2442 * _1661) + _1652;
        float _2449 = _2442 * 9.9999997473787516355514526367188e-05;
        float _2450 = (-1.0) - _2449;
        float _2452 = _2449 + 1.0;
        float frontier_phi_65_100_ladder;
        float frontier_phi_65_100_ladder_1;
        float frontier_phi_65_100_ladder_2;
        if ((_2448 > _2452) || ((_2448 < _2450) || ((_2447 > _2452) || ((_2447 < _2450) || ((_2446 < _2450) || (_2446 > _2452))))))
        {
            frontier_phi_65_100_ladder = 0.0;
            frontier_phi_65_100_ladder_1 = 0.0;
            frontier_phi_65_100_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2640 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2448, cbModelParam._m0[17u].z, fma(_2447, cbModelParam._m0[17u].y, _2446 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2448, cbModelParam._m0[18u].z, fma(_2447, cbModelParam._m0[18u].y, _2446 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2448, cbModelParam._m0[19u].z, fma(_2447, cbModelParam._m0[19u].y, _2446 * cbModelParam._m0[19u].x))), _1592);
            frontier_phi_65_100_ladder = _2640.y * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_1 = _2640.x * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_2 = _2640.z * cbModelParam._m0[1u].z;
        }
        _1680 = frontier_phi_65_100_ladder_1;
        _1682 = frontier_phi_65_100_ladder;
        _1684 = frontier_phi_65_100_ladder_2;
    }
    else
    {
        vec4 _1664 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_762, _763, _764), _1592);
        _1680 = _1664.x * cbModelParam._m0[1u].z;
        _1682 = _1664.y * cbModelParam._m0[1u].z;
        _1684 = _1664.z * cbModelParam._m0[1u].z;
    }
    float _1696 = _761 * 0.01200000010430812835693359375;
    float _1698 = _1696 * ((cbModelParam._m0[1u].w * (_1680 - _1585)) + _1585);
    float _1699 = _1696 * ((cbModelParam._m0[1u].w * (_1682 - _1587)) + _1587);
    float _1700 = _1696 * ((cbModelParam._m0[1u].w * (_1684 - _1589)) + _1589);
    float _1703 = fma(_1700, cbSceneParam._m0[89u].z, fma(_1699, cbSceneParam._m0[89u].y, _1698 * cbSceneParam._m0[89u].x));
    float _1706 = fma(_1700, cbSceneParam._m0[90u].z, fma(_1699, cbSceneParam._m0[90u].y, _1698 * cbSceneParam._m0[90u].x));
    float _1709 = fma(_1700, cbSceneParam._m0[91u].z, fma(_1699, cbSceneParam._m0[91u].y, _1698 * cbSceneParam._m0[91u].x));
    vec4 _1717 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_721, _722));
    float _1719 = _1717.w;
    float _1732 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1719);
    float _1733 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1719);
    float _1734 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1719);
    uvec4 _1738 = floatBitsToUint(cbInstanceData._m0[_735 + 5u]);
    uint _1740 = _1738.x * 14u;
    uint _1741 = _1740 + 13u;
    float _1746 = _761 + (-1.0);
    float _1749 = (cbLight._m0[_1741].x * _1746) + 1.0;
    float _1750 = (cbLight._m0[_1741].y * _1746) + 1.0;
    uint _1751 = _1740 + 5u;
    float _1757 = isnan(1.0) ? _1750 : (isnan(_1750) ? 1.0 : min(_1750, 1.0));
    uint _1761 = _1740 + 4u;
    float _1770 = isnan(1.0) ? _1749 : (isnan(_1749) ? 1.0 : min(_1749, 1.0));
    uint _1774 = _1740 | 1u;
    float _1785 = dot(vec3(cbLight._m0[_1740].xyz), vec3(0.0));
    float _1788 = dot(vec3(cbLight._m0[_1774].xyz), vec3(0.0));
    float _3611 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _3622 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1793 = (isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) * 0.3183098733425140380859375;
    float _1795 = (isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * 0.3183098733425140380859375;
    float _1802 = ((cbLight._m0[_1751].x * _1757) * _1795) + (((cbLight._m0[_1761].x * _1732) * _1770) * _1793);
    float _1803 = ((_1757 * cbLight._m0[_1751].y) * _1795) + (((cbLight._m0[_1761].y * _1733) * _1770) * _1793);
    float _1804 = ((_1757 * cbLight._m0[_1751].z) * _1795) + (((cbLight._m0[_1761].z * _1734) * _1770) * _1793);
    uint _1805 = _1740 + 8u;
    float _1811 = cbLight._m0[_1740].x + _700;
    float _1812 = cbLight._m0[_1740].y + _701;
    float _1813 = cbLight._m0[_1740].z + _702;
    float _1817 = inversesqrt(dot(vec3(_1811, _1812, _1813), vec3(_1811, _1812, _1813)));
    float _1821 = dot(vec3(0.0), vec3(cbLight._m0[_1740].xyz));
    float _3633 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
    float _1824 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
    float _1825 = dot(vec3(0.0), vec3(_700, _701, _702));
    float _3644 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1828 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
    float _1829 = dot(vec3(cbLight._m0[_1740].xyz), vec3(_1811 * _1817, _1812 * _1817, _1813 * _1817));
    float _3655 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1840 = (exp2(log2(1.0 - (isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1846 = (0.5 / ((_1824 + 9.9999999392252902907785028219223e-09) + _1828)) * _1824;
    float _3666 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
    float _1848 = (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * 0.31831014156341552734375;
    uint _1862 = _1740 + 9u;
    float _1868 = cbLight._m0[_1774].x + _700;
    float _1869 = cbLight._m0[_1774].y + _701;
    float _1870 = cbLight._m0[_1774].z + _702;
    float _1874 = inversesqrt(dot(vec3(_1868, _1869, _1870), vec3(_1868, _1869, _1870)));
    float _1878 = dot(vec3(0.0), vec3(cbLight._m0[_1774].xyz));
    float _3677 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _1881 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    float _1882 = dot(vec3(cbLight._m0[_1774].xyz), vec3(_1868 * _1874, _1869 * _1874, _1870 * _1874));
    float _3688 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _1891 = (exp2(log2(1.0 - (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1895 = (0.5 / ((_1881 + 9.9999999392252902907785028219223e-09) + _1828)) * _1881;
    float _3699 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1897 = (isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * 0.31831014156341552734375;
    float _1907 = (((_1891 * cbLight._m0[_1862].x) * _1897) * _1757) + ((((cbLight._m0[_1805].x * _1732) * _1840) * _1848) * _1770);
    float _1908 = (((_1891 * cbLight._m0[_1862].y) * _1897) * _1757) + ((((cbLight._m0[_1805].y * _1733) * _1840) * _1848) * _1770);
    float _1909 = (((_1891 * cbLight._m0[_1862].z) * _1897) * _1757) + ((((cbLight._m0[_1805].z * _1734) * _1840) * _1848) * _1770);
    float _2025;
    float _2027;
    float _2029;
    float _2031;
    float _2033;
    float _2035;
    if (_1738.y == 0u)
    {
        float _1965 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1966 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1965;
        float _1967 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1965;
        float _1968 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1965;
        uvec4 _1980 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1981 = _1980.x;
        uint _1992 = uint((float(_1980.y) * floor(float(uint(cbSceneParam._m0[85u].y * _722) / _1981))) + floor(float(uint(cbSceneParam._m0[85u].x * _721) / _1981)));
        float _2002 = (log2(_1968 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2003 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        uint _2006 = uint(isnan(14.0) ? _2003 : (isnan(_2003) ? 14.0 : min(_2003, 14.0)));
        uvec4 _2011 = texelFetch(g_lightClusterGridBuffer, int(((_2006 << 2u) + (_1992 << 6u)) >> 2u));
        uint _2012 = _2011.x;
        uint _2013 = _1980.z;
        float _2103;
        float _2105;
        float _2107;
        float _2109;
        float _2111;
        float _2113;
        if (((((1u << ((_2013 >> 4u) & 15u)) + 4294967295u) & _2012) == 0u) || ((_2013 & 240u) == 0u))
        {
            _2103 = 0.0;
            _2105 = 0.0;
            _2107 = 0.0;
            _2109 = 0.0;
            _2111 = 0.0;
            _2113 = 0.0;
        }
        else
        {
            float _2104;
            float _2106;
            float _2108;
            float _2110;
            float _2112;
            float _2114;
            float _2286 = 0.0;
            float _2287 = 0.0;
            float _2288 = 0.0;
            float _2289 = 0.0;
            float _2290 = 0.0;
            float _2291 = 0.0;
            uint _2292 = 0u;
            uint _2301;
            bool _2302;
            for (;;)
            {
                _2301 = texelFetch(g_lightClassification, int((((_2006 << 5u) + (_1992 << 9u)) + (_2292 << 2u)) >> 2u)).x;
                _2302 = _2301 == 0u;
                float frontier_phi_95_pred;
                float frontier_phi_95_pred_1;
                float frontier_phi_95_pred_2;
                float frontier_phi_95_pred_3;
                float frontier_phi_95_pred_4;
                float frontier_phi_95_pred_5;
                if (_2302)
                {
                    frontier_phi_95_pred = _2287;
                    frontier_phi_95_pred_1 = _2286;
                    frontier_phi_95_pred_2 = _2288;
                    frontier_phi_95_pred_3 = _2291;
                    frontier_phi_95_pred_4 = _2290;
                    frontier_phi_95_pred_5 = _2289;
                }
                else
                {
                    float _2482;
                    float _2483;
                    float _2484;
                    float _2485;
                    float _2486;
                    float _2487;
                    uint _2488;
                    _2482 = _2286;
                    _2483 = _2287;
                    _2484 = _2288;
                    _2485 = _2289;
                    _2486 = _2290;
                    _2487 = _2291;
                    _2488 = _2301;
                    float _2383;
                    float _2384;
                    float _2385;
                    float _2386;
                    float _2387;
                    float _2388;
                    for (;;)
                    {
                        uint _2492 = uint(findLSB(_2488)) + (_2292 << 5u);
                        uint _2489 = (_2488 + 4294967295u) & _2488;
                        uint _2494 = _2492 * 48u;
                        vec4 _2508 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2494)).x, texelFetch(g_PointLightRenderingBuffer, int(_2494 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2494 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2494 + 3u)).x));
                        uint _2514 = (_2492 * 48u) + 4u;
                        vec4 _2527 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2514)).x, texelFetch(g_PointLightRenderingBuffer, int(_2514 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2514 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2514 + 3u)).x));
                        uint _2533 = (_2492 * 48u) + 8u;
                        vec3 _2544 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2533)).x, texelFetch(g_PointLightRenderingBuffer, int(_2533 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2533 + 2u)).x));
                        float _2548 = _2508.x - _1966;
                        float _2549 = _2508.y - _1967;
                        float _2550 = _2508.z - _1968;
                        float _2551 = dot(vec3(_2548, _2549, _2550), vec3(_2548, _2549, _2550));
                        float _2554 = inversesqrt(_2551);
                        float _2563 = 1.0 - (_2551 * _2508.w);
                        float _3720 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
                        float _2564 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
                        float _2565 = sqrt(_2551) * _2527.w;
                        float _2568 = 1.39999997615814208984375 / (_2565 + 1.39999997615814208984375);
                        float _2569 = _2568 * _2568;
                        float _2572 = ((1.0 - _2569) * dot(vec3(0.0), vec3(_2554 * _2548, _2554 * _2549, _2554 * _2550))) + _2569;
                        float _2575 = _2565 * _2565;
                        float _2579 = ((isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0))) * _2564) / ((_2575 * 0.699999988079071044921875) + 1.0);
                        float _2583 = (-0.0) - _1966;
                        float _2584 = (-0.0) - _1967;
                        float _2585 = (-0.0) - _1968;
                        float _2589 = inversesqrt(dot(vec3(_2583, _2584, _2585), vec3(_2583, _2584, _2585)));
                        float _2593 = dot(vec3(0.0), vec3(_2589 * _2583, _2589 * _2584, _2589 * _2585));
                        float _3736 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
                        float _3747 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
                        float _2597 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
                        float _2601 = (0.5 / (((isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) + 9.9999999392252902907785028219223e-09) + _2597)) * _2597;
                        float _3758 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
                        float _2610 = (((isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * 3.1415927410125732421875) / ((_2575 * 2.1991131305694580078125) + 3.141590118408203125)) * _2564;
                        _2386 = (_2579 * _2527.x) + _2485;
                        _2387 = (_2579 * _2527.y) + _2486;
                        _2388 = (_2579 * _2527.z) + _2487;
                        _2383 = (_2610 * _2544.x) + _2482;
                        _2384 = (_2610 * _2544.y) + _2483;
                        _2385 = (_2610 * _2544.z) + _2484;
                        if (_2489 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2482 = _2383;
                            _2483 = _2384;
                            _2484 = _2385;
                            _2485 = _2386;
                            _2486 = _2387;
                            _2487 = _2388;
                            _2488 = _2489;
                        }
                    }
                    frontier_phi_95_pred = _2384;
                    frontier_phi_95_pred_1 = _2383;
                    frontier_phi_95_pred_2 = _2385;
                    frontier_phi_95_pred_3 = _2388;
                    frontier_phi_95_pred_4 = _2387;
                    frontier_phi_95_pred_5 = _2386;
                }
                _2106 = frontier_phi_95_pred;
                _2104 = frontier_phi_95_pred_1;
                _2108 = frontier_phi_95_pred_2;
                _2114 = frontier_phi_95_pred_3;
                _2112 = frontier_phi_95_pred_4;
                _2110 = frontier_phi_95_pred_5;
                uint _2293 = _2292 + 1u;
                if (_2293 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2286 = _2104;
                    _2287 = _2106;
                    _2288 = _2108;
                    _2289 = _2110;
                    _2290 = _2112;
                    _2291 = _2114;
                    _2292 = _2293;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2103 = _2104;
            _2105 = _2106;
            _2107 = _2108;
            _2109 = _2110;
            _2111 = _2112;
            _2113 = _2114;
        }
        uvec4 _2117 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2118 = _2117.z;
        uint _2120 = (_2118 >> 8u) & 15u;
        float _2257;
        float _2259;
        float _2261;
        float _2263;
        float _2265;
        float _2267;
        if (((4294967295u << _2120) & _2012) == 0u)
        {
            _2257 = _2103;
            _2259 = _2105;
            _2261 = _2107;
            _2263 = _2109;
            _2265 = _2111;
            _2267 = _2113;
        }
        else
        {
            float _2282 = inversesqrt(dot(vec3(_1966, _1967, _1968), vec3(_1966, _1967, _1968)));
            float frontier_phi_84_85_ladder;
            float frontier_phi_84_85_ladder_1;
            float frontier_phi_84_85_ladder_2;
            float frontier_phi_84_85_ladder_3;
            float frontier_phi_84_85_ladder_4;
            float frontier_phi_84_85_ladder_5;
            if (_2120 < ((_2118 >> 12u) & 15u))
            {
                float _2258;
                float _2260;
                float _2262;
                float _2264;
                float _2266;
                float _2268;
                float _2465 = _2103;
                float _2466 = _2105;
                float _2467 = _2107;
                float _2468 = _2109;
                float _2469 = _2111;
                float _2470 = _2113;
                uint _2471 = _2120;
                uint _2480;
                bool _2481;
                for (;;)
                {
                    _2480 = texelFetch(g_lightClassification, int((((_2006 << 5u) + (_1992 << 9u)) + (_2471 << 2u)) >> 2u)).x;
                    _2481 = _2480 == 0u;
                    float frontier_phi_109_pred;
                    float frontier_phi_109_pred_1;
                    float frontier_phi_109_pred_2;
                    float frontier_phi_109_pred_3;
                    float frontier_phi_109_pred_4;
                    float frontier_phi_109_pred_5;
                    if (_2481)
                    {
                        frontier_phi_109_pred = _2466;
                        frontier_phi_109_pred_1 = _2465;
                        frontier_phi_109_pred_2 = _2470;
                        frontier_phi_109_pred_3 = _2469;
                        frontier_phi_109_pred_4 = _2468;
                        frontier_phi_109_pred_5 = _2467;
                    }
                    else
                    {
                        float _2645;
                        float _2646;
                        float _2647;
                        float _2648;
                        float _2649;
                        float _2650;
                        float _2894;
                        float _2895;
                        float _2896;
                        float _2897;
                        float _2898;
                        float _2899;
                        float _2658 = _2465;
                        float _2659 = _2466;
                        float _2660 = _2467;
                        float _2661 = _2468;
                        float _2662 = _2469;
                        float _2663 = _2470;
                        uint _2664 = _2480;
                        uint _2665;
                        vec4 _2690;
                        float _2691;
                        vec4 _2706;
                        vec3 _2718;
                        vec4 _2733;
                        vec4 _2748;
                        float _2794;
                        bool _2795;
                        for (;;)
                        {
                            uint _2675 = ((_2471 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2664));
                            _2665 = (_2664 + 4294967295u) & _2664;
                            uint _2677 = _2675 * 40u;
                            _2690 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2677)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2677 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2677 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2677 + 3u)).x));
                            _2691 = _2690.w;
                            uint _2693 = (_2675 * 40u) + 4u;
                            _2706 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2693)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2693 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2693 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2693 + 3u)).x));
                            uint _2708 = (_2675 * 40u) + 8u;
                            _2718 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2708)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2708 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2708 + 2u)).x));
                            uint _2720 = (_2675 * 40u) + 16u;
                            _2733 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2720)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2720 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2720 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2720 + 3u)).x));
                            uint _2735 = (_2675 * 40u) + 20u;
                            _2748 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2735)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 3u)).x));
                            uint _2750 = (_2675 * 40u) + 24u;
                            vec4 _2763 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2750)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2750 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2750 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2750 + 3u)).x));
                            uint _2769 = (_2675 * 40u) + 28u;
                            vec4 _2782 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2769)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2769 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2769 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2769 + 3u)).x));
                            _2794 = fma(_1968, _2782.z, fma(_1967, _2782.y, _2782.x * _1966)) + _2782.w;
                            _2795 = !((fma(_1968, _2763.z, fma(_1967, _2763.y, _2763.x * _1966)) + _2763.w) <= 0.0);
                            float frontier_phi_115_pred;
                            float frontier_phi_115_pred_1;
                            float frontier_phi_115_pred_2;
                            float frontier_phi_115_pred_3;
                            float frontier_phi_115_pred_4;
                            float frontier_phi_115_pred_5;
                            if (_2795)
                            {
                                float _2822 = _2690.x - _1966;
                                float _2823 = _2690.y - _1967;
                                float _2824 = _2690.z - _1968;
                                float _2825 = dot(vec3(_2822, _2823, _2824), vec3(_2822, _2823, _2824));
                                float _2828 = inversesqrt(_2825);
                                float _2829 = _2828 * _2822;
                                float _2830 = _2828 * _2823;
                                float _2831 = _2828 * _2824;
                                float _2835 = 1.0 - (_2825 / (_2691 * _2691));
                                float _3769 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
                                float _2836 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
                                float _2840 = sqrt(_2825) * _2706.w;
                                float _2842 = 1.39999997615814208984375 / (_2840 + 1.39999997615814208984375);
                                float _2843 = _2842 * _2842;
                                float _2844 = 1.0 - _2843;
                                float _2846 = (_2844 * dot(vec3(_2829, _2830, _2831), vec3(0.0))) + _2843;
                                float _2849 = _2840 * _2840;
                                float _2853 = (fma(_1968, _2733.z, fma(_1967, _2733.y, _2733.x * _1966)) + _2733.w) / _2794;
                                float _2854 = (fma(_1968, _2748.z, fma(_1967, _2748.y, _2748.x * _1966)) + _2748.w) / _2794;
                                float _2858 = 1.0 - dot(vec2(_2853, _2854), vec2(_2853, _2854));
                                float _3785 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
                                float _2859 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
                                float _2860 = _2859 * (((isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0))) * _2836) / ((_2849 * 0.699999988079071044921875) + 1.0));
                                float _2870 = dot(vec3(0.0), vec3((-0.0) - (_1966 * _2282), (-0.0) - (_1967 * _2282), (-0.0) - (_1968 * _2282)));
                                float _3796 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
                                float _2878 = (_2844 * dot(vec3(0.0), vec3(_2829, _2830, _2831))) + _2843;
                                float _3807 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
                                float _2879 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
                                float _2883 = (0.5 / (((isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) + 9.9999999392252902907785028219223e-09) + _2879)) * _2879;
                                float _3818 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
                                float _2890 = (_2859 * _2836) * (((isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * 3.1415927410125732421875) / ((_2849 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_115_pred = _2860 * _2706.y;
                                frontier_phi_115_pred_1 = _2860 * _2706.x;
                                frontier_phi_115_pred_2 = _2890 * _2718.z;
                                frontier_phi_115_pred_3 = _2890 * _2718.y;
                                frontier_phi_115_pred_4 = _2890 * _2718.x;
                                frontier_phi_115_pred_5 = _2860 * _2706.z;
                            }
                            else
                            {
                                frontier_phi_115_pred = 0.0;
                                frontier_phi_115_pred_1 = 0.0;
                                frontier_phi_115_pred_2 = 0.0;
                                frontier_phi_115_pred_3 = 0.0;
                                frontier_phi_115_pred_4 = 0.0;
                                frontier_phi_115_pred_5 = 0.0;
                            }
                            _2898 = frontier_phi_115_pred;
                            _2897 = frontier_phi_115_pred_1;
                            _2896 = frontier_phi_115_pred_2;
                            _2895 = frontier_phi_115_pred_3;
                            _2894 = frontier_phi_115_pred_4;
                            _2899 = frontier_phi_115_pred_5;
                            _2648 = _2897 + _2661;
                            _2649 = _2898 + _2662;
                            _2650 = _2899 + _2663;
                            _2645 = _2894 + _2658;
                            _2646 = _2895 + _2659;
                            _2647 = _2896 + _2660;
                            if (_2665 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2658 = _2645;
                                _2659 = _2646;
                                _2660 = _2647;
                                _2661 = _2648;
                                _2662 = _2649;
                                _2663 = _2650;
                                _2664 = _2665;
                                continue;
                            }
                        }
                        frontier_phi_109_pred = _2646;
                        frontier_phi_109_pred_1 = _2645;
                        frontier_phi_109_pred_2 = _2650;
                        frontier_phi_109_pred_3 = _2649;
                        frontier_phi_109_pred_4 = _2648;
                        frontier_phi_109_pred_5 = _2647;
                    }
                    _2260 = frontier_phi_109_pred;
                    _2258 = frontier_phi_109_pred_1;
                    _2268 = frontier_phi_109_pred_2;
                    _2266 = frontier_phi_109_pred_3;
                    _2264 = frontier_phi_109_pred_4;
                    _2262 = frontier_phi_109_pred_5;
                    uint _2472 = _2471 + 1u;
                    if (_2472 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2465 = _2258;
                        _2466 = _2260;
                        _2467 = _2262;
                        _2468 = _2264;
                        _2469 = _2266;
                        _2470 = _2268;
                        _2471 = _2472;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_84_85_ladder = _2258;
                frontier_phi_84_85_ladder_1 = _2262;
                frontier_phi_84_85_ladder_2 = _2268;
                frontier_phi_84_85_ladder_3 = _2266;
                frontier_phi_84_85_ladder_4 = _2264;
                frontier_phi_84_85_ladder_5 = _2260;
            }
            else
            {
                frontier_phi_84_85_ladder = _2103;
                frontier_phi_84_85_ladder_1 = _2107;
                frontier_phi_84_85_ladder_2 = _2113;
                frontier_phi_84_85_ladder_3 = _2111;
                frontier_phi_84_85_ladder_4 = _2109;
                frontier_phi_84_85_ladder_5 = _2105;
            }
            _2257 = frontier_phi_84_85_ladder;
            _2259 = frontier_phi_84_85_ladder_5;
            _2261 = frontier_phi_84_85_ladder_1;
            _2263 = frontier_phi_84_85_ladder_4;
            _2265 = frontier_phi_84_85_ladder_3;
            _2267 = frontier_phi_84_85_ladder_2;
        }
        float _2272 = isnan(1.0) ? _761 : (isnan(_761) ? 1.0 : min(_761, 1.0));
        _2025 = (_2272 * _2263) + _1802;
        _2027 = (_2272 * _2265) + _1803;
        _2029 = (_2272 * _2267) + _1804;
        _2031 = ((_2257 * 0.039999999105930328369140625) * _2272) + _1907;
        _2033 = ((_2259 * 0.039999999105930328369140625) * _2272) + _1908;
        _2035 = ((_2261 * 0.039999999105930328369140625) * _2272) + _1909;
    }
    else
    {
        _2025 = _1802;
        _2027 = _1803;
        _2029 = _1804;
        _2031 = _1907;
        _2033 = _1908;
        _2035 = _1909;
    }
    float _3834 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _3845 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _3856 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _2052 = ((isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_2025 + ((isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0))) * _761))) + ((_2031 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _1496)) * cbPerFrame._m0[3u].x);
    float _2053 = ((isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_2027 + ((isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))) * _761))) + ((_2033 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _1496)) * cbPerFrame._m0[3u].x);
    float _2054 = ((isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_2029 + ((isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))) * _761))) + ((_2035 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _1496)) * cbPerFrame._m0[3u].x);
    float _2055 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2056 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2057 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    uint _2058 = _735 + 6u;
    float _2066 = _721 / cbSceneParam._m0[86u].x;
    float _2067 = _722 / cbSceneParam._m0[86u].y;
    vec4 _2081 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2066, _2067, (log2((isnan(cbSceneParam._m0[77u].w) ? _695 : (isnan(_695) ? cbSceneParam._m0[77u].w : min(_695, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2083 = _2081.x;
    float _2084 = _2081.y;
    float _2085 = _2081.z;
    float _2086 = _2081.w;
    float _2166;
    float _2168;
    float _2170;
    float _2172;
    if (_695 > cbSceneParam._m0[78u].w)
    {
        float _2128 = isnan(_695) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _695 : min(cbSceneParam._m0[80u].w, _695));
        float _2129 = _2128 / _695;
        float _2140 = _2129 * _267;
        float _2141 = _268 * _2129;
        float _2142 = (-0.0) - _2141;
        float _2143 = _2129 * _269;
        float _2145 = (cbSceneParam._m0[77u].w * _2142) / _2128;
        float _2146 = _2145 + cbSceneParam._m0[79u].w;
        float _2147 = cbSceneParam._m0[79u].w - _2141;
        float _2153 = sqrt(((_2140 * _2140) + (_2141 * _2141)) + (_2143 * _2143));
        float _2156 = (1.0 - (cbSceneParam._m0[77u].w / _2128)) * _2153;
        float _2162 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2164 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2396;
        if (abs((_2142 - _2145) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2396 = ((((_2146 > 0.0) ? exp2(_2162 * _2146) : (2.0 - exp2(_2164 * _2146))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2156;
        }
        else
        {
            float _2315 = 1.0 / cbSceneParam._m0[80u].x;
            float _2316 = isnan(_2147) ? _2146 : (isnan(_2146) ? _2147 : max(_2146, _2147));
            float _2317 = isnan(_2147) ? _2146 : (isnan(_2146) ? _2147 : min(_2146, _2147));
            float _2326 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : min(_2316, 0.0));
            float _2327 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : min(_2317, 0.0));
            _2396 = ((abs(_2153 / _2142) * cbSceneParam._m0[80u].y) * ((((_2326 - _2327) * 2.0) - ((exp2(_2162 * (isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0)))) - exp2(_2162 * (isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0))))) * _2315)) - ((exp2(_2164 * _2326) - exp2(_2164 * _2327)) * _2315))) + (_2156 * cbSceneParam._m0[80u].z);
        }
        vec4 _2398 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2066, _2067, 1.0), 0.0);
        float _2407 = exp2((_2396 * (-1.44269502162933349609375)) * (1.0 - _2398.w));
        float _2408 = log2(_2407);
        float _2424 = log2(_2086);
        _2166 = (exp2(_2424 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2408 * cbSceneParam._m0[78u].x)) * _2398.x) / cbSceneParam._m0[78u].x)) + _2083;
        _2168 = (exp2(_2424 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2408 * cbSceneParam._m0[78u].y)) * _2398.y) / cbSceneParam._m0[78u].y)) + _2084;
        _2170 = (exp2(_2424 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2408 * cbSceneParam._m0[78u].z)) * _2398.z) / cbSceneParam._m0[78u].z)) + _2085;
        _2172 = _2407 * _2086;
    }
    else
    {
        _2166 = _2083;
        _2168 = _2084;
        _2170 = _2085;
        _2172 = _2086;
    }
    bool _2434;
    vec4 _2182;
    vec4 _2205;
    float _2207;
    float _2211;
    float _2212;
    float _2213;
    float _2214;
    bool _2225;
    for (;;)
    {
        _2182 = cbMatDynParam._m0[0u];
        float _2184 = roundEven(_2182.y);
        bool _2185 = _2184 == 3.0;
        float _2187 = log2(_2172);
        float _2194 = exp2(_2187 * cbSceneParam._m0[78u].x) * _2055;
        float _2195 = exp2(_2187 * cbSceneParam._m0[78u].y) * _2056;
        float _2196 = exp2(_2187 * cbSceneParam._m0[78u].z) * _2057;
        float _2203 = _709 + (-0.5);
        _2205 = cbMtdParam._m0[1u];
        _2207 = _2205.y * _2203;
        float _2210 = (_2184 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2211 = _2210 * (_2185 ? _2194 : (_2194 + (cbSceneParam._m0[72u].w * _2166)));
        _2212 = _2210 * (_2185 ? _2195 : (_2195 + (cbSceneParam._m0[72u].w * _2168)));
        _2213 = _2210 * (_2185 ? _2196 : (_2196 + (cbSceneParam._m0[72u].w * _2170)));
        _2214 = _2203 * 0.999000012874603271484375;
        _2225 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2225)
        {
            if ((cbInstanceData._m0[_735 + 7u].x + _2214) < 0.5)
            {
                _2434 = true;
                break;
            }
        }
        uint _2350 = _737 + uint(_2182.w);
        if ((cbInstanceData._m0[_2350].w < 1.0) && ((cbInstanceData._m0[_2350].w + _2214) < 0.5))
        {
            _2434 = true;
            break;
        }
        if ((_2207 + 1.0) < _2205.x)
        {
            _2434 = true;
            break;
        }
        _2434 = false;
        break;
    }
    float _2615;
    if (_2434)
    {
        discard_state = true;
        _2615 = 0.0;
    }
    else
    {
        _2615 = cbInstanceData._m0[_2058].w;
    }
    SV_Target.x = _2211;
    SV_Target.y = _2212;
    SV_Target.z = _2213;
    SV_Target.w = _2615;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2058].w;
    discard_exit();
}


