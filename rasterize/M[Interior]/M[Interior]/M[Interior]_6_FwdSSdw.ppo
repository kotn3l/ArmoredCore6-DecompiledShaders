#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D M_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1259;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _198 = _197 * _190;
    float _199 = _197 * _191;
    float _200 = _197 * _192;
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212 = _211 * TANGENT.x;
    float _213 = _211 * TANGENT.y;
    float _214 = _211 * TANGENT.z;
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    vec4 _284 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _287 = _284.x;
    vec4 _305 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _322 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _287) + cbMtdParam._m0[12u].x) * _305.x;
    float _324 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _287) + cbMtdParam._m0[12u].y) * _305.y;
    float _326 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _287) + cbMtdParam._m0[12u].z) * _305.z;
    vec4 _347 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _383 = cbMtdParam._m0[21u].w + _269;
    float _384 = cbMtdParam._m0[22u].x + _270;
    float _385 = cbMtdParam._m0[22u].y + _271;
    float _399 = (-0.0) - dot(vec3(_383, _384, _385), vec3(_198, _199, _200));
    float _400 = (-0.0) - dot(vec3(_383, _384, _385), vec3(_212, _213, _214));
    float _401 = (-0.0) - dot(vec3(_383, _384, _385), vec3((-0.0) - _205, (-0.0) - _206, (-0.0) - _207));
    float _405 = inversesqrt(dot(vec3(_399, _400, _401), vec3(_399, _400, _401)));
    float _408 = _405 * _401;
    float _409 = (_405 * _399) + ((cbMtdParam._m0[19u].w * _287) * ((_347.x * 2.0) + (-1.0)));
    float _410 = (_405 * _400) + ((cbMtdParam._m0[20u].x * _287) * ((_347.y * 2.0) + (-1.0)));
    float _411 = _409 * cbMtdParam._m0[18u].z;
    float _412 = _410 * cbMtdParam._m0[18u].y;
    float _413 = fract(TEXCOORD.x);
    float _414 = fract(TEXCOORD.y);
    float _420;
    if (_411 > 0.0)
    {
        _420 = (1.0 - _413) / _411;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_411 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _413) / _411;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _420 = frontier_phi_3_2_ladder;
    }
    float _428;
    if (_412 > 0.0)
    {
        _428 = (1.0 - _414) / _412;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_412 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _414) / _412;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _428 = frontier_phi_7_6_ladder;
    }
    bool _430 = _408 > 0.0;
    float _432 = _430 ? (cbMtdParam._m0[15u].x / _408) : 5000.0;
    float _433 = isnan(_428) ? _420 : (isnan(_420) ? _428 : min(_420, _428));
    float _434 = isnan(_432) ? _433 : (isnan(_433) ? _432 : min(_433, _432));
    float _438 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _439 = _413 + (-0.5);
    float _442 = _414 + (-0.5);
    float _445 = ((_434 * _408) + _438) / _438;
    vec4 _469 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_439 + (_434 * _411)) / _445) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_442 + (_434 * _412)) / _445) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _482 = (_469.x * _287) * cbMtdParam._m0[9u].x;
    float _483 = (_469.y * _287) * cbMtdParam._m0[9u].y;
    float _484 = (_469.z * _287) * cbMtdParam._m0[9u].z;
    float _502 = _409 * cbMtdParam._m0[20u].z;
    float _503 = _410 * cbMtdParam._m0[20u].y;
    bool _504 = _502 > 0.0;
    float _509;
    if (_504)
    {
        _509 = (1.0 - _413) / _502;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_502 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _413) / _502;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _509 = frontier_phi_11_10_ladder;
    }
    bool _511 = _503 > 0.0;
    float _516;
    if (_511)
    {
        _516 = (1.0 - _414) / _503;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_503 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _414) / _503;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _516 = frontier_phi_15_14_ladder;
    }
    float _519 = _430 ? (cbMtdParam._m0[16u].x / _408) : 5000.0;
    float _520 = isnan(_516) ? _509 : (isnan(_509) ? _516 : min(_509, _516));
    float _521 = isnan(_519) ? _520 : (isnan(_520) ? _519 : min(_520, _519));
    float _525 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _529 = ((_521 * _408) + _525) / _525;
    float _534 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _536 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _552 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_439 + (_521 * _502)) / _529) + 0.5) + _534) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_442 + (_521 * _503)) / _529) + 0.5) + _536) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _567;
    if (_504)
    {
        _567 = (1.0 - _413) / _502;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_502 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _413) / _502;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _567 = frontier_phi_19_18_ladder;
    }
    float _573;
    if (_511)
    {
        _573 = (1.0 - _414) / _503;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_503 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _414) / _503;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _573 = frontier_phi_23_22_ladder;
    }
    float _575 = isnan(_573) ? _567 : (isnan(_567) ? _573 : min(_567, _573));
    float _576 = isnan(_519) ? _575 : (isnan(_575) ? _519 : min(_575, _519));
    float _583 = ((_576 * _408) + _525) / _525;
    vec4 _604 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_439 + (_576 * _502)) / _583) + 0.5) + _534) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_442 + (_576 * _503)) / _583) + 0.5) + _536) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _606 = _604.x;
    float _616 = (((((cbMtdParam._m0[10u].x * _287) * _552.x) - _482) * _287) * _606) + _482;
    float _617 = (((((cbMtdParam._m0[10u].y * _287) * _552.y) - _483) * _287) * _606) + _483;
    float _618 = (((((cbMtdParam._m0[10u].z * _287) * _552.z) - _484) * _287) * _606) + _484;
    float _632 = _409 * cbMtdParam._m0[21u].x;
    float _633 = _410 * cbMtdParam._m0[20u].w;
    bool _634 = _632 > 0.0;
    float _639;
    if (_634)
    {
        _639 = (1.0 - _413) / _632;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_632 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _413) / _632;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _639 = frontier_phi_27_26_ladder;
    }
    bool _641 = _633 > 0.0;
    float _646;
    if (_641)
    {
        _646 = (1.0 - _414) / _633;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_633 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _414) / _633;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _646 = frontier_phi_31_30_ladder;
    }
    float _649 = _430 ? (cbMtdParam._m0[17u].z / _408) : 5000.0;
    float _650 = isnan(_646) ? _639 : (isnan(_639) ? _646 : min(_639, _646));
    float _651 = isnan(_649) ? _650 : (isnan(_650) ? _649 : min(_650, _649));
    float _655 = cbMtdParam._m0[17u].z * cbMtdParam._m0[15u].z;
    float _659 = ((_651 * _408) + _655) / _655;
    float _664 = cbMtdParam._m0[17u].y - cbMtdParam._m0[21u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    float _666 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    vec4 _683 = texture(sampler2D(M_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_439 + (_651 * _632)) / _659) + 0.5) + _664) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_442 + (_651 * _633)) / _659) + 0.5) + _666) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[7u].w));
    float _698;
    if (_634)
    {
        _698 = (1.0 - _413) / _632;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_632 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _413) / _632;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _698 = frontier_phi_35_34_ladder;
    }
    float _704;
    if (_641)
    {
        _704 = (1.0 - _414) / _633;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_633 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _414) / _633;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _704 = frontier_phi_39_38_ladder;
    }
    float _706 = isnan(_704) ? _698 : (isnan(_698) ? _704 : min(_698, _704));
    float _707 = isnan(_649) ? _706 : (isnan(_706) ? _649 : min(_706, _649));
    float _714 = ((_707 * _408) + _655) / _655;
    vec4 _734 = texture(sampler2D(M_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_439 + (_707 * _632)) / _714) + 0.5) + _664) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_442 + (_707 * _633)) / _714) + 0.5) + _666) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[8u].w));
    float _736 = _734.x;
    vec4 _760 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _764 = _760.z;
    float _767 = (_760.x * 2.0) + (-1.0);
    float _768 = (_760.y * 2.0) + (-1.0);
    float _769 = dot(vec2(_767, _768), vec2(_767, _768));
    float _3453 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _774 = sqrt(1.0 - (isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0))));
    float _777 = fma(_774, _205, fma(_768, _212, _767 * _198));
    float _780 = fma(_774, _206, fma(_768, _213, _767 * _199));
    float _783 = fma(_774, _207, fma(_768, _214, _767 * _200));
    float _787 = inversesqrt(dot(vec3(_777, _780, _783), vec3(_777, _780, _783)));
    float _788 = _787 * _777;
    float _789 = _787 * _780;
    float _790 = _787 * _783;
    float _3464 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _791 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
    float _3475 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _3486 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _3497 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _810 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _814 = inversesqrt(dot(vec3(_269, _270, _271), vec3(_269, _270, _271)));
    float _815 = _269 * _814;
    float _816 = _270 * _814;
    float _817 = _271 * _814;
    float _823 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _824 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _843 = fma(_790, cbSceneParam._m0[5u].z, fma(_789, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _788));
    float _846 = fma(_790, cbSceneParam._m0[6u].z, fma(_789, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _788));
    float _849 = fma(_790, cbSceneParam._m0[7u].z, fma(_789, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _788));
    uint _862 = uint(roundEven(NORMAL.w)) * 13u;
    uint _864 = _862 + 9u;
    uint _865 = _864 + uint(cbMatDynParam._m0[0u].w);
    float _871 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0)))) * cbInstanceData._m0[_865].x;
    float _872 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0)))) * cbInstanceData._m0[_865].y;
    float _873 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0)))) * cbInstanceData._m0[_865].z;
    float _3508 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _874 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
    float _3519 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _875 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
    float _3530 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _876 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
    vec4 _885 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _823, cbSceneParam._m0[86u].y * _824));
    float _888 = _885.x * TEXCOORD.z;
    float _889 = dot(vec3(_788, _789, _790), vec3(_815, _816, _817));
    float _892 = _889 * 2.0;
    float _896 = (_892 * _788) - _815;
    float _897 = (_892 * _789) - _816;
    float _898 = (_892 * _790) - _817;
    float _902 = abs(dot(vec3(_815, _816, _817), vec3(_788, _789, _790)));
    float _3541 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _904 = sqrt(_791);
    float _917 = exp2((_904 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_904 * 3.0));
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _957 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1258;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _985 = fma(_957, cbModelParam._m0[26u].z, fma(_953, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _949));
        float _989 = fma(_957, cbModelParam._m0[27u].z, fma(_953, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _949));
        float _993 = fma(_957, cbModelParam._m0[28u].z, fma(_953, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _949));
        float _1016 = _949 + _788;
        float _1017 = _953 + _789;
        float _1018 = _957 + _790;
        float _1028 = fma(_1018, cbModelParam._m0[26u].z, fma(_1017, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1016)) - _985;
        float _1029 = fma(_1018, cbModelParam._m0[27u].z, fma(_1017, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1016)) - _989;
        float _1030 = fma(_1018, cbModelParam._m0[28u].z, fma(_1017, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1016)) - _993;
        float _1034 = inversesqrt(dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030)));
        float _1047 = ((_1034 * _1028) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_985 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1048 = ((_1034 * _1029) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_989 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1049 = ((_1034 * _1030) / cbModelParam._m0[34u].z) + ((((((_993 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1047, _1048, _1049), 0.0);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1047, _1048, _1049), 0.0);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1047, _1048, _1049), 0.0);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1047, _1048, _1049), 0.0);
        float _1086 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1052.x + (-0.5));
        float _1088 = _1086 * (_1052.y + (-0.5));
        float _1089 = _1086 * (_1052.z + (-0.5));
        float _1096 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1059.x + (-0.5));
        float _1098 = _1096 * (_1059.y + (-0.5));
        float _1099 = _1096 * (_1059.z + (-0.5));
        float _1106 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1066.x + (-0.5));
        float _1108 = _1106 * (_1066.y + (-0.5));
        float _1109 = _1106 * (_1066.z + (-0.5));
        float _1116 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1073.x + (-0.5));
        float _1118 = _1116 * (_1073.y + (-0.5));
        float _1119 = _1116 * (_1073.z + (-0.5));
        float _1120 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1123 = _1087 * 0.5;
        float _1124 = _1097 * 0.5;
        float _1125 = _1107 * 0.5;
        float _1126 = dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125));
        float _1131 = (_1126 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1126);
        float _1140 = (dot(vec3(_788, _789, _790), vec3(_1131 * _1123, _1131 * _1124, _1131 * _1125)) + 1.0) * 0.5;
        float _3567 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1150 = sqrt(((_1124 * _1124) + (_1123 * _1123)) + (_1125 * _1125)) / (_1120 + 9.9999997473787516355514526367188e-06);
        float _3578 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3589 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) * (_1152 + 1.0))) + _1157) * _1120;
        float _1167 = _1088 * 0.5;
        float _1168 = _1098 * 0.5;
        float _1169 = _1108 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1183 = (dot(vec3(_788, _789, _790), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _3600 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1192 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _3611 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _3622 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * (_1194 + 1.0))) + _1199) * _1121;
        float _1209 = _1089 * 0.5;
        float _1210 = _1099 * 0.5;
        float _1211 = _1109 * 0.5;
        float _1212 = dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211));
        float _1217 = (_1212 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1212);
        float _1225 = (dot(vec3(_788, _789, _790), vec3(_1217 * _1209, _1217 * _1210, _1217 * _1211)) + 1.0) * 0.5;
        float _3633 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1234 = sqrt(((_1210 * _1210) + (_1209 * _1209)) + (_1211 * _1211)) / (_1122 + 9.9999997473787516355514526367188e-06);
        float _3644 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1236 = _1235 * 2.0;
        float _1240 = (1.0 - _1235) / (_1235 + 1.0);
        float _3655 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _1250 = ((((1.0 - _1241) * (_1236 + 2.0)) * exp2(log2(isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * (_1236 + 1.0))) + _1241) * _1122;
        _1258 = _1089;
        _1260 = _1088;
        _1261 = _1087;
        _1262 = _1099;
        _1263 = _1098;
        _1264 = _1097;
        _1265 = _1109;
        _1266 = _1108;
        _1267 = _1107;
        _1268 = _1122;
        _1269 = _1121;
        _1270 = _1120;
        _1271 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
        _1272 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
        _1273 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)));
    }
    else
    {
        _1258 = _1259;
        _1260 = _1259;
        _1261 = _1259;
        _1262 = _1259;
        _1263 = _1259;
        _1264 = _1259;
        _1265 = _1259;
        _1266 = _1259;
        _1267 = _1259;
        _1268 = _1259;
        _1269 = _1259;
        _1270 = _1259;
        _1271 = 0.0;
        _1272 = 0.0;
        _1273 = 0.0;
    }
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1299 = fma(_957, cbModelParam._m0[30u].z, fma(_953, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _949));
        float _1303 = fma(_957, cbModelParam._m0[31u].z, fma(_953, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _949));
        float _1307 = fma(_957, cbModelParam._m0[32u].z, fma(_953, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _949));
        float _1330 = _949 + _788;
        float _1331 = _953 + _789;
        float _1332 = _957 + _790;
        float _1342 = fma(_1332, cbModelParam._m0[30u].z, fma(_1331, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1330)) - _1299;
        float _1343 = fma(_1332, cbModelParam._m0[31u].z, fma(_1331, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1330)) - _1303;
        float _1344 = fma(_1332, cbModelParam._m0[32u].z, fma(_1331, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1330)) - _1307;
        float _1348 = inversesqrt(dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344)));
        float _1361 = ((_1348 * _1342) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1299 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1362 = ((_1348 * _1343) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1303 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1363 = ((_1348 * _1344) / cbModelParam._m0[35u].z) + ((((((_1307 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1365 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        vec4 _1386 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        float _1398 = exp2((_1365.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1365.x + (-0.5));
        float _1400 = _1398 * (_1365.y + (-0.5));
        float _1401 = _1398 * (_1365.z + (-0.5));
        float _1408 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1372.x + (-0.5));
        float _1410 = _1408 * (_1372.y + (-0.5));
        float _1411 = _1408 * (_1372.z + (-0.5));
        float _1418 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1419 = _1418 * (_1379.x + (-0.5));
        float _1420 = _1418 * (_1379.y + (-0.5));
        float _1421 = _1418 * (_1379.z + (-0.5));
        float _1428 = exp2((_1386.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1386.x + (-0.5));
        float _1430 = _1428 * (_1386.y + (-0.5));
        float _1431 = _1428 * (_1386.z + (-0.5));
        float _1432 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1433 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1434 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1435 = _1399 * 0.5;
        float _1436 = _1409 * 0.5;
        float _1437 = _1419 * 0.5;
        float _1438 = dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437));
        float _1443 = (_1438 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1438);
        float _1451 = (dot(vec3(_788, _789, _790), vec3(_1443 * _1435, _1443 * _1436, _1443 * _1437)) + 1.0) * 0.5;
        float _3696 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1460 = sqrt(((_1436 * _1436) + (_1435 * _1435)) + (_1437 * _1437)) / (_1432 + 9.9999997473787516355514526367188e-06);
        float _3707 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1462 = _1461 * 2.0;
        float _1466 = (1.0 - _1461) / (_1461 + 1.0);
        float _3718 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1476 = ((((1.0 - _1467) * (_1462 + 2.0)) * exp2(log2(isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * (_1462 + 1.0))) + _1467) * _1432;
        float _1477 = _1400 * 0.5;
        float _1478 = _1410 * 0.5;
        float _1479 = _1420 * 0.5;
        float _1480 = dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479));
        float _1485 = (_1480 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1480);
        float _1493 = (dot(vec3(_788, _789, _790), vec3(_1485 * _1477, _1485 * _1478, _1485 * _1479)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1502 = sqrt(((_1478 * _1478) + (_1477 * _1477)) + (_1479 * _1479)) / (_1433 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1504 = _1503 * 2.0;
        float _1508 = (1.0 - _1503) / (_1503 + 1.0);
        float _3751 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1518 = ((((1.0 - _1509) * (_1504 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_1504 + 1.0))) + _1509) * _1433;
        float _1519 = _1401 * 0.5;
        float _1520 = _1411 * 0.5;
        float _1521 = _1421 * 0.5;
        float _1522 = dot(vec3(_1519, _1520, _1521), vec3(_1519, _1520, _1521));
        float _1527 = (_1522 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1522);
        float _1535 = (dot(vec3(_788, _789, _790), vec3(_1527 * _1519, _1527 * _1520, _1527 * _1521)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1544 = sqrt(((_1520 * _1520) + (_1519 * _1519)) + (_1521 * _1521)) / (_1434 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1546 = _1545 * 2.0;
        float _1550 = (1.0 - _1545) / (_1545 + 1.0);
        float _3784 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1560 = ((((1.0 - _1551) * (_1546 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_1546 + 1.0))) + _1551) * _1434;
        _1568 = _1401;
        _1569 = _1400;
        _1570 = _1399;
        _1571 = _1411;
        _1572 = _1410;
        _1573 = _1409;
        _1574 = _1421;
        _1575 = _1420;
        _1576 = _1419;
        _1577 = _1434;
        _1578 = _1433;
        _1579 = _1432;
        _1580 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)));
        _1581 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)));
        _1582 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)));
    }
    else
    {
        _1568 = _1259;
        _1569 = _1259;
        _1570 = _1259;
        _1571 = _1259;
        _1572 = _1259;
        _1573 = _1259;
        _1574 = _1259;
        _1575 = _1259;
        _1576 = _1259;
        _1577 = _1259;
        _1578 = _1259;
        _1579 = _1259;
        _1580 = 0.0;
        _1581 = 0.0;
        _1582 = 0.0;
    }
    float _1592 = (cbModelParam._m0[1u].x * (_1580 - _1271)) + _1271;
    float _1593 = (cbModelParam._m0[1u].x * (_1581 - _1272)) + _1272;
    float _1594 = (cbModelParam._m0[1u].x * (_1582 - _1273)) + _1273;
    float _1615 = fma(_1594, cbSceneParam._m0[89u].z, fma(_1593, cbSceneParam._m0[89u].y, _1592 * cbSceneParam._m0[89u].x));
    float _1618 = fma(_1594, cbSceneParam._m0[90u].z, fma(_1593, cbSceneParam._m0[90u].y, _1592 * cbSceneParam._m0[90u].x));
    float _1621 = fma(_1594, cbSceneParam._m0[91u].z, fma(_1593, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1592));
    float _1636 = _896 * 0.5;
    float _1637 = _897 * 0.5;
    float _1638 = _898 * 0.5;
    float _1639 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1570, _1573, _1576, _1579));
    float _1642 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1569, _1572, _1575, _1578));
    float _1645 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1568, _1571, _1574, _1577));
    float _1679;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1652 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1258, _1262, _1265, _1268));
        float _1656 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1260, _1263, _1266, _1269));
        float _1660 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1261, _1264, _1267, _1270));
        float _1667 = dot(vec4(cbModelParam._m0[39u]), vec4(_1636, _1637, _1638, 1.0));
        _1679 = dot(vec3(isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)), isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)), isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1667) ? 0.0 : (isnan(0.0) ? _1667 : max(0.0, _1667))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1679 = 1.0;
    }
    float _1690;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1681 = dot(vec4(cbModelParam._m0[40u]), vec4(_1636, _1637, _1638, 1.0));
        _1690 = dot(vec3(isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)), isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)), isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1681) ? 0.0 : (isnan(0.0) ? _1681 : max(0.0, _1681))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1690 = 1.0;
    }
    float _1694 = (_1690 * cbModelParam._m0[1u].x) + (_1679 * (1.0 - cbModelParam._m0[1u].x));
    float _1704 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _791);
    float _1705 = isnan(_1704) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1704 : min(cbModelParam._m0[25u].z, _1704));
    float _1785;
    float _1787;
    float _1789;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1752 = fma(_957, cbModelParam._m0[13u].z, fma(_953, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _949)) + cbModelParam._m0[13u].w;
        float _1756 = fma(_957, cbModelParam._m0[14u].z, fma(_953, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _949)) + cbModelParam._m0[14u].w;
        float _1760 = fma(_957, cbModelParam._m0[15u].z, fma(_953, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _949)) + cbModelParam._m0[15u].w;
        float _1763 = fma(_898, cbModelParam._m0[13u].z, fma(_897, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _896));
        float _1766 = fma(_898, cbModelParam._m0[14u].z, fma(_897, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _896));
        float _1769 = fma(_898, cbModelParam._m0[15u].z, fma(_897, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _896));
        float _1797;
        if (_1763 > 0.0)
        {
            _1797 = abs((1.0 - _1752) / _1763);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1752 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1797 = frontier_phi_54_52_ladder;
        }
        float _2166;
        if (_1766 > 0.0)
        {
            _2166 = abs((1.0 - _1756) / _1766);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1756 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _2166 = frontier_phi_63_59_ladder;
        }
        float _2482;
        if (_1769 > 0.0)
        {
            _2482 = abs((1.0 - _1760) / _1769);
        }
        else
        {
            float frontier_phi_77_70_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_77_70_ladder = abs((_1760 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_77_70_ladder = 5000.0;
            }
            _2482 = frontier_phi_77_70_ladder;
        }
        float _2484 = isnan(_2166) ? _1797 : (isnan(_1797) ? _2166 : min(_1797, _2166));
        float _2485 = isnan(_2482) ? _2484 : (isnan(_2484) ? _2482 : min(_2484, _2482));
        float _2489 = (_2485 * _1763) + _1752;
        float _2490 = (_2485 * _1766) + _1756;
        float _2491 = (_2485 * _1769) + _1760;
        float _2492 = _2485 * 9.9999997473787516355514526367188e-05;
        float _2493 = (-1.0) - _2492;
        float _2495 = _2492 + 1.0;
        float frontier_phi_53_77_ladder;
        float frontier_phi_53_77_ladder_1;
        float frontier_phi_53_77_ladder_2;
        if ((_2491 > _2495) || ((_2491 < _2493) || ((_2490 > _2495) || ((_2490 < _2493) || ((_2489 < _2493) || (_2489 > _2495))))))
        {
            frontier_phi_53_77_ladder = 0.0;
            frontier_phi_53_77_ladder_1 = 0.0;
            frontier_phi_53_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2617 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2491, cbModelParam._m0[9u].z, fma(_2490, cbModelParam._m0[9u].y, _2489 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2491, cbModelParam._m0[10u].z, fma(_2490, cbModelParam._m0[10u].y, _2489 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2491, cbModelParam._m0[11u].z, fma(_2490, cbModelParam._m0[11u].y, _2489 * cbModelParam._m0[11u].x))), _1705);
            frontier_phi_53_77_ladder = _2617.x * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_1 = _2617.y * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_2 = _2617.z * cbModelParam._m0[1u].y;
        }
        _1785 = frontier_phi_53_77_ladder;
        _1787 = frontier_phi_53_77_ladder_1;
        _1789 = frontier_phi_53_77_ladder_2;
    }
    else
    {
        vec4 _1773 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_896, _897, _898), _1705);
        _1785 = _1773.x * cbModelParam._m0[1u].y;
        _1787 = _1773.y * cbModelParam._m0[1u].y;
        _1789 = _1773.z * cbModelParam._m0[1u].y;
    }
    float _1793 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _791);
    float _1794 = isnan(_1793) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1793 : min(cbModelParam._m0[25u].w, _1793));
    float _1882;
    float _1884;
    float _1886;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1846 = fma(_957, cbModelParam._m0[21u].z, fma(_953, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _949)) + cbModelParam._m0[21u].w;
        float _1850 = fma(_957, cbModelParam._m0[22u].z, fma(_953, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _949)) + cbModelParam._m0[22u].w;
        float _1854 = fma(_957, cbModelParam._m0[23u].z, fma(_953, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _949)) + cbModelParam._m0[23u].w;
        float _1857 = fma(_898, cbModelParam._m0[21u].z, fma(_897, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _896));
        float _1860 = fma(_898, cbModelParam._m0[22u].z, fma(_897, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _896));
        float _1863 = fma(_898, cbModelParam._m0[23u].z, fma(_897, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _896));
        float _2171;
        if (_1857 > 0.0)
        {
            _2171 = abs((1.0 - _1846) / _1857);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1846 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _2171 = frontier_phi_65_61_ladder;
        }
        float _2508;
        if (_1860 > 0.0)
        {
            _2508 = abs((1.0 - _1850) / _1860);
        }
        else
        {
            float frontier_phi_79_72_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_79_72_ladder = abs((_1850 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_79_72_ladder = 5000.0;
            }
            _2508 = frontier_phi_79_72_ladder;
        }
        float _2677;
        if (_1863 > 0.0)
        {
            _2677 = abs((1.0 - _1854) / _1863);
        }
        else
        {
            float frontier_phi_93_88_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_93_88_ladder = abs((_1854 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_93_88_ladder = 5000.0;
            }
            _2677 = frontier_phi_93_88_ladder;
        }
        float _2679 = isnan(_2508) ? _2171 : (isnan(_2171) ? _2508 : min(_2171, _2508));
        float _2680 = isnan(_2677) ? _2679 : (isnan(_2679) ? _2677 : min(_2679, _2677));
        float _2684 = (_2680 * _1857) + _1846;
        float _2685 = (_2680 * _1860) + _1850;
        float _2686 = (_2680 * _1863) + _1854;
        float _2687 = _2680 * 9.9999997473787516355514526367188e-05;
        float _2688 = (-1.0) - _2687;
        float _2690 = _2687 + 1.0;
        float frontier_phi_62_93_ladder;
        float frontier_phi_62_93_ladder_1;
        float frontier_phi_62_93_ladder_2;
        if ((_2686 > _2690) || ((_2686 < _2688) || ((_2685 > _2690) || ((_2685 < _2688) || ((_2684 < _2688) || (_2684 > _2690))))))
        {
            frontier_phi_62_93_ladder = 0.0;
            frontier_phi_62_93_ladder_1 = 0.0;
            frontier_phi_62_93_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2919 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2686, cbModelParam._m0[17u].z, fma(_2685, cbModelParam._m0[17u].y, _2684 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2686, cbModelParam._m0[18u].z, fma(_2685, cbModelParam._m0[18u].y, _2684 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2686, cbModelParam._m0[19u].z, fma(_2685, cbModelParam._m0[19u].y, _2684 * cbModelParam._m0[19u].x))), _1794);
            frontier_phi_62_93_ladder = _2919.z * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_1 = _2919.y * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_2 = _2919.x * cbModelParam._m0[1u].z;
        }
        _1882 = frontier_phi_62_93_ladder_2;
        _1884 = frontier_phi_62_93_ladder_1;
        _1886 = frontier_phi_62_93_ladder;
    }
    else
    {
        vec4 _1866 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_896, _897, _898), _1794);
        _1882 = _1866.x * cbModelParam._m0[1u].z;
        _1884 = _1866.y * cbModelParam._m0[1u].z;
        _1886 = _1866.z * cbModelParam._m0[1u].z;
    }
    float _1898 = ((((1.0 - _917) * ((_904 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_917 * _904)) * _888;
    float _1899 = _1898 * ((cbModelParam._m0[1u].w * (_1882 - _1785)) + _1785);
    float _1900 = _1898 * ((cbModelParam._m0[1u].w * (_1884 - _1787)) + _1787);
    float _1901 = _1898 * ((cbModelParam._m0[1u].w * (_1886 - _1789)) + _1789);
    float _1904 = fma(_1901, cbSceneParam._m0[89u].z, fma(_1900, cbSceneParam._m0[89u].y, _1899 * cbSceneParam._m0[89u].x));
    float _1907 = fma(_1901, cbSceneParam._m0[90u].z, fma(_1900, cbSceneParam._m0[90u].y, _1899 * cbSceneParam._m0[90u].x));
    float _1910 = fma(_1901, cbSceneParam._m0[91u].z, fma(_1900, cbSceneParam._m0[91u].y, _1899 * cbSceneParam._m0[91u].x));
    vec4 _1918 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_823, _824));
    float _1920 = _1918.w;
    float _1932 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1920);
    float _1933 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1920);
    float _1934 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1920);
    uvec4 _1938 = floatBitsToUint(cbInstanceData._m0[_862 + 5u]);
    uint _1940 = _1938.x * 14u;
    uint _1941 = _1940 + 13u;
    float _1946 = _888 + (-1.0);
    float _1949 = (cbLight._m0[_1941].x * _1946) + 1.0;
    float _1950 = (cbLight._m0[_1941].y * _1946) + 1.0;
    uint _1951 = _1940 + 5u;
    float _1957 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
    uint _1961 = _1940 + 4u;
    float _1970 = isnan(1.0) ? _1949 : (isnan(_1949) ? 1.0 : min(_1949, 1.0));
    uint _1974 = _1940 | 1u;
    float _1985 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_788, _789, _790));
    float _1988 = dot(vec3(cbLight._m0[_1974].xyz), vec3(_788, _789, _790));
    float _3920 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _3931 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1993 = (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * 0.3183098733425140380859375;
    float _1995 = (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * 0.3183098733425140380859375;
    float _2002 = ((cbLight._m0[_1951].x * _1957) * _1995) + (((cbLight._m0[_1961].x * _1932) * _1970) * _1993);
    float _2003 = ((_1957 * cbLight._m0[_1951].y) * _1995) + (((cbLight._m0[_1961].y * _1933) * _1970) * _1993);
    float _2004 = ((_1957 * cbLight._m0[_1951].z) * _1995) + (((cbLight._m0[_1961].z * _1934) * _1970) * _1993);
    uint _2006 = _1940 + 8u;
    float _2019 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1940].w)) * _791) * 0.949999988079071044921875);
    float _2020 = _2019 * _2019;
    float _2021 = cbLight._m0[_1940].x + _815;
    float _2022 = cbLight._m0[_1940].y + _816;
    float _2023 = cbLight._m0[_1940].z + _817;
    float _2027 = inversesqrt(dot(vec3(_2021, _2022, _2023), vec3(_2021, _2022, _2023)));
    float _2028 = _2027 * _2021;
    float _2029 = _2027 * _2022;
    float _2030 = _2027 * _2023;
    float _2031 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_1940].xyz));
    float _3942 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2034 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _3953 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _2035 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _2036 = dot(vec3(_788, _789, _790), vec3(_2028, _2029, _2030));
    float _3964 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2039 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _2040 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_2028, _2029, _2030));
    float _3975 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2044 = _2020 * _2020;
    float _2048 = ((_2039 * _2039) * (_2044 + (-1.0))) + 1.0;
    float _2059 = (exp2(log2(1.0 - (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2060 = 1.0 - _2020;
    float _2071 = (0.5 / (((_2035 * ((_2034 * _2060) + _2020)) + 9.9999999392252902907785028219223e-09) + (((_2035 * _2060) + _2020) * _2034))) * _2034;
    float _3986 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2073 = (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_2044 / ((_2048 * _2048) * 3.141590118408203125));
    uint _2087 = _1940 + 9u;
    float _2098 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1974].w)) * _791) * 0.949999988079071044921875);
    float _2099 = _2098 * _2098;
    float _2100 = cbLight._m0[_1974].x + _815;
    float _2101 = cbLight._m0[_1974].y + _816;
    float _2102 = cbLight._m0[_1974].z + _817;
    float _2106 = inversesqrt(dot(vec3(_2100, _2101, _2102), vec3(_2100, _2101, _2102)));
    float _2107 = _2106 * _2100;
    float _2108 = _2106 * _2101;
    float _2109 = _2106 * _2102;
    float _2110 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_1974].xyz));
    float _3997 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2113 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _2114 = dot(vec3(_788, _789, _790), vec3(_2107, _2108, _2109));
    float _4008 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2117 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _2118 = dot(vec3(cbLight._m0[_1974].xyz), vec3(_2107, _2108, _2109));
    float _4019 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2122 = _2099 * _2099;
    float _2126 = ((_2117 * _2117) * (_2122 + (-1.0))) + 1.0;
    float _2135 = (exp2(log2(1.0 - (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2136 = 1.0 - _2099;
    float _2146 = (0.5 / (((_2035 * ((_2113 * _2136) + _2099)) + 9.9999999392252902907785028219223e-09) + (((_2035 * _2136) + _2099) * _2113))) * _2113;
    float _4030 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2148 = (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_2122 / ((_2126 * _2126) * 3.141590118408203125));
    float _2158 = (((_2135 * cbLight._m0[_2087].x) * _2148) * _1957) + ((((cbLight._m0[_2006].x * _1932) * _2059) * _2073) * _1970);
    float _2159 = (((_2135 * cbLight._m0[_2087].y) * _2148) * _1957) + ((((cbLight._m0[_2006].y * _1933) * _2059) * _2073) * _1970);
    float _2160 = (((_2135 * cbLight._m0[_2087].z) * _2148) * _1957) + ((((cbLight._m0[_2006].z * _1934) * _2059) * _2073) * _1970);
    float _2275;
    float _2277;
    float _2279;
    float _2281;
    float _2283;
    float _2285;
    if (_1938.y == 0u)
    {
        float _2215 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2216 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2215;
        float _2217 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2215;
        float _2218 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2215;
        uvec4 _2230 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2231 = _2230.x;
        uint _2242 = uint((float(_2230.y) * floor(float(uint(cbSceneParam._m0[85u].y * _824) / _2231))) + floor(float(uint(cbSceneParam._m0[85u].x * _823) / _2231)));
        float _2252 = (log2(_2218 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2253 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        uint _2256 = uint(isnan(14.0) ? _2253 : (isnan(_2253) ? 14.0 : min(_2253, 14.0)));
        uvec4 _2261 = texelFetch(g_lightClusterGridBuffer, int(((_2256 << 2u) + (_2242 << 6u)) >> 2u));
        uint _2262 = _2261.x;
        uint _2263 = _2230.z;
        float _2369;
        float _2371;
        float _2373;
        float _2375;
        float _2377;
        float _2379;
        if (((((1u << ((_2263 >> 4u) & 15u)) + 4294967295u) & _2262) == 0u) || ((_2263 & 240u) == 0u))
        {
            _2369 = 0.0;
            _2371 = 0.0;
            _2373 = 0.0;
            _2375 = 0.0;
            _2377 = 0.0;
            _2379 = 0.0;
        }
        else
        {
            float _2370;
            float _2372;
            float _2374;
            float _2376;
            float _2378;
            float _2380;
            float _2545 = 0.0;
            float _2546 = 0.0;
            float _2547 = 0.0;
            float _2548 = 0.0;
            float _2549 = 0.0;
            float _2550 = 0.0;
            uint _2551 = 0u;
            uint _2560;
            bool _2561;
            for (;;)
            {
                _2560 = texelFetch(g_lightClassification, int((((_2256 << 5u) + (_2242 << 9u)) + (_2551 << 2u)) >> 2u)).x;
                _2561 = _2560 == 0u;
                float frontier_phi_90_pred;
                float frontier_phi_90_pred_1;
                float frontier_phi_90_pred_2;
                float frontier_phi_90_pred_3;
                float frontier_phi_90_pred_4;
                float frontier_phi_90_pred_5;
                if (_2561)
                {
                    frontier_phi_90_pred = _2550;
                    frontier_phi_90_pred_1 = _2545;
                    frontier_phi_90_pred_2 = _2546;
                    frontier_phi_90_pred_3 = _2547;
                    frontier_phi_90_pred_4 = _2548;
                    frontier_phi_90_pred_5 = _2549;
                }
                else
                {
                    float _2720;
                    float _2721;
                    float _2722;
                    float _2723;
                    float _2724;
                    float _2725;
                    uint _2726;
                    _2720 = _2545;
                    _2721 = _2546;
                    _2722 = _2547;
                    _2723 = _2548;
                    _2724 = _2549;
                    _2725 = _2550;
                    _2726 = _2560;
                    float _2626;
                    float _2627;
                    float _2628;
                    float _2629;
                    float _2630;
                    float _2631;
                    for (;;)
                    {
                        uint _2730 = uint(findLSB(_2726)) + (_2551 << 5u);
                        uint _2727 = (_2726 + 4294967295u) & _2726;
                        uint _2732 = _2730 * 48u;
                        vec4 _2746 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2732)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 3u)).x));
                        uint _2752 = (_2730 * 48u) + 4u;
                        vec4 _2765 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2752)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 3u)).x));
                        uint _2771 = (_2730 * 48u) + 8u;
                        vec3 _2782 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2771)).x, texelFetch(g_PointLightRenderingBuffer, int(_2771 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2771 + 2u)).x));
                        float _2786 = _2746.x - _2216;
                        float _2787 = _2746.y - _2217;
                        float _2788 = _2746.z - _2218;
                        float _2789 = dot(vec3(_2786, _2787, _2788), vec3(_2786, _2787, _2788));
                        float _2792 = inversesqrt(_2789);
                        float _2793 = _2792 * _2786;
                        float _2794 = _2792 * _2787;
                        float _2795 = _2792 * _2788;
                        float _2796 = dot(vec3(_843, _846, _849), vec3(_2793, _2794, _2795));
                        float _2801 = 1.0 - (_2789 * _2746.w);
                        float _4051 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                        float _2802 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
                        float _2803 = sqrt(_2789) * _2765.w;
                        float _2806 = 1.39999997615814208984375 / (_2803 + 1.39999997615814208984375);
                        float _2807 = _2806 * _2806;
                        float _2810 = ((1.0 - _2807) * _2796) + _2807;
                        float _2813 = _2803 * _2803;
                        float _2817 = ((isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0))) * _2802) / ((_2813 * 0.699999988079071044921875) + 1.0);
                        float _2821 = (-0.0) - _2216;
                        float _2822 = (-0.0) - _2217;
                        float _2823 = (-0.0) - _2218;
                        float _2827 = inversesqrt(dot(vec3(_2821, _2822, _2823), vec3(_2821, _2822, _2823)));
                        float _2828 = _2827 * _2821;
                        float _2829 = _2827 * _2822;
                        float _2830 = _2827 * _2823;
                        float _2838 = exp2(log2(1.0 / ((_2813 * 3.5) + 5.0)) * 0.25);
                        float _2839 = 1.0 - _904;
                        float _2846 = sqrt(1.0 - ((1.0 - (_2839 * _2839)) * (1.0 - (_2838 * _2838))));
                        float _2847 = _2846 * _2846;
                        float _2848 = _2847 * _2847;
                        float _2849 = _2828 + _2793;
                        float _2850 = _2829 + _2794;
                        float _2851 = _2830 + _2795;
                        float _2855 = inversesqrt(dot(vec3(_2849, _2850, _2851), vec3(_2849, _2850, _2851)));
                        float _2859 = dot(vec3(_843, _846, _849), vec3(_2828, _2829, _2830));
                        float _4067 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
                        float _2862 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
                        float _2863 = dot(vec3(_843, _846, _849), vec3(_2855 * _2849, _2855 * _2850, _2855 * _2851));
                        float _4078 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
                        float _2866 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
                        float _2870 = ((_2866 * _2866) * (_2848 + (-1.0))) + 1.0;
                        float _2871 = _2806 * _2847;
                        float _2872 = _2871 * _2871;
                        float _2875 = ((1.0 - _2872) * _2796) + _2872;
                        float _4089 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
                        float _2876 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
                        float _2877 = 1.0 - _2847;
                        float _2887 = (0.5 / (((_2876 * ((_2862 * _2877) + _2847)) + 9.9999999392252902907785028219223e-09) + (((_2876 * _2877) + _2847) * _2862))) * _2876;
                        float _4100 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
                        float _2898 = (((_2848 * 3.1415927410125732421875) * (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) / ((_2870 * _2870) * ((_2813 * 2.1991131305694580078125) + 3.141590118408203125))) * _2802;
                        _2629 = (_2817 * _2765.x) + _2723;
                        _2630 = (_2817 * _2765.y) + _2724;
                        _2631 = (_2817 * _2765.z) + _2725;
                        _2626 = (_2898 * _2782.x) + _2720;
                        _2627 = (_2898 * _2782.y) + _2721;
                        _2628 = (_2898 * _2782.z) + _2722;
                        if (_2727 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2720 = _2626;
                            _2721 = _2627;
                            _2722 = _2628;
                            _2723 = _2629;
                            _2724 = _2630;
                            _2725 = _2631;
                            _2726 = _2727;
                        }
                    }
                    frontier_phi_90_pred = _2631;
                    frontier_phi_90_pred_1 = _2626;
                    frontier_phi_90_pred_2 = _2627;
                    frontier_phi_90_pred_3 = _2628;
                    frontier_phi_90_pred_4 = _2629;
                    frontier_phi_90_pred_5 = _2630;
                }
                _2380 = frontier_phi_90_pred;
                _2370 = frontier_phi_90_pred_1;
                _2372 = frontier_phi_90_pred_2;
                _2374 = frontier_phi_90_pred_3;
                _2376 = frontier_phi_90_pred_4;
                _2378 = frontier_phi_90_pred_5;
                uint _2552 = _2551 + 1u;
                if (_2552 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2545 = _2370;
                    _2546 = _2372;
                    _2547 = _2374;
                    _2548 = _2376;
                    _2549 = _2378;
                    _2550 = _2380;
                    _2551 = _2552;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2369 = _2370;
            _2371 = _2372;
            _2373 = _2374;
            _2375 = _2376;
            _2377 = _2378;
            _2379 = _2380;
        }
        uvec4 _2383 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2384 = _2383.z;
        uint _2386 = (_2384 >> 8u) & 15u;
        float _2513;
        float _2515;
        float _2517;
        float _2519;
        float _2521;
        float _2523;
        if (((4294967295u << _2386) & _2262) == 0u)
        {
            _2513 = _2369;
            _2515 = _2371;
            _2517 = _2373;
            _2519 = _2375;
            _2521 = _2377;
            _2523 = _2379;
        }
        else
        {
            float _2538 = inversesqrt(dot(vec3(_2216, _2217, _2218), vec3(_2216, _2217, _2218)));
            float _2539 = _2538 * _2216;
            float _2540 = _2538 * _2217;
            float _2541 = _2538 * _2218;
            float frontier_phi_81_82_ladder;
            float frontier_phi_81_82_ladder_1;
            float frontier_phi_81_82_ladder_2;
            float frontier_phi_81_82_ladder_3;
            float frontier_phi_81_82_ladder_4;
            float frontier_phi_81_82_ladder_5;
            if (_2386 < ((_2384 >> 12u) & 15u))
            {
                float _2514;
                float _2516;
                float _2518;
                float _2520;
                float _2522;
                float _2524;
                float _2703 = _2369;
                float _2704 = _2371;
                float _2705 = _2373;
                float _2706 = _2375;
                float _2707 = _2377;
                float _2708 = _2379;
                uint _2709 = _2386;
                uint _2718;
                bool _2719;
                for (;;)
                {
                    _2718 = texelFetch(g_lightClassification, int((((_2256 << 5u) + (_2242 << 9u)) + (_2709 << 2u)) >> 2u)).x;
                    _2719 = _2718 == 0u;
                    float frontier_phi_99_pred;
                    float frontier_phi_99_pred_1;
                    float frontier_phi_99_pred_2;
                    float frontier_phi_99_pred_3;
                    float frontier_phi_99_pred_4;
                    float frontier_phi_99_pred_5;
                    if (_2719)
                    {
                        frontier_phi_99_pred = _2706;
                        frontier_phi_99_pred_1 = _2705;
                        frontier_phi_99_pred_2 = _2704;
                        frontier_phi_99_pred_3 = _2703;
                        frontier_phi_99_pred_4 = _2708;
                        frontier_phi_99_pred_5 = _2707;
                    }
                    else
                    {
                        float _2924;
                        float _2925;
                        float _2926;
                        float _2927;
                        float _2928;
                        float _2929;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3222;
                        float _2937 = _2703;
                        float _2938 = _2704;
                        float _2939 = _2705;
                        float _2940 = _2706;
                        float _2941 = _2707;
                        float _2942 = _2708;
                        uint _2943 = _2718;
                        uint _2944;
                        vec4 _2969;
                        float _2970;
                        vec4 _2985;
                        vec3 _2997;
                        vec4 _3012;
                        vec4 _3027;
                        float _3073;
                        bool _3074;
                        for (;;)
                        {
                            uint _2954 = ((_2709 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2943));
                            _2944 = (_2943 + 4294967295u) & _2943;
                            uint _2956 = _2954 * 40u;
                            _2969 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2956)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 3u)).x));
                            _2970 = _2969.w;
                            uint _2972 = (_2954 * 40u) + 4u;
                            _2985 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2972)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 3u)).x));
                            uint _2987 = (_2954 * 40u) + 8u;
                            _2997 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 2u)).x));
                            uint _2999 = (_2954 * 40u) + 16u;
                            _3012 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2999)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 3u)).x));
                            uint _3014 = (_2954 * 40u) + 20u;
                            _3027 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 3u)).x));
                            uint _3029 = (_2954 * 40u) + 24u;
                            vec4 _3042 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3029)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 3u)).x));
                            uint _3048 = (_2954 * 40u) + 28u;
                            vec4 _3061 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 3u)).x));
                            _3073 = fma(_2218, _3061.z, fma(_2217, _3061.y, _3061.x * _2216)) + _3061.w;
                            _3074 = !((fma(_2218, _3042.z, fma(_2217, _3042.y, _3042.x * _2216)) + _3042.w) <= 0.0);
                            float frontier_phi_105_pred;
                            float frontier_phi_105_pred_1;
                            float frontier_phi_105_pred_2;
                            float frontier_phi_105_pred_3;
                            float frontier_phi_105_pred_4;
                            float frontier_phi_105_pred_5;
                            if (_3074)
                            {
                                float _3101 = _2969.x - _2216;
                                float _3102 = _2969.y - _2217;
                                float _3103 = _2969.z - _2218;
                                float _3104 = dot(vec3(_3101, _3102, _3103), vec3(_3101, _3102, _3103));
                                float _3107 = inversesqrt(_3104);
                                float _3108 = _3107 * _3101;
                                float _3109 = _3107 * _3102;
                                float _3110 = _3107 * _3103;
                                float _3114 = 1.0 - (_3104 / (_2970 * _2970));
                                float _4111 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                                float _3115 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
                                float _3119 = sqrt(_3104) * _2985.w;
                                float _3121 = 1.39999997615814208984375 / (_3119 + 1.39999997615814208984375);
                                float _3122 = _3121 * _3121;
                                float _3125 = ((1.0 - _3122) * dot(vec3(_3108, _3109, _3110), vec3(_843, _846, _849))) + _3122;
                                float _3128 = _3119 * _3119;
                                float _3132 = (fma(_2218, _3012.z, fma(_2217, _3012.y, _3012.x * _2216)) + _3012.w) / _3073;
                                float _3133 = (fma(_2218, _3027.z, fma(_2217, _3027.y, _3027.x * _2216)) + _3027.w) / _3073;
                                float _3137 = 1.0 - dot(vec2(_3132, _3133), vec2(_3132, _3133));
                                float _4127 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                                float _3138 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
                                float _3139 = _3138 * (((isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0))) * _3115) / ((_3128 * 0.699999988079071044921875) + 1.0));
                                float _3151 = exp2(log2(1.0 / ((_3128 * 3.5) + 5.0)) * 0.25);
                                float _3152 = 1.0 - _904;
                                float _3159 = sqrt(1.0 - ((1.0 - (_3152 * _3152)) * (1.0 - (_3151 * _3151))));
                                float _3160 = _3159 * _3159;
                                float _3161 = _3160 * _3160;
                                float _3162 = _3108 - _2539;
                                float _3163 = _3109 - _2540;
                                float _3164 = _3110 - _2541;
                                float _3168 = inversesqrt(dot(vec3(_3162, _3163, _3164), vec3(_3162, _3163, _3164)));
                                float _3172 = dot(vec3(_843, _846, _849), vec3((-0.0) - _2539, (-0.0) - _2540, (-0.0) - _2541));
                                float _4138 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                                float _3175 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
                                float _3176 = dot(vec3(_843, _846, _849), vec3(_3168 * _3162, _3168 * _3163, _3168 * _3164));
                                float _4149 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                                float _3179 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
                                float _3183 = ((_3179 * _3179) * (_3161 + (-1.0))) + 1.0;
                                float _3184 = _3121 * _3160;
                                float _3185 = _3184 * _3184;
                                float _3191 = ((1.0 - _3185) * dot(vec3(_843, _846, _849), vec3(_3108, _3109, _3110))) + _3185;
                                float _4160 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                                float _3192 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
                                float _3193 = 1.0 - _3160;
                                float _3203 = (0.5 / (((_3192 * ((_3175 * _3193) + _3160)) + 9.9999999392252902907785028219223e-09) + (((_3192 * _3193) + _3160) * _3175))) * _3192;
                                float _4171 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                                float _3213 = (_3138 * _3115) * (((_3161 * 3.1415927410125732421875) * (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) / ((_3183 * _3183) * ((_3128 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_105_pred = _3139 * _2985.z;
                                frontier_phi_105_pred_1 = _3213 * _2997.x;
                                frontier_phi_105_pred_2 = _3213 * _2997.y;
                                frontier_phi_105_pred_3 = _3213 * _2997.z;
                                frontier_phi_105_pred_4 = _3139 * _2985.x;
                                frontier_phi_105_pred_5 = _3139 * _2985.y;
                            }
                            else
                            {
                                frontier_phi_105_pred = 0.0;
                                frontier_phi_105_pred_1 = 0.0;
                                frontier_phi_105_pred_2 = 0.0;
                                frontier_phi_105_pred_3 = 0.0;
                                frontier_phi_105_pred_4 = 0.0;
                                frontier_phi_105_pred_5 = 0.0;
                            }
                            _3222 = frontier_phi_105_pred;
                            _3217 = frontier_phi_105_pred_1;
                            _3218 = frontier_phi_105_pred_2;
                            _3219 = frontier_phi_105_pred_3;
                            _3220 = frontier_phi_105_pred_4;
                            _3221 = frontier_phi_105_pred_5;
                            _2927 = _3220 + _2940;
                            _2928 = _3221 + _2941;
                            _2929 = _3222 + _2942;
                            _2924 = _3217 + _2937;
                            _2925 = _3218 + _2938;
                            _2926 = _3219 + _2939;
                            if (_2944 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2937 = _2924;
                                _2938 = _2925;
                                _2939 = _2926;
                                _2940 = _2927;
                                _2941 = _2928;
                                _2942 = _2929;
                                _2943 = _2944;
                                continue;
                            }
                        }
                        frontier_phi_99_pred = _2927;
                        frontier_phi_99_pred_1 = _2926;
                        frontier_phi_99_pred_2 = _2925;
                        frontier_phi_99_pred_3 = _2924;
                        frontier_phi_99_pred_4 = _2929;
                        frontier_phi_99_pred_5 = _2928;
                    }
                    _2520 = frontier_phi_99_pred;
                    _2518 = frontier_phi_99_pred_1;
                    _2516 = frontier_phi_99_pred_2;
                    _2514 = frontier_phi_99_pred_3;
                    _2524 = frontier_phi_99_pred_4;
                    _2522 = frontier_phi_99_pred_5;
                    uint _2710 = _2709 + 1u;
                    if (_2710 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2703 = _2514;
                        _2704 = _2516;
                        _2705 = _2518;
                        _2706 = _2520;
                        _2707 = _2522;
                        _2708 = _2524;
                        _2709 = _2710;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_81_82_ladder = _2524;
                frontier_phi_81_82_ladder_1 = _2520;
                frontier_phi_81_82_ladder_2 = _2518;
                frontier_phi_81_82_ladder_3 = _2516;
                frontier_phi_81_82_ladder_4 = _2514;
                frontier_phi_81_82_ladder_5 = _2522;
            }
            else
            {
                frontier_phi_81_82_ladder = _2379;
                frontier_phi_81_82_ladder_1 = _2375;
                frontier_phi_81_82_ladder_2 = _2373;
                frontier_phi_81_82_ladder_3 = _2371;
                frontier_phi_81_82_ladder_4 = _2369;
                frontier_phi_81_82_ladder_5 = _2377;
            }
            _2513 = frontier_phi_81_82_ladder_4;
            _2515 = frontier_phi_81_82_ladder_3;
            _2517 = frontier_phi_81_82_ladder_2;
            _2519 = frontier_phi_81_82_ladder_1;
            _2521 = frontier_phi_81_82_ladder_5;
            _2523 = frontier_phi_81_82_ladder;
        }
        float _2528 = isnan(1.0) ? _888 : (isnan(_888) ? 1.0 : min(_888, 1.0));
        _2275 = (_2528 * _2519) + _2002;
        _2277 = (_2528 * _2521) + _2003;
        _2279 = (_2528 * _2523) + _2004;
        _2281 = ((_2513 * 0.039999999105930328369140625) * _2528) + _2158;
        _2283 = ((_2515 * 0.039999999105930328369140625) * _2528) + _2159;
        _2285 = ((_2517 * 0.039999999105930328369140625) * _2528) + _2160;
    }
    else
    {
        _2275 = _2002;
        _2277 = _2003;
        _2279 = _2004;
        _2281 = _2158;
        _2283 = _2159;
        _2285 = _2160;
    }
    uint _2291 = _864 + uint(cbMatDynParam._m0[0u].w);
    float _4187 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _4198 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _4209 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _2316 = (((isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_2275 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _888))) + ((_2281 + ((isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0))) * _1694)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2291].x * ((((((cbMtdParam._m0[14u].x * _287) * _683.x) - _616) * _287) * _736) + _616));
    float _2318 = ((cbInstanceData._m0[_2291].y * ((((((cbMtdParam._m0[14u].y * _287) * _683.y) - _617) * _287) * _736) + _617)) + ((_2283 + ((isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0))) * _1694)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_2277 + ((isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))) * _888)));
    float _2320 = ((cbInstanceData._m0[_2291].z * ((((((cbMtdParam._m0[14u].z * _287) * _683.z) - _618) * _287) * _736) + _618)) + ((_2285 + ((isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))) * _1694)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_2279 + ((isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))) * _888)));
    uint _2324 = _862 + 6u;
    float _2332 = _823 / cbSceneParam._m0[86u].x;
    float _2333 = _824 / cbSceneParam._m0[86u].y;
    vec4 _2347 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2332, _2333, (log2((isnan(cbSceneParam._m0[77u].w) ? _810 : (isnan(_810) ? cbSceneParam._m0[77u].w : min(_810, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2349 = _2347.x;
    float _2350 = _2347.y;
    float _2351 = _2347.z;
    float _2352 = _2347.w;
    float _2432;
    float _2434;
    float _2436;
    float _2438;
    if (_810 > cbSceneParam._m0[78u].w)
    {
        float _2394 = isnan(_810) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _810 : min(cbSceneParam._m0[80u].w, _810));
        float _2395 = _2394 / _810;
        float _2406 = _2395 * _269;
        float _2407 = _270 * _2395;
        float _2408 = (-0.0) - _2407;
        float _2409 = _2395 * _271;
        float _2411 = (cbSceneParam._m0[77u].w * _2408) / _2394;
        float _2412 = _2411 + cbSceneParam._m0[79u].w;
        float _2413 = cbSceneParam._m0[79u].w - _2407;
        float _2419 = sqrt(((_2406 * _2406) + (_2407 * _2407)) + (_2409 * _2409));
        float _2422 = (1.0 - (cbSceneParam._m0[77u].w / _2394)) * _2419;
        float _2428 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2430 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2639;
        if (abs((_2408 - _2411) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2639 = ((((_2412 > 0.0) ? exp2(_2428 * _2412) : (2.0 - exp2(_2430 * _2412))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2422;
        }
        else
        {
            float _2574 = 1.0 / cbSceneParam._m0[80u].x;
            float _2575 = isnan(_2413) ? _2412 : (isnan(_2412) ? _2413 : max(_2412, _2413));
            float _2576 = isnan(_2413) ? _2412 : (isnan(_2412) ? _2413 : min(_2412, _2413));
            float _2585 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : min(_2575, 0.0));
            float _2586 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : min(_2576, 0.0));
            _2639 = ((abs(_2419 / _2408) * cbSceneParam._m0[80u].y) * ((((_2585 - _2586) * 2.0) - ((exp2(_2428 * (isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0)))) - exp2(_2428 * (isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0))))) * _2574)) - ((exp2(_2430 * _2585) - exp2(_2430 * _2586)) * _2574))) + (_2422 * cbSceneParam._m0[80u].z);
        }
        vec4 _2641 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2332, _2333, 1.0), 0.0);
        float _2650 = exp2((_2639 * (-1.44269502162933349609375)) * (1.0 - _2641.w));
        float _2651 = log2(_2650);
        float _2667 = log2(_2352);
        _2432 = (exp2(_2667 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2651 * cbSceneParam._m0[78u].x)) * _2641.x) / cbSceneParam._m0[78u].x)) + _2349;
        _2434 = (exp2(_2667 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2651 * cbSceneParam._m0[78u].y)) * _2641.y) / cbSceneParam._m0[78u].y)) + _2350;
        _2436 = (exp2(_2667 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2651 * cbSceneParam._m0[78u].z)) * _2641.z) / cbSceneParam._m0[78u].z)) + _2351;
        _2438 = _2650 * _2352;
    }
    else
    {
        _2432 = _2349;
        _2434 = _2350;
        _2436 = _2351;
        _2438 = _2352;
    }
    float _2450 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2451 = _2450 == 3.0;
    float _2452 = log2(_2438);
    float _2459 = exp2(_2452 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0)));
    float _2460 = exp2(_2452 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0)));
    float _2461 = exp2(_2452 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0)));
    float _2470 = (_2450 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2470 * (_2451 ? _2459 : (_2459 + (cbSceneParam._m0[72u].w * _2432)));
    SV_Target.y = _2470 * (_2451 ? _2460 : (_2460 + (cbSceneParam._m0[72u].w * _2434)));
    SV_Target.z = _2470 * (_2451 ? _2461 : (_2461 + (cbSceneParam._m0[72u].w * _2436)));
    SV_Target.w = cbInstanceData._m0[_2324].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2324].w;
}


