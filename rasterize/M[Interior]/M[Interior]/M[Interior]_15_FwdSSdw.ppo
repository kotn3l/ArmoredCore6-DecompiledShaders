#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1137;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _280 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _283 = _280.x;
    vec4 _301 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _318 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _283) + cbMtdParam._m0[12u].x) * _301.x;
    float _320 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _283) + cbMtdParam._m0[12u].y) * _301.y;
    float _322 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _283) + cbMtdParam._m0[12u].z) * _301.z;
    vec4 _343 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _379 = cbMtdParam._m0[21u].w + _265;
    float _380 = cbMtdParam._m0[22u].x + _266;
    float _381 = cbMtdParam._m0[22u].y + _267;
    float _395 = (-0.0) - dot(vec3(_379, _380, _381), vec3(_194, _195, _196));
    float _396 = (-0.0) - dot(vec3(_379, _380, _381), vec3(_208, _209, _210));
    float _397 = (-0.0) - dot(vec3(_379, _380, _381), vec3((-0.0) - _201, (-0.0) - _202, (-0.0) - _203));
    float _401 = inversesqrt(dot(vec3(_395, _396, _397), vec3(_395, _396, _397)));
    float _404 = _401 * _397;
    float _405 = (_401 * _395) + ((cbMtdParam._m0[19u].w * _283) * ((_343.x * 2.0) + (-1.0)));
    float _406 = (_401 * _396) + ((cbMtdParam._m0[20u].x * _283) * ((_343.y * 2.0) + (-1.0)));
    float _407 = _405 * cbMtdParam._m0[18u].z;
    float _408 = _406 * cbMtdParam._m0[18u].y;
    float _409 = fract(TEXCOORD.x);
    float _410 = fract(TEXCOORD.y);
    float _416;
    if (_407 > 0.0)
    {
        _416 = (1.0 - _409) / _407;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_407 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _409) / _407;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _416 = frontier_phi_3_2_ladder;
    }
    float _424;
    if (_408 > 0.0)
    {
        _424 = (1.0 - _410) / _408;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_408 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _410) / _408;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _424 = frontier_phi_7_6_ladder;
    }
    bool _426 = _404 > 0.0;
    float _428 = _426 ? (cbMtdParam._m0[15u].x / _404) : 5000.0;
    float _429 = isnan(_424) ? _416 : (isnan(_416) ? _424 : min(_416, _424));
    float _430 = isnan(_428) ? _429 : (isnan(_429) ? _428 : min(_429, _428));
    float _434 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _435 = _409 + (-0.5);
    float _438 = _410 + (-0.5);
    float _441 = ((_430 * _404) + _434) / _434;
    vec4 _465 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_435 + (_430 * _407)) / _441) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_438 + (_430 * _408)) / _441) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _478 = (_465.x * _283) * cbMtdParam._m0[9u].x;
    float _479 = (_465.y * _283) * cbMtdParam._m0[9u].y;
    float _480 = (_465.z * _283) * cbMtdParam._m0[9u].z;
    float _498 = _405 * cbMtdParam._m0[20u].z;
    float _499 = _406 * cbMtdParam._m0[20u].y;
    bool _500 = _498 > 0.0;
    float _505;
    if (_500)
    {
        _505 = (1.0 - _409) / _498;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_498 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _409) / _498;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _505 = frontier_phi_11_10_ladder;
    }
    bool _507 = _499 > 0.0;
    float _512;
    if (_507)
    {
        _512 = (1.0 - _410) / _499;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_499 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _410) / _499;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _512 = frontier_phi_15_14_ladder;
    }
    float _515 = _426 ? (cbMtdParam._m0[16u].x / _404) : 5000.0;
    float _516 = isnan(_512) ? _505 : (isnan(_505) ? _512 : min(_505, _512));
    float _517 = isnan(_515) ? _516 : (isnan(_516) ? _515 : min(_516, _515));
    float _521 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _525 = ((_517 * _404) + _521) / _521;
    float _530 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _532 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _548 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_435 + (_517 * _498)) / _525) + 0.5) + _530) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_438 + (_517 * _499)) / _525) + 0.5) + _532) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _563;
    if (_500)
    {
        _563 = (1.0 - _409) / _498;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_498 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _409) / _498;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _563 = frontier_phi_19_18_ladder;
    }
    float _569;
    if (_507)
    {
        _569 = (1.0 - _410) / _499;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_499 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _410) / _499;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _569 = frontier_phi_23_22_ladder;
    }
    float _571 = isnan(_569) ? _563 : (isnan(_563) ? _569 : min(_563, _569));
    float _572 = isnan(_515) ? _571 : (isnan(_571) ? _515 : min(_571, _515));
    float _579 = ((_572 * _404) + _521) / _521;
    vec4 _600 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_435 + (_572 * _498)) / _579) + 0.5) + _530) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_438 + (_572 * _499)) / _579) + 0.5) + _532) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _602 = _600.x;
    float _612 = _283 * 0.1500000059604644775390625;
    float _623 = (_612 * ((_478 - _318) + (((((cbMtdParam._m0[10u].x * _283) * _548.x) - _478) * _283) * _602))) + _318;
    float _624 = (_612 * ((_479 - _320) + (((((cbMtdParam._m0[10u].y * _283) * _548.y) - _479) * _283) * _602))) + _320;
    float _625 = (_612 * ((_480 - _322) + (((((cbMtdParam._m0[10u].z * _283) * _548.z) - _480) * _283) * _602))) + _322;
    vec4 _637 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _641 = _637.z;
    float _644 = (_637.x * 2.0) + (-1.0);
    float _645 = (_637.y * 2.0) + (-1.0);
    float _646 = dot(vec2(_644, _645), vec2(_644, _645));
    float _3272 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _651 = sqrt(1.0 - (isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0))));
    float _654 = fma(_651, _201, fma(_645, _208, _644 * _194));
    float _657 = fma(_651, _202, fma(_645, _209, _644 * _195));
    float _660 = fma(_651, _203, fma(_645, _210, _644 * _196));
    float _664 = inversesqrt(dot(vec3(_654, _657, _660), vec3(_654, _657, _660)));
    float _665 = _664 * _654;
    float _666 = _664 * _657;
    float _667 = _664 * _660;
    float _3283 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _668 = isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0));
    float _3294 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _3305 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _3316 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _687 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _691 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _692 = _265 * _691;
    float _693 = _266 * _691;
    float _694 = _267 * _691;
    float _700 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _701 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _721 = fma(_667, cbSceneParam._m0[5u].z, fma(_666, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _665));
    float _724 = fma(_667, cbSceneParam._m0[6u].z, fma(_666, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _665));
    float _727 = fma(_667, cbSceneParam._m0[7u].z, fma(_666, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _665));
    uint _740 = uint(roundEven(NORMAL.w)) * 13u;
    uint _743 = (_740 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _749 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0)))) * cbInstanceData._m0[_743].x;
    float _750 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0)))) * cbInstanceData._m0[_743].y;
    float _751 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0)))) * cbInstanceData._m0[_743].z;
    float _3327 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _752 = isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0));
    float _3338 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _753 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
    float _3349 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _754 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
    vec4 _763 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _700, cbSceneParam._m0[86u].y * _701));
    float _766 = _763.x * TEXCOORD.z;
    float _767 = dot(vec3(_665, _666, _667), vec3(_692, _693, _694));
    float _770 = _767 * 2.0;
    float _774 = (_770 * _665) - _692;
    float _775 = (_770 * _666) - _693;
    float _776 = (_770 * _667) - _694;
    float _780 = abs(dot(vec3(_692, _693, _694), vec3(_665, _666, _667)));
    float _3360 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _782 = sqrt(_668);
    float _795 = exp2((_782 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_782 * 3.0));
    float _827 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _831 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _835 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1136;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _863 = fma(_835, cbModelParam._m0[26u].z, fma(_831, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _827));
        float _867 = fma(_835, cbModelParam._m0[27u].z, fma(_831, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _827));
        float _871 = fma(_835, cbModelParam._m0[28u].z, fma(_831, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _827));
        float _894 = _827 + _665;
        float _895 = _831 + _666;
        float _896 = _835 + _667;
        float _906 = fma(_896, cbModelParam._m0[26u].z, fma(_895, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _894)) - _863;
        float _907 = fma(_896, cbModelParam._m0[27u].z, fma(_895, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _894)) - _867;
        float _908 = fma(_896, cbModelParam._m0[28u].z, fma(_895, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _894)) - _871;
        float _912 = inversesqrt(dot(vec3(_906, _907, _908), vec3(_906, _907, _908)));
        float _925 = ((_912 * _906) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_863 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _926 = ((_912 * _907) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_867 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _927 = ((_912 * _908) / cbModelParam._m0[34u].z) + ((((((_871 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _930 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_925, _926, _927), 0.0);
        vec4 _937 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_925, _926, _927), 0.0);
        vec4 _944 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_925, _926, _927), 0.0);
        vec4 _951 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_925, _926, _927), 0.0);
        float _964 = exp2((_930.w + (-0.5)) * 20.0) * 2.0;
        float _965 = _964 * (_930.x + (-0.5));
        float _966 = _964 * (_930.y + (-0.5));
        float _967 = _964 * (_930.z + (-0.5));
        float _974 = exp2((_937.w + (-0.5)) * 20.0) * 2.0;
        float _975 = _974 * (_937.x + (-0.5));
        float _976 = _974 * (_937.y + (-0.5));
        float _977 = _974 * (_937.z + (-0.5));
        float _984 = exp2((_944.w + (-0.5)) * 20.0) * 2.0;
        float _985 = _984 * (_944.x + (-0.5));
        float _986 = _984 * (_944.y + (-0.5));
        float _987 = _984 * (_944.z + (-0.5));
        float _994 = exp2((_951.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_951.x + (-0.5));
        float _996 = _994 * (_951.y + (-0.5));
        float _997 = _994 * (_951.z + (-0.5));
        float _998 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _999 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1000 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1001 = _965 * 0.5;
        float _1002 = _975 * 0.5;
        float _1003 = _985 * 0.5;
        float _1004 = dot(vec3(_1001, _1002, _1003), vec3(_1001, _1002, _1003));
        float _1009 = (_1004 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1004);
        float _1018 = (dot(vec3(_665, _666, _667), vec3(_1009 * _1001, _1009 * _1002, _1009 * _1003)) + 1.0) * 0.5;
        float _3386 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1028 = sqrt(((_1002 * _1002) + (_1001 * _1001)) + (_1003 * _1003)) / (_998 + 9.9999997473787516355514526367188e-06);
        float _3397 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
        float _1030 = _1029 * 2.0;
        float _1034 = (1.0 - _1029) / (_1029 + 1.0);
        float _3408 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
        float _1044 = ((((1.0 - _1035) * (_1030 + 2.0)) * exp2(log2(isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0))) * (_1030 + 1.0))) + _1035) * _998;
        float _1045 = _966 * 0.5;
        float _1046 = _976 * 0.5;
        float _1047 = _986 * 0.5;
        float _1048 = dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047));
        float _1053 = (_1048 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1048);
        float _1061 = (dot(vec3(_665, _666, _667), vec3(_1053 * _1045, _1053 * _1046, _1053 * _1047)) + 1.0) * 0.5;
        float _3419 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1070 = sqrt(((_1046 * _1046) + (_1045 * _1045)) + (_1047 * _1047)) / (_999 + 9.9999997473787516355514526367188e-06);
        float _3430 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
        float _1072 = _1071 * 2.0;
        float _1076 = (1.0 - _1071) / (_1071 + 1.0);
        float _3441 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
        float _1086 = ((((1.0 - _1077) * (_1072 + 2.0)) * exp2(log2(isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0))) * (_1072 + 1.0))) + _1077) * _999;
        float _1087 = _967 * 0.5;
        float _1088 = _977 * 0.5;
        float _1089 = _987 * 0.5;
        float _1090 = dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089));
        float _1095 = (_1090 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1090);
        float _1103 = (dot(vec3(_665, _666, _667), vec3(_1095 * _1087, _1095 * _1088, _1095 * _1089)) + 1.0) * 0.5;
        float _3452 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1112 = sqrt(((_1088 * _1088) + (_1087 * _1087)) + (_1089 * _1089)) / (_1000 + 9.9999997473787516355514526367188e-06);
        float _3463 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _1114 = _1113 * 2.0;
        float _1118 = (1.0 - _1113) / (_1113 + 1.0);
        float _3474 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _1128 = ((((1.0 - _1119) * (_1114 + 2.0)) * exp2(log2(isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))) * (_1114 + 1.0))) + _1119) * _1000;
        _1136 = _967;
        _1138 = _966;
        _1139 = _965;
        _1140 = _977;
        _1141 = _976;
        _1142 = _975;
        _1143 = _987;
        _1144 = _986;
        _1145 = _985;
        _1146 = _1000;
        _1147 = _999;
        _1148 = _998;
        _1149 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0)));
        _1150 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0)));
        _1151 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)));
    }
    else
    {
        _1136 = _1137;
        _1138 = _1137;
        _1139 = _1137;
        _1140 = _1137;
        _1141 = _1137;
        _1142 = _1137;
        _1143 = _1137;
        _1144 = _1137;
        _1145 = _1137;
        _1146 = _1137;
        _1147 = _1137;
        _1148 = _1137;
        _1149 = 0.0;
        _1150 = 0.0;
        _1151 = 0.0;
    }
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1177 = fma(_835, cbModelParam._m0[30u].z, fma(_831, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _827));
        float _1181 = fma(_835, cbModelParam._m0[31u].z, fma(_831, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _827));
        float _1185 = fma(_835, cbModelParam._m0[32u].z, fma(_831, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _827));
        float _1208 = _827 + _665;
        float _1209 = _831 + _666;
        float _1210 = _835 + _667;
        float _1220 = fma(_1210, cbModelParam._m0[30u].z, fma(_1209, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1208)) - _1177;
        float _1221 = fma(_1210, cbModelParam._m0[31u].z, fma(_1209, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1208)) - _1181;
        float _1222 = fma(_1210, cbModelParam._m0[32u].z, fma(_1209, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1208)) - _1185;
        float _1226 = inversesqrt(dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222)));
        float _1239 = ((_1226 * _1220) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1177 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1240 = ((_1226 * _1221) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1181 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1241 = ((_1226 * _1222) / cbModelParam._m0[35u].z) + ((((((_1185 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        float _1276 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1243.x + (-0.5));
        float _1278 = _1276 * (_1243.y + (-0.5));
        float _1279 = _1276 * (_1243.z + (-0.5));
        float _1286 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1250.x + (-0.5));
        float _1288 = _1286 * (_1250.y + (-0.5));
        float _1289 = _1286 * (_1250.z + (-0.5));
        float _1296 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1257.x + (-0.5));
        float _1298 = _1296 * (_1257.y + (-0.5));
        float _1299 = _1296 * (_1257.z + (-0.5));
        float _1306 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1264.x + (-0.5));
        float _1308 = _1306 * (_1264.y + (-0.5));
        float _1309 = _1306 * (_1264.z + (-0.5));
        float _1310 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1311 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1312 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1313 = _1277 * 0.5;
        float _1314 = _1287 * 0.5;
        float _1315 = _1297 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1329 = (dot(vec3(_665, _666, _667), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _3515 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1338 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1310 + 9.9999997473787516355514526367188e-06);
        float _3526 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
        float _1340 = _1339 * 2.0;
        float _1344 = (1.0 - _1339) / (_1339 + 1.0);
        float _3537 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _1354 = ((((1.0 - _1345) * (_1340 + 2.0)) * exp2(log2(isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0))) * (_1340 + 1.0))) + _1345) * _1310;
        float _1355 = _1278 * 0.5;
        float _1356 = _1288 * 0.5;
        float _1357 = _1298 * 0.5;
        float _1358 = dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357));
        float _1363 = (_1358 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1358);
        float _1371 = (dot(vec3(_665, _666, _667), vec3(_1363 * _1355, _1363 * _1356, _1363 * _1357)) + 1.0) * 0.5;
        float _3548 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1380 = sqrt(((_1356 * _1356) + (_1355 * _1355)) + (_1357 * _1357)) / (_1311 + 9.9999997473787516355514526367188e-06);
        float _3559 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _1382 = _1381 * 2.0;
        float _1386 = (1.0 - _1381) / (_1381 + 1.0);
        float _3570 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _1396 = ((((1.0 - _1387) * (_1382 + 2.0)) * exp2(log2(isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) * (_1382 + 1.0))) + _1387) * _1311;
        float _1397 = _1279 * 0.5;
        float _1398 = _1289 * 0.5;
        float _1399 = _1299 * 0.5;
        float _1400 = dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399));
        float _1405 = (_1400 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1400);
        float _1413 = (dot(vec3(_665, _666, _667), vec3(_1405 * _1397, _1405 * _1398, _1405 * _1399)) + 1.0) * 0.5;
        float _3581 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1422 = sqrt(((_1398 * _1398) + (_1397 * _1397)) + (_1399 * _1399)) / (_1312 + 9.9999997473787516355514526367188e-06);
        float _3592 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _1424 = _1423 * 2.0;
        float _1428 = (1.0 - _1423) / (_1423 + 1.0);
        float _3603 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _1438 = ((((1.0 - _1429) * (_1424 + 2.0)) * exp2(log2(isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * (_1424 + 1.0))) + _1429) * _1312;
        _1446 = _1279;
        _1447 = _1278;
        _1448 = _1277;
        _1449 = _1289;
        _1450 = _1288;
        _1451 = _1287;
        _1452 = _1299;
        _1453 = _1298;
        _1454 = _1297;
        _1455 = _1312;
        _1456 = _1311;
        _1457 = _1310;
        _1458 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)));
        _1459 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)));
        _1460 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)));
    }
    else
    {
        _1446 = _1137;
        _1447 = _1137;
        _1448 = _1137;
        _1449 = _1137;
        _1450 = _1137;
        _1451 = _1137;
        _1452 = _1137;
        _1453 = _1137;
        _1454 = _1137;
        _1455 = _1137;
        _1456 = _1137;
        _1457 = _1137;
        _1458 = 0.0;
        _1459 = 0.0;
        _1460 = 0.0;
    }
    float _1470 = (cbModelParam._m0[1u].x * (_1458 - _1149)) + _1149;
    float _1471 = (cbModelParam._m0[1u].x * (_1459 - _1150)) + _1150;
    float _1472 = (cbModelParam._m0[1u].x * (_1460 - _1151)) + _1151;
    float _1493 = fma(_1472, cbSceneParam._m0[89u].z, fma(_1471, cbSceneParam._m0[89u].y, _1470 * cbSceneParam._m0[89u].x));
    float _1496 = fma(_1472, cbSceneParam._m0[90u].z, fma(_1471, cbSceneParam._m0[90u].y, _1470 * cbSceneParam._m0[90u].x));
    float _1499 = fma(_1472, cbSceneParam._m0[91u].z, fma(_1471, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1470));
    float _1514 = _774 * 0.5;
    float _1515 = _775 * 0.5;
    float _1516 = _776 * 0.5;
    float _1517 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1448, _1451, _1454, _1457));
    float _1520 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1447, _1450, _1453, _1456));
    float _1523 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1446, _1449, _1452, _1455));
    float _1557;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1530 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1136, _1140, _1143, _1146));
        float _1534 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1138, _1141, _1144, _1147));
        float _1538 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1139, _1142, _1145, _1148));
        float _1545 = dot(vec4(cbModelParam._m0[39u]), vec4(_1514, _1515, _1516, 1.0));
        _1557 = dot(vec3(isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)), isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)), isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1545) ? 0.0 : (isnan(0.0) ? _1545 : max(0.0, _1545))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1557 = 1.0;
    }
    float _1568;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1559 = dot(vec4(cbModelParam._m0[40u]), vec4(_1514, _1515, _1516, 1.0));
        _1568 = dot(vec3(isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)), isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)), isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1559) ? 0.0 : (isnan(0.0) ? _1559 : max(0.0, _1559))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1568 = 1.0;
    }
    float _1572 = (_1568 * cbModelParam._m0[1u].x) + (_1557 * (1.0 - cbModelParam._m0[1u].x));
    float _1582 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _668);
    float _1583 = isnan(_1582) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1582 : min(cbModelParam._m0[25u].z, _1582));
    float _1664;
    float _1666;
    float _1668;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1631 = fma(_835, cbModelParam._m0[13u].z, fma(_831, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _827)) + cbModelParam._m0[13u].w;
        float _1635 = fma(_835, cbModelParam._m0[14u].z, fma(_831, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _827)) + cbModelParam._m0[14u].w;
        float _1639 = fma(_835, cbModelParam._m0[15u].z, fma(_831, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _827)) + cbModelParam._m0[15u].w;
        float _1642 = fma(_776, cbModelParam._m0[13u].z, fma(_775, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _774));
        float _1645 = fma(_776, cbModelParam._m0[14u].z, fma(_775, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _774));
        float _1648 = fma(_776, cbModelParam._m0[15u].z, fma(_775, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _774));
        float _1676;
        if (_1642 > 0.0)
        {
            _1676 = abs((1.0 - _1631) / _1642);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1631 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1676 = frontier_phi_38_36_ladder;
        }
        float _2045;
        if (_1645 > 0.0)
        {
            _2045 = abs((1.0 - _1635) / _1645);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1635 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _2045 = frontier_phi_47_43_ladder;
        }
        float _2345;
        if (_1648 > 0.0)
        {
            _2345 = abs((1.0 - _1639) / _1648);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1648 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1639 + 1.0) / _1648);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _2345 = frontier_phi_61_54_ladder;
        }
        float _2347 = isnan(_2045) ? _1676 : (isnan(_1676) ? _2045 : min(_1676, _2045));
        float _2348 = isnan(_2345) ? _2347 : (isnan(_2347) ? _2345 : min(_2347, _2345));
        float _2352 = (_2348 * _1642) + _1631;
        float _2353 = (_2348 * _1645) + _1635;
        float _2354 = (_2348 * _1648) + _1639;
        float _2355 = _2348 * 9.9999997473787516355514526367188e-05;
        float _2356 = (-1.0) - _2355;
        float _2358 = _2355 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_2354 > _2358) || ((_2354 < _2356) || ((_2353 > _2358) || ((_2353 < _2356) || ((_2352 < _2356) || (_2352 > _2358))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2480 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2354, cbModelParam._m0[9u].z, fma(_2353, cbModelParam._m0[9u].y, _2352 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2354, cbModelParam._m0[10u].z, fma(_2353, cbModelParam._m0[10u].y, _2352 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2354, cbModelParam._m0[11u].z, fma(_2353, cbModelParam._m0[11u].y, _2352 * cbModelParam._m0[11u].x))), _1583);
            frontier_phi_37_61_ladder = _2480.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _2480.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _2480.x * cbModelParam._m0[1u].y;
        }
        _1664 = frontier_phi_37_61_ladder_2;
        _1666 = frontier_phi_37_61_ladder_1;
        _1668 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1652 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_774, _775, _776), _1583);
        _1664 = _1652.x * cbModelParam._m0[1u].y;
        _1666 = _1652.y * cbModelParam._m0[1u].y;
        _1668 = _1652.z * cbModelParam._m0[1u].y;
    }
    float _1672 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _668);
    float _1673 = isnan(_1672) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1672 : min(cbModelParam._m0[25u].w, _1672));
    float _1761;
    float _1763;
    float _1765;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1725 = fma(_835, cbModelParam._m0[21u].z, fma(_831, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _827)) + cbModelParam._m0[21u].w;
        float _1729 = fma(_835, cbModelParam._m0[22u].z, fma(_831, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _827)) + cbModelParam._m0[22u].w;
        float _1733 = fma(_835, cbModelParam._m0[23u].z, fma(_831, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _827)) + cbModelParam._m0[23u].w;
        float _1736 = fma(_776, cbModelParam._m0[21u].z, fma(_775, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _774));
        float _1739 = fma(_776, cbModelParam._m0[22u].z, fma(_775, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _774));
        float _1742 = fma(_776, cbModelParam._m0[23u].z, fma(_775, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _774));
        float _2050;
        if (_1736 > 0.0)
        {
            _2050 = abs((1.0 - _1725) / _1736);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1725 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _2050 = frontier_phi_49_45_ladder;
        }
        float _2371;
        if (_1739 > 0.0)
        {
            _2371 = abs((1.0 - _1729) / _1739);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1739 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1729 + 1.0) / _1739);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _2371 = frontier_phi_63_56_ladder;
        }
        float _2540;
        if (_1742 > 0.0)
        {
            _2540 = abs((1.0 - _1733) / _1742);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1742 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1733 + 1.0) / _1742);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2540 = frontier_phi_77_72_ladder;
        }
        float _2542 = isnan(_2371) ? _2050 : (isnan(_2050) ? _2371 : min(_2050, _2371));
        float _2543 = isnan(_2540) ? _2542 : (isnan(_2542) ? _2540 : min(_2542, _2540));
        float _2547 = (_2543 * _1736) + _1725;
        float _2548 = (_2543 * _1739) + _1729;
        float _2549 = (_2543 * _1742) + _1733;
        float _2550 = _2543 * 9.9999997473787516355514526367188e-05;
        float _2551 = (-1.0) - _2550;
        float _2553 = _2550 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_2549 > _2553) || ((_2549 < _2551) || ((_2548 > _2553) || ((_2548 < _2551) || ((_2547 < _2551) || (_2547 > _2553))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2782 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2549, cbModelParam._m0[17u].z, fma(_2548, cbModelParam._m0[17u].y, _2547 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2549, cbModelParam._m0[18u].z, fma(_2548, cbModelParam._m0[18u].y, _2547 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2549, cbModelParam._m0[19u].z, fma(_2548, cbModelParam._m0[19u].y, _2547 * cbModelParam._m0[19u].x))), _1673);
            frontier_phi_46_77_ladder = _2782.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _2782.y * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _2782.x * cbModelParam._m0[1u].z;
        }
        _1761 = frontier_phi_46_77_ladder_2;
        _1763 = frontier_phi_46_77_ladder_1;
        _1765 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1745 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_774, _775, _776), _1673);
        _1761 = _1745.x * cbModelParam._m0[1u].z;
        _1763 = _1745.y * cbModelParam._m0[1u].z;
        _1765 = _1745.z * cbModelParam._m0[1u].z;
    }
    float _1777 = ((((1.0 - _795) * ((_782 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_795 * _782)) * _766;
    float _1778 = _1777 * ((cbModelParam._m0[1u].w * (_1761 - _1664)) + _1664);
    float _1779 = _1777 * ((cbModelParam._m0[1u].w * (_1763 - _1666)) + _1666);
    float _1780 = _1777 * ((cbModelParam._m0[1u].w * (_1765 - _1668)) + _1668);
    float _1783 = fma(_1780, cbSceneParam._m0[89u].z, fma(_1779, cbSceneParam._m0[89u].y, _1778 * cbSceneParam._m0[89u].x));
    float _1786 = fma(_1780, cbSceneParam._m0[90u].z, fma(_1779, cbSceneParam._m0[90u].y, _1778 * cbSceneParam._m0[90u].x));
    float _1789 = fma(_1780, cbSceneParam._m0[91u].z, fma(_1779, cbSceneParam._m0[91u].y, _1778 * cbSceneParam._m0[91u].x));
    vec4 _1797 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_700, _701));
    float _1799 = _1797.w;
    float _1811 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1799);
    float _1812 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1799);
    float _1813 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1799);
    uvec4 _1817 = floatBitsToUint(cbInstanceData._m0[_740 + 5u]);
    uint _1819 = _1817.x * 14u;
    uint _1820 = _1819 + 13u;
    float _1825 = _766 + (-1.0);
    float _1828 = (cbLight._m0[_1820].x * _1825) + 1.0;
    float _1829 = (cbLight._m0[_1820].y * _1825) + 1.0;
    uint _1830 = _1819 + 5u;
    float _1836 = isnan(1.0) ? _1829 : (isnan(_1829) ? 1.0 : min(_1829, 1.0));
    uint _1840 = _1819 + 4u;
    float _1849 = isnan(1.0) ? _1828 : (isnan(_1828) ? 1.0 : min(_1828, 1.0));
    uint _1853 = _1819 | 1u;
    float _1864 = dot(vec3(cbLight._m0[_1819].xyz), vec3(_665, _666, _667));
    float _1867 = dot(vec3(cbLight._m0[_1853].xyz), vec3(_665, _666, _667));
    float _3739 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _3750 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1872 = (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * 0.3183098733425140380859375;
    float _1874 = (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * 0.3183098733425140380859375;
    float _1881 = ((cbLight._m0[_1830].x * _1836) * _1874) + (((cbLight._m0[_1840].x * _1811) * _1849) * _1872);
    float _1882 = ((_1836 * cbLight._m0[_1830].y) * _1874) + (((cbLight._m0[_1840].y * _1812) * _1849) * _1872);
    float _1883 = ((_1836 * cbLight._m0[_1830].z) * _1874) + (((cbLight._m0[_1840].z * _1813) * _1849) * _1872);
    uint _1885 = _1819 + 8u;
    float _1898 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1819].w)) * _668) * 0.949999988079071044921875);
    float _1899 = _1898 * _1898;
    float _1900 = cbLight._m0[_1819].x + _692;
    float _1901 = cbLight._m0[_1819].y + _693;
    float _1902 = cbLight._m0[_1819].z + _694;
    float _1906 = inversesqrt(dot(vec3(_1900, _1901, _1902), vec3(_1900, _1901, _1902)));
    float _1907 = _1906 * _1900;
    float _1908 = _1906 * _1901;
    float _1909 = _1906 * _1902;
    float _1910 = dot(vec3(_665, _666, _667), vec3(cbLight._m0[_1819].xyz));
    float _3761 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1913 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _3772 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _1914 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _1915 = dot(vec3(_665, _666, _667), vec3(_1907, _1908, _1909));
    float _3783 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1918 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _1919 = dot(vec3(cbLight._m0[_1819].xyz), vec3(_1907, _1908, _1909));
    float _3794 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1923 = _1899 * _1899;
    float _1927 = ((_1918 * _1918) * (_1923 + (-1.0))) + 1.0;
    float _1938 = (exp2(log2(1.0 - (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1939 = 1.0 - _1899;
    float _1950 = (0.5 / (((_1914 * ((_1913 * _1939) + _1899)) + 9.9999999392252902907785028219223e-09) + (((_1914 * _1939) + _1899) * _1913))) * _1913;
    float _3805 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1952 = (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_1923 / ((_1927 * _1927) * 3.141590118408203125));
    uint _1966 = _1819 + 9u;
    float _1977 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1853].w)) * _668) * 0.949999988079071044921875);
    float _1978 = _1977 * _1977;
    float _1979 = cbLight._m0[_1853].x + _692;
    float _1980 = cbLight._m0[_1853].y + _693;
    float _1981 = cbLight._m0[_1853].z + _694;
    float _1985 = inversesqrt(dot(vec3(_1979, _1980, _1981), vec3(_1979, _1980, _1981)));
    float _1986 = _1985 * _1979;
    float _1987 = _1985 * _1980;
    float _1988 = _1985 * _1981;
    float _1989 = dot(vec3(_665, _666, _667), vec3(cbLight._m0[_1853].xyz));
    float _3816 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1992 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _1993 = dot(vec3(_665, _666, _667), vec3(_1986, _1987, _1988));
    float _3827 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1996 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _1997 = dot(vec3(cbLight._m0[_1853].xyz), vec3(_1986, _1987, _1988));
    float _3838 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _2001 = _1978 * _1978;
    float _2005 = ((_1996 * _1996) * (_2001 + (-1.0))) + 1.0;
    float _2014 = (exp2(log2(1.0 - (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2015 = 1.0 - _1978;
    float _2025 = (0.5 / (((_1914 * ((_1992 * _2015) + _1978)) + 9.9999999392252902907785028219223e-09) + (((_1914 * _2015) + _1978) * _1992))) * _1992;
    float _3849 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2027 = (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_2001 / ((_2005 * _2005) * 3.141590118408203125));
    float _2037 = (((_2014 * cbLight._m0[_1966].x) * _2027) * _1836) + ((((cbLight._m0[_1885].x * _1811) * _1938) * _1952) * _1849);
    float _2038 = (((_2014 * cbLight._m0[_1966].y) * _2027) * _1836) + ((((cbLight._m0[_1885].y * _1812) * _1938) * _1952) * _1849);
    float _2039 = (((_2014 * cbLight._m0[_1966].z) * _2027) * _1836) + ((((cbLight._m0[_1885].z * _1813) * _1938) * _1952) * _1849);
    float _2154;
    float _2156;
    float _2158;
    float _2160;
    float _2162;
    float _2164;
    if (_1817.y == 0u)
    {
        float _2094 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2095 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2094;
        float _2096 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2094;
        float _2097 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2094;
        uvec4 _2109 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2110 = _2109.x;
        uint _2121 = uint((float(_2109.y) * floor(float(uint(cbSceneParam._m0[85u].y * _701) / _2110))) + floor(float(uint(cbSceneParam._m0[85u].x * _700) / _2110)));
        float _2131 = (log2(_2097 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2132 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        uint _2135 = uint(isnan(14.0) ? _2132 : (isnan(_2132) ? 14.0 : min(_2132, 14.0)));
        uvec4 _2140 = texelFetch(g_lightClusterGridBuffer, int(((_2135 << 2u) + (_2121 << 6u)) >> 2u));
        uint _2141 = _2140.x;
        uint _2142 = _2109.z;
        float _2232;
        float _2234;
        float _2236;
        float _2238;
        float _2240;
        float _2242;
        if (((((1u << ((_2142 >> 4u) & 15u)) + 4294967295u) & _2141) == 0u) || ((_2142 & 240u) == 0u))
        {
            _2232 = 0.0;
            _2234 = 0.0;
            _2236 = 0.0;
            _2238 = 0.0;
            _2240 = 0.0;
            _2242 = 0.0;
        }
        else
        {
            float _2233;
            float _2235;
            float _2237;
            float _2239;
            float _2241;
            float _2243;
            float _2408 = 0.0;
            float _2409 = 0.0;
            float _2410 = 0.0;
            float _2411 = 0.0;
            float _2412 = 0.0;
            float _2413 = 0.0;
            uint _2414 = 0u;
            uint _2423;
            bool _2424;
            for (;;)
            {
                _2423 = texelFetch(g_lightClassification, int((((_2135 << 5u) + (_2121 << 9u)) + (_2414 << 2u)) >> 2u)).x;
                _2424 = _2423 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2424)
                {
                    frontier_phi_74_pred = _2411;
                    frontier_phi_74_pred_1 = _2410;
                    frontier_phi_74_pred_2 = _2409;
                    frontier_phi_74_pred_3 = _2408;
                    frontier_phi_74_pred_4 = _2412;
                    frontier_phi_74_pred_5 = _2413;
                }
                else
                {
                    float _2583;
                    float _2584;
                    float _2585;
                    float _2586;
                    float _2587;
                    float _2588;
                    uint _2589;
                    _2583 = _2408;
                    _2584 = _2409;
                    _2585 = _2410;
                    _2586 = _2411;
                    _2587 = _2412;
                    _2588 = _2413;
                    _2589 = _2423;
                    float _2489;
                    float _2490;
                    float _2491;
                    float _2492;
                    float _2493;
                    float _2494;
                    for (;;)
                    {
                        uint _2593 = uint(findLSB(_2589)) + (_2414 << 5u);
                        uint _2590 = (_2589 + 4294967295u) & _2589;
                        uint _2595 = _2593 * 48u;
                        vec4 _2609 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2595)).x, texelFetch(g_PointLightRenderingBuffer, int(_2595 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2595 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2595 + 3u)).x));
                        uint _2615 = (_2593 * 48u) + 4u;
                        vec4 _2628 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2615)).x, texelFetch(g_PointLightRenderingBuffer, int(_2615 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2615 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2615 + 3u)).x));
                        uint _2634 = (_2593 * 48u) + 8u;
                        vec3 _2645 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2634)).x, texelFetch(g_PointLightRenderingBuffer, int(_2634 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2634 + 2u)).x));
                        float _2649 = _2609.x - _2095;
                        float _2650 = _2609.y - _2096;
                        float _2651 = _2609.z - _2097;
                        float _2652 = dot(vec3(_2649, _2650, _2651), vec3(_2649, _2650, _2651));
                        float _2655 = inversesqrt(_2652);
                        float _2656 = _2655 * _2649;
                        float _2657 = _2655 * _2650;
                        float _2658 = _2655 * _2651;
                        float _2659 = dot(vec3(_721, _724, _727), vec3(_2656, _2657, _2658));
                        float _2664 = 1.0 - (_2652 * _2609.w);
                        float _3870 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
                        float _2665 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
                        float _2666 = sqrt(_2652) * _2628.w;
                        float _2669 = 1.39999997615814208984375 / (_2666 + 1.39999997615814208984375);
                        float _2670 = _2669 * _2669;
                        float _2673 = ((1.0 - _2670) * _2659) + _2670;
                        float _2676 = _2666 * _2666;
                        float _2680 = ((isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0))) * _2665) / ((_2676 * 0.699999988079071044921875) + 1.0);
                        float _2684 = (-0.0) - _2095;
                        float _2685 = (-0.0) - _2096;
                        float _2686 = (-0.0) - _2097;
                        float _2690 = inversesqrt(dot(vec3(_2684, _2685, _2686), vec3(_2684, _2685, _2686)));
                        float _2691 = _2690 * _2684;
                        float _2692 = _2690 * _2685;
                        float _2693 = _2690 * _2686;
                        float _2701 = exp2(log2(1.0 / ((_2676 * 3.5) + 5.0)) * 0.25);
                        float _2702 = 1.0 - _782;
                        float _2709 = sqrt(1.0 - ((1.0 - (_2702 * _2702)) * (1.0 - (_2701 * _2701))));
                        float _2710 = _2709 * _2709;
                        float _2711 = _2710 * _2710;
                        float _2712 = _2691 + _2656;
                        float _2713 = _2692 + _2657;
                        float _2714 = _2693 + _2658;
                        float _2718 = inversesqrt(dot(vec3(_2712, _2713, _2714), vec3(_2712, _2713, _2714)));
                        float _2722 = dot(vec3(_721, _724, _727), vec3(_2691, _2692, _2693));
                        float _3886 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
                        float _2725 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
                        float _2726 = dot(vec3(_721, _724, _727), vec3(_2718 * _2712, _2718 * _2713, _2718 * _2714));
                        float _3897 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
                        float _2729 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
                        float _2733 = ((_2729 * _2729) * (_2711 + (-1.0))) + 1.0;
                        float _2734 = _2669 * _2710;
                        float _2735 = _2734 * _2734;
                        float _2738 = ((1.0 - _2735) * _2659) + _2735;
                        float _3908 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
                        float _2739 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
                        float _2740 = 1.0 - _2710;
                        float _2750 = (0.5 / (((_2739 * ((_2725 * _2740) + _2710)) + 9.9999999392252902907785028219223e-09) + (((_2739 * _2740) + _2710) * _2725))) * _2739;
                        float _3919 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
                        float _2761 = (((_2711 * 3.1415927410125732421875) * (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) / ((_2733 * _2733) * ((_2676 * 2.1991131305694580078125) + 3.141590118408203125))) * _2665;
                        _2492 = (_2680 * _2628.x) + _2586;
                        _2493 = (_2680 * _2628.y) + _2587;
                        _2494 = (_2680 * _2628.z) + _2588;
                        _2489 = (_2761 * _2645.x) + _2583;
                        _2490 = (_2761 * _2645.y) + _2584;
                        _2491 = (_2761 * _2645.z) + _2585;
                        if (_2590 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2583 = _2489;
                            _2584 = _2490;
                            _2585 = _2491;
                            _2586 = _2492;
                            _2587 = _2493;
                            _2588 = _2494;
                            _2589 = _2590;
                        }
                    }
                    frontier_phi_74_pred = _2492;
                    frontier_phi_74_pred_1 = _2491;
                    frontier_phi_74_pred_2 = _2490;
                    frontier_phi_74_pred_3 = _2489;
                    frontier_phi_74_pred_4 = _2493;
                    frontier_phi_74_pred_5 = _2494;
                }
                _2239 = frontier_phi_74_pred;
                _2237 = frontier_phi_74_pred_1;
                _2235 = frontier_phi_74_pred_2;
                _2233 = frontier_phi_74_pred_3;
                _2241 = frontier_phi_74_pred_4;
                _2243 = frontier_phi_74_pred_5;
                uint _2415 = _2414 + 1u;
                if (_2415 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2408 = _2233;
                    _2409 = _2235;
                    _2410 = _2237;
                    _2411 = _2239;
                    _2412 = _2241;
                    _2413 = _2243;
                    _2414 = _2415;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2232 = _2233;
            _2234 = _2235;
            _2236 = _2237;
            _2238 = _2239;
            _2240 = _2241;
            _2242 = _2243;
        }
        uvec4 _2246 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2247 = _2246.z;
        uint _2249 = (_2247 >> 8u) & 15u;
        float _2376;
        float _2378;
        float _2380;
        float _2382;
        float _2384;
        float _2386;
        if (((4294967295u << _2249) & _2141) == 0u)
        {
            _2376 = _2232;
            _2378 = _2234;
            _2380 = _2236;
            _2382 = _2238;
            _2384 = _2240;
            _2386 = _2242;
        }
        else
        {
            float _2401 = inversesqrt(dot(vec3(_2095, _2096, _2097), vec3(_2095, _2096, _2097)));
            float _2402 = _2401 * _2095;
            float _2403 = _2401 * _2096;
            float _2404 = _2401 * _2097;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2249 < ((_2247 >> 12u) & 15u))
            {
                float _2377;
                float _2379;
                float _2381;
                float _2383;
                float _2385;
                float _2387;
                float _2566 = _2232;
                float _2567 = _2234;
                float _2568 = _2236;
                float _2569 = _2238;
                float _2570 = _2240;
                float _2571 = _2242;
                uint _2572 = _2249;
                uint _2581;
                bool _2582;
                for (;;)
                {
                    _2581 = texelFetch(g_lightClassification, int((((_2135 << 5u) + (_2121 << 9u)) + (_2572 << 2u)) >> 2u)).x;
                    _2582 = _2581 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2582)
                    {
                        frontier_phi_83_pred = _2569;
                        frontier_phi_83_pred_1 = _2568;
                        frontier_phi_83_pred_2 = _2567;
                        frontier_phi_83_pred_3 = _2566;
                        frontier_phi_83_pred_4 = _2571;
                        frontier_phi_83_pred_5 = _2570;
                    }
                    else
                    {
                        float _2787;
                        float _2788;
                        float _2789;
                        float _2790;
                        float _2791;
                        float _2792;
                        float _3080;
                        float _3081;
                        float _3082;
                        float _3083;
                        float _3084;
                        float _3085;
                        float _2800 = _2566;
                        float _2801 = _2567;
                        float _2802 = _2568;
                        float _2803 = _2569;
                        float _2804 = _2570;
                        float _2805 = _2571;
                        uint _2806 = _2581;
                        uint _2807;
                        vec4 _2832;
                        float _2833;
                        vec4 _2848;
                        vec3 _2860;
                        vec4 _2875;
                        vec4 _2890;
                        float _2936;
                        bool _2937;
                        for (;;)
                        {
                            uint _2817 = ((_2572 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2806));
                            _2807 = (_2806 + 4294967295u) & _2806;
                            uint _2819 = _2817 * 40u;
                            _2832 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2819)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 3u)).x));
                            _2833 = _2832.w;
                            uint _2835 = (_2817 * 40u) + 4u;
                            _2848 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2835)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 3u)).x));
                            uint _2850 = (_2817 * 40u) + 8u;
                            _2860 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2850)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 2u)).x));
                            uint _2862 = (_2817 * 40u) + 16u;
                            _2875 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2862)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 3u)).x));
                            uint _2877 = (_2817 * 40u) + 20u;
                            _2890 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2877)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 3u)).x));
                            uint _2892 = (_2817 * 40u) + 24u;
                            vec4 _2905 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2892)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 3u)).x));
                            uint _2911 = (_2817 * 40u) + 28u;
                            vec4 _2924 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 3u)).x));
                            _2936 = fma(_2097, _2924.z, fma(_2096, _2924.y, _2924.x * _2095)) + _2924.w;
                            _2937 = !((fma(_2097, _2905.z, fma(_2096, _2905.y, _2905.x * _2095)) + _2905.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_2937)
                            {
                                float _2964 = _2832.x - _2095;
                                float _2965 = _2832.y - _2096;
                                float _2966 = _2832.z - _2097;
                                float _2967 = dot(vec3(_2964, _2965, _2966), vec3(_2964, _2965, _2966));
                                float _2970 = inversesqrt(_2967);
                                float _2971 = _2970 * _2964;
                                float _2972 = _2970 * _2965;
                                float _2973 = _2970 * _2966;
                                float _2977 = 1.0 - (_2967 / (_2833 * _2833));
                                float _3930 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                                float _2978 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
                                float _2982 = sqrt(_2967) * _2848.w;
                                float _2984 = 1.39999997615814208984375 / (_2982 + 1.39999997615814208984375);
                                float _2985 = _2984 * _2984;
                                float _2988 = ((1.0 - _2985) * dot(vec3(_2971, _2972, _2973), vec3(_721, _724, _727))) + _2985;
                                float _2991 = _2982 * _2982;
                                float _2995 = (fma(_2097, _2875.z, fma(_2096, _2875.y, _2875.x * _2095)) + _2875.w) / _2936;
                                float _2996 = (fma(_2097, _2890.z, fma(_2096, _2890.y, _2890.x * _2095)) + _2890.w) / _2936;
                                float _3000 = 1.0 - dot(vec2(_2995, _2996), vec2(_2995, _2996));
                                float _3946 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                                float _3001 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
                                float _3002 = _3001 * (((isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0))) * _2978) / ((_2991 * 0.699999988079071044921875) + 1.0));
                                float _3014 = exp2(log2(1.0 / ((_2991 * 3.5) + 5.0)) * 0.25);
                                float _3015 = 1.0 - _782;
                                float _3022 = sqrt(1.0 - ((1.0 - (_3015 * _3015)) * (1.0 - (_3014 * _3014))));
                                float _3023 = _3022 * _3022;
                                float _3024 = _3023 * _3023;
                                float _3025 = _2971 - _2402;
                                float _3026 = _2972 - _2403;
                                float _3027 = _2973 - _2404;
                                float _3031 = inversesqrt(dot(vec3(_3025, _3026, _3027), vec3(_3025, _3026, _3027)));
                                float _3035 = dot(vec3(_721, _724, _727), vec3((-0.0) - _2402, (-0.0) - _2403, (-0.0) - _2404));
                                float _3957 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                                float _3038 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
                                float _3039 = dot(vec3(_721, _724, _727), vec3(_3031 * _3025, _3031 * _3026, _3031 * _3027));
                                float _3968 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                                float _3042 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
                                float _3046 = ((_3042 * _3042) * (_3024 + (-1.0))) + 1.0;
                                float _3047 = _2984 * _3023;
                                float _3048 = _3047 * _3047;
                                float _3054 = ((1.0 - _3048) * dot(vec3(_721, _724, _727), vec3(_2971, _2972, _2973))) + _3048;
                                float _3979 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                                float _3055 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
                                float _3056 = 1.0 - _3023;
                                float _3066 = (0.5 / (((_3055 * ((_3038 * _3056) + _3023)) + 9.9999999392252902907785028219223e-09) + (((_3055 * _3056) + _3023) * _3038))) * _3055;
                                float _3990 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                                float _3076 = (_3001 * _2978) * (((_3024 * 3.1415927410125732421875) * (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) / ((_3046 * _3046) * ((_2991 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _3002 * _2848.x;
                                frontier_phi_89_pred_1 = _3076 * _2860.z;
                                frontier_phi_89_pred_2 = _3076 * _2860.y;
                                frontier_phi_89_pred_3 = _3076 * _2860.x;
                                frontier_phi_89_pred_4 = _3002 * _2848.z;
                                frontier_phi_89_pred_5 = _3002 * _2848.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3083 = frontier_phi_89_pred;
                            _3082 = frontier_phi_89_pred_1;
                            _3081 = frontier_phi_89_pred_2;
                            _3080 = frontier_phi_89_pred_3;
                            _3085 = frontier_phi_89_pred_4;
                            _3084 = frontier_phi_89_pred_5;
                            _2790 = _3083 + _2803;
                            _2791 = _3084 + _2804;
                            _2792 = _3085 + _2805;
                            _2787 = _3080 + _2800;
                            _2788 = _3081 + _2801;
                            _2789 = _3082 + _2802;
                            if (_2807 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2800 = _2787;
                                _2801 = _2788;
                                _2802 = _2789;
                                _2803 = _2790;
                                _2804 = _2791;
                                _2805 = _2792;
                                _2806 = _2807;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _2790;
                        frontier_phi_83_pred_1 = _2789;
                        frontier_phi_83_pred_2 = _2788;
                        frontier_phi_83_pred_3 = _2787;
                        frontier_phi_83_pred_4 = _2792;
                        frontier_phi_83_pred_5 = _2791;
                    }
                    _2383 = frontier_phi_83_pred;
                    _2381 = frontier_phi_83_pred_1;
                    _2379 = frontier_phi_83_pred_2;
                    _2377 = frontier_phi_83_pred_3;
                    _2387 = frontier_phi_83_pred_4;
                    _2385 = frontier_phi_83_pred_5;
                    uint _2573 = _2572 + 1u;
                    if (_2573 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2566 = _2377;
                        _2567 = _2379;
                        _2568 = _2381;
                        _2569 = _2383;
                        _2570 = _2385;
                        _2571 = _2387;
                        _2572 = _2573;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2387;
                frontier_phi_65_66_ladder_1 = _2385;
                frontier_phi_65_66_ladder_2 = _2381;
                frontier_phi_65_66_ladder_3 = _2379;
                frontier_phi_65_66_ladder_4 = _2383;
                frontier_phi_65_66_ladder_5 = _2377;
            }
            else
            {
                frontier_phi_65_66_ladder = _2242;
                frontier_phi_65_66_ladder_1 = _2240;
                frontier_phi_65_66_ladder_2 = _2236;
                frontier_phi_65_66_ladder_3 = _2234;
                frontier_phi_65_66_ladder_4 = _2238;
                frontier_phi_65_66_ladder_5 = _2232;
            }
            _2376 = frontier_phi_65_66_ladder_5;
            _2378 = frontier_phi_65_66_ladder_3;
            _2380 = frontier_phi_65_66_ladder_2;
            _2382 = frontier_phi_65_66_ladder_4;
            _2384 = frontier_phi_65_66_ladder_1;
            _2386 = frontier_phi_65_66_ladder;
        }
        float _2391 = isnan(1.0) ? _766 : (isnan(_766) ? 1.0 : min(_766, 1.0));
        _2154 = (_2391 * _2382) + _1881;
        _2156 = (_2391 * _2384) + _1882;
        _2158 = (_2391 * _2386) + _1883;
        _2160 = ((_2376 * 0.039999999105930328369140625) * _2391) + _2037;
        _2162 = ((_2378 * 0.039999999105930328369140625) * _2391) + _2038;
        _2164 = ((_2380 * 0.039999999105930328369140625) * _2391) + _2039;
    }
    else
    {
        _2154 = _1881;
        _2156 = _1882;
        _2158 = _1883;
        _2160 = _2037;
        _2162 = _2038;
        _2164 = _2039;
    }
    float _4006 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _4017 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _4028 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _2181 = ((isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_2154 + ((isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))) * _766))) + ((_2160 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1572)) * cbPerFrame._m0[3u].x);
    float _2182 = ((isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_2156 + ((isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0))) * _766))) + ((_2162 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1572)) * cbPerFrame._m0[3u].x);
    float _2183 = ((isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_2158 + ((isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))) * _766))) + ((_2164 + ((isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))) * _1572)) * cbPerFrame._m0[3u].x);
    uint _2187 = _740 + 6u;
    float _2195 = _700 / cbSceneParam._m0[86u].x;
    float _2196 = _701 / cbSceneParam._m0[86u].y;
    vec4 _2210 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2195, _2196, (log2((isnan(cbSceneParam._m0[77u].w) ? _687 : (isnan(_687) ? cbSceneParam._m0[77u].w : min(_687, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2212 = _2210.x;
    float _2213 = _2210.y;
    float _2214 = _2210.z;
    float _2215 = _2210.w;
    float _2295;
    float _2297;
    float _2299;
    float _2301;
    if (_687 > cbSceneParam._m0[78u].w)
    {
        float _2257 = isnan(_687) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _687 : min(cbSceneParam._m0[80u].w, _687));
        float _2258 = _2257 / _687;
        float _2269 = _2258 * _265;
        float _2270 = _266 * _2258;
        float _2271 = (-0.0) - _2270;
        float _2272 = _2258 * _267;
        float _2274 = (cbSceneParam._m0[77u].w * _2271) / _2257;
        float _2275 = _2274 + cbSceneParam._m0[79u].w;
        float _2276 = cbSceneParam._m0[79u].w - _2270;
        float _2282 = sqrt(((_2269 * _2269) + (_2270 * _2270)) + (_2272 * _2272));
        float _2285 = (1.0 - (cbSceneParam._m0[77u].w / _2257)) * _2282;
        float _2291 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2293 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2502;
        if (abs((_2271 - _2274) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2502 = ((((_2275 > 0.0) ? exp2(_2291 * _2275) : (2.0 - exp2(_2293 * _2275))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2285;
        }
        else
        {
            float _2437 = 1.0 / cbSceneParam._m0[80u].x;
            float _2438 = isnan(_2276) ? _2275 : (isnan(_2275) ? _2276 : max(_2275, _2276));
            float _2439 = isnan(_2276) ? _2275 : (isnan(_2275) ? _2276 : min(_2275, _2276));
            float _2448 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : min(_2438, 0.0));
            float _2449 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : min(_2439, 0.0));
            _2502 = ((abs(_2282 / _2271) * cbSceneParam._m0[80u].y) * ((((_2448 - _2449) * 2.0) - ((exp2(_2291 * (isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0)))) - exp2(_2291 * (isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0))))) * _2437)) - ((exp2(_2293 * _2448) - exp2(_2293 * _2449)) * _2437))) + (_2285 * cbSceneParam._m0[80u].z);
        }
        vec4 _2504 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2195, _2196, 1.0), 0.0);
        float _2513 = exp2((_2502 * (-1.44269502162933349609375)) * (1.0 - _2504.w));
        float _2514 = log2(_2513);
        float _2530 = log2(_2215);
        _2295 = (exp2(_2530 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2514 * cbSceneParam._m0[78u].x)) * _2504.x) / cbSceneParam._m0[78u].x)) + _2212;
        _2297 = (exp2(_2530 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2514 * cbSceneParam._m0[78u].y)) * _2504.y) / cbSceneParam._m0[78u].y)) + _2213;
        _2299 = (exp2(_2530 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2514 * cbSceneParam._m0[78u].z)) * _2504.z) / cbSceneParam._m0[78u].z)) + _2214;
        _2301 = _2513 * _2215;
    }
    else
    {
        _2295 = _2212;
        _2297 = _2213;
        _2299 = _2214;
        _2301 = _2215;
    }
    float _2313 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2314 = _2313 == 3.0;
    float _2315 = log2(_2301);
    float _2322 = exp2(_2315 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0)));
    float _2323 = exp2(_2315 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0)));
    float _2324 = exp2(_2315 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0)));
    float _2333 = (_2313 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2333 * (_2314 ? _2322 : (_2322 + (cbSceneParam._m0[72u].w * _2295)));
    SV_Target.y = _2333 * (_2314 ? _2323 : (_2323 + (cbSceneParam._m0[72u].w * _2297)));
    SV_Target.z = _2333 * (_2314 ? _2324 : (_2324 + (cbSceneParam._m0[72u].w * _2299)));
    SV_Target.w = cbInstanceData._m0[_2187].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2187].w;
}


