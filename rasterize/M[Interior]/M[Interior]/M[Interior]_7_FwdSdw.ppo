#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _382;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _186 = _185 * _178;
    float _187 = _185 * _179;
    float _188 = _185 * _180;
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _196 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _197 = _196 * TANGENT.x;
    float _198 = _196 * TANGENT.y;
    float _199 = _196 * TANGENT.z;
    float _244 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _254 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _244);
    float _255 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _244);
    float _256 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _244);
    vec4 _291 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _307 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _314 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _326 = cbMtdParam._m0[22u].z + _254;
    float _327 = cbMtdParam._m0[22u].w + _255;
    float _328 = cbMtdParam._m0[23u].x + _256;
    float _345 = (-0.0) - dot(vec3(_326, _327, _328), vec3(_307 * _186, _307 * _187, _307 * _188));
    float _346 = (-0.0) - dot(vec3(_326, _327, _328), vec3(_314 * _197, _314 * _198, _314 * _199));
    float _347 = (-0.0) - dot(vec3(_326, _327, _328), vec3((-0.0) - (NORMAL.x * _192), (-0.0) - (NORMAL.y * _192), (-0.0) - (NORMAL.z * _192)));
    float _351 = inversesqrt(dot(vec3(_345, _346, _347), vec3(_345, _346, _347)));
    float _352 = _351 * _347;
    float _357 = ((cbMtdParam._m0[19u].y * _345) * _351) + (((_291.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _358 = ((cbMtdParam._m0[19u].z * _346) * _351) + (((_291.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _361 = fract(cbMtdParam._m0[19u].y * TEXCOORD.x);
    float _362 = fract(cbMtdParam._m0[19u].z * TEXCOORD.y);
    float _380;
    float _383;
    float _385;
    if (_357 > 0.0)
    {
        float _366 = (1.0 - _361) / _357;
        _380 = _366;
        _383 = ((cbMtdParam._m0[16u].z + 1.0) - fract(_366 * _352)) * 0.16666667163372039794921875;
        _385 = (fract((_366 * _358) + _362) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_357 < 0.0)
        {
            float _381 = ((-0.0) - _361) / _357;
            frontier_phi_3_2_ladder = (fract(_381 * _352) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _381;
            frontier_phi_3_2_ladder_2 = (fract((_381 * _358) + _362) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _382;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _380 = frontier_phi_3_2_ladder_1;
        _383 = frontier_phi_3_2_ladder;
        _385 = frontier_phi_3_2_ladder_2;
    }
    float _411;
    float _413;
    float _415;
    if (_358 > 0.0)
    {
        float _398 = (1.0 - _362) / _358;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_398 < _380)
        {
            frontier_phi_8_5_ladder = (fract(_398 * _352) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_398 * _357) + _361) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _398;
        }
        else
        {
            frontier_phi_8_5_ladder = _385;
            frontier_phi_8_5_ladder_1 = _383;
            frontier_phi_8_5_ladder_2 = _380;
        }
        _411 = frontier_phi_8_5_ladder_2;
        _413 = frontier_phi_8_5_ladder_1;
        _415 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_358 < 0.0)
        {
            float _412 = ((-0.0) - _362) / _358;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_412 < _380)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_412 * _352) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_412 * _357) + _361) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _412;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _385;
                frontier_phi_8_6_ladder_9_ladder_1 = _383;
                frontier_phi_8_6_ladder_9_ladder_2 = _380;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _385;
            frontier_phi_8_6_ladder_1 = _383;
            frontier_phi_8_6_ladder_2 = _380;
        }
        _411 = frontier_phi_8_6_ladder_2;
        _413 = frontier_phi_8_6_ladder_1;
        _415 = frontier_phi_8_6_ladder;
    }
    float _419 = (_352 > 0.0) ? (cbMtdParam._m0[16u].y / _352) : 5000.0;
    float _432;
    float _433;
    if (_419 < _411)
    {
        _432 = ((_361 + cbMtdParam._m0[16u].z) + (_419 * _357)) * 0.16666667163372039794921875;
        _433 = (((_419 * _358) + _362) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _432 = _413;
        _433 = _415;
    }
    vec4 _435 = texture(sampler2D(M_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_432, _433));
    float _440 = _435.x * cbMtdParam._m0[13u].x;
    float _441 = _435.y * cbMtdParam._m0[13u].y;
    float _442 = _435.z * cbMtdParam._m0[13u].z;
    float _3001 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _3012 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _3023 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _461 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _465 = inversesqrt(dot(vec3(_254, _255, _256), vec3(_254, _255, _256)));
    float _466 = _254 * _465;
    float _467 = _255 * _465;
    float _468 = _256 * _465;
    float _474 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _475 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _488 = uint(roundEven(NORMAL.w)) * 13u;
    uint _490 = (_488 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _496 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3001 : (isnan(_3001) ? 1.0 : min(_3001, 1.0)))) * cbInstanceData._m0[_490].x;
    float _497 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3012 : (isnan(_3012) ? 1.0 : min(_3012, 1.0)))) * cbInstanceData._m0[_490].y;
    float _498 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3023 : (isnan(_3023) ? 1.0 : min(_3023, 1.0)))) * cbInstanceData._m0[_490].z;
    float _3034 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _499 = isnan(1.0) ? _3034 : (isnan(_3034) ? 1.0 : min(_3034, 1.0));
    float _3045 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _500 = isnan(1.0) ? _3045 : (isnan(_3045) ? 1.0 : min(_3045, 1.0));
    float _3056 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _501 = isnan(1.0) ? _3056 : (isnan(_3056) ? 1.0 : min(_3056, 1.0));
    vec4 _510 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _474, cbSceneParam._m0[86u].y * _475));
    float _513 = _510.x * TEXCOORD.z;
    float _514 = (-0.0) - _466;
    float _515 = (-0.0) - _467;
    float _516 = (-0.0) - _468;
    float _538 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _542 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _546 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _820;
    float _821;
    float _822;
    float _823;
    float _824;
    float _825;
    float _826;
    float _827;
    float _828;
    float _829;
    float _830;
    float _831;
    float _832;
    float _833;
    float _834;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _608 = (cbModelParam._m0[37u].x * ((((fma(_546, cbModelParam._m0[26u].z, fma(_542, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _538)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _610 = (cbModelParam._m0[37u].y * ((((fma(_546, cbModelParam._m0[27u].z, fma(_542, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _538)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _611 = (((((fma(_546, cbModelParam._m0[28u].z, fma(_542, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _538)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _614 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_608, _610, _611), 0.0);
        vec4 _621 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_608, _610, _611), 0.0);
        vec4 _628 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_608, _610, _611), 0.0);
        vec4 _635 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_608, _610, _611), 0.0);
        float _648 = exp2((_614.w + (-0.5)) * 20.0) * 2.0;
        float _649 = _648 * (_614.x + (-0.5));
        float _650 = _648 * (_614.y + (-0.5));
        float _651 = _648 * (_614.z + (-0.5));
        float _658 = exp2((_621.w + (-0.5)) * 20.0) * 2.0;
        float _659 = _658 * (_621.x + (-0.5));
        float _660 = _658 * (_621.y + (-0.5));
        float _661 = _658 * (_621.z + (-0.5));
        float _668 = exp2((_628.w + (-0.5)) * 20.0) * 2.0;
        float _669 = _668 * (_628.x + (-0.5));
        float _670 = _668 * (_628.y + (-0.5));
        float _671 = _668 * (_628.z + (-0.5));
        float _678 = exp2((_635.w + (-0.5)) * 20.0) * 2.0;
        float _679 = _678 * (_635.x + (-0.5));
        float _680 = _678 * (_635.y + (-0.5));
        float _681 = _678 * (_635.z + (-0.5));
        float _682 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
        float _683 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
        float _684 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
        float _685 = _649 * 0.5;
        float _686 = _659 * 0.5;
        float _687 = _669 * 0.5;
        float _688 = dot(vec3(_685, _686, _687), vec3(_685, _686, _687));
        float _693 = (_688 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_688);
        float _702 = (dot(vec3(0.0), vec3(_693 * _685, _693 * _686, _693 * _687)) + 1.0) * 0.5;
        float _3082 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _712 = sqrt(((_686 * _686) + (_685 * _685)) + (_687 * _687)) / (_682 + 9.9999997473787516355514526367188e-06);
        float _3093 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _713 = isnan(1.0) ? _3093 : (isnan(_3093) ? 1.0 : min(_3093, 1.0));
        float _714 = _713 * 2.0;
        float _718 = (1.0 - _713) / (_713 + 1.0);
        float _3104 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _719 = isnan(1.0) ? _3104 : (isnan(_3104) ? 1.0 : min(_3104, 1.0));
        float _728 = ((((1.0 - _719) * (_714 + 2.0)) * exp2(log2(isnan(1.0) ? _3082 : (isnan(_3082) ? 1.0 : min(_3082, 1.0))) * (_714 + 1.0))) + _719) * _682;
        float _729 = _650 * 0.5;
        float _730 = _660 * 0.5;
        float _731 = _670 * 0.5;
        float _732 = dot(vec3(_729, _730, _731), vec3(_729, _730, _731));
        float _737 = (_732 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_732);
        float _745 = (dot(vec3(0.0), vec3(_737 * _729, _737 * _730, _737 * _731)) + 1.0) * 0.5;
        float _3115 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _754 = sqrt(((_730 * _730) + (_729 * _729)) + (_731 * _731)) / (_683 + 9.9999997473787516355514526367188e-06);
        float _3126 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3126 : (isnan(_3126) ? 1.0 : min(_3126, 1.0));
        float _756 = _755 * 2.0;
        float _760 = (1.0 - _755) / (_755 + 1.0);
        float _3137 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _761 = isnan(1.0) ? _3137 : (isnan(_3137) ? 1.0 : min(_3137, 1.0));
        float _770 = ((((1.0 - _761) * (_756 + 2.0)) * exp2(log2(isnan(1.0) ? _3115 : (isnan(_3115) ? 1.0 : min(_3115, 1.0))) * (_756 + 1.0))) + _761) * _683;
        float _771 = _651 * 0.5;
        float _772 = _661 * 0.5;
        float _773 = _671 * 0.5;
        float _774 = dot(vec3(_771, _772, _773), vec3(_771, _772, _773));
        float _779 = (_774 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_774);
        float _787 = (dot(vec3(0.0), vec3(_779 * _771, _779 * _772, _779 * _773)) + 1.0) * 0.5;
        float _3148 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _796 = sqrt(((_772 * _772) + (_771 * _771)) + (_773 * _773)) / (_684 + 9.9999997473787516355514526367188e-06);
        float _3159 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _797 = isnan(1.0) ? _3159 : (isnan(_3159) ? 1.0 : min(_3159, 1.0));
        float _798 = _797 * 2.0;
        float _802 = (1.0 - _797) / (_797 + 1.0);
        float _3170 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _803 = isnan(1.0) ? _3170 : (isnan(_3170) ? 1.0 : min(_3170, 1.0));
        float _812 = ((((1.0 - _803) * (_798 + 2.0)) * exp2(log2(isnan(1.0) ? _3148 : (isnan(_3148) ? 1.0 : min(_3148, 1.0))) * (_798 + 1.0))) + _803) * _684;
        _820 = _651;
        _821 = _650;
        _822 = _649;
        _823 = _661;
        _824 = _660;
        _825 = _659;
        _826 = _671;
        _827 = _670;
        _828 = _669;
        _829 = _684;
        _830 = _683;
        _831 = _682;
        _832 = cbModelParam._m0[36u].z * (isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0)));
        _833 = cbModelParam._m0[36u].z * (isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0)));
        _834 = cbModelParam._m0[36u].z * (isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0)));
    }
    else
    {
        _820 = _382;
        _821 = _382;
        _822 = _382;
        _823 = _382;
        _824 = _382;
        _825 = _382;
        _826 = _382;
        _827 = _382;
        _828 = _382;
        _829 = _382;
        _830 = _382;
        _831 = _382;
        _832 = 0.0;
        _833 = 0.0;
        _834 = 0.0;
    }
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _888 = (cbModelParam._m0[38u].x * ((((fma(_546, cbModelParam._m0[30u].z, fma(_542, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _538)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _889 = (cbModelParam._m0[38u].y * ((((fma(_546, cbModelParam._m0[31u].z, fma(_542, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _538)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _890 = (((((fma(_546, cbModelParam._m0[32u].z, fma(_542, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _538)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        vec4 _899 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        vec4 _906 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        vec4 _913 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        float _925 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_892.x + (-0.5));
        float _927 = _925 * (_892.y + (-0.5));
        float _928 = _925 * (_892.z + (-0.5));
        float _935 = exp2((_899.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_899.x + (-0.5));
        float _937 = _935 * (_899.y + (-0.5));
        float _938 = _935 * (_899.z + (-0.5));
        float _945 = exp2((_906.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_906.x + (-0.5));
        float _947 = _945 * (_906.y + (-0.5));
        float _948 = _945 * (_906.z + (-0.5));
        float _955 = exp2((_913.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_913.x + (-0.5));
        float _957 = _955 * (_913.y + (-0.5));
        float _958 = _955 * (_913.z + (-0.5));
        float _959 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _960 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _961 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _962 = _926 * 0.5;
        float _963 = _936 * 0.5;
        float _964 = _946 * 0.5;
        float _965 = dot(vec3(_962, _963, _964), vec3(_962, _963, _964));
        float _970 = (_965 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_965);
        float _978 = (dot(vec3(0.0), vec3(_970 * _962, _970 * _963, _970 * _964)) + 1.0) * 0.5;
        float _3211 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _987 = sqrt(((_963 * _963) + (_962 * _962)) + (_964 * _964)) / (_959 + 9.9999997473787516355514526367188e-06);
        float _3222 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3222 : (isnan(_3222) ? 1.0 : min(_3222, 1.0));
        float _989 = _988 * 2.0;
        float _993 = (1.0 - _988) / (_988 + 1.0);
        float _3233 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3233 : (isnan(_3233) ? 1.0 : min(_3233, 1.0));
        float _1003 = ((((1.0 - _994) * (_989 + 2.0)) * exp2(log2(isnan(1.0) ? _3211 : (isnan(_3211) ? 1.0 : min(_3211, 1.0))) * (_989 + 1.0))) + _994) * _959;
        float _1004 = _927 * 0.5;
        float _1005 = _937 * 0.5;
        float _1006 = _947 * 0.5;
        float _1007 = dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006));
        float _1012 = (_1007 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1007);
        float _1020 = (dot(vec3(0.0), vec3(_1012 * _1004, _1012 * _1005, _1012 * _1006)) + 1.0) * 0.5;
        float _3244 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1029 = sqrt(((_1005 * _1005) + (_1004 * _1004)) + (_1006 * _1006)) / (_960 + 9.9999997473787516355514526367188e-06);
        float _3255 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0));
        float _1031 = _1030 * 2.0;
        float _1035 = (1.0 - _1030) / (_1030 + 1.0);
        float _3266 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0));
        float _1045 = ((((1.0 - _1036) * (_1031 + 2.0)) * exp2(log2(isnan(1.0) ? _3244 : (isnan(_3244) ? 1.0 : min(_3244, 1.0))) * (_1031 + 1.0))) + _1036) * _960;
        float _1046 = _928 * 0.5;
        float _1047 = _938 * 0.5;
        float _1048 = _948 * 0.5;
        float _1049 = dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048));
        float _1054 = (_1049 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1049);
        float _1062 = (dot(vec3(0.0), vec3(_1054 * _1046, _1054 * _1047, _1054 * _1048)) + 1.0) * 0.5;
        float _3277 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1071 = sqrt(((_1047 * _1047) + (_1046 * _1046)) + (_1048 * _1048)) / (_961 + 9.9999997473787516355514526367188e-06);
        float _3288 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0));
        float _1073 = _1072 * 2.0;
        float _1077 = (1.0 - _1072) / (_1072 + 1.0);
        float _3299 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0));
        float _1087 = ((((1.0 - _1078) * (_1073 + 2.0)) * exp2(log2(isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0))) * (_1073 + 1.0))) + _1078) * _961;
        _1095 = _928;
        _1096 = _927;
        _1097 = _926;
        _1098 = _938;
        _1099 = _937;
        _1100 = _936;
        _1101 = _948;
        _1102 = _947;
        _1103 = _946;
        _1104 = _961;
        _1105 = _960;
        _1106 = _959;
        _1107 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0)));
        _1108 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0)));
        _1109 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0)));
    }
    else
    {
        _1095 = _382;
        _1096 = _382;
        _1097 = _382;
        _1098 = _382;
        _1099 = _382;
        _1100 = _382;
        _1101 = _382;
        _1102 = _382;
        _1103 = _382;
        _1104 = _382;
        _1105 = _382;
        _1106 = _382;
        _1107 = 0.0;
        _1108 = 0.0;
        _1109 = 0.0;
    }
    float _1119 = (cbModelParam._m0[1u].x * (_1107 - _832)) + _832;
    float _1120 = (cbModelParam._m0[1u].x * (_1108 - _833)) + _833;
    float _1121 = (cbModelParam._m0[1u].x * (_1109 - _834)) + _834;
    float _1142 = fma(_1121, cbSceneParam._m0[89u].z, fma(_1120, cbSceneParam._m0[89u].y, _1119 * cbSceneParam._m0[89u].x));
    float _1145 = fma(_1121, cbSceneParam._m0[90u].z, fma(_1120, cbSceneParam._m0[90u].y, _1119 * cbSceneParam._m0[90u].x));
    float _1148 = fma(_1121, cbSceneParam._m0[91u].z, fma(_1120, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1119));
    float _1163 = _466 * (-0.5);
    float _1164 = _467 * (-0.5);
    float _1165 = _468 * (-0.5);
    float _1166 = dot(vec4(_1163, _1164, _1165, 1.0), vec4(_1097, _1100, _1103, _1106));
    float _1169 = dot(vec4(_1163, _1164, _1165, 1.0), vec4(_1096, _1099, _1102, _1105));
    float _1172 = dot(vec4(_1163, _1164, _1165, 1.0), vec4(_1095, _1098, _1101, _1104));
    float _1206;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1179 = dot(vec4(_1163, _1164, _1165, 1.0), vec4(_820, _823, _826, _829));
        float _1183 = dot(vec4(_1163, _1164, _1165, 1.0), vec4(_821, _824, _827, _830));
        float _1187 = dot(vec4(_1163, _1164, _1165, 1.0), vec4(_822, _825, _828, _831));
        float _1194 = dot(vec4(cbModelParam._m0[39u]), vec4(_1163, _1164, _1165, 1.0));
        _1206 = dot(vec3(isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)), isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)), isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1194) ? 0.0 : (isnan(0.0) ? _1194 : max(0.0, _1194))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1206 = 1.0;
    }
    float _1217;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1208 = dot(vec4(cbModelParam._m0[40u]), vec4(_1163, _1164, _1165, 1.0));
        _1217 = dot(vec3(isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)), isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)), isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1208) ? 0.0 : (isnan(0.0) ? _1208 : max(0.0, _1208))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1217 = 1.0;
    }
    float _1221 = (_1217 * cbModelParam._m0[1u].x) + (_1206 * (1.0 - cbModelParam._m0[1u].x));
    float _1230 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1313;
    float _1315;
    float _1317;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1280 = fma(_546, cbModelParam._m0[13u].z, fma(_542, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _538)) + cbModelParam._m0[13u].w;
        float _1284 = fma(_546, cbModelParam._m0[14u].z, fma(_542, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _538)) + cbModelParam._m0[14u].w;
        float _1288 = fma(_546, cbModelParam._m0[15u].z, fma(_542, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _538)) + cbModelParam._m0[15u].w;
        float _1291 = fma(_516, cbModelParam._m0[13u].z, fma(_515, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _514));
        float _1294 = fma(_516, cbModelParam._m0[14u].z, fma(_515, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _514));
        float _1297 = fma(_516, cbModelParam._m0[15u].z, fma(_515, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _514));
        float _1323;
        if (_1291 > 0.0)
        {
            _1323 = abs((1.0 - _1280) / _1291);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1291 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1280 + 1.0) / _1291);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1323 = frontier_phi_26_24_ladder;
        }
        float _1495;
        if (_1294 > 0.0)
        {
            _1495 = abs((1.0 - _1284) / _1294);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1294 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1284 + 1.0) / _1294);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1495 = frontier_phi_35_31_ladder;
        }
        float _1890;
        if (_1297 > 0.0)
        {
            _1890 = abs((1.0 - _1288) / _1297);
        }
        else
        {
            float frontier_phi_47_42_ladder;
            if (_1297 < 0.0)
            {
                frontier_phi_47_42_ladder = abs((_1288 + 1.0) / _1297);
            }
            else
            {
                frontier_phi_47_42_ladder = 5000.0;
            }
            _1890 = frontier_phi_47_42_ladder;
        }
        float _1892 = isnan(_1495) ? _1323 : (isnan(_1323) ? _1495 : min(_1323, _1495));
        float _1893 = isnan(_1890) ? _1892 : (isnan(_1892) ? _1890 : min(_1892, _1890));
        float _1897 = (_1893 * _1291) + _1280;
        float _1898 = (_1893 * _1294) + _1284;
        float _1899 = (_1893 * _1297) + _1288;
        float _1900 = _1893 * 9.9999997473787516355514526367188e-05;
        float _1902 = (-1.0) - _1900;
        float _1904 = _1900 + 1.0;
        float frontier_phi_25_47_ladder;
        float frontier_phi_25_47_ladder_1;
        float frontier_phi_25_47_ladder_2;
        if ((_1899 > _1904) || ((_1899 < _1902) || ((_1898 > _1904) || ((_1898 < _1902) || ((_1897 < _1902) || (_1897 > _1904))))))
        {
            frontier_phi_25_47_ladder = 0.0;
            frontier_phi_25_47_ladder_1 = 0.0;
            frontier_phi_25_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2134 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1899, cbModelParam._m0[9u].z, fma(_1898, cbModelParam._m0[9u].y, _1897 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1899, cbModelParam._m0[10u].z, fma(_1898, cbModelParam._m0[10u].y, _1897 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1899, cbModelParam._m0[11u].z, fma(_1898, cbModelParam._m0[11u].y, _1897 * cbModelParam._m0[11u].x))), _1230);
            frontier_phi_25_47_ladder = _2134.z * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_1 = _2134.y * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_2 = _2134.x * cbModelParam._m0[1u].y;
        }
        _1313 = frontier_phi_25_47_ladder_2;
        _1315 = frontier_phi_25_47_ladder_1;
        _1317 = frontier_phi_25_47_ladder;
    }
    else
    {
        vec4 _1301 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_514, _515, _516), _1230);
        _1313 = _1301.x * cbModelParam._m0[1u].y;
        _1315 = _1301.y * cbModelParam._m0[1u].y;
        _1317 = _1301.z * cbModelParam._m0[1u].y;
    }
    float _1320 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1410;
    float _1412;
    float _1414;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1374 = fma(_546, cbModelParam._m0[21u].z, fma(_542, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _538)) + cbModelParam._m0[21u].w;
        float _1378 = fma(_546, cbModelParam._m0[22u].z, fma(_542, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _538)) + cbModelParam._m0[22u].w;
        float _1382 = fma(_546, cbModelParam._m0[23u].z, fma(_542, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _538)) + cbModelParam._m0[23u].w;
        float _1385 = fma(_516, cbModelParam._m0[21u].z, fma(_515, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _514));
        float _1388 = fma(_516, cbModelParam._m0[22u].z, fma(_515, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _514));
        float _1391 = fma(_516, cbModelParam._m0[23u].z, fma(_515, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _514));
        float _1500;
        if (_1385 > 0.0)
        {
            _1500 = abs((1.0 - _1374) / _1385);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1385 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1374 + 1.0) / _1385);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1500 = frontier_phi_37_33_ladder;
        }
        float _1917;
        if (_1388 > 0.0)
        {
            _1917 = abs((1.0 - _1378) / _1388);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1388 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1378 + 1.0) / _1388);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _1917 = frontier_phi_49_44_ladder;
        }
        float _2256;
        if (_1391 > 0.0)
        {
            _2256 = abs((1.0 - _1382) / _1391);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1391 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1382 + 1.0) / _1391);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2256 = frontier_phi_61_56_ladder;
        }
        float _2258 = isnan(_1917) ? _1500 : (isnan(_1500) ? _1917 : min(_1500, _1917));
        float _2259 = isnan(_2256) ? _2258 : (isnan(_2258) ? _2256 : min(_2258, _2256));
        float _2263 = (_2259 * _1385) + _1374;
        float _2264 = (_2259 * _1388) + _1378;
        float _2265 = (_2259 * _1391) + _1382;
        float _2266 = _2259 * 9.9999997473787516355514526367188e-05;
        float _2267 = (-1.0) - _2266;
        float _2269 = _2266 + 1.0;
        float frontier_phi_34_61_ladder;
        float frontier_phi_34_61_ladder_1;
        float frontier_phi_34_61_ladder_2;
        if ((_2265 > _2269) || ((_2265 < _2267) || ((_2264 > _2269) || ((_2264 < _2267) || ((_2263 < _2267) || (_2263 > _2269))))))
        {
            frontier_phi_34_61_ladder = 0.0;
            frontier_phi_34_61_ladder_1 = 0.0;
            frontier_phi_34_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2383 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2265, cbModelParam._m0[17u].z, fma(_2264, cbModelParam._m0[17u].y, _2263 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2265, cbModelParam._m0[18u].z, fma(_2264, cbModelParam._m0[18u].y, _2263 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2265, cbModelParam._m0[19u].z, fma(_2264, cbModelParam._m0[19u].y, _2263 * cbModelParam._m0[19u].x))), _1320);
            frontier_phi_34_61_ladder = _2383.z * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_1 = _2383.y * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_2 = _2383.x * cbModelParam._m0[1u].z;
        }
        _1410 = frontier_phi_34_61_ladder_2;
        _1412 = frontier_phi_34_61_ladder_1;
        _1414 = frontier_phi_34_61_ladder;
    }
    else
    {
        vec4 _1394 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_514, _515, _516), _1320);
        _1410 = _1394.x * cbModelParam._m0[1u].z;
        _1412 = _1394.y * cbModelParam._m0[1u].z;
        _1414 = _1394.z * cbModelParam._m0[1u].z;
    }
    float _1426 = _513 * 0.01200000010430812835693359375;
    float _1428 = _1426 * ((cbModelParam._m0[1u].w * (_1410 - _1313)) + _1313);
    float _1429 = _1426 * ((cbModelParam._m0[1u].w * (_1412 - _1315)) + _1315);
    float _1430 = _1426 * ((cbModelParam._m0[1u].w * (_1414 - _1317)) + _1317);
    float _1433 = fma(_1430, cbSceneParam._m0[89u].z, fma(_1429, cbSceneParam._m0[89u].y, _1428 * cbSceneParam._m0[89u].x));
    float _1436 = fma(_1430, cbSceneParam._m0[90u].z, fma(_1429, cbSceneParam._m0[90u].y, _1428 * cbSceneParam._m0[90u].x));
    float _1439 = fma(_1430, cbSceneParam._m0[91u].z, fma(_1429, cbSceneParam._m0[91u].y, _1428 * cbSceneParam._m0[91u].x));
    float _1474 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1478 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1482 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1486 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1487 = _1474 / _1486;
    float _1488 = _1478 / _1486;
    float _1489 = _1482 / _1486;
    float _1637;
    float _1638;
    float _1639;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1516 = ((uint(_1489 > cbSceneParam._m0[59u].y) + uint(_1489 > cbSceneParam._m0[59u].x)) + uint(_1489 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1517 = _1516 + 43u;
        uint _1525 = _1516 + 44u;
        uint _1533 = _1516 + 45u;
        uint _1541 = _1516 + 46u;
        float _1552 = fma(_1486, cbSceneParam._m0[_1517].w, fma(_1482, cbSceneParam._m0[_1517].z, fma(_1478, cbSceneParam._m0[_1517].y, _1474 * cbSceneParam._m0[_1517].x)));
        float _1556 = fma(_1486, cbSceneParam._m0[_1525].w, fma(_1482, cbSceneParam._m0[_1525].z, fma(_1478, cbSceneParam._m0[_1525].y, _1474 * cbSceneParam._m0[_1525].x)));
        float _1564 = fma(_1486, cbSceneParam._m0[_1541].w, fma(_1482, cbSceneParam._m0[_1541].z, fma(_1478, cbSceneParam._m0[_1541].y, _1474 * cbSceneParam._m0[_1541].x)));
        float _1569 = cbSceneParam._m0[33u].z * _1564;
        float _1571 = cbSceneParam._m0[33u].w * _1564;
        float _1574 = fma(_1486, cbSceneParam._m0[_1533].w, fma(_1482, cbSceneParam._m0[_1533].z, fma(_1478, cbSceneParam._m0[_1533].y, _1474 * cbSceneParam._m0[_1533].x))) / _1564;
        float _1622 = (cbSceneParam._m0[33u].x - sqrt(((_1488 * _1488) + (_1487 * _1487)) + (_1489 * _1489))) * cbSceneParam._m0[33u].y;
        float _3425 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1630 = (isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1569 + _1552) / _1564, (_1571 + _1556) / _1564), _1574), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1571 + _1552) / _1564, (_1556 - _1569) / _1564), _1574), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1552 - _1569) / _1564, (_1556 - _1571) / _1564), _1574), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1552 - _1571) / _1564, (_1569 + _1556) / _1564), _1574), 0.0)).x), vec4(0.25)));
        _1637 = 1.0 - (_1630 * cbSceneParam._m0[34u].x);
        _1638 = 1.0 - (_1630 * cbSceneParam._m0[34u].y);
        _1639 = 1.0 - (_1630 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1637 = 1.0;
        _1638 = 1.0;
        _1639 = 1.0;
    }
    float _1703;
    float _1705;
    float _1707;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1691 = fma(_1486, cbSceneParam._m0[63u].w, fma(_1482, cbSceneParam._m0[63u].z, fma(_1478, cbSceneParam._m0[63u].y, _1474 * cbSceneParam._m0[63u].x)));
        float _1692 = fma(_1486, cbSceneParam._m0[60u].w, fma(_1482, cbSceneParam._m0[60u].z, fma(_1478, cbSceneParam._m0[60u].y, _1474 * cbSceneParam._m0[60u].x))) / _1691;
        float _1693 = fma(_1486, cbSceneParam._m0[61u].w, fma(_1482, cbSceneParam._m0[61u].z, fma(_1478, cbSceneParam._m0[61u].y, _1474 * cbSceneParam._m0[61u].x))) / _1691;
        float frontier_phi_46_45_ladder;
        float frontier_phi_46_45_ladder_1;
        float frontier_phi_46_45_ladder_2;
        if ((((_1692 >= cbSceneParam._m0[64u].x) && (_1693 >= cbSceneParam._m0[64u].y)) && (_1692 <= cbSceneParam._m0[64u].z)) && (_1693 <= cbSceneParam._m0[64u].w))
        {
            float _1930 = fma(_1486, cbSceneParam._m0[62u].w, fma(_1482, cbSceneParam._m0[62u].z, fma(_1478, cbSceneParam._m0[62u].y, _1474 * cbSceneParam._m0[62u].x))) / _1691;
            float _1934 = isnan(cbSceneParam._m0[41u].w) ? _1930 : (isnan(_1930) ? cbSceneParam._m0[41u].w : max(_1930, cbSceneParam._m0[41u].w));
            float _1977 = (cbSceneParam._m0[33u].x - sqrt(((_1488 * _1488) + (_1487 * _1487)) + (_1489 * _1489))) * cbSceneParam._m0[33u].y;
            float _3441 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
            float _1984 = (isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1692, cbSceneParam._m0[33u].w + _1693), _1934), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1692, _1693 - cbSceneParam._m0[33u].z), _1934), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1692 - cbSceneParam._m0[33u].z, _1693 - cbSceneParam._m0[33u].w), _1934), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1692 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1693), _1934), 0.0)).x), vec4(0.25)));
            float _1988 = 1.0 - (_1984 * cbSceneParam._m0[34u].x);
            float _1989 = 1.0 - (_1984 * cbSceneParam._m0[34u].y);
            float _1990 = 1.0 - (_1984 * cbSceneParam._m0[34u].z);
            frontier_phi_46_45_ladder = isnan(_1990) ? _1639 : (isnan(_1639) ? _1990 : min(_1639, _1990));
            frontier_phi_46_45_ladder_1 = isnan(_1989) ? _1638 : (isnan(_1638) ? _1989 : min(_1638, _1989));
            frontier_phi_46_45_ladder_2 = isnan(_1988) ? _1637 : (isnan(_1637) ? _1988 : min(_1637, _1988));
        }
        else
        {
            frontier_phi_46_45_ladder = _1639;
            frontier_phi_46_45_ladder_1 = _1638;
            frontier_phi_46_45_ladder_2 = _1637;
        }
        _1703 = frontier_phi_46_45_ladder_2;
        _1705 = frontier_phi_46_45_ladder_1;
        _1707 = frontier_phi_46_45_ladder;
    }
    else
    {
        _1703 = _1637;
        _1705 = _1638;
        _1707 = _1639;
    }
    uvec4 _1713 = floatBitsToUint(cbInstanceData._m0[_488 + 5u]);
    uint _1715 = _1713.x * 14u;
    uint _1716 = _1715 + 13u;
    float _1721 = _513 + (-1.0);
    float _1724 = (cbLight._m0[_1716].x * _1721) + 1.0;
    float _1725 = (cbLight._m0[_1716].y * _1721) + 1.0;
    uint _1726 = _1715 + 5u;
    float _1732 = isnan(1.0) ? _1725 : (isnan(_1725) ? 1.0 : min(_1725, 1.0));
    uint _1736 = _1715 + 4u;
    float _1745 = isnan(1.0) ? _1724 : (isnan(_1724) ? 1.0 : min(_1724, 1.0));
    uint _1749 = _1715 | 1u;
    float _1760 = dot(vec3(cbLight._m0[_1715].xyz), vec3(0.0));
    float _1763 = dot(vec3(cbLight._m0[_1749].xyz), vec3(0.0));
    float _3477 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _3488 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _1768 = (isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))) * 0.3183098733425140380859375;
    float _1770 = (isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))) * 0.3183098733425140380859375;
    float _1777 = ((cbLight._m0[_1726].x * _1732) * _1770) + (((cbLight._m0[_1736].x * _1703) * _1745) * _1768);
    float _1778 = ((_1732 * cbLight._m0[_1726].y) * _1770) + (((cbLight._m0[_1736].y * _1705) * _1745) * _1768);
    float _1779 = ((_1732 * cbLight._m0[_1726].z) * _1770) + (((cbLight._m0[_1736].z * _1707) * _1745) * _1768);
    uint _1780 = _1715 + 8u;
    float _1786 = cbLight._m0[_1715].x + _466;
    float _1787 = cbLight._m0[_1715].y + _467;
    float _1788 = cbLight._m0[_1715].z + _468;
    float _1792 = inversesqrt(dot(vec3(_1786, _1787, _1788), vec3(_1786, _1787, _1788)));
    float _1796 = dot(vec3(0.0), vec3(cbLight._m0[_1715].xyz));
    float _3499 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1799 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
    float _1800 = dot(vec3(0.0), vec3(_466, _467, _468));
    float _3510 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
    float _1803 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
    float _1804 = dot(vec3(cbLight._m0[_1715].xyz), vec3(_1786 * _1792, _1787 * _1792, _1788 * _1792));
    float _3521 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1815 = (exp2(log2(1.0 - (isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1821 = (0.5 / ((_1799 + 9.9999999392252902907785028219223e-09) + _1803)) * _1799;
    float _3532 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
    float _1823 = (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * 0.31831014156341552734375;
    uint _1837 = _1715 + 9u;
    float _1843 = cbLight._m0[_1749].x + _466;
    float _1844 = cbLight._m0[_1749].y + _467;
    float _1845 = cbLight._m0[_1749].z + _468;
    float _1849 = inversesqrt(dot(vec3(_1843, _1844, _1845), vec3(_1843, _1844, _1845)));
    float _1853 = dot(vec3(0.0), vec3(cbLight._m0[_1749].xyz));
    float _3543 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1856 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
    float _1857 = dot(vec3(cbLight._m0[_1749].xyz), vec3(_1843 * _1849, _1844 * _1849, _1845 * _1849));
    float _3554 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1866 = (exp2(log2(1.0 - (isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1870 = (0.5 / ((_1856 + 9.9999999392252902907785028219223e-09) + _1803)) * _1856;
    float _3565 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _1872 = (isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) * 0.31831014156341552734375;
    float _1882 = (((_1866 * cbLight._m0[_1837].x) * _1872) * _1732) + ((((cbLight._m0[_1780].x * _1703) * _1815) * _1823) * _1745);
    float _1883 = (((_1866 * cbLight._m0[_1837].y) * _1872) * _1732) + ((((cbLight._m0[_1780].y * _1705) * _1815) * _1823) * _1745);
    float _1884 = (((_1866 * cbLight._m0[_1837].z) * _1872) * _1732) + ((((cbLight._m0[_1780].z * _1707) * _1815) * _1823) * _1745);
    float _2048;
    float _2050;
    float _2052;
    float _2054;
    float _2056;
    float _2058;
    if (_1713.y == 0u)
    {
        uvec4 _2002 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2003 = _2002.x;
        uint _2014 = uint((float(_2002.y) * floor(float(uint(cbSceneParam._m0[85u].y * _475) / _2003))) + floor(float(uint(cbSceneParam._m0[85u].x * _474) / _2003)));
        float _2024 = (log2(_1489 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2025 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
        uint _2028 = uint(isnan(14.0) ? _2025 : (isnan(_2025) ? 14.0 : min(_2025, 14.0)));
        uvec4 _2034 = texelFetch(g_lightClusterGridBuffer, int(((_2028 << 2u) + (_2014 << 6u)) >> 2u));
        uint _2035 = _2034.x;
        uint _2036 = _2002.z;
        float _2143;
        float _2145;
        float _2147;
        float _2149;
        float _2151;
        float _2153;
        if (((((1u << ((_2036 >> 4u) & 15u)) + 4294967295u) & _2035) == 0u) || ((_2036 & 240u) == 0u))
        {
            _2143 = 0.0;
            _2145 = 0.0;
            _2147 = 0.0;
            _2149 = 0.0;
            _2151 = 0.0;
            _2153 = 0.0;
        }
        else
        {
            float _2144;
            float _2146;
            float _2148;
            float _2150;
            float _2152;
            float _2154;
            float _2311 = 0.0;
            float _2312 = 0.0;
            float _2313 = 0.0;
            float _2314 = 0.0;
            float _2315 = 0.0;
            float _2316 = 0.0;
            uint _2317 = 0u;
            uint _2326;
            bool _2327;
            for (;;)
            {
                _2326 = texelFetch(g_lightClassification, int((((_2028 << 5u) + (_2014 << 9u)) + (_2317 << 2u)) >> 2u)).x;
                _2327 = _2326 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                float frontier_phi_70_pred_3;
                float frontier_phi_70_pred_4;
                float frontier_phi_70_pred_5;
                if (_2327)
                {
                    frontier_phi_70_pred = _2314;
                    frontier_phi_70_pred_1 = _2316;
                    frontier_phi_70_pred_2 = _2315;
                    frontier_phi_70_pred_3 = _2313;
                    frontier_phi_70_pred_4 = _2312;
                    frontier_phi_70_pred_5 = _2311;
                }
                else
                {
                    float _2456;
                    float _2457;
                    float _2458;
                    float _2459;
                    float _2460;
                    float _2461;
                    uint _2462;
                    _2456 = _2311;
                    _2457 = _2312;
                    _2458 = _2313;
                    _2459 = _2314;
                    _2460 = _2315;
                    _2461 = _2316;
                    _2462 = _2326;
                    float _2388;
                    float _2389;
                    float _2390;
                    float _2391;
                    float _2392;
                    float _2393;
                    for (;;)
                    {
                        uint _2466 = uint(findLSB(_2462)) + (_2317 << 5u);
                        uint _2463 = (_2462 + 4294967295u) & _2462;
                        uint _2468 = _2466 * 48u;
                        vec4 _2482 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2468)).x, texelFetch(g_PointLightRenderingBuffer, int(_2468 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2468 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2468 + 3u)).x));
                        uint _2488 = (_2466 * 48u) + 4u;
                        vec4 _2501 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2488)).x, texelFetch(g_PointLightRenderingBuffer, int(_2488 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2488 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2488 + 3u)).x));
                        uint _2507 = (_2466 * 48u) + 8u;
                        vec3 _2518 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2507)).x, texelFetch(g_PointLightRenderingBuffer, int(_2507 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2507 + 2u)).x));
                        float _2522 = _2482.x - _1487;
                        float _2523 = _2482.y - _1488;
                        float _2524 = _2482.z - _1489;
                        float _2525 = dot(vec3(_2522, _2523, _2524), vec3(_2522, _2523, _2524));
                        float _2528 = inversesqrt(_2525);
                        float _2537 = 1.0 - (_2525 * _2482.w);
                        float _3586 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
                        float _2538 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
                        float _2539 = sqrt(_2525) * _2501.w;
                        float _2542 = 1.39999997615814208984375 / (_2539 + 1.39999997615814208984375);
                        float _2543 = _2542 * _2542;
                        float _2546 = ((1.0 - _2543) * dot(vec3(0.0), vec3(_2528 * _2522, _2528 * _2523, _2528 * _2524))) + _2543;
                        float _2549 = _2539 * _2539;
                        float _2553 = ((isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0))) * _2538) / ((_2549 * 0.699999988079071044921875) + 1.0);
                        float _2557 = (-0.0) - _1487;
                        float _2558 = (-0.0) - _1488;
                        float _2559 = (-0.0) - _1489;
                        float _2563 = inversesqrt(dot(vec3(_2557, _2558, _2559), vec3(_2557, _2558, _2559)));
                        float _2567 = dot(vec3(0.0), vec3(_2563 * _2557, _2563 * _2558, _2563 * _2559));
                        float _3602 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
                        float _3613 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
                        float _2571 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
                        float _2575 = (0.5 / (((isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) + 9.9999999392252902907785028219223e-09) + _2571)) * _2571;
                        float _3624 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
                        float _2584 = (((isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * 3.1415927410125732421875) / ((_2549 * 2.1991131305694580078125) + 3.141590118408203125)) * _2538;
                        _2391 = (_2553 * _2501.x) + _2459;
                        _2392 = (_2553 * _2501.y) + _2460;
                        _2393 = (_2553 * _2501.z) + _2461;
                        _2388 = (_2584 * _2518.x) + _2456;
                        _2389 = (_2584 * _2518.y) + _2457;
                        _2390 = (_2584 * _2518.z) + _2458;
                        if (_2463 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2456 = _2388;
                            _2457 = _2389;
                            _2458 = _2390;
                            _2459 = _2391;
                            _2460 = _2392;
                            _2461 = _2393;
                            _2462 = _2463;
                        }
                    }
                    frontier_phi_70_pred = _2391;
                    frontier_phi_70_pred_1 = _2393;
                    frontier_phi_70_pred_2 = _2392;
                    frontier_phi_70_pred_3 = _2390;
                    frontier_phi_70_pred_4 = _2389;
                    frontier_phi_70_pred_5 = _2388;
                }
                _2150 = frontier_phi_70_pred;
                _2154 = frontier_phi_70_pred_1;
                _2152 = frontier_phi_70_pred_2;
                _2148 = frontier_phi_70_pred_3;
                _2146 = frontier_phi_70_pred_4;
                _2144 = frontier_phi_70_pred_5;
                uint _2318 = _2317 + 1u;
                if (_2318 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2311 = _2144;
                    _2312 = _2146;
                    _2313 = _2148;
                    _2314 = _2150;
                    _2315 = _2152;
                    _2316 = _2154;
                    _2317 = _2318;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2143 = _2144;
            _2145 = _2146;
            _2147 = _2148;
            _2149 = _2150;
            _2151 = _2152;
            _2153 = _2154;
        }
        uvec4 _2157 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2158 = _2157.z;
        uint _2160 = (_2158 >> 8u) & 15u;
        float _2282;
        float _2284;
        float _2286;
        float _2288;
        float _2290;
        float _2292;
        if (((4294967295u << _2160) & _2035) == 0u)
        {
            _2282 = _2143;
            _2284 = _2145;
            _2286 = _2147;
            _2288 = _2149;
            _2290 = _2151;
            _2292 = _2153;
        }
        else
        {
            float _2307 = inversesqrt(dot(vec3(_1487, _1488, _1489), vec3(_1487, _1488, _1489)));
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2160 < ((_2158 >> 12u) & 15u))
            {
                float _2283;
                float _2285;
                float _2287;
                float _2289;
                float _2291;
                float _2293;
                float _2439 = _2143;
                float _2440 = _2145;
                float _2441 = _2147;
                float _2442 = _2149;
                float _2443 = _2151;
                float _2444 = _2153;
                uint _2445 = _2160;
                uint _2454;
                bool _2455;
                for (;;)
                {
                    _2454 = texelFetch(g_lightClassification, int((((_2028 << 5u) + (_2014 << 9u)) + (_2445 << 2u)) >> 2u)).x;
                    _2455 = _2454 == 0u;
                    float frontier_phi_76_pred;
                    float frontier_phi_76_pred_1;
                    float frontier_phi_76_pred_2;
                    float frontier_phi_76_pred_3;
                    float frontier_phi_76_pred_4;
                    float frontier_phi_76_pred_5;
                    if (_2455)
                    {
                        frontier_phi_76_pred = _2444;
                        frontier_phi_76_pred_1 = _2443;
                        frontier_phi_76_pred_2 = _2442;
                        frontier_phi_76_pred_3 = _2441;
                        frontier_phi_76_pred_4 = _2440;
                        frontier_phi_76_pred_5 = _2439;
                    }
                    else
                    {
                        float _2589;
                        float _2590;
                        float _2591;
                        float _2592;
                        float _2593;
                        float _2594;
                        float _2838;
                        float _2839;
                        float _2840;
                        float _2841;
                        float _2842;
                        float _2843;
                        float _2602 = _2439;
                        float _2603 = _2440;
                        float _2604 = _2441;
                        float _2605 = _2442;
                        float _2606 = _2443;
                        float _2607 = _2444;
                        uint _2608 = _2454;
                        uint _2609;
                        vec4 _2634;
                        float _2635;
                        vec4 _2650;
                        vec3 _2662;
                        vec4 _2677;
                        vec4 _2692;
                        float _2738;
                        bool _2739;
                        for (;;)
                        {
                            uint _2619 = ((_2445 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2608));
                            _2609 = (_2608 + 4294967295u) & _2608;
                            uint _2621 = _2619 * 40u;
                            _2634 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2621 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2621 + 3u)).x));
                            _2635 = _2634.w;
                            uint _2637 = (_2619 * 40u) + 4u;
                            _2650 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2637 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2637 + 3u)).x));
                            uint _2652 = (_2619 * 40u) + 8u;
                            _2662 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2652)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2652 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2652 + 2u)).x));
                            uint _2664 = (_2619 * 40u) + 16u;
                            _2677 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2664)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2664 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2664 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2664 + 3u)).x));
                            uint _2679 = (_2619 * 40u) + 20u;
                            _2692 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2679)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2679 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2679 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2679 + 3u)).x));
                            uint _2694 = (_2619 * 40u) + 24u;
                            vec4 _2707 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2694)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2694 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2694 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2694 + 3u)).x));
                            uint _2713 = (_2619 * 40u) + 28u;
                            vec4 _2726 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2713)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2713 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2713 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2713 + 3u)).x));
                            _2738 = fma(_1489, _2726.z, fma(_1488, _2726.y, _2726.x * _1487)) + _2726.w;
                            _2739 = !((fma(_1489, _2707.z, fma(_1488, _2707.y, _2707.x * _1487)) + _2707.w) <= 0.0);
                            float frontier_phi_82_pred;
                            float frontier_phi_82_pred_1;
                            float frontier_phi_82_pred_2;
                            float frontier_phi_82_pred_3;
                            float frontier_phi_82_pred_4;
                            float frontier_phi_82_pred_5;
                            if (_2739)
                            {
                                float _2766 = _2634.x - _1487;
                                float _2767 = _2634.y - _1488;
                                float _2768 = _2634.z - _1489;
                                float _2769 = dot(vec3(_2766, _2767, _2768), vec3(_2766, _2767, _2768));
                                float _2772 = inversesqrt(_2769);
                                float _2773 = _2772 * _2766;
                                float _2774 = _2772 * _2767;
                                float _2775 = _2772 * _2768;
                                float _2779 = 1.0 - (_2769 / (_2635 * _2635));
                                float _3635 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
                                float _2780 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
                                float _2784 = sqrt(_2769) * _2650.w;
                                float _2786 = 1.39999997615814208984375 / (_2784 + 1.39999997615814208984375);
                                float _2787 = _2786 * _2786;
                                float _2788 = 1.0 - _2787;
                                float _2790 = (_2788 * dot(vec3(_2773, _2774, _2775), vec3(0.0))) + _2787;
                                float _2793 = _2784 * _2784;
                                float _2797 = (fma(_1489, _2677.z, fma(_1488, _2677.y, _2677.x * _1487)) + _2677.w) / _2738;
                                float _2798 = (fma(_1489, _2692.z, fma(_1488, _2692.y, _2692.x * _1487)) + _2692.w) / _2738;
                                float _2802 = 1.0 - dot(vec2(_2797, _2798), vec2(_2797, _2798));
                                float _3651 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
                                float _2803 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
                                float _2804 = _2803 * (((isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0))) * _2780) / ((_2793 * 0.699999988079071044921875) + 1.0));
                                float _2814 = dot(vec3(0.0), vec3((-0.0) - (_1487 * _2307), (-0.0) - (_1488 * _2307), (-0.0) - (_1489 * _2307)));
                                float _3662 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
                                float _2822 = (_2788 * dot(vec3(0.0), vec3(_2773, _2774, _2775))) + _2787;
                                float _3673 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
                                float _2823 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
                                float _2827 = (0.5 / (((isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) + 9.9999999392252902907785028219223e-09) + _2823)) * _2823;
                                float _3684 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
                                float _2834 = (_2803 * _2780) * (((isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * 3.1415927410125732421875) / ((_2793 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_82_pred = _2804 * _2650.z;
                                frontier_phi_82_pred_1 = _2804 * _2650.y;
                                frontier_phi_82_pred_2 = _2804 * _2650.x;
                                frontier_phi_82_pred_3 = _2834 * _2662.z;
                                frontier_phi_82_pred_4 = _2834 * _2662.y;
                                frontier_phi_82_pred_5 = _2834 * _2662.x;
                            }
                            else
                            {
                                frontier_phi_82_pred = 0.0;
                                frontier_phi_82_pred_1 = 0.0;
                                frontier_phi_82_pred_2 = 0.0;
                                frontier_phi_82_pred_3 = 0.0;
                                frontier_phi_82_pred_4 = 0.0;
                                frontier_phi_82_pred_5 = 0.0;
                            }
                            _2843 = frontier_phi_82_pred;
                            _2842 = frontier_phi_82_pred_1;
                            _2841 = frontier_phi_82_pred_2;
                            _2840 = frontier_phi_82_pred_3;
                            _2839 = frontier_phi_82_pred_4;
                            _2838 = frontier_phi_82_pred_5;
                            _2592 = _2841 + _2605;
                            _2593 = _2842 + _2606;
                            _2594 = _2843 + _2607;
                            _2589 = _2838 + _2602;
                            _2590 = _2839 + _2603;
                            _2591 = _2840 + _2604;
                            if (_2609 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2602 = _2589;
                                _2603 = _2590;
                                _2604 = _2591;
                                _2605 = _2592;
                                _2606 = _2593;
                                _2607 = _2594;
                                _2608 = _2609;
                                continue;
                            }
                        }
                        frontier_phi_76_pred = _2594;
                        frontier_phi_76_pred_1 = _2593;
                        frontier_phi_76_pred_2 = _2592;
                        frontier_phi_76_pred_3 = _2591;
                        frontier_phi_76_pred_4 = _2590;
                        frontier_phi_76_pred_5 = _2589;
                    }
                    _2293 = frontier_phi_76_pred;
                    _2291 = frontier_phi_76_pred_1;
                    _2289 = frontier_phi_76_pred_2;
                    _2287 = frontier_phi_76_pred_3;
                    _2285 = frontier_phi_76_pred_4;
                    _2283 = frontier_phi_76_pred_5;
                    uint _2446 = _2445 + 1u;
                    if (_2446 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2439 = _2283;
                        _2440 = _2285;
                        _2441 = _2287;
                        _2442 = _2289;
                        _2443 = _2291;
                        _2444 = _2293;
                        _2445 = _2446;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2291;
                frontier_phi_63_64_ladder_1 = _2293;
                frontier_phi_63_64_ladder_2 = _2289;
                frontier_phi_63_64_ladder_3 = _2287;
                frontier_phi_63_64_ladder_4 = _2285;
                frontier_phi_63_64_ladder_5 = _2283;
            }
            else
            {
                frontier_phi_63_64_ladder = _2151;
                frontier_phi_63_64_ladder_1 = _2153;
                frontier_phi_63_64_ladder_2 = _2149;
                frontier_phi_63_64_ladder_3 = _2147;
                frontier_phi_63_64_ladder_4 = _2145;
                frontier_phi_63_64_ladder_5 = _2143;
            }
            _2282 = frontier_phi_63_64_ladder_5;
            _2284 = frontier_phi_63_64_ladder_4;
            _2286 = frontier_phi_63_64_ladder_3;
            _2288 = frontier_phi_63_64_ladder_2;
            _2290 = frontier_phi_63_64_ladder;
            _2292 = frontier_phi_63_64_ladder_1;
        }
        float _2297 = isnan(1.0) ? _513 : (isnan(_513) ? 1.0 : min(_513, 1.0));
        _2048 = (_2297 * _2288) + _1777;
        _2050 = (_2297 * _2290) + _1778;
        _2052 = (_2297 * _2292) + _1779;
        _2054 = ((_2282 * 0.039999999105930328369140625) * _2297) + _1882;
        _2056 = ((_2284 * 0.039999999105930328369140625) * _2297) + _1883;
        _2058 = ((_2286 * 0.039999999105930328369140625) * _2297) + _1884;
    }
    else
    {
        _2048 = _1777;
        _2050 = _1778;
        _2052 = _1779;
        _2054 = _1882;
        _2056 = _1883;
        _2058 = _1884;
    }
    float _3700 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _3711 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _3722 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _2075 = ((isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * (_2048 + ((isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0))) * _513))) + ((_2054 + ((isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))) * _1221)) * cbPerFrame._m0[3u].x);
    float _2076 = ((isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * (_2050 + ((isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0))) * _513))) + ((_2056 + ((isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))) * _1221)) * cbPerFrame._m0[3u].x);
    float _2077 = ((isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * (_2052 + ((isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0))) * _513))) + ((_2058 + ((isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))) * _1221)) * cbPerFrame._m0[3u].x);
    uint _2081 = _488 + 6u;
    float _2089 = _474 / cbSceneParam._m0[86u].x;
    float _2090 = _475 / cbSceneParam._m0[86u].y;
    vec4 _2104 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2089, _2090, (log2((isnan(cbSceneParam._m0[77u].w) ? _461 : (isnan(_461) ? cbSceneParam._m0[77u].w : min(_461, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2106 = _2104.x;
    float _2107 = _2104.y;
    float _2108 = _2104.z;
    float _2109 = _2104.w;
    float _2205;
    float _2207;
    float _2209;
    float _2211;
    if (_461 > cbSceneParam._m0[78u].w)
    {
        float _2168 = isnan(_461) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _461 : min(cbSceneParam._m0[80u].w, _461));
        float _2169 = _2168 / _461;
        float _2180 = _2169 * _254;
        float _2181 = _255 * _2169;
        float _2182 = (-0.0) - _2181;
        float _2183 = _2169 * _256;
        float _2185 = (cbSceneParam._m0[77u].w * _2182) / _2168;
        float _2186 = _2185 + cbSceneParam._m0[79u].w;
        float _2187 = cbSceneParam._m0[79u].w - _2181;
        float _2193 = sqrt(((_2180 * _2180) + (_2181 * _2181)) + (_2183 * _2183));
        float _2196 = (1.0 - (cbSceneParam._m0[77u].w / _2168)) * _2193;
        float _2201 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2203 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2401;
        if (abs((_2182 - _2185) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2401 = ((((_2186 > 0.0) ? exp2(_2201 * _2186) : (2.0 - exp2(_2203 * _2186))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2196;
        }
        else
        {
            float _2340 = 1.0 / cbSceneParam._m0[80u].x;
            float _2341 = isnan(_2187) ? _2186 : (isnan(_2186) ? _2187 : max(_2186, _2187));
            float _2342 = isnan(_2187) ? _2186 : (isnan(_2186) ? _2187 : min(_2186, _2187));
            float _2351 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : min(_2341, 0.0));
            float _2352 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : min(_2342, 0.0));
            _2401 = ((abs(_2193 / _2182) * cbSceneParam._m0[80u].y) * ((((_2351 - _2352) * 2.0) - ((exp2(_2201 * (isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0)))) - exp2(_2201 * (isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0))))) * _2340)) - ((exp2(_2203 * _2351) - exp2(_2203 * _2352)) * _2340))) + (_2196 * cbSceneParam._m0[80u].z);
        }
        vec4 _2403 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2089, _2090, 1.0), 0.0);
        float _2412 = exp2((_2401 * (-1.44269502162933349609375)) * (1.0 - _2403.w));
        float _2413 = log2(_2412);
        float _2429 = log2(_2109);
        _2205 = (exp2(_2429 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2413 * cbSceneParam._m0[78u].x)) * _2403.x) / cbSceneParam._m0[78u].x)) + _2106;
        _2207 = (exp2(_2429 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2413 * cbSceneParam._m0[78u].y)) * _2403.y) / cbSceneParam._m0[78u].y)) + _2107;
        _2209 = (exp2(_2429 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2413 * cbSceneParam._m0[78u].z)) * _2403.z) / cbSceneParam._m0[78u].z)) + _2108;
        _2211 = _2412 * _2109;
    }
    else
    {
        _2205 = _2106;
        _2207 = _2107;
        _2209 = _2108;
        _2211 = _2109;
    }
    float _2223 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2224 = _2223 == 3.0;
    float _2226 = log2(_2211);
    float _2233 = exp2(_2226 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0)));
    float _2234 = exp2(_2226 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0)));
    float _2235 = exp2(_2226 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0)));
    float _2244 = (_2223 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2244 * (_2224 ? _2233 : (_2233 + (cbSceneParam._m0[72u].w * _2205)));
    SV_Target.y = _2244 * (_2224 ? _2234 : (_2234 + (cbSceneParam._m0[72u].w * _2207)));
    SV_Target.z = _2244 * (_2224 ? _2235 : (_2235 + (cbSceneParam._m0[72u].w * _2209)));
    SV_Target.w = cbInstanceData._m0[_2081].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2081].w;
}


