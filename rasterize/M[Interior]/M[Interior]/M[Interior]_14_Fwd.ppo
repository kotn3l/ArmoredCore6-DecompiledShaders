#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _998;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _188 = _187 * _180;
    float _189 = _187 * _181;
    float _190 = _187 * _182;
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _202 = _201 * TANGENT.x;
    float _203 = _201 * TANGENT.y;
    float _204 = _201 * TANGENT.z;
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    vec4 _274 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _277 = _274.x;
    vec4 _295 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _312 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _277) + cbMtdParam._m0[12u].x) * _295.x;
    float _314 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _277) + cbMtdParam._m0[12u].y) * _295.y;
    float _316 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _277) + cbMtdParam._m0[12u].z) * _295.z;
    vec4 _337 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _373 = cbMtdParam._m0[21u].w + _259;
    float _374 = cbMtdParam._m0[22u].x + _260;
    float _375 = cbMtdParam._m0[22u].y + _261;
    float _389 = (-0.0) - dot(vec3(_373, _374, _375), vec3(_188, _189, _190));
    float _390 = (-0.0) - dot(vec3(_373, _374, _375), vec3(_202, _203, _204));
    float _391 = (-0.0) - dot(vec3(_373, _374, _375), vec3((-0.0) - _195, (-0.0) - _196, (-0.0) - _197));
    float _395 = inversesqrt(dot(vec3(_389, _390, _391), vec3(_389, _390, _391)));
    float _398 = _395 * _391;
    float _401 = ((_395 * _389) + ((cbMtdParam._m0[19u].w * _277) * ((_337.x * 2.0) + (-1.0)))) * cbMtdParam._m0[18u].z;
    float _402 = ((_395 * _390) + ((cbMtdParam._m0[20u].x * _277) * ((_337.y * 2.0) + (-1.0)))) * cbMtdParam._m0[18u].y;
    float _403 = fract(TEXCOORD.x);
    float _404 = fract(TEXCOORD.y);
    float _410;
    if (_401 > 0.0)
    {
        _410 = (1.0 - _403) / _401;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_401 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _403) / _401;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _410 = frontier_phi_3_2_ladder;
    }
    float _418;
    if (_402 > 0.0)
    {
        _418 = (1.0 - _404) / _402;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_402 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _404) / _402;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _418 = frontier_phi_7_6_ladder;
    }
    float _422 = (_398 > 0.0) ? (cbMtdParam._m0[15u].x / _398) : 5000.0;
    float _423 = isnan(_418) ? _410 : (isnan(_410) ? _418 : min(_410, _418));
    float _424 = isnan(_422) ? _423 : (isnan(_423) ? _422 : min(_423, _422));
    float _428 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _435 = ((_424 * _398) + _428) / _428;
    vec4 _459 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * ((((((_403 + (-0.5)) + (_424 * _401)) / _435) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((((((_404 + (-0.5)) + (_424 * _402)) / _435) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _475 = _277 * 0.1500000059604644775390625;
    float _483 = (_475 * (((_459.x * _277) * cbMtdParam._m0[9u].x) - _312)) + _312;
    float _484 = (_475 * (((_459.y * _277) * cbMtdParam._m0[9u].y) - _314)) + _314;
    float _485 = (_475 * (((_459.z * _277) * cbMtdParam._m0[9u].z) - _316)) + _316;
    vec4 _497 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _501 = _497.z;
    float _504 = (_497.x * 2.0) + (-1.0);
    float _505 = (_497.y * 2.0) + (-1.0);
    float _506 = dot(vec2(_504, _505), vec2(_504, _505));
    float _3066 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _511 = sqrt(1.0 - (isnan(1.0) ? _3066 : (isnan(_3066) ? 1.0 : min(_3066, 1.0))));
    float _514 = fma(_511, _195, fma(_505, _202, _504 * _188));
    float _517 = fma(_511, _196, fma(_505, _203, _504 * _189));
    float _520 = fma(_511, _197, fma(_505, _204, _504 * _190));
    float _524 = inversesqrt(dot(vec3(_514, _517, _520), vec3(_514, _517, _520)));
    float _525 = _524 * _514;
    float _526 = _524 * _517;
    float _527 = _524 * _520;
    float _3077 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _528 = isnan(1.0) ? _3077 : (isnan(_3077) ? 1.0 : min(_3077, 1.0));
    float _3088 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _3099 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _3110 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _547 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _551 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _552 = _259 * _551;
    float _553 = _260 * _551;
    float _554 = _261 * _551;
    float _560 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _561 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _582 = fma(_527, cbSceneParam._m0[5u].z, fma(_526, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _525));
    float _585 = fma(_527, cbSceneParam._m0[6u].z, fma(_526, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _525));
    float _588 = fma(_527, cbSceneParam._m0[7u].z, fma(_526, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _525));
    uint _601 = uint(roundEven(NORMAL.w)) * 13u;
    uint _604 = (_601 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _610 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3088 : (isnan(_3088) ? 1.0 : min(_3088, 1.0)))) * cbInstanceData._m0[_604].x;
    float _611 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3099 : (isnan(_3099) ? 1.0 : min(_3099, 1.0)))) * cbInstanceData._m0[_604].y;
    float _612 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3110 : (isnan(_3110) ? 1.0 : min(_3110, 1.0)))) * cbInstanceData._m0[_604].z;
    float _3121 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _613 = isnan(1.0) ? _3121 : (isnan(_3121) ? 1.0 : min(_3121, 1.0));
    float _3132 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _614 = isnan(1.0) ? _3132 : (isnan(_3132) ? 1.0 : min(_3132, 1.0));
    float _3143 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _615 = isnan(1.0) ? _3143 : (isnan(_3143) ? 1.0 : min(_3143, 1.0));
    vec4 _624 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _560, cbSceneParam._m0[86u].y * _561));
    float _627 = _624.x * TEXCOORD.z;
    float _628 = dot(vec3(_525, _526, _527), vec3(_552, _553, _554));
    float _631 = _628 * 2.0;
    float _635 = (_631 * _525) - _552;
    float _636 = (_631 * _526) - _553;
    float _637 = (_631 * _527) - _554;
    float _641 = abs(dot(vec3(_552, _553, _554), vec3(_525, _526, _527)));
    float _3154 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _643 = sqrt(_528);
    float _656 = exp2((_643 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3154 : (isnan(_3154) ? 1.0 : min(_3154, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_643 * 3.0));
    float _688 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _692 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _696 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _997;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _724 = fma(_696, cbModelParam._m0[26u].z, fma(_692, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _688));
        float _728 = fma(_696, cbModelParam._m0[27u].z, fma(_692, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _688));
        float _732 = fma(_696, cbModelParam._m0[28u].z, fma(_692, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _688));
        float _755 = _688 + _525;
        float _756 = _692 + _526;
        float _757 = _696 + _527;
        float _767 = fma(_757, cbModelParam._m0[26u].z, fma(_756, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _755)) - _724;
        float _768 = fma(_757, cbModelParam._m0[27u].z, fma(_756, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _755)) - _728;
        float _769 = fma(_757, cbModelParam._m0[28u].z, fma(_756, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _755)) - _732;
        float _773 = inversesqrt(dot(vec3(_767, _768, _769), vec3(_767, _768, _769)));
        float _786 = ((_773 * _767) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_724 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _787 = ((_773 * _768) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_728 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _788 = ((_773 * _769) / cbModelParam._m0[34u].z) + ((((((_732 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _791 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_786, _787, _788), 0.0);
        vec4 _798 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_786, _787, _788), 0.0);
        vec4 _805 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_786, _787, _788), 0.0);
        vec4 _812 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_786, _787, _788), 0.0);
        float _825 = exp2((_791.w + (-0.5)) * 20.0) * 2.0;
        float _826 = _825 * (_791.x + (-0.5));
        float _827 = _825 * (_791.y + (-0.5));
        float _828 = _825 * (_791.z + (-0.5));
        float _835 = exp2((_798.w + (-0.5)) * 20.0) * 2.0;
        float _836 = _835 * (_798.x + (-0.5));
        float _837 = _835 * (_798.y + (-0.5));
        float _838 = _835 * (_798.z + (-0.5));
        float _845 = exp2((_805.w + (-0.5)) * 20.0) * 2.0;
        float _846 = _845 * (_805.x + (-0.5));
        float _847 = _845 * (_805.y + (-0.5));
        float _848 = _845 * (_805.z + (-0.5));
        float _855 = exp2((_812.w + (-0.5)) * 20.0) * 2.0;
        float _856 = _855 * (_812.x + (-0.5));
        float _857 = _855 * (_812.y + (-0.5));
        float _858 = _855 * (_812.z + (-0.5));
        float _859 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _860 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _861 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _862 = _826 * 0.5;
        float _863 = _836 * 0.5;
        float _864 = _846 * 0.5;
        float _865 = dot(vec3(_862, _863, _864), vec3(_862, _863, _864));
        float _870 = (_865 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_865);
        float _879 = (dot(vec3(_525, _526, _527), vec3(_870 * _862, _870 * _863, _870 * _864)) + 1.0) * 0.5;
        float _3180 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _889 = sqrt(((_863 * _863) + (_862 * _862)) + (_864 * _864)) / (_859 + 9.9999997473787516355514526367188e-06);
        float _3191 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _3191 : (isnan(_3191) ? 1.0 : min(_3191, 1.0));
        float _891 = _890 * 2.0;
        float _895 = (1.0 - _890) / (_890 + 1.0);
        float _3202 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3202 : (isnan(_3202) ? 1.0 : min(_3202, 1.0));
        float _905 = ((((1.0 - _896) * (_891 + 2.0)) * exp2(log2(isnan(1.0) ? _3180 : (isnan(_3180) ? 1.0 : min(_3180, 1.0))) * (_891 + 1.0))) + _896) * _859;
        float _906 = _827 * 0.5;
        float _907 = _837 * 0.5;
        float _908 = _847 * 0.5;
        float _909 = dot(vec3(_906, _907, _908), vec3(_906, _907, _908));
        float _914 = (_909 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_909);
        float _922 = (dot(vec3(_525, _526, _527), vec3(_914 * _906, _914 * _907, _914 * _908)) + 1.0) * 0.5;
        float _3213 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _931 = sqrt(((_907 * _907) + (_906 * _906)) + (_908 * _908)) / (_860 + 9.9999997473787516355514526367188e-06);
        float _3224 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3224 : (isnan(_3224) ? 1.0 : min(_3224, 1.0));
        float _933 = _932 * 2.0;
        float _937 = (1.0 - _932) / (_932 + 1.0);
        float _3235 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0));
        float _947 = ((((1.0 - _938) * (_933 + 2.0)) * exp2(log2(isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0))) * (_933 + 1.0))) + _938) * _860;
        float _948 = _828 * 0.5;
        float _949 = _838 * 0.5;
        float _950 = _848 * 0.5;
        float _951 = dot(vec3(_948, _949, _950), vec3(_948, _949, _950));
        float _956 = (_951 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_951);
        float _964 = (dot(vec3(_525, _526, _527), vec3(_956 * _948, _956 * _949, _956 * _950)) + 1.0) * 0.5;
        float _3246 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _973 = sqrt(((_949 * _949) + (_948 * _948)) + (_950 * _950)) / (_861 + 9.9999997473787516355514526367188e-06);
        float _3257 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0));
        float _975 = _974 * 2.0;
        float _979 = (1.0 - _974) / (_974 + 1.0);
        float _3268 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0));
        float _989 = ((((1.0 - _980) * (_975 + 2.0)) * exp2(log2(isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0))) * (_975 + 1.0))) + _980) * _861;
        _997 = _828;
        _999 = _827;
        _1000 = _826;
        _1001 = _838;
        _1002 = _837;
        _1003 = _836;
        _1004 = _848;
        _1005 = _847;
        _1006 = _846;
        _1007 = _861;
        _1008 = _860;
        _1009 = _859;
        _1010 = cbModelParam._m0[36u].z * (isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0)));
        _1011 = cbModelParam._m0[36u].z * (isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0)));
        _1012 = cbModelParam._m0[36u].z * (isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0)));
    }
    else
    {
        _997 = _998;
        _999 = _998;
        _1000 = _998;
        _1001 = _998;
        _1002 = _998;
        _1003 = _998;
        _1004 = _998;
        _1005 = _998;
        _1006 = _998;
        _1007 = _998;
        _1008 = _998;
        _1009 = _998;
        _1010 = 0.0;
        _1011 = 0.0;
        _1012 = 0.0;
    }
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1038 = fma(_696, cbModelParam._m0[30u].z, fma(_692, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _688));
        float _1042 = fma(_696, cbModelParam._m0[31u].z, fma(_692, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _688));
        float _1046 = fma(_696, cbModelParam._m0[32u].z, fma(_692, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _688));
        float _1069 = _688 + _525;
        float _1070 = _692 + _526;
        float _1071 = _696 + _527;
        float _1081 = fma(_1071, cbModelParam._m0[30u].z, fma(_1070, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1069)) - _1038;
        float _1082 = fma(_1071, cbModelParam._m0[31u].z, fma(_1070, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1069)) - _1042;
        float _1083 = fma(_1071, cbModelParam._m0[32u].z, fma(_1070, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1069)) - _1046;
        float _1087 = inversesqrt(dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083)));
        float _1100 = ((_1087 * _1081) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1038 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1101 = ((_1087 * _1082) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1042 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1102 = ((_1087 * _1083) / cbModelParam._m0[35u].z) + ((((((_1046 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        float _1137 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1104.x + (-0.5));
        float _1139 = _1137 * (_1104.y + (-0.5));
        float _1140 = _1137 * (_1104.z + (-0.5));
        float _1147 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1111.x + (-0.5));
        float _1149 = _1147 * (_1111.y + (-0.5));
        float _1150 = _1147 * (_1111.z + (-0.5));
        float _1157 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1118.x + (-0.5));
        float _1159 = _1157 * (_1118.y + (-0.5));
        float _1160 = _1157 * (_1118.z + (-0.5));
        float _1167 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1125.x + (-0.5));
        float _1169 = _1167 * (_1125.y + (-0.5));
        float _1170 = _1167 * (_1125.z + (-0.5));
        float _1171 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1172 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1173 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1174 = _1138 * 0.5;
        float _1175 = _1148 * 0.5;
        float _1176 = _1158 * 0.5;
        float _1177 = dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176));
        float _1182 = (_1177 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1177);
        float _1190 = (dot(vec3(_525, _526, _527), vec3(_1182 * _1174, _1182 * _1175, _1182 * _1176)) + 1.0) * 0.5;
        float _3309 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1199 = sqrt(((_1175 * _1175) + (_1174 * _1174)) + (_1176 * _1176)) / (_1171 + 9.9999997473787516355514526367188e-06);
        float _3320 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0));
        float _1201 = _1200 * 2.0;
        float _1205 = (1.0 - _1200) / (_1200 + 1.0);
        float _3331 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
        float _1215 = ((((1.0 - _1206) * (_1201 + 2.0)) * exp2(log2(isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0))) * (_1201 + 1.0))) + _1206) * _1171;
        float _1216 = _1139 * 0.5;
        float _1217 = _1149 * 0.5;
        float _1218 = _1159 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1232 = (dot(vec3(_525, _526, _527), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _3342 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1241 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1172 + 9.9999997473787516355514526367188e-06);
        float _3353 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _3364 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0))) * (_1243 + 1.0))) + _1248) * _1172;
        float _1258 = _1140 * 0.5;
        float _1259 = _1150 * 0.5;
        float _1260 = _1160 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1274 = (dot(vec3(_525, _526, _527), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _3375 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1283 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1173 + 9.9999997473787516355514526367188e-06);
        float _3386 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _3397 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0))) * (_1285 + 1.0))) + _1290) * _1173;
        _1307 = _1140;
        _1308 = _1139;
        _1309 = _1138;
        _1310 = _1150;
        _1311 = _1149;
        _1312 = _1148;
        _1313 = _1160;
        _1314 = _1159;
        _1315 = _1158;
        _1316 = _1173;
        _1317 = _1172;
        _1318 = _1171;
        _1319 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)));
        _1320 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
        _1321 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
    }
    else
    {
        _1307 = _998;
        _1308 = _998;
        _1309 = _998;
        _1310 = _998;
        _1311 = _998;
        _1312 = _998;
        _1313 = _998;
        _1314 = _998;
        _1315 = _998;
        _1316 = _998;
        _1317 = _998;
        _1318 = _998;
        _1319 = 0.0;
        _1320 = 0.0;
        _1321 = 0.0;
    }
    float _1331 = (cbModelParam._m0[1u].x * (_1319 - _1010)) + _1010;
    float _1332 = (cbModelParam._m0[1u].x * (_1320 - _1011)) + _1011;
    float _1333 = (cbModelParam._m0[1u].x * (_1321 - _1012)) + _1012;
    float _1354 = fma(_1333, cbSceneParam._m0[89u].z, fma(_1332, cbSceneParam._m0[89u].y, _1331 * cbSceneParam._m0[89u].x));
    float _1357 = fma(_1333, cbSceneParam._m0[90u].z, fma(_1332, cbSceneParam._m0[90u].y, _1331 * cbSceneParam._m0[90u].x));
    float _1360 = fma(_1333, cbSceneParam._m0[91u].z, fma(_1332, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1331));
    float _1375 = _635 * 0.5;
    float _1376 = _636 * 0.5;
    float _1377 = _637 * 0.5;
    float _1378 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1309, _1312, _1315, _1318));
    float _1381 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1308, _1311, _1314, _1317));
    float _1384 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1307, _1310, _1313, _1316));
    float _1418;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1391 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_997, _1001, _1004, _1007));
        float _1395 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_999, _1002, _1005, _1008));
        float _1399 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1000, _1003, _1006, _1009));
        float _1406 = dot(vec4(cbModelParam._m0[39u]), vec4(_1375, _1376, _1377, 1.0));
        _1418 = dot(vec3(isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)), isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)), isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1406) ? 0.0 : (isnan(0.0) ? _1406 : max(0.0, _1406))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1418 = 1.0;
    }
    float _1429;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1420 = dot(vec4(cbModelParam._m0[40u]), vec4(_1375, _1376, _1377, 1.0));
        _1429 = dot(vec3(isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)), isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)), isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1420) ? 0.0 : (isnan(0.0) ? _1420 : max(0.0, _1420))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1429 = 1.0;
    }
    float _1433 = (_1429 * cbModelParam._m0[1u].x) + (_1418 * (1.0 - cbModelParam._m0[1u].x));
    float _1443 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _528);
    float _1444 = isnan(_1443) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1443 : min(cbModelParam._m0[25u].z, _1443));
    float _1525;
    float _1527;
    float _1529;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1492 = fma(_696, cbModelParam._m0[13u].z, fma(_692, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _688)) + cbModelParam._m0[13u].w;
        float _1496 = fma(_696, cbModelParam._m0[14u].z, fma(_692, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _688)) + cbModelParam._m0[14u].w;
        float _1500 = fma(_696, cbModelParam._m0[15u].z, fma(_692, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _688)) + cbModelParam._m0[15u].w;
        float _1503 = fma(_637, cbModelParam._m0[13u].z, fma(_636, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _635));
        float _1506 = fma(_637, cbModelParam._m0[14u].z, fma(_636, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _635));
        float _1509 = fma(_637, cbModelParam._m0[15u].z, fma(_636, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _635));
        float _1537;
        if (_1503 > 0.0)
        {
            _1537 = abs((1.0 - _1492) / _1503);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1492 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1537 = frontier_phi_22_20_ladder;
        }
        float _1882;
        if (_1506 > 0.0)
        {
            _1882 = abs((1.0 - _1496) / _1506);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1506 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1496 + 1.0) / _1506);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1882 = frontier_phi_31_27_ladder;
        }
        float _2182;
        if (_1509 > 0.0)
        {
            _2182 = abs((1.0 - _1500) / _1509);
        }
        else
        {
            float frontier_phi_45_38_ladder;
            if (_1509 < 0.0)
            {
                frontier_phi_45_38_ladder = abs((_1500 + 1.0) / _1509);
            }
            else
            {
                frontier_phi_45_38_ladder = 5000.0;
            }
            _2182 = frontier_phi_45_38_ladder;
        }
        float _2184 = isnan(_1882) ? _1537 : (isnan(_1537) ? _1882 : min(_1537, _1882));
        float _2185 = isnan(_2182) ? _2184 : (isnan(_2184) ? _2182 : min(_2184, _2182));
        float _2189 = (_2185 * _1503) + _1492;
        float _2190 = (_2185 * _1506) + _1496;
        float _2191 = (_2185 * _1509) + _1500;
        float _2192 = _2185 * 9.9999997473787516355514526367188e-05;
        float _2193 = (-1.0) - _2192;
        float _2195 = _2192 + 1.0;
        float frontier_phi_21_45_ladder;
        float frontier_phi_21_45_ladder_1;
        float frontier_phi_21_45_ladder_2;
        if ((_2191 > _2195) || ((_2191 < _2193) || ((_2190 > _2195) || ((_2190 < _2193) || ((_2189 < _2193) || (_2189 > _2195))))))
        {
            frontier_phi_21_45_ladder = 0.0;
            frontier_phi_21_45_ladder_1 = 0.0;
            frontier_phi_21_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2317 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2191, cbModelParam._m0[9u].z, fma(_2190, cbModelParam._m0[9u].y, _2189 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2191, cbModelParam._m0[10u].z, fma(_2190, cbModelParam._m0[10u].y, _2189 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2191, cbModelParam._m0[11u].z, fma(_2190, cbModelParam._m0[11u].y, _2189 * cbModelParam._m0[11u].x))), _1444);
            frontier_phi_21_45_ladder = _2317.z * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_1 = _2317.y * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_2 = _2317.x * cbModelParam._m0[1u].y;
        }
        _1525 = frontier_phi_21_45_ladder_2;
        _1527 = frontier_phi_21_45_ladder_1;
        _1529 = frontier_phi_21_45_ladder;
    }
    else
    {
        vec4 _1513 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_635, _636, _637), _1444);
        _1525 = _1513.x * cbModelParam._m0[1u].y;
        _1527 = _1513.y * cbModelParam._m0[1u].y;
        _1529 = _1513.z * cbModelParam._m0[1u].y;
    }
    float _1533 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _528);
    float _1534 = isnan(_1533) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1533 : min(cbModelParam._m0[25u].w, _1533));
    float _1622;
    float _1624;
    float _1626;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1586 = fma(_696, cbModelParam._m0[21u].z, fma(_692, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _688)) + cbModelParam._m0[21u].w;
        float _1590 = fma(_696, cbModelParam._m0[22u].z, fma(_692, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _688)) + cbModelParam._m0[22u].w;
        float _1594 = fma(_696, cbModelParam._m0[23u].z, fma(_692, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _688)) + cbModelParam._m0[23u].w;
        float _1597 = fma(_637, cbModelParam._m0[21u].z, fma(_636, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _635));
        float _1600 = fma(_637, cbModelParam._m0[22u].z, fma(_636, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _635));
        float _1603 = fma(_637, cbModelParam._m0[23u].z, fma(_636, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _635));
        float _1887;
        if (_1597 > 0.0)
        {
            _1887 = abs((1.0 - _1586) / _1597);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1597 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1586 + 1.0) / _1597);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1887 = frontier_phi_33_29_ladder;
        }
        float _2208;
        if (_1600 > 0.0)
        {
            _2208 = abs((1.0 - _1590) / _1600);
        }
        else
        {
            float frontier_phi_47_40_ladder;
            if (_1600 < 0.0)
            {
                frontier_phi_47_40_ladder = abs((_1590 + 1.0) / _1600);
            }
            else
            {
                frontier_phi_47_40_ladder = 5000.0;
            }
            _2208 = frontier_phi_47_40_ladder;
        }
        float _2377;
        if (_1603 > 0.0)
        {
            _2377 = abs((1.0 - _1594) / _1603);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1603 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1594 + 1.0) / _1603);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2377 = frontier_phi_61_56_ladder;
        }
        float _2379 = isnan(_2208) ? _1887 : (isnan(_1887) ? _2208 : min(_1887, _2208));
        float _2380 = isnan(_2377) ? _2379 : (isnan(_2379) ? _2377 : min(_2379, _2377));
        float _2384 = (_2380 * _1597) + _1586;
        float _2385 = (_2380 * _1600) + _1590;
        float _2386 = (_2380 * _1603) + _1594;
        float _2387 = _2380 * 9.9999997473787516355514526367188e-05;
        float _2388 = (-1.0) - _2387;
        float _2390 = _2387 + 1.0;
        float frontier_phi_30_61_ladder;
        float frontier_phi_30_61_ladder_1;
        float frontier_phi_30_61_ladder_2;
        if ((_2386 > _2390) || ((_2386 < _2388) || ((_2385 > _2390) || ((_2385 < _2388) || ((_2384 < _2388) || (_2384 > _2390))))))
        {
            frontier_phi_30_61_ladder = 0.0;
            frontier_phi_30_61_ladder_1 = 0.0;
            frontier_phi_30_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2619 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2386, cbModelParam._m0[17u].z, fma(_2385, cbModelParam._m0[17u].y, _2384 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2386, cbModelParam._m0[18u].z, fma(_2385, cbModelParam._m0[18u].y, _2384 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2386, cbModelParam._m0[19u].z, fma(_2385, cbModelParam._m0[19u].y, _2384 * cbModelParam._m0[19u].x))), _1534);
            frontier_phi_30_61_ladder = _2619.z * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_1 = _2619.y * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_2 = _2619.x * cbModelParam._m0[1u].z;
        }
        _1622 = frontier_phi_30_61_ladder_2;
        _1624 = frontier_phi_30_61_ladder_1;
        _1626 = frontier_phi_30_61_ladder;
    }
    else
    {
        vec4 _1606 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_635, _636, _637), _1534);
        _1622 = _1606.x * cbModelParam._m0[1u].z;
        _1624 = _1606.y * cbModelParam._m0[1u].z;
        _1626 = _1606.z * cbModelParam._m0[1u].z;
    }
    float _1638 = ((((1.0 - _656) * ((_643 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_656 * _643)) * _627;
    float _1639 = _1638 * ((cbModelParam._m0[1u].w * (_1622 - _1525)) + _1525);
    float _1640 = _1638 * ((cbModelParam._m0[1u].w * (_1624 - _1527)) + _1527);
    float _1641 = _1638 * ((cbModelParam._m0[1u].w * (_1626 - _1529)) + _1529);
    float _1644 = fma(_1641, cbSceneParam._m0[89u].z, fma(_1640, cbSceneParam._m0[89u].y, _1639 * cbSceneParam._m0[89u].x));
    float _1647 = fma(_1641, cbSceneParam._m0[90u].z, fma(_1640, cbSceneParam._m0[90u].y, _1639 * cbSceneParam._m0[90u].x));
    float _1650 = fma(_1641, cbSceneParam._m0[91u].z, fma(_1640, cbSceneParam._m0[91u].y, _1639 * cbSceneParam._m0[91u].x));
    uvec4 _1660 = floatBitsToUint(cbInstanceData._m0[_601 + 5u]);
    uint _1662 = _1660.x * 14u;
    uint _1663 = _1662 + 13u;
    float _1668 = _627 + (-1.0);
    float _1671 = (cbLight._m0[_1663].x * _1668) + 1.0;
    float _1672 = (cbLight._m0[_1663].y * _1668) + 1.0;
    uint _1673 = _1662 + 5u;
    float _1679 = isnan(1.0) ? _1672 : (isnan(_1672) ? 1.0 : min(_1672, 1.0));
    uint _1683 = _1662 + 4u;
    float _1689 = isnan(1.0) ? _1671 : (isnan(_1671) ? 1.0 : min(_1671, 1.0));
    uint _1693 = _1662 | 1u;
    float _1704 = dot(vec3(cbLight._m0[_1662].xyz), vec3(_525, _526, _527));
    float _1707 = dot(vec3(cbLight._m0[_1693].xyz), vec3(_525, _526, _527));
    float _3533 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
    float _3544 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
    float _1712 = (isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))) * 0.3183098733425140380859375;
    float _1714 = (isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * 0.3183098733425140380859375;
    float _1721 = ((cbLight._m0[_1673].x * _1679) * _1714) + ((cbLight._m0[_1683].x * _1689) * _1712);
    float _1722 = ((_1679 * cbLight._m0[_1673].y) * _1714) + ((_1689 * cbLight._m0[_1683].y) * _1712);
    float _1723 = ((_1679 * cbLight._m0[_1673].z) * _1714) + ((_1689 * cbLight._m0[_1683].z) * _1712);
    uint _1725 = _1662 + 8u;
    float _1738 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1662].w)) * _528) * 0.949999988079071044921875);
    float _1739 = _1738 * _1738;
    float _1740 = cbLight._m0[_1662].x + _552;
    float _1741 = cbLight._m0[_1662].y + _553;
    float _1742 = cbLight._m0[_1662].z + _554;
    float _1746 = inversesqrt(dot(vec3(_1740, _1741, _1742), vec3(_1740, _1741, _1742)));
    float _1747 = _1746 * _1740;
    float _1748 = _1746 * _1741;
    float _1749 = _1746 * _1742;
    float _1750 = dot(vec3(_525, _526, _527), vec3(cbLight._m0[_1662].xyz));
    float _3555 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
    float _1753 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
    float _3566 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _1754 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
    float _1755 = dot(vec3(_525, _526, _527), vec3(_1747, _1748, _1749));
    float _3577 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
    float _1758 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
    float _1759 = dot(vec3(cbLight._m0[_1662].xyz), vec3(_1747, _1748, _1749));
    float _3588 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
    float _1763 = _1739 * _1739;
    float _1767 = ((_1758 * _1758) * (_1763 + (-1.0))) + 1.0;
    float _1778 = (exp2(log2(1.0 - (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1779 = 1.0 - _1739;
    float _1790 = (0.5 / (((_1754 * ((_1753 * _1779) + _1739)) + 9.9999999392252902907785028219223e-09) + (((_1754 * _1779) + _1739) * _1753))) * _1753;
    float _3599 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
    float _1792 = (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) * (_1763 / ((_1767 * _1767) * 3.141590118408203125));
    uint _1803 = _1662 + 9u;
    float _1814 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1693].w)) * _528) * 0.949999988079071044921875);
    float _1815 = _1814 * _1814;
    float _1816 = cbLight._m0[_1693].x + _552;
    float _1817 = cbLight._m0[_1693].y + _553;
    float _1818 = cbLight._m0[_1693].z + _554;
    float _1822 = inversesqrt(dot(vec3(_1816, _1817, _1818), vec3(_1816, _1817, _1818)));
    float _1823 = _1822 * _1816;
    float _1824 = _1822 * _1817;
    float _1825 = _1822 * _1818;
    float _1826 = dot(vec3(_525, _526, _527), vec3(cbLight._m0[_1693].xyz));
    float _3610 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1829 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _1830 = dot(vec3(_525, _526, _527), vec3(_1823, _1824, _1825));
    float _3621 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _1833 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _1834 = dot(vec3(cbLight._m0[_1693].xyz), vec3(_1823, _1824, _1825));
    float _3632 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _1838 = _1815 * _1815;
    float _1842 = ((_1833 * _1833) * (_1838 + (-1.0))) + 1.0;
    float _1851 = (exp2(log2(1.0 - (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1852 = 1.0 - _1815;
    float _1862 = (0.5 / (((_1754 * ((_1829 * _1852) + _1815)) + 9.9999999392252902907785028219223e-09) + (((_1754 * _1852) + _1815) * _1829))) * _1829;
    float _3643 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1864 = (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * (_1838 / ((_1842 * _1842) * 3.141590118408203125));
    float _1874 = (((_1851 * cbLight._m0[_1803].x) * _1864) * _1679) + (((_1778 * cbLight._m0[_1725].x) * _1792) * _1689);
    float _1875 = (((_1851 * cbLight._m0[_1803].y) * _1864) * _1679) + (((_1778 * cbLight._m0[_1725].y) * _1792) * _1689);
    float _1876 = (((_1851 * cbLight._m0[_1803].z) * _1864) * _1679) + (((_1778 * cbLight._m0[_1725].z) * _1792) * _1689);
    float _1991;
    float _1993;
    float _1995;
    float _1997;
    float _1999;
    float _2001;
    if (_1660.y == 0u)
    {
        float _1931 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1932 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1931;
        float _1933 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1931;
        float _1934 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1931;
        uvec4 _1946 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1947 = _1946.x;
        uint _1958 = uint((float(_1946.y) * floor(float(uint(cbSceneParam._m0[85u].y * _561) / _1947))) + floor(float(uint(cbSceneParam._m0[85u].x * _560) / _1947)));
        float _1968 = (log2(_1934 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1969 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
        uint _1972 = uint(isnan(14.0) ? _1969 : (isnan(_1969) ? 14.0 : min(_1969, 14.0)));
        uvec4 _1977 = texelFetch(g_lightClusterGridBuffer, int(((_1972 << 2u) + (_1958 << 6u)) >> 2u));
        uint _1978 = _1977.x;
        uint _1979 = _1946.z;
        float _2069;
        float _2071;
        float _2073;
        float _2075;
        float _2077;
        float _2079;
        if (((((1u << ((_1979 >> 4u) & 15u)) + 4294967295u) & _1978) == 0u) || ((_1979 & 240u) == 0u))
        {
            _2069 = 0.0;
            _2071 = 0.0;
            _2073 = 0.0;
            _2075 = 0.0;
            _2077 = 0.0;
            _2079 = 0.0;
        }
        else
        {
            float _2070;
            float _2072;
            float _2074;
            float _2076;
            float _2078;
            float _2080;
            float _2245 = 0.0;
            float _2246 = 0.0;
            float _2247 = 0.0;
            float _2248 = 0.0;
            float _2249 = 0.0;
            float _2250 = 0.0;
            uint _2251 = 0u;
            uint _2260;
            bool _2261;
            for (;;)
            {
                _2260 = texelFetch(g_lightClassification, int((((_1972 << 5u) + (_1958 << 9u)) + (_2251 << 2u)) >> 2u)).x;
                _2261 = _2260 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2261)
                {
                    frontier_phi_58_pred = _2246;
                    frontier_phi_58_pred_1 = _2250;
                    frontier_phi_58_pred_2 = _2249;
                    frontier_phi_58_pred_3 = _2248;
                    frontier_phi_58_pred_4 = _2247;
                    frontier_phi_58_pred_5 = _2245;
                }
                else
                {
                    float _2420;
                    float _2421;
                    float _2422;
                    float _2423;
                    float _2424;
                    float _2425;
                    uint _2426;
                    _2420 = _2245;
                    _2421 = _2246;
                    _2422 = _2247;
                    _2423 = _2248;
                    _2424 = _2249;
                    _2425 = _2250;
                    _2426 = _2260;
                    float _2326;
                    float _2327;
                    float _2328;
                    float _2329;
                    float _2330;
                    float _2331;
                    for (;;)
                    {
                        uint _2430 = uint(findLSB(_2426)) + (_2251 << 5u);
                        uint _2427 = (_2426 + 4294967295u) & _2426;
                        uint _2432 = _2430 * 48u;
                        vec4 _2446 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2432)).x, texelFetch(g_PointLightRenderingBuffer, int(_2432 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2432 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2432 + 3u)).x));
                        uint _2452 = (_2430 * 48u) + 4u;
                        vec4 _2465 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2452)).x, texelFetch(g_PointLightRenderingBuffer, int(_2452 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2452 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2452 + 3u)).x));
                        uint _2471 = (_2430 * 48u) + 8u;
                        vec3 _2482 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2471)).x, texelFetch(g_PointLightRenderingBuffer, int(_2471 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2471 + 2u)).x));
                        float _2486 = _2446.x - _1932;
                        float _2487 = _2446.y - _1933;
                        float _2488 = _2446.z - _1934;
                        float _2489 = dot(vec3(_2486, _2487, _2488), vec3(_2486, _2487, _2488));
                        float _2492 = inversesqrt(_2489);
                        float _2493 = _2492 * _2486;
                        float _2494 = _2492 * _2487;
                        float _2495 = _2492 * _2488;
                        float _2496 = dot(vec3(_582, _585, _588), vec3(_2493, _2494, _2495));
                        float _2501 = 1.0 - (_2489 * _2446.w);
                        float _3664 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
                        float _2502 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
                        float _2503 = sqrt(_2489) * _2465.w;
                        float _2506 = 1.39999997615814208984375 / (_2503 + 1.39999997615814208984375);
                        float _2507 = _2506 * _2506;
                        float _2510 = ((1.0 - _2507) * _2496) + _2507;
                        float _2513 = _2503 * _2503;
                        float _2517 = ((isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0))) * _2502) / ((_2513 * 0.699999988079071044921875) + 1.0);
                        float _2521 = (-0.0) - _1932;
                        float _2522 = (-0.0) - _1933;
                        float _2523 = (-0.0) - _1934;
                        float _2527 = inversesqrt(dot(vec3(_2521, _2522, _2523), vec3(_2521, _2522, _2523)));
                        float _2528 = _2527 * _2521;
                        float _2529 = _2527 * _2522;
                        float _2530 = _2527 * _2523;
                        float _2538 = exp2(log2(1.0 / ((_2513 * 3.5) + 5.0)) * 0.25);
                        float _2539 = 1.0 - _643;
                        float _2546 = sqrt(1.0 - ((1.0 - (_2539 * _2539)) * (1.0 - (_2538 * _2538))));
                        float _2547 = _2546 * _2546;
                        float _2548 = _2547 * _2547;
                        float _2549 = _2528 + _2493;
                        float _2550 = _2529 + _2494;
                        float _2551 = _2530 + _2495;
                        float _2555 = inversesqrt(dot(vec3(_2549, _2550, _2551), vec3(_2549, _2550, _2551)));
                        float _2559 = dot(vec3(_582, _585, _588), vec3(_2528, _2529, _2530));
                        float _3680 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
                        float _2562 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
                        float _2563 = dot(vec3(_582, _585, _588), vec3(_2555 * _2549, _2555 * _2550, _2555 * _2551));
                        float _3691 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
                        float _2566 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
                        float _2570 = ((_2566 * _2566) * (_2548 + (-1.0))) + 1.0;
                        float _2571 = _2506 * _2547;
                        float _2572 = _2571 * _2571;
                        float _2575 = ((1.0 - _2572) * _2496) + _2572;
                        float _3702 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
                        float _2576 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
                        float _2577 = 1.0 - _2547;
                        float _2587 = (0.5 / (((_2576 * ((_2562 * _2577) + _2547)) + 9.9999999392252902907785028219223e-09) + (((_2576 * _2577) + _2547) * _2562))) * _2576;
                        float _3713 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
                        float _2598 = (((_2548 * 3.1415927410125732421875) * (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0)))) / ((_2570 * _2570) * ((_2513 * 2.1991131305694580078125) + 3.141590118408203125))) * _2502;
                        _2329 = (_2517 * _2465.x) + _2423;
                        _2330 = (_2517 * _2465.y) + _2424;
                        _2331 = (_2517 * _2465.z) + _2425;
                        _2326 = (_2598 * _2482.x) + _2420;
                        _2327 = (_2598 * _2482.y) + _2421;
                        _2328 = (_2598 * _2482.z) + _2422;
                        if (_2427 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2420 = _2326;
                            _2421 = _2327;
                            _2422 = _2328;
                            _2423 = _2329;
                            _2424 = _2330;
                            _2425 = _2331;
                            _2426 = _2427;
                        }
                    }
                    frontier_phi_58_pred = _2327;
                    frontier_phi_58_pred_1 = _2331;
                    frontier_phi_58_pred_2 = _2330;
                    frontier_phi_58_pred_3 = _2329;
                    frontier_phi_58_pred_4 = _2328;
                    frontier_phi_58_pred_5 = _2326;
                }
                _2072 = frontier_phi_58_pred;
                _2080 = frontier_phi_58_pred_1;
                _2078 = frontier_phi_58_pred_2;
                _2076 = frontier_phi_58_pred_3;
                _2074 = frontier_phi_58_pred_4;
                _2070 = frontier_phi_58_pred_5;
                uint _2252 = _2251 + 1u;
                if (_2252 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2245 = _2070;
                    _2246 = _2072;
                    _2247 = _2074;
                    _2248 = _2076;
                    _2249 = _2078;
                    _2250 = _2080;
                    _2251 = _2252;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2069 = _2070;
            _2071 = _2072;
            _2073 = _2074;
            _2075 = _2076;
            _2077 = _2078;
            _2079 = _2080;
        }
        uvec4 _2083 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2084 = _2083.z;
        uint _2086 = (_2084 >> 8u) & 15u;
        float _2213;
        float _2215;
        float _2217;
        float _2219;
        float _2221;
        float _2223;
        if (((4294967295u << _2086) & _1978) == 0u)
        {
            _2213 = _2069;
            _2215 = _2071;
            _2217 = _2073;
            _2219 = _2075;
            _2221 = _2077;
            _2223 = _2079;
        }
        else
        {
            float _2238 = inversesqrt(dot(vec3(_1932, _1933, _1934), vec3(_1932, _1933, _1934)));
            float _2239 = _2238 * _1932;
            float _2240 = _2238 * _1933;
            float _2241 = _2238 * _1934;
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2086 < ((_2084 >> 12u) & 15u))
            {
                float _2214;
                float _2216;
                float _2218;
                float _2220;
                float _2222;
                float _2224;
                float _2403 = _2069;
                float _2404 = _2071;
                float _2405 = _2073;
                float _2406 = _2075;
                float _2407 = _2077;
                float _2408 = _2079;
                uint _2409 = _2086;
                uint _2418;
                bool _2419;
                for (;;)
                {
                    _2418 = texelFetch(g_lightClassification, int((((_1972 << 5u) + (_1958 << 9u)) + (_2409 << 2u)) >> 2u)).x;
                    _2419 = _2418 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2419)
                    {
                        frontier_phi_67_pred = _2408;
                        frontier_phi_67_pred_1 = _2407;
                        frontier_phi_67_pred_2 = _2406;
                        frontier_phi_67_pred_3 = _2405;
                        frontier_phi_67_pred_4 = _2404;
                        frontier_phi_67_pred_5 = _2403;
                    }
                    else
                    {
                        float _2624;
                        float _2625;
                        float _2626;
                        float _2627;
                        float _2628;
                        float _2629;
                        float _2918;
                        float _2919;
                        float _2920;
                        float _2921;
                        float _2922;
                        float _2923;
                        float _2637 = _2403;
                        float _2638 = _2404;
                        float _2639 = _2405;
                        float _2640 = _2406;
                        float _2641 = _2407;
                        float _2642 = _2408;
                        uint _2643 = _2418;
                        uint _2644;
                        vec4 _2669;
                        float _2670;
                        vec4 _2685;
                        vec3 _2697;
                        vec4 _2713;
                        vec4 _2728;
                        float _2774;
                        bool _2775;
                        for (;;)
                        {
                            uint _2654 = ((_2409 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2643));
                            _2644 = (_2643 + 4294967295u) & _2643;
                            uint _2656 = _2654 * 40u;
                            _2669 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2656)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2656 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2656 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2656 + 3u)).x));
                            _2670 = _2669.w;
                            uint _2672 = (_2654 * 40u) + 4u;
                            _2685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2672 + 3u)).x));
                            uint _2687 = (_2654 * 40u) + 8u;
                            _2697 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2687)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2687 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2687 + 2u)).x));
                            uint _2700 = (_2654 * 40u) + 16u;
                            _2713 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2700)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2700 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2700 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2700 + 3u)).x));
                            uint _2715 = (_2654 * 40u) + 20u;
                            _2728 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2715)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2715 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2715 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2715 + 3u)).x));
                            uint _2730 = (_2654 * 40u) + 24u;
                            vec4 _2743 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2730)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2730 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2730 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2730 + 3u)).x));
                            uint _2749 = (_2654 * 40u) + 28u;
                            vec4 _2762 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2749)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2749 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2749 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2749 + 3u)).x));
                            _2774 = fma(_1934, _2762.z, fma(_1933, _2762.y, _2762.x * _1932)) + _2762.w;
                            _2775 = !((fma(_1934, _2743.z, fma(_1933, _2743.y, _2743.x * _1932)) + _2743.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2775)
                            {
                                float _2802 = _2669.x - _1932;
                                float _2803 = _2669.y - _1933;
                                float _2804 = _2669.z - _1934;
                                float _2805 = dot(vec3(_2802, _2803, _2804), vec3(_2802, _2803, _2804));
                                float _2808 = inversesqrt(_2805);
                                float _2809 = _2808 * _2802;
                                float _2810 = _2808 * _2803;
                                float _2811 = _2808 * _2804;
                                float _2815 = 1.0 - (_2805 / (_2670 * _2670));
                                float _3724 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
                                float _2816 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
                                float _2820 = sqrt(_2805) * _2685.w;
                                float _2822 = 1.39999997615814208984375 / (_2820 + 1.39999997615814208984375);
                                float _2823 = _2822 * _2822;
                                float _2826 = ((1.0 - _2823) * dot(vec3(_2809, _2810, _2811), vec3(_582, _585, _588))) + _2823;
                                float _2829 = _2820 * _2820;
                                float _2833 = (fma(_1934, _2713.z, fma(_1933, _2713.y, _2713.x * _1932)) + _2713.w) / _2774;
                                float _2834 = (fma(_1934, _2728.z, fma(_1933, _2728.y, _2728.x * _1932)) + _2728.w) / _2774;
                                float _2838 = 1.0 - dot(vec2(_2833, _2834), vec2(_2833, _2834));
                                float _3740 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
                                float _2839 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
                                float _2840 = _2839 * (((isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0))) * _2816) / ((_2829 * 0.699999988079071044921875) + 1.0));
                                float _2852 = exp2(log2(1.0 / ((_2829 * 3.5) + 5.0)) * 0.25);
                                float _2853 = 1.0 - _643;
                                float _2860 = sqrt(1.0 - ((1.0 - (_2853 * _2853)) * (1.0 - (_2852 * _2852))));
                                float _2861 = _2860 * _2860;
                                float _2862 = _2861 * _2861;
                                float _2863 = _2809 - _2239;
                                float _2864 = _2810 - _2240;
                                float _2865 = _2811 - _2241;
                                float _2869 = inversesqrt(dot(vec3(_2863, _2864, _2865), vec3(_2863, _2864, _2865)));
                                float _2873 = dot(vec3(_582, _585, _588), vec3((-0.0) - _2239, (-0.0) - _2240, (-0.0) - _2241));
                                float _3751 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
                                float _2876 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
                                float _2877 = dot(vec3(_582, _585, _588), vec3(_2869 * _2863, _2869 * _2864, _2869 * _2865));
                                float _3762 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
                                float _2880 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
                                float _2884 = ((_2880 * _2880) * (_2862 + (-1.0))) + 1.0;
                                float _2885 = _2822 * _2861;
                                float _2886 = _2885 * _2885;
                                float _2892 = ((1.0 - _2886) * dot(vec3(_582, _585, _588), vec3(_2809, _2810, _2811))) + _2886;
                                float _3773 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
                                float _2893 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
                                float _2894 = 1.0 - _2861;
                                float _2904 = (0.5 / (((_2893 * ((_2876 * _2894) + _2861)) + 9.9999999392252902907785028219223e-09) + (((_2893 * _2894) + _2861) * _2876))) * _2893;
                                float _3784 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
                                float _2914 = (_2839 * _2816) * (((_2862 * 3.1415927410125732421875) * (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0)))) / ((_2884 * _2884) * ((_2829 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _2840 * _2685.z;
                                frontier_phi_73_pred_1 = _2840 * _2685.y;
                                frontier_phi_73_pred_2 = _2840 * _2685.x;
                                frontier_phi_73_pred_3 = _2914 * _2697.z;
                                frontier_phi_73_pred_4 = _2914 * _2697.y;
                                frontier_phi_73_pred_5 = _2914 * _2697.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2923 = frontier_phi_73_pred;
                            _2922 = frontier_phi_73_pred_1;
                            _2921 = frontier_phi_73_pred_2;
                            _2920 = frontier_phi_73_pred_3;
                            _2919 = frontier_phi_73_pred_4;
                            _2918 = frontier_phi_73_pred_5;
                            _2627 = _2921 + _2640;
                            _2628 = _2922 + _2641;
                            _2629 = _2923 + _2642;
                            _2624 = _2918 + _2637;
                            _2625 = _2919 + _2638;
                            _2626 = _2920 + _2639;
                            if (_2644 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2637 = _2624;
                                _2638 = _2625;
                                _2639 = _2626;
                                _2640 = _2627;
                                _2641 = _2628;
                                _2642 = _2629;
                                _2643 = _2644;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2629;
                        frontier_phi_67_pred_1 = _2628;
                        frontier_phi_67_pred_2 = _2627;
                        frontier_phi_67_pred_3 = _2626;
                        frontier_phi_67_pred_4 = _2625;
                        frontier_phi_67_pred_5 = _2624;
                    }
                    _2224 = frontier_phi_67_pred;
                    _2222 = frontier_phi_67_pred_1;
                    _2220 = frontier_phi_67_pred_2;
                    _2218 = frontier_phi_67_pred_3;
                    _2216 = frontier_phi_67_pred_4;
                    _2214 = frontier_phi_67_pred_5;
                    uint _2410 = _2409 + 1u;
                    if (_2410 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2403 = _2214;
                        _2404 = _2216;
                        _2405 = _2218;
                        _2406 = _2220;
                        _2407 = _2222;
                        _2408 = _2224;
                        _2409 = _2410;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2220;
                frontier_phi_49_50_ladder_1 = _2224;
                frontier_phi_49_50_ladder_2 = _2222;
                frontier_phi_49_50_ladder_3 = _2218;
                frontier_phi_49_50_ladder_4 = _2216;
                frontier_phi_49_50_ladder_5 = _2214;
            }
            else
            {
                frontier_phi_49_50_ladder = _2075;
                frontier_phi_49_50_ladder_1 = _2079;
                frontier_phi_49_50_ladder_2 = _2077;
                frontier_phi_49_50_ladder_3 = _2073;
                frontier_phi_49_50_ladder_4 = _2071;
                frontier_phi_49_50_ladder_5 = _2069;
            }
            _2213 = frontier_phi_49_50_ladder_5;
            _2215 = frontier_phi_49_50_ladder_4;
            _2217 = frontier_phi_49_50_ladder_3;
            _2219 = frontier_phi_49_50_ladder;
            _2221 = frontier_phi_49_50_ladder_2;
            _2223 = frontier_phi_49_50_ladder_1;
        }
        float _2228 = isnan(1.0) ? _627 : (isnan(_627) ? 1.0 : min(_627, 1.0));
        _1991 = (_2228 * _2219) + _1721;
        _1993 = (_2228 * _2221) + _1722;
        _1995 = (_2228 * _2223) + _1723;
        _1997 = ((_2213 * 0.039999999105930328369140625) * _2228) + _1874;
        _1999 = ((_2215 * 0.039999999105930328369140625) * _2228) + _1875;
        _2001 = ((_2217 * 0.039999999105930328369140625) * _2228) + _1876;
    }
    else
    {
        _1991 = _1721;
        _1993 = _1722;
        _1995 = _1723;
        _1997 = _1874;
        _1999 = _1875;
        _2001 = _1876;
    }
    float _3800 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _3811 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _3822 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _2018 = ((isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * (_1991 + ((isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0))) * _627))) + ((_1997 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _1433)) * cbPerFrame._m0[3u].x);
    float _2019 = ((isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * (_1993 + ((isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0))) * _627))) + ((_1999 + ((isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))) * _1433)) * cbPerFrame._m0[3u].x);
    float _2020 = ((isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * (_1995 + ((isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0))) * _627))) + ((_2001 + ((isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))) * _1433)) * cbPerFrame._m0[3u].x);
    uint _2024 = _601 + 6u;
    float _2032 = _560 / cbSceneParam._m0[86u].x;
    float _2033 = _561 / cbSceneParam._m0[86u].y;
    vec4 _2047 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2032, _2033, (log2((isnan(cbSceneParam._m0[77u].w) ? _547 : (isnan(_547) ? cbSceneParam._m0[77u].w : min(_547, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2049 = _2047.x;
    float _2050 = _2047.y;
    float _2051 = _2047.z;
    float _2052 = _2047.w;
    float _2132;
    float _2134;
    float _2136;
    float _2138;
    if (_547 > cbSceneParam._m0[78u].w)
    {
        float _2094 = isnan(_547) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _547 : min(cbSceneParam._m0[80u].w, _547));
        float _2095 = _2094 / _547;
        float _2106 = _2095 * _259;
        float _2107 = _260 * _2095;
        float _2108 = (-0.0) - _2107;
        float _2109 = _2095 * _261;
        float _2111 = (cbSceneParam._m0[77u].w * _2108) / _2094;
        float _2112 = _2111 + cbSceneParam._m0[79u].w;
        float _2113 = cbSceneParam._m0[79u].w - _2107;
        float _2119 = sqrt(((_2106 * _2106) + (_2107 * _2107)) + (_2109 * _2109));
        float _2122 = (1.0 - (cbSceneParam._m0[77u].w / _2094)) * _2119;
        float _2128 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2130 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2339;
        if (abs((_2108 - _2111) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2339 = ((((_2112 > 0.0) ? exp2(_2128 * _2112) : (2.0 - exp2(_2130 * _2112))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2122;
        }
        else
        {
            float _2274 = 1.0 / cbSceneParam._m0[80u].x;
            float _2275 = isnan(_2113) ? _2112 : (isnan(_2112) ? _2113 : max(_2112, _2113));
            float _2276 = isnan(_2113) ? _2112 : (isnan(_2112) ? _2113 : min(_2112, _2113));
            float _2285 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : min(_2275, 0.0));
            float _2286 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : min(_2276, 0.0));
            _2339 = ((abs(_2119 / _2108) * cbSceneParam._m0[80u].y) * ((((_2285 - _2286) * 2.0) - ((exp2(_2128 * (isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0)))) - exp2(_2128 * (isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0))))) * _2274)) - ((exp2(_2130 * _2285) - exp2(_2130 * _2286)) * _2274))) + (_2122 * cbSceneParam._m0[80u].z);
        }
        vec4 _2341 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2032, _2033, 1.0), 0.0);
        float _2350 = exp2((_2339 * (-1.44269502162933349609375)) * (1.0 - _2341.w));
        float _2351 = log2(_2350);
        float _2367 = log2(_2052);
        _2132 = (exp2(_2367 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2351 * cbSceneParam._m0[78u].x)) * _2341.x) / cbSceneParam._m0[78u].x)) + _2049;
        _2134 = (exp2(_2367 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2351 * cbSceneParam._m0[78u].y)) * _2341.y) / cbSceneParam._m0[78u].y)) + _2050;
        _2136 = (exp2(_2367 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2351 * cbSceneParam._m0[78u].z)) * _2341.z) / cbSceneParam._m0[78u].z)) + _2051;
        _2138 = _2350 * _2052;
    }
    else
    {
        _2132 = _2049;
        _2134 = _2050;
        _2136 = _2051;
        _2138 = _2052;
    }
    float _2150 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2151 = _2150 == 3.0;
    float _2152 = log2(_2138);
    float _2159 = exp2(_2152 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0)));
    float _2160 = exp2(_2152 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0)));
    float _2161 = exp2(_2152 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0)));
    float _2170 = (_2150 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2170 * (_2151 ? _2159 : (_2159 + (cbSceneParam._m0[72u].w * _2132)));
    SV_Target.y = _2170 * (_2151 ? _2160 : (_2160 + (cbSceneParam._m0[72u].w * _2134)));
    SV_Target.z = _2170 * (_2151 ? _2161 : (_2161 + (cbSceneParam._m0[72u].w * _2136)));
    SV_Target.w = cbInstanceData._m0[_2024].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2024].w;
}


