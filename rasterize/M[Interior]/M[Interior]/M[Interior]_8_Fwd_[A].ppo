#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _382;
uint _1875;
uint _1876;
uint _1877;
uint _2120;
uint _2121;
uint _2122;
float _2361;
float _2362;
float _2363;
float _2364;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _186 = _185 * _178;
    float _187 = _185 * _179;
    float _188 = _185 * _180;
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _196 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _197 = _196 * TANGENT.x;
    float _198 = _196 * TANGENT.y;
    float _199 = _196 * TANGENT.z;
    float _244 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _254 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _244);
    float _255 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _244);
    float _256 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _244);
    vec4 _291 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _307 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _314 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _326 = cbMtdParam._m0[22u].z + _254;
    float _327 = cbMtdParam._m0[22u].w + _255;
    float _328 = cbMtdParam._m0[23u].x + _256;
    float _345 = (-0.0) - dot(vec3(_326, _327, _328), vec3(_307 * _186, _307 * _187, _307 * _188));
    float _346 = (-0.0) - dot(vec3(_326, _327, _328), vec3(_314 * _197, _314 * _198, _314 * _199));
    float _347 = (-0.0) - dot(vec3(_326, _327, _328), vec3((-0.0) - (NORMAL.x * _192), (-0.0) - (NORMAL.y * _192), (-0.0) - (NORMAL.z * _192)));
    float _351 = inversesqrt(dot(vec3(_345, _346, _347), vec3(_345, _346, _347)));
    float _352 = _351 * _347;
    float _357 = ((cbMtdParam._m0[19u].y * _345) * _351) + (((_291.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _358 = ((cbMtdParam._m0[19u].z * _346) * _351) + (((_291.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _361 = fract(cbMtdParam._m0[19u].y * TEXCOORD.x);
    float _362 = fract(cbMtdParam._m0[19u].z * TEXCOORD.y);
    float _380;
    float _383;
    float _385;
    if (_357 > 0.0)
    {
        float _366 = (1.0 - _361) / _357;
        _380 = _366;
        _383 = ((cbMtdParam._m0[16u].z + 1.0) - fract(_366 * _352)) * 0.16666667163372039794921875;
        _385 = (fract((_366 * _358) + _362) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_357 < 0.0)
        {
            float _381 = ((-0.0) - _361) / _357;
            frontier_phi_3_2_ladder = _381;
            frontier_phi_3_2_ladder_1 = (fract((_381 * _358) + _362) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_381 * _352) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _382;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _380 = frontier_phi_3_2_ladder;
        _383 = frontier_phi_3_2_ladder_2;
        _385 = frontier_phi_3_2_ladder_1;
    }
    float _411;
    float _413;
    float _415;
    if (_358 > 0.0)
    {
        float _398 = (1.0 - _362) / _358;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_398 < _380)
        {
            frontier_phi_8_5_ladder = (fract(_398 * _352) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_398 * _357) + _361) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _398;
        }
        else
        {
            frontier_phi_8_5_ladder = _385;
            frontier_phi_8_5_ladder_1 = _383;
            frontier_phi_8_5_ladder_2 = _380;
        }
        _411 = frontier_phi_8_5_ladder_2;
        _413 = frontier_phi_8_5_ladder_1;
        _415 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_358 < 0.0)
        {
            float _412 = ((-0.0) - _362) / _358;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_412 < _380)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_412 * _352) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_412 * _357) + _361) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _412;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _385;
                frontier_phi_8_6_ladder_9_ladder_1 = _383;
                frontier_phi_8_6_ladder_9_ladder_2 = _380;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _385;
            frontier_phi_8_6_ladder_1 = _383;
            frontier_phi_8_6_ladder_2 = _380;
        }
        _411 = frontier_phi_8_6_ladder_2;
        _413 = frontier_phi_8_6_ladder_1;
        _415 = frontier_phi_8_6_ladder;
    }
    float _419 = (_352 > 0.0) ? (cbMtdParam._m0[16u].y / _352) : 5000.0;
    float _432;
    float _433;
    if (_419 < _411)
    {
        _432 = ((_361 + cbMtdParam._m0[16u].z) + (_419 * _357)) * 0.16666667163372039794921875;
        _433 = (((_419 * _358) + _362) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _432 = _413;
        _433 = _415;
    }
    vec4 _435 = texture(sampler2D(M_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_432, _433));
    float _458 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _462 = inversesqrt(dot(vec3(_254, _255, _256), vec3(_254, _255, _256)));
    float _463 = _254 * _462;
    float _464 = _255 * _462;
    float _465 = _256 * _462;
    vec4 _470 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _472 = _470.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _547 = sqrt(((_254 * _254) + (_255 * _255)) + (_256 * _256));
        float _554 = (cbMatDynParam._m0[5u].x * _547) + cbMatDynParam._m0[5u].y;
        float _2373 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
        float _555 = isnan(1.0) ? _2373 : (isnan(_2373) ? 1.0 : min(_2373, 1.0));
        float _559 = (cbMatDynParam._m0[5u].z * _547) + cbMatDynParam._m0[5u].w;
        float _2384 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2384 : (isnan(_2384) ? 1.0 : min(_2384, 1.0))) - _555)) + _555) < ((_472 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _490 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _491 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _500 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_490 * cbSceneParam._m0[86u].x, _491 * cbSceneParam._m0[86u].y));
    float _503 = _500.x * TEXCOORD.z;
    float _504 = (-0.0) - _463;
    float _505 = (-0.0) - _464;
    float _506 = (-0.0) - _465;
    float _528 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _532 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _536 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _699;
    float _700;
    float _701;
    float _702;
    float _703;
    float _704;
    float _705;
    float _706;
    float _707;
    float _708;
    float _709;
    float _710;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _622 = (cbModelParam._m0[37u].x * ((((fma(_536, cbModelParam._m0[26u].z, fma(_532, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _528)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _624 = (cbModelParam._m0[37u].y * ((((fma(_536, cbModelParam._m0[27u].z, fma(_532, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _528)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _625 = (((((fma(_536, cbModelParam._m0[28u].z, fma(_532, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _528)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _628 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_622, _624, _625), 0.0);
        vec4 _635 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_622, _624, _625), 0.0);
        vec4 _642 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_622, _624, _625), 0.0);
        vec4 _649 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_622, _624, _625), 0.0);
        float _662 = exp2((_628.w + (-0.5)) * 20.0) * 2.0;
        float _672 = exp2((_635.w + (-0.5)) * 20.0) * 2.0;
        float _682 = exp2((_642.w + (-0.5)) * 20.0) * 2.0;
        float _692 = exp2((_649.w + (-0.5)) * 20.0) * 2.0;
        float _693 = _692 * (_649.x + (-0.5));
        float _694 = _692 * (_649.y + (-0.5));
        float _695 = _692 * (_649.z + (-0.5));
        _699 = _662 * (_628.z + (-0.5));
        _700 = _662 * (_628.y + (-0.5));
        _701 = _662 * (_628.x + (-0.5));
        _702 = _672 * (_635.z + (-0.5));
        _703 = _672 * (_635.y + (-0.5));
        _704 = _672 * (_635.x + (-0.5));
        _705 = _682 * (_642.z + (-0.5));
        _706 = _682 * (_642.y + (-0.5));
        _707 = _682 * (_642.x + (-0.5));
        _708 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
        _709 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        _710 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    }
    else
    {
        _699 = _382;
        _700 = _382;
        _701 = _382;
        _702 = _382;
        _703 = _382;
        _704 = _382;
        _705 = _382;
        _706 = _382;
        _707 = _382;
        _708 = _382;
        _709 = _382;
        _710 = _382;
    }
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _767 = (cbModelParam._m0[38u].x * ((((fma(_536, cbModelParam._m0[30u].z, fma(_532, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _528)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _768 = (cbModelParam._m0[38u].y * ((((fma(_536, cbModelParam._m0[31u].z, fma(_532, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _528)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _769 = (((((fma(_536, cbModelParam._m0[32u].z, fma(_532, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _528)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _771 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_767, _768, _769), 0.0);
        vec4 _778 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_767, _768, _769), 0.0);
        vec4 _785 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_767, _768, _769), 0.0);
        vec4 _792 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_767, _768, _769), 0.0);
        float _804 = exp2((_771.w + (-0.5)) * 20.0) * 2.0;
        float _814 = exp2((_778.w + (-0.5)) * 20.0) * 2.0;
        float _824 = exp2((_785.w + (-0.5)) * 20.0) * 2.0;
        float _834 = exp2((_792.w + (-0.5)) * 20.0) * 2.0;
        float _835 = _834 * (_792.x + (-0.5));
        float _836 = _834 * (_792.y + (-0.5));
        float _837 = _834 * (_792.z + (-0.5));
        _841 = _804 * (_771.z + (-0.5));
        _842 = _804 * (_771.y + (-0.5));
        _843 = _804 * (_771.x + (-0.5));
        _844 = _814 * (_778.z + (-0.5));
        _845 = _814 * (_778.y + (-0.5));
        _846 = _814 * (_778.x + (-0.5));
        _847 = _824 * (_785.z + (-0.5));
        _848 = _824 * (_785.y + (-0.5));
        _849 = _824 * (_785.x + (-0.5));
        _850 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        _851 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        _852 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    }
    else
    {
        _841 = _382;
        _842 = _382;
        _843 = _382;
        _844 = _382;
        _845 = _382;
        _846 = _382;
        _847 = _382;
        _848 = _382;
        _849 = _382;
        _850 = _382;
        _851 = _382;
        _852 = _382;
    }
    float _867 = _463 * (-0.5);
    float _868 = _464 * (-0.5);
    float _869 = _465 * (-0.5);
    float _870 = dot(vec4(_867, _868, _869, 1.0), vec4(_843, _846, _849, _852));
    float _873 = dot(vec4(_867, _868, _869, 1.0), vec4(_842, _845, _848, _851));
    float _876 = dot(vec4(_867, _868, _869, 1.0), vec4(_841, _844, _847, _850));
    float _911;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _883 = dot(vec4(_867, _868, _869, 1.0), vec4(_699, _702, _705, _708));
        float _887 = dot(vec4(_867, _868, _869, 1.0), vec4(_700, _703, _706, _709));
        float _891 = dot(vec4(_867, _868, _869, 1.0), vec4(_701, _704, _707, _710));
        float _898 = dot(vec4(cbModelParam._m0[39u]), vec4(_867, _868, _869, 1.0));
        _911 = dot(vec3(isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0)), isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0)), isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_898) ? 0.0 : (isnan(0.0) ? _898 : max(0.0, _898))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _911 = 1.0;
    }
    float _922;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _913 = dot(vec4(cbModelParam._m0[40u]), vec4(_867, _868, _869, 1.0));
        _922 = dot(vec3(isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0)), isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0)), isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_913) ? 0.0 : (isnan(0.0) ? _913 : max(0.0, _913))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _922 = 1.0;
    }
    float _926 = (_922 * cbModelParam._m0[1u].x) + (_911 * (1.0 - cbModelParam._m0[1u].x));
    float _932 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1015;
    float _1017;
    float _1019;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _982 = fma(_536, cbModelParam._m0[13u].z, fma(_532, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _528)) + cbModelParam._m0[13u].w;
        float _986 = fma(_536, cbModelParam._m0[14u].z, fma(_532, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _528)) + cbModelParam._m0[14u].w;
        float _990 = fma(_536, cbModelParam._m0[15u].z, fma(_532, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _528)) + cbModelParam._m0[15u].w;
        float _993 = fma(_506, cbModelParam._m0[13u].z, fma(_505, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _504));
        float _996 = fma(_506, cbModelParam._m0[14u].z, fma(_505, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _504));
        float _999 = fma(_506, cbModelParam._m0[15u].z, fma(_505, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _504));
        float _1025;
        if (_993 > 0.0)
        {
            _1025 = abs((1.0 - _982) / _993);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_993 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_982 + 1.0) / _993);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1025 = frontier_phi_29_27_ladder;
        }
        float _1303;
        if (_996 > 0.0)
        {
            _1303 = abs((1.0 - _986) / _996);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_996 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_986 + 1.0) / _996);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1303 = frontier_phi_38_34_ladder;
        }
        float _1607;
        if (_999 > 0.0)
        {
            _1607 = abs((1.0 - _990) / _999);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_999 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_990 + 1.0) / _999);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _1607 = frontier_phi_52_45_ladder;
        }
        float _1609 = isnan(_1303) ? _1025 : (isnan(_1025) ? _1303 : min(_1025, _1303));
        float _1610 = isnan(_1607) ? _1609 : (isnan(_1609) ? _1607 : min(_1609, _1607));
        float _1614 = (_1610 * _993) + _982;
        float _1615 = (_1610 * _996) + _986;
        float _1616 = (_1610 * _999) + _990;
        float _1617 = _1610 * 9.9999997473787516355514526367188e-05;
        float _1618 = (-1.0) - _1617;
        float _1620 = _1617 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_1616 > _1620) || ((_1616 < _1618) || ((_1615 > _1620) || ((_1615 < _1618) || ((_1614 < _1618) || (_1614 > _1620))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1743 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1616, cbModelParam._m0[9u].z, fma(_1615, cbModelParam._m0[9u].y, _1614 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1616, cbModelParam._m0[10u].z, fma(_1615, cbModelParam._m0[10u].y, _1614 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1616, cbModelParam._m0[11u].z, fma(_1615, cbModelParam._m0[11u].y, _1614 * cbModelParam._m0[11u].x))), _932);
            frontier_phi_28_52_ladder = _1743.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _1743.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _1743.x * cbModelParam._m0[1u].y;
        }
        _1015 = frontier_phi_28_52_ladder_2;
        _1017 = frontier_phi_28_52_ladder_1;
        _1019 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1003 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_504, _505, _506), _932);
        _1015 = _1003.x * cbModelParam._m0[1u].y;
        _1017 = _1003.y * cbModelParam._m0[1u].y;
        _1019 = _1003.z * cbModelParam._m0[1u].y;
    }
    float _1022 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1112;
    float _1114;
    float _1116;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1076 = fma(_536, cbModelParam._m0[21u].z, fma(_532, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _528)) + cbModelParam._m0[21u].w;
        float _1080 = fma(_536, cbModelParam._m0[22u].z, fma(_532, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _528)) + cbModelParam._m0[22u].w;
        float _1084 = fma(_536, cbModelParam._m0[23u].z, fma(_532, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _528)) + cbModelParam._m0[23u].w;
        float _1087 = fma(_506, cbModelParam._m0[21u].z, fma(_505, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _504));
        float _1090 = fma(_506, cbModelParam._m0[22u].z, fma(_505, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _504));
        float _1093 = fma(_506, cbModelParam._m0[23u].z, fma(_505, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _504));
        float _1308;
        if (_1087 > 0.0)
        {
            _1308 = abs((1.0 - _1076) / _1087);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1087 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1076 + 1.0) / _1087);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1308 = frontier_phi_40_36_ladder;
        }
        float _1633;
        if (_1090 > 0.0)
        {
            _1633 = abs((1.0 - _1080) / _1090);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1090 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1080 + 1.0) / _1090);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _1633 = frontier_phi_54_47_ladder;
        }
        float _1805;
        if (_1093 > 0.0)
        {
            _1805 = abs((1.0 - _1084) / _1093);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1093 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1084 + 1.0) / _1093);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _1805 = frontier_phi_72_65_ladder;
        }
        float _1807 = isnan(_1633) ? _1308 : (isnan(_1308) ? _1633 : min(_1308, _1633));
        float _1808 = isnan(_1805) ? _1807 : (isnan(_1807) ? _1805 : min(_1807, _1805));
        float _1812 = (_1808 * _1087) + _1076;
        float _1813 = (_1808 * _1090) + _1080;
        float _1814 = (_1808 * _1093) + _1084;
        float _1815 = _1808 * 9.9999997473787516355514526367188e-05;
        float _1816 = (-1.0) - _1815;
        float _1818 = _1815 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_1814 > _1818) || ((_1814 < _1816) || ((_1813 > _1818) || ((_1813 < _1816) || ((_1812 < _1816) || (_1812 > _1818))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1983 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1814, cbModelParam._m0[17u].z, fma(_1813, cbModelParam._m0[17u].y, _1812 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1814, cbModelParam._m0[18u].z, fma(_1813, cbModelParam._m0[18u].y, _1812 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1814, cbModelParam._m0[19u].z, fma(_1813, cbModelParam._m0[19u].y, _1812 * cbModelParam._m0[19u].x))), _1022);
            frontier_phi_37_72_ladder = _1983.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _1983.x * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _1983.y * cbModelParam._m0[1u].z;
        }
        _1112 = frontier_phi_37_72_ladder_1;
        _1114 = frontier_phi_37_72_ladder_2;
        _1116 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1096 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_504, _505, _506), _1022);
        _1112 = _1096.x * cbModelParam._m0[1u].z;
        _1114 = _1096.y * cbModelParam._m0[1u].z;
        _1116 = _1096.z * cbModelParam._m0[1u].z;
    }
    float _1128 = _503 * 0.01200000010430812835693359375;
    float _1130 = _1128 * ((cbModelParam._m0[1u].w * (_1112 - _1015)) + _1015);
    float _1131 = _1128 * ((cbModelParam._m0[1u].w * (_1114 - _1017)) + _1017);
    float _1132 = _1128 * ((cbModelParam._m0[1u].w * (_1116 - _1019)) + _1019);
    float _1153 = fma(_1132, cbSceneParam._m0[89u].z, fma(_1131, cbSceneParam._m0[89u].y, _1130 * cbSceneParam._m0[89u].x));
    float _1156 = fma(_1132, cbSceneParam._m0[90u].z, fma(_1131, cbSceneParam._m0[90u].y, _1130 * cbSceneParam._m0[90u].x));
    float _1159 = fma(_1132, cbSceneParam._m0[91u].z, fma(_1131, cbSceneParam._m0[91u].y, _1130 * cbSceneParam._m0[91u].x));
    uint _1166 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1170 = floatBitsToUint(cbInstanceData._m0[_1166 + 5u]);
    uint _1172 = _1170.x * 14u;
    uint _1173 = _1172 + 13u;
    float _1178 = _503 + (-1.0);
    float _1181 = (cbLight._m0[_1173].x * _1178) + 1.0;
    float _1182 = (cbLight._m0[_1173].y * _1178) + 1.0;
    uint _1183 = _1172 + 8u;
    float _1194 = cbLight._m0[_1172].x + _463;
    float _1195 = cbLight._m0[_1172].y + _464;
    float _1196 = cbLight._m0[_1172].z + _465;
    float _1200 = inversesqrt(dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196)));
    float _1204 = dot(vec3(0.0), vec3(cbLight._m0[_1172].xyz));
    float _2510 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
    float _1207 = isnan(1.0) ? _2510 : (isnan(_2510) ? 1.0 : min(_2510, 1.0));
    float _1208 = dot(vec3(0.0), vec3(_463, _464, _465));
    float _2521 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
    float _1211 = isnan(1.0) ? _2521 : (isnan(_2521) ? 1.0 : min(_2521, 1.0));
    float _1212 = dot(vec3(cbLight._m0[_1172].xyz), vec3(_1194 * _1200, _1195 * _1200, _1196 * _1200));
    float _2532 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
    float _1223 = (exp2(log2(1.0 - (isnan(1.0) ? _2532 : (isnan(_2532) ? 1.0 : min(_2532, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1229 = (0.5 / ((_1207 + 9.9999999392252902907785028219223e-09) + _1211)) * _1207;
    float _2543 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
    float _1231 = (isnan(1.0) ? _2543 : (isnan(_2543) ? 1.0 : min(_2543, 1.0))) * 0.31831014156341552734375;
    float _1233 = isnan(1.0) ? _1181 : (isnan(_1181) ? 1.0 : min(_1181, 1.0));
    uint _1243 = _1172 + 9u;
    uint _1249 = _1172 | 1u;
    float _1255 = cbLight._m0[_1249].x + _463;
    float _1256 = cbLight._m0[_1249].y + _464;
    float _1257 = cbLight._m0[_1249].z + _465;
    float _1261 = inversesqrt(dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257)));
    float _1265 = dot(vec3(0.0), vec3(cbLight._m0[_1249].xyz));
    float _2559 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
    float _1268 = isnan(1.0) ? _2559 : (isnan(_2559) ? 1.0 : min(_2559, 1.0));
    float _1269 = dot(vec3(cbLight._m0[_1249].xyz), vec3(_1255 * _1261, _1256 * _1261, _1257 * _1261));
    float _2570 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
    float _1278 = (exp2(log2(1.0 - (isnan(1.0) ? _2570 : (isnan(_2570) ? 1.0 : min(_2570, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1282 = (0.5 / ((_1268 + 9.9999999392252902907785028219223e-09) + _1211)) * _1268;
    float _2581 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
    float _1284 = (isnan(1.0) ? _2581 : (isnan(_2581) ? 1.0 : min(_2581, 1.0))) * 0.31831014156341552734375;
    float _1285 = isnan(1.0) ? _1182 : (isnan(_1182) ? 1.0 : min(_1182, 1.0));
    float _1295 = (((_1278 * cbLight._m0[_1243].x) * _1284) * _1285) + (((_1223 * cbLight._m0[_1183].x) * _1231) * _1233);
    float _1296 = (((_1278 * cbLight._m0[_1243].y) * _1284) * _1285) + (((_1223 * cbLight._m0[_1183].y) * _1231) * _1233);
    float _1297 = (((_1278 * cbLight._m0[_1243].z) * _1284) * _1285) + (((_1223 * cbLight._m0[_1183].z) * _1231) * _1233);
    float _1413;
    float _1415;
    float _1417;
    if (_1170.y == 0u)
    {
        float _1353 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1354 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1353;
        float _1355 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1353;
        float _1356 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1353;
        uvec4 _1368 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1369 = _1368.x;
        uint _1380 = uint((float(_1368.y) * floor(float(uint(cbSceneParam._m0[85u].y * _491) / _1369))) + floor(float(uint(cbSceneParam._m0[85u].x * _490) / _1369)));
        float _1390 = (log2(_1356 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1391 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        uint _1394 = uint(isnan(14.0) ? _1391 : (isnan(_1391) ? 14.0 : min(_1391, 14.0)));
        uvec4 _1399 = texelFetch(g_lightClusterGridBuffer, int(((_1394 << 2u) + (_1380 << 6u)) >> 2u));
        uint _1400 = _1399.x;
        uint _1401 = _1368.z;
        float _1490;
        float _1492;
        float _1494;
        if (((((1u << ((_1401 >> 4u) & 15u)) + 4294967295u) & _1400) == 0u) || ((_1401 & 240u) == 0u))
        {
            _1490 = 0.0;
            _1492 = 0.0;
            _1494 = 0.0;
        }
        else
        {
            float _1491;
            float _1493;
            float _1495;
            float _1658 = 0.0;
            float _1659 = 0.0;
            float _1660 = 0.0;
            uint _1661 = 0u;
            uint _1670;
            bool _1671;
            for (;;)
            {
                _1670 = texelFetch(g_lightClassification, int((((_1394 << 5u) + (_1380 << 9u)) + (_1661 << 2u)) >> 2u)).x;
                _1671 = _1670 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                if (_1671)
                {
                    frontier_phi_67_pred = _1660;
                    frontier_phi_67_pred_1 = _1659;
                    frontier_phi_67_pred_2 = _1658;
                }
                else
                {
                    float _1845;
                    float _1846;
                    float _1847;
                    uint _1848;
                    _1845 = _1658;
                    _1846 = _1659;
                    _1847 = _1660;
                    _1848 = _1670;
                    float _1752;
                    float _1753;
                    float _1754;
                    for (;;)
                    {
                        uint _1852 = uint(findLSB(_1848)) + (_1661 << 5u);
                        uint _1849 = (_1848 + 4294967295u) & _1848;
                        uint _1854 = _1852 * 48u;
                        vec4 _1868 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1854)).x, texelFetch(g_PointLightRenderingBuffer, int(_1854 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1854 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1854 + 3u)).x));
                        uint _1885 = (_1852 * 48u) + 8u;
                        vec3 _1896 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_1885)).x, texelFetch(g_PointLightRenderingBuffer, int(_1885 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1885 + 2u)).x));
                        float _1900 = _1868.x - _1354;
                        float _1901 = _1868.y - _1355;
                        float _1902 = _1868.z - _1356;
                        float _1903 = dot(vec3(_1900, _1901, _1902), vec3(_1900, _1901, _1902));
                        float _1906 = inversesqrt(_1903);
                        float _1915 = 1.0 - (_1903 * _1868.w);
                        float _2607 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
                        float _1917 = sqrt(_1903) * uintBitsToFloat(uvec4(_1875, _1876, _1877, texelFetch(g_PointLightRenderingBuffer, int(((_1852 * 48u) + 4u) + 3u)).x)).w;
                        float _1920 = 1.39999997615814208984375 / (_1917 + 1.39999997615814208984375);
                        float _1921 = _1920 * _1920;
                        float _1924 = ((1.0 - _1921) * dot(vec3(0.0), vec3(_1906 * _1900, _1906 * _1901, _1906 * _1902))) + _1921;
                        float _1926 = (-0.0) - _1354;
                        float _1927 = (-0.0) - _1355;
                        float _1928 = (-0.0) - _1356;
                        float _1932 = inversesqrt(dot(vec3(_1926, _1927, _1928), vec3(_1926, _1927, _1928)));
                        float _1936 = dot(vec3(0.0), vec3(_1932 * _1926, _1932 * _1927, _1932 * _1928));
                        float _2618 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
                        float _2629 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
                        float _1940 = isnan(1.0) ? _2629 : (isnan(_2629) ? 1.0 : min(_2629, 1.0));
                        float _1944 = (0.5 / (((isnan(1.0) ? _2618 : (isnan(_2618) ? 1.0 : min(_2618, 1.0))) + 9.9999999392252902907785028219223e-09) + _1940)) * _1940;
                        float _2640 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
                        float _1953 = (((isnan(1.0) ? _2640 : (isnan(_2640) ? 1.0 : min(_2640, 1.0))) * 3.1415927410125732421875) / (((_1917 * _1917) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2607 : (isnan(_2607) ? 1.0 : min(_2607, 1.0)));
                        _1752 = (_1953 * _1896.x) + _1845;
                        _1753 = (_1953 * _1896.y) + _1846;
                        _1754 = (_1953 * _1896.z) + _1847;
                        if (_1849 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1845 = _1752;
                            _1846 = _1753;
                            _1847 = _1754;
                            _1848 = _1849;
                        }
                    }
                    frontier_phi_67_pred = _1754;
                    frontier_phi_67_pred_1 = _1753;
                    frontier_phi_67_pred_2 = _1752;
                }
                _1495 = frontier_phi_67_pred;
                _1493 = frontier_phi_67_pred_1;
                _1491 = frontier_phi_67_pred_2;
                uint _1662 = _1661 + 1u;
                if (_1662 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1658 = _1491;
                    _1659 = _1493;
                    _1660 = _1495;
                    _1661 = _1662;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1490 = _1491;
            _1492 = _1493;
            _1494 = _1495;
        }
        uvec4 _1498 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1499 = _1498.z;
        uint _1501 = (_1499 >> 8u) & 15u;
        float _1638;
        float _1640;
        float _1642;
        if (((4294967295u << _1501) & _1400) == 0u)
        {
            _1638 = _1490;
            _1640 = _1492;
            _1642 = _1494;
        }
        else
        {
            float _1654 = inversesqrt(dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356)));
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            if (_1501 < ((_1499 >> 12u) & 15u))
            {
                float _1639;
                float _1641;
                float _1643;
                float _1831 = _1490;
                float _1832 = _1492;
                float _1833 = _1494;
                uint _1834 = _1501;
                uint _1843;
                bool _1844;
                for (;;)
                {
                    _1843 = texelFetch(g_lightClassification, int((((_1394 << 5u) + (_1380 << 9u)) + (_1834 << 2u)) >> 2u)).x;
                    _1844 = _1843 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    if (_1844)
                    {
                        frontier_phi_81_pred = _1831;
                        frontier_phi_81_pred_1 = _1833;
                        frontier_phi_81_pred_2 = _1832;
                    }
                    else
                    {
                        float _1988;
                        float _1989;
                        float _1990;
                        float _2209;
                        float _2210;
                        float _2211;
                        float _1998 = _1831;
                        float _1999 = _1832;
                        float _2000 = _1833;
                        uint _2001 = _1843;
                        uint _2002;
                        uint _2012;
                        vec4 _2027;
                        float _2028;
                        vec3 _2040;
                        vec4 _2055;
                        vec4 _2070;
                        float _2116;
                        bool _2117;
                        for (;;)
                        {
                            _2012 = ((_1834 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2001));
                            _2002 = (_2001 + 4294967295u) & _2001;
                            uint _2014 = _2012 * 40u;
                            _2027 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2014 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2014 + 3u)).x));
                            _2028 = _2027.w;
                            uint _2030 = (_2012 * 40u) + 8u;
                            _2040 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2030)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2030 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2030 + 2u)).x));
                            uint _2042 = (_2012 * 40u) + 16u;
                            _2055 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2042)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2042 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2042 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2042 + 3u)).x));
                            uint _2057 = (_2012 * 40u) + 20u;
                            _2070 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2057)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2057 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2057 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2057 + 3u)).x));
                            uint _2072 = (_2012 * 40u) + 24u;
                            vec4 _2085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2072 + 3u)).x));
                            uint _2091 = (_2012 * 40u) + 28u;
                            vec4 _2104 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2091)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2091 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2091 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2091 + 3u)).x));
                            _2116 = fma(_1356, _2104.z, fma(_1355, _2104.y, _2104.x * _1354)) + _2104.w;
                            _2117 = !((fma(_1356, _2085.z, fma(_1355, _2085.y, _2085.x * _1354)) + _2085.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            if (_2117)
                            {
                                float _2151 = _2027.x - _1354;
                                float _2152 = _2027.y - _1355;
                                float _2153 = _2027.z - _1356;
                                float _2154 = dot(vec3(_2151, _2152, _2153), vec3(_2151, _2152, _2153));
                                float _2157 = inversesqrt(_2154);
                                float _2164 = 1.0 - (_2154 / (_2028 * _2028));
                                float _2651 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
                                float _2166 = sqrt(_2154) * uintBitsToFloat(uvec4(_2120, _2121, _2122, texelFetch(g_SpotLightRenderingBuffer, int(((_2012 * 40u) + 4u) + 3u)).x)).w;
                                float _2168 = 1.39999997615814208984375 / (_2166 + 1.39999997615814208984375);
                                float _2169 = _2168 * _2168;
                                float _2172 = (fma(_1356, _2055.z, fma(_1355, _2055.y, _2055.x * _1354)) + _2055.w) / _2116;
                                float _2173 = (fma(_1356, _2070.z, fma(_1355, _2070.y, _2070.x * _1354)) + _2070.w) / _2116;
                                float _2177 = 1.0 - dot(vec2(_2172, _2173), vec2(_2172, _2173));
                                float _2662 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
                                float _2185 = dot(vec3(0.0), vec3((-0.0) - (_1354 * _1654), (-0.0) - (_1355 * _1654), (-0.0) - (_1356 * _1654)));
                                float _2673 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
                                float _2193 = ((1.0 - _2169) * dot(vec3(0.0), vec3(_2157 * _2151, _2157 * _2152, _2157 * _2153))) + _2169;
                                float _2684 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
                                float _2194 = isnan(1.0) ? _2684 : (isnan(_2684) ? 1.0 : min(_2684, 1.0));
                                float _2198 = (0.5 / (((isnan(1.0) ? _2673 : (isnan(_2673) ? 1.0 : min(_2673, 1.0))) + 9.9999999392252902907785028219223e-09) + _2194)) * _2194;
                                float _2695 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
                                float _2205 = ((isnan(1.0) ? _2662 : (isnan(_2662) ? 1.0 : min(_2662, 1.0))) * (isnan(1.0) ? _2651 : (isnan(_2651) ? 1.0 : min(_2651, 1.0)))) * (((isnan(1.0) ? _2695 : (isnan(_2695) ? 1.0 : min(_2695, 1.0))) * 3.1415927410125732421875) / (((_2166 * _2166) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_87_pred = _2205 * _2040.x;
                                frontier_phi_87_pred_1 = _2205 * _2040.y;
                                frontier_phi_87_pred_2 = _2205 * _2040.z;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                            }
                            _2209 = frontier_phi_87_pred;
                            _2210 = frontier_phi_87_pred_1;
                            _2211 = frontier_phi_87_pred_2;
                            _1988 = _2209 + _1998;
                            _1989 = _2210 + _1999;
                            _1990 = _2211 + _2000;
                            if (_2002 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _1998 = _1988;
                                _1999 = _1989;
                                _2000 = _1990;
                                _2001 = _2002;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _1988;
                        frontier_phi_81_pred_1 = _1990;
                        frontier_phi_81_pred_2 = _1989;
                    }
                    _1639 = frontier_phi_81_pred;
                    _1643 = frontier_phi_81_pred_1;
                    _1641 = frontier_phi_81_pred_2;
                    uint _1835 = _1834 + 1u;
                    if (_1835 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1831 = _1639;
                        _1832 = _1641;
                        _1833 = _1643;
                        _1834 = _1835;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _1643;
                frontier_phi_56_57_ladder_1 = _1641;
                frontier_phi_56_57_ladder_2 = _1639;
            }
            else
            {
                frontier_phi_56_57_ladder = _1494;
                frontier_phi_56_57_ladder_1 = _1492;
                frontier_phi_56_57_ladder_2 = _1490;
            }
            _1638 = frontier_phi_56_57_ladder_2;
            _1640 = frontier_phi_56_57_ladder_1;
            _1642 = frontier_phi_56_57_ladder;
        }
        float _1647 = isnan(1.0) ? _503 : (isnan(_503) ? 1.0 : min(_503, 1.0));
        _1413 = ((_1638 * 0.039999999105930328369140625) * _1647) + _1295;
        _1415 = ((_1640 * 0.039999999105930328369140625) * _1647) + _1296;
        _1417 = ((_1642 * 0.039999999105930328369140625) * _1647) + _1297;
    }
    else
    {
        _1413 = _1295;
        _1415 = _1296;
        _1417 = _1297;
    }
    uint _1423 = _1166 + 9u;
    uint _1424 = _1423 + uint(cbMatDynParam._m0[0u].w);
    float _1439 = ((_435.x * cbMtdParam._m0[13u].x) * cbInstanceData._m0[_1424].x) + ((_1413 + ((isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0))) * _926)) * cbPerFrame._m0[3u].x);
    float _1440 = ((_435.y * cbMtdParam._m0[13u].y) * cbInstanceData._m0[_1424].y) + ((_1415 + ((isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0))) * _926)) * cbPerFrame._m0[3u].x);
    float _1441 = ((_435.z * cbMtdParam._m0[13u].z) * cbInstanceData._m0[_1424].z) + ((_1417 + ((isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0))) * _926)) * cbPerFrame._m0[3u].x);
    float _1442 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
    float _1443 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
    float _1444 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
    uint _1445 = _1166 + 6u;
    float _1453 = _490 / cbSceneParam._m0[86u].x;
    float _1454 = _491 / cbSceneParam._m0[86u].y;
    vec4 _1468 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1453, _1454, (log2((isnan(cbSceneParam._m0[77u].w) ? _458 : (isnan(_458) ? cbSceneParam._m0[77u].w : min(_458, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1470 = _1468.x;
    float _1471 = _1468.y;
    float _1472 = _1468.z;
    float _1473 = _1468.w;
    float _1547;
    float _1549;
    float _1551;
    float _1553;
    if (_458 > cbSceneParam._m0[78u].w)
    {
        float _1509 = isnan(_458) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _458 : min(cbSceneParam._m0[80u].w, _458));
        float _1510 = _1509 / _458;
        float _1521 = _1510 * _254;
        float _1522 = _255 * _1510;
        float _1523 = (-0.0) - _1522;
        float _1524 = _1510 * _256;
        float _1526 = (cbSceneParam._m0[77u].w * _1523) / _1509;
        float _1527 = _1526 + cbSceneParam._m0[79u].w;
        float _1528 = cbSceneParam._m0[79u].w - _1522;
        float _1534 = sqrt(((_1521 * _1521) + (_1522 * _1522)) + (_1524 * _1524));
        float _1537 = (1.0 - (cbSceneParam._m0[77u].w / _1509)) * _1534;
        float _1543 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1545 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1762;
        if (abs((_1523 - _1526) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1762 = ((((_1527 > 0.0) ? exp2(_1543 * _1527) : (2.0 - exp2(_1545 * _1527))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1537;
        }
        else
        {
            float _1684 = 1.0 / cbSceneParam._m0[80u].x;
            float _1685 = isnan(_1528) ? _1527 : (isnan(_1527) ? _1528 : max(_1527, _1528));
            float _1686 = isnan(_1528) ? _1527 : (isnan(_1527) ? _1528 : min(_1527, _1528));
            float _1695 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : min(_1685, 0.0));
            float _1696 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : min(_1686, 0.0));
            _1762 = ((abs(_1534 / _1523) * cbSceneParam._m0[80u].y) * ((((_1695 - _1696) * 2.0) - ((exp2(_1543 * (isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)))) - exp2(_1543 * (isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))))) * _1684)) - ((exp2(_1545 * _1695) - exp2(_1545 * _1696)) * _1684))) + (_1537 * cbSceneParam._m0[80u].z);
        }
        vec4 _1764 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1453, _1454, 1.0), 0.0);
        float _1773 = exp2((_1762 * (-1.44269502162933349609375)) * (1.0 - _1764.w));
        float _1774 = log2(_1773);
        float _1790 = log2(_1473);
        _1547 = (exp2(_1790 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1774 * cbSceneParam._m0[78u].x)) * _1764.x) / cbSceneParam._m0[78u].x)) + _1470;
        _1549 = (exp2(_1790 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1774 * cbSceneParam._m0[78u].y)) * _1764.y) / cbSceneParam._m0[78u].y)) + _1471;
        _1551 = (exp2(_1790 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1774 * cbSceneParam._m0[78u].z)) * _1764.z) / cbSceneParam._m0[78u].z)) + _1472;
        _1553 = _1773 * _1473;
    }
    else
    {
        _1547 = _1470;
        _1549 = _1471;
        _1551 = _1472;
        _1553 = _1473;
    }
    bool _1800;
    vec4 _1563;
    vec4 _1586;
    float _1588;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    bool _1606;
    for (;;)
    {
        _1563 = cbMatDynParam._m0[0u];
        float _1565 = roundEven(_1563.y);
        bool _1566 = _1565 == 3.0;
        float _1568 = log2(_1553);
        float _1575 = exp2(_1568 * cbSceneParam._m0[78u].x) * _1442;
        float _1576 = exp2(_1568 * cbSceneParam._m0[78u].y) * _1443;
        float _1577 = exp2(_1568 * cbSceneParam._m0[78u].z) * _1444;
        float _1584 = _472 + (-0.5);
        _1586 = cbMtdParam._m0[1u];
        _1588 = _1586.y * _1584;
        float _1591 = (_1565 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1592 = _1591 * (_1566 ? _1575 : (_1575 + (cbSceneParam._m0[72u].w * _1547)));
        _1593 = _1591 * (_1566 ? _1576 : (_1576 + (cbSceneParam._m0[72u].w * _1549)));
        _1594 = _1591 * (_1566 ? _1577 : (_1577 + (cbSceneParam._m0[72u].w * _1551)));
        _1595 = _1584 * 0.999000012874603271484375;
        _1606 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1606)
        {
            if ((cbInstanceData._m0[_1166 + 7u].x + _1595) < 0.5)
            {
                _1800 = true;
                break;
            }
        }
        uint _1719 = _1423 + uint(_1563.w);
        if ((cbInstanceData._m0[_1719].w < 1.0) && ((cbInstanceData._m0[_1719].w + _1595) < 0.5))
        {
            _1800 = true;
            break;
        }
        if ((_1588 + 1.0) < _1586.x)
        {
            _1800 = true;
            break;
        }
        _1800 = false;
        break;
    }
    float _1958;
    if (_1800)
    {
        discard_state = true;
        _1958 = 0.0;
    }
    else
    {
        _1958 = cbInstanceData._m0[_1445].w;
    }
    SV_Target.x = _1592;
    SV_Target.y = _1593;
    SV_Target.z = _1594;
    SV_Target.w = _1958;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1445].w;
    discard_exit();
}


