#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _443;
float _3229;
float _3230;
float _3231;
float _3232;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _280 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _283 = _280.x;
    vec4 _301 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _318 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _283) + cbMtdParam._m0[12u].x) * _301.x;
    float _320 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _283) + cbMtdParam._m0[12u].y) * _301.y;
    float _322 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _283) + cbMtdParam._m0[12u].z) * _301.z;
    vec4 _356 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _371 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _378 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _390 = cbMtdParam._m0[22u].z + _265;
    float _391 = cbMtdParam._m0[22u].w + _266;
    float _392 = cbMtdParam._m0[23u].x + _267;
    float _406 = (-0.0) - dot(vec3(_390, _391, _392), vec3(_371 * _194, _371 * _195, _371 * _196));
    float _407 = (-0.0) - dot(vec3(_390, _391, _392), vec3(_378 * _208, _378 * _209, _378 * _210));
    float _408 = (-0.0) - dot(vec3(_390, _391, _392), vec3((-0.0) - _201, (-0.0) - _202, (-0.0) - _203));
    float _412 = inversesqrt(dot(vec3(_406, _407, _408), vec3(_406, _407, _408)));
    float _413 = _412 * _408;
    float _418 = ((cbMtdParam._m0[19u].y * _406) * _412) + (((_356.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _419 = ((cbMtdParam._m0[19u].z * _407) * _412) + (((_356.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _422 = fract(cbMtdParam._m0[19u].y * TEXCOORD.x);
    float _423 = fract(cbMtdParam._m0[19u].z * TEXCOORD.y);
    float _441;
    float _444;
    float _446;
    if (_418 > 0.0)
    {
        float _427 = (1.0 - _422) / _418;
        _441 = _427;
        _444 = ((cbMtdParam._m0[16u].z + 1.0) - fract(_427 * _413)) * 0.16666667163372039794921875;
        _446 = (fract((_427 * _419) + _423) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_418 < 0.0)
        {
            float _442 = ((-0.0) - _422) / _418;
            frontier_phi_3_2_ladder = _442;
            frontier_phi_3_2_ladder_1 = (fract((_442 * _419) + _423) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_442 * _413) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _443;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _441 = frontier_phi_3_2_ladder;
        _444 = frontier_phi_3_2_ladder_2;
        _446 = frontier_phi_3_2_ladder_1;
    }
    float _472;
    float _474;
    float _476;
    if (_419 > 0.0)
    {
        float _459 = (1.0 - _423) / _419;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_459 < _441)
        {
            frontier_phi_8_5_ladder = (fract(_459 * _413) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_459 * _418) + _422) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _459;
        }
        else
        {
            frontier_phi_8_5_ladder = _446;
            frontier_phi_8_5_ladder_1 = _444;
            frontier_phi_8_5_ladder_2 = _441;
        }
        _472 = frontier_phi_8_5_ladder_2;
        _474 = frontier_phi_8_5_ladder_1;
        _476 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_419 < 0.0)
        {
            float _473 = ((-0.0) - _423) / _419;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_473 < _441)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_473 * _413) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_473 * _418) + _422) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _473;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _446;
                frontier_phi_8_6_ladder_9_ladder_1 = _444;
                frontier_phi_8_6_ladder_9_ladder_2 = _441;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _446;
            frontier_phi_8_6_ladder_1 = _444;
            frontier_phi_8_6_ladder_2 = _441;
        }
        _472 = frontier_phi_8_6_ladder_2;
        _474 = frontier_phi_8_6_ladder_1;
        _476 = frontier_phi_8_6_ladder;
    }
    float _480 = (_413 > 0.0) ? (cbMtdParam._m0[16u].y / _413) : 5000.0;
    float _493;
    float _494;
    if (_480 < _472)
    {
        _493 = ((_422 + cbMtdParam._m0[16u].z) + (_480 * _418)) * 0.16666667163372039794921875;
        _494 = (((_480 * _419) + _423) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _493 = _474;
        _494 = _476;
    }
    vec4 _496 = texture(sampler2D(M_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_493, _494));
    float _507 = _283 * 0.1500000059604644775390625;
    float _515 = (_507 * (((cbMtdParam._m0[13u].x * _283) * _496.x) - _318)) + _318;
    float _516 = (_507 * (((cbMtdParam._m0[13u].y * _283) * _496.y) - _320)) + _320;
    float _517 = (_507 * (((cbMtdParam._m0[13u].z * _283) * _496.z) - _322)) + _322;
    vec4 _529 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _533 = _529.z;
    float _536 = (_529.x * 2.0) + (-1.0);
    float _537 = (_529.y * 2.0) + (-1.0);
    float _538 = dot(vec2(_536, _537), vec2(_536, _537));
    float _3241 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _543 = sqrt(1.0 - (isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0))));
    float _546 = fma(_543, _201, fma(_537, _208, _536 * _194));
    float _549 = fma(_543, _202, fma(_537, _209, _536 * _195));
    float _552 = fma(_543, _203, fma(_537, _210, _536 * _196));
    float _556 = inversesqrt(dot(vec3(_546, _549, _552), vec3(_546, _549, _552)));
    float _557 = _556 * _546;
    float _558 = _556 * _549;
    float _559 = _556 * _552;
    float _3252 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _560 = isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0));
    float _3263 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _3274 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _3285 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _579 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _583 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _584 = _265 * _583;
    float _585 = _266 * _583;
    float _586 = _267 * _583;
    vec4 _591 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _593 = _591.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _756 = sqrt(((_265 * _265) + (_266 * _266)) + (_267 * _267));
        float _762 = (cbMatDynParam._m0[5u].x * _756) + cbMatDynParam._m0[5u].y;
        float _3296 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _763 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
        float _767 = (cbMatDynParam._m0[5u].z * _756) + cbMatDynParam._m0[5u].w;
        float _3307 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0))) - _763)) + _763) < ((_593 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _611 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _612 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _632 = fma(_559, cbSceneParam._m0[5u].z, fma(_558, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _557));
    float _635 = fma(_559, cbSceneParam._m0[6u].z, fma(_558, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _557));
    float _638 = fma(_559, cbSceneParam._m0[7u].z, fma(_558, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _557));
    uint _651 = uint(roundEven(NORMAL.w)) * 13u;
    uint _652 = _651 + 9u;
    uint _653 = _652 + uint(cbMatDynParam._m0[0u].w);
    float _659 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0)))) * cbInstanceData._m0[_653].x;
    float _660 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0)))) * cbInstanceData._m0[_653].y;
    float _661 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0)))) * cbInstanceData._m0[_653].z;
    float _3318 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _662 = isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0));
    float _3329 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _663 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
    float _3340 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _664 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
    vec4 _673 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _611, cbSceneParam._m0[86u].y * _612));
    float _676 = _673.x * TEXCOORD.z;
    float _677 = dot(vec3(_557, _558, _559), vec3(_584, _585, _586));
    float _680 = _677 * 2.0;
    float _684 = (_680 * _557) - _584;
    float _685 = (_680 * _558) - _585;
    float _686 = (_680 * _559) - _586;
    float _690 = abs(dot(vec3(_584, _585, _586), vec3(_557, _558, _559)));
    float _3351 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _692 = sqrt(_560);
    float _705 = exp2((_692 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_692 * 3.0));
    float _737 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _741 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _745 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _801 = fma(_745, cbModelParam._m0[26u].z, fma(_741, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _737));
        float _805 = fma(_745, cbModelParam._m0[27u].z, fma(_741, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _737));
        float _809 = fma(_745, cbModelParam._m0[28u].z, fma(_741, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _737));
        float _833 = _737 + _557;
        float _834 = _741 + _558;
        float _835 = _745 + _559;
        float _845 = fma(_835, cbModelParam._m0[26u].z, fma(_834, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _833)) - _801;
        float _846 = fma(_835, cbModelParam._m0[27u].z, fma(_834, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _833)) - _805;
        float _847 = fma(_835, cbModelParam._m0[28u].z, fma(_834, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _833)) - _809;
        float _851 = inversesqrt(dot(vec3(_845, _846, _847), vec3(_845, _846, _847)));
        float _864 = ((_851 * _845) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_801 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _865 = ((_851 * _846) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_805 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _866 = ((_851 * _847) / cbModelParam._m0[34u].z) + ((((((_809 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        vec4 _883 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        vec4 _890 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        float _903 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _904 = _903 * (_869.x + (-0.5));
        float _905 = _903 * (_869.y + (-0.5));
        float _906 = _903 * (_869.z + (-0.5));
        float _913 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _914 = _913 * (_876.x + (-0.5));
        float _915 = _913 * (_876.y + (-0.5));
        float _916 = _913 * (_876.z + (-0.5));
        float _923 = exp2((_883.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_883.x + (-0.5));
        float _925 = _923 * (_883.y + (-0.5));
        float _926 = _923 * (_883.z + (-0.5));
        float _933 = exp2((_890.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_890.x + (-0.5));
        float _935 = _933 * (_890.y + (-0.5));
        float _936 = _933 * (_890.z + (-0.5));
        float _937 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _938 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _939 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _940 = _904 * 0.5;
        float _941 = _914 * 0.5;
        float _942 = _924 * 0.5;
        float _943 = dot(vec3(_940, _941, _942), vec3(_940, _941, _942));
        float _948 = (_943 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_943);
        float _957 = (dot(vec3(_557, _558, _559), vec3(_948 * _940, _948 * _941, _948 * _942)) + 1.0) * 0.5;
        float _3377 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _967 = sqrt(((_941 * _941) + (_940 * _940)) + (_942 * _942)) / (_937 + 9.9999997473787516355514526367188e-06);
        float _3388 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
        float _969 = _968 * 2.0;
        float _973 = (1.0 - _968) / (_968 + 1.0);
        float _3399 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
        float _983 = ((((1.0 - _974) * (_969 + 2.0)) * exp2(log2(isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0))) * (_969 + 1.0))) + _974) * _937;
        float _984 = _905 * 0.5;
        float _985 = _915 * 0.5;
        float _986 = _925 * 0.5;
        float _987 = dot(vec3(_984, _985, _986), vec3(_984, _985, _986));
        float _992 = (_987 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_987);
        float _1000 = (dot(vec3(_557, _558, _559), vec3(_992 * _984, _992 * _985, _992 * _986)) + 1.0) * 0.5;
        float _3410 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1009 = sqrt(((_985 * _985) + (_984 * _984)) + (_986 * _986)) / (_938 + 9.9999997473787516355514526367188e-06);
        float _3421 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
        float _1011 = _1010 * 2.0;
        float _1015 = (1.0 - _1010) / (_1010 + 1.0);
        float _3432 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _1025 = ((((1.0 - _1016) * (_1011 + 2.0)) * exp2(log2(isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0))) * (_1011 + 1.0))) + _1016) * _938;
        float _1026 = _906 * 0.5;
        float _1027 = _916 * 0.5;
        float _1028 = _926 * 0.5;
        float _1029 = dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028));
        float _1034 = (_1029 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1029);
        float _1042 = (dot(vec3(_557, _558, _559), vec3(_1034 * _1026, _1034 * _1027, _1034 * _1028)) + 1.0) * 0.5;
        float _3443 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1051 = sqrt(((_1027 * _1027) + (_1026 * _1026)) + (_1028 * _1028)) / (_939 + 9.9999997473787516355514526367188e-06);
        float _3454 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
        float _1053 = _1052 * 2.0;
        float _1057 = (1.0 - _1052) / (_1052 + 1.0);
        float _3465 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
        float _1067 = ((((1.0 - _1058) * (_1053 + 2.0)) * exp2(log2(isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0))) * (_1053 + 1.0))) + _1058) * _939;
        _1075 = _906;
        _1076 = _905;
        _1077 = _904;
        _1078 = _916;
        _1079 = _915;
        _1080 = _914;
        _1081 = _926;
        _1082 = _925;
        _1083 = _924;
        _1084 = _939;
        _1085 = _938;
        _1086 = _937;
        _1087 = cbModelParam._m0[36u].z * (isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0)));
        _1088 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0)));
        _1089 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0)));
    }
    else
    {
        _1075 = _443;
        _1076 = _443;
        _1077 = _443;
        _1078 = _443;
        _1079 = _443;
        _1080 = _443;
        _1081 = _443;
        _1082 = _443;
        _1083 = _443;
        _1084 = _443;
        _1085 = _443;
        _1086 = _443;
        _1087 = 0.0;
        _1088 = 0.0;
        _1089 = 0.0;
    }
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1118 = fma(_745, cbModelParam._m0[30u].z, fma(_741, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _737));
        float _1122 = fma(_745, cbModelParam._m0[31u].z, fma(_741, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _737));
        float _1126 = fma(_745, cbModelParam._m0[32u].z, fma(_741, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _737));
        float _1149 = _737 + _557;
        float _1150 = _741 + _558;
        float _1151 = _745 + _559;
        float _1161 = fma(_1151, cbModelParam._m0[30u].z, fma(_1150, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1149)) - _1118;
        float _1162 = fma(_1151, cbModelParam._m0[31u].z, fma(_1150, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1149)) - _1122;
        float _1163 = fma(_1151, cbModelParam._m0[32u].z, fma(_1150, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1149)) - _1126;
        float _1167 = inversesqrt(dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163)));
        float _1180 = ((_1167 * _1161) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1118 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1181 = ((_1167 * _1162) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1122 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1182 = ((_1167 * _1163) / cbModelParam._m0[35u].z) + ((((((_1126 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1180, _1181, _1182), 0.0);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1180, _1181, _1182), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1180, _1181, _1182), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1180, _1181, _1182), 0.0);
        float _1217 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1184.x + (-0.5));
        float _1219 = _1217 * (_1184.y + (-0.5));
        float _1220 = _1217 * (_1184.z + (-0.5));
        float _1227 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1191.x + (-0.5));
        float _1229 = _1227 * (_1191.y + (-0.5));
        float _1230 = _1227 * (_1191.z + (-0.5));
        float _1237 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1198.x + (-0.5));
        float _1239 = _1237 * (_1198.y + (-0.5));
        float _1240 = _1237 * (_1198.z + (-0.5));
        float _1247 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1205.x + (-0.5));
        float _1249 = _1247 * (_1205.y + (-0.5));
        float _1250 = _1247 * (_1205.z + (-0.5));
        float _1251 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1252 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1253 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1254 = _1218 * 0.5;
        float _1255 = _1228 * 0.5;
        float _1256 = _1238 * 0.5;
        float _1257 = dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256));
        float _1262 = (_1257 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1257);
        float _1270 = (dot(vec3(_557, _558, _559), vec3(_1262 * _1254, _1262 * _1255, _1262 * _1256)) + 1.0) * 0.5;
        float _3506 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1279 = sqrt(((_1255 * _1255) + (_1254 * _1254)) + (_1256 * _1256)) / (_1251 + 9.9999997473787516355514526367188e-06);
        float _3517 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _3528 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))) * (_1281 + 1.0))) + _1286) * _1251;
        float _1296 = _1219 * 0.5;
        float _1297 = _1229 * 0.5;
        float _1298 = _1239 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1312 = (dot(vec3(_557, _558, _559), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _3539 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1321 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1252 + 9.9999997473787516355514526367188e-06);
        float _3550 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _3561 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))) * (_1323 + 1.0))) + _1328) * _1252;
        float _1338 = _1220 * 0.5;
        float _1339 = _1230 * 0.5;
        float _1340 = _1240 * 0.5;
        float _1341 = dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340));
        float _1346 = (_1341 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1341);
        float _1354 = (dot(vec3(_557, _558, _559), vec3(_1346 * _1338, _1346 * _1339, _1346 * _1340)) + 1.0) * 0.5;
        float _3572 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1363 = sqrt(((_1339 * _1339) + (_1338 * _1338)) + (_1340 * _1340)) / (_1253 + 9.9999997473787516355514526367188e-06);
        float _3583 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _1365 = _1364 * 2.0;
        float _1369 = (1.0 - _1364) / (_1364 + 1.0);
        float _3594 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _1379 = ((((1.0 - _1370) * (_1365 + 2.0)) * exp2(log2(isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * (_1365 + 1.0))) + _1370) * _1253;
        _1387 = _1220;
        _1388 = _1219;
        _1389 = _1218;
        _1390 = _1230;
        _1391 = _1229;
        _1392 = _1228;
        _1393 = _1240;
        _1394 = _1239;
        _1395 = _1238;
        _1396 = _1253;
        _1397 = _1252;
        _1398 = _1251;
        _1399 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
        _1400 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
        _1401 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)));
    }
    else
    {
        _1387 = _443;
        _1388 = _443;
        _1389 = _443;
        _1390 = _443;
        _1391 = _443;
        _1392 = _443;
        _1393 = _443;
        _1394 = _443;
        _1395 = _443;
        _1396 = _443;
        _1397 = _443;
        _1398 = _443;
        _1399 = 0.0;
        _1400 = 0.0;
        _1401 = 0.0;
    }
    float _1411 = (cbModelParam._m0[1u].x * (_1399 - _1087)) + _1087;
    float _1412 = (cbModelParam._m0[1u].x * (_1400 - _1088)) + _1088;
    float _1413 = (cbModelParam._m0[1u].x * (_1401 - _1089)) + _1089;
    float _1434 = fma(_1413, cbSceneParam._m0[89u].z, fma(_1412, cbSceneParam._m0[89u].y, _1411 * cbSceneParam._m0[89u].x));
    float _1437 = fma(_1413, cbSceneParam._m0[90u].z, fma(_1412, cbSceneParam._m0[90u].y, _1411 * cbSceneParam._m0[90u].x));
    float _1440 = fma(_1413, cbSceneParam._m0[91u].z, fma(_1412, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1411));
    float _1455 = _684 * 0.5;
    float _1456 = _685 * 0.5;
    float _1457 = _686 * 0.5;
    float _1458 = dot(vec4(_1455, _1456, _1457, 1.0), vec4(_1389, _1392, _1395, _1398));
    float _1461 = dot(vec4(_1455, _1456, _1457, 1.0), vec4(_1388, _1391, _1394, _1397));
    float _1464 = dot(vec4(_1455, _1456, _1457, 1.0), vec4(_1387, _1390, _1393, _1396));
    float _1498;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1471 = dot(vec4(_1455, _1456, _1457, 1.0), vec4(_1075, _1078, _1081, _1084));
        float _1475 = dot(vec4(_1455, _1456, _1457, 1.0), vec4(_1076, _1079, _1082, _1085));
        float _1479 = dot(vec4(_1455, _1456, _1457, 1.0), vec4(_1077, _1080, _1083, _1086));
        float _1486 = dot(vec4(cbModelParam._m0[39u]), vec4(_1455, _1456, _1457, 1.0));
        _1498 = dot(vec3(isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)), isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)), isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1486) ? 0.0 : (isnan(0.0) ? _1486 : max(0.0, _1486))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1498 = 1.0;
    }
    float _1509;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1500 = dot(vec4(cbModelParam._m0[40u]), vec4(_1455, _1456, _1457, 1.0));
        _1509 = dot(vec3(isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)), isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)), isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1500) ? 0.0 : (isnan(0.0) ? _1500 : max(0.0, _1500))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1509 = 1.0;
    }
    float _1513 = (_1509 * cbModelParam._m0[1u].x) + (_1498 * (1.0 - cbModelParam._m0[1u].x));
    float _1523 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _560);
    float _1524 = isnan(_1523) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1523 : min(cbModelParam._m0[25u].z, _1523));
    float _1606;
    float _1608;
    float _1610;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1573 = fma(_745, cbModelParam._m0[13u].z, fma(_741, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _737)) + cbModelParam._m0[13u].w;
        float _1577 = fma(_745, cbModelParam._m0[14u].z, fma(_741, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _737)) + cbModelParam._m0[14u].w;
        float _1581 = fma(_745, cbModelParam._m0[15u].z, fma(_741, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _737)) + cbModelParam._m0[15u].w;
        float _1584 = fma(_686, cbModelParam._m0[13u].z, fma(_685, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _684));
        float _1587 = fma(_686, cbModelParam._m0[14u].z, fma(_685, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _684));
        float _1590 = fma(_686, cbModelParam._m0[15u].z, fma(_685, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _684));
        float _1618;
        if (_1584 > 0.0)
        {
            _1618 = abs((1.0 - _1573) / _1584);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1573 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1618 = frontier_phi_29_27_ladder;
        }
        float _1989;
        if (_1587 > 0.0)
        {
            _1989 = abs((1.0 - _1577) / _1587);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1587 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1577 + 1.0) / _1587);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1989 = frontier_phi_38_34_ladder;
        }
        float _2297;
        if (_1590 > 0.0)
        {
            _2297 = abs((1.0 - _1581) / _1590);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1590 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1581 + 1.0) / _1590);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _2297 = frontier_phi_52_45_ladder;
        }
        float _2299 = isnan(_1989) ? _1618 : (isnan(_1618) ? _1989 : min(_1618, _1989));
        float _2300 = isnan(_2297) ? _2299 : (isnan(_2299) ? _2297 : min(_2299, _2297));
        float _2304 = (_2300 * _1584) + _1573;
        float _2305 = (_2300 * _1587) + _1577;
        float _2306 = (_2300 * _1590) + _1581;
        float _2307 = _2300 * 9.9999997473787516355514526367188e-05;
        float _2308 = (-1.0) - _2307;
        float _2310 = _2307 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2306 > _2310) || ((_2306 < _2308) || ((_2305 > _2310) || ((_2305 < _2308) || ((_2304 < _2308) || (_2304 > _2310))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2448 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2306, cbModelParam._m0[9u].z, fma(_2305, cbModelParam._m0[9u].y, _2304 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2306, cbModelParam._m0[10u].z, fma(_2305, cbModelParam._m0[10u].y, _2304 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2306, cbModelParam._m0[11u].z, fma(_2305, cbModelParam._m0[11u].y, _2304 * cbModelParam._m0[11u].x))), _1524);
            frontier_phi_28_52_ladder = _2448.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _2448.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _2448.x * cbModelParam._m0[1u].y;
        }
        _1606 = frontier_phi_28_52_ladder_2;
        _1608 = frontier_phi_28_52_ladder_1;
        _1610 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1594 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_684, _685, _686), _1524);
        _1606 = _1594.x * cbModelParam._m0[1u].y;
        _1608 = _1594.y * cbModelParam._m0[1u].y;
        _1610 = _1594.z * cbModelParam._m0[1u].y;
    }
    float _1614 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _560);
    float _1615 = isnan(_1614) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1614 : min(cbModelParam._m0[25u].w, _1614));
    float _1705;
    float _1707;
    float _1709;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1669 = fma(_745, cbModelParam._m0[21u].z, fma(_741, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _737)) + cbModelParam._m0[21u].w;
        float _1673 = fma(_745, cbModelParam._m0[22u].z, fma(_741, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _737)) + cbModelParam._m0[22u].w;
        float _1677 = fma(_745, cbModelParam._m0[23u].z, fma(_741, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _737)) + cbModelParam._m0[23u].w;
        float _1680 = fma(_686, cbModelParam._m0[21u].z, fma(_685, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _684));
        float _1683 = fma(_686, cbModelParam._m0[22u].z, fma(_685, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _684));
        float _1686 = fma(_686, cbModelParam._m0[23u].z, fma(_685, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _684));
        float _1994;
        if (_1680 > 0.0)
        {
            _1994 = abs((1.0 - _1669) / _1680);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1669 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1994 = frontier_phi_40_36_ladder;
        }
        float _2323;
        if (_1683 > 0.0)
        {
            _2323 = abs((1.0 - _1673) / _1683);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1673 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _2323 = frontier_phi_54_47_ladder;
        }
        float _2513;
        if (_1686 > 0.0)
        {
            _2513 = abs((1.0 - _1677) / _1686);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1677 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2513 = frontier_phi_72_65_ladder;
        }
        float _2515 = isnan(_2323) ? _1994 : (isnan(_1994) ? _2323 : min(_1994, _2323));
        float _2516 = isnan(_2513) ? _2515 : (isnan(_2515) ? _2513 : min(_2515, _2513));
        float _2520 = (_2516 * _1680) + _1669;
        float _2521 = (_2516 * _1683) + _1673;
        float _2522 = (_2516 * _1686) + _1677;
        float _2523 = _2516 * 9.9999997473787516355514526367188e-05;
        float _2524 = (-1.0) - _2523;
        float _2526 = _2523 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2522 > _2526) || ((_2522 < _2524) || ((_2521 > _2526) || ((_2521 < _2524) || ((_2520 < _2524) || (_2520 > _2526))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2764 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2522, cbModelParam._m0[17u].z, fma(_2521, cbModelParam._m0[17u].y, _2520 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2522, cbModelParam._m0[18u].z, fma(_2521, cbModelParam._m0[18u].y, _2520 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2522, cbModelParam._m0[19u].z, fma(_2521, cbModelParam._m0[19u].y, _2520 * cbModelParam._m0[19u].x))), _1615);
            frontier_phi_37_72_ladder = _2764.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2764.y * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2764.x * cbModelParam._m0[1u].z;
        }
        _1705 = frontier_phi_37_72_ladder_2;
        _1707 = frontier_phi_37_72_ladder_1;
        _1709 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1689 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_684, _685, _686), _1615);
        _1705 = _1689.x * cbModelParam._m0[1u].z;
        _1707 = _1689.y * cbModelParam._m0[1u].z;
        _1709 = _1689.z * cbModelParam._m0[1u].z;
    }
    float _1721 = ((((1.0 - _705) * ((_692 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_705 * _692)) * _676;
    float _1722 = _1721 * ((cbModelParam._m0[1u].w * (_1705 - _1606)) + _1606);
    float _1723 = _1721 * ((cbModelParam._m0[1u].w * (_1707 - _1608)) + _1608);
    float _1724 = _1721 * ((cbModelParam._m0[1u].w * (_1709 - _1610)) + _1610);
    float _1727 = fma(_1724, cbSceneParam._m0[89u].z, fma(_1723, cbSceneParam._m0[89u].y, _1722 * cbSceneParam._m0[89u].x));
    float _1730 = fma(_1724, cbSceneParam._m0[90u].z, fma(_1723, cbSceneParam._m0[90u].y, _1722 * cbSceneParam._m0[90u].x));
    float _1733 = fma(_1724, cbSceneParam._m0[91u].z, fma(_1723, cbSceneParam._m0[91u].y, _1722 * cbSceneParam._m0[91u].x));
    vec4 _1741 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_611, _612));
    float _1743 = _1741.w;
    float _1755 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1743);
    float _1756 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1743);
    float _1757 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1743);
    uvec4 _1761 = floatBitsToUint(cbInstanceData._m0[_651 + 5u]);
    uint _1763 = _1761.x * 14u;
    uint _1764 = _1763 + 13u;
    float _1769 = _676 + (-1.0);
    float _1772 = (cbLight._m0[_1764].x * _1769) + 1.0;
    float _1773 = (cbLight._m0[_1764].y * _1769) + 1.0;
    uint _1774 = _1763 + 5u;
    float _1780 = isnan(1.0) ? _1773 : (isnan(_1773) ? 1.0 : min(_1773, 1.0));
    uint _1784 = _1763 + 4u;
    float _1793 = isnan(1.0) ? _1772 : (isnan(_1772) ? 1.0 : min(_1772, 1.0));
    uint _1797 = _1763 | 1u;
    float _1808 = dot(vec3(cbLight._m0[_1763].xyz), vec3(_557, _558, _559));
    float _1811 = dot(vec3(cbLight._m0[_1797].xyz), vec3(_557, _558, _559));
    float _3730 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _3741 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _1816 = (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * 0.3183098733425140380859375;
    float _1818 = (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * 0.3183098733425140380859375;
    float _1825 = ((cbLight._m0[_1774].x * _1780) * _1818) + (((cbLight._m0[_1784].x * _1755) * _1793) * _1816);
    float _1826 = ((_1780 * cbLight._m0[_1774].y) * _1818) + (((cbLight._m0[_1784].y * _1756) * _1793) * _1816);
    float _1827 = ((_1780 * cbLight._m0[_1774].z) * _1818) + (((cbLight._m0[_1784].z * _1757) * _1793) * _1816);
    uint _1829 = _1763 + 8u;
    float _1842 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1763].w)) * _560) * 0.949999988079071044921875);
    float _1843 = _1842 * _1842;
    float _1844 = cbLight._m0[_1763].x + _584;
    float _1845 = cbLight._m0[_1763].y + _585;
    float _1846 = cbLight._m0[_1763].z + _586;
    float _1850 = inversesqrt(dot(vec3(_1844, _1845, _1846), vec3(_1844, _1845, _1846)));
    float _1851 = _1850 * _1844;
    float _1852 = _1850 * _1845;
    float _1853 = _1850 * _1846;
    float _1854 = dot(vec3(_557, _558, _559), vec3(cbLight._m0[_1763].xyz));
    float _3752 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1857 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _3763 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _1858 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _1859 = dot(vec3(_557, _558, _559), vec3(_1851, _1852, _1853));
    float _3774 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _1862 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _1863 = dot(vec3(cbLight._m0[_1763].xyz), vec3(_1851, _1852, _1853));
    float _3785 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1867 = _1843 * _1843;
    float _1871 = ((_1862 * _1862) * (_1867 + (-1.0))) + 1.0;
    float _1882 = (exp2(log2(1.0 - (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1883 = 1.0 - _1843;
    float _1894 = (0.5 / (((_1858 * ((_1857 * _1883) + _1843)) + 9.9999999392252902907785028219223e-09) + (((_1858 * _1883) + _1843) * _1857))) * _1857;
    float _3796 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _1896 = (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_1867 / ((_1871 * _1871) * 3.141590118408203125));
    uint _1910 = _1763 + 9u;
    float _1921 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1797].w)) * _560) * 0.949999988079071044921875);
    float _1922 = _1921 * _1921;
    float _1923 = cbLight._m0[_1797].x + _584;
    float _1924 = cbLight._m0[_1797].y + _585;
    float _1925 = cbLight._m0[_1797].z + _586;
    float _1929 = inversesqrt(dot(vec3(_1923, _1924, _1925), vec3(_1923, _1924, _1925)));
    float _1930 = _1929 * _1923;
    float _1931 = _1929 * _1924;
    float _1932 = _1929 * _1925;
    float _1933 = dot(vec3(_557, _558, _559), vec3(cbLight._m0[_1797].xyz));
    float _3807 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1936 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _1937 = dot(vec3(_557, _558, _559), vec3(_1930, _1931, _1932));
    float _3818 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1940 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _1941 = dot(vec3(cbLight._m0[_1797].xyz), vec3(_1930, _1931, _1932));
    float _3829 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1945 = _1922 * _1922;
    float _1949 = ((_1940 * _1940) * (_1945 + (-1.0))) + 1.0;
    float _1958 = (exp2(log2(1.0 - (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1959 = 1.0 - _1922;
    float _1969 = (0.5 / (((_1858 * ((_1936 * _1959) + _1922)) + 9.9999999392252902907785028219223e-09) + (((_1858 * _1959) + _1922) * _1936))) * _1936;
    float _3840 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1971 = (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * (_1945 / ((_1949 * _1949) * 3.141590118408203125));
    float _1981 = (((_1958 * cbLight._m0[_1910].x) * _1971) * _1780) + ((((cbLight._m0[_1829].x * _1755) * _1882) * _1896) * _1793);
    float _1982 = (((_1958 * cbLight._m0[_1910].y) * _1971) * _1780) + ((((cbLight._m0[_1829].y * _1756) * _1882) * _1896) * _1793);
    float _1983 = (((_1958 * cbLight._m0[_1910].z) * _1971) * _1780) + ((((cbLight._m0[_1829].z * _1757) * _1882) * _1896) * _1793);
    float _2098;
    float _2100;
    float _2102;
    float _2104;
    float _2106;
    float _2108;
    if (_1761.y == 0u)
    {
        float _2038 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2039 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2038;
        float _2040 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2038;
        float _2041 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2038;
        uvec4 _2053 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2054 = _2053.x;
        uint _2065 = uint((float(_2053.y) * floor(float(uint(cbSceneParam._m0[85u].y * _612) / _2054))) + floor(float(uint(cbSceneParam._m0[85u].x * _611) / _2054)));
        float _2075 = (log2(_2041 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2076 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        uint _2079 = uint(isnan(14.0) ? _2076 : (isnan(_2076) ? 14.0 : min(_2076, 14.0)));
        uvec4 _2084 = texelFetch(g_lightClusterGridBuffer, int(((_2079 << 2u) + (_2065 << 6u)) >> 2u));
        uint _2085 = _2084.x;
        uint _2086 = _2053.z;
        float _2176;
        float _2178;
        float _2180;
        float _2182;
        float _2184;
        float _2186;
        if (((((1u << ((_2086 >> 4u) & 15u)) + 4294967295u) & _2085) == 0u) || ((_2086 & 240u) == 0u))
        {
            _2176 = 0.0;
            _2178 = 0.0;
            _2180 = 0.0;
            _2182 = 0.0;
            _2184 = 0.0;
            _2186 = 0.0;
        }
        else
        {
            float _2177;
            float _2179;
            float _2181;
            float _2183;
            float _2185;
            float _2187;
            float _2360 = 0.0;
            float _2361 = 0.0;
            float _2362 = 0.0;
            float _2363 = 0.0;
            float _2364 = 0.0;
            float _2365 = 0.0;
            uint _2366 = 0u;
            uint _2375;
            bool _2376;
            for (;;)
            {
                _2375 = texelFetch(g_lightClassification, int((((_2079 << 5u) + (_2065 << 9u)) + (_2366 << 2u)) >> 2u)).x;
                _2376 = _2375 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2376)
                {
                    frontier_phi_67_pred = _2363;
                    frontier_phi_67_pred_1 = _2362;
                    frontier_phi_67_pred_2 = _2361;
                    frontier_phi_67_pred_3 = _2360;
                    frontier_phi_67_pred_4 = _2364;
                    frontier_phi_67_pred_5 = _2365;
                }
                else
                {
                    float _2556;
                    float _2557;
                    float _2558;
                    float _2559;
                    float _2560;
                    float _2561;
                    uint _2562;
                    _2556 = _2360;
                    _2557 = _2361;
                    _2558 = _2362;
                    _2559 = _2363;
                    _2560 = _2364;
                    _2561 = _2365;
                    _2562 = _2375;
                    float _2457;
                    float _2458;
                    float _2459;
                    float _2460;
                    float _2461;
                    float _2462;
                    for (;;)
                    {
                        uint _2566 = uint(findLSB(_2562)) + (_2366 << 5u);
                        uint _2563 = (_2562 + 4294967295u) & _2562;
                        uint _2568 = _2566 * 48u;
                        vec4 _2582 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2568)).x, texelFetch(g_PointLightRenderingBuffer, int(_2568 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2568 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2568 + 3u)).x));
                        uint _2588 = (_2566 * 48u) + 4u;
                        vec4 _2601 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2588)).x, texelFetch(g_PointLightRenderingBuffer, int(_2588 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2588 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2588 + 3u)).x));
                        uint _2607 = (_2566 * 48u) + 8u;
                        vec3 _2618 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2607)).x, texelFetch(g_PointLightRenderingBuffer, int(_2607 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2607 + 2u)).x));
                        float _2622 = _2582.x - _2039;
                        float _2623 = _2582.y - _2040;
                        float _2624 = _2582.z - _2041;
                        float _2625 = dot(vec3(_2622, _2623, _2624), vec3(_2622, _2623, _2624));
                        float _2628 = inversesqrt(_2625);
                        float _2629 = _2628 * _2622;
                        float _2630 = _2628 * _2623;
                        float _2631 = _2628 * _2624;
                        float _2632 = dot(vec3(_632, _635, _638), vec3(_2629, _2630, _2631));
                        float _2637 = 1.0 - (_2625 * _2582.w);
                        float _3861 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
                        float _2638 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
                        float _2639 = sqrt(_2625) * _2601.w;
                        float _2642 = 1.39999997615814208984375 / (_2639 + 1.39999997615814208984375);
                        float _2643 = _2642 * _2642;
                        float _2646 = ((1.0 - _2643) * _2632) + _2643;
                        float _2649 = _2639 * _2639;
                        float _2653 = ((isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0))) * _2638) / ((_2649 * 0.699999988079071044921875) + 1.0);
                        float _2657 = (-0.0) - _2039;
                        float _2658 = (-0.0) - _2040;
                        float _2659 = (-0.0) - _2041;
                        float _2663 = inversesqrt(dot(vec3(_2657, _2658, _2659), vec3(_2657, _2658, _2659)));
                        float _2664 = _2663 * _2657;
                        float _2665 = _2663 * _2658;
                        float _2666 = _2663 * _2659;
                        float _2674 = exp2(log2(1.0 / ((_2649 * 3.5) + 5.0)) * 0.25);
                        float _2675 = 1.0 - _692;
                        float _2682 = sqrt(1.0 - ((1.0 - (_2675 * _2675)) * (1.0 - (_2674 * _2674))));
                        float _2683 = _2682 * _2682;
                        float _2684 = _2683 * _2683;
                        float _2685 = _2664 + _2629;
                        float _2686 = _2665 + _2630;
                        float _2687 = _2666 + _2631;
                        float _2691 = inversesqrt(dot(vec3(_2685, _2686, _2687), vec3(_2685, _2686, _2687)));
                        float _2695 = dot(vec3(_632, _635, _638), vec3(_2664, _2665, _2666));
                        float _3877 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
                        float _2698 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
                        float _2699 = dot(vec3(_632, _635, _638), vec3(_2691 * _2685, _2691 * _2686, _2691 * _2687));
                        float _3888 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
                        float _2702 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
                        float _2706 = ((_2702 * _2702) * (_2684 + (-1.0))) + 1.0;
                        float _2707 = _2642 * _2683;
                        float _2708 = _2707 * _2707;
                        float _2711 = ((1.0 - _2708) * _2632) + _2708;
                        float _3899 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
                        float _2712 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
                        float _2713 = 1.0 - _2683;
                        float _2723 = (0.5 / (((_2712 * ((_2698 * _2713) + _2683)) + 9.9999999392252902907785028219223e-09) + (((_2712 * _2713) + _2683) * _2698))) * _2712;
                        float _3910 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
                        float _2734 = (((_2684 * 3.1415927410125732421875) * (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) / ((_2706 * _2706) * ((_2649 * 2.1991131305694580078125) + 3.141590118408203125))) * _2638;
                        _2460 = (_2653 * _2601.x) + _2559;
                        _2461 = (_2653 * _2601.y) + _2560;
                        _2462 = (_2653 * _2601.z) + _2561;
                        _2457 = (_2734 * _2618.x) + _2556;
                        _2458 = (_2734 * _2618.y) + _2557;
                        _2459 = (_2734 * _2618.z) + _2558;
                        if (_2563 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2556 = _2457;
                            _2557 = _2458;
                            _2558 = _2459;
                            _2559 = _2460;
                            _2560 = _2461;
                            _2561 = _2462;
                            _2562 = _2563;
                        }
                    }
                    frontier_phi_67_pred = _2460;
                    frontier_phi_67_pred_1 = _2459;
                    frontier_phi_67_pred_2 = _2458;
                    frontier_phi_67_pred_3 = _2457;
                    frontier_phi_67_pred_4 = _2461;
                    frontier_phi_67_pred_5 = _2462;
                }
                _2183 = frontier_phi_67_pred;
                _2181 = frontier_phi_67_pred_1;
                _2179 = frontier_phi_67_pred_2;
                _2177 = frontier_phi_67_pred_3;
                _2185 = frontier_phi_67_pred_4;
                _2187 = frontier_phi_67_pred_5;
                uint _2367 = _2366 + 1u;
                if (_2367 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2360 = _2177;
                    _2361 = _2179;
                    _2362 = _2181;
                    _2363 = _2183;
                    _2364 = _2185;
                    _2365 = _2187;
                    _2366 = _2367;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2176 = _2177;
            _2178 = _2179;
            _2180 = _2181;
            _2182 = _2183;
            _2184 = _2185;
            _2186 = _2187;
        }
        uvec4 _2190 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2191 = _2190.z;
        uint _2193 = (_2191 >> 8u) & 15u;
        float _2328;
        float _2330;
        float _2332;
        float _2334;
        float _2336;
        float _2338;
        if (((4294967295u << _2193) & _2085) == 0u)
        {
            _2328 = _2176;
            _2330 = _2178;
            _2332 = _2180;
            _2334 = _2182;
            _2336 = _2184;
            _2338 = _2186;
        }
        else
        {
            float _2353 = inversesqrt(dot(vec3(_2039, _2040, _2041), vec3(_2039, _2040, _2041)));
            float _2354 = _2353 * _2039;
            float _2355 = _2353 * _2040;
            float _2356 = _2353 * _2041;
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_2193 < ((_2191 >> 12u) & 15u))
            {
                float _2329;
                float _2331;
                float _2333;
                float _2335;
                float _2337;
                float _2339;
                float _2539 = _2176;
                float _2540 = _2178;
                float _2541 = _2180;
                float _2542 = _2182;
                float _2543 = _2184;
                float _2544 = _2186;
                uint _2545 = _2193;
                uint _2554;
                bool _2555;
                for (;;)
                {
                    _2554 = texelFetch(g_lightClassification, int((((_2079 << 5u) + (_2065 << 9u)) + (_2545 << 2u)) >> 2u)).x;
                    _2555 = _2554 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2555)
                    {
                        frontier_phi_81_pred = _2542;
                        frontier_phi_81_pred_1 = _2541;
                        frontier_phi_81_pred_2 = _2540;
                        frontier_phi_81_pred_3 = _2539;
                        frontier_phi_81_pred_4 = _2544;
                        frontier_phi_81_pred_5 = _2543;
                    }
                    else
                    {
                        float _2769;
                        float _2770;
                        float _2771;
                        float _2772;
                        float _2773;
                        float _2774;
                        float _3062;
                        float _3063;
                        float _3064;
                        float _3065;
                        float _3066;
                        float _3067;
                        float _2782 = _2539;
                        float _2783 = _2540;
                        float _2784 = _2541;
                        float _2785 = _2542;
                        float _2786 = _2543;
                        float _2787 = _2544;
                        uint _2788 = _2554;
                        uint _2789;
                        vec4 _2814;
                        float _2815;
                        vec4 _2830;
                        vec3 _2842;
                        vec4 _2857;
                        vec4 _2872;
                        float _2918;
                        bool _2919;
                        for (;;)
                        {
                            uint _2799 = ((_2545 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2788));
                            _2789 = (_2788 + 4294967295u) & _2788;
                            uint _2801 = _2799 * 40u;
                            _2814 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2801)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 3u)).x));
                            _2815 = _2814.w;
                            uint _2817 = (_2799 * 40u) + 4u;
                            _2830 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2817)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 3u)).x));
                            uint _2832 = (_2799 * 40u) + 8u;
                            _2842 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2832)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 2u)).x));
                            uint _2844 = (_2799 * 40u) + 16u;
                            _2857 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2844)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 3u)).x));
                            uint _2859 = (_2799 * 40u) + 20u;
                            _2872 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2859)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 3u)).x));
                            uint _2874 = (_2799 * 40u) + 24u;
                            vec4 _2887 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2874)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 3u)).x));
                            uint _2893 = (_2799 * 40u) + 28u;
                            vec4 _2906 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2893)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 3u)).x));
                            _2918 = fma(_2041, _2906.z, fma(_2040, _2906.y, _2906.x * _2039)) + _2906.w;
                            _2919 = !((fma(_2041, _2887.z, fma(_2040, _2887.y, _2887.x * _2039)) + _2887.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_2919)
                            {
                                float _2946 = _2814.x - _2039;
                                float _2947 = _2814.y - _2040;
                                float _2948 = _2814.z - _2041;
                                float _2949 = dot(vec3(_2946, _2947, _2948), vec3(_2946, _2947, _2948));
                                float _2952 = inversesqrt(_2949);
                                float _2953 = _2952 * _2946;
                                float _2954 = _2952 * _2947;
                                float _2955 = _2952 * _2948;
                                float _2959 = 1.0 - (_2949 / (_2815 * _2815));
                                float _3921 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
                                float _2960 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
                                float _2964 = sqrt(_2949) * _2830.w;
                                float _2966 = 1.39999997615814208984375 / (_2964 + 1.39999997615814208984375);
                                float _2967 = _2966 * _2966;
                                float _2970 = ((1.0 - _2967) * dot(vec3(_2953, _2954, _2955), vec3(_632, _635, _638))) + _2967;
                                float _2973 = _2964 * _2964;
                                float _2977 = (fma(_2041, _2857.z, fma(_2040, _2857.y, _2857.x * _2039)) + _2857.w) / _2918;
                                float _2978 = (fma(_2041, _2872.z, fma(_2040, _2872.y, _2872.x * _2039)) + _2872.w) / _2918;
                                float _2982 = 1.0 - dot(vec2(_2977, _2978), vec2(_2977, _2978));
                                float _3937 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                                float _2983 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
                                float _2984 = _2983 * (((isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0))) * _2960) / ((_2973 * 0.699999988079071044921875) + 1.0));
                                float _2996 = exp2(log2(1.0 / ((_2973 * 3.5) + 5.0)) * 0.25);
                                float _2997 = 1.0 - _692;
                                float _3004 = sqrt(1.0 - ((1.0 - (_2997 * _2997)) * (1.0 - (_2996 * _2996))));
                                float _3005 = _3004 * _3004;
                                float _3006 = _3005 * _3005;
                                float _3007 = _2953 - _2354;
                                float _3008 = _2954 - _2355;
                                float _3009 = _2955 - _2356;
                                float _3013 = inversesqrt(dot(vec3(_3007, _3008, _3009), vec3(_3007, _3008, _3009)));
                                float _3017 = dot(vec3(_632, _635, _638), vec3((-0.0) - _2354, (-0.0) - _2355, (-0.0) - _2356));
                                float _3948 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                                float _3020 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
                                float _3021 = dot(vec3(_632, _635, _638), vec3(_3013 * _3007, _3013 * _3008, _3013 * _3009));
                                float _3959 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                                float _3024 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
                                float _3028 = ((_3024 * _3024) * (_3006 + (-1.0))) + 1.0;
                                float _3029 = _2966 * _3005;
                                float _3030 = _3029 * _3029;
                                float _3036 = ((1.0 - _3030) * dot(vec3(_632, _635, _638), vec3(_2953, _2954, _2955))) + _3030;
                                float _3970 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                                float _3037 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
                                float _3038 = 1.0 - _3005;
                                float _3048 = (0.5 / (((_3037 * ((_3020 * _3038) + _3005)) + 9.9999999392252902907785028219223e-09) + (((_3037 * _3038) + _3005) * _3020))) * _3037;
                                float _3981 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                                float _3058 = (_2983 * _2960) * (((_3006 * 3.1415927410125732421875) * (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0)))) / ((_3028 * _3028) * ((_2973 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _2984 * _2830.x;
                                frontier_phi_87_pred_1 = _3058 * _2842.z;
                                frontier_phi_87_pred_2 = _3058 * _2842.y;
                                frontier_phi_87_pred_3 = _3058 * _2842.x;
                                frontier_phi_87_pred_4 = _2984 * _2830.z;
                                frontier_phi_87_pred_5 = _2984 * _2830.y;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3065 = frontier_phi_87_pred;
                            _3064 = frontier_phi_87_pred_1;
                            _3063 = frontier_phi_87_pred_2;
                            _3062 = frontier_phi_87_pred_3;
                            _3067 = frontier_phi_87_pred_4;
                            _3066 = frontier_phi_87_pred_5;
                            _2772 = _3065 + _2785;
                            _2773 = _3066 + _2786;
                            _2774 = _3067 + _2787;
                            _2769 = _3062 + _2782;
                            _2770 = _3063 + _2783;
                            _2771 = _3064 + _2784;
                            if (_2789 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2782 = _2769;
                                _2783 = _2770;
                                _2784 = _2771;
                                _2785 = _2772;
                                _2786 = _2773;
                                _2787 = _2774;
                                _2788 = _2789;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2772;
                        frontier_phi_81_pred_1 = _2771;
                        frontier_phi_81_pred_2 = _2770;
                        frontier_phi_81_pred_3 = _2769;
                        frontier_phi_81_pred_4 = _2774;
                        frontier_phi_81_pred_5 = _2773;
                    }
                    _2335 = frontier_phi_81_pred;
                    _2333 = frontier_phi_81_pred_1;
                    _2331 = frontier_phi_81_pred_2;
                    _2329 = frontier_phi_81_pred_3;
                    _2339 = frontier_phi_81_pred_4;
                    _2337 = frontier_phi_81_pred_5;
                    uint _2546 = _2545 + 1u;
                    if (_2546 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2539 = _2329;
                        _2540 = _2331;
                        _2541 = _2333;
                        _2542 = _2335;
                        _2543 = _2337;
                        _2544 = _2339;
                        _2545 = _2546;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2339;
                frontier_phi_56_57_ladder_1 = _2337;
                frontier_phi_56_57_ladder_2 = _2335;
                frontier_phi_56_57_ladder_3 = _2331;
                frontier_phi_56_57_ladder_4 = _2329;
                frontier_phi_56_57_ladder_5 = _2333;
            }
            else
            {
                frontier_phi_56_57_ladder = _2186;
                frontier_phi_56_57_ladder_1 = _2184;
                frontier_phi_56_57_ladder_2 = _2182;
                frontier_phi_56_57_ladder_3 = _2178;
                frontier_phi_56_57_ladder_4 = _2176;
                frontier_phi_56_57_ladder_5 = _2180;
            }
            _2328 = frontier_phi_56_57_ladder_4;
            _2330 = frontier_phi_56_57_ladder_3;
            _2332 = frontier_phi_56_57_ladder_5;
            _2334 = frontier_phi_56_57_ladder_2;
            _2336 = frontier_phi_56_57_ladder_1;
            _2338 = frontier_phi_56_57_ladder;
        }
        float _2343 = isnan(1.0) ? _676 : (isnan(_676) ? 1.0 : min(_676, 1.0));
        _2098 = (_2343 * _2334) + _1825;
        _2100 = (_2343 * _2336) + _1826;
        _2102 = (_2343 * _2338) + _1827;
        _2104 = ((_2328 * 0.039999999105930328369140625) * _2343) + _1981;
        _2106 = ((_2330 * 0.039999999105930328369140625) * _2343) + _1982;
        _2108 = ((_2332 * 0.039999999105930328369140625) * _2343) + _1983;
    }
    else
    {
        _2098 = _1825;
        _2100 = _1826;
        _2102 = _1827;
        _2104 = _1981;
        _2106 = _1982;
        _2108 = _1983;
    }
    float _3997 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _4008 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _4019 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _2125 = ((isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_2098 + ((isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0))) * _676))) + ((_2104 + ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _1513)) * cbPerFrame._m0[3u].x);
    float _2126 = ((isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_2100 + ((isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0))) * _676))) + ((_2106 + ((isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))) * _1513)) * cbPerFrame._m0[3u].x);
    float _2127 = ((isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_2102 + ((isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))) * _676))) + ((_2108 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _1513)) * cbPerFrame._m0[3u].x);
    float _2128 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2129 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2130 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    uint _2131 = _651 + 6u;
    float _2139 = _611 / cbSceneParam._m0[86u].x;
    float _2140 = _612 / cbSceneParam._m0[86u].y;
    vec4 _2154 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2139, _2140, (log2((isnan(cbSceneParam._m0[77u].w) ? _579 : (isnan(_579) ? cbSceneParam._m0[77u].w : min(_579, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2156 = _2154.x;
    float _2157 = _2154.y;
    float _2158 = _2154.z;
    float _2159 = _2154.w;
    float _2239;
    float _2241;
    float _2243;
    float _2245;
    if (_579 > cbSceneParam._m0[78u].w)
    {
        float _2201 = isnan(_579) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _579 : min(cbSceneParam._m0[80u].w, _579));
        float _2202 = _2201 / _579;
        float _2213 = _2202 * _265;
        float _2214 = _266 * _2202;
        float _2215 = (-0.0) - _2214;
        float _2216 = _2202 * _267;
        float _2218 = (cbSceneParam._m0[77u].w * _2215) / _2201;
        float _2219 = _2218 + cbSceneParam._m0[79u].w;
        float _2220 = cbSceneParam._m0[79u].w - _2214;
        float _2226 = sqrt(((_2213 * _2213) + (_2214 * _2214)) + (_2216 * _2216));
        float _2229 = (1.0 - (cbSceneParam._m0[77u].w / _2201)) * _2226;
        float _2235 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2237 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2470;
        if (abs((_2215 - _2218) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2470 = ((((_2219 > 0.0) ? exp2(_2235 * _2219) : (2.0 - exp2(_2237 * _2219))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2229;
        }
        else
        {
            float _2389 = 1.0 / cbSceneParam._m0[80u].x;
            float _2390 = isnan(_2220) ? _2219 : (isnan(_2219) ? _2220 : max(_2219, _2220));
            float _2391 = isnan(_2220) ? _2219 : (isnan(_2219) ? _2220 : min(_2219, _2220));
            float _2400 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : min(_2390, 0.0));
            float _2401 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : min(_2391, 0.0));
            _2470 = ((abs(_2226 / _2215) * cbSceneParam._m0[80u].y) * ((((_2400 - _2401) * 2.0) - ((exp2(_2235 * (isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0)))) - exp2(_2235 * (isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0))))) * _2389)) - ((exp2(_2237 * _2400) - exp2(_2237 * _2401)) * _2389))) + (_2229 * cbSceneParam._m0[80u].z);
        }
        vec4 _2472 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2139, _2140, 1.0), 0.0);
        float _2481 = exp2((_2470 * (-1.44269502162933349609375)) * (1.0 - _2472.w));
        float _2482 = log2(_2481);
        float _2498 = log2(_2159);
        _2239 = (exp2(_2498 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2482 * cbSceneParam._m0[78u].x)) * _2472.x) / cbSceneParam._m0[78u].x)) + _2156;
        _2241 = (exp2(_2498 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2482 * cbSceneParam._m0[78u].y)) * _2472.y) / cbSceneParam._m0[78u].y)) + _2157;
        _2243 = (exp2(_2498 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2482 * cbSceneParam._m0[78u].z)) * _2472.z) / cbSceneParam._m0[78u].z)) + _2158;
        _2245 = _2481 * _2159;
    }
    else
    {
        _2239 = _2156;
        _2241 = _2157;
        _2243 = _2158;
        _2245 = _2159;
    }
    bool _2508;
    vec4 _2255;
    vec4 _2277;
    float _2279;
    float _2283;
    float _2284;
    float _2285;
    float _2286;
    bool _2296;
    for (;;)
    {
        _2255 = cbMatDynParam._m0[0u];
        float _2257 = roundEven(_2255.y);
        bool _2258 = _2257 == 3.0;
        float _2259 = log2(_2245);
        float _2266 = exp2(_2259 * cbSceneParam._m0[78u].x) * _2128;
        float _2267 = exp2(_2259 * cbSceneParam._m0[78u].y) * _2129;
        float _2268 = exp2(_2259 * cbSceneParam._m0[78u].z) * _2130;
        float _2275 = _593 + (-0.5);
        _2277 = cbMtdParam._m0[1u];
        _2279 = _2277.y * _2275;
        float _2282 = (_2257 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2283 = _2282 * (_2258 ? _2266 : (_2266 + (cbSceneParam._m0[72u].w * _2239)));
        _2284 = _2282 * (_2258 ? _2267 : (_2267 + (cbSceneParam._m0[72u].w * _2241)));
        _2285 = _2282 * (_2258 ? _2268 : (_2268 + (cbSceneParam._m0[72u].w * _2243)));
        _2286 = _2275 * 0.999000012874603271484375;
        _2296 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2296)
        {
            if ((cbInstanceData._m0[_651 + 7u].x + _2286) < 0.5)
            {
                _2508 = true;
                break;
            }
        }
        uint _2424 = _652 + uint(_2255.w);
        if ((cbInstanceData._m0[_2424].w < 1.0) && ((cbInstanceData._m0[_2424].w + _2286) < 0.5))
        {
            _2508 = true;
            break;
        }
        if ((_2279 + 1.0) < _2277.x)
        {
            _2508 = true;
            break;
        }
        _2508 = false;
        break;
    }
    float _2739;
    if (_2508)
    {
        discard_state = true;
        _2739 = 0.0;
    }
    else
    {
        _2739 = cbInstanceData._m0[_2131].w;
    }
    SV_Target.x = _2283;
    SV_Target.y = _2284;
    SV_Target.z = _2285;
    SV_Target.w = _2739;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2131].w;
    discard_exit();
}


