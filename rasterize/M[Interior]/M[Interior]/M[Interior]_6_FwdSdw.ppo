#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D M_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1261;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _200 = _199 * _192;
    float _201 = _199 * _193;
    float _202 = _199 * _194;
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = _206 * NORMAL.x;
    float _208 = _206 * NORMAL.y;
    float _209 = _206 * NORMAL.z;
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214 = _213 * TANGENT.x;
    float _215 = _213 * TANGENT.y;
    float _216 = _213 * TANGENT.z;
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    vec4 _286 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _289 = _286.x;
    vec4 _307 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _324 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _289) + cbMtdParam._m0[12u].x) * _307.x;
    float _326 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _289) + cbMtdParam._m0[12u].y) * _307.y;
    float _328 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _289) + cbMtdParam._m0[12u].z) * _307.z;
    vec4 _349 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _385 = cbMtdParam._m0[21u].w + _271;
    float _386 = cbMtdParam._m0[22u].x + _272;
    float _387 = cbMtdParam._m0[22u].y + _273;
    float _401 = (-0.0) - dot(vec3(_385, _386, _387), vec3(_200, _201, _202));
    float _402 = (-0.0) - dot(vec3(_385, _386, _387), vec3(_214, _215, _216));
    float _403 = (-0.0) - dot(vec3(_385, _386, _387), vec3((-0.0) - _207, (-0.0) - _208, (-0.0) - _209));
    float _407 = inversesqrt(dot(vec3(_401, _402, _403), vec3(_401, _402, _403)));
    float _410 = _407 * _403;
    float _411 = (_407 * _401) + ((cbMtdParam._m0[19u].w * _289) * ((_349.x * 2.0) + (-1.0)));
    float _412 = (_407 * _402) + ((cbMtdParam._m0[20u].x * _289) * ((_349.y * 2.0) + (-1.0)));
    float _413 = _411 * cbMtdParam._m0[18u].z;
    float _414 = _412 * cbMtdParam._m0[18u].y;
    float _415 = fract(TEXCOORD.x);
    float _416 = fract(TEXCOORD.y);
    float _422;
    if (_413 > 0.0)
    {
        _422 = (1.0 - _415) / _413;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_413 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _415) / _413;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _422 = frontier_phi_3_2_ladder;
    }
    float _430;
    if (_414 > 0.0)
    {
        _430 = (1.0 - _416) / _414;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_414 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _416) / _414;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _430 = frontier_phi_7_6_ladder;
    }
    bool _432 = _410 > 0.0;
    float _434 = _432 ? (cbMtdParam._m0[15u].x / _410) : 5000.0;
    float _435 = isnan(_430) ? _422 : (isnan(_422) ? _430 : min(_422, _430));
    float _436 = isnan(_434) ? _435 : (isnan(_435) ? _434 : min(_435, _434));
    float _440 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _441 = _415 + (-0.5);
    float _444 = _416 + (-0.5);
    float _447 = ((_436 * _410) + _440) / _440;
    vec4 _471 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_441 + (_436 * _413)) / _447) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_444 + (_436 * _414)) / _447) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _484 = (_471.x * _289) * cbMtdParam._m0[9u].x;
    float _485 = (_471.y * _289) * cbMtdParam._m0[9u].y;
    float _486 = (_471.z * _289) * cbMtdParam._m0[9u].z;
    float _504 = _411 * cbMtdParam._m0[20u].z;
    float _505 = _412 * cbMtdParam._m0[20u].y;
    bool _506 = _504 > 0.0;
    float _511;
    if (_506)
    {
        _511 = (1.0 - _415) / _504;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_504 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _415) / _504;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _511 = frontier_phi_11_10_ladder;
    }
    bool _513 = _505 > 0.0;
    float _518;
    if (_513)
    {
        _518 = (1.0 - _416) / _505;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_505 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _416) / _505;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _518 = frontier_phi_15_14_ladder;
    }
    float _521 = _432 ? (cbMtdParam._m0[16u].x / _410) : 5000.0;
    float _522 = isnan(_518) ? _511 : (isnan(_511) ? _518 : min(_511, _518));
    float _523 = isnan(_521) ? _522 : (isnan(_522) ? _521 : min(_522, _521));
    float _527 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _531 = ((_523 * _410) + _527) / _527;
    float _536 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _538 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _554 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_441 + (_523 * _504)) / _531) + 0.5) + _536) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_444 + (_523 * _505)) / _531) + 0.5) + _538) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _569;
    if (_506)
    {
        _569 = (1.0 - _415) / _504;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_504 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _415) / _504;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _569 = frontier_phi_19_18_ladder;
    }
    float _575;
    if (_513)
    {
        _575 = (1.0 - _416) / _505;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_505 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _416) / _505;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _575 = frontier_phi_23_22_ladder;
    }
    float _577 = isnan(_575) ? _569 : (isnan(_569) ? _575 : min(_569, _575));
    float _578 = isnan(_521) ? _577 : (isnan(_577) ? _521 : min(_577, _521));
    float _585 = ((_578 * _410) + _527) / _527;
    vec4 _606 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_441 + (_578 * _504)) / _585) + 0.5) + _536) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_444 + (_578 * _505)) / _585) + 0.5) + _538) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _608 = _606.x;
    float _618 = (((((cbMtdParam._m0[10u].x * _289) * _554.x) - _484) * _289) * _608) + _484;
    float _619 = (((((cbMtdParam._m0[10u].y * _289) * _554.y) - _485) * _289) * _608) + _485;
    float _620 = (((((cbMtdParam._m0[10u].z * _289) * _554.z) - _486) * _289) * _608) + _486;
    float _634 = _411 * cbMtdParam._m0[21u].x;
    float _635 = _412 * cbMtdParam._m0[20u].w;
    bool _636 = _634 > 0.0;
    float _641;
    if (_636)
    {
        _641 = (1.0 - _415) / _634;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_634 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _415) / _634;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _641 = frontier_phi_27_26_ladder;
    }
    bool _643 = _635 > 0.0;
    float _648;
    if (_643)
    {
        _648 = (1.0 - _416) / _635;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_635 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _416) / _635;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _648 = frontier_phi_31_30_ladder;
    }
    float _651 = _432 ? (cbMtdParam._m0[17u].z / _410) : 5000.0;
    float _652 = isnan(_648) ? _641 : (isnan(_641) ? _648 : min(_641, _648));
    float _653 = isnan(_651) ? _652 : (isnan(_652) ? _651 : min(_652, _651));
    float _657 = cbMtdParam._m0[17u].z * cbMtdParam._m0[15u].z;
    float _661 = ((_653 * _410) + _657) / _657;
    float _666 = cbMtdParam._m0[17u].y - cbMtdParam._m0[21u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    float _668 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    vec4 _685 = texture(sampler2D(M_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_441 + (_653 * _634)) / _661) + 0.5) + _666) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_444 + (_653 * _635)) / _661) + 0.5) + _668) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[7u].w));
    float _700;
    if (_636)
    {
        _700 = (1.0 - _415) / _634;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_634 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _415) / _634;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _700 = frontier_phi_35_34_ladder;
    }
    float _706;
    if (_643)
    {
        _706 = (1.0 - _416) / _635;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_635 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _416) / _635;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _706 = frontier_phi_39_38_ladder;
    }
    float _708 = isnan(_706) ? _700 : (isnan(_700) ? _706 : min(_700, _706));
    float _709 = isnan(_651) ? _708 : (isnan(_708) ? _651 : min(_708, _651));
    float _716 = ((_709 * _410) + _657) / _657;
    vec4 _736 = texture(sampler2D(M_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_441 + (_709 * _634)) / _716) + 0.5) + _666) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_444 + (_709 * _635)) / _716) + 0.5) + _668) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[8u].w));
    float _738 = _736.x;
    vec4 _762 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _766 = _762.z;
    float _769 = (_762.x * 2.0) + (-1.0);
    float _770 = (_762.y * 2.0) + (-1.0);
    float _771 = dot(vec2(_769, _770), vec2(_769, _770));
    float _3714 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _776 = sqrt(1.0 - (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))));
    float _779 = fma(_776, _207, fma(_770, _214, _769 * _200));
    float _782 = fma(_776, _208, fma(_770, _215, _769 * _201));
    float _785 = fma(_776, _209, fma(_770, _216, _769 * _202));
    float _789 = inversesqrt(dot(vec3(_779, _782, _785), vec3(_779, _782, _785)));
    float _790 = _789 * _779;
    float _791 = _789 * _782;
    float _792 = _789 * _785;
    float _3725 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _793 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _3736 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _3747 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _3758 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _812 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _816 = inversesqrt(dot(vec3(_271, _272, _273), vec3(_271, _272, _273)));
    float _817 = _271 * _816;
    float _818 = _272 * _816;
    float _819 = _273 * _816;
    float _825 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _826 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _845 = fma(_792, cbSceneParam._m0[5u].z, fma(_791, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _790));
    float _848 = fma(_792, cbSceneParam._m0[6u].z, fma(_791, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _790));
    float _851 = fma(_792, cbSceneParam._m0[7u].z, fma(_791, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _790));
    uint _864 = uint(roundEven(NORMAL.w)) * 13u;
    uint _866 = _864 + 9u;
    uint _867 = _866 + uint(cbMatDynParam._m0[0u].w);
    float _873 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0)))) * cbInstanceData._m0[_867].x;
    float _874 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)))) * cbInstanceData._m0[_867].y;
    float _875 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0)))) * cbInstanceData._m0[_867].z;
    float _3769 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _876 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _3780 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _877 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _3791 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _878 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    vec4 _887 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _825, cbSceneParam._m0[86u].y * _826));
    float _890 = _887.x * TEXCOORD.z;
    float _891 = dot(vec3(_790, _791, _792), vec3(_817, _818, _819));
    float _894 = _891 * 2.0;
    float _898 = (_894 * _790) - _817;
    float _899 = (_894 * _791) - _818;
    float _900 = (_894 * _792) - _819;
    float _904 = abs(dot(vec3(_817, _818, _819), vec3(_790, _791, _792)));
    float _3802 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _906 = sqrt(_793);
    float _919 = exp2((_906 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_906 * 3.0));
    float _951 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _955 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _959 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1260;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _987 = fma(_959, cbModelParam._m0[26u].z, fma(_955, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _951));
        float _991 = fma(_959, cbModelParam._m0[27u].z, fma(_955, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _951));
        float _995 = fma(_959, cbModelParam._m0[28u].z, fma(_955, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _951));
        float _1018 = _951 + _790;
        float _1019 = _955 + _791;
        float _1020 = _959 + _792;
        float _1030 = fma(_1020, cbModelParam._m0[26u].z, fma(_1019, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1018)) - _987;
        float _1031 = fma(_1020, cbModelParam._m0[27u].z, fma(_1019, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1018)) - _991;
        float _1032 = fma(_1020, cbModelParam._m0[28u].z, fma(_1019, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1018)) - _995;
        float _1036 = inversesqrt(dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032)));
        float _1049 = ((_1036 * _1030) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_987 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1050 = ((_1036 * _1031) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_991 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1051 = ((_1036 * _1032) / cbModelParam._m0[34u].z) + ((((((_995 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1049, _1050, _1051), 0.0);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1049, _1050, _1051), 0.0);
        vec4 _1068 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1049, _1050, _1051), 0.0);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1049, _1050, _1051), 0.0);
        float _1088 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1054.x + (-0.5));
        float _1090 = _1088 * (_1054.y + (-0.5));
        float _1091 = _1088 * (_1054.z + (-0.5));
        float _1098 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1061.x + (-0.5));
        float _1100 = _1098 * (_1061.y + (-0.5));
        float _1101 = _1098 * (_1061.z + (-0.5));
        float _1108 = exp2((_1068.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1068.x + (-0.5));
        float _1110 = _1108 * (_1068.y + (-0.5));
        float _1111 = _1108 * (_1068.z + (-0.5));
        float _1118 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1075.x + (-0.5));
        float _1120 = _1118 * (_1075.y + (-0.5));
        float _1121 = _1118 * (_1075.z + (-0.5));
        float _1122 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1123 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1125 = _1089 * 0.5;
        float _1126 = _1099 * 0.5;
        float _1127 = _1109 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1142 = (dot(vec3(_790, _791, _792), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _3828 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1152 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1122 + 9.9999997473787516355514526367188e-06);
        float _3839 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _3850 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1154 + 1.0))) + _1159) * _1122;
        float _1169 = _1090 * 0.5;
        float _1170 = _1100 * 0.5;
        float _1171 = _1110 * 0.5;
        float _1172 = dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171));
        float _1177 = (_1172 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1172);
        float _1185 = (dot(vec3(_790, _791, _792), vec3(_1177 * _1169, _1177 * _1170, _1177 * _1171)) + 1.0) * 0.5;
        float _3861 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1194 = sqrt(((_1170 * _1170) + (_1169 * _1169)) + (_1171 * _1171)) / (_1123 + 9.9999997473787516355514526367188e-06);
        float _3872 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1196 = _1195 * 2.0;
        float _1200 = (1.0 - _1195) / (_1195 + 1.0);
        float _3883 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1210 = ((((1.0 - _1201) * (_1196 + 2.0)) * exp2(log2(isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_1196 + 1.0))) + _1201) * _1123;
        float _1211 = _1091 * 0.5;
        float _1212 = _1101 * 0.5;
        float _1213 = _1111 * 0.5;
        float _1214 = dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213));
        float _1219 = (_1214 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1214);
        float _1227 = (dot(vec3(_790, _791, _792), vec3(_1219 * _1211, _1219 * _1212, _1219 * _1213)) + 1.0) * 0.5;
        float _3894 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1236 = sqrt(((_1212 * _1212) + (_1211 * _1211)) + (_1213 * _1213)) / (_1124 + 9.9999997473787516355514526367188e-06);
        float _3905 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1238 = _1237 * 2.0;
        float _1242 = (1.0 - _1237) / (_1237 + 1.0);
        float _3916 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1252 = ((((1.0 - _1243) * (_1238 + 2.0)) * exp2(log2(isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_1238 + 1.0))) + _1243) * _1124;
        _1260 = _1091;
        _1262 = _1090;
        _1263 = _1089;
        _1264 = _1101;
        _1265 = _1100;
        _1266 = _1099;
        _1267 = _1111;
        _1268 = _1110;
        _1269 = _1109;
        _1270 = _1124;
        _1271 = _1123;
        _1272 = _1122;
        _1273 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
        _1274 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)));
        _1275 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)));
    }
    else
    {
        _1260 = _1261;
        _1262 = _1261;
        _1263 = _1261;
        _1264 = _1261;
        _1265 = _1261;
        _1266 = _1261;
        _1267 = _1261;
        _1268 = _1261;
        _1269 = _1261;
        _1270 = _1261;
        _1271 = _1261;
        _1272 = _1261;
        _1273 = 0.0;
        _1274 = 0.0;
        _1275 = 0.0;
    }
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1301 = fma(_959, cbModelParam._m0[30u].z, fma(_955, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _951));
        float _1305 = fma(_959, cbModelParam._m0[31u].z, fma(_955, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _951));
        float _1309 = fma(_959, cbModelParam._m0[32u].z, fma(_955, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _951));
        float _1332 = _951 + _790;
        float _1333 = _955 + _791;
        float _1334 = _959 + _792;
        float _1344 = fma(_1334, cbModelParam._m0[30u].z, fma(_1333, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1332)) - _1301;
        float _1345 = fma(_1334, cbModelParam._m0[31u].z, fma(_1333, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1332)) - _1305;
        float _1346 = fma(_1334, cbModelParam._m0[32u].z, fma(_1333, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1332)) - _1309;
        float _1350 = inversesqrt(dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346)));
        float _1363 = ((_1350 * _1344) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1301 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1364 = ((_1350 * _1345) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1305 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1365 = ((_1350 * _1346) / cbModelParam._m0[35u].z) + ((((((_1309 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1367 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        vec4 _1374 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        vec4 _1381 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        vec4 _1388 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        float _1400 = exp2((_1367.w + (-0.5)) * 20.0) * 2.0;
        float _1401 = _1400 * (_1367.x + (-0.5));
        float _1402 = _1400 * (_1367.y + (-0.5));
        float _1403 = _1400 * (_1367.z + (-0.5));
        float _1410 = exp2((_1374.w + (-0.5)) * 20.0) * 2.0;
        float _1411 = _1410 * (_1374.x + (-0.5));
        float _1412 = _1410 * (_1374.y + (-0.5));
        float _1413 = _1410 * (_1374.z + (-0.5));
        float _1420 = exp2((_1381.w + (-0.5)) * 20.0) * 2.0;
        float _1421 = _1420 * (_1381.x + (-0.5));
        float _1422 = _1420 * (_1381.y + (-0.5));
        float _1423 = _1420 * (_1381.z + (-0.5));
        float _1430 = exp2((_1388.w + (-0.5)) * 20.0) * 2.0;
        float _1431 = _1430 * (_1388.x + (-0.5));
        float _1432 = _1430 * (_1388.y + (-0.5));
        float _1433 = _1430 * (_1388.z + (-0.5));
        float _1434 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1435 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1436 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1437 = _1401 * 0.5;
        float _1438 = _1411 * 0.5;
        float _1439 = _1421 * 0.5;
        float _1440 = dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439));
        float _1445 = (_1440 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1440);
        float _1453 = (dot(vec3(_790, _791, _792), vec3(_1445 * _1437, _1445 * _1438, _1445 * _1439)) + 1.0) * 0.5;
        float _3957 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1462 = sqrt(((_1438 * _1438) + (_1437 * _1437)) + (_1439 * _1439)) / (_1434 + 9.9999997473787516355514526367188e-06);
        float _3968 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1464 = _1463 * 2.0;
        float _1468 = (1.0 - _1463) / (_1463 + 1.0);
        float _3979 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1478 = ((((1.0 - _1469) * (_1464 + 2.0)) * exp2(log2(isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_1464 + 1.0))) + _1469) * _1434;
        float _1479 = _1402 * 0.5;
        float _1480 = _1412 * 0.5;
        float _1481 = _1422 * 0.5;
        float _1482 = dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481));
        float _1487 = (_1482 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1482);
        float _1495 = (dot(vec3(_790, _791, _792), vec3(_1487 * _1479, _1487 * _1480, _1487 * _1481)) + 1.0) * 0.5;
        float _3990 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1504 = sqrt(((_1480 * _1480) + (_1479 * _1479)) + (_1481 * _1481)) / (_1435 + 9.9999997473787516355514526367188e-06);
        float _4001 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1506 = _1505 * 2.0;
        float _1510 = (1.0 - _1505) / (_1505 + 1.0);
        float _4012 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1520 = ((((1.0 - _1511) * (_1506 + 2.0)) * exp2(log2(isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1506 + 1.0))) + _1511) * _1435;
        float _1521 = _1403 * 0.5;
        float _1522 = _1413 * 0.5;
        float _1523 = _1423 * 0.5;
        float _1524 = dot(vec3(_1521, _1522, _1523), vec3(_1521, _1522, _1523));
        float _1529 = (_1524 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1524);
        float _1537 = (dot(vec3(_790, _791, _792), vec3(_1529 * _1521, _1529 * _1522, _1529 * _1523)) + 1.0) * 0.5;
        float _4023 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1546 = sqrt(((_1522 * _1522) + (_1521 * _1521)) + (_1523 * _1523)) / (_1436 + 9.9999997473787516355514526367188e-06);
        float _4034 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1548 = _1547 * 2.0;
        float _1552 = (1.0 - _1547) / (_1547 + 1.0);
        float _4045 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1562 = ((((1.0 - _1553) * (_1548 + 2.0)) * exp2(log2(isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_1548 + 1.0))) + _1553) * _1436;
        _1570 = _1403;
        _1571 = _1402;
        _1572 = _1401;
        _1573 = _1413;
        _1574 = _1412;
        _1575 = _1411;
        _1576 = _1423;
        _1577 = _1422;
        _1578 = _1421;
        _1579 = _1436;
        _1580 = _1435;
        _1581 = _1434;
        _1582 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)));
        _1583 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)));
        _1584 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)));
    }
    else
    {
        _1570 = _1261;
        _1571 = _1261;
        _1572 = _1261;
        _1573 = _1261;
        _1574 = _1261;
        _1575 = _1261;
        _1576 = _1261;
        _1577 = _1261;
        _1578 = _1261;
        _1579 = _1261;
        _1580 = _1261;
        _1581 = _1261;
        _1582 = 0.0;
        _1583 = 0.0;
        _1584 = 0.0;
    }
    float _1594 = (cbModelParam._m0[1u].x * (_1582 - _1273)) + _1273;
    float _1595 = (cbModelParam._m0[1u].x * (_1583 - _1274)) + _1274;
    float _1596 = (cbModelParam._m0[1u].x * (_1584 - _1275)) + _1275;
    float _1617 = fma(_1596, cbSceneParam._m0[89u].z, fma(_1595, cbSceneParam._m0[89u].y, _1594 * cbSceneParam._m0[89u].x));
    float _1620 = fma(_1596, cbSceneParam._m0[90u].z, fma(_1595, cbSceneParam._m0[90u].y, _1594 * cbSceneParam._m0[90u].x));
    float _1623 = fma(_1596, cbSceneParam._m0[91u].z, fma(_1595, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1594));
    float _1638 = _898 * 0.5;
    float _1639 = _899 * 0.5;
    float _1640 = _900 * 0.5;
    float _1641 = dot(vec4(_1638, _1639, _1640, 1.0), vec4(_1572, _1575, _1578, _1581));
    float _1644 = dot(vec4(_1638, _1639, _1640, 1.0), vec4(_1571, _1574, _1577, _1580));
    float _1647 = dot(vec4(_1638, _1639, _1640, 1.0), vec4(_1570, _1573, _1576, _1579));
    float _1681;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1654 = dot(vec4(_1638, _1639, _1640, 1.0), vec4(_1260, _1264, _1267, _1270));
        float _1658 = dot(vec4(_1638, _1639, _1640, 1.0), vec4(_1262, _1265, _1268, _1271));
        float _1662 = dot(vec4(_1638, _1639, _1640, 1.0), vec4(_1263, _1266, _1269, _1272));
        float _1669 = dot(vec4(cbModelParam._m0[39u]), vec4(_1638, _1639, _1640, 1.0));
        _1681 = dot(vec3(isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)), isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)), isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1669) ? 0.0 : (isnan(0.0) ? _1669 : max(0.0, _1669))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1681 = 1.0;
    }
    float _1692;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1683 = dot(vec4(cbModelParam._m0[40u]), vec4(_1638, _1639, _1640, 1.0));
        _1692 = dot(vec3(isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)), isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)), isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1683) ? 0.0 : (isnan(0.0) ? _1683 : max(0.0, _1683))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1692 = 1.0;
    }
    float _1696 = (_1692 * cbModelParam._m0[1u].x) + (_1681 * (1.0 - cbModelParam._m0[1u].x));
    float _1706 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _793);
    float _1707 = isnan(_1706) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1706 : min(cbModelParam._m0[25u].z, _1706));
    float _1787;
    float _1789;
    float _1791;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1754 = fma(_959, cbModelParam._m0[13u].z, fma(_955, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _951)) + cbModelParam._m0[13u].w;
        float _1758 = fma(_959, cbModelParam._m0[14u].z, fma(_955, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _951)) + cbModelParam._m0[14u].w;
        float _1762 = fma(_959, cbModelParam._m0[15u].z, fma(_955, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _951)) + cbModelParam._m0[15u].w;
        float _1765 = fma(_900, cbModelParam._m0[13u].z, fma(_899, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _898));
        float _1768 = fma(_900, cbModelParam._m0[14u].z, fma(_899, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _898));
        float _1771 = fma(_900, cbModelParam._m0[15u].z, fma(_899, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _898));
        float _1799;
        if (_1765 > 0.0)
        {
            _1799 = abs((1.0 - _1754) / _1765);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1765 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1754 + 1.0) / _1765);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1799 = frontier_phi_54_52_ladder;
        }
        float _1967;
        if (_1768 > 0.0)
        {
            _1967 = abs((1.0 - _1758) / _1768);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1768 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1758 + 1.0) / _1768);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _1967 = frontier_phi_63_59_ladder;
        }
        float _2411;
        if (_1771 > 0.0)
        {
            _2411 = abs((1.0 - _1762) / _1771);
        }
        else
        {
            float frontier_phi_75_70_ladder;
            if (_1771 < 0.0)
            {
                frontier_phi_75_70_ladder = abs((_1762 + 1.0) / _1771);
            }
            else
            {
                frontier_phi_75_70_ladder = 5000.0;
            }
            _2411 = frontier_phi_75_70_ladder;
        }
        float _2413 = isnan(_1967) ? _1799 : (isnan(_1799) ? _1967 : min(_1799, _1967));
        float _2414 = isnan(_2411) ? _2413 : (isnan(_2413) ? _2411 : min(_2413, _2411));
        float _2418 = (_2414 * _1765) + _1754;
        float _2419 = (_2414 * _1768) + _1758;
        float _2420 = (_2414 * _1771) + _1762;
        float _2421 = _2414 * 9.9999997473787516355514526367188e-05;
        float _2423 = (-1.0) - _2421;
        float _2425 = _2421 + 1.0;
        float frontier_phi_53_75_ladder;
        float frontier_phi_53_75_ladder_1;
        float frontier_phi_53_75_ladder_2;
        if ((_2420 > _2425) || ((_2420 < _2423) || ((_2419 > _2425) || ((_2419 < _2423) || ((_2418 < _2423) || (_2418 > _2425))))))
        {
            frontier_phi_53_75_ladder = 0.0;
            frontier_phi_53_75_ladder_1 = 0.0;
            frontier_phi_53_75_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2670 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2420, cbModelParam._m0[9u].z, fma(_2419, cbModelParam._m0[9u].y, _2418 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2420, cbModelParam._m0[10u].z, fma(_2419, cbModelParam._m0[10u].y, _2418 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2420, cbModelParam._m0[11u].z, fma(_2419, cbModelParam._m0[11u].y, _2418 * cbModelParam._m0[11u].x))), _1707);
            frontier_phi_53_75_ladder = _2670.z * cbModelParam._m0[1u].y;
            frontier_phi_53_75_ladder_1 = _2670.y * cbModelParam._m0[1u].y;
            frontier_phi_53_75_ladder_2 = _2670.x * cbModelParam._m0[1u].y;
        }
        _1787 = frontier_phi_53_75_ladder_2;
        _1789 = frontier_phi_53_75_ladder_1;
        _1791 = frontier_phi_53_75_ladder;
    }
    else
    {
        vec4 _1775 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_898, _899, _900), _1707);
        _1787 = _1775.x * cbModelParam._m0[1u].y;
        _1789 = _1775.y * cbModelParam._m0[1u].y;
        _1791 = _1775.z * cbModelParam._m0[1u].y;
    }
    float _1795 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _793);
    float _1796 = isnan(_1795) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1795 : min(cbModelParam._m0[25u].w, _1795));
    float _1884;
    float _1886;
    float _1888;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1848 = fma(_959, cbModelParam._m0[21u].z, fma(_955, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _951)) + cbModelParam._m0[21u].w;
        float _1852 = fma(_959, cbModelParam._m0[22u].z, fma(_955, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _951)) + cbModelParam._m0[22u].w;
        float _1856 = fma(_959, cbModelParam._m0[23u].z, fma(_955, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _951)) + cbModelParam._m0[23u].w;
        float _1859 = fma(_900, cbModelParam._m0[21u].z, fma(_899, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _898));
        float _1862 = fma(_900, cbModelParam._m0[22u].z, fma(_899, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _898));
        float _1865 = fma(_900, cbModelParam._m0[23u].z, fma(_899, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _898));
        float _1972;
        if (_1859 > 0.0)
        {
            _1972 = abs((1.0 - _1848) / _1859);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1848 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _1972 = frontier_phi_65_61_ladder;
        }
        float _2438;
        if (_1862 > 0.0)
        {
            _2438 = abs((1.0 - _1852) / _1862);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1862 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1852 + 1.0) / _1862);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2438 = frontier_phi_77_72_ladder;
        }
        float _2791;
        if (_1865 > 0.0)
        {
            _2791 = abs((1.0 - _1856) / _1865);
        }
        else
        {
            float frontier_phi_89_84_ladder;
            if (_1865 < 0.0)
            {
                frontier_phi_89_84_ladder = abs((_1856 + 1.0) / _1865);
            }
            else
            {
                frontier_phi_89_84_ladder = 5000.0;
            }
            _2791 = frontier_phi_89_84_ladder;
        }
        float _2793 = isnan(_2438) ? _1972 : (isnan(_1972) ? _2438 : min(_1972, _2438));
        float _2794 = isnan(_2791) ? _2793 : (isnan(_2793) ? _2791 : min(_2793, _2791));
        float _2798 = (_2794 * _1859) + _1848;
        float _2799 = (_2794 * _1862) + _1852;
        float _2800 = (_2794 * _1865) + _1856;
        float _2801 = _2794 * 9.9999997473787516355514526367188e-05;
        float _2802 = (-1.0) - _2801;
        float _2804 = _2801 + 1.0;
        float frontier_phi_62_89_ladder;
        float frontier_phi_62_89_ladder_1;
        float frontier_phi_62_89_ladder_2;
        if ((_2800 > _2804) || ((_2800 < _2802) || ((_2799 > _2804) || ((_2799 < _2802) || ((_2798 < _2802) || (_2798 > _2804))))))
        {
            frontier_phi_62_89_ladder = 0.0;
            frontier_phi_62_89_ladder_1 = 0.0;
            frontier_phi_62_89_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2921 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2800, cbModelParam._m0[17u].z, fma(_2799, cbModelParam._m0[17u].y, _2798 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2800, cbModelParam._m0[18u].z, fma(_2799, cbModelParam._m0[18u].y, _2798 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2800, cbModelParam._m0[19u].z, fma(_2799, cbModelParam._m0[19u].y, _2798 * cbModelParam._m0[19u].x))), _1796);
            frontier_phi_62_89_ladder = _2921.z * cbModelParam._m0[1u].z;
            frontier_phi_62_89_ladder_1 = _2921.y * cbModelParam._m0[1u].z;
            frontier_phi_62_89_ladder_2 = _2921.x * cbModelParam._m0[1u].z;
        }
        _1884 = frontier_phi_62_89_ladder_2;
        _1886 = frontier_phi_62_89_ladder_1;
        _1888 = frontier_phi_62_89_ladder;
    }
    else
    {
        vec4 _1868 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_898, _899, _900), _1796);
        _1884 = _1868.x * cbModelParam._m0[1u].z;
        _1886 = _1868.y * cbModelParam._m0[1u].z;
        _1888 = _1868.z * cbModelParam._m0[1u].z;
    }
    float _1900 = ((((1.0 - _919) * ((_906 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_919 * _906)) * _890;
    float _1901 = _1900 * ((cbModelParam._m0[1u].w * (_1884 - _1787)) + _1787);
    float _1902 = _1900 * ((cbModelParam._m0[1u].w * (_1886 - _1789)) + _1789);
    float _1903 = _1900 * ((cbModelParam._m0[1u].w * (_1888 - _1791)) + _1791);
    float _1906 = fma(_1903, cbSceneParam._m0[89u].z, fma(_1902, cbSceneParam._m0[89u].y, _1901 * cbSceneParam._m0[89u].x));
    float _1909 = fma(_1903, cbSceneParam._m0[90u].z, fma(_1902, cbSceneParam._m0[90u].y, _1901 * cbSceneParam._m0[90u].x));
    float _1912 = fma(_1903, cbSceneParam._m0[91u].z, fma(_1902, cbSceneParam._m0[91u].y, _1901 * cbSceneParam._m0[91u].x));
    float _1946 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1950 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1954 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1958 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1959 = _1946 / _1958;
    float _1960 = _1950 / _1958;
    float _1961 = _1954 / _1958;
    float _2108;
    float _2109;
    float _2110;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1988 = ((uint(_1961 > cbSceneParam._m0[59u].y) + uint(_1961 > cbSceneParam._m0[59u].x)) + uint(_1961 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1989 = _1988 + 43u;
        uint _1997 = _1988 + 44u;
        uint _2005 = _1988 + 45u;
        uint _2013 = _1988 + 46u;
        float _2024 = fma(_1958, cbSceneParam._m0[_1989].w, fma(_1954, cbSceneParam._m0[_1989].z, fma(_1950, cbSceneParam._m0[_1989].y, _1946 * cbSceneParam._m0[_1989].x)));
        float _2028 = fma(_1958, cbSceneParam._m0[_1997].w, fma(_1954, cbSceneParam._m0[_1997].z, fma(_1950, cbSceneParam._m0[_1997].y, _1946 * cbSceneParam._m0[_1997].x)));
        float _2036 = fma(_1958, cbSceneParam._m0[_2013].w, fma(_1954, cbSceneParam._m0[_2013].z, fma(_1950, cbSceneParam._m0[_2013].y, _1946 * cbSceneParam._m0[_2013].x)));
        float _2041 = cbSceneParam._m0[33u].z * _2036;
        float _2043 = cbSceneParam._m0[33u].w * _2036;
        float _2046 = fma(_1958, cbSceneParam._m0[_2005].w, fma(_1954, cbSceneParam._m0[_2005].z, fma(_1950, cbSceneParam._m0[_2005].y, _1946 * cbSceneParam._m0[_2005].x))) / _2036;
        float _2094 = (cbSceneParam._m0[33u].x - sqrt(((_1960 * _1960) + (_1959 * _1959)) + (_1961 * _1961))) * cbSceneParam._m0[33u].y;
        float _4171 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2101 = (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2041 + _2024) / _2036, (_2043 + _2028) / _2036), _2046), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2043 + _2024) / _2036, (_2028 - _2041) / _2036), _2046), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2024 - _2041) / _2036, (_2028 - _2043) / _2036), _2046), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2024 - _2043) / _2036, (_2041 + _2028) / _2036), _2046), 0.0)).x), vec4(0.25)));
        _2108 = 1.0 - (_2101 * cbSceneParam._m0[34u].x);
        _2109 = 1.0 - (_2101 * cbSceneParam._m0[34u].y);
        _2110 = 1.0 - (_2101 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2108 = 1.0;
        _2109 = 1.0;
        _2110 = 1.0;
    }
    float _2174;
    float _2176;
    float _2178;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2162 = fma(_1958, cbSceneParam._m0[63u].w, fma(_1954, cbSceneParam._m0[63u].z, fma(_1950, cbSceneParam._m0[63u].y, _1946 * cbSceneParam._m0[63u].x)));
        float _2163 = fma(_1958, cbSceneParam._m0[60u].w, fma(_1954, cbSceneParam._m0[60u].z, fma(_1950, cbSceneParam._m0[60u].y, _1946 * cbSceneParam._m0[60u].x))) / _2162;
        float _2164 = fma(_1958, cbSceneParam._m0[61u].w, fma(_1954, cbSceneParam._m0[61u].z, fma(_1950, cbSceneParam._m0[61u].y, _1946 * cbSceneParam._m0[61u].x))) / _2162;
        float frontier_phi_74_73_ladder;
        float frontier_phi_74_73_ladder_1;
        float frontier_phi_74_73_ladder_2;
        if ((((_2163 >= cbSceneParam._m0[64u].x) && (_2164 >= cbSceneParam._m0[64u].y)) && (_2163 <= cbSceneParam._m0[64u].z)) && (_2164 <= cbSceneParam._m0[64u].w))
        {
            float _2451 = fma(_1958, cbSceneParam._m0[62u].w, fma(_1954, cbSceneParam._m0[62u].z, fma(_1950, cbSceneParam._m0[62u].y, _1946 * cbSceneParam._m0[62u].x))) / _2162;
            float _2455 = isnan(cbSceneParam._m0[41u].w) ? _2451 : (isnan(_2451) ? cbSceneParam._m0[41u].w : max(_2451, cbSceneParam._m0[41u].w));
            float _2498 = (cbSceneParam._m0[33u].x - sqrt(((_1960 * _1960) + (_1959 * _1959)) + (_1961 * _1961))) * cbSceneParam._m0[33u].y;
            float _4187 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
            float _2505 = (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2163, cbSceneParam._m0[33u].w + _2164), _2455), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2163, _2164 - cbSceneParam._m0[33u].z), _2455), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2163 - cbSceneParam._m0[33u].z, _2164 - cbSceneParam._m0[33u].w), _2455), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2163 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2164), _2455), 0.0)).x), vec4(0.25)));
            float _2509 = 1.0 - (_2505 * cbSceneParam._m0[34u].x);
            float _2510 = 1.0 - (_2505 * cbSceneParam._m0[34u].y);
            float _2511 = 1.0 - (_2505 * cbSceneParam._m0[34u].z);
            frontier_phi_74_73_ladder = isnan(_2509) ? _2108 : (isnan(_2108) ? _2509 : min(_2108, _2509));
            frontier_phi_74_73_ladder_1 = isnan(_2510) ? _2109 : (isnan(_2109) ? _2510 : min(_2109, _2510));
            frontier_phi_74_73_ladder_2 = isnan(_2511) ? _2110 : (isnan(_2110) ? _2511 : min(_2110, _2511));
        }
        else
        {
            frontier_phi_74_73_ladder = _2108;
            frontier_phi_74_73_ladder_1 = _2109;
            frontier_phi_74_73_ladder_2 = _2110;
        }
        _2174 = frontier_phi_74_73_ladder;
        _2176 = frontier_phi_74_73_ladder_1;
        _2178 = frontier_phi_74_73_ladder_2;
    }
    else
    {
        _2174 = _2108;
        _2176 = _2109;
        _2178 = _2110;
    }
    uvec4 _2183 = floatBitsToUint(cbInstanceData._m0[_864 + 5u]);
    uint _2185 = _2183.x * 14u;
    uint _2186 = _2185 + 13u;
    float _2191 = _890 + (-1.0);
    float _2194 = (cbLight._m0[_2186].x * _2191) + 1.0;
    float _2195 = (cbLight._m0[_2186].y * _2191) + 1.0;
    uint _2196 = _2185 + 5u;
    float _2202 = isnan(1.0) ? _2195 : (isnan(_2195) ? 1.0 : min(_2195, 1.0));
    uint _2206 = _2185 + 4u;
    float _2215 = isnan(1.0) ? _2194 : (isnan(_2194) ? 1.0 : min(_2194, 1.0));
    uint _2219 = _2185 | 1u;
    float _2230 = dot(vec3(cbLight._m0[_2185].xyz), vec3(_790, _791, _792));
    float _2233 = dot(vec3(cbLight._m0[_2219].xyz), vec3(_790, _791, _792));
    float _4223 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _4234 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2238 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * 0.3183098733425140380859375;
    float _2240 = (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * 0.3183098733425140380859375;
    float _2247 = ((cbLight._m0[_2196].x * _2202) * _2240) + (((cbLight._m0[_2206].x * _2174) * _2215) * _2238);
    float _2248 = ((_2202 * cbLight._m0[_2196].y) * _2240) + (((cbLight._m0[_2206].y * _2176) * _2215) * _2238);
    float _2249 = ((_2202 * cbLight._m0[_2196].z) * _2240) + (((cbLight._m0[_2206].z * _2178) * _2215) * _2238);
    uint _2251 = _2185 + 8u;
    float _2264 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2185].w)) * _793) * 0.949999988079071044921875);
    float _2265 = _2264 * _2264;
    float _2266 = cbLight._m0[_2185].x + _817;
    float _2267 = cbLight._m0[_2185].y + _818;
    float _2268 = cbLight._m0[_2185].z + _819;
    float _2272 = inversesqrt(dot(vec3(_2266, _2267, _2268), vec3(_2266, _2267, _2268)));
    float _2273 = _2272 * _2266;
    float _2274 = _2272 * _2267;
    float _2275 = _2272 * _2268;
    float _2276 = dot(vec3(_790, _791, _792), vec3(cbLight._m0[_2185].xyz));
    float _4245 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _2279 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _4256 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _2280 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
    float _2281 = dot(vec3(_790, _791, _792), vec3(_2273, _2274, _2275));
    float _4267 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2284 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _2285 = dot(vec3(cbLight._m0[_2185].xyz), vec3(_2273, _2274, _2275));
    float _4278 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2289 = _2265 * _2265;
    float _2293 = ((_2284 * _2284) * (_2289 + (-1.0))) + 1.0;
    float _2304 = (exp2(log2(1.0 - (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2305 = 1.0 - _2265;
    float _2316 = (0.5 / (((_2280 * ((_2279 * _2305) + _2265)) + 9.9999999392252902907785028219223e-09) + (((_2280 * _2305) + _2265) * _2279))) * _2279;
    float _4289 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2318 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_2289 / ((_2293 * _2293) * 3.141590118408203125));
    uint _2332 = _2185 + 9u;
    float _2343 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2219].w)) * _793) * 0.949999988079071044921875);
    float _2344 = _2343 * _2343;
    float _2345 = cbLight._m0[_2219].x + _817;
    float _2346 = cbLight._m0[_2219].y + _818;
    float _2347 = cbLight._m0[_2219].z + _819;
    float _2351 = inversesqrt(dot(vec3(_2345, _2346, _2347), vec3(_2345, _2346, _2347)));
    float _2352 = _2351 * _2345;
    float _2353 = _2351 * _2346;
    float _2354 = _2351 * _2347;
    float _2355 = dot(vec3(_790, _791, _792), vec3(cbLight._m0[_2219].xyz));
    float _4300 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2358 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
    float _2359 = dot(vec3(_790, _791, _792), vec3(_2352, _2353, _2354));
    float _4311 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2362 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    float _2363 = dot(vec3(cbLight._m0[_2219].xyz), vec3(_2352, _2353, _2354));
    float _4322 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2367 = _2344 * _2344;
    float _2371 = ((_2362 * _2362) * (_2367 + (-1.0))) + 1.0;
    float _2380 = (exp2(log2(1.0 - (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2381 = 1.0 - _2344;
    float _2391 = (0.5 / (((_2280 * ((_2358 * _2381) + _2344)) + 9.9999999392252902907785028219223e-09) + (((_2280 * _2381) + _2344) * _2358))) * _2358;
    float _4333 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2393 = (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_2367 / ((_2371 * _2371) * 3.141590118408203125));
    float _2403 = (((_2380 * cbLight._m0[_2332].x) * _2393) * _2202) + ((((cbLight._m0[_2251].x * _2174) * _2304) * _2318) * _2215);
    float _2404 = (((_2380 * cbLight._m0[_2332].y) * _2393) * _2202) + ((((cbLight._m0[_2251].y * _2176) * _2304) * _2318) * _2215);
    float _2405 = (((_2380 * cbLight._m0[_2332].z) * _2393) * _2202) + ((((cbLight._m0[_2251].z * _2178) * _2304) * _2318) * _2215);
    float _2568;
    float _2570;
    float _2572;
    float _2574;
    float _2576;
    float _2578;
    if (_2183.y == 0u)
    {
        uvec4 _2523 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2524 = _2523.x;
        uint _2535 = uint((float(_2523.y) * floor(float(uint(cbSceneParam._m0[85u].y * _826) / _2524))) + floor(float(uint(cbSceneParam._m0[85u].x * _825) / _2524)));
        float _2545 = (log2(_1961 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2546 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        uint _2549 = uint(isnan(14.0) ? _2546 : (isnan(_2546) ? 14.0 : min(_2546, 14.0)));
        uvec4 _2554 = texelFetch(g_lightClusterGridBuffer, int(((_2549 << 2u) + (_2535 << 6u)) >> 2u));
        uint _2555 = _2554.x;
        uint _2556 = _2523.z;
        float _2679;
        float _2681;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        if (((((1u << ((_2556 >> 4u) & 15u)) + 4294967295u) & _2555) == 0u) || ((_2556 & 240u) == 0u))
        {
            _2679 = 0.0;
            _2681 = 0.0;
            _2683 = 0.0;
            _2685 = 0.0;
            _2687 = 0.0;
            _2689 = 0.0;
        }
        else
        {
            float _2680;
            float _2682;
            float _2684;
            float _2686;
            float _2688;
            float _2690;
            float _2849 = 0.0;
            float _2850 = 0.0;
            float _2851 = 0.0;
            float _2852 = 0.0;
            float _2853 = 0.0;
            float _2854 = 0.0;
            uint _2855 = 0u;
            uint _2864;
            bool _2865;
            for (;;)
            {
                _2864 = texelFetch(g_lightClassification, int((((_2549 << 5u) + (_2535 << 9u)) + (_2855 << 2u)) >> 2u)).x;
                _2865 = _2864 == 0u;
                float frontier_phi_98_pred;
                float frontier_phi_98_pred_1;
                float frontier_phi_98_pred_2;
                float frontier_phi_98_pred_3;
                float frontier_phi_98_pred_4;
                float frontier_phi_98_pred_5;
                if (_2865)
                {
                    frontier_phi_98_pred = _2849;
                    frontier_phi_98_pred_1 = _2850;
                    frontier_phi_98_pred_2 = _2854;
                    frontier_phi_98_pred_3 = _2853;
                    frontier_phi_98_pred_4 = _2852;
                    frontier_phi_98_pred_5 = _2851;
                }
                else
                {
                    float _2994;
                    float _2995;
                    float _2996;
                    float _2997;
                    float _2998;
                    float _2999;
                    uint _3000;
                    _2994 = _2849;
                    _2995 = _2850;
                    _2996 = _2851;
                    _2997 = _2852;
                    _2998 = _2853;
                    _2999 = _2854;
                    _3000 = _2864;
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    for (;;)
                    {
                        uint _3004 = uint(findLSB(_3000)) + (_2855 << 5u);
                        uint _3001 = (_3000 + 4294967295u) & _3000;
                        uint _3006 = _3004 * 48u;
                        vec4 _3020 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3006)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 3u)).x));
                        uint _3026 = (_3004 * 48u) + 4u;
                        vec4 _3039 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3026)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 3u)).x));
                        uint _3045 = (_3004 * 48u) + 8u;
                        vec3 _3056 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3045)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 2u)).x));
                        float _3060 = _3020.x - _1959;
                        float _3061 = _3020.y - _1960;
                        float _3062 = _3020.z - _1961;
                        float _3063 = dot(vec3(_3060, _3061, _3062), vec3(_3060, _3061, _3062));
                        float _3066 = inversesqrt(_3063);
                        float _3067 = _3066 * _3060;
                        float _3068 = _3066 * _3061;
                        float _3069 = _3066 * _3062;
                        float _3070 = dot(vec3(_845, _848, _851), vec3(_3067, _3068, _3069));
                        float _3075 = 1.0 - (_3063 * _3020.w);
                        float _4354 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                        float _3076 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                        float _3077 = sqrt(_3063) * _3039.w;
                        float _3080 = 1.39999997615814208984375 / (_3077 + 1.39999997615814208984375);
                        float _3081 = _3080 * _3080;
                        float _3084 = ((1.0 - _3081) * _3070) + _3081;
                        float _3087 = _3077 * _3077;
                        float _3091 = ((isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0))) * _3076) / ((_3087 * 0.699999988079071044921875) + 1.0);
                        float _3095 = (-0.0) - _1959;
                        float _3096 = (-0.0) - _1960;
                        float _3097 = (-0.0) - _1961;
                        float _3101 = inversesqrt(dot(vec3(_3095, _3096, _3097), vec3(_3095, _3096, _3097)));
                        float _3102 = _3101 * _3095;
                        float _3103 = _3101 * _3096;
                        float _3104 = _3101 * _3097;
                        float _3111 = exp2(log2(1.0 / ((_3087 * 3.5) + 5.0)) * 0.25);
                        float _3112 = 1.0 - _906;
                        float _3119 = sqrt(1.0 - ((1.0 - (_3112 * _3112)) * (1.0 - (_3111 * _3111))));
                        float _3120 = _3119 * _3119;
                        float _3121 = _3120 * _3120;
                        float _3122 = _3102 + _3067;
                        float _3123 = _3103 + _3068;
                        float _3124 = _3104 + _3069;
                        float _3128 = inversesqrt(dot(vec3(_3122, _3123, _3124), vec3(_3122, _3123, _3124)));
                        float _3132 = dot(vec3(_845, _848, _851), vec3(_3102, _3103, _3104));
                        float _4370 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                        float _3135 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                        float _3136 = dot(vec3(_845, _848, _851), vec3(_3128 * _3122, _3128 * _3123, _3128 * _3124));
                        float _4381 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                        float _3139 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                        float _3143 = ((_3139 * _3139) * (_3121 + (-1.0))) + 1.0;
                        float _3144 = _3080 * _3120;
                        float _3145 = _3144 * _3144;
                        float _3148 = ((1.0 - _3145) * _3070) + _3145;
                        float _4392 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                        float _3149 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                        float _3150 = 1.0 - _3120;
                        float _3160 = (0.5 / (((_3149 * ((_3135 * _3150) + _3120)) + 9.9999999392252902907785028219223e-09) + (((_3149 * _3150) + _3120) * _3135))) * _3149;
                        float _4403 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                        float _3171 = (((_3121 * 3.1415927410125732421875) * (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0)))) / ((_3143 * _3143) * ((_3087 * 2.1991131305694580078125) + 3.141590118408203125))) * _3076;
                        _2929 = (_3091 * _3039.x) + _2997;
                        _2930 = (_3091 * _3039.y) + _2998;
                        _2931 = (_3091 * _3039.z) + _2999;
                        _2926 = (_3171 * _3056.x) + _2994;
                        _2927 = (_3171 * _3056.y) + _2995;
                        _2928 = (_3171 * _3056.z) + _2996;
                        if (_3001 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2994 = _2926;
                            _2995 = _2927;
                            _2996 = _2928;
                            _2997 = _2929;
                            _2998 = _2930;
                            _2999 = _2931;
                            _3000 = _3001;
                        }
                    }
                    frontier_phi_98_pred = _2926;
                    frontier_phi_98_pred_1 = _2927;
                    frontier_phi_98_pred_2 = _2931;
                    frontier_phi_98_pred_3 = _2930;
                    frontier_phi_98_pred_4 = _2929;
                    frontier_phi_98_pred_5 = _2928;
                }
                _2680 = frontier_phi_98_pred;
                _2682 = frontier_phi_98_pred_1;
                _2690 = frontier_phi_98_pred_2;
                _2688 = frontier_phi_98_pred_3;
                _2686 = frontier_phi_98_pred_4;
                _2684 = frontier_phi_98_pred_5;
                uint _2856 = _2855 + 1u;
                if (_2856 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2849 = _2680;
                    _2850 = _2682;
                    _2851 = _2684;
                    _2852 = _2686;
                    _2853 = _2688;
                    _2854 = _2690;
                    _2855 = _2856;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2679 = _2680;
            _2681 = _2682;
            _2683 = _2684;
            _2685 = _2686;
            _2687 = _2688;
            _2689 = _2690;
        }
        uvec4 _2693 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2694 = _2693.z;
        uint _2696 = (_2694 >> 8u) & 15u;
        float _2817;
        float _2819;
        float _2821;
        float _2823;
        float _2825;
        float _2827;
        if (((4294967295u << _2696) & _2555) == 0u)
        {
            _2817 = _2679;
            _2819 = _2681;
            _2821 = _2683;
            _2823 = _2685;
            _2825 = _2687;
            _2827 = _2689;
        }
        else
        {
            float _2842 = inversesqrt(dot(vec3(_1959, _1960, _1961), vec3(_1959, _1960, _1961)));
            float _2843 = _2842 * _1959;
            float _2844 = _2842 * _1960;
            float _2845 = _2842 * _1961;
            float frontier_phi_91_92_ladder;
            float frontier_phi_91_92_ladder_1;
            float frontier_phi_91_92_ladder_2;
            float frontier_phi_91_92_ladder_3;
            float frontier_phi_91_92_ladder_4;
            float frontier_phi_91_92_ladder_5;
            if (_2696 < ((_2694 >> 12u) & 15u))
            {
                float _2818;
                float _2820;
                float _2822;
                float _2824;
                float _2826;
                float _2828;
                float _2977 = _2679;
                float _2978 = _2681;
                float _2979 = _2683;
                float _2980 = _2685;
                float _2981 = _2687;
                float _2982 = _2689;
                uint _2983 = _2696;
                uint _2992;
                bool _2993;
                for (;;)
                {
                    _2992 = texelFetch(g_lightClassification, int((((_2549 << 5u) + (_2535 << 9u)) + (_2983 << 2u)) >> 2u)).x;
                    _2993 = _2992 == 0u;
                    float frontier_phi_104_pred;
                    float frontier_phi_104_pred_1;
                    float frontier_phi_104_pred_2;
                    float frontier_phi_104_pred_3;
                    float frontier_phi_104_pred_4;
                    float frontier_phi_104_pred_5;
                    if (_2993)
                    {
                        frontier_phi_104_pred = _2982;
                        frontier_phi_104_pred_1 = _2981;
                        frontier_phi_104_pred_2 = _2980;
                        frontier_phi_104_pred_3 = _2979;
                        frontier_phi_104_pred_4 = _2978;
                        frontier_phi_104_pred_5 = _2977;
                    }
                    else
                    {
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3179;
                        float _3180;
                        float _3181;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3189 = _2977;
                        float _3190 = _2978;
                        float _3191 = _2979;
                        float _3192 = _2980;
                        float _3193 = _2981;
                        float _3194 = _2982;
                        uint _3195 = _2992;
                        uint _3196;
                        vec4 _3221;
                        float _3222;
                        vec4 _3237;
                        vec3 _3249;
                        vec4 _3264;
                        vec4 _3279;
                        float _3325;
                        bool _3326;
                        for (;;)
                        {
                            uint _3206 = ((_2983 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3195));
                            _3196 = (_3195 + 4294967295u) & _3195;
                            uint _3208 = _3206 * 40u;
                            _3221 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3208)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 3u)).x));
                            _3222 = _3221.w;
                            uint _3224 = (_3206 * 40u) + 4u;
                            _3237 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 3u)).x));
                            uint _3239 = (_3206 * 40u) + 8u;
                            _3249 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3239)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 2u)).x));
                            uint _3251 = (_3206 * 40u) + 16u;
                            _3264 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3251)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 3u)).x));
                            uint _3266 = (_3206 * 40u) + 20u;
                            _3279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 3u)).x));
                            uint _3281 = (_3206 * 40u) + 24u;
                            vec4 _3294 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 3u)).x));
                            uint _3300 = (_3206 * 40u) + 28u;
                            vec4 _3313 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 3u)).x));
                            _3325 = fma(_1961, _3313.z, fma(_1960, _3313.y, _3313.x * _1959)) + _3313.w;
                            _3326 = !((fma(_1961, _3294.z, fma(_1960, _3294.y, _3294.x * _1959)) + _3294.w) <= 0.0);
                            float frontier_phi_110_pred;
                            float frontier_phi_110_pred_1;
                            float frontier_phi_110_pred_2;
                            float frontier_phi_110_pred_3;
                            float frontier_phi_110_pred_4;
                            float frontier_phi_110_pred_5;
                            if (_3326)
                            {
                                float _3353 = _3221.x - _1959;
                                float _3354 = _3221.y - _1960;
                                float _3355 = _3221.z - _1961;
                                float _3356 = dot(vec3(_3353, _3354, _3355), vec3(_3353, _3354, _3355));
                                float _3359 = inversesqrt(_3356);
                                float _3360 = _3359 * _3353;
                                float _3361 = _3359 * _3354;
                                float _3362 = _3359 * _3355;
                                float _3366 = 1.0 - (_3356 / (_3222 * _3222));
                                float _4414 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                                float _3367 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                                float _3371 = sqrt(_3356) * _3237.w;
                                float _3373 = 1.39999997615814208984375 / (_3371 + 1.39999997615814208984375);
                                float _3374 = _3373 * _3373;
                                float _3377 = ((1.0 - _3374) * dot(vec3(_3360, _3361, _3362), vec3(_845, _848, _851))) + _3374;
                                float _3380 = _3371 * _3371;
                                float _3384 = (fma(_1961, _3264.z, fma(_1960, _3264.y, _3264.x * _1959)) + _3264.w) / _3325;
                                float _3385 = (fma(_1961, _3279.z, fma(_1960, _3279.y, _3279.x * _1959)) + _3279.w) / _3325;
                                float _3389 = 1.0 - dot(vec2(_3384, _3385), vec2(_3384, _3385));
                                float _4430 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3390 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                                float _3391 = _3390 * (((isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0))) * _3367) / ((_3380 * 0.699999988079071044921875) + 1.0));
                                float _3403 = exp2(log2(1.0 / ((_3380 * 3.5) + 5.0)) * 0.25);
                                float _3404 = 1.0 - _906;
                                float _3411 = sqrt(1.0 - ((1.0 - (_3404 * _3404)) * (1.0 - (_3403 * _3403))));
                                float _3412 = _3411 * _3411;
                                float _3413 = _3412 * _3412;
                                float _3414 = _3360 - _2843;
                                float _3415 = _3361 - _2844;
                                float _3416 = _3362 - _2845;
                                float _3420 = inversesqrt(dot(vec3(_3414, _3415, _3416), vec3(_3414, _3415, _3416)));
                                float _3424 = dot(vec3(_845, _848, _851), vec3((-0.0) - _2843, (-0.0) - _2844, (-0.0) - _2845));
                                float _4441 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                                float _3427 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
                                float _3428 = dot(vec3(_845, _848, _851), vec3(_3420 * _3414, _3420 * _3415, _3420 * _3416));
                                float _4452 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3431 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                                float _3435 = ((_3431 * _3431) * (_3413 + (-1.0))) + 1.0;
                                float _3436 = _3373 * _3412;
                                float _3437 = _3436 * _3436;
                                float _3443 = ((1.0 - _3437) * dot(vec3(_845, _848, _851), vec3(_3360, _3361, _3362))) + _3437;
                                float _4463 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                                float _3444 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
                                float _3445 = 1.0 - _3412;
                                float _3455 = (0.5 / (((_3444 * ((_3427 * _3445) + _3412)) + 9.9999999392252902907785028219223e-09) + (((_3444 * _3445) + _3412) * _3427))) * _3444;
                                float _4474 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                                float _3465 = (_3390 * _3367) * (((_3413 * 3.1415927410125732421875) * (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0)))) / ((_3435 * _3435) * ((_3380 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_110_pred = _3465 * _3249.z;
                                frontier_phi_110_pred_1 = _3391 * _3237.z;
                                frontier_phi_110_pred_2 = _3391 * _3237.y;
                                frontier_phi_110_pred_3 = _3391 * _3237.x;
                                frontier_phi_110_pred_4 = _3465 * _3249.y;
                                frontier_phi_110_pred_5 = _3465 * _3249.x;
                            }
                            else
                            {
                                frontier_phi_110_pred = 0.0;
                                frontier_phi_110_pred_1 = 0.0;
                                frontier_phi_110_pred_2 = 0.0;
                                frontier_phi_110_pred_3 = 0.0;
                                frontier_phi_110_pred_4 = 0.0;
                                frontier_phi_110_pred_5 = 0.0;
                            }
                            _3471 = frontier_phi_110_pred;
                            _3474 = frontier_phi_110_pred_1;
                            _3473 = frontier_phi_110_pred_2;
                            _3472 = frontier_phi_110_pred_3;
                            _3470 = frontier_phi_110_pred_4;
                            _3469 = frontier_phi_110_pred_5;
                            _3179 = _3472 + _3192;
                            _3180 = _3473 + _3193;
                            _3181 = _3474 + _3194;
                            _3176 = _3469 + _3189;
                            _3177 = _3470 + _3190;
                            _3178 = _3471 + _3191;
                            if (_3196 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3189 = _3176;
                                _3190 = _3177;
                                _3191 = _3178;
                                _3192 = _3179;
                                _3193 = _3180;
                                _3194 = _3181;
                                _3195 = _3196;
                                continue;
                            }
                        }
                        frontier_phi_104_pred = _3181;
                        frontier_phi_104_pred_1 = _3180;
                        frontier_phi_104_pred_2 = _3179;
                        frontier_phi_104_pred_3 = _3178;
                        frontier_phi_104_pred_4 = _3177;
                        frontier_phi_104_pred_5 = _3176;
                    }
                    _2828 = frontier_phi_104_pred;
                    _2826 = frontier_phi_104_pred_1;
                    _2824 = frontier_phi_104_pred_2;
                    _2822 = frontier_phi_104_pred_3;
                    _2820 = frontier_phi_104_pred_4;
                    _2818 = frontier_phi_104_pred_5;
                    uint _2984 = _2983 + 1u;
                    if (_2984 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2977 = _2818;
                        _2978 = _2820;
                        _2979 = _2822;
                        _2980 = _2824;
                        _2981 = _2826;
                        _2982 = _2828;
                        _2983 = _2984;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_91_92_ladder = _2828;
                frontier_phi_91_92_ladder_1 = _2826;
                frontier_phi_91_92_ladder_2 = _2824;
                frontier_phi_91_92_ladder_3 = _2822;
                frontier_phi_91_92_ladder_4 = _2820;
                frontier_phi_91_92_ladder_5 = _2818;
            }
            else
            {
                frontier_phi_91_92_ladder = _2689;
                frontier_phi_91_92_ladder_1 = _2687;
                frontier_phi_91_92_ladder_2 = _2685;
                frontier_phi_91_92_ladder_3 = _2683;
                frontier_phi_91_92_ladder_4 = _2681;
                frontier_phi_91_92_ladder_5 = _2679;
            }
            _2817 = frontier_phi_91_92_ladder_5;
            _2819 = frontier_phi_91_92_ladder_4;
            _2821 = frontier_phi_91_92_ladder_3;
            _2823 = frontier_phi_91_92_ladder_2;
            _2825 = frontier_phi_91_92_ladder_1;
            _2827 = frontier_phi_91_92_ladder;
        }
        float _2832 = isnan(1.0) ? _890 : (isnan(_890) ? 1.0 : min(_890, 1.0));
        _2568 = (_2832 * _2823) + _2247;
        _2570 = (_2832 * _2825) + _2248;
        _2572 = (_2832 * _2827) + _2249;
        _2574 = ((_2817 * 0.039999999105930328369140625) * _2832) + _2403;
        _2576 = ((_2819 * 0.039999999105930328369140625) * _2832) + _2404;
        _2578 = ((_2821 * 0.039999999105930328369140625) * _2832) + _2405;
    }
    else
    {
        _2568 = _2247;
        _2570 = _2248;
        _2572 = _2249;
        _2574 = _2403;
        _2576 = _2404;
        _2578 = _2405;
    }
    uint _2584 = _866 + uint(cbMatDynParam._m0[0u].w);
    float _4490 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _4501 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _4512 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _2609 = (((isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_2568 + ((isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) * _890))) + ((_2574 + ((isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0))) * _1696)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2584].x * ((((((cbMtdParam._m0[14u].x * _289) * _685.x) - _618) * _289) * _738) + _618));
    float _2611 = ((cbInstanceData._m0[_2584].y * ((((((cbMtdParam._m0[14u].y * _289) * _685.y) - _619) * _289) * _738) + _619)) + ((_2576 + ((isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0))) * _1696)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (_2570 + ((isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))) * _890)));
    float _2613 = ((cbInstanceData._m0[_2584].z * ((((((cbMtdParam._m0[14u].z * _289) * _685.z) - _620) * _289) * _738) + _620)) + ((_2578 + ((isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0))) * _1696)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_2572 + ((isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))) * _890)));
    uint _2617 = _864 + 6u;
    float _2625 = _825 / cbSceneParam._m0[86u].x;
    float _2626 = _826 / cbSceneParam._m0[86u].y;
    vec4 _2640 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2625, _2626, (log2((isnan(cbSceneParam._m0[77u].w) ? _812 : (isnan(_812) ? cbSceneParam._m0[77u].w : min(_812, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2642 = _2640.x;
    float _2643 = _2640.y;
    float _2644 = _2640.z;
    float _2645 = _2640.w;
    float _2741;
    float _2743;
    float _2745;
    float _2747;
    if (_812 > cbSceneParam._m0[78u].w)
    {
        float _2704 = isnan(_812) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _812 : min(cbSceneParam._m0[80u].w, _812));
        float _2705 = _2704 / _812;
        float _2716 = _2705 * _271;
        float _2717 = _272 * _2705;
        float _2718 = (-0.0) - _2717;
        float _2719 = _2705 * _273;
        float _2721 = (cbSceneParam._m0[77u].w * _2718) / _2704;
        float _2722 = _2721 + cbSceneParam._m0[79u].w;
        float _2723 = cbSceneParam._m0[79u].w - _2717;
        float _2729 = sqrt(((_2716 * _2716) + (_2717 * _2717)) + (_2719 * _2719));
        float _2732 = (1.0 - (cbSceneParam._m0[77u].w / _2704)) * _2729;
        float _2737 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2739 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2939;
        if (abs((_2718 - _2721) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2939 = ((((_2722 > 0.0) ? exp2(_2737 * _2722) : (2.0 - exp2(_2739 * _2722))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2732;
        }
        else
        {
            float _2878 = 1.0 / cbSceneParam._m0[80u].x;
            float _2879 = isnan(_2723) ? _2722 : (isnan(_2722) ? _2723 : max(_2722, _2723));
            float _2880 = isnan(_2723) ? _2722 : (isnan(_2722) ? _2723 : min(_2722, _2723));
            float _2889 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : min(_2879, 0.0));
            float _2890 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : min(_2880, 0.0));
            _2939 = ((abs(_2729 / _2718) * cbSceneParam._m0[80u].y) * ((((_2889 - _2890) * 2.0) - ((exp2(_2737 * (isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0)))) - exp2(_2737 * (isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0))))) * _2878)) - ((exp2(_2739 * _2889) - exp2(_2739 * _2890)) * _2878))) + (_2732 * cbSceneParam._m0[80u].z);
        }
        vec4 _2941 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2625, _2626, 1.0), 0.0);
        float _2950 = exp2((_2939 * (-1.44269502162933349609375)) * (1.0 - _2941.w));
        float _2951 = log2(_2950);
        float _2967 = log2(_2645);
        _2741 = (exp2(_2967 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2951 * cbSceneParam._m0[78u].x)) * _2941.x) / cbSceneParam._m0[78u].x)) + _2642;
        _2743 = (exp2(_2967 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2951 * cbSceneParam._m0[78u].y)) * _2941.y) / cbSceneParam._m0[78u].y)) + _2643;
        _2745 = (exp2(_2967 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2951 * cbSceneParam._m0[78u].z)) * _2941.z) / cbSceneParam._m0[78u].z)) + _2644;
        _2747 = _2950 * _2645;
    }
    else
    {
        _2741 = _2642;
        _2743 = _2643;
        _2745 = _2644;
        _2747 = _2645;
    }
    float _2759 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2760 = _2759 == 3.0;
    float _2761 = log2(_2747);
    float _2768 = exp2(_2761 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0)));
    float _2769 = exp2(_2761 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0)));
    float _2770 = exp2(_2761 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0)));
    float _2779 = (_2759 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2779 * (_2760 ? _2768 : (_2768 + (cbSceneParam._m0[72u].w * _2741)));
    SV_Target.y = _2779 * (_2760 ? _2769 : (_2769 + (cbSceneParam._m0[72u].w * _2743)));
    SV_Target.z = _2779 * (_2760 ? _2770 : (_2770 + (cbSceneParam._m0[72u].w * _2745)));
    SV_Target.w = cbInstanceData._m0[_2617].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2617].w;
}


