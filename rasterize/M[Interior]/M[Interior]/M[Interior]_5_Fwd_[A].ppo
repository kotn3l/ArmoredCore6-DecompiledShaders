#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1169;
float _3320;
float _3321;
float _3322;
float _3323;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    vec4 _282 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _285 = _282.x;
    vec4 _303 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _320 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _285) + cbMtdParam._m0[12u].x) * _303.x;
    float _322 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _285) + cbMtdParam._m0[12u].y) * _303.y;
    float _324 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _285) + cbMtdParam._m0[12u].z) * _303.z;
    vec4 _345 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _381 = cbMtdParam._m0[21u].w + _267;
    float _382 = cbMtdParam._m0[22u].x + _268;
    float _383 = cbMtdParam._m0[22u].y + _269;
    float _397 = (-0.0) - dot(vec3(_381, _382, _383), vec3(_196, _197, _198));
    float _398 = (-0.0) - dot(vec3(_381, _382, _383), vec3(_210, _211, _212));
    float _399 = (-0.0) - dot(vec3(_381, _382, _383), vec3((-0.0) - _203, (-0.0) - _204, (-0.0) - _205));
    float _403 = inversesqrt(dot(vec3(_397, _398, _399), vec3(_397, _398, _399)));
    float _406 = _403 * _399;
    float _407 = (_403 * _397) + ((cbMtdParam._m0[19u].w * _285) * ((_345.x * 2.0) + (-1.0)));
    float _408 = (_403 * _398) + ((cbMtdParam._m0[20u].x * _285) * ((_345.y * 2.0) + (-1.0)));
    float _409 = _407 * cbMtdParam._m0[18u].z;
    float _410 = _408 * cbMtdParam._m0[18u].y;
    float _411 = fract(TEXCOORD.x);
    float _412 = fract(TEXCOORD.y);
    float _418;
    if (_409 > 0.0)
    {
        _418 = (1.0 - _411) / _409;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_409 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _411) / _409;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _418 = frontier_phi_3_2_ladder;
    }
    float _426;
    if (_410 > 0.0)
    {
        _426 = (1.0 - _412) / _410;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_410 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _412) / _410;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _426 = frontier_phi_7_6_ladder;
    }
    bool _428 = _406 > 0.0;
    float _430 = _428 ? (cbMtdParam._m0[15u].x / _406) : 5000.0;
    float _431 = isnan(_426) ? _418 : (isnan(_418) ? _426 : min(_418, _426));
    float _432 = isnan(_430) ? _431 : (isnan(_431) ? _430 : min(_431, _430));
    float _436 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _437 = _411 + (-0.5);
    float _440 = _412 + (-0.5);
    float _443 = ((_432 * _406) + _436) / _436;
    vec4 _467 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_437 + (_432 * _409)) / _443) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_440 + (_432 * _410)) / _443) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _480 = (_467.x * _285) * cbMtdParam._m0[9u].x;
    float _481 = (_467.y * _285) * cbMtdParam._m0[9u].y;
    float _482 = (_467.z * _285) * cbMtdParam._m0[9u].z;
    float _500 = _407 * cbMtdParam._m0[20u].z;
    float _501 = _408 * cbMtdParam._m0[20u].y;
    bool _502 = _500 > 0.0;
    float _507;
    if (_502)
    {
        _507 = (1.0 - _411) / _500;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_500 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _411) / _500;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _507 = frontier_phi_11_10_ladder;
    }
    bool _509 = _501 > 0.0;
    float _514;
    if (_509)
    {
        _514 = (1.0 - _412) / _501;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_501 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _412) / _501;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _514 = frontier_phi_15_14_ladder;
    }
    float _517 = _428 ? (cbMtdParam._m0[16u].x / _406) : 5000.0;
    float _518 = isnan(_514) ? _507 : (isnan(_507) ? _514 : min(_507, _514));
    float _519 = isnan(_517) ? _518 : (isnan(_518) ? _517 : min(_518, _517));
    float _523 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _527 = ((_519 * _406) + _523) / _523;
    float _532 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _534 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _550 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_437 + (_519 * _500)) / _527) + 0.5) + _532) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_440 + (_519 * _501)) / _527) + 0.5) + _534) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _565;
    if (_502)
    {
        _565 = (1.0 - _411) / _500;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_500 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _411) / _500;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _565 = frontier_phi_19_18_ladder;
    }
    float _571;
    if (_509)
    {
        _571 = (1.0 - _412) / _501;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_501 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _412) / _501;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _571 = frontier_phi_23_22_ladder;
    }
    float _573 = isnan(_571) ? _565 : (isnan(_565) ? _571 : min(_565, _571));
    float _574 = isnan(_517) ? _573 : (isnan(_573) ? _517 : min(_573, _517));
    float _581 = ((_574 * _406) + _523) / _523;
    vec4 _602 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_437 + (_574 * _500)) / _581) + 0.5) + _532) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_440 + (_574 * _501)) / _581) + 0.5) + _534) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _604 = _602.x;
    vec4 _628 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _632 = _628.z;
    float _635 = (_628.x * 2.0) + (-1.0);
    float _636 = (_628.y * 2.0) + (-1.0);
    float _637 = dot(vec2(_635, _636), vec2(_635, _636));
    float _3362 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _642 = sqrt(1.0 - (isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0))));
    float _645 = fma(_642, _203, fma(_636, _210, _635 * _196));
    float _648 = fma(_642, _204, fma(_636, _211, _635 * _197));
    float _651 = fma(_642, _205, fma(_636, _212, _635 * _198));
    float _655 = inversesqrt(dot(vec3(_645, _648, _651), vec3(_645, _648, _651)));
    float _656 = _655 * _645;
    float _657 = _655 * _648;
    float _658 = _655 * _651;
    float _3373 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _659 = isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0));
    float _3384 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3395 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _3406 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _678 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _682 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _683 = _267 * _682;
    float _684 = _268 * _682;
    float _685 = _269 * _682;
    vec4 _690 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _692 = _690.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _850 = sqrt(((_267 * _267) + (_268 * _268)) + (_269 * _269));
        float _856 = (cbMatDynParam._m0[5u].x * _850) + cbMatDynParam._m0[5u].y;
        float _3417 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _857 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
        float _861 = (cbMatDynParam._m0[5u].z * _850) + cbMatDynParam._m0[5u].w;
        float _3428 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0))) - _857)) + _857) < ((_692 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _704 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _705 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _725 = fma(_658, cbSceneParam._m0[5u].z, fma(_657, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _656));
    float _728 = fma(_658, cbSceneParam._m0[6u].z, fma(_657, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _656));
    float _731 = fma(_658, cbSceneParam._m0[7u].z, fma(_657, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _656));
    uint _744 = uint(roundEven(NORMAL.w)) * 13u;
    uint _746 = _744 + 9u;
    uint _747 = _746 + uint(cbMatDynParam._m0[0u].w);
    float _753 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0)))) * cbInstanceData._m0[_747].x;
    float _754 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0)))) * cbInstanceData._m0[_747].y;
    float _755 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0)))) * cbInstanceData._m0[_747].z;
    float _3439 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _756 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
    float _3450 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _757 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
    float _3461 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _758 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
    vec4 _767 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _704, cbSceneParam._m0[86u].y * _705));
    float _770 = _767.x * TEXCOORD.z;
    float _771 = dot(vec3(_656, _657, _658), vec3(_683, _684, _685));
    float _774 = _771 * 2.0;
    float _778 = (_774 * _656) - _683;
    float _779 = (_774 * _657) - _684;
    float _780 = (_774 * _658) - _685;
    float _784 = abs(dot(vec3(_683, _684, _685), vec3(_656, _657, _658)));
    float _3472 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _786 = sqrt(_659);
    float _799 = exp2((_786 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_786 * 3.0));
    float _831 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _835 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _839 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1168;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _895 = fma(_839, cbModelParam._m0[26u].z, fma(_835, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _831));
        float _899 = fma(_839, cbModelParam._m0[27u].z, fma(_835, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _831));
        float _903 = fma(_839, cbModelParam._m0[28u].z, fma(_835, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _831));
        float _926 = _831 + _656;
        float _927 = _835 + _657;
        float _928 = _839 + _658;
        float _938 = fma(_928, cbModelParam._m0[26u].z, fma(_927, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _926)) - _895;
        float _939 = fma(_928, cbModelParam._m0[27u].z, fma(_927, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _926)) - _899;
        float _940 = fma(_928, cbModelParam._m0[28u].z, fma(_927, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _926)) - _903;
        float _944 = inversesqrt(dot(vec3(_938, _939, _940), vec3(_938, _939, _940)));
        float _957 = ((_944 * _938) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_895 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _958 = ((_944 * _939) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_899 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _959 = ((_944 * _940) / cbModelParam._m0[34u].z) + ((((((_903 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        float _996 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_962.x + (-0.5));
        float _998 = _996 * (_962.y + (-0.5));
        float _999 = _996 * (_962.z + (-0.5));
        float _1006 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_969.x + (-0.5));
        float _1008 = _1006 * (_969.y + (-0.5));
        float _1009 = _1006 * (_969.z + (-0.5));
        float _1016 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_976.x + (-0.5));
        float _1018 = _1016 * (_976.y + (-0.5));
        float _1019 = _1016 * (_976.z + (-0.5));
        float _1026 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_983.x + (-0.5));
        float _1028 = _1026 * (_983.y + (-0.5));
        float _1029 = _1026 * (_983.z + (-0.5));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = _997 * 0.5;
        float _1034 = _1007 * 0.5;
        float _1035 = _1017 * 0.5;
        float _1036 = dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035));
        float _1041 = (_1036 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1036);
        float _1050 = (dot(vec3(_656, _657, _658), vec3(_1041 * _1033, _1041 * _1034, _1041 * _1035)) + 1.0) * 0.5;
        float _3498 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1060 = sqrt(((_1034 * _1034) + (_1033 * _1033)) + (_1035 * _1035)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3509 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
        float _1062 = _1061 * 2.0;
        float _1066 = (1.0 - _1061) / (_1061 + 1.0);
        float _3520 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
        float _1076 = ((((1.0 - _1067) * (_1062 + 2.0)) * exp2(log2(isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0))) * (_1062 + 1.0))) + _1067) * _1030;
        float _1077 = _998 * 0.5;
        float _1078 = _1008 * 0.5;
        float _1079 = _1018 * 0.5;
        float _1080 = dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079));
        float _1085 = (_1080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1080);
        float _1093 = (dot(vec3(_656, _657, _658), vec3(_1085 * _1077, _1085 * _1078, _1085 * _1079)) + 1.0) * 0.5;
        float _3531 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1102 = sqrt(((_1078 * _1078) + (_1077 * _1077)) + (_1079 * _1079)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3542 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _3553 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0))) * (_1104 + 1.0))) + _1109) * _1031;
        float _1119 = _999 * 0.5;
        float _1120 = _1009 * 0.5;
        float _1121 = _1019 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1135 = (dot(vec3(_656, _657, _658), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _3564 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1144 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3575 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _3586 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0))) * (_1146 + 1.0))) + _1151) * _1032;
        _1168 = _999;
        _1170 = _998;
        _1171 = _997;
        _1172 = _1009;
        _1173 = _1008;
        _1174 = _1007;
        _1175 = _1019;
        _1176 = _1018;
        _1177 = _1017;
        _1178 = _1032;
        _1179 = _1031;
        _1180 = _1030;
        _1181 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0)));
        _1182 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
        _1183 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
    }
    else
    {
        _1168 = _1169;
        _1170 = _1169;
        _1171 = _1169;
        _1172 = _1169;
        _1173 = _1169;
        _1174 = _1169;
        _1175 = _1169;
        _1176 = _1169;
        _1177 = _1169;
        _1178 = _1169;
        _1179 = _1169;
        _1180 = _1169;
        _1181 = 0.0;
        _1182 = 0.0;
        _1183 = 0.0;
    }
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1212 = fma(_839, cbModelParam._m0[30u].z, fma(_835, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _831));
        float _1216 = fma(_839, cbModelParam._m0[31u].z, fma(_835, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _831));
        float _1220 = fma(_839, cbModelParam._m0[32u].z, fma(_835, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _831));
        float _1243 = _831 + _656;
        float _1244 = _835 + _657;
        float _1245 = _839 + _658;
        float _1255 = fma(_1245, cbModelParam._m0[30u].z, fma(_1244, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1243)) - _1212;
        float _1256 = fma(_1245, cbModelParam._m0[31u].z, fma(_1244, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1243)) - _1216;
        float _1257 = fma(_1245, cbModelParam._m0[32u].z, fma(_1244, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1243)) - _1220;
        float _1261 = inversesqrt(dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257)));
        float _1274 = ((_1261 * _1255) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1212 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1275 = ((_1261 * _1256) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1216 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1276 = ((_1261 * _1257) / cbModelParam._m0[35u].z) + ((((((_1220 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        float _1311 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1278.x + (-0.5));
        float _1313 = _1311 * (_1278.y + (-0.5));
        float _1314 = _1311 * (_1278.z + (-0.5));
        float _1321 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1285.x + (-0.5));
        float _1323 = _1321 * (_1285.y + (-0.5));
        float _1324 = _1321 * (_1285.z + (-0.5));
        float _1331 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1292.x + (-0.5));
        float _1333 = _1331 * (_1292.y + (-0.5));
        float _1334 = _1331 * (_1292.z + (-0.5));
        float _1341 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1299.x + (-0.5));
        float _1343 = _1341 * (_1299.y + (-0.5));
        float _1344 = _1341 * (_1299.z + (-0.5));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = _1312 * 0.5;
        float _1349 = _1322 * 0.5;
        float _1350 = _1332 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1364 = (dot(vec3(_656, _657, _658), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _3627 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1373 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _3638 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _3649 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) * (_1375 + 1.0))) + _1380) * _1345;
        float _1390 = _1313 * 0.5;
        float _1391 = _1323 * 0.5;
        float _1392 = _1333 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1406 = (dot(vec3(_656, _657, _658), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _3660 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1415 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _3671 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _3682 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * (_1417 + 1.0))) + _1422) * _1346;
        float _1432 = _1314 * 0.5;
        float _1433 = _1324 * 0.5;
        float _1434 = _1334 * 0.5;
        float _1435 = dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434));
        float _1440 = (_1435 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1435);
        float _1448 = (dot(vec3(_656, _657, _658), vec3(_1440 * _1432, _1440 * _1433, _1440 * _1434)) + 1.0) * 0.5;
        float _3693 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1457 = sqrt(((_1433 * _1433) + (_1432 * _1432)) + (_1434 * _1434)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _3704 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _1459 = _1458 * 2.0;
        float _1463 = (1.0 - _1458) / (_1458 + 1.0);
        float _3715 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1473 = ((((1.0 - _1464) * (_1459 + 2.0)) * exp2(log2(isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0))) * (_1459 + 1.0))) + _1464) * _1347;
        _1481 = _1314;
        _1482 = _1313;
        _1483 = _1312;
        _1484 = _1324;
        _1485 = _1323;
        _1486 = _1322;
        _1487 = _1334;
        _1488 = _1333;
        _1489 = _1332;
        _1490 = _1347;
        _1491 = _1346;
        _1492 = _1345;
        _1493 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
        _1494 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
        _1495 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)));
    }
    else
    {
        _1481 = _1169;
        _1482 = _1169;
        _1483 = _1169;
        _1484 = _1169;
        _1485 = _1169;
        _1486 = _1169;
        _1487 = _1169;
        _1488 = _1169;
        _1489 = _1169;
        _1490 = _1169;
        _1491 = _1169;
        _1492 = _1169;
        _1493 = 0.0;
        _1494 = 0.0;
        _1495 = 0.0;
    }
    float _1505 = (cbModelParam._m0[1u].x * (_1493 - _1181)) + _1181;
    float _1506 = (cbModelParam._m0[1u].x * (_1494 - _1182)) + _1182;
    float _1507 = (cbModelParam._m0[1u].x * (_1495 - _1183)) + _1183;
    float _1528 = fma(_1507, cbSceneParam._m0[89u].z, fma(_1506, cbSceneParam._m0[89u].y, _1505 * cbSceneParam._m0[89u].x));
    float _1531 = fma(_1507, cbSceneParam._m0[90u].z, fma(_1506, cbSceneParam._m0[90u].y, _1505 * cbSceneParam._m0[90u].x));
    float _1534 = fma(_1507, cbSceneParam._m0[91u].z, fma(_1506, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1505));
    float _1549 = _778 * 0.5;
    float _1550 = _779 * 0.5;
    float _1551 = _780 * 0.5;
    float _1552 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1483, _1486, _1489, _1492));
    float _1555 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1482, _1485, _1488, _1491));
    float _1558 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1481, _1484, _1487, _1490));
    float _1592;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1565 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1168, _1172, _1175, _1178));
        float _1569 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1170, _1173, _1176, _1179));
        float _1573 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1171, _1174, _1177, _1180));
        float _1580 = dot(vec4(cbModelParam._m0[39u]), vec4(_1549, _1550, _1551, 1.0));
        _1592 = dot(vec3(isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)), isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)), isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1580) ? 0.0 : (isnan(0.0) ? _1580 : max(0.0, _1580))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1592 = 1.0;
    }
    float _1603;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1594 = dot(vec4(cbModelParam._m0[40u]), vec4(_1549, _1550, _1551, 1.0));
        _1603 = dot(vec3(isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)), isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)), isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1594) ? 0.0 : (isnan(0.0) ? _1594 : max(0.0, _1594))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1603 = 1.0;
    }
    float _1607 = (_1603 * cbModelParam._m0[1u].x) + (_1592 * (1.0 - cbModelParam._m0[1u].x));
    float _1617 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _659);
    float _1618 = isnan(_1617) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1617 : min(cbModelParam._m0[25u].z, _1617));
    float _1699;
    float _1701;
    float _1703;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1666 = fma(_839, cbModelParam._m0[13u].z, fma(_835, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _831)) + cbModelParam._m0[13u].w;
        float _1670 = fma(_839, cbModelParam._m0[14u].z, fma(_835, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _831)) + cbModelParam._m0[14u].w;
        float _1674 = fma(_839, cbModelParam._m0[15u].z, fma(_835, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _831)) + cbModelParam._m0[15u].w;
        float _1677 = fma(_780, cbModelParam._m0[13u].z, fma(_779, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _778));
        float _1680 = fma(_780, cbModelParam._m0[14u].z, fma(_779, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _778));
        float _1683 = fma(_780, cbModelParam._m0[15u].z, fma(_779, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _778));
        float _1711;
        if (_1677 > 0.0)
        {
            _1711 = abs((1.0 - _1666) / _1677);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1666 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1711 = frontier_phi_41_39_ladder;
        }
        float _2056;
        if (_1680 > 0.0)
        {
            _2056 = abs((1.0 - _1670) / _1680);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1670 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _2056 = frontier_phi_50_46_ladder;
        }
        float _2380;
        if (_1683 > 0.0)
        {
            _2380 = abs((1.0 - _1674) / _1683);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1674 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _2380 = frontier_phi_64_57_ladder;
        }
        float _2382 = isnan(_2056) ? _1711 : (isnan(_1711) ? _2056 : min(_1711, _2056));
        float _2383 = isnan(_2380) ? _2382 : (isnan(_2382) ? _2380 : min(_2382, _2380));
        float _2387 = (_2383 * _1677) + _1666;
        float _2388 = (_2383 * _1680) + _1670;
        float _2389 = (_2383 * _1683) + _1674;
        float _2390 = _2383 * 9.9999997473787516355514526367188e-05;
        float _2391 = (-1.0) - _2390;
        float _2393 = _2390 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_2389 > _2393) || ((_2389 < _2391) || ((_2388 > _2393) || ((_2388 < _2391) || ((_2387 < _2391) || (_2387 > _2393))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2531 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2389, cbModelParam._m0[9u].z, fma(_2388, cbModelParam._m0[9u].y, _2387 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2389, cbModelParam._m0[10u].z, fma(_2388, cbModelParam._m0[10u].y, _2387 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2389, cbModelParam._m0[11u].z, fma(_2388, cbModelParam._m0[11u].y, _2387 * cbModelParam._m0[11u].x))), _1618);
            frontier_phi_40_64_ladder = _2531.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _2531.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _2531.x * cbModelParam._m0[1u].y;
        }
        _1699 = frontier_phi_40_64_ladder_2;
        _1701 = frontier_phi_40_64_ladder_1;
        _1703 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1687 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_778, _779, _780), _1618);
        _1699 = _1687.x * cbModelParam._m0[1u].y;
        _1701 = _1687.y * cbModelParam._m0[1u].y;
        _1703 = _1687.z * cbModelParam._m0[1u].y;
    }
    float _1707 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _659);
    float _1708 = isnan(_1707) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1707 : min(cbModelParam._m0[25u].w, _1707));
    float _1796;
    float _1798;
    float _1800;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1760 = fma(_839, cbModelParam._m0[21u].z, fma(_835, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _831)) + cbModelParam._m0[21u].w;
        float _1764 = fma(_839, cbModelParam._m0[22u].z, fma(_835, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _831)) + cbModelParam._m0[22u].w;
        float _1768 = fma(_839, cbModelParam._m0[23u].z, fma(_835, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _831)) + cbModelParam._m0[23u].w;
        float _1771 = fma(_780, cbModelParam._m0[21u].z, fma(_779, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _778));
        float _1774 = fma(_780, cbModelParam._m0[22u].z, fma(_779, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _778));
        float _1777 = fma(_780, cbModelParam._m0[23u].z, fma(_779, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _778));
        float _2061;
        if (_1771 > 0.0)
        {
            _2061 = abs((1.0 - _1760) / _1771);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1771 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1760 + 1.0) / _1771);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _2061 = frontier_phi_52_48_ladder;
        }
        float _2406;
        if (_1774 > 0.0)
        {
            _2406 = abs((1.0 - _1764) / _1774);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1764 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _2406 = frontier_phi_66_59_ladder;
        }
        float _2596;
        if (_1777 > 0.0)
        {
            _2596 = abs((1.0 - _1768) / _1777);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1768 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _2596 = frontier_phi_84_77_ladder;
        }
        float _2598 = isnan(_2406) ? _2061 : (isnan(_2061) ? _2406 : min(_2061, _2406));
        float _2599 = isnan(_2596) ? _2598 : (isnan(_2598) ? _2596 : min(_2598, _2596));
        float _2603 = (_2599 * _1771) + _1760;
        float _2604 = (_2599 * _1774) + _1764;
        float _2605 = (_2599 * _1777) + _1768;
        float _2606 = _2599 * 9.9999997473787516355514526367188e-05;
        float _2607 = (-1.0) - _2606;
        float _2609 = _2606 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_2605 > _2609) || ((_2605 < _2607) || ((_2604 > _2609) || ((_2604 < _2607) || ((_2603 < _2607) || (_2603 > _2609))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2847 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2605, cbModelParam._m0[17u].z, fma(_2604, cbModelParam._m0[17u].y, _2603 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2605, cbModelParam._m0[18u].z, fma(_2604, cbModelParam._m0[18u].y, _2603 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2605, cbModelParam._m0[19u].z, fma(_2604, cbModelParam._m0[19u].y, _2603 * cbModelParam._m0[19u].x))), _1708);
            frontier_phi_49_84_ladder = _2847.z * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _2847.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _2847.x * cbModelParam._m0[1u].z;
        }
        _1796 = frontier_phi_49_84_ladder_2;
        _1798 = frontier_phi_49_84_ladder_1;
        _1800 = frontier_phi_49_84_ladder;
    }
    else
    {
        vec4 _1780 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_778, _779, _780), _1708);
        _1796 = _1780.x * cbModelParam._m0[1u].z;
        _1798 = _1780.y * cbModelParam._m0[1u].z;
        _1800 = _1780.z * cbModelParam._m0[1u].z;
    }
    float _1812 = ((((1.0 - _799) * ((_786 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_799 * _786)) * _770;
    float _1813 = _1812 * ((cbModelParam._m0[1u].w * (_1796 - _1699)) + _1699);
    float _1814 = _1812 * ((cbModelParam._m0[1u].w * (_1798 - _1701)) + _1701);
    float _1815 = _1812 * ((cbModelParam._m0[1u].w * (_1800 - _1703)) + _1703);
    float _1818 = fma(_1815, cbSceneParam._m0[89u].z, fma(_1814, cbSceneParam._m0[89u].y, _1813 * cbSceneParam._m0[89u].x));
    float _1821 = fma(_1815, cbSceneParam._m0[90u].z, fma(_1814, cbSceneParam._m0[90u].y, _1813 * cbSceneParam._m0[90u].x));
    float _1824 = fma(_1815, cbSceneParam._m0[91u].z, fma(_1814, cbSceneParam._m0[91u].y, _1813 * cbSceneParam._m0[91u].x));
    uvec4 _1834 = floatBitsToUint(cbInstanceData._m0[_744 + 5u]);
    uint _1836 = _1834.x * 14u;
    uint _1837 = _1836 + 13u;
    float _1842 = _770 + (-1.0);
    float _1845 = (cbLight._m0[_1837].x * _1842) + 1.0;
    float _1846 = (cbLight._m0[_1837].y * _1842) + 1.0;
    uint _1847 = _1836 + 5u;
    float _1853 = isnan(1.0) ? _1846 : (isnan(_1846) ? 1.0 : min(_1846, 1.0));
    uint _1857 = _1836 + 4u;
    float _1863 = isnan(1.0) ? _1845 : (isnan(_1845) ? 1.0 : min(_1845, 1.0));
    uint _1867 = _1836 | 1u;
    float _1878 = dot(vec3(cbLight._m0[_1836].xyz), vec3(_656, _657, _658));
    float _1881 = dot(vec3(cbLight._m0[_1867].xyz), vec3(_656, _657, _658));
    float _3851 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _3862 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _1886 = (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * 0.3183098733425140380859375;
    float _1888 = (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * 0.3183098733425140380859375;
    float _1895 = ((cbLight._m0[_1847].x * _1853) * _1888) + ((cbLight._m0[_1857].x * _1863) * _1886);
    float _1896 = ((_1853 * cbLight._m0[_1847].y) * _1888) + ((_1863 * cbLight._m0[_1857].y) * _1886);
    float _1897 = ((_1853 * cbLight._m0[_1847].z) * _1888) + ((_1863 * cbLight._m0[_1857].z) * _1886);
    uint _1899 = _1836 + 8u;
    float _1912 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1836].w)) * _659) * 0.949999988079071044921875);
    float _1913 = _1912 * _1912;
    float _1914 = cbLight._m0[_1836].x + _683;
    float _1915 = cbLight._m0[_1836].y + _684;
    float _1916 = cbLight._m0[_1836].z + _685;
    float _1920 = inversesqrt(dot(vec3(_1914, _1915, _1916), vec3(_1914, _1915, _1916)));
    float _1921 = _1920 * _1914;
    float _1922 = _1920 * _1915;
    float _1923 = _1920 * _1916;
    float _1924 = dot(vec3(_656, _657, _658), vec3(cbLight._m0[_1836].xyz));
    float _3873 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1927 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _3884 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _1928 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _1929 = dot(vec3(_656, _657, _658), vec3(_1921, _1922, _1923));
    float _3895 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
    float _1932 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _1933 = dot(vec3(cbLight._m0[_1836].xyz), vec3(_1921, _1922, _1923));
    float _3906 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1937 = _1913 * _1913;
    float _1941 = ((_1932 * _1932) * (_1937 + (-1.0))) + 1.0;
    float _1952 = (exp2(log2(1.0 - (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1953 = 1.0 - _1913;
    float _1964 = (0.5 / (((_1928 * ((_1927 * _1953) + _1913)) + 9.9999999392252902907785028219223e-09) + (((_1928 * _1953) + _1913) * _1927))) * _1927;
    float _3917 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1966 = (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1937 / ((_1941 * _1941) * 3.141590118408203125));
    uint _1977 = _1836 + 9u;
    float _1988 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1867].w)) * _659) * 0.949999988079071044921875);
    float _1989 = _1988 * _1988;
    float _1990 = cbLight._m0[_1867].x + _683;
    float _1991 = cbLight._m0[_1867].y + _684;
    float _1992 = cbLight._m0[_1867].z + _685;
    float _1996 = inversesqrt(dot(vec3(_1990, _1991, _1992), vec3(_1990, _1991, _1992)));
    float _1997 = _1996 * _1990;
    float _1998 = _1996 * _1991;
    float _1999 = _1996 * _1992;
    float _2000 = dot(vec3(_656, _657, _658), vec3(cbLight._m0[_1867].xyz));
    float _3928 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2003 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _2004 = dot(vec3(_656, _657, _658), vec3(_1997, _1998, _1999));
    float _3939 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2007 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _2008 = dot(vec3(cbLight._m0[_1867].xyz), vec3(_1997, _1998, _1999));
    float _3950 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2012 = _1989 * _1989;
    float _2016 = ((_2007 * _2007) * (_2012 + (-1.0))) + 1.0;
    float _2025 = (exp2(log2(1.0 - (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2026 = 1.0 - _1989;
    float _2036 = (0.5 / (((_1928 * ((_2003 * _2026) + _1989)) + 9.9999999392252902907785028219223e-09) + (((_1928 * _2026) + _1989) * _2003))) * _2003;
    float _3961 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2038 = (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_2012 / ((_2016 * _2016) * 3.141590118408203125));
    float _2048 = (((_2025 * cbLight._m0[_1977].x) * _2038) * _1853) + (((_1952 * cbLight._m0[_1899].x) * _1966) * _1863);
    float _2049 = (((_2025 * cbLight._m0[_1977].y) * _2038) * _1853) + (((_1952 * cbLight._m0[_1899].y) * _1966) * _1863);
    float _2050 = (((_2025 * cbLight._m0[_1977].z) * _2038) * _1853) + (((_1952 * cbLight._m0[_1899].z) * _1966) * _1863);
    float _2165;
    float _2167;
    float _2169;
    float _2171;
    float _2173;
    float _2175;
    if (_1834.y == 0u)
    {
        float _2105 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2106 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2105;
        float _2107 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2105;
        float _2108 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2105;
        uvec4 _2120 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2121 = _2120.x;
        uint _2132 = uint((float(_2120.y) * floor(float(uint(cbSceneParam._m0[85u].y * _705) / _2121))) + floor(float(uint(cbSceneParam._m0[85u].x * _704) / _2121)));
        float _2142 = (log2(_2108 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2143 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        uint _2146 = uint(isnan(14.0) ? _2143 : (isnan(_2143) ? 14.0 : min(_2143, 14.0)));
        uvec4 _2151 = texelFetch(g_lightClusterGridBuffer, int(((_2146 << 2u) + (_2132 << 6u)) >> 2u));
        uint _2152 = _2151.x;
        uint _2153 = _2120.z;
        float _2259;
        float _2261;
        float _2263;
        float _2265;
        float _2267;
        float _2269;
        if (((((1u << ((_2153 >> 4u) & 15u)) + 4294967295u) & _2152) == 0u) || ((_2153 & 240u) == 0u))
        {
            _2259 = 0.0;
            _2261 = 0.0;
            _2263 = 0.0;
            _2265 = 0.0;
            _2267 = 0.0;
            _2269 = 0.0;
        }
        else
        {
            float _2260;
            float _2262;
            float _2264;
            float _2266;
            float _2268;
            float _2270;
            float _2443 = 0.0;
            float _2444 = 0.0;
            float _2445 = 0.0;
            float _2446 = 0.0;
            float _2447 = 0.0;
            float _2448 = 0.0;
            uint _2449 = 0u;
            uint _2458;
            bool _2459;
            for (;;)
            {
                _2458 = texelFetch(g_lightClassification, int((((_2146 << 5u) + (_2132 << 9u)) + (_2449 << 2u)) >> 2u)).x;
                _2459 = _2458 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_2459)
                {
                    frontier_phi_79_pred = _2448;
                    frontier_phi_79_pred_1 = _2447;
                    frontier_phi_79_pred_2 = _2446;
                    frontier_phi_79_pred_3 = _2445;
                    frontier_phi_79_pred_4 = _2444;
                    frontier_phi_79_pred_5 = _2443;
                }
                else
                {
                    float _2639;
                    float _2640;
                    float _2641;
                    float _2642;
                    float _2643;
                    float _2644;
                    uint _2645;
                    _2639 = _2443;
                    _2640 = _2444;
                    _2641 = _2445;
                    _2642 = _2446;
                    _2643 = _2447;
                    _2644 = _2448;
                    _2645 = _2458;
                    float _2540;
                    float _2541;
                    float _2542;
                    float _2543;
                    float _2544;
                    float _2545;
                    for (;;)
                    {
                        uint _2649 = uint(findLSB(_2645)) + (_2449 << 5u);
                        uint _2646 = (_2645 + 4294967295u) & _2645;
                        uint _2651 = _2649 * 48u;
                        vec4 _2665 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2651)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 3u)).x));
                        uint _2671 = (_2649 * 48u) + 4u;
                        vec4 _2684 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2671)).x, texelFetch(g_PointLightRenderingBuffer, int(_2671 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2671 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2671 + 3u)).x));
                        uint _2690 = (_2649 * 48u) + 8u;
                        vec3 _2701 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2690)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 2u)).x));
                        float _2705 = _2665.x - _2106;
                        float _2706 = _2665.y - _2107;
                        float _2707 = _2665.z - _2108;
                        float _2708 = dot(vec3(_2705, _2706, _2707), vec3(_2705, _2706, _2707));
                        float _2711 = inversesqrt(_2708);
                        float _2712 = _2711 * _2705;
                        float _2713 = _2711 * _2706;
                        float _2714 = _2711 * _2707;
                        float _2715 = dot(vec3(_725, _728, _731), vec3(_2712, _2713, _2714));
                        float _2720 = 1.0 - (_2708 * _2665.w);
                        float _3982 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
                        float _2721 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
                        float _2722 = sqrt(_2708) * _2684.w;
                        float _2725 = 1.39999997615814208984375 / (_2722 + 1.39999997615814208984375);
                        float _2726 = _2725 * _2725;
                        float _2729 = ((1.0 - _2726) * _2715) + _2726;
                        float _2732 = _2722 * _2722;
                        float _2736 = ((isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0))) * _2721) / ((_2732 * 0.699999988079071044921875) + 1.0);
                        float _2740 = (-0.0) - _2106;
                        float _2741 = (-0.0) - _2107;
                        float _2742 = (-0.0) - _2108;
                        float _2746 = inversesqrt(dot(vec3(_2740, _2741, _2742), vec3(_2740, _2741, _2742)));
                        float _2747 = _2746 * _2740;
                        float _2748 = _2746 * _2741;
                        float _2749 = _2746 * _2742;
                        float _2757 = exp2(log2(1.0 / ((_2732 * 3.5) + 5.0)) * 0.25);
                        float _2758 = 1.0 - _786;
                        float _2765 = sqrt(1.0 - ((1.0 - (_2758 * _2758)) * (1.0 - (_2757 * _2757))));
                        float _2766 = _2765 * _2765;
                        float _2767 = _2766 * _2766;
                        float _2768 = _2747 + _2712;
                        float _2769 = _2748 + _2713;
                        float _2770 = _2749 + _2714;
                        float _2774 = inversesqrt(dot(vec3(_2768, _2769, _2770), vec3(_2768, _2769, _2770)));
                        float _2778 = dot(vec3(_725, _728, _731), vec3(_2747, _2748, _2749));
                        float _3998 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
                        float _2781 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
                        float _2782 = dot(vec3(_725, _728, _731), vec3(_2774 * _2768, _2774 * _2769, _2774 * _2770));
                        float _4009 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
                        float _2785 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
                        float _2789 = ((_2785 * _2785) * (_2767 + (-1.0))) + 1.0;
                        float _2790 = _2725 * _2766;
                        float _2791 = _2790 * _2790;
                        float _2794 = ((1.0 - _2791) * _2715) + _2791;
                        float _4020 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
                        float _2795 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
                        float _2796 = 1.0 - _2766;
                        float _2806 = (0.5 / (((_2795 * ((_2781 * _2796) + _2766)) + 9.9999999392252902907785028219223e-09) + (((_2795 * _2796) + _2766) * _2781))) * _2795;
                        float _4031 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
                        float _2817 = (((_2767 * 3.1415927410125732421875) * (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) / ((_2789 * _2789) * ((_2732 * 2.1991131305694580078125) + 3.141590118408203125))) * _2721;
                        _2543 = (_2736 * _2684.x) + _2642;
                        _2544 = (_2736 * _2684.y) + _2643;
                        _2545 = (_2736 * _2684.z) + _2644;
                        _2540 = (_2817 * _2701.x) + _2639;
                        _2541 = (_2817 * _2701.y) + _2640;
                        _2542 = (_2817 * _2701.z) + _2641;
                        if (_2646 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2639 = _2540;
                            _2640 = _2541;
                            _2641 = _2542;
                            _2642 = _2543;
                            _2643 = _2544;
                            _2644 = _2545;
                            _2645 = _2646;
                        }
                    }
                    frontier_phi_79_pred = _2545;
                    frontier_phi_79_pred_1 = _2544;
                    frontier_phi_79_pred_2 = _2543;
                    frontier_phi_79_pred_3 = _2542;
                    frontier_phi_79_pred_4 = _2541;
                    frontier_phi_79_pred_5 = _2540;
                }
                _2270 = frontier_phi_79_pred;
                _2268 = frontier_phi_79_pred_1;
                _2266 = frontier_phi_79_pred_2;
                _2264 = frontier_phi_79_pred_3;
                _2262 = frontier_phi_79_pred_4;
                _2260 = frontier_phi_79_pred_5;
                uint _2450 = _2449 + 1u;
                if (_2450 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2443 = _2260;
                    _2444 = _2262;
                    _2445 = _2264;
                    _2446 = _2266;
                    _2447 = _2268;
                    _2448 = _2270;
                    _2449 = _2450;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2259 = _2260;
            _2261 = _2262;
            _2263 = _2264;
            _2265 = _2266;
            _2267 = _2268;
            _2269 = _2270;
        }
        uvec4 _2273 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2274 = _2273.z;
        uint _2276 = (_2274 >> 8u) & 15u;
        float _2411;
        float _2413;
        float _2415;
        float _2417;
        float _2419;
        float _2421;
        if (((4294967295u << _2276) & _2152) == 0u)
        {
            _2411 = _2259;
            _2413 = _2261;
            _2415 = _2263;
            _2417 = _2265;
            _2419 = _2267;
            _2421 = _2269;
        }
        else
        {
            float _2436 = inversesqrt(dot(vec3(_2106, _2107, _2108), vec3(_2106, _2107, _2108)));
            float _2437 = _2436 * _2106;
            float _2438 = _2436 * _2107;
            float _2439 = _2436 * _2108;
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_2276 < ((_2274 >> 12u) & 15u))
            {
                float _2412;
                float _2414;
                float _2416;
                float _2418;
                float _2420;
                float _2422;
                float _2622 = _2259;
                float _2623 = _2261;
                float _2624 = _2263;
                float _2625 = _2265;
                float _2626 = _2267;
                float _2627 = _2269;
                uint _2628 = _2276;
                uint _2637;
                bool _2638;
                for (;;)
                {
                    _2637 = texelFetch(g_lightClassification, int((((_2146 << 5u) + (_2132 << 9u)) + (_2628 << 2u)) >> 2u)).x;
                    _2638 = _2637 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    float frontier_phi_93_pred_3;
                    float frontier_phi_93_pred_4;
                    float frontier_phi_93_pred_5;
                    if (_2638)
                    {
                        frontier_phi_93_pred = _2626;
                        frontier_phi_93_pred_1 = _2625;
                        frontier_phi_93_pred_2 = _2624;
                        frontier_phi_93_pred_3 = _2623;
                        frontier_phi_93_pred_4 = _2622;
                        frontier_phi_93_pred_5 = _2627;
                    }
                    else
                    {
                        float _2852;
                        float _2853;
                        float _2854;
                        float _2855;
                        float _2856;
                        float _2857;
                        float _3145;
                        float _3146;
                        float _3147;
                        float _3148;
                        float _3149;
                        float _3150;
                        float _2865 = _2622;
                        float _2866 = _2623;
                        float _2867 = _2624;
                        float _2868 = _2625;
                        float _2869 = _2626;
                        float _2870 = _2627;
                        uint _2871 = _2637;
                        uint _2872;
                        vec4 _2897;
                        float _2898;
                        vec4 _2913;
                        vec3 _2925;
                        vec4 _2940;
                        vec4 _2955;
                        float _3001;
                        bool _3002;
                        for (;;)
                        {
                            uint _2882 = ((_2628 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2871));
                            _2872 = (_2871 + 4294967295u) & _2871;
                            uint _2884 = _2882 * 40u;
                            _2897 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2884)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 3u)).x));
                            _2898 = _2897.w;
                            uint _2900 = (_2882 * 40u) + 4u;
                            _2913 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2900)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 3u)).x));
                            uint _2915 = (_2882 * 40u) + 8u;
                            _2925 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2915)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 2u)).x));
                            uint _2927 = (_2882 * 40u) + 16u;
                            _2940 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2927)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 3u)).x));
                            uint _2942 = (_2882 * 40u) + 20u;
                            _2955 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2942)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 3u)).x));
                            uint _2957 = (_2882 * 40u) + 24u;
                            vec4 _2970 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2957)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 3u)).x));
                            uint _2976 = (_2882 * 40u) + 28u;
                            vec4 _2989 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2976)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 3u)).x));
                            _3001 = fma(_2108, _2989.z, fma(_2107, _2989.y, _2989.x * _2106)) + _2989.w;
                            _3002 = !((fma(_2108, _2970.z, fma(_2107, _2970.y, _2970.x * _2106)) + _2970.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            float frontier_phi_99_pred_3;
                            float frontier_phi_99_pred_4;
                            float frontier_phi_99_pred_5;
                            if (_3002)
                            {
                                float _3029 = _2897.x - _2106;
                                float _3030 = _2897.y - _2107;
                                float _3031 = _2897.z - _2108;
                                float _3032 = dot(vec3(_3029, _3030, _3031), vec3(_3029, _3030, _3031));
                                float _3035 = inversesqrt(_3032);
                                float _3036 = _3035 * _3029;
                                float _3037 = _3035 * _3030;
                                float _3038 = _3035 * _3031;
                                float _3042 = 1.0 - (_3032 / (_2898 * _2898));
                                float _4042 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                                float _3043 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
                                float _3047 = sqrt(_3032) * _2913.w;
                                float _3049 = 1.39999997615814208984375 / (_3047 + 1.39999997615814208984375);
                                float _3050 = _3049 * _3049;
                                float _3053 = ((1.0 - _3050) * dot(vec3(_3036, _3037, _3038), vec3(_725, _728, _731))) + _3050;
                                float _3056 = _3047 * _3047;
                                float _3060 = (fma(_2108, _2940.z, fma(_2107, _2940.y, _2940.x * _2106)) + _2940.w) / _3001;
                                float _3061 = (fma(_2108, _2955.z, fma(_2107, _2955.y, _2955.x * _2106)) + _2955.w) / _3001;
                                float _3065 = 1.0 - dot(vec2(_3060, _3061), vec2(_3060, _3061));
                                float _4058 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                                float _3066 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
                                float _3067 = _3066 * (((isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0))) * _3043) / ((_3056 * 0.699999988079071044921875) + 1.0));
                                float _3079 = exp2(log2(1.0 / ((_3056 * 3.5) + 5.0)) * 0.25);
                                float _3080 = 1.0 - _786;
                                float _3087 = sqrt(1.0 - ((1.0 - (_3080 * _3080)) * (1.0 - (_3079 * _3079))));
                                float _3088 = _3087 * _3087;
                                float _3089 = _3088 * _3088;
                                float _3090 = _3036 - _2437;
                                float _3091 = _3037 - _2438;
                                float _3092 = _3038 - _2439;
                                float _3096 = inversesqrt(dot(vec3(_3090, _3091, _3092), vec3(_3090, _3091, _3092)));
                                float _3100 = dot(vec3(_725, _728, _731), vec3((-0.0) - _2437, (-0.0) - _2438, (-0.0) - _2439));
                                float _4069 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                                float _3103 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
                                float _3104 = dot(vec3(_725, _728, _731), vec3(_3096 * _3090, _3096 * _3091, _3096 * _3092));
                                float _4080 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                                float _3107 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
                                float _3111 = ((_3107 * _3107) * (_3089 + (-1.0))) + 1.0;
                                float _3112 = _3049 * _3088;
                                float _3113 = _3112 * _3112;
                                float _3119 = ((1.0 - _3113) * dot(vec3(_725, _728, _731), vec3(_3036, _3037, _3038))) + _3113;
                                float _4091 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                                float _3120 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
                                float _3121 = 1.0 - _3088;
                                float _3131 = (0.5 / (((_3120 * ((_3103 * _3121) + _3088)) + 9.9999999392252902907785028219223e-09) + (((_3120 * _3121) + _3088) * _3103))) * _3120;
                                float _4102 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                                float _3141 = (_3066 * _3043) * (((_3089 * 3.1415927410125732421875) * (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0)))) / ((_3111 * _3111) * ((_3056 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_99_pred = _3067 * _2913.z;
                                frontier_phi_99_pred_1 = _3067 * _2913.y;
                                frontier_phi_99_pred_2 = _3067 * _2913.x;
                                frontier_phi_99_pred_3 = _3141 * _2925.z;
                                frontier_phi_99_pred_4 = _3141 * _2925.y;
                                frontier_phi_99_pred_5 = _3141 * _2925.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                                frontier_phi_99_pred_3 = 0.0;
                                frontier_phi_99_pred_4 = 0.0;
                                frontier_phi_99_pred_5 = 0.0;
                            }
                            _3150 = frontier_phi_99_pred;
                            _3149 = frontier_phi_99_pred_1;
                            _3148 = frontier_phi_99_pred_2;
                            _3147 = frontier_phi_99_pred_3;
                            _3146 = frontier_phi_99_pred_4;
                            _3145 = frontier_phi_99_pred_5;
                            _2855 = _3148 + _2868;
                            _2856 = _3149 + _2869;
                            _2857 = _3150 + _2870;
                            _2852 = _3145 + _2865;
                            _2853 = _3146 + _2866;
                            _2854 = _3147 + _2867;
                            if (_2872 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2865 = _2852;
                                _2866 = _2853;
                                _2867 = _2854;
                                _2868 = _2855;
                                _2869 = _2856;
                                _2870 = _2857;
                                _2871 = _2872;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _2856;
                        frontier_phi_93_pred_1 = _2855;
                        frontier_phi_93_pred_2 = _2854;
                        frontier_phi_93_pred_3 = _2853;
                        frontier_phi_93_pred_4 = _2852;
                        frontier_phi_93_pred_5 = _2857;
                    }
                    _2420 = frontier_phi_93_pred;
                    _2418 = frontier_phi_93_pred_1;
                    _2416 = frontier_phi_93_pred_2;
                    _2414 = frontier_phi_93_pred_3;
                    _2412 = frontier_phi_93_pred_4;
                    _2422 = frontier_phi_93_pred_5;
                    uint _2629 = _2628 + 1u;
                    if (_2629 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2622 = _2412;
                        _2623 = _2414;
                        _2624 = _2416;
                        _2625 = _2418;
                        _2626 = _2420;
                        _2627 = _2422;
                        _2628 = _2629;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2422;
                frontier_phi_68_69_ladder_1 = _2420;
                frontier_phi_68_69_ladder_2 = _2418;
                frontier_phi_68_69_ladder_3 = _2416;
                frontier_phi_68_69_ladder_4 = _2412;
                frontier_phi_68_69_ladder_5 = _2414;
            }
            else
            {
                frontier_phi_68_69_ladder = _2269;
                frontier_phi_68_69_ladder_1 = _2267;
                frontier_phi_68_69_ladder_2 = _2265;
                frontier_phi_68_69_ladder_3 = _2263;
                frontier_phi_68_69_ladder_4 = _2259;
                frontier_phi_68_69_ladder_5 = _2261;
            }
            _2411 = frontier_phi_68_69_ladder_4;
            _2413 = frontier_phi_68_69_ladder_5;
            _2415 = frontier_phi_68_69_ladder_3;
            _2417 = frontier_phi_68_69_ladder_2;
            _2419 = frontier_phi_68_69_ladder_1;
            _2421 = frontier_phi_68_69_ladder;
        }
        float _2426 = isnan(1.0) ? _770 : (isnan(_770) ? 1.0 : min(_770, 1.0));
        _2165 = (_2426 * _2417) + _1895;
        _2167 = (_2426 * _2419) + _1896;
        _2169 = (_2426 * _2421) + _1897;
        _2171 = ((_2411 * 0.039999999105930328369140625) * _2426) + _2048;
        _2173 = ((_2413 * 0.039999999105930328369140625) * _2426) + _2049;
        _2175 = ((_2415 * 0.039999999105930328369140625) * _2426) + _2050;
    }
    else
    {
        _2165 = _1895;
        _2167 = _1896;
        _2169 = _1897;
        _2171 = _2048;
        _2173 = _2049;
        _2175 = _2050;
    }
    uint _2181 = _746 + uint(cbMatDynParam._m0[0u].w);
    float _4118 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _4129 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _4140 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _2206 = (((isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_2165 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _770))) + ((_2171 + ((isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))) * _1607)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2181].x * ((((((cbMtdParam._m0[10u].x * _285) * _550.x) - _480) * _285) * _604) + _480));
    float _2208 = ((cbInstanceData._m0[_2181].y * ((((((cbMtdParam._m0[10u].y * _285) * _550.y) - _481) * _285) * _604) + _481)) + ((_2173 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1607)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_2167 + ((isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))) * _770)));
    float _2210 = ((cbInstanceData._m0[_2181].z * ((((((cbMtdParam._m0[10u].z * _285) * _550.z) - _482) * _285) * _604) + _482)) + ((_2175 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1607)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_2169 + ((isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))) * _770)));
    float _2211 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2212 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2213 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    uint _2214 = _744 + 6u;
    float _2222 = _704 / cbSceneParam._m0[86u].x;
    float _2223 = _705 / cbSceneParam._m0[86u].y;
    vec4 _2237 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2222, _2223, (log2((isnan(cbSceneParam._m0[77u].w) ? _678 : (isnan(_678) ? cbSceneParam._m0[77u].w : min(_678, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2239 = _2237.x;
    float _2240 = _2237.y;
    float _2241 = _2237.z;
    float _2242 = _2237.w;
    float _2322;
    float _2324;
    float _2326;
    float _2328;
    if (_678 > cbSceneParam._m0[78u].w)
    {
        float _2284 = isnan(_678) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _678 : min(cbSceneParam._m0[80u].w, _678));
        float _2285 = _2284 / _678;
        float _2296 = _2285 * _267;
        float _2297 = _268 * _2285;
        float _2298 = (-0.0) - _2297;
        float _2299 = _2285 * _269;
        float _2301 = (cbSceneParam._m0[77u].w * _2298) / _2284;
        float _2302 = _2301 + cbSceneParam._m0[79u].w;
        float _2303 = cbSceneParam._m0[79u].w - _2297;
        float _2309 = sqrt(((_2296 * _2296) + (_2297 * _2297)) + (_2299 * _2299));
        float _2312 = (1.0 - (cbSceneParam._m0[77u].w / _2284)) * _2309;
        float _2318 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2320 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2553;
        if (abs((_2298 - _2301) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2553 = ((((_2302 > 0.0) ? exp2(_2318 * _2302) : (2.0 - exp2(_2320 * _2302))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2312;
        }
        else
        {
            float _2472 = 1.0 / cbSceneParam._m0[80u].x;
            float _2473 = isnan(_2303) ? _2302 : (isnan(_2302) ? _2303 : max(_2302, _2303));
            float _2474 = isnan(_2303) ? _2302 : (isnan(_2302) ? _2303 : min(_2302, _2303));
            float _2483 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : min(_2473, 0.0));
            float _2484 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : min(_2474, 0.0));
            _2553 = ((abs(_2309 / _2298) * cbSceneParam._m0[80u].y) * ((((_2483 - _2484) * 2.0) - ((exp2(_2318 * (isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0)))) - exp2(_2318 * (isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0))))) * _2472)) - ((exp2(_2320 * _2483) - exp2(_2320 * _2484)) * _2472))) + (_2312 * cbSceneParam._m0[80u].z);
        }
        vec4 _2555 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2222, _2223, 1.0), 0.0);
        float _2564 = exp2((_2553 * (-1.44269502162933349609375)) * (1.0 - _2555.w));
        float _2565 = log2(_2564);
        float _2581 = log2(_2242);
        _2322 = (exp2(_2581 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2565 * cbSceneParam._m0[78u].x)) * _2555.x) / cbSceneParam._m0[78u].x)) + _2239;
        _2324 = (exp2(_2581 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2565 * cbSceneParam._m0[78u].y)) * _2555.y) / cbSceneParam._m0[78u].y)) + _2240;
        _2326 = (exp2(_2581 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2565 * cbSceneParam._m0[78u].z)) * _2555.z) / cbSceneParam._m0[78u].z)) + _2241;
        _2328 = _2564 * _2242;
    }
    else
    {
        _2322 = _2239;
        _2324 = _2240;
        _2326 = _2241;
        _2328 = _2242;
    }
    bool _2591;
    vec4 _2338;
    vec4 _2360;
    float _2362;
    float _2366;
    float _2367;
    float _2368;
    float _2369;
    bool _2379;
    for (;;)
    {
        _2338 = cbMatDynParam._m0[0u];
        float _2340 = roundEven(_2338.y);
        bool _2341 = _2340 == 3.0;
        float _2342 = log2(_2328);
        float _2349 = exp2(_2342 * cbSceneParam._m0[78u].x) * _2211;
        float _2350 = exp2(_2342 * cbSceneParam._m0[78u].y) * _2212;
        float _2351 = exp2(_2342 * cbSceneParam._m0[78u].z) * _2213;
        float _2358 = _692 + (-0.5);
        _2360 = cbMtdParam._m0[1u];
        _2362 = _2360.y * _2358;
        float _2365 = (_2340 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2366 = _2365 * (_2341 ? _2349 : (_2349 + (cbSceneParam._m0[72u].w * _2322)));
        _2367 = _2365 * (_2341 ? _2350 : (_2350 + (cbSceneParam._m0[72u].w * _2324)));
        _2368 = _2365 * (_2341 ? _2351 : (_2351 + (cbSceneParam._m0[72u].w * _2326)));
        _2369 = _2358 * 0.999000012874603271484375;
        _2379 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2379)
        {
            if ((cbInstanceData._m0[_744 + 7u].x + _2369) < 0.5)
            {
                _2591 = true;
                break;
            }
        }
        uint _2507 = _746 + uint(_2338.w);
        if ((cbInstanceData._m0[_2507].w < 1.0) && ((cbInstanceData._m0[_2507].w + _2369) < 0.5))
        {
            _2591 = true;
            break;
        }
        if ((_2362 + 1.0) < _2360.x)
        {
            _2591 = true;
            break;
        }
        _2591 = false;
        break;
    }
    float _2822;
    if (_2591)
    {
        discard_state = true;
        _2822 = 0.0;
    }
    else
    {
        _2822 = cbInstanceData._m0[_2214].w;
    }
    SV_Target.x = _2366;
    SV_Target.y = _2367;
    SV_Target.z = _2368;
    SV_Target.w = _2822;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2214].w;
    discard_exit();
}


