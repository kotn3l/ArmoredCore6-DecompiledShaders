#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1124;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _278 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _281 = _278.x;
    vec4 _299 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _316 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _281) + cbMtdParam._m0[12u].x) * _299.x;
    float _318 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _281) + cbMtdParam._m0[12u].y) * _299.y;
    float _320 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _281) + cbMtdParam._m0[12u].z) * _299.z;
    vec4 _341 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _377 = cbMtdParam._m0[21u].w + _263;
    float _378 = cbMtdParam._m0[22u].x + _264;
    float _379 = cbMtdParam._m0[22u].y + _265;
    float _393 = (-0.0) - dot(vec3(_377, _378, _379), vec3(_192, _193, _194));
    float _394 = (-0.0) - dot(vec3(_377, _378, _379), vec3(_206, _207, _208));
    float _395 = (-0.0) - dot(vec3(_377, _378, _379), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _399 = inversesqrt(dot(vec3(_393, _394, _395), vec3(_393, _394, _395)));
    float _402 = _399 * _395;
    float _403 = (_399 * _393) + ((cbMtdParam._m0[19u].w * _281) * ((_341.x * 2.0) + (-1.0)));
    float _404 = (_399 * _394) + ((cbMtdParam._m0[20u].x * _281) * ((_341.y * 2.0) + (-1.0)));
    float _405 = _403 * cbMtdParam._m0[18u].z;
    float _406 = _404 * cbMtdParam._m0[18u].y;
    float _407 = fract(TEXCOORD.x);
    float _408 = fract(TEXCOORD.y);
    float _414;
    if (_405 > 0.0)
    {
        _414 = (1.0 - _407) / _405;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_405 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _407) / _405;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _414 = frontier_phi_3_2_ladder;
    }
    float _422;
    if (_406 > 0.0)
    {
        _422 = (1.0 - _408) / _406;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_406 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _408) / _406;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _422 = frontier_phi_7_6_ladder;
    }
    bool _424 = _402 > 0.0;
    float _426 = _424 ? (cbMtdParam._m0[15u].x / _402) : 5000.0;
    float _427 = isnan(_422) ? _414 : (isnan(_414) ? _422 : min(_414, _422));
    float _428 = isnan(_426) ? _427 : (isnan(_427) ? _426 : min(_427, _426));
    float _432 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _433 = _407 + (-0.5);
    float _436 = _408 + (-0.5);
    float _439 = ((_428 * _402) + _432) / _432;
    vec4 _463 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_433 + (_428 * _405)) / _439) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_436 + (_428 * _406)) / _439) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _476 = (_463.x * _281) * cbMtdParam._m0[9u].x;
    float _477 = (_463.y * _281) * cbMtdParam._m0[9u].y;
    float _478 = (_463.z * _281) * cbMtdParam._m0[9u].z;
    float _496 = _403 * cbMtdParam._m0[20u].z;
    float _497 = _404 * cbMtdParam._m0[20u].y;
    bool _498 = _496 > 0.0;
    float _503;
    if (_498)
    {
        _503 = (1.0 - _407) / _496;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_496 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _407) / _496;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _503 = frontier_phi_11_10_ladder;
    }
    bool _505 = _497 > 0.0;
    float _510;
    if (_505)
    {
        _510 = (1.0 - _408) / _497;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_497 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _408) / _497;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _510 = frontier_phi_15_14_ladder;
    }
    float _513 = _424 ? (cbMtdParam._m0[16u].x / _402) : 5000.0;
    float _514 = isnan(_510) ? _503 : (isnan(_503) ? _510 : min(_503, _510));
    float _515 = isnan(_513) ? _514 : (isnan(_514) ? _513 : min(_514, _513));
    float _519 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _523 = ((_515 * _402) + _519) / _519;
    float _528 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _530 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _546 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_433 + (_515 * _496)) / _523) + 0.5) + _528) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_436 + (_515 * _497)) / _523) + 0.5) + _530) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _561;
    if (_498)
    {
        _561 = (1.0 - _407) / _496;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_496 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _407) / _496;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _561 = frontier_phi_19_18_ladder;
    }
    float _567;
    if (_505)
    {
        _567 = (1.0 - _408) / _497;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_497 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _408) / _497;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _567 = frontier_phi_23_22_ladder;
    }
    float _569 = isnan(_567) ? _561 : (isnan(_561) ? _567 : min(_561, _567));
    float _570 = isnan(_513) ? _569 : (isnan(_569) ? _513 : min(_569, _513));
    float _577 = ((_570 * _402) + _519) / _519;
    vec4 _598 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_433 + (_570 * _496)) / _577) + 0.5) + _528) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_436 + (_570 * _497)) / _577) + 0.5) + _530) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _600 = _598.x;
    vec4 _624 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _628 = _624.z;
    float _631 = (_624.x * 2.0) + (-1.0);
    float _632 = (_624.y * 2.0) + (-1.0);
    float _633 = dot(vec2(_631, _632), vec2(_631, _632));
    float _3251 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _638 = sqrt(1.0 - (isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0))));
    float _641 = fma(_638, _199, fma(_632, _206, _631 * _192));
    float _644 = fma(_638, _200, fma(_632, _207, _631 * _193));
    float _647 = fma(_638, _201, fma(_632, _208, _631 * _194));
    float _651 = inversesqrt(dot(vec3(_641, _644, _647), vec3(_641, _644, _647)));
    float _652 = _651 * _641;
    float _653 = _651 * _644;
    float _654 = _651 * _647;
    float _3262 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _655 = isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0));
    float _3273 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3284 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3295 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _674 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _678 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _679 = _263 * _678;
    float _680 = _264 * _678;
    float _681 = _265 * _678;
    float _687 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _688 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _708 = fma(_654, cbSceneParam._m0[5u].z, fma(_653, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _652));
    float _711 = fma(_654, cbSceneParam._m0[6u].z, fma(_653, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _652));
    float _714 = fma(_654, cbSceneParam._m0[7u].z, fma(_653, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _652));
    uint _727 = uint(roundEven(NORMAL.w)) * 13u;
    uint _729 = _727 + 9u;
    uint _730 = _729 + uint(cbMatDynParam._m0[0u].w);
    float _736 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0)))) * cbInstanceData._m0[_730].x;
    float _737 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0)))) * cbInstanceData._m0[_730].y;
    float _738 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0)))) * cbInstanceData._m0[_730].z;
    float _3306 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _739 = isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0));
    float _3317 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _740 = isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0));
    float _3328 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _741 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
    vec4 _750 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _687, cbSceneParam._m0[86u].y * _688));
    float _753 = _750.x * TEXCOORD.z;
    float _754 = dot(vec3(_652, _653, _654), vec3(_679, _680, _681));
    float _757 = _754 * 2.0;
    float _761 = (_757 * _652) - _679;
    float _762 = (_757 * _653) - _680;
    float _763 = (_757 * _654) - _681;
    float _767 = abs(dot(vec3(_679, _680, _681), vec3(_652, _653, _654)));
    float _3339 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _769 = sqrt(_655);
    float _782 = exp2((_769 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_769 * 3.0));
    float _814 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _818 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1123;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _850 = fma(_822, cbModelParam._m0[26u].z, fma(_818, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _814));
        float _854 = fma(_822, cbModelParam._m0[27u].z, fma(_818, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _814));
        float _858 = fma(_822, cbModelParam._m0[28u].z, fma(_818, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _814));
        float _881 = _814 + _652;
        float _882 = _818 + _653;
        float _883 = _822 + _654;
        float _893 = fma(_883, cbModelParam._m0[26u].z, fma(_882, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _881)) - _850;
        float _894 = fma(_883, cbModelParam._m0[27u].z, fma(_882, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _881)) - _854;
        float _895 = fma(_883, cbModelParam._m0[28u].z, fma(_882, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _881)) - _858;
        float _899 = inversesqrt(dot(vec3(_893, _894, _895), vec3(_893, _894, _895)));
        float _912 = ((_899 * _893) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_850 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _913 = ((_899 * _894) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_854 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _914 = ((_899 * _895) / cbModelParam._m0[34u].z) + ((((((_858 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        float _951 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_917.x + (-0.5));
        float _953 = _951 * (_917.y + (-0.5));
        float _954 = _951 * (_917.z + (-0.5));
        float _961 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_924.x + (-0.5));
        float _963 = _961 * (_924.y + (-0.5));
        float _964 = _961 * (_924.z + (-0.5));
        float _971 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_931.x + (-0.5));
        float _973 = _971 * (_931.y + (-0.5));
        float _974 = _971 * (_931.z + (-0.5));
        float _981 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_938.x + (-0.5));
        float _983 = _981 * (_938.y + (-0.5));
        float _984 = _981 * (_938.z + (-0.5));
        float _985 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _986 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _987 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _988 = _952 * 0.5;
        float _989 = _962 * 0.5;
        float _990 = _972 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1005 = (dot(vec3(_652, _653, _654), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _3365 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1015 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_985 + 9.9999997473787516355514526367188e-06);
        float _3376 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0));
        float _1017 = _1016 * 2.0;
        float _1021 = (1.0 - _1016) / (_1016 + 1.0);
        float _3387 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
        float _1031 = ((((1.0 - _1022) * (_1017 + 2.0)) * exp2(log2(isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0))) * (_1017 + 1.0))) + _1022) * _985;
        float _1032 = _953 * 0.5;
        float _1033 = _963 * 0.5;
        float _1034 = _973 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1048 = (dot(vec3(_652, _653, _654), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _3398 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1057 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_986 + 9.9999997473787516355514526367188e-06);
        float _3409 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _3420 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0))) * (_1059 + 1.0))) + _1064) * _986;
        float _1074 = _954 * 0.5;
        float _1075 = _964 * 0.5;
        float _1076 = _974 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1090 = (dot(vec3(_652, _653, _654), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _3431 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1099 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_987 + 9.9999997473787516355514526367188e-06);
        float _3442 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _3453 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0))) * (_1101 + 1.0))) + _1106) * _987;
        _1123 = _954;
        _1125 = _953;
        _1126 = _952;
        _1127 = _964;
        _1128 = _963;
        _1129 = _962;
        _1130 = _974;
        _1131 = _973;
        _1132 = _972;
        _1133 = _987;
        _1134 = _986;
        _1135 = _985;
        _1136 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0)));
        _1137 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
        _1138 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
    }
    else
    {
        _1123 = _1124;
        _1125 = _1124;
        _1126 = _1124;
        _1127 = _1124;
        _1128 = _1124;
        _1129 = _1124;
        _1130 = _1124;
        _1131 = _1124;
        _1132 = _1124;
        _1133 = _1124;
        _1134 = _1124;
        _1135 = _1124;
        _1136 = 0.0;
        _1137 = 0.0;
        _1138 = 0.0;
    }
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1164 = fma(_822, cbModelParam._m0[30u].z, fma(_818, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _814));
        float _1168 = fma(_822, cbModelParam._m0[31u].z, fma(_818, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _814));
        float _1172 = fma(_822, cbModelParam._m0[32u].z, fma(_818, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _814));
        float _1195 = _814 + _652;
        float _1196 = _818 + _653;
        float _1197 = _822 + _654;
        float _1207 = fma(_1197, cbModelParam._m0[30u].z, fma(_1196, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1195)) - _1164;
        float _1208 = fma(_1197, cbModelParam._m0[31u].z, fma(_1196, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1195)) - _1168;
        float _1209 = fma(_1197, cbModelParam._m0[32u].z, fma(_1196, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1195)) - _1172;
        float _1213 = inversesqrt(dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209)));
        float _1226 = ((_1213 * _1207) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1164 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1227 = ((_1213 * _1208) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1168 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1228 = ((_1213 * _1209) / cbModelParam._m0[35u].z) + ((((((_1172 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        float _1263 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1230.x + (-0.5));
        float _1265 = _1263 * (_1230.y + (-0.5));
        float _1266 = _1263 * (_1230.z + (-0.5));
        float _1273 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1274 = _1273 * (_1237.x + (-0.5));
        float _1275 = _1273 * (_1237.y + (-0.5));
        float _1276 = _1273 * (_1237.z + (-0.5));
        float _1283 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1284 = _1283 * (_1244.x + (-0.5));
        float _1285 = _1283 * (_1244.y + (-0.5));
        float _1286 = _1283 * (_1244.z + (-0.5));
        float _1293 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1294 = _1293 * (_1251.x + (-0.5));
        float _1295 = _1293 * (_1251.y + (-0.5));
        float _1296 = _1293 * (_1251.z + (-0.5));
        float _1297 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1298 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = _1264 * 0.5;
        float _1301 = _1274 * 0.5;
        float _1302 = _1284 * 0.5;
        float _1303 = dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302));
        float _1308 = (_1303 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1303);
        float _1316 = (dot(vec3(_652, _653, _654), vec3(_1308 * _1300, _1308 * _1301, _1308 * _1302)) + 1.0) * 0.5;
        float _3494 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1325 = sqrt(((_1301 * _1301) + (_1300 * _1300)) + (_1302 * _1302)) / (_1297 + 9.9999997473787516355514526367188e-06);
        float _3505 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
        float _1327 = _1326 * 2.0;
        float _1331 = (1.0 - _1326) / (_1326 + 1.0);
        float _3516 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _1341 = ((((1.0 - _1332) * (_1327 + 2.0)) * exp2(log2(isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0))) * (_1327 + 1.0))) + _1332) * _1297;
        float _1342 = _1265 * 0.5;
        float _1343 = _1275 * 0.5;
        float _1344 = _1285 * 0.5;
        float _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
        float _1350 = (_1345 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1345);
        float _1358 = (dot(vec3(_652, _653, _654), vec3(_1350 * _1342, _1350 * _1343, _1350 * _1344)) + 1.0) * 0.5;
        float _3527 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1367 = sqrt(((_1343 * _1343) + (_1342 * _1342)) + (_1344 * _1344)) / (_1298 + 9.9999997473787516355514526367188e-06);
        float _3538 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _3549 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0))) * (_1369 + 1.0))) + _1374) * _1298;
        float _1384 = _1266 * 0.5;
        float _1385 = _1276 * 0.5;
        float _1386 = _1286 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1400 = (dot(vec3(_652, _653, _654), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _3560 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1409 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _3571 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _1411 = _1410 * 2.0;
        float _1415 = (1.0 - _1410) / (_1410 + 1.0);
        float _3582 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _1425 = ((((1.0 - _1416) * (_1411 + 2.0)) * exp2(log2(isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0))) * (_1411 + 1.0))) + _1416) * _1299;
        _1433 = _1266;
        _1434 = _1265;
        _1435 = _1264;
        _1436 = _1276;
        _1437 = _1275;
        _1438 = _1274;
        _1439 = _1286;
        _1440 = _1285;
        _1441 = _1284;
        _1442 = _1299;
        _1443 = _1298;
        _1444 = _1297;
        _1445 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)));
        _1446 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
        _1447 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)));
    }
    else
    {
        _1433 = _1124;
        _1434 = _1124;
        _1435 = _1124;
        _1436 = _1124;
        _1437 = _1124;
        _1438 = _1124;
        _1439 = _1124;
        _1440 = _1124;
        _1441 = _1124;
        _1442 = _1124;
        _1443 = _1124;
        _1444 = _1124;
        _1445 = 0.0;
        _1446 = 0.0;
        _1447 = 0.0;
    }
    float _1457 = (cbModelParam._m0[1u].x * (_1445 - _1136)) + _1136;
    float _1458 = (cbModelParam._m0[1u].x * (_1446 - _1137)) + _1137;
    float _1459 = (cbModelParam._m0[1u].x * (_1447 - _1138)) + _1138;
    float _1480 = fma(_1459, cbSceneParam._m0[89u].z, fma(_1458, cbSceneParam._m0[89u].y, _1457 * cbSceneParam._m0[89u].x));
    float _1483 = fma(_1459, cbSceneParam._m0[90u].z, fma(_1458, cbSceneParam._m0[90u].y, _1457 * cbSceneParam._m0[90u].x));
    float _1486 = fma(_1459, cbSceneParam._m0[91u].z, fma(_1458, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1457));
    float _1501 = _761 * 0.5;
    float _1502 = _762 * 0.5;
    float _1503 = _763 * 0.5;
    float _1504 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1435, _1438, _1441, _1444));
    float _1507 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1434, _1437, _1440, _1443));
    float _1510 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1433, _1436, _1439, _1442));
    float _1544;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1517 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1123, _1127, _1130, _1133));
        float _1521 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1125, _1128, _1131, _1134));
        float _1525 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1126, _1129, _1132, _1135));
        float _1532 = dot(vec4(cbModelParam._m0[39u]), vec4(_1501, _1502, _1503, 1.0));
        _1544 = dot(vec3(isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)), isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)), isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1532) ? 0.0 : (isnan(0.0) ? _1532 : max(0.0, _1532))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1544 = 1.0;
    }
    float _1555;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1546 = dot(vec4(cbModelParam._m0[40u]), vec4(_1501, _1502, _1503, 1.0));
        _1555 = dot(vec3(isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)), isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)), isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1546) ? 0.0 : (isnan(0.0) ? _1546 : max(0.0, _1546))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1555 = 1.0;
    }
    float _1559 = (_1555 * cbModelParam._m0[1u].x) + (_1544 * (1.0 - cbModelParam._m0[1u].x));
    float _1569 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _655);
    float _1570 = isnan(_1569) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1569 : min(cbModelParam._m0[25u].z, _1569));
    float _1651;
    float _1653;
    float _1655;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1618 = fma(_822, cbModelParam._m0[13u].z, fma(_818, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _814)) + cbModelParam._m0[13u].w;
        float _1622 = fma(_822, cbModelParam._m0[14u].z, fma(_818, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _814)) + cbModelParam._m0[14u].w;
        float _1626 = fma(_822, cbModelParam._m0[15u].z, fma(_818, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _814)) + cbModelParam._m0[15u].w;
        float _1629 = fma(_763, cbModelParam._m0[13u].z, fma(_762, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _761));
        float _1632 = fma(_763, cbModelParam._m0[14u].z, fma(_762, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _761));
        float _1635 = fma(_763, cbModelParam._m0[15u].z, fma(_762, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _761));
        float _1663;
        if (_1629 > 0.0)
        {
            _1663 = abs((1.0 - _1618) / _1629);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1629 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1618 + 1.0) / _1629);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1663 = frontier_phi_38_36_ladder;
        }
        float _2008;
        if (_1632 > 0.0)
        {
            _2008 = abs((1.0 - _1622) / _1632);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1622 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _2008 = frontier_phi_47_43_ladder;
        }
        float _2324;
        if (_1635 > 0.0)
        {
            _2324 = abs((1.0 - _1626) / _1635);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1626 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _2324 = frontier_phi_61_54_ladder;
        }
        float _2326 = isnan(_2008) ? _1663 : (isnan(_1663) ? _2008 : min(_1663, _2008));
        float _2327 = isnan(_2324) ? _2326 : (isnan(_2326) ? _2324 : min(_2326, _2324));
        float _2331 = (_2327 * _1629) + _1618;
        float _2332 = (_2327 * _1632) + _1622;
        float _2333 = (_2327 * _1635) + _1626;
        float _2334 = _2327 * 9.9999997473787516355514526367188e-05;
        float _2335 = (-1.0) - _2334;
        float _2337 = _2334 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_2333 > _2337) || ((_2333 < _2335) || ((_2332 > _2337) || ((_2332 < _2335) || ((_2331 < _2335) || (_2331 > _2337))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2459 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2333, cbModelParam._m0[9u].z, fma(_2332, cbModelParam._m0[9u].y, _2331 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2333, cbModelParam._m0[10u].z, fma(_2332, cbModelParam._m0[10u].y, _2331 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2333, cbModelParam._m0[11u].z, fma(_2332, cbModelParam._m0[11u].y, _2331 * cbModelParam._m0[11u].x))), _1570);
            frontier_phi_37_61_ladder = _2459.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _2459.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _2459.x * cbModelParam._m0[1u].y;
        }
        _1651 = frontier_phi_37_61_ladder_2;
        _1653 = frontier_phi_37_61_ladder_1;
        _1655 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1639 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_761, _762, _763), _1570);
        _1651 = _1639.x * cbModelParam._m0[1u].y;
        _1653 = _1639.y * cbModelParam._m0[1u].y;
        _1655 = _1639.z * cbModelParam._m0[1u].y;
    }
    float _1659 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _655);
    float _1660 = isnan(_1659) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1659 : min(cbModelParam._m0[25u].w, _1659));
    float _1748;
    float _1750;
    float _1752;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1712 = fma(_822, cbModelParam._m0[21u].z, fma(_818, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _814)) + cbModelParam._m0[21u].w;
        float _1716 = fma(_822, cbModelParam._m0[22u].z, fma(_818, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _814)) + cbModelParam._m0[22u].w;
        float _1720 = fma(_822, cbModelParam._m0[23u].z, fma(_818, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _814)) + cbModelParam._m0[23u].w;
        float _1723 = fma(_763, cbModelParam._m0[21u].z, fma(_762, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _761));
        float _1726 = fma(_763, cbModelParam._m0[22u].z, fma(_762, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _761));
        float _1729 = fma(_763, cbModelParam._m0[23u].z, fma(_762, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _761));
        float _2013;
        if (_1723 > 0.0)
        {
            _2013 = abs((1.0 - _1712) / _1723);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1723 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1712 + 1.0) / _1723);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _2013 = frontier_phi_49_45_ladder;
        }
        float _2350;
        if (_1726 > 0.0)
        {
            _2350 = abs((1.0 - _1716) / _1726);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1726 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1716 + 1.0) / _1726);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _2350 = frontier_phi_63_56_ladder;
        }
        float _2519;
        if (_1729 > 0.0)
        {
            _2519 = abs((1.0 - _1720) / _1729);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1720 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2519 = frontier_phi_77_72_ladder;
        }
        float _2521 = isnan(_2350) ? _2013 : (isnan(_2013) ? _2350 : min(_2013, _2350));
        float _2522 = isnan(_2519) ? _2521 : (isnan(_2521) ? _2519 : min(_2521, _2519));
        float _2526 = (_2522 * _1723) + _1712;
        float _2527 = (_2522 * _1726) + _1716;
        float _2528 = (_2522 * _1729) + _1720;
        float _2529 = _2522 * 9.9999997473787516355514526367188e-05;
        float _2530 = (-1.0) - _2529;
        float _2532 = _2529 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_2528 > _2532) || ((_2528 < _2530) || ((_2527 > _2532) || ((_2527 < _2530) || ((_2526 < _2530) || (_2526 > _2532))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2761 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2528, cbModelParam._m0[17u].z, fma(_2527, cbModelParam._m0[17u].y, _2526 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2528, cbModelParam._m0[18u].z, fma(_2527, cbModelParam._m0[18u].y, _2526 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2528, cbModelParam._m0[19u].z, fma(_2527, cbModelParam._m0[19u].y, _2526 * cbModelParam._m0[19u].x))), _1660);
            frontier_phi_46_77_ladder = _2761.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _2761.y * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _2761.x * cbModelParam._m0[1u].z;
        }
        _1748 = frontier_phi_46_77_ladder_2;
        _1750 = frontier_phi_46_77_ladder_1;
        _1752 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1732 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_761, _762, _763), _1660);
        _1748 = _1732.x * cbModelParam._m0[1u].z;
        _1750 = _1732.y * cbModelParam._m0[1u].z;
        _1752 = _1732.z * cbModelParam._m0[1u].z;
    }
    float _1764 = ((((1.0 - _782) * ((_769 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_782 * _769)) * _753;
    float _1765 = _1764 * ((cbModelParam._m0[1u].w * (_1748 - _1651)) + _1651);
    float _1766 = _1764 * ((cbModelParam._m0[1u].w * (_1750 - _1653)) + _1653);
    float _1767 = _1764 * ((cbModelParam._m0[1u].w * (_1752 - _1655)) + _1655);
    float _1770 = fma(_1767, cbSceneParam._m0[89u].z, fma(_1766, cbSceneParam._m0[89u].y, _1765 * cbSceneParam._m0[89u].x));
    float _1773 = fma(_1767, cbSceneParam._m0[90u].z, fma(_1766, cbSceneParam._m0[90u].y, _1765 * cbSceneParam._m0[90u].x));
    float _1776 = fma(_1767, cbSceneParam._m0[91u].z, fma(_1766, cbSceneParam._m0[91u].y, _1765 * cbSceneParam._m0[91u].x));
    uvec4 _1786 = floatBitsToUint(cbInstanceData._m0[_727 + 5u]);
    uint _1788 = _1786.x * 14u;
    uint _1789 = _1788 + 13u;
    float _1794 = _753 + (-1.0);
    float _1797 = (cbLight._m0[_1789].x * _1794) + 1.0;
    float _1798 = (cbLight._m0[_1789].y * _1794) + 1.0;
    uint _1799 = _1788 + 5u;
    float _1805 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
    uint _1809 = _1788 + 4u;
    float _1815 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
    uint _1819 = _1788 | 1u;
    float _1830 = dot(vec3(cbLight._m0[_1788].xyz), vec3(_652, _653, _654));
    float _1833 = dot(vec3(cbLight._m0[_1819].xyz), vec3(_652, _653, _654));
    float _3718 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _3729 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1838 = (isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * 0.3183098733425140380859375;
    float _1840 = (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * 0.3183098733425140380859375;
    float _1847 = ((cbLight._m0[_1799].x * _1805) * _1840) + ((cbLight._m0[_1809].x * _1815) * _1838);
    float _1848 = ((_1805 * cbLight._m0[_1799].y) * _1840) + ((_1815 * cbLight._m0[_1809].y) * _1838);
    float _1849 = ((_1805 * cbLight._m0[_1799].z) * _1840) + ((_1815 * cbLight._m0[_1809].z) * _1838);
    uint _1851 = _1788 + 8u;
    float _1864 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1788].w)) * _655) * 0.949999988079071044921875);
    float _1865 = _1864 * _1864;
    float _1866 = cbLight._m0[_1788].x + _679;
    float _1867 = cbLight._m0[_1788].y + _680;
    float _1868 = cbLight._m0[_1788].z + _681;
    float _1872 = inversesqrt(dot(vec3(_1866, _1867, _1868), vec3(_1866, _1867, _1868)));
    float _1873 = _1872 * _1866;
    float _1874 = _1872 * _1867;
    float _1875 = _1872 * _1868;
    float _1876 = dot(vec3(_652, _653, _654), vec3(cbLight._m0[_1788].xyz));
    float _3740 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1879 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    float _3751 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _1880 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _1881 = dot(vec3(_652, _653, _654), vec3(_1873, _1874, _1875));
    float _3762 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _1884 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
    float _1885 = dot(vec3(cbLight._m0[_1788].xyz), vec3(_1873, _1874, _1875));
    float _3773 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1889 = _1865 * _1865;
    float _1893 = ((_1884 * _1884) * (_1889 + (-1.0))) + 1.0;
    float _1904 = (exp2(log2(1.0 - (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1905 = 1.0 - _1865;
    float _1916 = (0.5 / (((_1880 * ((_1879 * _1905) + _1865)) + 9.9999999392252902907785028219223e-09) + (((_1880 * _1905) + _1865) * _1879))) * _1879;
    float _3784 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _1918 = (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (_1889 / ((_1893 * _1893) * 3.141590118408203125));
    uint _1929 = _1788 + 9u;
    float _1940 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1819].w)) * _655) * 0.949999988079071044921875);
    float _1941 = _1940 * _1940;
    float _1942 = cbLight._m0[_1819].x + _679;
    float _1943 = cbLight._m0[_1819].y + _680;
    float _1944 = cbLight._m0[_1819].z + _681;
    float _1948 = inversesqrt(dot(vec3(_1942, _1943, _1944), vec3(_1942, _1943, _1944)));
    float _1949 = _1948 * _1942;
    float _1950 = _1948 * _1943;
    float _1951 = _1948 * _1944;
    float _1952 = dot(vec3(_652, _653, _654), vec3(cbLight._m0[_1819].xyz));
    float _3795 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1955 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _1956 = dot(vec3(_652, _653, _654), vec3(_1949, _1950, _1951));
    float _3806 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1959 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _1960 = dot(vec3(cbLight._m0[_1819].xyz), vec3(_1949, _1950, _1951));
    float _3817 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _1964 = _1941 * _1941;
    float _1968 = ((_1959 * _1959) * (_1964 + (-1.0))) + 1.0;
    float _1977 = (exp2(log2(1.0 - (isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1978 = 1.0 - _1941;
    float _1988 = (0.5 / (((_1880 * ((_1955 * _1978) + _1941)) + 9.9999999392252902907785028219223e-09) + (((_1880 * _1978) + _1941) * _1955))) * _1955;
    float _3828 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1990 = (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1964 / ((_1968 * _1968) * 3.141590118408203125));
    float _2000 = (((_1977 * cbLight._m0[_1929].x) * _1990) * _1805) + (((_1904 * cbLight._m0[_1851].x) * _1918) * _1815);
    float _2001 = (((_1977 * cbLight._m0[_1929].y) * _1990) * _1805) + (((_1904 * cbLight._m0[_1851].y) * _1918) * _1815);
    float _2002 = (((_1977 * cbLight._m0[_1929].z) * _1990) * _1805) + (((_1904 * cbLight._m0[_1851].z) * _1918) * _1815);
    float _2117;
    float _2119;
    float _2121;
    float _2123;
    float _2125;
    float _2127;
    if (_1786.y == 0u)
    {
        float _2057 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2058 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2057;
        float _2059 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2057;
        float _2060 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2057;
        uvec4 _2072 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2073 = _2072.x;
        uint _2084 = uint((float(_2072.y) * floor(float(uint(cbSceneParam._m0[85u].y * _688) / _2073))) + floor(float(uint(cbSceneParam._m0[85u].x * _687) / _2073)));
        float _2094 = (log2(_2060 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2095 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        uint _2098 = uint(isnan(14.0) ? _2095 : (isnan(_2095) ? 14.0 : min(_2095, 14.0)));
        uvec4 _2103 = texelFetch(g_lightClusterGridBuffer, int(((_2098 << 2u) + (_2084 << 6u)) >> 2u));
        uint _2104 = _2103.x;
        uint _2105 = _2072.z;
        float _2211;
        float _2213;
        float _2215;
        float _2217;
        float _2219;
        float _2221;
        if (((((1u << ((_2105 >> 4u) & 15u)) + 4294967295u) & _2104) == 0u) || ((_2105 & 240u) == 0u))
        {
            _2211 = 0.0;
            _2213 = 0.0;
            _2215 = 0.0;
            _2217 = 0.0;
            _2219 = 0.0;
            _2221 = 0.0;
        }
        else
        {
            float _2212;
            float _2214;
            float _2216;
            float _2218;
            float _2220;
            float _2222;
            float _2387 = 0.0;
            float _2388 = 0.0;
            float _2389 = 0.0;
            float _2390 = 0.0;
            float _2391 = 0.0;
            float _2392 = 0.0;
            uint _2393 = 0u;
            uint _2402;
            bool _2403;
            for (;;)
            {
                _2402 = texelFetch(g_lightClassification, int((((_2098 << 5u) + (_2084 << 9u)) + (_2393 << 2u)) >> 2u)).x;
                _2403 = _2402 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2403)
                {
                    frontier_phi_74_pred = _2390;
                    frontier_phi_74_pred_1 = _2389;
                    frontier_phi_74_pred_2 = _2388;
                    frontier_phi_74_pred_3 = _2387;
                    frontier_phi_74_pred_4 = _2391;
                    frontier_phi_74_pred_5 = _2392;
                }
                else
                {
                    float _2562;
                    float _2563;
                    float _2564;
                    float _2565;
                    float _2566;
                    float _2567;
                    uint _2568;
                    _2562 = _2387;
                    _2563 = _2388;
                    _2564 = _2389;
                    _2565 = _2390;
                    _2566 = _2391;
                    _2567 = _2392;
                    _2568 = _2402;
                    float _2468;
                    float _2469;
                    float _2470;
                    float _2471;
                    float _2472;
                    float _2473;
                    for (;;)
                    {
                        uint _2572 = uint(findLSB(_2568)) + (_2393 << 5u);
                        uint _2569 = (_2568 + 4294967295u) & _2568;
                        uint _2574 = _2572 * 48u;
                        vec4 _2588 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2574)).x, texelFetch(g_PointLightRenderingBuffer, int(_2574 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2574 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2574 + 3u)).x));
                        uint _2594 = (_2572 * 48u) + 4u;
                        vec4 _2607 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2594)).x, texelFetch(g_PointLightRenderingBuffer, int(_2594 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2594 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2594 + 3u)).x));
                        uint _2613 = (_2572 * 48u) + 8u;
                        vec3 _2624 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2613)).x, texelFetch(g_PointLightRenderingBuffer, int(_2613 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2613 + 2u)).x));
                        float _2628 = _2588.x - _2058;
                        float _2629 = _2588.y - _2059;
                        float _2630 = _2588.z - _2060;
                        float _2631 = dot(vec3(_2628, _2629, _2630), vec3(_2628, _2629, _2630));
                        float _2634 = inversesqrt(_2631);
                        float _2635 = _2634 * _2628;
                        float _2636 = _2634 * _2629;
                        float _2637 = _2634 * _2630;
                        float _2638 = dot(vec3(_708, _711, _714), vec3(_2635, _2636, _2637));
                        float _2643 = 1.0 - (_2631 * _2588.w);
                        float _3849 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
                        float _2644 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
                        float _2645 = sqrt(_2631) * _2607.w;
                        float _2648 = 1.39999997615814208984375 / (_2645 + 1.39999997615814208984375);
                        float _2649 = _2648 * _2648;
                        float _2652 = ((1.0 - _2649) * _2638) + _2649;
                        float _2655 = _2645 * _2645;
                        float _2659 = ((isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0))) * _2644) / ((_2655 * 0.699999988079071044921875) + 1.0);
                        float _2663 = (-0.0) - _2058;
                        float _2664 = (-0.0) - _2059;
                        float _2665 = (-0.0) - _2060;
                        float _2669 = inversesqrt(dot(vec3(_2663, _2664, _2665), vec3(_2663, _2664, _2665)));
                        float _2670 = _2669 * _2663;
                        float _2671 = _2669 * _2664;
                        float _2672 = _2669 * _2665;
                        float _2680 = exp2(log2(1.0 / ((_2655 * 3.5) + 5.0)) * 0.25);
                        float _2681 = 1.0 - _769;
                        float _2688 = sqrt(1.0 - ((1.0 - (_2681 * _2681)) * (1.0 - (_2680 * _2680))));
                        float _2689 = _2688 * _2688;
                        float _2690 = _2689 * _2689;
                        float _2691 = _2670 + _2635;
                        float _2692 = _2671 + _2636;
                        float _2693 = _2672 + _2637;
                        float _2697 = inversesqrt(dot(vec3(_2691, _2692, _2693), vec3(_2691, _2692, _2693)));
                        float _2701 = dot(vec3(_708, _711, _714), vec3(_2670, _2671, _2672));
                        float _3865 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
                        float _2704 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
                        float _2705 = dot(vec3(_708, _711, _714), vec3(_2697 * _2691, _2697 * _2692, _2697 * _2693));
                        float _3876 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
                        float _2708 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
                        float _2712 = ((_2708 * _2708) * (_2690 + (-1.0))) + 1.0;
                        float _2713 = _2648 * _2689;
                        float _2714 = _2713 * _2713;
                        float _2717 = ((1.0 - _2714) * _2638) + _2714;
                        float _3887 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
                        float _2718 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
                        float _2719 = 1.0 - _2689;
                        float _2729 = (0.5 / (((_2718 * ((_2704 * _2719) + _2689)) + 9.9999999392252902907785028219223e-09) + (((_2718 * _2719) + _2689) * _2704))) * _2718;
                        float _3898 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
                        float _2740 = (((_2690 * 3.1415927410125732421875) * (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0)))) / ((_2712 * _2712) * ((_2655 * 2.1991131305694580078125) + 3.141590118408203125))) * _2644;
                        _2471 = (_2659 * _2607.x) + _2565;
                        _2472 = (_2659 * _2607.y) + _2566;
                        _2473 = (_2659 * _2607.z) + _2567;
                        _2468 = (_2740 * _2624.x) + _2562;
                        _2469 = (_2740 * _2624.y) + _2563;
                        _2470 = (_2740 * _2624.z) + _2564;
                        if (_2569 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2562 = _2468;
                            _2563 = _2469;
                            _2564 = _2470;
                            _2565 = _2471;
                            _2566 = _2472;
                            _2567 = _2473;
                            _2568 = _2569;
                        }
                    }
                    frontier_phi_74_pred = _2471;
                    frontier_phi_74_pred_1 = _2470;
                    frontier_phi_74_pred_2 = _2469;
                    frontier_phi_74_pred_3 = _2468;
                    frontier_phi_74_pred_4 = _2472;
                    frontier_phi_74_pred_5 = _2473;
                }
                _2218 = frontier_phi_74_pred;
                _2216 = frontier_phi_74_pred_1;
                _2214 = frontier_phi_74_pred_2;
                _2212 = frontier_phi_74_pred_3;
                _2220 = frontier_phi_74_pred_4;
                _2222 = frontier_phi_74_pred_5;
                uint _2394 = _2393 + 1u;
                if (_2394 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2387 = _2212;
                    _2388 = _2214;
                    _2389 = _2216;
                    _2390 = _2218;
                    _2391 = _2220;
                    _2392 = _2222;
                    _2393 = _2394;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2211 = _2212;
            _2213 = _2214;
            _2215 = _2216;
            _2217 = _2218;
            _2219 = _2220;
            _2221 = _2222;
        }
        uvec4 _2225 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2226 = _2225.z;
        uint _2228 = (_2226 >> 8u) & 15u;
        float _2355;
        float _2357;
        float _2359;
        float _2361;
        float _2363;
        float _2365;
        if (((4294967295u << _2228) & _2104) == 0u)
        {
            _2355 = _2211;
            _2357 = _2213;
            _2359 = _2215;
            _2361 = _2217;
            _2363 = _2219;
            _2365 = _2221;
        }
        else
        {
            float _2380 = inversesqrt(dot(vec3(_2058, _2059, _2060), vec3(_2058, _2059, _2060)));
            float _2381 = _2380 * _2058;
            float _2382 = _2380 * _2059;
            float _2383 = _2380 * _2060;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2228 < ((_2226 >> 12u) & 15u))
            {
                float _2356;
                float _2358;
                float _2360;
                float _2362;
                float _2364;
                float _2366;
                float _2545 = _2211;
                float _2546 = _2213;
                float _2547 = _2215;
                float _2548 = _2217;
                float _2549 = _2219;
                float _2550 = _2221;
                uint _2551 = _2228;
                uint _2560;
                bool _2561;
                for (;;)
                {
                    _2560 = texelFetch(g_lightClassification, int((((_2098 << 5u) + (_2084 << 9u)) + (_2551 << 2u)) >> 2u)).x;
                    _2561 = _2560 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2561)
                    {
                        frontier_phi_83_pred = _2548;
                        frontier_phi_83_pred_1 = _2547;
                        frontier_phi_83_pred_2 = _2546;
                        frontier_phi_83_pred_3 = _2545;
                        frontier_phi_83_pred_4 = _2550;
                        frontier_phi_83_pred_5 = _2549;
                    }
                    else
                    {
                        float _2766;
                        float _2767;
                        float _2768;
                        float _2769;
                        float _2770;
                        float _2771;
                        float _3059;
                        float _3060;
                        float _3061;
                        float _3062;
                        float _3063;
                        float _3064;
                        float _2779 = _2545;
                        float _2780 = _2546;
                        float _2781 = _2547;
                        float _2782 = _2548;
                        float _2783 = _2549;
                        float _2784 = _2550;
                        uint _2785 = _2560;
                        uint _2786;
                        vec4 _2811;
                        float _2812;
                        vec4 _2827;
                        vec3 _2839;
                        vec4 _2854;
                        vec4 _2869;
                        float _2915;
                        bool _2916;
                        for (;;)
                        {
                            uint _2796 = ((_2551 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2785));
                            _2786 = (_2785 + 4294967295u) & _2785;
                            uint _2798 = _2796 * 40u;
                            _2811 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2798)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 3u)).x));
                            _2812 = _2811.w;
                            uint _2814 = (_2796 * 40u) + 4u;
                            _2827 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2814)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 3u)).x));
                            uint _2829 = (_2796 * 40u) + 8u;
                            _2839 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2829)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 2u)).x));
                            uint _2841 = (_2796 * 40u) + 16u;
                            _2854 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2841)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 3u)).x));
                            uint _2856 = (_2796 * 40u) + 20u;
                            _2869 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2856)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 3u)).x));
                            uint _2871 = (_2796 * 40u) + 24u;
                            vec4 _2884 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2871)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 3u)).x));
                            uint _2890 = (_2796 * 40u) + 28u;
                            vec4 _2903 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2890)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 3u)).x));
                            _2915 = fma(_2060, _2903.z, fma(_2059, _2903.y, _2903.x * _2058)) + _2903.w;
                            _2916 = !((fma(_2060, _2884.z, fma(_2059, _2884.y, _2884.x * _2058)) + _2884.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_2916)
                            {
                                float _2943 = _2811.x - _2058;
                                float _2944 = _2811.y - _2059;
                                float _2945 = _2811.z - _2060;
                                float _2946 = dot(vec3(_2943, _2944, _2945), vec3(_2943, _2944, _2945));
                                float _2949 = inversesqrt(_2946);
                                float _2950 = _2949 * _2943;
                                float _2951 = _2949 * _2944;
                                float _2952 = _2949 * _2945;
                                float _2956 = 1.0 - (_2946 / (_2812 * _2812));
                                float _3909 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                                float _2957 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
                                float _2961 = sqrt(_2946) * _2827.w;
                                float _2963 = 1.39999997615814208984375 / (_2961 + 1.39999997615814208984375);
                                float _2964 = _2963 * _2963;
                                float _2967 = ((1.0 - _2964) * dot(vec3(_2950, _2951, _2952), vec3(_708, _711, _714))) + _2964;
                                float _2970 = _2961 * _2961;
                                float _2974 = (fma(_2060, _2854.z, fma(_2059, _2854.y, _2854.x * _2058)) + _2854.w) / _2915;
                                float _2975 = (fma(_2060, _2869.z, fma(_2059, _2869.y, _2869.x * _2058)) + _2869.w) / _2915;
                                float _2979 = 1.0 - dot(vec2(_2974, _2975), vec2(_2974, _2975));
                                float _3925 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
                                float _2980 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
                                float _2981 = _2980 * (((isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0))) * _2957) / ((_2970 * 0.699999988079071044921875) + 1.0));
                                float _2993 = exp2(log2(1.0 / ((_2970 * 3.5) + 5.0)) * 0.25);
                                float _2994 = 1.0 - _769;
                                float _3001 = sqrt(1.0 - ((1.0 - (_2994 * _2994)) * (1.0 - (_2993 * _2993))));
                                float _3002 = _3001 * _3001;
                                float _3003 = _3002 * _3002;
                                float _3004 = _2950 - _2381;
                                float _3005 = _2951 - _2382;
                                float _3006 = _2952 - _2383;
                                float _3010 = inversesqrt(dot(vec3(_3004, _3005, _3006), vec3(_3004, _3005, _3006)));
                                float _3014 = dot(vec3(_708, _711, _714), vec3((-0.0) - _2381, (-0.0) - _2382, (-0.0) - _2383));
                                float _3936 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                                float _3017 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
                                float _3018 = dot(vec3(_708, _711, _714), vec3(_3010 * _3004, _3010 * _3005, _3010 * _3006));
                                float _3947 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                                float _3021 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
                                float _3025 = ((_3021 * _3021) * (_3003 + (-1.0))) + 1.0;
                                float _3026 = _2963 * _3002;
                                float _3027 = _3026 * _3026;
                                float _3033 = ((1.0 - _3027) * dot(vec3(_708, _711, _714), vec3(_2950, _2951, _2952))) + _3027;
                                float _3958 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                                float _3034 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
                                float _3035 = 1.0 - _3002;
                                float _3045 = (0.5 / (((_3034 * ((_3017 * _3035) + _3002)) + 9.9999999392252902907785028219223e-09) + (((_3034 * _3035) + _3002) * _3017))) * _3034;
                                float _3969 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                                float _3055 = (_2980 * _2957) * (((_3003 * 3.1415927410125732421875) * (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) / ((_3025 * _3025) * ((_2970 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _2981 * _2827.x;
                                frontier_phi_89_pred_1 = _3055 * _2839.z;
                                frontier_phi_89_pred_2 = _3055 * _2839.y;
                                frontier_phi_89_pred_3 = _3055 * _2839.x;
                                frontier_phi_89_pred_4 = _2981 * _2827.z;
                                frontier_phi_89_pred_5 = _2981 * _2827.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3062 = frontier_phi_89_pred;
                            _3061 = frontier_phi_89_pred_1;
                            _3060 = frontier_phi_89_pred_2;
                            _3059 = frontier_phi_89_pred_3;
                            _3064 = frontier_phi_89_pred_4;
                            _3063 = frontier_phi_89_pred_5;
                            _2769 = _3062 + _2782;
                            _2770 = _3063 + _2783;
                            _2771 = _3064 + _2784;
                            _2766 = _3059 + _2779;
                            _2767 = _3060 + _2780;
                            _2768 = _3061 + _2781;
                            if (_2786 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2779 = _2766;
                                _2780 = _2767;
                                _2781 = _2768;
                                _2782 = _2769;
                                _2783 = _2770;
                                _2784 = _2771;
                                _2785 = _2786;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _2769;
                        frontier_phi_83_pred_1 = _2768;
                        frontier_phi_83_pred_2 = _2767;
                        frontier_phi_83_pred_3 = _2766;
                        frontier_phi_83_pred_4 = _2771;
                        frontier_phi_83_pred_5 = _2770;
                    }
                    _2362 = frontier_phi_83_pred;
                    _2360 = frontier_phi_83_pred_1;
                    _2358 = frontier_phi_83_pred_2;
                    _2356 = frontier_phi_83_pred_3;
                    _2366 = frontier_phi_83_pred_4;
                    _2364 = frontier_phi_83_pred_5;
                    uint _2552 = _2551 + 1u;
                    if (_2552 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2545 = _2356;
                        _2546 = _2358;
                        _2547 = _2360;
                        _2548 = _2362;
                        _2549 = _2364;
                        _2550 = _2366;
                        _2551 = _2552;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2366;
                frontier_phi_65_66_ladder_1 = _2364;
                frontier_phi_65_66_ladder_2 = _2360;
                frontier_phi_65_66_ladder_3 = _2358;
                frontier_phi_65_66_ladder_4 = _2362;
                frontier_phi_65_66_ladder_5 = _2356;
            }
            else
            {
                frontier_phi_65_66_ladder = _2221;
                frontier_phi_65_66_ladder_1 = _2219;
                frontier_phi_65_66_ladder_2 = _2215;
                frontier_phi_65_66_ladder_3 = _2213;
                frontier_phi_65_66_ladder_4 = _2217;
                frontier_phi_65_66_ladder_5 = _2211;
            }
            _2355 = frontier_phi_65_66_ladder_5;
            _2357 = frontier_phi_65_66_ladder_3;
            _2359 = frontier_phi_65_66_ladder_2;
            _2361 = frontier_phi_65_66_ladder_4;
            _2363 = frontier_phi_65_66_ladder_1;
            _2365 = frontier_phi_65_66_ladder;
        }
        float _2370 = isnan(1.0) ? _753 : (isnan(_753) ? 1.0 : min(_753, 1.0));
        _2117 = (_2370 * _2361) + _1847;
        _2119 = (_2370 * _2363) + _1848;
        _2121 = (_2370 * _2365) + _1849;
        _2123 = ((_2355 * 0.039999999105930328369140625) * _2370) + _2000;
        _2125 = ((_2357 * 0.039999999105930328369140625) * _2370) + _2001;
        _2127 = ((_2359 * 0.039999999105930328369140625) * _2370) + _2002;
    }
    else
    {
        _2117 = _1847;
        _2119 = _1848;
        _2121 = _1849;
        _2123 = _2000;
        _2125 = _2001;
        _2127 = _2002;
    }
    uint _2133 = _729 + uint(cbMatDynParam._m0[0u].w);
    float _3985 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _3996 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _4007 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _2158 = (((isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_2117 + ((isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))) * _753))) + ((_2123 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1559)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2133].x * ((((((cbMtdParam._m0[10u].x * _281) * _546.x) - _476) * _281) * _600) + _476));
    float _2160 = ((cbInstanceData._m0[_2133].y * ((((((cbMtdParam._m0[10u].y * _281) * _546.y) - _477) * _281) * _600) + _477)) + ((_2125 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1559)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_2119 + ((isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))) * _753)));
    float _2162 = ((cbInstanceData._m0[_2133].z * ((((((cbMtdParam._m0[10u].z * _281) * _546.z) - _478) * _281) * _600) + _478)) + ((_2127 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1559)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_2121 + ((isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))) * _753)));
    uint _2166 = _727 + 6u;
    float _2174 = _687 / cbSceneParam._m0[86u].x;
    float _2175 = _688 / cbSceneParam._m0[86u].y;
    vec4 _2189 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2174, _2175, (log2((isnan(cbSceneParam._m0[77u].w) ? _674 : (isnan(_674) ? cbSceneParam._m0[77u].w : min(_674, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2191 = _2189.x;
    float _2192 = _2189.y;
    float _2193 = _2189.z;
    float _2194 = _2189.w;
    float _2274;
    float _2276;
    float _2278;
    float _2280;
    if (_674 > cbSceneParam._m0[78u].w)
    {
        float _2236 = isnan(_674) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _674 : min(cbSceneParam._m0[80u].w, _674));
        float _2237 = _2236 / _674;
        float _2248 = _2237 * _263;
        float _2249 = _264 * _2237;
        float _2250 = (-0.0) - _2249;
        float _2251 = _2237 * _265;
        float _2253 = (cbSceneParam._m0[77u].w * _2250) / _2236;
        float _2254 = _2253 + cbSceneParam._m0[79u].w;
        float _2255 = cbSceneParam._m0[79u].w - _2249;
        float _2261 = sqrt(((_2248 * _2248) + (_2249 * _2249)) + (_2251 * _2251));
        float _2264 = (1.0 - (cbSceneParam._m0[77u].w / _2236)) * _2261;
        float _2270 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2272 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2481;
        if (abs((_2250 - _2253) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2481 = ((((_2254 > 0.0) ? exp2(_2270 * _2254) : (2.0 - exp2(_2272 * _2254))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2264;
        }
        else
        {
            float _2416 = 1.0 / cbSceneParam._m0[80u].x;
            float _2417 = isnan(_2255) ? _2254 : (isnan(_2254) ? _2255 : max(_2254, _2255));
            float _2418 = isnan(_2255) ? _2254 : (isnan(_2254) ? _2255 : min(_2254, _2255));
            float _2427 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : min(_2417, 0.0));
            float _2428 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : min(_2418, 0.0));
            _2481 = ((abs(_2261 / _2250) * cbSceneParam._m0[80u].y) * ((((_2427 - _2428) * 2.0) - ((exp2(_2270 * (isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0)))) - exp2(_2270 * (isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0))))) * _2416)) - ((exp2(_2272 * _2427) - exp2(_2272 * _2428)) * _2416))) + (_2264 * cbSceneParam._m0[80u].z);
        }
        vec4 _2483 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2174, _2175, 1.0), 0.0);
        float _2492 = exp2((_2481 * (-1.44269502162933349609375)) * (1.0 - _2483.w));
        float _2493 = log2(_2492);
        float _2509 = log2(_2194);
        _2274 = (exp2(_2509 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2493 * cbSceneParam._m0[78u].x)) * _2483.x) / cbSceneParam._m0[78u].x)) + _2191;
        _2276 = (exp2(_2509 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2493 * cbSceneParam._m0[78u].y)) * _2483.y) / cbSceneParam._m0[78u].y)) + _2192;
        _2278 = (exp2(_2509 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2493 * cbSceneParam._m0[78u].z)) * _2483.z) / cbSceneParam._m0[78u].z)) + _2193;
        _2280 = _2492 * _2194;
    }
    else
    {
        _2274 = _2191;
        _2276 = _2192;
        _2278 = _2193;
        _2280 = _2194;
    }
    float _2292 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2293 = _2292 == 3.0;
    float _2294 = log2(_2280);
    float _2301 = exp2(_2294 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0)));
    float _2302 = exp2(_2294 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0)));
    float _2303 = exp2(_2294 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0)));
    float _2312 = (_2292 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2312 * (_2293 ? _2301 : (_2301 + (cbSceneParam._m0[72u].w * _2274)));
    SV_Target.y = _2312 * (_2293 ? _2302 : (_2302 + (cbSceneParam._m0[72u].w * _2276)));
    SV_Target.z = _2312 * (_2293 ? _2303 : (_2303 + (cbSceneParam._m0[72u].w * _2278)));
    SV_Target.w = cbInstanceData._m0[_2166].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2166].w;
}


