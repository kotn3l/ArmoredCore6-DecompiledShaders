#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _441;
float _3203;
float _3204;
float _3205;
float _3206;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _278 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _281 = _278.x;
    vec4 _299 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _316 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _281) + cbMtdParam._m0[12u].x) * _299.x;
    float _318 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _281) + cbMtdParam._m0[12u].y) * _299.y;
    float _320 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _281) + cbMtdParam._m0[12u].z) * _299.z;
    vec4 _354 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _369 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _376 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _388 = cbMtdParam._m0[22u].z + _263;
    float _389 = cbMtdParam._m0[22u].w + _264;
    float _390 = cbMtdParam._m0[23u].x + _265;
    float _404 = (-0.0) - dot(vec3(_388, _389, _390), vec3(_369 * _192, _369 * _193, _369 * _194));
    float _405 = (-0.0) - dot(vec3(_388, _389, _390), vec3(_376 * _206, _376 * _207, _376 * _208));
    float _406 = (-0.0) - dot(vec3(_388, _389, _390), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _410 = inversesqrt(dot(vec3(_404, _405, _406), vec3(_404, _405, _406)));
    float _411 = _410 * _406;
    float _416 = ((cbMtdParam._m0[19u].y * _404) * _410) + (((_354.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _417 = ((cbMtdParam._m0[19u].z * _405) * _410) + (((_354.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _420 = fract(cbMtdParam._m0[19u].y * TEXCOORD.x);
    float _421 = fract(cbMtdParam._m0[19u].z * TEXCOORD.y);
    float _439;
    float _442;
    float _444;
    if (_416 > 0.0)
    {
        float _425 = (1.0 - _420) / _416;
        _439 = _425;
        _442 = ((cbMtdParam._m0[16u].z + 1.0) - fract(_425 * _411)) * 0.16666667163372039794921875;
        _444 = (fract((_425 * _417) + _421) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_416 < 0.0)
        {
            float _440 = ((-0.0) - _420) / _416;
            frontier_phi_3_2_ladder = _440;
            frontier_phi_3_2_ladder_1 = (fract((_440 * _417) + _421) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_440 * _411) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _441;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _439 = frontier_phi_3_2_ladder;
        _442 = frontier_phi_3_2_ladder_2;
        _444 = frontier_phi_3_2_ladder_1;
    }
    float _470;
    float _472;
    float _474;
    if (_417 > 0.0)
    {
        float _457 = (1.0 - _421) / _417;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_457 < _439)
        {
            frontier_phi_8_5_ladder = (fract(_457 * _411) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_457 * _416) + _420) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _457;
        }
        else
        {
            frontier_phi_8_5_ladder = _444;
            frontier_phi_8_5_ladder_1 = _442;
            frontier_phi_8_5_ladder_2 = _439;
        }
        _470 = frontier_phi_8_5_ladder_2;
        _472 = frontier_phi_8_5_ladder_1;
        _474 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_417 < 0.0)
        {
            float _471 = ((-0.0) - _421) / _417;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_471 < _439)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_471 * _411) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_471 * _416) + _420) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _471;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _444;
                frontier_phi_8_6_ladder_9_ladder_1 = _442;
                frontier_phi_8_6_ladder_9_ladder_2 = _439;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _444;
            frontier_phi_8_6_ladder_1 = _442;
            frontier_phi_8_6_ladder_2 = _439;
        }
        _470 = frontier_phi_8_6_ladder_2;
        _472 = frontier_phi_8_6_ladder_1;
        _474 = frontier_phi_8_6_ladder;
    }
    float _478 = (_411 > 0.0) ? (cbMtdParam._m0[16u].y / _411) : 5000.0;
    float _491;
    float _492;
    if (_478 < _470)
    {
        _491 = ((_420 + cbMtdParam._m0[16u].z) + (_478 * _416)) * 0.16666667163372039794921875;
        _492 = (((_478 * _417) + _421) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _491 = _472;
        _492 = _474;
    }
    vec4 _494 = texture(sampler2D(M_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_491, _492));
    float _505 = _281 * 0.1500000059604644775390625;
    float _513 = (_505 * (((cbMtdParam._m0[13u].x * _281) * _494.x) - _316)) + _316;
    float _514 = (_505 * (((cbMtdParam._m0[13u].y * _281) * _494.y) - _318)) + _318;
    float _515 = (_505 * (((cbMtdParam._m0[13u].z * _281) * _494.z) - _320)) + _320;
    vec4 _527 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _531 = _527.z;
    float _534 = (_527.x * 2.0) + (-1.0);
    float _535 = (_527.y * 2.0) + (-1.0);
    float _536 = dot(vec2(_534, _535), vec2(_534, _535));
    float _3215 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _541 = sqrt(1.0 - (isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0))));
    float _544 = fma(_541, _199, fma(_535, _206, _534 * _192));
    float _547 = fma(_541, _200, fma(_535, _207, _534 * _193));
    float _550 = fma(_541, _201, fma(_535, _208, _534 * _194));
    float _554 = inversesqrt(dot(vec3(_544, _547, _550), vec3(_544, _547, _550)));
    float _555 = _554 * _544;
    float _556 = _554 * _547;
    float _557 = _554 * _550;
    float _3226 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _558 = isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0));
    float _3237 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _3248 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _3259 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _577 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _581 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _582 = _263 * _581;
    float _583 = _264 * _581;
    float _584 = _265 * _581;
    vec4 _589 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _591 = _589.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _754 = sqrt(((_263 * _263) + (_264 * _264)) + (_265 * _265));
        float _760 = (cbMatDynParam._m0[5u].x * _754) + cbMatDynParam._m0[5u].y;
        float _3270 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _761 = isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0));
        float _765 = (cbMatDynParam._m0[5u].z * _754) + cbMatDynParam._m0[5u].w;
        float _3281 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0))) - _761)) + _761) < ((_591 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _609 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _610 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _630 = fma(_557, cbSceneParam._m0[5u].z, fma(_556, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _555));
    float _633 = fma(_557, cbSceneParam._m0[6u].z, fma(_556, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _555));
    float _636 = fma(_557, cbSceneParam._m0[7u].z, fma(_556, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _555));
    uint _649 = uint(roundEven(NORMAL.w)) * 13u;
    uint _650 = _649 + 9u;
    uint _651 = _650 + uint(cbMatDynParam._m0[0u].w);
    float _657 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0)))) * cbInstanceData._m0[_651].x;
    float _658 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0)))) * cbInstanceData._m0[_651].y;
    float _659 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0)))) * cbInstanceData._m0[_651].z;
    float _3292 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _660 = isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0));
    float _3303 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _661 = isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0));
    float _3314 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _662 = isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0));
    vec4 _671 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _609, cbSceneParam._m0[86u].y * _610));
    float _674 = _671.x * TEXCOORD.z;
    float _675 = dot(vec3(_555, _556, _557), vec3(_582, _583, _584));
    float _678 = _675 * 2.0;
    float _682 = (_678 * _555) - _582;
    float _683 = (_678 * _556) - _583;
    float _684 = (_678 * _557) - _584;
    float _688 = abs(dot(vec3(_582, _583, _584), vec3(_555, _556, _557)));
    float _3325 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _690 = sqrt(_558);
    float _703 = exp2((_690 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_690 * 3.0));
    float _735 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _739 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _743 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _799 = fma(_743, cbModelParam._m0[26u].z, fma(_739, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _735));
        float _803 = fma(_743, cbModelParam._m0[27u].z, fma(_739, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _735));
        float _807 = fma(_743, cbModelParam._m0[28u].z, fma(_739, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _735));
        float _831 = _735 + _555;
        float _832 = _739 + _556;
        float _833 = _743 + _557;
        float _843 = fma(_833, cbModelParam._m0[26u].z, fma(_832, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _831)) - _799;
        float _844 = fma(_833, cbModelParam._m0[27u].z, fma(_832, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _831)) - _803;
        float _845 = fma(_833, cbModelParam._m0[28u].z, fma(_832, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _831)) - _807;
        float _849 = inversesqrt(dot(vec3(_843, _844, _845), vec3(_843, _844, _845)));
        float _862 = ((_849 * _843) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_799 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _863 = ((_849 * _844) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_803 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _864 = ((_849 * _845) / cbModelParam._m0[34u].z) + ((((((_807 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _867 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_862, _863, _864), 0.0);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_862, _863, _864), 0.0);
        vec4 _881 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_862, _863, _864), 0.0);
        vec4 _888 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_862, _863, _864), 0.0);
        float _901 = exp2((_867.w + (-0.5)) * 20.0) * 2.0;
        float _902 = _901 * (_867.x + (-0.5));
        float _903 = _901 * (_867.y + (-0.5));
        float _904 = _901 * (_867.z + (-0.5));
        float _911 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _912 = _911 * (_874.x + (-0.5));
        float _913 = _911 * (_874.y + (-0.5));
        float _914 = _911 * (_874.z + (-0.5));
        float _921 = exp2((_881.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_881.x + (-0.5));
        float _923 = _921 * (_881.y + (-0.5));
        float _924 = _921 * (_881.z + (-0.5));
        float _931 = exp2((_888.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_888.x + (-0.5));
        float _933 = _931 * (_888.y + (-0.5));
        float _934 = _931 * (_888.z + (-0.5));
        float _935 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _936 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _937 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _938 = _902 * 0.5;
        float _939 = _912 * 0.5;
        float _940 = _922 * 0.5;
        float _941 = dot(vec3(_938, _939, _940), vec3(_938, _939, _940));
        float _946 = (_941 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_941);
        float _955 = (dot(vec3(_555, _556, _557), vec3(_946 * _938, _946 * _939, _946 * _940)) + 1.0) * 0.5;
        float _3351 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _965 = sqrt(((_939 * _939) + (_938 * _938)) + (_940 * _940)) / (_935 + 9.9999997473787516355514526367188e-06);
        float _3362 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0));
        float _967 = _966 * 2.0;
        float _971 = (1.0 - _966) / (_966 + 1.0);
        float _3373 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0));
        float _981 = ((((1.0 - _972) * (_967 + 2.0)) * exp2(log2(isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0))) * (_967 + 1.0))) + _972) * _935;
        float _982 = _903 * 0.5;
        float _983 = _913 * 0.5;
        float _984 = _923 * 0.5;
        float _985 = dot(vec3(_982, _983, _984), vec3(_982, _983, _984));
        float _990 = (_985 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_985);
        float _998 = (dot(vec3(_555, _556, _557), vec3(_990 * _982, _990 * _983, _990 * _984)) + 1.0) * 0.5;
        float _3384 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1007 = sqrt(((_983 * _983) + (_982 * _982)) + (_984 * _984)) / (_936 + 9.9999997473787516355514526367188e-06);
        float _3395 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
        float _1009 = _1008 * 2.0;
        float _1013 = (1.0 - _1008) / (_1008 + 1.0);
        float _3406 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
        float _1023 = ((((1.0 - _1014) * (_1009 + 2.0)) * exp2(log2(isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0))) * (_1009 + 1.0))) + _1014) * _936;
        float _1024 = _904 * 0.5;
        float _1025 = _914 * 0.5;
        float _1026 = _924 * 0.5;
        float _1027 = dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026));
        float _1032 = (_1027 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1027);
        float _1040 = (dot(vec3(_555, _556, _557), vec3(_1032 * _1024, _1032 * _1025, _1032 * _1026)) + 1.0) * 0.5;
        float _3417 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1049 = sqrt(((_1025 * _1025) + (_1024 * _1024)) + (_1026 * _1026)) / (_937 + 9.9999997473787516355514526367188e-06);
        float _3428 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
        float _1051 = _1050 * 2.0;
        float _1055 = (1.0 - _1050) / (_1050 + 1.0);
        float _3439 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
        float _1065 = ((((1.0 - _1056) * (_1051 + 2.0)) * exp2(log2(isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0))) * (_1051 + 1.0))) + _1056) * _937;
        _1073 = _904;
        _1074 = _903;
        _1075 = _902;
        _1076 = _914;
        _1077 = _913;
        _1078 = _912;
        _1079 = _924;
        _1080 = _923;
        _1081 = _922;
        _1082 = _937;
        _1083 = _936;
        _1084 = _935;
        _1085 = cbModelParam._m0[36u].z * (isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0)));
        _1086 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0)));
        _1087 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0)));
    }
    else
    {
        _1073 = _441;
        _1074 = _441;
        _1075 = _441;
        _1076 = _441;
        _1077 = _441;
        _1078 = _441;
        _1079 = _441;
        _1080 = _441;
        _1081 = _441;
        _1082 = _441;
        _1083 = _441;
        _1084 = _441;
        _1085 = 0.0;
        _1086 = 0.0;
        _1087 = 0.0;
    }
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1116 = fma(_743, cbModelParam._m0[30u].z, fma(_739, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _735));
        float _1120 = fma(_743, cbModelParam._m0[31u].z, fma(_739, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _735));
        float _1124 = fma(_743, cbModelParam._m0[32u].z, fma(_739, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _735));
        float _1147 = _735 + _555;
        float _1148 = _739 + _556;
        float _1149 = _743 + _557;
        float _1159 = fma(_1149, cbModelParam._m0[30u].z, fma(_1148, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1147)) - _1116;
        float _1160 = fma(_1149, cbModelParam._m0[31u].z, fma(_1148, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1147)) - _1120;
        float _1161 = fma(_1149, cbModelParam._m0[32u].z, fma(_1148, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1147)) - _1124;
        float _1165 = inversesqrt(dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161)));
        float _1178 = ((_1165 * _1159) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1116 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1179 = ((_1165 * _1160) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1120 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1180 = ((_1165 * _1161) / cbModelParam._m0[35u].z) + ((((((_1124 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1178, _1179, _1180), 0.0);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1178, _1179, _1180), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1178, _1179, _1180), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1178, _1179, _1180), 0.0);
        float _1215 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1182.x + (-0.5));
        float _1217 = _1215 * (_1182.y + (-0.5));
        float _1218 = _1215 * (_1182.z + (-0.5));
        float _1225 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1189.x + (-0.5));
        float _1227 = _1225 * (_1189.y + (-0.5));
        float _1228 = _1225 * (_1189.z + (-0.5));
        float _1235 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1196.x + (-0.5));
        float _1237 = _1235 * (_1196.y + (-0.5));
        float _1238 = _1235 * (_1196.z + (-0.5));
        float _1245 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1246 = _1245 * (_1203.x + (-0.5));
        float _1247 = _1245 * (_1203.y + (-0.5));
        float _1248 = _1245 * (_1203.z + (-0.5));
        float _1249 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1250 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1251 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1252 = _1216 * 0.5;
        float _1253 = _1226 * 0.5;
        float _1254 = _1236 * 0.5;
        float _1255 = dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254));
        float _1260 = (_1255 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1255);
        float _1268 = (dot(vec3(_555, _556, _557), vec3(_1260 * _1252, _1260 * _1253, _1260 * _1254)) + 1.0) * 0.5;
        float _3480 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1277 = sqrt(((_1253 * _1253) + (_1252 * _1252)) + (_1254 * _1254)) / (_1249 + 9.9999997473787516355514526367188e-06);
        float _3491 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _1279 = _1278 * 2.0;
        float _1283 = (1.0 - _1278) / (_1278 + 1.0);
        float _3502 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
        float _1293 = ((((1.0 - _1284) * (_1279 + 2.0)) * exp2(log2(isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0))) * (_1279 + 1.0))) + _1284) * _1249;
        float _1294 = _1217 * 0.5;
        float _1295 = _1227 * 0.5;
        float _1296 = _1237 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1310 = (dot(vec3(_555, _556, _557), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _3513 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1319 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1250 + 9.9999997473787516355514526367188e-06);
        float _3524 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _3535 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))) * (_1321 + 1.0))) + _1326) * _1250;
        float _1336 = _1218 * 0.5;
        float _1337 = _1228 * 0.5;
        float _1338 = _1238 * 0.5;
        float _1339 = dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338));
        float _1344 = (_1339 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1339);
        float _1352 = (dot(vec3(_555, _556, _557), vec3(_1344 * _1336, _1344 * _1337, _1344 * _1338)) + 1.0) * 0.5;
        float _3546 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1361 = sqrt(((_1337 * _1337) + (_1336 * _1336)) + (_1338 * _1338)) / (_1251 + 9.9999997473787516355514526367188e-06);
        float _3557 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _1363 = _1362 * 2.0;
        float _1367 = (1.0 - _1362) / (_1362 + 1.0);
        float _3568 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
        float _1377 = ((((1.0 - _1368) * (_1363 + 2.0)) * exp2(log2(isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) * (_1363 + 1.0))) + _1368) * _1251;
        _1385 = _1218;
        _1386 = _1217;
        _1387 = _1216;
        _1388 = _1228;
        _1389 = _1227;
        _1390 = _1226;
        _1391 = _1238;
        _1392 = _1237;
        _1393 = _1236;
        _1394 = _1251;
        _1395 = _1250;
        _1396 = _1249;
        _1397 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)));
        _1398 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
        _1399 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)));
    }
    else
    {
        _1385 = _441;
        _1386 = _441;
        _1387 = _441;
        _1388 = _441;
        _1389 = _441;
        _1390 = _441;
        _1391 = _441;
        _1392 = _441;
        _1393 = _441;
        _1394 = _441;
        _1395 = _441;
        _1396 = _441;
        _1397 = 0.0;
        _1398 = 0.0;
        _1399 = 0.0;
    }
    float _1409 = (cbModelParam._m0[1u].x * (_1397 - _1085)) + _1085;
    float _1410 = (cbModelParam._m0[1u].x * (_1398 - _1086)) + _1086;
    float _1411 = (cbModelParam._m0[1u].x * (_1399 - _1087)) + _1087;
    float _1432 = fma(_1411, cbSceneParam._m0[89u].z, fma(_1410, cbSceneParam._m0[89u].y, _1409 * cbSceneParam._m0[89u].x));
    float _1435 = fma(_1411, cbSceneParam._m0[90u].z, fma(_1410, cbSceneParam._m0[90u].y, _1409 * cbSceneParam._m0[90u].x));
    float _1438 = fma(_1411, cbSceneParam._m0[91u].z, fma(_1410, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1409));
    float _1453 = _682 * 0.5;
    float _1454 = _683 * 0.5;
    float _1455 = _684 * 0.5;
    float _1456 = dot(vec4(_1453, _1454, _1455, 1.0), vec4(_1387, _1390, _1393, _1396));
    float _1459 = dot(vec4(_1453, _1454, _1455, 1.0), vec4(_1386, _1389, _1392, _1395));
    float _1462 = dot(vec4(_1453, _1454, _1455, 1.0), vec4(_1385, _1388, _1391, _1394));
    float _1496;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1469 = dot(vec4(_1453, _1454, _1455, 1.0), vec4(_1073, _1076, _1079, _1082));
        float _1473 = dot(vec4(_1453, _1454, _1455, 1.0), vec4(_1074, _1077, _1080, _1083));
        float _1477 = dot(vec4(_1453, _1454, _1455, 1.0), vec4(_1075, _1078, _1081, _1084));
        float _1484 = dot(vec4(cbModelParam._m0[39u]), vec4(_1453, _1454, _1455, 1.0));
        _1496 = dot(vec3(isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)), isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)), isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1484) ? 0.0 : (isnan(0.0) ? _1484 : max(0.0, _1484))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1496 = 1.0;
    }
    float _1507;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1498 = dot(vec4(cbModelParam._m0[40u]), vec4(_1453, _1454, _1455, 1.0));
        _1507 = dot(vec3(isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)), isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)), isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1498) ? 0.0 : (isnan(0.0) ? _1498 : max(0.0, _1498))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1507 = 1.0;
    }
    float _1511 = (_1507 * cbModelParam._m0[1u].x) + (_1496 * (1.0 - cbModelParam._m0[1u].x));
    float _1521 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _558);
    float _1522 = isnan(_1521) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1521 : min(cbModelParam._m0[25u].z, _1521));
    float _1604;
    float _1606;
    float _1608;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1571 = fma(_743, cbModelParam._m0[13u].z, fma(_739, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _735)) + cbModelParam._m0[13u].w;
        float _1575 = fma(_743, cbModelParam._m0[14u].z, fma(_739, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _735)) + cbModelParam._m0[14u].w;
        float _1579 = fma(_743, cbModelParam._m0[15u].z, fma(_739, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _735)) + cbModelParam._m0[15u].w;
        float _1582 = fma(_684, cbModelParam._m0[13u].z, fma(_683, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _682));
        float _1585 = fma(_684, cbModelParam._m0[14u].z, fma(_683, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _682));
        float _1588 = fma(_684, cbModelParam._m0[15u].z, fma(_683, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _682));
        float _1616;
        if (_1582 > 0.0)
        {
            _1616 = abs((1.0 - _1571) / _1582);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1582 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1571 + 1.0) / _1582);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1616 = frontier_phi_29_27_ladder;
        }
        float _1963;
        if (_1585 > 0.0)
        {
            _1963 = abs((1.0 - _1575) / _1585);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1585 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1575 + 1.0) / _1585);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1963 = frontier_phi_38_34_ladder;
        }
        float _2271;
        if (_1588 > 0.0)
        {
            _2271 = abs((1.0 - _1579) / _1588);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1588 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1579 + 1.0) / _1588);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _2271 = frontier_phi_52_45_ladder;
        }
        float _2273 = isnan(_1963) ? _1616 : (isnan(_1616) ? _1963 : min(_1616, _1963));
        float _2274 = isnan(_2271) ? _2273 : (isnan(_2273) ? _2271 : min(_2273, _2271));
        float _2278 = (_2274 * _1582) + _1571;
        float _2279 = (_2274 * _1585) + _1575;
        float _2280 = (_2274 * _1588) + _1579;
        float _2281 = _2274 * 9.9999997473787516355514526367188e-05;
        float _2282 = (-1.0) - _2281;
        float _2284 = _2281 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2280 > _2284) || ((_2280 < _2282) || ((_2279 > _2284) || ((_2279 < _2282) || ((_2278 < _2282) || (_2278 > _2284))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2422 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2280, cbModelParam._m0[9u].z, fma(_2279, cbModelParam._m0[9u].y, _2278 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2280, cbModelParam._m0[10u].z, fma(_2279, cbModelParam._m0[10u].y, _2278 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2280, cbModelParam._m0[11u].z, fma(_2279, cbModelParam._m0[11u].y, _2278 * cbModelParam._m0[11u].x))), _1522);
            frontier_phi_28_52_ladder = _2422.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _2422.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _2422.x * cbModelParam._m0[1u].y;
        }
        _1604 = frontier_phi_28_52_ladder_2;
        _1606 = frontier_phi_28_52_ladder_1;
        _1608 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1592 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_682, _683, _684), _1522);
        _1604 = _1592.x * cbModelParam._m0[1u].y;
        _1606 = _1592.y * cbModelParam._m0[1u].y;
        _1608 = _1592.z * cbModelParam._m0[1u].y;
    }
    float _1612 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _558);
    float _1613 = isnan(_1612) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1612 : min(cbModelParam._m0[25u].w, _1612));
    float _1703;
    float _1705;
    float _1707;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1667 = fma(_743, cbModelParam._m0[21u].z, fma(_739, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _735)) + cbModelParam._m0[21u].w;
        float _1671 = fma(_743, cbModelParam._m0[22u].z, fma(_739, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _735)) + cbModelParam._m0[22u].w;
        float _1675 = fma(_743, cbModelParam._m0[23u].z, fma(_739, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _735)) + cbModelParam._m0[23u].w;
        float _1678 = fma(_684, cbModelParam._m0[21u].z, fma(_683, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _682));
        float _1681 = fma(_684, cbModelParam._m0[22u].z, fma(_683, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _682));
        float _1684 = fma(_684, cbModelParam._m0[23u].z, fma(_683, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _682));
        float _1968;
        if (_1678 > 0.0)
        {
            _1968 = abs((1.0 - _1667) / _1678);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1667 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1968 = frontier_phi_40_36_ladder;
        }
        float _2297;
        if (_1681 > 0.0)
        {
            _2297 = abs((1.0 - _1671) / _1681);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1671 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _2297 = frontier_phi_54_47_ladder;
        }
        float _2487;
        if (_1684 > 0.0)
        {
            _2487 = abs((1.0 - _1675) / _1684);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1675 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2487 = frontier_phi_72_65_ladder;
        }
        float _2489 = isnan(_2297) ? _1968 : (isnan(_1968) ? _2297 : min(_1968, _2297));
        float _2490 = isnan(_2487) ? _2489 : (isnan(_2489) ? _2487 : min(_2489, _2487));
        float _2494 = (_2490 * _1678) + _1667;
        float _2495 = (_2490 * _1681) + _1671;
        float _2496 = (_2490 * _1684) + _1675;
        float _2497 = _2490 * 9.9999997473787516355514526367188e-05;
        float _2498 = (-1.0) - _2497;
        float _2500 = _2497 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2496 > _2500) || ((_2496 < _2498) || ((_2495 > _2500) || ((_2495 < _2498) || ((_2494 < _2498) || (_2494 > _2500))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2738 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2496, cbModelParam._m0[17u].z, fma(_2495, cbModelParam._m0[17u].y, _2494 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2496, cbModelParam._m0[18u].z, fma(_2495, cbModelParam._m0[18u].y, _2494 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2496, cbModelParam._m0[19u].z, fma(_2495, cbModelParam._m0[19u].y, _2494 * cbModelParam._m0[19u].x))), _1613);
            frontier_phi_37_72_ladder = _2738.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2738.y * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2738.x * cbModelParam._m0[1u].z;
        }
        _1703 = frontier_phi_37_72_ladder_2;
        _1705 = frontier_phi_37_72_ladder_1;
        _1707 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1687 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_682, _683, _684), _1613);
        _1703 = _1687.x * cbModelParam._m0[1u].z;
        _1705 = _1687.y * cbModelParam._m0[1u].z;
        _1707 = _1687.z * cbModelParam._m0[1u].z;
    }
    float _1719 = ((((1.0 - _703) * ((_690 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_703 * _690)) * _674;
    float _1720 = _1719 * ((cbModelParam._m0[1u].w * (_1703 - _1604)) + _1604);
    float _1721 = _1719 * ((cbModelParam._m0[1u].w * (_1705 - _1606)) + _1606);
    float _1722 = _1719 * ((cbModelParam._m0[1u].w * (_1707 - _1608)) + _1608);
    float _1725 = fma(_1722, cbSceneParam._m0[89u].z, fma(_1721, cbSceneParam._m0[89u].y, _1720 * cbSceneParam._m0[89u].x));
    float _1728 = fma(_1722, cbSceneParam._m0[90u].z, fma(_1721, cbSceneParam._m0[90u].y, _1720 * cbSceneParam._m0[90u].x));
    float _1731 = fma(_1722, cbSceneParam._m0[91u].z, fma(_1721, cbSceneParam._m0[91u].y, _1720 * cbSceneParam._m0[91u].x));
    uvec4 _1741 = floatBitsToUint(cbInstanceData._m0[_649 + 5u]);
    uint _1743 = _1741.x * 14u;
    uint _1744 = _1743 + 13u;
    float _1749 = _674 + (-1.0);
    float _1752 = (cbLight._m0[_1744].x * _1749) + 1.0;
    float _1753 = (cbLight._m0[_1744].y * _1749) + 1.0;
    uint _1754 = _1743 + 5u;
    float _1760 = isnan(1.0) ? _1753 : (isnan(_1753) ? 1.0 : min(_1753, 1.0));
    uint _1764 = _1743 + 4u;
    float _1770 = isnan(1.0) ? _1752 : (isnan(_1752) ? 1.0 : min(_1752, 1.0));
    uint _1774 = _1743 | 1u;
    float _1785 = dot(vec3(cbLight._m0[_1743].xyz), vec3(_555, _556, _557));
    float _1788 = dot(vec3(cbLight._m0[_1774].xyz), vec3(_555, _556, _557));
    float _3704 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _3715 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1793 = (isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * 0.3183098733425140380859375;
    float _1795 = (isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))) * 0.3183098733425140380859375;
    float _1802 = ((cbLight._m0[_1754].x * _1760) * _1795) + ((cbLight._m0[_1764].x * _1770) * _1793);
    float _1803 = ((_1760 * cbLight._m0[_1754].y) * _1795) + ((_1770 * cbLight._m0[_1764].y) * _1793);
    float _1804 = ((_1760 * cbLight._m0[_1754].z) * _1795) + ((_1770 * cbLight._m0[_1764].z) * _1793);
    uint _1806 = _1743 + 8u;
    float _1819 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1743].w)) * _558) * 0.949999988079071044921875);
    float _1820 = _1819 * _1819;
    float _1821 = cbLight._m0[_1743].x + _582;
    float _1822 = cbLight._m0[_1743].y + _583;
    float _1823 = cbLight._m0[_1743].z + _584;
    float _1827 = inversesqrt(dot(vec3(_1821, _1822, _1823), vec3(_1821, _1822, _1823)));
    float _1828 = _1827 * _1821;
    float _1829 = _1827 * _1822;
    float _1830 = _1827 * _1823;
    float _1831 = dot(vec3(_555, _556, _557), vec3(cbLight._m0[_1743].xyz));
    float _3726 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1834 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
    float _3737 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _1835 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
    float _1836 = dot(vec3(_555, _556, _557), vec3(_1828, _1829, _1830));
    float _3748 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1839 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
    float _1840 = dot(vec3(cbLight._m0[_1743].xyz), vec3(_1828, _1829, _1830));
    float _3759 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1844 = _1820 * _1820;
    float _1848 = ((_1839 * _1839) * (_1844 + (-1.0))) + 1.0;
    float _1859 = (exp2(log2(1.0 - (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1860 = 1.0 - _1820;
    float _1871 = (0.5 / (((_1835 * ((_1834 * _1860) + _1820)) + 9.9999999392252902907785028219223e-09) + (((_1835 * _1860) + _1820) * _1834))) * _1834;
    float _3770 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1873 = (isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * (_1844 / ((_1848 * _1848) * 3.141590118408203125));
    uint _1884 = _1743 + 9u;
    float _1895 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1774].w)) * _558) * 0.949999988079071044921875);
    float _1896 = _1895 * _1895;
    float _1897 = cbLight._m0[_1774].x + _582;
    float _1898 = cbLight._m0[_1774].y + _583;
    float _1899 = cbLight._m0[_1774].z + _584;
    float _1903 = inversesqrt(dot(vec3(_1897, _1898, _1899), vec3(_1897, _1898, _1899)));
    float _1904 = _1903 * _1897;
    float _1905 = _1903 * _1898;
    float _1906 = _1903 * _1899;
    float _1907 = dot(vec3(_555, _556, _557), vec3(cbLight._m0[_1774].xyz));
    float _3781 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _1910 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _1911 = dot(vec3(_555, _556, _557), vec3(_1904, _1905, _1906));
    float _3792 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1914 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    float _1915 = dot(vec3(cbLight._m0[_1774].xyz), vec3(_1904, _1905, _1906));
    float _3803 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1919 = _1896 * _1896;
    float _1923 = ((_1914 * _1914) * (_1919 + (-1.0))) + 1.0;
    float _1932 = (exp2(log2(1.0 - (isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1933 = 1.0 - _1896;
    float _1943 = (0.5 / (((_1835 * ((_1910 * _1933) + _1896)) + 9.9999999392252902907785028219223e-09) + (((_1835 * _1933) + _1896) * _1910))) * _1910;
    float _3814 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
    float _1945 = (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * (_1919 / ((_1923 * _1923) * 3.141590118408203125));
    float _1955 = (((_1932 * cbLight._m0[_1884].x) * _1945) * _1760) + (((_1859 * cbLight._m0[_1806].x) * _1873) * _1770);
    float _1956 = (((_1932 * cbLight._m0[_1884].y) * _1945) * _1760) + (((_1859 * cbLight._m0[_1806].y) * _1873) * _1770);
    float _1957 = (((_1932 * cbLight._m0[_1884].z) * _1945) * _1760) + (((_1859 * cbLight._m0[_1806].z) * _1873) * _1770);
    float _2072;
    float _2074;
    float _2076;
    float _2078;
    float _2080;
    float _2082;
    if (_1741.y == 0u)
    {
        float _2012 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2013 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2012;
        float _2014 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2012;
        float _2015 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2012;
        uvec4 _2027 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2028 = _2027.x;
        uint _2039 = uint((float(_2027.y) * floor(float(uint(cbSceneParam._m0[85u].y * _610) / _2028))) + floor(float(uint(cbSceneParam._m0[85u].x * _609) / _2028)));
        float _2049 = (log2(_2015 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2050 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        uint _2053 = uint(isnan(14.0) ? _2050 : (isnan(_2050) ? 14.0 : min(_2050, 14.0)));
        uvec4 _2058 = texelFetch(g_lightClusterGridBuffer, int(((_2053 << 2u) + (_2039 << 6u)) >> 2u));
        uint _2059 = _2058.x;
        uint _2060 = _2027.z;
        float _2150;
        float _2152;
        float _2154;
        float _2156;
        float _2158;
        float _2160;
        if (((((1u << ((_2060 >> 4u) & 15u)) + 4294967295u) & _2059) == 0u) || ((_2060 & 240u) == 0u))
        {
            _2150 = 0.0;
            _2152 = 0.0;
            _2154 = 0.0;
            _2156 = 0.0;
            _2158 = 0.0;
            _2160 = 0.0;
        }
        else
        {
            float _2151;
            float _2153;
            float _2155;
            float _2157;
            float _2159;
            float _2161;
            float _2334 = 0.0;
            float _2335 = 0.0;
            float _2336 = 0.0;
            float _2337 = 0.0;
            float _2338 = 0.0;
            float _2339 = 0.0;
            uint _2340 = 0u;
            uint _2349;
            bool _2350;
            for (;;)
            {
                _2349 = texelFetch(g_lightClassification, int((((_2053 << 5u) + (_2039 << 9u)) + (_2340 << 2u)) >> 2u)).x;
                _2350 = _2349 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2350)
                {
                    frontier_phi_67_pred = _2337;
                    frontier_phi_67_pred_1 = _2336;
                    frontier_phi_67_pred_2 = _2335;
                    frontier_phi_67_pred_3 = _2334;
                    frontier_phi_67_pred_4 = _2338;
                    frontier_phi_67_pred_5 = _2339;
                }
                else
                {
                    float _2530;
                    float _2531;
                    float _2532;
                    float _2533;
                    float _2534;
                    float _2535;
                    uint _2536;
                    _2530 = _2334;
                    _2531 = _2335;
                    _2532 = _2336;
                    _2533 = _2337;
                    _2534 = _2338;
                    _2535 = _2339;
                    _2536 = _2349;
                    float _2431;
                    float _2432;
                    float _2433;
                    float _2434;
                    float _2435;
                    float _2436;
                    for (;;)
                    {
                        uint _2540 = uint(findLSB(_2536)) + (_2340 << 5u);
                        uint _2537 = (_2536 + 4294967295u) & _2536;
                        uint _2542 = _2540 * 48u;
                        vec4 _2556 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2542)).x, texelFetch(g_PointLightRenderingBuffer, int(_2542 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2542 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2542 + 3u)).x));
                        uint _2562 = (_2540 * 48u) + 4u;
                        vec4 _2575 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2562)).x, texelFetch(g_PointLightRenderingBuffer, int(_2562 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2562 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2562 + 3u)).x));
                        uint _2581 = (_2540 * 48u) + 8u;
                        vec3 _2592 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2581)).x, texelFetch(g_PointLightRenderingBuffer, int(_2581 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2581 + 2u)).x));
                        float _2596 = _2556.x - _2013;
                        float _2597 = _2556.y - _2014;
                        float _2598 = _2556.z - _2015;
                        float _2599 = dot(vec3(_2596, _2597, _2598), vec3(_2596, _2597, _2598));
                        float _2602 = inversesqrt(_2599);
                        float _2603 = _2602 * _2596;
                        float _2604 = _2602 * _2597;
                        float _2605 = _2602 * _2598;
                        float _2606 = dot(vec3(_630, _633, _636), vec3(_2603, _2604, _2605));
                        float _2611 = 1.0 - (_2599 * _2556.w);
                        float _3835 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
                        float _2612 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
                        float _2613 = sqrt(_2599) * _2575.w;
                        float _2616 = 1.39999997615814208984375 / (_2613 + 1.39999997615814208984375);
                        float _2617 = _2616 * _2616;
                        float _2620 = ((1.0 - _2617) * _2606) + _2617;
                        float _2623 = _2613 * _2613;
                        float _2627 = ((isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0))) * _2612) / ((_2623 * 0.699999988079071044921875) + 1.0);
                        float _2631 = (-0.0) - _2013;
                        float _2632 = (-0.0) - _2014;
                        float _2633 = (-0.0) - _2015;
                        float _2637 = inversesqrt(dot(vec3(_2631, _2632, _2633), vec3(_2631, _2632, _2633)));
                        float _2638 = _2637 * _2631;
                        float _2639 = _2637 * _2632;
                        float _2640 = _2637 * _2633;
                        float _2648 = exp2(log2(1.0 / ((_2623 * 3.5) + 5.0)) * 0.25);
                        float _2649 = 1.0 - _690;
                        float _2656 = sqrt(1.0 - ((1.0 - (_2649 * _2649)) * (1.0 - (_2648 * _2648))));
                        float _2657 = _2656 * _2656;
                        float _2658 = _2657 * _2657;
                        float _2659 = _2638 + _2603;
                        float _2660 = _2639 + _2604;
                        float _2661 = _2640 + _2605;
                        float _2665 = inversesqrt(dot(vec3(_2659, _2660, _2661), vec3(_2659, _2660, _2661)));
                        float _2669 = dot(vec3(_630, _633, _636), vec3(_2638, _2639, _2640));
                        float _3851 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
                        float _2672 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
                        float _2673 = dot(vec3(_630, _633, _636), vec3(_2665 * _2659, _2665 * _2660, _2665 * _2661));
                        float _3862 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
                        float _2676 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
                        float _2680 = ((_2676 * _2676) * (_2658 + (-1.0))) + 1.0;
                        float _2681 = _2616 * _2657;
                        float _2682 = _2681 * _2681;
                        float _2685 = ((1.0 - _2682) * _2606) + _2682;
                        float _3873 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
                        float _2686 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
                        float _2687 = 1.0 - _2657;
                        float _2697 = (0.5 / (((_2686 * ((_2672 * _2687) + _2657)) + 9.9999999392252902907785028219223e-09) + (((_2686 * _2687) + _2657) * _2672))) * _2686;
                        float _3884 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
                        float _2708 = (((_2658 * 3.1415927410125732421875) * (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0)))) / ((_2680 * _2680) * ((_2623 * 2.1991131305694580078125) + 3.141590118408203125))) * _2612;
                        _2434 = (_2627 * _2575.x) + _2533;
                        _2435 = (_2627 * _2575.y) + _2534;
                        _2436 = (_2627 * _2575.z) + _2535;
                        _2431 = (_2708 * _2592.x) + _2530;
                        _2432 = (_2708 * _2592.y) + _2531;
                        _2433 = (_2708 * _2592.z) + _2532;
                        if (_2537 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2530 = _2431;
                            _2531 = _2432;
                            _2532 = _2433;
                            _2533 = _2434;
                            _2534 = _2435;
                            _2535 = _2436;
                            _2536 = _2537;
                        }
                    }
                    frontier_phi_67_pred = _2434;
                    frontier_phi_67_pred_1 = _2433;
                    frontier_phi_67_pred_2 = _2432;
                    frontier_phi_67_pred_3 = _2431;
                    frontier_phi_67_pred_4 = _2435;
                    frontier_phi_67_pred_5 = _2436;
                }
                _2157 = frontier_phi_67_pred;
                _2155 = frontier_phi_67_pred_1;
                _2153 = frontier_phi_67_pred_2;
                _2151 = frontier_phi_67_pred_3;
                _2159 = frontier_phi_67_pred_4;
                _2161 = frontier_phi_67_pred_5;
                uint _2341 = _2340 + 1u;
                if (_2341 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2334 = _2151;
                    _2335 = _2153;
                    _2336 = _2155;
                    _2337 = _2157;
                    _2338 = _2159;
                    _2339 = _2161;
                    _2340 = _2341;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2150 = _2151;
            _2152 = _2153;
            _2154 = _2155;
            _2156 = _2157;
            _2158 = _2159;
            _2160 = _2161;
        }
        uvec4 _2164 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2165 = _2164.z;
        uint _2167 = (_2165 >> 8u) & 15u;
        float _2302;
        float _2304;
        float _2306;
        float _2308;
        float _2310;
        float _2312;
        if (((4294967295u << _2167) & _2059) == 0u)
        {
            _2302 = _2150;
            _2304 = _2152;
            _2306 = _2154;
            _2308 = _2156;
            _2310 = _2158;
            _2312 = _2160;
        }
        else
        {
            float _2327 = inversesqrt(dot(vec3(_2013, _2014, _2015), vec3(_2013, _2014, _2015)));
            float _2328 = _2327 * _2013;
            float _2329 = _2327 * _2014;
            float _2330 = _2327 * _2015;
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_2167 < ((_2165 >> 12u) & 15u))
            {
                float _2303;
                float _2305;
                float _2307;
                float _2309;
                float _2311;
                float _2313;
                float _2513 = _2150;
                float _2514 = _2152;
                float _2515 = _2154;
                float _2516 = _2156;
                float _2517 = _2158;
                float _2518 = _2160;
                uint _2519 = _2167;
                uint _2528;
                bool _2529;
                for (;;)
                {
                    _2528 = texelFetch(g_lightClassification, int((((_2053 << 5u) + (_2039 << 9u)) + (_2519 << 2u)) >> 2u)).x;
                    _2529 = _2528 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2529)
                    {
                        frontier_phi_81_pred = _2516;
                        frontier_phi_81_pred_1 = _2515;
                        frontier_phi_81_pred_2 = _2514;
                        frontier_phi_81_pred_3 = _2513;
                        frontier_phi_81_pred_4 = _2518;
                        frontier_phi_81_pred_5 = _2517;
                    }
                    else
                    {
                        float _2743;
                        float _2744;
                        float _2745;
                        float _2746;
                        float _2747;
                        float _2748;
                        float _3036;
                        float _3037;
                        float _3038;
                        float _3039;
                        float _3040;
                        float _3041;
                        float _2756 = _2513;
                        float _2757 = _2514;
                        float _2758 = _2515;
                        float _2759 = _2516;
                        float _2760 = _2517;
                        float _2761 = _2518;
                        uint _2762 = _2528;
                        uint _2763;
                        vec4 _2788;
                        float _2789;
                        vec4 _2804;
                        vec3 _2816;
                        vec4 _2831;
                        vec4 _2846;
                        float _2892;
                        bool _2893;
                        for (;;)
                        {
                            uint _2773 = ((_2519 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2762));
                            _2763 = (_2762 + 4294967295u) & _2762;
                            uint _2775 = _2773 * 40u;
                            _2788 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2775)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 3u)).x));
                            _2789 = _2788.w;
                            uint _2791 = (_2773 * 40u) + 4u;
                            _2804 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2791)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 3u)).x));
                            uint _2806 = (_2773 * 40u) + 8u;
                            _2816 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2806)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 2u)).x));
                            uint _2818 = (_2773 * 40u) + 16u;
                            _2831 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2818)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 3u)).x));
                            uint _2833 = (_2773 * 40u) + 20u;
                            _2846 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2833)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 3u)).x));
                            uint _2848 = (_2773 * 40u) + 24u;
                            vec4 _2861 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2848)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 3u)).x));
                            uint _2867 = (_2773 * 40u) + 28u;
                            vec4 _2880 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2867)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 3u)).x));
                            _2892 = fma(_2015, _2880.z, fma(_2014, _2880.y, _2880.x * _2013)) + _2880.w;
                            _2893 = !((fma(_2015, _2861.z, fma(_2014, _2861.y, _2861.x * _2013)) + _2861.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_2893)
                            {
                                float _2920 = _2788.x - _2013;
                                float _2921 = _2788.y - _2014;
                                float _2922 = _2788.z - _2015;
                                float _2923 = dot(vec3(_2920, _2921, _2922), vec3(_2920, _2921, _2922));
                                float _2926 = inversesqrt(_2923);
                                float _2927 = _2926 * _2920;
                                float _2928 = _2926 * _2921;
                                float _2929 = _2926 * _2922;
                                float _2933 = 1.0 - (_2923 / (_2789 * _2789));
                                float _3895 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
                                float _2934 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
                                float _2938 = sqrt(_2923) * _2804.w;
                                float _2940 = 1.39999997615814208984375 / (_2938 + 1.39999997615814208984375);
                                float _2941 = _2940 * _2940;
                                float _2944 = ((1.0 - _2941) * dot(vec3(_2927, _2928, _2929), vec3(_630, _633, _636))) + _2941;
                                float _2947 = _2938 * _2938;
                                float _2951 = (fma(_2015, _2831.z, fma(_2014, _2831.y, _2831.x * _2013)) + _2831.w) / _2892;
                                float _2952 = (fma(_2015, _2846.z, fma(_2014, _2846.y, _2846.x * _2013)) + _2846.w) / _2892;
                                float _2956 = 1.0 - dot(vec2(_2951, _2952), vec2(_2951, _2952));
                                float _3911 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                                float _2957 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
                                float _2958 = _2957 * (((isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0))) * _2934) / ((_2947 * 0.699999988079071044921875) + 1.0));
                                float _2970 = exp2(log2(1.0 / ((_2947 * 3.5) + 5.0)) * 0.25);
                                float _2971 = 1.0 - _690;
                                float _2978 = sqrt(1.0 - ((1.0 - (_2971 * _2971)) * (1.0 - (_2970 * _2970))));
                                float _2979 = _2978 * _2978;
                                float _2980 = _2979 * _2979;
                                float _2981 = _2927 - _2328;
                                float _2982 = _2928 - _2329;
                                float _2983 = _2929 - _2330;
                                float _2987 = inversesqrt(dot(vec3(_2981, _2982, _2983), vec3(_2981, _2982, _2983)));
                                float _2991 = dot(vec3(_630, _633, _636), vec3((-0.0) - _2328, (-0.0) - _2329, (-0.0) - _2330));
                                float _3922 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                                float _2994 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
                                float _2995 = dot(vec3(_630, _633, _636), vec3(_2987 * _2981, _2987 * _2982, _2987 * _2983));
                                float _3933 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                                float _2998 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
                                float _3002 = ((_2998 * _2998) * (_2980 + (-1.0))) + 1.0;
                                float _3003 = _2940 * _2979;
                                float _3004 = _3003 * _3003;
                                float _3010 = ((1.0 - _3004) * dot(vec3(_630, _633, _636), vec3(_2927, _2928, _2929))) + _3004;
                                float _3944 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                                float _3011 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
                                float _3012 = 1.0 - _2979;
                                float _3022 = (0.5 / (((_3011 * ((_2994 * _3012) + _2979)) + 9.9999999392252902907785028219223e-09) + (((_3011 * _3012) + _2979) * _2994))) * _3011;
                                float _3955 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                                float _3032 = (_2957 * _2934) * (((_2980 * 3.1415927410125732421875) * (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0)))) / ((_3002 * _3002) * ((_2947 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _2958 * _2804.x;
                                frontier_phi_87_pred_1 = _3032 * _2816.z;
                                frontier_phi_87_pred_2 = _3032 * _2816.y;
                                frontier_phi_87_pred_3 = _3032 * _2816.x;
                                frontier_phi_87_pred_4 = _2958 * _2804.z;
                                frontier_phi_87_pred_5 = _2958 * _2804.y;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3039 = frontier_phi_87_pred;
                            _3038 = frontier_phi_87_pred_1;
                            _3037 = frontier_phi_87_pred_2;
                            _3036 = frontier_phi_87_pred_3;
                            _3041 = frontier_phi_87_pred_4;
                            _3040 = frontier_phi_87_pred_5;
                            _2746 = _3039 + _2759;
                            _2747 = _3040 + _2760;
                            _2748 = _3041 + _2761;
                            _2743 = _3036 + _2756;
                            _2744 = _3037 + _2757;
                            _2745 = _3038 + _2758;
                            if (_2763 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2756 = _2743;
                                _2757 = _2744;
                                _2758 = _2745;
                                _2759 = _2746;
                                _2760 = _2747;
                                _2761 = _2748;
                                _2762 = _2763;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2746;
                        frontier_phi_81_pred_1 = _2745;
                        frontier_phi_81_pred_2 = _2744;
                        frontier_phi_81_pred_3 = _2743;
                        frontier_phi_81_pred_4 = _2748;
                        frontier_phi_81_pred_5 = _2747;
                    }
                    _2309 = frontier_phi_81_pred;
                    _2307 = frontier_phi_81_pred_1;
                    _2305 = frontier_phi_81_pred_2;
                    _2303 = frontier_phi_81_pred_3;
                    _2313 = frontier_phi_81_pred_4;
                    _2311 = frontier_phi_81_pred_5;
                    uint _2520 = _2519 + 1u;
                    if (_2520 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2513 = _2303;
                        _2514 = _2305;
                        _2515 = _2307;
                        _2516 = _2309;
                        _2517 = _2311;
                        _2518 = _2313;
                        _2519 = _2520;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2313;
                frontier_phi_56_57_ladder_1 = _2311;
                frontier_phi_56_57_ladder_2 = _2309;
                frontier_phi_56_57_ladder_3 = _2305;
                frontier_phi_56_57_ladder_4 = _2303;
                frontier_phi_56_57_ladder_5 = _2307;
            }
            else
            {
                frontier_phi_56_57_ladder = _2160;
                frontier_phi_56_57_ladder_1 = _2158;
                frontier_phi_56_57_ladder_2 = _2156;
                frontier_phi_56_57_ladder_3 = _2152;
                frontier_phi_56_57_ladder_4 = _2150;
                frontier_phi_56_57_ladder_5 = _2154;
            }
            _2302 = frontier_phi_56_57_ladder_4;
            _2304 = frontier_phi_56_57_ladder_3;
            _2306 = frontier_phi_56_57_ladder_5;
            _2308 = frontier_phi_56_57_ladder_2;
            _2310 = frontier_phi_56_57_ladder_1;
            _2312 = frontier_phi_56_57_ladder;
        }
        float _2317 = isnan(1.0) ? _674 : (isnan(_674) ? 1.0 : min(_674, 1.0));
        _2072 = (_2317 * _2308) + _1802;
        _2074 = (_2317 * _2310) + _1803;
        _2076 = (_2317 * _2312) + _1804;
        _2078 = ((_2302 * 0.039999999105930328369140625) * _2317) + _1955;
        _2080 = ((_2304 * 0.039999999105930328369140625) * _2317) + _1956;
        _2082 = ((_2306 * 0.039999999105930328369140625) * _2317) + _1957;
    }
    else
    {
        _2072 = _1802;
        _2074 = _1803;
        _2076 = _1804;
        _2078 = _1955;
        _2080 = _1956;
        _2082 = _1957;
    }
    float _3971 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _3982 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _3993 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _2099 = ((isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_2072 + ((isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0))) * _674))) + ((_2078 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _1511)) * cbPerFrame._m0[3u].x);
    float _2100 = ((isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_2074 + ((isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0))) * _674))) + ((_2080 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _1511)) * cbPerFrame._m0[3u].x);
    float _2101 = ((isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_2076 + ((isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))) * _674))) + ((_2082 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _1511)) * cbPerFrame._m0[3u].x);
    float _2102 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2103 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2104 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    uint _2105 = _649 + 6u;
    float _2113 = _609 / cbSceneParam._m0[86u].x;
    float _2114 = _610 / cbSceneParam._m0[86u].y;
    vec4 _2128 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2113, _2114, (log2((isnan(cbSceneParam._m0[77u].w) ? _577 : (isnan(_577) ? cbSceneParam._m0[77u].w : min(_577, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2130 = _2128.x;
    float _2131 = _2128.y;
    float _2132 = _2128.z;
    float _2133 = _2128.w;
    float _2213;
    float _2215;
    float _2217;
    float _2219;
    if (_577 > cbSceneParam._m0[78u].w)
    {
        float _2175 = isnan(_577) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _577 : min(cbSceneParam._m0[80u].w, _577));
        float _2176 = _2175 / _577;
        float _2187 = _2176 * _263;
        float _2188 = _264 * _2176;
        float _2189 = (-0.0) - _2188;
        float _2190 = _2176 * _265;
        float _2192 = (cbSceneParam._m0[77u].w * _2189) / _2175;
        float _2193 = _2192 + cbSceneParam._m0[79u].w;
        float _2194 = cbSceneParam._m0[79u].w - _2188;
        float _2200 = sqrt(((_2187 * _2187) + (_2188 * _2188)) + (_2190 * _2190));
        float _2203 = (1.0 - (cbSceneParam._m0[77u].w / _2175)) * _2200;
        float _2209 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2211 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2444;
        if (abs((_2189 - _2192) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2444 = ((((_2193 > 0.0) ? exp2(_2209 * _2193) : (2.0 - exp2(_2211 * _2193))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2203;
        }
        else
        {
            float _2363 = 1.0 / cbSceneParam._m0[80u].x;
            float _2364 = isnan(_2194) ? _2193 : (isnan(_2193) ? _2194 : max(_2193, _2194));
            float _2365 = isnan(_2194) ? _2193 : (isnan(_2193) ? _2194 : min(_2193, _2194));
            float _2374 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : min(_2364, 0.0));
            float _2375 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : min(_2365, 0.0));
            _2444 = ((abs(_2200 / _2189) * cbSceneParam._m0[80u].y) * ((((_2374 - _2375) * 2.0) - ((exp2(_2209 * (isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0)))) - exp2(_2209 * (isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0))))) * _2363)) - ((exp2(_2211 * _2374) - exp2(_2211 * _2375)) * _2363))) + (_2203 * cbSceneParam._m0[80u].z);
        }
        vec4 _2446 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2113, _2114, 1.0), 0.0);
        float _2455 = exp2((_2444 * (-1.44269502162933349609375)) * (1.0 - _2446.w));
        float _2456 = log2(_2455);
        float _2472 = log2(_2133);
        _2213 = (exp2(_2472 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2456 * cbSceneParam._m0[78u].x)) * _2446.x) / cbSceneParam._m0[78u].x)) + _2130;
        _2215 = (exp2(_2472 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2456 * cbSceneParam._m0[78u].y)) * _2446.y) / cbSceneParam._m0[78u].y)) + _2131;
        _2217 = (exp2(_2472 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2456 * cbSceneParam._m0[78u].z)) * _2446.z) / cbSceneParam._m0[78u].z)) + _2132;
        _2219 = _2455 * _2133;
    }
    else
    {
        _2213 = _2130;
        _2215 = _2131;
        _2217 = _2132;
        _2219 = _2133;
    }
    bool _2482;
    vec4 _2229;
    vec4 _2251;
    float _2253;
    float _2257;
    float _2258;
    float _2259;
    float _2260;
    bool _2270;
    for (;;)
    {
        _2229 = cbMatDynParam._m0[0u];
        float _2231 = roundEven(_2229.y);
        bool _2232 = _2231 == 3.0;
        float _2233 = log2(_2219);
        float _2240 = exp2(_2233 * cbSceneParam._m0[78u].x) * _2102;
        float _2241 = exp2(_2233 * cbSceneParam._m0[78u].y) * _2103;
        float _2242 = exp2(_2233 * cbSceneParam._m0[78u].z) * _2104;
        float _2249 = _591 + (-0.5);
        _2251 = cbMtdParam._m0[1u];
        _2253 = _2251.y * _2249;
        float _2256 = (_2231 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2257 = _2256 * (_2232 ? _2240 : (_2240 + (cbSceneParam._m0[72u].w * _2213)));
        _2258 = _2256 * (_2232 ? _2241 : (_2241 + (cbSceneParam._m0[72u].w * _2215)));
        _2259 = _2256 * (_2232 ? _2242 : (_2242 + (cbSceneParam._m0[72u].w * _2217)));
        _2260 = _2249 * 0.999000012874603271484375;
        _2270 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2270)
        {
            if ((cbInstanceData._m0[_649 + 7u].x + _2260) < 0.5)
            {
                _2482 = true;
                break;
            }
        }
        uint _2398 = _650 + uint(_2229.w);
        if ((cbInstanceData._m0[_2398].w < 1.0) && ((cbInstanceData._m0[_2398].w + _2260) < 0.5))
        {
            _2482 = true;
            break;
        }
        if ((_2253 + 1.0) < _2251.x)
        {
            _2482 = true;
            break;
        }
        _2482 = false;
        break;
    }
    float _2713;
    if (_2482)
    {
        discard_state = true;
        _2713 = 0.0;
    }
    else
    {
        _2713 = cbInstanceData._m0[_2105].w;
    }
    SV_Target.x = _2257;
    SV_Target.y = _2258;
    SV_Target.z = _2259;
    SV_Target.w = _2713;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2105].w;
    discard_exit();
}


