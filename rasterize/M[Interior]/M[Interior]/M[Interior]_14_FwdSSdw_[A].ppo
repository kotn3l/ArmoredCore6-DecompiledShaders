#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1045;
float _3181;
float _3182;
float _3183;
float _3184;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _280 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _283 = _280.x;
    vec4 _301 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _318 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _283) + cbMtdParam._m0[12u].x) * _301.x;
    float _320 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _283) + cbMtdParam._m0[12u].y) * _301.y;
    float _322 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _283) + cbMtdParam._m0[12u].z) * _301.z;
    vec4 _343 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _379 = cbMtdParam._m0[21u].w + _265;
    float _380 = cbMtdParam._m0[22u].x + _266;
    float _381 = cbMtdParam._m0[22u].y + _267;
    float _395 = (-0.0) - dot(vec3(_379, _380, _381), vec3(_194, _195, _196));
    float _396 = (-0.0) - dot(vec3(_379, _380, _381), vec3(_208, _209, _210));
    float _397 = (-0.0) - dot(vec3(_379, _380, _381), vec3((-0.0) - _201, (-0.0) - _202, (-0.0) - _203));
    float _401 = inversesqrt(dot(vec3(_395, _396, _397), vec3(_395, _396, _397)));
    float _404 = _401 * _397;
    float _407 = ((_401 * _395) + ((cbMtdParam._m0[19u].w * _283) * ((_343.x * 2.0) + (-1.0)))) * cbMtdParam._m0[18u].z;
    float _408 = ((_401 * _396) + ((cbMtdParam._m0[20u].x * _283) * ((_343.y * 2.0) + (-1.0)))) * cbMtdParam._m0[18u].y;
    float _409 = fract(TEXCOORD.x);
    float _410 = fract(TEXCOORD.y);
    float _416;
    if (_407 > 0.0)
    {
        _416 = (1.0 - _409) / _407;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_407 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _409) / _407;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _416 = frontier_phi_3_2_ladder;
    }
    float _424;
    if (_408 > 0.0)
    {
        _424 = (1.0 - _410) / _408;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_408 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _410) / _408;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _424 = frontier_phi_7_6_ladder;
    }
    float _428 = (_404 > 0.0) ? (cbMtdParam._m0[15u].x / _404) : 5000.0;
    float _429 = isnan(_424) ? _416 : (isnan(_416) ? _424 : min(_416, _424));
    float _430 = isnan(_428) ? _429 : (isnan(_429) ? _428 : min(_429, _428));
    float _434 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _441 = ((_430 * _404) + _434) / _434;
    vec4 _465 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * ((((((_409 + (-0.5)) + (_430 * _407)) / _441) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((((((_410 + (-0.5)) + (_430 * _408)) / _441) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _481 = _283 * 0.1500000059604644775390625;
    float _489 = (_481 * (((_465.x * _283) * cbMtdParam._m0[9u].x) - _318)) + _318;
    float _490 = (_481 * (((_465.y * _283) * cbMtdParam._m0[9u].y) - _320)) + _320;
    float _491 = (_481 * (((_465.z * _283) * cbMtdParam._m0[9u].z) - _322)) + _322;
    vec4 _503 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _507 = _503.z;
    float _510 = (_503.x * 2.0) + (-1.0);
    float _511 = (_503.y * 2.0) + (-1.0);
    float _512 = dot(vec2(_510, _511), vec2(_510, _511));
    float _3203 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _517 = sqrt(1.0 - (isnan(1.0) ? _3203 : (isnan(_3203) ? 1.0 : min(_3203, 1.0))));
    float _520 = fma(_517, _201, fma(_511, _208, _510 * _194));
    float _523 = fma(_517, _202, fma(_511, _209, _510 * _195));
    float _526 = fma(_517, _203, fma(_511, _210, _510 * _196));
    float _530 = inversesqrt(dot(vec3(_520, _523, _526), vec3(_520, _523, _526)));
    float _531 = _530 * _520;
    float _532 = _530 * _523;
    float _533 = _530 * _526;
    float _3214 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _534 = isnan(1.0) ? _3214 : (isnan(_3214) ? 1.0 : min(_3214, 1.0));
    float _3225 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _3236 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _3247 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _553 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _557 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _558 = _265 * _557;
    float _559 = _266 * _557;
    float _560 = _267 * _557;
    vec4 _565 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _567 = _565.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _726 = sqrt(((_265 * _265) + (_266 * _266)) + (_267 * _267));
        float _732 = (cbMatDynParam._m0[5u].x * _726) + cbMatDynParam._m0[5u].y;
        float _3258 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _733 = isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0));
        float _737 = (cbMatDynParam._m0[5u].z * _726) + cbMatDynParam._m0[5u].w;
        float _3269 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0))) - _733)) + _733) < ((_567 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _580 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _581 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _601 = fma(_533, cbSceneParam._m0[5u].z, fma(_532, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _531));
    float _604 = fma(_533, cbSceneParam._m0[6u].z, fma(_532, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _531));
    float _607 = fma(_533, cbSceneParam._m0[7u].z, fma(_532, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _531));
    uint _620 = uint(roundEven(NORMAL.w)) * 13u;
    uint _622 = _620 + 9u;
    uint _623 = _622 + uint(cbMatDynParam._m0[0u].w);
    float _629 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3225 : (isnan(_3225) ? 1.0 : min(_3225, 1.0)))) * cbInstanceData._m0[_623].x;
    float _630 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0)))) * cbInstanceData._m0[_623].y;
    float _631 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0)))) * cbInstanceData._m0[_623].z;
    float _3280 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _632 = isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0));
    float _3291 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _633 = isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0));
    float _3302 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _634 = isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0));
    vec4 _643 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _580, cbSceneParam._m0[86u].y * _581));
    float _646 = _643.x * TEXCOORD.z;
    float _647 = dot(vec3(_531, _532, _533), vec3(_558, _559, _560));
    float _650 = _647 * 2.0;
    float _654 = (_650 * _531) - _558;
    float _655 = (_650 * _532) - _559;
    float _656 = (_650 * _533) - _560;
    float _660 = abs(dot(vec3(_558, _559, _560), vec3(_531, _532, _533)));
    float _3313 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _662 = sqrt(_534);
    float _675 = exp2((_662 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_662 * 3.0));
    float _707 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _711 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _715 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1044;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _771 = fma(_715, cbModelParam._m0[26u].z, fma(_711, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _707));
        float _775 = fma(_715, cbModelParam._m0[27u].z, fma(_711, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _707));
        float _779 = fma(_715, cbModelParam._m0[28u].z, fma(_711, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _707));
        float _802 = _707 + _531;
        float _803 = _711 + _532;
        float _804 = _715 + _533;
        float _814 = fma(_804, cbModelParam._m0[26u].z, fma(_803, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _802)) - _771;
        float _815 = fma(_804, cbModelParam._m0[27u].z, fma(_803, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _802)) - _775;
        float _816 = fma(_804, cbModelParam._m0[28u].z, fma(_803, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _802)) - _779;
        float _820 = inversesqrt(dot(vec3(_814, _815, _816), vec3(_814, _815, _816)));
        float _833 = ((_820 * _814) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_771 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _834 = ((_820 * _815) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_775 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _835 = ((_820 * _816) / cbModelParam._m0[34u].z) + ((((((_779 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        float _872 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _873 = _872 * (_838.x + (-0.5));
        float _874 = _872 * (_838.y + (-0.5));
        float _875 = _872 * (_838.z + (-0.5));
        float _882 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_845.x + (-0.5));
        float _884 = _882 * (_845.y + (-0.5));
        float _885 = _882 * (_845.z + (-0.5));
        float _892 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_852.x + (-0.5));
        float _894 = _892 * (_852.y + (-0.5));
        float _895 = _892 * (_852.z + (-0.5));
        float _902 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_859.x + (-0.5));
        float _904 = _902 * (_859.y + (-0.5));
        float _905 = _902 * (_859.z + (-0.5));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = _873 * 0.5;
        float _910 = _883 * 0.5;
        float _911 = _893 * 0.5;
        float _912 = dot(vec3(_909, _910, _911), vec3(_909, _910, _911));
        float _917 = (_912 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_912);
        float _926 = (dot(vec3(_531, _532, _533), vec3(_917 * _909, _917 * _910, _917 * _911)) + 1.0) * 0.5;
        float _3339 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _936 = sqrt(((_910 * _910) + (_909 * _909)) + (_911 * _911)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3350 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0));
        float _938 = _937 * 2.0;
        float _942 = (1.0 - _937) / (_937 + 1.0);
        float _3361 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
        float _952 = ((((1.0 - _943) * (_938 + 2.0)) * exp2(log2(isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0))) * (_938 + 1.0))) + _943) * _906;
        float _953 = _874 * 0.5;
        float _954 = _884 * 0.5;
        float _955 = _894 * 0.5;
        float _956 = dot(vec3(_953, _954, _955), vec3(_953, _954, _955));
        float _961 = (_956 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_956);
        float _969 = (dot(vec3(_531, _532, _533), vec3(_961 * _953, _961 * _954, _961 * _955)) + 1.0) * 0.5;
        float _3372 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _978 = sqrt(((_954 * _954) + (_953 * _953)) + (_955 * _955)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _3383 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
        float _980 = _979 * 2.0;
        float _984 = (1.0 - _979) / (_979 + 1.0);
        float _3394 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
        float _994 = ((((1.0 - _985) * (_980 + 2.0)) * exp2(log2(isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0))) * (_980 + 1.0))) + _985) * _907;
        float _995 = _875 * 0.5;
        float _996 = _885 * 0.5;
        float _997 = _895 * 0.5;
        float _998 = dot(vec3(_995, _996, _997), vec3(_995, _996, _997));
        float _1003 = (_998 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_998);
        float _1011 = (dot(vec3(_531, _532, _533), vec3(_1003 * _995, _1003 * _996, _1003 * _997)) + 1.0) * 0.5;
        float _3405 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1020 = sqrt(((_996 * _996) + (_995 * _995)) + (_997 * _997)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3416 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
        float _1022 = _1021 * 2.0;
        float _1026 = (1.0 - _1021) / (_1021 + 1.0);
        float _3427 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _1036 = ((((1.0 - _1027) * (_1022 + 2.0)) * exp2(log2(isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0))) * (_1022 + 1.0))) + _1027) * _908;
        _1044 = _875;
        _1046 = _874;
        _1047 = _873;
        _1048 = _885;
        _1049 = _884;
        _1050 = _883;
        _1051 = _895;
        _1052 = _894;
        _1053 = _893;
        _1054 = _908;
        _1055 = _907;
        _1056 = _906;
        _1057 = cbModelParam._m0[36u].z * (isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0)));
        _1058 = cbModelParam._m0[36u].z * (isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0)));
        _1059 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0)));
    }
    else
    {
        _1044 = _1045;
        _1046 = _1045;
        _1047 = _1045;
        _1048 = _1045;
        _1049 = _1045;
        _1050 = _1045;
        _1051 = _1045;
        _1052 = _1045;
        _1053 = _1045;
        _1054 = _1045;
        _1055 = _1045;
        _1056 = _1045;
        _1057 = 0.0;
        _1058 = 0.0;
        _1059 = 0.0;
    }
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1088 = fma(_715, cbModelParam._m0[30u].z, fma(_711, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _707));
        float _1092 = fma(_715, cbModelParam._m0[31u].z, fma(_711, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _707));
        float _1096 = fma(_715, cbModelParam._m0[32u].z, fma(_711, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _707));
        float _1119 = _707 + _531;
        float _1120 = _711 + _532;
        float _1121 = _715 + _533;
        float _1131 = fma(_1121, cbModelParam._m0[30u].z, fma(_1120, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1119)) - _1088;
        float _1132 = fma(_1121, cbModelParam._m0[31u].z, fma(_1120, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1119)) - _1092;
        float _1133 = fma(_1121, cbModelParam._m0[32u].z, fma(_1120, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1119)) - _1096;
        float _1137 = inversesqrt(dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133)));
        float _1150 = ((_1137 * _1131) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1088 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1151 = ((_1137 * _1132) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1092 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1152 = ((_1137 * _1133) / cbModelParam._m0[35u].z) + ((((((_1096 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1150, _1151, _1152), 0.0);
        float _1187 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1154.x + (-0.5));
        float _1189 = _1187 * (_1154.y + (-0.5));
        float _1190 = _1187 * (_1154.z + (-0.5));
        float _1197 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1161.x + (-0.5));
        float _1199 = _1197 * (_1161.y + (-0.5));
        float _1200 = _1197 * (_1161.z + (-0.5));
        float _1207 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1168.x + (-0.5));
        float _1209 = _1207 * (_1168.y + (-0.5));
        float _1210 = _1207 * (_1168.z + (-0.5));
        float _1217 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1175.x + (-0.5));
        float _1219 = _1217 * (_1175.y + (-0.5));
        float _1220 = _1217 * (_1175.z + (-0.5));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = _1188 * 0.5;
        float _1225 = _1198 * 0.5;
        float _1226 = _1208 * 0.5;
        float _1227 = dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226));
        float _1232 = (_1227 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1227);
        float _1240 = (dot(vec3(_531, _532, _533), vec3(_1232 * _1224, _1232 * _1225, _1232 * _1226)) + 1.0) * 0.5;
        float _3468 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1249 = sqrt(((_1225 * _1225) + (_1224 * _1224)) + (_1226 * _1226)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _3479 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
        float _1251 = _1250 * 2.0;
        float _1255 = (1.0 - _1250) / (_1250 + 1.0);
        float _3490 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
        float _1265 = ((((1.0 - _1256) * (_1251 + 2.0)) * exp2(log2(isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0))) * (_1251 + 1.0))) + _1256) * _1221;
        float _1266 = _1189 * 0.5;
        float _1267 = _1199 * 0.5;
        float _1268 = _1209 * 0.5;
        float _1269 = dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268));
        float _1274 = (_1269 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1269);
        float _1282 = (dot(vec3(_531, _532, _533), vec3(_1274 * _1266, _1274 * _1267, _1274 * _1268)) + 1.0) * 0.5;
        float _3501 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1291 = sqrt(((_1267 * _1267) + (_1266 * _1266)) + (_1268 * _1268)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _3512 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _3523 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))) * (_1293 + 1.0))) + _1298) * _1222;
        float _1308 = _1190 * 0.5;
        float _1309 = _1200 * 0.5;
        float _1310 = _1210 * 0.5;
        float _1311 = dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310));
        float _1316 = (_1311 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1311);
        float _1324 = (dot(vec3(_531, _532, _533), vec3(_1316 * _1308, _1316 * _1309, _1316 * _1310)) + 1.0) * 0.5;
        float _3534 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1333 = sqrt(((_1309 * _1309) + (_1308 * _1308)) + (_1310 * _1310)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _3545 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _1335 = _1334 * 2.0;
        float _1339 = (1.0 - _1334) / (_1334 + 1.0);
        float _3556 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _1349 = ((((1.0 - _1340) * (_1335 + 2.0)) * exp2(log2(isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) * (_1335 + 1.0))) + _1340) * _1223;
        _1357 = _1190;
        _1358 = _1189;
        _1359 = _1188;
        _1360 = _1200;
        _1361 = _1199;
        _1362 = _1198;
        _1363 = _1210;
        _1364 = _1209;
        _1365 = _1208;
        _1366 = _1223;
        _1367 = _1222;
        _1368 = _1221;
        _1369 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)));
        _1370 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
        _1371 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
    }
    else
    {
        _1357 = _1045;
        _1358 = _1045;
        _1359 = _1045;
        _1360 = _1045;
        _1361 = _1045;
        _1362 = _1045;
        _1363 = _1045;
        _1364 = _1045;
        _1365 = _1045;
        _1366 = _1045;
        _1367 = _1045;
        _1368 = _1045;
        _1369 = 0.0;
        _1370 = 0.0;
        _1371 = 0.0;
    }
    float _1381 = (cbModelParam._m0[1u].x * (_1369 - _1057)) + _1057;
    float _1382 = (cbModelParam._m0[1u].x * (_1370 - _1058)) + _1058;
    float _1383 = (cbModelParam._m0[1u].x * (_1371 - _1059)) + _1059;
    float _1404 = fma(_1383, cbSceneParam._m0[89u].z, fma(_1382, cbSceneParam._m0[89u].y, _1381 * cbSceneParam._m0[89u].x));
    float _1407 = fma(_1383, cbSceneParam._m0[90u].z, fma(_1382, cbSceneParam._m0[90u].y, _1381 * cbSceneParam._m0[90u].x));
    float _1410 = fma(_1383, cbSceneParam._m0[91u].z, fma(_1382, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1381));
    float _1425 = _654 * 0.5;
    float _1426 = _655 * 0.5;
    float _1427 = _656 * 0.5;
    float _1428 = dot(vec4(_1425, _1426, _1427, 1.0), vec4(_1359, _1362, _1365, _1368));
    float _1431 = dot(vec4(_1425, _1426, _1427, 1.0), vec4(_1358, _1361, _1364, _1367));
    float _1434 = dot(vec4(_1425, _1426, _1427, 1.0), vec4(_1357, _1360, _1363, _1366));
    float _1468;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1441 = dot(vec4(_1425, _1426, _1427, 1.0), vec4(_1044, _1048, _1051, _1054));
        float _1445 = dot(vec4(_1425, _1426, _1427, 1.0), vec4(_1046, _1049, _1052, _1055));
        float _1449 = dot(vec4(_1425, _1426, _1427, 1.0), vec4(_1047, _1050, _1053, _1056));
        float _1456 = dot(vec4(cbModelParam._m0[39u]), vec4(_1425, _1426, _1427, 1.0));
        _1468 = dot(vec3(isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)), isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)), isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1456) ? 0.0 : (isnan(0.0) ? _1456 : max(0.0, _1456))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1468 = 1.0;
    }
    float _1479;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1470 = dot(vec4(cbModelParam._m0[40u]), vec4(_1425, _1426, _1427, 1.0));
        _1479 = dot(vec3(isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)), isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1470) ? 0.0 : (isnan(0.0) ? _1470 : max(0.0, _1470))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1479 = 1.0;
    }
    float _1483 = (_1479 * cbModelParam._m0[1u].x) + (_1468 * (1.0 - cbModelParam._m0[1u].x));
    float _1493 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _534);
    float _1494 = isnan(_1493) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1493 : min(cbModelParam._m0[25u].z, _1493));
    float _1575;
    float _1577;
    float _1579;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1542 = fma(_715, cbModelParam._m0[13u].z, fma(_711, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _707)) + cbModelParam._m0[13u].w;
        float _1546 = fma(_715, cbModelParam._m0[14u].z, fma(_711, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _707)) + cbModelParam._m0[14u].w;
        float _1550 = fma(_715, cbModelParam._m0[15u].z, fma(_711, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _707)) + cbModelParam._m0[15u].w;
        float _1553 = fma(_656, cbModelParam._m0[13u].z, fma(_655, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _654));
        float _1556 = fma(_656, cbModelParam._m0[14u].z, fma(_655, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _654));
        float _1559 = fma(_656, cbModelParam._m0[15u].z, fma(_655, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _654));
        float _1587;
        if (_1553 > 0.0)
        {
            _1587 = abs((1.0 - _1542) / _1553);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1553 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1542 + 1.0) / _1553);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1587 = frontier_phi_25_23_ladder;
        }
        float _1956;
        if (_1556 > 0.0)
        {
            _1956 = abs((1.0 - _1546) / _1556);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1556 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1546 + 1.0) / _1556);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1956 = frontier_phi_34_30_ladder;
        }
        float _2264;
        if (_1559 > 0.0)
        {
            _2264 = abs((1.0 - _1550) / _1559);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1559 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1550 + 1.0) / _1559);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _2264 = frontier_phi_48_41_ladder;
        }
        float _2266 = isnan(_1956) ? _1587 : (isnan(_1587) ? _1956 : min(_1587, _1956));
        float _2267 = isnan(_2264) ? _2266 : (isnan(_2266) ? _2264 : min(_2266, _2264));
        float _2271 = (_2267 * _1553) + _1542;
        float _2272 = (_2267 * _1556) + _1546;
        float _2273 = (_2267 * _1559) + _1550;
        float _2274 = _2267 * 9.9999997473787516355514526367188e-05;
        float _2275 = (-1.0) - _2274;
        float _2277 = _2274 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2273 > _2277) || ((_2273 < _2275) || ((_2272 > _2277) || ((_2272 < _2275) || ((_2271 < _2275) || (_2271 > _2277))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2415 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2273, cbModelParam._m0[9u].z, fma(_2272, cbModelParam._m0[9u].y, _2271 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2273, cbModelParam._m0[10u].z, fma(_2272, cbModelParam._m0[10u].y, _2271 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2273, cbModelParam._m0[11u].z, fma(_2272, cbModelParam._m0[11u].y, _2271 * cbModelParam._m0[11u].x))), _1494);
            frontier_phi_24_48_ladder = _2415.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _2415.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _2415.x * cbModelParam._m0[1u].y;
        }
        _1575 = frontier_phi_24_48_ladder_2;
        _1577 = frontier_phi_24_48_ladder_1;
        _1579 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1563 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_654, _655, _656), _1494);
        _1575 = _1563.x * cbModelParam._m0[1u].y;
        _1577 = _1563.y * cbModelParam._m0[1u].y;
        _1579 = _1563.z * cbModelParam._m0[1u].y;
    }
    float _1583 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _534);
    float _1584 = isnan(_1583) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1583 : min(cbModelParam._m0[25u].w, _1583));
    float _1672;
    float _1674;
    float _1676;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1636 = fma(_715, cbModelParam._m0[21u].z, fma(_711, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _707)) + cbModelParam._m0[21u].w;
        float _1640 = fma(_715, cbModelParam._m0[22u].z, fma(_711, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _707)) + cbModelParam._m0[22u].w;
        float _1644 = fma(_715, cbModelParam._m0[23u].z, fma(_711, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _707)) + cbModelParam._m0[23u].w;
        float _1647 = fma(_656, cbModelParam._m0[21u].z, fma(_655, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _654));
        float _1650 = fma(_656, cbModelParam._m0[22u].z, fma(_655, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _654));
        float _1653 = fma(_656, cbModelParam._m0[23u].z, fma(_655, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _654));
        float _1961;
        if (_1647 > 0.0)
        {
            _1961 = abs((1.0 - _1636) / _1647);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1636 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1961 = frontier_phi_36_32_ladder;
        }
        float _2290;
        if (_1650 > 0.0)
        {
            _2290 = abs((1.0 - _1640) / _1650);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1640 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _2290 = frontier_phi_50_43_ladder;
        }
        float _2480;
        if (_1653 > 0.0)
        {
            _2480 = abs((1.0 - _1644) / _1653);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1644 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2480 = frontier_phi_68_61_ladder;
        }
        float _2482 = isnan(_2290) ? _1961 : (isnan(_1961) ? _2290 : min(_1961, _2290));
        float _2483 = isnan(_2480) ? _2482 : (isnan(_2482) ? _2480 : min(_2482, _2480));
        float _2487 = (_2483 * _1647) + _1636;
        float _2488 = (_2483 * _1650) + _1640;
        float _2489 = (_2483 * _1653) + _1644;
        float _2490 = _2483 * 9.9999997473787516355514526367188e-05;
        float _2491 = (-1.0) - _2490;
        float _2493 = _2490 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2489 > _2493) || ((_2489 < _2491) || ((_2488 > _2493) || ((_2488 < _2491) || ((_2487 < _2491) || (_2487 > _2493))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2731 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2489, cbModelParam._m0[17u].z, fma(_2488, cbModelParam._m0[17u].y, _2487 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2489, cbModelParam._m0[18u].z, fma(_2488, cbModelParam._m0[18u].y, _2487 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2489, cbModelParam._m0[19u].z, fma(_2488, cbModelParam._m0[19u].y, _2487 * cbModelParam._m0[19u].x))), _1584);
            frontier_phi_33_68_ladder = _2731.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2731.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2731.x * cbModelParam._m0[1u].z;
        }
        _1672 = frontier_phi_33_68_ladder_2;
        _1674 = frontier_phi_33_68_ladder;
        _1676 = frontier_phi_33_68_ladder_1;
    }
    else
    {
        vec4 _1656 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_654, _655, _656), _1584);
        _1672 = _1656.x * cbModelParam._m0[1u].z;
        _1674 = _1656.y * cbModelParam._m0[1u].z;
        _1676 = _1656.z * cbModelParam._m0[1u].z;
    }
    float _1688 = ((((1.0 - _675) * ((_662 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_675 * _662)) * _646;
    float _1689 = _1688 * ((cbModelParam._m0[1u].w * (_1672 - _1575)) + _1575);
    float _1690 = _1688 * ((cbModelParam._m0[1u].w * (_1674 - _1577)) + _1577);
    float _1691 = _1688 * ((cbModelParam._m0[1u].w * (_1676 - _1579)) + _1579);
    float _1694 = fma(_1691, cbSceneParam._m0[89u].z, fma(_1690, cbSceneParam._m0[89u].y, _1689 * cbSceneParam._m0[89u].x));
    float _1697 = fma(_1691, cbSceneParam._m0[90u].z, fma(_1690, cbSceneParam._m0[90u].y, _1689 * cbSceneParam._m0[90u].x));
    float _1700 = fma(_1691, cbSceneParam._m0[91u].z, fma(_1690, cbSceneParam._m0[91u].y, _1689 * cbSceneParam._m0[91u].x));
    vec4 _1708 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_580, _581));
    float _1710 = _1708.w;
    float _1722 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1710);
    float _1723 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1710);
    float _1724 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1710);
    uvec4 _1728 = floatBitsToUint(cbInstanceData._m0[_620 + 5u]);
    uint _1730 = _1728.x * 14u;
    uint _1731 = _1730 + 13u;
    float _1736 = _646 + (-1.0);
    float _1739 = (cbLight._m0[_1731].x * _1736) + 1.0;
    float _1740 = (cbLight._m0[_1731].y * _1736) + 1.0;
    uint _1741 = _1730 + 5u;
    float _1747 = isnan(1.0) ? _1740 : (isnan(_1740) ? 1.0 : min(_1740, 1.0));
    uint _1751 = _1730 + 4u;
    float _1760 = isnan(1.0) ? _1739 : (isnan(_1739) ? 1.0 : min(_1739, 1.0));
    uint _1764 = _1730 | 1u;
    float _1775 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_531, _532, _533));
    float _1778 = dot(vec3(cbLight._m0[_1764].xyz), vec3(_531, _532, _533));
    float _3692 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
    float _3703 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
    float _1783 = (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * 0.3183098733425140380859375;
    float _1785 = (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * 0.3183098733425140380859375;
    float _1792 = ((cbLight._m0[_1741].x * _1747) * _1785) + (((cbLight._m0[_1751].x * _1722) * _1760) * _1783);
    float _1793 = ((_1747 * cbLight._m0[_1741].y) * _1785) + (((cbLight._m0[_1751].y * _1723) * _1760) * _1783);
    float _1794 = ((_1747 * cbLight._m0[_1741].z) * _1785) + (((cbLight._m0[_1751].z * _1724) * _1760) * _1783);
    uint _1796 = _1730 + 8u;
    float _1809 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1730].w)) * _534) * 0.949999988079071044921875);
    float _1810 = _1809 * _1809;
    float _1811 = cbLight._m0[_1730].x + _558;
    float _1812 = cbLight._m0[_1730].y + _559;
    float _1813 = cbLight._m0[_1730].z + _560;
    float _1817 = inversesqrt(dot(vec3(_1811, _1812, _1813), vec3(_1811, _1812, _1813)));
    float _1818 = _1817 * _1811;
    float _1819 = _1817 * _1812;
    float _1820 = _1817 * _1813;
    float _1821 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_1730].xyz));
    float _3714 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
    float _1824 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _3725 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _1825 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _1826 = dot(vec3(_531, _532, _533), vec3(_1818, _1819, _1820));
    float _3736 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1829 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _1830 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_1818, _1819, _1820));
    float _3747 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _1834 = _1810 * _1810;
    float _1838 = ((_1829 * _1829) * (_1834 + (-1.0))) + 1.0;
    float _1849 = (exp2(log2(1.0 - (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1850 = 1.0 - _1810;
    float _1861 = (0.5 / (((_1825 * ((_1824 * _1850) + _1810)) + 9.9999999392252902907785028219223e-09) + (((_1825 * _1850) + _1810) * _1824))) * _1824;
    float _3758 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1863 = (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_1834 / ((_1838 * _1838) * 3.141590118408203125));
    uint _1877 = _1730 + 9u;
    float _1888 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1764].w)) * _534) * 0.949999988079071044921875);
    float _1889 = _1888 * _1888;
    float _1890 = cbLight._m0[_1764].x + _558;
    float _1891 = cbLight._m0[_1764].y + _559;
    float _1892 = cbLight._m0[_1764].z + _560;
    float _1896 = inversesqrt(dot(vec3(_1890, _1891, _1892), vec3(_1890, _1891, _1892)));
    float _1897 = _1896 * _1890;
    float _1898 = _1896 * _1891;
    float _1899 = _1896 * _1892;
    float _1900 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_1764].xyz));
    float _3769 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
    float _1903 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _1904 = dot(vec3(_531, _532, _533), vec3(_1897, _1898, _1899));
    float _3780 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _1907 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _1908 = dot(vec3(cbLight._m0[_1764].xyz), vec3(_1897, _1898, _1899));
    float _3791 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1912 = _1889 * _1889;
    float _1916 = ((_1907 * _1907) * (_1912 + (-1.0))) + 1.0;
    float _1925 = (exp2(log2(1.0 - (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1926 = 1.0 - _1889;
    float _1936 = (0.5 / (((_1825 * ((_1903 * _1926) + _1889)) + 9.9999999392252902907785028219223e-09) + (((_1825 * _1926) + _1889) * _1903))) * _1903;
    float _3802 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1938 = (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * (_1912 / ((_1916 * _1916) * 3.141590118408203125));
    float _1948 = (((_1925 * cbLight._m0[_1877].x) * _1938) * _1747) + ((((cbLight._m0[_1796].x * _1722) * _1849) * _1863) * _1760);
    float _1949 = (((_1925 * cbLight._m0[_1877].y) * _1938) * _1747) + ((((cbLight._m0[_1796].y * _1723) * _1849) * _1863) * _1760);
    float _1950 = (((_1925 * cbLight._m0[_1877].z) * _1938) * _1747) + ((((cbLight._m0[_1796].z * _1724) * _1849) * _1863) * _1760);
    float _2065;
    float _2067;
    float _2069;
    float _2071;
    float _2073;
    float _2075;
    if (_1728.y == 0u)
    {
        float _2005 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2006 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2005;
        float _2007 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2005;
        float _2008 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2005;
        uvec4 _2020 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2021 = _2020.x;
        uint _2032 = uint((float(_2020.y) * floor(float(uint(cbSceneParam._m0[85u].y * _581) / _2021))) + floor(float(uint(cbSceneParam._m0[85u].x * _580) / _2021)));
        float _2042 = (log2(_2008 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2043 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
        uint _2046 = uint(isnan(14.0) ? _2043 : (isnan(_2043) ? 14.0 : min(_2043, 14.0)));
        uvec4 _2051 = texelFetch(g_lightClusterGridBuffer, int(((_2046 << 2u) + (_2032 << 6u)) >> 2u));
        uint _2052 = _2051.x;
        uint _2053 = _2020.z;
        float _2143;
        float _2145;
        float _2147;
        float _2149;
        float _2151;
        float _2153;
        if (((((1u << ((_2053 >> 4u) & 15u)) + 4294967295u) & _2052) == 0u) || ((_2053 & 240u) == 0u))
        {
            _2143 = 0.0;
            _2145 = 0.0;
            _2147 = 0.0;
            _2149 = 0.0;
            _2151 = 0.0;
            _2153 = 0.0;
        }
        else
        {
            float _2144;
            float _2146;
            float _2148;
            float _2150;
            float _2152;
            float _2154;
            float _2327 = 0.0;
            float _2328 = 0.0;
            float _2329 = 0.0;
            float _2330 = 0.0;
            float _2331 = 0.0;
            float _2332 = 0.0;
            uint _2333 = 0u;
            uint _2342;
            bool _2343;
            for (;;)
            {
                _2342 = texelFetch(g_lightClassification, int((((_2046 << 5u) + (_2032 << 9u)) + (_2333 << 2u)) >> 2u)).x;
                _2343 = _2342 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2343)
                {
                    frontier_phi_63_pred = _2329;
                    frontier_phi_63_pred_1 = _2332;
                    frontier_phi_63_pred_2 = _2331;
                    frontier_phi_63_pred_3 = _2330;
                    frontier_phi_63_pred_4 = _2328;
                    frontier_phi_63_pred_5 = _2327;
                }
                else
                {
                    float _2523;
                    float _2524;
                    float _2525;
                    float _2526;
                    float _2527;
                    float _2528;
                    uint _2529;
                    _2523 = _2327;
                    _2524 = _2328;
                    _2525 = _2329;
                    _2526 = _2330;
                    _2527 = _2331;
                    _2528 = _2332;
                    _2529 = _2342;
                    float _2424;
                    float _2425;
                    float _2426;
                    float _2427;
                    float _2428;
                    float _2429;
                    for (;;)
                    {
                        uint _2533 = uint(findLSB(_2529)) + (_2333 << 5u);
                        uint _2530 = (_2529 + 4294967295u) & _2529;
                        uint _2535 = _2533 * 48u;
                        vec4 _2549 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2535)).x, texelFetch(g_PointLightRenderingBuffer, int(_2535 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2535 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2535 + 3u)).x));
                        uint _2555 = (_2533 * 48u) + 4u;
                        vec4 _2568 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2555)).x, texelFetch(g_PointLightRenderingBuffer, int(_2555 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2555 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2555 + 3u)).x));
                        uint _2574 = (_2533 * 48u) + 8u;
                        vec3 _2585 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2574)).x, texelFetch(g_PointLightRenderingBuffer, int(_2574 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2574 + 2u)).x));
                        float _2589 = _2549.x - _2006;
                        float _2590 = _2549.y - _2007;
                        float _2591 = _2549.z - _2008;
                        float _2592 = dot(vec3(_2589, _2590, _2591), vec3(_2589, _2590, _2591));
                        float _2595 = inversesqrt(_2592);
                        float _2596 = _2595 * _2589;
                        float _2597 = _2595 * _2590;
                        float _2598 = _2595 * _2591;
                        float _2599 = dot(vec3(_601, _604, _607), vec3(_2596, _2597, _2598));
                        float _2604 = 1.0 - (_2592 * _2549.w);
                        float _3823 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
                        float _2605 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
                        float _2606 = sqrt(_2592) * _2568.w;
                        float _2609 = 1.39999997615814208984375 / (_2606 + 1.39999997615814208984375);
                        float _2610 = _2609 * _2609;
                        float _2613 = ((1.0 - _2610) * _2599) + _2610;
                        float _2616 = _2606 * _2606;
                        float _2620 = ((isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0))) * _2605) / ((_2616 * 0.699999988079071044921875) + 1.0);
                        float _2624 = (-0.0) - _2006;
                        float _2625 = (-0.0) - _2007;
                        float _2626 = (-0.0) - _2008;
                        float _2630 = inversesqrt(dot(vec3(_2624, _2625, _2626), vec3(_2624, _2625, _2626)));
                        float _2631 = _2630 * _2624;
                        float _2632 = _2630 * _2625;
                        float _2633 = _2630 * _2626;
                        float _2641 = exp2(log2(1.0 / ((_2616 * 3.5) + 5.0)) * 0.25);
                        float _2642 = 1.0 - _662;
                        float _2649 = sqrt(1.0 - ((1.0 - (_2642 * _2642)) * (1.0 - (_2641 * _2641))));
                        float _2650 = _2649 * _2649;
                        float _2651 = _2650 * _2650;
                        float _2652 = _2631 + _2596;
                        float _2653 = _2632 + _2597;
                        float _2654 = _2633 + _2598;
                        float _2658 = inversesqrt(dot(vec3(_2652, _2653, _2654), vec3(_2652, _2653, _2654)));
                        float _2662 = dot(vec3(_601, _604, _607), vec3(_2631, _2632, _2633));
                        float _3839 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
                        float _2665 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
                        float _2666 = dot(vec3(_601, _604, _607), vec3(_2658 * _2652, _2658 * _2653, _2658 * _2654));
                        float _3850 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
                        float _2669 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
                        float _2673 = ((_2669 * _2669) * (_2651 + (-1.0))) + 1.0;
                        float _2674 = _2609 * _2650;
                        float _2675 = _2674 * _2674;
                        float _2678 = ((1.0 - _2675) * _2599) + _2675;
                        float _3861 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
                        float _2679 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
                        float _2680 = 1.0 - _2650;
                        float _2690 = (0.5 / (((_2679 * ((_2665 * _2680) + _2650)) + 9.9999999392252902907785028219223e-09) + (((_2679 * _2680) + _2650) * _2665))) * _2679;
                        float _3872 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
                        float _2701 = (((_2651 * 3.1415927410125732421875) * (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0)))) / ((_2673 * _2673) * ((_2616 * 2.1991131305694580078125) + 3.141590118408203125))) * _2605;
                        _2427 = (_2620 * _2568.x) + _2526;
                        _2428 = (_2620 * _2568.y) + _2527;
                        _2429 = (_2620 * _2568.z) + _2528;
                        _2424 = (_2701 * _2585.x) + _2523;
                        _2425 = (_2701 * _2585.y) + _2524;
                        _2426 = (_2701 * _2585.z) + _2525;
                        if (_2530 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2523 = _2424;
                            _2524 = _2425;
                            _2525 = _2426;
                            _2526 = _2427;
                            _2527 = _2428;
                            _2528 = _2429;
                            _2529 = _2530;
                        }
                    }
                    frontier_phi_63_pred = _2426;
                    frontier_phi_63_pred_1 = _2429;
                    frontier_phi_63_pred_2 = _2428;
                    frontier_phi_63_pred_3 = _2427;
                    frontier_phi_63_pred_4 = _2425;
                    frontier_phi_63_pred_5 = _2424;
                }
                _2148 = frontier_phi_63_pred;
                _2154 = frontier_phi_63_pred_1;
                _2152 = frontier_phi_63_pred_2;
                _2150 = frontier_phi_63_pred_3;
                _2146 = frontier_phi_63_pred_4;
                _2144 = frontier_phi_63_pred_5;
                uint _2334 = _2333 + 1u;
                if (_2334 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2327 = _2144;
                    _2328 = _2146;
                    _2329 = _2148;
                    _2330 = _2150;
                    _2331 = _2152;
                    _2332 = _2154;
                    _2333 = _2334;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2143 = _2144;
            _2145 = _2146;
            _2147 = _2148;
            _2149 = _2150;
            _2151 = _2152;
            _2153 = _2154;
        }
        uvec4 _2157 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2158 = _2157.z;
        uint _2160 = (_2158 >> 8u) & 15u;
        float _2295;
        float _2297;
        float _2299;
        float _2301;
        float _2303;
        float _2305;
        if (((4294967295u << _2160) & _2052) == 0u)
        {
            _2295 = _2143;
            _2297 = _2145;
            _2299 = _2147;
            _2301 = _2149;
            _2303 = _2151;
            _2305 = _2153;
        }
        else
        {
            float _2320 = inversesqrt(dot(vec3(_2006, _2007, _2008), vec3(_2006, _2007, _2008)));
            float _2321 = _2320 * _2006;
            float _2322 = _2320 * _2007;
            float _2323 = _2320 * _2008;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2160 < ((_2158 >> 12u) & 15u))
            {
                float _2296;
                float _2298;
                float _2300;
                float _2302;
                float _2304;
                float _2306;
                float _2506 = _2143;
                float _2507 = _2145;
                float _2508 = _2147;
                float _2509 = _2149;
                float _2510 = _2151;
                float _2511 = _2153;
                uint _2512 = _2160;
                uint _2521;
                bool _2522;
                for (;;)
                {
                    _2521 = texelFetch(g_lightClassification, int((((_2046 << 5u) + (_2032 << 9u)) + (_2512 << 2u)) >> 2u)).x;
                    _2522 = _2521 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2522)
                    {
                        frontier_phi_77_pred = _2511;
                        frontier_phi_77_pred_1 = _2510;
                        frontier_phi_77_pred_2 = _2509;
                        frontier_phi_77_pred_3 = _2508;
                        frontier_phi_77_pred_4 = _2507;
                        frontier_phi_77_pred_5 = _2506;
                    }
                    else
                    {
                        float _2736;
                        float _2737;
                        float _2738;
                        float _2739;
                        float _2740;
                        float _2741;
                        float _3030;
                        float _3031;
                        float _3032;
                        float _3033;
                        float _3034;
                        float _3035;
                        float _2749 = _2506;
                        float _2750 = _2507;
                        float _2751 = _2508;
                        float _2752 = _2509;
                        float _2753 = _2510;
                        float _2754 = _2511;
                        uint _2755 = _2521;
                        uint _2756;
                        vec4 _2781;
                        float _2782;
                        vec4 _2797;
                        vec3 _2809;
                        vec4 _2825;
                        vec4 _2840;
                        float _2886;
                        bool _2887;
                        for (;;)
                        {
                            uint _2766 = ((_2512 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2755));
                            _2756 = (_2755 + 4294967295u) & _2755;
                            uint _2768 = _2766 * 40u;
                            _2781 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2768)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2768 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2768 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2768 + 3u)).x));
                            _2782 = _2781.w;
                            uint _2784 = (_2766 * 40u) + 4u;
                            _2797 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2784)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2784 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2784 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2784 + 3u)).x));
                            uint _2799 = (_2766 * 40u) + 8u;
                            _2809 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2799)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2799 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2799 + 2u)).x));
                            uint _2812 = (_2766 * 40u) + 16u;
                            _2825 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2812)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2812 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2812 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2812 + 3u)).x));
                            uint _2827 = (_2766 * 40u) + 20u;
                            _2840 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2827)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 3u)).x));
                            uint _2842 = (_2766 * 40u) + 24u;
                            vec4 _2855 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2842)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 3u)).x));
                            uint _2861 = (_2766 * 40u) + 28u;
                            vec4 _2874 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2861)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 3u)).x));
                            _2886 = fma(_2008, _2874.z, fma(_2007, _2874.y, _2874.x * _2006)) + _2874.w;
                            _2887 = !((fma(_2008, _2855.z, fma(_2007, _2855.y, _2855.x * _2006)) + _2855.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2887)
                            {
                                float _2914 = _2781.x - _2006;
                                float _2915 = _2781.y - _2007;
                                float _2916 = _2781.z - _2008;
                                float _2917 = dot(vec3(_2914, _2915, _2916), vec3(_2914, _2915, _2916));
                                float _2920 = inversesqrt(_2917);
                                float _2921 = _2920 * _2914;
                                float _2922 = _2920 * _2915;
                                float _2923 = _2920 * _2916;
                                float _2927 = 1.0 - (_2917 / (_2782 * _2782));
                                float _3883 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
                                float _2928 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
                                float _2932 = sqrt(_2917) * _2797.w;
                                float _2934 = 1.39999997615814208984375 / (_2932 + 1.39999997615814208984375);
                                float _2935 = _2934 * _2934;
                                float _2938 = ((1.0 - _2935) * dot(vec3(_2921, _2922, _2923), vec3(_601, _604, _607))) + _2935;
                                float _2941 = _2932 * _2932;
                                float _2945 = (fma(_2008, _2825.z, fma(_2007, _2825.y, _2825.x * _2006)) + _2825.w) / _2886;
                                float _2946 = (fma(_2008, _2840.z, fma(_2007, _2840.y, _2840.x * _2006)) + _2840.w) / _2886;
                                float _2950 = 1.0 - dot(vec2(_2945, _2946), vec2(_2945, _2946));
                                float _3899 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
                                float _2951 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
                                float _2952 = _2951 * (((isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0))) * _2928) / ((_2941 * 0.699999988079071044921875) + 1.0));
                                float _2964 = exp2(log2(1.0 / ((_2941 * 3.5) + 5.0)) * 0.25);
                                float _2965 = 1.0 - _662;
                                float _2972 = sqrt(1.0 - ((1.0 - (_2965 * _2965)) * (1.0 - (_2964 * _2964))));
                                float _2973 = _2972 * _2972;
                                float _2974 = _2973 * _2973;
                                float _2975 = _2921 - _2321;
                                float _2976 = _2922 - _2322;
                                float _2977 = _2923 - _2323;
                                float _2981 = inversesqrt(dot(vec3(_2975, _2976, _2977), vec3(_2975, _2976, _2977)));
                                float _2985 = dot(vec3(_601, _604, _607), vec3((-0.0) - _2321, (-0.0) - _2322, (-0.0) - _2323));
                                float _3910 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
                                float _2988 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
                                float _2989 = dot(vec3(_601, _604, _607), vec3(_2981 * _2975, _2981 * _2976, _2981 * _2977));
                                float _3921 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                                float _2992 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
                                float _2996 = ((_2992 * _2992) * (_2974 + (-1.0))) + 1.0;
                                float _2997 = _2934 * _2973;
                                float _2998 = _2997 * _2997;
                                float _3004 = ((1.0 - _2998) * dot(vec3(_601, _604, _607), vec3(_2921, _2922, _2923))) + _2998;
                                float _3932 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                                float _3005 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
                                float _3006 = 1.0 - _2973;
                                float _3016 = (0.5 / (((_3005 * ((_2988 * _3006) + _2973)) + 9.9999999392252902907785028219223e-09) + (((_3005 * _3006) + _2973) * _2988))) * _3005;
                                float _3943 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                                float _3026 = (_2951 * _2928) * (((_2974 * 3.1415927410125732421875) * (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0)))) / ((_2996 * _2996) * ((_2941 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _2952 * _2797.x;
                                frontier_phi_83_pred_1 = _2952 * _2797.z;
                                frontier_phi_83_pred_2 = _2952 * _2797.y;
                                frontier_phi_83_pred_3 = _3026 * _2809.z;
                                frontier_phi_83_pred_4 = _3026 * _2809.y;
                                frontier_phi_83_pred_5 = _3026 * _2809.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3033 = frontier_phi_83_pred;
                            _3035 = frontier_phi_83_pred_1;
                            _3034 = frontier_phi_83_pred_2;
                            _3032 = frontier_phi_83_pred_3;
                            _3031 = frontier_phi_83_pred_4;
                            _3030 = frontier_phi_83_pred_5;
                            _2739 = _3033 + _2752;
                            _2740 = _3034 + _2753;
                            _2741 = _3035 + _2754;
                            _2736 = _3030 + _2749;
                            _2737 = _3031 + _2750;
                            _2738 = _3032 + _2751;
                            if (_2756 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2749 = _2736;
                                _2750 = _2737;
                                _2751 = _2738;
                                _2752 = _2739;
                                _2753 = _2740;
                                _2754 = _2741;
                                _2755 = _2756;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2741;
                        frontier_phi_77_pred_1 = _2740;
                        frontier_phi_77_pred_2 = _2739;
                        frontier_phi_77_pred_3 = _2738;
                        frontier_phi_77_pred_4 = _2737;
                        frontier_phi_77_pred_5 = _2736;
                    }
                    _2306 = frontier_phi_77_pred;
                    _2304 = frontier_phi_77_pred_1;
                    _2302 = frontier_phi_77_pred_2;
                    _2300 = frontier_phi_77_pred_3;
                    _2298 = frontier_phi_77_pred_4;
                    _2296 = frontier_phi_77_pred_5;
                    uint _2513 = _2512 + 1u;
                    if (_2513 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2506 = _2296;
                        _2507 = _2298;
                        _2508 = _2300;
                        _2509 = _2302;
                        _2510 = _2304;
                        _2511 = _2306;
                        _2512 = _2513;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2298;
                frontier_phi_52_53_ladder_1 = _2306;
                frontier_phi_52_53_ladder_2 = _2304;
                frontier_phi_52_53_ladder_3 = _2302;
                frontier_phi_52_53_ladder_4 = _2300;
                frontier_phi_52_53_ladder_5 = _2296;
            }
            else
            {
                frontier_phi_52_53_ladder = _2145;
                frontier_phi_52_53_ladder_1 = _2153;
                frontier_phi_52_53_ladder_2 = _2151;
                frontier_phi_52_53_ladder_3 = _2149;
                frontier_phi_52_53_ladder_4 = _2147;
                frontier_phi_52_53_ladder_5 = _2143;
            }
            _2295 = frontier_phi_52_53_ladder_5;
            _2297 = frontier_phi_52_53_ladder;
            _2299 = frontier_phi_52_53_ladder_4;
            _2301 = frontier_phi_52_53_ladder_3;
            _2303 = frontier_phi_52_53_ladder_2;
            _2305 = frontier_phi_52_53_ladder_1;
        }
        float _2310 = isnan(1.0) ? _646 : (isnan(_646) ? 1.0 : min(_646, 1.0));
        _2065 = (_2310 * _2301) + _1792;
        _2067 = (_2310 * _2303) + _1793;
        _2069 = (_2310 * _2305) + _1794;
        _2071 = ((_2295 * 0.039999999105930328369140625) * _2310) + _1948;
        _2073 = ((_2297 * 0.039999999105930328369140625) * _2310) + _1949;
        _2075 = ((_2299 * 0.039999999105930328369140625) * _2310) + _1950;
    }
    else
    {
        _2065 = _1792;
        _2067 = _1793;
        _2069 = _1794;
        _2071 = _1948;
        _2073 = _1949;
        _2075 = _1950;
    }
    float _3959 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _3970 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _3981 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _2092 = ((isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_2065 + ((isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))) * _646))) + ((_2071 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _1483)) * cbPerFrame._m0[3u].x);
    float _2093 = ((isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * (_2067 + ((isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))) * _646))) + ((_2073 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _1483)) * cbPerFrame._m0[3u].x);
    float _2094 = ((isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_2069 + ((isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))) * _646))) + ((_2075 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _1483)) * cbPerFrame._m0[3u].x);
    float _2095 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2096 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2097 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    uint _2098 = _620 + 6u;
    float _2106 = _580 / cbSceneParam._m0[86u].x;
    float _2107 = _581 / cbSceneParam._m0[86u].y;
    vec4 _2121 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2106, _2107, (log2((isnan(cbSceneParam._m0[77u].w) ? _553 : (isnan(_553) ? cbSceneParam._m0[77u].w : min(_553, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2123 = _2121.x;
    float _2124 = _2121.y;
    float _2125 = _2121.z;
    float _2126 = _2121.w;
    float _2206;
    float _2208;
    float _2210;
    float _2212;
    if (_553 > cbSceneParam._m0[78u].w)
    {
        float _2168 = isnan(_553) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _553 : min(cbSceneParam._m0[80u].w, _553));
        float _2169 = _2168 / _553;
        float _2180 = _2169 * _265;
        float _2181 = _266 * _2169;
        float _2182 = (-0.0) - _2181;
        float _2183 = _2169 * _267;
        float _2185 = (cbSceneParam._m0[77u].w * _2182) / _2168;
        float _2186 = _2185 + cbSceneParam._m0[79u].w;
        float _2187 = cbSceneParam._m0[79u].w - _2181;
        float _2193 = sqrt(((_2180 * _2180) + (_2181 * _2181)) + (_2183 * _2183));
        float _2196 = (1.0 - (cbSceneParam._m0[77u].w / _2168)) * _2193;
        float _2202 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2204 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2437;
        if (abs((_2182 - _2185) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2437 = ((((_2186 > 0.0) ? exp2(_2202 * _2186) : (2.0 - exp2(_2204 * _2186))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2196;
        }
        else
        {
            float _2356 = 1.0 / cbSceneParam._m0[80u].x;
            float _2357 = isnan(_2187) ? _2186 : (isnan(_2186) ? _2187 : max(_2186, _2187));
            float _2358 = isnan(_2187) ? _2186 : (isnan(_2186) ? _2187 : min(_2186, _2187));
            float _2367 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : min(_2357, 0.0));
            float _2368 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : min(_2358, 0.0));
            _2437 = ((abs(_2193 / _2182) * cbSceneParam._m0[80u].y) * ((((_2367 - _2368) * 2.0) - ((exp2(_2202 * (isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0)))) - exp2(_2202 * (isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0))))) * _2356)) - ((exp2(_2204 * _2367) - exp2(_2204 * _2368)) * _2356))) + (_2196 * cbSceneParam._m0[80u].z);
        }
        vec4 _2439 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2106, _2107, 1.0), 0.0);
        float _2448 = exp2((_2437 * (-1.44269502162933349609375)) * (1.0 - _2439.w));
        float _2449 = log2(_2448);
        float _2465 = log2(_2126);
        _2206 = (exp2(_2465 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2449 * cbSceneParam._m0[78u].x)) * _2439.x) / cbSceneParam._m0[78u].x)) + _2123;
        _2208 = (exp2(_2465 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2449 * cbSceneParam._m0[78u].y)) * _2439.y) / cbSceneParam._m0[78u].y)) + _2124;
        _2210 = (exp2(_2465 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2449 * cbSceneParam._m0[78u].z)) * _2439.z) / cbSceneParam._m0[78u].z)) + _2125;
        _2212 = _2448 * _2126;
    }
    else
    {
        _2206 = _2123;
        _2208 = _2124;
        _2210 = _2125;
        _2212 = _2126;
    }
    bool _2475;
    vec4 _2222;
    vec4 _2244;
    float _2246;
    float _2250;
    float _2251;
    float _2252;
    float _2253;
    bool _2263;
    for (;;)
    {
        _2222 = cbMatDynParam._m0[0u];
        float _2224 = roundEven(_2222.y);
        bool _2225 = _2224 == 3.0;
        float _2226 = log2(_2212);
        float _2233 = exp2(_2226 * cbSceneParam._m0[78u].x) * _2095;
        float _2234 = exp2(_2226 * cbSceneParam._m0[78u].y) * _2096;
        float _2235 = exp2(_2226 * cbSceneParam._m0[78u].z) * _2097;
        float _2242 = _567 + (-0.5);
        _2244 = cbMtdParam._m0[1u];
        _2246 = _2244.y * _2242;
        float _2249 = (_2224 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2250 = _2249 * (_2225 ? _2233 : (_2233 + (cbSceneParam._m0[72u].w * _2206)));
        _2251 = _2249 * (_2225 ? _2234 : (_2234 + (cbSceneParam._m0[72u].w * _2208)));
        _2252 = _2249 * (_2225 ? _2235 : (_2235 + (cbSceneParam._m0[72u].w * _2210)));
        _2253 = _2242 * 0.999000012874603271484375;
        _2263 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2263)
        {
            if ((cbInstanceData._m0[_620 + 7u].x + _2253) < 0.5)
            {
                _2475 = true;
                break;
            }
        }
        uint _2391 = _622 + uint(_2222.w);
        if ((cbInstanceData._m0[_2391].w < 1.0) && ((cbInstanceData._m0[_2391].w + _2253) < 0.5))
        {
            _2475 = true;
            break;
        }
        if ((_2246 + 1.0) < _2244.x)
        {
            _2475 = true;
            break;
        }
        _2475 = false;
        break;
    }
    float _2706;
    if (_2475)
    {
        discard_state = true;
        _2706 = 0.0;
    }
    else
    {
        _2706 = cbInstanceData._m0[_2098].w;
    }
    SV_Target.x = _2250;
    SV_Target.y = _2251;
    SV_Target.z = _2252;
    SV_Target.w = _2706;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2098].w;
    discard_exit();
}


